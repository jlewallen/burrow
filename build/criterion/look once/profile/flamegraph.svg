<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1247"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="693" width="0.0802%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2406%" y="597" width="0.0802%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="1"/><text x="0.4906%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3208%" y="597" width="0.0802%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.5708%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4010%" y="581" width="0.0802%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="0.6510%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.0000%" y="741" width="0.6415%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="8"/><text x="0.2500%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (8 samples, 0.64%)</title><rect x="0.0000%" y="725" width="0.6415%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="8"/><text x="0.2500%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.0000%" y="709" width="0.6415%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="8"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (7 samples, 0.56%)</title><rect x="0.0802%" y="693" width="0.5613%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="7"/><text x="0.3302%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0802%" y="677" width="0.5613%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="7"/><text x="0.3302%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0802%" y="661" width="0.5613%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="7"/><text x="0.3302%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (6 samples, 0.48%)</title><rect x="0.1604%" y="645" width="0.4812%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="6"/><text x="0.4104%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="0.2406%" y="629" width="0.4010%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="5"/><text x="0.4906%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.2406%" y="613" width="0.4010%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="5"/><text x="0.4906%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.4010%" y="597" width="0.2406%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="3"/><text x="0.6510%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.4812%" y="581" width="0.1604%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="2"/><text x="0.7312%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.4812%" y="565" width="0.1604%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="2"/><text x="0.7312%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.4812%" y="549" width="0.1604%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="2"/><text x="0.7312%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5613%" y="533" width="0.0802%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="1"/><text x="0.8113%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.8019%" y="629" width="0.0802%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="1"/><text x="1.0519%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.8019%" y="613" width="0.0802%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="1"/><text x="1.0519%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.8019%" y="597" width="0.0802%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="1"/><text x="1.0519%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8019%" y="581" width="0.0802%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="1"/><text x="1.0519%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8019%" y="565" width="0.0802%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="1"/><text x="1.0519%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8019%" y="549" width="0.0802%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="1"/><text x="1.0519%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8019%" y="533" width="0.0802%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="1"/><text x="1.0519%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8019%" y="517" width="0.0802%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="1"/><text x="1.0519%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="0.8019%" y="661" width="0.1604%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="2"/><text x="1.0519%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="0.8019%" y="645" width="0.1604%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="2"/><text x="1.0519%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="0.8821%" y="629" width="0.0802%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="1"/><text x="1.1321%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.8821%" y="613" width="0.0802%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="1"/><text x="1.1321%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.8821%" y="597" width="0.0802%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="1"/><text x="1.1321%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8821%" y="581" width="0.0802%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="1"/><text x="1.1321%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8821%" y="565" width="0.0802%" height="15" fill="rgb(213,181,19)" fg:x="11" fg:w="1"/><text x="1.1321%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8821%" y="549" width="0.0802%" height="15" fill="rgb(254,191,54)" fg:x="11" fg:w="1"/><text x="1.1321%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8821%" y="533" width="0.0802%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="1"/><text x="1.1321%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.8821%" y="517" width="0.0802%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="1"/><text x="1.1321%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8821%" y="501" width="0.0802%" height="15" fill="rgb(226,3,54)" fg:x="11" fg:w="1"/><text x="1.1321%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8821%" y="485" width="0.0802%" height="15" fill="rgb(245,192,40)" fg:x="11" fg:w="1"/><text x="1.1321%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8821%" y="469" width="0.0802%" height="15" fill="rgb(238,167,29)" fg:x="11" fg:w="1"/><text x="1.1321%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.9623%" y="661" width="0.0802%" height="15" fill="rgb(232,182,51)" fg:x="12" fg:w="1"/><text x="1.2123%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.9623%" y="645" width="0.0802%" height="15" fill="rgb(231,60,39)" fg:x="12" fg:w="1"/><text x="1.2123%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.9623%" y="629" width="0.0802%" height="15" fill="rgb(208,69,12)" fg:x="12" fg:w="1"/><text x="1.2123%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.9623%" y="613" width="0.0802%" height="15" fill="rgb(235,93,37)" fg:x="12" fg:w="1"/><text x="1.2123%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.9623%" y="597" width="0.0802%" height="15" fill="rgb(213,116,39)" fg:x="12" fg:w="1"/><text x="1.2123%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.9623%" y="581" width="0.0802%" height="15" fill="rgb(222,207,29)" fg:x="12" fg:w="1"/><text x="1.2123%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.9623%" y="565" width="0.0802%" height="15" fill="rgb(206,96,30)" fg:x="12" fg:w="1"/><text x="1.2123%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.9623%" y="549" width="0.0802%" height="15" fill="rgb(218,138,4)" fg:x="12" fg:w="1"/><text x="1.2123%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.9623%" y="533" width="0.0802%" height="15" fill="rgb(250,191,14)" fg:x="12" fg:w="1"/><text x="1.2123%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.9623%" y="517" width="0.0802%" height="15" fill="rgb(239,60,40)" fg:x="12" fg:w="1"/><text x="1.2123%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.9623%" y="501" width="0.0802%" height="15" fill="rgb(206,27,48)" fg:x="12" fg:w="1"/><text x="1.2123%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.9623%" y="485" width="0.0802%" height="15" fill="rgb(225,35,8)" fg:x="12" fg:w="1"/><text x="1.2123%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.9623%" y="469" width="0.0802%" height="15" fill="rgb(250,213,24)" fg:x="12" fg:w="1"/><text x="1.2123%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="0.9623%" y="453" width="0.0802%" height="15" fill="rgb(247,123,22)" fg:x="12" fg:w="1"/><text x="1.2123%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="0.9623%" y="437" width="0.0802%" height="15" fill="rgb(231,138,38)" fg:x="12" fg:w="1"/><text x="1.2123%" y="447.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="1.0425%" y="661" width="0.0802%" height="15" fill="rgb(231,145,46)" fg:x="13" fg:w="1"/><text x="1.2925%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.0425%" y="645" width="0.0802%" height="15" fill="rgb(251,118,11)" fg:x="13" fg:w="1"/><text x="1.2925%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.0425%" y="629" width="0.0802%" height="15" fill="rgb(217,147,25)" fg:x="13" fg:w="1"/><text x="1.2925%" y="639.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="1.1227%" y="533" width="0.0802%" height="15" fill="rgb(247,81,37)" fg:x="14" fg:w="1"/><text x="1.3727%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.1227%" y="517" width="0.0802%" height="15" fill="rgb(209,12,38)" fg:x="14" fg:w="1"/><text x="1.3727%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="1.1227%" y="501" width="0.0802%" height="15" fill="rgb(227,1,9)" fg:x="14" fg:w="1"/><text x="1.3727%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.1227%" y="485" width="0.0802%" height="15" fill="rgb(248,47,43)" fg:x="14" fg:w="1"/><text x="1.3727%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="1.1227%" y="469" width="0.0802%" height="15" fill="rgb(221,10,30)" fg:x="14" fg:w="1"/><text x="1.3727%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.1227%" y="453" width="0.0802%" height="15" fill="rgb(210,229,1)" fg:x="14" fg:w="1"/><text x="1.3727%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="1.1227%" y="437" width="0.0802%" height="15" fill="rgb(222,148,37)" fg:x="14" fg:w="1"/><text x="1.3727%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="1.1227%" y="421" width="0.0802%" height="15" fill="rgb(234,67,33)" fg:x="14" fg:w="1"/><text x="1.3727%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.1227%" y="405" width="0.0802%" height="15" fill="rgb(247,98,35)" fg:x="14" fg:w="1"/><text x="1.3727%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.1227%" y="389" width="0.0802%" height="15" fill="rgb(247,138,52)" fg:x="14" fg:w="1"/><text x="1.3727%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.1227%" y="373" width="0.0802%" height="15" fill="rgb(213,79,30)" fg:x="14" fg:w="1"/><text x="1.3727%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="1.1227%" y="357" width="0.0802%" height="15" fill="rgb(246,177,23)" fg:x="14" fg:w="1"/><text x="1.3727%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="1.1227%" y="341" width="0.0802%" height="15" fill="rgb(230,62,27)" fg:x="14" fg:w="1"/><text x="1.3727%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="1.2029%" y="533" width="0.0802%" height="15" fill="rgb(216,154,8)" fg:x="15" fg:w="1"/><text x="1.4529%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.2029%" y="517" width="0.0802%" height="15" fill="rgb(244,35,45)" fg:x="15" fg:w="1"/><text x="1.4529%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="1.2029%" y="501" width="0.0802%" height="15" fill="rgb(251,115,12)" fg:x="15" fg:w="1"/><text x="1.4529%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="1.2029%" y="485" width="0.0802%" height="15" fill="rgb(240,54,50)" fg:x="15" fg:w="1"/><text x="1.4529%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="1.2029%" y="469" width="0.0802%" height="15" fill="rgb(233,84,52)" fg:x="15" fg:w="1"/><text x="1.4529%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2029%" y="453" width="0.0802%" height="15" fill="rgb(207,117,47)" fg:x="15" fg:w="1"/><text x="1.4529%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="1.1227%" y="645" width="0.2406%" height="15" fill="rgb(249,43,39)" fg:x="14" fg:w="3"/><text x="1.3727%" y="655.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="1.1227%" y="629" width="0.2406%" height="15" fill="rgb(209,38,44)" fg:x="14" fg:w="3"/><text x="1.3727%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="1.1227%" y="613" width="0.2406%" height="15" fill="rgb(236,212,23)" fg:x="14" fg:w="3"/><text x="1.3727%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="1.1227%" y="597" width="0.2406%" height="15" fill="rgb(242,79,21)" fg:x="14" fg:w="3"/><text x="1.3727%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="1.1227%" y="581" width="0.2406%" height="15" fill="rgb(211,96,35)" fg:x="14" fg:w="3"/><text x="1.3727%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="1.1227%" y="565" width="0.2406%" height="15" fill="rgb(253,215,40)" fg:x="14" fg:w="3"/><text x="1.3727%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="1.1227%" y="549" width="0.2406%" height="15" fill="rgb(211,81,21)" fg:x="14" fg:w="3"/><text x="1.3727%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.2831%" y="533" width="0.0802%" height="15" fill="rgb(208,190,38)" fg:x="16" fg:w="1"/><text x="1.5331%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.2831%" y="517" width="0.0802%" height="15" fill="rgb(235,213,38)" fg:x="16" fg:w="1"/><text x="1.5331%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="1.2831%" y="501" width="0.0802%" height="15" fill="rgb(237,122,38)" fg:x="16" fg:w="1"/><text x="1.5331%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.2831%" y="485" width="0.0802%" height="15" fill="rgb(244,218,35)" fg:x="16" fg:w="1"/><text x="1.5331%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.2831%" y="469" width="0.0802%" height="15" fill="rgb(240,68,47)" fg:x="16" fg:w="1"/><text x="1.5331%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="1.2831%" y="453" width="0.0802%" height="15" fill="rgb(210,16,53)" fg:x="16" fg:w="1"/><text x="1.5331%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.2831%" y="437" width="0.0802%" height="15" fill="rgb(235,124,12)" fg:x="16" fg:w="1"/><text x="1.5331%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.2831%" y="421" width="0.0802%" height="15" fill="rgb(224,169,11)" fg:x="16" fg:w="1"/><text x="1.5331%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="1.2831%" y="405" width="0.0802%" height="15" fill="rgb(250,166,2)" fg:x="16" fg:w="1"/><text x="1.5331%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.2831%" y="389" width="0.0802%" height="15" fill="rgb(242,216,29)" fg:x="16" fg:w="1"/><text x="1.5331%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.2831%" y="373" width="0.0802%" height="15" fill="rgb(230,116,27)" fg:x="16" fg:w="1"/><text x="1.5331%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="1.3633%" y="565" width="0.0802%" height="15" fill="rgb(228,99,48)" fg:x="17" fg:w="1"/><text x="1.6133%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.3633%" y="549" width="0.0802%" height="15" fill="rgb(253,11,6)" fg:x="17" fg:w="1"/><text x="1.6133%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (11 samples, 0.88%)</title><rect x="0.6415%" y="709" width="0.8821%" height="15" fill="rgb(247,143,39)" fg:x="8" fg:w="11"/><text x="0.8915%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (11 samples, 0.88%)</title><rect x="0.6415%" y="693" width="0.8821%" height="15" fill="rgb(236,97,10)" fg:x="8" fg:w="11"/><text x="0.8915%" y="703.50"></text></g><g><title>engine::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="0.6415%" y="677" width="0.8821%" height="15" fill="rgb(233,208,19)" fg:x="8" fg:w="11"/><text x="0.8915%" y="687.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="1.1227%" y="661" width="0.4010%" height="15" fill="rgb(216,164,2)" fg:x="14" fg:w="5"/><text x="1.3727%" y="671.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="1.3633%" y="645" width="0.1604%" height="15" fill="rgb(220,129,5)" fg:x="17" fg:w="2"/><text x="1.6133%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="1.3633%" y="629" width="0.1604%" height="15" fill="rgb(242,17,10)" fg:x="17" fg:w="2"/><text x="1.6133%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="1.3633%" y="613" width="0.1604%" height="15" fill="rgb(242,107,0)" fg:x="17" fg:w="2"/><text x="1.6133%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="1.3633%" y="597" width="0.1604%" height="15" fill="rgb(251,28,31)" fg:x="17" fg:w="2"/><text x="1.6133%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="1.3633%" y="581" width="0.1604%" height="15" fill="rgb(233,223,10)" fg:x="17" fg:w="2"/><text x="1.6133%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.4435%" y="565" width="0.0802%" height="15" fill="rgb(215,21,27)" fg:x="18" fg:w="1"/><text x="1.6935%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.4435%" y="549" width="0.0802%" height="15" fill="rgb(232,23,21)" fg:x="18" fg:w="1"/><text x="1.6935%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.4435%" y="533" width="0.0802%" height="15" fill="rgb(244,5,23)" fg:x="18" fg:w="1"/><text x="1.6935%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.4435%" y="517" width="0.0802%" height="15" fill="rgb(226,81,46)" fg:x="18" fg:w="1"/><text x="1.6935%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.4435%" y="501" width="0.0802%" height="15" fill="rgb(247,70,30)" fg:x="18" fg:w="1"/><text x="1.6935%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.4435%" y="485" width="0.0802%" height="15" fill="rgb(212,68,19)" fg:x="18" fg:w="1"/><text x="1.6935%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.4435%" y="469" width="0.0802%" height="15" fill="rgb(240,187,13)" fg:x="18" fg:w="1"/><text x="1.6935%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.4435%" y="453" width="0.0802%" height="15" fill="rgb(223,113,26)" fg:x="18" fg:w="1"/><text x="1.6935%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.4435%" y="437" width="0.0802%" height="15" fill="rgb(206,192,2)" fg:x="18" fg:w="1"/><text x="1.6935%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.4435%" y="421" width="0.0802%" height="15" fill="rgb(241,108,4)" fg:x="18" fg:w="1"/><text x="1.6935%" y="431.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.64%)</title><rect x="1.5237%" y="693" width="0.6415%" height="15" fill="rgb(247,173,49)" fg:x="19" fg:w="8"/><text x="1.7737%" y="703.50"></text></g><g><title>libloading::os::unix::Library::open (8 samples, 0.64%)</title><rect x="1.5237%" y="677" width="0.6415%" height="15" fill="rgb(224,114,35)" fg:x="19" fg:w="8"/><text x="1.7737%" y="687.50"></text></g><g><title>dlopen (8 samples, 0.64%)</title><rect x="1.5237%" y="661" width="0.6415%" height="15" fill="rgb(245,159,27)" fg:x="19" fg:w="8"/><text x="1.7737%" y="671.50"></text></g><g><title>_dl_catch_error (7 samples, 0.56%)</title><rect x="1.6038%" y="645" width="0.5613%" height="15" fill="rgb(245,172,44)" fg:x="20" fg:w="7"/><text x="1.8538%" y="655.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.56%)</title><rect x="1.6038%" y="629" width="0.5613%" height="15" fill="rgb(236,23,11)" fg:x="20" fg:w="7"/><text x="1.8538%" y="639.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.56%)</title><rect x="1.6038%" y="613" width="0.5613%" height="15" fill="rgb(205,117,38)" fg:x="20" fg:w="7"/><text x="1.8538%" y="623.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.56%)</title><rect x="1.6038%" y="597" width="0.5613%" height="15" fill="rgb(237,72,25)" fg:x="20" fg:w="7"/><text x="1.8538%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (20 samples, 1.60%)</title><rect x="0.6415%" y="741" width="1.6038%" height="15" fill="rgb(244,70,9)" fg:x="8" fg:w="20"/><text x="0.8915%" y="751.50"></text></g><g><title>engine::session::Session::new (20 samples, 1.60%)</title><rect x="0.6415%" y="725" width="1.6038%" height="15" fill="rgb(217,125,39)" fg:x="8" fg:w="20"/><text x="0.8915%" y="735.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (9 samples, 0.72%)</title><rect x="1.5237%" y="709" width="0.7217%" height="15" fill="rgb(235,36,10)" fg:x="19" fg:w="9"/><text x="1.7737%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="2.1652%" y="693" width="0.0802%" height="15" fill="rgb(251,123,47)" fg:x="27" fg:w="1"/><text x="2.4152%" y="703.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="2.1652%" y="677" width="0.0802%" height="15" fill="rgb(221,13,13)" fg:x="27" fg:w="1"/><text x="2.4152%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="2.2454%" y="661" width="0.0802%" height="15" fill="rgb(238,131,9)" fg:x="28" fg:w="1"/><text x="2.4954%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="2.2454%" y="693" width="0.1604%" height="15" fill="rgb(211,50,8)" fg:x="28" fg:w="2"/><text x="2.4954%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="2.2454%" y="677" width="0.1604%" height="15" fill="rgb(245,182,24)" fg:x="28" fg:w="2"/><text x="2.4954%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3256%" y="661" width="0.0802%" height="15" fill="rgb(242,14,37)" fg:x="29" fg:w="1"/><text x="2.5756%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.4058%" y="629" width="0.0802%" height="15" fill="rgb(246,228,12)" fg:x="30" fg:w="1"/><text x="2.6558%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.4058%" y="613" width="0.0802%" height="15" fill="rgb(213,55,15)" fg:x="30" fg:w="1"/><text x="2.6558%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.4058%" y="597" width="0.0802%" height="15" fill="rgb(209,9,3)" fg:x="30" fg:w="1"/><text x="2.6558%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="2.4058%" y="645" width="0.1604%" height="15" fill="rgb(230,59,30)" fg:x="30" fg:w="2"/><text x="2.6558%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.4860%" y="629" width="0.0802%" height="15" fill="rgb(209,121,21)" fg:x="31" fg:w="1"/><text x="2.7360%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.4860%" y="613" width="0.0802%" height="15" fill="rgb(220,109,13)" fg:x="31" fg:w="1"/><text x="2.7360%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.4860%" y="597" width="0.0802%" height="15" fill="rgb(232,18,1)" fg:x="31" fg:w="1"/><text x="2.7360%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.5662%" y="613" width="0.0802%" height="15" fill="rgb(215,41,42)" fg:x="32" fg:w="1"/><text x="2.8162%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.5662%" y="597" width="0.0802%" height="15" fill="rgb(224,123,36)" fg:x="32" fg:w="1"/><text x="2.8162%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.5662%" y="581" width="0.0802%" height="15" fill="rgb(240,125,3)" fg:x="32" fg:w="1"/><text x="2.8162%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.6464%" y="597" width="0.0802%" height="15" fill="rgb(205,98,50)" fg:x="33" fg:w="1"/><text x="2.8964%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.6464%" y="581" width="0.0802%" height="15" fill="rgb(205,185,37)" fg:x="33" fg:w="1"/><text x="2.8964%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7265%" y="597" width="0.0802%" height="15" fill="rgb(238,207,15)" fg:x="34" fg:w="1"/><text x="2.9765%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="2.4058%" y="661" width="0.4812%" height="15" fill="rgb(213,199,42)" fg:x="30" fg:w="6"/><text x="2.6558%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="2.5662%" y="645" width="0.3208%" height="15" fill="rgb(235,201,11)" fg:x="32" fg:w="4"/><text x="2.8162%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="2.5662%" y="629" width="0.3208%" height="15" fill="rgb(207,46,11)" fg:x="32" fg:w="4"/><text x="2.8162%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.6464%" y="613" width="0.2406%" height="15" fill="rgb(241,35,35)" fg:x="33" fg:w="3"/><text x="2.8964%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.8067%" y="597" width="0.0802%" height="15" fill="rgb(243,32,47)" fg:x="35" fg:w="1"/><text x="3.0567%" y="607.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="2.8869%" y="645" width="0.0802%" height="15" fill="rgb(247,202,23)" fg:x="36" fg:w="1"/><text x="3.1369%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.8869%" y="629" width="0.0802%" height="15" fill="rgb(219,102,11)" fg:x="36" fg:w="1"/><text x="3.1369%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.0473%" y="501" width="0.0802%" height="15" fill="rgb(243,110,44)" fg:x="38" fg:w="1"/><text x="3.2973%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1275%" y="469" width="0.0802%" height="15" fill="rgb(222,74,54)" fg:x="39" fg:w="1"/><text x="3.3775%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1275%" y="453" width="0.0802%" height="15" fill="rgb(216,99,12)" fg:x="39" fg:w="1"/><text x="3.3775%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.2077%" y="453" width="0.0802%" height="15" fill="rgb(226,22,26)" fg:x="40" fg:w="1"/><text x="3.4577%" y="463.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.12%)</title><rect x="2.2454%" y="725" width="1.1227%" height="15" fill="rgb(217,163,10)" fg:x="28" fg:w="14"/><text x="2.4954%" y="735.50"></text></g><g><title>engine::session::Session::save_entity_changes (14 samples, 1.12%)</title><rect x="2.2454%" y="709" width="1.1227%" height="15" fill="rgb(213,25,53)" fg:x="28" fg:w="14"/><text x="2.4954%" y="719.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (12 samples, 0.96%)</title><rect x="2.4058%" y="693" width="0.9623%" height="15" fill="rgb(252,105,26)" fg:x="30" fg:w="12"/><text x="2.6558%" y="703.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (12 samples, 0.96%)</title><rect x="2.4058%" y="677" width="0.9623%" height="15" fill="rgb(220,39,43)" fg:x="30" fg:w="12"/><text x="2.6558%" y="687.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="2.8869%" y="661" width="0.4812%" height="15" fill="rgb(229,68,48)" fg:x="36" fg:w="6"/><text x="3.1369%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="2.9671%" y="645" width="0.4010%" height="15" fill="rgb(252,8,32)" fg:x="37" fg:w="5"/><text x="3.2171%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="2.9671%" y="629" width="0.4010%" height="15" fill="rgb(223,20,43)" fg:x="37" fg:w="5"/><text x="3.2171%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="2.9671%" y="613" width="0.4010%" height="15" fill="rgb(229,81,49)" fg:x="37" fg:w="5"/><text x="3.2171%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="2.9671%" y="597" width="0.4010%" height="15" fill="rgb(236,28,36)" fg:x="37" fg:w="5"/><text x="3.2171%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="2.9671%" y="581" width="0.4010%" height="15" fill="rgb(249,185,26)" fg:x="37" fg:w="5"/><text x="3.2171%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="2.9671%" y="565" width="0.4010%" height="15" fill="rgb(249,174,33)" fg:x="37" fg:w="5"/><text x="3.2171%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="2.9671%" y="549" width="0.4010%" height="15" fill="rgb(233,201,37)" fg:x="37" fg:w="5"/><text x="3.2171%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="2.9671%" y="533" width="0.4010%" height="15" fill="rgb(221,78,26)" fg:x="37" fg:w="5"/><text x="3.2171%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="2.9671%" y="517" width="0.4010%" height="15" fill="rgb(250,127,30)" fg:x="37" fg:w="5"/><text x="3.2171%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="3.1275%" y="501" width="0.2406%" height="15" fill="rgb(230,49,44)" fg:x="39" fg:w="3"/><text x="3.3775%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="3.1275%" y="485" width="0.2406%" height="15" fill="rgb(229,67,23)" fg:x="39" fg:w="3"/><text x="3.3775%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="3.2077%" y="469" width="0.1604%" height="15" fill="rgb(249,83,47)" fg:x="40" fg:w="2"/><text x="3.4577%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="3.2879%" y="453" width="0.0802%" height="15" fill="rgb(215,43,3)" fg:x="41" fg:w="1"/><text x="3.5379%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.3681%" y="581" width="0.0802%" height="15" fill="rgb(238,154,13)" fg:x="42" fg:w="1"/><text x="3.6181%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.3681%" y="565" width="0.0802%" height="15" fill="rgb(219,56,2)" fg:x="42" fg:w="1"/><text x="3.6181%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.3681%" y="709" width="0.1604%" height="15" fill="rgb(233,0,4)" fg:x="42" fg:w="2"/><text x="3.6181%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.3681%" y="693" width="0.1604%" height="15" fill="rgb(235,30,7)" fg:x="42" fg:w="2"/><text x="3.6181%" y="703.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="3.3681%" y="677" width="0.1604%" height="15" fill="rgb(250,79,13)" fg:x="42" fg:w="2"/><text x="3.6181%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="3.3681%" y="661" width="0.1604%" height="15" fill="rgb(211,146,34)" fg:x="42" fg:w="2"/><text x="3.6181%" y="671.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="3.3681%" y="645" width="0.1604%" height="15" fill="rgb(228,22,38)" fg:x="42" fg:w="2"/><text x="3.6181%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="3.3681%" y="629" width="0.1604%" height="15" fill="rgb(235,168,5)" fg:x="42" fg:w="2"/><text x="3.6181%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (2 samples, 0.16%)</title><rect x="3.3681%" y="613" width="0.1604%" height="15" fill="rgb(221,155,16)" fg:x="42" fg:w="2"/><text x="3.6181%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="3.3681%" y="597" width="0.1604%" height="15" fill="rgb(215,215,53)" fg:x="42" fg:w="2"/><text x="3.6181%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.4483%" y="581" width="0.0802%" height="15" fill="rgb(223,4,10)" fg:x="43" fg:w="1"/><text x="3.6983%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.4483%" y="565" width="0.0802%" height="15" fill="rgb(234,103,6)" fg:x="43" fg:w="1"/><text x="3.6983%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.5285%" y="693" width="0.0802%" height="15" fill="rgb(227,97,0)" fg:x="44" fg:w="1"/><text x="3.7785%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.5285%" y="677" width="0.0802%" height="15" fill="rgb(234,150,53)" fg:x="44" fg:w="1"/><text x="3.7785%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.5285%" y="661" width="0.0802%" height="15" fill="rgb(228,201,54)" fg:x="44" fg:w="1"/><text x="3.7785%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.5285%" y="645" width="0.0802%" height="15" fill="rgb(222,22,37)" fg:x="44" fg:w="1"/><text x="3.7785%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.5285%" y="629" width="0.0802%" height="15" fill="rgb(237,53,32)" fg:x="44" fg:w="1"/><text x="3.7785%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.5285%" y="613" width="0.0802%" height="15" fill="rgb(233,25,53)" fg:x="44" fg:w="1"/><text x="3.7785%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.5285%" y="597" width="0.0802%" height="15" fill="rgb(210,40,34)" fg:x="44" fg:w="1"/><text x="3.7785%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.5285%" y="581" width="0.0802%" height="15" fill="rgb(241,220,44)" fg:x="44" fg:w="1"/><text x="3.7785%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.5285%" y="565" width="0.0802%" height="15" fill="rgb(235,28,35)" fg:x="44" fg:w="1"/><text x="3.7785%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.5285%" y="549" width="0.0802%" height="15" fill="rgb(210,56,17)" fg:x="44" fg:w="1"/><text x="3.7785%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.5285%" y="533" width="0.0802%" height="15" fill="rgb(224,130,29)" fg:x="44" fg:w="1"/><text x="3.7785%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.5285%" y="517" width="0.0802%" height="15" fill="rgb(235,212,8)" fg:x="44" fg:w="1"/><text x="3.7785%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.5285%" y="501" width="0.0802%" height="15" fill="rgb(223,33,50)" fg:x="44" fg:w="1"/><text x="3.7785%" y="511.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="3.3681%" y="725" width="0.3208%" height="15" fill="rgb(219,149,13)" fg:x="42" fg:w="4"/><text x="3.6181%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="3.5285%" y="709" width="0.1604%" height="15" fill="rgb(250,156,29)" fg:x="44" fg:w="2"/><text x="3.7785%" y="719.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.6087%" y="693" width="0.0802%" height="15" fill="rgb(216,193,19)" fg:x="45" fg:w="1"/><text x="3.8587%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="3.6087%" y="677" width="0.0802%" height="15" fill="rgb(216,135,14)" fg:x="45" fg:w="1"/><text x="3.8587%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.6087%" y="661" width="0.0802%" height="15" fill="rgb(241,47,5)" fg:x="45" fg:w="1"/><text x="3.8587%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="3.6087%" y="645" width="0.0802%" height="15" fill="rgb(233,42,35)" fg:x="45" fg:w="1"/><text x="3.8587%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.6087%" y="629" width="0.0802%" height="15" fill="rgb(231,13,6)" fg:x="45" fg:w="1"/><text x="3.8587%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.6087%" y="613" width="0.0802%" height="15" fill="rgb(207,181,40)" fg:x="45" fg:w="1"/><text x="3.8587%" y="623.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.6889%" y="725" width="0.0802%" height="15" fill="rgb(254,173,49)" fg:x="46" fg:w="1"/><text x="3.9389%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.6889%" y="709" width="0.0802%" height="15" fill="rgb(221,1,38)" fg:x="46" fg:w="1"/><text x="3.9389%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.6889%" y="693" width="0.0802%" height="15" fill="rgb(206,124,46)" fg:x="46" fg:w="1"/><text x="3.9389%" y="703.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.6889%" y="677" width="0.0802%" height="15" fill="rgb(249,21,11)" fg:x="46" fg:w="1"/><text x="3.9389%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.6889%" y="661" width="0.0802%" height="15" fill="rgb(222,201,40)" fg:x="46" fg:w="1"/><text x="3.9389%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.6889%" y="645" width="0.0802%" height="15" fill="rgb(235,61,29)" fg:x="46" fg:w="1"/><text x="3.9389%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.6889%" y="629" width="0.0802%" height="15" fill="rgb(219,207,3)" fg:x="46" fg:w="1"/><text x="3.9389%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6889%" y="613" width="0.0802%" height="15" fill="rgb(222,56,46)" fg:x="46" fg:w="1"/><text x="3.9389%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6889%" y="597" width="0.0802%" height="15" fill="rgb(239,76,54)" fg:x="46" fg:w="1"/><text x="3.9389%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6889%" y="581" width="0.0802%" height="15" fill="rgb(231,124,27)" fg:x="46" fg:w="1"/><text x="3.9389%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6889%" y="565" width="0.0802%" height="15" fill="rgb(249,195,6)" fg:x="46" fg:w="1"/><text x="3.9389%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.6889%" y="549" width="0.0802%" height="15" fill="rgb(237,174,47)" fg:x="46" fg:w="1"/><text x="3.9389%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.6889%" y="533" width="0.0802%" height="15" fill="rgb(206,201,31)" fg:x="46" fg:w="1"/><text x="3.9389%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.6889%" y="517" width="0.0802%" height="15" fill="rgb(231,57,52)" fg:x="46" fg:w="1"/><text x="3.9389%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.6889%" y="501" width="0.0802%" height="15" fill="rgb(248,177,22)" fg:x="46" fg:w="1"/><text x="3.9389%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.6889%" y="485" width="0.0802%" height="15" fill="rgb(215,211,37)" fg:x="46" fg:w="1"/><text x="3.9389%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.6889%" y="469" width="0.0802%" height="15" fill="rgb(241,128,51)" fg:x="46" fg:w="1"/><text x="3.9389%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.6889%" y="453" width="0.0802%" height="15" fill="rgb(227,165,31)" fg:x="46" fg:w="1"/><text x="3.9389%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.6889%" y="437" width="0.0802%" height="15" fill="rgb(228,167,24)" fg:x="46" fg:w="1"/><text x="3.9389%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="3.6889%" y="421" width="0.0802%" height="15" fill="rgb(228,143,12)" fg:x="46" fg:w="1"/><text x="3.9389%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="3.6889%" y="405" width="0.0802%" height="15" fill="rgb(249,149,8)" fg:x="46" fg:w="1"/><text x="3.9389%" y="415.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.7690%" y="725" width="0.0802%" height="15" fill="rgb(243,35,44)" fg:x="47" fg:w="1"/><text x="4.0190%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.7690%" y="709" width="0.0802%" height="15" fill="rgb(246,89,9)" fg:x="47" fg:w="1"/><text x="4.0190%" y="719.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="3.7690%" y="693" width="0.0802%" height="15" fill="rgb(233,213,13)" fg:x="47" fg:w="1"/><text x="4.0190%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.7690%" y="677" width="0.0802%" height="15" fill="rgb(233,141,41)" fg:x="47" fg:w="1"/><text x="4.0190%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.7690%" y="661" width="0.0802%" height="15" fill="rgb(239,167,4)" fg:x="47" fg:w="1"/><text x="4.0190%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.7690%" y="645" width="0.0802%" height="15" fill="rgb(209,217,16)" fg:x="47" fg:w="1"/><text x="4.0190%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8492%" y="613" width="0.0802%" height="15" fill="rgb(219,88,35)" fg:x="48" fg:w="1"/><text x="4.0992%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8492%" y="597" width="0.0802%" height="15" fill="rgb(220,193,23)" fg:x="48" fg:w="1"/><text x="4.0992%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8492%" y="581" width="0.0802%" height="15" fill="rgb(230,90,52)" fg:x="48" fg:w="1"/><text x="4.0992%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8492%" y="565" width="0.0802%" height="15" fill="rgb(252,106,19)" fg:x="48" fg:w="1"/><text x="4.0992%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.8492%" y="709" width="0.1604%" height="15" fill="rgb(206,74,20)" fg:x="48" fg:w="2"/><text x="4.0992%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.8492%" y="693" width="0.1604%" height="15" fill="rgb(230,138,44)" fg:x="48" fg:w="2"/><text x="4.0992%" y="703.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="3.8492%" y="677" width="0.1604%" height="15" fill="rgb(235,182,43)" fg:x="48" fg:w="2"/><text x="4.0992%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.8492%" y="661" width="0.1604%" height="15" fill="rgb(242,16,51)" fg:x="48" fg:w="2"/><text x="4.0992%" y="671.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.8492%" y="645" width="0.1604%" height="15" fill="rgb(248,9,4)" fg:x="48" fg:w="2"/><text x="4.0992%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.8492%" y="629" width="0.1604%" height="15" fill="rgb(210,31,22)" fg:x="48" fg:w="2"/><text x="4.0992%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.9294%" y="613" width="0.0802%" height="15" fill="rgb(239,54,39)" fg:x="49" fg:w="1"/><text x="4.1794%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9294%" y="597" width="0.0802%" height="15" fill="rgb(230,99,41)" fg:x="49" fg:w="1"/><text x="4.1794%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.9294%" y="581" width="0.0802%" height="15" fill="rgb(253,106,12)" fg:x="49" fg:w="1"/><text x="4.1794%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9294%" y="565" width="0.0802%" height="15" fill="rgb(213,46,41)" fg:x="49" fg:w="1"/><text x="4.1794%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.9294%" y="549" width="0.0802%" height="15" fill="rgb(215,133,35)" fg:x="49" fg:w="1"/><text x="4.1794%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9294%" y="533" width="0.0802%" height="15" fill="rgb(213,28,5)" fg:x="49" fg:w="1"/><text x="4.1794%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.9294%" y="517" width="0.0802%" height="15" fill="rgb(215,77,49)" fg:x="49" fg:w="1"/><text x="4.1794%" y="527.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="4.0096%" y="613" width="0.0802%" height="15" fill="rgb(248,100,22)" fg:x="50" fg:w="1"/><text x="4.2596%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.0096%" y="597" width="0.0802%" height="15" fill="rgb(208,67,9)" fg:x="50" fg:w="1"/><text x="4.2596%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.0096%" y="581" width="0.0802%" height="15" fill="rgb(219,133,21)" fg:x="50" fg:w="1"/><text x="4.2596%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.0096%" y="565" width="0.0802%" height="15" fill="rgb(246,46,29)" fg:x="50" fg:w="1"/><text x="4.2596%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0096%" y="549" width="0.0802%" height="15" fill="rgb(246,185,52)" fg:x="50" fg:w="1"/><text x="4.2596%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0096%" y="533" width="0.0802%" height="15" fill="rgb(252,136,11)" fg:x="50" fg:w="1"/><text x="4.2596%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0096%" y="517" width="0.0802%" height="15" fill="rgb(219,138,53)" fg:x="50" fg:w="1"/><text x="4.2596%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0096%" y="501" width="0.0802%" height="15" fill="rgb(211,51,23)" fg:x="50" fg:w="1"/><text x="4.2596%" y="511.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="4.0096%" y="661" width="0.1604%" height="15" fill="rgb(247,221,28)" fg:x="50" fg:w="2"/><text x="4.2596%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.0096%" y="645" width="0.1604%" height="15" fill="rgb(251,222,45)" fg:x="50" fg:w="2"/><text x="4.2596%" y="655.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="4.0096%" y="629" width="0.1604%" height="15" fill="rgb(217,162,53)" fg:x="50" fg:w="2"/><text x="4.2596%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.0898%" y="613" width="0.0802%" height="15" fill="rgb(229,93,14)" fg:x="51" fg:w="1"/><text x="4.3398%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.0898%" y="597" width="0.0802%" height="15" fill="rgb(209,67,49)" fg:x="51" fg:w="1"/><text x="4.3398%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.0898%" y="581" width="0.0802%" height="15" fill="rgb(213,87,29)" fg:x="51" fg:w="1"/><text x="4.3398%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.0898%" y="565" width="0.0802%" height="15" fill="rgb(205,151,52)" fg:x="51" fg:w="1"/><text x="4.3398%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.0898%" y="549" width="0.0802%" height="15" fill="rgb(253,215,39)" fg:x="51" fg:w="1"/><text x="4.3398%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.0898%" y="533" width="0.0802%" height="15" fill="rgb(221,220,41)" fg:x="51" fg:w="1"/><text x="4.3398%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.0898%" y="517" width="0.0802%" height="15" fill="rgb(218,133,21)" fg:x="51" fg:w="1"/><text x="4.3398%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.0898%" y="501" width="0.0802%" height="15" fill="rgb(221,193,43)" fg:x="51" fg:w="1"/><text x="4.3398%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.0898%" y="485" width="0.0802%" height="15" fill="rgb(240,128,52)" fg:x="51" fg:w="1"/><text x="4.3398%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.0898%" y="469" width="0.0802%" height="15" fill="rgb(253,114,12)" fg:x="51" fg:w="1"/><text x="4.3398%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.0898%" y="453" width="0.0802%" height="15" fill="rgb(215,223,47)" fg:x="51" fg:w="1"/><text x="4.3398%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.0898%" y="437" width="0.0802%" height="15" fill="rgb(248,225,23)" fg:x="51" fg:w="1"/><text x="4.3398%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="4.0898%" y="421" width="0.0802%" height="15" fill="rgb(250,108,0)" fg:x="51" fg:w="1"/><text x="4.3398%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="4.1700%" y="629" width="0.0802%" height="15" fill="rgb(228,208,7)" fg:x="52" fg:w="1"/><text x="4.4200%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="4.1700%" y="613" width="0.0802%" height="15" fill="rgb(244,45,10)" fg:x="52" fg:w="1"/><text x="4.4200%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.1700%" y="597" width="0.0802%" height="15" fill="rgb(207,125,25)" fg:x="52" fg:w="1"/><text x="4.4200%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.1700%" y="581" width="0.0802%" height="15" fill="rgb(210,195,18)" fg:x="52" fg:w="1"/><text x="4.4200%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.1700%" y="565" width="0.0802%" height="15" fill="rgb(249,80,12)" fg:x="52" fg:w="1"/><text x="4.4200%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.1700%" y="549" width="0.0802%" height="15" fill="rgb(221,65,9)" fg:x="52" fg:w="1"/><text x="4.4200%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="4.1700%" y="533" width="0.0802%" height="15" fill="rgb(235,49,36)" fg:x="52" fg:w="1"/><text x="4.4200%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.1700%" y="517" width="0.0802%" height="15" fill="rgb(225,32,20)" fg:x="52" fg:w="1"/><text x="4.4200%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.1700%" y="501" width="0.0802%" height="15" fill="rgb(215,141,46)" fg:x="52" fg:w="1"/><text x="4.4200%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.1700%" y="485" width="0.0802%" height="15" fill="rgb(250,160,47)" fg:x="52" fg:w="1"/><text x="4.4200%" y="495.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="4.1700%" y="469" width="0.0802%" height="15" fill="rgb(216,222,40)" fg:x="52" fg:w="1"/><text x="4.4200%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.1700%" y="453" width="0.0802%" height="15" fill="rgb(234,217,39)" fg:x="52" fg:w="1"/><text x="4.4200%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.1700%" y="437" width="0.0802%" height="15" fill="rgb(207,178,40)" fg:x="52" fg:w="1"/><text x="4.4200%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.1700%" y="421" width="0.0802%" height="15" fill="rgb(221,136,13)" fg:x="52" fg:w="1"/><text x="4.4200%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.1700%" y="405" width="0.0802%" height="15" fill="rgb(249,199,10)" fg:x="52" fg:w="1"/><text x="4.4200%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.1700%" y="389" width="0.0802%" height="15" fill="rgb(249,222,13)" fg:x="52" fg:w="1"/><text x="4.4200%" y="399.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="4.1700%" y="373" width="0.0802%" height="15" fill="rgb(244,185,38)" fg:x="52" fg:w="1"/><text x="4.4200%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="4.1700%" y="357" width="0.0802%" height="15" fill="rgb(236,202,9)" fg:x="52" fg:w="1"/><text x="4.4200%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="4.1700%" y="341" width="0.0802%" height="15" fill="rgb(250,229,37)" fg:x="52" fg:w="1"/><text x="4.4200%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="4.1700%" y="325" width="0.0802%" height="15" fill="rgb(206,174,23)" fg:x="52" fg:w="1"/><text x="4.4200%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.1700%" y="309" width="0.0802%" height="15" fill="rgb(211,33,43)" fg:x="52" fg:w="1"/><text x="4.4200%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.1700%" y="293" width="0.0802%" height="15" fill="rgb(245,58,50)" fg:x="52" fg:w="1"/><text x="4.4200%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.1700%" y="277" width="0.0802%" height="15" fill="rgb(244,68,36)" fg:x="52" fg:w="1"/><text x="4.4200%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="4.1700%" y="261" width="0.0802%" height="15" fill="rgb(232,229,15)" fg:x="52" fg:w="1"/><text x="4.4200%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.1700%" y="245" width="0.0802%" height="15" fill="rgb(254,30,23)" fg:x="52" fg:w="1"/><text x="4.4200%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="4.1700%" y="229" width="0.0802%" height="15" fill="rgb(235,160,14)" fg:x="52" fg:w="1"/><text x="4.4200%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="4.1700%" y="213" width="0.0802%" height="15" fill="rgb(212,155,44)" fg:x="52" fg:w="1"/><text x="4.4200%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="4.1700%" y="197" width="0.0802%" height="15" fill="rgb(226,2,50)" fg:x="52" fg:w="1"/><text x="4.4200%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.1700%" y="181" width="0.0802%" height="15" fill="rgb(234,177,6)" fg:x="52" fg:w="1"/><text x="4.4200%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2502%" y="549" width="0.0802%" height="15" fill="rgb(217,24,9)" fg:x="53" fg:w="1"/><text x="4.5002%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2502%" y="533" width="0.0802%" height="15" fill="rgb(220,13,46)" fg:x="53" fg:w="1"/><text x="4.5002%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.2502%" y="597" width="0.1604%" height="15" fill="rgb(239,221,27)" fg:x="53" fg:w="2"/><text x="4.5002%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.2502%" y="581" width="0.1604%" height="15" fill="rgb(222,198,25)" fg:x="53" fg:w="2"/><text x="4.5002%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.2502%" y="565" width="0.1604%" height="15" fill="rgb(211,99,13)" fg:x="53" fg:w="2"/><text x="4.5002%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.3304%" y="549" width="0.0802%" height="15" fill="rgb(232,111,31)" fg:x="54" fg:w="1"/><text x="4.5804%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.3304%" y="533" width="0.0802%" height="15" fill="rgb(245,82,37)" fg:x="54" fg:w="1"/><text x="4.5804%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.3304%" y="517" width="0.0802%" height="15" fill="rgb(227,149,46)" fg:x="54" fg:w="1"/><text x="4.5804%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.3304%" y="501" width="0.0802%" height="15" fill="rgb(218,36,50)" fg:x="54" fg:w="1"/><text x="4.5804%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.3304%" y="485" width="0.0802%" height="15" fill="rgb(226,80,48)" fg:x="54" fg:w="1"/><text x="4.5804%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.3304%" y="469" width="0.0802%" height="15" fill="rgb(238,224,15)" fg:x="54" fg:w="1"/><text x="4.5804%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.3304%" y="453" width="0.0802%" height="15" fill="rgb(241,136,10)" fg:x="54" fg:w="1"/><text x="4.5804%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="4.3304%" y="437" width="0.0802%" height="15" fill="rgb(208,32,45)" fg:x="54" fg:w="1"/><text x="4.5804%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="4.1700%" y="645" width="0.3208%" height="15" fill="rgb(207,135,9)" fg:x="52" fg:w="4"/><text x="4.4200%" y="655.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="4.2502%" y="629" width="0.2406%" height="15" fill="rgb(206,86,44)" fg:x="53" fg:w="3"/><text x="4.5002%" y="639.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="4.2502%" y="613" width="0.2406%" height="15" fill="rgb(245,177,15)" fg:x="53" fg:w="3"/><text x="4.5002%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="4.4106%" y="597" width="0.0802%" height="15" fill="rgb(206,64,50)" fg:x="55" fg:w="1"/><text x="4.6606%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.4106%" y="581" width="0.0802%" height="15" fill="rgb(234,36,40)" fg:x="55" fg:w="1"/><text x="4.6606%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.4106%" y="565" width="0.0802%" height="15" fill="rgb(213,64,8)" fg:x="55" fg:w="1"/><text x="4.6606%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.4106%" y="549" width="0.0802%" height="15" fill="rgb(210,75,36)" fg:x="55" fg:w="1"/><text x="4.6606%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.4106%" y="533" width="0.0802%" height="15" fill="rgb(229,88,21)" fg:x="55" fg:w="1"/><text x="4.6606%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.4106%" y="517" width="0.0802%" height="15" fill="rgb(252,204,47)" fg:x="55" fg:w="1"/><text x="4.6606%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.4106%" y="501" width="0.0802%" height="15" fill="rgb(208,77,27)" fg:x="55" fg:w="1"/><text x="4.6606%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.4908%" y="597" width="0.0802%" height="15" fill="rgb(221,76,26)" fg:x="56" fg:w="1"/><text x="4.7408%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.4908%" y="581" width="0.0802%" height="15" fill="rgb(225,139,18)" fg:x="56" fg:w="1"/><text x="4.7408%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.4908%" y="565" width="0.0802%" height="15" fill="rgb(230,137,11)" fg:x="56" fg:w="1"/><text x="4.7408%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4908%" y="549" width="0.0802%" height="15" fill="rgb(212,28,1)" fg:x="56" fg:w="1"/><text x="4.7408%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4908%" y="533" width="0.0802%" height="15" fill="rgb(248,164,17)" fg:x="56" fg:w="1"/><text x="4.7408%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4908%" y="517" width="0.0802%" height="15" fill="rgb(222,171,42)" fg:x="56" fg:w="1"/><text x="4.7408%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4908%" y="501" width="0.0802%" height="15" fill="rgb(243,84,45)" fg:x="56" fg:w="1"/><text x="4.7408%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4908%" y="485" width="0.0802%" height="15" fill="rgb(252,49,23)" fg:x="56" fg:w="1"/><text x="4.7408%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4908%" y="469" width="0.0802%" height="15" fill="rgb(215,19,7)" fg:x="56" fg:w="1"/><text x="4.7408%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.5710%" y="469" width="0.0802%" height="15" fill="rgb(238,81,41)" fg:x="57" fg:w="1"/><text x="4.8210%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.5710%" y="453" width="0.0802%" height="15" fill="rgb(210,199,37)" fg:x="57" fg:w="1"/><text x="4.8210%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.5710%" y="437" width="0.0802%" height="15" fill="rgb(244,192,49)" fg:x="57" fg:w="1"/><text x="4.8210%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.5710%" y="421" width="0.0802%" height="15" fill="rgb(226,211,11)" fg:x="57" fg:w="1"/><text x="4.8210%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.5710%" y="405" width="0.0802%" height="15" fill="rgb(236,162,54)" fg:x="57" fg:w="1"/><text x="4.8210%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.5710%" y="389" width="0.0802%" height="15" fill="rgb(220,229,9)" fg:x="57" fg:w="1"/><text x="4.8210%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.5710%" y="373" width="0.0802%" height="15" fill="rgb(250,87,22)" fg:x="57" fg:w="1"/><text x="4.8210%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.5710%" y="357" width="0.0802%" height="15" fill="rgb(239,43,17)" fg:x="57" fg:w="1"/><text x="4.8210%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.5710%" y="341" width="0.0802%" height="15" fill="rgb(231,177,25)" fg:x="57" fg:w="1"/><text x="4.8210%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.5710%" y="325" width="0.0802%" height="15" fill="rgb(219,179,1)" fg:x="57" fg:w="1"/><text x="4.8210%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.5710%" y="309" width="0.0802%" height="15" fill="rgb(238,219,53)" fg:x="57" fg:w="1"/><text x="4.8210%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5710%" y="293" width="0.0802%" height="15" fill="rgb(232,167,36)" fg:x="57" fg:w="1"/><text x="4.8210%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.72%)</title><rect x="4.0096%" y="709" width="0.7217%" height="15" fill="rgb(244,19,51)" fg:x="50" fg:w="9"/><text x="4.2596%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="4.0096%" y="693" width="0.7217%" height="15" fill="rgb(224,6,22)" fg:x="50" fg:w="9"/><text x="4.2596%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (9 samples, 0.72%)</title><rect x="4.0096%" y="677" width="0.7217%" height="15" fill="rgb(224,145,5)" fg:x="50" fg:w="9"/><text x="4.2596%" y="687.50"></text></g><g><title>plugins_core::build::Build::leads_to (7 samples, 0.56%)</title><rect x="4.1700%" y="661" width="0.5613%" height="15" fill="rgb(234,130,49)" fg:x="52" fg:w="7"/><text x="4.4200%" y="671.50"></text></g><g><title>plugins_core::tools::leads_to (3 samples, 0.24%)</title><rect x="4.4908%" y="645" width="0.2406%" height="15" fill="rgb(254,6,2)" fg:x="56" fg:w="3"/><text x="4.7408%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="4.4908%" y="629" width="0.2406%" height="15" fill="rgb(208,96,46)" fg:x="56" fg:w="3"/><text x="4.7408%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="4.4908%" y="613" width="0.2406%" height="15" fill="rgb(239,3,39)" fg:x="56" fg:w="3"/><text x="4.7408%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="4.5710%" y="597" width="0.1604%" height="15" fill="rgb(233,210,1)" fg:x="57" fg:w="2"/><text x="4.8210%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.5710%" y="581" width="0.1604%" height="15" fill="rgb(244,137,37)" fg:x="57" fg:w="2"/><text x="4.8210%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.5710%" y="565" width="0.1604%" height="15" fill="rgb(240,136,2)" fg:x="57" fg:w="2"/><text x="4.8210%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.5710%" y="549" width="0.1604%" height="15" fill="rgb(239,18,37)" fg:x="57" fg:w="2"/><text x="4.8210%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.5710%" y="533" width="0.1604%" height="15" fill="rgb(218,185,22)" fg:x="57" fg:w="2"/><text x="4.8210%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.5710%" y="517" width="0.1604%" height="15" fill="rgb(225,218,4)" fg:x="57" fg:w="2"/><text x="4.8210%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.5710%" y="501" width="0.1604%" height="15" fill="rgb(230,182,32)" fg:x="57" fg:w="2"/><text x="4.8210%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.5710%" y="485" width="0.1604%" height="15" fill="rgb(242,56,43)" fg:x="57" fg:w="2"/><text x="4.8210%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.6512%" y="469" width="0.0802%" height="15" fill="rgb(233,99,24)" fg:x="58" fg:w="1"/><text x="4.9012%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="4.7314%" y="677" width="0.1604%" height="15" fill="rgb(234,209,42)" fg:x="59" fg:w="2"/><text x="4.9814%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.8115%" y="661" width="0.0802%" height="15" fill="rgb(227,7,12)" fg:x="60" fg:w="1"/><text x="5.0615%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8917%" y="645" width="0.0802%" height="15" fill="rgb(245,203,43)" fg:x="61" fg:w="1"/><text x="5.1417%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8917%" y="629" width="0.0802%" height="15" fill="rgb(238,205,33)" fg:x="61" fg:w="1"/><text x="5.1417%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.8917%" y="613" width="0.0802%" height="15" fill="rgb(231,56,7)" fg:x="61" fg:w="1"/><text x="5.1417%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.8917%" y="597" width="0.0802%" height="15" fill="rgb(244,186,29)" fg:x="61" fg:w="1"/><text x="5.1417%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.8917%" y="581" width="0.0802%" height="15" fill="rgb(234,111,31)" fg:x="61" fg:w="1"/><text x="5.1417%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.8917%" y="565" width="0.0802%" height="15" fill="rgb(241,149,10)" fg:x="61" fg:w="1"/><text x="5.1417%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.8917%" y="549" width="0.0802%" height="15" fill="rgb(249,206,44)" fg:x="61" fg:w="1"/><text x="5.1417%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.8917%" y="533" width="0.0802%" height="15" fill="rgb(251,153,30)" fg:x="61" fg:w="1"/><text x="5.1417%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.8917%" y="517" width="0.0802%" height="15" fill="rgb(239,152,38)" fg:x="61" fg:w="1"/><text x="5.1417%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.8917%" y="501" width="0.0802%" height="15" fill="rgb(249,139,47)" fg:x="61" fg:w="1"/><text x="5.1417%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.8917%" y="485" width="0.0802%" height="15" fill="rgb(244,64,35)" fg:x="61" fg:w="1"/><text x="5.1417%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8917%" y="469" width="0.0802%" height="15" fill="rgb(216,46,15)" fg:x="61" fg:w="1"/><text x="5.1417%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.0521%" y="613" width="0.0802%" height="15" fill="rgb(250,74,19)" fg:x="63" fg:w="1"/><text x="5.3021%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.0521%" y="597" width="0.0802%" height="15" fill="rgb(249,42,33)" fg:x="63" fg:w="1"/><text x="5.3021%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.0521%" y="581" width="0.0802%" height="15" fill="rgb(242,149,17)" fg:x="63" fg:w="1"/><text x="5.3021%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.1323%" y="613" width="0.1604%" height="15" fill="rgb(244,29,21)" fg:x="64" fg:w="2"/><text x="5.3823%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.1323%" y="597" width="0.1604%" height="15" fill="rgb(220,130,37)" fg:x="64" fg:w="2"/><text x="5.3823%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.1323%" y="581" width="0.1604%" height="15" fill="rgb(211,67,2)" fg:x="64" fg:w="2"/><text x="5.3823%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="5.1323%" y="565" width="0.1604%" height="15" fill="rgb(235,68,52)" fg:x="64" fg:w="2"/><text x="5.3823%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.3729%" y="565" width="0.0802%" height="15" fill="rgb(246,142,3)" fg:x="67" fg:w="1"/><text x="5.6229%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3729%" y="549" width="0.0802%" height="15" fill="rgb(241,25,7)" fg:x="67" fg:w="1"/><text x="5.6229%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3729%" y="533" width="0.0802%" height="15" fill="rgb(242,119,39)" fg:x="67" fg:w="1"/><text x="5.6229%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.3729%" y="517" width="0.0802%" height="15" fill="rgb(241,98,45)" fg:x="67" fg:w="1"/><text x="5.6229%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="5.3729%" y="597" width="0.2406%" height="15" fill="rgb(254,28,30)" fg:x="67" fg:w="3"/><text x="5.6229%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.3729%" y="581" width="0.2406%" height="15" fill="rgb(241,142,54)" fg:x="67" fg:w="3"/><text x="5.6229%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.4531%" y="565" width="0.1604%" height="15" fill="rgb(222,85,15)" fg:x="68" fg:w="2"/><text x="5.7031%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.4531%" y="549" width="0.1604%" height="15" fill="rgb(210,85,47)" fg:x="68" fg:w="2"/><text x="5.7031%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.4531%" y="533" width="0.1604%" height="15" fill="rgb(224,206,25)" fg:x="68" fg:w="2"/><text x="5.7031%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.5333%" y="517" width="0.0802%" height="15" fill="rgb(243,201,19)" fg:x="69" fg:w="1"/><text x="5.7833%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.6135%" y="597" width="0.0802%" height="15" fill="rgb(236,59,4)" fg:x="70" fg:w="1"/><text x="5.8635%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.6135%" y="581" width="0.0802%" height="15" fill="rgb(254,179,45)" fg:x="70" fg:w="1"/><text x="5.8635%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.6135%" y="565" width="0.0802%" height="15" fill="rgb(226,14,10)" fg:x="70" fg:w="1"/><text x="5.8635%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.6135%" y="549" width="0.0802%" height="15" fill="rgb(244,27,41)" fg:x="70" fg:w="1"/><text x="5.8635%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.7739%" y="549" width="0.0802%" height="15" fill="rgb(235,35,32)" fg:x="72" fg:w="1"/><text x="6.0239%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7739%" y="533" width="0.0802%" height="15" fill="rgb(218,68,31)" fg:x="72" fg:w="1"/><text x="6.0239%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.7739%" y="581" width="0.2406%" height="15" fill="rgb(207,120,37)" fg:x="72" fg:w="3"/><text x="6.0239%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.7739%" y="565" width="0.2406%" height="15" fill="rgb(227,98,0)" fg:x="72" fg:w="3"/><text x="6.0239%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.8540%" y="549" width="0.1604%" height="15" fill="rgb(207,7,3)" fg:x="73" fg:w="2"/><text x="6.1040%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.9342%" y="533" width="0.0802%" height="15" fill="rgb(206,98,19)" fg:x="74" fg:w="1"/><text x="6.1842%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.9342%" y="517" width="0.0802%" height="15" fill="rgb(217,5,26)" fg:x="74" fg:w="1"/><text x="6.1842%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="5.6937%" y="597" width="0.4010%" height="15" fill="rgb(235,190,38)" fg:x="71" fg:w="5"/><text x="5.9437%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.0144%" y="581" width="0.0802%" height="15" fill="rgb(247,86,24)" fg:x="75" fg:w="1"/><text x="6.2644%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="5.2927%" y="613" width="0.8821%" height="15" fill="rgb(205,101,16)" fg:x="66" fg:w="11"/><text x="5.5427%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.0946%" y="597" width="0.0802%" height="15" fill="rgb(246,168,33)" fg:x="76" fg:w="1"/><text x="6.3446%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.28%)</title><rect x="4.9719%" y="629" width="1.2831%" height="15" fill="rgb(231,114,1)" fg:x="62" fg:w="16"/><text x="5.2219%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.1748%" y="613" width="0.0802%" height="15" fill="rgb(207,184,53)" fg:x="77" fg:w="1"/><text x="6.4248%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.1748%" y="597" width="0.0802%" height="15" fill="rgb(224,95,51)" fg:x="77" fg:w="1"/><text x="6.4248%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (17 samples, 1.36%)</title><rect x="4.9719%" y="645" width="1.3633%" height="15" fill="rgb(212,188,45)" fg:x="62" fg:w="17"/><text x="5.2219%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2550%" y="629" width="0.0802%" height="15" fill="rgb(223,154,38)" fg:x="78" fg:w="1"/><text x="6.5050%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.2550%" y="613" width="0.0802%" height="15" fill="rgb(251,22,52)" fg:x="78" fg:w="1"/><text x="6.5050%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.2550%" y="597" width="0.0802%" height="15" fill="rgb(229,209,22)" fg:x="78" fg:w="1"/><text x="6.5050%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.4154%" y="597" width="0.0802%" height="15" fill="rgb(234,138,34)" fg:x="80" fg:w="1"/><text x="6.6654%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.3352%" y="645" width="0.2406%" height="15" fill="rgb(212,95,11)" fg:x="79" fg:w="3"/><text x="6.5852%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="6.3352%" y="629" width="0.2406%" height="15" fill="rgb(240,179,47)" fg:x="79" fg:w="3"/><text x="6.5852%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.4154%" y="613" width="0.1604%" height="15" fill="rgb(240,163,11)" fg:x="80" fg:w="2"/><text x="6.6654%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4956%" y="597" width="0.0802%" height="15" fill="rgb(236,37,12)" fg:x="81" fg:w="1"/><text x="6.7456%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4956%" y="581" width="0.0802%" height="15" fill="rgb(232,164,16)" fg:x="81" fg:w="1"/><text x="6.7456%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4956%" y="565" width="0.0802%" height="15" fill="rgb(244,205,15)" fg:x="81" fg:w="1"/><text x="6.7456%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4956%" y="549" width="0.0802%" height="15" fill="rgb(223,117,47)" fg:x="81" fg:w="1"/><text x="6.7456%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.4956%" y="533" width="0.0802%" height="15" fill="rgb(244,107,35)" fg:x="81" fg:w="1"/><text x="6.7456%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5758%" y="597" width="0.0802%" height="15" fill="rgb(205,140,8)" fg:x="82" fg:w="1"/><text x="6.8258%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="6.6560%" y="597" width="0.0802%" height="15" fill="rgb(228,84,46)" fg:x="83" fg:w="1"/><text x="6.9060%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.6560%" y="581" width="0.0802%" height="15" fill="rgb(254,188,9)" fg:x="83" fg:w="1"/><text x="6.9060%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6560%" y="565" width="0.0802%" height="15" fill="rgb(206,112,54)" fg:x="83" fg:w="1"/><text x="6.9060%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.8164%" y="549" width="0.1604%" height="15" fill="rgb(216,84,49)" fg:x="85" fg:w="2"/><text x="7.0664%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.8966%" y="533" width="0.0802%" height="15" fill="rgb(214,194,35)" fg:x="86" fg:w="1"/><text x="7.1466%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8966%" y="517" width="0.0802%" height="15" fill="rgb(249,28,3)" fg:x="86" fg:w="1"/><text x="7.1466%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="6.9767%" y="533" width="0.0802%" height="15" fill="rgb(222,56,52)" fg:x="87" fg:w="1"/><text x="7.2267%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="6.8164%" y="565" width="0.4010%" height="15" fill="rgb(245,217,50)" fg:x="85" fg:w="5"/><text x="7.0664%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="6.9767%" y="549" width="0.2406%" height="15" fill="rgb(213,201,24)" fg:x="87" fg:w="3"/><text x="7.2267%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="7.0569%" y="533" width="0.1604%" height="15" fill="rgb(248,116,28)" fg:x="88" fg:w="2"/><text x="7.3069%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.0569%" y="517" width="0.1604%" height="15" fill="rgb(219,72,43)" fg:x="88" fg:w="2"/><text x="7.3069%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="7.0569%" y="501" width="0.1604%" height="15" fill="rgb(209,138,14)" fg:x="88" fg:w="2"/><text x="7.3069%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.0569%" y="485" width="0.1604%" height="15" fill="rgb(222,18,33)" fg:x="88" fg:w="2"/><text x="7.3069%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.1371%" y="469" width="0.0802%" height="15" fill="rgb(213,199,7)" fg:x="89" fg:w="1"/><text x="7.3871%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1371%" y="453" width="0.0802%" height="15" fill="rgb(250,110,10)" fg:x="89" fg:w="1"/><text x="7.3871%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.1371%" y="437" width="0.0802%" height="15" fill="rgb(248,123,6)" fg:x="89" fg:w="1"/><text x="7.3871%" y="447.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (30 samples, 2.41%)</title><rect x="4.8917%" y="677" width="2.4058%" height="15" fill="rgb(206,91,31)" fg:x="61" fg:w="30"/><text x="5.1417%" y="687.50">en..</text></g><g><title>engine::session::SavesEntities::check_for_changes (30 samples, 2.41%)</title><rect x="4.8917%" y="661" width="2.4058%" height="15" fill="rgb(211,154,13)" fg:x="61" fg:w="30"/><text x="5.1417%" y="671.50">en..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="6.5758%" y="645" width="0.7217%" height="15" fill="rgb(225,148,7)" fg:x="82" fg:w="9"/><text x="6.8258%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="6.5758%" y="629" width="0.7217%" height="15" fill="rgb(220,160,43)" fg:x="82" fg:w="9"/><text x="6.8258%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="6.5758%" y="613" width="0.7217%" height="15" fill="rgb(213,52,39)" fg:x="82" fg:w="9"/><text x="6.8258%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="6.7362%" y="597" width="0.5613%" height="15" fill="rgb(243,137,7)" fg:x="84" fg:w="7"/><text x="6.9862%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="6.7362%" y="581" width="0.5613%" height="15" fill="rgb(230,79,13)" fg:x="84" fg:w="7"/><text x="6.9862%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.2173%" y="565" width="0.0802%" height="15" fill="rgb(247,105,23)" fg:x="90" fg:w="1"/><text x="7.4673%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2173%" y="549" width="0.0802%" height="15" fill="rgb(223,179,41)" fg:x="90" fg:w="1"/><text x="7.4673%" y="559.50"></text></g><g><title>engine::session::Session::flush (33 samples, 2.65%)</title><rect x="4.7314%" y="709" width="2.6464%" height="15" fill="rgb(218,9,34)" fg:x="59" fg:w="33"/><text x="4.9814%" y="719.50">en..</text></g><g><title>engine::session::Session::save_entity_changes (33 samples, 2.65%)</title><rect x="4.7314%" y="693" width="2.6464%" height="15" fill="rgb(222,106,8)" fg:x="59" fg:w="33"/><text x="4.9814%" y="703.50">en..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="7.2975%" y="677" width="0.0802%" height="15" fill="rgb(211,220,0)" fg:x="91" fg:w="1"/><text x="7.5475%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="7.2975%" y="661" width="0.0802%" height="15" fill="rgb(229,52,16)" fg:x="91" fg:w="1"/><text x="7.5475%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="7.2975%" y="645" width="0.0802%" height="15" fill="rgb(212,155,18)" fg:x="91" fg:w="1"/><text x="7.5475%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="7.2975%" y="629" width="0.0802%" height="15" fill="rgb(242,21,14)" fg:x="91" fg:w="1"/><text x="7.5475%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="7.2975%" y="613" width="0.0802%" height="15" fill="rgb(222,19,48)" fg:x="91" fg:w="1"/><text x="7.5475%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.2975%" y="597" width="0.0802%" height="15" fill="rgb(232,45,27)" fg:x="91" fg:w="1"/><text x="7.5475%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.2975%" y="581" width="0.0802%" height="15" fill="rgb(249,103,42)" fg:x="91" fg:w="1"/><text x="7.5475%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="7.2975%" y="565" width="0.0802%" height="15" fill="rgb(246,81,33)" fg:x="91" fg:w="1"/><text x="7.5475%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.2975%" y="549" width="0.0802%" height="15" fill="rgb(252,33,42)" fg:x="91" fg:w="1"/><text x="7.5475%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.2975%" y="533" width="0.0802%" height="15" fill="rgb(209,212,41)" fg:x="91" fg:w="1"/><text x="7.5475%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.2975%" y="517" width="0.0802%" height="15" fill="rgb(207,154,6)" fg:x="91" fg:w="1"/><text x="7.5475%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.2975%" y="501" width="0.0802%" height="15" fill="rgb(223,64,47)" fg:x="91" fg:w="1"/><text x="7.5475%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.2975%" y="485" width="0.0802%" height="15" fill="rgb(211,161,38)" fg:x="91" fg:w="1"/><text x="7.5475%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="7.2975%" y="469" width="0.0802%" height="15" fill="rgb(219,138,40)" fg:x="91" fg:w="1"/><text x="7.5475%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="7.2975%" y="453" width="0.0802%" height="15" fill="rgb(241,228,46)" fg:x="91" fg:w="1"/><text x="7.5475%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="7.2975%" y="437" width="0.0802%" height="15" fill="rgb(223,209,38)" fg:x="91" fg:w="1"/><text x="7.5475%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="7.2975%" y="421" width="0.0802%" height="15" fill="rgb(236,164,45)" fg:x="91" fg:w="1"/><text x="7.5475%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.2975%" y="405" width="0.0802%" height="15" fill="rgb(231,15,5)" fg:x="91" fg:w="1"/><text x="7.5475%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.2975%" y="389" width="0.0802%" height="15" fill="rgb(252,35,15)" fg:x="91" fg:w="1"/><text x="7.5475%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.2975%" y="373" width="0.0802%" height="15" fill="rgb(248,181,18)" fg:x="91" fg:w="1"/><text x="7.5475%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="7.2975%" y="357" width="0.0802%" height="15" fill="rgb(233,39,42)" fg:x="91" fg:w="1"/><text x="7.5475%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.08%)</title><rect x="7.2975%" y="341" width="0.0802%" height="15" fill="rgb(238,110,33)" fg:x="91" fg:w="1"/><text x="7.5475%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.4579%" y="645" width="0.0802%" height="15" fill="rgb(233,195,10)" fg:x="93" fg:w="1"/><text x="7.7079%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.4579%" y="629" width="0.0802%" height="15" fill="rgb(254,105,3)" fg:x="93" fg:w="1"/><text x="7.7079%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.4579%" y="613" width="0.0802%" height="15" fill="rgb(221,225,9)" fg:x="93" fg:w="1"/><text x="7.7079%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.4579%" y="597" width="0.0802%" height="15" fill="rgb(224,227,45)" fg:x="93" fg:w="1"/><text x="7.7079%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.4579%" y="581" width="0.0802%" height="15" fill="rgb(229,198,43)" fg:x="93" fg:w="1"/><text x="7.7079%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.4579%" y="565" width="0.0802%" height="15" fill="rgb(206,209,35)" fg:x="93" fg:w="1"/><text x="7.7079%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.4579%" y="549" width="0.0802%" height="15" fill="rgb(245,195,53)" fg:x="93" fg:w="1"/><text x="7.7079%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.4579%" y="533" width="0.0802%" height="15" fill="rgb(240,92,26)" fg:x="93" fg:w="1"/><text x="7.7079%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.4579%" y="517" width="0.0802%" height="15" fill="rgb(207,40,23)" fg:x="93" fg:w="1"/><text x="7.7079%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.4579%" y="501" width="0.0802%" height="15" fill="rgb(223,111,35)" fg:x="93" fg:w="1"/><text x="7.7079%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.4579%" y="485" width="0.0802%" height="15" fill="rgb(229,147,28)" fg:x="93" fg:w="1"/><text x="7.7079%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.4579%" y="469" width="0.0802%" height="15" fill="rgb(211,29,28)" fg:x="93" fg:w="1"/><text x="7.7079%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="7.3777%" y="693" width="0.2406%" height="15" fill="rgb(228,72,33)" fg:x="92" fg:w="3"/><text x="7.6277%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="7.4579%" y="677" width="0.1604%" height="15" fill="rgb(205,214,31)" fg:x="93" fg:w="2"/><text x="7.7079%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="7.4579%" y="661" width="0.1604%" height="15" fill="rgb(224,111,15)" fg:x="93" fg:w="2"/><text x="7.7079%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.5381%" y="645" width="0.0802%" height="15" fill="rgb(253,21,26)" fg:x="94" fg:w="1"/><text x="7.7881%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.5381%" y="629" width="0.0802%" height="15" fill="rgb(245,139,43)" fg:x="94" fg:w="1"/><text x="7.7881%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.5381%" y="613" width="0.0802%" height="15" fill="rgb(252,170,7)" fg:x="94" fg:w="1"/><text x="7.7881%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.5381%" y="597" width="0.0802%" height="15" fill="rgb(231,118,14)" fg:x="94" fg:w="1"/><text x="7.7881%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5381%" y="581" width="0.0802%" height="15" fill="rgb(238,83,0)" fg:x="94" fg:w="1"/><text x="7.7881%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.5381%" y="565" width="0.0802%" height="15" fill="rgb(221,39,39)" fg:x="94" fg:w="1"/><text x="7.7881%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5381%" y="549" width="0.0802%" height="15" fill="rgb(222,119,46)" fg:x="94" fg:w="1"/><text x="7.7881%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.5381%" y="533" width="0.0802%" height="15" fill="rgb(222,165,49)" fg:x="94" fg:w="1"/><text x="7.7881%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5381%" y="517" width="0.0802%" height="15" fill="rgb(219,113,52)" fg:x="94" fg:w="1"/><text x="7.7881%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.5381%" y="501" width="0.0802%" height="15" fill="rgb(214,7,15)" fg:x="94" fg:w="1"/><text x="7.7881%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5381%" y="485" width="0.0802%" height="15" fill="rgb(235,32,4)" fg:x="94" fg:w="1"/><text x="7.7881%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.5381%" y="469" width="0.0802%" height="15" fill="rgb(238,90,54)" fg:x="94" fg:w="1"/><text x="7.7881%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.6183%" y="645" width="0.0802%" height="15" fill="rgb(213,208,19)" fg:x="95" fg:w="1"/><text x="7.8683%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.6183%" y="629" width="0.0802%" height="15" fill="rgb(233,156,4)" fg:x="95" fg:w="1"/><text x="7.8683%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.6183%" y="613" width="0.0802%" height="15" fill="rgb(207,194,5)" fg:x="95" fg:w="1"/><text x="7.8683%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.6183%" y="597" width="0.0802%" height="15" fill="rgb(206,111,30)" fg:x="95" fg:w="1"/><text x="7.8683%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6183%" y="581" width="0.0802%" height="15" fill="rgb(243,70,54)" fg:x="95" fg:w="1"/><text x="7.8683%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.6183%" y="565" width="0.0802%" height="15" fill="rgb(242,28,8)" fg:x="95" fg:w="1"/><text x="7.8683%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6183%" y="549" width="0.0802%" height="15" fill="rgb(219,106,18)" fg:x="95" fg:w="1"/><text x="7.8683%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.6183%" y="533" width="0.0802%" height="15" fill="rgb(244,222,10)" fg:x="95" fg:w="1"/><text x="7.8683%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6183%" y="517" width="0.0802%" height="15" fill="rgb(236,179,52)" fg:x="95" fg:w="1"/><text x="7.8683%" y="527.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="7.6183%" y="501" width="0.0802%" height="15" fill="rgb(213,23,39)" fg:x="95" fg:w="1"/><text x="7.8683%" y="511.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="7.6183%" y="677" width="0.1604%" height="15" fill="rgb(238,48,10)" fg:x="95" fg:w="2"/><text x="7.8683%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="7.6183%" y="661" width="0.1604%" height="15" fill="rgb(251,196,23)" fg:x="95" fg:w="2"/><text x="7.8683%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.6985%" y="645" width="0.0802%" height="15" fill="rgb(250,152,24)" fg:x="96" fg:w="1"/><text x="7.9485%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.6985%" y="629" width="0.0802%" height="15" fill="rgb(209,150,17)" fg:x="96" fg:w="1"/><text x="7.9485%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.6985%" y="613" width="0.0802%" height="15" fill="rgb(234,202,34)" fg:x="96" fg:w="1"/><text x="7.9485%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6985%" y="597" width="0.0802%" height="15" fill="rgb(253,148,53)" fg:x="96" fg:w="1"/><text x="7.9485%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6985%" y="581" width="0.0802%" height="15" fill="rgb(218,129,16)" fg:x="96" fg:w="1"/><text x="7.9485%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6985%" y="565" width="0.0802%" height="15" fill="rgb(216,85,19)" fg:x="96" fg:w="1"/><text x="7.9485%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.7787%" y="581" width="0.0802%" height="15" fill="rgb(235,228,7)" fg:x="97" fg:w="1"/><text x="8.0287%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.7787%" y="565" width="0.0802%" height="15" fill="rgb(245,175,0)" fg:x="97" fg:w="1"/><text x="8.0287%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.7787%" y="549" width="0.0802%" height="15" fill="rgb(208,168,36)" fg:x="97" fg:w="1"/><text x="8.0287%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7787%" y="533" width="0.0802%" height="15" fill="rgb(246,171,24)" fg:x="97" fg:w="1"/><text x="8.0287%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7787%" y="517" width="0.0802%" height="15" fill="rgb(215,142,24)" fg:x="97" fg:w="1"/><text x="8.0287%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.7787%" y="501" width="0.0802%" height="15" fill="rgb(250,187,7)" fg:x="97" fg:w="1"/><text x="8.0287%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.7787%" y="485" width="0.0802%" height="15" fill="rgb(228,66,33)" fg:x="97" fg:w="1"/><text x="8.0287%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.7787%" y="469" width="0.0802%" height="15" fill="rgb(234,215,21)" fg:x="97" fg:w="1"/><text x="8.0287%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.7787%" y="453" width="0.0802%" height="15" fill="rgb(222,191,20)" fg:x="97" fg:w="1"/><text x="8.0287%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.7787%" y="437" width="0.0802%" height="15" fill="rgb(245,79,54)" fg:x="97" fg:w="1"/><text x="8.0287%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.7787%" y="421" width="0.0802%" height="15" fill="rgb(240,10,37)" fg:x="97" fg:w="1"/><text x="8.0287%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.7787%" y="405" width="0.0802%" height="15" fill="rgb(214,192,32)" fg:x="97" fg:w="1"/><text x="8.0287%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.7787%" y="389" width="0.0802%" height="15" fill="rgb(209,36,54)" fg:x="97" fg:w="1"/><text x="8.0287%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.7787%" y="373" width="0.0802%" height="15" fill="rgb(220,10,11)" fg:x="97" fg:w="1"/><text x="8.0287%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.7787%" y="357" width="0.0802%" height="15" fill="rgb(221,106,17)" fg:x="97" fg:w="1"/><text x="8.0287%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.7787%" y="629" width="0.1604%" height="15" fill="rgb(251,142,44)" fg:x="97" fg:w="2"/><text x="8.0287%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.7787%" y="613" width="0.1604%" height="15" fill="rgb(238,13,15)" fg:x="97" fg:w="2"/><text x="8.0287%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.7787%" y="597" width="0.1604%" height="15" fill="rgb(208,107,27)" fg:x="97" fg:w="2"/><text x="8.0287%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="7.8589%" y="581" width="0.0802%" height="15" fill="rgb(205,136,37)" fg:x="98" fg:w="1"/><text x="8.1089%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.8589%" y="565" width="0.0802%" height="15" fill="rgb(250,205,27)" fg:x="98" fg:w="1"/><text x="8.1089%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.9391%" y="533" width="0.0802%" height="15" fill="rgb(210,80,43)" fg:x="99" fg:w="1"/><text x="8.1891%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.9391%" y="517" width="0.0802%" height="15" fill="rgb(247,160,36)" fg:x="99" fg:w="1"/><text x="8.1891%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (2 samples, 0.16%)</title><rect x="7.9391%" y="581" width="0.1604%" height="15" fill="rgb(234,13,49)" fg:x="99" fg:w="2"/><text x="8.1891%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="7.9391%" y="565" width="0.1604%" height="15" fill="rgb(234,122,0)" fg:x="99" fg:w="2"/><text x="8.1891%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.9391%" y="549" width="0.1604%" height="15" fill="rgb(207,146,38)" fg:x="99" fg:w="2"/><text x="8.1891%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.0192%" y="533" width="0.0802%" height="15" fill="rgb(207,177,25)" fg:x="100" fg:w="1"/><text x="8.2692%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.0192%" y="517" width="0.0802%" height="15" fill="rgb(211,178,42)" fg:x="100" fg:w="1"/><text x="8.2692%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.0192%" y="501" width="0.0802%" height="15" fill="rgb(230,69,54)" fg:x="100" fg:w="1"/><text x="8.2692%" y="511.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (5 samples, 0.40%)</title><rect x="7.7787%" y="661" width="0.4010%" height="15" fill="rgb(214,135,41)" fg:x="97" fg:w="5"/><text x="8.0287%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (5 samples, 0.40%)</title><rect x="7.7787%" y="645" width="0.4010%" height="15" fill="rgb(237,67,25)" fg:x="97" fg:w="5"/><text x="8.0287%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="7.9391%" y="629" width="0.2406%" height="15" fill="rgb(222,189,50)" fg:x="99" fg:w="3"/><text x="8.1891%" y="639.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="7.9391%" y="613" width="0.2406%" height="15" fill="rgb(245,148,34)" fg:x="99" fg:w="3"/><text x="8.1891%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="7.9391%" y="597" width="0.2406%" height="15" fill="rgb(222,29,6)" fg:x="99" fg:w="3"/><text x="8.1891%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.0994%" y="581" width="0.0802%" height="15" fill="rgb(221,189,43)" fg:x="101" fg:w="1"/><text x="8.3494%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0994%" y="565" width="0.0802%" height="15" fill="rgb(207,36,27)" fg:x="101" fg:w="1"/><text x="8.3494%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.0994%" y="549" width="0.0802%" height="15" fill="rgb(217,90,24)" fg:x="101" fg:w="1"/><text x="8.3494%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0994%" y="533" width="0.0802%" height="15" fill="rgb(224,66,35)" fg:x="101" fg:w="1"/><text x="8.3494%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.0994%" y="517" width="0.0802%" height="15" fill="rgb(221,13,50)" fg:x="101" fg:w="1"/><text x="8.3494%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0994%" y="501" width="0.0802%" height="15" fill="rgb(236,68,49)" fg:x="101" fg:w="1"/><text x="8.3494%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.0994%" y="485" width="0.0802%" height="15" fill="rgb(229,146,28)" fg:x="101" fg:w="1"/><text x="8.3494%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0994%" y="469" width="0.0802%" height="15" fill="rgb(225,31,38)" fg:x="101" fg:w="1"/><text x="8.3494%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.0994%" y="453" width="0.0802%" height="15" fill="rgb(250,208,3)" fg:x="101" fg:w="1"/><text x="8.3494%" y="463.50"></text></g><g><title>plugins_core::build::Build::holding (11 samples, 0.88%)</title><rect x="7.3777%" y="709" width="0.8821%" height="15" fill="rgb(246,54,23)" fg:x="92" fg:w="11"/><text x="7.6277%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.64%)</title><rect x="7.6183%" y="693" width="0.6415%" height="15" fill="rgb(243,76,11)" fg:x="95" fg:w="8"/><text x="7.8683%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (6 samples, 0.48%)</title><rect x="7.7787%" y="677" width="0.4812%" height="15" fill="rgb(245,21,50)" fg:x="97" fg:w="6"/><text x="8.0287%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="8.1796%" y="661" width="0.0802%" height="15" fill="rgb(228,9,43)" fg:x="102" fg:w="1"/><text x="8.4296%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.1796%" y="645" width="0.0802%" height="15" fill="rgb(208,100,47)" fg:x="102" fg:w="1"/><text x="8.4296%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.1796%" y="629" width="0.0802%" height="15" fill="rgb(232,26,8)" fg:x="102" fg:w="1"/><text x="8.4296%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="8.1796%" y="613" width="0.0802%" height="15" fill="rgb(216,166,38)" fg:x="102" fg:w="1"/><text x="8.4296%" y="623.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="8.2598%" y="709" width="0.0802%" height="15" fill="rgb(251,202,51)" fg:x="103" fg:w="1"/><text x="8.5098%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="8.2598%" y="693" width="0.0802%" height="15" fill="rgb(254,216,34)" fg:x="103" fg:w="1"/><text x="8.5098%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.2598%" y="677" width="0.0802%" height="15" fill="rgb(251,32,27)" fg:x="103" fg:w="1"/><text x="8.5098%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.2598%" y="661" width="0.0802%" height="15" fill="rgb(208,127,28)" fg:x="103" fg:w="1"/><text x="8.5098%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.2598%" y="645" width="0.0802%" height="15" fill="rgb(224,137,22)" fg:x="103" fg:w="1"/><text x="8.5098%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.2598%" y="629" width="0.0802%" height="15" fill="rgb(254,70,32)" fg:x="103" fg:w="1"/><text x="8.5098%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.2598%" y="613" width="0.0802%" height="15" fill="rgb(229,75,37)" fg:x="103" fg:w="1"/><text x="8.5098%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.2598%" y="597" width="0.0802%" height="15" fill="rgb(252,64,23)" fg:x="103" fg:w="1"/><text x="8.5098%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2598%" y="581" width="0.0802%" height="15" fill="rgb(232,162,48)" fg:x="103" fg:w="1"/><text x="8.5098%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.2598%" y="565" width="0.0802%" height="15" fill="rgb(246,160,12)" fg:x="103" fg:w="1"/><text x="8.5098%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2598%" y="549" width="0.0802%" height="15" fill="rgb(247,166,0)" fg:x="103" fg:w="1"/><text x="8.5098%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.2598%" y="533" width="0.0802%" height="15" fill="rgb(249,219,21)" fg:x="103" fg:w="1"/><text x="8.5098%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2598%" y="517" width="0.0802%" height="15" fill="rgb(205,209,3)" fg:x="103" fg:w="1"/><text x="8.5098%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.2598%" y="501" width="0.0802%" height="15" fill="rgb(243,44,1)" fg:x="103" fg:w="1"/><text x="8.5098%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2598%" y="485" width="0.0802%" height="15" fill="rgb(206,159,16)" fg:x="103" fg:w="1"/><text x="8.5098%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="8.3400%" y="693" width="0.2406%" height="15" fill="rgb(244,77,30)" fg:x="104" fg:w="3"/><text x="8.5900%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="8.3400%" y="677" width="0.2406%" height="15" fill="rgb(218,69,12)" fg:x="104" fg:w="3"/><text x="8.5900%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="8.4202%" y="661" width="0.1604%" height="15" fill="rgb(212,87,7)" fg:x="105" fg:w="2"/><text x="8.6702%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="8.4202%" y="645" width="0.1604%" height="15" fill="rgb(245,114,25)" fg:x="105" fg:w="2"/><text x="8.6702%" y="655.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.4202%" y="629" width="0.1604%" height="15" fill="rgb(210,61,42)" fg:x="105" fg:w="2"/><text x="8.6702%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="8.4202%" y="613" width="0.1604%" height="15" fill="rgb(211,52,33)" fg:x="105" fg:w="2"/><text x="8.6702%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="8.4202%" y="597" width="0.1604%" height="15" fill="rgb(234,58,33)" fg:x="105" fg:w="2"/><text x="8.6702%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.4202%" y="581" width="0.1604%" height="15" fill="rgb(220,115,36)" fg:x="105" fg:w="2"/><text x="8.6702%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="8.4202%" y="565" width="0.1604%" height="15" fill="rgb(243,153,54)" fg:x="105" fg:w="2"/><text x="8.6702%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.4202%" y="549" width="0.1604%" height="15" fill="rgb(251,47,18)" fg:x="105" fg:w="2"/><text x="8.6702%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="8.4202%" y="533" width="0.1604%" height="15" fill="rgb(242,102,42)" fg:x="105" fg:w="2"/><text x="8.6702%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.5004%" y="517" width="0.0802%" height="15" fill="rgb(234,31,38)" fg:x="106" fg:w="1"/><text x="8.7504%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5004%" y="501" width="0.0802%" height="15" fill="rgb(221,117,51)" fg:x="106" fg:w="1"/><text x="8.7504%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.5004%" y="485" width="0.0802%" height="15" fill="rgb(212,20,18)" fg:x="106" fg:w="1"/><text x="8.7504%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="8.5004%" y="469" width="0.0802%" height="15" fill="rgb(245,133,36)" fg:x="106" fg:w="1"/><text x="8.7504%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="8.5806%" y="693" width="0.0802%" height="15" fill="rgb(212,6,19)" fg:x="107" fg:w="1"/><text x="8.8306%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="8.5806%" y="677" width="0.0802%" height="15" fill="rgb(218,1,36)" fg:x="107" fg:w="1"/><text x="8.8306%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5806%" y="661" width="0.0802%" height="15" fill="rgb(246,84,54)" fg:x="107" fg:w="1"/><text x="8.8306%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="8.6608%" y="677" width="0.0802%" height="15" fill="rgb(242,110,6)" fg:x="108" fg:w="1"/><text x="8.9108%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="8.6608%" y="661" width="0.0802%" height="15" fill="rgb(214,47,5)" fg:x="108" fg:w="1"/><text x="8.9108%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.6608%" y="645" width="0.0802%" height="15" fill="rgb(218,159,25)" fg:x="108" fg:w="1"/><text x="8.9108%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.6608%" y="629" width="0.0802%" height="15" fill="rgb(215,211,28)" fg:x="108" fg:w="1"/><text x="8.9108%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.6608%" y="613" width="0.0802%" height="15" fill="rgb(238,59,32)" fg:x="108" fg:w="1"/><text x="8.9108%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="8.6608%" y="597" width="0.0802%" height="15" fill="rgb(226,82,3)" fg:x="108" fg:w="1"/><text x="8.9108%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.6608%" y="581" width="0.0802%" height="15" fill="rgb(240,164,32)" fg:x="108" fg:w="1"/><text x="8.9108%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6608%" y="565" width="0.0802%" height="15" fill="rgb(232,46,7)" fg:x="108" fg:w="1"/><text x="8.9108%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6608%" y="549" width="0.0802%" height="15" fill="rgb(229,129,53)" fg:x="108" fg:w="1"/><text x="8.9108%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.6608%" y="533" width="0.0802%" height="15" fill="rgb(234,188,29)" fg:x="108" fg:w="1"/><text x="8.9108%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6608%" y="517" width="0.0802%" height="15" fill="rgb(246,141,4)" fg:x="108" fg:w="1"/><text x="8.9108%" y="527.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="8.7410%" y="677" width="0.0802%" height="15" fill="rgb(229,23,39)" fg:x="109" fg:w="1"/><text x="8.9910%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7410%" y="661" width="0.0802%" height="15" fill="rgb(206,12,3)" fg:x="109" fg:w="1"/><text x="8.9910%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.7410%" y="645" width="0.0802%" height="15" fill="rgb(252,226,20)" fg:x="109" fg:w="1"/><text x="8.9910%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.8212%" y="629" width="0.0802%" height="15" fill="rgb(216,123,35)" fg:x="110" fg:w="1"/><text x="9.0712%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.8212%" y="613" width="0.0802%" height="15" fill="rgb(212,68,40)" fg:x="110" fg:w="1"/><text x="9.0712%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.8212%" y="597" width="0.0802%" height="15" fill="rgb(254,125,32)" fg:x="110" fg:w="1"/><text x="9.0712%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.8212%" y="581" width="0.0802%" height="15" fill="rgb(253,97,22)" fg:x="110" fg:w="1"/><text x="9.0712%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.8212%" y="565" width="0.0802%" height="15" fill="rgb(241,101,14)" fg:x="110" fg:w="1"/><text x="9.0712%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.8212%" y="549" width="0.0802%" height="15" fill="rgb(238,103,29)" fg:x="110" fg:w="1"/><text x="9.0712%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.8212%" y="533" width="0.0802%" height="15" fill="rgb(233,195,47)" fg:x="110" fg:w="1"/><text x="9.0712%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.8212%" y="517" width="0.0802%" height="15" fill="rgb(246,218,30)" fg:x="110" fg:w="1"/><text x="9.0712%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.8212%" y="501" width="0.0802%" height="15" fill="rgb(219,145,47)" fg:x="110" fg:w="1"/><text x="9.0712%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.8212%" y="485" width="0.0802%" height="15" fill="rgb(243,12,26)" fg:x="110" fg:w="1"/><text x="9.0712%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.8212%" y="469" width="0.0802%" height="15" fill="rgb(214,87,16)" fg:x="110" fg:w="1"/><text x="9.0712%" y="479.50"></text></g><g><title>plugins_core::build::Build::occupying (8 samples, 0.64%)</title><rect x="8.3400%" y="709" width="0.6415%" height="15" fill="rgb(208,99,42)" fg:x="104" fg:w="8"/><text x="8.5900%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="8.6608%" y="693" width="0.3208%" height="15" fill="rgb(253,99,2)" fg:x="108" fg:w="4"/><text x="8.9108%" y="703.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="8.8212%" y="677" width="0.1604%" height="15" fill="rgb(220,168,23)" fg:x="110" fg:w="2"/><text x="9.0712%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="8.8212%" y="661" width="0.1604%" height="15" fill="rgb(242,38,24)" fg:x="110" fg:w="2"/><text x="9.0712%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="8.8212%" y="645" width="0.1604%" height="15" fill="rgb(225,182,9)" fg:x="110" fg:w="2"/><text x="9.0712%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.9014%" y="629" width="0.0802%" height="15" fill="rgb(243,178,37)" fg:x="111" fg:w="1"/><text x="9.1514%" y="639.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="8.9014%" y="613" width="0.0802%" height="15" fill="rgb(232,139,19)" fg:x="111" fg:w="1"/><text x="9.1514%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.9014%" y="597" width="0.0802%" height="15" fill="rgb(225,201,24)" fg:x="111" fg:w="1"/><text x="9.1514%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="8.9816%" y="693" width="0.0802%" height="15" fill="rgb(221,47,46)" fg:x="112" fg:w="1"/><text x="9.2316%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.9816%" y="677" width="0.0802%" height="15" fill="rgb(249,23,13)" fg:x="112" fg:w="1"/><text x="9.2316%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.9816%" y="661" width="0.0802%" height="15" fill="rgb(219,9,5)" fg:x="112" fg:w="1"/><text x="9.2316%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.9816%" y="645" width="0.0802%" height="15" fill="rgb(254,171,16)" fg:x="112" fg:w="1"/><text x="9.2316%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="8.9816%" y="629" width="0.0802%" height="15" fill="rgb(230,171,20)" fg:x="112" fg:w="1"/><text x="9.2316%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="8.9816%" y="613" width="0.0802%" height="15" fill="rgb(210,71,41)" fg:x="112" fg:w="1"/><text x="9.2316%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="8.9816%" y="597" width="0.0802%" height="15" fill="rgb(206,173,20)" fg:x="112" fg:w="1"/><text x="9.2316%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.9816%" y="581" width="0.0802%" height="15" fill="rgb(233,88,34)" fg:x="112" fg:w="1"/><text x="9.2316%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.9816%" y="565" width="0.0802%" height="15" fill="rgb(223,209,46)" fg:x="112" fg:w="1"/><text x="9.2316%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.9816%" y="549" width="0.0802%" height="15" fill="rgb(250,43,18)" fg:x="112" fg:w="1"/><text x="9.2316%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.9816%" y="533" width="0.0802%" height="15" fill="rgb(208,13,10)" fg:x="112" fg:w="1"/><text x="9.2316%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (66 samples, 5.29%)</title><rect x="3.8492%" y="725" width="5.2927%" height="15" fill="rgb(212,200,36)" fg:x="48" fg:w="66"/><text x="4.0992%" y="735.50">plugin..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="8.9816%" y="709" width="0.1604%" height="15" fill="rgb(225,90,30)" fg:x="112" fg:w="2"/><text x="9.2316%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="9.0617%" y="693" width="0.0802%" height="15" fill="rgb(236,182,39)" fg:x="113" fg:w="1"/><text x="9.3117%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0617%" y="677" width="0.0802%" height="15" fill="rgb(212,144,35)" fg:x="113" fg:w="1"/><text x="9.3117%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="9.1419%" y="693" width="0.0802%" height="15" fill="rgb(228,63,44)" fg:x="114" fg:w="1"/><text x="9.3919%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="9.1419%" y="677" width="0.0802%" height="15" fill="rgb(228,109,6)" fg:x="114" fg:w="1"/><text x="9.3919%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="9.1419%" y="661" width="0.0802%" height="15" fill="rgb(238,117,24)" fg:x="114" fg:w="1"/><text x="9.3919%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="9.1419%" y="645" width="0.0802%" height="15" fill="rgb(242,26,26)" fg:x="114" fg:w="1"/><text x="9.3919%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.1419%" y="629" width="0.0802%" height="15" fill="rgb(221,92,48)" fg:x="114" fg:w="1"/><text x="9.3919%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.1419%" y="613" width="0.0802%" height="15" fill="rgb(209,209,32)" fg:x="114" fg:w="1"/><text x="9.3919%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (88 samples, 7.06%)</title><rect x="2.2454%" y="741" width="7.0569%" height="15" fill="rgb(221,70,22)" fg:x="28" fg:w="88"/><text x="2.4954%" y="751.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="9.1419%" y="725" width="0.1604%" height="15" fill="rgb(248,145,5)" fg:x="114" fg:w="2"/><text x="9.3919%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="9.1419%" y="709" width="0.1604%" height="15" fill="rgb(226,116,26)" fg:x="114" fg:w="2"/><text x="9.3919%" y="719.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="9.2221%" y="693" width="0.0802%" height="15" fill="rgb(244,5,17)" fg:x="115" fg:w="1"/><text x="9.4721%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="9.2221%" y="677" width="0.0802%" height="15" fill="rgb(252,159,33)" fg:x="115" fg:w="1"/><text x="9.4721%" y="687.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="9.2221%" y="661" width="0.0802%" height="15" fill="rgb(206,71,0)" fg:x="115" fg:w="1"/><text x="9.4721%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="9.3023%" y="741" width="0.0802%" height="15" fill="rgb(233,118,54)" fg:x="116" fg:w="1"/><text x="9.5523%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="9.3023%" y="725" width="0.0802%" height="15" fill="rgb(234,83,48)" fg:x="116" fg:w="1"/><text x="9.5523%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryEntityStorageFactory&gt; (1 samples, 0.08%)</title><rect x="9.3023%" y="709" width="0.0802%" height="15" fill="rgb(228,3,54)" fg:x="116" fg:w="1"/><text x="9.5523%" y="719.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="9.3825%" y="709" width="0.0802%" height="15" fill="rgb(226,155,13)" fg:x="117" fg:w="1"/><text x="9.6325%" y="719.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="9.3825%" y="693" width="0.0802%" height="15" fill="rgb(241,28,37)" fg:x="117" fg:w="1"/><text x="9.6325%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.3825%" y="677" width="0.0802%" height="15" fill="rgb(233,93,10)" fg:x="117" fg:w="1"/><text x="9.6325%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.6231%" y="661" width="0.0802%" height="15" fill="rgb(225,113,19)" fg:x="120" fg:w="1"/><text x="9.8731%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.6231%" y="645" width="0.0802%" height="15" fill="rgb(241,2,18)" fg:x="120" fg:w="1"/><text x="9.8731%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.6231%" y="629" width="0.0802%" height="15" fill="rgb(228,207,21)" fg:x="120" fg:w="1"/><text x="9.8731%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.6231%" y="613" width="0.0802%" height="15" fill="rgb(213,211,35)" fg:x="120" fg:w="1"/><text x="9.8731%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.7033%" y="645" width="0.0802%" height="15" fill="rgb(209,83,10)" fg:x="121" fg:w="1"/><text x="9.9533%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.7835%" y="629" width="0.0802%" height="15" fill="rgb(209,164,1)" fg:x="122" fg:w="1"/><text x="10.0335%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7835%" y="613" width="0.0802%" height="15" fill="rgb(213,184,43)" fg:x="122" fg:w="1"/><text x="10.0335%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.7835%" y="597" width="0.0802%" height="15" fill="rgb(231,61,34)" fg:x="122" fg:w="1"/><text x="10.0335%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.7835%" y="581" width="0.0802%" height="15" fill="rgb(235,75,3)" fg:x="122" fg:w="1"/><text x="10.0335%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.7835%" y="565" width="0.0802%" height="15" fill="rgb(220,106,47)" fg:x="122" fg:w="1"/><text x="10.0335%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="9.6231%" y="677" width="0.4010%" height="15" fill="rgb(210,196,33)" fg:x="120" fg:w="5"/><text x="9.8731%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="9.7033%" y="661" width="0.3208%" height="15" fill="rgb(229,154,42)" fg:x="121" fg:w="4"/><text x="9.9533%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="9.7835%" y="645" width="0.2406%" height="15" fill="rgb(228,114,26)" fg:x="122" fg:w="3"/><text x="10.0335%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="9.8637%" y="629" width="0.1604%" height="15" fill="rgb(208,144,1)" fg:x="123" fg:w="2"/><text x="10.1137%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9439%" y="613" width="0.0802%" height="15" fill="rgb(239,112,37)" fg:x="124" fg:w="1"/><text x="10.1939%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.9439%" y="597" width="0.0802%" height="15" fill="rgb(210,96,50)" fg:x="124" fg:w="1"/><text x="10.1939%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.9439%" y="581" width="0.0802%" height="15" fill="rgb(222,178,2)" fg:x="124" fg:w="1"/><text x="10.1939%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.9439%" y="565" width="0.0802%" height="15" fill="rgb(226,74,18)" fg:x="124" fg:w="1"/><text x="10.1939%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.9439%" y="549" width="0.0802%" height="15" fill="rgb(225,67,54)" fg:x="124" fg:w="1"/><text x="10.1939%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.0241%" y="629" width="0.0802%" height="15" fill="rgb(251,92,32)" fg:x="125" fg:w="1"/><text x="10.2741%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.1043%" y="613" width="0.0802%" height="15" fill="rgb(228,149,22)" fg:x="126" fg:w="1"/><text x="10.3543%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.1043%" y="597" width="0.0802%" height="15" fill="rgb(243,54,13)" fg:x="126" fg:w="1"/><text x="10.3543%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.1844%" y="597" width="0.0802%" height="15" fill="rgb(243,180,28)" fg:x="127" fg:w="1"/><text x="10.4344%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="10.0241%" y="677" width="0.3208%" height="15" fill="rgb(208,167,24)" fg:x="125" fg:w="4"/><text x="10.2741%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="10.0241%" y="661" width="0.3208%" height="15" fill="rgb(245,73,45)" fg:x="125" fg:w="4"/><text x="10.2741%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="10.0241%" y="645" width="0.3208%" height="15" fill="rgb(237,203,48)" fg:x="125" fg:w="4"/><text x="10.2741%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="10.1043%" y="629" width="0.2406%" height="15" fill="rgb(211,197,16)" fg:x="126" fg:w="3"/><text x="10.3543%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.1844%" y="613" width="0.1604%" height="15" fill="rgb(243,99,51)" fg:x="127" fg:w="2"/><text x="10.4344%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.2646%" y="597" width="0.0802%" height="15" fill="rgb(215,123,29)" fg:x="128" fg:w="1"/><text x="10.5146%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.2646%" y="581" width="0.0802%" height="15" fill="rgb(239,186,37)" fg:x="128" fg:w="1"/><text x="10.5146%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.2646%" y="565" width="0.0802%" height="15" fill="rgb(252,136,39)" fg:x="128" fg:w="1"/><text x="10.5146%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.5052%" y="597" width="0.0802%" height="15" fill="rgb(223,213,32)" fg:x="131" fg:w="1"/><text x="10.7552%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.5052%" y="581" width="0.0802%" height="15" fill="rgb(233,115,5)" fg:x="131" fg:w="1"/><text x="10.7552%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="10.6656%" y="565" width="0.0802%" height="15" fill="rgb(207,226,44)" fg:x="133" fg:w="1"/><text x="10.9156%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="10.6656%" y="549" width="0.0802%" height="15" fill="rgb(208,126,0)" fg:x="133" fg:w="1"/><text x="10.9156%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.6656%" y="533" width="0.0802%" height="15" fill="rgb(244,66,21)" fg:x="133" fg:w="1"/><text x="10.9156%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="10.3448%" y="645" width="0.4812%" height="15" fill="rgb(222,97,12)" fg:x="129" fg:w="6"/><text x="10.5948%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="10.3448%" y="629" width="0.4812%" height="15" fill="rgb(219,213,19)" fg:x="129" fg:w="6"/><text x="10.5948%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="10.3448%" y="613" width="0.4812%" height="15" fill="rgb(252,169,30)" fg:x="129" fg:w="6"/><text x="10.5948%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="10.5854%" y="597" width="0.2406%" height="15" fill="rgb(206,32,51)" fg:x="132" fg:w="3"/><text x="10.8354%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.6656%" y="581" width="0.1604%" height="15" fill="rgb(250,172,42)" fg:x="133" fg:w="2"/><text x="10.9156%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.7458%" y="565" width="0.0802%" height="15" fill="rgb(209,34,43)" fg:x="134" fg:w="1"/><text x="10.9958%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.7458%" y="549" width="0.0802%" height="15" fill="rgb(223,11,35)" fg:x="134" fg:w="1"/><text x="10.9958%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.7458%" y="533" width="0.0802%" height="15" fill="rgb(251,219,26)" fg:x="134" fg:w="1"/><text x="10.9958%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.7458%" y="517" width="0.0802%" height="15" fill="rgb(231,119,3)" fg:x="134" fg:w="1"/><text x="10.9958%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.64%)</title><rect x="10.3448%" y="661" width="0.6415%" height="15" fill="rgb(216,97,11)" fg:x="129" fg:w="8"/><text x="10.5948%" y="671.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="10.8260%" y="645" width="0.1604%" height="15" fill="rgb(223,59,9)" fg:x="135" fg:w="2"/><text x="11.0760%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="10.8260%" y="629" width="0.1604%" height="15" fill="rgb(233,93,31)" fg:x="135" fg:w="2"/><text x="11.0760%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="10.8260%" y="613" width="0.1604%" height="15" fill="rgb(239,81,33)" fg:x="135" fg:w="2"/><text x="11.0760%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.9062%" y="597" width="0.0802%" height="15" fill="rgb(213,120,34)" fg:x="136" fg:w="1"/><text x="11.1562%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="10.9062%" y="581" width="0.0802%" height="15" fill="rgb(243,49,53)" fg:x="136" fg:w="1"/><text x="11.1562%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.9062%" y="565" width="0.0802%" height="15" fill="rgb(247,216,33)" fg:x="136" fg:w="1"/><text x="11.1562%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.0666%" y="629" width="0.0802%" height="15" fill="rgb(226,26,14)" fg:x="138" fg:w="1"/><text x="11.3166%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2269%" y="597" width="0.0802%" height="15" fill="rgb(215,49,53)" fg:x="140" fg:w="1"/><text x="11.4769%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="11.1468%" y="629" width="0.2406%" height="15" fill="rgb(245,162,40)" fg:x="139" fg:w="3"/><text x="11.3968%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.2269%" y="613" width="0.1604%" height="15" fill="rgb(229,68,17)" fg:x="140" fg:w="2"/><text x="11.4769%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.3071%" y="597" width="0.0802%" height="15" fill="rgb(213,182,10)" fg:x="141" fg:w="1"/><text x="11.5571%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3873%" y="581" width="0.0802%" height="15" fill="rgb(245,125,30)" fg:x="142" fg:w="1"/><text x="11.6373%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3873%" y="565" width="0.0802%" height="15" fill="rgb(232,202,2)" fg:x="142" fg:w="1"/><text x="11.6373%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3873%" y="549" width="0.0802%" height="15" fill="rgb(237,140,51)" fg:x="142" fg:w="1"/><text x="11.6373%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.4675%" y="581" width="0.0802%" height="15" fill="rgb(236,157,25)" fg:x="143" fg:w="1"/><text x="11.7175%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4675%" y="565" width="0.0802%" height="15" fill="rgb(219,209,0)" fg:x="143" fg:w="1"/><text x="11.7175%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.4675%" y="549" width="0.0802%" height="15" fill="rgb(240,116,54)" fg:x="143" fg:w="1"/><text x="11.7175%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4675%" y="533" width="0.0802%" height="15" fill="rgb(216,10,36)" fg:x="143" fg:w="1"/><text x="11.7175%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6279%" y="549" width="0.0802%" height="15" fill="rgb(222,72,44)" fg:x="145" fg:w="1"/><text x="11.8779%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="11.6279%" y="565" width="0.4010%" height="15" fill="rgb(232,159,9)" fg:x="145" fg:w="5"/><text x="11.8779%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="11.7081%" y="549" width="0.3208%" height="15" fill="rgb(210,39,32)" fg:x="146" fg:w="4"/><text x="11.9581%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="11.7883%" y="533" width="0.2406%" height="15" fill="rgb(216,194,45)" fg:x="147" fg:w="3"/><text x="12.0383%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="11.7883%" y="517" width="0.2406%" height="15" fill="rgb(218,18,35)" fg:x="147" fg:w="3"/><text x="12.0383%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.8685%" y="501" width="0.1604%" height="15" fill="rgb(207,83,51)" fg:x="148" fg:w="2"/><text x="12.1185%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="11.8685%" y="485" width="0.1604%" height="15" fill="rgb(225,63,43)" fg:x="148" fg:w="2"/><text x="12.1185%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.8685%" y="469" width="0.1604%" height="15" fill="rgb(207,57,36)" fg:x="148" fg:w="2"/><text x="12.1185%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.8685%" y="453" width="0.1604%" height="15" fill="rgb(216,99,33)" fg:x="148" fg:w="2"/><text x="12.1185%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.8685%" y="437" width="0.1604%" height="15" fill="rgb(225,42,16)" fg:x="148" fg:w="2"/><text x="12.1185%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.8685%" y="421" width="0.1604%" height="15" fill="rgb(220,201,45)" fg:x="148" fg:w="2"/><text x="12.1185%" y="431.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.12%)</title><rect x="10.9864%" y="661" width="1.1227%" height="15" fill="rgb(225,33,4)" fg:x="137" fg:w="14"/><text x="11.2364%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.12%)</title><rect x="10.9864%" y="645" width="1.1227%" height="15" fill="rgb(224,33,50)" fg:x="137" fg:w="14"/><text x="11.2364%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="11.3873%" y="629" width="0.7217%" height="15" fill="rgb(246,198,51)" fg:x="142" fg:w="9"/><text x="11.6373%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.72%)</title><rect x="11.3873%" y="613" width="0.7217%" height="15" fill="rgb(205,22,4)" fg:x="142" fg:w="9"/><text x="11.6373%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="11.3873%" y="597" width="0.7217%" height="15" fill="rgb(206,3,8)" fg:x="142" fg:w="9"/><text x="11.6373%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="11.5477%" y="581" width="0.5613%" height="15" fill="rgb(251,23,15)" fg:x="144" fg:w="7"/><text x="11.7977%" y="591.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="12.0289%" y="565" width="0.0802%" height="15" fill="rgb(252,88,28)" fg:x="150" fg:w="1"/><text x="12.2789%" y="575.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="12.0289%" y="549" width="0.0802%" height="15" fill="rgb(212,127,14)" fg:x="150" fg:w="1"/><text x="12.2789%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.1893%" y="485" width="0.0802%" height="15" fill="rgb(247,145,37)" fg:x="152" fg:w="1"/><text x="12.4393%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="12.1893%" y="469" width="0.0802%" height="15" fill="rgb(209,117,53)" fg:x="152" fg:w="1"/><text x="12.4393%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="12.1893%" y="517" width="0.1604%" height="15" fill="rgb(212,90,42)" fg:x="152" fg:w="2"/><text x="12.4393%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.1893%" y="501" width="0.1604%" height="15" fill="rgb(218,164,37)" fg:x="152" fg:w="2"/><text x="12.4393%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2694%" y="485" width="0.0802%" height="15" fill="rgb(246,65,34)" fg:x="153" fg:w="1"/><text x="12.5194%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="12.1893%" y="533" width="0.3208%" height="15" fill="rgb(231,100,33)" fg:x="152" fg:w="4"/><text x="12.4393%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.3496%" y="517" width="0.1604%" height="15" fill="rgb(228,126,14)" fg:x="154" fg:w="2"/><text x="12.5996%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.4298%" y="501" width="0.0802%" height="15" fill="rgb(215,173,21)" fg:x="155" fg:w="1"/><text x="12.6798%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.4298%" y="485" width="0.0802%" height="15" fill="rgb(210,6,40)" fg:x="155" fg:w="1"/><text x="12.6798%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.4298%" y="469" width="0.0802%" height="15" fill="rgb(212,48,18)" fg:x="155" fg:w="1"/><text x="12.6798%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.4298%" y="453" width="0.0802%" height="15" fill="rgb(230,214,11)" fg:x="155" fg:w="1"/><text x="12.6798%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.4298%" y="437" width="0.0802%" height="15" fill="rgb(254,105,39)" fg:x="155" fg:w="1"/><text x="12.6798%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4298%" y="421" width="0.0802%" height="15" fill="rgb(245,158,5)" fg:x="155" fg:w="1"/><text x="12.6798%" y="431.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (39 samples, 3.13%)</title><rect x="9.4627%" y="709" width="3.1275%" height="15" fill="rgb(249,208,11)" fg:x="118" fg:w="39"/><text x="9.7127%" y="719.50">eng..</text></g><g><title>engine::session::SavesEntities::check_for_changes (38 samples, 3.05%)</title><rect x="9.5429%" y="693" width="3.0473%" height="15" fill="rgb(210,39,28)" fg:x="119" fg:w="38"/><text x="9.7929%" y="703.50">eng..</text></g><g><title>kernel::model::any_entity_changes (28 samples, 2.25%)</title><rect x="10.3448%" y="677" width="2.2454%" height="15" fill="rgb(211,56,53)" fg:x="129" fg:w="28"/><text x="10.5948%" y="687.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="12.1091%" y="661" width="0.4812%" height="15" fill="rgb(226,201,30)" fg:x="151" fg:w="6"/><text x="12.3591%" y="671.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="12.1091%" y="645" width="0.4812%" height="15" fill="rgb(239,101,34)" fg:x="151" fg:w="6"/><text x="12.3591%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="12.1091%" y="629" width="0.4812%" height="15" fill="rgb(226,209,5)" fg:x="151" fg:w="6"/><text x="12.3591%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="12.1091%" y="613" width="0.4812%" height="15" fill="rgb(250,105,47)" fg:x="151" fg:w="6"/><text x="12.3591%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="12.1091%" y="597" width="0.4812%" height="15" fill="rgb(230,72,3)" fg:x="151" fg:w="6"/><text x="12.3591%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="12.1091%" y="581" width="0.4812%" height="15" fill="rgb(232,218,39)" fg:x="151" fg:w="6"/><text x="12.3591%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="12.1893%" y="565" width="0.4010%" height="15" fill="rgb(248,166,6)" fg:x="152" fg:w="5"/><text x="12.4393%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="12.1893%" y="549" width="0.4010%" height="15" fill="rgb(247,89,20)" fg:x="152" fg:w="5"/><text x="12.4393%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5100%" y="533" width="0.0802%" height="15" fill="rgb(248,130,54)" fg:x="156" fg:w="1"/><text x="12.7600%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5100%" y="517" width="0.0802%" height="15" fill="rgb(234,196,4)" fg:x="156" fg:w="1"/><text x="12.7600%" y="527.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="12.5902%" y="709" width="0.0802%" height="15" fill="rgb(250,143,31)" fg:x="157" fg:w="1"/><text x="12.8402%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="12.5902%" y="693" width="0.0802%" height="15" fill="rgb(211,110,34)" fg:x="157" fg:w="1"/><text x="12.8402%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="12.5902%" y="677" width="0.0802%" height="15" fill="rgb(215,124,48)" fg:x="157" fg:w="1"/><text x="12.8402%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5902%" y="661" width="0.0802%" height="15" fill="rgb(216,46,13)" fg:x="157" fg:w="1"/><text x="12.8402%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5902%" y="645" width="0.0802%" height="15" fill="rgb(205,184,25)" fg:x="157" fg:w="1"/><text x="12.8402%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.5902%" y="629" width="0.0802%" height="15" fill="rgb(228,1,10)" fg:x="157" fg:w="1"/><text x="12.8402%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.5902%" y="613" width="0.0802%" height="15" fill="rgb(213,116,27)" fg:x="157" fg:w="1"/><text x="12.8402%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.5902%" y="597" width="0.0802%" height="15" fill="rgb(241,95,50)" fg:x="157" fg:w="1"/><text x="12.8402%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.5902%" y="581" width="0.0802%" height="15" fill="rgb(238,48,32)" fg:x="157" fg:w="1"/><text x="12.8402%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.5902%" y="565" width="0.0802%" height="15" fill="rgb(235,113,49)" fg:x="157" fg:w="1"/><text x="12.8402%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.5902%" y="549" width="0.0802%" height="15" fill="rgb(205,127,43)" fg:x="157" fg:w="1"/><text x="12.8402%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.5902%" y="533" width="0.0802%" height="15" fill="rgb(250,162,2)" fg:x="157" fg:w="1"/><text x="12.8402%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.5902%" y="517" width="0.0802%" height="15" fill="rgb(220,13,41)" fg:x="157" fg:w="1"/><text x="12.8402%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.5902%" y="501" width="0.0802%" height="15" fill="rgb(249,221,25)" fg:x="157" fg:w="1"/><text x="12.8402%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5902%" y="485" width="0.0802%" height="15" fill="rgb(215,208,19)" fg:x="157" fg:w="1"/><text x="12.8402%" y="495.50"></text></g><g><title>engine::session::Session::close (42 samples, 3.37%)</title><rect x="9.3825%" y="741" width="3.3681%" height="15" fill="rgb(236,175,2)" fg:x="117" fg:w="42"/><text x="9.6325%" y="751.50">eng..</text></g><g><title>engine::session::Session::save_entity_changes (42 samples, 3.37%)</title><rect x="9.3825%" y="725" width="3.3681%" height="15" fill="rgb(241,52,2)" fg:x="117" fg:w="42"/><text x="9.6325%" y="735.50">eng..</text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="12.6704%" y="709" width="0.0802%" height="15" fill="rgb(248,140,14)" fg:x="158" fg:w="1"/><text x="12.9204%" y="719.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="12.6704%" y="693" width="0.0802%" height="15" fill="rgb(253,22,42)" fg:x="158" fg:w="1"/><text x="12.9204%" y="703.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="12.6704%" y="677" width="0.0802%" height="15" fill="rgb(234,61,47)" fg:x="158" fg:w="1"/><text x="12.9204%" y="687.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="12.6704%" y="661" width="0.0802%" height="15" fill="rgb(208,226,15)" fg:x="158" fg:w="1"/><text x="12.9204%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="12.6704%" y="645" width="0.0802%" height="15" fill="rgb(217,221,4)" fg:x="158" fg:w="1"/><text x="12.9204%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="12.6704%" y="629" width="0.0802%" height="15" fill="rgb(212,174,34)" fg:x="158" fg:w="1"/><text x="12.9204%" y="639.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="12.6704%" y="613" width="0.0802%" height="15" fill="rgb(253,83,4)" fg:x="158" fg:w="1"/><text x="12.9204%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.8308%" y="693" width="0.0802%" height="15" fill="rgb(250,195,49)" fg:x="160" fg:w="1"/><text x="13.0808%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.8308%" y="677" width="0.0802%" height="15" fill="rgb(241,192,25)" fg:x="160" fg:w="1"/><text x="13.0808%" y="687.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.8308%" y="661" width="0.0802%" height="15" fill="rgb(208,124,10)" fg:x="160" fg:w="1"/><text x="13.0808%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="12.9110%" y="645" width="0.0802%" height="15" fill="rgb(222,33,0)" fg:x="161" fg:w="1"/><text x="13.1610%" y="655.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="12.9110%" y="629" width="0.0802%" height="15" fill="rgb(234,209,28)" fg:x="161" fg:w="1"/><text x="13.1610%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.9912%" y="565" width="0.0802%" height="15" fill="rgb(224,11,23)" fg:x="162" fg:w="1"/><text x="13.2412%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.9912%" y="549" width="0.0802%" height="15" fill="rgb(232,99,1)" fg:x="162" fg:w="1"/><text x="13.2412%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.0714%" y="517" width="0.0802%" height="15" fill="rgb(237,95,45)" fg:x="163" fg:w="1"/><text x="13.3214%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.0714%" y="501" width="0.0802%" height="15" fill="rgb(208,109,11)" fg:x="163" fg:w="1"/><text x="13.3214%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="12.9912%" y="581" width="0.3208%" height="15" fill="rgb(216,190,48)" fg:x="162" fg:w="4"/><text x="13.2412%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="13.0714%" y="565" width="0.2406%" height="15" fill="rgb(251,171,36)" fg:x="163" fg:w="3"/><text x="13.3214%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="13.0714%" y="549" width="0.2406%" height="15" fill="rgb(230,62,22)" fg:x="163" fg:w="3"/><text x="13.3214%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="13.0714%" y="533" width="0.2406%" height="15" fill="rgb(225,114,35)" fg:x="163" fg:w="3"/><text x="13.3214%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="13.1516%" y="517" width="0.1604%" height="15" fill="rgb(215,118,42)" fg:x="164" fg:w="2"/><text x="13.4016%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="13.1516%" y="501" width="0.1604%" height="15" fill="rgb(243,119,21)" fg:x="164" fg:w="2"/><text x="13.4016%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.1516%" y="485" width="0.1604%" height="15" fill="rgb(252,177,53)" fg:x="164" fg:w="2"/><text x="13.4016%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.3119%" y="565" width="0.0802%" height="15" fill="rgb(237,209,29)" fg:x="166" fg:w="1"/><text x="13.5619%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="12.9912%" y="597" width="0.4812%" height="15" fill="rgb(212,65,23)" fg:x="162" fg:w="6"/><text x="13.2412%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="13.3119%" y="581" width="0.1604%" height="15" fill="rgb(230,222,46)" fg:x="166" fg:w="2"/><text x="13.5619%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.3921%" y="565" width="0.0802%" height="15" fill="rgb(215,135,32)" fg:x="167" fg:w="1"/><text x="13.6421%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.3921%" y="549" width="0.0802%" height="15" fill="rgb(246,101,22)" fg:x="167" fg:w="1"/><text x="13.6421%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4723%" y="501" width="0.0802%" height="15" fill="rgb(206,107,13)" fg:x="168" fg:w="1"/><text x="13.7223%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4723%" y="485" width="0.0802%" height="15" fill="rgb(250,100,44)" fg:x="168" fg:w="1"/><text x="13.7223%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="13.4723%" y="533" width="0.3208%" height="15" fill="rgb(231,147,38)" fg:x="168" fg:w="4"/><text x="13.7223%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="13.4723%" y="517" width="0.3208%" height="15" fill="rgb(229,8,40)" fg:x="168" fg:w="4"/><text x="13.7223%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="13.5525%" y="501" width="0.2406%" height="15" fill="rgb(221,135,30)" fg:x="169" fg:w="3"/><text x="13.8025%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="13.5525%" y="485" width="0.2406%" height="15" fill="rgb(249,193,18)" fg:x="169" fg:w="3"/><text x="13.8025%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="13.5525%" y="469" width="0.2406%" height="15" fill="rgb(209,133,39)" fg:x="169" fg:w="3"/><text x="13.8025%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="13.5525%" y="453" width="0.2406%" height="15" fill="rgb(232,100,14)" fg:x="169" fg:w="3"/><text x="13.8025%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="13.5525%" y="437" width="0.2406%" height="15" fill="rgb(224,185,1)" fg:x="169" fg:w="3"/><text x="13.8025%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="13.5525%" y="421" width="0.2406%" height="15" fill="rgb(223,139,8)" fg:x="169" fg:w="3"/><text x="13.8025%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="13.5525%" y="405" width="0.2406%" height="15" fill="rgb(232,213,38)" fg:x="169" fg:w="3"/><text x="13.8025%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.24%)</title><rect x="13.5525%" y="389" width="0.2406%" height="15" fill="rgb(207,94,22)" fg:x="169" fg:w="3"/><text x="13.8025%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.24%)</title><rect x="13.5525%" y="373" width="0.2406%" height="15" fill="rgb(219,183,54)" fg:x="169" fg:w="3"/><text x="13.8025%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.24%)</title><rect x="13.5525%" y="357" width="0.2406%" height="15" fill="rgb(216,185,54)" fg:x="169" fg:w="3"/><text x="13.8025%" y="367.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.24%)</title><rect x="13.5525%" y="341" width="0.2406%" height="15" fill="rgb(254,217,39)" fg:x="169" fg:w="3"/><text x="13.8025%" y="351.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="13.5525%" y="325" width="0.2406%" height="15" fill="rgb(240,178,23)" fg:x="169" fg:w="3"/><text x="13.8025%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.48%)</title><rect x="13.4723%" y="565" width="0.4812%" height="15" fill="rgb(218,11,47)" fg:x="168" fg:w="6"/><text x="13.7223%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.48%)</title><rect x="13.4723%" y="549" width="0.4812%" height="15" fill="rgb(218,51,51)" fg:x="168" fg:w="6"/><text x="13.7223%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="13.7931%" y="533" width="0.1604%" height="15" fill="rgb(238,126,27)" fg:x="172" fg:w="2"/><text x="14.0431%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="13.7931%" y="517" width="0.1604%" height="15" fill="rgb(249,202,22)" fg:x="172" fg:w="2"/><text x="14.0431%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="13.7931%" y="501" width="0.1604%" height="15" fill="rgb(254,195,49)" fg:x="172" fg:w="2"/><text x="14.0431%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="13.7931%" y="485" width="0.1604%" height="15" fill="rgb(208,123,14)" fg:x="172" fg:w="2"/><text x="14.0431%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="13.7931%" y="469" width="0.1604%" height="15" fill="rgb(224,200,8)" fg:x="172" fg:w="2"/><text x="14.0431%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.8733%" y="453" width="0.0802%" height="15" fill="rgb(217,61,36)" fg:x="173" fg:w="1"/><text x="14.1233%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.8733%" y="437" width="0.0802%" height="15" fill="rgb(206,35,45)" fg:x="173" fg:w="1"/><text x="14.1233%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.8733%" y="421" width="0.0802%" height="15" fill="rgb(217,65,33)" fg:x="173" fg:w="1"/><text x="14.1233%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.8733%" y="405" width="0.0802%" height="15" fill="rgb(222,158,48)" fg:x="173" fg:w="1"/><text x="14.1233%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.8733%" y="389" width="0.0802%" height="15" fill="rgb(254,2,54)" fg:x="173" fg:w="1"/><text x="14.1233%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.8733%" y="373" width="0.0802%" height="15" fill="rgb(250,143,38)" fg:x="173" fg:w="1"/><text x="14.1233%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8733%" y="357" width="0.0802%" height="15" fill="rgb(248,25,0)" fg:x="173" fg:w="1"/><text x="14.1233%" y="367.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (7 samples, 0.56%)</title><rect x="13.4723%" y="597" width="0.5613%" height="15" fill="rgb(206,152,27)" fg:x="168" fg:w="7"/><text x="13.7223%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (7 samples, 0.56%)</title><rect x="13.4723%" y="581" width="0.5613%" height="15" fill="rgb(240,77,30)" fg:x="168" fg:w="7"/><text x="13.7223%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.9535%" y="565" width="0.0802%" height="15" fill="rgb(231,5,3)" fg:x="174" fg:w="1"/><text x="14.2035%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.9535%" y="549" width="0.0802%" height="15" fill="rgb(207,226,32)" fg:x="174" fg:w="1"/><text x="14.2035%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.9535%" y="533" width="0.0802%" height="15" fill="rgb(222,207,47)" fg:x="174" fg:w="1"/><text x="14.2035%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.9535%" y="517" width="0.0802%" height="15" fill="rgb(229,115,45)" fg:x="174" fg:w="1"/><text x="14.2035%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.9535%" y="501" width="0.0802%" height="15" fill="rgb(224,191,6)" fg:x="174" fg:w="1"/><text x="14.2035%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.9535%" y="485" width="0.0802%" height="15" fill="rgb(230,227,24)" fg:x="174" fg:w="1"/><text x="14.2035%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.9535%" y="469" width="0.0802%" height="15" fill="rgb(228,80,19)" fg:x="174" fg:w="1"/><text x="14.2035%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.9535%" y="453" width="0.0802%" height="15" fill="rgb(247,229,0)" fg:x="174" fg:w="1"/><text x="14.2035%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.9535%" y="437" width="0.0802%" height="15" fill="rgb(237,194,15)" fg:x="174" fg:w="1"/><text x="14.2035%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.9535%" y="421" width="0.0802%" height="15" fill="rgb(219,203,20)" fg:x="174" fg:w="1"/><text x="14.2035%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.9535%" y="405" width="0.0802%" height="15" fill="rgb(234,128,8)" fg:x="174" fg:w="1"/><text x="14.2035%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.9535%" y="389" width="0.0802%" height="15" fill="rgb(248,202,8)" fg:x="174" fg:w="1"/><text x="14.2035%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="14.0337%" y="485" width="0.1604%" height="15" fill="rgb(206,104,37)" fg:x="175" fg:w="2"/><text x="14.2837%" y="495.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="14.0337%" y="469" width="0.1604%" height="15" fill="rgb(223,8,27)" fg:x="175" fg:w="2"/><text x="14.2837%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="14.0337%" y="453" width="0.1604%" height="15" fill="rgb(216,217,28)" fg:x="175" fg:w="2"/><text x="14.2837%" y="463.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="14.0337%" y="437" width="0.1604%" height="15" fill="rgb(249,199,1)" fg:x="175" fg:w="2"/><text x="14.2837%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="14.0337%" y="421" width="0.1604%" height="15" fill="rgb(240,85,17)" fg:x="175" fg:w="2"/><text x="14.2837%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.0337%" y="405" width="0.1604%" height="15" fill="rgb(206,108,45)" fg:x="175" fg:w="2"/><text x="14.2837%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.0337%" y="389" width="0.1604%" height="15" fill="rgb(245,210,41)" fg:x="175" fg:w="2"/><text x="14.2837%" y="399.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.0337%" y="373" width="0.1604%" height="15" fill="rgb(206,13,37)" fg:x="175" fg:w="2"/><text x="14.2837%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.0337%" y="357" width="0.1604%" height="15" fill="rgb(250,61,18)" fg:x="175" fg:w="2"/><text x="14.2837%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.0337%" y="341" width="0.1604%" height="15" fill="rgb(235,172,48)" fg:x="175" fg:w="2"/><text x="14.2837%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.0337%" y="325" width="0.1604%" height="15" fill="rgb(249,201,17)" fg:x="175" fg:w="2"/><text x="14.2837%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.1139%" y="309" width="0.0802%" height="15" fill="rgb(219,208,6)" fg:x="176" fg:w="1"/><text x="14.3639%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1139%" y="293" width="0.0802%" height="15" fill="rgb(248,31,23)" fg:x="176" fg:w="1"/><text x="14.3639%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.1139%" y="277" width="0.0802%" height="15" fill="rgb(245,15,42)" fg:x="176" fg:w="1"/><text x="14.3639%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1139%" y="261" width="0.0802%" height="15" fill="rgb(222,217,39)" fg:x="176" fg:w="1"/><text x="14.3639%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1139%" y="245" width="0.0802%" height="15" fill="rgb(210,219,27)" fg:x="176" fg:w="1"/><text x="14.3639%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="14.0337%" y="533" width="0.2406%" height="15" fill="rgb(252,166,36)" fg:x="175" fg:w="3"/><text x="14.2837%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="14.0337%" y="517" width="0.2406%" height="15" fill="rgb(245,132,34)" fg:x="175" fg:w="3"/><text x="14.2837%" y="527.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="14.0337%" y="501" width="0.2406%" height="15" fill="rgb(236,54,3)" fg:x="175" fg:w="3"/><text x="14.2837%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="14.1941%" y="485" width="0.0802%" height="15" fill="rgb(241,173,43)" fg:x="177" fg:w="1"/><text x="14.4441%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="14.1941%" y="469" width="0.0802%" height="15" fill="rgb(215,190,9)" fg:x="177" fg:w="1"/><text x="14.4441%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="14.1941%" y="453" width="0.0802%" height="15" fill="rgb(242,101,16)" fg:x="177" fg:w="1"/><text x="14.4441%" y="463.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="14.0337%" y="581" width="0.3208%" height="15" fill="rgb(223,190,21)" fg:x="175" fg:w="4"/><text x="14.2837%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="14.0337%" y="565" width="0.3208%" height="15" fill="rgb(215,228,25)" fg:x="175" fg:w="4"/><text x="14.2837%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="14.0337%" y="549" width="0.3208%" height="15" fill="rgb(225,36,22)" fg:x="175" fg:w="4"/><text x="14.2837%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.2743%" y="533" width="0.0802%" height="15" fill="rgb(251,106,46)" fg:x="178" fg:w="1"/><text x="14.5243%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2743%" y="517" width="0.0802%" height="15" fill="rgb(208,90,1)" fg:x="178" fg:w="1"/><text x="14.5243%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.2743%" y="501" width="0.0802%" height="15" fill="rgb(243,10,4)" fg:x="178" fg:w="1"/><text x="14.5243%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2743%" y="485" width="0.0802%" height="15" fill="rgb(212,137,27)" fg:x="178" fg:w="1"/><text x="14.5243%" y="495.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (5 samples, 0.40%)</title><rect x="14.0337%" y="597" width="0.4010%" height="15" fill="rgb(231,220,49)" fg:x="175" fg:w="5"/><text x="14.2837%" y="607.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="14.3545%" y="581" width="0.0802%" height="15" fill="rgb(237,96,20)" fg:x="179" fg:w="1"/><text x="14.6045%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="14.3545%" y="565" width="0.0802%" height="15" fill="rgb(239,229,30)" fg:x="179" fg:w="1"/><text x="14.6045%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="14.3545%" y="549" width="0.0802%" height="15" fill="rgb(219,65,33)" fg:x="179" fg:w="1"/><text x="14.6045%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.3545%" y="533" width="0.0802%" height="15" fill="rgb(243,134,7)" fg:x="179" fg:w="1"/><text x="14.6045%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="14.3545%" y="517" width="0.0802%" height="15" fill="rgb(216,177,54)" fg:x="179" fg:w="1"/><text x="14.6045%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.3545%" y="501" width="0.0802%" height="15" fill="rgb(211,160,20)" fg:x="179" fg:w="1"/><text x="14.6045%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.3545%" y="485" width="0.0802%" height="15" fill="rgb(239,85,39)" fg:x="179" fg:w="1"/><text x="14.6045%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="14.3545%" y="469" width="0.0802%" height="15" fill="rgb(232,125,22)" fg:x="179" fg:w="1"/><text x="14.6045%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="14.3545%" y="453" width="0.0802%" height="15" fill="rgb(244,57,34)" fg:x="179" fg:w="1"/><text x="14.6045%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.3545%" y="437" width="0.0802%" height="15" fill="rgb(214,203,32)" fg:x="179" fg:w="1"/><text x="14.6045%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.3545%" y="421" width="0.0802%" height="15" fill="rgb(207,58,43)" fg:x="179" fg:w="1"/><text x="14.6045%" y="431.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="14.3545%" y="405" width="0.0802%" height="15" fill="rgb(215,193,15)" fg:x="179" fg:w="1"/><text x="14.6045%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="14.3545%" y="389" width="0.0802%" height="15" fill="rgb(232,15,44)" fg:x="179" fg:w="1"/><text x="14.6045%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.3545%" y="373" width="0.0802%" height="15" fill="rgb(212,3,48)" fg:x="179" fg:w="1"/><text x="14.6045%" y="383.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="14.5148%" y="469" width="0.0802%" height="15" fill="rgb(218,128,7)" fg:x="181" fg:w="1"/><text x="14.7648%" y="479.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.5148%" y="453" width="0.0802%" height="15" fill="rgb(226,216,39)" fg:x="181" fg:w="1"/><text x="14.7648%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.5148%" y="437" width="0.0802%" height="15" fill="rgb(243,47,51)" fg:x="181" fg:w="1"/><text x="14.7648%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.5148%" y="421" width="0.0802%" height="15" fill="rgb(241,183,40)" fg:x="181" fg:w="1"/><text x="14.7648%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.5148%" y="405" width="0.0802%" height="15" fill="rgb(231,217,32)" fg:x="181" fg:w="1"/><text x="14.7648%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.5148%" y="389" width="0.0802%" height="15" fill="rgb(229,61,38)" fg:x="181" fg:w="1"/><text x="14.7648%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.5148%" y="373" width="0.0802%" height="15" fill="rgb(225,210,5)" fg:x="181" fg:w="1"/><text x="14.7648%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="14.5148%" y="357" width="0.0802%" height="15" fill="rgb(231,79,45)" fg:x="181" fg:w="1"/><text x="14.7648%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="14.5148%" y="341" width="0.0802%" height="15" fill="rgb(224,100,7)" fg:x="181" fg:w="1"/><text x="14.7648%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.7554%" y="389" width="0.0802%" height="15" fill="rgb(241,198,18)" fg:x="184" fg:w="1"/><text x="15.0054%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.7554%" y="373" width="0.0802%" height="15" fill="rgb(252,97,53)" fg:x="184" fg:w="1"/><text x="15.0054%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.7554%" y="357" width="0.0802%" height="15" fill="rgb(220,88,7)" fg:x="184" fg:w="1"/><text x="15.0054%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.7554%" y="341" width="0.0802%" height="15" fill="rgb(213,176,14)" fg:x="184" fg:w="1"/><text x="15.0054%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7554%" y="325" width="0.0802%" height="15" fill="rgb(246,73,7)" fg:x="184" fg:w="1"/><text x="15.0054%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7554%" y="309" width="0.0802%" height="15" fill="rgb(245,64,36)" fg:x="184" fg:w="1"/><text x="15.0054%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.7554%" y="293" width="0.0802%" height="15" fill="rgb(245,80,10)" fg:x="184" fg:w="1"/><text x="15.0054%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.7554%" y="277" width="0.0802%" height="15" fill="rgb(232,107,50)" fg:x="184" fg:w="1"/><text x="15.0054%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.7554%" y="261" width="0.0802%" height="15" fill="rgb(253,3,0)" fg:x="184" fg:w="1"/><text x="15.0054%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7554%" y="245" width="0.0802%" height="15" fill="rgb(212,99,53)" fg:x="184" fg:w="1"/><text x="15.0054%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7554%" y="229" width="0.0802%" height="15" fill="rgb(249,111,54)" fg:x="184" fg:w="1"/><text x="15.0054%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.7554%" y="213" width="0.0802%" height="15" fill="rgb(249,55,30)" fg:x="184" fg:w="1"/><text x="15.0054%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.7554%" y="197" width="0.0802%" height="15" fill="rgb(237,47,42)" fg:x="184" fg:w="1"/><text x="15.0054%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.7554%" y="181" width="0.0802%" height="15" fill="rgb(211,20,18)" fg:x="184" fg:w="1"/><text x="15.0054%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.7554%" y="165" width="0.0802%" height="15" fill="rgb(231,203,46)" fg:x="184" fg:w="1"/><text x="15.0054%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7554%" y="149" width="0.0802%" height="15" fill="rgb(237,142,3)" fg:x="184" fg:w="1"/><text x="15.0054%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="14.7554%" y="437" width="0.1604%" height="15" fill="rgb(241,107,1)" fg:x="184" fg:w="2"/><text x="15.0054%" y="447.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="14.7554%" y="421" width="0.1604%" height="15" fill="rgb(229,83,13)" fg:x="184" fg:w="2"/><text x="15.0054%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="14.7554%" y="405" width="0.1604%" height="15" fill="rgb(241,91,40)" fg:x="184" fg:w="2"/><text x="15.0054%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.8356%" y="389" width="0.0802%" height="15" fill="rgb(225,3,45)" fg:x="185" fg:w="1"/><text x="15.0856%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.8356%" y="373" width="0.0802%" height="15" fill="rgb(244,223,14)" fg:x="185" fg:w="1"/><text x="15.0856%" y="383.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="14.9158%" y="421" width="0.0802%" height="15" fill="rgb(224,124,37)" fg:x="186" fg:w="1"/><text x="15.1658%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="14.9960%" y="245" width="0.1604%" height="15" fill="rgb(251,171,30)" fg:x="187" fg:w="2"/><text x="15.2460%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="14.9960%" y="229" width="0.1604%" height="15" fill="rgb(236,46,54)" fg:x="187" fg:w="2"/><text x="15.2460%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="14.9960%" y="213" width="0.1604%" height="15" fill="rgb(245,213,5)" fg:x="187" fg:w="2"/><text x="15.2460%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="14.9960%" y="197" width="0.1604%" height="15" fill="rgb(230,144,27)" fg:x="187" fg:w="2"/><text x="15.2460%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="14.9960%" y="181" width="0.1604%" height="15" fill="rgb(220,86,6)" fg:x="187" fg:w="2"/><text x="15.2460%" y="191.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="14.9960%" y="165" width="0.1604%" height="15" fill="rgb(240,20,13)" fg:x="187" fg:w="2"/><text x="15.2460%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="14.9960%" y="149" width="0.1604%" height="15" fill="rgb(217,89,34)" fg:x="187" fg:w="2"/><text x="15.2460%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="14.9960%" y="357" width="0.2406%" height="15" fill="rgb(229,13,5)" fg:x="187" fg:w="3"/><text x="15.2460%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="14.9960%" y="341" width="0.2406%" height="15" fill="rgb(244,67,35)" fg:x="187" fg:w="3"/><text x="15.2460%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="14.9960%" y="325" width="0.2406%" height="15" fill="rgb(221,40,2)" fg:x="187" fg:w="3"/><text x="15.2460%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="14.9960%" y="309" width="0.2406%" height="15" fill="rgb(237,157,21)" fg:x="187" fg:w="3"/><text x="15.2460%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="14.9960%" y="293" width="0.2406%" height="15" fill="rgb(222,94,11)" fg:x="187" fg:w="3"/><text x="15.2460%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="14.9960%" y="277" width="0.2406%" height="15" fill="rgb(249,113,6)" fg:x="187" fg:w="3"/><text x="15.2460%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="14.9960%" y="261" width="0.2406%" height="15" fill="rgb(238,137,36)" fg:x="187" fg:w="3"/><text x="15.2460%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="15.1564%" y="245" width="0.0802%" height="15" fill="rgb(210,102,26)" fg:x="189" fg:w="1"/><text x="15.4064%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="15.1564%" y="229" width="0.0802%" height="15" fill="rgb(218,30,30)" fg:x="189" fg:w="1"/><text x="15.4064%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="14.9960%" y="373" width="0.4010%" height="15" fill="rgb(214,67,26)" fg:x="187" fg:w="5"/><text x="15.2460%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.2366%" y="357" width="0.1604%" height="15" fill="rgb(251,9,53)" fg:x="190" fg:w="2"/><text x="15.4866%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.2366%" y="341" width="0.1604%" height="15" fill="rgb(228,204,25)" fg:x="190" fg:w="2"/><text x="15.4866%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="15.2366%" y="325" width="0.1604%" height="15" fill="rgb(207,153,8)" fg:x="190" fg:w="2"/><text x="15.4866%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="15.2366%" y="309" width="0.1604%" height="15" fill="rgb(242,9,16)" fg:x="190" fg:w="2"/><text x="15.4866%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="15.2366%" y="293" width="0.1604%" height="15" fill="rgb(217,211,10)" fg:x="190" fg:w="2"/><text x="15.4866%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="15.2366%" y="277" width="0.1604%" height="15" fill="rgb(219,228,52)" fg:x="190" fg:w="2"/><text x="15.4866%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="15.2366%" y="261" width="0.1604%" height="15" fill="rgb(231,92,29)" fg:x="190" fg:w="2"/><text x="15.4866%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="15.2366%" y="245" width="0.1604%" height="15" fill="rgb(232,8,23)" fg:x="190" fg:w="2"/><text x="15.4866%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="15.2366%" y="229" width="0.1604%" height="15" fill="rgb(216,211,34)" fg:x="190" fg:w="2"/><text x="15.4866%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="15.2366%" y="213" width="0.1604%" height="15" fill="rgb(236,151,0)" fg:x="190" fg:w="2"/><text x="15.4866%" y="223.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="15.2366%" y="197" width="0.1604%" height="15" fill="rgb(209,168,3)" fg:x="190" fg:w="2"/><text x="15.4866%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.2366%" y="181" width="0.1604%" height="15" fill="rgb(208,129,28)" fg:x="190" fg:w="2"/><text x="15.4866%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (7 samples, 0.56%)</title><rect x="14.9960%" y="389" width="0.5613%" height="15" fill="rgb(229,78,22)" fg:x="187" fg:w="7"/><text x="15.2460%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.3970%" y="373" width="0.1604%" height="15" fill="rgb(228,187,13)" fg:x="192" fg:w="2"/><text x="15.6470%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.3970%" y="357" width="0.1604%" height="15" fill="rgb(240,119,24)" fg:x="192" fg:w="2"/><text x="15.6470%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="15.3970%" y="341" width="0.1604%" height="15" fill="rgb(209,194,42)" fg:x="192" fg:w="2"/><text x="15.6470%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="15.3970%" y="325" width="0.1604%" height="15" fill="rgb(247,200,46)" fg:x="192" fg:w="2"/><text x="15.6470%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="15.3970%" y="309" width="0.1604%" height="15" fill="rgb(218,76,16)" fg:x="192" fg:w="2"/><text x="15.6470%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="15.3970%" y="293" width="0.1604%" height="15" fill="rgb(225,21,48)" fg:x="192" fg:w="2"/><text x="15.6470%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="15.3970%" y="277" width="0.1604%" height="15" fill="rgb(239,223,50)" fg:x="192" fg:w="2"/><text x="15.6470%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="15.3970%" y="261" width="0.1604%" height="15" fill="rgb(244,45,21)" fg:x="192" fg:w="2"/><text x="15.6470%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="15.3970%" y="245" width="0.1604%" height="15" fill="rgb(232,33,43)" fg:x="192" fg:w="2"/><text x="15.6470%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="15.3970%" y="229" width="0.1604%" height="15" fill="rgb(209,8,3)" fg:x="192" fg:w="2"/><text x="15.6470%" y="239.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="15.3970%" y="213" width="0.1604%" height="15" fill="rgb(214,25,53)" fg:x="192" fg:w="2"/><text x="15.6470%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.3970%" y="197" width="0.1604%" height="15" fill="rgb(254,186,54)" fg:x="192" fg:w="2"/><text x="15.6470%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (11 samples, 0.88%)</title><rect x="14.9158%" y="437" width="0.8821%" height="15" fill="rgb(208,174,49)" fg:x="186" fg:w="11"/><text x="15.1658%" y="447.50"></text></g><g><title>kernel::model::props::load_props (10 samples, 0.80%)</title><rect x="14.9960%" y="421" width="0.8019%" height="15" fill="rgb(233,191,51)" fg:x="187" fg:w="10"/><text x="15.2460%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (10 samples, 0.80%)</title><rect x="14.9960%" y="405" width="0.8019%" height="15" fill="rgb(222,134,10)" fg:x="187" fg:w="10"/><text x="15.2460%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="15.5573%" y="389" width="0.2406%" height="15" fill="rgb(230,226,20)" fg:x="194" fg:w="3"/><text x="15.8073%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.5573%" y="373" width="0.2406%" height="15" fill="rgb(251,111,25)" fg:x="194" fg:w="3"/><text x="15.8073%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="15.5573%" y="357" width="0.2406%" height="15" fill="rgb(224,40,46)" fg:x="194" fg:w="3"/><text x="15.8073%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.5573%" y="341" width="0.2406%" height="15" fill="rgb(236,108,47)" fg:x="194" fg:w="3"/><text x="15.8073%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="15.5573%" y="325" width="0.2406%" height="15" fill="rgb(234,93,0)" fg:x="194" fg:w="3"/><text x="15.8073%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.5573%" y="309" width="0.2406%" height="15" fill="rgb(224,213,32)" fg:x="194" fg:w="3"/><text x="15.8073%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (3 samples, 0.24%)</title><rect x="15.5573%" y="293" width="0.2406%" height="15" fill="rgb(251,11,48)" fg:x="194" fg:w="3"/><text x="15.8073%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.5573%" y="277" width="0.2406%" height="15" fill="rgb(236,173,5)" fg:x="194" fg:w="3"/><text x="15.8073%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.7177%" y="261" width="0.0802%" height="15" fill="rgb(230,95,12)" fg:x="196" fg:w="1"/><text x="15.9677%" y="271.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="15.7979%" y="437" width="0.0802%" height="15" fill="rgb(232,209,1)" fg:x="197" fg:w="1"/><text x="16.0479%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="15.7979%" y="421" width="0.0802%" height="15" fill="rgb(232,6,1)" fg:x="197" fg:w="1"/><text x="16.0479%" y="431.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="15.7979%" y="405" width="0.0802%" height="15" fill="rgb(210,224,50)" fg:x="197" fg:w="1"/><text x="16.0479%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="15.7979%" y="389" width="0.0802%" height="15" fill="rgb(228,127,35)" fg:x="197" fg:w="1"/><text x="16.0479%" y="399.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="15.7979%" y="373" width="0.0802%" height="15" fill="rgb(245,102,45)" fg:x="197" fg:w="1"/><text x="16.0479%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="15.7979%" y="357" width="0.0802%" height="15" fill="rgb(214,1,49)" fg:x="197" fg:w="1"/><text x="16.0479%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="15.7979%" y="341" width="0.0802%" height="15" fill="rgb(226,163,40)" fg:x="197" fg:w="1"/><text x="16.0479%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.7979%" y="325" width="0.0802%" height="15" fill="rgb(239,212,28)" fg:x="197" fg:w="1"/><text x="16.0479%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.7979%" y="309" width="0.0802%" height="15" fill="rgb(220,20,13)" fg:x="197" fg:w="1"/><text x="16.0479%" y="319.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="15.7979%" y="293" width="0.0802%" height="15" fill="rgb(210,164,35)" fg:x="197" fg:w="1"/><text x="16.0479%" y="303.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="15.7979%" y="277" width="0.0802%" height="15" fill="rgb(248,109,41)" fg:x="197" fg:w="1"/><text x="16.0479%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.7979%" y="261" width="0.0802%" height="15" fill="rgb(238,23,50)" fg:x="197" fg:w="1"/><text x="16.0479%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.7979%" y="245" width="0.0802%" height="15" fill="rgb(211,48,49)" fg:x="197" fg:w="1"/><text x="16.0479%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="15.7979%" y="229" width="0.0802%" height="15" fill="rgb(223,36,21)" fg:x="197" fg:w="1"/><text x="16.0479%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="15.7979%" y="213" width="0.0802%" height="15" fill="rgb(207,123,46)" fg:x="197" fg:w="1"/><text x="16.0479%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="15.7979%" y="197" width="0.0802%" height="15" fill="rgb(240,218,32)" fg:x="197" fg:w="1"/><text x="16.0479%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="15.7979%" y="181" width="0.0802%" height="15" fill="rgb(252,5,43)" fg:x="197" fg:w="1"/><text x="16.0479%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="15.7979%" y="165" width="0.0802%" height="15" fill="rgb(252,84,19)" fg:x="197" fg:w="1"/><text x="16.0479%" y="175.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="15.8781%" y="373" width="0.0802%" height="15" fill="rgb(243,152,39)" fg:x="198" fg:w="1"/><text x="16.1281%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (4 samples, 0.32%)</title><rect x="16.1187%" y="277" width="0.3208%" height="15" fill="rgb(234,160,15)" fg:x="201" fg:w="4"/><text x="16.3687%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (3 samples, 0.24%)</title><rect x="16.1989%" y="261" width="0.2406%" height="15" fill="rgb(237,34,20)" fg:x="202" fg:w="3"/><text x="16.4489%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="16.3593%" y="245" width="0.0802%" height="15" fill="rgb(229,97,13)" fg:x="204" fg:w="1"/><text x="16.6093%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.5998%" y="261" width="0.0802%" height="15" fill="rgb(234,71,50)" fg:x="207" fg:w="1"/><text x="16.8498%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.5998%" y="245" width="0.0802%" height="15" fill="rgb(253,155,4)" fg:x="207" fg:w="1"/><text x="16.8498%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5998%" y="229" width="0.0802%" height="15" fill="rgb(222,185,37)" fg:x="207" fg:w="1"/><text x="16.8498%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="16.0385%" y="357" width="0.7217%" height="15" fill="rgb(251,177,13)" fg:x="200" fg:w="9"/><text x="16.2885%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="16.0385%" y="341" width="0.7217%" height="15" fill="rgb(250,179,40)" fg:x="200" fg:w="9"/><text x="16.2885%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (8 samples, 0.64%)</title><rect x="16.1187%" y="325" width="0.6415%" height="15" fill="rgb(242,44,2)" fg:x="201" fg:w="8"/><text x="16.3687%" y="335.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (8 samples, 0.64%)</title><rect x="16.1187%" y="309" width="0.6415%" height="15" fill="rgb(216,177,13)" fg:x="201" fg:w="8"/><text x="16.3687%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (8 samples, 0.64%)</title><rect x="16.1187%" y="293" width="0.6415%" height="15" fill="rgb(216,106,43)" fg:x="201" fg:w="8"/><text x="16.3687%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (4 samples, 0.32%)</title><rect x="16.4395%" y="277" width="0.3208%" height="15" fill="rgb(216,183,2)" fg:x="205" fg:w="4"/><text x="16.6895%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="16.6800%" y="261" width="0.0802%" height="15" fill="rgb(249,75,3)" fg:x="208" fg:w="1"/><text x="16.9300%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="16.7602%" y="341" width="0.1604%" height="15" fill="rgb(219,67,39)" fg:x="209" fg:w="2"/><text x="17.0102%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="16.9206%" y="325" width="0.1604%" height="15" fill="rgb(253,228,2)" fg:x="211" fg:w="2"/><text x="17.1706%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="16.9206%" y="309" width="0.1604%" height="15" fill="rgb(235,138,27)" fg:x="211" fg:w="2"/><text x="17.1706%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="17.0008%" y="293" width="0.0802%" height="15" fill="rgb(236,97,51)" fg:x="212" fg:w="1"/><text x="17.2508%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="17.1612%" y="309" width="0.0802%" height="15" fill="rgb(240,80,30)" fg:x="214" fg:w="1"/><text x="17.4112%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.1612%" y="293" width="0.0802%" height="15" fill="rgb(230,178,19)" fg:x="214" fg:w="1"/><text x="17.4112%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="17.2414%" y="309" width="0.0802%" height="15" fill="rgb(210,190,27)" fg:x="215" fg:w="1"/><text x="17.4914%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.2414%" y="293" width="0.0802%" height="15" fill="rgb(222,107,31)" fg:x="215" fg:w="1"/><text x="17.4914%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (9 samples, 0.72%)</title><rect x="16.7602%" y="357" width="0.7217%" height="15" fill="rgb(216,127,34)" fg:x="209" fg:w="9"/><text x="17.0102%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (7 samples, 0.56%)</title><rect x="16.9206%" y="341" width="0.5613%" height="15" fill="rgb(234,116,52)" fg:x="211" fg:w="7"/><text x="17.1706%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.40%)</title><rect x="17.0810%" y="325" width="0.4010%" height="15" fill="rgb(222,124,15)" fg:x="213" fg:w="5"/><text x="17.3310%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="17.3216%" y="309" width="0.1604%" height="15" fill="rgb(231,179,28)" fg:x="216" fg:w="2"/><text x="17.5716%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="17.3216%" y="293" width="0.1604%" height="15" fill="rgb(226,93,45)" fg:x="216" fg:w="2"/><text x="17.5716%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.9631%" y="277" width="0.0802%" height="15" fill="rgb(215,8,51)" fg:x="224" fg:w="1"/><text x="18.2131%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (29 samples, 2.33%)</title><rect x="18.0433%" y="277" width="2.3256%" height="15" fill="rgb(223,106,5)" fg:x="225" fg:w="29"/><text x="18.2933%" y="287.50">c..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="20.2085%" y="261" width="0.1604%" height="15" fill="rgb(250,191,5)" fg:x="252" fg:w="2"/><text x="20.4585%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (31 samples, 2.49%)</title><rect x="17.9631%" y="293" width="2.4860%" height="15" fill="rgb(242,132,44)" fg:x="224" fg:w="31"/><text x="18.2131%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="20.3689%" y="277" width="0.0802%" height="15" fill="rgb(251,152,29)" fg:x="254" fg:w="1"/><text x="20.6189%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="20.6095%" y="277" width="0.0802%" height="15" fill="rgb(218,179,5)" fg:x="257" fg:w="1"/><text x="20.8595%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="20.6095%" y="261" width="0.0802%" height="15" fill="rgb(227,67,19)" fg:x="257" fg:w="1"/><text x="20.8595%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.6095%" y="245" width="0.0802%" height="15" fill="rgb(233,119,31)" fg:x="257" fg:w="1"/><text x="20.8595%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (9 samples, 0.72%)</title><rect x="20.6897%" y="277" width="0.7217%" height="15" fill="rgb(241,120,22)" fg:x="258" fg:w="9"/><text x="20.9397%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="21.4114%" y="277" width="0.0802%" height="15" fill="rgb(224,102,30)" fg:x="267" fg:w="1"/><text x="21.6614%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (14 samples, 1.12%)</title><rect x="20.4491%" y="293" width="1.1227%" height="15" fill="rgb(210,164,37)" fg:x="255" fg:w="14"/><text x="20.6991%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="21.4916%" y="277" width="0.0802%" height="15" fill="rgb(226,191,16)" fg:x="268" fg:w="1"/><text x="21.7416%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="21.4916%" y="261" width="0.0802%" height="15" fill="rgb(214,40,45)" fg:x="268" fg:w="1"/><text x="21.7416%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="21.4916%" y="245" width="0.0802%" height="15" fill="rgb(244,29,26)" fg:x="268" fg:w="1"/><text x="21.7416%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="21.5718%" y="245" width="0.0802%" height="15" fill="rgb(216,16,5)" fg:x="269" fg:w="1"/><text x="21.8218%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="21.5718%" y="229" width="0.0802%" height="15" fill="rgb(249,76,35)" fg:x="269" fg:w="1"/><text x="21.8218%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.8925%" y="229" width="0.0802%" height="15" fill="rgb(207,11,44)" fg:x="273" fg:w="1"/><text x="22.1425%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="21.9727%" y="229" width="0.1604%" height="15" fill="rgb(228,190,49)" fg:x="274" fg:w="2"/><text x="22.2227%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="22.1331%" y="229" width="0.1604%" height="15" fill="rgb(214,173,12)" fg:x="276" fg:w="2"/><text x="22.3831%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="22.2935%" y="197" width="0.1604%" height="15" fill="rgb(218,26,35)" fg:x="278" fg:w="2"/><text x="22.5435%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="22.2935%" y="181" width="0.1604%" height="15" fill="rgb(220,200,19)" fg:x="278" fg:w="2"/><text x="22.5435%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.3737%" y="165" width="0.0802%" height="15" fill="rgb(239,95,49)" fg:x="279" fg:w="1"/><text x="22.6237%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="22.2935%" y="229" width="0.3208%" height="15" fill="rgb(235,85,53)" fg:x="278" fg:w="4"/><text x="22.5435%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="22.2935%" y="213" width="0.3208%" height="15" fill="rgb(233,133,31)" fg:x="278" fg:w="4"/><text x="22.5435%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="22.4539%" y="197" width="0.1604%" height="15" fill="rgb(218,25,20)" fg:x="280" fg:w="2"/><text x="22.7039%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="22.5341%" y="181" width="0.0802%" height="15" fill="rgb(252,210,38)" fg:x="281" fg:w="1"/><text x="22.7841%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.5341%" y="165" width="0.0802%" height="15" fill="rgb(242,134,21)" fg:x="281" fg:w="1"/><text x="22.7841%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.5341%" y="149" width="0.0802%" height="15" fill="rgb(213,28,48)" fg:x="281" fg:w="1"/><text x="22.7841%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="22.6143%" y="229" width="0.0802%" height="15" fill="rgb(250,196,2)" fg:x="282" fg:w="1"/><text x="22.8643%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="22.6143%" y="213" width="0.0802%" height="15" fill="rgb(227,5,17)" fg:x="282" fg:w="1"/><text x="22.8643%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="22.6143%" y="197" width="0.0802%" height="15" fill="rgb(221,226,24)" fg:x="282" fg:w="1"/><text x="22.8643%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="22.6945%" y="213" width="0.1604%" height="15" fill="rgb(211,5,48)" fg:x="283" fg:w="2"/><text x="22.9445%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.7747%" y="197" width="0.0802%" height="15" fill="rgb(219,150,6)" fg:x="284" fg:w="1"/><text x="23.0247%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.7747%" y="181" width="0.0802%" height="15" fill="rgb(251,46,16)" fg:x="284" fg:w="1"/><text x="23.0247%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (85 samples, 6.82%)</title><rect x="22.6945%" y="229" width="6.8164%" height="15" fill="rgb(220,204,40)" fg:x="283" fg:w="85"/><text x="22.9445%" y="239.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (83 samples, 6.66%)</title><rect x="22.8549%" y="213" width="6.6560%" height="15" fill="rgb(211,85,2)" fg:x="285" fg:w="83"/><text x="23.1049%" y="223.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (83 samples, 6.66%)</title><rect x="22.8549%" y="197" width="6.6560%" height="15" fill="rgb(229,17,7)" fg:x="285" fg:w="83"/><text x="23.1049%" y="207.50">alloc::ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="29.5108%" y="229" width="0.2406%" height="15" fill="rgb(239,72,28)" fg:x="368" fg:w="3"/><text x="29.7608%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.6712%" y="213" width="0.0802%" height="15" fill="rgb(230,47,54)" fg:x="370" fg:w="1"/><text x="29.9212%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 8.26%)</title><rect x="21.5718%" y="277" width="8.2598%" height="15" fill="rgb(214,50,8)" fg:x="269" fg:w="103"/><text x="21.8218%" y="287.50">&lt;core::iter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (103 samples, 8.26%)</title><rect x="21.5718%" y="261" width="8.2598%" height="15" fill="rgb(216,198,43)" fg:x="269" fg:w="103"/><text x="21.8218%" y="271.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (102 samples, 8.18%)</title><rect x="21.6520%" y="245" width="8.1796%" height="15" fill="rgb(234,20,35)" fg:x="270" fg:w="102"/><text x="21.9020%" y="255.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="29.7514%" y="229" width="0.0802%" height="15" fill="rgb(254,45,19)" fg:x="371" fg:w="1"/><text x="30.0014%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.7514%" y="213" width="0.0802%" height="15" fill="rgb(219,14,44)" fg:x="371" fg:w="1"/><text x="30.0014%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.7514%" y="197" width="0.0802%" height="15" fill="rgb(217,220,26)" fg:x="371" fg:w="1"/><text x="30.0014%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.7514%" y="181" width="0.0802%" height="15" fill="rgb(213,158,28)" fg:x="371" fg:w="1"/><text x="30.0014%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.8316%" y="277" width="0.0802%" height="15" fill="rgb(252,51,52)" fg:x="372" fg:w="1"/><text x="30.0816%" y="287.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="30.1524%" y="261" width="0.1604%" height="15" fill="rgb(246,89,16)" fg:x="376" fg:w="2"/><text x="30.4024%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.3128%" y="261" width="0.1604%" height="15" fill="rgb(216,158,49)" fg:x="378" fg:w="2"/><text x="30.5628%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.4731%" y="261" width="0.0802%" height="15" fill="rgb(236,107,19)" fg:x="380" fg:w="1"/><text x="30.7231%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.4731%" y="245" width="0.0802%" height="15" fill="rgb(228,185,30)" fg:x="380" fg:w="1"/><text x="30.7231%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="30.4731%" y="229" width="0.0802%" height="15" fill="rgb(246,134,8)" fg:x="380" fg:w="1"/><text x="30.7231%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="30.4731%" y="213" width="0.0802%" height="15" fill="rgb(214,143,50)" fg:x="380" fg:w="1"/><text x="30.7231%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (12 samples, 0.96%)</title><rect x="30.5533%" y="261" width="0.9623%" height="15" fill="rgb(228,75,8)" fg:x="381" fg:w="12"/><text x="30.8033%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="30.9543%" y="245" width="0.5613%" height="15" fill="rgb(207,175,4)" fg:x="386" fg:w="7"/><text x="31.2043%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.56%)</title><rect x="30.9543%" y="229" width="0.5613%" height="15" fill="rgb(205,108,24)" fg:x="386" fg:w="7"/><text x="31.2043%" y="239.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="31.1147%" y="213" width="0.4010%" height="15" fill="rgb(244,120,49)" fg:x="388" fg:w="5"/><text x="31.3647%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.9968%" y="213" width="0.1604%" height="15" fill="rgb(223,47,38)" fg:x="399" fg:w="2"/><text x="32.2468%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.72%)</title><rect x="31.5156%" y="261" width="0.7217%" height="15" fill="rgb(229,179,11)" fg:x="393" fg:w="9"/><text x="31.7656%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="31.9968%" y="245" width="0.2406%" height="15" fill="rgb(231,122,1)" fg:x="399" fg:w="3"/><text x="32.2468%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="31.9968%" y="229" width="0.2406%" height="15" fill="rgb(245,119,9)" fg:x="399" fg:w="3"/><text x="32.2468%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.1572%" y="213" width="0.0802%" height="15" fill="rgb(241,163,25)" fg:x="401" fg:w="1"/><text x="32.4072%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (30 samples, 2.41%)</title><rect x="29.9118%" y="277" width="2.4058%" height="15" fill="rgb(217,214,3)" fg:x="373" fg:w="30"/><text x="30.1618%" y="287.50">re..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="32.2374%" y="261" width="0.0802%" height="15" fill="rgb(240,86,28)" fg:x="402" fg:w="1"/><text x="32.4874%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="32.3978%" y="261" width="0.1604%" height="15" fill="rgb(215,47,9)" fg:x="404" fg:w="2"/><text x="32.6478%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.6383%" y="245" width="0.0802%" height="15" fill="rgb(252,25,45)" fg:x="407" fg:w="1"/><text x="32.8883%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (6 samples, 0.48%)</title><rect x="32.3176%" y="277" width="0.4812%" height="15" fill="rgb(251,164,9)" fg:x="403" fg:w="6"/><text x="32.5676%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="32.5581%" y="261" width="0.2406%" height="15" fill="rgb(233,194,0)" fg:x="406" fg:w="3"/><text x="32.8081%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="32.7185%" y="245" width="0.0802%" height="15" fill="rgb(249,111,24)" fg:x="408" fg:w="1"/><text x="32.9685%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (141 samples, 11.31%)</title><rect x="21.5718%" y="293" width="11.3071%" height="15" fill="rgb(250,223,3)" fg:x="269" fg:w="141"/><text x="21.8218%" y="303.50">regex_automata::n..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="32.7987%" y="277" width="0.0802%" height="15" fill="rgb(236,178,37)" fg:x="409" fg:w="1"/><text x="33.0487%" y="287.50"></text></g><g><title>regex_syntax::hir::Class::literal (1 samples, 0.08%)</title><rect x="32.7987%" y="261" width="0.0802%" height="15" fill="rgb(241,158,50)" fg:x="409" fg:w="1"/><text x="33.0487%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (190 samples, 15.24%)</title><rect x="17.7225%" y="309" width="15.2366%" height="15" fill="rgb(213,121,41)" fg:x="221" fg:w="190"/><text x="17.9725%" y="319.50">regex_automata::meta::s..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="32.8789%" y="293" width="0.0802%" height="15" fill="rgb(240,92,3)" fg:x="410" fg:w="1"/><text x="33.1289%" y="303.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="32.8789%" y="277" width="0.0802%" height="15" fill="rgb(205,123,3)" fg:x="410" fg:w="1"/><text x="33.1289%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="33.0393%" y="277" width="0.2406%" height="15" fill="rgb(205,97,47)" fg:x="412" fg:w="3"/><text x="33.2893%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="33.1195%" y="261" width="0.1604%" height="15" fill="rgb(247,152,14)" fg:x="413" fg:w="2"/><text x="33.3695%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="33.1195%" y="245" width="0.1604%" height="15" fill="rgb(248,195,53)" fg:x="413" fg:w="2"/><text x="33.3695%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="33.1195%" y="229" width="0.1604%" height="15" fill="rgb(226,201,16)" fg:x="413" fg:w="2"/><text x="33.3695%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="33.1195%" y="213" width="0.1604%" height="15" fill="rgb(205,98,0)" fg:x="413" fg:w="2"/><text x="33.3695%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (2 samples, 0.16%)</title><rect x="33.2799%" y="261" width="0.1604%" height="15" fill="rgb(214,191,48)" fg:x="415" fg:w="2"/><text x="33.5299%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="32.9591%" y="309" width="0.5613%" height="15" fill="rgb(237,112,39)" fg:x="411" fg:w="7"/><text x="33.2091%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="32.9591%" y="293" width="0.5613%" height="15" fill="rgb(247,203,27)" fg:x="411" fg:w="7"/><text x="33.2091%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="33.2799%" y="277" width="0.2406%" height="15" fill="rgb(235,124,28)" fg:x="415" fg:w="3"/><text x="33.5299%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="33.4403%" y="261" width="0.0802%" height="15" fill="rgb(208,207,46)" fg:x="417" fg:w="1"/><text x="33.6903%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.5204%" y="261" width="0.0802%" height="15" fill="rgb(234,176,4)" fg:x="418" fg:w="1"/><text x="33.7704%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.5204%" y="245" width="0.0802%" height="15" fill="rgb(230,133,28)" fg:x="418" fg:w="1"/><text x="33.7704%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.5204%" y="229" width="0.0802%" height="15" fill="rgb(211,137,40)" fg:x="418" fg:w="1"/><text x="33.7704%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (2 samples, 0.16%)</title><rect x="33.6006%" y="261" width="0.1604%" height="15" fill="rgb(254,35,13)" fg:x="419" fg:w="2"/><text x="33.8506%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="33.6808%" y="245" width="0.0802%" height="15" fill="rgb(225,49,51)" fg:x="420" fg:w="1"/><text x="33.9308%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="33.5204%" y="277" width="0.3208%" height="15" fill="rgb(251,10,15)" fg:x="418" fg:w="4"/><text x="33.7704%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_unicode_class (1 samples, 0.08%)</title><rect x="33.7610%" y="261" width="0.0802%" height="15" fill="rgb(228,207,15)" fg:x="421" fg:w="1"/><text x="34.0110%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="33.8412%" y="277" width="0.1604%" height="15" fill="rgb(241,99,19)" fg:x="422" fg:w="2"/><text x="34.0912%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="33.9214%" y="261" width="0.0802%" height="15" fill="rgb(207,104,49)" fg:x="423" fg:w="1"/><text x="34.1714%" y="271.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="33.9214%" y="245" width="0.0802%" height="15" fill="rgb(234,99,18)" fg:x="423" fg:w="1"/><text x="34.1714%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.9214%" y="229" width="0.0802%" height="15" fill="rgb(213,191,49)" fg:x="423" fg:w="1"/><text x="34.1714%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (207 samples, 16.60%)</title><rect x="17.4820%" y="357" width="16.5998%" height="15" fill="rgb(210,226,19)" fg:x="218" fg:w="207"/><text x="17.7320%" y="367.50">regex::regex::string::Rege..</text></g><g><title>regex::builders::Builder::build_one_string (206 samples, 16.52%)</title><rect x="17.5621%" y="341" width="16.5196%" height="15" fill="rgb(229,97,18)" fg:x="219" fg:w="206"/><text x="17.8121%" y="351.50">regex::builders::Builder:..</text></g><g><title>regex_automata::meta::regex::Builder::build (206 samples, 16.52%)</title><rect x="17.5621%" y="325" width="16.5196%" height="15" fill="rgb(211,167,15)" fg:x="219" fg:w="206"/><text x="17.8121%" y="335.50">regex_automata::meta::reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="33.5204%" y="309" width="0.5613%" height="15" fill="rgb(210,169,34)" fg:x="418" fg:w="7"/><text x="33.7704%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="33.5204%" y="293" width="0.5613%" height="15" fill="rgb(241,121,31)" fg:x="418" fg:w="7"/><text x="33.7704%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="34.0016%" y="277" width="0.0802%" height="15" fill="rgb(232,40,11)" fg:x="424" fg:w="1"/><text x="34.2516%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="34.0016%" y="261" width="0.0802%" height="15" fill="rgb(205,86,26)" fg:x="424" fg:w="1"/><text x="34.2516%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.0016%" y="245" width="0.0802%" height="15" fill="rgb(231,126,28)" fg:x="424" fg:w="1"/><text x="34.2516%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.0016%" y="229" width="0.0802%" height="15" fill="rgb(219,221,18)" fg:x="424" fg:w="1"/><text x="34.2516%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.0016%" y="213" width="0.0802%" height="15" fill="rgb(211,40,0)" fg:x="424" fg:w="1"/><text x="34.2516%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="34.3224%" y="277" width="0.1604%" height="15" fill="rgb(239,85,43)" fg:x="428" fg:w="2"/><text x="34.5724%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.3224%" y="261" width="0.1604%" height="15" fill="rgb(231,55,21)" fg:x="428" fg:w="2"/><text x="34.5724%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.4026%" y="245" width="0.0802%" height="15" fill="rgb(225,184,43)" fg:x="429" fg:w="1"/><text x="34.6526%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="34.0818%" y="293" width="0.4812%" height="15" fill="rgb(251,158,41)" fg:x="425" fg:w="6"/><text x="34.3318%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="34.4828%" y="277" width="0.0802%" height="15" fill="rgb(234,159,37)" fg:x="430" fg:w="1"/><text x="34.7328%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.4828%" y="261" width="0.0802%" height="15" fill="rgb(216,204,22)" fg:x="430" fg:w="1"/><text x="34.7328%" y="271.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (233 samples, 18.68%)</title><rect x="15.9583%" y="373" width="18.6848%" height="15" fill="rgb(214,17,3)" fg:x="199" fg:w="233"/><text x="16.2083%" y="383.50">indefinite::helper::Helper::g..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="34.0818%" y="357" width="0.5613%" height="15" fill="rgb(212,111,17)" fg:x="425" fg:w="7"/><text x="34.3318%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="34.0818%" y="341" width="0.5613%" height="15" fill="rgb(221,157,24)" fg:x="425" fg:w="7"/><text x="34.3318%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="34.0818%" y="325" width="0.5613%" height="15" fill="rgb(252,16,13)" fg:x="425" fg:w="7"/><text x="34.3318%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="34.0818%" y="309" width="0.5613%" height="15" fill="rgb(221,62,2)" fg:x="425" fg:w="7"/><text x="34.3318%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="34.5630%" y="293" width="0.0802%" height="15" fill="rgb(247,87,22)" fg:x="431" fg:w="1"/><text x="34.8130%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.5630%" y="277" width="0.0802%" height="15" fill="rgb(215,73,9)" fg:x="431" fg:w="1"/><text x="34.8130%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.5630%" y="261" width="0.0802%" height="15" fill="rgb(207,175,33)" fg:x="431" fg:w="1"/><text x="34.8130%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.5630%" y="245" width="0.0802%" height="15" fill="rgb(243,129,54)" fg:x="431" fg:w="1"/><text x="34.8130%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.7233%" y="341" width="0.0802%" height="15" fill="rgb(227,119,45)" fg:x="433" fg:w="1"/><text x="34.9733%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.8035%" y="309" width="0.0802%" height="15" fill="rgb(205,109,36)" fg:x="434" fg:w="1"/><text x="35.0535%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.8035%" y="293" width="0.0802%" height="15" fill="rgb(205,6,39)" fg:x="434" fg:w="1"/><text x="35.0535%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.8035%" y="277" width="0.0802%" height="15" fill="rgb(221,32,16)" fg:x="434" fg:w="1"/><text x="35.0535%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="34.8035%" y="325" width="0.1604%" height="15" fill="rgb(228,144,50)" fg:x="434" fg:w="2"/><text x="35.0535%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="34.8837%" y="309" width="0.0802%" height="15" fill="rgb(229,201,53)" fg:x="435" fg:w="1"/><text x="35.1337%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.8837%" y="293" width="0.0802%" height="15" fill="rgb(249,153,27)" fg:x="435" fg:w="1"/><text x="35.1337%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.8837%" y="277" width="0.0802%" height="15" fill="rgb(227,106,25)" fg:x="435" fg:w="1"/><text x="35.1337%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.8837%" y="261" width="0.0802%" height="15" fill="rgb(230,65,29)" fg:x="435" fg:w="1"/><text x="35.1337%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.9639%" y="309" width="0.0802%" height="15" fill="rgb(221,57,46)" fg:x="436" fg:w="1"/><text x="35.2139%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (9 samples, 0.72%)</title><rect x="34.7233%" y="357" width="0.7217%" height="15" fill="rgb(229,161,17)" fg:x="433" fg:w="9"/><text x="34.9733%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (8 samples, 0.64%)</title><rect x="34.8035%" y="341" width="0.6415%" height="15" fill="rgb(222,213,11)" fg:x="434" fg:w="8"/><text x="35.0535%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (6 samples, 0.48%)</title><rect x="34.9639%" y="325" width="0.4812%" height="15" fill="rgb(235,35,13)" fg:x="436" fg:w="6"/><text x="35.2139%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (5 samples, 0.40%)</title><rect x="35.0441%" y="309" width="0.4010%" height="15" fill="rgb(233,158,34)" fg:x="437" fg:w="5"/><text x="35.2941%" y="319.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="35.1243%" y="293" width="0.3208%" height="15" fill="rgb(215,151,48)" fg:x="438" fg:w="4"/><text x="35.3743%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="35.4451%" y="309" width="0.0802%" height="15" fill="rgb(229,84,14)" fg:x="442" fg:w="1"/><text x="35.6951%" y="319.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="35.4451%" y="293" width="0.0802%" height="15" fill="rgb(229,68,14)" fg:x="442" fg:w="1"/><text x="35.6951%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="35.4451%" y="341" width="0.1604%" height="15" fill="rgb(243,106,26)" fg:x="442" fg:w="2"/><text x="35.6951%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="35.4451%" y="325" width="0.1604%" height="15" fill="rgb(206,45,38)" fg:x="442" fg:w="2"/><text x="35.6951%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="35.5253%" y="309" width="0.0802%" height="15" fill="rgb(226,6,15)" fg:x="443" fg:w="1"/><text x="35.7753%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="35.5253%" y="293" width="0.0802%" height="15" fill="rgb(232,22,54)" fg:x="443" fg:w="1"/><text x="35.7753%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="35.6055%" y="277" width="0.1604%" height="15" fill="rgb(229,222,32)" fg:x="444" fg:w="2"/><text x="35.8555%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="36.1668%" y="261" width="0.2406%" height="15" fill="rgb(228,62,29)" fg:x="451" fg:w="3"/><text x="36.4168%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="36.1668%" y="245" width="0.2406%" height="15" fill="rgb(251,103,34)" fg:x="451" fg:w="3"/><text x="36.4168%" y="255.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="36.1668%" y="229" width="0.2406%" height="15" fill="rgb(233,12,30)" fg:x="451" fg:w="3"/><text x="36.4168%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (20 samples, 1.60%)</title><rect x="35.4451%" y="357" width="1.6038%" height="15" fill="rgb(238,52,0)" fg:x="442" fg:w="20"/><text x="35.6951%" y="367.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (18 samples, 1.44%)</title><rect x="35.6055%" y="341" width="1.4435%" height="15" fill="rgb(223,98,5)" fg:x="444" fg:w="18"/><text x="35.8555%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (18 samples, 1.44%)</title><rect x="35.6055%" y="325" width="1.4435%" height="15" fill="rgb(228,75,37)" fg:x="444" fg:w="18"/><text x="35.8555%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (18 samples, 1.44%)</title><rect x="35.6055%" y="309" width="1.4435%" height="15" fill="rgb(205,115,49)" fg:x="444" fg:w="18"/><text x="35.8555%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (18 samples, 1.44%)</title><rect x="35.6055%" y="293" width="1.4435%" height="15" fill="rgb(250,154,43)" fg:x="444" fg:w="18"/><text x="35.8555%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (16 samples, 1.28%)</title><rect x="35.7658%" y="277" width="1.2831%" height="15" fill="rgb(226,43,29)" fg:x="446" fg:w="16"/><text x="36.0158%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (8 samples, 0.64%)</title><rect x="36.4074%" y="261" width="0.6415%" height="15" fill="rgb(249,228,39)" fg:x="454" fg:w="8"/><text x="36.6574%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="37.1291%" y="277" width="0.0802%" height="15" fill="rgb(216,79,43)" fg:x="463" fg:w="1"/><text x="37.3791%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="37.1291%" y="293" width="0.1604%" height="15" fill="rgb(228,95,12)" fg:x="463" fg:w="2"/><text x="37.3791%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.2093%" y="277" width="0.0802%" height="15" fill="rgb(249,221,15)" fg:x="464" fg:w="1"/><text x="37.4593%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="37.1291%" y="309" width="0.3208%" height="15" fill="rgb(233,34,13)" fg:x="463" fg:w="4"/><text x="37.3791%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="37.2895%" y="293" width="0.1604%" height="15" fill="rgb(214,103,39)" fg:x="465" fg:w="2"/><text x="37.5395%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.4499%" y="309" width="0.0802%" height="15" fill="rgb(251,126,39)" fg:x="467" fg:w="1"/><text x="37.6999%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="37.5301%" y="309" width="0.1604%" height="15" fill="rgb(214,216,36)" fg:x="468" fg:w="2"/><text x="37.7801%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="37.5301%" y="293" width="0.1604%" height="15" fill="rgb(220,221,8)" fg:x="468" fg:w="2"/><text x="37.7801%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="37.6103%" y="277" width="0.0802%" height="15" fill="rgb(240,216,3)" fg:x="469" fg:w="1"/><text x="37.8603%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="37.6103%" y="261" width="0.0802%" height="15" fill="rgb(232,218,17)" fg:x="469" fg:w="1"/><text x="37.8603%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (34 samples, 2.73%)</title><rect x="37.9310%" y="293" width="2.7265%" height="15" fill="rgb(229,163,45)" fg:x="473" fg:w="34"/><text x="38.1810%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (33 samples, 2.65%)</title><rect x="38.0112%" y="277" width="2.6464%" height="15" fill="rgb(231,110,42)" fg:x="474" fg:w="33"/><text x="38.2612%" y="287.50">co..</text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="40.4170%" y="261" width="0.2406%" height="15" fill="rgb(208,170,48)" fg:x="504" fg:w="3"/><text x="40.6670%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="40.6576%" y="277" width="0.3208%" height="15" fill="rgb(239,116,25)" fg:x="507" fg:w="4"/><text x="40.9076%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="40.8982%" y="261" width="0.0802%" height="15" fill="rgb(219,200,50)" fg:x="510" fg:w="1"/><text x="41.1482%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.8982%" y="245" width="0.0802%" height="15" fill="rgb(245,200,0)" fg:x="510" fg:w="1"/><text x="41.1482%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="40.6576%" y="293" width="0.4812%" height="15" fill="rgb(245,119,33)" fg:x="507" fg:w="6"/><text x="40.9076%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="40.9783%" y="277" width="0.1604%" height="15" fill="rgb(231,125,12)" fg:x="511" fg:w="2"/><text x="41.2283%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.4595%" y="261" width="0.0802%" height="15" fill="rgb(216,96,41)" fg:x="517" fg:w="1"/><text x="41.7095%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.5397%" y="261" width="0.0802%" height="15" fill="rgb(248,43,45)" fg:x="518" fg:w="1"/><text x="41.7897%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.5397%" y="245" width="0.0802%" height="15" fill="rgb(217,222,7)" fg:x="518" fg:w="1"/><text x="41.7897%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.5397%" y="229" width="0.0802%" height="15" fill="rgb(233,28,6)" fg:x="518" fg:w="1"/><text x="41.7897%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (9 samples, 0.72%)</title><rect x="41.6199%" y="261" width="0.7217%" height="15" fill="rgb(231,218,15)" fg:x="519" fg:w="9"/><text x="41.8699%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.48%)</title><rect x="41.8605%" y="245" width="0.4812%" height="15" fill="rgb(226,171,48)" fg:x="522" fg:w="6"/><text x="42.1105%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="42.1010%" y="229" width="0.2406%" height="15" fill="rgb(235,201,9)" fg:x="525" fg:w="3"/><text x="42.3510%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.1812%" y="213" width="0.1604%" height="15" fill="rgb(217,80,15)" fg:x="526" fg:w="2"/><text x="42.4312%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="42.1812%" y="197" width="0.1604%" height="15" fill="rgb(219,152,8)" fg:x="526" fg:w="2"/><text x="42.4312%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="42.5020%" y="245" width="0.4010%" height="15" fill="rgb(243,107,38)" fg:x="530" fg:w="5"/><text x="42.7520%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="42.5020%" y="229" width="0.4010%" height="15" fill="rgb(231,17,5)" fg:x="530" fg:w="5"/><text x="42.7520%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (23 samples, 1.84%)</title><rect x="41.1387%" y="277" width="1.8444%" height="15" fill="rgb(209,25,54)" fg:x="513" fg:w="23"/><text x="41.3887%" y="287.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.64%)</title><rect x="42.3416%" y="261" width="0.6415%" height="15" fill="rgb(219,0,2)" fg:x="528" fg:w="8"/><text x="42.5916%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="42.9030%" y="245" width="0.0802%" height="15" fill="rgb(246,9,5)" fg:x="535" fg:w="1"/><text x="43.1530%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (24 samples, 1.92%)</title><rect x="41.1387%" y="293" width="1.9246%" height="15" fill="rgb(226,159,4)" fg:x="513" fg:w="24"/><text x="41.3887%" y="303.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="42.9832%" y="277" width="0.0802%" height="15" fill="rgb(219,175,34)" fg:x="536" fg:w="1"/><text x="43.2332%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="42.9832%" y="261" width="0.0802%" height="15" fill="rgb(236,10,46)" fg:x="536" fg:w="1"/><text x="43.2332%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="42.9832%" y="245" width="0.0802%" height="15" fill="rgb(240,211,16)" fg:x="536" fg:w="1"/><text x="43.2332%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="43.0634%" y="293" width="0.0802%" height="15" fill="rgb(205,3,43)" fg:x="537" fg:w="1"/><text x="43.3134%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="43.0634%" y="277" width="0.0802%" height="15" fill="rgb(245,7,22)" fg:x="537" fg:w="1"/><text x="43.3134%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="43.0634%" y="261" width="0.0802%" height="15" fill="rgb(239,132,32)" fg:x="537" fg:w="1"/><text x="43.3134%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="43.0634%" y="245" width="0.0802%" height="15" fill="rgb(228,202,34)" fg:x="537" fg:w="1"/><text x="43.3134%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.1435%" y="261" width="0.0802%" height="15" fill="rgb(254,200,22)" fg:x="538" fg:w="1"/><text x="43.3935%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.1435%" y="245" width="0.0802%" height="15" fill="rgb(219,10,39)" fg:x="538" fg:w="1"/><text x="43.3935%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.1435%" y="229" width="0.0802%" height="15" fill="rgb(226,210,39)" fg:x="538" fg:w="1"/><text x="43.3935%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="43.3039%" y="229" width="0.0802%" height="15" fill="rgb(208,219,16)" fg:x="540" fg:w="1"/><text x="43.5539%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="44.5870%" y="181" width="0.0802%" height="15" fill="rgb(216,158,51)" fg:x="556" fg:w="1"/><text x="44.8370%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.88%)</title><rect x="44.6672%" y="181" width="0.8821%" height="15" fill="rgb(233,14,44)" fg:x="557" fg:w="11"/><text x="44.9172%" y="191.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="45.5493%" y="181" width="0.3208%" height="15" fill="rgb(237,97,39)" fg:x="568" fg:w="4"/><text x="45.7993%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="45.8701%" y="181" width="0.3208%" height="15" fill="rgb(218,198,43)" fg:x="572" fg:w="4"/><text x="46.1201%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.1107%" y="165" width="0.0802%" height="15" fill="rgb(231,104,20)" fg:x="575" fg:w="1"/><text x="46.3607%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.1107%" y="149" width="0.0802%" height="15" fill="rgb(254,36,13)" fg:x="575" fg:w="1"/><text x="46.3607%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.1107%" y="133" width="0.0802%" height="15" fill="rgb(248,14,50)" fg:x="575" fg:w="1"/><text x="46.3607%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="46.1909%" y="181" width="0.0802%" height="15" fill="rgb(217,107,29)" fg:x="576" fg:w="1"/><text x="46.4409%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="46.6720%" y="149" width="0.1604%" height="15" fill="rgb(251,169,33)" fg:x="582" fg:w="2"/><text x="46.9220%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="46.9928%" y="117" width="0.1604%" height="15" fill="rgb(217,108,32)" fg:x="586" fg:w="2"/><text x="47.2428%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="46.8324%" y="149" width="0.5613%" height="15" fill="rgb(219,66,42)" fg:x="584" fg:w="7"/><text x="47.0824%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="46.9126%" y="133" width="0.4812%" height="15" fill="rgb(206,180,7)" fg:x="585" fg:w="6"/><text x="47.1626%" y="143.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="47.1532%" y="117" width="0.2406%" height="15" fill="rgb(208,226,31)" fg:x="588" fg:w="3"/><text x="47.4032%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.4362%" y="133" width="0.0802%" height="15" fill="rgb(218,26,49)" fg:x="604" fg:w="1"/><text x="48.6862%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (29 samples, 2.33%)</title><rect x="46.2711%" y="181" width="2.3256%" height="15" fill="rgb(233,197,48)" fg:x="577" fg:w="29"/><text x="46.5211%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (28 samples, 2.25%)</title><rect x="46.3512%" y="165" width="2.2454%" height="15" fill="rgb(252,181,51)" fg:x="578" fg:w="28"/><text x="46.6012%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (15 samples, 1.20%)</title><rect x="47.3937%" y="149" width="1.2029%" height="15" fill="rgb(253,90,19)" fg:x="591" fg:w="15"/><text x="47.6437%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="48.5164%" y="133" width="0.0802%" height="15" fill="rgb(215,171,30)" fg:x="605" fg:w="1"/><text x="48.7664%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="48.5966%" y="181" width="0.0802%" height="15" fill="rgb(214,222,9)" fg:x="606" fg:w="1"/><text x="48.8466%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="48.5966%" y="165" width="0.0802%" height="15" fill="rgb(223,3,22)" fg:x="606" fg:w="1"/><text x="48.8466%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (68 samples, 5.45%)</title><rect x="48.6768%" y="181" width="5.4531%" height="15" fill="rgb(225,196,46)" fg:x="607" fg:w="68"/><text x="48.9268%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (68 samples, 5.45%)</title><rect x="48.6768%" y="165" width="5.4531%" height="15" fill="rgb(209,110,37)" fg:x="607" fg:w="68"/><text x="48.9268%" y="175.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (68 samples, 5.45%)</title><rect x="48.6768%" y="149" width="5.4531%" height="15" fill="rgb(249,89,12)" fg:x="607" fg:w="68"/><text x="48.9268%" y="159.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.48%)</title><rect x="54.1299%" y="181" width="0.4812%" height="15" fill="rgb(226,27,33)" fg:x="675" fg:w="6"/><text x="54.3799%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.5309%" y="165" width="0.0802%" height="15" fill="rgb(213,82,22)" fg:x="680" fg:w="1"/><text x="54.7809%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (153 samples, 12.27%)</title><rect x="43.1435%" y="277" width="12.2694%" height="15" fill="rgb(248,140,0)" fg:x="538" fg:w="153"/><text x="43.3935%" y="287.50">&lt;core::iter::adapt..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (152 samples, 12.19%)</title><rect x="43.2237%" y="261" width="12.1893%" height="15" fill="rgb(228,106,3)" fg:x="539" fg:w="152"/><text x="43.4737%" y="271.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (152 samples, 12.19%)</title><rect x="43.2237%" y="245" width="12.1893%" height="15" fill="rgb(209,23,37)" fg:x="539" fg:w="152"/><text x="43.4737%" y="255.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (150 samples, 12.03%)</title><rect x="43.3841%" y="229" width="12.0289%" height="15" fill="rgb(241,93,50)" fg:x="541" fg:w="150"/><text x="43.6341%" y="239.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (149 samples, 11.95%)</title><rect x="43.4643%" y="213" width="11.9487%" height="15" fill="rgb(253,46,43)" fg:x="542" fg:w="149"/><text x="43.7143%" y="223.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (149 samples, 11.95%)</title><rect x="43.4643%" y="197" width="11.9487%" height="15" fill="rgb(226,206,43)" fg:x="542" fg:w="149"/><text x="43.7143%" y="207.50">regex_automata::nf..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (10 samples, 0.80%)</title><rect x="54.6111%" y="181" width="0.8019%" height="15" fill="rgb(217,54,7)" fg:x="681" fg:w="10"/><text x="54.8611%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="54.8516%" y="165" width="0.5613%" height="15" fill="rgb(223,5,52)" fg:x="684" fg:w="7"/><text x="55.1016%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="55.0120%" y="149" width="0.4010%" height="15" fill="rgb(206,52,46)" fg:x="686" fg:w="5"/><text x="55.2620%" y="159.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="55.1724%" y="133" width="0.2406%" height="15" fill="rgb(253,136,11)" fg:x="688" fg:w="3"/><text x="55.4224%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="55.4130%" y="277" width="0.1604%" height="15" fill="rgb(208,106,33)" fg:x="691" fg:w="2"/><text x="55.6630%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.4932%" y="261" width="0.0802%" height="15" fill="rgb(206,54,4)" fg:x="692" fg:w="1"/><text x="55.7432%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.4932%" y="245" width="0.0802%" height="15" fill="rgb(213,3,15)" fg:x="692" fg:w="1"/><text x="55.7432%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.4932%" y="229" width="0.0802%" height="15" fill="rgb(252,211,39)" fg:x="692" fg:w="1"/><text x="55.7432%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.8941%" y="261" width="0.0802%" height="15" fill="rgb(223,6,36)" fg:x="697" fg:w="1"/><text x="56.1441%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.9743%" y="261" width="0.1604%" height="15" fill="rgb(252,169,45)" fg:x="698" fg:w="2"/><text x="56.2243%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.1347%" y="261" width="0.0802%" height="15" fill="rgb(212,48,26)" fg:x="700" fg:w="1"/><text x="56.3847%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (9 samples, 0.72%)</title><rect x="56.2149%" y="261" width="0.7217%" height="15" fill="rgb(251,102,48)" fg:x="701" fg:w="9"/><text x="56.4649%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="56.6961%" y="245" width="0.2406%" height="15" fill="rgb(243,208,16)" fg:x="707" fg:w="3"/><text x="56.9461%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="56.7763%" y="229" width="0.1604%" height="15" fill="rgb(219,96,24)" fg:x="708" fg:w="2"/><text x="57.0263%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.8565%" y="213" width="0.0802%" height="15" fill="rgb(219,33,29)" fg:x="709" fg:w="1"/><text x="57.1065%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.2574%" y="245" width="0.0802%" height="15" fill="rgb(223,176,5)" fg:x="714" fg:w="1"/><text x="57.5074%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.2574%" y="229" width="0.0802%" height="15" fill="rgb(228,140,14)" fg:x="714" fg:w="1"/><text x="57.5074%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.3376%" y="213" width="0.0802%" height="15" fill="rgb(217,179,31)" fg:x="715" fg:w="1"/><text x="57.5876%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="56.9366%" y="261" width="0.5613%" height="15" fill="rgb(230,9,30)" fg:x="710" fg:w="7"/><text x="57.1866%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="57.3376%" y="245" width="0.1604%" height="15" fill="rgb(230,136,20)" fg:x="715" fg:w="2"/><text x="57.5876%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="57.3376%" y="229" width="0.1604%" height="15" fill="rgb(215,210,22)" fg:x="715" fg:w="2"/><text x="57.5876%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="57.4178%" y="213" width="0.0802%" height="15" fill="rgb(218,43,5)" fg:x="716" fg:w="1"/><text x="57.6678%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="57.4178%" y="197" width="0.0802%" height="15" fill="rgb(216,11,5)" fg:x="716" fg:w="1"/><text x="57.6678%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="57.4980%" y="261" width="0.1604%" height="15" fill="rgb(209,82,29)" fg:x="717" fg:w="2"/><text x="57.7480%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.6584%" y="245" width="0.0802%" height="15" fill="rgb(244,115,12)" fg:x="719" fg:w="1"/><text x="57.9084%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (184 samples, 14.76%)</title><rect x="43.1435%" y="293" width="14.7554%" height="15" fill="rgb(222,82,18)" fg:x="538" fg:w="184"/><text x="43.3935%" y="303.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (29 samples, 2.33%)</title><rect x="55.5734%" y="277" width="2.3256%" height="15" fill="rgb(249,227,8)" fg:x="693" fg:w="29"/><text x="55.8234%" y="287.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (3 samples, 0.24%)</title><rect x="57.6584%" y="261" width="0.2406%" height="15" fill="rgb(253,141,45)" fg:x="719" fg:w="3"/><text x="57.9084%" y="271.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="57.7386%" y="245" width="0.1604%" height="15" fill="rgb(234,184,4)" fg:x="720" fg:w="2"/><text x="57.9886%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.8188%" y="229" width="0.0802%" height="15" fill="rgb(218,194,23)" fg:x="721" fg:w="1"/><text x="58.0688%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.8188%" y="213" width="0.0802%" height="15" fill="rgb(235,66,41)" fg:x="721" fg:w="1"/><text x="58.0688%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.8188%" y="197" width="0.0802%" height="15" fill="rgb(245,217,1)" fg:x="721" fg:w="1"/><text x="58.0688%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (253 samples, 20.29%)</title><rect x="37.6905%" y="309" width="20.2887%" height="15" fill="rgb(229,91,1)" fg:x="470" fg:w="253"/><text x="37.9405%" y="319.50">regex_automata::meta::strategy::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="57.8990%" y="293" width="0.0802%" height="15" fill="rgb(207,101,30)" fg:x="722" fg:w="1"/><text x="58.1490%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="57.8990%" y="277" width="0.0802%" height="15" fill="rgb(223,82,49)" fg:x="722" fg:w="1"/><text x="58.1490%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="58.2999%" y="261" width="0.0802%" height="15" fill="rgb(218,167,17)" fg:x="727" fg:w="1"/><text x="58.5499%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="58.3801%" y="245" width="0.2406%" height="15" fill="rgb(208,103,14)" fg:x="728" fg:w="3"/><text x="58.6301%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="58.3801%" y="229" width="0.2406%" height="15" fill="rgb(238,20,8)" fg:x="728" fg:w="3"/><text x="58.6301%" y="239.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="58.3801%" y="213" width="0.2406%" height="15" fill="rgb(218,80,54)" fg:x="728" fg:w="3"/><text x="58.6301%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="57.9791%" y="309" width="0.7217%" height="15" fill="rgb(240,144,17)" fg:x="723" fg:w="9"/><text x="58.2291%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="57.9791%" y="293" width="0.7217%" height="15" fill="rgb(245,27,50)" fg:x="723" fg:w="9"/><text x="58.2291%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="58.1395%" y="277" width="0.5613%" height="15" fill="rgb(251,51,7)" fg:x="725" fg:w="7"/><text x="58.3895%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="58.3801%" y="261" width="0.3208%" height="15" fill="rgb(245,217,29)" fg:x="728" fg:w="4"/><text x="58.6301%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="58.6207%" y="245" width="0.0802%" height="15" fill="rgb(221,176,29)" fg:x="731" fg:w="1"/><text x="58.8707%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="58.6207%" y="229" width="0.0802%" height="15" fill="rgb(212,180,24)" fg:x="731" fg:w="1"/><text x="58.8707%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.7811%" y="261" width="0.0802%" height="15" fill="rgb(254,24,2)" fg:x="733" fg:w="1"/><text x="59.0311%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="58.8613%" y="261" width="0.3208%" height="15" fill="rgb(230,100,2)" fg:x="734" fg:w="4"/><text x="59.1113%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="58.9415%" y="245" width="0.2406%" height="15" fill="rgb(219,142,25)" fg:x="735" fg:w="3"/><text x="59.1915%" y="255.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="58.9415%" y="229" width="0.2406%" height="15" fill="rgb(240,73,43)" fg:x="735" fg:w="3"/><text x="59.1915%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.4226%" y="245" width="0.0802%" height="15" fill="rgb(214,114,15)" fg:x="741" fg:w="1"/><text x="59.6726%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.4226%" y="229" width="0.0802%" height="15" fill="rgb(207,130,4)" fg:x="741" fg:w="1"/><text x="59.6726%" y="239.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="59.4226%" y="213" width="0.0802%" height="15" fill="rgb(221,25,40)" fg:x="741" fg:w="1"/><text x="59.6726%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="59.1820%" y="261" width="0.4010%" height="15" fill="rgb(241,184,7)" fg:x="738" fg:w="5"/><text x="59.4320%" y="271.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="59.5028%" y="245" width="0.0802%" height="15" fill="rgb(235,159,4)" fg:x="742" fg:w="1"/><text x="59.7528%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (12 samples, 0.96%)</title><rect x="58.7009%" y="277" width="0.9623%" height="15" fill="rgb(214,87,48)" fg:x="732" fg:w="12"/><text x="58.9509%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="59.5830%" y="261" width="0.0802%" height="15" fill="rgb(246,198,24)" fg:x="743" fg:w="1"/><text x="59.8330%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.5830%" y="245" width="0.0802%" height="15" fill="rgb(209,66,40)" fg:x="743" fg:w="1"/><text x="59.8330%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.5830%" y="229" width="0.0802%" height="15" fill="rgb(233,147,39)" fg:x="743" fg:w="1"/><text x="59.8330%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.5830%" y="213" width="0.0802%" height="15" fill="rgb(231,145,52)" fg:x="743" fg:w="1"/><text x="59.8330%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="59.6632%" y="277" width="0.1604%" height="15" fill="rgb(206,20,26)" fg:x="744" fg:w="2"/><text x="59.9132%" y="287.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="59.7434%" y="261" width="0.0802%" height="15" fill="rgb(238,220,4)" fg:x="745" fg:w="1"/><text x="59.9934%" y="271.50"></text></g><g><title>indefinite::rules::number::Number::check (315 samples, 25.26%)</title><rect x="34.6431%" y="373" width="25.2606%" height="15" fill="rgb(252,195,42)" fg:x="432" fg:w="315"/><text x="34.8931%" y="383.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (285 samples, 22.85%)</title><rect x="37.0489%" y="357" width="22.8549%" height="15" fill="rgb(209,10,6)" fg:x="462" fg:w="285"/><text x="37.2989%" y="367.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (285 samples, 22.85%)</title><rect x="37.0489%" y="341" width="22.8549%" height="15" fill="rgb(229,3,52)" fg:x="462" fg:w="285"/><text x="37.2989%" y="351.50">regex::builders::Builder::build_one_..</text></g><g><title>regex_automata::meta::regex::Builder::build (285 samples, 22.85%)</title><rect x="37.0489%" y="325" width="22.8549%" height="15" fill="rgb(253,49,37)" fg:x="462" fg:w="285"/><text x="37.2989%" y="335.50">regex_automata::meta::regex::Builder..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (15 samples, 1.20%)</title><rect x="58.7009%" y="309" width="1.2029%" height="15" fill="rgb(240,103,49)" fg:x="732" fg:w="15"/><text x="58.9509%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (15 samples, 1.20%)</title><rect x="58.7009%" y="293" width="1.2029%" height="15" fill="rgb(250,182,30)" fg:x="732" fg:w="15"/><text x="58.9509%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="59.8236%" y="277" width="0.0802%" height="15" fill="rgb(248,8,30)" fg:x="746" fg:w="1"/><text x="60.0736%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="59.8236%" y="261" width="0.0802%" height="15" fill="rgb(237,120,30)" fg:x="746" fg:w="1"/><text x="60.0736%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.8236%" y="245" width="0.0802%" height="15" fill="rgb(221,146,34)" fg:x="746" fg:w="1"/><text x="60.0736%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.8236%" y="229" width="0.0802%" height="15" fill="rgb(242,55,13)" fg:x="746" fg:w="1"/><text x="60.0736%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.8236%" y="213" width="0.0802%" height="15" fill="rgb(242,112,31)" fg:x="746" fg:w="1"/><text x="60.0736%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="59.9840%" y="309" width="0.0802%" height="15" fill="rgb(249,192,27)" fg:x="748" fg:w="1"/><text x="60.2340%" y="319.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="59.9840%" y="293" width="0.0802%" height="15" fill="rgb(208,204,44)" fg:x="748" fg:w="1"/><text x="60.2340%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="60.0642%" y="293" width="0.0802%" height="15" fill="rgb(208,93,54)" fg:x="749" fg:w="1"/><text x="60.3142%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="60.0642%" y="277" width="0.0802%" height="15" fill="rgb(242,1,31)" fg:x="749" fg:w="1"/><text x="60.3142%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.32%)</title><rect x="59.9038%" y="341" width="0.3208%" height="15" fill="rgb(241,83,25)" fg:x="747" fg:w="4"/><text x="60.1538%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="59.9840%" y="325" width="0.2406%" height="15" fill="rgb(205,169,50)" fg:x="748" fg:w="3"/><text x="60.2340%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="60.0642%" y="309" width="0.1604%" height="15" fill="rgb(239,186,37)" fg:x="749" fg:w="2"/><text x="60.3142%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="60.1443%" y="293" width="0.0802%" height="15" fill="rgb(205,221,10)" fg:x="750" fg:w="1"/><text x="60.3943%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.1443%" y="277" width="0.0802%" height="15" fill="rgb(218,196,15)" fg:x="750" fg:w="1"/><text x="60.3943%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.1443%" y="261" width="0.0802%" height="15" fill="rgb(218,196,35)" fg:x="750" fg:w="1"/><text x="60.3943%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.1443%" y="245" width="0.0802%" height="15" fill="rgb(233,63,24)" fg:x="750" fg:w="1"/><text x="60.3943%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="60.2245%" y="325" width="0.1604%" height="15" fill="rgb(225,8,4)" fg:x="751" fg:w="2"/><text x="60.4745%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="60.3849%" y="293" width="0.0802%" height="15" fill="rgb(234,105,35)" fg:x="753" fg:w="1"/><text x="60.6349%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.3849%" y="277" width="0.0802%" height="15" fill="rgb(236,21,32)" fg:x="753" fg:w="1"/><text x="60.6349%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="60.3849%" y="309" width="0.1604%" height="15" fill="rgb(228,109,6)" fg:x="753" fg:w="2"/><text x="60.6349%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="60.4651%" y="293" width="0.0802%" height="15" fill="rgb(229,215,31)" fg:x="754" fg:w="1"/><text x="60.7151%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.4651%" y="277" width="0.0802%" height="15" fill="rgb(221,52,54)" fg:x="754" fg:w="1"/><text x="60.7151%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.4651%" y="261" width="0.0802%" height="15" fill="rgb(252,129,43)" fg:x="754" fg:w="1"/><text x="60.7151%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.4651%" y="245" width="0.0802%" height="15" fill="rgb(248,183,27)" fg:x="754" fg:w="1"/><text x="60.7151%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.5453%" y="293" width="0.0802%" height="15" fill="rgb(250,0,22)" fg:x="755" fg:w="1"/><text x="60.7953%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="60.6255%" y="277" width="0.1604%" height="15" fill="rgb(213,166,10)" fg:x="756" fg:w="2"/><text x="60.8755%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.7057%" y="261" width="0.0802%" height="15" fill="rgb(207,163,36)" fg:x="757" fg:w="1"/><text x="60.9557%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.64%)</title><rect x="60.2245%" y="341" width="0.6415%" height="15" fill="rgb(208,122,22)" fg:x="751" fg:w="8"/><text x="60.4745%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="60.3849%" y="325" width="0.4812%" height="15" fill="rgb(207,104,49)" fg:x="753" fg:w="6"/><text x="60.6349%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="60.5453%" y="309" width="0.3208%" height="15" fill="rgb(248,211,50)" fg:x="755" fg:w="4"/><text x="60.7953%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="60.6255%" y="293" width="0.2406%" height="15" fill="rgb(217,13,45)" fg:x="756" fg:w="3"/><text x="60.8755%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.7859%" y="277" width="0.0802%" height="15" fill="rgb(211,216,49)" fg:x="758" fg:w="1"/><text x="61.0359%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="60.9463%" y="261" width="0.1604%" height="15" fill="rgb(221,58,53)" fg:x="760" fg:w="2"/><text x="61.1963%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="60.9463%" y="245" width="0.1604%" height="15" fill="rgb(220,112,41)" fg:x="760" fg:w="2"/><text x="61.1963%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.9463%" y="229" width="0.1604%" height="15" fill="rgb(236,38,28)" fg:x="760" fg:w="2"/><text x="61.1963%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="60.9463%" y="213" width="0.1604%" height="15" fill="rgb(227,195,22)" fg:x="760" fg:w="2"/><text x="61.1963%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="60.9463%" y="293" width="0.2406%" height="15" fill="rgb(214,55,33)" fg:x="760" fg:w="3"/><text x="61.1963%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="60.9463%" y="277" width="0.2406%" height="15" fill="rgb(248,80,13)" fg:x="760" fg:w="3"/><text x="61.1963%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.1067%" y="261" width="0.0802%" height="15" fill="rgb(238,52,6)" fg:x="762" fg:w="1"/><text x="61.3567%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.1868%" y="293" width="0.0802%" height="15" fill="rgb(224,198,47)" fg:x="763" fg:w="1"/><text x="61.4368%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="61.2670%" y="293" width="0.0802%" height="15" fill="rgb(233,171,20)" fg:x="764" fg:w="1"/><text x="61.5170%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.2670%" y="277" width="0.0802%" height="15" fill="rgb(241,30,25)" fg:x="764" fg:w="1"/><text x="61.5170%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="61.2670%" y="261" width="0.0802%" height="15" fill="rgb(207,171,38)" fg:x="764" fg:w="1"/><text x="61.5170%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.2670%" y="245" width="0.0802%" height="15" fill="rgb(234,70,1)" fg:x="764" fg:w="1"/><text x="61.5170%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="61.3472%" y="293" width="0.0802%" height="15" fill="rgb(232,178,18)" fg:x="765" fg:w="1"/><text x="61.5972%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="61.3472%" y="277" width="0.0802%" height="15" fill="rgb(241,78,40)" fg:x="765" fg:w="1"/><text x="61.5972%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="61.8284%" y="277" width="0.1604%" height="15" fill="rgb(222,35,25)" fg:x="771" fg:w="2"/><text x="62.0784%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="61.9888%" y="277" width="0.0802%" height="15" fill="rgb(207,92,16)" fg:x="773" fg:w="1"/><text x="62.2388%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="61.9888%" y="261" width="0.0802%" height="15" fill="rgb(216,59,51)" fg:x="773" fg:w="1"/><text x="62.2388%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="62.1492%" y="261" width="0.0802%" height="15" fill="rgb(213,80,28)" fg:x="775" fg:w="1"/><text x="62.3992%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="62.0690%" y="277" width="0.4812%" height="15" fill="rgb(220,93,7)" fg:x="774" fg:w="6"/><text x="62.3190%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="62.2294%" y="261" width="0.3208%" height="15" fill="rgb(225,24,44)" fg:x="776" fg:w="4"/><text x="62.4794%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="62.5501%" y="277" width="0.0802%" height="15" fill="rgb(243,74,40)" fg:x="780" fg:w="1"/><text x="62.8001%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="62.5501%" y="261" width="0.0802%" height="15" fill="rgb(228,39,7)" fg:x="780" fg:w="1"/><text x="62.8001%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="62.5501%" y="245" width="0.0802%" height="15" fill="rgb(227,79,8)" fg:x="780" fg:w="1"/><text x="62.8001%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="62.6303%" y="261" width="0.1604%" height="15" fill="rgb(236,58,11)" fg:x="781" fg:w="2"/><text x="62.8803%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="62.7105%" y="245" width="0.0802%" height="15" fill="rgb(249,63,35)" fg:x="782" fg:w="1"/><text x="62.9605%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="62.7105%" y="229" width="0.0802%" height="15" fill="rgb(252,114,16)" fg:x="782" fg:w="1"/><text x="62.9605%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="62.7105%" y="213" width="0.0802%" height="15" fill="rgb(254,151,24)" fg:x="782" fg:w="1"/><text x="62.9605%" y="223.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="62.7105%" y="197" width="0.0802%" height="15" fill="rgb(253,54,39)" fg:x="782" fg:w="1"/><text x="62.9605%" y="207.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="62.9511%" y="245" width="0.0802%" height="15" fill="rgb(243,25,45)" fg:x="785" fg:w="1"/><text x="63.2011%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (26 samples, 2.09%)</title><rect x="61.4274%" y="293" width="2.0850%" height="15" fill="rgb(234,134,9)" fg:x="766" fg:w="26"/><text x="61.6774%" y="303.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (11 samples, 0.88%)</title><rect x="62.6303%" y="277" width="0.8821%" height="15" fill="rgb(227,166,31)" fg:x="781" fg:w="11"/><text x="62.8803%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="62.7907%" y="261" width="0.7217%" height="15" fill="rgb(245,143,41)" fg:x="783" fg:w="9"/><text x="63.0407%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="63.0313%" y="245" width="0.4812%" height="15" fill="rgb(238,181,32)" fg:x="786" fg:w="6"/><text x="63.2813%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="63.5124%" y="261" width="0.0802%" height="15" fill="rgb(224,113,18)" fg:x="792" fg:w="1"/><text x="63.7624%" y="271.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (3 samples, 0.24%)</title><rect x="63.6728%" y="245" width="0.2406%" height="15" fill="rgb(240,229,28)" fg:x="794" fg:w="3"/><text x="63.9228%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.8332%" y="229" width="0.0802%" height="15" fill="rgb(250,185,3)" fg:x="796" fg:w="1"/><text x="64.0832%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.8332%" y="213" width="0.0802%" height="15" fill="rgb(212,59,25)" fg:x="796" fg:w="1"/><text x="64.0832%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.8332%" y="197" width="0.0802%" height="15" fill="rgb(221,87,20)" fg:x="796" fg:w="1"/><text x="64.0832%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.9134%" y="229" width="0.0802%" height="15" fill="rgb(213,74,28)" fg:x="797" fg:w="1"/><text x="64.1634%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.9134%" y="213" width="0.0802%" height="15" fill="rgb(224,132,34)" fg:x="797" fg:w="1"/><text x="64.1634%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.9134%" y="197" width="0.0802%" height="15" fill="rgb(222,101,24)" fg:x="797" fg:w="1"/><text x="64.1634%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="63.5124%" y="293" width="0.5613%" height="15" fill="rgb(254,142,4)" fg:x="792" fg:w="7"/><text x="63.7624%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="63.5124%" y="277" width="0.5613%" height="15" fill="rgb(230,229,49)" fg:x="792" fg:w="7"/><text x="63.7624%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="63.5926%" y="261" width="0.4812%" height="15" fill="rgb(238,70,47)" fg:x="793" fg:w="6"/><text x="63.8426%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="63.9134%" y="245" width="0.1604%" height="15" fill="rgb(231,160,17)" fg:x="797" fg:w="2"/><text x="64.1634%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="63.9936%" y="229" width="0.0802%" height="15" fill="rgb(218,68,53)" fg:x="798" fg:w="1"/><text x="64.2436%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="63.9936%" y="213" width="0.0802%" height="15" fill="rgb(236,111,10)" fg:x="798" fg:w="1"/><text x="64.2436%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="63.9936%" y="197" width="0.0802%" height="15" fill="rgb(224,34,41)" fg:x="798" fg:w="1"/><text x="64.2436%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.0738%" y="245" width="0.0802%" height="15" fill="rgb(241,118,19)" fg:x="799" fg:w="1"/><text x="64.3238%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.0738%" y="229" width="0.0802%" height="15" fill="rgb(238,129,25)" fg:x="799" fg:w="1"/><text x="64.3238%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.0738%" y="213" width="0.0802%" height="15" fill="rgb(238,22,31)" fg:x="799" fg:w="1"/><text x="64.3238%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.48%)</title><rect x="64.0738%" y="261" width="0.4812%" height="15" fill="rgb(222,174,48)" fg:x="799" fg:w="6"/><text x="64.3238%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="64.1540%" y="245" width="0.4010%" height="15" fill="rgb(206,152,40)" fg:x="800" fg:w="5"/><text x="64.4040%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.4747%" y="229" width="0.0802%" height="15" fill="rgb(218,99,54)" fg:x="804" fg:w="1"/><text x="64.7247%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.4747%" y="213" width="0.0802%" height="15" fill="rgb(220,174,26)" fg:x="804" fg:w="1"/><text x="64.7247%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.4747%" y="197" width="0.0802%" height="15" fill="rgb(245,116,9)" fg:x="804" fg:w="1"/><text x="64.7247%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (47 samples, 3.77%)</title><rect x="60.8661%" y="341" width="3.7690%" height="15" fill="rgb(209,72,35)" fg:x="759" fg:w="47"/><text x="61.1161%" y="351.50">rege..</text></g><g><title>regex::builders::Builder::build_one_string (46 samples, 3.69%)</title><rect x="60.9463%" y="325" width="3.6889%" height="15" fill="rgb(226,126,21)" fg:x="760" fg:w="46"/><text x="61.1963%" y="335.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (46 samples, 3.69%)</title><rect x="60.9463%" y="309" width="3.6889%" height="15" fill="rgb(227,192,1)" fg:x="760" fg:w="46"/><text x="61.1963%" y="319.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="64.0738%" y="293" width="0.5613%" height="15" fill="rgb(237,180,29)" fg:x="799" fg:w="7"/><text x="64.3238%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="64.0738%" y="277" width="0.5613%" height="15" fill="rgb(230,197,35)" fg:x="799" fg:w="7"/><text x="64.3238%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="64.5549%" y="261" width="0.0802%" height="15" fill="rgb(246,193,31)" fg:x="805" fg:w="1"/><text x="64.8049%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="64.5549%" y="245" width="0.0802%" height="15" fill="rgb(241,36,4)" fg:x="805" fg:w="1"/><text x="64.8049%" y="255.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::literal (1 samples, 0.08%)</title><rect x="64.5549%" y="229" width="0.0802%" height="15" fill="rgb(241,130,17)" fg:x="805" fg:w="1"/><text x="64.8049%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="65.3569%" y="261" width="0.2406%" height="15" fill="rgb(206,137,32)" fg:x="815" fg:w="3"/><text x="65.6069%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="65.3569%" y="245" width="0.2406%" height="15" fill="rgb(237,228,51)" fg:x="815" fg:w="3"/><text x="65.6069%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="65.4370%" y="229" width="0.1604%" height="15" fill="rgb(243,6,42)" fg:x="816" fg:w="2"/><text x="65.6870%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.5974%" y="245" width="0.0802%" height="15" fill="rgb(251,74,28)" fg:x="818" fg:w="1"/><text x="65.8474%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="65.5974%" y="261" width="0.1604%" height="15" fill="rgb(218,20,49)" fg:x="818" fg:w="2"/><text x="65.8474%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.6776%" y="245" width="0.0802%" height="15" fill="rgb(238,28,14)" fg:x="819" fg:w="1"/><text x="65.9276%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="65.7578%" y="261" width="0.3208%" height="15" fill="rgb(229,40,46)" fg:x="820" fg:w="4"/><text x="66.0078%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (18 samples, 1.44%)</title><rect x="64.7153%" y="277" width="1.4435%" height="15" fill="rgb(244,195,20)" fg:x="807" fg:w="18"/><text x="64.9653%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="66.0786%" y="261" width="0.0802%" height="15" fill="rgb(253,56,35)" fg:x="824" fg:w="1"/><text x="66.3286%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.0786%" y="245" width="0.0802%" height="15" fill="rgb(210,149,44)" fg:x="824" fg:w="1"/><text x="66.3286%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (81 samples, 6.50%)</title><rect x="59.9038%" y="357" width="6.4956%" height="15" fill="rgb(240,135,12)" fg:x="747" fg:w="81"/><text x="60.1538%" y="367.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (22 samples, 1.76%)</title><rect x="64.6351%" y="341" width="1.7642%" height="15" fill="rgb(251,24,50)" fg:x="806" fg:w="22"/><text x="64.8851%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (22 samples, 1.76%)</title><rect x="64.6351%" y="325" width="1.7642%" height="15" fill="rgb(243,200,47)" fg:x="806" fg:w="22"/><text x="64.8851%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.68%)</title><rect x="64.7153%" y="309" width="1.6840%" height="15" fill="rgb(224,166,26)" fg:x="807" fg:w="21"/><text x="64.9653%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (21 samples, 1.68%)</title><rect x="64.7153%" y="293" width="1.6840%" height="15" fill="rgb(233,0,47)" fg:x="807" fg:w="21"/><text x="64.9653%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="66.1588%" y="277" width="0.2406%" height="15" fill="rgb(253,80,5)" fg:x="825" fg:w="3"/><text x="66.4088%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="66.1588%" y="261" width="0.2406%" height="15" fill="rgb(214,133,25)" fg:x="825" fg:w="3"/><text x="66.4088%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="66.1588%" y="245" width="0.2406%" height="15" fill="rgb(209,27,14)" fg:x="825" fg:w="3"/><text x="66.4088%" y="255.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="66.1588%" y="229" width="0.2406%" height="15" fill="rgb(219,102,51)" fg:x="825" fg:w="3"/><text x="66.4088%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (646 samples, 51.80%)</title><rect x="14.7554%" y="453" width="51.8043%" height="15" fill="rgb(237,18,16)" fg:x="184" fg:w="646"/><text x="15.0054%" y="463.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::Obser..</text></g><g><title>plugins_core::looking::model::qualify_name (632 samples, 50.68%)</title><rect x="15.8781%" y="437" width="50.6816%" height="15" fill="rgb(241,85,17)" fg:x="198" fg:w="632"/><text x="16.1281%" y="447.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (632 samples, 50.68%)</title><rect x="15.8781%" y="421" width="50.6816%" height="15" fill="rgb(236,90,42)" fg:x="198" fg:w="632"/><text x="16.1281%" y="431.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (632 samples, 50.68%)</title><rect x="15.8781%" y="405" width="50.6816%" height="15" fill="rgb(249,57,21)" fg:x="198" fg:w="632"/><text x="16.1281%" y="415.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (632 samples, 50.68%)</title><rect x="15.8781%" y="389" width="50.6816%" height="15" fill="rgb(243,12,36)" fg:x="198" fg:w="632"/><text x="16.1281%" y="399.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (83 samples, 6.66%)</title><rect x="59.9038%" y="373" width="6.6560%" height="15" fill="rgb(253,128,47)" fg:x="747" fg:w="83"/><text x="60.1538%" y="383.50">indefinit..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="66.3994%" y="357" width="0.1604%" height="15" fill="rgb(207,33,20)" fg:x="828" fg:w="2"/><text x="66.6494%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.5597%" y="453" width="0.0802%" height="15" fill="rgb(233,215,35)" fg:x="830" fg:w="1"/><text x="66.8097%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="66.6399%" y="453" width="0.0802%" height="15" fill="rgb(249,188,52)" fg:x="831" fg:w="1"/><text x="66.8899%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="66.6399%" y="437" width="0.0802%" height="15" fill="rgb(225,12,32)" fg:x="831" fg:w="1"/><text x="66.8899%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="66.6399%" y="421" width="0.0802%" height="15" fill="rgb(247,98,14)" fg:x="831" fg:w="1"/><text x="66.8899%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="66.6399%" y="405" width="0.0802%" height="15" fill="rgb(247,219,48)" fg:x="831" fg:w="1"/><text x="66.8899%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="66.6399%" y="389" width="0.0802%" height="15" fill="rgb(253,60,48)" fg:x="831" fg:w="1"/><text x="66.8899%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.6399%" y="373" width="0.0802%" height="15" fill="rgb(245,15,52)" fg:x="831" fg:w="1"/><text x="66.8899%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="66.6399%" y="357" width="0.0802%" height="15" fill="rgb(220,133,28)" fg:x="831" fg:w="1"/><text x="66.8899%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="66.6399%" y="341" width="0.0802%" height="15" fill="rgb(217,180,4)" fg:x="831" fg:w="1"/><text x="66.8899%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="66.6399%" y="325" width="0.0802%" height="15" fill="rgb(251,24,1)" fg:x="831" fg:w="1"/><text x="66.8899%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.6399%" y="309" width="0.0802%" height="15" fill="rgb(212,185,49)" fg:x="831" fg:w="1"/><text x="66.8899%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="66.7201%" y="453" width="0.0802%" height="15" fill="rgb(215,175,22)" fg:x="832" fg:w="1"/><text x="66.9701%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="66.7201%" y="437" width="0.0802%" height="15" fill="rgb(250,205,14)" fg:x="832" fg:w="1"/><text x="66.9701%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.7201%" y="421" width="0.0802%" height="15" fill="rgb(225,211,22)" fg:x="832" fg:w="1"/><text x="66.9701%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8805%" y="389" width="0.0802%" height="15" fill="rgb(251,179,42)" fg:x="834" fg:w="1"/><text x="67.1305%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8805%" y="373" width="0.0802%" height="15" fill="rgb(208,216,51)" fg:x="834" fg:w="1"/><text x="67.1305%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.8805%" y="357" width="0.0802%" height="15" fill="rgb(235,36,11)" fg:x="834" fg:w="1"/><text x="67.1305%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.8805%" y="341" width="0.0802%" height="15" fill="rgb(213,189,28)" fg:x="834" fg:w="1"/><text x="67.1305%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.8805%" y="325" width="0.0802%" height="15" fill="rgb(227,203,42)" fg:x="834" fg:w="1"/><text x="67.1305%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.8805%" y="309" width="0.0802%" height="15" fill="rgb(244,72,36)" fg:x="834" fg:w="1"/><text x="67.1305%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.8805%" y="293" width="0.0802%" height="15" fill="rgb(213,53,17)" fg:x="834" fg:w="1"/><text x="67.1305%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.8805%" y="277" width="0.0802%" height="15" fill="rgb(207,167,3)" fg:x="834" fg:w="1"/><text x="67.1305%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.8805%" y="261" width="0.0802%" height="15" fill="rgb(216,98,30)" fg:x="834" fg:w="1"/><text x="67.1305%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.8805%" y="245" width="0.0802%" height="15" fill="rgb(236,123,15)" fg:x="834" fg:w="1"/><text x="67.1305%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.8805%" y="229" width="0.0802%" height="15" fill="rgb(248,81,50)" fg:x="834" fg:w="1"/><text x="67.1305%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8805%" y="213" width="0.0802%" height="15" fill="rgb(214,120,4)" fg:x="834" fg:w="1"/><text x="67.1305%" y="223.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="66.8805%" y="421" width="0.1604%" height="15" fill="rgb(208,179,34)" fg:x="834" fg:w="2"/><text x="67.1305%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.8805%" y="405" width="0.1604%" height="15" fill="rgb(227,140,7)" fg:x="834" fg:w="2"/><text x="67.1305%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9607%" y="389" width="0.0802%" height="15" fill="rgb(214,22,6)" fg:x="835" fg:w="1"/><text x="67.2107%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.9607%" y="373" width="0.0802%" height="15" fill="rgb(207,137,27)" fg:x="835" fg:w="1"/><text x="67.2107%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9607%" y="357" width="0.0802%" height="15" fill="rgb(210,8,46)" fg:x="835" fg:w="1"/><text x="67.2107%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9607%" y="341" width="0.0802%" height="15" fill="rgb(240,16,54)" fg:x="835" fg:w="1"/><text x="67.2107%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.9607%" y="325" width="0.0802%" height="15" fill="rgb(211,209,29)" fg:x="835" fg:w="1"/><text x="67.2107%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.9607%" y="309" width="0.0802%" height="15" fill="rgb(226,228,24)" fg:x="835" fg:w="1"/><text x="67.2107%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.9607%" y="293" width="0.0802%" height="15" fill="rgb(222,84,9)" fg:x="835" fg:w="1"/><text x="67.2107%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.9607%" y="277" width="0.0802%" height="15" fill="rgb(234,203,30)" fg:x="835" fg:w="1"/><text x="67.2107%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.9607%" y="261" width="0.0802%" height="15" fill="rgb(238,109,14)" fg:x="835" fg:w="1"/><text x="67.2107%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.9607%" y="245" width="0.0802%" height="15" fill="rgb(233,206,34)" fg:x="835" fg:w="1"/><text x="67.2107%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.9607%" y="229" width="0.0802%" height="15" fill="rgb(220,167,47)" fg:x="835" fg:w="1"/><text x="67.2107%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.9607%" y="213" width="0.0802%" height="15" fill="rgb(238,105,10)" fg:x="835" fg:w="1"/><text x="67.2107%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.9607%" y="197" width="0.0802%" height="15" fill="rgb(213,227,17)" fg:x="835" fg:w="1"/><text x="67.2107%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.9607%" y="181" width="0.0802%" height="15" fill="rgb(217,132,38)" fg:x="835" fg:w="1"/><text x="67.2107%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as core::convert::Into&lt;kernel::model::entity::EntityRef&gt;&gt;::into (1 samples, 0.08%)</title><rect x="67.0409%" y="341" width="0.0802%" height="15" fill="rgb(242,146,4)" fg:x="836" fg:w="1"/><text x="67.2909%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0409%" y="325" width="0.0802%" height="15" fill="rgb(212,61,9)" fg:x="836" fg:w="1"/><text x="67.2909%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.2815%" y="101" width="0.0802%" height="15" fill="rgb(247,126,22)" fg:x="839" fg:w="1"/><text x="67.5315%" y="111.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="67.2013%" y="277" width="0.3208%" height="15" fill="rgb(220,196,2)" fg:x="838" fg:w="4"/><text x="67.4513%" y="287.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="67.2013%" y="261" width="0.3208%" height="15" fill="rgb(208,46,4)" fg:x="838" fg:w="4"/><text x="67.4513%" y="271.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="67.2013%" y="245" width="0.3208%" height="15" fill="rgb(252,104,46)" fg:x="838" fg:w="4"/><text x="67.4513%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.32%)</title><rect x="67.2013%" y="229" width="0.3208%" height="15" fill="rgb(237,152,48)" fg:x="838" fg:w="4"/><text x="67.4513%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="67.2013%" y="213" width="0.3208%" height="15" fill="rgb(221,59,37)" fg:x="838" fg:w="4"/><text x="67.4513%" y="223.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.32%)</title><rect x="67.2013%" y="197" width="0.3208%" height="15" fill="rgb(209,202,51)" fg:x="838" fg:w="4"/><text x="67.4513%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="67.2013%" y="181" width="0.3208%" height="15" fill="rgb(228,81,30)" fg:x="838" fg:w="4"/><text x="67.4513%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="67.2013%" y="165" width="0.3208%" height="15" fill="rgb(227,42,39)" fg:x="838" fg:w="4"/><text x="67.4513%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="67.2013%" y="149" width="0.3208%" height="15" fill="rgb(221,26,2)" fg:x="838" fg:w="4"/><text x="67.4513%" y="159.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (4 samples, 0.32%)</title><rect x="67.2013%" y="133" width="0.3208%" height="15" fill="rgb(254,61,31)" fg:x="838" fg:w="4"/><text x="67.4513%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="67.2013%" y="117" width="0.3208%" height="15" fill="rgb(222,173,38)" fg:x="838" fg:w="4"/><text x="67.4513%" y="127.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="67.3617%" y="101" width="0.1604%" height="15" fill="rgb(218,50,12)" fg:x="840" fg:w="2"/><text x="67.6117%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.3617%" y="85" width="0.1604%" height="15" fill="rgb(223,88,40)" fg:x="840" fg:w="2"/><text x="67.6117%" y="95.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="67.3617%" y="69" width="0.1604%" height="15" fill="rgb(237,54,19)" fg:x="840" fg:w="2"/><text x="67.6117%" y="79.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="67.3617%" y="53" width="0.1604%" height="15" fill="rgb(251,129,25)" fg:x="840" fg:w="2"/><text x="67.6117%" y="63.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="67.4419%" y="37" width="0.0802%" height="15" fill="rgb(238,97,19)" fg:x="841" fg:w="1"/><text x="67.6919%" y="47.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (6 samples, 0.48%)</title><rect x="67.1211%" y="309" width="0.4812%" height="15" fill="rgb(240,169,18)" fg:x="837" fg:w="6"/><text x="67.3711%" y="319.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (5 samples, 0.40%)</title><rect x="67.2013%" y="293" width="0.4010%" height="15" fill="rgb(230,187,49)" fg:x="838" fg:w="5"/><text x="67.4513%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="67.5221%" y="277" width="0.0802%" height="15" fill="rgb(209,44,26)" fg:x="842" fg:w="1"/><text x="67.7721%" y="287.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="67.5221%" y="261" width="0.0802%" height="15" fill="rgb(244,0,6)" fg:x="842" fg:w="1"/><text x="67.7721%" y="271.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.5221%" y="245" width="0.0802%" height="15" fill="rgb(248,18,21)" fg:x="842" fg:w="1"/><text x="67.7721%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.5221%" y="229" width="0.0802%" height="15" fill="rgb(245,180,19)" fg:x="842" fg:w="1"/><text x="67.7721%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5221%" y="213" width="0.0802%" height="15" fill="rgb(252,118,36)" fg:x="842" fg:w="1"/><text x="67.7721%" y="223.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.5221%" y="197" width="0.0802%" height="15" fill="rgb(210,224,19)" fg:x="842" fg:w="1"/><text x="67.7721%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5221%" y="181" width="0.0802%" height="15" fill="rgb(218,30,24)" fg:x="842" fg:w="1"/><text x="67.7721%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.5221%" y="165" width="0.0802%" height="15" fill="rgb(219,75,50)" fg:x="842" fg:w="1"/><text x="67.7721%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5221%" y="149" width="0.0802%" height="15" fill="rgb(234,72,50)" fg:x="842" fg:w="1"/><text x="67.7721%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.6022%" y="213" width="0.0802%" height="15" fill="rgb(219,100,48)" fg:x="843" fg:w="1"/><text x="67.8522%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.6022%" y="197" width="0.0802%" height="15" fill="rgb(253,5,41)" fg:x="843" fg:w="1"/><text x="67.8522%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6022%" y="181" width="0.0802%" height="15" fill="rgb(247,181,11)" fg:x="843" fg:w="1"/><text x="67.8522%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6824%" y="213" width="0.0802%" height="15" fill="rgb(222,223,25)" fg:x="844" fg:w="1"/><text x="67.9324%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6824%" y="197" width="0.0802%" height="15" fill="rgb(214,198,28)" fg:x="844" fg:w="1"/><text x="67.9324%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.6824%" y="181" width="0.0802%" height="15" fill="rgb(230,46,43)" fg:x="844" fg:w="1"/><text x="67.9324%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.6824%" y="165" width="0.0802%" height="15" fill="rgb(233,65,53)" fg:x="844" fg:w="1"/><text x="67.9324%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.6824%" y="149" width="0.0802%" height="15" fill="rgb(221,121,27)" fg:x="844" fg:w="1"/><text x="67.9324%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.6824%" y="133" width="0.0802%" height="15" fill="rgb(247,70,47)" fg:x="844" fg:w="1"/><text x="67.9324%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.6824%" y="117" width="0.0802%" height="15" fill="rgb(228,85,35)" fg:x="844" fg:w="1"/><text x="67.9324%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.6824%" y="101" width="0.0802%" height="15" fill="rgb(209,50,18)" fg:x="844" fg:w="1"/><text x="67.9324%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.6824%" y="85" width="0.0802%" height="15" fill="rgb(250,19,35)" fg:x="844" fg:w="1"/><text x="67.9324%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.6824%" y="69" width="0.0802%" height="15" fill="rgb(253,107,29)" fg:x="844" fg:w="1"/><text x="67.9324%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.6824%" y="53" width="0.0802%" height="15" fill="rgb(252,179,29)" fg:x="844" fg:w="1"/><text x="67.9324%" y="63.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="67.6022%" y="309" width="0.2406%" height="15" fill="rgb(238,194,6)" fg:x="843" fg:w="3"/><text x="67.8522%" y="319.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="67.6022%" y="293" width="0.2406%" height="15" fill="rgb(238,164,29)" fg:x="843" fg:w="3"/><text x="67.8522%" y="303.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="67.6022%" y="277" width="0.2406%" height="15" fill="rgb(224,25,9)" fg:x="843" fg:w="3"/><text x="67.8522%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="67.6022%" y="261" width="0.2406%" height="15" fill="rgb(244,153,23)" fg:x="843" fg:w="3"/><text x="67.8522%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="67.6022%" y="245" width="0.2406%" height="15" fill="rgb(212,203,14)" fg:x="843" fg:w="3"/><text x="67.8522%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="67.6022%" y="229" width="0.2406%" height="15" fill="rgb(220,164,20)" fg:x="843" fg:w="3"/><text x="67.8522%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7626%" y="213" width="0.0802%" height="15" fill="rgb(222,203,48)" fg:x="845" fg:w="1"/><text x="68.0126%" y="223.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="67.9230%" y="293" width="0.0802%" height="15" fill="rgb(215,159,22)" fg:x="847" fg:w="1"/><text x="68.1730%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="67.9230%" y="277" width="0.0802%" height="15" fill="rgb(216,183,47)" fg:x="847" fg:w="1"/><text x="68.1730%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0032%" y="213" width="0.0802%" height="15" fill="rgb(229,195,25)" fg:x="848" fg:w="1"/><text x="68.2532%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0032%" y="197" width="0.0802%" height="15" fill="rgb(224,132,51)" fg:x="848" fg:w="1"/><text x="68.2532%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.0032%" y="181" width="0.0802%" height="15" fill="rgb(240,63,7)" fg:x="848" fg:w="1"/><text x="68.2532%" y="191.50"></text></g><g><title>core::iter::adapters::try_process (14 samples, 1.12%)</title><rect x="67.0409%" y="405" width="1.1227%" height="15" fill="rgb(249,182,41)" fg:x="836" fg:w="14"/><text x="67.2909%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.12%)</title><rect x="67.0409%" y="389" width="1.1227%" height="15" fill="rgb(243,47,26)" fg:x="836" fg:w="14"/><text x="67.2909%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 1.12%)</title><rect x="67.0409%" y="373" width="1.1227%" height="15" fill="rgb(233,48,2)" fg:x="836" fg:w="14"/><text x="67.2909%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (14 samples, 1.12%)</title><rect x="67.0409%" y="357" width="1.1227%" height="15" fill="rgb(244,165,34)" fg:x="836" fg:w="14"/><text x="67.2909%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (13 samples, 1.04%)</title><rect x="67.1211%" y="341" width="1.0425%" height="15" fill="rgb(207,89,7)" fg:x="837" fg:w="13"/><text x="67.3711%" y="351.50"></text></g><g><title>engine::internal::Entities::add_persisted (13 samples, 1.04%)</title><rect x="67.1211%" y="325" width="1.0425%" height="15" fill="rgb(244,117,36)" fg:x="837" fg:w="13"/><text x="67.3711%" y="335.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="67.8428%" y="309" width="0.3208%" height="15" fill="rgb(226,144,34)" fg:x="846" fg:w="4"/><text x="68.0928%" y="319.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="68.0032%" y="293" width="0.1604%" height="15" fill="rgb(213,23,19)" fg:x="848" fg:w="2"/><text x="68.2532%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.0032%" y="277" width="0.1604%" height="15" fill="rgb(217,75,12)" fg:x="848" fg:w="2"/><text x="68.2532%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.0032%" y="261" width="0.1604%" height="15" fill="rgb(224,159,17)" fg:x="848" fg:w="2"/><text x="68.2532%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.0032%" y="245" width="0.1604%" height="15" fill="rgb(217,118,1)" fg:x="848" fg:w="2"/><text x="68.2532%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.0032%" y="229" width="0.1604%" height="15" fill="rgb(232,180,48)" fg:x="848" fg:w="2"/><text x="68.2532%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.0834%" y="213" width="0.0802%" height="15" fill="rgb(230,27,33)" fg:x="849" fg:w="1"/><text x="68.3334%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.0834%" y="197" width="0.0802%" height="15" fill="rgb(205,31,21)" fg:x="849" fg:w="1"/><text x="68.3334%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.0834%" y="181" width="0.0802%" height="15" fill="rgb(253,59,4)" fg:x="849" fg:w="1"/><text x="68.3334%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.0834%" y="165" width="0.0802%" height="15" fill="rgb(224,201,9)" fg:x="849" fg:w="1"/><text x="68.3334%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.0834%" y="149" width="0.0802%" height="15" fill="rgb(229,206,30)" fg:x="849" fg:w="1"/><text x="68.3334%" y="159.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="68.0834%" y="133" width="0.0802%" height="15" fill="rgb(212,67,47)" fg:x="849" fg:w="1"/><text x="68.3334%" y="143.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (15 samples, 1.20%)</title><rect x="67.0409%" y="421" width="1.2029%" height="15" fill="rgb(211,96,50)" fg:x="836" fg:w="15"/><text x="67.2909%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="68.1636%" y="405" width="0.0802%" height="15" fill="rgb(252,114,18)" fg:x="850" fg:w="1"/><text x="68.4136%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.1636%" y="389" width="0.0802%" height="15" fill="rgb(223,58,37)" fg:x="850" fg:w="1"/><text x="68.4136%" y="399.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="68.2438%" y="421" width="0.0802%" height="15" fill="rgb(237,70,4)" fg:x="851" fg:w="1"/><text x="68.4938%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.2438%" y="405" width="0.0802%" height="15" fill="rgb(244,85,46)" fg:x="851" fg:w="1"/><text x="68.4938%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="68.2438%" y="389" width="0.0802%" height="15" fill="rgb(223,39,52)" fg:x="851" fg:w="1"/><text x="68.4938%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="68.2438%" y="373" width="0.0802%" height="15" fill="rgb(218,200,14)" fg:x="851" fg:w="1"/><text x="68.4938%" y="383.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="68.3240%" y="421" width="0.0802%" height="15" fill="rgb(208,171,16)" fg:x="852" fg:w="1"/><text x="68.5740%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.4042%" y="389" width="0.0802%" height="15" fill="rgb(234,200,18)" fg:x="853" fg:w="1"/><text x="68.6542%" y="399.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (694 samples, 55.65%)</title><rect x="12.9912%" y="613" width="55.6536%" height="15" fill="rgb(228,45,11)" fg:x="162" fg:w="694"/><text x="13.2412%" y="623.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (676 samples, 54.21%)</title><rect x="14.4346%" y="597" width="54.2101%" height="15" fill="rgb(237,182,11)" fg:x="180" fg:w="676"/><text x="14.6846%" y="607.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (676 samples, 54.21%)</title><rect x="14.4346%" y="581" width="54.2101%" height="15" fill="rgb(241,175,49)" fg:x="180" fg:w="676"/><text x="14.6846%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (676 samples, 54.21%)</title><rect x="14.4346%" y="565" width="54.2101%" height="15" fill="rgb(247,38,35)" fg:x="180" fg:w="676"/><text x="14.6846%" y="575.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (676 samples, 54.21%)</title><rect x="14.4346%" y="549" width="54.2101%" height="15" fill="rgb(228,39,49)" fg:x="180" fg:w="676"/><text x="14.6846%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (676 samples, 54.21%)</title><rect x="14.4346%" y="533" width="54.2101%" height="15" fill="rgb(226,101,26)" fg:x="180" fg:w="676"/><text x="14.6846%" y="543.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (676 samples, 54.21%)</title><rect x="14.4346%" y="517" width="54.2101%" height="15" fill="rgb(206,141,19)" fg:x="180" fg:w="676"/><text x="14.6846%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (676 samples, 54.21%)</title><rect x="14.4346%" y="501" width="54.2101%" height="15" fill="rgb(211,200,13)" fg:x="180" fg:w="676"/><text x="14.6846%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (676 samples, 54.21%)</title><rect x="14.4346%" y="485" width="54.2101%" height="15" fill="rgb(241,121,6)" fg:x="180" fg:w="676"/><text x="14.6846%" y="495.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (674 samples, 54.05%)</title><rect x="14.5950%" y="469" width="54.0497%" height="15" fill="rgb(234,221,29)" fg:x="182" fg:w="674"/><text x="14.8450%" y="479.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (23 samples, 1.84%)</title><rect x="66.8003%" y="453" width="1.8444%" height="15" fill="rgb(229,136,5)" fg:x="833" fg:w="23"/><text x="67.0503%" y="463.50">k..</text></g><g><title>kernel::model::scopes::Scopes::load_scope (23 samples, 1.84%)</title><rect x="66.8003%" y="437" width="1.8444%" height="15" fill="rgb(238,36,11)" fg:x="833" fg:w="23"/><text x="67.0503%" y="447.50">k..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.4042%" y="421" width="0.2406%" height="15" fill="rgb(251,55,41)" fg:x="853" fg:w="3"/><text x="68.6542%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.4042%" y="405" width="0.2406%" height="15" fill="rgb(242,34,40)" fg:x="853" fg:w="3"/><text x="68.6542%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="68.4844%" y="389" width="0.1604%" height="15" fill="rgb(215,42,17)" fg:x="854" fg:w="2"/><text x="68.7344%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="68.4844%" y="373" width="0.1604%" height="15" fill="rgb(207,44,46)" fg:x="854" fg:w="2"/><text x="68.7344%" y="383.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="68.4844%" y="357" width="0.1604%" height="15" fill="rgb(211,206,28)" fg:x="854" fg:w="2"/><text x="68.7344%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.4844%" y="341" width="0.1604%" height="15" fill="rgb(237,167,16)" fg:x="854" fg:w="2"/><text x="68.7344%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.4844%" y="325" width="0.1604%" height="15" fill="rgb(233,66,6)" fg:x="854" fg:w="2"/><text x="68.7344%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="68.4844%" y="309" width="0.1604%" height="15" fill="rgb(246,123,29)" fg:x="854" fg:w="2"/><text x="68.7344%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.7249%" y="501" width="0.0802%" height="15" fill="rgb(209,62,40)" fg:x="857" fg:w="1"/><text x="68.9749%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="68.7249%" y="549" width="0.1604%" height="15" fill="rgb(218,4,25)" fg:x="857" fg:w="2"/><text x="68.9749%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="68.7249%" y="533" width="0.1604%" height="15" fill="rgb(253,91,49)" fg:x="857" fg:w="2"/><text x="68.9749%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="68.7249%" y="517" width="0.1604%" height="15" fill="rgb(228,155,29)" fg:x="857" fg:w="2"/><text x="68.9749%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.8051%" y="501" width="0.0802%" height="15" fill="rgb(243,57,37)" fg:x="858" fg:w="1"/><text x="69.0551%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.8051%" y="485" width="0.0802%" height="15" fill="rgb(244,167,17)" fg:x="858" fg:w="1"/><text x="69.0551%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8051%" y="469" width="0.0802%" height="15" fill="rgb(207,181,38)" fg:x="858" fg:w="1"/><text x="69.0551%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8051%" y="453" width="0.0802%" height="15" fill="rgb(211,8,23)" fg:x="858" fg:w="1"/><text x="69.0551%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8051%" y="437" width="0.0802%" height="15" fill="rgb(235,11,44)" fg:x="858" fg:w="1"/><text x="69.0551%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8051%" y="421" width="0.0802%" height="15" fill="rgb(248,18,52)" fg:x="858" fg:w="1"/><text x="69.0551%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.8051%" y="405" width="0.0802%" height="15" fill="rgb(208,4,7)" fg:x="858" fg:w="1"/><text x="69.0551%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8051%" y="389" width="0.0802%" height="15" fill="rgb(240,17,39)" fg:x="858" fg:w="1"/><text x="69.0551%" y="399.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8051%" y="373" width="0.0802%" height="15" fill="rgb(207,170,3)" fg:x="858" fg:w="1"/><text x="69.0551%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8051%" y="357" width="0.0802%" height="15" fill="rgb(236,100,52)" fg:x="858" fg:w="1"/><text x="69.0551%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.8853%" y="549" width="0.0802%" height="15" fill="rgb(246,78,51)" fg:x="859" fg:w="1"/><text x="69.1353%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.8853%" y="533" width="0.0802%" height="15" fill="rgb(211,17,15)" fg:x="859" fg:w="1"/><text x="69.1353%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.8853%" y="517" width="0.0802%" height="15" fill="rgb(209,59,46)" fg:x="859" fg:w="1"/><text x="69.1353%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8853%" y="501" width="0.0802%" height="15" fill="rgb(210,92,25)" fg:x="859" fg:w="1"/><text x="69.1353%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8853%" y="485" width="0.0802%" height="15" fill="rgb(238,174,52)" fg:x="859" fg:w="1"/><text x="69.1353%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8853%" y="469" width="0.0802%" height="15" fill="rgb(230,73,7)" fg:x="859" fg:w="1"/><text x="69.1353%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8853%" y="453" width="0.0802%" height="15" fill="rgb(243,124,40)" fg:x="859" fg:w="1"/><text x="69.1353%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.8853%" y="437" width="0.0802%" height="15" fill="rgb(244,170,11)" fg:x="859" fg:w="1"/><text x="69.1353%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8853%" y="421" width="0.0802%" height="15" fill="rgb(207,114,54)" fg:x="859" fg:w="1"/><text x="69.1353%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8853%" y="405" width="0.0802%" height="15" fill="rgb(205,42,20)" fg:x="859" fg:w="1"/><text x="69.1353%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8853%" y="389" width="0.0802%" height="15" fill="rgb(230,30,28)" fg:x="859" fg:w="1"/><text x="69.1353%" y="399.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="68.9655%" y="549" width="0.1604%" height="15" fill="rgb(205,73,54)" fg:x="860" fg:w="2"/><text x="69.2155%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="68.9655%" y="533" width="0.1604%" height="15" fill="rgb(254,227,23)" fg:x="860" fg:w="2"/><text x="69.2155%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="68.9655%" y="517" width="0.1604%" height="15" fill="rgb(228,202,34)" fg:x="860" fg:w="2"/><text x="69.2155%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.1259%" y="453" width="0.0802%" height="15" fill="rgb(222,225,37)" fg:x="862" fg:w="1"/><text x="69.3759%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="69.2061%" y="373" width="0.0802%" height="15" fill="rgb(221,14,54)" fg:x="863" fg:w="1"/><text x="69.4561%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.2061%" y="405" width="0.2406%" height="15" fill="rgb(254,102,2)" fg:x="863" fg:w="3"/><text x="69.4561%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="69.2061%" y="389" width="0.2406%" height="15" fill="rgb(232,104,17)" fg:x="863" fg:w="3"/><text x="69.4561%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.2863%" y="373" width="0.1604%" height="15" fill="rgb(250,220,14)" fg:x="864" fg:w="2"/><text x="69.5363%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.2863%" y="357" width="0.1604%" height="15" fill="rgb(241,158,9)" fg:x="864" fg:w="2"/><text x="69.5363%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.2863%" y="341" width="0.1604%" height="15" fill="rgb(246,9,43)" fg:x="864" fg:w="2"/><text x="69.5363%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.3665%" y="325" width="0.0802%" height="15" fill="rgb(206,73,33)" fg:x="865" fg:w="1"/><text x="69.6165%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3665%" y="309" width="0.0802%" height="15" fill="rgb(222,79,8)" fg:x="865" fg:w="1"/><text x="69.6165%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (10 samples, 0.80%)</title><rect x="68.7249%" y="581" width="0.8019%" height="15" fill="rgb(234,8,54)" fg:x="857" fg:w="10"/><text x="68.9749%" y="591.50"></text></g><g><title>engine::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="68.7249%" y="565" width="0.8019%" height="15" fill="rgb(209,134,38)" fg:x="857" fg:w="10"/><text x="68.9749%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="69.1259%" y="549" width="0.4010%" height="15" fill="rgb(230,127,29)" fg:x="862" fg:w="5"/><text x="69.3759%" y="559.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="69.1259%" y="533" width="0.4010%" height="15" fill="rgb(242,44,41)" fg:x="862" fg:w="5"/><text x="69.3759%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="69.1259%" y="517" width="0.4010%" height="15" fill="rgb(222,56,43)" fg:x="862" fg:w="5"/><text x="69.3759%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="69.1259%" y="501" width="0.4010%" height="15" fill="rgb(238,39,47)" fg:x="862" fg:w="5"/><text x="69.3759%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="69.1259%" y="485" width="0.4010%" height="15" fill="rgb(226,79,43)" fg:x="862" fg:w="5"/><text x="69.3759%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="69.1259%" y="469" width="0.4010%" height="15" fill="rgb(242,105,53)" fg:x="862" fg:w="5"/><text x="69.3759%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="69.2061%" y="453" width="0.3208%" height="15" fill="rgb(251,132,46)" fg:x="863" fg:w="4"/><text x="69.4561%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="69.2061%" y="437" width="0.3208%" height="15" fill="rgb(231,77,14)" fg:x="863" fg:w="4"/><text x="69.4561%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="69.2061%" y="421" width="0.3208%" height="15" fill="rgb(240,135,9)" fg:x="863" fg:w="4"/><text x="69.4561%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.4467%" y="405" width="0.0802%" height="15" fill="rgb(248,109,14)" fg:x="866" fg:w="1"/><text x="69.6967%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4467%" y="389" width="0.0802%" height="15" fill="rgb(227,146,52)" fg:x="866" fg:w="1"/><text x="69.6967%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.4467%" y="373" width="0.0802%" height="15" fill="rgb(232,54,3)" fg:x="866" fg:w="1"/><text x="69.6967%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.4467%" y="357" width="0.0802%" height="15" fill="rgb(229,201,43)" fg:x="866" fg:w="1"/><text x="69.6967%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (12 samples, 0.96%)</title><rect x="68.6447%" y="597" width="0.9623%" height="15" fill="rgb(252,161,33)" fg:x="856" fg:w="12"/><text x="68.8947%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="69.5269%" y="581" width="0.0802%" height="15" fill="rgb(226,146,40)" fg:x="867" fg:w="1"/><text x="69.7769%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="69.5269%" y="565" width="0.0802%" height="15" fill="rgb(219,47,25)" fg:x="867" fg:w="1"/><text x="69.7769%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="69.5269%" y="549" width="0.0802%" height="15" fill="rgb(250,135,13)" fg:x="867" fg:w="1"/><text x="69.7769%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.5269%" y="533" width="0.0802%" height="15" fill="rgb(219,229,18)" fg:x="867" fg:w="1"/><text x="69.7769%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.5269%" y="517" width="0.0802%" height="15" fill="rgb(217,152,27)" fg:x="867" fg:w="1"/><text x="69.7769%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="69.5269%" y="501" width="0.0802%" height="15" fill="rgb(225,71,47)" fg:x="867" fg:w="1"/><text x="69.7769%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="69.5269%" y="485" width="0.0802%" height="15" fill="rgb(220,139,14)" fg:x="867" fg:w="1"/><text x="69.7769%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.5269%" y="469" width="0.0802%" height="15" fill="rgb(247,54,32)" fg:x="867" fg:w="1"/><text x="69.7769%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.5269%" y="453" width="0.0802%" height="15" fill="rgb(252,131,39)" fg:x="867" fg:w="1"/><text x="69.7769%" y="463.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="69.5269%" y="437" width="0.0802%" height="15" fill="rgb(210,108,39)" fg:x="867" fg:w="1"/><text x="69.7769%" y="447.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="69.6071%" y="597" width="0.0802%" height="15" fill="rgb(205,23,29)" fg:x="868" fg:w="1"/><text x="69.8571%" y="607.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="69.6071%" y="581" width="0.0802%" height="15" fill="rgb(246,139,46)" fg:x="868" fg:w="1"/><text x="69.8571%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="69.6071%" y="565" width="0.0802%" height="15" fill="rgb(250,81,26)" fg:x="868" fg:w="1"/><text x="69.8571%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.6071%" y="549" width="0.0802%" height="15" fill="rgb(214,104,7)" fg:x="868" fg:w="1"/><text x="69.8571%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.6071%" y="533" width="0.0802%" height="15" fill="rgb(233,189,8)" fg:x="868" fg:w="1"/><text x="69.8571%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6071%" y="517" width="0.0802%" height="15" fill="rgb(228,141,17)" fg:x="868" fg:w="1"/><text x="69.8571%" y="527.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="69.6071%" y="501" width="0.0802%" height="15" fill="rgb(247,157,1)" fg:x="868" fg:w="1"/><text x="69.8571%" y="511.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (709 samples, 56.86%)</title><rect x="12.9912%" y="629" width="56.8565%" height="15" fill="rgb(249,225,5)" fg:x="162" fg:w="709"/><text x="13.2412%" y="639.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (15 samples, 1.20%)</title><rect x="68.6447%" y="613" width="1.2029%" height="15" fill="rgb(242,55,13)" fg:x="856" fg:w="15"/><text x="68.8947%" y="623.50"></text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="69.6872%" y="597" width="0.1604%" height="15" fill="rgb(230,49,50)" fg:x="869" fg:w="2"/><text x="69.9372%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="69.7674%" y="581" width="0.0802%" height="15" fill="rgb(241,111,38)" fg:x="870" fg:w="1"/><text x="70.0174%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="69.7674%" y="565" width="0.0802%" height="15" fill="rgb(252,155,4)" fg:x="870" fg:w="1"/><text x="70.0174%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="69.7674%" y="549" width="0.0802%" height="15" fill="rgb(212,69,32)" fg:x="870" fg:w="1"/><text x="70.0174%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="69.7674%" y="533" width="0.0802%" height="15" fill="rgb(243,107,47)" fg:x="870" fg:w="1"/><text x="70.0174%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.7674%" y="517" width="0.0802%" height="15" fill="rgb(247,130,12)" fg:x="870" fg:w="1"/><text x="70.0174%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.7674%" y="501" width="0.0802%" height="15" fill="rgb(233,74,16)" fg:x="870" fg:w="1"/><text x="70.0174%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="69.7674%" y="485" width="0.0802%" height="15" fill="rgb(208,58,18)" fg:x="870" fg:w="1"/><text x="70.0174%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="69.7674%" y="469" width="0.0802%" height="15" fill="rgb(242,225,1)" fg:x="870" fg:w="1"/><text x="70.0174%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.7674%" y="453" width="0.0802%" height="15" fill="rgb(249,39,40)" fg:x="870" fg:w="1"/><text x="70.0174%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.7674%" y="437" width="0.0802%" height="15" fill="rgb(207,72,44)" fg:x="870" fg:w="1"/><text x="70.0174%" y="447.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (710 samples, 56.94%)</title><rect x="12.9912%" y="645" width="56.9366%" height="15" fill="rgb(215,193,12)" fg:x="162" fg:w="710"/><text x="13.2412%" y="655.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="69.8476%" y="629" width="0.0802%" height="15" fill="rgb(248,41,39)" fg:x="871" fg:w="1"/><text x="70.0976%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="69.8476%" y="613" width="0.0802%" height="15" fill="rgb(253,85,4)" fg:x="871" fg:w="1"/><text x="70.0976%" y="623.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="69.8476%" y="597" width="0.0802%" height="15" fill="rgb(243,70,31)" fg:x="871" fg:w="1"/><text x="70.0976%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="69.9278%" y="645" width="0.0802%" height="15" fill="rgb(253,195,26)" fg:x="872" fg:w="1"/><text x="70.1778%" y="655.50"></text></g><g><title>&lt;plugins_core::moving::parser::GoActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="69.9278%" y="629" width="0.0802%" height="15" fill="rgb(243,42,11)" fg:x="872" fg:w="1"/><text x="70.1778%" y="639.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (714 samples, 57.26%)</title><rect x="12.8308%" y="709" width="57.2574%" height="15" fill="rgb(239,66,17)" fg:x="160" fg:w="714"/><text x="13.0808%" y="719.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (713 samples, 57.18%)</title><rect x="12.9110%" y="693" width="57.1772%" height="15" fill="rgb(217,132,21)" fg:x="161" fg:w="713"/><text x="13.1610%" y="703.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (713 samples, 57.18%)</title><rect x="12.9110%" y="677" width="57.1772%" height="15" fill="rgb(252,202,21)" fg:x="161" fg:w="713"/><text x="13.1610%" y="687.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (713 samples, 57.18%)</title><rect x="12.9110%" y="661" width="57.1772%" height="15" fill="rgb(233,98,36)" fg:x="161" fg:w="713"/><text x="13.1610%" y="671.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="70.0080%" y="645" width="0.0802%" height="15" fill="rgb(216,153,54)" fg:x="873" fg:w="1"/><text x="70.2580%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0080%" y="629" width="0.0802%" height="15" fill="rgb(250,99,7)" fg:x="873" fg:w="1"/><text x="70.2580%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (875 samples, 70.17%)</title><rect x="0.0000%" y="789" width="70.1684%" height="15" fill="rgb(207,56,50)" fg:x="0" fg:w="875"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (875 samples, 70.17%)</title><rect x="0.0000%" y="773" width="70.1684%" height="15" fill="rgb(244,61,34)" fg:x="0" fg:w="875"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (875 samples, 70.17%)</title><rect x="0.0000%" y="757" width="70.1684%" height="15" fill="rgb(241,50,38)" fg:x="0" fg:w="875"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (716 samples, 57.42%)</title><rect x="12.7506%" y="741" width="57.4178%" height="15" fill="rgb(212,166,30)" fg:x="159" fg:w="716"/><text x="13.0006%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (716 samples, 57.42%)</title><rect x="12.7506%" y="725" width="57.4178%" height="15" fill="rgb(249,127,32)" fg:x="159" fg:w="716"/><text x="13.0006%" y="735.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::DomainError&gt; (1 samples, 0.08%)</title><rect x="70.0882%" y="709" width="0.0802%" height="15" fill="rgb(209,103,0)" fg:x="874" fg:w="1"/><text x="70.3382%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.2486%" y="741" width="0.0802%" height="15" fill="rgb(238,209,51)" fg:x="876" fg:w="1"/><text x="70.4986%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.2486%" y="725" width="0.0802%" height="15" fill="rgb(237,56,23)" fg:x="876" fg:w="1"/><text x="70.4986%" y="735.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="70.4090%" y="661" width="0.1604%" height="15" fill="rgb(215,153,46)" fg:x="878" fg:w="2"/><text x="70.6590%" y="671.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="70.4090%" y="645" width="0.1604%" height="15" fill="rgb(224,49,31)" fg:x="878" fg:w="2"/><text x="70.6590%" y="655.50"></text></g><g><title>_IO_default_xsputn (1 samples, 0.08%)</title><rect x="70.4892%" y="629" width="0.0802%" height="15" fill="rgb(250,18,42)" fg:x="879" fg:w="1"/><text x="70.7392%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (5 samples, 0.40%)</title><rect x="70.3288%" y="709" width="0.4010%" height="15" fill="rgb(215,176,39)" fg:x="877" fg:w="5"/><text x="70.5788%" y="719.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.40%)</title><rect x="70.3288%" y="693" width="0.4010%" height="15" fill="rgb(223,77,29)" fg:x="877" fg:w="5"/><text x="70.5788%" y="703.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.32%)</title><rect x="70.4090%" y="677" width="0.3208%" height="15" fill="rgb(234,94,52)" fg:x="878" fg:w="4"/><text x="70.6590%" y="687.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="70.5694%" y="661" width="0.1604%" height="15" fill="rgb(220,154,50)" fg:x="880" fg:w="2"/><text x="70.8194%" y="671.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="70.5694%" y="645" width="0.1604%" height="15" fill="rgb(212,11,10)" fg:x="880" fg:w="2"/><text x="70.8194%" y="655.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="70.5694%" y="629" width="0.1604%" height="15" fill="rgb(205,166,19)" fg:x="880" fg:w="2"/><text x="70.8194%" y="639.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="70.5694%" y="613" width="0.1604%" height="15" fill="rgb(244,198,16)" fg:x="880" fg:w="2"/><text x="70.8194%" y="623.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="70.5694%" y="597" width="0.1604%" height="15" fill="rgb(219,69,12)" fg:x="880" fg:w="2"/><text x="70.8194%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.7298%" y="693" width="0.0802%" height="15" fill="rgb(245,30,7)" fg:x="882" fg:w="1"/><text x="70.9798%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.7298%" y="677" width="0.0802%" height="15" fill="rgb(218,221,48)" fg:x="882" fg:w="1"/><text x="70.9798%" y="687.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.7298%" y="661" width="0.0802%" height="15" fill="rgb(216,66,15)" fg:x="882" fg:w="1"/><text x="70.9798%" y="671.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (7 samples, 0.56%)</title><rect x="70.3288%" y="741" width="0.5613%" height="15" fill="rgb(226,122,50)" fg:x="877" fg:w="7"/><text x="70.5788%" y="751.50"></text></g><g><title>engine::session::Session::new (7 samples, 0.56%)</title><rect x="70.3288%" y="725" width="0.5613%" height="15" fill="rgb(239,156,16)" fg:x="877" fg:w="7"/><text x="70.5788%" y="735.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="70.7298%" y="709" width="0.1604%" height="15" fill="rgb(224,27,38)" fg:x="882" fg:w="2"/><text x="70.9798%" y="719.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="70.8099%" y="693" width="0.0802%" height="15" fill="rgb(224,39,27)" fg:x="883" fg:w="1"/><text x="71.0599%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.8099%" y="677" width="0.0802%" height="15" fill="rgb(215,92,29)" fg:x="883" fg:w="1"/><text x="71.0599%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.8099%" y="661" width="0.0802%" height="15" fill="rgb(207,159,16)" fg:x="883" fg:w="1"/><text x="71.0599%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.8901%" y="661" width="0.0802%" height="15" fill="rgb(238,163,47)" fg:x="884" fg:w="1"/><text x="71.1401%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="70.8901%" y="693" width="0.2406%" height="15" fill="rgb(219,91,49)" fg:x="884" fg:w="3"/><text x="71.1401%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="70.8901%" y="677" width="0.2406%" height="15" fill="rgb(227,167,31)" fg:x="884" fg:w="3"/><text x="71.1401%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="70.9703%" y="661" width="0.1604%" height="15" fill="rgb(234,80,54)" fg:x="885" fg:w="2"/><text x="71.2203%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="71.0505%" y="645" width="0.0802%" height="15" fill="rgb(212,114,2)" fg:x="886" fg:w="1"/><text x="71.3005%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.1307%" y="677" width="0.0802%" height="15" fill="rgb(234,50,24)" fg:x="887" fg:w="1"/><text x="71.3807%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.1307%" y="661" width="0.0802%" height="15" fill="rgb(221,68,8)" fg:x="887" fg:w="1"/><text x="71.3807%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.1307%" y="645" width="0.0802%" height="15" fill="rgb(254,180,31)" fg:x="887" fg:w="1"/><text x="71.3807%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2109%" y="661" width="0.0802%" height="15" fill="rgb(247,130,50)" fg:x="888" fg:w="1"/><text x="71.4609%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2109%" y="645" width="0.0802%" height="15" fill="rgb(211,109,4)" fg:x="888" fg:w="1"/><text x="71.4609%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.2109%" y="629" width="0.0802%" height="15" fill="rgb(238,50,21)" fg:x="888" fg:w="1"/><text x="71.4609%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.2109%" y="613" width="0.0802%" height="15" fill="rgb(225,57,45)" fg:x="888" fg:w="1"/><text x="71.4609%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.2109%" y="597" width="0.0802%" height="15" fill="rgb(209,196,50)" fg:x="888" fg:w="1"/><text x="71.4609%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2109%" y="581" width="0.0802%" height="15" fill="rgb(242,140,13)" fg:x="888" fg:w="1"/><text x="71.4609%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2109%" y="565" width="0.0802%" height="15" fill="rgb(217,111,7)" fg:x="888" fg:w="1"/><text x="71.4609%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.2109%" y="549" width="0.0802%" height="15" fill="rgb(253,193,51)" fg:x="888" fg:w="1"/><text x="71.4609%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.2109%" y="533" width="0.0802%" height="15" fill="rgb(252,70,29)" fg:x="888" fg:w="1"/><text x="71.4609%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.2109%" y="517" width="0.0802%" height="15" fill="rgb(232,127,12)" fg:x="888" fg:w="1"/><text x="71.4609%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.2109%" y="501" width="0.0802%" height="15" fill="rgb(211,180,21)" fg:x="888" fg:w="1"/><text x="71.4609%" y="511.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="71.2109%" y="485" width="0.0802%" height="15" fill="rgb(229,72,13)" fg:x="888" fg:w="1"/><text x="71.4609%" y="495.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="71.2109%" y="469" width="0.0802%" height="15" fill="rgb(240,211,49)" fg:x="888" fg:w="1"/><text x="71.4609%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.2911%" y="613" width="0.0802%" height="15" fill="rgb(219,149,40)" fg:x="889" fg:w="1"/><text x="71.5411%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.2911%" y="597" width="0.0802%" height="15" fill="rgb(210,127,46)" fg:x="889" fg:w="1"/><text x="71.5411%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="71.2911%" y="661" width="0.2406%" height="15" fill="rgb(220,106,7)" fg:x="889" fg:w="3"/><text x="71.5411%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="71.2911%" y="645" width="0.2406%" height="15" fill="rgb(249,31,22)" fg:x="889" fg:w="3"/><text x="71.5411%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="71.2911%" y="629" width="0.2406%" height="15" fill="rgb(253,1,49)" fg:x="889" fg:w="3"/><text x="71.5411%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.3713%" y="613" width="0.1604%" height="15" fill="rgb(227,144,33)" fg:x="890" fg:w="2"/><text x="71.6213%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.4515%" y="597" width="0.0802%" height="15" fill="rgb(249,163,44)" fg:x="891" fg:w="1"/><text x="71.7015%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.4515%" y="581" width="0.0802%" height="15" fill="rgb(234,15,39)" fg:x="891" fg:w="1"/><text x="71.7015%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.4515%" y="565" width="0.0802%" height="15" fill="rgb(207,66,16)" fg:x="891" fg:w="1"/><text x="71.7015%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.4515%" y="549" width="0.0802%" height="15" fill="rgb(233,112,24)" fg:x="891" fg:w="1"/><text x="71.7015%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.4515%" y="533" width="0.0802%" height="15" fill="rgb(230,90,22)" fg:x="891" fg:w="1"/><text x="71.7015%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.4515%" y="517" width="0.0802%" height="15" fill="rgb(229,61,13)" fg:x="891" fg:w="1"/><text x="71.7015%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.4515%" y="501" width="0.0802%" height="15" fill="rgb(225,57,24)" fg:x="891" fg:w="1"/><text x="71.7015%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.5317%" y="661" width="0.0802%" height="15" fill="rgb(208,169,48)" fg:x="892" fg:w="1"/><text x="71.7817%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.5317%" y="645" width="0.0802%" height="15" fill="rgb(244,218,51)" fg:x="892" fg:w="1"/><text x="71.7817%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.5317%" y="629" width="0.0802%" height="15" fill="rgb(214,148,10)" fg:x="892" fg:w="1"/><text x="71.7817%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.5317%" y="613" width="0.0802%" height="15" fill="rgb(225,174,27)" fg:x="892" fg:w="1"/><text x="71.7817%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.5317%" y="597" width="0.0802%" height="15" fill="rgb(230,96,26)" fg:x="892" fg:w="1"/><text x="71.7817%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="71.5317%" y="581" width="0.0802%" height="15" fill="rgb(232,10,30)" fg:x="892" fg:w="1"/><text x="71.7817%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.5317%" y="565" width="0.0802%" height="15" fill="rgb(222,8,50)" fg:x="892" fg:w="1"/><text x="71.7817%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5317%" y="549" width="0.0802%" height="15" fill="rgb(213,81,27)" fg:x="892" fg:w="1"/><text x="71.7817%" y="559.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.80%)</title><rect x="70.8901%" y="725" width="0.8019%" height="15" fill="rgb(245,50,10)" fg:x="884" fg:w="10"/><text x="71.1401%" y="735.50"></text></g><g><title>engine::session::Session::save_entity_changes (10 samples, 0.80%)</title><rect x="70.8901%" y="709" width="0.8019%" height="15" fill="rgb(216,100,18)" fg:x="884" fg:w="10"/><text x="71.1401%" y="719.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (7 samples, 0.56%)</title><rect x="71.1307%" y="693" width="0.5613%" height="15" fill="rgb(236,147,54)" fg:x="887" fg:w="7"/><text x="71.3807%" y="703.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (6 samples, 0.48%)</title><rect x="71.2109%" y="677" width="0.4812%" height="15" fill="rgb(205,143,26)" fg:x="888" fg:w="6"/><text x="71.4609%" y="687.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="71.6119%" y="661" width="0.0802%" height="15" fill="rgb(236,26,9)" fg:x="893" fg:w="1"/><text x="71.8619%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="71.6119%" y="645" width="0.0802%" height="15" fill="rgb(221,165,53)" fg:x="893" fg:w="1"/><text x="71.8619%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.6119%" y="629" width="0.0802%" height="15" fill="rgb(214,110,17)" fg:x="893" fg:w="1"/><text x="71.8619%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.6119%" y="613" width="0.0802%" height="15" fill="rgb(237,197,12)" fg:x="893" fg:w="1"/><text x="71.8619%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="71.6119%" y="597" width="0.0802%" height="15" fill="rgb(205,84,17)" fg:x="893" fg:w="1"/><text x="71.8619%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.6119%" y="581" width="0.0802%" height="15" fill="rgb(237,18,45)" fg:x="893" fg:w="1"/><text x="71.8619%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.6119%" y="565" width="0.0802%" height="15" fill="rgb(221,87,14)" fg:x="893" fg:w="1"/><text x="71.8619%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.6119%" y="549" width="0.0802%" height="15" fill="rgb(238,186,15)" fg:x="893" fg:w="1"/><text x="71.8619%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.6119%" y="533" width="0.0802%" height="15" fill="rgb(208,115,11)" fg:x="893" fg:w="1"/><text x="71.8619%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.6119%" y="517" width="0.0802%" height="15" fill="rgb(254,175,0)" fg:x="893" fg:w="1"/><text x="71.8619%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6119%" y="501" width="0.0802%" height="15" fill="rgb(227,24,42)" fg:x="893" fg:w="1"/><text x="71.8619%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="71.6921%" y="693" width="0.0802%" height="15" fill="rgb(223,211,37)" fg:x="894" fg:w="1"/><text x="71.9421%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="71.6921%" y="677" width="0.0802%" height="15" fill="rgb(235,49,27)" fg:x="894" fg:w="1"/><text x="71.9421%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="71.6921%" y="661" width="0.0802%" height="15" fill="rgb(254,97,51)" fg:x="894" fg:w="1"/><text x="71.9421%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="71.6921%" y="645" width="0.0802%" height="15" fill="rgb(249,51,40)" fg:x="894" fg:w="1"/><text x="71.9421%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.6921%" y="629" width="0.0802%" height="15" fill="rgb(210,128,45)" fg:x="894" fg:w="1"/><text x="71.9421%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.6921%" y="613" width="0.0802%" height="15" fill="rgb(224,137,50)" fg:x="894" fg:w="1"/><text x="71.9421%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="71.6921%" y="597" width="0.0802%" height="15" fill="rgb(242,15,9)" fg:x="894" fg:w="1"/><text x="71.9421%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="71.6921%" y="581" width="0.0802%" height="15" fill="rgb(233,187,41)" fg:x="894" fg:w="1"/><text x="71.9421%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.6921%" y="565" width="0.0802%" height="15" fill="rgb(227,2,29)" fg:x="894" fg:w="1"/><text x="71.9421%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.6921%" y="549" width="0.0802%" height="15" fill="rgb(222,70,3)" fg:x="894" fg:w="1"/><text x="71.9421%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="71.6921%" y="533" width="0.0802%" height="15" fill="rgb(213,11,42)" fg:x="894" fg:w="1"/><text x="71.9421%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="71.6921%" y="517" width="0.0802%" height="15" fill="rgb(225,150,9)" fg:x="894" fg:w="1"/><text x="71.9421%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.6921%" y="501" width="0.0802%" height="15" fill="rgb(230,162,45)" fg:x="894" fg:w="1"/><text x="71.9421%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.6921%" y="485" width="0.0802%" height="15" fill="rgb(222,14,52)" fg:x="894" fg:w="1"/><text x="71.9421%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.6921%" y="469" width="0.0802%" height="15" fill="rgb(254,198,14)" fg:x="894" fg:w="1"/><text x="71.9421%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.6921%" y="453" width="0.0802%" height="15" fill="rgb(220,217,30)" fg:x="894" fg:w="1"/><text x="71.9421%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="71.6921%" y="437" width="0.0802%" height="15" fill="rgb(215,146,41)" fg:x="894" fg:w="1"/><text x="71.9421%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="71.6921%" y="421" width="0.0802%" height="15" fill="rgb(217,27,36)" fg:x="894" fg:w="1"/><text x="71.9421%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="71.6921%" y="405" width="0.0802%" height="15" fill="rgb(219,218,39)" fg:x="894" fg:w="1"/><text x="71.9421%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="71.6921%" y="389" width="0.0802%" height="15" fill="rgb(219,4,42)" fg:x="894" fg:w="1"/><text x="71.9421%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.6921%" y="373" width="0.0802%" height="15" fill="rgb(249,119,36)" fg:x="894" fg:w="1"/><text x="71.9421%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.6921%" y="357" width="0.0802%" height="15" fill="rgb(209,23,33)" fg:x="894" fg:w="1"/><text x="71.9421%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.6921%" y="341" width="0.0802%" height="15" fill="rgb(211,10,0)" fg:x="894" fg:w="1"/><text x="71.9421%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="71.6921%" y="325" width="0.0802%" height="15" fill="rgb(208,99,37)" fg:x="894" fg:w="1"/><text x="71.9421%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.6921%" y="309" width="0.0802%" height="15" fill="rgb(213,132,31)" fg:x="894" fg:w="1"/><text x="71.9421%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="71.6921%" y="293" width="0.0802%" height="15" fill="rgb(243,129,40)" fg:x="894" fg:w="1"/><text x="71.9421%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="71.6921%" y="277" width="0.0802%" height="15" fill="rgb(210,66,33)" fg:x="894" fg:w="1"/><text x="71.9421%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="71.6921%" y="261" width="0.0802%" height="15" fill="rgb(209,189,4)" fg:x="894" fg:w="1"/><text x="71.9421%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.6921%" y="245" width="0.0802%" height="15" fill="rgb(214,107,37)" fg:x="894" fg:w="1"/><text x="71.9421%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="71.7723%" y="629" width="0.0802%" height="15" fill="rgb(245,88,54)" fg:x="895" fg:w="1"/><text x="72.0223%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.7723%" y="613" width="0.0802%" height="15" fill="rgb(205,146,20)" fg:x="895" fg:w="1"/><text x="72.0223%" y="623.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="71.6921%" y="725" width="0.2406%" height="15" fill="rgb(220,161,25)" fg:x="894" fg:w="3"/><text x="71.9421%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="71.6921%" y="709" width="0.2406%" height="15" fill="rgb(215,152,15)" fg:x="894" fg:w="3"/><text x="71.9421%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="71.7723%" y="693" width="0.1604%" height="15" fill="rgb(233,192,44)" fg:x="895" fg:w="2"/><text x="72.0223%" y="703.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="71.7723%" y="677" width="0.1604%" height="15" fill="rgb(240,170,46)" fg:x="895" fg:w="2"/><text x="72.0223%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="71.7723%" y="661" width="0.1604%" height="15" fill="rgb(207,104,33)" fg:x="895" fg:w="2"/><text x="72.0223%" y="671.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="71.7723%" y="645" width="0.1604%" height="15" fill="rgb(219,21,39)" fg:x="895" fg:w="2"/><text x="72.0223%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="71.8524%" y="629" width="0.0802%" height="15" fill="rgb(214,133,29)" fg:x="896" fg:w="1"/><text x="72.1024%" y="639.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="71.8524%" y="613" width="0.0802%" height="15" fill="rgb(226,93,6)" fg:x="896" fg:w="1"/><text x="72.1024%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.8524%" y="597" width="0.0802%" height="15" fill="rgb(252,222,34)" fg:x="896" fg:w="1"/><text x="72.1024%" y="607.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="71.8524%" y="581" width="0.0802%" height="15" fill="rgb(252,92,48)" fg:x="896" fg:w="1"/><text x="72.1024%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.8524%" y="565" width="0.0802%" height="15" fill="rgb(245,223,24)" fg:x="896" fg:w="1"/><text x="72.1024%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.8524%" y="549" width="0.0802%" height="15" fill="rgb(205,176,3)" fg:x="896" fg:w="1"/><text x="72.1024%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.9326%" y="661" width="0.0802%" height="15" fill="rgb(235,151,15)" fg:x="897" fg:w="1"/><text x="72.1826%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.9326%" y="645" width="0.0802%" height="15" fill="rgb(237,209,11)" fg:x="897" fg:w="1"/><text x="72.1826%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.9326%" y="629" width="0.0802%" height="15" fill="rgb(243,227,24)" fg:x="897" fg:w="1"/><text x="72.1826%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9326%" y="613" width="0.0802%" height="15" fill="rgb(239,193,16)" fg:x="897" fg:w="1"/><text x="72.1826%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9326%" y="597" width="0.0802%" height="15" fill="rgb(231,27,9)" fg:x="897" fg:w="1"/><text x="72.1826%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9326%" y="581" width="0.0802%" height="15" fill="rgb(219,169,10)" fg:x="897" fg:w="1"/><text x="72.1826%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9326%" y="565" width="0.0802%" height="15" fill="rgb(244,229,43)" fg:x="897" fg:w="1"/><text x="72.1826%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9326%" y="549" width="0.0802%" height="15" fill="rgb(254,38,20)" fg:x="897" fg:w="1"/><text x="72.1826%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.9326%" y="533" width="0.0802%" height="15" fill="rgb(250,47,30)" fg:x="897" fg:w="1"/><text x="72.1826%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.9326%" y="517" width="0.0802%" height="15" fill="rgb(224,124,36)" fg:x="897" fg:w="1"/><text x="72.1826%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.9326%" y="501" width="0.0802%" height="15" fill="rgb(246,68,51)" fg:x="897" fg:w="1"/><text x="72.1826%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9326%" y="485" width="0.0802%" height="15" fill="rgb(253,43,49)" fg:x="897" fg:w="1"/><text x="72.1826%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9326%" y="469" width="0.0802%" height="15" fill="rgb(219,54,36)" fg:x="897" fg:w="1"/><text x="72.1826%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.9326%" y="453" width="0.0802%" height="15" fill="rgb(227,133,34)" fg:x="897" fg:w="1"/><text x="72.1826%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.9326%" y="437" width="0.0802%" height="15" fill="rgb(247,227,15)" fg:x="897" fg:w="1"/><text x="72.1826%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.9326%" y="421" width="0.0802%" height="15" fill="rgb(229,96,14)" fg:x="897" fg:w="1"/><text x="72.1826%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.9326%" y="405" width="0.0802%" height="15" fill="rgb(220,79,17)" fg:x="897" fg:w="1"/><text x="72.1826%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9326%" y="389" width="0.0802%" height="15" fill="rgb(205,131,53)" fg:x="897" fg:w="1"/><text x="72.1826%" y="399.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="71.9326%" y="725" width="0.1604%" height="15" fill="rgb(209,50,29)" fg:x="897" fg:w="2"/><text x="72.1826%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="71.9326%" y="709" width="0.1604%" height="15" fill="rgb(245,86,46)" fg:x="897" fg:w="2"/><text x="72.1826%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="71.9326%" y="693" width="0.1604%" height="15" fill="rgb(235,66,46)" fg:x="897" fg:w="2"/><text x="72.1826%" y="703.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="71.9326%" y="677" width="0.1604%" height="15" fill="rgb(232,148,31)" fg:x="897" fg:w="2"/><text x="72.1826%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="72.0128%" y="661" width="0.0802%" height="15" fill="rgb(217,149,8)" fg:x="898" fg:w="1"/><text x="72.2628%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="72.0128%" y="645" width="0.0802%" height="15" fill="rgb(209,183,11)" fg:x="898" fg:w="1"/><text x="72.2628%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="72.0128%" y="629" width="0.0802%" height="15" fill="rgb(208,55,20)" fg:x="898" fg:w="1"/><text x="72.2628%" y="639.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="72.0128%" y="613" width="0.0802%" height="15" fill="rgb(218,39,14)" fg:x="898" fg:w="1"/><text x="72.2628%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.0128%" y="597" width="0.0802%" height="15" fill="rgb(216,169,33)" fg:x="898" fg:w="1"/><text x="72.2628%" y="607.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="72.0128%" y="581" width="0.0802%" height="15" fill="rgb(233,80,24)" fg:x="898" fg:w="1"/><text x="72.2628%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.0128%" y="565" width="0.0802%" height="15" fill="rgb(213,179,31)" fg:x="898" fg:w="1"/><text x="72.2628%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="72.0128%" y="549" width="0.0802%" height="15" fill="rgb(209,19,5)" fg:x="898" fg:w="1"/><text x="72.2628%" y="559.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="72.0128%" y="533" width="0.0802%" height="15" fill="rgb(219,18,35)" fg:x="898" fg:w="1"/><text x="72.2628%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="72.0930%" y="709" width="0.0802%" height="15" fill="rgb(209,169,16)" fg:x="899" fg:w="1"/><text x="72.3430%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.0930%" y="693" width="0.0802%" height="15" fill="rgb(245,90,51)" fg:x="899" fg:w="1"/><text x="72.3430%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="72.0930%" y="677" width="0.0802%" height="15" fill="rgb(220,99,45)" fg:x="899" fg:w="1"/><text x="72.3430%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="72.1732%" y="629" width="0.0802%" height="15" fill="rgb(249,89,25)" fg:x="900" fg:w="1"/><text x="72.4232%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.1732%" y="613" width="0.0802%" height="15" fill="rgb(239,193,0)" fg:x="900" fg:w="1"/><text x="72.4232%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.1732%" y="597" width="0.0802%" height="15" fill="rgb(231,126,1)" fg:x="900" fg:w="1"/><text x="72.4232%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.1732%" y="581" width="0.0802%" height="15" fill="rgb(243,166,3)" fg:x="900" fg:w="1"/><text x="72.4232%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.2534%" y="613" width="0.0802%" height="15" fill="rgb(223,22,34)" fg:x="901" fg:w="1"/><text x="72.5034%" y="623.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="72.1732%" y="645" width="0.2406%" height="15" fill="rgb(251,52,51)" fg:x="900" fg:w="3"/><text x="72.4232%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="72.2534%" y="629" width="0.1604%" height="15" fill="rgb(221,165,28)" fg:x="901" fg:w="2"/><text x="72.5034%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.3336%" y="613" width="0.0802%" height="15" fill="rgb(218,121,47)" fg:x="902" fg:w="1"/><text x="72.5836%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.3336%" y="597" width="0.0802%" height="15" fill="rgb(209,120,9)" fg:x="902" fg:w="1"/><text x="72.5836%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.4138%" y="645" width="0.2406%" height="15" fill="rgb(236,68,12)" fg:x="903" fg:w="3"/><text x="72.6638%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="72.4138%" y="629" width="0.2406%" height="15" fill="rgb(225,194,26)" fg:x="903" fg:w="3"/><text x="72.6638%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.4138%" y="613" width="0.2406%" height="15" fill="rgb(231,84,39)" fg:x="903" fg:w="3"/><text x="72.6638%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.4940%" y="597" width="0.1604%" height="15" fill="rgb(210,11,45)" fg:x="904" fg:w="2"/><text x="72.7440%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.5742%" y="581" width="0.0802%" height="15" fill="rgb(224,54,52)" fg:x="905" fg:w="1"/><text x="72.8242%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="72.5742%" y="565" width="0.0802%" height="15" fill="rgb(238,102,14)" fg:x="905" fg:w="1"/><text x="72.8242%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.5742%" y="549" width="0.0802%" height="15" fill="rgb(243,160,52)" fg:x="905" fg:w="1"/><text x="72.8242%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5742%" y="533" width="0.0802%" height="15" fill="rgb(216,114,19)" fg:x="905" fg:w="1"/><text x="72.8242%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="72.6544%" y="629" width="0.0802%" height="15" fill="rgb(244,166,37)" fg:x="906" fg:w="1"/><text x="72.9044%" y="639.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="72.6544%" y="613" width="0.0802%" height="15" fill="rgb(246,29,44)" fg:x="906" fg:w="1"/><text x="72.9044%" y="623.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="72.6544%" y="597" width="0.0802%" height="15" fill="rgb(215,56,53)" fg:x="906" fg:w="1"/><text x="72.9044%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.6544%" y="581" width="0.0802%" height="15" fill="rgb(217,60,2)" fg:x="906" fg:w="1"/><text x="72.9044%" y="591.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.64%)</title><rect x="72.1732%" y="709" width="0.6415%" height="15" fill="rgb(207,26,24)" fg:x="900" fg:w="8"/><text x="72.4232%" y="719.50"></text></g><g><title>engine::session::Session::save_entity_changes (8 samples, 0.64%)</title><rect x="72.1732%" y="693" width="0.6415%" height="15" fill="rgb(252,210,15)" fg:x="900" fg:w="8"/><text x="72.4232%" y="703.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (8 samples, 0.64%)</title><rect x="72.1732%" y="677" width="0.6415%" height="15" fill="rgb(253,209,26)" fg:x="900" fg:w="8"/><text x="72.4232%" y="687.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (8 samples, 0.64%)</title><rect x="72.1732%" y="661" width="0.6415%" height="15" fill="rgb(238,170,14)" fg:x="900" fg:w="8"/><text x="72.4232%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="72.6544%" y="645" width="0.1604%" height="15" fill="rgb(216,178,15)" fg:x="906" fg:w="2"/><text x="72.9044%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7346%" y="629" width="0.0802%" height="15" fill="rgb(250,197,2)" fg:x="907" fg:w="1"/><text x="72.9846%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.7346%" y="613" width="0.0802%" height="15" fill="rgb(212,70,42)" fg:x="907" fg:w="1"/><text x="72.9846%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="72.7346%" y="597" width="0.0802%" height="15" fill="rgb(227,213,9)" fg:x="907" fg:w="1"/><text x="72.9846%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="72.7346%" y="581" width="0.0802%" height="15" fill="rgb(245,99,25)" fg:x="907" fg:w="1"/><text x="72.9846%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.7346%" y="565" width="0.0802%" height="15" fill="rgb(250,82,29)" fg:x="907" fg:w="1"/><text x="72.9846%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.7346%" y="549" width="0.0802%" height="15" fill="rgb(241,226,54)" fg:x="907" fg:w="1"/><text x="72.9846%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7346%" y="533" width="0.0802%" height="15" fill="rgb(221,99,41)" fg:x="907" fg:w="1"/><text x="72.9846%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.7346%" y="517" width="0.0802%" height="15" fill="rgb(213,90,21)" fg:x="907" fg:w="1"/><text x="72.9846%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7346%" y="501" width="0.0802%" height="15" fill="rgb(205,208,24)" fg:x="907" fg:w="1"/><text x="72.9846%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7346%" y="485" width="0.0802%" height="15" fill="rgb(246,31,12)" fg:x="907" fg:w="1"/><text x="72.9846%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7346%" y="469" width="0.0802%" height="15" fill="rgb(213,154,6)" fg:x="907" fg:w="1"/><text x="72.9846%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="72.8148%" y="709" width="0.0802%" height="15" fill="rgb(222,163,29)" fg:x="908" fg:w="1"/><text x="73.0648%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8148%" y="693" width="0.0802%" height="15" fill="rgb(227,201,8)" fg:x="908" fg:w="1"/><text x="73.0648%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="72.8949%" y="693" width="0.0802%" height="15" fill="rgb(233,9,32)" fg:x="909" fg:w="1"/><text x="73.1449%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="72.8949%" y="677" width="0.0802%" height="15" fill="rgb(217,54,24)" fg:x="909" fg:w="1"/><text x="73.1449%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="72.8949%" y="661" width="0.0802%" height="15" fill="rgb(235,192,0)" fg:x="909" fg:w="1"/><text x="73.1449%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="72.8949%" y="645" width="0.0802%" height="15" fill="rgb(235,45,9)" fg:x="909" fg:w="1"/><text x="73.1449%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.8949%" y="629" width="0.0802%" height="15" fill="rgb(246,42,40)" fg:x="909" fg:w="1"/><text x="73.1449%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.8949%" y="613" width="0.0802%" height="15" fill="rgb(248,111,24)" fg:x="909" fg:w="1"/><text x="73.1449%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.8949%" y="597" width="0.0802%" height="15" fill="rgb(249,65,22)" fg:x="909" fg:w="1"/><text x="73.1449%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.8949%" y="581" width="0.0802%" height="15" fill="rgb(238,111,51)" fg:x="909" fg:w="1"/><text x="73.1449%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.8949%" y="565" width="0.0802%" height="15" fill="rgb(250,118,22)" fg:x="909" fg:w="1"/><text x="73.1449%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.8949%" y="549" width="0.0802%" height="15" fill="rgb(234,84,26)" fg:x="909" fg:w="1"/><text x="73.1449%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.8949%" y="533" width="0.0802%" height="15" fill="rgb(243,172,12)" fg:x="909" fg:w="1"/><text x="73.1449%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.8949%" y="517" width="0.0802%" height="15" fill="rgb(236,150,49)" fg:x="909" fg:w="1"/><text x="73.1449%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.8949%" y="501" width="0.0802%" height="15" fill="rgb(225,197,26)" fg:x="909" fg:w="1"/><text x="73.1449%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.8949%" y="485" width="0.0802%" height="15" fill="rgb(214,17,42)" fg:x="909" fg:w="1"/><text x="73.1449%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.8949%" y="469" width="0.0802%" height="15" fill="rgb(224,165,40)" fg:x="909" fg:w="1"/><text x="73.1449%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.9751%" y="613" width="0.0802%" height="15" fill="rgb(246,100,4)" fg:x="910" fg:w="1"/><text x="73.2251%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="72.9751%" y="661" width="0.1604%" height="15" fill="rgb(222,103,0)" fg:x="910" fg:w="2"/><text x="73.2251%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="72.9751%" y="645" width="0.1604%" height="15" fill="rgb(227,189,26)" fg:x="910" fg:w="2"/><text x="73.2251%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="72.9751%" y="629" width="0.1604%" height="15" fill="rgb(214,202,17)" fg:x="910" fg:w="2"/><text x="73.2251%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.0553%" y="613" width="0.0802%" height="15" fill="rgb(229,111,3)" fg:x="911" fg:w="1"/><text x="73.3053%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.0553%" y="597" width="0.0802%" height="15" fill="rgb(229,172,15)" fg:x="911" fg:w="1"/><text x="73.3053%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0553%" y="581" width="0.0802%" height="15" fill="rgb(230,224,35)" fg:x="911" fg:w="1"/><text x="73.3053%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0553%" y="565" width="0.0802%" height="15" fill="rgb(251,141,6)" fg:x="911" fg:w="1"/><text x="73.3053%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0553%" y="549" width="0.0802%" height="15" fill="rgb(225,208,6)" fg:x="911" fg:w="1"/><text x="73.3053%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0553%" y="533" width="0.0802%" height="15" fill="rgb(246,181,16)" fg:x="911" fg:w="1"/><text x="73.3053%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0553%" y="517" width="0.0802%" height="15" fill="rgb(227,129,36)" fg:x="911" fg:w="1"/><text x="73.3053%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0553%" y="501" width="0.0802%" height="15" fill="rgb(248,117,24)" fg:x="911" fg:w="1"/><text x="73.3053%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0553%" y="485" width="0.0802%" height="15" fill="rgb(214,185,35)" fg:x="911" fg:w="1"/><text x="73.3053%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.0553%" y="469" width="0.0802%" height="15" fill="rgb(236,150,34)" fg:x="911" fg:w="1"/><text x="73.3053%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.0553%" y="453" width="0.0802%" height="15" fill="rgb(243,228,27)" fg:x="911" fg:w="1"/><text x="73.3053%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.0553%" y="437" width="0.0802%" height="15" fill="rgb(245,77,44)" fg:x="911" fg:w="1"/><text x="73.3053%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0553%" y="421" width="0.0802%" height="15" fill="rgb(235,214,42)" fg:x="911" fg:w="1"/><text x="73.3053%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0553%" y="405" width="0.0802%" height="15" fill="rgb(221,74,3)" fg:x="911" fg:w="1"/><text x="73.3053%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.0553%" y="389" width="0.0802%" height="15" fill="rgb(206,121,29)" fg:x="911" fg:w="1"/><text x="73.3053%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.0553%" y="373" width="0.0802%" height="15" fill="rgb(249,131,53)" fg:x="911" fg:w="1"/><text x="73.3053%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.0553%" y="357" width="0.0802%" height="15" fill="rgb(236,170,29)" fg:x="911" fg:w="1"/><text x="73.3053%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.0553%" y="341" width="0.0802%" height="15" fill="rgb(247,96,15)" fg:x="911" fg:w="1"/><text x="73.3053%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0553%" y="325" width="0.0802%" height="15" fill="rgb(211,210,7)" fg:x="911" fg:w="1"/><text x="73.3053%" y="335.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="72.8949%" y="709" width="0.3208%" height="15" fill="rgb(240,88,50)" fg:x="909" fg:w="4"/><text x="73.1449%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="72.9751%" y="693" width="0.2406%" height="15" fill="rgb(209,229,26)" fg:x="910" fg:w="3"/><text x="73.2251%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="72.9751%" y="677" width="0.2406%" height="15" fill="rgb(210,68,23)" fg:x="910" fg:w="3"/><text x="73.2251%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="73.1355%" y="661" width="0.0802%" height="15" fill="rgb(229,180,13)" fg:x="912" fg:w="1"/><text x="73.3855%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.1355%" y="645" width="0.0802%" height="15" fill="rgb(236,53,44)" fg:x="912" fg:w="1"/><text x="73.3855%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.1355%" y="629" width="0.0802%" height="15" fill="rgb(244,214,29)" fg:x="912" fg:w="1"/><text x="73.3855%" y="639.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="73.2157%" y="709" width="0.0802%" height="15" fill="rgb(220,75,29)" fg:x="913" fg:w="1"/><text x="73.4657%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.2157%" y="693" width="0.0802%" height="15" fill="rgb(214,183,37)" fg:x="913" fg:w="1"/><text x="73.4657%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="73.2157%" y="677" width="0.0802%" height="15" fill="rgb(239,117,29)" fg:x="913" fg:w="1"/><text x="73.4657%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.2157%" y="661" width="0.0802%" height="15" fill="rgb(237,171,35)" fg:x="913" fg:w="1"/><text x="73.4657%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.2157%" y="645" width="0.0802%" height="15" fill="rgb(229,178,53)" fg:x="913" fg:w="1"/><text x="73.4657%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.2157%" y="629" width="0.0802%" height="15" fill="rgb(210,102,19)" fg:x="913" fg:w="1"/><text x="73.4657%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.2157%" y="613" width="0.0802%" height="15" fill="rgb(235,127,22)" fg:x="913" fg:w="1"/><text x="73.4657%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2157%" y="597" width="0.0802%" height="15" fill="rgb(244,31,31)" fg:x="913" fg:w="1"/><text x="73.4657%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2157%" y="581" width="0.0802%" height="15" fill="rgb(231,43,21)" fg:x="913" fg:w="1"/><text x="73.4657%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2157%" y="565" width="0.0802%" height="15" fill="rgb(217,131,35)" fg:x="913" fg:w="1"/><text x="73.4657%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2157%" y="549" width="0.0802%" height="15" fill="rgb(221,149,4)" fg:x="913" fg:w="1"/><text x="73.4657%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.2157%" y="533" width="0.0802%" height="15" fill="rgb(232,170,28)" fg:x="913" fg:w="1"/><text x="73.4657%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2157%" y="517" width="0.0802%" height="15" fill="rgb(238,56,10)" fg:x="913" fg:w="1"/><text x="73.4657%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2157%" y="501" width="0.0802%" height="15" fill="rgb(235,196,14)" fg:x="913" fg:w="1"/><text x="73.4657%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2157%" y="485" width="0.0802%" height="15" fill="rgb(216,45,48)" fg:x="913" fg:w="1"/><text x="73.4657%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2157%" y="469" width="0.0802%" height="15" fill="rgb(238,213,17)" fg:x="913" fg:w="1"/><text x="73.4657%" y="479.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="73.2959%" y="709" width="0.0802%" height="15" fill="rgb(212,13,2)" fg:x="914" fg:w="1"/><text x="73.5459%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="73.2959%" y="693" width="0.0802%" height="15" fill="rgb(240,114,20)" fg:x="914" fg:w="1"/><text x="73.5459%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="73.2959%" y="677" width="0.0802%" height="15" fill="rgb(228,41,40)" fg:x="914" fg:w="1"/><text x="73.5459%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.2959%" y="661" width="0.0802%" height="15" fill="rgb(244,132,35)" fg:x="914" fg:w="1"/><text x="73.5459%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.2959%" y="645" width="0.0802%" height="15" fill="rgb(253,189,4)" fg:x="914" fg:w="1"/><text x="73.5459%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.2959%" y="629" width="0.0802%" height="15" fill="rgb(224,37,19)" fg:x="914" fg:w="1"/><text x="73.5459%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.3761%" y="629" width="0.0802%" height="15" fill="rgb(235,223,18)" fg:x="915" fg:w="1"/><text x="73.6261%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.3761%" y="613" width="0.0802%" height="15" fill="rgb(235,163,25)" fg:x="915" fg:w="1"/><text x="73.6261%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.3761%" y="597" width="0.0802%" height="15" fill="rgb(217,145,28)" fg:x="915" fg:w="1"/><text x="73.6261%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.3761%" y="581" width="0.0802%" height="15" fill="rgb(223,223,32)" fg:x="915" fg:w="1"/><text x="73.6261%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.3761%" y="565" width="0.0802%" height="15" fill="rgb(227,189,39)" fg:x="915" fg:w="1"/><text x="73.6261%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.3761%" y="549" width="0.0802%" height="15" fill="rgb(248,10,22)" fg:x="915" fg:w="1"/><text x="73.6261%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.3761%" y="533" width="0.0802%" height="15" fill="rgb(248,46,39)" fg:x="915" fg:w="1"/><text x="73.6261%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.3761%" y="517" width="0.0802%" height="15" fill="rgb(248,113,48)" fg:x="915" fg:w="1"/><text x="73.6261%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.3761%" y="501" width="0.0802%" height="15" fill="rgb(245,16,25)" fg:x="915" fg:w="1"/><text x="73.6261%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (18 samples, 1.44%)</title><rect x="72.0930%" y="725" width="1.4435%" height="15" fill="rgb(249,152,16)" fg:x="899" fg:w="18"/><text x="72.3430%" y="735.50"></text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="73.3761%" y="709" width="0.1604%" height="15" fill="rgb(250,16,1)" fg:x="915" fg:w="2"/><text x="73.6261%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="73.3761%" y="693" width="0.1604%" height="15" fill="rgb(249,138,3)" fg:x="915" fg:w="2"/><text x="73.6261%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="73.3761%" y="677" width="0.1604%" height="15" fill="rgb(227,71,41)" fg:x="915" fg:w="2"/><text x="73.6261%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="73.3761%" y="661" width="0.1604%" height="15" fill="rgb(209,184,23)" fg:x="915" fg:w="2"/><text x="73.6261%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="73.3761%" y="645" width="0.1604%" height="15" fill="rgb(223,215,31)" fg:x="915" fg:w="2"/><text x="73.6261%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="73.4563%" y="629" width="0.0802%" height="15" fill="rgb(210,146,28)" fg:x="916" fg:w="1"/><text x="73.7063%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="73.4563%" y="613" width="0.0802%" height="15" fill="rgb(209,183,41)" fg:x="916" fg:w="1"/><text x="73.7063%" y="623.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="73.5365%" y="661" width="0.0802%" height="15" fill="rgb(209,224,45)" fg:x="917" fg:w="1"/><text x="73.7865%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5365%" y="645" width="0.0802%" height="15" fill="rgb(224,209,51)" fg:x="917" fg:w="1"/><text x="73.7865%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.5365%" y="629" width="0.0802%" height="15" fill="rgb(223,17,39)" fg:x="917" fg:w="1"/><text x="73.7865%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.5365%" y="613" width="0.0802%" height="15" fill="rgb(234,204,37)" fg:x="917" fg:w="1"/><text x="73.7865%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (35 samples, 2.81%)</title><rect x="70.8901%" y="741" width="2.8067%" height="15" fill="rgb(236,120,5)" fg:x="884" fg:w="35"/><text x="71.1401%" y="751.50">&lt;t..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="73.5365%" y="725" width="0.1604%" height="15" fill="rgb(248,97,27)" fg:x="917" fg:w="2"/><text x="73.7865%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="73.5365%" y="709" width="0.1604%" height="15" fill="rgb(240,66,17)" fg:x="917" fg:w="2"/><text x="73.7865%" y="719.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="73.5365%" y="693" width="0.1604%" height="15" fill="rgb(210,79,3)" fg:x="917" fg:w="2"/><text x="73.7865%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="73.5365%" y="677" width="0.1604%" height="15" fill="rgb(214,176,27)" fg:x="917" fg:w="2"/><text x="73.7865%" y="687.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="73.6167%" y="661" width="0.0802%" height="15" fill="rgb(235,185,3)" fg:x="918" fg:w="1"/><text x="73.8667%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="73.6167%" y="645" width="0.0802%" height="15" fill="rgb(227,24,12)" fg:x="918" fg:w="1"/><text x="73.8667%" y="655.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6167%" y="629" width="0.0802%" height="15" fill="rgb(252,169,48)" fg:x="918" fg:w="1"/><text x="73.8667%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.6167%" y="613" width="0.0802%" height="15" fill="rgb(212,65,1)" fg:x="918" fg:w="1"/><text x="73.8667%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6167%" y="597" width="0.0802%" height="15" fill="rgb(242,39,24)" fg:x="918" fg:w="1"/><text x="73.8667%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6167%" y="581" width="0.0802%" height="15" fill="rgb(249,32,23)" fg:x="918" fg:w="1"/><text x="73.8667%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6167%" y="565" width="0.0802%" height="15" fill="rgb(251,195,23)" fg:x="918" fg:w="1"/><text x="73.8667%" y="575.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="73.6969%" y="741" width="0.0802%" height="15" fill="rgb(236,174,8)" fg:x="919" fg:w="1"/><text x="73.9469%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.6969%" y="725" width="0.0802%" height="15" fill="rgb(220,197,8)" fg:x="919" fg:w="1"/><text x="73.9469%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.7771%" y="709" width="0.0802%" height="15" fill="rgb(240,108,37)" fg:x="920" fg:w="1"/><text x="74.0271%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7771%" y="693" width="0.0802%" height="15" fill="rgb(232,176,24)" fg:x="920" fg:w="1"/><text x="74.0271%" y="703.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="74.0176%" y="661" width="0.1604%" height="15" fill="rgb(243,35,29)" fg:x="923" fg:w="2"/><text x="74.2676%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="74.0176%" y="645" width="0.1604%" height="15" fill="rgb(210,37,18)" fg:x="923" fg:w="2"/><text x="74.2676%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="74.0176%" y="629" width="0.1604%" height="15" fill="rgb(224,184,40)" fg:x="923" fg:w="2"/><text x="74.2676%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="74.0176%" y="613" width="0.1604%" height="15" fill="rgb(236,39,29)" fg:x="923" fg:w="2"/><text x="74.2676%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.0978%" y="597" width="0.0802%" height="15" fill="rgb(232,48,39)" fg:x="924" fg:w="1"/><text x="74.3478%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.0978%" y="581" width="0.0802%" height="15" fill="rgb(236,34,42)" fg:x="924" fg:w="1"/><text x="74.3478%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2582%" y="613" width="0.0802%" height="15" fill="rgb(243,106,37)" fg:x="926" fg:w="1"/><text x="74.5082%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2582%" y="597" width="0.0802%" height="15" fill="rgb(218,96,6)" fg:x="926" fg:w="1"/><text x="74.5082%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2582%" y="581" width="0.0802%" height="15" fill="rgb(235,130,12)" fg:x="926" fg:w="1"/><text x="74.5082%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.2582%" y="565" width="0.0802%" height="15" fill="rgb(231,95,0)" fg:x="926" fg:w="1"/><text x="74.5082%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.2582%" y="549" width="0.0802%" height="15" fill="rgb(228,12,23)" fg:x="926" fg:w="1"/><text x="74.5082%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.2582%" y="533" width="0.0802%" height="15" fill="rgb(216,12,1)" fg:x="926" fg:w="1"/><text x="74.5082%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="74.0176%" y="677" width="0.4010%" height="15" fill="rgb(219,59,3)" fg:x="923" fg:w="5"/><text x="74.2676%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="74.1780%" y="661" width="0.2406%" height="15" fill="rgb(215,208,46)" fg:x="925" fg:w="3"/><text x="74.4280%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="74.1780%" y="645" width="0.2406%" height="15" fill="rgb(254,224,29)" fg:x="925" fg:w="3"/><text x="74.4280%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.2582%" y="629" width="0.1604%" height="15" fill="rgb(232,14,29)" fg:x="926" fg:w="2"/><text x="74.5082%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.3384%" y="613" width="0.0802%" height="15" fill="rgb(208,45,52)" fg:x="927" fg:w="1"/><text x="74.5884%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.3384%" y="597" width="0.0802%" height="15" fill="rgb(234,191,28)" fg:x="927" fg:w="1"/><text x="74.5884%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="74.3384%" y="581" width="0.0802%" height="15" fill="rgb(244,67,43)" fg:x="927" fg:w="1"/><text x="74.5884%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4186%" y="677" width="0.0802%" height="15" fill="rgb(236,189,24)" fg:x="928" fg:w="1"/><text x="74.6686%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.4186%" y="661" width="0.0802%" height="15" fill="rgb(239,214,33)" fg:x="928" fg:w="1"/><text x="74.6686%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.4186%" y="645" width="0.0802%" height="15" fill="rgb(226,176,41)" fg:x="928" fg:w="1"/><text x="74.6686%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.4988%" y="645" width="0.0802%" height="15" fill="rgb(248,47,8)" fg:x="929" fg:w="1"/><text x="74.7488%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="74.5790%" y="565" width="0.0802%" height="15" fill="rgb(218,81,44)" fg:x="930" fg:w="1"/><text x="74.8290%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.5790%" y="549" width="0.0802%" height="15" fill="rgb(213,98,6)" fg:x="930" fg:w="1"/><text x="74.8290%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5790%" y="533" width="0.0802%" height="15" fill="rgb(222,85,22)" fg:x="930" fg:w="1"/><text x="74.8290%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.6592%" y="533" width="0.0802%" height="15" fill="rgb(239,46,39)" fg:x="931" fg:w="1"/><text x="74.9092%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.6592%" y="517" width="0.0802%" height="15" fill="rgb(237,12,29)" fg:x="931" fg:w="1"/><text x="74.9092%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.5790%" y="645" width="0.2406%" height="15" fill="rgb(214,77,8)" fg:x="930" fg:w="3"/><text x="74.8290%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="74.5790%" y="629" width="0.2406%" height="15" fill="rgb(217,168,37)" fg:x="930" fg:w="3"/><text x="74.8290%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.5790%" y="613" width="0.2406%" height="15" fill="rgb(221,217,23)" fg:x="930" fg:w="3"/><text x="74.8290%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.5790%" y="597" width="0.2406%" height="15" fill="rgb(243,229,36)" fg:x="930" fg:w="3"/><text x="74.8290%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.5790%" y="581" width="0.2406%" height="15" fill="rgb(251,163,40)" fg:x="930" fg:w="3"/><text x="74.8290%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.6592%" y="565" width="0.1604%" height="15" fill="rgb(237,222,12)" fg:x="931" fg:w="2"/><text x="74.9092%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.6592%" y="549" width="0.1604%" height="15" fill="rgb(248,132,6)" fg:x="931" fg:w="2"/><text x="74.9092%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.7394%" y="533" width="0.0802%" height="15" fill="rgb(227,167,50)" fg:x="932" fg:w="1"/><text x="74.9894%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.7394%" y="517" width="0.0802%" height="15" fill="rgb(242,84,37)" fg:x="932" fg:w="1"/><text x="74.9894%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.48%)</title><rect x="74.4988%" y="661" width="0.4812%" height="15" fill="rgb(212,4,50)" fg:x="929" fg:w="6"/><text x="74.7488%" y="671.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="74.8196%" y="645" width="0.1604%" height="15" fill="rgb(230,228,32)" fg:x="933" fg:w="2"/><text x="75.0696%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="74.8196%" y="629" width="0.1604%" height="15" fill="rgb(248,217,23)" fg:x="933" fg:w="2"/><text x="75.0696%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.8998%" y="613" width="0.0802%" height="15" fill="rgb(238,197,32)" fg:x="934" fg:w="1"/><text x="75.1498%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.8998%" y="597" width="0.0802%" height="15" fill="rgb(236,106,1)" fg:x="934" fg:w="1"/><text x="75.1498%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.9800%" y="629" width="0.0802%" height="15" fill="rgb(219,228,13)" fg:x="935" fg:w="1"/><text x="75.2300%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1403%" y="549" width="0.0802%" height="15" fill="rgb(238,30,35)" fg:x="937" fg:w="1"/><text x="75.3903%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1403%" y="533" width="0.0802%" height="15" fill="rgb(236,70,23)" fg:x="937" fg:w="1"/><text x="75.3903%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="75.1403%" y="517" width="0.0802%" height="15" fill="rgb(249,104,48)" fg:x="937" fg:w="1"/><text x="75.3903%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="74.9800%" y="661" width="0.3208%" height="15" fill="rgb(254,117,50)" fg:x="935" fg:w="4"/><text x="75.2300%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="74.9800%" y="645" width="0.3208%" height="15" fill="rgb(223,152,4)" fg:x="935" fg:w="4"/><text x="75.2300%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="75.0601%" y="629" width="0.2406%" height="15" fill="rgb(245,6,2)" fg:x="936" fg:w="3"/><text x="75.3101%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="75.1403%" y="613" width="0.1604%" height="15" fill="rgb(249,150,24)" fg:x="937" fg:w="2"/><text x="75.3903%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.1403%" y="597" width="0.1604%" height="15" fill="rgb(228,185,42)" fg:x="937" fg:w="2"/><text x="75.3903%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.1403%" y="581" width="0.1604%" height="15" fill="rgb(226,39,33)" fg:x="937" fg:w="2"/><text x="75.3903%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.1403%" y="565" width="0.1604%" height="15" fill="rgb(221,166,19)" fg:x="937" fg:w="2"/><text x="75.3903%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.2205%" y="549" width="0.0802%" height="15" fill="rgb(209,109,2)" fg:x="938" fg:w="1"/><text x="75.4705%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.2205%" y="533" width="0.0802%" height="15" fill="rgb(252,216,26)" fg:x="938" fg:w="1"/><text x="75.4705%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.2205%" y="517" width="0.0802%" height="15" fill="rgb(227,173,36)" fg:x="938" fg:w="1"/><text x="75.4705%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2205%" y="501" width="0.0802%" height="15" fill="rgb(209,90,7)" fg:x="938" fg:w="1"/><text x="75.4705%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3007%" y="501" width="0.0802%" height="15" fill="rgb(250,194,11)" fg:x="939" fg:w="1"/><text x="75.5507%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3007%" y="485" width="0.0802%" height="15" fill="rgb(220,72,50)" fg:x="939" fg:w="1"/><text x="75.5507%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3007%" y="469" width="0.0802%" height="15" fill="rgb(222,106,48)" fg:x="939" fg:w="1"/><text x="75.5507%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3007%" y="453" width="0.0802%" height="15" fill="rgb(216,220,45)" fg:x="939" fg:w="1"/><text x="75.5507%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3007%" y="437" width="0.0802%" height="15" fill="rgb(234,112,18)" fg:x="939" fg:w="1"/><text x="75.5507%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3007%" y="421" width="0.0802%" height="15" fill="rgb(206,179,9)" fg:x="939" fg:w="1"/><text x="75.5507%" y="431.50"></text></g><g><title>engine::session::Session::close (22 samples, 1.76%)</title><rect x="73.7771%" y="741" width="1.7642%" height="15" fill="rgb(215,115,40)" fg:x="920" fg:w="22"/><text x="74.0271%" y="751.50"></text></g><g><title>engine::session::Session::save_entity_changes (22 samples, 1.76%)</title><rect x="73.7771%" y="725" width="1.7642%" height="15" fill="rgb(222,69,34)" fg:x="920" fg:w="22"/><text x="74.0271%" y="735.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (21 samples, 1.68%)</title><rect x="73.8573%" y="709" width="1.6840%" height="15" fill="rgb(209,161,10)" fg:x="921" fg:w="21"/><text x="74.1073%" y="719.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (21 samples, 1.68%)</title><rect x="73.8573%" y="693" width="1.6840%" height="15" fill="rgb(217,6,38)" fg:x="921" fg:w="21"/><text x="74.1073%" y="703.50"></text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.04%)</title><rect x="74.4988%" y="677" width="1.0425%" height="15" fill="rgb(229,229,48)" fg:x="929" fg:w="13"/><text x="74.7488%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="75.3007%" y="661" width="0.2406%" height="15" fill="rgb(225,21,28)" fg:x="939" fg:w="3"/><text x="75.5507%" y="671.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="75.3007%" y="645" width="0.2406%" height="15" fill="rgb(206,33,13)" fg:x="939" fg:w="3"/><text x="75.5507%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.3007%" y="629" width="0.2406%" height="15" fill="rgb(242,178,17)" fg:x="939" fg:w="3"/><text x="75.5507%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.3007%" y="613" width="0.2406%" height="15" fill="rgb(220,162,5)" fg:x="939" fg:w="3"/><text x="75.5507%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.3007%" y="597" width="0.2406%" height="15" fill="rgb(210,33,43)" fg:x="939" fg:w="3"/><text x="75.5507%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.3007%" y="581" width="0.2406%" height="15" fill="rgb(216,116,54)" fg:x="939" fg:w="3"/><text x="75.5507%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.3007%" y="565" width="0.2406%" height="15" fill="rgb(249,92,24)" fg:x="939" fg:w="3"/><text x="75.5507%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.3007%" y="549" width="0.2406%" height="15" fill="rgb(231,189,14)" fg:x="939" fg:w="3"/><text x="75.5507%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.3007%" y="533" width="0.2406%" height="15" fill="rgb(230,8,41)" fg:x="939" fg:w="3"/><text x="75.5507%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.3007%" y="517" width="0.2406%" height="15" fill="rgb(249,7,27)" fg:x="939" fg:w="3"/><text x="75.5507%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.3809%" y="501" width="0.1604%" height="15" fill="rgb(232,86,5)" fg:x="940" fg:w="2"/><text x="75.6309%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4611%" y="485" width="0.0802%" height="15" fill="rgb(224,175,18)" fg:x="941" fg:w="1"/><text x="75.7111%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="75.4611%" y="469" width="0.0802%" height="15" fill="rgb(220,129,12)" fg:x="941" fg:w="1"/><text x="75.7111%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5413%" y="581" width="0.0802%" height="15" fill="rgb(210,19,36)" fg:x="942" fg:w="1"/><text x="75.7913%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6215%" y="581" width="0.0802%" height="15" fill="rgb(219,96,14)" fg:x="943" fg:w="1"/><text x="75.8715%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6215%" y="565" width="0.0802%" height="15" fill="rgb(249,106,1)" fg:x="943" fg:w="1"/><text x="75.8715%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.7017%" y="581" width="0.0802%" height="15" fill="rgb(249,155,20)" fg:x="944" fg:w="1"/><text x="75.9517%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7017%" y="565" width="0.0802%" height="15" fill="rgb(244,168,9)" fg:x="944" fg:w="1"/><text x="75.9517%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7017%" y="549" width="0.0802%" height="15" fill="rgb(216,23,50)" fg:x="944" fg:w="1"/><text x="75.9517%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7017%" y="533" width="0.0802%" height="15" fill="rgb(224,219,20)" fg:x="944" fg:w="1"/><text x="75.9517%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7017%" y="517" width="0.0802%" height="15" fill="rgb(222,156,15)" fg:x="944" fg:w="1"/><text x="75.9517%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.7017%" y="501" width="0.0802%" height="15" fill="rgb(231,97,17)" fg:x="944" fg:w="1"/><text x="75.9517%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.7017%" y="485" width="0.0802%" height="15" fill="rgb(218,70,48)" fg:x="944" fg:w="1"/><text x="75.9517%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="75.5413%" y="597" width="0.3208%" height="15" fill="rgb(212,196,52)" fg:x="942" fg:w="4"/><text x="75.7913%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7819%" y="581" width="0.0802%" height="15" fill="rgb(243,203,18)" fg:x="945" fg:w="1"/><text x="76.0319%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="75.7819%" y="565" width="0.0802%" height="15" fill="rgb(252,125,41)" fg:x="945" fg:w="1"/><text x="76.0319%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.7819%" y="549" width="0.0802%" height="15" fill="rgb(223,180,33)" fg:x="945" fg:w="1"/><text x="76.0319%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.7819%" y="533" width="0.0802%" height="15" fill="rgb(254,159,46)" fg:x="945" fg:w="1"/><text x="76.0319%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.7819%" y="517" width="0.0802%" height="15" fill="rgb(254,38,10)" fg:x="945" fg:w="1"/><text x="76.0319%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.9423%" y="501" width="0.0802%" height="15" fill="rgb(208,217,32)" fg:x="947" fg:w="1"/><text x="76.1923%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.9423%" y="517" width="0.1604%" height="15" fill="rgb(221,120,13)" fg:x="947" fg:w="2"/><text x="76.1923%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.0225%" y="501" width="0.0802%" height="15" fill="rgb(246,54,52)" fg:x="948" fg:w="1"/><text x="76.2725%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.0225%" y="485" width="0.0802%" height="15" fill="rgb(242,34,25)" fg:x="948" fg:w="1"/><text x="76.2725%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.0225%" y="469" width="0.0802%" height="15" fill="rgb(247,209,9)" fg:x="948" fg:w="1"/><text x="76.2725%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.0225%" y="453" width="0.0802%" height="15" fill="rgb(228,71,26)" fg:x="948" fg:w="1"/><text x="76.2725%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.0225%" y="437" width="0.0802%" height="15" fill="rgb(222,145,49)" fg:x="948" fg:w="1"/><text x="76.2725%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.0225%" y="421" width="0.0802%" height="15" fill="rgb(218,121,17)" fg:x="948" fg:w="1"/><text x="76.2725%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.0225%" y="405" width="0.0802%" height="15" fill="rgb(244,50,7)" fg:x="948" fg:w="1"/><text x="76.2725%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.0225%" y="389" width="0.0802%" height="15" fill="rgb(246,229,37)" fg:x="948" fg:w="1"/><text x="76.2725%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.0225%" y="373" width="0.0802%" height="15" fill="rgb(225,18,5)" fg:x="948" fg:w="1"/><text x="76.2725%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.0225%" y="357" width="0.0802%" height="15" fill="rgb(213,204,8)" fg:x="948" fg:w="1"/><text x="76.2725%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.0225%" y="341" width="0.0802%" height="15" fill="rgb(238,103,6)" fg:x="948" fg:w="1"/><text x="76.2725%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0225%" y="325" width="0.0802%" height="15" fill="rgb(222,25,35)" fg:x="948" fg:w="1"/><text x="76.2725%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="75.8621%" y="565" width="0.3208%" height="15" fill="rgb(213,203,35)" fg:x="946" fg:w="4"/><text x="76.1121%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="75.8621%" y="549" width="0.3208%" height="15" fill="rgb(221,79,53)" fg:x="946" fg:w="4"/><text x="76.1121%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="75.8621%" y="533" width="0.3208%" height="15" fill="rgb(243,200,35)" fg:x="946" fg:w="4"/><text x="76.1121%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.1026%" y="517" width="0.0802%" height="15" fill="rgb(248,60,25)" fg:x="949" fg:w="1"/><text x="76.3526%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.1026%" y="501" width="0.0802%" height="15" fill="rgb(227,53,46)" fg:x="949" fg:w="1"/><text x="76.3526%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.1026%" y="485" width="0.0802%" height="15" fill="rgb(216,120,32)" fg:x="949" fg:w="1"/><text x="76.3526%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.1026%" y="469" width="0.0802%" height="15" fill="rgb(220,134,1)" fg:x="949" fg:w="1"/><text x="76.3526%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.1026%" y="453" width="0.0802%" height="15" fill="rgb(237,168,5)" fg:x="949" fg:w="1"/><text x="76.3526%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.1026%" y="437" width="0.0802%" height="15" fill="rgb(231,100,33)" fg:x="949" fg:w="1"/><text x="76.3526%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.1026%" y="421" width="0.0802%" height="15" fill="rgb(236,177,47)" fg:x="949" fg:w="1"/><text x="76.3526%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.1026%" y="405" width="0.0802%" height="15" fill="rgb(235,7,49)" fg:x="949" fg:w="1"/><text x="76.3526%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.1026%" y="389" width="0.0802%" height="15" fill="rgb(232,119,22)" fg:x="949" fg:w="1"/><text x="76.3526%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.1026%" y="373" width="0.0802%" height="15" fill="rgb(254,73,53)" fg:x="949" fg:w="1"/><text x="76.3526%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.1026%" y="357" width="0.0802%" height="15" fill="rgb(251,35,20)" fg:x="949" fg:w="1"/><text x="76.3526%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1026%" y="341" width="0.0802%" height="15" fill="rgb(241,119,20)" fg:x="949" fg:w="1"/><text x="76.3526%" y="351.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (5 samples, 0.40%)</title><rect x="75.8621%" y="597" width="0.4010%" height="15" fill="rgb(207,102,14)" fg:x="946" fg:w="5"/><text x="76.1121%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (5 samples, 0.40%)</title><rect x="75.8621%" y="581" width="0.4010%" height="15" fill="rgb(248,201,50)" fg:x="946" fg:w="5"/><text x="76.1121%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.1828%" y="565" width="0.0802%" height="15" fill="rgb(222,185,44)" fg:x="950" fg:w="1"/><text x="76.4328%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.1828%" y="549" width="0.0802%" height="15" fill="rgb(218,107,18)" fg:x="950" fg:w="1"/><text x="76.4328%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.1828%" y="533" width="0.0802%" height="15" fill="rgb(237,177,39)" fg:x="950" fg:w="1"/><text x="76.4328%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.1828%" y="517" width="0.0802%" height="15" fill="rgb(246,69,6)" fg:x="950" fg:w="1"/><text x="76.4328%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.1828%" y="501" width="0.0802%" height="15" fill="rgb(234,208,37)" fg:x="950" fg:w="1"/><text x="76.4328%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="76.1828%" y="485" width="0.0802%" height="15" fill="rgb(225,4,6)" fg:x="950" fg:w="1"/><text x="76.4328%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.1828%" y="469" width="0.0802%" height="15" fill="rgb(233,45,0)" fg:x="950" fg:w="1"/><text x="76.4328%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2630%" y="581" width="0.0802%" height="15" fill="rgb(226,136,5)" fg:x="951" fg:w="1"/><text x="76.5130%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2630%" y="565" width="0.0802%" height="15" fill="rgb(211,91,47)" fg:x="951" fg:w="1"/><text x="76.5130%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.2630%" y="549" width="0.0802%" height="15" fill="rgb(242,88,51)" fg:x="951" fg:w="1"/><text x="76.5130%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.2630%" y="533" width="0.0802%" height="15" fill="rgb(230,91,28)" fg:x="951" fg:w="1"/><text x="76.5130%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.2630%" y="517" width="0.0802%" height="15" fill="rgb(254,186,29)" fg:x="951" fg:w="1"/><text x="76.5130%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.2630%" y="501" width="0.0802%" height="15" fill="rgb(238,6,4)" fg:x="951" fg:w="1"/><text x="76.5130%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.2630%" y="485" width="0.0802%" height="15" fill="rgb(221,151,16)" fg:x="951" fg:w="1"/><text x="76.5130%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.2630%" y="469" width="0.0802%" height="15" fill="rgb(251,143,52)" fg:x="951" fg:w="1"/><text x="76.5130%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.2630%" y="453" width="0.0802%" height="15" fill="rgb(206,90,15)" fg:x="951" fg:w="1"/><text x="76.5130%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.2630%" y="437" width="0.0802%" height="15" fill="rgb(218,35,8)" fg:x="951" fg:w="1"/><text x="76.5130%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.2630%" y="421" width="0.0802%" height="15" fill="rgb(239,215,6)" fg:x="951" fg:w="1"/><text x="76.5130%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2630%" y="405" width="0.0802%" height="15" fill="rgb(245,116,39)" fg:x="951" fg:w="1"/><text x="76.5130%" y="415.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (2 samples, 0.16%)</title><rect x="76.2630%" y="597" width="0.1604%" height="15" fill="rgb(242,65,28)" fg:x="951" fg:w="2"/><text x="76.5130%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (1 samples, 0.08%)</title><rect x="76.3432%" y="581" width="0.0802%" height="15" fill="rgb(252,132,53)" fg:x="952" fg:w="1"/><text x="76.5932%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="76.3432%" y="565" width="0.0802%" height="15" fill="rgb(224,159,50)" fg:x="952" fg:w="1"/><text x="76.5932%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.3432%" y="549" width="0.0802%" height="15" fill="rgb(224,93,4)" fg:x="952" fg:w="1"/><text x="76.5932%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.3432%" y="533" width="0.0802%" height="15" fill="rgb(208,81,34)" fg:x="952" fg:w="1"/><text x="76.5932%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3432%" y="517" width="0.0802%" height="15" fill="rgb(233,92,54)" fg:x="952" fg:w="1"/><text x="76.5932%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="76.4234%" y="437" width="0.0802%" height="15" fill="rgb(237,21,14)" fg:x="953" fg:w="1"/><text x="76.6734%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="76.4234%" y="421" width="0.0802%" height="15" fill="rgb(249,128,51)" fg:x="953" fg:w="1"/><text x="76.6734%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.4234%" y="405" width="0.0802%" height="15" fill="rgb(223,129,24)" fg:x="953" fg:w="1"/><text x="76.6734%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5838%" y="373" width="0.0802%" height="15" fill="rgb(231,168,25)" fg:x="955" fg:w="1"/><text x="76.8338%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5838%" y="357" width="0.0802%" height="15" fill="rgb(224,39,20)" fg:x="955" fg:w="1"/><text x="76.8338%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5838%" y="341" width="0.0802%" height="15" fill="rgb(225,152,53)" fg:x="955" fg:w="1"/><text x="76.8338%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.5838%" y="389" width="0.1604%" height="15" fill="rgb(252,17,24)" fg:x="955" fg:w="2"/><text x="76.8338%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.6640%" y="373" width="0.0802%" height="15" fill="rgb(250,114,30)" fg:x="956" fg:w="1"/><text x="76.9140%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.6640%" y="357" width="0.0802%" height="15" fill="rgb(229,5,4)" fg:x="956" fg:w="1"/><text x="76.9140%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.6640%" y="341" width="0.0802%" height="15" fill="rgb(225,176,49)" fg:x="956" fg:w="1"/><text x="76.9140%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.6640%" y="325" width="0.0802%" height="15" fill="rgb(224,221,49)" fg:x="956" fg:w="1"/><text x="76.9140%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.6640%" y="309" width="0.0802%" height="15" fill="rgb(253,169,27)" fg:x="956" fg:w="1"/><text x="76.9140%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.6640%" y="293" width="0.0802%" height="15" fill="rgb(211,206,16)" fg:x="956" fg:w="1"/><text x="76.9140%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.6640%" y="277" width="0.0802%" height="15" fill="rgb(244,87,35)" fg:x="956" fg:w="1"/><text x="76.9140%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.6640%" y="261" width="0.0802%" height="15" fill="rgb(246,28,10)" fg:x="956" fg:w="1"/><text x="76.9140%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.6640%" y="245" width="0.0802%" height="15" fill="rgb(229,12,44)" fg:x="956" fg:w="1"/><text x="76.9140%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.6640%" y="229" width="0.0802%" height="15" fill="rgb(210,145,37)" fg:x="956" fg:w="1"/><text x="76.9140%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.6640%" y="213" width="0.0802%" height="15" fill="rgb(227,112,52)" fg:x="956" fg:w="1"/><text x="76.9140%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6640%" y="197" width="0.0802%" height="15" fill="rgb(238,155,34)" fg:x="956" fg:w="1"/><text x="76.9140%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="76.7442%" y="389" width="0.0802%" height="15" fill="rgb(239,226,36)" fg:x="957" fg:w="1"/><text x="76.9942%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.7442%" y="373" width="0.0802%" height="15" fill="rgb(230,16,23)" fg:x="957" fg:w="1"/><text x="76.9942%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.7442%" y="357" width="0.0802%" height="15" fill="rgb(236,171,36)" fg:x="957" fg:w="1"/><text x="76.9942%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.7442%" y="341" width="0.0802%" height="15" fill="rgb(221,22,14)" fg:x="957" fg:w="1"/><text x="76.9942%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.7442%" y="325" width="0.0802%" height="15" fill="rgb(242,43,11)" fg:x="957" fg:w="1"/><text x="76.9942%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.7442%" y="309" width="0.0802%" height="15" fill="rgb(232,69,23)" fg:x="957" fg:w="1"/><text x="76.9942%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.7442%" y="293" width="0.0802%" height="15" fill="rgb(216,180,54)" fg:x="957" fg:w="1"/><text x="76.9942%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7442%" y="277" width="0.0802%" height="15" fill="rgb(216,5,24)" fg:x="957" fg:w="1"/><text x="76.9942%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.40%)</title><rect x="76.5036%" y="437" width="0.4010%" height="15" fill="rgb(225,89,9)" fg:x="954" fg:w="5"/><text x="76.7536%" y="447.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="76.5036%" y="421" width="0.4010%" height="15" fill="rgb(243,75,33)" fg:x="954" fg:w="5"/><text x="76.7536%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="76.5036%" y="405" width="0.4010%" height="15" fill="rgb(247,141,45)" fg:x="954" fg:w="5"/><text x="76.7536%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.8244%" y="389" width="0.0802%" height="15" fill="rgb(232,177,36)" fg:x="958" fg:w="1"/><text x="77.0744%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.8244%" y="373" width="0.0802%" height="15" fill="rgb(219,125,36)" fg:x="958" fg:w="1"/><text x="77.0744%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.8244%" y="357" width="0.0802%" height="15" fill="rgb(227,94,9)" fg:x="958" fg:w="1"/><text x="77.0744%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.8244%" y="341" width="0.0802%" height="15" fill="rgb(240,34,52)" fg:x="958" fg:w="1"/><text x="77.0744%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9046%" y="325" width="0.0802%" height="15" fill="rgb(216,45,12)" fg:x="959" fg:w="1"/><text x="77.1546%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.9046%" y="309" width="0.0802%" height="15" fill="rgb(246,21,19)" fg:x="959" fg:w="1"/><text x="77.1546%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.9046%" y="293" width="0.0802%" height="15" fill="rgb(213,98,42)" fg:x="959" fg:w="1"/><text x="77.1546%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.9046%" y="277" width="0.0802%" height="15" fill="rgb(250,136,47)" fg:x="959" fg:w="1"/><text x="77.1546%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.9046%" y="261" width="0.0802%" height="15" fill="rgb(251,124,27)" fg:x="959" fg:w="1"/><text x="77.1546%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.9046%" y="245" width="0.0802%" height="15" fill="rgb(229,180,14)" fg:x="959" fg:w="1"/><text x="77.1546%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.9046%" y="229" width="0.0802%" height="15" fill="rgb(245,216,25)" fg:x="959" fg:w="1"/><text x="77.1546%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.9046%" y="213" width="0.0802%" height="15" fill="rgb(251,43,5)" fg:x="959" fg:w="1"/><text x="77.1546%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.9046%" y="197" width="0.0802%" height="15" fill="rgb(250,128,24)" fg:x="959" fg:w="1"/><text x="77.1546%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.9046%" y="181" width="0.0802%" height="15" fill="rgb(217,117,27)" fg:x="959" fg:w="1"/><text x="77.1546%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.9046%" y="165" width="0.0802%" height="15" fill="rgb(245,147,4)" fg:x="959" fg:w="1"/><text x="77.1546%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.9046%" y="149" width="0.0802%" height="15" fill="rgb(242,201,35)" fg:x="959" fg:w="1"/><text x="77.1546%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.9046%" y="133" width="0.0802%" height="15" fill="rgb(218,181,1)" fg:x="959" fg:w="1"/><text x="77.1546%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.9046%" y="389" width="0.1604%" height="15" fill="rgb(222,6,29)" fg:x="959" fg:w="2"/><text x="77.1546%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.9046%" y="373" width="0.1604%" height="15" fill="rgb(208,186,3)" fg:x="959" fg:w="2"/><text x="77.1546%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.9046%" y="357" width="0.1604%" height="15" fill="rgb(216,36,26)" fg:x="959" fg:w="2"/><text x="77.1546%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.9046%" y="341" width="0.1604%" height="15" fill="rgb(248,201,23)" fg:x="959" fg:w="2"/><text x="77.1546%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.9848%" y="325" width="0.0802%" height="15" fill="rgb(251,170,31)" fg:x="960" fg:w="1"/><text x="77.2348%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.9848%" y="309" width="0.0802%" height="15" fill="rgb(207,110,25)" fg:x="960" fg:w="1"/><text x="77.2348%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.9848%" y="293" width="0.0802%" height="15" fill="rgb(250,54,15)" fg:x="960" fg:w="1"/><text x="77.2348%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.9848%" y="277" width="0.0802%" height="15" fill="rgb(227,68,33)" fg:x="960" fg:w="1"/><text x="77.2348%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.9848%" y="261" width="0.0802%" height="15" fill="rgb(238,34,41)" fg:x="960" fg:w="1"/><text x="77.2348%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="76.9848%" y="245" width="0.0802%" height="15" fill="rgb(220,11,15)" fg:x="960" fg:w="1"/><text x="77.2348%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.9848%" y="229" width="0.0802%" height="15" fill="rgb(246,111,35)" fg:x="960" fg:w="1"/><text x="77.2348%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="77.0650%" y="389" width="0.0802%" height="15" fill="rgb(209,88,53)" fg:x="961" fg:w="1"/><text x="77.3150%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.0650%" y="373" width="0.0802%" height="15" fill="rgb(231,185,47)" fg:x="961" fg:w="1"/><text x="77.3150%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="76.9046%" y="437" width="0.3208%" height="15" fill="rgb(233,154,1)" fg:x="959" fg:w="4"/><text x="77.1546%" y="447.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="76.9046%" y="421" width="0.3208%" height="15" fill="rgb(225,15,46)" fg:x="959" fg:w="4"/><text x="77.1546%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="76.9046%" y="405" width="0.3208%" height="15" fill="rgb(211,135,41)" fg:x="959" fg:w="4"/><text x="77.1546%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.1451%" y="389" width="0.0802%" height="15" fill="rgb(208,54,0)" fg:x="962" fg:w="1"/><text x="77.3951%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1451%" y="373" width="0.0802%" height="15" fill="rgb(244,136,14)" fg:x="962" fg:w="1"/><text x="77.3951%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.1451%" y="357" width="0.0802%" height="15" fill="rgb(241,56,14)" fg:x="962" fg:w="1"/><text x="77.3951%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1451%" y="341" width="0.0802%" height="15" fill="rgb(205,80,24)" fg:x="962" fg:w="1"/><text x="77.3951%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.1451%" y="325" width="0.0802%" height="15" fill="rgb(220,57,4)" fg:x="962" fg:w="1"/><text x="77.3951%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1451%" y="309" width="0.0802%" height="15" fill="rgb(226,193,50)" fg:x="962" fg:w="1"/><text x="77.3951%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="77.2253%" y="389" width="0.0802%" height="15" fill="rgb(231,168,22)" fg:x="963" fg:w="1"/><text x="77.4753%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="77.2253%" y="373" width="0.0802%" height="15" fill="rgb(254,215,14)" fg:x="963" fg:w="1"/><text x="77.4753%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="77.2253%" y="357" width="0.0802%" height="15" fill="rgb(211,115,16)" fg:x="963" fg:w="1"/><text x="77.4753%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="77.2253%" y="341" width="0.0802%" height="15" fill="rgb(236,210,16)" fg:x="963" fg:w="1"/><text x="77.4753%" y="351.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="77.3055%" y="373" width="0.0802%" height="15" fill="rgb(221,94,12)" fg:x="964" fg:w="1"/><text x="77.5555%" y="383.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="77.3055%" y="357" width="0.0802%" height="15" fill="rgb(235,218,49)" fg:x="964" fg:w="1"/><text x="77.5555%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="77.3055%" y="341" width="0.0802%" height="15" fill="rgb(217,114,14)" fg:x="964" fg:w="1"/><text x="77.5555%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.3055%" y="325" width="0.0802%" height="15" fill="rgb(216,145,22)" fg:x="964" fg:w="1"/><text x="77.5555%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.3055%" y="309" width="0.0802%" height="15" fill="rgb(217,112,39)" fg:x="964" fg:w="1"/><text x="77.5555%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.3055%" y="293" width="0.0802%" height="15" fill="rgb(225,85,32)" fg:x="964" fg:w="1"/><text x="77.5555%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.3055%" y="277" width="0.0802%" height="15" fill="rgb(245,209,47)" fg:x="964" fg:w="1"/><text x="77.5555%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.3055%" y="261" width="0.0802%" height="15" fill="rgb(218,220,15)" fg:x="964" fg:w="1"/><text x="77.5555%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.3055%" y="245" width="0.0802%" height="15" fill="rgb(222,202,31)" fg:x="964" fg:w="1"/><text x="77.5555%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3055%" y="229" width="0.0802%" height="15" fill="rgb(243,203,4)" fg:x="964" fg:w="1"/><text x="77.5555%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="77.3857%" y="293" width="0.0802%" height="15" fill="rgb(237,92,17)" fg:x="965" fg:w="1"/><text x="77.6357%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="77.3857%" y="357" width="0.1604%" height="15" fill="rgb(231,119,7)" fg:x="965" fg:w="2"/><text x="77.6357%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="77.3857%" y="341" width="0.1604%" height="15" fill="rgb(237,82,41)" fg:x="965" fg:w="2"/><text x="77.6357%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="77.3857%" y="325" width="0.1604%" height="15" fill="rgb(226,81,48)" fg:x="965" fg:w="2"/><text x="77.6357%" y="335.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="77.3857%" y="309" width="0.1604%" height="15" fill="rgb(234,70,51)" fg:x="965" fg:w="2"/><text x="77.6357%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="77.4659%" y="293" width="0.0802%" height="15" fill="rgb(251,86,4)" fg:x="966" fg:w="1"/><text x="77.7159%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="77.4659%" y="277" width="0.0802%" height="15" fill="rgb(244,144,28)" fg:x="966" fg:w="1"/><text x="77.7159%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="77.4659%" y="261" width="0.0802%" height="15" fill="rgb(232,161,39)" fg:x="966" fg:w="1"/><text x="77.7159%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="77.5461%" y="357" width="0.0802%" height="15" fill="rgb(247,34,51)" fg:x="967" fg:w="1"/><text x="77.7961%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="77.5461%" y="341" width="0.0802%" height="15" fill="rgb(225,132,2)" fg:x="967" fg:w="1"/><text x="77.7961%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="77.5461%" y="325" width="0.0802%" height="15" fill="rgb(209,159,44)" fg:x="967" fg:w="1"/><text x="77.7961%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="77.5461%" y="309" width="0.0802%" height="15" fill="rgb(251,214,1)" fg:x="967" fg:w="1"/><text x="77.7961%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.5461%" y="293" width="0.0802%" height="15" fill="rgb(247,84,47)" fg:x="967" fg:w="1"/><text x="77.7961%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7065%" y="309" width="0.0802%" height="15" fill="rgb(240,111,43)" fg:x="969" fg:w="1"/><text x="77.9565%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7867%" y="309" width="0.0802%" height="15" fill="rgb(215,214,35)" fg:x="970" fg:w="1"/><text x="78.0367%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="77.8669%" y="309" width="0.0802%" height="15" fill="rgb(248,207,23)" fg:x="971" fg:w="1"/><text x="78.1169%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.8669%" y="293" width="0.0802%" height="15" fill="rgb(214,186,4)" fg:x="971" fg:w="1"/><text x="78.1169%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="77.9471%" y="309" width="0.0802%" height="15" fill="rgb(220,133,22)" fg:x="972" fg:w="1"/><text x="78.1971%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.9471%" y="293" width="0.0802%" height="15" fill="rgb(239,134,19)" fg:x="972" fg:w="1"/><text x="78.1971%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSetItem&gt; (1 samples, 0.08%)</title><rect x="78.0273%" y="309" width="0.0802%" height="15" fill="rgb(250,140,9)" fg:x="973" fg:w="1"/><text x="78.2773%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.2678%" y="277" width="0.0802%" height="15" fill="rgb(225,59,14)" fg:x="976" fg:w="1"/><text x="78.5178%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.20%)</title><rect x="78.2678%" y="293" width="1.2029%" height="15" fill="rgb(214,152,51)" fg:x="976" fg:w="15"/><text x="78.5178%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.12%)</title><rect x="78.3480%" y="277" width="1.1227%" height="15" fill="rgb(251,227,43)" fg:x="977" fg:w="14"/><text x="78.5980%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="79.4707%" y="293" width="0.0802%" height="15" fill="rgb(241,96,17)" fg:x="991" fg:w="1"/><text x="79.7207%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="79.4707%" y="277" width="0.0802%" height="15" fill="rgb(234,198,43)" fg:x="991" fg:w="1"/><text x="79.7207%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="79.5509%" y="277" width="0.2406%" height="15" fill="rgb(220,108,29)" fg:x="992" fg:w="3"/><text x="79.8009%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="79.7113%" y="261" width="0.0802%" height="15" fill="rgb(226,163,33)" fg:x="994" fg:w="1"/><text x="79.9613%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.7113%" y="245" width="0.0802%" height="15" fill="rgb(205,194,45)" fg:x="994" fg:w="1"/><text x="79.9613%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="79.5509%" y="293" width="0.3208%" height="15" fill="rgb(206,143,44)" fg:x="992" fg:w="4"/><text x="79.8009%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="79.7915%" y="277" width="0.0802%" height="15" fill="rgb(236,136,36)" fg:x="995" fg:w="1"/><text x="80.0415%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="79.7915%" y="261" width="0.0802%" height="15" fill="rgb(249,172,42)" fg:x="995" fg:w="1"/><text x="80.0415%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="79.7915%" y="245" width="0.0802%" height="15" fill="rgb(216,139,23)" fg:x="995" fg:w="1"/><text x="80.0415%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="79.8717%" y="293" width="0.0802%" height="15" fill="rgb(207,166,20)" fg:x="996" fg:w="1"/><text x="80.1217%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="80.0321%" y="229" width="0.3208%" height="15" fill="rgb(210,209,22)" fg:x="998" fg:w="4"/><text x="80.2821%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="80.0321%" y="213" width="0.3208%" height="15" fill="rgb(232,118,20)" fg:x="998" fg:w="4"/><text x="80.2821%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="80.1123%" y="197" width="0.2406%" height="15" fill="rgb(238,113,42)" fg:x="999" fg:w="3"/><text x="80.3623%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (38 samples, 3.05%)</title><rect x="80.3528%" y="229" width="3.0473%" height="15" fill="rgb(231,42,5)" fg:x="1002" fg:w="38"/><text x="80.6028%" y="239.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (38 samples, 3.05%)</title><rect x="80.3528%" y="213" width="3.0473%" height="15" fill="rgb(243,166,24)" fg:x="1002" fg:w="38"/><text x="80.6028%" y="223.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (38 samples, 3.05%)</title><rect x="80.3528%" y="197" width="3.0473%" height="15" fill="rgb(237,226,12)" fg:x="1002" fg:w="38"/><text x="80.6028%" y="207.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 3.77%)</title><rect x="79.9519%" y="277" width="3.7690%" height="15" fill="rgb(229,133,24)" fg:x="997" fg:w="47"/><text x="80.2019%" y="287.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (47 samples, 3.77%)</title><rect x="79.9519%" y="261" width="3.7690%" height="15" fill="rgb(238,33,43)" fg:x="997" fg:w="47"/><text x="80.2019%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (47 samples, 3.77%)</title><rect x="79.9519%" y="245" width="3.7690%" height="15" fill="rgb(227,59,38)" fg:x="997" fg:w="47"/><text x="80.2019%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="83.4002%" y="229" width="0.3208%" height="15" fill="rgb(230,97,0)" fg:x="1040" fg:w="4"/><text x="83.6502%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6407%" y="213" width="0.0802%" height="15" fill="rgb(250,173,50)" fg:x="1043" fg:w="1"/><text x="83.8907%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.8011%" y="261" width="0.0802%" height="15" fill="rgb(240,15,50)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.8011%" y="245" width="0.0802%" height="15" fill="rgb(221,93,22)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.8011%" y="229" width="0.0802%" height="15" fill="rgb(245,180,53)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="83.8813%" y="261" width="0.1604%" height="15" fill="rgb(231,88,51)" fg:x="1046" fg:w="2"/><text x="84.1313%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="84.2823%" y="245" width="0.0802%" height="15" fill="rgb(240,58,21)" fg:x="1051" fg:w="1"/><text x="84.5323%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="84.2823%" y="229" width="0.0802%" height="15" fill="rgb(237,21,10)" fg:x="1051" fg:w="1"/><text x="84.5323%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="84.0417%" y="261" width="0.4010%" height="15" fill="rgb(218,43,11)" fg:x="1048" fg:w="5"/><text x="84.2917%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.3625%" y="245" width="0.0802%" height="15" fill="rgb(218,221,29)" fg:x="1052" fg:w="1"/><text x="84.6125%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.3625%" y="229" width="0.0802%" height="15" fill="rgb(214,118,42)" fg:x="1052" fg:w="1"/><text x="84.6125%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.3625%" y="213" width="0.0802%" height="15" fill="rgb(251,200,26)" fg:x="1052" fg:w="1"/><text x="84.6125%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.80%)</title><rect x="83.7209%" y="277" width="0.8019%" height="15" fill="rgb(237,101,39)" fg:x="1044" fg:w="10"/><text x="83.9709%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="84.4427%" y="261" width="0.0802%" height="15" fill="rgb(251,117,11)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.4427%" y="245" width="0.0802%" height="15" fill="rgb(216,223,23)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (59 samples, 4.73%)</title><rect x="79.9519%" y="293" width="4.7314%" height="15" fill="rgb(251,54,12)" fg:x="997" fg:w="59"/><text x="80.2019%" y="303.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="84.5229%" y="277" width="0.1604%" height="15" fill="rgb(254,176,54)" fg:x="1054" fg:w="2"/><text x="84.7729%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="84.5229%" y="261" width="0.1604%" height="15" fill="rgb(210,32,8)" fg:x="1054" fg:w="2"/><text x="84.7729%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="84.6030%" y="245" width="0.0802%" height="15" fill="rgb(235,52,38)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (83 samples, 6.66%)</title><rect x="78.1075%" y="309" width="6.6560%" height="15" fill="rgb(231,4,44)" fg:x="974" fg:w="83"/><text x="78.3575%" y="319.50">regex_aut..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="84.6832%" y="293" width="0.0802%" height="15" fill="rgb(249,2,32)" fg:x="1056" fg:w="1"/><text x="84.9332%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="84.7634%" y="277" width="0.1604%" height="15" fill="rgb(224,65,26)" fg:x="1057" fg:w="2"/><text x="85.0134%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="84.7634%" y="261" width="0.1604%" height="15" fill="rgb(250,73,40)" fg:x="1057" fg:w="2"/><text x="85.0134%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="84.7634%" y="245" width="0.1604%" height="15" fill="rgb(253,177,16)" fg:x="1057" fg:w="2"/><text x="85.0134%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="84.7634%" y="229" width="0.1604%" height="15" fill="rgb(217,32,34)" fg:x="1057" fg:w="2"/><text x="85.0134%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="84.7634%" y="213" width="0.1604%" height="15" fill="rgb(212,7,10)" fg:x="1057" fg:w="2"/><text x="85.0134%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="84.7634%" y="309" width="0.2406%" height="15" fill="rgb(245,89,8)" fg:x="1057" fg:w="3"/><text x="85.0134%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="84.7634%" y="293" width="0.2406%" height="15" fill="rgb(237,16,53)" fg:x="1057" fg:w="3"/><text x="85.0134%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="84.9238%" y="277" width="0.0802%" height="15" fill="rgb(250,204,30)" fg:x="1059" fg:w="1"/><text x="85.1738%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="84.9238%" y="261" width="0.0802%" height="15" fill="rgb(208,77,27)" fg:x="1059" fg:w="1"/><text x="85.1738%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (92 samples, 7.38%)</title><rect x="77.7065%" y="325" width="7.3777%" height="15" fill="rgb(250,204,28)" fg:x="969" fg:w="92"/><text x="77.9565%" y="335.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="85.0040%" y="309" width="0.0802%" height="15" fill="rgb(244,63,21)" fg:x="1060" fg:w="1"/><text x="85.2540%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="85.0040%" y="293" width="0.0802%" height="15" fill="rgb(236,85,44)" fg:x="1060" fg:w="1"/><text x="85.2540%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (94 samples, 7.54%)</title><rect x="77.6263%" y="357" width="7.5381%" height="15" fill="rgb(215,98,4)" fg:x="968" fg:w="94"/><text x="77.8763%" y="367.50">regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (93 samples, 7.46%)</title><rect x="77.7065%" y="341" width="7.4579%" height="15" fill="rgb(235,38,11)" fg:x="969" fg:w="93"/><text x="77.9565%" y="351.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="85.0842%" y="325" width="0.0802%" height="15" fill="rgb(254,186,25)" fg:x="1061" fg:w="1"/><text x="85.3342%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="85.1644%" y="293" width="0.1604%" height="15" fill="rgb(225,55,31)" fg:x="1062" fg:w="2"/><text x="85.4144%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.2446%" y="277" width="0.0802%" height="15" fill="rgb(211,15,21)" fg:x="1063" fg:w="1"/><text x="85.4946%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (100 samples, 8.02%)</title><rect x="77.3857%" y="373" width="8.0192%" height="15" fill="rgb(215,187,41)" fg:x="965" fg:w="100"/><text x="77.6357%" y="383.50">indefinite:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="85.1644%" y="357" width="0.2406%" height="15" fill="rgb(248,69,32)" fg:x="1062" fg:w="3"/><text x="85.4144%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="85.1644%" y="341" width="0.2406%" height="15" fill="rgb(252,102,52)" fg:x="1062" fg:w="3"/><text x="85.4144%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="85.1644%" y="325" width="0.2406%" height="15" fill="rgb(253,140,32)" fg:x="1062" fg:w="3"/><text x="85.4144%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="85.1644%" y="309" width="0.2406%" height="15" fill="rgb(216,56,42)" fg:x="1062" fg:w="3"/><text x="85.4144%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="85.3248%" y="293" width="0.0802%" height="15" fill="rgb(216,184,14)" fg:x="1064" fg:w="1"/><text x="85.5748%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.3248%" y="277" width="0.0802%" height="15" fill="rgb(237,187,27)" fg:x="1064" fg:w="1"/><text x="85.5748%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.3248%" y="261" width="0.0802%" height="15" fill="rgb(219,65,3)" fg:x="1064" fg:w="1"/><text x="85.5748%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3248%" y="245" width="0.0802%" height="15" fill="rgb(245,83,25)" fg:x="1064" fg:w="1"/><text x="85.5748%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.4050%" y="341" width="0.0802%" height="15" fill="rgb(214,205,45)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.4852%" y="325" width="0.0802%" height="15" fill="rgb(241,20,18)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.4852%" y="309" width="0.0802%" height="15" fill="rgb(232,163,23)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.4852%" y="293" width="0.0802%" height="15" fill="rgb(214,5,46)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.5654%" y="309" width="0.0802%" height="15" fill="rgb(229,78,17)" fg:x="1067" fg:w="1"/><text x="85.8154%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="85.4050%" y="357" width="0.3208%" height="15" fill="rgb(248,89,10)" fg:x="1065" fg:w="4"/><text x="85.6550%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="85.4852%" y="341" width="0.2406%" height="15" fill="rgb(248,54,15)" fg:x="1066" fg:w="3"/><text x="85.7352%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="85.5654%" y="325" width="0.1604%" height="15" fill="rgb(223,116,6)" fg:x="1067" fg:w="2"/><text x="85.8154%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="85.6455%" y="309" width="0.0802%" height="15" fill="rgb(205,125,38)" fg:x="1068" fg:w="1"/><text x="85.8955%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.7257%" y="277" width="0.0802%" height="15" fill="rgb(251,78,38)" fg:x="1069" fg:w="1"/><text x="85.9757%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.7257%" y="261" width="0.0802%" height="15" fill="rgb(253,78,28)" fg:x="1069" fg:w="1"/><text x="85.9757%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.9663%" y="261" width="0.0802%" height="15" fill="rgb(209,120,3)" fg:x="1072" fg:w="1"/><text x="86.2163%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.9663%" y="245" width="0.0802%" height="15" fill="rgb(238,229,9)" fg:x="1072" fg:w="1"/><text x="86.2163%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.9663%" y="229" width="0.0802%" height="15" fill="rgb(253,159,18)" fg:x="1072" fg:w="1"/><text x="86.2163%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="85.7257%" y="357" width="0.4010%" height="15" fill="rgb(244,42,34)" fg:x="1069" fg:w="5"/><text x="85.9757%" y="367.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="85.7257%" y="341" width="0.4010%" height="15" fill="rgb(224,8,7)" fg:x="1069" fg:w="5"/><text x="85.9757%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="85.7257%" y="325" width="0.4010%" height="15" fill="rgb(210,201,45)" fg:x="1069" fg:w="5"/><text x="85.9757%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="85.7257%" y="309" width="0.4010%" height="15" fill="rgb(252,185,21)" fg:x="1069" fg:w="5"/><text x="85.9757%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="85.7257%" y="293" width="0.4010%" height="15" fill="rgb(223,131,1)" fg:x="1069" fg:w="5"/><text x="85.9757%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="85.8059%" y="277" width="0.3208%" height="15" fill="rgb(245,141,16)" fg:x="1070" fg:w="4"/><text x="86.0559%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="86.0465%" y="261" width="0.0802%" height="15" fill="rgb(229,55,45)" fg:x="1073" fg:w="1"/><text x="86.2965%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.1267%" y="341" width="0.0802%" height="15" fill="rgb(208,92,15)" fg:x="1074" fg:w="1"/><text x="86.3767%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="86.1267%" y="325" width="0.0802%" height="15" fill="rgb(234,185,47)" fg:x="1074" fg:w="1"/><text x="86.3767%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.1267%" y="309" width="0.0802%" height="15" fill="rgb(253,104,50)" fg:x="1074" fg:w="1"/><text x="86.3767%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.2069%" y="341" width="0.0802%" height="15" fill="rgb(205,70,7)" fg:x="1075" fg:w="1"/><text x="86.4569%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.2871%" y="309" width="0.0802%" height="15" fill="rgb(240,178,43)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.2871%" y="293" width="0.0802%" height="15" fill="rgb(214,112,2)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="86.2871%" y="277" width="0.0802%" height="15" fill="rgb(206,46,17)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="86.3673%" y="309" width="0.0802%" height="15" fill="rgb(225,220,16)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.3673%" y="293" width="0.0802%" height="15" fill="rgb(238,65,40)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="86.3673%" y="277" width="0.0802%" height="15" fill="rgb(230,151,21)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.3673%" y="261" width="0.0802%" height="15" fill="rgb(218,58,49)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.3673%" y="245" width="0.0802%" height="15" fill="rgb(219,179,14)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.4475%" y="277" width="0.0802%" height="15" fill="rgb(223,72,1)" fg:x="1078" fg:w="1"/><text x="86.6975%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="86.4475%" y="293" width="0.4812%" height="15" fill="rgb(238,126,10)" fg:x="1078" fg:w="6"/><text x="86.6975%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="86.5277%" y="277" width="0.4010%" height="15" fill="rgb(224,206,38)" fg:x="1079" fg:w="5"/><text x="86.7777%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.8484%" y="261" width="0.0802%" height="15" fill="rgb(212,201,54)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="86.9286%" y="293" width="0.0802%" height="15" fill="rgb(218,154,48)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="86.9286%" y="277" width="0.0802%" height="15" fill="rgb(232,93,24)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="86.9286%" y="261" width="0.0802%" height="15" fill="rgb(245,30,21)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.9286%" y="245" width="0.0802%" height="15" fill="rgb(242,148,29)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.1692%" y="261" width="0.0802%" height="15" fill="rgb(244,153,54)" fg:x="1087" fg:w="1"/><text x="87.4192%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.1692%" y="245" width="0.0802%" height="15" fill="rgb(252,87,22)" fg:x="1087" fg:w="1"/><text x="87.4192%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.1692%" y="229" width="0.0802%" height="15" fill="rgb(210,51,29)" fg:x="1087" fg:w="1"/><text x="87.4192%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.2494%" y="261" width="0.0802%" height="15" fill="rgb(242,136,47)" fg:x="1088" fg:w="1"/><text x="87.4994%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.2494%" y="245" width="0.0802%" height="15" fill="rgb(238,68,4)" fg:x="1088" fg:w="1"/><text x="87.4994%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.2494%" y="229" width="0.0802%" height="15" fill="rgb(242,161,30)" fg:x="1088" fg:w="1"/><text x="87.4994%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="87.3296%" y="261" width="0.0802%" height="15" fill="rgb(218,58,44)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.3296%" y="245" width="0.0802%" height="15" fill="rgb(252,125,32)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.3296%" y="229" width="0.0802%" height="15" fill="rgb(219,178,0)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.3296%" y="213" width="0.0802%" height="15" fill="rgb(213,152,7)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="87.4098%" y="261" width="0.0802%" height="15" fill="rgb(249,109,34)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="87.4098%" y="245" width="0.0802%" height="15" fill="rgb(232,96,21)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.4098%" y="229" width="0.0802%" height="15" fill="rgb(228,27,39)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.4098%" y="213" width="0.0802%" height="15" fill="rgb(211,182,52)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.4098%" y="197" width="0.0802%" height="15" fill="rgb(234,178,38)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (10 samples, 0.80%)</title><rect x="87.4900%" y="245" width="0.8019%" height="15" fill="rgb(221,111,3)" fg:x="1091" fg:w="10"/><text x="87.7400%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (10 samples, 0.80%)</title><rect x="87.4900%" y="229" width="0.8019%" height="15" fill="rgb(228,175,21)" fg:x="1091" fg:w="10"/><text x="87.7400%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (18 samples, 1.44%)</title><rect x="87.0088%" y="293" width="1.4435%" height="15" fill="rgb(228,174,43)" fg:x="1085" fg:w="18"/><text x="87.2588%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (18 samples, 1.44%)</title><rect x="87.0088%" y="277" width="1.4435%" height="15" fill="rgb(211,191,0)" fg:x="1085" fg:w="18"/><text x="87.2588%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (12 samples, 0.96%)</title><rect x="87.4900%" y="261" width="0.9623%" height="15" fill="rgb(253,117,3)" fg:x="1091" fg:w="12"/><text x="87.7400%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (2 samples, 0.16%)</title><rect x="88.2919%" y="245" width="0.1604%" height="15" fill="rgb(241,127,19)" fg:x="1101" fg:w="2"/><text x="88.5419%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="88.4523%" y="245" width="0.0802%" height="15" fill="rgb(218,103,12)" fg:x="1103" fg:w="1"/><text x="88.7023%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.4523%" y="229" width="0.0802%" height="15" fill="rgb(236,214,43)" fg:x="1103" fg:w="1"/><text x="88.7023%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.4523%" y="213" width="0.0802%" height="15" fill="rgb(244,144,19)" fg:x="1103" fg:w="1"/><text x="88.7023%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.4523%" y="197" width="0.0802%" height="15" fill="rgb(246,188,10)" fg:x="1103" fg:w="1"/><text x="88.7023%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="88.9334%" y="181" width="0.3208%" height="15" fill="rgb(212,193,33)" fg:x="1109" fg:w="4"/><text x="89.1834%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="89.2542%" y="181" width="0.1604%" height="15" fill="rgb(241,51,29)" fg:x="1113" fg:w="2"/><text x="89.5042%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="89.4146%" y="181" width="0.0802%" height="15" fill="rgb(211,58,19)" fg:x="1115" fg:w="1"/><text x="89.6646%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.4146%" y="165" width="0.0802%" height="15" fill="rgb(229,111,26)" fg:x="1115" fg:w="1"/><text x="89.6646%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.4146%" y="149" width="0.0802%" height="15" fill="rgb(213,115,40)" fg:x="1115" fg:w="1"/><text x="89.6646%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.4146%" y="133" width="0.0802%" height="15" fill="rgb(209,56,44)" fg:x="1115" fg:w="1"/><text x="89.6646%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="89.4948%" y="181" width="0.0802%" height="15" fill="rgb(230,108,32)" fg:x="1116" fg:w="1"/><text x="89.7448%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.9759%" y="117" width="0.1604%" height="15" fill="rgb(216,165,31)" fg:x="1122" fg:w="2"/><text x="90.2259%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="89.9759%" y="149" width="0.2406%" height="15" fill="rgb(218,122,21)" fg:x="1122" fg:w="3"/><text x="90.2259%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="89.9759%" y="133" width="0.2406%" height="15" fill="rgb(223,224,47)" fg:x="1122" fg:w="3"/><text x="90.2259%" y="143.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="90.1363%" y="117" width="0.0802%" height="15" fill="rgb(238,102,44)" fg:x="1124" fg:w="1"/><text x="90.3863%" y="127.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="90.1363%" y="101" width="0.0802%" height="15" fill="rgb(236,46,40)" fg:x="1124" fg:w="1"/><text x="90.3863%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.72%)</title><rect x="89.5750%" y="181" width="0.7217%" height="15" fill="rgb(247,202,50)" fg:x="1117" fg:w="9"/><text x="89.8250%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.48%)</title><rect x="89.8156%" y="165" width="0.4812%" height="15" fill="rgb(209,99,20)" fg:x="1120" fg:w="6"/><text x="90.0656%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="90.2165%" y="149" width="0.0802%" height="15" fill="rgb(252,27,34)" fg:x="1125" fg:w="1"/><text x="90.4665%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.2165%" y="133" width="0.0802%" height="15" fill="rgb(215,206,23)" fg:x="1125" fg:w="1"/><text x="90.4665%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (38 samples, 3.05%)</title><rect x="90.2967%" y="181" width="3.0473%" height="15" fill="rgb(212,135,36)" fg:x="1126" fg:w="38"/><text x="90.5467%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (38 samples, 3.05%)</title><rect x="90.2967%" y="165" width="3.0473%" height="15" fill="rgb(240,189,1)" fg:x="1126" fg:w="38"/><text x="90.5467%" y="175.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (38 samples, 3.05%)</title><rect x="90.2967%" y="149" width="3.0473%" height="15" fill="rgb(242,56,20)" fg:x="1126" fg:w="38"/><text x="90.5467%" y="159.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="93.3440%" y="181" width="0.1604%" height="15" fill="rgb(247,132,33)" fg:x="1164" fg:w="2"/><text x="93.5940%" y="191.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="93.5044%" y="181" width="0.0802%" height="15" fill="rgb(208,149,11)" fg:x="1166" fg:w="1"/><text x="93.7544%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 5.21%)</title><rect x="88.4523%" y="277" width="5.2125%" height="15" fill="rgb(211,33,11)" fg:x="1103" fg:w="65"/><text x="88.7023%" y="287.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (65 samples, 5.21%)</title><rect x="88.4523%" y="261" width="5.2125%" height="15" fill="rgb(221,29,38)" fg:x="1103" fg:w="65"/><text x="88.7023%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (64 samples, 5.13%)</title><rect x="88.5325%" y="245" width="5.1323%" height="15" fill="rgb(206,182,49)" fg:x="1104" fg:w="64"/><text x="88.7825%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (64 samples, 5.13%)</title><rect x="88.5325%" y="229" width="5.1323%" height="15" fill="rgb(216,140,1)" fg:x="1104" fg:w="64"/><text x="88.7825%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (64 samples, 5.13%)</title><rect x="88.5325%" y="213" width="5.1323%" height="15" fill="rgb(232,57,40)" fg:x="1104" fg:w="64"/><text x="88.7825%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (64 samples, 5.13%)</title><rect x="88.5325%" y="197" width="5.1323%" height="15" fill="rgb(224,186,18)" fg:x="1104" fg:w="64"/><text x="88.7825%" y="207.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="93.5846%" y="181" width="0.0802%" height="15" fill="rgb(215,121,11)" fg:x="1167" fg:w="1"/><text x="93.8346%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.5846%" y="165" width="0.0802%" height="15" fill="rgb(245,147,10)" fg:x="1167" fg:w="1"/><text x="93.8346%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.5846%" y="149" width="0.0802%" height="15" fill="rgb(238,153,13)" fg:x="1167" fg:w="1"/><text x="93.8346%" y="159.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="93.7450%" y="261" width="0.0802%" height="15" fill="rgb(233,108,0)" fg:x="1169" fg:w="1"/><text x="93.9950%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.8252%" y="261" width="0.0802%" height="15" fill="rgb(212,157,17)" fg:x="1170" fg:w="1"/><text x="94.0752%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.9054%" y="261" width="0.0802%" height="15" fill="rgb(225,213,38)" fg:x="1171" fg:w="1"/><text x="94.1554%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="93.9856%" y="261" width="0.0802%" height="15" fill="rgb(248,16,11)" fg:x="1172" fg:w="1"/><text x="94.2356%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="94.0658%" y="261" width="0.4010%" height="15" fill="rgb(241,33,4)" fg:x="1173" fg:w="5"/><text x="94.3158%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.3865%" y="245" width="0.0802%" height="15" fill="rgb(222,26,43)" fg:x="1177" fg:w="1"/><text x="94.6365%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.3865%" y="229" width="0.0802%" height="15" fill="rgb(243,29,36)" fg:x="1177" fg:w="1"/><text x="94.6365%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.3865%" y="213" width="0.0802%" height="15" fill="rgb(241,9,27)" fg:x="1177" fg:w="1"/><text x="94.6365%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="94.4667%" y="261" width="0.0802%" height="15" fill="rgb(205,117,26)" fg:x="1178" fg:w="1"/><text x="94.7167%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.4667%" y="245" width="0.0802%" height="15" fill="rgb(209,80,39)" fg:x="1178" fg:w="1"/><text x="94.7167%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="94.5469%" y="261" width="0.1604%" height="15" fill="rgb(239,155,6)" fg:x="1179" fg:w="2"/><text x="94.7969%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (104 samples, 8.34%)</title><rect x="86.4475%" y="309" width="8.3400%" height="15" fill="rgb(212,104,12)" fg:x="1078" fg:w="104"/><text x="86.6975%" y="319.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (79 samples, 6.34%)</title><rect x="88.4523%" y="293" width="6.3352%" height="15" fill="rgb(234,204,3)" fg:x="1103" fg:w="79"/><text x="88.7023%" y="303.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.12%)</title><rect x="93.6648%" y="277" width="1.1227%" height="15" fill="rgb(251,218,7)" fg:x="1168" fg:w="14"/><text x="93.9148%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="94.7073%" y="261" width="0.0802%" height="15" fill="rgb(221,81,32)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7073%" y="245" width="0.0802%" height="15" fill="rgb(214,152,26)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="94.7875%" y="277" width="0.0802%" height="15" fill="rgb(223,22,3)" fg:x="1182" fg:w="1"/><text x="95.0375%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="94.7875%" y="309" width="0.1604%" height="15" fill="rgb(207,174,7)" fg:x="1182" fg:w="2"/><text x="95.0375%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="94.7875%" y="293" width="0.1604%" height="15" fill="rgb(224,19,52)" fg:x="1182" fg:w="2"/><text x="95.0375%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="94.8677%" y="277" width="0.0802%" height="15" fill="rgb(228,24,14)" fg:x="1183" fg:w="1"/><text x="95.1177%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="94.9479%" y="277" width="0.0802%" height="15" fill="rgb(230,153,43)" fg:x="1184" fg:w="1"/><text x="95.1979%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="95.0281%" y="277" width="0.2406%" height="15" fill="rgb(231,106,12)" fg:x="1185" fg:w="3"/><text x="95.2781%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="95.0281%" y="261" width="0.2406%" height="15" fill="rgb(215,92,2)" fg:x="1185" fg:w="3"/><text x="95.2781%" y="271.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="95.1885%" y="245" width="0.0802%" height="15" fill="rgb(249,143,25)" fg:x="1187" fg:w="1"/><text x="95.4385%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.1885%" y="229" width="0.0802%" height="15" fill="rgb(252,7,35)" fg:x="1187" fg:w="1"/><text x="95.4385%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (124 samples, 9.94%)</title><rect x="85.4050%" y="373" width="9.9439%" height="15" fill="rgb(216,69,40)" fg:x="1065" fg:w="124"/><text x="85.6550%" y="383.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::new (115 samples, 9.22%)</title><rect x="86.1267%" y="357" width="9.2221%" height="15" fill="rgb(240,36,33)" fg:x="1074" fg:w="115"/><text x="86.3767%" y="367.50">regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (113 samples, 9.06%)</title><rect x="86.2871%" y="341" width="9.0617%" height="15" fill="rgb(231,128,14)" fg:x="1076" fg:w="113"/><text x="86.5371%" y="351.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (113 samples, 9.06%)</title><rect x="86.2871%" y="325" width="9.0617%" height="15" fill="rgb(245,143,14)" fg:x="1076" fg:w="113"/><text x="86.5371%" y="335.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="94.9479%" y="309" width="0.4010%" height="15" fill="rgb(222,130,28)" fg:x="1184" fg:w="5"/><text x="95.1979%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="94.9479%" y="293" width="0.4010%" height="15" fill="rgb(212,10,48)" fg:x="1184" fg:w="5"/><text x="95.1979%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.2686%" y="277" width="0.0802%" height="15" fill="rgb(254,118,45)" fg:x="1188" fg:w="1"/><text x="95.5186%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="95.3488%" y="341" width="0.2406%" height="15" fill="rgb(228,6,45)" fg:x="1189" fg:w="3"/><text x="95.5988%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="95.4290%" y="325" width="0.1604%" height="15" fill="rgb(241,18,35)" fg:x="1190" fg:w="2"/><text x="95.6790%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="95.4290%" y="309" width="0.1604%" height="15" fill="rgb(227,214,53)" fg:x="1190" fg:w="2"/><text x="95.6790%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.5092%" y="293" width="0.0802%" height="15" fill="rgb(224,107,51)" fg:x="1191" fg:w="1"/><text x="95.7592%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5092%" y="277" width="0.0802%" height="15" fill="rgb(248,60,28)" fg:x="1191" fg:w="1"/><text x="95.7592%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.5092%" y="261" width="0.0802%" height="15" fill="rgb(249,101,23)" fg:x="1191" fg:w="1"/><text x="95.7592%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.5894%" y="325" width="0.0802%" height="15" fill="rgb(228,51,19)" fg:x="1192" fg:w="1"/><text x="95.8394%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="95.5894%" y="309" width="0.0802%" height="15" fill="rgb(213,20,6)" fg:x="1192" fg:w="1"/><text x="95.8394%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.6696%" y="293" width="0.0802%" height="15" fill="rgb(212,124,10)" fg:x="1193" fg:w="1"/><text x="95.9196%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.7498%" y="261" width="0.0802%" height="15" fill="rgb(248,3,40)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.7498%" y="245" width="0.0802%" height="15" fill="rgb(223,178,23)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="95.7498%" y="293" width="0.1604%" height="15" fill="rgb(240,132,45)" fg:x="1194" fg:w="2"/><text x="95.9998%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.7498%" y="277" width="0.1604%" height="15" fill="rgb(245,164,36)" fg:x="1194" fg:w="2"/><text x="95.9998%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="95.8300%" y="261" width="0.0802%" height="15" fill="rgb(231,188,53)" fg:x="1195" fg:w="1"/><text x="96.0800%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.8300%" y="245" width="0.0802%" height="15" fill="rgb(237,198,39)" fg:x="1195" fg:w="1"/><text x="96.0800%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.8300%" y="229" width="0.0802%" height="15" fill="rgb(223,120,35)" fg:x="1195" fg:w="1"/><text x="96.0800%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="95.9102%" y="293" width="0.0802%" height="15" fill="rgb(253,107,49)" fg:x="1196" fg:w="1"/><text x="96.1602%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2310%" y="277" width="0.0802%" height="15" fill="rgb(216,44,31)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="96.3913%" y="261" width="0.4010%" height="15" fill="rgb(253,87,21)" fg:x="1202" fg:w="5"/><text x="96.6413%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="96.3111%" y="277" width="0.5613%" height="15" fill="rgb(226,18,2)" fg:x="1201" fg:w="7"/><text x="96.5611%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="96.7923%" y="261" width="0.0802%" height="15" fill="rgb(216,8,46)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="96.7923%" y="245" width="0.0802%" height="15" fill="rgb(226,140,39)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="96.7923%" y="229" width="0.0802%" height="15" fill="rgb(221,194,54)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="96.8725%" y="261" width="0.0802%" height="15" fill="rgb(213,92,11)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="96.8725%" y="245" width="0.0802%" height="15" fill="rgb(229,162,46)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.8725%" y="229" width="0.0802%" height="15" fill="rgb(214,111,36)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.8725%" y="213" width="0.0802%" height="15" fill="rgb(207,6,21)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="223.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="96.8725%" y="197" width="0.0802%" height="15" fill="rgb(213,127,38)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.0329%" y="229" width="0.0802%" height="15" fill="rgb(238,118,32)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="97.0329%" y="245" width="0.1604%" height="15" fill="rgb(240,139,39)" fg:x="1210" fg:w="2"/><text x="97.2829%" y="255.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="97.1131%" y="229" width="0.0802%" height="15" fill="rgb(235,10,37)" fg:x="1211" fg:w="1"/><text x="97.3631%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (18 samples, 1.44%)</title><rect x="95.9904%" y="293" width="1.4435%" height="15" fill="rgb(249,171,38)" fg:x="1197" fg:w="18"/><text x="96.2404%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.56%)</title><rect x="96.8725%" y="277" width="0.5613%" height="15" fill="rgb(242,144,32)" fg:x="1208" fg:w="7"/><text x="97.1225%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="96.9527%" y="261" width="0.4812%" height="15" fill="rgb(217,117,21)" fg:x="1209" fg:w="6"/><text x="97.2027%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="97.1933%" y="245" width="0.2406%" height="15" fill="rgb(249,87,1)" fg:x="1212" fg:w="3"/><text x="97.4433%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.3536%" y="229" width="0.0802%" height="15" fill="rgb(248,196,48)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.3536%" y="213" width="0.0802%" height="15" fill="rgb(251,206,33)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3536%" y="197" width="0.0802%" height="15" fill="rgb(232,141,28)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="97.4338%" y="245" width="0.0802%" height="15" fill="rgb(209,167,14)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="97.4338%" y="229" width="0.0802%" height="15" fill="rgb(225,11,50)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="97.4338%" y="261" width="0.2406%" height="15" fill="rgb(209,50,20)" fg:x="1215" fg:w="3"/><text x="97.6838%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="97.5140%" y="245" width="0.1604%" height="15" fill="rgb(212,17,46)" fg:x="1216" fg:w="2"/><text x="97.7640%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="97.4338%" y="293" width="0.4010%" height="15" fill="rgb(216,101,39)" fg:x="1215" fg:w="5"/><text x="97.6838%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="97.4338%" y="277" width="0.4010%" height="15" fill="rgb(212,228,48)" fg:x="1215" fg:w="5"/><text x="97.6838%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.6744%" y="261" width="0.1604%" height="15" fill="rgb(250,6,50)" fg:x="1218" fg:w="2"/><text x="97.9244%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="97.6744%" y="245" width="0.1604%" height="15" fill="rgb(250,160,48)" fg:x="1218" fg:w="2"/><text x="97.9244%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.7546%" y="229" width="0.0802%" height="15" fill="rgb(244,216,33)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.7546%" y="213" width="0.0802%" height="15" fill="rgb(207,157,5)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (31 samples, 2.49%)</title><rect x="95.5894%" y="341" width="2.4860%" height="15" fill="rgb(228,199,8)" fg:x="1192" fg:w="31"/><text x="95.8394%" y="351.50">re..</text></g><g><title>regex::builders::Builder::build_one_string (30 samples, 2.41%)</title><rect x="95.6696%" y="325" width="2.4058%" height="15" fill="rgb(227,80,20)" fg:x="1193" fg:w="30"/><text x="95.9196%" y="335.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (30 samples, 2.41%)</title><rect x="95.6696%" y="309" width="2.4058%" height="15" fill="rgb(222,9,33)" fg:x="1193" fg:w="30"/><text x="95.9196%" y="319.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="97.8348%" y="293" width="0.2406%" height="15" fill="rgb(239,44,28)" fg:x="1220" fg:w="3"/><text x="98.0848%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="97.8348%" y="277" width="0.2406%" height="15" fill="rgb(249,187,43)" fg:x="1220" fg:w="3"/><text x="98.0848%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="97.8348%" y="261" width="0.2406%" height="15" fill="rgb(216,141,28)" fg:x="1220" fg:w="3"/><text x="98.0848%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.9952%" y="245" width="0.0802%" height="15" fill="rgb(230,154,53)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="98.1556%" y="261" width="0.1604%" height="15" fill="rgb(227,82,4)" fg:x="1224" fg:w="2"/><text x="98.4056%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="98.0754%" y="277" width="0.3208%" height="15" fill="rgb(220,107,16)" fg:x="1223" fg:w="4"/><text x="98.3254%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="98.3160%" y="261" width="0.0802%" height="15" fill="rgb(207,187,2)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3160%" y="245" width="0.0802%" height="15" fill="rgb(210,162,52)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="98.0754%" y="293" width="0.4010%" height="15" fill="rgb(217,216,49)" fg:x="1223" fg:w="5"/><text x="98.3254%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="98.3962%" y="277" width="0.0802%" height="15" fill="rgb(218,146,49)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.3962%" y="261" width="0.0802%" height="15" fill="rgb(216,55,40)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.3962%" y="245" width="0.0802%" height="15" fill="rgb(208,196,21)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3962%" y="229" width="0.0802%" height="15" fill="rgb(242,117,42)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (40 samples, 3.21%)</title><rect x="95.3488%" y="357" width="3.2077%" height="15" fill="rgb(210,11,23)" fg:x="1189" fg:w="40"/><text x="95.5988%" y="367.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="98.0754%" y="341" width="0.4812%" height="15" fill="rgb(217,110,2)" fg:x="1223" fg:w="6"/><text x="98.3254%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="98.0754%" y="325" width="0.4812%" height="15" fill="rgb(229,77,54)" fg:x="1223" fg:w="6"/><text x="98.3254%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="98.0754%" y="309" width="0.4812%" height="15" fill="rgb(218,53,16)" fg:x="1223" fg:w="6"/><text x="98.3254%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="98.4763%" y="293" width="0.0802%" height="15" fill="rgb(215,38,13)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="98.4763%" y="277" width="0.0802%" height="15" fill="rgb(235,42,18)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.4763%" y="261" width="0.0802%" height="15" fill="rgb(219,66,54)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.4763%" y="245" width="0.0802%" height="15" fill="rgb(222,205,4)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.4763%" y="229" width="0.0802%" height="15" fill="rgb(227,213,46)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (277 samples, 22.21%)</title><rect x="76.4234%" y="453" width="22.2133%" height="15" fill="rgb(250,145,42)" fg:x="953" fg:w="277"/><text x="76.6734%" y="463.50">&lt;&amp;kernel::model::entry::Entry as pl..</text></g><g><title>plugins_core::looking::model::qualify_name (267 samples, 21.41%)</title><rect x="77.2253%" y="437" width="21.4114%" height="15" fill="rgb(219,15,2)" fg:x="963" fg:w="267"/><text x="77.4753%" y="447.50">plugins_core::looking::model::qual..</text></g><g><title>indefinite::indefinite (267 samples, 21.41%)</title><rect x="77.2253%" y="421" width="21.4114%" height="15" fill="rgb(231,181,52)" fg:x="963" fg:w="267"/><text x="77.4753%" y="431.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (267 samples, 21.41%)</title><rect x="77.2253%" y="405" width="21.4114%" height="15" fill="rgb(235,1,42)" fg:x="963" fg:w="267"/><text x="77.4753%" y="415.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (266 samples, 21.33%)</title><rect x="77.3055%" y="389" width="21.3312%" height="15" fill="rgb(249,88,27)" fg:x="964" fg:w="266"/><text x="77.5555%" y="399.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (41 samples, 3.29%)</title><rect x="95.3488%" y="373" width="3.2879%" height="15" fill="rgb(235,145,16)" fg:x="1189" fg:w="41"/><text x="95.5988%" y="383.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="98.5565%" y="357" width="0.0802%" height="15" fill="rgb(237,114,19)" fg:x="1229" fg:w="1"/><text x="98.8065%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (2 samples, 0.16%)</title><rect x="98.6367%" y="453" width="0.1604%" height="15" fill="rgb(238,51,50)" fg:x="1230" fg:w="2"/><text x="98.8867%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="98.7169%" y="437" width="0.0802%" height="15" fill="rgb(205,194,25)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="98.7169%" y="421" width="0.0802%" height="15" fill="rgb(215,203,17)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.7169%" y="405" width="0.0802%" height="15" fill="rgb(233,112,49)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.7169%" y="389" width="0.0802%" height="15" fill="rgb(241,130,26)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.7169%" y="373" width="0.0802%" height="15" fill="rgb(252,223,19)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.7169%" y="357" width="0.0802%" height="15" fill="rgb(211,95,25)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="98.7169%" y="341" width="0.0802%" height="15" fill="rgb(251,182,27)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.7169%" y="325" width="0.0802%" height="15" fill="rgb(238,24,4)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.7169%" y="309" width="0.0802%" height="15" fill="rgb(224,220,25)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.7169%" y="293" width="0.0802%" height="15" fill="rgb(239,133,26)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.7169%" y="277" width="0.0802%" height="15" fill="rgb(211,94,48)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.7169%" y="261" width="0.0802%" height="15" fill="rgb(239,87,6)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="98.7169%" y="245" width="0.0802%" height="15" fill="rgb(227,62,0)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="98.7169%" y="229" width="0.0802%" height="15" fill="rgb(211,226,4)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="98.7169%" y="213" width="0.0802%" height="15" fill="rgb(253,38,52)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="98.7169%" y="197" width="0.0802%" height="15" fill="rgb(229,126,40)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="98.7169%" y="181" width="0.0802%" height="15" fill="rgb(229,165,44)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="98.7169%" y="165" width="0.0802%" height="15" fill="rgb(247,95,47)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.08%)</title><rect x="98.7169%" y="149" width="0.0802%" height="15" fill="rgb(216,140,30)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.08%)</title><rect x="98.7169%" y="133" width="0.0802%" height="15" fill="rgb(246,214,8)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="98.8773%" y="309" width="0.0802%" height="15" fill="rgb(227,224,15)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="319.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="98.8773%" y="293" width="0.0802%" height="15" fill="rgb(233,175,4)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="303.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="98.8773%" y="277" width="0.0802%" height="15" fill="rgb(221,66,45)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8773%" y="261" width="0.0802%" height="15" fill="rgb(221,178,18)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="271.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="98.9575%" y="293" width="0.2406%" height="15" fill="rgb(213,81,29)" fg:x="1234" fg:w="3"/><text x="99.2075%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="98.9575%" y="277" width="0.2406%" height="15" fill="rgb(220,89,49)" fg:x="1234" fg:w="3"/><text x="99.2075%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.9575%" y="261" width="0.2406%" height="15" fill="rgb(227,60,33)" fg:x="1234" fg:w="3"/><text x="99.2075%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.9575%" y="245" width="0.2406%" height="15" fill="rgb(205,113,12)" fg:x="1234" fg:w="3"/><text x="99.2075%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.0377%" y="229" width="0.1604%" height="15" fill="rgb(211,32,1)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.0377%" y="213" width="0.1604%" height="15" fill="rgb(246,2,12)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="223.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.0377%" y="197" width="0.1604%" height="15" fill="rgb(243,37,27)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.0377%" y="181" width="0.1604%" height="15" fill="rgb(248,211,31)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.0377%" y="165" width="0.1604%" height="15" fill="rgb(242,146,47)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.0377%" y="149" width="0.1604%" height="15" fill="rgb(206,70,20)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.0377%" y="133" width="0.1604%" height="15" fill="rgb(215,10,51)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="143.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="99.0377%" y="117" width="0.1604%" height="15" fill="rgb(243,178,53)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="99.1179%" y="101" width="0.0802%" height="15" fill="rgb(233,221,20)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="111.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.1981%" y="245" width="0.0802%" height="15" fill="rgb(218,95,35)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="255.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.1981%" y="229" width="0.0802%" height="15" fill="rgb(229,13,5)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.3585%" y="181" width="0.0802%" height="15" fill="rgb(252,164,30)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="99.3585%" y="165" width="0.0802%" height="15" fill="rgb(232,68,36)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="99.3585%" y="149" width="0.0802%" height="15" fill="rgb(219,59,54)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="159.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (299 samples, 23.98%)</title><rect x="75.5413%" y="613" width="23.9775%" height="15" fill="rgb(250,92,33)" fg:x="942" fg:w="299"/><text x="75.7913%" y="623.50">&lt;engine::perform::StandardPerformer as..</text></g><g><title>kernel::plugins::mw::apply_middleware (288 samples, 23.10%)</title><rect x="76.4234%" y="597" width="23.0954%" height="15" fill="rgb(229,162,54)" fg:x="953" fg:w="288"/><text x="76.6734%" y="607.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (288 samples, 23.10%)</title><rect x="76.4234%" y="581" width="23.0954%" height="15" fill="rgb(244,114,52)" fg:x="953" fg:w="288"/><text x="76.6734%" y="591.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (288 samples, 23.10%)</title><rect x="76.4234%" y="565" width="23.0954%" height="15" fill="rgb(212,211,43)" fg:x="953" fg:w="288"/><text x="76.6734%" y="575.50">&lt;plugins_dynlib::DynamicMiddleware as..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (288 samples, 23.10%)</title><rect x="76.4234%" y="549" width="23.0954%" height="15" fill="rgb(226,147,8)" fg:x="953" fg:w="288"/><text x="76.6734%" y="559.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (288 samples, 23.10%)</title><rect x="76.4234%" y="533" width="23.0954%" height="15" fill="rgb(226,23,13)" fg:x="953" fg:w="288"/><text x="76.6734%" y="543.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (288 samples, 23.10%)</title><rect x="76.4234%" y="517" width="23.0954%" height="15" fill="rgb(240,63,4)" fg:x="953" fg:w="288"/><text x="76.6734%" y="527.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (288 samples, 23.10%)</title><rect x="76.4234%" y="501" width="23.0954%" height="15" fill="rgb(221,1,32)" fg:x="953" fg:w="288"/><text x="76.6734%" y="511.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (288 samples, 23.10%)</title><rect x="76.4234%" y="485" width="23.0954%" height="15" fill="rgb(242,117,10)" fg:x="953" fg:w="288"/><text x="76.6734%" y="495.50">&lt;plugins_core::looking::actions::Look..</text></g><g><title>plugins_core::looking::model::new_area_observation (288 samples, 23.10%)</title><rect x="76.4234%" y="469" width="23.0954%" height="15" fill="rgb(249,172,44)" fg:x="953" fg:w="288"/><text x="76.6734%" y="479.50">plugins_core::looking::model::new_are..</text></g><g><title>kernel::model::entry::Entry::scope (9 samples, 0.72%)</title><rect x="98.7971%" y="453" width="0.7217%" height="15" fill="rgb(244,46,45)" fg:x="1232" fg:w="9"/><text x="99.0471%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (9 samples, 0.72%)</title><rect x="98.7971%" y="437" width="0.7217%" height="15" fill="rgb(206,43,17)" fg:x="1232" fg:w="9"/><text x="99.0471%" y="447.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (9 samples, 0.72%)</title><rect x="98.7971%" y="421" width="0.7217%" height="15" fill="rgb(239,218,39)" fg:x="1232" fg:w="9"/><text x="99.0471%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.72%)</title><rect x="98.7971%" y="405" width="0.7217%" height="15" fill="rgb(208,169,54)" fg:x="1232" fg:w="9"/><text x="99.0471%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="98.7971%" y="389" width="0.7217%" height="15" fill="rgb(247,25,42)" fg:x="1232" fg:w="9"/><text x="99.0471%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.72%)</title><rect x="98.7971%" y="373" width="0.7217%" height="15" fill="rgb(226,23,31)" fg:x="1232" fg:w="9"/><text x="99.0471%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (9 samples, 0.72%)</title><rect x="98.7971%" y="357" width="0.7217%" height="15" fill="rgb(247,16,28)" fg:x="1232" fg:w="9"/><text x="99.0471%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.72%)</title><rect x="98.7971%" y="341" width="0.7217%" height="15" fill="rgb(231,147,38)" fg:x="1232" fg:w="9"/><text x="99.0471%" y="351.50"></text></g><g><title>engine::internal::Entities::add_persisted (9 samples, 0.72%)</title><rect x="98.7971%" y="325" width="0.7217%" height="15" fill="rgb(253,81,48)" fg:x="1232" fg:w="9"/><text x="99.0471%" y="335.50"></text></g><g><title>kernel::model::deserialize_entity (7 samples, 0.56%)</title><rect x="98.9575%" y="309" width="0.5613%" height="15" fill="rgb(249,222,43)" fg:x="1234" fg:w="7"/><text x="99.2075%" y="319.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="99.1981%" y="293" width="0.3208%" height="15" fill="rgb(221,3,27)" fg:x="1237" fg:w="4"/><text x="99.4481%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="99.1981%" y="277" width="0.3208%" height="15" fill="rgb(228,180,5)" fg:x="1237" fg:w="4"/><text x="99.4481%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="99.1981%" y="261" width="0.3208%" height="15" fill="rgb(227,131,42)" fg:x="1237" fg:w="4"/><text x="99.4481%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.2783%" y="245" width="0.2406%" height="15" fill="rgb(212,3,39)" fg:x="1238" fg:w="3"/><text x="99.5283%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.2783%" y="229" width="0.2406%" height="15" fill="rgb(226,45,5)" fg:x="1238" fg:w="3"/><text x="99.5283%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.3585%" y="213" width="0.1604%" height="15" fill="rgb(215,167,45)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.3585%" y="197" width="0.1604%" height="15" fill="rgb(250,218,53)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.4387%" y="181" width="0.0802%" height="15" fill="rgb(207,140,0)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4387%" y="165" width="0.0802%" height="15" fill="rgb(238,133,51)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.5188%" y="469" width="0.0802%" height="15" fill="rgb(218,203,53)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5990%" y="421" width="0.0802%" height="15" fill="rgb(226,184,25)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5990%" y="405" width="0.0802%" height="15" fill="rgb(231,121,21)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="415.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.5990%" y="389" width="0.0802%" height="15" fill="rgb(251,14,34)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5990%" y="373" width="0.0802%" height="15" fill="rgb(249,193,11)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="99.5188%" y="597" width="0.2406%" height="15" fill="rgb(220,172,37)" fg:x="1241" fg:w="3"/><text x="99.7688%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.5188%" y="581" width="0.2406%" height="15" fill="rgb(231,229,43)" fg:x="1241" fg:w="3"/><text x="99.7688%" y="591.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.5188%" y="565" width="0.2406%" height="15" fill="rgb(250,161,5)" fg:x="1241" fg:w="3"/><text x="99.7688%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="99.5188%" y="549" width="0.2406%" height="15" fill="rgb(218,225,18)" fg:x="1241" fg:w="3"/><text x="99.7688%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="99.5188%" y="533" width="0.2406%" height="15" fill="rgb(245,45,42)" fg:x="1241" fg:w="3"/><text x="99.7688%" y="543.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="99.5188%" y="517" width="0.2406%" height="15" fill="rgb(211,115,1)" fg:x="1241" fg:w="3"/><text x="99.7688%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.5188%" y="501" width="0.2406%" height="15" fill="rgb(248,133,52)" fg:x="1241" fg:w="3"/><text x="99.7688%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5188%" y="485" width="0.2406%" height="15" fill="rgb(238,100,21)" fg:x="1241" fg:w="3"/><text x="99.7688%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.5990%" y="469" width="0.1604%" height="15" fill="rgb(247,144,11)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5990%" y="453" width="0.1604%" height="15" fill="rgb(206,164,16)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="463.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.5990%" y="437" width="0.1604%" height="15" fill="rgb(222,34,3)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6792%" y="421" width="0.0802%" height="15" fill="rgb(248,82,4)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6792%" y="405" width="0.0802%" height="15" fill="rgb(228,81,46)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.6792%" y="389" width="0.0802%" height="15" fill="rgb(227,67,47)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6792%" y="373" width="0.0802%" height="15" fill="rgb(215,93,53)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6792%" y="357" width="0.0802%" height="15" fill="rgb(248,194,39)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.6792%" y="341" width="0.0802%" height="15" fill="rgb(215,5,19)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6792%" y="325" width="0.0802%" height="15" fill="rgb(226,215,51)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6792%" y="309" width="0.0802%" height="15" fill="rgb(225,56,26)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.6792%" y="293" width="0.0802%" height="15" fill="rgb(222,75,29)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6792%" y="277" width="0.0802%" height="15" fill="rgb(236,139,6)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6792%" y="261" width="0.0802%" height="15" fill="rgb(223,137,36)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.6792%" y="245" width="0.0802%" height="15" fill="rgb(226,99,2)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6792%" y="229" width="0.0802%" height="15" fill="rgb(206,133,23)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6792%" y="213" width="0.0802%" height="15" fill="rgb(243,173,15)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.6792%" y="197" width="0.0802%" height="15" fill="rgb(228,69,28)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="207.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.6792%" y="181" width="0.0802%" height="15" fill="rgb(212,51,22)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="191.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="99.6792%" y="165" width="0.0802%" height="15" fill="rgb(227,113,0)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="175.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="99.7594%" y="597" width="0.0802%" height="15" fill="rgb(252,84,27)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="607.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.7594%" y="581" width="0.0802%" height="15" fill="rgb(223,145,39)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.7594%" y="565" width="0.0802%" height="15" fill="rgb(239,219,30)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.7594%" y="549" width="0.0802%" height="15" fill="rgb(224,196,39)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="559.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (371 samples, 29.75%)</title><rect x="70.1684%" y="789" width="29.7514%" height="15" fill="rgb(205,35,43)" fg:x="875" fg:w="371"/><text x="70.4184%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterio..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (371 samples, 29.75%)</title><rect x="70.1684%" y="773" width="29.7514%" height="15" fill="rgb(228,201,21)" fg:x="875" fg:w="371"/><text x="70.4184%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (371 samples, 29.75%)</title><rect x="70.1684%" y="757" width="29.7514%" height="15" fill="rgb(237,118,16)" fg:x="875" fg:w="371"/><text x="70.4184%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (304 samples, 24.38%)</title><rect x="75.5413%" y="741" width="24.3785%" height="15" fill="rgb(241,17,19)" fg:x="942" fg:w="304"/><text x="75.7913%" y="751.50">engine::session::Session::evaluate_and_..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (304 samples, 24.38%)</title><rect x="75.5413%" y="725" width="24.3785%" height="15" fill="rgb(214,10,25)" fg:x="942" fg:w="304"/><text x="75.7913%" y="735.50">engine::perform::StandardPerformer::eva..</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (304 samples, 24.38%)</title><rect x="75.5413%" y="709" width="24.3785%" height="15" fill="rgb(238,37,29)" fg:x="942" fg:w="304"/><text x="75.7913%" y="719.50">&lt;kernel::plugins::SessionPlugins as ker..</text></g><g><title>core::iter::adapters::try_process (304 samples, 24.38%)</title><rect x="75.5413%" y="693" width="24.3785%" height="15" fill="rgb(253,83,25)" fg:x="942" fg:w="304"/><text x="75.7913%" y="703.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (304 samples, 24.38%)</title><rect x="75.5413%" y="677" width="24.3785%" height="15" fill="rgb(234,192,12)" fg:x="942" fg:w="304"/><text x="75.7913%" y="687.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (304 samples, 24.38%)</title><rect x="75.5413%" y="661" width="24.3785%" height="15" fill="rgb(241,216,45)" fg:x="942" fg:w="304"/><text x="75.7913%" y="671.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (304 samples, 24.38%)</title><rect x="75.5413%" y="645" width="24.3785%" height="15" fill="rgb(242,22,33)" fg:x="942" fg:w="304"/><text x="75.7913%" y="655.50">&lt;plugins_core::looking::LookingPlugin a..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (304 samples, 24.38%)</title><rect x="75.5413%" y="629" width="24.3785%" height="15" fill="rgb(231,105,49)" fg:x="942" fg:w="304"/><text x="75.7913%" y="639.50">&lt;engine::perform::StandardPerformer as ..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (5 samples, 0.40%)</title><rect x="99.5188%" y="613" width="0.4010%" height="15" fill="rgb(218,204,15)" fg:x="1241" fg:w="5"/><text x="99.7688%" y="623.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="99.8396%" y="597" width="0.0802%" height="15" fill="rgb(235,138,41)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="607.50"></text></g><g><title>all (1,247 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(246,0,9)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-92bfa6d4 (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(210,74,4)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1087.50">simple-92bfa6d4</text></g><g><title>_start (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(250,60,41)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(220,115,12)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(237,100,13)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(213,55,26)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(216,17,4)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(220,153,47)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(215,131,9)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(233,46,42)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(226,86,7)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(239,226,21)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(244,137,22)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,247 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(211,139,35)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(214,62,50)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,247 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(212,113,44)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(226,150,43)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,247 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(250,71,37)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,247 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(219,76,19)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;pprof::criterion::PProfProfiler as criterion::profiler::Profiler&gt;::stop_profiling (1 samples, 0.08%)</title><rect x="99.9198%" y="789" width="0.0802%" height="15" fill="rgb(250,39,11)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="799.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (1 samples, 0.08%)</title><rect x="99.9198%" y="773" width="0.0802%" height="15" fill="rgb(230,64,31)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="783.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir (1 samples, 0.08%)</title><rect x="99.9198%" y="757" width="0.0802%" height="15" fill="rgb(208,222,23)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="767.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="99.9198%" y="741" width="0.0802%" height="15" fill="rgb(227,125,18)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="751.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="99.9198%" y="725" width="0.0802%" height="15" fill="rgb(234,210,9)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="735.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir::{{closure}} (1 samples, 0.08%)</title><rect x="99.9198%" y="709" width="0.0802%" height="15" fill="rgb(217,127,24)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="719.50"></text></g><g><title>mkdir (1 samples, 0.08%)</title><rect x="99.9198%" y="693" width="0.0802%" height="15" fill="rgb(239,141,48)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="703.50"></text></g></svg></svg>