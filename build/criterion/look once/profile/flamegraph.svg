<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1126" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1109.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1109.00"> </text><svg id="frames" x="10" width="1180" total_samples="1267"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="613" width="0.0789%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.0789%" y="613" width="0.1579%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.3289%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0000%" y="693" width="0.3157%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="0.0000%" y="677" width="0.3157%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0000%" y="661" width="0.3157%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0000%" y="645" width="0.3157%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0000%" y="629" width="0.3157%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2368%" y="613" width="0.0789%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.4868%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2368%" y="597" width="0.0789%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="1"/><text x="0.4868%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2368%" y="581" width="0.0789%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="1"/><text x="0.4868%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2368%" y="565" width="0.0789%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="0.4868%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.2368%" y="549" width="0.0789%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="0.4868%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2368%" y="533" width="0.0789%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.4868%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.39%)</title><rect x="0.0000%" y="709" width="0.3946%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3157%" y="693" width="0.0789%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="1"/><text x="0.5657%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.47%)</title><rect x="0.0000%" y="725" width="0.4736%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="6"/><text x="0.2500%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="0.3946%" y="709" width="0.0789%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.6446%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.3946%" y="693" width="0.0789%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="0.6446%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="0.6314%" y="629" width="0.0789%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="1"/><text x="0.8814%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="0.6314%" y="613" width="0.0789%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="1"/><text x="0.8814%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.6314%" y="597" width="0.0789%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="1"/><text x="0.8814%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="0.6314%" y="581" width="0.0789%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="1"/><text x="0.8814%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.6314%" y="565" width="0.0789%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="1"/><text x="0.8814%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.6314%" y="549" width="0.0789%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="1"/><text x="0.8814%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="0.6314%" y="533" width="0.0789%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="1"/><text x="0.8814%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="0.6314%" y="517" width="0.0789%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="1"/><text x="0.8814%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="0.6314%" y="501" width="0.0789%" height="15" fill="rgb(225,111,53)" fg:x="8" fg:w="1"/><text x="0.8814%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="0.6314%" y="485" width="0.0789%" height="15" fill="rgb(238,160,17)" fg:x="8" fg:w="1"/><text x="0.8814%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="0.6314%" y="469" width="0.0789%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="1"/><text x="0.8814%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="0.6314%" y="453" width="0.0789%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="1"/><text x="0.8814%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="0.6314%" y="437" width="0.0789%" height="15" fill="rgb(209,103,24)" fg:x="8" fg:w="1"/><text x="0.8814%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="0.6314%" y="421" width="0.0789%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="1"/><text x="0.8814%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="0.6314%" y="405" width="0.0789%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="1"/><text x="0.8814%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="0.6314%" y="389" width="0.0789%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="1"/><text x="0.8814%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="0.6314%" y="373" width="0.0789%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="1"/><text x="0.8814%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="0.6314%" y="357" width="0.0789%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="1"/><text x="0.8814%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="0.6314%" y="341" width="0.0789%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="1"/><text x="0.8814%" y="351.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="0.7103%" y="629" width="0.0789%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="1"/><text x="0.9603%" y="639.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="0.7103%" y="613" width="0.0789%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="1"/><text x="0.9603%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="0.7103%" y="597" width="0.0789%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="1"/><text x="0.9603%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="0.7103%" y="581" width="0.0789%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="1"/><text x="0.9603%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="0.7103%" y="565" width="0.0789%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="1"/><text x="0.9603%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="0.7103%" y="549" width="0.0789%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="1"/><text x="0.9603%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.47%)</title><rect x="0.4736%" y="725" width="0.4736%" height="15" fill="rgb(213,116,39)" fg:x="6" fg:w="6"/><text x="0.7236%" y="735.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (6 samples, 0.47%)</title><rect x="0.4736%" y="709" width="0.4736%" height="15" fill="rgb(222,207,29)" fg:x="6" fg:w="6"/><text x="0.7236%" y="719.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.47%)</title><rect x="0.4736%" y="693" width="0.4736%" height="15" fill="rgb(206,96,30)" fg:x="6" fg:w="6"/><text x="0.7236%" y="703.50"></text></g><g><title>engine::session::Session::initialize (6 samples, 0.47%)</title><rect x="0.4736%" y="677" width="0.4736%" height="15" fill="rgb(218,138,4)" fg:x="6" fg:w="6"/><text x="0.7236%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.47%)</title><rect x="0.4736%" y="661" width="0.4736%" height="15" fill="rgb(250,191,14)" fg:x="6" fg:w="6"/><text x="0.7236%" y="671.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.39%)</title><rect x="0.5525%" y="645" width="0.3946%" height="15" fill="rgb(239,60,40)" fg:x="7" fg:w="5"/><text x="0.8025%" y="655.50"></text></g><g><title>libloading::safe::Library::new (2 samples, 0.16%)</title><rect x="0.7893%" y="629" width="0.1579%" height="15" fill="rgb(206,27,48)" fg:x="10" fg:w="2"/><text x="1.0393%" y="639.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="0.7893%" y="613" width="0.1579%" height="15" fill="rgb(225,35,8)" fg:x="10" fg:w="2"/><text x="1.0393%" y="623.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="0.8682%" y="597" width="0.0789%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="1"/><text x="1.1182%" y="607.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="0.8682%" y="581" width="0.0789%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="1"/><text x="1.1182%" y="591.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="0.8682%" y="565" width="0.0789%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="1"/><text x="1.1182%" y="575.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="0.8682%" y="549" width="0.0789%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="1"/><text x="1.1182%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.0260%" y="693" width="0.0789%" height="15" fill="rgb(251,118,11)" fg:x="13" fg:w="1"/><text x="1.2760%" y="703.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="1.1050%" y="693" width="0.0789%" height="15" fill="rgb(217,147,25)" fg:x="14" fg:w="1"/><text x="1.3550%" y="703.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="1.1050%" y="677" width="0.0789%" height="15" fill="rgb(247,81,37)" fg:x="14" fg:w="1"/><text x="1.3550%" y="687.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="1.1050%" y="661" width="0.0789%" height="15" fill="rgb(209,12,38)" fg:x="14" fg:w="1"/><text x="1.3550%" y="671.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="1.1050%" y="645" width="0.0789%" height="15" fill="rgb(227,1,9)" fg:x="14" fg:w="1"/><text x="1.3550%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="1.1050%" y="629" width="0.0789%" height="15" fill="rgb(248,47,43)" fg:x="14" fg:w="1"/><text x="1.3550%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="1.1050%" y="613" width="0.0789%" height="15" fill="rgb(221,10,30)" fg:x="14" fg:w="1"/><text x="1.3550%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="1.1050%" y="597" width="0.0789%" height="15" fill="rgb(210,229,1)" fg:x="14" fg:w="1"/><text x="1.3550%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="1.2628%" y="597" width="0.1579%" height="15" fill="rgb(222,148,37)" fg:x="16" fg:w="2"/><text x="1.5128%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.3418%" y="581" width="0.0789%" height="15" fill="rgb(234,67,33)" fg:x="17" fg:w="1"/><text x="1.5918%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.3418%" y="565" width="0.0789%" height="15" fill="rgb(247,98,35)" fg:x="17" fg:w="1"/><text x="1.5918%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="1.3418%" y="549" width="0.0789%" height="15" fill="rgb(247,138,52)" fg:x="17" fg:w="1"/><text x="1.5918%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.4207%" y="565" width="0.0789%" height="15" fill="rgb(213,79,30)" fg:x="18" fg:w="1"/><text x="1.6707%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.4207%" y="549" width="0.0789%" height="15" fill="rgb(246,177,23)" fg:x="18" fg:w="1"/><text x="1.6707%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.4207%" y="533" width="0.0789%" height="15" fill="rgb(230,62,27)" fg:x="18" fg:w="1"/><text x="1.6707%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.4996%" y="549" width="0.0789%" height="15" fill="rgb(216,154,8)" fg:x="19" fg:w="1"/><text x="1.7496%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.4996%" y="533" width="0.0789%" height="15" fill="rgb(244,35,45)" fg:x="19" fg:w="1"/><text x="1.7496%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.4996%" y="517" width="0.0789%" height="15" fill="rgb(251,115,12)" fg:x="19" fg:w="1"/><text x="1.7496%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="1.4207%" y="581" width="0.2368%" height="15" fill="rgb(240,54,50)" fg:x="18" fg:w="3"/><text x="1.6707%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.4996%" y="565" width="0.1579%" height="15" fill="rgb(233,84,52)" fg:x="19" fg:w="2"/><text x="1.7496%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.5785%" y="549" width="0.0789%" height="15" fill="rgb(207,117,47)" fg:x="20" fg:w="1"/><text x="1.8285%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.63%)</title><rect x="1.1839%" y="629" width="0.6314%" height="15" fill="rgb(249,43,39)" fg:x="15" fg:w="8"/><text x="1.4339%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.63%)</title><rect x="1.1839%" y="613" width="0.6314%" height="15" fill="rgb(209,38,44)" fg:x="15" fg:w="8"/><text x="1.4339%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="1.4207%" y="597" width="0.3946%" height="15" fill="rgb(236,212,23)" fg:x="18" fg:w="5"/><text x="1.6707%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.6575%" y="581" width="0.1579%" height="15" fill="rgb(242,79,21)" fg:x="21" fg:w="2"/><text x="1.9075%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="1.6575%" y="565" width="0.1579%" height="15" fill="rgb(211,96,35)" fg:x="21" fg:w="2"/><text x="1.9075%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.8153%" y="629" width="0.1579%" height="15" fill="rgb(253,215,40)" fg:x="23" fg:w="2"/><text x="2.0653%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="1.8153%" y="613" width="0.1579%" height="15" fill="rgb(211,81,21)" fg:x="23" fg:w="2"/><text x="2.0653%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.8942%" y="597" width="0.0789%" height="15" fill="rgb(208,190,38)" fg:x="24" fg:w="1"/><text x="2.1442%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.8942%" y="581" width="0.0789%" height="15" fill="rgb(235,213,38)" fg:x="24" fg:w="1"/><text x="2.1442%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.8942%" y="565" width="0.0789%" height="15" fill="rgb(237,122,38)" fg:x="24" fg:w="1"/><text x="2.1442%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8942%" y="549" width="0.0789%" height="15" fill="rgb(244,218,35)" fg:x="24" fg:w="1"/><text x="2.1442%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="1.9732%" y="613" width="0.0789%" height="15" fill="rgb(240,68,47)" fg:x="25" fg:w="1"/><text x="2.2232%" y="623.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="1.9732%" y="597" width="0.0789%" height="15" fill="rgb(210,16,53)" fg:x="25" fg:w="1"/><text x="2.2232%" y="607.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="1.9732%" y="581" width="0.0789%" height="15" fill="rgb(235,124,12)" fg:x="25" fg:w="1"/><text x="2.2232%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.0521%" y="581" width="0.0789%" height="15" fill="rgb(224,169,11)" fg:x="26" fg:w="1"/><text x="2.3021%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1310%" y="581" width="0.0789%" height="15" fill="rgb(250,166,2)" fg:x="27" fg:w="1"/><text x="2.3810%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.1310%" y="565" width="0.0789%" height="15" fill="rgb(242,216,29)" fg:x="27" fg:w="1"/><text x="2.3810%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.1310%" y="549" width="0.0789%" height="15" fill="rgb(230,116,27)" fg:x="27" fg:w="1"/><text x="2.3810%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="2.1310%" y="533" width="0.0789%" height="15" fill="rgb(228,99,48)" fg:x="27" fg:w="1"/><text x="2.3810%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="2.2099%" y="581" width="0.0789%" height="15" fill="rgb(253,11,6)" fg:x="28" fg:w="1"/><text x="2.4599%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.2099%" y="565" width="0.0789%" height="15" fill="rgb(247,143,39)" fg:x="28" fg:w="1"/><text x="2.4599%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.2099%" y="549" width="0.0789%" height="15" fill="rgb(236,97,10)" fg:x="28" fg:w="1"/><text x="2.4599%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="2.2889%" y="549" width="0.0789%" height="15" fill="rgb(233,208,19)" fg:x="29" fg:w="1"/><text x="2.5389%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.3678%" y="533" width="0.0789%" height="15" fill="rgb(216,164,2)" fg:x="30" fg:w="1"/><text x="2.6178%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.3678%" y="517" width="0.0789%" height="15" fill="rgb(220,129,5)" fg:x="30" fg:w="1"/><text x="2.6178%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.4467%" y="517" width="0.1579%" height="15" fill="rgb(242,17,10)" fg:x="31" fg:w="2"/><text x="2.6967%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4467%" y="501" width="0.1579%" height="15" fill="rgb(242,107,0)" fg:x="31" fg:w="2"/><text x="2.6967%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.4467%" y="485" width="0.1579%" height="15" fill="rgb(251,28,31)" fg:x="31" fg:w="2"/><text x="2.6967%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4467%" y="469" width="0.1579%" height="15" fill="rgb(233,223,10)" fg:x="31" fg:w="2"/><text x="2.6967%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.4467%" y="453" width="0.1579%" height="15" fill="rgb(215,21,27)" fg:x="31" fg:w="2"/><text x="2.6967%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4467%" y="437" width="0.1579%" height="15" fill="rgb(232,23,21)" fg:x="31" fg:w="2"/><text x="2.6967%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.4467%" y="421" width="0.1579%" height="15" fill="rgb(244,5,23)" fg:x="31" fg:w="2"/><text x="2.6967%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="2.4467%" y="405" width="0.1579%" height="15" fill="rgb(226,81,46)" fg:x="31" fg:w="2"/><text x="2.6967%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="2.4467%" y="389" width="0.1579%" height="15" fill="rgb(247,70,30)" fg:x="31" fg:w="2"/><text x="2.6967%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5257%" y="373" width="0.0789%" height="15" fill="rgb(212,68,19)" fg:x="32" fg:w="1"/><text x="2.7757%" y="383.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.66%)</title><rect x="1.0260%" y="709" width="1.6575%" height="15" fill="rgb(240,187,13)" fg:x="13" fg:w="21"/><text x="1.2760%" y="719.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.50%)</title><rect x="1.1839%" y="693" width="1.4996%" height="15" fill="rgb(223,113,26)" fg:x="15" fg:w="19"/><text x="1.4339%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.50%)</title><rect x="1.1839%" y="677" width="1.4996%" height="15" fill="rgb(206,192,2)" fg:x="15" fg:w="19"/><text x="1.4339%" y="687.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (19 samples, 1.50%)</title><rect x="1.1839%" y="661" width="1.4996%" height="15" fill="rgb(241,108,4)" fg:x="15" fg:w="19"/><text x="1.4339%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (19 samples, 1.50%)</title><rect x="1.1839%" y="645" width="1.4996%" height="15" fill="rgb(247,173,49)" fg:x="15" fg:w="19"/><text x="1.4339%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.71%)</title><rect x="1.9732%" y="629" width="0.7103%" height="15" fill="rgb(224,114,35)" fg:x="25" fg:w="9"/><text x="2.2232%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.63%)</title><rect x="2.0521%" y="613" width="0.6314%" height="15" fill="rgb(245,159,27)" fg:x="26" fg:w="8"/><text x="2.3021%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.63%)</title><rect x="2.0521%" y="597" width="0.6314%" height="15" fill="rgb(245,172,44)" fg:x="26" fg:w="8"/><text x="2.3021%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.39%)</title><rect x="2.2889%" y="581" width="0.3946%" height="15" fill="rgb(236,23,11)" fg:x="29" fg:w="5"/><text x="2.5389%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.39%)</title><rect x="2.2889%" y="565" width="0.3946%" height="15" fill="rgb(205,117,38)" fg:x="29" fg:w="5"/><text x="2.5389%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="2.3678%" y="549" width="0.3157%" height="15" fill="rgb(237,72,25)" fg:x="30" fg:w="4"/><text x="2.6178%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="2.4467%" y="533" width="0.2368%" height="15" fill="rgb(244,70,9)" fg:x="31" fg:w="3"/><text x="2.6967%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.6046%" y="517" width="0.0789%" height="15" fill="rgb(217,125,39)" fg:x="33" fg:w="1"/><text x="2.8546%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;engine::identifiers::model::Identifiers&gt;&gt; (1 samples, 0.08%)</title><rect x="2.6835%" y="661" width="0.0789%" height="15" fill="rgb(235,36,10)" fg:x="34" fg:w="1"/><text x="2.9335%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="2.6835%" y="645" width="0.0789%" height="15" fill="rgb(251,123,47)" fg:x="34" fg:w="1"/><text x="2.9335%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6835%" y="629" width="0.0789%" height="15" fill="rgb(221,13,13)" fg:x="34" fg:w="1"/><text x="2.9335%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="2.6835%" y="677" width="0.1579%" height="15" fill="rgb(238,131,9)" fg:x="34" fg:w="2"/><text x="2.9335%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="2.7624%" y="661" width="0.0789%" height="15" fill="rgb(211,50,8)" fg:x="35" fg:w="1"/><text x="3.0124%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.7624%" y="645" width="0.0789%" height="15" fill="rgb(245,182,24)" fg:x="35" fg:w="1"/><text x="3.0124%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.7624%" y="629" width="0.0789%" height="15" fill="rgb(242,14,37)" fg:x="35" fg:w="1"/><text x="3.0124%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.7624%" y="613" width="0.0789%" height="15" fill="rgb(246,228,12)" fg:x="35" fg:w="1"/><text x="3.0124%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.7624%" y="597" width="0.0789%" height="15" fill="rgb(213,55,15)" fg:x="35" fg:w="1"/><text x="3.0124%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="2.6835%" y="693" width="0.2368%" height="15" fill="rgb(209,9,3)" fg:x="34" fg:w="3"/><text x="2.9335%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="2.8414%" y="677" width="0.0789%" height="15" fill="rgb(230,59,30)" fg:x="36" fg:w="1"/><text x="3.0914%" y="687.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="2.8414%" y="661" width="0.0789%" height="15" fill="rgb(209,121,21)" fg:x="36" fg:w="1"/><text x="3.0914%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8414%" y="645" width="0.0789%" height="15" fill="rgb(220,109,13)" fg:x="36" fg:w="1"/><text x="3.0914%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="2.8414%" y="629" width="0.0789%" height="15" fill="rgb(232,18,1)" fg:x="36" fg:w="1"/><text x="3.0914%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.8414%" y="613" width="0.0789%" height="15" fill="rgb(215,41,42)" fg:x="36" fg:w="1"/><text x="3.0914%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="2.8414%" y="597" width="0.0789%" height="15" fill="rgb(224,123,36)" fg:x="36" fg:w="1"/><text x="3.0914%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="2.9203%" y="677" width="0.0789%" height="15" fill="rgb(240,125,3)" fg:x="37" fg:w="1"/><text x="3.1703%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.9992%" y="645" width="0.0789%" height="15" fill="rgb(205,98,50)" fg:x="38" fg:w="1"/><text x="3.2492%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.9992%" y="629" width="0.0789%" height="15" fill="rgb(205,185,37)" fg:x="38" fg:w="1"/><text x="3.2492%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.9992%" y="613" width="0.0789%" height="15" fill="rgb(238,207,15)" fg:x="38" fg:w="1"/><text x="3.2492%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.9992%" y="597" width="0.0789%" height="15" fill="rgb(213,199,42)" fg:x="38" fg:w="1"/><text x="3.2492%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.9992%" y="581" width="0.0789%" height="15" fill="rgb(235,201,11)" fg:x="38" fg:w="1"/><text x="3.2492%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.9992%" y="565" width="0.0789%" height="15" fill="rgb(207,46,11)" fg:x="38" fg:w="1"/><text x="3.2492%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.9992%" y="549" width="0.0789%" height="15" fill="rgb(241,35,35)" fg:x="38" fg:w="1"/><text x="3.2492%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="2.9992%" y="533" width="0.0789%" height="15" fill="rgb(243,32,47)" fg:x="38" fg:w="1"/><text x="3.2492%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.9992%" y="517" width="0.0789%" height="15" fill="rgb(247,202,23)" fg:x="38" fg:w="1"/><text x="3.2492%" y="527.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="2.9992%" y="677" width="0.1579%" height="15" fill="rgb(219,102,11)" fg:x="38" fg:w="2"/><text x="3.2492%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="2.9992%" y="661" width="0.1579%" height="15" fill="rgb(243,110,44)" fg:x="38" fg:w="2"/><text x="3.2492%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.0781%" y="645" width="0.0789%" height="15" fill="rgb(222,74,54)" fg:x="39" fg:w="1"/><text x="3.3281%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.0781%" y="629" width="0.0789%" height="15" fill="rgb(216,99,12)" fg:x="39" fg:w="1"/><text x="3.3281%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.0781%" y="613" width="0.0789%" height="15" fill="rgb(226,22,26)" fg:x="39" fg:w="1"/><text x="3.3281%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.0781%" y="597" width="0.0789%" height="15" fill="rgb(217,163,10)" fg:x="39" fg:w="1"/><text x="3.3281%" y="607.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.55%)</title><rect x="2.6835%" y="709" width="0.5525%" height="15" fill="rgb(213,25,53)" fg:x="34" fg:w="7"/><text x="2.9335%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="2.9203%" y="693" width="0.3157%" height="15" fill="rgb(252,105,26)" fg:x="37" fg:w="4"/><text x="3.1703%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="3.1571%" y="677" width="0.0789%" height="15" fill="rgb(220,39,43)" fg:x="40" fg:w="1"/><text x="3.4071%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.1571%" y="661" width="0.0789%" height="15" fill="rgb(229,68,48)" fg:x="40" fg:w="1"/><text x="3.4071%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.1571%" y="645" width="0.0789%" height="15" fill="rgb(252,8,32)" fg:x="40" fg:w="1"/><text x="3.4071%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.1571%" y="629" width="0.0789%" height="15" fill="rgb(223,20,43)" fg:x="40" fg:w="1"/><text x="3.4071%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.1571%" y="613" width="0.0789%" height="15" fill="rgb(229,81,49)" fg:x="40" fg:w="1"/><text x="3.4071%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.1571%" y="597" width="0.0789%" height="15" fill="rgb(236,28,36)" fg:x="40" fg:w="1"/><text x="3.4071%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1571%" y="581" width="0.0789%" height="15" fill="rgb(249,185,26)" fg:x="40" fg:w="1"/><text x="3.4071%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1571%" y="565" width="0.0789%" height="15" fill="rgb(249,174,33)" fg:x="40" fg:w="1"/><text x="3.4071%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1571%" y="549" width="0.0789%" height="15" fill="rgb(233,201,37)" fg:x="40" fg:w="1"/><text x="3.4071%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1571%" y="533" width="0.0789%" height="15" fill="rgb(221,78,26)" fg:x="40" fg:w="1"/><text x="3.4071%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.1571%" y="517" width="0.0789%" height="15" fill="rgb(250,127,30)" fg:x="40" fg:w="1"/><text x="3.4071%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.1571%" y="501" width="0.0789%" height="15" fill="rgb(230,49,44)" fg:x="40" fg:w="1"/><text x="3.4071%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.1571%" y="485" width="0.0789%" height="15" fill="rgb(229,67,23)" fg:x="40" fg:w="1"/><text x="3.4071%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.1571%" y="469" width="0.0789%" height="15" fill="rgb(249,83,47)" fg:x="40" fg:w="1"/><text x="3.4071%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.1571%" y="453" width="0.0789%" height="15" fill="rgb(215,43,3)" fg:x="40" fg:w="1"/><text x="3.4071%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.1571%" y="437" width="0.0789%" height="15" fill="rgb(238,154,13)" fg:x="40" fg:w="1"/><text x="3.4071%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.1571%" y="421" width="0.0789%" height="15" fill="rgb(219,56,2)" fg:x="40" fg:w="1"/><text x="3.4071%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="3.2360%" y="661" width="0.0789%" height="15" fill="rgb(233,0,4)" fg:x="41" fg:w="1"/><text x="3.4860%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="3.2360%" y="645" width="0.0789%" height="15" fill="rgb(235,30,7)" fg:x="41" fg:w="1"/><text x="3.4860%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2360%" y="629" width="0.0789%" height="15" fill="rgb(250,79,13)" fg:x="41" fg:w="1"/><text x="3.4860%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="3.3149%" y="661" width="0.0789%" height="15" fill="rgb(211,146,34)" fg:x="42" fg:w="1"/><text x="3.5649%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.3149%" y="645" width="0.0789%" height="15" fill="rgb(228,22,38)" fg:x="42" fg:w="1"/><text x="3.5649%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="3.2360%" y="677" width="0.2368%" height="15" fill="rgb(235,168,5)" fg:x="41" fg:w="3"/><text x="3.4860%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="3.3938%" y="661" width="0.0789%" height="15" fill="rgb(221,155,16)" fg:x="43" fg:w="1"/><text x="3.6438%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.3938%" y="645" width="0.0789%" height="15" fill="rgb(215,215,53)" fg:x="43" fg:w="1"/><text x="3.6438%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.3938%" y="629" width="0.0789%" height="15" fill="rgb(223,4,10)" fg:x="43" fg:w="1"/><text x="3.6438%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.3938%" y="613" width="0.0789%" height="15" fill="rgb(234,103,6)" fg:x="43" fg:w="1"/><text x="3.6438%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.3938%" y="597" width="0.0789%" height="15" fill="rgb(227,97,0)" fg:x="43" fg:w="1"/><text x="3.6438%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="3.3938%" y="581" width="0.0789%" height="15" fill="rgb(234,150,53)" fg:x="43" fg:w="1"/><text x="3.6438%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="3.3938%" y="565" width="0.0789%" height="15" fill="rgb(228,201,54)" fg:x="43" fg:w="1"/><text x="3.6438%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.3938%" y="549" width="0.0789%" height="15" fill="rgb(222,22,37)" fg:x="43" fg:w="1"/><text x="3.6438%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.3938%" y="533" width="0.0789%" height="15" fill="rgb(237,53,32)" fg:x="43" fg:w="1"/><text x="3.6438%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.4728%" y="677" width="0.0789%" height="15" fill="rgb(233,25,53)" fg:x="44" fg:w="1"/><text x="3.7228%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.4728%" y="661" width="0.0789%" height="15" fill="rgb(210,40,34)" fg:x="44" fg:w="1"/><text x="3.7228%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.4728%" y="645" width="0.0789%" height="15" fill="rgb(241,220,44)" fg:x="44" fg:w="1"/><text x="3.7228%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.4728%" y="629" width="0.0789%" height="15" fill="rgb(235,28,35)" fg:x="44" fg:w="1"/><text x="3.7228%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.4728%" y="613" width="0.0789%" height="15" fill="rgb(210,56,17)" fg:x="44" fg:w="1"/><text x="3.7228%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.4728%" y="597" width="0.0789%" height="15" fill="rgb(224,130,29)" fg:x="44" fg:w="1"/><text x="3.7228%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5517%" y="533" width="0.0789%" height="15" fill="rgb(235,212,8)" fg:x="45" fg:w="1"/><text x="3.8017%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5517%" y="517" width="0.0789%" height="15" fill="rgb(223,33,50)" fg:x="45" fg:w="1"/><text x="3.8017%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5517%" y="501" width="0.0789%" height="15" fill="rgb(219,149,13)" fg:x="45" fg:w="1"/><text x="3.8017%" y="511.50"></text></g><g><title>plugins_core::build::Build::into_entry (6 samples, 0.47%)</title><rect x="3.2360%" y="709" width="0.4736%" height="15" fill="rgb(250,156,29)" fg:x="41" fg:w="6"/><text x="3.4860%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.47%)</title><rect x="3.2360%" y="693" width="0.4736%" height="15" fill="rgb(216,193,19)" fg:x="41" fg:w="6"/><text x="3.4860%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.5517%" y="677" width="0.1579%" height="15" fill="rgb(216,135,14)" fg:x="45" fg:w="2"/><text x="3.8017%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="3.5517%" y="661" width="0.1579%" height="15" fill="rgb(241,47,5)" fg:x="45" fg:w="2"/><text x="3.8017%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="3.5517%" y="645" width="0.1579%" height="15" fill="rgb(233,42,35)" fg:x="45" fg:w="2"/><text x="3.8017%" y="655.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="3.5517%" y="629" width="0.1579%" height="15" fill="rgb(231,13,6)" fg:x="45" fg:w="2"/><text x="3.8017%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="3.5517%" y="613" width="0.1579%" height="15" fill="rgb(207,181,40)" fg:x="45" fg:w="2"/><text x="3.8017%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="3.5517%" y="597" width="0.1579%" height="15" fill="rgb(254,173,49)" fg:x="45" fg:w="2"/><text x="3.8017%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.5517%" y="581" width="0.1579%" height="15" fill="rgb(221,1,38)" fg:x="45" fg:w="2"/><text x="3.8017%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="3.5517%" y="565" width="0.1579%" height="15" fill="rgb(206,124,46)" fg:x="45" fg:w="2"/><text x="3.8017%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.5517%" y="549" width="0.1579%" height="15" fill="rgb(249,21,11)" fg:x="45" fg:w="2"/><text x="3.8017%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.6306%" y="533" width="0.0789%" height="15" fill="rgb(222,201,40)" fg:x="46" fg:w="1"/><text x="3.8806%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6306%" y="517" width="0.0789%" height="15" fill="rgb(235,61,29)" fg:x="46" fg:w="1"/><text x="3.8806%" y="527.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.7096%" y="709" width="0.0789%" height="15" fill="rgb(219,207,3)" fg:x="47" fg:w="1"/><text x="3.9596%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.7096%" y="693" width="0.0789%" height="15" fill="rgb(222,56,46)" fg:x="47" fg:w="1"/><text x="3.9596%" y="703.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.7096%" y="677" width="0.0789%" height="15" fill="rgb(239,76,54)" fg:x="47" fg:w="1"/><text x="3.9596%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.7096%" y="661" width="0.0789%" height="15" fill="rgb(231,124,27)" fg:x="47" fg:w="1"/><text x="3.9596%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.7096%" y="645" width="0.0789%" height="15" fill="rgb(249,195,6)" fg:x="47" fg:w="1"/><text x="3.9596%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.7096%" y="629" width="0.0789%" height="15" fill="rgb(237,174,47)" fg:x="47" fg:w="1"/><text x="3.9596%" y="639.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="3.7885%" y="693" width="0.0789%" height="15" fill="rgb(206,201,31)" fg:x="48" fg:w="1"/><text x="4.0385%" y="703.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="3.7885%" y="677" width="0.0789%" height="15" fill="rgb(231,57,52)" fg:x="48" fg:w="1"/><text x="4.0385%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.7885%" y="661" width="0.0789%" height="15" fill="rgb(248,177,22)" fg:x="48" fg:w="1"/><text x="4.0385%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7885%" y="645" width="0.0789%" height="15" fill="rgb(215,211,37)" fg:x="48" fg:w="1"/><text x="4.0385%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.7885%" y="629" width="0.0789%" height="15" fill="rgb(241,128,51)" fg:x="48" fg:w="1"/><text x="4.0385%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="3.8674%" y="613" width="0.0789%" height="15" fill="rgb(227,165,31)" fg:x="49" fg:w="1"/><text x="4.1174%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="3.8674%" y="597" width="0.0789%" height="15" fill="rgb(228,167,24)" fg:x="49" fg:w="1"/><text x="4.1174%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="3.9463%" y="613" width="0.1579%" height="15" fill="rgb(228,143,12)" fg:x="50" fg:w="2"/><text x="4.1963%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.0253%" y="597" width="0.0789%" height="15" fill="rgb(249,149,8)" fg:x="51" fg:w="1"/><text x="4.2753%" y="607.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="4.0253%" y="581" width="0.0789%" height="15" fill="rgb(243,35,44)" fg:x="51" fg:w="1"/><text x="4.2753%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.0253%" y="565" width="0.0789%" height="15" fill="rgb(246,89,9)" fg:x="51" fg:w="1"/><text x="4.2753%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.0253%" y="549" width="0.0789%" height="15" fill="rgb(233,213,13)" fg:x="51" fg:w="1"/><text x="4.2753%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.0253%" y="533" width="0.0789%" height="15" fill="rgb(233,141,41)" fg:x="51" fg:w="1"/><text x="4.2753%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.1042%" y="565" width="0.0789%" height="15" fill="rgb(239,167,4)" fg:x="52" fg:w="1"/><text x="4.3542%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.1042%" y="549" width="0.0789%" height="15" fill="rgb(209,217,16)" fg:x="52" fg:w="1"/><text x="4.3542%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.1042%" y="533" width="0.0789%" height="15" fill="rgb(219,88,35)" fg:x="52" fg:w="1"/><text x="4.3542%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.1042%" y="517" width="0.0789%" height="15" fill="rgb(220,193,23)" fg:x="52" fg:w="1"/><text x="4.3542%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.1042%" y="501" width="0.0789%" height="15" fill="rgb(230,90,52)" fg:x="52" fg:w="1"/><text x="4.3542%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.1042%" y="485" width="0.0789%" height="15" fill="rgb(252,106,19)" fg:x="52" fg:w="1"/><text x="4.3542%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.1042%" y="469" width="0.0789%" height="15" fill="rgb(206,74,20)" fg:x="52" fg:w="1"/><text x="4.3542%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.1042%" y="453" width="0.0789%" height="15" fill="rgb(230,138,44)" fg:x="52" fg:w="1"/><text x="4.3542%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.1042%" y="437" width="0.0789%" height="15" fill="rgb(235,182,43)" fg:x="52" fg:w="1"/><text x="4.3542%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.1042%" y="421" width="0.0789%" height="15" fill="rgb(242,16,51)" fg:x="52" fg:w="1"/><text x="4.3542%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.39%)</title><rect x="3.8674%" y="629" width="0.3946%" height="15" fill="rgb(248,9,4)" fg:x="49" fg:w="5"/><text x="4.1174%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="4.1042%" y="613" width="0.1579%" height="15" fill="rgb(210,31,22)" fg:x="52" fg:w="2"/><text x="4.3542%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="4.1042%" y="597" width="0.1579%" height="15" fill="rgb(239,54,39)" fg:x="52" fg:w="2"/><text x="4.3542%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="4.1042%" y="581" width="0.1579%" height="15" fill="rgb(230,99,41)" fg:x="52" fg:w="2"/><text x="4.3542%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="4.1831%" y="565" width="0.0789%" height="15" fill="rgb(253,106,12)" fg:x="53" fg:w="1"/><text x="4.4331%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.1831%" y="549" width="0.0789%" height="15" fill="rgb(213,46,41)" fg:x="53" fg:w="1"/><text x="4.4331%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1831%" y="533" width="0.0789%" height="15" fill="rgb(215,133,35)" fg:x="53" fg:w="1"/><text x="4.4331%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1831%" y="517" width="0.0789%" height="15" fill="rgb(213,28,5)" fg:x="53" fg:w="1"/><text x="4.4331%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1831%" y="501" width="0.0789%" height="15" fill="rgb(215,77,49)" fg:x="53" fg:w="1"/><text x="4.4331%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1831%" y="485" width="0.0789%" height="15" fill="rgb(248,100,22)" fg:x="53" fg:w="1"/><text x="4.4331%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1831%" y="469" width="0.0789%" height="15" fill="rgb(208,67,9)" fg:x="53" fg:w="1"/><text x="4.4331%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1831%" y="453" width="0.0789%" height="15" fill="rgb(219,133,21)" fg:x="53" fg:w="1"/><text x="4.4331%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.1831%" y="437" width="0.0789%" height="15" fill="rgb(246,46,29)" fg:x="53" fg:w="1"/><text x="4.4331%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.1831%" y="421" width="0.0789%" height="15" fill="rgb(246,185,52)" fg:x="53" fg:w="1"/><text x="4.4331%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.1831%" y="405" width="0.0789%" height="15" fill="rgb(252,136,11)" fg:x="53" fg:w="1"/><text x="4.4331%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1831%" y="389" width="0.0789%" height="15" fill="rgb(219,138,53)" fg:x="53" fg:w="1"/><text x="4.4331%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1831%" y="373" width="0.0789%" height="15" fill="rgb(211,51,23)" fg:x="53" fg:w="1"/><text x="4.4331%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.1831%" y="357" width="0.0789%" height="15" fill="rgb(247,221,28)" fg:x="53" fg:w="1"/><text x="4.4331%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.1831%" y="341" width="0.0789%" height="15" fill="rgb(251,222,45)" fg:x="53" fg:w="1"/><text x="4.4331%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.1831%" y="325" width="0.0789%" height="15" fill="rgb(217,162,53)" fg:x="53" fg:w="1"/><text x="4.4331%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.1831%" y="309" width="0.0789%" height="15" fill="rgb(229,93,14)" fg:x="53" fg:w="1"/><text x="4.4331%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1831%" y="293" width="0.0789%" height="15" fill="rgb(209,67,49)" fg:x="53" fg:w="1"/><text x="4.4331%" y="303.50"></text></g><g><title>plugins_core::build::Build::leads_to (6 samples, 0.47%)</title><rect x="3.8674%" y="645" width="0.4736%" height="15" fill="rgb(213,87,29)" fg:x="49" fg:w="6"/><text x="4.1174%" y="655.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="4.2620%" y="629" width="0.0789%" height="15" fill="rgb(205,151,52)" fg:x="54" fg:w="1"/><text x="4.5120%" y="639.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="4.2620%" y="613" width="0.0789%" height="15" fill="rgb(253,215,39)" fg:x="54" fg:w="1"/><text x="4.5120%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="4.2620%" y="597" width="0.0789%" height="15" fill="rgb(221,220,41)" fg:x="54" fg:w="1"/><text x="4.5120%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="4.2620%" y="581" width="0.0789%" height="15" fill="rgb(218,133,21)" fg:x="54" fg:w="1"/><text x="4.5120%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.2620%" y="565" width="0.0789%" height="15" fill="rgb(221,193,43)" fg:x="54" fg:w="1"/><text x="4.5120%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.2620%" y="549" width="0.0789%" height="15" fill="rgb(240,128,52)" fg:x="54" fg:w="1"/><text x="4.5120%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2620%" y="533" width="0.0789%" height="15" fill="rgb(253,114,12)" fg:x="54" fg:w="1"/><text x="4.5120%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.2620%" y="517" width="0.0789%" height="15" fill="rgb(215,223,47)" fg:x="54" fg:w="1"/><text x="4.5120%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.2620%" y="501" width="0.0789%" height="15" fill="rgb(248,225,23)" fg:x="54" fg:w="1"/><text x="4.5120%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.2620%" y="485" width="0.0789%" height="15" fill="rgb(250,108,0)" fg:x="54" fg:w="1"/><text x="4.5120%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.2620%" y="469" width="0.0789%" height="15" fill="rgb(228,208,7)" fg:x="54" fg:w="1"/><text x="4.5120%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.2620%" y="453" width="0.0789%" height="15" fill="rgb(244,45,10)" fg:x="54" fg:w="1"/><text x="4.5120%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.2620%" y="437" width="0.0789%" height="15" fill="rgb(207,125,25)" fg:x="54" fg:w="1"/><text x="4.5120%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.2620%" y="421" width="0.0789%" height="15" fill="rgb(210,195,18)" fg:x="54" fg:w="1"/><text x="4.5120%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.2620%" y="405" width="0.0789%" height="15" fill="rgb(249,80,12)" fg:x="54" fg:w="1"/><text x="4.5120%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.2620%" y="389" width="0.0789%" height="15" fill="rgb(221,65,9)" fg:x="54" fg:w="1"/><text x="4.5120%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.2620%" y="373" width="0.0789%" height="15" fill="rgb(235,49,36)" fg:x="54" fg:w="1"/><text x="4.5120%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.2620%" y="357" width="0.0789%" height="15" fill="rgb(225,32,20)" fg:x="54" fg:w="1"/><text x="4.5120%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2620%" y="341" width="0.0789%" height="15" fill="rgb(215,141,46)" fg:x="54" fg:w="1"/><text x="4.5120%" y="351.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.55%)</title><rect x="3.8674%" y="693" width="0.5525%" height="15" fill="rgb(250,160,47)" fg:x="49" fg:w="7"/><text x="4.1174%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.55%)</title><rect x="3.8674%" y="677" width="0.5525%" height="15" fill="rgb(216,222,40)" fg:x="49" fg:w="7"/><text x="4.1174%" y="687.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.55%)</title><rect x="3.8674%" y="661" width="0.5525%" height="15" fill="rgb(234,217,39)" fg:x="49" fg:w="7"/><text x="4.1174%" y="671.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="4.3410%" y="645" width="0.0789%" height="15" fill="rgb(207,178,40)" fg:x="55" fg:w="1"/><text x="4.5910%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="4.3410%" y="629" width="0.0789%" height="15" fill="rgb(221,136,13)" fg:x="55" fg:w="1"/><text x="4.5910%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="4.3410%" y="613" width="0.0789%" height="15" fill="rgb(249,199,10)" fg:x="55" fg:w="1"/><text x="4.5910%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.3410%" y="597" width="0.0789%" height="15" fill="rgb(249,222,13)" fg:x="55" fg:w="1"/><text x="4.5910%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="4.3410%" y="581" width="0.0789%" height="15" fill="rgb(244,185,38)" fg:x="55" fg:w="1"/><text x="4.5910%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.3410%" y="565" width="0.0789%" height="15" fill="rgb(236,202,9)" fg:x="55" fg:w="1"/><text x="4.5910%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.3410%" y="549" width="0.0789%" height="15" fill="rgb(250,229,37)" fg:x="55" fg:w="1"/><text x="4.5910%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.3410%" y="533" width="0.0789%" height="15" fill="rgb(206,174,23)" fg:x="55" fg:w="1"/><text x="4.5910%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.3410%" y="517" width="0.0789%" height="15" fill="rgb(211,33,43)" fg:x="55" fg:w="1"/><text x="4.5910%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.4199%" y="581" width="0.0789%" height="15" fill="rgb(245,58,50)" fg:x="56" fg:w="1"/><text x="4.6699%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="4.4988%" y="581" width="0.0789%" height="15" fill="rgb(244,68,36)" fg:x="57" fg:w="1"/><text x="4.7488%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4988%" y="565" width="0.0789%" height="15" fill="rgb(232,229,15)" fg:x="57" fg:w="1"/><text x="4.7488%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="4.5777%" y="549" width="0.1579%" height="15" fill="rgb(254,30,23)" fg:x="58" fg:w="2"/><text x="4.8277%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.5777%" y="533" width="0.1579%" height="15" fill="rgb(235,160,14)" fg:x="58" fg:w="2"/><text x="4.8277%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.5777%" y="517" width="0.1579%" height="15" fill="rgb(212,155,44)" fg:x="58" fg:w="2"/><text x="4.8277%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.5777%" y="501" width="0.1579%" height="15" fill="rgb(226,2,50)" fg:x="58" fg:w="2"/><text x="4.8277%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.5777%" y="485" width="0.1579%" height="15" fill="rgb(234,177,6)" fg:x="58" fg:w="2"/><text x="4.8277%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.5777%" y="469" width="0.1579%" height="15" fill="rgb(217,24,9)" fg:x="58" fg:w="2"/><text x="4.8277%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.6567%" y="453" width="0.0789%" height="15" fill="rgb(220,13,46)" fg:x="59" fg:w="1"/><text x="4.9067%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.55%)</title><rect x="4.4199%" y="597" width="0.5525%" height="15" fill="rgb(239,221,27)" fg:x="56" fg:w="7"/><text x="4.6699%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="4.5777%" y="581" width="0.3946%" height="15" fill="rgb(222,198,25)" fg:x="58" fg:w="5"/><text x="4.8277%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="4.5777%" y="565" width="0.3946%" height="15" fill="rgb(211,99,13)" fg:x="58" fg:w="5"/><text x="4.8277%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.7356%" y="549" width="0.2368%" height="15" fill="rgb(232,111,31)" fg:x="60" fg:w="3"/><text x="4.9856%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.8934%" y="533" width="0.0789%" height="15" fill="rgb(245,82,37)" fg:x="62" fg:w="1"/><text x="5.1434%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.8934%" y="517" width="0.0789%" height="15" fill="rgb(227,149,46)" fg:x="62" fg:w="1"/><text x="5.1434%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.8934%" y="501" width="0.0789%" height="15" fill="rgb(218,36,50)" fg:x="62" fg:w="1"/><text x="5.1434%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.8934%" y="485" width="0.0789%" height="15" fill="rgb(226,80,48)" fg:x="62" fg:w="1"/><text x="5.1434%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9724%" y="597" width="0.0789%" height="15" fill="rgb(238,224,15)" fg:x="63" fg:w="1"/><text x="5.2224%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.9724%" y="581" width="0.0789%" height="15" fill="rgb(241,136,10)" fg:x="63" fg:w="1"/><text x="5.2224%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9724%" y="565" width="0.0789%" height="15" fill="rgb(208,32,45)" fg:x="63" fg:w="1"/><text x="5.2224%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9724%" y="549" width="0.0789%" height="15" fill="rgb(207,135,9)" fg:x="63" fg:w="1"/><text x="5.2224%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9724%" y="533" width="0.0789%" height="15" fill="rgb(206,86,44)" fg:x="63" fg:w="1"/><text x="5.2224%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9724%" y="517" width="0.0789%" height="15" fill="rgb(245,177,15)" fg:x="63" fg:w="1"/><text x="5.2224%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9724%" y="501" width="0.0789%" height="15" fill="rgb(206,64,50)" fg:x="63" fg:w="1"/><text x="5.2224%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9724%" y="485" width="0.0789%" height="15" fill="rgb(234,36,40)" fg:x="63" fg:w="1"/><text x="5.2224%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9724%" y="469" width="0.0789%" height="15" fill="rgb(213,64,8)" fg:x="63" fg:w="1"/><text x="5.2224%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2092%" y="549" width="0.0789%" height="15" fill="rgb(210,75,36)" fg:x="66" fg:w="1"/><text x="5.4592%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.2881%" y="549" width="0.1579%" height="15" fill="rgb(229,88,21)" fg:x="67" fg:w="2"/><text x="5.5381%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="5.4459%" y="501" width="0.1579%" height="15" fill="rgb(252,204,47)" fg:x="69" fg:w="2"/><text x="5.6959%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.4459%" y="485" width="0.1579%" height="15" fill="rgb(208,77,27)" fg:x="69" fg:w="2"/><text x="5.6959%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5249%" y="469" width="0.0789%" height="15" fill="rgb(221,76,26)" fg:x="70" fg:w="1"/><text x="5.7749%" y="479.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.34%)</title><rect x="4.4199%" y="693" width="1.3418%" height="15" fill="rgb(225,139,18)" fg:x="56" fg:w="17"/><text x="4.6699%" y="703.50"></text></g><g><title>engine::session::Session::save_changes (17 samples, 1.34%)</title><rect x="4.4199%" y="677" width="1.3418%" height="15" fill="rgb(230,137,11)" fg:x="56" fg:w="17"/><text x="4.6699%" y="687.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.34%)</title><rect x="4.4199%" y="661" width="1.3418%" height="15" fill="rgb(212,28,1)" fg:x="56" fg:w="17"/><text x="4.6699%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.34%)</title><rect x="4.4199%" y="645" width="1.3418%" height="15" fill="rgb(248,164,17)" fg:x="56" fg:w="17"/><text x="4.6699%" y="655.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (17 samples, 1.34%)</title><rect x="4.4199%" y="629" width="1.3418%" height="15" fill="rgb(222,171,42)" fg:x="56" fg:w="17"/><text x="4.6699%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.34%)</title><rect x="4.4199%" y="613" width="1.3418%" height="15" fill="rgb(243,84,45)" fg:x="56" fg:w="17"/><text x="4.6699%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.71%)</title><rect x="5.0513%" y="597" width="0.7103%" height="15" fill="rgb(252,49,23)" fg:x="64" fg:w="9"/><text x="5.3013%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.63%)</title><rect x="5.1302%" y="581" width="0.6314%" height="15" fill="rgb(215,19,7)" fg:x="65" fg:w="8"/><text x="5.3802%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.63%)</title><rect x="5.1302%" y="565" width="0.6314%" height="15" fill="rgb(238,81,41)" fg:x="65" fg:w="8"/><text x="5.3802%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="5.4459%" y="549" width="0.3157%" height="15" fill="rgb(210,199,37)" fg:x="69" fg:w="4"/><text x="5.6959%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="5.4459%" y="533" width="0.3157%" height="15" fill="rgb(244,192,49)" fg:x="69" fg:w="4"/><text x="5.6959%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="5.4459%" y="517" width="0.3157%" height="15" fill="rgb(226,211,11)" fg:x="69" fg:w="4"/><text x="5.6959%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.6038%" y="501" width="0.1579%" height="15" fill="rgb(236,162,54)" fg:x="71" fg:w="2"/><text x="5.8538%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.6038%" y="485" width="0.1579%" height="15" fill="rgb(220,229,9)" fg:x="71" fg:w="2"/><text x="5.8538%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.6038%" y="469" width="0.1579%" height="15" fill="rgb(250,87,22)" fg:x="71" fg:w="2"/><text x="5.8538%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6827%" y="453" width="0.0789%" height="15" fill="rgb(239,43,17)" fg:x="72" fg:w="1"/><text x="5.9327%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.6827%" y="437" width="0.0789%" height="15" fill="rgb(231,177,25)" fg:x="72" fg:w="1"/><text x="5.9327%" y="447.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="5.7616%" y="693" width="0.0789%" height="15" fill="rgb(219,179,1)" fg:x="73" fg:w="1"/><text x="6.0116%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="5.7616%" y="677" width="0.0789%" height="15" fill="rgb(238,219,53)" fg:x="73" fg:w="1"/><text x="6.0116%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.8406%" y="581" width="0.0789%" height="15" fill="rgb(232,167,36)" fg:x="74" fg:w="1"/><text x="6.0906%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.8406%" y="565" width="0.0789%" height="15" fill="rgb(244,19,51)" fg:x="74" fg:w="1"/><text x="6.0906%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.8406%" y="549" width="0.0789%" height="15" fill="rgb(224,6,22)" fg:x="74" fg:w="1"/><text x="6.0906%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8406%" y="533" width="0.0789%" height="15" fill="rgb(224,145,5)" fg:x="74" fg:w="1"/><text x="6.0906%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.8406%" y="677" width="0.1579%" height="15" fill="rgb(234,130,49)" fg:x="74" fg:w="2"/><text x="6.0906%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="5.8406%" y="661" width="0.1579%" height="15" fill="rgb(254,6,2)" fg:x="74" fg:w="2"/><text x="6.0906%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="5.8406%" y="645" width="0.1579%" height="15" fill="rgb(208,96,46)" fg:x="74" fg:w="2"/><text x="6.0906%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="5.8406%" y="629" width="0.1579%" height="15" fill="rgb(239,3,39)" fg:x="74" fg:w="2"/><text x="6.0906%" y="639.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="5.8406%" y="613" width="0.1579%" height="15" fill="rgb(233,210,1)" fg:x="74" fg:w="2"/><text x="6.0906%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="5.8406%" y="597" width="0.1579%" height="15" fill="rgb(244,137,37)" fg:x="74" fg:w="2"/><text x="6.0906%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9195%" y="581" width="0.0789%" height="15" fill="rgb(240,136,2)" fg:x="75" fg:w="1"/><text x="6.1695%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.9195%" y="565" width="0.0789%" height="15" fill="rgb(239,18,37)" fg:x="75" fg:w="1"/><text x="6.1695%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9195%" y="549" width="0.0789%" height="15" fill="rgb(218,185,22)" fg:x="75" fg:w="1"/><text x="6.1695%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9195%" y="533" width="0.0789%" height="15" fill="rgb(225,218,4)" fg:x="75" fg:w="1"/><text x="6.1695%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9195%" y="517" width="0.0789%" height="15" fill="rgb(230,182,32)" fg:x="75" fg:w="1"/><text x="6.1695%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.9984%" y="629" width="0.0789%" height="15" fill="rgb(242,56,43)" fg:x="76" fg:w="1"/><text x="6.2484%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.9984%" y="613" width="0.0789%" height="15" fill="rgb(233,99,24)" fg:x="76" fg:w="1"/><text x="6.2484%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.9984%" y="597" width="0.0789%" height="15" fill="rgb(234,209,42)" fg:x="76" fg:w="1"/><text x="6.2484%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9984%" y="581" width="0.0789%" height="15" fill="rgb(227,7,12)" fg:x="76" fg:w="1"/><text x="6.2484%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9984%" y="565" width="0.0789%" height="15" fill="rgb(245,203,43)" fg:x="76" fg:w="1"/><text x="6.2484%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9984%" y="549" width="0.0789%" height="15" fill="rgb(238,205,33)" fg:x="76" fg:w="1"/><text x="6.2484%" y="559.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="6.0773%" y="613" width="0.0789%" height="15" fill="rgb(231,56,7)" fg:x="77" fg:w="1"/><text x="6.3273%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1563%" y="533" width="0.0789%" height="15" fill="rgb(244,186,29)" fg:x="78" fg:w="1"/><text x="6.4063%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1563%" y="517" width="0.0789%" height="15" fill="rgb(234,111,31)" fg:x="78" fg:w="1"/><text x="6.4063%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.1563%" y="501" width="0.0789%" height="15" fill="rgb(241,149,10)" fg:x="78" fg:w="1"/><text x="6.4063%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.1563%" y="581" width="0.1579%" height="15" fill="rgb(249,206,44)" fg:x="78" fg:w="2"/><text x="6.4063%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.1563%" y="565" width="0.1579%" height="15" fill="rgb(251,153,30)" fg:x="78" fg:w="2"/><text x="6.4063%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.1563%" y="549" width="0.1579%" height="15" fill="rgb(239,152,38)" fg:x="78" fg:w="2"/><text x="6.4063%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.2352%" y="533" width="0.0789%" height="15" fill="rgb(249,139,47)" fg:x="79" fg:w="1"/><text x="6.4852%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.2352%" y="517" width="0.0789%" height="15" fill="rgb(244,64,35)" fg:x="79" fg:w="1"/><text x="6.4852%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.2352%" y="501" width="0.0789%" height="15" fill="rgb(216,46,15)" fg:x="79" fg:w="1"/><text x="6.4852%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.2352%" y="485" width="0.0789%" height="15" fill="rgb(250,74,19)" fg:x="79" fg:w="1"/><text x="6.4852%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.2352%" y="469" width="0.0789%" height="15" fill="rgb(249,42,33)" fg:x="79" fg:w="1"/><text x="6.4852%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.2352%" y="453" width="0.0789%" height="15" fill="rgb(242,149,17)" fg:x="79" fg:w="1"/><text x="6.4852%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.2352%" y="437" width="0.0789%" height="15" fill="rgb(244,29,21)" fg:x="79" fg:w="1"/><text x="6.4852%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.2352%" y="421" width="0.0789%" height="15" fill="rgb(220,130,37)" fg:x="79" fg:w="1"/><text x="6.4852%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.2352%" y="405" width="0.0789%" height="15" fill="rgb(211,67,2)" fg:x="79" fg:w="1"/><text x="6.4852%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.2352%" y="389" width="0.0789%" height="15" fill="rgb(235,68,52)" fg:x="79" fg:w="1"/><text x="6.4852%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.2352%" y="373" width="0.0789%" height="15" fill="rgb(246,142,3)" fg:x="79" fg:w="1"/><text x="6.4852%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2352%" y="357" width="0.0789%" height="15" fill="rgb(241,25,7)" fg:x="79" fg:w="1"/><text x="6.4852%" y="367.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (5 samples, 0.39%)</title><rect x="5.9984%" y="661" width="0.3946%" height="15" fill="rgb(242,119,39)" fg:x="76" fg:w="5"/><text x="6.2484%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (5 samples, 0.39%)</title><rect x="5.9984%" y="645" width="0.3946%" height="15" fill="rgb(241,98,45)" fg:x="76" fg:w="5"/><text x="6.2484%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="6.0773%" y="629" width="0.3157%" height="15" fill="rgb(254,28,30)" fg:x="77" fg:w="4"/><text x="6.3273%" y="639.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="6.1563%" y="613" width="0.2368%" height="15" fill="rgb(241,142,54)" fg:x="78" fg:w="3"/><text x="6.4063%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="6.1563%" y="597" width="0.2368%" height="15" fill="rgb(222,85,15)" fg:x="78" fg:w="3"/><text x="6.4063%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.3141%" y="581" width="0.0789%" height="15" fill="rgb(210,85,47)" fg:x="80" fg:w="1"/><text x="6.5641%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3141%" y="565" width="0.0789%" height="15" fill="rgb(224,206,25)" fg:x="80" fg:w="1"/><text x="6.5641%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.3141%" y="549" width="0.0789%" height="15" fill="rgb(243,201,19)" fg:x="80" fg:w="1"/><text x="6.5641%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3141%" y="533" width="0.0789%" height="15" fill="rgb(236,59,4)" fg:x="80" fg:w="1"/><text x="6.5641%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.3141%" y="517" width="0.0789%" height="15" fill="rgb(254,179,45)" fg:x="80" fg:w="1"/><text x="6.5641%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3141%" y="501" width="0.0789%" height="15" fill="rgb(226,14,10)" fg:x="80" fg:w="1"/><text x="6.5641%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.3931%" y="613" width="0.0789%" height="15" fill="rgb(244,27,41)" fg:x="81" fg:w="1"/><text x="6.6431%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.3931%" y="597" width="0.0789%" height="15" fill="rgb(235,35,32)" fg:x="81" fg:w="1"/><text x="6.6431%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.3931%" y="581" width="0.0789%" height="15" fill="rgb(218,68,31)" fg:x="81" fg:w="1"/><text x="6.6431%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3931%" y="565" width="0.0789%" height="15" fill="rgb(207,120,37)" fg:x="81" fg:w="1"/><text x="6.6431%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3931%" y="549" width="0.0789%" height="15" fill="rgb(227,98,0)" fg:x="81" fg:w="1"/><text x="6.6431%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3931%" y="533" width="0.0789%" height="15" fill="rgb(207,7,3)" fg:x="81" fg:w="1"/><text x="6.6431%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3931%" y="517" width="0.0789%" height="15" fill="rgb(206,98,19)" fg:x="81" fg:w="1"/><text x="6.6431%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3931%" y="501" width="0.0789%" height="15" fill="rgb(217,5,26)" fg:x="81" fg:w="1"/><text x="6.6431%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3931%" y="485" width="0.0789%" height="15" fill="rgb(235,190,38)" fg:x="81" fg:w="1"/><text x="6.6431%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3931%" y="469" width="0.0789%" height="15" fill="rgb(247,86,24)" fg:x="81" fg:w="1"/><text x="6.6431%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.3931%" y="453" width="0.0789%" height="15" fill="rgb(205,101,16)" fg:x="81" fg:w="1"/><text x="6.6431%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.3931%" y="437" width="0.0789%" height="15" fill="rgb(246,168,33)" fg:x="81" fg:w="1"/><text x="6.6431%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.3931%" y="421" width="0.0789%" height="15" fill="rgb(231,114,1)" fg:x="81" fg:w="1"/><text x="6.6431%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3931%" y="405" width="0.0789%" height="15" fill="rgb(207,184,53)" fg:x="81" fg:w="1"/><text x="6.6431%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3931%" y="389" width="0.0789%" height="15" fill="rgb(224,95,51)" fg:x="81" fg:w="1"/><text x="6.6431%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.3931%" y="373" width="0.0789%" height="15" fill="rgb(212,188,45)" fg:x="81" fg:w="1"/><text x="6.6431%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.3931%" y="357" width="0.0789%" height="15" fill="rgb(223,154,38)" fg:x="81" fg:w="1"/><text x="6.6431%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.3931%" y="341" width="0.0789%" height="15" fill="rgb(251,22,52)" fg:x="81" fg:w="1"/><text x="6.6431%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.3931%" y="325" width="0.0789%" height="15" fill="rgb(229,209,22)" fg:x="81" fg:w="1"/><text x="6.6431%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3931%" y="309" width="0.0789%" height="15" fill="rgb(234,138,34)" fg:x="81" fg:w="1"/><text x="6.6431%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4720%" y="341" width="0.0789%" height="15" fill="rgb(212,95,11)" fg:x="82" fg:w="1"/><text x="6.7220%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.4720%" y="565" width="0.1579%" height="15" fill="rgb(240,179,47)" fg:x="82" fg:w="2"/><text x="6.7220%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.4720%" y="549" width="0.1579%" height="15" fill="rgb(240,163,11)" fg:x="82" fg:w="2"/><text x="6.7220%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.4720%" y="533" width="0.1579%" height="15" fill="rgb(236,37,12)" fg:x="82" fg:w="2"/><text x="6.7220%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="6.4720%" y="517" width="0.1579%" height="15" fill="rgb(232,164,16)" fg:x="82" fg:w="2"/><text x="6.7220%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="6.4720%" y="501" width="0.1579%" height="15" fill="rgb(244,205,15)" fg:x="82" fg:w="2"/><text x="6.7220%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="6.4720%" y="485" width="0.1579%" height="15" fill="rgb(223,117,47)" fg:x="82" fg:w="2"/><text x="6.7220%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="6.4720%" y="469" width="0.1579%" height="15" fill="rgb(244,107,35)" fg:x="82" fg:w="2"/><text x="6.7220%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="6.4720%" y="453" width="0.1579%" height="15" fill="rgb(205,140,8)" fg:x="82" fg:w="2"/><text x="6.7220%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="6.4720%" y="437" width="0.1579%" height="15" fill="rgb(228,84,46)" fg:x="82" fg:w="2"/><text x="6.7220%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="6.4720%" y="421" width="0.1579%" height="15" fill="rgb(254,188,9)" fg:x="82" fg:w="2"/><text x="6.7220%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="6.4720%" y="405" width="0.1579%" height="15" fill="rgb(206,112,54)" fg:x="82" fg:w="2"/><text x="6.7220%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="6.4720%" y="389" width="0.1579%" height="15" fill="rgb(216,84,49)" fg:x="82" fg:w="2"/><text x="6.7220%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="6.4720%" y="373" width="0.1579%" height="15" fill="rgb(214,194,35)" fg:x="82" fg:w="2"/><text x="6.7220%" y="383.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="6.4720%" y="357" width="0.1579%" height="15" fill="rgb(249,28,3)" fg:x="82" fg:w="2"/><text x="6.7220%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="6.5509%" y="341" width="0.0789%" height="15" fill="rgb(222,56,52)" fg:x="83" fg:w="1"/><text x="6.8009%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="6.5509%" y="325" width="0.0789%" height="15" fill="rgb(245,217,50)" fg:x="83" fg:w="1"/><text x="6.8009%" y="335.50"></text></g><g><title>plugins_core::build::Build::holding (11 samples, 0.87%)</title><rect x="5.8406%" y="693" width="0.8682%" height="15" fill="rgb(213,201,24)" fg:x="74" fg:w="11"/><text x="6.0906%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (9 samples, 0.71%)</title><rect x="5.9984%" y="677" width="0.7103%" height="15" fill="rgb(248,116,28)" fg:x="76" fg:w="9"/><text x="6.2484%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="6.3931%" y="661" width="0.3157%" height="15" fill="rgb(219,72,43)" fg:x="81" fg:w="4"/><text x="6.6431%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="6.3931%" y="645" width="0.3157%" height="15" fill="rgb(209,138,14)" fg:x="81" fg:w="4"/><text x="6.6431%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="6.3931%" y="629" width="0.3157%" height="15" fill="rgb(222,18,33)" fg:x="81" fg:w="4"/><text x="6.6431%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="6.4720%" y="613" width="0.2368%" height="15" fill="rgb(213,199,7)" fg:x="82" fg:w="3"/><text x="6.7220%" y="623.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="6.4720%" y="597" width="0.2368%" height="15" fill="rgb(250,110,10)" fg:x="82" fg:w="3"/><text x="6.7220%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="6.4720%" y="581" width="0.2368%" height="15" fill="rgb(248,123,6)" fg:x="82" fg:w="3"/><text x="6.7220%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6298%" y="565" width="0.0789%" height="15" fill="rgb(206,91,31)" fg:x="84" fg:w="1"/><text x="6.8798%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6298%" y="549" width="0.0789%" height="15" fill="rgb(211,154,13)" fg:x="84" fg:w="1"/><text x="6.8798%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6298%" y="533" width="0.0789%" height="15" fill="rgb(225,148,7)" fg:x="84" fg:w="1"/><text x="6.8798%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6298%" y="517" width="0.0789%" height="15" fill="rgb(220,160,43)" fg:x="84" fg:w="1"/><text x="6.8798%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6298%" y="501" width="0.0789%" height="15" fill="rgb(213,52,39)" fg:x="84" fg:w="1"/><text x="6.8798%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.7088%" y="677" width="0.0789%" height="15" fill="rgb(243,137,7)" fg:x="85" fg:w="1"/><text x="6.9588%" y="687.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="6.7088%" y="661" width="0.0789%" height="15" fill="rgb(230,79,13)" fg:x="85" fg:w="1"/><text x="6.9588%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="6.7088%" y="645" width="0.0789%" height="15" fill="rgb(247,105,23)" fg:x="85" fg:w="1"/><text x="6.9588%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.7088%" y="629" width="0.0789%" height="15" fill="rgb(223,179,41)" fg:x="85" fg:w="1"/><text x="6.9588%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.7088%" y="613" width="0.0789%" height="15" fill="rgb(218,9,34)" fg:x="85" fg:w="1"/><text x="6.9588%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7088%" y="597" width="0.0789%" height="15" fill="rgb(222,106,8)" fg:x="85" fg:w="1"/><text x="6.9588%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.7088%" y="581" width="0.0789%" height="15" fill="rgb(211,220,0)" fg:x="85" fg:w="1"/><text x="6.9588%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7088%" y="565" width="0.0789%" height="15" fill="rgb(229,52,16)" fg:x="85" fg:w="1"/><text x="6.9588%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.7877%" y="661" width="0.0789%" height="15" fill="rgb(212,155,18)" fg:x="86" fg:w="1"/><text x="7.0377%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.7877%" y="645" width="0.0789%" height="15" fill="rgb(242,21,14)" fg:x="86" fg:w="1"/><text x="7.0377%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.7877%" y="629" width="0.0789%" height="15" fill="rgb(222,19,48)" fg:x="86" fg:w="1"/><text x="7.0377%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.7877%" y="613" width="0.0789%" height="15" fill="rgb(232,45,27)" fg:x="86" fg:w="1"/><text x="7.0377%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.7877%" y="597" width="0.0789%" height="15" fill="rgb(249,103,42)" fg:x="86" fg:w="1"/><text x="7.0377%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7877%" y="581" width="0.0789%" height="15" fill="rgb(246,81,33)" fg:x="86" fg:w="1"/><text x="7.0377%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7877%" y="565" width="0.0789%" height="15" fill="rgb(252,33,42)" fg:x="86" fg:w="1"/><text x="7.0377%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.8666%" y="661" width="0.0789%" height="15" fill="rgb(209,212,41)" fg:x="87" fg:w="1"/><text x="7.1166%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8666%" y="645" width="0.0789%" height="15" fill="rgb(207,154,6)" fg:x="87" fg:w="1"/><text x="7.1166%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (41 samples, 3.24%)</title><rect x="3.7885%" y="709" width="3.2360%" height="15" fill="rgb(223,64,47)" fg:x="48" fg:w="41"/><text x="4.0385%" y="719.50">plu..</text></g><g><title>plugins_core::build::Build::occupying (4 samples, 0.32%)</title><rect x="6.7088%" y="693" width="0.3157%" height="15" fill="rgb(211,161,38)" fg:x="85" fg:w="4"/><text x="6.9588%" y="703.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="6.7877%" y="677" width="0.2368%" height="15" fill="rgb(219,138,40)" fg:x="86" fg:w="3"/><text x="7.0377%" y="687.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="6.9455%" y="661" width="0.0789%" height="15" fill="rgb(241,228,46)" fg:x="88" fg:w="1"/><text x="7.1955%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.9455%" y="645" width="0.0789%" height="15" fill="rgb(223,209,38)" fg:x="88" fg:w="1"/><text x="7.1955%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.9455%" y="629" width="0.0789%" height="15" fill="rgb(236,164,45)" fg:x="88" fg:w="1"/><text x="7.1955%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.9455%" y="613" width="0.0789%" height="15" fill="rgb(231,15,5)" fg:x="88" fg:w="1"/><text x="7.1955%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.9455%" y="597" width="0.0789%" height="15" fill="rgb(252,35,15)" fg:x="88" fg:w="1"/><text x="7.1955%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.9455%" y="581" width="0.0789%" height="15" fill="rgb(248,181,18)" fg:x="88" fg:w="1"/><text x="7.1955%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9455%" y="565" width="0.0789%" height="15" fill="rgb(233,39,42)" fg:x="88" fg:w="1"/><text x="7.1955%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9455%" y="549" width="0.0789%" height="15" fill="rgb(238,110,33)" fg:x="88" fg:w="1"/><text x="7.1955%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9455%" y="533" width="0.0789%" height="15" fill="rgb(233,195,10)" fg:x="88" fg:w="1"/><text x="7.1955%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9455%" y="517" width="0.0789%" height="15" fill="rgb(254,105,3)" fg:x="88" fg:w="1"/><text x="7.1955%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="7.0245%" y="709" width="0.0789%" height="15" fill="rgb(221,225,9)" fg:x="89" fg:w="1"/><text x="7.2745%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="7.0245%" y="693" width="0.0789%" height="15" fill="rgb(224,227,45)" fg:x="89" fg:w="1"/><text x="7.2745%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.0245%" y="677" width="0.0789%" height="15" fill="rgb(229,198,43)" fg:x="89" fg:w="1"/><text x="7.2745%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.1034%" y="677" width="0.0789%" height="15" fill="rgb(206,209,35)" fg:x="90" fg:w="1"/><text x="7.3534%" y="687.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="7.1034%" y="661" width="0.0789%" height="15" fill="rgb(245,195,53)" fg:x="90" fg:w="1"/><text x="7.3534%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.1034%" y="645" width="0.0789%" height="15" fill="rgb(240,92,26)" fg:x="90" fg:w="1"/><text x="7.3534%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="7.1034%" y="709" width="0.1579%" height="15" fill="rgb(207,40,23)" fg:x="90" fg:w="2"/><text x="7.3534%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="7.1034%" y="693" width="0.1579%" height="15" fill="rgb(223,111,35)" fg:x="90" fg:w="2"/><text x="7.3534%" y="703.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="7.1823%" y="677" width="0.0789%" height="15" fill="rgb(229,147,28)" fg:x="91" fg:w="1"/><text x="7.4323%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="7.1823%" y="661" width="0.0789%" height="15" fill="rgb(211,29,28)" fg:x="91" fg:w="1"/><text x="7.4323%" y="671.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="7.1823%" y="645" width="0.0789%" height="15" fill="rgb(228,72,33)" fg:x="91" fg:w="1"/><text x="7.4323%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1823%" y="629" width="0.0789%" height="15" fill="rgb(205,214,31)" fg:x="91" fg:w="1"/><text x="7.4323%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1823%" y="613" width="0.0789%" height="15" fill="rgb(224,111,15)" fg:x="91" fg:w="1"/><text x="7.4323%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.2612%" y="677" width="0.0789%" height="15" fill="rgb(253,21,26)" fg:x="92" fg:w="1"/><text x="7.5112%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.2612%" y="661" width="0.0789%" height="15" fill="rgb(245,139,43)" fg:x="92" fg:w="1"/><text x="7.5112%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.2612%" y="645" width="0.0789%" height="15" fill="rgb(252,170,7)" fg:x="92" fg:w="1"/><text x="7.5112%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.2612%" y="629" width="0.0789%" height="15" fill="rgb(231,118,14)" fg:x="92" fg:w="1"/><text x="7.5112%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.2612%" y="613" width="0.0789%" height="15" fill="rgb(238,83,0)" fg:x="92" fg:w="1"/><text x="7.5112%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.2612%" y="597" width="0.0789%" height="15" fill="rgb(221,39,39)" fg:x="92" fg:w="1"/><text x="7.5112%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.2612%" y="581" width="0.0789%" height="15" fill="rgb(222,119,46)" fg:x="92" fg:w="1"/><text x="7.5112%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.2612%" y="565" width="0.0789%" height="15" fill="rgb(222,165,49)" fg:x="92" fg:w="1"/><text x="7.5112%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.2612%" y="549" width="0.0789%" height="15" fill="rgb(219,113,52)" fg:x="92" fg:w="1"/><text x="7.5112%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.2612%" y="533" width="0.0789%" height="15" fill="rgb(214,7,15)" fg:x="92" fg:w="1"/><text x="7.5112%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.2612%" y="517" width="0.0789%" height="15" fill="rgb(235,32,4)" fg:x="92" fg:w="1"/><text x="7.5112%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2612%" y="501" width="0.0789%" height="15" fill="rgb(238,90,54)" fg:x="92" fg:w="1"/><text x="7.5112%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3402%" y="677" width="0.0789%" height="15" fill="rgb(213,208,19)" fg:x="93" fg:w="1"/><text x="7.5902%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="7.2612%" y="693" width="0.2368%" height="15" fill="rgb(233,156,4)" fg:x="92" fg:w="3"/><text x="7.5112%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.4191%" y="677" width="0.0789%" height="15" fill="rgb(207,194,5)" fg:x="94" fg:w="1"/><text x="7.6691%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.4191%" y="661" width="0.0789%" height="15" fill="rgb(206,111,30)" fg:x="94" fg:w="1"/><text x="7.6691%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.4191%" y="645" width="0.0789%" height="15" fill="rgb(243,70,54)" fg:x="94" fg:w="1"/><text x="7.6691%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.4191%" y="629" width="0.0789%" height="15" fill="rgb(242,28,8)" fg:x="94" fg:w="1"/><text x="7.6691%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.4191%" y="613" width="0.0789%" height="15" fill="rgb(219,106,18)" fg:x="94" fg:w="1"/><text x="7.6691%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.4191%" y="597" width="0.0789%" height="15" fill="rgb(244,222,10)" fg:x="94" fg:w="1"/><text x="7.6691%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.4191%" y="581" width="0.0789%" height="15" fill="rgb(236,179,52)" fg:x="94" fg:w="1"/><text x="7.6691%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.4191%" y="565" width="0.0789%" height="15" fill="rgb(213,23,39)" fg:x="94" fg:w="1"/><text x="7.6691%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.4191%" y="549" width="0.0789%" height="15" fill="rgb(238,48,10)" fg:x="94" fg:w="1"/><text x="7.6691%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.4980%" y="661" width="0.0789%" height="15" fill="rgb(251,196,23)" fg:x="95" fg:w="1"/><text x="7.7480%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.4980%" y="645" width="0.0789%" height="15" fill="rgb(250,152,24)" fg:x="95" fg:w="1"/><text x="7.7480%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4980%" y="629" width="0.0789%" height="15" fill="rgb(209,150,17)" fg:x="95" fg:w="1"/><text x="7.7480%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4980%" y="613" width="0.0789%" height="15" fill="rgb(234,202,34)" fg:x="95" fg:w="1"/><text x="7.7480%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="7.4980%" y="597" width="0.0789%" height="15" fill="rgb(253,148,53)" fg:x="95" fg:w="1"/><text x="7.7480%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (85 samples, 6.71%)</title><rect x="0.9471%" y="725" width="6.7088%" height="15" fill="rgb(218,129,16)" fg:x="12" fg:w="85"/><text x="1.1971%" y="735.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.39%)</title><rect x="7.2612%" y="709" width="0.3946%" height="15" fill="rgb(216,85,19)" fg:x="92" fg:w="5"/><text x="7.5112%" y="719.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="7.4980%" y="693" width="0.1579%" height="15" fill="rgb(235,228,7)" fg:x="95" fg:w="2"/><text x="7.7480%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="7.4980%" y="677" width="0.1579%" height="15" fill="rgb(245,175,0)" fg:x="95" fg:w="2"/><text x="7.7480%" y="687.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="7.5770%" y="661" width="0.0789%" height="15" fill="rgb(208,168,36)" fg:x="96" fg:w="1"/><text x="7.8270%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.5770%" y="645" width="0.0789%" height="15" fill="rgb(246,171,24)" fg:x="96" fg:w="1"/><text x="7.8270%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.6559%" y="677" width="0.0789%" height="15" fill="rgb(215,142,24)" fg:x="97" fg:w="1"/><text x="7.9059%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="7.6559%" y="661" width="0.0789%" height="15" fill="rgb(250,187,7)" fg:x="97" fg:w="1"/><text x="7.9059%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="7.6559%" y="645" width="0.0789%" height="15" fill="rgb(228,66,33)" fg:x="97" fg:w="1"/><text x="7.9059%" y="655.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="7.6559%" y="629" width="0.0789%" height="15" fill="rgb(234,215,21)" fg:x="97" fg:w="1"/><text x="7.9059%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6559%" y="613" width="0.0789%" height="15" fill="rgb(222,191,20)" fg:x="97" fg:w="1"/><text x="7.9059%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="7.7348%" y="661" width="0.0789%" height="15" fill="rgb(245,79,54)" fg:x="98" fg:w="1"/><text x="7.9848%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.7348%" y="645" width="0.0789%" height="15" fill="rgb(240,10,37)" fg:x="98" fg:w="1"/><text x="7.9848%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.7348%" y="629" width="0.0789%" height="15" fill="rgb(214,192,32)" fg:x="98" fg:w="1"/><text x="7.9848%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.8137%" y="645" width="0.0789%" height="15" fill="rgb(209,36,54)" fg:x="99" fg:w="1"/><text x="8.0637%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.8137%" y="629" width="0.0789%" height="15" fill="rgb(220,10,11)" fg:x="99" fg:w="1"/><text x="8.0637%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.8137%" y="613" width="0.0789%" height="15" fill="rgb(221,106,17)" fg:x="99" fg:w="1"/><text x="8.0637%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.8137%" y="597" width="0.0789%" height="15" fill="rgb(251,142,44)" fg:x="99" fg:w="1"/><text x="8.0637%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.8137%" y="581" width="0.0789%" height="15" fill="rgb(238,13,15)" fg:x="99" fg:w="1"/><text x="8.0637%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.8137%" y="565" width="0.0789%" height="15" fill="rgb(208,107,27)" fg:x="99" fg:w="1"/><text x="8.0637%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.8137%" y="549" width="0.0789%" height="15" fill="rgb(205,136,37)" fg:x="99" fg:w="1"/><text x="8.0637%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.8137%" y="533" width="0.0789%" height="15" fill="rgb(250,205,27)" fg:x="99" fg:w="1"/><text x="8.0637%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.8137%" y="517" width="0.0789%" height="15" fill="rgb(210,80,43)" fg:x="99" fg:w="1"/><text x="8.0637%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.8137%" y="501" width="0.0789%" height="15" fill="rgb(247,160,36)" fg:x="99" fg:w="1"/><text x="8.0637%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.8137%" y="485" width="0.0789%" height="15" fill="rgb(234,13,49)" fg:x="99" fg:w="1"/><text x="8.0637%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8137%" y="469" width="0.0789%" height="15" fill="rgb(234,122,0)" fg:x="99" fg:w="1"/><text x="8.0637%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.8927%" y="629" width="0.0789%" height="15" fill="rgb(207,146,38)" fg:x="100" fg:w="1"/><text x="8.1427%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8927%" y="613" width="0.0789%" height="15" fill="rgb(207,177,25)" fg:x="100" fg:w="1"/><text x="8.1427%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8927%" y="597" width="0.0789%" height="15" fill="rgb(211,178,42)" fg:x="100" fg:w="1"/><text x="8.1427%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.9716%" y="613" width="0.0789%" height="15" fill="rgb(230,69,54)" fg:x="101" fg:w="1"/><text x="8.2216%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.9716%" y="597" width="0.0789%" height="15" fill="rgb(214,135,41)" fg:x="101" fg:w="1"/><text x="8.2216%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.9716%" y="581" width="0.0789%" height="15" fill="rgb(237,67,25)" fg:x="101" fg:w="1"/><text x="8.2216%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.9716%" y="565" width="0.0789%" height="15" fill="rgb(222,189,50)" fg:x="101" fg:w="1"/><text x="8.2216%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.0505%" y="613" width="0.0789%" height="15" fill="rgb(245,148,34)" fg:x="102" fg:w="1"/><text x="8.3005%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0505%" y="597" width="0.0789%" height="15" fill="rgb(222,29,6)" fg:x="102" fg:w="1"/><text x="8.3005%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0505%" y="581" width="0.0789%" height="15" fill="rgb(221,189,43)" fg:x="102" fg:w="1"/><text x="8.3005%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.0505%" y="565" width="0.0789%" height="15" fill="rgb(207,36,27)" fg:x="102" fg:w="1"/><text x="8.3005%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.0505%" y="549" width="0.0789%" height="15" fill="rgb(217,90,24)" fg:x="102" fg:w="1"/><text x="8.3005%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.1294%" y="597" width="0.0789%" height="15" fill="rgb(224,66,35)" fg:x="103" fg:w="1"/><text x="8.3794%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1294%" y="581" width="0.0789%" height="15" fill="rgb(221,13,50)" fg:x="103" fg:w="1"/><text x="8.3794%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1294%" y="565" width="0.0789%" height="15" fill="rgb(236,68,49)" fg:x="103" fg:w="1"/><text x="8.3794%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.1294%" y="549" width="0.0789%" height="15" fill="rgb(229,146,28)" fg:x="103" fg:w="1"/><text x="8.3794%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.2084%" y="549" width="0.2368%" height="15" fill="rgb(225,31,38)" fg:x="104" fg:w="3"/><text x="8.4584%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.3662%" y="533" width="0.0789%" height="15" fill="rgb(250,208,3)" fg:x="106" fg:w="1"/><text x="8.6162%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="8.2084%" y="597" width="0.3157%" height="15" fill="rgb(246,54,23)" fg:x="104" fg:w="4"/><text x="8.4584%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="8.2084%" y="581" width="0.3157%" height="15" fill="rgb(243,76,11)" fg:x="104" fg:w="4"/><text x="8.4584%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="8.2084%" y="565" width="0.3157%" height="15" fill="rgb(245,21,50)" fg:x="104" fg:w="4"/><text x="8.4584%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4451%" y="549" width="0.0789%" height="15" fill="rgb(228,9,43)" fg:x="107" fg:w="1"/><text x="8.6951%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="8.1294%" y="613" width="0.4736%" height="15" fill="rgb(208,100,47)" fg:x="103" fg:w="6"/><text x="8.3794%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.5241%" y="597" width="0.0789%" height="15" fill="rgb(232,26,8)" fg:x="108" fg:w="1"/><text x="8.7741%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.5241%" y="581" width="0.0789%" height="15" fill="rgb(216,166,38)" fg:x="108" fg:w="1"/><text x="8.7741%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.5241%" y="565" width="0.0789%" height="15" fill="rgb(251,202,51)" fg:x="108" fg:w="1"/><text x="8.7741%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="7.9716%" y="629" width="0.7103%" height="15" fill="rgb(254,216,34)" fg:x="101" fg:w="9"/><text x="8.2216%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.6030%" y="613" width="0.0789%" height="15" fill="rgb(251,32,27)" fg:x="109" fg:w="1"/><text x="8.8530%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.6030%" y="597" width="0.0789%" height="15" fill="rgb(208,127,28)" fg:x="109" fg:w="1"/><text x="8.8530%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.87%)</title><rect x="7.8927%" y="645" width="0.8682%" height="15" fill="rgb(224,137,22)" fg:x="100" fg:w="11"/><text x="8.1427%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.6819%" y="629" width="0.0789%" height="15" fill="rgb(254,70,32)" fg:x="110" fg:w="1"/><text x="8.9319%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.6819%" y="613" width="0.0789%" height="15" fill="rgb(229,75,37)" fg:x="110" fg:w="1"/><text x="8.9319%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.8398%" y="613" width="0.0789%" height="15" fill="rgb(252,64,23)" fg:x="112" fg:w="1"/><text x="9.0898%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.7609%" y="645" width="0.2368%" height="15" fill="rgb(232,162,48)" fg:x="111" fg:w="3"/><text x="9.0109%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="8.7609%" y="629" width="0.2368%" height="15" fill="rgb(246,160,12)" fg:x="111" fg:w="3"/><text x="9.0109%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.9187%" y="613" width="0.0789%" height="15" fill="rgb(247,166,0)" fg:x="113" fg:w="1"/><text x="9.1687%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.9187%" y="597" width="0.0789%" height="15" fill="rgb(249,219,21)" fg:x="113" fg:w="1"/><text x="9.1687%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9187%" y="581" width="0.0789%" height="15" fill="rgb(205,209,3)" fg:x="113" fg:w="1"/><text x="9.1687%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.9976%" y="581" width="0.0789%" height="15" fill="rgb(243,44,1)" fg:x="114" fg:w="1"/><text x="9.2476%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9976%" y="565" width="0.0789%" height="15" fill="rgb(206,159,16)" fg:x="114" fg:w="1"/><text x="9.2476%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0766%" y="533" width="0.0789%" height="15" fill="rgb(244,77,30)" fg:x="115" fg:w="1"/><text x="9.3266%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="9.1555%" y="533" width="0.0789%" height="15" fill="rgb(218,69,12)" fg:x="116" fg:w="1"/><text x="9.4055%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.1555%" y="517" width="0.0789%" height="15" fill="rgb(212,87,7)" fg:x="116" fg:w="1"/><text x="9.4055%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.1555%" y="501" width="0.0789%" height="15" fill="rgb(245,114,25)" fg:x="116" fg:w="1"/><text x="9.4055%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="8.9976%" y="613" width="0.4736%" height="15" fill="rgb(210,61,42)" fg:x="114" fg:w="6"/><text x="9.2476%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.47%)</title><rect x="8.9976%" y="597" width="0.4736%" height="15" fill="rgb(211,52,33)" fg:x="114" fg:w="6"/><text x="9.2476%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="9.0766%" y="581" width="0.3946%" height="15" fill="rgb(234,58,33)" fg:x="115" fg:w="5"/><text x="9.3266%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="9.0766%" y="565" width="0.3946%" height="15" fill="rgb(220,115,36)" fg:x="115" fg:w="5"/><text x="9.3266%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="9.0766%" y="549" width="0.3946%" height="15" fill="rgb(243,153,54)" fg:x="115" fg:w="5"/><text x="9.3266%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.2344%" y="533" width="0.2368%" height="15" fill="rgb(251,47,18)" fg:x="117" fg:w="3"/><text x="9.4844%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.2344%" y="517" width="0.2368%" height="15" fill="rgb(242,102,42)" fg:x="117" fg:w="3"/><text x="9.4844%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="9.2344%" y="501" width="0.2368%" height="15" fill="rgb(234,31,38)" fg:x="117" fg:w="3"/><text x="9.4844%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="9.3133%" y="485" width="0.1579%" height="15" fill="rgb(221,117,51)" fg:x="118" fg:w="2"/><text x="9.5633%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.71%)</title><rect x="8.9976%" y="629" width="0.7103%" height="15" fill="rgb(212,20,18)" fg:x="114" fg:w="9"/><text x="9.2476%" y="639.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="9.4712%" y="613" width="0.2368%" height="15" fill="rgb(245,133,36)" fg:x="120" fg:w="3"/><text x="9.7212%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="9.4712%" y="597" width="0.2368%" height="15" fill="rgb(212,6,19)" fg:x="120" fg:w="3"/><text x="9.7212%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="9.4712%" y="581" width="0.2368%" height="15" fill="rgb(218,1,36)" fg:x="120" fg:w="3"/><text x="9.7212%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.5501%" y="565" width="0.1579%" height="15" fill="rgb(246,84,54)" fg:x="121" fg:w="2"/><text x="9.8001%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.6290%" y="549" width="0.0789%" height="15" fill="rgb(242,110,6)" fg:x="122" fg:w="1"/><text x="9.8790%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.6290%" y="533" width="0.0789%" height="15" fill="rgb(214,47,5)" fg:x="122" fg:w="1"/><text x="9.8790%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7080%" y="597" width="0.0789%" height="15" fill="rgb(218,159,25)" fg:x="123" fg:w="1"/><text x="9.9580%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7869%" y="597" width="0.0789%" height="15" fill="rgb(215,211,28)" fg:x="124" fg:w="1"/><text x="10.0369%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.7869%" y="581" width="0.0789%" height="15" fill="rgb(238,59,32)" fg:x="124" fg:w="1"/><text x="10.0369%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7869%" y="565" width="0.0789%" height="15" fill="rgb(226,82,3)" fg:x="124" fg:w="1"/><text x="10.0369%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="9.8658%" y="517" width="0.2368%" height="15" fill="rgb(240,164,32)" fg:x="125" fg:w="3"/><text x="10.1158%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="9.8658%" y="501" width="0.2368%" height="15" fill="rgb(232,46,7)" fg:x="125" fg:w="3"/><text x="10.1158%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="9.9448%" y="485" width="0.1579%" height="15" fill="rgb(229,129,53)" fg:x="126" fg:w="2"/><text x="10.1948%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1026%" y="485" width="0.0789%" height="15" fill="rgb(234,188,29)" fg:x="128" fg:w="1"/><text x="10.3526%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1026%" y="469" width="0.0789%" height="15" fill="rgb(246,141,4)" fg:x="128" fg:w="1"/><text x="10.3526%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1026%" y="453" width="0.0789%" height="15" fill="rgb(229,23,39)" fg:x="128" fg:w="1"/><text x="10.3526%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.47%)</title><rect x="9.8658%" y="533" width="0.4736%" height="15" fill="rgb(206,12,3)" fg:x="125" fg:w="6"/><text x="10.1158%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="10.1026%" y="517" width="0.2368%" height="15" fill="rgb(252,226,20)" fg:x="128" fg:w="3"/><text x="10.3526%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="10.1026%" y="501" width="0.2368%" height="15" fill="rgb(216,123,35)" fg:x="128" fg:w="3"/><text x="10.3526%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.1815%" y="485" width="0.1579%" height="15" fill="rgb(212,68,40)" fg:x="129" fg:w="2"/><text x="10.4315%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.1815%" y="469" width="0.1579%" height="15" fill="rgb(254,125,32)" fg:x="129" fg:w="2"/><text x="10.4315%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.1815%" y="453" width="0.1579%" height="15" fill="rgb(253,97,22)" fg:x="129" fg:w="2"/><text x="10.4315%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.2605%" y="437" width="0.0789%" height="15" fill="rgb(241,101,14)" fg:x="130" fg:w="1"/><text x="10.5105%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2605%" y="421" width="0.0789%" height="15" fill="rgb(238,103,29)" fg:x="130" fg:w="1"/><text x="10.5105%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2605%" y="405" width="0.0789%" height="15" fill="rgb(233,195,47)" fg:x="130" fg:w="1"/><text x="10.5105%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2605%" y="389" width="0.0789%" height="15" fill="rgb(246,218,30)" fg:x="130" fg:w="1"/><text x="10.5105%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.55%)</title><rect x="9.8658%" y="581" width="0.5525%" height="15" fill="rgb(219,145,47)" fg:x="125" fg:w="7"/><text x="10.1158%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.55%)</title><rect x="9.8658%" y="565" width="0.5525%" height="15" fill="rgb(243,12,26)" fg:x="125" fg:w="7"/><text x="10.1158%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.55%)</title><rect x="9.8658%" y="549" width="0.5525%" height="15" fill="rgb(214,87,16)" fg:x="125" fg:w="7"/><text x="10.1158%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.3394%" y="533" width="0.0789%" height="15" fill="rgb(208,99,42)" fg:x="131" fg:w="1"/><text x="10.5894%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.4183%" y="549" width="0.1579%" height="15" fill="rgb(253,99,2)" fg:x="132" fg:w="2"/><text x="10.6683%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.95%)</title><rect x="9.7080%" y="629" width="0.9471%" height="15" fill="rgb(220,168,23)" fg:x="123" fg:w="12"/><text x="9.9580%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.95%)</title><rect x="9.7080%" y="613" width="0.9471%" height="15" fill="rgb(242,38,24)" fg:x="123" fg:w="12"/><text x="9.9580%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.79%)</title><rect x="9.8658%" y="597" width="0.7893%" height="15" fill="rgb(225,182,9)" fg:x="125" fg:w="10"/><text x="10.1158%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="10.4183%" y="581" width="0.2368%" height="15" fill="rgb(243,178,37)" fg:x="132" fg:w="3"/><text x="10.6683%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="10.4183%" y="565" width="0.2368%" height="15" fill="rgb(232,139,19)" fg:x="132" fg:w="3"/><text x="10.6683%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.5762%" y="549" width="0.0789%" height="15" fill="rgb(225,201,24)" fg:x="134" fg:w="1"/><text x="10.8262%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.7340%" y="453" width="0.0789%" height="15" fill="rgb(221,47,46)" fg:x="136" fg:w="1"/><text x="10.9840%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7340%" y="437" width="0.0789%" height="15" fill="rgb(249,23,13)" fg:x="136" fg:w="1"/><text x="10.9840%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="10.7340%" y="485" width="0.1579%" height="15" fill="rgb(219,9,5)" fg:x="136" fg:w="2"/><text x="10.9840%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.7340%" y="469" width="0.1579%" height="15" fill="rgb(254,171,16)" fg:x="136" fg:w="2"/><text x="10.9840%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8129%" y="453" width="0.0789%" height="15" fill="rgb(230,171,20)" fg:x="137" fg:w="1"/><text x="11.0629%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="10.8919%" y="453" width="0.0789%" height="15" fill="rgb(210,71,41)" fg:x="138" fg:w="1"/><text x="11.1419%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.9708%" y="437" width="0.0789%" height="15" fill="rgb(206,173,20)" fg:x="139" fg:w="1"/><text x="11.2208%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.9708%" y="421" width="0.0789%" height="15" fill="rgb(233,88,34)" fg:x="139" fg:w="1"/><text x="11.2208%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.9708%" y="405" width="0.0789%" height="15" fill="rgb(223,209,46)" fg:x="139" fg:w="1"/><text x="11.2208%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.9708%" y="389" width="0.0789%" height="15" fill="rgb(250,43,18)" fg:x="139" fg:w="1"/><text x="11.2208%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9708%" y="373" width="0.0789%" height="15" fill="rgb(208,13,10)" fg:x="139" fg:w="1"/><text x="11.2208%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9708%" y="357" width="0.0789%" height="15" fill="rgb(212,200,36)" fg:x="139" fg:w="1"/><text x="11.2208%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9708%" y="341" width="0.0789%" height="15" fill="rgb(225,90,30)" fg:x="139" fg:w="1"/><text x="11.2208%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.39%)</title><rect x="10.7340%" y="501" width="0.3946%" height="15" fill="rgb(236,182,39)" fg:x="136" fg:w="5"/><text x="10.9840%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.8919%" y="485" width="0.2368%" height="15" fill="rgb(212,144,35)" fg:x="138" fg:w="3"/><text x="11.1419%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="10.8919%" y="469" width="0.2368%" height="15" fill="rgb(228,63,44)" fg:x="138" fg:w="3"/><text x="11.1419%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.9708%" y="453" width="0.1579%" height="15" fill="rgb(228,109,6)" fg:x="139" fg:w="2"/><text x="11.2208%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.0497%" y="437" width="0.0789%" height="15" fill="rgb(238,117,24)" fg:x="140" fg:w="1"/><text x="11.2997%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="11.0497%" y="421" width="0.0789%" height="15" fill="rgb(242,26,26)" fg:x="140" fg:w="1"/><text x="11.2997%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="10.7340%" y="533" width="0.5525%" height="15" fill="rgb(221,92,48)" fg:x="136" fg:w="7"/><text x="10.9840%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.55%)</title><rect x="10.7340%" y="517" width="0.5525%" height="15" fill="rgb(209,209,32)" fg:x="136" fg:w="7"/><text x="10.9840%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="11.1287%" y="501" width="0.1579%" height="15" fill="rgb(221,70,22)" fg:x="141" fg:w="2"/><text x="11.3787%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2076%" y="485" width="0.0789%" height="15" fill="rgb(248,145,5)" fg:x="142" fg:w="1"/><text x="11.4576%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.71%)</title><rect x="10.6551%" y="565" width="0.7103%" height="15" fill="rgb(226,116,26)" fg:x="135" fg:w="9"/><text x="10.9051%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.71%)</title><rect x="10.6551%" y="549" width="0.7103%" height="15" fill="rgb(244,5,17)" fg:x="135" fg:w="9"/><text x="10.9051%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2865%" y="533" width="0.0789%" height="15" fill="rgb(252,159,33)" fg:x="143" fg:w="1"/><text x="11.5365%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2865%" y="517" width="0.0789%" height="15" fill="rgb(206,71,0)" fg:x="143" fg:w="1"/><text x="11.5365%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2865%" y="501" width="0.0789%" height="15" fill="rgb(233,118,54)" fg:x="143" fg:w="1"/><text x="11.5365%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="11.3654%" y="565" width="0.1579%" height="15" fill="rgb(234,83,48)" fg:x="144" fg:w="2"/><text x="11.6154%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4444%" y="549" width="0.0789%" height="15" fill="rgb(228,3,54)" fg:x="145" fg:w="1"/><text x="11.6944%" y="559.50"></text></g><g><title>engine::session::state::State::close (50 samples, 3.95%)</title><rect x="7.6559%" y="709" width="3.9463%" height="15" fill="rgb(226,155,13)" fg:x="97" fg:w="50"/><text x="7.9059%" y="719.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (50 samples, 3.95%)</title><rect x="7.6559%" y="693" width="3.9463%" height="15" fill="rgb(241,28,37)" fg:x="97" fg:w="50"/><text x="7.9059%" y="703.50">engi..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (49 samples, 3.87%)</title><rect x="7.7348%" y="677" width="3.8674%" height="15" fill="rgb(233,93,10)" fg:x="98" fg:w="49"/><text x="7.9848%" y="687.50">engi..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (48 samples, 3.79%)</title><rect x="7.8137%" y="661" width="3.7885%" height="15" fill="rgb(225,113,19)" fg:x="99" fg:w="48"/><text x="8.0637%" y="671.50">engi..</text></g><g><title>kernel::model::any_entity_changes (33 samples, 2.60%)</title><rect x="8.9976%" y="645" width="2.6046%" height="15" fill="rgb(241,2,18)" fg:x="114" fg:w="33"/><text x="9.2476%" y="655.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (12 samples, 0.95%)</title><rect x="10.6551%" y="629" width="0.9471%" height="15" fill="rgb(228,207,21)" fg:x="135" fg:w="12"/><text x="10.9051%" y="639.50"></text></g><g><title>serde_json::de::from_trait (12 samples, 0.95%)</title><rect x="10.6551%" y="613" width="0.9471%" height="15" fill="rgb(213,211,35)" fg:x="135" fg:w="12"/><text x="10.9051%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.95%)</title><rect x="10.6551%" y="597" width="0.9471%" height="15" fill="rgb(209,83,10)" fg:x="135" fg:w="12"/><text x="10.9051%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.95%)</title><rect x="10.6551%" y="581" width="0.9471%" height="15" fill="rgb(209,164,1)" fg:x="135" fg:w="12"/><text x="10.9051%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.5233%" y="565" width="0.0789%" height="15" fill="rgb(213,184,43)" fg:x="146" fg:w="1"/><text x="11.7733%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.5233%" y="549" width="0.0789%" height="15" fill="rgb(231,61,34)" fg:x="146" fg:w="1"/><text x="11.7733%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.5233%" y="533" width="0.0789%" height="15" fill="rgb(235,75,3)" fg:x="146" fg:w="1"/><text x="11.7733%" y="543.50"></text></g><g><title>engine::session::Session::close (51 samples, 4.03%)</title><rect x="7.6559%" y="725" width="4.0253%" height="15" fill="rgb(220,106,47)" fg:x="97" fg:w="51"/><text x="7.9059%" y="735.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="11.6022%" y="709" width="0.0789%" height="15" fill="rgb(210,196,33)" fg:x="147" fg:w="1"/><text x="11.8522%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="11.6811%" y="533" width="0.0789%" height="15" fill="rgb(229,154,42)" fg:x="148" fg:w="1"/><text x="11.9311%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="11.6811%" y="517" width="0.0789%" height="15" fill="rgb(228,114,26)" fg:x="148" fg:w="1"/><text x="11.9311%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.6811%" y="501" width="0.0789%" height="15" fill="rgb(208,144,1)" fg:x="148" fg:w="1"/><text x="11.9311%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.6811%" y="485" width="0.0789%" height="15" fill="rgb(239,112,37)" fg:x="148" fg:w="1"/><text x="11.9311%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="11.6811%" y="469" width="0.0789%" height="15" fill="rgb(210,96,50)" fg:x="148" fg:w="1"/><text x="11.9311%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6811%" y="453" width="0.0789%" height="15" fill="rgb(222,178,2)" fg:x="148" fg:w="1"/><text x="11.9311%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6811%" y="437" width="0.0789%" height="15" fill="rgb(226,74,18)" fg:x="148" fg:w="1"/><text x="11.9311%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6811%" y="421" width="0.0789%" height="15" fill="rgb(225,67,54)" fg:x="148" fg:w="1"/><text x="11.9311%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6811%" y="405" width="0.0789%" height="15" fill="rgb(251,92,32)" fg:x="148" fg:w="1"/><text x="11.9311%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6811%" y="389" width="0.0789%" height="15" fill="rgb(228,149,22)" fg:x="148" fg:w="1"/><text x="11.9311%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6811%" y="373" width="0.0789%" height="15" fill="rgb(243,54,13)" fg:x="148" fg:w="1"/><text x="11.9311%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.6811%" y="357" width="0.0789%" height="15" fill="rgb(243,180,28)" fg:x="148" fg:w="1"/><text x="11.9311%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.6811%" y="341" width="0.0789%" height="15" fill="rgb(208,167,24)" fg:x="148" fg:w="1"/><text x="11.9311%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.6811%" y="325" width="0.0789%" height="15" fill="rgb(245,73,45)" fg:x="148" fg:w="1"/><text x="11.9311%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.6811%" y="309" width="0.0789%" height="15" fill="rgb(237,203,48)" fg:x="148" fg:w="1"/><text x="11.9311%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.6811%" y="293" width="0.0789%" height="15" fill="rgb(211,197,16)" fg:x="148" fg:w="1"/><text x="11.9311%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.6811%" y="277" width="0.0789%" height="15" fill="rgb(243,99,51)" fg:x="148" fg:w="1"/><text x="11.9311%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.6811%" y="261" width="0.0789%" height="15" fill="rgb(215,123,29)" fg:x="148" fg:w="1"/><text x="11.9311%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.6811%" y="245" width="0.0789%" height="15" fill="rgb(239,186,37)" fg:x="148" fg:w="1"/><text x="11.9311%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.6811%" y="229" width="0.0789%" height="15" fill="rgb(252,136,39)" fg:x="148" fg:w="1"/><text x="11.9311%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6811%" y="213" width="0.0789%" height="15" fill="rgb(223,213,32)" fg:x="148" fg:w="1"/><text x="11.9311%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.7601%" y="469" width="0.0789%" height="15" fill="rgb(233,115,5)" fg:x="149" fg:w="1"/><text x="12.0101%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.39%)</title><rect x="11.6811%" y="581" width="0.3946%" height="15" fill="rgb(207,226,44)" fg:x="148" fg:w="5"/><text x="11.9311%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.39%)</title><rect x="11.6811%" y="565" width="0.3946%" height="15" fill="rgb(208,126,0)" fg:x="148" fg:w="5"/><text x="11.9311%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.39%)</title><rect x="11.6811%" y="549" width="0.3946%" height="15" fill="rgb(244,66,21)" fg:x="148" fg:w="5"/><text x="11.9311%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (4 samples, 0.32%)</title><rect x="11.7601%" y="533" width="0.3157%" height="15" fill="rgb(222,97,12)" fg:x="149" fg:w="4"/><text x="12.0101%" y="543.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="11.7601%" y="517" width="0.3157%" height="15" fill="rgb(219,213,19)" fg:x="149" fg:w="4"/><text x="12.0101%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="11.7601%" y="501" width="0.3157%" height="15" fill="rgb(252,169,30)" fg:x="149" fg:w="4"/><text x="12.0101%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="11.7601%" y="485" width="0.3157%" height="15" fill="rgb(206,32,51)" fg:x="149" fg:w="4"/><text x="12.0101%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="11.8390%" y="469" width="0.2368%" height="15" fill="rgb(250,172,42)" fg:x="150" fg:w="3"/><text x="12.0890%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.9179%" y="453" width="0.1579%" height="15" fill="rgb(209,34,43)" fg:x="151" fg:w="2"/><text x="12.1679%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.9179%" y="437" width="0.1579%" height="15" fill="rgb(223,11,35)" fg:x="151" fg:w="2"/><text x="12.1679%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.9179%" y="421" width="0.1579%" height="15" fill="rgb(251,219,26)" fg:x="151" fg:w="2"/><text x="12.1679%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.9179%" y="405" width="0.1579%" height="15" fill="rgb(231,119,3)" fg:x="151" fg:w="2"/><text x="12.1679%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.9968%" y="389" width="0.0789%" height="15" fill="rgb(216,97,11)" fg:x="152" fg:w="1"/><text x="12.2468%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.9968%" y="373" width="0.0789%" height="15" fill="rgb(223,59,9)" fg:x="152" fg:w="1"/><text x="12.2468%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.9968%" y="357" width="0.0789%" height="15" fill="rgb(233,93,31)" fg:x="152" fg:w="1"/><text x="12.2468%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.9968%" y="341" width="0.0789%" height="15" fill="rgb(239,81,33)" fg:x="152" fg:w="1"/><text x="12.2468%" y="351.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0758%" y="581" width="0.0789%" height="15" fill="rgb(213,120,34)" fg:x="153" fg:w="1"/><text x="12.3258%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.0758%" y="565" width="0.0789%" height="15" fill="rgb(243,49,53)" fg:x="153" fg:w="1"/><text x="12.3258%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.0758%" y="549" width="0.0789%" height="15" fill="rgb(247,216,33)" fg:x="153" fg:w="1"/><text x="12.3258%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0758%" y="533" width="0.0789%" height="15" fill="rgb(226,26,14)" fg:x="153" fg:w="1"/><text x="12.3258%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0758%" y="517" width="0.0789%" height="15" fill="rgb(215,49,53)" fg:x="153" fg:w="1"/><text x="12.3258%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.0758%" y="501" width="0.0789%" height="15" fill="rgb(245,162,40)" fg:x="153" fg:w="1"/><text x="12.3258%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.0758%" y="485" width="0.0789%" height="15" fill="rgb(229,68,17)" fg:x="153" fg:w="1"/><text x="12.3258%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.0758%" y="469" width="0.0789%" height="15" fill="rgb(213,182,10)" fg:x="153" fg:w="1"/><text x="12.3258%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="12.0758%" y="453" width="0.0789%" height="15" fill="rgb(245,125,30)" fg:x="153" fg:w="1"/><text x="12.3258%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.0758%" y="437" width="0.0789%" height="15" fill="rgb(232,202,2)" fg:x="153" fg:w="1"/><text x="12.3258%" y="447.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (7 samples, 0.55%)</title><rect x="11.6811%" y="645" width="0.5525%" height="15" fill="rgb(237,140,51)" fg:x="148" fg:w="7"/><text x="11.9311%" y="655.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (7 samples, 0.55%)</title><rect x="11.6811%" y="629" width="0.5525%" height="15" fill="rgb(236,157,25)" fg:x="148" fg:w="7"/><text x="11.9311%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (7 samples, 0.55%)</title><rect x="11.6811%" y="613" width="0.5525%" height="15" fill="rgb(219,209,0)" fg:x="148" fg:w="7"/><text x="11.9311%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.55%)</title><rect x="11.6811%" y="597" width="0.5525%" height="15" fill="rgb(240,116,54)" fg:x="148" fg:w="7"/><text x="11.9311%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.1547%" y="581" width="0.0789%" height="15" fill="rgb(216,10,36)" fg:x="154" fg:w="1"/><text x="12.4047%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.1547%" y="565" width="0.0789%" height="15" fill="rgb(222,72,44)" fg:x="154" fg:w="1"/><text x="12.4047%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.1547%" y="549" width="0.0789%" height="15" fill="rgb(232,159,9)" fg:x="154" fg:w="1"/><text x="12.4047%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.1547%" y="533" width="0.0789%" height="15" fill="rgb(210,39,32)" fg:x="154" fg:w="1"/><text x="12.4047%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="12.2336%" y="645" width="0.0789%" height="15" fill="rgb(216,194,45)" fg:x="155" fg:w="1"/><text x="12.4836%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="12.2336%" y="629" width="0.0789%" height="15" fill="rgb(218,18,35)" fg:x="155" fg:w="1"/><text x="12.4836%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.2336%" y="613" width="0.0789%" height="15" fill="rgb(207,83,51)" fg:x="155" fg:w="1"/><text x="12.4836%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="12.3915%" y="501" width="0.0789%" height="15" fill="rgb(225,63,43)" fg:x="157" fg:w="1"/><text x="12.6415%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="12.3915%" y="485" width="0.0789%" height="15" fill="rgb(207,57,36)" fg:x="157" fg:w="1"/><text x="12.6415%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.3915%" y="469" width="0.0789%" height="15" fill="rgb(216,99,33)" fg:x="157" fg:w="1"/><text x="12.6415%" y="479.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="12.4704%" y="501" width="0.0789%" height="15" fill="rgb(225,42,16)" fg:x="158" fg:w="1"/><text x="12.7204%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="12.6283%" y="421" width="0.2368%" height="15" fill="rgb(220,201,45)" fg:x="160" fg:w="3"/><text x="12.8783%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="12.6283%" y="405" width="0.2368%" height="15" fill="rgb(225,33,4)" fg:x="160" fg:w="3"/><text x="12.8783%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.7072%" y="389" width="0.1579%" height="15" fill="rgb(224,33,50)" fg:x="161" fg:w="2"/><text x="12.9572%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.7072%" y="373" width="0.1579%" height="15" fill="rgb(246,198,51)" fg:x="161" fg:w="2"/><text x="12.9572%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7861%" y="357" width="0.0789%" height="15" fill="rgb(205,22,4)" fg:x="162" fg:w="1"/><text x="13.0361%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7861%" y="341" width="0.0789%" height="15" fill="rgb(206,3,8)" fg:x="162" fg:w="1"/><text x="13.0361%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.7861%" y="325" width="0.0789%" height="15" fill="rgb(251,23,15)" fg:x="162" fg:w="1"/><text x="13.0361%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.7861%" y="309" width="0.0789%" height="15" fill="rgb(252,88,28)" fg:x="162" fg:w="1"/><text x="13.0361%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.7861%" y="293" width="0.0789%" height="15" fill="rgb(212,127,14)" fg:x="162" fg:w="1"/><text x="13.0361%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7861%" y="277" width="0.0789%" height="15" fill="rgb(247,145,37)" fg:x="162" fg:w="1"/><text x="13.0361%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7861%" y="261" width="0.0789%" height="15" fill="rgb(209,117,53)" fg:x="162" fg:w="1"/><text x="13.0361%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.7861%" y="245" width="0.0789%" height="15" fill="rgb(212,90,42)" fg:x="162" fg:w="1"/><text x="13.0361%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.7861%" y="229" width="0.0789%" height="15" fill="rgb(218,164,37)" fg:x="162" fg:w="1"/><text x="13.0361%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.7861%" y="213" width="0.0789%" height="15" fill="rgb(246,65,34)" fg:x="162" fg:w="1"/><text x="13.0361%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.7861%" y="197" width="0.0789%" height="15" fill="rgb(231,100,33)" fg:x="162" fg:w="1"/><text x="13.0361%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7861%" y="181" width="0.0789%" height="15" fill="rgb(228,126,14)" fg:x="162" fg:w="1"/><text x="13.0361%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.8650%" y="421" width="0.0789%" height="15" fill="rgb(215,173,21)" fg:x="163" fg:w="1"/><text x="13.1150%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="12.8650%" y="405" width="0.0789%" height="15" fill="rgb(210,6,40)" fg:x="163" fg:w="1"/><text x="13.1150%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.8650%" y="389" width="0.0789%" height="15" fill="rgb(212,48,18)" fg:x="163" fg:w="1"/><text x="13.1150%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.8650%" y="373" width="0.0789%" height="15" fill="rgb(230,214,11)" fg:x="163" fg:w="1"/><text x="13.1150%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.8650%" y="357" width="0.0789%" height="15" fill="rgb(254,105,39)" fg:x="163" fg:w="1"/><text x="13.1150%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.8650%" y="341" width="0.0789%" height="15" fill="rgb(245,158,5)" fg:x="163" fg:w="1"/><text x="13.1150%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.1018%" y="389" width="0.0789%" height="15" fill="rgb(249,208,11)" fg:x="166" fg:w="1"/><text x="13.3518%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.1807%" y="325" width="0.0789%" height="15" fill="rgb(210,39,28)" fg:x="167" fg:w="1"/><text x="13.4307%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.1807%" y="309" width="0.0789%" height="15" fill="rgb(211,56,53)" fg:x="167" fg:w="1"/><text x="13.4307%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.1807%" y="293" width="0.0789%" height="15" fill="rgb(226,201,30)" fg:x="167" fg:w="1"/><text x="13.4307%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (10 samples, 0.79%)</title><rect x="12.5493%" y="469" width="0.7893%" height="15" fill="rgb(239,101,34)" fg:x="159" fg:w="10"/><text x="12.7993%" y="479.50"></text></g><g><title>kernel::model::props::load_props (10 samples, 0.79%)</title><rect x="12.5493%" y="453" width="0.7893%" height="15" fill="rgb(226,209,5)" fg:x="159" fg:w="10"/><text x="12.7993%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (10 samples, 0.79%)</title><rect x="12.5493%" y="437" width="0.7893%" height="15" fill="rgb(250,105,47)" fg:x="159" fg:w="10"/><text x="12.7993%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.39%)</title><rect x="12.9440%" y="421" width="0.3946%" height="15" fill="rgb(230,72,3)" fg:x="164" fg:w="5"/><text x="13.1940%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="13.0229%" y="405" width="0.3157%" height="15" fill="rgb(232,218,39)" fg:x="165" fg:w="4"/><text x="13.2729%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.1807%" y="389" width="0.1579%" height="15" fill="rgb(248,166,6)" fg:x="167" fg:w="2"/><text x="13.4307%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.1807%" y="373" width="0.1579%" height="15" fill="rgb(247,89,20)" fg:x="167" fg:w="2"/><text x="13.4307%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="13.1807%" y="357" width="0.1579%" height="15" fill="rgb(248,130,54)" fg:x="167" fg:w="2"/><text x="13.4307%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.1807%" y="341" width="0.1579%" height="15" fill="rgb(234,196,4)" fg:x="167" fg:w="2"/><text x="13.4307%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.2597%" y="325" width="0.0789%" height="15" fill="rgb(250,143,31)" fg:x="168" fg:w="1"/><text x="13.5097%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.2597%" y="309" width="0.0789%" height="15" fill="rgb(211,110,34)" fg:x="168" fg:w="1"/><text x="13.5097%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.2597%" y="293" width="0.0789%" height="15" fill="rgb(215,124,48)" fg:x="168" fg:w="1"/><text x="13.5097%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.4175%" y="421" width="0.0789%" height="15" fill="rgb(216,46,13)" fg:x="170" fg:w="1"/><text x="13.6675%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.4964%" y="421" width="0.0789%" height="15" fill="rgb(205,184,25)" fg:x="171" fg:w="1"/><text x="13.7464%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="13.4964%" y="405" width="0.0789%" height="15" fill="rgb(228,1,10)" fg:x="171" fg:w="1"/><text x="13.7464%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.4964%" y="389" width="0.0789%" height="15" fill="rgb(213,116,27)" fg:x="171" fg:w="1"/><text x="13.7464%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.4964%" y="373" width="0.0789%" height="15" fill="rgb(241,95,50)" fg:x="171" fg:w="1"/><text x="13.7464%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.4964%" y="357" width="0.0789%" height="15" fill="rgb(238,48,32)" fg:x="171" fg:w="1"/><text x="13.7464%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.6543%" y="389" width="0.0789%" height="15" fill="rgb(235,113,49)" fg:x="173" fg:w="1"/><text x="13.9043%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.7332%" y="325" width="0.0789%" height="15" fill="rgb(205,127,43)" fg:x="174" fg:w="1"/><text x="13.9832%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7332%" y="309" width="0.0789%" height="15" fill="rgb(250,162,2)" fg:x="174" fg:w="1"/><text x="13.9832%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.63%)</title><rect x="13.3386%" y="469" width="0.6314%" height="15" fill="rgb(220,13,41)" fg:x="169" fg:w="8"/><text x="13.5886%" y="479.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.55%)</title><rect x="13.4175%" y="453" width="0.5525%" height="15" fill="rgb(249,221,25)" fg:x="170" fg:w="7"/><text x="13.6675%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.55%)</title><rect x="13.4175%" y="437" width="0.5525%" height="15" fill="rgb(215,208,19)" fg:x="170" fg:w="7"/><text x="13.6675%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.39%)</title><rect x="13.5754%" y="421" width="0.3946%" height="15" fill="rgb(236,175,2)" fg:x="172" fg:w="5"/><text x="13.8254%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.39%)</title><rect x="13.5754%" y="405" width="0.3946%" height="15" fill="rgb(241,52,2)" fg:x="172" fg:w="5"/><text x="13.8254%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="13.7332%" y="389" width="0.2368%" height="15" fill="rgb(248,140,14)" fg:x="174" fg:w="3"/><text x="13.9832%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.7332%" y="373" width="0.2368%" height="15" fill="rgb(253,22,42)" fg:x="174" fg:w="3"/><text x="13.9832%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="13.7332%" y="357" width="0.2368%" height="15" fill="rgb(234,61,47)" fg:x="174" fg:w="3"/><text x="13.9832%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.7332%" y="341" width="0.2368%" height="15" fill="rgb(208,226,15)" fg:x="174" fg:w="3"/><text x="13.9832%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.8122%" y="325" width="0.1579%" height="15" fill="rgb(217,221,4)" fg:x="175" fg:w="2"/><text x="14.0622%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.8122%" y="309" width="0.1579%" height="15" fill="rgb(212,174,34)" fg:x="175" fg:w="2"/><text x="14.0622%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.8911%" y="293" width="0.0789%" height="15" fill="rgb(253,83,4)" fg:x="176" fg:w="1"/><text x="14.1411%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8911%" y="277" width="0.0789%" height="15" fill="rgb(250,195,49)" fg:x="176" fg:w="1"/><text x="14.1411%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="13.8911%" y="261" width="0.0789%" height="15" fill="rgb(241,192,25)" fg:x="176" fg:w="1"/><text x="14.1411%" y="271.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="13.8911%" y="245" width="0.0789%" height="15" fill="rgb(208,124,10)" fg:x="176" fg:w="1"/><text x="14.1411%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="13.9700%" y="437" width="0.0789%" height="15" fill="rgb(222,33,0)" fg:x="177" fg:w="1"/><text x="14.2200%" y="447.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="13.9700%" y="421" width="0.0789%" height="15" fill="rgb(234,209,28)" fg:x="177" fg:w="1"/><text x="14.2200%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="13.9700%" y="405" width="0.0789%" height="15" fill="rgb(224,11,23)" fg:x="177" fg:w="1"/><text x="14.2200%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="13.9700%" y="389" width="0.0789%" height="15" fill="rgb(232,99,1)" fg:x="177" fg:w="1"/><text x="14.2200%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.9700%" y="373" width="0.0789%" height="15" fill="rgb(237,95,45)" fg:x="177" fg:w="1"/><text x="14.2200%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.08%)</title><rect x="13.9700%" y="357" width="0.0789%" height="15" fill="rgb(208,109,11)" fg:x="177" fg:w="1"/><text x="14.2200%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.08%)</title><rect x="13.9700%" y="341" width="0.0789%" height="15" fill="rgb(216,190,48)" fg:x="177" fg:w="1"/><text x="14.2200%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="13.9700%" y="469" width="0.1579%" height="15" fill="rgb(251,171,36)" fg:x="177" fg:w="2"/><text x="14.2200%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="13.9700%" y="453" width="0.1579%" height="15" fill="rgb(230,62,22)" fg:x="177" fg:w="2"/><text x="14.2200%" y="463.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="14.0489%" y="437" width="0.0789%" height="15" fill="rgb(225,114,35)" fg:x="178" fg:w="1"/><text x="14.2989%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.1279%" y="421" width="0.0789%" height="15" fill="rgb(215,118,42)" fg:x="179" fg:w="1"/><text x="14.3779%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="14.1279%" y="405" width="0.0789%" height="15" fill="rgb(243,119,21)" fg:x="179" fg:w="1"/><text x="14.3779%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.1279%" y="389" width="0.0789%" height="15" fill="rgb(252,177,53)" fg:x="179" fg:w="1"/><text x="14.3779%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.1279%" y="373" width="0.0789%" height="15" fill="rgb(237,209,29)" fg:x="179" fg:w="1"/><text x="14.3779%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.1279%" y="357" width="0.0789%" height="15" fill="rgb(212,65,23)" fg:x="179" fg:w="1"/><text x="14.3779%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.2857%" y="405" width="0.0789%" height="15" fill="rgb(230,222,46)" fg:x="181" fg:w="1"/><text x="14.5357%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.3646%" y="389" width="0.0789%" height="15" fill="rgb(215,135,32)" fg:x="182" fg:w="1"/><text x="14.6146%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.3646%" y="373" width="0.0789%" height="15" fill="rgb(246,101,22)" fg:x="182" fg:w="1"/><text x="14.6146%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.3646%" y="357" width="0.0789%" height="15" fill="rgb(206,107,13)" fg:x="182" fg:w="1"/><text x="14.6146%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3646%" y="341" width="0.0789%" height="15" fill="rgb(250,100,44)" fg:x="182" fg:w="1"/><text x="14.6146%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="14.6803%" y="309" width="0.0789%" height="15" fill="rgb(231,147,38)" fg:x="186" fg:w="1"/><text x="14.9303%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="14.6803%" y="293" width="0.0789%" height="15" fill="rgb(229,8,40)" fg:x="186" fg:w="1"/><text x="14.9303%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="14.6803%" y="277" width="0.0789%" height="15" fill="rgb(221,135,30)" fg:x="186" fg:w="1"/><text x="14.9303%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="14.5225%" y="325" width="0.3157%" height="15" fill="rgb(249,193,18)" fg:x="184" fg:w="4"/><text x="14.7725%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="14.7593%" y="309" width="0.0789%" height="15" fill="rgb(209,133,39)" fg:x="187" fg:w="1"/><text x="15.0093%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.7593%" y="293" width="0.0789%" height="15" fill="rgb(232,100,14)" fg:x="187" fg:w="1"/><text x="15.0093%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.7593%" y="277" width="0.0789%" height="15" fill="rgb(224,185,1)" fg:x="187" fg:w="1"/><text x="15.0093%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.47%)</title><rect x="14.4436%" y="389" width="0.4736%" height="15" fill="rgb(223,139,8)" fg:x="183" fg:w="6"/><text x="14.6936%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.47%)</title><rect x="14.4436%" y="373" width="0.4736%" height="15" fill="rgb(232,213,38)" fg:x="183" fg:w="6"/><text x="14.6936%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.39%)</title><rect x="14.5225%" y="357" width="0.3946%" height="15" fill="rgb(207,94,22)" fg:x="184" fg:w="5"/><text x="14.7725%" y="367.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.39%)</title><rect x="14.5225%" y="341" width="0.3946%" height="15" fill="rgb(219,183,54)" fg:x="184" fg:w="5"/><text x="14.7725%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="14.8382%" y="325" width="0.0789%" height="15" fill="rgb(216,185,54)" fg:x="188" fg:w="1"/><text x="15.0882%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="14.8382%" y="309" width="0.0789%" height="15" fill="rgb(254,217,39)" fg:x="188" fg:w="1"/><text x="15.0882%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.8382%" y="293" width="0.0789%" height="15" fill="rgb(240,178,23)" fg:x="188" fg:w="1"/><text x="15.0882%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.8382%" y="277" width="0.0789%" height="15" fill="rgb(218,11,47)" fg:x="188" fg:w="1"/><text x="15.0882%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="14.9961%" y="357" width="0.0789%" height="15" fill="rgb(218,51,51)" fg:x="190" fg:w="1"/><text x="15.2461%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="14.9961%" y="341" width="0.0789%" height="15" fill="rgb(238,126,27)" fg:x="190" fg:w="1"/><text x="15.2461%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="14.9961%" y="325" width="0.0789%" height="15" fill="rgb(249,202,22)" fg:x="190" fg:w="1"/><text x="15.2461%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.2328%" y="325" width="0.0789%" height="15" fill="rgb(254,195,49)" fg:x="193" fg:w="1"/><text x="15.4828%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.55%)</title><rect x="14.9171%" y="389" width="0.5525%" height="15" fill="rgb(208,123,14)" fg:x="189" fg:w="7"/><text x="15.1671%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.47%)</title><rect x="14.9961%" y="373" width="0.4736%" height="15" fill="rgb(224,200,8)" fg:x="190" fg:w="6"/><text x="15.2461%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.39%)</title><rect x="15.0750%" y="357" width="0.3946%" height="15" fill="rgb(217,61,36)" fg:x="191" fg:w="5"/><text x="15.3250%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.32%)</title><rect x="15.1539%" y="341" width="0.3157%" height="15" fill="rgb(206,35,45)" fg:x="192" fg:w="4"/><text x="15.4039%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="15.3118%" y="325" width="0.1579%" height="15" fill="rgb(217,65,33)" fg:x="194" fg:w="2"/><text x="15.5618%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.8642%" y="341" width="0.0789%" height="15" fill="rgb(222,158,48)" fg:x="201" fg:w="1"/><text x="16.1142%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9432%" y="341" width="0.0789%" height="15" fill="rgb(254,2,54)" fg:x="202" fg:w="1"/><text x="16.1932%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0221%" y="325" width="0.0789%" height="15" fill="rgb(250,143,38)" fg:x="203" fg:w="1"/><text x="16.2721%" y="335.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="16.0221%" y="341" width="0.1579%" height="15" fill="rgb(248,25,0)" fg:x="203" fg:w="2"/><text x="16.2721%" y="351.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="16.1010%" y="325" width="0.0789%" height="15" fill="rgb(206,152,27)" fg:x="204" fg:w="1"/><text x="16.3510%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1010%" y="309" width="0.0789%" height="15" fill="rgb(240,77,30)" fg:x="204" fg:w="1"/><text x="16.3510%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.2589%" y="325" width="0.0789%" height="15" fill="rgb(231,5,3)" fg:x="206" fg:w="1"/><text x="16.5089%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="16.4167%" y="309" width="0.1579%" height="15" fill="rgb(207,226,32)" fg:x="208" fg:w="2"/><text x="16.6667%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (29 samples, 2.29%)</title><rect x="16.5746%" y="309" width="2.2889%" height="15" fill="rgb(222,207,47)" fg:x="210" fg:w="29"/><text x="16.8246%" y="319.50">c..</text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="18.6267%" y="293" width="0.2368%" height="15" fill="rgb(229,115,45)" fg:x="236" fg:w="3"/><text x="18.8767%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (33 samples, 2.60%)</title><rect x="16.3378%" y="325" width="2.6046%" height="15" fill="rgb(224,191,6)" fg:x="207" fg:w="33"/><text x="16.5878%" y="335.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="18.8635%" y="309" width="0.0789%" height="15" fill="rgb(230,227,24)" fg:x="239" fg:w="1"/><text x="19.1135%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="18.9424%" y="325" width="0.0789%" height="15" fill="rgb(228,80,19)" fg:x="240" fg:w="1"/><text x="19.1924%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="18.9424%" y="309" width="0.0789%" height="15" fill="rgb(247,229,0)" fg:x="240" fg:w="1"/><text x="19.1924%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="18.9424%" y="293" width="0.0789%" height="15" fill="rgb(237,194,15)" fg:x="240" fg:w="1"/><text x="19.1924%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="18.9424%" y="277" width="0.0789%" height="15" fill="rgb(219,203,20)" fg:x="240" fg:w="1"/><text x="19.1924%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.9424%" y="261" width="0.0789%" height="15" fill="rgb(234,128,8)" fg:x="240" fg:w="1"/><text x="19.1924%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.9424%" y="245" width="0.0789%" height="15" fill="rgb(248,202,8)" fg:x="240" fg:w="1"/><text x="19.1924%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9424%" y="229" width="0.0789%" height="15" fill="rgb(206,104,37)" fg:x="240" fg:w="1"/><text x="19.1924%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.63%)</title><rect x="19.1792%" y="309" width="0.6314%" height="15" fill="rgb(223,8,27)" fg:x="243" fg:w="8"/><text x="19.4292%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="19.6527%" y="293" width="0.1579%" height="15" fill="rgb(216,217,28)" fg:x="249" fg:w="2"/><text x="19.9027%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (11 samples, 0.87%)</title><rect x="19.0213%" y="325" width="0.8682%" height="15" fill="rgb(249,199,1)" fg:x="241" fg:w="11"/><text x="19.2713%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="19.8106%" y="309" width="0.0789%" height="15" fill="rgb(240,85,17)" fg:x="251" fg:w="1"/><text x="20.0606%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="19.8895%" y="325" width="0.0789%" height="15" fill="rgb(206,108,45)" fg:x="252" fg:w="1"/><text x="20.1395%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.0474%" y="293" width="0.0789%" height="15" fill="rgb(245,210,41)" fg:x="254" fg:w="1"/><text x="20.2974%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.0474%" y="277" width="0.0789%" height="15" fill="rgb(206,13,37)" fg:x="254" fg:w="1"/><text x="20.2974%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="20.2841%" y="261" width="0.2368%" height="15" fill="rgb(250,61,18)" fg:x="257" fg:w="3"/><text x="20.5341%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="20.5209%" y="261" width="0.1579%" height="15" fill="rgb(235,172,48)" fg:x="260" fg:w="2"/><text x="20.7709%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.5998%" y="245" width="0.0789%" height="15" fill="rgb(249,201,17)" fg:x="261" fg:w="1"/><text x="20.8498%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.5998%" y="229" width="0.0789%" height="15" fill="rgb(219,208,6)" fg:x="261" fg:w="1"/><text x="20.8498%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.5998%" y="213" width="0.0789%" height="15" fill="rgb(248,31,23)" fg:x="261" fg:w="1"/><text x="20.8498%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="20.6788%" y="261" width="0.1579%" height="15" fill="rgb(245,15,42)" fg:x="262" fg:w="2"/><text x="20.9288%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="20.7577%" y="245" width="0.0789%" height="15" fill="rgb(222,217,39)" fg:x="263" fg:w="1"/><text x="21.0077%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="20.7577%" y="229" width="0.0789%" height="15" fill="rgb(210,219,27)" fg:x="263" fg:w="1"/><text x="21.0077%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="20.7577%" y="213" width="0.0789%" height="15" fill="rgb(252,166,36)" fg:x="263" fg:w="1"/><text x="21.0077%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="20.7577%" y="197" width="0.0789%" height="15" fill="rgb(245,132,34)" fg:x="263" fg:w="1"/><text x="21.0077%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="20.8366%" y="261" width="0.0789%" height="15" fill="rgb(236,54,3)" fg:x="264" fg:w="1"/><text x="21.0866%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="20.8366%" y="245" width="0.0789%" height="15" fill="rgb(241,173,43)" fg:x="264" fg:w="1"/><text x="21.0866%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="20.8366%" y="229" width="0.0789%" height="15" fill="rgb(215,190,9)" fg:x="264" fg:w="1"/><text x="21.0866%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (101 samples, 7.97%)</title><rect x="20.9155%" y="261" width="7.9716%" height="15" fill="rgb(242,101,16)" fg:x="265" fg:w="101"/><text x="21.1655%" y="271.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (101 samples, 7.97%)</title><rect x="20.9155%" y="245" width="7.9716%" height="15" fill="rgb(223,190,21)" fg:x="265" fg:w="101"/><text x="21.1655%" y="255.50">regex_autom..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (101 samples, 7.97%)</title><rect x="20.9155%" y="229" width="7.9716%" height="15" fill="rgb(215,228,25)" fg:x="265" fg:w="101"/><text x="21.1655%" y="239.50">alloc::vec:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (9 samples, 0.71%)</title><rect x="28.8871%" y="261" width="0.7103%" height="15" fill="rgb(225,36,22)" fg:x="366" fg:w="9"/><text x="29.1371%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5185%" y="245" width="0.0789%" height="15" fill="rgb(251,106,46)" fg:x="374" fg:w="1"/><text x="29.7685%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (123 samples, 9.71%)</title><rect x="20.0474%" y="309" width="9.7080%" height="15" fill="rgb(208,90,1)" fg:x="254" fg:w="123"/><text x="20.2974%" y="319.50">&lt;core::iter::a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (122 samples, 9.63%)</title><rect x="20.1263%" y="293" width="9.6290%" height="15" fill="rgb(243,10,4)" fg:x="255" fg:w="122"/><text x="20.3763%" y="303.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (121 samples, 9.55%)</title><rect x="20.2052%" y="277" width="9.5501%" height="15" fill="rgb(212,137,27)" fg:x="256" fg:w="121"/><text x="20.4552%" y="287.50">regex_automata..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="29.5975%" y="261" width="0.1579%" height="15" fill="rgb(231,220,49)" fg:x="375" fg:w="2"/><text x="29.8475%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="29.5975%" y="245" width="0.1579%" height="15" fill="rgb(237,96,20)" fg:x="375" fg:w="2"/><text x="29.8475%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.6764%" y="229" width="0.0789%" height="15" fill="rgb(239,229,30)" fg:x="376" fg:w="1"/><text x="29.9264%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.6764%" y="213" width="0.0789%" height="15" fill="rgb(219,65,33)" fg:x="376" fg:w="1"/><text x="29.9264%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.1500%" y="293" width="0.0789%" height="15" fill="rgb(243,134,7)" fg:x="382" fg:w="1"/><text x="30.4000%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="30.2289%" y="293" width="0.1579%" height="15" fill="rgb(216,177,54)" fg:x="383" fg:w="2"/><text x="30.4789%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.7024%" y="277" width="0.0789%" height="15" fill="rgb(211,160,20)" fg:x="389" fg:w="1"/><text x="30.9524%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.7814%" y="277" width="0.0789%" height="15" fill="rgb(239,85,39)" fg:x="390" fg:w="1"/><text x="31.0314%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.7814%" y="261" width="0.0789%" height="15" fill="rgb(232,125,22)" fg:x="390" fg:w="1"/><text x="31.0314%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.7814%" y="245" width="0.0789%" height="15" fill="rgb(244,57,34)" fg:x="390" fg:w="1"/><text x="31.0314%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.55%)</title><rect x="30.3867%" y="293" width="0.5525%" height="15" fill="rgb(214,203,32)" fg:x="385" fg:w="7"/><text x="30.6367%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.8603%" y="277" width="0.0789%" height="15" fill="rgb(207,58,43)" fg:x="391" fg:w="1"/><text x="31.1103%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.8603%" y="261" width="0.0789%" height="15" fill="rgb(215,193,15)" fg:x="391" fg:w="1"/><text x="31.1103%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.8603%" y="245" width="0.0789%" height="15" fill="rgb(232,15,44)" fg:x="391" fg:w="1"/><text x="31.1103%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.26%)</title><rect x="29.7553%" y="309" width="1.2628%" height="15" fill="rgb(212,3,48)" fg:x="377" fg:w="16"/><text x="30.0053%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="30.9392%" y="293" width="0.0789%" height="15" fill="rgb(218,128,7)" fg:x="392" fg:w="1"/><text x="31.1892%" y="303.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="30.9392%" y="277" width="0.0789%" height="15" fill="rgb(226,216,39)" fg:x="392" fg:w="1"/><text x="31.1892%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.9392%" y="261" width="0.0789%" height="15" fill="rgb(243,47,51)" fg:x="392" fg:w="1"/><text x="31.1892%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="31.0182%" y="293" width="0.0789%" height="15" fill="rgb(241,183,40)" fg:x="393" fg:w="1"/><text x="31.2682%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.0182%" y="277" width="0.0789%" height="15" fill="rgb(231,217,32)" fg:x="393" fg:w="1"/><text x="31.2682%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.0182%" y="261" width="0.0789%" height="15" fill="rgb(229,61,38)" fg:x="393" fg:w="1"/><text x="31.2682%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.0182%" y="245" width="0.0789%" height="15" fill="rgb(225,210,5)" fg:x="393" fg:w="1"/><text x="31.2682%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (142 samples, 11.21%)</title><rect x="19.9684%" y="325" width="11.2076%" height="15" fill="rgb(231,79,45)" fg:x="253" fg:w="142"/><text x="20.2184%" y="335.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="31.0182%" y="309" width="0.1579%" height="15" fill="rgb(224,100,7)" fg:x="393" fg:w="2"/><text x="31.2682%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="31.0971%" y="293" width="0.0789%" height="15" fill="rgb(241,198,18)" fg:x="394" fg:w="1"/><text x="31.3471%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.0971%" y="277" width="0.0789%" height="15" fill="rgb(252,97,53)" fg:x="394" fg:w="1"/><text x="31.3471%" y="287.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="31.1760%" y="325" width="0.0789%" height="15" fill="rgb(220,88,7)" fg:x="395" fg:w="1"/><text x="31.4260%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (192 samples, 15.15%)</title><rect x="16.1800%" y="341" width="15.1539%" height="15" fill="rgb(213,176,14)" fg:x="205" fg:w="192"/><text x="16.4300%" y="351.50">regex_automata::meta::s..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="31.2549%" y="325" width="0.0789%" height="15" fill="rgb(246,73,7)" fg:x="396" fg:w="1"/><text x="31.5049%" y="335.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="31.2549%" y="309" width="0.0789%" height="15" fill="rgb(245,64,36)" fg:x="396" fg:w="1"/><text x="31.5049%" y="319.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="31.4128%" y="293" width="0.0789%" height="15" fill="rgb(245,80,10)" fg:x="398" fg:w="1"/><text x="31.6628%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.4128%" y="277" width="0.0789%" height="15" fill="rgb(232,107,50)" fg:x="398" fg:w="1"/><text x="31.6628%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.4128%" y="261" width="0.0789%" height="15" fill="rgb(253,3,0)" fg:x="398" fg:w="1"/><text x="31.6628%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.4128%" y="245" width="0.0789%" height="15" fill="rgb(212,99,53)" fg:x="398" fg:w="1"/><text x="31.6628%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="31.4917%" y="293" width="0.0789%" height="15" fill="rgb(249,111,54)" fg:x="399" fg:w="1"/><text x="31.7417%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.39%)</title><rect x="31.5706%" y="277" width="0.3946%" height="15" fill="rgb(249,55,30)" fg:x="400" fg:w="5"/><text x="31.8206%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.39%)</title><rect x="31.5706%" y="261" width="0.3946%" height="15" fill="rgb(237,47,42)" fg:x="400" fg:w="5"/><text x="31.8206%" y="271.50"></text></g><g><title>__libc_malloc (5 samples, 0.39%)</title><rect x="31.5706%" y="245" width="0.3946%" height="15" fill="rgb(211,20,18)" fg:x="400" fg:w="5"/><text x="31.8206%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.63%)</title><rect x="31.4128%" y="309" width="0.6314%" height="15" fill="rgb(231,203,46)" fg:x="398" fg:w="8"/><text x="31.6628%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.47%)</title><rect x="31.5706%" y="293" width="0.4736%" height="15" fill="rgb(237,142,3)" fg:x="400" fg:w="6"/><text x="31.8206%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="31.9653%" y="277" width="0.0789%" height="15" fill="rgb(241,107,1)" fg:x="405" fg:w="1"/><text x="32.2153%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="31.9653%" y="261" width="0.0789%" height="15" fill="rgb(229,83,13)" fg:x="405" fg:w="1"/><text x="32.2153%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="32.0442%" y="309" width="0.0789%" height="15" fill="rgb(241,91,40)" fg:x="406" fg:w="1"/><text x="32.2942%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.0442%" y="293" width="0.0789%" height="15" fill="rgb(225,3,45)" fg:x="406" fg:w="1"/><text x="32.2942%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.95%)</title><rect x="31.3339%" y="341" width="0.9471%" height="15" fill="rgb(244,223,14)" fg:x="397" fg:w="12"/><text x="31.5839%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.87%)</title><rect x="31.4128%" y="325" width="0.8682%" height="15" fill="rgb(224,124,37)" fg:x="398" fg:w="11"/><text x="31.6628%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="32.1231%" y="309" width="0.1579%" height="15" fill="rgb(251,171,30)" fg:x="407" fg:w="2"/><text x="32.3731%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.2810%" y="293" width="0.0789%" height="15" fill="rgb(236,46,54)" fg:x="409" fg:w="1"/><text x="32.5310%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.2810%" y="277" width="0.0789%" height="15" fill="rgb(245,213,5)" fg:x="409" fg:w="1"/><text x="32.5310%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.2810%" y="261" width="0.0789%" height="15" fill="rgb(230,144,27)" fg:x="409" fg:w="1"/><text x="32.5310%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="32.3599%" y="293" width="0.3157%" height="15" fill="rgb(220,86,6)" fg:x="410" fg:w="4"/><text x="32.6099%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.47%)</title><rect x="32.2810%" y="309" width="0.4736%" height="15" fill="rgb(240,20,13)" fg:x="409" fg:w="6"/><text x="32.5310%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="32.6756%" y="293" width="0.0789%" height="15" fill="rgb(217,89,34)" fg:x="414" fg:w="1"/><text x="32.9256%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (217 samples, 17.13%)</title><rect x="15.7064%" y="357" width="17.1271%" height="15" fill="rgb(229,13,5)" fg:x="199" fg:w="217"/><text x="15.9564%" y="367.50">regex_automata::meta::regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.55%)</title><rect x="32.2810%" y="341" width="0.5525%" height="15" fill="rgb(244,67,35)" fg:x="409" fg:w="7"/><text x="32.5310%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.55%)</title><rect x="32.2810%" y="325" width="0.5525%" height="15" fill="rgb(221,40,2)" fg:x="409" fg:w="7"/><text x="32.5310%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="32.7545%" y="309" width="0.0789%" height="15" fill="rgb(237,157,21)" fg:x="415" fg:w="1"/><text x="33.0045%" y="319.50"></text></g><g><title>regex::regex::string::Regex::new (221 samples, 17.44%)</title><rect x="15.4696%" y="389" width="17.4428%" height="15" fill="rgb(222,94,11)" fg:x="196" fg:w="221"/><text x="15.7196%" y="399.50">regex::regex::string::Regex..</text></g><g><title>regex::builders::Builder::build_one_string (219 samples, 17.28%)</title><rect x="15.6275%" y="373" width="17.2849%" height="15" fill="rgb(249,113,6)" fg:x="198" fg:w="219"/><text x="15.8775%" y="383.50">regex::builders::Builder::b..</text></g><g><title>regex_automata::meta::regex::Config::utf8_empty (1 samples, 0.08%)</title><rect x="32.8335%" y="357" width="0.0789%" height="15" fill="rgb(238,137,36)" fg:x="416" fg:w="1"/><text x="33.0835%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.5438%" y="309" width="0.0789%" height="15" fill="rgb(210,102,26)" fg:x="425" fg:w="1"/><text x="33.7938%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.5438%" y="293" width="0.0789%" height="15" fill="rgb(218,30,30)" fg:x="425" fg:w="1"/><text x="33.7938%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.5438%" y="277" width="0.0789%" height="15" fill="rgb(214,67,26)" fg:x="425" fg:w="1"/><text x="33.7938%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="33.7017%" y="293" width="0.0789%" height="15" fill="rgb(251,9,53)" fg:x="427" fg:w="1"/><text x="33.9517%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.32%)</title><rect x="33.6227%" y="309" width="0.3157%" height="15" fill="rgb(228,204,25)" fg:x="426" fg:w="4"/><text x="33.8727%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="33.7806%" y="293" width="0.1579%" height="15" fill="rgb(207,153,8)" fg:x="428" fg:w="2"/><text x="34.0306%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="33.9384%" y="309" width="0.1579%" height="15" fill="rgb(242,9,16)" fg:x="430" fg:w="2"/><text x="34.1884%" y="319.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (251 samples, 19.81%)</title><rect x="14.3646%" y="405" width="19.8106%" height="15" fill="rgb(217,211,10)" fg:x="182" fg:w="251"/><text x="14.6146%" y="415.50">indefinite::helper::Helper::get..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.26%)</title><rect x="32.9124%" y="389" width="1.2628%" height="15" fill="rgb(219,228,52)" fg:x="417" fg:w="16"/><text x="33.1624%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.26%)</title><rect x="32.9124%" y="373" width="1.2628%" height="15" fill="rgb(231,92,29)" fg:x="417" fg:w="16"/><text x="33.1624%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.26%)</title><rect x="32.9124%" y="357" width="1.2628%" height="15" fill="rgb(232,8,23)" fg:x="417" fg:w="16"/><text x="33.1624%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.26%)</title><rect x="32.9124%" y="341" width="1.2628%" height="15" fill="rgb(216,211,34)" fg:x="417" fg:w="16"/><text x="33.1624%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (16 samples, 1.26%)</title><rect x="32.9124%" y="325" width="1.2628%" height="15" fill="rgb(236,151,0)" fg:x="417" fg:w="16"/><text x="33.1624%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="34.0963%" y="309" width="0.0789%" height="15" fill="rgb(209,168,3)" fg:x="432" fg:w="1"/><text x="34.3463%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.0963%" y="293" width="0.0789%" height="15" fill="rgb(208,129,28)" fg:x="432" fg:w="1"/><text x="34.3463%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="34.3331%" y="341" width="0.0789%" height="15" fill="rgb(229,78,22)" fg:x="435" fg:w="1"/><text x="34.5831%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.3331%" y="325" width="0.0789%" height="15" fill="rgb(228,187,13)" fg:x="435" fg:w="1"/><text x="34.5831%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="34.3331%" y="357" width="0.3157%" height="15" fill="rgb(240,119,24)" fg:x="435" fg:w="4"/><text x="34.5831%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (3 samples, 0.24%)</title><rect x="34.4120%" y="341" width="0.2368%" height="15" fill="rgb(209,194,42)" fg:x="436" fg:w="3"/><text x="34.6620%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="34.4120%" y="325" width="0.2368%" height="15" fill="rgb(247,200,46)" fg:x="436" fg:w="3"/><text x="34.6620%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="34.4909%" y="309" width="0.1579%" height="15" fill="rgb(218,76,16)" fg:x="437" fg:w="2"/><text x="34.7409%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="34.4909%" y="293" width="0.1579%" height="15" fill="rgb(225,21,48)" fg:x="437" fg:w="2"/><text x="34.7409%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (5 samples, 0.39%)</title><rect x="34.6488%" y="341" width="0.3946%" height="15" fill="rgb(239,223,50)" fg:x="439" fg:w="5"/><text x="34.8988%" y="351.50"></text></g><g><title>__libc_free (5 samples, 0.39%)</title><rect x="34.6488%" y="325" width="0.3946%" height="15" fill="rgb(244,45,21)" fg:x="439" fg:w="5"/><text x="34.8988%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (11 samples, 0.87%)</title><rect x="34.2541%" y="389" width="0.8682%" height="15" fill="rgb(232,33,43)" fg:x="434" fg:w="11"/><text x="34.5041%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (10 samples, 0.79%)</title><rect x="34.3331%" y="373" width="0.7893%" height="15" fill="rgb(209,8,3)" fg:x="435" fg:w="10"/><text x="34.5831%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (6 samples, 0.47%)</title><rect x="34.6488%" y="357" width="0.4736%" height="15" fill="rgb(214,25,53)" fg:x="439" fg:w="6"/><text x="34.8988%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="35.0434%" y="341" width="0.0789%" height="15" fill="rgb(254,186,54)" fg:x="444" fg:w="1"/><text x="35.2934%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="35.2013%" y="341" width="0.1579%" height="15" fill="rgb(208,174,49)" fg:x="446" fg:w="2"/><text x="35.4513%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="35.2802%" y="325" width="0.0789%" height="15" fill="rgb(233,191,51)" fg:x="447" fg:w="1"/><text x="35.5302%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.32%)</title><rect x="35.1223%" y="373" width="0.3157%" height="15" fill="rgb(222,134,10)" fg:x="445" fg:w="4"/><text x="35.3723%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="35.1223%" y="357" width="0.3157%" height="15" fill="rgb(230,226,20)" fg:x="445" fg:w="4"/><text x="35.3723%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="35.3591%" y="341" width="0.0789%" height="15" fill="rgb(251,111,25)" fg:x="448" fg:w="1"/><text x="35.6091%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.3591%" y="325" width="0.0789%" height="15" fill="rgb(224,40,46)" fg:x="448" fg:w="1"/><text x="35.6091%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="35.5170%" y="325" width="0.0789%" height="15" fill="rgb(236,108,47)" fg:x="450" fg:w="1"/><text x="35.7670%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.5170%" y="309" width="0.0789%" height="15" fill="rgb(234,93,0)" fg:x="450" fg:w="1"/><text x="35.7670%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.5170%" y="293" width="0.0789%" height="15" fill="rgb(224,213,32)" fg:x="450" fg:w="1"/><text x="35.7670%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.5170%" y="277" width="0.0789%" height="15" fill="rgb(251,11,48)" fg:x="450" fg:w="1"/><text x="35.7670%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="36.1484%" y="293" width="0.1579%" height="15" fill="rgb(236,173,5)" fg:x="458" fg:w="2"/><text x="36.3984%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (17 samples, 1.34%)</title><rect x="35.5959%" y="309" width="1.3418%" height="15" fill="rgb(230,95,12)" fg:x="451" fg:w="17"/><text x="35.8459%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (8 samples, 0.63%)</title><rect x="36.3062%" y="293" width="0.6314%" height="15" fill="rgb(232,209,1)" fg:x="460" fg:w="8"/><text x="36.5562%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (20 samples, 1.58%)</title><rect x="35.5959%" y="325" width="1.5785%" height="15" fill="rgb(232,6,1)" fg:x="451" fg:w="20"/><text x="35.8459%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="36.9376%" y="309" width="0.2368%" height="15" fill="rgb(210,224,50)" fg:x="468" fg:w="3"/><text x="37.1876%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="36.9376%" y="293" width="0.2368%" height="15" fill="rgb(228,127,35)" fg:x="468" fg:w="3"/><text x="37.1876%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="37.0166%" y="277" width="0.1579%" height="15" fill="rgb(245,102,45)" fg:x="469" fg:w="2"/><text x="37.2666%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="37.0166%" y="261" width="0.1579%" height="15" fill="rgb(214,1,49)" fg:x="469" fg:w="2"/><text x="37.2666%" y="271.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (27 samples, 2.13%)</title><rect x="35.1223%" y="389" width="2.1310%" height="15" fill="rgb(226,163,40)" fg:x="445" fg:w="27"/><text x="35.3723%" y="399.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (23 samples, 1.82%)</title><rect x="35.4380%" y="373" width="1.8153%" height="15" fill="rgb(239,212,28)" fg:x="449" fg:w="23"/><text x="35.6880%" y="383.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (22 samples, 1.74%)</title><rect x="35.5170%" y="357" width="1.7364%" height="15" fill="rgb(220,20,13)" fg:x="450" fg:w="22"/><text x="35.7670%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (22 samples, 1.74%)</title><rect x="35.5170%" y="341" width="1.7364%" height="15" fill="rgb(210,164,35)" fg:x="450" fg:w="22"/><text x="35.7670%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="37.1744%" y="325" width="0.0789%" height="15" fill="rgb(248,109,41)" fg:x="471" fg:w="1"/><text x="37.4244%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.24%)</title><rect x="37.4112%" y="309" width="0.2368%" height="15" fill="rgb(238,23,50)" fg:x="474" fg:w="3"/><text x="37.6612%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="37.4112%" y="293" width="0.2368%" height="15" fill="rgb(211,48,49)" fg:x="474" fg:w="3"/><text x="37.6612%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="37.4112%" y="277" width="0.2368%" height="15" fill="rgb(223,36,21)" fg:x="474" fg:w="3"/><text x="37.6612%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="37.4112%" y="261" width="0.2368%" height="15" fill="rgb(207,123,46)" fg:x="474" fg:w="3"/><text x="37.6612%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.47%)</title><rect x="37.2534%" y="341" width="0.4736%" height="15" fill="rgb(240,218,32)" fg:x="472" fg:w="6"/><text x="37.5034%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (6 samples, 0.47%)</title><rect x="37.2534%" y="325" width="0.4736%" height="15" fill="rgb(252,5,43)" fg:x="472" fg:w="6"/><text x="37.5034%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.6480%" y="309" width="0.0789%" height="15" fill="rgb(252,84,19)" fg:x="477" fg:w="1"/><text x="37.8980%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="37.7269%" y="309" width="0.0789%" height="15" fill="rgb(243,152,39)" fg:x="478" fg:w="1"/><text x="37.9769%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.7269%" y="293" width="0.0789%" height="15" fill="rgb(234,160,15)" fg:x="478" fg:w="1"/><text x="37.9769%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.7269%" y="277" width="0.0789%" height="15" fill="rgb(237,34,20)" fg:x="478" fg:w="1"/><text x="37.9769%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.7269%" y="261" width="0.0789%" height="15" fill="rgb(229,97,13)" fg:x="478" fg:w="1"/><text x="37.9769%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="37.8058%" y="309" width="0.0789%" height="15" fill="rgb(234,71,50)" fg:x="479" fg:w="1"/><text x="38.0558%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="37.8058%" y="293" width="0.0789%" height="15" fill="rgb(253,155,4)" fg:x="479" fg:w="1"/><text x="38.0558%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="37.8848%" y="277" width="0.1579%" height="15" fill="rgb(222,185,37)" fg:x="480" fg:w="2"/><text x="38.1348%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.9637%" y="261" width="0.0789%" height="15" fill="rgb(251,177,13)" fg:x="481" fg:w="1"/><text x="38.2137%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.9637%" y="245" width="0.0789%" height="15" fill="rgb(250,179,40)" fg:x="481" fg:w="1"/><text x="38.2137%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.9637%" y="229" width="0.0789%" height="15" fill="rgb(242,44,2)" fg:x="481" fg:w="1"/><text x="38.2137%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.39%)</title><rect x="37.7269%" y="341" width="0.3946%" height="15" fill="rgb(216,177,13)" fg:x="478" fg:w="5"/><text x="37.9769%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="37.7269%" y="325" width="0.3946%" height="15" fill="rgb(216,106,43)" fg:x="478" fg:w="5"/><text x="37.9769%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="37.8848%" y="309" width="0.2368%" height="15" fill="rgb(216,183,2)" fg:x="480" fg:w="3"/><text x="38.1348%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="37.8848%" y="293" width="0.2368%" height="15" fill="rgb(249,75,3)" fg:x="480" fg:w="3"/><text x="38.1348%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="38.0426%" y="277" width="0.0789%" height="15" fill="rgb(219,67,39)" fg:x="482" fg:w="1"/><text x="38.2926%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="38.1215%" y="341" width="0.0789%" height="15" fill="rgb(253,228,2)" fg:x="483" fg:w="1"/><text x="38.3715%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.1215%" y="325" width="0.0789%" height="15" fill="rgb(235,138,27)" fg:x="483" fg:w="1"/><text x="38.3715%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.2005%" y="325" width="0.0789%" height="15" fill="rgb(236,97,51)" fg:x="484" fg:w="1"/><text x="38.4505%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (31 samples, 2.45%)</title><rect x="38.2794%" y="325" width="2.4467%" height="15" fill="rgb(240,80,30)" fg:x="485" fg:w="31"/><text x="38.5294%" y="335.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (31 samples, 2.45%)</title><rect x="38.2794%" y="309" width="2.4467%" height="15" fill="rgb(230,178,19)" fg:x="485" fg:w="31"/><text x="38.5294%" y="319.50">co..</text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="40.4104%" y="293" width="0.3157%" height="15" fill="rgb(210,190,27)" fg:x="512" fg:w="4"/><text x="40.6604%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="40.7261%" y="325" width="0.1579%" height="15" fill="rgb(222,107,31)" fg:x="516" fg:w="2"/><text x="40.9761%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="40.9629%" y="309" width="0.0789%" height="15" fill="rgb(216,127,34)" fg:x="519" fg:w="1"/><text x="41.2129%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="40.9629%" y="293" width="0.0789%" height="15" fill="rgb(234,116,52)" fg:x="519" fg:w="1"/><text x="41.2129%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.9629%" y="277" width="0.0789%" height="15" fill="rgb(222,124,15)" fg:x="519" fg:w="1"/><text x="41.2129%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.39%)</title><rect x="40.8840%" y="325" width="0.3946%" height="15" fill="rgb(231,179,28)" fg:x="518" fg:w="5"/><text x="41.1340%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="41.0418%" y="309" width="0.2368%" height="15" fill="rgb(226,93,45)" fg:x="520" fg:w="3"/><text x="41.2918%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.5154%" y="293" width="0.0789%" height="15" fill="rgb(215,8,51)" fg:x="526" fg:w="1"/><text x="41.7654%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.5154%" y="277" width="0.0789%" height="15" fill="rgb(223,106,5)" fg:x="526" fg:w="1"/><text x="41.7654%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.5154%" y="261" width="0.0789%" height="15" fill="rgb(250,191,5)" fg:x="526" fg:w="1"/><text x="41.7654%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="41.5943%" y="293" width="0.0789%" height="15" fill="rgb(242,132,44)" fg:x="527" fg:w="1"/><text x="41.8443%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.5943%" y="277" width="0.0789%" height="15" fill="rgb(251,152,29)" fg:x="527" fg:w="1"/><text x="41.8443%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.5943%" y="261" width="0.0789%" height="15" fill="rgb(218,179,5)" fg:x="527" fg:w="1"/><text x="41.8443%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.5943%" y="245" width="0.0789%" height="15" fill="rgb(227,67,19)" fg:x="527" fg:w="1"/><text x="41.8443%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.47%)</title><rect x="41.6732%" y="293" width="0.4736%" height="15" fill="rgb(233,119,31)" fg:x="528" fg:w="6"/><text x="41.9232%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="42.0679%" y="277" width="0.0789%" height="15" fill="rgb(241,120,22)" fg:x="533" fg:w="1"/><text x="42.3179%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (16 samples, 1.26%)</title><rect x="41.2786%" y="309" width="1.2628%" height="15" fill="rgb(224,102,30)" fg:x="523" fg:w="16"/><text x="41.5286%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.39%)</title><rect x="42.1468%" y="293" width="0.3946%" height="15" fill="rgb(210,164,37)" fg:x="534" fg:w="5"/><text x="42.3968%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.39%)</title><rect x="42.1468%" y="277" width="0.3946%" height="15" fill="rgb(226,191,16)" fg:x="534" fg:w="5"/><text x="42.3968%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.39%)</title><rect x="42.1468%" y="261" width="0.3946%" height="15" fill="rgb(214,40,45)" fg:x="534" fg:w="5"/><text x="42.3968%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (18 samples, 1.42%)</title><rect x="41.2786%" y="325" width="1.4207%" height="15" fill="rgb(244,29,26)" fg:x="523" fg:w="18"/><text x="41.5286%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="42.5414%" y="309" width="0.1579%" height="15" fill="rgb(216,16,5)" fg:x="539" fg:w="2"/><text x="42.7914%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="42.5414%" y="293" width="0.1579%" height="15" fill="rgb(249,76,35)" fg:x="539" fg:w="2"/><text x="42.7914%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (2 samples, 0.16%)</title><rect x="42.5414%" y="277" width="0.1579%" height="15" fill="rgb(207,11,44)" fg:x="539" fg:w="2"/><text x="42.7914%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="42.5414%" y="261" width="0.1579%" height="15" fill="rgb(228,190,49)" fg:x="539" fg:w="2"/><text x="42.7914%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.6204%" y="245" width="0.0789%" height="15" fill="rgb(214,173,12)" fg:x="540" fg:w="1"/><text x="42.8704%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.6204%" y="229" width="0.0789%" height="15" fill="rgb(218,26,35)" fg:x="540" fg:w="1"/><text x="42.8704%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="42.7782%" y="277" width="0.0789%" height="15" fill="rgb(220,200,19)" fg:x="542" fg:w="1"/><text x="43.0282%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.7782%" y="261" width="0.0789%" height="15" fill="rgb(239,95,49)" fg:x="542" fg:w="1"/><text x="43.0282%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.7782%" y="245" width="0.0789%" height="15" fill="rgb(235,85,53)" fg:x="542" fg:w="1"/><text x="43.0282%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.7782%" y="229" width="0.0789%" height="15" fill="rgb(233,133,31)" fg:x="542" fg:w="1"/><text x="43.0282%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="42.9361%" y="245" width="0.0789%" height="15" fill="rgb(218,25,20)" fg:x="544" fg:w="1"/><text x="43.1861%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="43.0150%" y="229" width="0.0789%" height="15" fill="rgb(252,210,38)" fg:x="545" fg:w="1"/><text x="43.2650%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.0150%" y="213" width="0.0789%" height="15" fill="rgb(242,134,21)" fg:x="545" fg:w="1"/><text x="43.2650%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.0150%" y="197" width="0.0789%" height="15" fill="rgb(213,28,48)" fg:x="545" fg:w="1"/><text x="43.2650%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.0150%" y="181" width="0.0789%" height="15" fill="rgb(250,196,2)" fg:x="545" fg:w="1"/><text x="43.2650%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.47%)</title><rect x="44.9092%" y="213" width="0.4736%" height="15" fill="rgb(227,5,17)" fg:x="569" fg:w="6"/><text x="45.1592%" y="223.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="45.3828%" y="213" width="0.2368%" height="15" fill="rgb(221,226,24)" fg:x="575" fg:w="3"/><text x="45.6328%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (8 samples, 0.63%)</title><rect x="45.6196%" y="213" width="0.6314%" height="15" fill="rgb(211,5,48)" fg:x="578" fg:w="8"/><text x="45.8696%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="46.0931%" y="197" width="0.1579%" height="15" fill="rgb(219,150,6)" fg:x="584" fg:w="2"/><text x="46.3431%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="46.0931%" y="181" width="0.1579%" height="15" fill="rgb(251,46,16)" fg:x="584" fg:w="2"/><text x="46.3431%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="46.0931%" y="165" width="0.1579%" height="15" fill="rgb(220,204,40)" fg:x="584" fg:w="2"/><text x="46.3431%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (5 samples, 0.39%)</title><rect x="46.2510%" y="213" width="0.3946%" height="15" fill="rgb(211,85,2)" fg:x="586" fg:w="5"/><text x="46.5010%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.3560%" y="181" width="0.0789%" height="15" fill="rgb(229,17,7)" fg:x="600" fg:w="1"/><text x="47.6060%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.5138%" y="149" width="0.0789%" height="15" fill="rgb(239,72,28)" fg:x="602" fg:w="1"/><text x="47.7638%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="47.4349%" y="181" width="0.2368%" height="15" fill="rgb(230,47,54)" fg:x="601" fg:w="3"/><text x="47.6849%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="47.4349%" y="165" width="0.2368%" height="15" fill="rgb(214,50,8)" fg:x="601" fg:w="3"/><text x="47.6849%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.5927%" y="149" width="0.0789%" height="15" fill="rgb(216,198,43)" fg:x="603" fg:w="1"/><text x="47.8427%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.2242%" y="165" width="0.0789%" height="15" fill="rgb(234,20,35)" fg:x="611" fg:w="1"/><text x="48.4742%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (23 samples, 1.82%)</title><rect x="46.6456%" y="213" width="1.8153%" height="15" fill="rgb(254,45,19)" fg:x="591" fg:w="23"/><text x="46.8956%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (19 samples, 1.50%)</title><rect x="46.9613%" y="197" width="1.4996%" height="15" fill="rgb(219,14,44)" fg:x="595" fg:w="19"/><text x="47.2113%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (10 samples, 0.79%)</title><rect x="47.6717%" y="181" width="0.7893%" height="15" fill="rgb(217,220,26)" fg:x="604" fg:w="10"/><text x="47.9217%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="48.3031%" y="165" width="0.1579%" height="15" fill="rgb(213,158,28)" fg:x="612" fg:w="2"/><text x="48.5531%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="48.3031%" y="149" width="0.1579%" height="15" fill="rgb(252,51,52)" fg:x="612" fg:w="2"/><text x="48.5531%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="48.3031%" y="133" width="0.1579%" height="15" fill="rgb(246,89,16)" fg:x="612" fg:w="2"/><text x="48.5531%" y="143.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="48.3031%" y="117" width="0.1579%" height="15" fill="rgb(216,158,49)" fg:x="612" fg:w="2"/><text x="48.5531%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="48.4609%" y="213" width="0.0789%" height="15" fill="rgb(236,107,19)" fg:x="614" fg:w="1"/><text x="48.7109%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="48.4609%" y="197" width="0.0789%" height="15" fill="rgb(228,185,30)" fg:x="614" fg:w="1"/><text x="48.7109%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.4609%" y="181" width="0.0789%" height="15" fill="rgb(246,134,8)" fg:x="614" fg:w="1"/><text x="48.7109%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.5399%" y="181" width="0.0789%" height="15" fill="rgb(214,143,50)" fg:x="615" fg:w="1"/><text x="48.7899%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (85 samples, 6.71%)</title><rect x="48.5399%" y="213" width="6.7088%" height="15" fill="rgb(228,75,8)" fg:x="615" fg:w="85"/><text x="48.7899%" y="223.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (85 samples, 6.71%)</title><rect x="48.5399%" y="197" width="6.7088%" height="15" fill="rgb(207,175,4)" fg:x="615" fg:w="85"/><text x="48.7899%" y="207.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (84 samples, 6.63%)</title><rect x="48.6188%" y="181" width="6.6298%" height="15" fill="rgb(205,108,24)" fg:x="616" fg:w="84"/><text x="48.8688%" y="191.50">alloc::ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="55.2486%" y="213" width="0.2368%" height="15" fill="rgb(244,120,49)" fg:x="700" fg:w="3"/><text x="55.4986%" y="223.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="55.4854%" y="213" width="0.0789%" height="15" fill="rgb(223,47,38)" fg:x="703" fg:w="1"/><text x="55.7354%" y="223.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="55.5643%" y="213" width="0.0789%" height="15" fill="rgb(229,179,11)" fg:x="704" fg:w="1"/><text x="55.8143%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (173 samples, 13.65%)</title><rect x="42.7782%" y="309" width="13.6543%" height="15" fill="rgb(231,122,1)" fg:x="542" fg:w="173"/><text x="43.0282%" y="319.50">&lt;core::iter::adapters..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (173 samples, 13.65%)</title><rect x="42.7782%" y="293" width="13.6543%" height="15" fill="rgb(245,119,9)" fg:x="542" fg:w="173"/><text x="43.0282%" y="303.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (172 samples, 13.58%)</title><rect x="42.8571%" y="277" width="13.5754%" height="15" fill="rgb(241,163,25)" fg:x="543" fg:w="172"/><text x="43.1071%" y="287.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (171 samples, 13.50%)</title><rect x="42.9361%" y="261" width="13.4964%" height="15" fill="rgb(217,214,3)" fg:x="544" fg:w="171"/><text x="43.1861%" y="271.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (170 samples, 13.42%)</title><rect x="43.0150%" y="245" width="13.4175%" height="15" fill="rgb(240,86,28)" fg:x="545" fg:w="170"/><text x="43.2650%" y="255.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (169 samples, 13.34%)</title><rect x="43.0939%" y="229" width="13.3386%" height="15" fill="rgb(215,47,9)" fg:x="546" fg:w="169"/><text x="43.3439%" y="239.50">regex_automata::nfa:..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (10 samples, 0.79%)</title><rect x="55.6433%" y="213" width="0.7893%" height="15" fill="rgb(252,25,45)" fg:x="705" fg:w="10"/><text x="55.8933%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.47%)</title><rect x="55.9590%" y="197" width="0.4736%" height="15" fill="rgb(251,164,9)" fg:x="709" fg:w="6"/><text x="56.2090%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="56.1957%" y="181" width="0.2368%" height="15" fill="rgb(233,194,0)" fg:x="712" fg:w="3"/><text x="56.4457%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="56.1957%" y="165" width="0.2368%" height="15" fill="rgb(249,111,24)" fg:x="712" fg:w="3"/><text x="56.4457%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.5904%" y="293" width="0.0789%" height="15" fill="rgb(250,223,3)" fg:x="717" fg:w="1"/><text x="56.8404%" y="303.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="56.6693%" y="293" width="0.2368%" height="15" fill="rgb(236,178,37)" fg:x="718" fg:w="3"/><text x="56.9193%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.9061%" y="293" width="0.0789%" height="15" fill="rgb(241,158,50)" fg:x="721" fg:w="1"/><text x="57.1561%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.9061%" y="277" width="0.0789%" height="15" fill="rgb(213,121,41)" fg:x="721" fg:w="1"/><text x="57.1561%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (11 samples, 0.87%)</title><rect x="56.9850%" y="293" width="0.8682%" height="15" fill="rgb(240,92,3)" fg:x="722" fg:w="11"/><text x="57.2350%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.39%)</title><rect x="57.4586%" y="277" width="0.3946%" height="15" fill="rgb(205,123,3)" fg:x="728" fg:w="5"/><text x="57.7086%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.39%)</title><rect x="57.4586%" y="261" width="0.3946%" height="15" fill="rgb(205,97,47)" fg:x="728" fg:w="5"/><text x="57.7086%" y="271.50"></text></g><g><title>realloc (5 samples, 0.39%)</title><rect x="57.4586%" y="245" width="0.3946%" height="15" fill="rgb(247,152,14)" fg:x="728" fg:w="5"/><text x="57.7086%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (10 samples, 0.79%)</title><rect x="57.8532%" y="293" width="0.7893%" height="15" fill="rgb(248,195,53)" fg:x="733" fg:w="10"/><text x="58.1032%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="58.4846%" y="277" width="0.1579%" height="15" fill="rgb(226,201,16)" fg:x="741" fg:w="2"/><text x="58.7346%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (261 samples, 20.60%)</title><rect x="38.2005%" y="341" width="20.5998%" height="15" fill="rgb(205,98,0)" fg:x="484" fg:w="261"/><text x="38.4505%" y="351.50">regex_automata::meta::strategy::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (204 samples, 16.10%)</title><rect x="42.6993%" y="325" width="16.1010%" height="15" fill="rgb(214,191,48)" fg:x="541" fg:w="204"/><text x="42.9493%" y="335.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (30 samples, 2.37%)</title><rect x="56.4325%" y="309" width="2.3678%" height="15" fill="rgb(237,112,39)" fg:x="715" fg:w="30"/><text x="56.6825%" y="319.50">re..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="58.6425%" y="293" width="0.1579%" height="15" fill="rgb(247,203,27)" fg:x="743" fg:w="2"/><text x="58.8925%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="58.8792%" y="293" width="0.0789%" height="15" fill="rgb(235,124,28)" fg:x="746" fg:w="1"/><text x="59.1292%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.9582%" y="277" width="0.0789%" height="15" fill="rgb(208,207,46)" fg:x="747" fg:w="1"/><text x="59.2082%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="58.9582%" y="293" width="0.1579%" height="15" fill="rgb(234,176,4)" fg:x="747" fg:w="2"/><text x="59.2082%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="59.0371%" y="277" width="0.0789%" height="15" fill="rgb(230,133,28)" fg:x="748" fg:w="1"/><text x="59.2871%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.0371%" y="261" width="0.0789%" height="15" fill="rgb(211,137,40)" fg:x="748" fg:w="1"/><text x="59.2871%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.39%)</title><rect x="58.8003%" y="309" width="0.3946%" height="15" fill="rgb(254,35,13)" fg:x="745" fg:w="5"/><text x="59.0503%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="59.1160%" y="293" width="0.0789%" height="15" fill="rgb(225,49,51)" fg:x="749" fg:w="1"/><text x="59.3660%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.1160%" y="277" width="0.0789%" height="15" fill="rgb(251,10,15)" fg:x="749" fg:w="1"/><text x="59.3660%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.1160%" y="261" width="0.0789%" height="15" fill="rgb(228,207,15)" fg:x="749" fg:w="1"/><text x="59.3660%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.1160%" y="245" width="0.0789%" height="15" fill="rgb(241,99,19)" fg:x="749" fg:w="1"/><text x="59.3660%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="59.1949%" y="309" width="0.0789%" height="15" fill="rgb(207,104,49)" fg:x="750" fg:w="1"/><text x="59.4449%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="59.1949%" y="293" width="0.0789%" height="15" fill="rgb(234,99,18)" fg:x="750" fg:w="1"/><text x="59.4449%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.55%)</title><rect x="58.8003%" y="341" width="0.5525%" height="15" fill="rgb(213,191,49)" fg:x="745" fg:w="7"/><text x="59.0503%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.55%)</title><rect x="58.8003%" y="325" width="0.5525%" height="15" fill="rgb(210,226,19)" fg:x="745" fg:w="7"/><text x="59.0503%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="59.2739%" y="309" width="0.0789%" height="15" fill="rgb(229,97,18)" fg:x="751" fg:w="1"/><text x="59.5239%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.2739%" y="293" width="0.0789%" height="15" fill="rgb(211,167,15)" fg:x="751" fg:w="1"/><text x="59.5239%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.2739%" y="277" width="0.0789%" height="15" fill="rgb(210,169,34)" fg:x="751" fg:w="1"/><text x="59.5239%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.2739%" y="261" width="0.0789%" height="15" fill="rgb(241,121,31)" fg:x="751" fg:w="1"/><text x="59.5239%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.3528%" y="293" width="0.1579%" height="15" fill="rgb(232,40,11)" fg:x="752" fg:w="2"/><text x="59.6028%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.3528%" y="277" width="0.1579%" height="15" fill="rgb(205,86,26)" fg:x="752" fg:w="2"/><text x="59.6028%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="59.3528%" y="261" width="0.1579%" height="15" fill="rgb(231,126,28)" fg:x="752" fg:w="2"/><text x="59.6028%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="59.5107%" y="293" width="0.2368%" height="15" fill="rgb(219,221,18)" fg:x="754" fg:w="3"/><text x="59.7607%" y="303.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="59.5896%" y="277" width="0.1579%" height="15" fill="rgb(211,40,0)" fg:x="755" fg:w="2"/><text x="59.8396%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="59.7474%" y="293" width="0.0789%" height="15" fill="rgb(239,85,43)" fg:x="757" fg:w="1"/><text x="59.9974%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.7474%" y="277" width="0.0789%" height="15" fill="rgb(231,55,21)" fg:x="757" fg:w="1"/><text x="59.9974%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.7474%" y="261" width="0.0789%" height="15" fill="rgb(225,184,43)" fg:x="757" fg:w="1"/><text x="59.9974%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.7474%" y="245" width="0.0789%" height="15" fill="rgb(251,158,41)" fg:x="757" fg:w="1"/><text x="59.9974%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.55%)</title><rect x="59.3528%" y="309" width="0.5525%" height="15" fill="rgb(234,159,37)" fg:x="752" fg:w="7"/><text x="59.6028%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="59.8264%" y="293" width="0.0789%" height="15" fill="rgb(216,204,22)" fg:x="758" fg:w="1"/><text x="60.0764%" y="303.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="59.8264%" y="277" width="0.0789%" height="15" fill="rgb(214,17,3)" fg:x="758" fg:w="1"/><text x="60.0764%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="59.9842%" y="293" width="0.0789%" height="15" fill="rgb(212,111,17)" fg:x="760" fg:w="1"/><text x="60.2342%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.9842%" y="277" width="0.0789%" height="15" fill="rgb(221,157,24)" fg:x="760" fg:w="1"/><text x="60.2342%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.9842%" y="261" width="0.0789%" height="15" fill="rgb(252,16,13)" fg:x="760" fg:w="1"/><text x="60.2342%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="59.9053%" y="309" width="0.2368%" height="15" fill="rgb(221,62,2)" fg:x="759" fg:w="3"/><text x="60.1553%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::pop (1 samples, 0.08%)</title><rect x="60.0631%" y="293" width="0.0789%" height="15" fill="rgb(247,87,22)" fg:x="761" fg:w="1"/><text x="60.3131%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (291 samples, 22.97%)</title><rect x="37.2534%" y="357" width="22.9676%" height="15" fill="rgb(215,73,9)" fg:x="472" fg:w="291"/><text x="37.5034%" y="367.50">regex_automata::meta::regex::Builder..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.87%)</title><rect x="59.3528%" y="341" width="0.8682%" height="15" fill="rgb(207,175,33)" fg:x="752" fg:w="11"/><text x="59.6028%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.87%)</title><rect x="59.3528%" y="325" width="0.8682%" height="15" fill="rgb(243,129,54)" fg:x="752" fg:w="11"/><text x="59.6028%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.1421%" y="309" width="0.0789%" height="15" fill="rgb(227,119,45)" fg:x="762" fg:w="1"/><text x="60.3921%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (331 samples, 26.12%)</title><rect x="34.1752%" y="405" width="26.1247%" height="15" fill="rgb(205,109,36)" fg:x="433" fg:w="331"/><text x="34.4252%" y="415.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (292 samples, 23.05%)</title><rect x="37.2534%" y="389" width="23.0466%" height="15" fill="rgb(205,6,39)" fg:x="472" fg:w="292"/><text x="37.5034%" y="399.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (292 samples, 23.05%)</title><rect x="37.2534%" y="373" width="23.0466%" height="15" fill="rgb(221,32,16)" fg:x="472" fg:w="292"/><text x="37.5034%" y="383.50">regex::builders::Builder::build_one_s..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="60.2210%" y="357" width="0.0789%" height="15" fill="rgb(228,144,50)" fg:x="763" fg:w="1"/><text x="60.4710%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::case_insensitive (1 samples, 0.08%)</title><rect x="60.2210%" y="341" width="0.0789%" height="15" fill="rgb(229,201,53)" fg:x="763" fg:w="1"/><text x="60.4710%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="60.2999%" y="341" width="0.0789%" height="15" fill="rgb(249,153,27)" fg:x="764" fg:w="1"/><text x="60.5499%" y="351.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="60.2999%" y="325" width="0.0789%" height="15" fill="rgb(227,106,25)" fg:x="764" fg:w="1"/><text x="60.5499%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="60.3788%" y="325" width="0.0789%" height="15" fill="rgb(230,65,29)" fg:x="765" fg:w="1"/><text x="60.6288%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="60.3788%" y="309" width="0.0789%" height="15" fill="rgb(221,57,46)" fg:x="765" fg:w="1"/><text x="60.6288%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="60.2999%" y="373" width="0.2368%" height="15" fill="rgb(229,161,17)" fg:x="764" fg:w="3"/><text x="60.5499%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="60.2999%" y="357" width="0.2368%" height="15" fill="rgb(222,213,11)" fg:x="764" fg:w="3"/><text x="60.5499%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="60.3788%" y="341" width="0.1579%" height="15" fill="rgb(235,35,13)" fg:x="765" fg:w="2"/><text x="60.6288%" y="351.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="60.4578%" y="325" width="0.0789%" height="15" fill="rgb(233,158,34)" fg:x="766" fg:w="1"/><text x="60.7078%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.5367%" y="373" width="0.0789%" height="15" fill="rgb(215,151,48)" fg:x="767" fg:w="1"/><text x="60.7867%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.6156%" y="309" width="0.0789%" height="15" fill="rgb(229,84,14)" fg:x="768" fg:w="1"/><text x="60.8656%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.6156%" y="293" width="0.0789%" height="15" fill="rgb(229,68,14)" fg:x="768" fg:w="1"/><text x="60.8656%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="60.6156%" y="341" width="0.1579%" height="15" fill="rgb(243,106,26)" fg:x="768" fg:w="2"/><text x="60.8656%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="60.6156%" y="325" width="0.1579%" height="15" fill="rgb(206,45,38)" fg:x="768" fg:w="2"/><text x="60.8656%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.6946%" y="309" width="0.0789%" height="15" fill="rgb(226,6,15)" fg:x="769" fg:w="1"/><text x="60.9446%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.7735%" y="325" width="0.0789%" height="15" fill="rgb(232,22,54)" fg:x="770" fg:w="1"/><text x="61.0235%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="60.8524%" y="325" width="0.0789%" height="15" fill="rgb(229,222,32)" fg:x="771" fg:w="1"/><text x="61.1024%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.8524%" y="309" width="0.0789%" height="15" fill="rgb(228,62,29)" fg:x="771" fg:w="1"/><text x="61.1024%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.47%)</title><rect x="60.6156%" y="373" width="0.4736%" height="15" fill="rgb(251,103,34)" fg:x="768" fg:w="6"/><text x="60.8656%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.47%)</title><rect x="60.6156%" y="357" width="0.4736%" height="15" fill="rgb(233,12,30)" fg:x="768" fg:w="6"/><text x="60.8656%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="60.7735%" y="341" width="0.3157%" height="15" fill="rgb(238,52,0)" fg:x="770" fg:w="4"/><text x="61.0235%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="60.9313%" y="325" width="0.1579%" height="15" fill="rgb(223,98,5)" fg:x="772" fg:w="2"/><text x="61.1813%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="60.9313%" y="309" width="0.1579%" height="15" fill="rgb(228,75,37)" fg:x="772" fg:w="2"/><text x="61.1813%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.3260%" y="325" width="0.1579%" height="15" fill="rgb(205,115,49)" fg:x="777" fg:w="2"/><text x="61.5760%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.3260%" y="309" width="0.1579%" height="15" fill="rgb(250,154,43)" fg:x="777" fg:w="2"/><text x="61.5760%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.4049%" y="293" width="0.0789%" height="15" fill="rgb(226,43,29)" fg:x="778" fg:w="1"/><text x="61.6549%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4838%" y="325" width="0.0789%" height="15" fill="rgb(249,228,39)" fg:x="779" fg:w="1"/><text x="61.7338%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="61.5627%" y="325" width="0.1579%" height="15" fill="rgb(216,79,43)" fg:x="780" fg:w="2"/><text x="61.8127%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.5627%" y="309" width="0.1579%" height="15" fill="rgb(228,95,12)" fg:x="780" fg:w="2"/><text x="61.8127%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.6417%" y="293" width="0.0789%" height="15" fill="rgb(249,221,15)" fg:x="781" fg:w="1"/><text x="61.8917%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="61.7206%" y="325" width="0.0789%" height="15" fill="rgb(233,34,13)" fg:x="782" fg:w="1"/><text x="61.9706%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.7206%" y="309" width="0.0789%" height="15" fill="rgb(214,103,39)" fg:x="782" fg:w="1"/><text x="61.9706%" y="319.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="61.7995%" y="325" width="0.0789%" height="15" fill="rgb(251,126,39)" fg:x="783" fg:w="1"/><text x="62.0495%" y="335.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="61.7995%" y="309" width="0.0789%" height="15" fill="rgb(214,216,36)" fg:x="783" fg:w="1"/><text x="62.0495%" y="319.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="61.7995%" y="293" width="0.0789%" height="15" fill="rgb(220,221,8)" fg:x="783" fg:w="1"/><text x="62.0495%" y="303.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="61.7995%" y="277" width="0.0789%" height="15" fill="rgb(240,216,3)" fg:x="783" fg:w="1"/><text x="62.0495%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8785%" y="309" width="0.0789%" height="15" fill="rgb(232,218,17)" fg:x="784" fg:w="1"/><text x="62.1285%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="61.9574%" y="309" width="0.0789%" height="15" fill="rgb(229,163,45)" fg:x="785" fg:w="1"/><text x="62.2074%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.9574%" y="293" width="0.0789%" height="15" fill="rgb(231,110,42)" fg:x="785" fg:w="1"/><text x="62.2074%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="62.0363%" y="309" width="0.0789%" height="15" fill="rgb(208,170,48)" fg:x="786" fg:w="1"/><text x="62.2863%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="62.0363%" y="293" width="0.0789%" height="15" fill="rgb(239,116,25)" fg:x="786" fg:w="1"/><text x="62.2863%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="62.0363%" y="277" width="0.0789%" height="15" fill="rgb(219,200,50)" fg:x="786" fg:w="1"/><text x="62.2863%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.0363%" y="261" width="0.0789%" height="15" fill="rgb(245,200,0)" fg:x="786" fg:w="1"/><text x="62.2863%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="62.1152%" y="309" width="0.2368%" height="15" fill="rgb(245,119,33)" fg:x="787" fg:w="3"/><text x="62.3652%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="62.1152%" y="293" width="0.2368%" height="15" fill="rgb(231,125,12)" fg:x="787" fg:w="3"/><text x="62.3652%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="62.2731%" y="277" width="0.0789%" height="15" fill="rgb(216,96,41)" fg:x="789" fg:w="1"/><text x="62.5231%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.2731%" y="261" width="0.0789%" height="15" fill="rgb(248,43,45)" fg:x="789" fg:w="1"/><text x="62.5231%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.2731%" y="245" width="0.0789%" height="15" fill="rgb(217,222,7)" fg:x="789" fg:w="1"/><text x="62.5231%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2731%" y="229" width="0.0789%" height="15" fill="rgb(233,28,6)" fg:x="789" fg:w="1"/><text x="62.5231%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="62.3520%" y="277" width="0.0789%" height="15" fill="rgb(231,218,15)" fg:x="790" fg:w="1"/><text x="62.6020%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.3520%" y="261" width="0.0789%" height="15" fill="rgb(226,171,48)" fg:x="790" fg:w="1"/><text x="62.6020%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.3520%" y="245" width="0.0789%" height="15" fill="rgb(235,201,9)" fg:x="790" fg:w="1"/><text x="62.6020%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.3520%" y="229" width="0.0789%" height="15" fill="rgb(217,80,15)" fg:x="790" fg:w="1"/><text x="62.6020%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.6677%" y="229" width="0.0789%" height="15" fill="rgb(219,152,8)" fg:x="794" fg:w="1"/><text x="62.9177%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6677%" y="213" width="0.0789%" height="15" fill="rgb(243,107,38)" fg:x="794" fg:w="1"/><text x="62.9177%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.63%)</title><rect x="62.3520%" y="293" width="0.6314%" height="15" fill="rgb(231,17,5)" fg:x="790" fg:w="8"/><text x="62.6020%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (7 samples, 0.55%)</title><rect x="62.4309%" y="277" width="0.5525%" height="15" fill="rgb(209,25,54)" fg:x="791" fg:w="7"/><text x="62.6809%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (7 samples, 0.55%)</title><rect x="62.4309%" y="261" width="0.5525%" height="15" fill="rgb(219,0,2)" fg:x="791" fg:w="7"/><text x="62.6809%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (6 samples, 0.47%)</title><rect x="62.5099%" y="245" width="0.4736%" height="15" fill="rgb(246,9,5)" fg:x="792" fg:w="6"/><text x="62.7599%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="62.7466%" y="229" width="0.2368%" height="15" fill="rgb(226,159,4)" fg:x="795" fg:w="3"/><text x="62.9966%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="62.8256%" y="213" width="0.1579%" height="15" fill="rgb(219,175,34)" fg:x="796" fg:w="2"/><text x="63.0756%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.8256%" y="197" width="0.1579%" height="15" fill="rgb(236,10,46)" fg:x="796" fg:w="2"/><text x="63.0756%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="62.8256%" y="181" width="0.1579%" height="15" fill="rgb(240,211,16)" fg:x="796" fg:w="2"/><text x="63.0756%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.1413%" y="277" width="0.0789%" height="15" fill="rgb(205,3,43)" fg:x="800" fg:w="1"/><text x="63.3913%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.1413%" y="261" width="0.0789%" height="15" fill="rgb(245,7,22)" fg:x="800" fg:w="1"/><text x="63.3913%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.1413%" y="245" width="0.0789%" height="15" fill="rgb(239,132,32)" fg:x="800" fg:w="1"/><text x="63.3913%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="63.7727%" y="261" width="0.1579%" height="15" fill="rgb(228,202,34)" fg:x="808" fg:w="2"/><text x="64.0227%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.8516%" y="245" width="0.0789%" height="15" fill="rgb(254,200,22)" fg:x="809" fg:w="1"/><text x="64.1016%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.8516%" y="229" width="0.0789%" height="15" fill="rgb(219,10,39)" fg:x="809" fg:w="1"/><text x="64.1016%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (21 samples, 1.66%)</title><rect x="62.3520%" y="309" width="1.6575%" height="15" fill="rgb(226,210,39)" fg:x="790" fg:w="21"/><text x="62.6020%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.03%)</title><rect x="62.9834%" y="293" width="1.0260%" height="15" fill="rgb(208,219,16)" fg:x="798" fg:w="13"/><text x="63.2334%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (10 samples, 0.79%)</title><rect x="63.2202%" y="277" width="0.7893%" height="15" fill="rgb(216,158,51)" fg:x="801" fg:w="10"/><text x="63.4702%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.9305%" y="261" width="0.0789%" height="15" fill="rgb(233,14,44)" fg:x="810" fg:w="1"/><text x="64.1805%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.9305%" y="245" width="0.0789%" height="15" fill="rgb(237,97,39)" fg:x="810" fg:w="1"/><text x="64.1805%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.9305%" y="229" width="0.0789%" height="15" fill="rgb(218,198,43)" fg:x="810" fg:w="1"/><text x="64.1805%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (28 samples, 2.21%)</title><rect x="61.8785%" y="325" width="2.2099%" height="15" fill="rgb(231,104,20)" fg:x="784" fg:w="28"/><text x="62.1285%" y="335.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="64.0095%" y="309" width="0.0789%" height="15" fill="rgb(254,36,13)" fg:x="811" fg:w="1"/><text x="64.2595%" y="319.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="64.0884%" y="277" width="0.1579%" height="15" fill="rgb(248,14,50)" fg:x="812" fg:w="2"/><text x="64.3384%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="64.0884%" y="261" width="0.1579%" height="15" fill="rgb(217,107,29)" fg:x="812" fg:w="2"/><text x="64.3384%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.0884%" y="245" width="0.1579%" height="15" fill="rgb(251,169,33)" fg:x="812" fg:w="2"/><text x="64.3384%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="64.0884%" y="229" width="0.1579%" height="15" fill="rgb(217,108,32)" fg:x="812" fg:w="2"/><text x="64.3384%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="64.2463%" y="277" width="0.0789%" height="15" fill="rgb(219,66,42)" fg:x="814" fg:w="1"/><text x="64.4963%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="64.2463%" y="261" width="0.0789%" height="15" fill="rgb(206,180,7)" fg:x="814" fg:w="1"/><text x="64.4963%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="64.2463%" y="245" width="0.0789%" height="15" fill="rgb(208,226,31)" fg:x="814" fg:w="1"/><text x="64.4963%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="64.2463%" y="229" width="0.0789%" height="15" fill="rgb(218,26,49)" fg:x="814" fg:w="1"/><text x="64.4963%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="64.3252%" y="277" width="0.0789%" height="15" fill="rgb(233,197,48)" fg:x="815" fg:w="1"/><text x="64.5752%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="64.3252%" y="261" width="0.0789%" height="15" fill="rgb(252,181,51)" fg:x="815" fg:w="1"/><text x="64.5752%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.3252%" y="245" width="0.0789%" height="15" fill="rgb(253,90,19)" fg:x="815" fg:w="1"/><text x="64.5752%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.47%)</title><rect x="64.0884%" y="293" width="0.4736%" height="15" fill="rgb(215,171,30)" fg:x="812" fg:w="6"/><text x="64.3384%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="64.4041%" y="277" width="0.1579%" height="15" fill="rgb(214,222,9)" fg:x="816" fg:w="2"/><text x="64.6541%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="64.4041%" y="261" width="0.1579%" height="15" fill="rgb(223,3,22)" fg:x="816" fg:w="2"/><text x="64.6541%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.4041%" y="245" width="0.1579%" height="15" fill="rgb(225,196,46)" fg:x="816" fg:w="2"/><text x="64.6541%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="64.4041%" y="229" width="0.1579%" height="15" fill="rgb(209,110,37)" fg:x="816" fg:w="2"/><text x="64.6541%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.55%)</title><rect x="64.0884%" y="325" width="0.5525%" height="15" fill="rgb(249,89,12)" fg:x="812" fg:w="7"/><text x="64.3384%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.55%)</title><rect x="64.0884%" y="309" width="0.5525%" height="15" fill="rgb(226,27,33)" fg:x="812" fg:w="7"/><text x="64.3384%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="64.5620%" y="293" width="0.0789%" height="15" fill="rgb(213,82,22)" fg:x="818" fg:w="1"/><text x="64.8120%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.5620%" y="277" width="0.0789%" height="15" fill="rgb(248,140,0)" fg:x="818" fg:w="1"/><text x="64.8120%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="64.6409%" y="293" width="0.2368%" height="15" fill="rgb(228,106,3)" fg:x="819" fg:w="3"/><text x="64.8909%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="64.6409%" y="277" width="0.2368%" height="15" fill="rgb(209,23,37)" fg:x="819" fg:w="3"/><text x="64.8909%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.7987%" y="261" width="0.0789%" height="15" fill="rgb(241,93,50)" fg:x="821" fg:w="1"/><text x="65.0487%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.7987%" y="245" width="0.0789%" height="15" fill="rgb(253,46,43)" fg:x="821" fg:w="1"/><text x="65.0487%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.7987%" y="229" width="0.0789%" height="15" fill="rgb(226,206,43)" fg:x="821" fg:w="1"/><text x="65.0487%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (49 samples, 3.87%)</title><rect x="61.0892%" y="373" width="3.8674%" height="15" fill="rgb(217,54,7)" fg:x="774" fg:w="49"/><text x="61.3392%" y="383.50">rege..</text></g><g><title>regex::builders::Builder::build_one_string (47 samples, 3.71%)</title><rect x="61.2470%" y="357" width="3.7096%" height="15" fill="rgb(223,5,52)" fg:x="776" fg:w="47"/><text x="61.4970%" y="367.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (47 samples, 3.71%)</title><rect x="61.2470%" y="341" width="3.7096%" height="15" fill="rgb(206,52,46)" fg:x="776" fg:w="47"/><text x="61.4970%" y="351.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="64.6409%" y="325" width="0.3157%" height="15" fill="rgb(253,136,11)" fg:x="819" fg:w="4"/><text x="64.8909%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="64.6409%" y="309" width="0.3157%" height="15" fill="rgb(208,106,33)" fg:x="819" fg:w="4"/><text x="64.8909%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="64.8777%" y="293" width="0.0789%" height="15" fill="rgb(206,54,4)" fg:x="822" fg:w="1"/><text x="65.1277%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="64.8777%" y="277" width="0.0789%" height="15" fill="rgb(213,3,15)" fg:x="822" fg:w="1"/><text x="65.1277%" y="287.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="64.8777%" y="261" width="0.0789%" height="15" fill="rgb(252,211,39)" fg:x="822" fg:w="1"/><text x="65.1277%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.8777%" y="245" width="0.0789%" height="15" fill="rgb(223,6,36)" fg:x="822" fg:w="1"/><text x="65.1277%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.5880%" y="293" width="0.0789%" height="15" fill="rgb(252,169,45)" fg:x="831" fg:w="1"/><text x="65.8380%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.5880%" y="277" width="0.0789%" height="15" fill="rgb(212,48,26)" fg:x="831" fg:w="1"/><text x="65.8380%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.5880%" y="261" width="0.0789%" height="15" fill="rgb(251,102,48)" fg:x="831" fg:w="1"/><text x="65.8380%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="65.6669%" y="293" width="0.1579%" height="15" fill="rgb(243,208,16)" fg:x="832" fg:w="2"/><text x="65.9169%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.95%)</title><rect x="65.0355%" y="309" width="0.9471%" height="15" fill="rgb(219,96,24)" fg:x="824" fg:w="12"/><text x="65.2855%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="65.8248%" y="293" width="0.1579%" height="15" fill="rgb(219,33,29)" fg:x="834" fg:w="2"/><text x="66.0748%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (77 samples, 6.08%)</title><rect x="60.2999%" y="389" width="6.0773%" height="15" fill="rgb(223,176,5)" fg:x="764" fg:w="77"/><text x="60.5499%" y="399.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (18 samples, 1.42%)</title><rect x="64.9566%" y="373" width="1.4207%" height="15" fill="rgb(228,140,14)" fg:x="823" fg:w="18"/><text x="65.2066%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (18 samples, 1.42%)</title><rect x="64.9566%" y="357" width="1.4207%" height="15" fill="rgb(217,179,31)" fg:x="823" fg:w="18"/><text x="65.2066%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (18 samples, 1.42%)</title><rect x="64.9566%" y="341" width="1.4207%" height="15" fill="rgb(230,9,30)" fg:x="823" fg:w="18"/><text x="65.2066%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (18 samples, 1.42%)</title><rect x="64.9566%" y="325" width="1.4207%" height="15" fill="rgb(230,136,20)" fg:x="823" fg:w="18"/><text x="65.2066%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (5 samples, 0.39%)</title><rect x="65.9826%" y="309" width="0.3946%" height="15" fill="rgb(215,210,22)" fg:x="836" fg:w="5"/><text x="66.2326%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="66.0616%" y="293" width="0.3157%" height="15" fill="rgb(218,43,5)" fg:x="837" fg:w="4"/><text x="66.3116%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="66.0616%" y="277" width="0.3157%" height="15" fill="rgb(216,11,5)" fg:x="837" fg:w="4"/><text x="66.3116%" y="287.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="66.0616%" y="261" width="0.3157%" height="15" fill="rgb(209,82,29)" fg:x="837" fg:w="4"/><text x="66.3116%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (685 samples, 54.06%)</title><rect x="12.5493%" y="485" width="54.0647%" height="15" fill="rgb(244,115,12)" fg:x="159" fg:w="685"/><text x="12.7993%" y="495.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedE..</text></g><g><title>plugins_core::looking::model::qualify_name (665 samples, 52.49%)</title><rect x="14.1279%" y="469" width="52.4862%" height="15" fill="rgb(222,82,18)" fg:x="179" fg:w="665"/><text x="14.3779%" y="479.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (665 samples, 52.49%)</title><rect x="14.1279%" y="453" width="52.4862%" height="15" fill="rgb(249,227,8)" fg:x="179" fg:w="665"/><text x="14.3779%" y="463.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (665 samples, 52.49%)</title><rect x="14.1279%" y="437" width="52.4862%" height="15" fill="rgb(253,141,45)" fg:x="179" fg:w="665"/><text x="14.3779%" y="447.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (664 samples, 52.41%)</title><rect x="14.2068%" y="421" width="52.4073%" height="15" fill="rgb(234,184,4)" fg:x="180" fg:w="664"/><text x="14.4568%" y="431.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (80 samples, 6.31%)</title><rect x="60.2999%" y="405" width="6.3141%" height="15" fill="rgb(218,194,23)" fg:x="764" fg:w="80"/><text x="60.5499%" y="415.50">indefini..</text></g><g><title>indefinite::irregular::Irregular::check (3 samples, 0.24%)</title><rect x="66.3773%" y="389" width="0.2368%" height="15" fill="rgb(235,66,41)" fg:x="841" fg:w="3"/><text x="66.6273%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="66.6140%" y="485" width="0.0789%" height="15" fill="rgb(245,217,1)" fg:x="844" fg:w="1"/><text x="66.8640%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="66.6140%" y="469" width="0.0789%" height="15" fill="rgb(229,91,1)" fg:x="844" fg:w="1"/><text x="66.8640%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="66.6140%" y="453" width="0.0789%" height="15" fill="rgb(207,101,30)" fg:x="844" fg:w="1"/><text x="66.8640%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="66.6140%" y="437" width="0.0789%" height="15" fill="rgb(223,82,49)" fg:x="844" fg:w="1"/><text x="66.8640%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="66.6140%" y="421" width="0.0789%" height="15" fill="rgb(218,167,17)" fg:x="844" fg:w="1"/><text x="66.8640%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.6140%" y="405" width="0.0789%" height="15" fill="rgb(208,103,14)" fg:x="844" fg:w="1"/><text x="66.8640%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="66.6140%" y="389" width="0.0789%" height="15" fill="rgb(238,20,8)" fg:x="844" fg:w="1"/><text x="66.8640%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="66.6140%" y="373" width="0.0789%" height="15" fill="rgb(218,80,54)" fg:x="844" fg:w="1"/><text x="66.8640%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="66.6140%" y="357" width="0.0789%" height="15" fill="rgb(240,144,17)" fg:x="844" fg:w="1"/><text x="66.8640%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.6140%" y="341" width="0.0789%" height="15" fill="rgb(245,27,50)" fg:x="844" fg:w="1"/><text x="66.8640%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.6140%" y="325" width="0.0789%" height="15" fill="rgb(251,51,7)" fg:x="844" fg:w="1"/><text x="66.8640%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.6140%" y="309" width="0.0789%" height="15" fill="rgb(245,217,29)" fg:x="844" fg:w="1"/><text x="66.8640%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="66.6140%" y="293" width="0.0789%" height="15" fill="rgb(221,176,29)" fg:x="844" fg:w="1"/><text x="66.8640%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="66.6140%" y="277" width="0.0789%" height="15" fill="rgb(212,180,24)" fg:x="844" fg:w="1"/><text x="66.8640%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="66.6140%" y="261" width="0.0789%" height="15" fill="rgb(254,24,2)" fg:x="844" fg:w="1"/><text x="66.8640%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="66.6140%" y="245" width="0.0789%" height="15" fill="rgb(230,100,2)" fg:x="844" fg:w="1"/><text x="66.8640%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="66.6140%" y="229" width="0.0789%" height="15" fill="rgb(219,142,25)" fg:x="844" fg:w="1"/><text x="66.8640%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="66.6140%" y="213" width="0.0789%" height="15" fill="rgb(240,73,43)" fg:x="844" fg:w="1"/><text x="66.8640%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.6140%" y="197" width="0.0789%" height="15" fill="rgb(214,114,15)" fg:x="844" fg:w="1"/><text x="66.8640%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="66.6140%" y="181" width="0.0789%" height="15" fill="rgb(207,130,4)" fg:x="844" fg:w="1"/><text x="66.8640%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.6140%" y="165" width="0.0789%" height="15" fill="rgb(221,25,40)" fg:x="844" fg:w="1"/><text x="66.8640%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="66.6140%" y="149" width="0.0789%" height="15" fill="rgb(241,184,7)" fg:x="844" fg:w="1"/><text x="66.8640%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="66.6140%" y="133" width="0.0789%" height="15" fill="rgb(235,159,4)" fg:x="844" fg:w="1"/><text x="66.8640%" y="143.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="66.6140%" y="117" width="0.0789%" height="15" fill="rgb(214,87,48)" fg:x="844" fg:w="1"/><text x="66.8640%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.6140%" y="101" width="0.0789%" height="15" fill="rgb(246,198,24)" fg:x="844" fg:w="1"/><text x="66.8640%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.6930%" y="485" width="0.0789%" height="15" fill="rgb(209,66,40)" fg:x="845" fg:w="1"/><text x="66.9430%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.6930%" y="469" width="0.0789%" height="15" fill="rgb(233,147,39)" fg:x="845" fg:w="1"/><text x="66.9430%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (2 samples, 0.16%)</title><rect x="66.7719%" y="485" width="0.1579%" height="15" fill="rgb(231,145,52)" fg:x="846" fg:w="2"/><text x="67.0219%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.8508%" y="469" width="0.0789%" height="15" fill="rgb(206,20,26)" fg:x="847" fg:w="1"/><text x="67.1008%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0876%" y="277" width="0.0789%" height="15" fill="rgb(238,220,4)" fg:x="850" fg:w="1"/><text x="67.3376%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0876%" y="261" width="0.0789%" height="15" fill="rgb(252,195,42)" fg:x="850" fg:w="1"/><text x="67.3376%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="67.0087%" y="325" width="0.2368%" height="15" fill="rgb(209,10,6)" fg:x="849" fg:w="3"/><text x="67.2587%" y="335.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="67.0876%" y="309" width="0.1579%" height="15" fill="rgb(229,3,52)" fg:x="850" fg:w="2"/><text x="67.3376%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="67.0876%" y="293" width="0.1579%" height="15" fill="rgb(253,49,37)" fg:x="850" fg:w="2"/><text x="67.3376%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.1665%" y="277" width="0.0789%" height="15" fill="rgb(240,103,49)" fg:x="851" fg:w="1"/><text x="67.4165%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.1665%" y="261" width="0.0789%" height="15" fill="rgb(250,182,30)" fg:x="851" fg:w="1"/><text x="67.4165%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.1665%" y="245" width="0.0789%" height="15" fill="rgb(248,8,30)" fg:x="851" fg:w="1"/><text x="67.4165%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.1665%" y="229" width="0.0789%" height="15" fill="rgb(237,120,30)" fg:x="851" fg:w="1"/><text x="67.4165%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.1665%" y="213" width="0.0789%" height="15" fill="rgb(221,146,34)" fg:x="851" fg:w="1"/><text x="67.4165%" y="223.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (4 samples, 0.32%)</title><rect x="67.0087%" y="357" width="0.3157%" height="15" fill="rgb(242,55,13)" fg:x="849" fg:w="4"/><text x="67.2587%" y="367.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="67.0087%" y="341" width="0.3157%" height="15" fill="rgb(242,112,31)" fg:x="849" fg:w="4"/><text x="67.2587%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="67.2455%" y="325" width="0.0789%" height="15" fill="rgb(249,192,27)" fg:x="852" fg:w="1"/><text x="67.4955%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="67.2455%" y="309" width="0.0789%" height="15" fill="rgb(208,204,44)" fg:x="852" fg:w="1"/><text x="67.4955%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.2455%" y="293" width="0.0789%" height="15" fill="rgb(208,93,54)" fg:x="852" fg:w="1"/><text x="67.4955%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.3244%" y="261" width="0.0789%" height="15" fill="rgb(242,1,31)" fg:x="853" fg:w="1"/><text x="67.5744%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4033%" y="197" width="0.0789%" height="15" fill="rgb(241,83,25)" fg:x="854" fg:w="1"/><text x="67.6533%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4033%" y="181" width="0.0789%" height="15" fill="rgb(205,169,50)" fg:x="854" fg:w="1"/><text x="67.6533%" y="191.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="67.3244%" y="341" width="0.2368%" height="15" fill="rgb(239,186,37)" fg:x="853" fg:w="3"/><text x="67.5744%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="67.3244%" y="325" width="0.2368%" height="15" fill="rgb(205,221,10)" fg:x="853" fg:w="3"/><text x="67.5744%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="67.3244%" y="309" width="0.2368%" height="15" fill="rgb(218,196,15)" fg:x="853" fg:w="3"/><text x="67.5744%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="67.3244%" y="293" width="0.2368%" height="15" fill="rgb(218,196,35)" fg:x="853" fg:w="3"/><text x="67.5744%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="67.3244%" y="277" width="0.2368%" height="15" fill="rgb(233,63,24)" fg:x="853" fg:w="3"/><text x="67.5744%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.4033%" y="261" width="0.1579%" height="15" fill="rgb(225,8,4)" fg:x="854" fg:w="2"/><text x="67.6533%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.4033%" y="245" width="0.1579%" height="15" fill="rgb(234,105,35)" fg:x="854" fg:w="2"/><text x="67.6533%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.4033%" y="229" width="0.1579%" height="15" fill="rgb(236,21,32)" fg:x="854" fg:w="2"/><text x="67.6533%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.4033%" y="213" width="0.1579%" height="15" fill="rgb(228,109,6)" fg:x="854" fg:w="2"/><text x="67.6533%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.4822%" y="197" width="0.0789%" height="15" fill="rgb(229,215,31)" fg:x="855" fg:w="1"/><text x="67.7322%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4822%" y="181" width="0.0789%" height="15" fill="rgb(221,52,54)" fg:x="855" fg:w="1"/><text x="67.7322%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.4822%" y="165" width="0.0789%" height="15" fill="rgb(252,129,43)" fg:x="855" fg:w="1"/><text x="67.7322%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4822%" y="149" width="0.0789%" height="15" fill="rgb(248,183,27)" fg:x="855" fg:w="1"/><text x="67.7322%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.4822%" y="133" width="0.0789%" height="15" fill="rgb(250,0,22)" fg:x="855" fg:w="1"/><text x="67.7322%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4822%" y="117" width="0.0789%" height="15" fill="rgb(213,166,10)" fg:x="855" fg:w="1"/><text x="67.7322%" y="127.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4822%" y="101" width="0.0789%" height="15" fill="rgb(207,163,36)" fg:x="855" fg:w="1"/><text x="67.7322%" y="111.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4822%" y="85" width="0.0789%" height="15" fill="rgb(208,122,22)" fg:x="855" fg:w="1"/><text x="67.7322%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4822%" y="69" width="0.0789%" height="15" fill="rgb(207,104,49)" fg:x="855" fg:w="1"/><text x="67.7322%" y="79.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.5612%" y="261" width="0.0789%" height="15" fill="rgb(248,211,50)" fg:x="856" fg:w="1"/><text x="67.8112%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.5612%" y="245" width="0.0789%" height="15" fill="rgb(217,13,45)" fg:x="856" fg:w="1"/><text x="67.8112%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="67.5612%" y="229" width="0.0789%" height="15" fill="rgb(211,216,49)" fg:x="856" fg:w="1"/><text x="67.8112%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.6401%" y="229" width="0.0789%" height="15" fill="rgb(221,58,53)" fg:x="857" fg:w="1"/><text x="67.8901%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.6401%" y="213" width="0.0789%" height="15" fill="rgb(220,112,41)" fg:x="857" fg:w="1"/><text x="67.8901%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.6401%" y="197" width="0.0789%" height="15" fill="rgb(236,38,28)" fg:x="857" fg:w="1"/><text x="67.8901%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (6 samples, 0.47%)</title><rect x="67.3244%" y="357" width="0.4736%" height="15" fill="rgb(227,195,22)" fg:x="853" fg:w="6"/><text x="67.5744%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="67.5612%" y="341" width="0.2368%" height="15" fill="rgb(214,55,33)" fg:x="856" fg:w="3"/><text x="67.8112%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="67.5612%" y="325" width="0.2368%" height="15" fill="rgb(248,80,13)" fg:x="856" fg:w="3"/><text x="67.8112%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="67.5612%" y="309" width="0.2368%" height="15" fill="rgb(238,52,6)" fg:x="856" fg:w="3"/><text x="67.8112%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="67.5612%" y="293" width="0.2368%" height="15" fill="rgb(224,198,47)" fg:x="856" fg:w="3"/><text x="67.8112%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="67.5612%" y="277" width="0.2368%" height="15" fill="rgb(233,171,20)" fg:x="856" fg:w="3"/><text x="67.8112%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.6401%" y="261" width="0.1579%" height="15" fill="rgb(241,30,25)" fg:x="857" fg:w="2"/><text x="67.8901%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.6401%" y="245" width="0.1579%" height="15" fill="rgb(207,171,38)" fg:x="857" fg:w="2"/><text x="67.8901%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="67.7190%" y="229" width="0.0789%" height="15" fill="rgb(234,70,1)" fg:x="858" fg:w="1"/><text x="67.9690%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7190%" y="213" width="0.0789%" height="15" fill="rgb(232,178,18)" fg:x="858" fg:w="1"/><text x="67.9690%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.7190%" y="197" width="0.0789%" height="15" fill="rgb(241,78,40)" fg:x="858" fg:w="1"/><text x="67.9690%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="67.7190%" y="181" width="0.0789%" height="15" fill="rgb(222,35,25)" fg:x="858" fg:w="1"/><text x="67.9690%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7190%" y="165" width="0.0789%" height="15" fill="rgb(207,92,16)" fg:x="858" fg:w="1"/><text x="67.9690%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.7190%" y="149" width="0.0789%" height="15" fill="rgb(216,59,51)" fg:x="858" fg:w="1"/><text x="67.9690%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="67.7190%" y="133" width="0.0789%" height="15" fill="rgb(213,80,28)" fg:x="858" fg:w="1"/><text x="67.9690%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7190%" y="117" width="0.0789%" height="15" fill="rgb(220,93,7)" fg:x="858" fg:w="1"/><text x="67.9690%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.7190%" y="101" width="0.0789%" height="15" fill="rgb(225,24,44)" fg:x="858" fg:w="1"/><text x="67.9690%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="67.7190%" y="85" width="0.0789%" height="15" fill="rgb(243,74,40)" fg:x="858" fg:w="1"/><text x="67.9690%" y="95.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7190%" y="69" width="0.0789%" height="15" fill="rgb(228,39,7)" fg:x="858" fg:w="1"/><text x="67.9690%" y="79.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.7190%" y="53" width="0.0789%" height="15" fill="rgb(227,79,8)" fg:x="858" fg:w="1"/><text x="67.9690%" y="63.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="67.7190%" y="37" width="0.0789%" height="15" fill="rgb(236,58,11)" fg:x="858" fg:w="1"/><text x="67.9690%" y="47.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="67.7979%" y="357" width="0.0789%" height="15" fill="rgb(249,63,35)" fg:x="859" fg:w="1"/><text x="68.0479%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="67.7979%" y="341" width="0.0789%" height="15" fill="rgb(252,114,16)" fg:x="859" fg:w="1"/><text x="68.0479%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.7979%" y="325" width="0.0789%" height="15" fill="rgb(254,151,24)" fg:x="859" fg:w="1"/><text x="68.0479%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.7979%" y="309" width="0.0789%" height="15" fill="rgb(253,54,39)" fg:x="859" fg:w="1"/><text x="68.0479%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7979%" y="293" width="0.0789%" height="15" fill="rgb(243,25,45)" fg:x="859" fg:w="1"/><text x="68.0479%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.7979%" y="277" width="0.0789%" height="15" fill="rgb(234,134,9)" fg:x="859" fg:w="1"/><text x="68.0479%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7979%" y="261" width="0.0789%" height="15" fill="rgb(227,166,31)" fg:x="859" fg:w="1"/><text x="68.0479%" y="271.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.95%)</title><rect x="67.0087%" y="373" width="0.9471%" height="15" fill="rgb(245,143,41)" fg:x="849" fg:w="12"/><text x="67.2587%" y="383.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="67.8769%" y="357" width="0.0789%" height="15" fill="rgb(238,181,32)" fg:x="860" fg:w="1"/><text x="68.1269%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.8769%" y="341" width="0.0789%" height="15" fill="rgb(224,113,18)" fg:x="860" fg:w="1"/><text x="68.1269%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.8769%" y="325" width="0.0789%" height="15" fill="rgb(240,229,28)" fg:x="860" fg:w="1"/><text x="68.1269%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.8769%" y="309" width="0.0789%" height="15" fill="rgb(250,185,3)" fg:x="860" fg:w="1"/><text x="68.1269%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.8769%" y="293" width="0.0789%" height="15" fill="rgb(212,59,25)" fg:x="860" fg:w="1"/><text x="68.1269%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.8769%" y="277" width="0.0789%" height="15" fill="rgb(221,87,20)" fg:x="860" fg:w="1"/><text x="68.1269%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.8769%" y="261" width="0.0789%" height="15" fill="rgb(213,74,28)" fg:x="860" fg:w="1"/><text x="68.1269%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.8769%" y="245" width="0.0789%" height="15" fill="rgb(224,132,34)" fg:x="860" fg:w="1"/><text x="68.1269%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.8769%" y="229" width="0.0789%" height="15" fill="rgb(222,101,24)" fg:x="860" fg:w="1"/><text x="68.1269%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.8769%" y="213" width="0.0789%" height="15" fill="rgb(254,142,4)" fg:x="860" fg:w="1"/><text x="68.1269%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.8769%" y="197" width="0.0789%" height="15" fill="rgb(230,229,49)" fg:x="860" fg:w="1"/><text x="68.1269%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.8769%" y="181" width="0.0789%" height="15" fill="rgb(238,70,47)" fg:x="860" fg:w="1"/><text x="68.1269%" y="191.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (13 samples, 1.03%)</title><rect x="67.0087%" y="453" width="1.0260%" height="15" fill="rgb(231,160,17)" fg:x="849" fg:w="13"/><text x="67.2587%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (13 samples, 1.03%)</title><rect x="67.0087%" y="437" width="1.0260%" height="15" fill="rgb(218,68,53)" fg:x="849" fg:w="13"/><text x="67.2587%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.03%)</title><rect x="67.0087%" y="421" width="1.0260%" height="15" fill="rgb(236,111,10)" fg:x="849" fg:w="13"/><text x="67.2587%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (13 samples, 1.03%)</title><rect x="67.0087%" y="405" width="1.0260%" height="15" fill="rgb(224,34,41)" fg:x="849" fg:w="13"/><text x="67.2587%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (13 samples, 1.03%)</title><rect x="67.0087%" y="389" width="1.0260%" height="15" fill="rgb(241,118,19)" fg:x="849" fg:w="13"/><text x="67.2587%" y="399.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="67.9558%" y="373" width="0.0789%" height="15" fill="rgb(238,129,25)" fg:x="861" fg:w="1"/><text x="68.2058%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.9558%" y="357" width="0.0789%" height="15" fill="rgb(238,22,31)" fg:x="861" fg:w="1"/><text x="68.2058%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="67.9558%" y="341" width="0.0789%" height="15" fill="rgb(222,174,48)" fg:x="861" fg:w="1"/><text x="68.2058%" y="351.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="68.0347%" y="453" width="0.0789%" height="15" fill="rgb(206,152,40)" fg:x="862" fg:w="1"/><text x="68.2847%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.0347%" y="437" width="0.0789%" height="15" fill="rgb(218,99,54)" fg:x="862" fg:w="1"/><text x="68.2847%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="68.0347%" y="421" width="0.0789%" height="15" fill="rgb(220,174,26)" fg:x="862" fg:w="1"/><text x="68.2847%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (716 samples, 56.51%)</title><rect x="11.6811%" y="709" width="56.5114%" height="15" fill="rgb(245,116,9)" fg:x="148" fg:w="716"/><text x="11.9311%" y="719.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (716 samples, 56.51%)</title><rect x="11.6811%" y="693" width="56.5114%" height="15" fill="rgb(209,72,35)" fg:x="148" fg:w="716"/><text x="11.9311%" y="703.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (716 samples, 56.51%)</title><rect x="11.6811%" y="677" width="56.5114%" height="15" fill="rgb(226,126,21)" fg:x="148" fg:w="716"/><text x="11.9311%" y="687.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (716 samples, 56.51%)</title><rect x="11.6811%" y="661" width="56.5114%" height="15" fill="rgb(227,192,1)" fg:x="148" fg:w="716"/><text x="11.9311%" y="671.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (708 samples, 55.88%)</title><rect x="12.3125%" y="645" width="55.8800%" height="15" fill="rgb(237,180,29)" fg:x="156" fg:w="708"/><text x="12.5625%" y="655.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (708 samples, 55.88%)</title><rect x="12.3125%" y="629" width="55.8800%" height="15" fill="rgb(230,197,35)" fg:x="156" fg:w="708"/><text x="12.5625%" y="639.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (708 samples, 55.88%)</title><rect x="12.3125%" y="613" width="55.8800%" height="15" fill="rgb(246,193,31)" fg:x="156" fg:w="708"/><text x="12.5625%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (707 samples, 55.80%)</title><rect x="12.3915%" y="597" width="55.8011%" height="15" fill="rgb(241,36,4)" fg:x="157" fg:w="707"/><text x="12.6415%" y="607.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (707 samples, 55.80%)</title><rect x="12.3915%" y="581" width="55.8011%" height="15" fill="rgb(241,130,17)" fg:x="157" fg:w="707"/><text x="12.6415%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (707 samples, 55.80%)</title><rect x="12.3915%" y="565" width="55.8011%" height="15" fill="rgb(206,137,32)" fg:x="157" fg:w="707"/><text x="12.6415%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (707 samples, 55.80%)</title><rect x="12.3915%" y="549" width="55.8011%" height="15" fill="rgb(237,228,51)" fg:x="157" fg:w="707"/><text x="12.6415%" y="559.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (707 samples, 55.80%)</title><rect x="12.3915%" y="533" width="55.8011%" height="15" fill="rgb(243,6,42)" fg:x="157" fg:w="707"/><text x="12.6415%" y="543.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (707 samples, 55.80%)</title><rect x="12.3915%" y="517" width="55.8011%" height="15" fill="rgb(251,74,28)" fg:x="157" fg:w="707"/><text x="12.6415%" y="527.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (705 samples, 55.64%)</title><rect x="12.5493%" y="501" width="55.6433%" height="15" fill="rgb(218,20,49)" fg:x="159" fg:w="705"/><text x="12.7993%" y="511.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (16 samples, 1.26%)</title><rect x="66.9298%" y="485" width="1.2628%" height="15" fill="rgb(238,28,14)" fg:x="848" fg:w="16"/><text x="67.1798%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (16 samples, 1.26%)</title><rect x="66.9298%" y="469" width="1.2628%" height="15" fill="rgb(229,40,46)" fg:x="848" fg:w="16"/><text x="67.1798%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.1137%" y="453" width="0.0789%" height="15" fill="rgb(244,195,20)" fg:x="863" fg:w="1"/><text x="68.3637%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.1137%" y="437" width="0.0789%" height="15" fill="rgb(253,56,35)" fg:x="863" fg:w="1"/><text x="68.3637%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.1137%" y="421" width="0.0789%" height="15" fill="rgb(210,149,44)" fg:x="863" fg:w="1"/><text x="68.3637%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.2715%" y="645" width="0.0789%" height="15" fill="rgb(240,135,12)" fg:x="865" fg:w="1"/><text x="68.5215%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.2715%" y="629" width="0.0789%" height="15" fill="rgb(251,24,50)" fg:x="865" fg:w="1"/><text x="68.5215%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.2715%" y="613" width="0.0789%" height="15" fill="rgb(243,200,47)" fg:x="865" fg:w="1"/><text x="68.5215%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.2715%" y="597" width="0.0789%" height="15" fill="rgb(224,166,26)" fg:x="865" fg:w="1"/><text x="68.5215%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2715%" y="581" width="0.0789%" height="15" fill="rgb(233,0,47)" fg:x="865" fg:w="1"/><text x="68.5215%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.2715%" y="565" width="0.0789%" height="15" fill="rgb(253,80,5)" fg:x="865" fg:w="1"/><text x="68.5215%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2715%" y="549" width="0.0789%" height="15" fill="rgb(214,133,25)" fg:x="865" fg:w="1"/><text x="68.5215%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.2715%" y="533" width="0.0789%" height="15" fill="rgb(209,27,14)" fg:x="865" fg:w="1"/><text x="68.5215%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2715%" y="517" width="0.0789%" height="15" fill="rgb(219,102,51)" fg:x="865" fg:w="1"/><text x="68.5215%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.2715%" y="501" width="0.0789%" height="15" fill="rgb(237,18,16)" fg:x="865" fg:w="1"/><text x="68.5215%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2715%" y="485" width="0.0789%" height="15" fill="rgb(241,85,17)" fg:x="865" fg:w="1"/><text x="68.5215%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="68.2715%" y="677" width="0.1579%" height="15" fill="rgb(236,90,42)" fg:x="865" fg:w="2"/><text x="68.5215%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="68.2715%" y="661" width="0.1579%" height="15" fill="rgb(249,57,21)" fg:x="865" fg:w="2"/><text x="68.5215%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="68.3504%" y="645" width="0.0789%" height="15" fill="rgb(243,12,36)" fg:x="866" fg:w="1"/><text x="68.6004%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.3504%" y="629" width="0.0789%" height="15" fill="rgb(253,128,47)" fg:x="866" fg:w="1"/><text x="68.6004%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.3504%" y="613" width="0.0789%" height="15" fill="rgb(207,33,20)" fg:x="866" fg:w="1"/><text x="68.6004%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.3504%" y="597" width="0.0789%" height="15" fill="rgb(233,215,35)" fg:x="866" fg:w="1"/><text x="68.6004%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3504%" y="581" width="0.0789%" height="15" fill="rgb(249,188,52)" fg:x="866" fg:w="1"/><text x="68.6004%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.3504%" y="565" width="0.0789%" height="15" fill="rgb(225,12,32)" fg:x="866" fg:w="1"/><text x="68.6004%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3504%" y="549" width="0.0789%" height="15" fill="rgb(247,98,14)" fg:x="866" fg:w="1"/><text x="68.6004%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.3504%" y="533" width="0.0789%" height="15" fill="rgb(247,219,48)" fg:x="866" fg:w="1"/><text x="68.6004%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="68.4294%" y="677" width="0.0789%" height="15" fill="rgb(253,60,48)" fg:x="867" fg:w="1"/><text x="68.6794%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.4294%" y="661" width="0.0789%" height="15" fill="rgb(245,15,52)" fg:x="867" fg:w="1"/><text x="68.6794%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4294%" y="645" width="0.0789%" height="15" fill="rgb(220,133,28)" fg:x="867" fg:w="1"/><text x="68.6794%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.4294%" y="629" width="0.0789%" height="15" fill="rgb(217,180,4)" fg:x="867" fg:w="1"/><text x="68.6794%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4294%" y="613" width="0.0789%" height="15" fill="rgb(251,24,1)" fg:x="867" fg:w="1"/><text x="68.6794%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.4294%" y="597" width="0.0789%" height="15" fill="rgb(212,185,49)" fg:x="867" fg:w="1"/><text x="68.6794%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.4294%" y="581" width="0.0789%" height="15" fill="rgb(215,175,22)" fg:x="867" fg:w="1"/><text x="68.6794%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.4294%" y="565" width="0.0789%" height="15" fill="rgb(250,205,14)" fg:x="867" fg:w="1"/><text x="68.6794%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.4294%" y="549" width="0.0789%" height="15" fill="rgb(225,211,22)" fg:x="867" fg:w="1"/><text x="68.6794%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.4294%" y="533" width="0.0789%" height="15" fill="rgb(251,179,42)" fg:x="867" fg:w="1"/><text x="68.6794%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.4294%" y="517" width="0.0789%" height="15" fill="rgb(208,216,51)" fg:x="867" fg:w="1"/><text x="68.6794%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.5083%" y="677" width="0.0789%" height="15" fill="rgb(235,36,11)" fg:x="868" fg:w="1"/><text x="68.7583%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.5083%" y="661" width="0.0789%" height="15" fill="rgb(213,189,28)" fg:x="868" fg:w="1"/><text x="68.7583%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.5083%" y="645" width="0.0789%" height="15" fill="rgb(227,203,42)" fg:x="868" fg:w="1"/><text x="68.7583%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.5083%" y="629" width="0.0789%" height="15" fill="rgb(244,72,36)" fg:x="868" fg:w="1"/><text x="68.7583%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.5083%" y="613" width="0.0789%" height="15" fill="rgb(213,53,17)" fg:x="868" fg:w="1"/><text x="68.7583%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.5083%" y="597" width="0.0789%" height="15" fill="rgb(207,167,3)" fg:x="868" fg:w="1"/><text x="68.7583%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.47%)</title><rect x="68.1926%" y="709" width="0.4736%" height="15" fill="rgb(216,98,30)" fg:x="864" fg:w="6"/><text x="68.4426%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.39%)</title><rect x="68.2715%" y="693" width="0.3946%" height="15" fill="rgb(236,123,15)" fg:x="865" fg:w="5"/><text x="68.5215%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="68.5872%" y="677" width="0.0789%" height="15" fill="rgb(248,81,50)" fg:x="869" fg:w="1"/><text x="68.8372%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5872%" y="661" width="0.0789%" height="15" fill="rgb(214,120,4)" fg:x="869" fg:w="1"/><text x="68.8372%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.5872%" y="645" width="0.0789%" height="15" fill="rgb(208,179,34)" fg:x="869" fg:w="1"/><text x="68.8372%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.5872%" y="629" width="0.0789%" height="15" fill="rgb(227,140,7)" fg:x="869" fg:w="1"/><text x="68.8372%" y="639.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="68.6661%" y="645" width="0.0789%" height="15" fill="rgb(214,22,6)" fg:x="870" fg:w="1"/><text x="68.9161%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.6661%" y="629" width="0.0789%" height="15" fill="rgb(207,137,27)" fg:x="870" fg:w="1"/><text x="68.9161%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.6661%" y="613" width="0.0789%" height="15" fill="rgb(210,8,46)" fg:x="870" fg:w="1"/><text x="68.9161%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.6661%" y="597" width="0.0789%" height="15" fill="rgb(240,16,54)" fg:x="870" fg:w="1"/><text x="68.9161%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.6661%" y="581" width="0.0789%" height="15" fill="rgb(211,209,29)" fg:x="870" fg:w="1"/><text x="68.9161%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.6661%" y="565" width="0.0789%" height="15" fill="rgb(226,228,24)" fg:x="870" fg:w="1"/><text x="68.9161%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.6661%" y="549" width="0.0789%" height="15" fill="rgb(222,84,9)" fg:x="870" fg:w="1"/><text x="68.9161%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="68.6661%" y="661" width="0.2368%" height="15" fill="rgb(234,203,30)" fg:x="870" fg:w="3"/><text x="68.9161%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.7451%" y="645" width="0.1579%" height="15" fill="rgb(238,109,14)" fg:x="871" fg:w="2"/><text x="68.9951%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.7451%" y="629" width="0.1579%" height="15" fill="rgb(233,206,34)" fg:x="871" fg:w="2"/><text x="68.9951%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.8240%" y="613" width="0.0789%" height="15" fill="rgb(220,167,47)" fg:x="872" fg:w="1"/><text x="69.0740%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8240%" y="597" width="0.0789%" height="15" fill="rgb(238,105,10)" fg:x="872" fg:w="1"/><text x="69.0740%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8240%" y="581" width="0.0789%" height="15" fill="rgb(213,227,17)" fg:x="872" fg:w="1"/><text x="69.0740%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.8240%" y="565" width="0.0789%" height="15" fill="rgb(217,132,38)" fg:x="872" fg:w="1"/><text x="69.0740%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.8240%" y="549" width="0.0789%" height="15" fill="rgb(242,146,4)" fg:x="872" fg:w="1"/><text x="69.0740%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.8240%" y="533" width="0.0789%" height="15" fill="rgb(212,61,9)" fg:x="872" fg:w="1"/><text x="69.0740%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.9029%" y="613" width="0.0789%" height="15" fill="rgb(247,126,22)" fg:x="873" fg:w="1"/><text x="69.1529%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.9029%" y="597" width="0.0789%" height="15" fill="rgb(220,196,2)" fg:x="873" fg:w="1"/><text x="69.1529%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (5 samples, 0.39%)</title><rect x="68.6661%" y="709" width="0.3946%" height="15" fill="rgb(208,46,4)" fg:x="870" fg:w="5"/><text x="68.9161%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.39%)</title><rect x="68.6661%" y="693" width="0.3946%" height="15" fill="rgb(252,104,46)" fg:x="870" fg:w="5"/><text x="68.9161%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.39%)</title><rect x="68.6661%" y="677" width="0.3946%" height="15" fill="rgb(237,152,48)" fg:x="870" fg:w="5"/><text x="68.9161%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="68.9029%" y="661" width="0.1579%" height="15" fill="rgb(221,59,37)" fg:x="873" fg:w="2"/><text x="69.1529%" y="671.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="68.9029%" y="645" width="0.1579%" height="15" fill="rgb(209,202,51)" fg:x="873" fg:w="2"/><text x="69.1529%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="68.9029%" y="629" width="0.1579%" height="15" fill="rgb(228,81,30)" fg:x="873" fg:w="2"/><text x="69.1529%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="68.9818%" y="613" width="0.0789%" height="15" fill="rgb(227,42,39)" fg:x="874" fg:w="1"/><text x="69.2318%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::DomainError&gt; (1 samples, 0.08%)</title><rect x="69.0608%" y="709" width="0.0789%" height="15" fill="rgb(221,26,2)" fg:x="875" fg:w="1"/><text x="69.3108%" y="719.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="69.1397%" y="709" width="0.0789%" height="15" fill="rgb(254,61,31)" fg:x="876" fg:w="1"/><text x="69.3897%" y="719.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="69.1397%" y="693" width="0.0789%" height="15" fill="rgb(222,173,38)" fg:x="876" fg:w="1"/><text x="69.3897%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.1397%" y="677" width="0.0789%" height="15" fill="rgb(218,50,12)" fg:x="876" fg:w="1"/><text x="69.3897%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.1397%" y="661" width="0.0789%" height="15" fill="rgb(223,88,40)" fg:x="876" fg:w="1"/><text x="69.3897%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1397%" y="645" width="0.0789%" height="15" fill="rgb(237,54,19)" fg:x="876" fg:w="1"/><text x="69.3897%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.1397%" y="629" width="0.0789%" height="15" fill="rgb(251,129,25)" fg:x="876" fg:w="1"/><text x="69.3897%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.1397%" y="613" width="0.0789%" height="15" fill="rgb(238,97,19)" fg:x="876" fg:w="1"/><text x="69.3897%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (879 samples, 69.38%)</title><rect x="0.0000%" y="773" width="69.3765%" height="15" fill="rgb(240,169,18)" fg:x="0" fg:w="879"/><text x="0.2500%" y="783.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (879 samples, 69.38%)</title><rect x="0.0000%" y="757" width="69.3765%" height="15" fill="rgb(230,187,49)" fg:x="0" fg:w="879"/><text x="0.2500%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (879 samples, 69.38%)</title><rect x="0.0000%" y="741" width="69.3765%" height="15" fill="rgb(209,44,26)" fg:x="0" fg:w="879"/><text x="0.2500%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (731 samples, 57.70%)</title><rect x="11.6811%" y="725" width="57.6953%" height="15" fill="rgb(244,0,6)" fg:x="148" fg:w="731"/><text x="11.9311%" y="735.50">engine::session::Session::evaluate_and_perform</text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="69.2186%" y="709" width="0.1579%" height="15" fill="rgb(248,18,21)" fg:x="877" fg:w="2"/><text x="69.4686%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="69.2186%" y="693" width="0.1579%" height="15" fill="rgb(245,180,19)" fg:x="877" fg:w="2"/><text x="69.4686%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="69.2186%" y="677" width="0.1579%" height="15" fill="rgb(252,118,36)" fg:x="877" fg:w="2"/><text x="69.4686%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="69.2186%" y="661" width="0.1579%" height="15" fill="rgb(210,224,19)" fg:x="877" fg:w="2"/><text x="69.4686%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="69.2186%" y="645" width="0.1579%" height="15" fill="rgb(218,30,24)" fg:x="877" fg:w="2"/><text x="69.4686%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="69.2186%" y="629" width="0.1579%" height="15" fill="rgb(219,75,50)" fg:x="877" fg:w="2"/><text x="69.4686%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="69.2186%" y="613" width="0.1579%" height="15" fill="rgb(234,72,50)" fg:x="877" fg:w="2"/><text x="69.4686%" y="623.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="69.2186%" y="597" width="0.1579%" height="15" fill="rgb(219,100,48)" fg:x="877" fg:w="2"/><text x="69.4686%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.2976%" y="581" width="0.0789%" height="15" fill="rgb(253,5,41)" fg:x="878" fg:w="1"/><text x="69.5476%" y="591.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="69.2976%" y="565" width="0.0789%" height="15" fill="rgb(247,181,11)" fg:x="878" fg:w="1"/><text x="69.5476%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="69.2976%" y="549" width="0.0789%" height="15" fill="rgb(222,223,25)" fg:x="878" fg:w="1"/><text x="69.5476%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.2976%" y="533" width="0.0789%" height="15" fill="rgb(214,198,28)" fg:x="878" fg:w="1"/><text x="69.5476%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.2976%" y="517" width="0.0789%" height="15" fill="rgb(230,46,43)" fg:x="878" fg:w="1"/><text x="69.5476%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.2976%" y="501" width="0.0789%" height="15" fill="rgb(233,65,53)" fg:x="878" fg:w="1"/><text x="69.5476%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.2976%" y="485" width="0.0789%" height="15" fill="rgb(221,121,27)" fg:x="878" fg:w="1"/><text x="69.5476%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="69.2976%" y="469" width="0.0789%" height="15" fill="rgb(247,70,47)" fg:x="878" fg:w="1"/><text x="69.5476%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="69.2976%" y="453" width="0.0789%" height="15" fill="rgb(228,85,35)" fg:x="878" fg:w="1"/><text x="69.5476%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="69.2976%" y="437" width="0.0789%" height="15" fill="rgb(209,50,18)" fg:x="878" fg:w="1"/><text x="69.5476%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="69.2976%" y="421" width="0.0789%" height="15" fill="rgb(250,19,35)" fg:x="878" fg:w="1"/><text x="69.5476%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="69.2976%" y="405" width="0.0789%" height="15" fill="rgb(253,107,29)" fg:x="878" fg:w="1"/><text x="69.5476%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="69.2976%" y="389" width="0.0789%" height="15" fill="rgb(252,179,29)" fg:x="878" fg:w="1"/><text x="69.5476%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.2976%" y="373" width="0.0789%" height="15" fill="rgb(238,194,6)" fg:x="878" fg:w="1"/><text x="69.5476%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="69.2976%" y="357" width="0.0789%" height="15" fill="rgb(238,164,29)" fg:x="878" fg:w="1"/><text x="69.5476%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.08%)</title><rect x="69.2976%" y="341" width="0.0789%" height="15" fill="rgb(224,25,9)" fg:x="878" fg:w="1"/><text x="69.5476%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.3765%" y="645" width="0.0789%" height="15" fill="rgb(244,153,23)" fg:x="879" fg:w="1"/><text x="69.6265%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="69.4554%" y="597" width="0.1579%" height="15" fill="rgb(212,203,14)" fg:x="880" fg:w="2"/><text x="69.7054%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.5343%" y="581" width="0.0789%" height="15" fill="rgb(220,164,20)" fg:x="881" fg:w="1"/><text x="69.7843%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6133%" y="581" width="0.0789%" height="15" fill="rgb(222,203,48)" fg:x="882" fg:w="1"/><text x="69.8633%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="69.3765%" y="725" width="0.3946%" height="15" fill="rgb(215,159,22)" fg:x="879" fg:w="5"/><text x="69.6265%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.39%)</title><rect x="69.3765%" y="709" width="0.3946%" height="15" fill="rgb(216,183,47)" fg:x="879" fg:w="5"/><text x="69.6265%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="69.3765%" y="693" width="0.3946%" height="15" fill="rgb(229,195,25)" fg:x="879" fg:w="5"/><text x="69.6265%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (5 samples, 0.39%)</title><rect x="69.3765%" y="677" width="0.3946%" height="15" fill="rgb(224,132,51)" fg:x="879" fg:w="5"/><text x="69.6265%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="69.3765%" y="661" width="0.3946%" height="15" fill="rgb(240,63,7)" fg:x="879" fg:w="5"/><text x="69.6265%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="69.4554%" y="645" width="0.3157%" height="15" fill="rgb(249,182,41)" fg:x="880" fg:w="4"/><text x="69.7054%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="69.4554%" y="629" width="0.3157%" height="15" fill="rgb(243,47,26)" fg:x="880" fg:w="4"/><text x="69.7054%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="69.4554%" y="613" width="0.3157%" height="15" fill="rgb(233,48,2)" fg:x="880" fg:w="4"/><text x="69.7054%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.6133%" y="597" width="0.1579%" height="15" fill="rgb(244,165,34)" fg:x="882" fg:w="2"/><text x="69.8633%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.6922%" y="581" width="0.0789%" height="15" fill="rgb(207,89,7)" fg:x="883" fg:w="1"/><text x="69.9422%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="69.7711%" y="645" width="0.0789%" height="15" fill="rgb(244,117,36)" fg:x="884" fg:w="1"/><text x="70.0211%" y="655.50"></text></g><g><title>libloading::safe::Library::new (1 samples, 0.08%)</title><rect x="69.7711%" y="629" width="0.0789%" height="15" fill="rgb(226,144,34)" fg:x="884" fg:w="1"/><text x="70.0211%" y="639.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="69.7711%" y="613" width="0.0789%" height="15" fill="rgb(213,23,19)" fg:x="884" fg:w="1"/><text x="70.0211%" y="623.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="69.7711%" y="597" width="0.0789%" height="15" fill="rgb(217,75,12)" fg:x="884" fg:w="1"/><text x="70.0211%" y="607.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="69.7711%" y="581" width="0.0789%" height="15" fill="rgb(224,159,17)" fg:x="884" fg:w="1"/><text x="70.0211%" y="591.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="69.7711%" y="565" width="0.0789%" height="15" fill="rgb(217,118,1)" fg:x="884" fg:w="1"/><text x="70.0211%" y="575.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="69.7711%" y="549" width="0.0789%" height="15" fill="rgb(232,180,48)" fg:x="884" fg:w="1"/><text x="70.0211%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (2 samples, 0.16%)</title><rect x="69.7711%" y="725" width="0.1579%" height="15" fill="rgb(230,27,33)" fg:x="884" fg:w="2"/><text x="70.0211%" y="735.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (2 samples, 0.16%)</title><rect x="69.7711%" y="709" width="0.1579%" height="15" fill="rgb(205,31,21)" fg:x="884" fg:w="2"/><text x="70.0211%" y="719.50"></text></g><g><title>engine::session::Session::new (2 samples, 0.16%)</title><rect x="69.7711%" y="693" width="0.1579%" height="15" fill="rgb(253,59,4)" fg:x="884" fg:w="2"/><text x="70.0211%" y="703.50"></text></g><g><title>engine::session::Session::initialize (2 samples, 0.16%)</title><rect x="69.7711%" y="677" width="0.1579%" height="15" fill="rgb(224,201,9)" fg:x="884" fg:w="2"/><text x="70.0211%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (2 samples, 0.16%)</title><rect x="69.7711%" y="661" width="0.1579%" height="15" fill="rgb(229,206,30)" fg:x="884" fg:w="2"/><text x="70.0211%" y="671.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="69.8500%" y="645" width="0.0789%" height="15" fill="rgb(212,67,47)" fg:x="885" fg:w="1"/><text x="70.1000%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="69.9290%" y="613" width="0.0789%" height="15" fill="rgb(211,96,50)" fg:x="886" fg:w="1"/><text x="70.1790%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.9290%" y="597" width="0.0789%" height="15" fill="rgb(252,114,18)" fg:x="886" fg:w="1"/><text x="70.1790%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.9290%" y="581" width="0.0789%" height="15" fill="rgb(223,58,37)" fg:x="886" fg:w="1"/><text x="70.1790%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.0079%" y="581" width="0.0789%" height="15" fill="rgb(237,70,4)" fg:x="887" fg:w="1"/><text x="70.2579%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="69.9290%" y="629" width="0.2368%" height="15" fill="rgb(244,85,46)" fg:x="886" fg:w="3"/><text x="70.1790%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="70.0079%" y="613" width="0.1579%" height="15" fill="rgb(223,39,52)" fg:x="887" fg:w="2"/><text x="70.2579%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="70.0079%" y="597" width="0.1579%" height="15" fill="rgb(218,200,14)" fg:x="887" fg:w="2"/><text x="70.2579%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0868%" y="581" width="0.0789%" height="15" fill="rgb(208,171,16)" fg:x="888" fg:w="1"/><text x="70.3368%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0868%" y="565" width="0.0789%" height="15" fill="rgb(234,200,18)" fg:x="888" fg:w="1"/><text x="70.3368%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0868%" y="549" width="0.0789%" height="15" fill="rgb(228,45,11)" fg:x="888" fg:w="1"/><text x="70.3368%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.0868%" y="533" width="0.0789%" height="15" fill="rgb(237,182,11)" fg:x="888" fg:w="1"/><text x="70.3368%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.0868%" y="517" width="0.0789%" height="15" fill="rgb(241,175,49)" fg:x="888" fg:w="1"/><text x="70.3368%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.0868%" y="501" width="0.0789%" height="15" fill="rgb(247,38,35)" fg:x="888" fg:w="1"/><text x="70.3368%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.1657%" y="581" width="0.0789%" height="15" fill="rgb(228,39,49)" fg:x="889" fg:w="1"/><text x="70.4157%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.1657%" y="629" width="0.1579%" height="15" fill="rgb(226,101,26)" fg:x="889" fg:w="2"/><text x="70.4157%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="70.1657%" y="613" width="0.1579%" height="15" fill="rgb(206,141,19)" fg:x="889" fg:w="2"/><text x="70.4157%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.1657%" y="597" width="0.1579%" height="15" fill="rgb(211,200,13)" fg:x="889" fg:w="2"/><text x="70.4157%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.2447%" y="581" width="0.0789%" height="15" fill="rgb(241,121,6)" fg:x="890" fg:w="1"/><text x="70.4947%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.2447%" y="565" width="0.0789%" height="15" fill="rgb(234,221,29)" fg:x="890" fg:w="1"/><text x="70.4947%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.2447%" y="549" width="0.0789%" height="15" fill="rgb(229,136,5)" fg:x="890" fg:w="1"/><text x="70.4947%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.2447%" y="533" width="0.0789%" height="15" fill="rgb(238,36,11)" fg:x="890" fg:w="1"/><text x="70.4947%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.2447%" y="517" width="0.0789%" height="15" fill="rgb(251,55,41)" fg:x="890" fg:w="1"/><text x="70.4947%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.2447%" y="501" width="0.0789%" height="15" fill="rgb(242,34,40)" fg:x="890" fg:w="1"/><text x="70.4947%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.3236%" y="581" width="0.0789%" height="15" fill="rgb(215,42,17)" fg:x="891" fg:w="1"/><text x="70.5736%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.5604%" y="533" width="0.0789%" height="15" fill="rgb(207,44,46)" fg:x="894" fg:w="1"/><text x="70.8104%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.5604%" y="517" width="0.0789%" height="15" fill="rgb(211,206,28)" fg:x="894" fg:w="1"/><text x="70.8104%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.5604%" y="501" width="0.0789%" height="15" fill="rgb(237,167,16)" fg:x="894" fg:w="1"/><text x="70.8104%" y="511.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.79%)</title><rect x="69.9290%" y="709" width="0.7893%" height="15" fill="rgb(233,66,6)" fg:x="886" fg:w="10"/><text x="70.1790%" y="719.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.79%)</title><rect x="69.9290%" y="693" width="0.7893%" height="15" fill="rgb(246,123,29)" fg:x="886" fg:w="10"/><text x="70.1790%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.79%)</title><rect x="69.9290%" y="677" width="0.7893%" height="15" fill="rgb(209,62,40)" fg:x="886" fg:w="10"/><text x="70.1790%" y="687.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (10 samples, 0.79%)</title><rect x="69.9290%" y="661" width="0.7893%" height="15" fill="rgb(218,4,25)" fg:x="886" fg:w="10"/><text x="70.1790%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (10 samples, 0.79%)</title><rect x="69.9290%" y="645" width="0.7893%" height="15" fill="rgb(253,91,49)" fg:x="886" fg:w="10"/><text x="70.1790%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.39%)</title><rect x="70.3236%" y="629" width="0.3946%" height="15" fill="rgb(228,155,29)" fg:x="891" fg:w="5"/><text x="70.5736%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.39%)</title><rect x="70.3236%" y="613" width="0.3946%" height="15" fill="rgb(243,57,37)" fg:x="891" fg:w="5"/><text x="70.5736%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.39%)</title><rect x="70.3236%" y="597" width="0.3946%" height="15" fill="rgb(244,167,17)" fg:x="891" fg:w="5"/><text x="70.5736%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="70.4025%" y="581" width="0.3157%" height="15" fill="rgb(207,181,38)" fg:x="892" fg:w="4"/><text x="70.6525%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="70.5604%" y="565" width="0.1579%" height="15" fill="rgb(211,8,23)" fg:x="894" fg:w="2"/><text x="70.8104%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="70.5604%" y="549" width="0.1579%" height="15" fill="rgb(235,11,44)" fg:x="894" fg:w="2"/><text x="70.8104%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.6393%" y="533" width="0.0789%" height="15" fill="rgb(248,18,52)" fg:x="895" fg:w="1"/><text x="70.8893%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.6393%" y="517" width="0.0789%" height="15" fill="rgb(208,4,7)" fg:x="895" fg:w="1"/><text x="70.8893%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.6393%" y="501" width="0.0789%" height="15" fill="rgb(240,17,39)" fg:x="895" fg:w="1"/><text x="70.8893%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.6393%" y="485" width="0.0789%" height="15" fill="rgb(207,170,3)" fg:x="895" fg:w="1"/><text x="70.8893%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.6393%" y="469" width="0.0789%" height="15" fill="rgb(236,100,52)" fg:x="895" fg:w="1"/><text x="70.8893%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.6393%" y="453" width="0.0789%" height="15" fill="rgb(246,78,51)" fg:x="895" fg:w="1"/><text x="70.8893%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.6393%" y="437" width="0.0789%" height="15" fill="rgb(211,17,15)" fg:x="895" fg:w="1"/><text x="70.8893%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.6393%" y="421" width="0.0789%" height="15" fill="rgb(209,59,46)" fg:x="895" fg:w="1"/><text x="70.8893%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.6393%" y="405" width="0.0789%" height="15" fill="rgb(210,92,25)" fg:x="895" fg:w="1"/><text x="70.8893%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.6393%" y="389" width="0.0789%" height="15" fill="rgb(238,174,52)" fg:x="895" fg:w="1"/><text x="70.8893%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6393%" y="373" width="0.0789%" height="15" fill="rgb(230,73,7)" fg:x="895" fg:w="1"/><text x="70.8893%" y="383.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="70.7182%" y="677" width="0.0789%" height="15" fill="rgb(243,124,40)" fg:x="896" fg:w="1"/><text x="70.9682%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.7182%" y="661" width="0.0789%" height="15" fill="rgb(244,170,11)" fg:x="896" fg:w="1"/><text x="70.9682%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.7182%" y="645" width="0.0789%" height="15" fill="rgb(207,114,54)" fg:x="896" fg:w="1"/><text x="70.9682%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.7182%" y="629" width="0.0789%" height="15" fill="rgb(205,42,20)" fg:x="896" fg:w="1"/><text x="70.9682%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.7182%" y="613" width="0.0789%" height="15" fill="rgb(230,30,28)" fg:x="896" fg:w="1"/><text x="70.9682%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.7182%" y="597" width="0.0789%" height="15" fill="rgb(205,73,54)" fg:x="896" fg:w="1"/><text x="70.9682%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7182%" y="581" width="0.0789%" height="15" fill="rgb(254,227,23)" fg:x="896" fg:w="1"/><text x="70.9682%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.7182%" y="565" width="0.0789%" height="15" fill="rgb(228,202,34)" fg:x="896" fg:w="1"/><text x="70.9682%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7182%" y="549" width="0.0789%" height="15" fill="rgb(222,225,37)" fg:x="896" fg:w="1"/><text x="70.9682%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="70.7972%" y="677" width="0.0789%" height="15" fill="rgb(221,14,54)" fg:x="897" fg:w="1"/><text x="71.0472%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7972%" y="661" width="0.0789%" height="15" fill="rgb(254,102,2)" fg:x="897" fg:w="1"/><text x="71.0472%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="70.8761%" y="677" width="0.0789%" height="15" fill="rgb(232,104,17)" fg:x="898" fg:w="1"/><text x="71.1261%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8761%" y="661" width="0.0789%" height="15" fill="rgb(250,220,14)" fg:x="898" fg:w="1"/><text x="71.1261%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.8761%" y="645" width="0.0789%" height="15" fill="rgb(241,158,9)" fg:x="898" fg:w="1"/><text x="71.1261%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.8761%" y="629" width="0.0789%" height="15" fill="rgb(246,9,43)" fg:x="898" fg:w="1"/><text x="71.1261%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.9550%" y="533" width="0.0789%" height="15" fill="rgb(206,73,33)" fg:x="899" fg:w="1"/><text x="71.2050%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9550%" y="517" width="0.0789%" height="15" fill="rgb(222,79,8)" fg:x="899" fg:w="1"/><text x="71.2050%" y="527.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.39%)</title><rect x="70.7182%" y="709" width="0.3946%" height="15" fill="rgb(234,8,54)" fg:x="896" fg:w="5"/><text x="70.9682%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.39%)</title><rect x="70.7182%" y="693" width="0.3946%" height="15" fill="rgb(209,134,38)" fg:x="896" fg:w="5"/><text x="70.9682%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="70.9550%" y="677" width="0.1579%" height="15" fill="rgb(230,127,29)" fg:x="899" fg:w="2"/><text x="71.2050%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="70.9550%" y="661" width="0.1579%" height="15" fill="rgb(242,44,41)" fg:x="899" fg:w="2"/><text x="71.2050%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="70.9550%" y="645" width="0.1579%" height="15" fill="rgb(222,56,43)" fg:x="899" fg:w="2"/><text x="71.2050%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="70.9550%" y="629" width="0.1579%" height="15" fill="rgb(238,39,47)" fg:x="899" fg:w="2"/><text x="71.2050%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="70.9550%" y="613" width="0.1579%" height="15" fill="rgb(226,79,43)" fg:x="899" fg:w="2"/><text x="71.2050%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="70.9550%" y="597" width="0.1579%" height="15" fill="rgb(242,105,53)" fg:x="899" fg:w="2"/><text x="71.2050%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.9550%" y="581" width="0.1579%" height="15" fill="rgb(251,132,46)" fg:x="899" fg:w="2"/><text x="71.2050%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="70.9550%" y="565" width="0.1579%" height="15" fill="rgb(231,77,14)" fg:x="899" fg:w="2"/><text x="71.2050%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.9550%" y="549" width="0.1579%" height="15" fill="rgb(240,135,9)" fg:x="899" fg:w="2"/><text x="71.2050%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.0339%" y="533" width="0.0789%" height="15" fill="rgb(248,109,14)" fg:x="900" fg:w="1"/><text x="71.2839%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.0339%" y="517" width="0.0789%" height="15" fill="rgb(227,146,52)" fg:x="900" fg:w="1"/><text x="71.2839%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.0339%" y="501" width="0.0789%" height="15" fill="rgb(232,54,3)" fg:x="900" fg:w="1"/><text x="71.2839%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="71.1129%" y="677" width="0.1579%" height="15" fill="rgb(229,201,43)" fg:x="901" fg:w="2"/><text x="71.3629%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.1918%" y="661" width="0.0789%" height="15" fill="rgb(252,161,33)" fg:x="902" fg:w="1"/><text x="71.4418%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.1918%" y="645" width="0.0789%" height="15" fill="rgb(226,146,40)" fg:x="902" fg:w="1"/><text x="71.4418%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.1918%" y="629" width="0.0789%" height="15" fill="rgb(219,47,25)" fg:x="902" fg:w="1"/><text x="71.4418%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.1918%" y="613" width="0.0789%" height="15" fill="rgb(250,135,13)" fg:x="902" fg:w="1"/><text x="71.4418%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1918%" y="597" width="0.0789%" height="15" fill="rgb(219,229,18)" fg:x="902" fg:w="1"/><text x="71.4418%" y="607.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="71.1129%" y="709" width="0.2368%" height="15" fill="rgb(217,152,27)" fg:x="901" fg:w="3"/><text x="71.3629%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="71.1129%" y="693" width="0.2368%" height="15" fill="rgb(225,71,47)" fg:x="901" fg:w="3"/><text x="71.3629%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="71.2707%" y="677" width="0.0789%" height="15" fill="rgb(220,139,14)" fg:x="903" fg:w="1"/><text x="71.5207%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="71.2707%" y="661" width="0.0789%" height="15" fill="rgb(247,54,32)" fg:x="903" fg:w="1"/><text x="71.5207%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="71.2707%" y="645" width="0.0789%" height="15" fill="rgb(252,131,39)" fg:x="903" fg:w="1"/><text x="71.5207%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.2707%" y="629" width="0.0789%" height="15" fill="rgb(210,108,39)" fg:x="903" fg:w="1"/><text x="71.5207%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.2707%" y="613" width="0.0789%" height="15" fill="rgb(205,23,29)" fg:x="903" fg:w="1"/><text x="71.5207%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.2707%" y="597" width="0.0789%" height="15" fill="rgb(246,139,46)" fg:x="903" fg:w="1"/><text x="71.5207%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2707%" y="581" width="0.0789%" height="15" fill="rgb(250,81,26)" fg:x="903" fg:w="1"/><text x="71.5207%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.2707%" y="565" width="0.0789%" height="15" fill="rgb(214,104,7)" fg:x="903" fg:w="1"/><text x="71.5207%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2707%" y="549" width="0.0789%" height="15" fill="rgb(233,189,8)" fg:x="903" fg:w="1"/><text x="71.5207%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.2707%" y="533" width="0.0789%" height="15" fill="rgb(228,141,17)" fg:x="903" fg:w="1"/><text x="71.5207%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2707%" y="517" width="0.0789%" height="15" fill="rgb(247,157,1)" fg:x="903" fg:w="1"/><text x="71.5207%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.2707%" y="501" width="0.0789%" height="15" fill="rgb(249,225,5)" fg:x="903" fg:w="1"/><text x="71.5207%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.2707%" y="485" width="0.0789%" height="15" fill="rgb(242,55,13)" fg:x="903" fg:w="1"/><text x="71.5207%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2707%" y="469" width="0.0789%" height="15" fill="rgb(230,49,50)" fg:x="903" fg:w="1"/><text x="71.5207%" y="479.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="71.3496%" y="645" width="0.1579%" height="15" fill="rgb(241,111,38)" fg:x="904" fg:w="2"/><text x="71.5996%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="71.3496%" y="629" width="0.1579%" height="15" fill="rgb(252,155,4)" fg:x="904" fg:w="2"/><text x="71.5996%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="71.3496%" y="613" width="0.1579%" height="15" fill="rgb(212,69,32)" fg:x="904" fg:w="2"/><text x="71.5996%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="71.3496%" y="597" width="0.1579%" height="15" fill="rgb(243,107,47)" fg:x="904" fg:w="2"/><text x="71.5996%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="71.3496%" y="581" width="0.1579%" height="15" fill="rgb(247,130,12)" fg:x="904" fg:w="2"/><text x="71.5996%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.3496%" y="565" width="0.1579%" height="15" fill="rgb(233,74,16)" fg:x="904" fg:w="2"/><text x="71.5996%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.3496%" y="549" width="0.1579%" height="15" fill="rgb(208,58,18)" fg:x="904" fg:w="2"/><text x="71.5996%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4286%" y="533" width="0.0789%" height="15" fill="rgb(242,225,1)" fg:x="905" fg:w="1"/><text x="71.6786%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4286%" y="517" width="0.0789%" height="15" fill="rgb(249,39,40)" fg:x="905" fg:w="1"/><text x="71.6786%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="71.5075%" y="613" width="0.0789%" height="15" fill="rgb(207,72,44)" fg:x="906" fg:w="1"/><text x="71.7575%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="71.5075%" y="597" width="0.0789%" height="15" fill="rgb(215,193,12)" fg:x="906" fg:w="1"/><text x="71.7575%" y="607.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5075%" y="581" width="0.0789%" height="15" fill="rgb(248,41,39)" fg:x="906" fg:w="1"/><text x="71.7575%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.5075%" y="565" width="0.0789%" height="15" fill="rgb(253,85,4)" fg:x="906" fg:w="1"/><text x="71.7575%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.5075%" y="549" width="0.0789%" height="15" fill="rgb(243,70,31)" fg:x="906" fg:w="1"/><text x="71.7575%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.5075%" y="533" width="0.0789%" height="15" fill="rgb(253,195,26)" fg:x="906" fg:w="1"/><text x="71.7575%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="71.5075%" y="629" width="0.1579%" height="15" fill="rgb(243,42,11)" fg:x="906" fg:w="2"/><text x="71.7575%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="71.5864%" y="613" width="0.0789%" height="15" fill="rgb(239,66,17)" fg:x="907" fg:w="1"/><text x="71.8364%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="71.5864%" y="597" width="0.0789%" height="15" fill="rgb(217,132,21)" fg:x="907" fg:w="1"/><text x="71.8364%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="71.5864%" y="581" width="0.0789%" height="15" fill="rgb(252,202,21)" fg:x="907" fg:w="1"/><text x="71.8364%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="71.5864%" y="565" width="0.0789%" height="15" fill="rgb(233,98,36)" fg:x="907" fg:w="1"/><text x="71.8364%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="71.5864%" y="549" width="0.0789%" height="15" fill="rgb(216,153,54)" fg:x="907" fg:w="1"/><text x="71.8364%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5864%" y="533" width="0.0789%" height="15" fill="rgb(250,99,7)" fg:x="907" fg:w="1"/><text x="71.8364%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5864%" y="517" width="0.0789%" height="15" fill="rgb(207,56,50)" fg:x="907" fg:w="1"/><text x="71.8364%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5864%" y="501" width="0.0789%" height="15" fill="rgb(244,61,34)" fg:x="907" fg:w="1"/><text x="71.8364%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.5864%" y="485" width="0.0789%" height="15" fill="rgb(241,50,38)" fg:x="907" fg:w="1"/><text x="71.8364%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.5864%" y="469" width="0.0789%" height="15" fill="rgb(212,166,30)" fg:x="907" fg:w="1"/><text x="71.8364%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.5864%" y="453" width="0.0789%" height="15" fill="rgb(249,127,32)" fg:x="907" fg:w="1"/><text x="71.8364%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.5864%" y="437" width="0.0789%" height="15" fill="rgb(209,103,0)" fg:x="907" fg:w="1"/><text x="71.8364%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.5864%" y="421" width="0.0789%" height="15" fill="rgb(238,209,51)" fg:x="907" fg:w="1"/><text x="71.8364%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.5864%" y="405" width="0.0789%" height="15" fill="rgb(237,56,23)" fg:x="907" fg:w="1"/><text x="71.8364%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.5864%" y="389" width="0.0789%" height="15" fill="rgb(215,153,46)" fg:x="907" fg:w="1"/><text x="71.8364%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.5864%" y="373" width="0.0789%" height="15" fill="rgb(224,49,31)" fg:x="907" fg:w="1"/><text x="71.8364%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.5864%" y="357" width="0.0789%" height="15" fill="rgb(250,18,42)" fg:x="907" fg:w="1"/><text x="71.8364%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5864%" y="341" width="0.0789%" height="15" fill="rgb(215,176,39)" fg:x="907" fg:w="1"/><text x="71.8364%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.6654%" y="581" width="0.0789%" height="15" fill="rgb(223,77,29)" fg:x="908" fg:w="1"/><text x="71.9154%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.6654%" y="565" width="0.0789%" height="15" fill="rgb(234,94,52)" fg:x="908" fg:w="1"/><text x="71.9154%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.6654%" y="549" width="0.0789%" height="15" fill="rgb(220,154,50)" fg:x="908" fg:w="1"/><text x="71.9154%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.6654%" y="533" width="0.0789%" height="15" fill="rgb(212,11,10)" fg:x="908" fg:w="1"/><text x="71.9154%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6654%" y="517" width="0.0789%" height="15" fill="rgb(205,166,19)" fg:x="908" fg:w="1"/><text x="71.9154%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.6654%" y="501" width="0.0789%" height="15" fill="rgb(244,198,16)" fg:x="908" fg:w="1"/><text x="71.9154%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.47%)</title><rect x="71.3496%" y="693" width="0.4736%" height="15" fill="rgb(219,69,12)" fg:x="904" fg:w="6"/><text x="71.5996%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.47%)</title><rect x="71.3496%" y="677" width="0.4736%" height="15" fill="rgb(245,30,7)" fg:x="904" fg:w="6"/><text x="71.5996%" y="687.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.47%)</title><rect x="71.3496%" y="661" width="0.4736%" height="15" fill="rgb(218,221,48)" fg:x="904" fg:w="6"/><text x="71.5996%" y="671.50"></text></g><g><title>plugins_core::build::Build::leads_to (4 samples, 0.32%)</title><rect x="71.5075%" y="645" width="0.3157%" height="15" fill="rgb(216,66,15)" fg:x="906" fg:w="4"/><text x="71.7575%" y="655.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="71.6654%" y="629" width="0.1579%" height="15" fill="rgb(226,122,50)" fg:x="908" fg:w="2"/><text x="71.9154%" y="639.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="71.6654%" y="613" width="0.1579%" height="15" fill="rgb(239,156,16)" fg:x="908" fg:w="2"/><text x="71.9154%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="71.6654%" y="597" width="0.1579%" height="15" fill="rgb(224,27,38)" fg:x="908" fg:w="2"/><text x="71.9154%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.7443%" y="581" width="0.0789%" height="15" fill="rgb(224,39,27)" fg:x="909" fg:w="1"/><text x="71.9943%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.7443%" y="565" width="0.0789%" height="15" fill="rgb(215,92,29)" fg:x="909" fg:w="1"/><text x="71.9943%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.7443%" y="549" width="0.0789%" height="15" fill="rgb(207,159,16)" fg:x="909" fg:w="1"/><text x="71.9943%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7443%" y="533" width="0.0789%" height="15" fill="rgb(238,163,47)" fg:x="909" fg:w="1"/><text x="71.9943%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7443%" y="517" width="0.0789%" height="15" fill="rgb(219,91,49)" fg:x="909" fg:w="1"/><text x="71.9943%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7443%" y="501" width="0.0789%" height="15" fill="rgb(227,167,31)" fg:x="909" fg:w="1"/><text x="71.9943%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7443%" y="485" width="0.0789%" height="15" fill="rgb(234,80,54)" fg:x="909" fg:w="1"/><text x="71.9943%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7443%" y="469" width="0.0789%" height="15" fill="rgb(212,114,2)" fg:x="909" fg:w="1"/><text x="71.9943%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7443%" y="453" width="0.0789%" height="15" fill="rgb(234,50,24)" fg:x="909" fg:w="1"/><text x="71.9943%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.7443%" y="437" width="0.0789%" height="15" fill="rgb(221,68,8)" fg:x="909" fg:w="1"/><text x="71.9943%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.7443%" y="421" width="0.0789%" height="15" fill="rgb(254,180,31)" fg:x="909" fg:w="1"/><text x="71.9943%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.7443%" y="405" width="0.0789%" height="15" fill="rgb(247,130,50)" fg:x="909" fg:w="1"/><text x="71.9943%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7443%" y="389" width="0.0789%" height="15" fill="rgb(211,109,4)" fg:x="909" fg:w="1"/><text x="71.9943%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7443%" y="373" width="0.0789%" height="15" fill="rgb(238,50,21)" fg:x="909" fg:w="1"/><text x="71.9943%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.7443%" y="357" width="0.0789%" height="15" fill="rgb(225,57,45)" fg:x="909" fg:w="1"/><text x="71.9943%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.7443%" y="341" width="0.0789%" height="15" fill="rgb(209,196,50)" fg:x="909" fg:w="1"/><text x="71.9943%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.7443%" y="325" width="0.0789%" height="15" fill="rgb(242,140,13)" fg:x="909" fg:w="1"/><text x="71.9943%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.7443%" y="309" width="0.0789%" height="15" fill="rgb(217,111,7)" fg:x="909" fg:w="1"/><text x="71.9943%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7443%" y="293" width="0.0789%" height="15" fill="rgb(253,193,51)" fg:x="909" fg:w="1"/><text x="71.9943%" y="303.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.8232%" y="565" width="0.0789%" height="15" fill="rgb(252,70,29)" fg:x="910" fg:w="1"/><text x="72.0732%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.8232%" y="549" width="0.0789%" height="15" fill="rgb(232,127,12)" fg:x="910" fg:w="1"/><text x="72.0732%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="71.8232%" y="581" width="0.1579%" height="15" fill="rgb(211,180,21)" fg:x="910" fg:w="2"/><text x="72.0732%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.9021%" y="565" width="0.0789%" height="15" fill="rgb(229,72,13)" fg:x="911" fg:w="1"/><text x="72.1521%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.9811%" y="565" width="0.0789%" height="15" fill="rgb(240,211,49)" fg:x="912" fg:w="1"/><text x="72.2311%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="71.8232%" y="597" width="0.3157%" height="15" fill="rgb(219,149,40)" fg:x="910" fg:w="4"/><text x="72.0732%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.9811%" y="581" width="0.1579%" height="15" fill="rgb(210,127,46)" fg:x="912" fg:w="2"/><text x="72.2311%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.0600%" y="565" width="0.0789%" height="15" fill="rgb(220,106,7)" fg:x="913" fg:w="1"/><text x="72.3100%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.0600%" y="549" width="0.0789%" height="15" fill="rgb(249,31,22)" fg:x="913" fg:w="1"/><text x="72.3100%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.0600%" y="533" width="0.0789%" height="15" fill="rgb(253,1,49)" fg:x="913" fg:w="1"/><text x="72.3100%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.0600%" y="517" width="0.0789%" height="15" fill="rgb(227,144,33)" fg:x="913" fg:w="1"/><text x="72.3100%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.0600%" y="501" width="0.0789%" height="15" fill="rgb(249,163,44)" fg:x="913" fg:w="1"/><text x="72.3100%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.0600%" y="485" width="0.0789%" height="15" fill="rgb(234,15,39)" fg:x="913" fg:w="1"/><text x="72.3100%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.1389%" y="549" width="0.0789%" height="15" fill="rgb(207,66,16)" fg:x="914" fg:w="1"/><text x="72.3889%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.1389%" y="597" width="0.1579%" height="15" fill="rgb(233,112,24)" fg:x="914" fg:w="2"/><text x="72.3889%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="72.1389%" y="581" width="0.1579%" height="15" fill="rgb(230,90,22)" fg:x="914" fg:w="2"/><text x="72.3889%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.1389%" y="565" width="0.1579%" height="15" fill="rgb(229,61,13)" fg:x="914" fg:w="2"/><text x="72.3889%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.2178%" y="549" width="0.0789%" height="15" fill="rgb(225,57,24)" fg:x="915" fg:w="1"/><text x="72.4678%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.2178%" y="533" width="0.0789%" height="15" fill="rgb(208,169,48)" fg:x="915" fg:w="1"/><text x="72.4678%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.2178%" y="517" width="0.0789%" height="15" fill="rgb(244,218,51)" fg:x="915" fg:w="1"/><text x="72.4678%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.2178%" y="501" width="0.0789%" height="15" fill="rgb(214,148,10)" fg:x="915" fg:w="1"/><text x="72.4678%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.2178%" y="485" width="0.0789%" height="15" fill="rgb(225,174,27)" fg:x="915" fg:w="1"/><text x="72.4678%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2178%" y="469" width="0.0789%" height="15" fill="rgb(230,96,26)" fg:x="915" fg:w="1"/><text x="72.4678%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3757%" y="469" width="0.0789%" height="15" fill="rgb(232,10,30)" fg:x="917" fg:w="1"/><text x="72.6257%" y="479.50"></text></g><g><title>engine::session::Session::flush (9 samples, 0.71%)</title><rect x="71.8232%" y="693" width="0.7103%" height="15" fill="rgb(222,8,50)" fg:x="910" fg:w="9"/><text x="72.0732%" y="703.50"></text></g><g><title>engine::session::Session::save_changes (9 samples, 0.71%)</title><rect x="71.8232%" y="677" width="0.7103%" height="15" fill="rgb(213,81,27)" fg:x="910" fg:w="9"/><text x="72.0732%" y="687.50"></text></g><g><title>engine::session::state::State::close (9 samples, 0.71%)</title><rect x="71.8232%" y="661" width="0.7103%" height="15" fill="rgb(245,50,10)" fg:x="910" fg:w="9"/><text x="72.0732%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (9 samples, 0.71%)</title><rect x="71.8232%" y="645" width="0.7103%" height="15" fill="rgb(216,100,18)" fg:x="910" fg:w="9"/><text x="72.0732%" y="655.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (9 samples, 0.71%)</title><rect x="71.8232%" y="629" width="0.7103%" height="15" fill="rgb(236,147,54)" fg:x="910" fg:w="9"/><text x="72.0732%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (9 samples, 0.71%)</title><rect x="71.8232%" y="613" width="0.7103%" height="15" fill="rgb(205,143,26)" fg:x="910" fg:w="9"/><text x="72.0732%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="72.2968%" y="597" width="0.2368%" height="15" fill="rgb(236,26,9)" fg:x="916" fg:w="3"/><text x="72.5468%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="72.2968%" y="581" width="0.2368%" height="15" fill="rgb(221,165,53)" fg:x="916" fg:w="3"/><text x="72.5468%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="72.2968%" y="565" width="0.2368%" height="15" fill="rgb(214,110,17)" fg:x="916" fg:w="3"/><text x="72.5468%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="72.2968%" y="549" width="0.2368%" height="15" fill="rgb(237,197,12)" fg:x="916" fg:w="3"/><text x="72.5468%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="72.2968%" y="533" width="0.2368%" height="15" fill="rgb(205,84,17)" fg:x="916" fg:w="3"/><text x="72.5468%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.2968%" y="517" width="0.2368%" height="15" fill="rgb(237,18,45)" fg:x="916" fg:w="3"/><text x="72.5468%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="72.2968%" y="501" width="0.2368%" height="15" fill="rgb(221,87,14)" fg:x="916" fg:w="3"/><text x="72.5468%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="72.3757%" y="485" width="0.1579%" height="15" fill="rgb(238,186,15)" fg:x="917" fg:w="2"/><text x="72.6257%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4546%" y="469" width="0.0789%" height="15" fill="rgb(208,115,11)" fg:x="918" fg:w="1"/><text x="72.7046%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4546%" y="453" width="0.0789%" height="15" fill="rgb(254,175,0)" fg:x="918" fg:w="1"/><text x="72.7046%" y="463.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="72.5335%" y="661" width="0.0789%" height="15" fill="rgb(227,24,42)" fg:x="919" fg:w="1"/><text x="72.7835%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="72.5335%" y="645" width="0.0789%" height="15" fill="rgb(223,211,37)" fg:x="919" fg:w="1"/><text x="72.7835%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="72.5335%" y="629" width="0.0789%" height="15" fill="rgb(235,49,27)" fg:x="919" fg:w="1"/><text x="72.7835%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.5335%" y="613" width="0.0789%" height="15" fill="rgb(254,97,51)" fg:x="919" fg:w="1"/><text x="72.7835%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.5335%" y="597" width="0.0789%" height="15" fill="rgb(249,51,40)" fg:x="919" fg:w="1"/><text x="72.7835%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.5335%" y="581" width="0.0789%" height="15" fill="rgb(210,128,45)" fg:x="919" fg:w="1"/><text x="72.7835%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.5335%" y="565" width="0.0789%" height="15" fill="rgb(224,137,50)" fg:x="919" fg:w="1"/><text x="72.7835%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.5335%" y="549" width="0.0789%" height="15" fill="rgb(242,15,9)" fg:x="919" fg:w="1"/><text x="72.7835%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.5335%" y="533" width="0.0789%" height="15" fill="rgb(233,187,41)" fg:x="919" fg:w="1"/><text x="72.7835%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.5335%" y="517" width="0.0789%" height="15" fill="rgb(227,2,29)" fg:x="919" fg:w="1"/><text x="72.7835%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.5335%" y="501" width="0.0789%" height="15" fill="rgb(222,70,3)" fg:x="919" fg:w="1"/><text x="72.7835%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5335%" y="485" width="0.0789%" height="15" fill="rgb(213,11,42)" fg:x="919" fg:w="1"/><text x="72.7835%" y="495.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="72.5335%" y="693" width="0.1579%" height="15" fill="rgb(225,150,9)" fg:x="919" fg:w="2"/><text x="72.7835%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="72.5335%" y="677" width="0.1579%" height="15" fill="rgb(230,162,45)" fg:x="919" fg:w="2"/><text x="72.7835%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="72.6125%" y="661" width="0.0789%" height="15" fill="rgb(222,14,52)" fg:x="920" fg:w="1"/><text x="72.8625%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="72.6914%" y="661" width="0.0789%" height="15" fill="rgb(254,198,14)" fg:x="921" fg:w="1"/><text x="72.9414%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="72.6914%" y="645" width="0.0789%" height="15" fill="rgb(220,217,30)" fg:x="921" fg:w="1"/><text x="72.9414%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="72.6914%" y="629" width="0.0789%" height="15" fill="rgb(215,146,41)" fg:x="921" fg:w="1"/><text x="72.9414%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.6914%" y="613" width="0.0789%" height="15" fill="rgb(217,27,36)" fg:x="921" fg:w="1"/><text x="72.9414%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.6914%" y="597" width="0.0789%" height="15" fill="rgb(219,218,39)" fg:x="921" fg:w="1"/><text x="72.9414%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6914%" y="581" width="0.0789%" height="15" fill="rgb(219,4,42)" fg:x="921" fg:w="1"/><text x="72.9414%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6914%" y="565" width="0.0789%" height="15" fill="rgb(249,119,36)" fg:x="921" fg:w="1"/><text x="72.9414%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6914%" y="549" width="0.0789%" height="15" fill="rgb(209,23,33)" fg:x="921" fg:w="1"/><text x="72.9414%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6914%" y="533" width="0.0789%" height="15" fill="rgb(211,10,0)" fg:x="921" fg:w="1"/><text x="72.9414%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.6914%" y="517" width="0.0789%" height="15" fill="rgb(208,99,37)" fg:x="921" fg:w="1"/><text x="72.9414%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6914%" y="501" width="0.0789%" height="15" fill="rgb(213,132,31)" fg:x="921" fg:w="1"/><text x="72.9414%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6914%" y="485" width="0.0789%" height="15" fill="rgb(243,129,40)" fg:x="921" fg:w="1"/><text x="72.9414%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (19 samples, 1.50%)</title><rect x="71.3496%" y="709" width="1.4996%" height="15" fill="rgb(210,66,33)" fg:x="904" fg:w="19"/><text x="71.5996%" y="719.50"></text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="72.6914%" y="693" width="0.1579%" height="15" fill="rgb(209,189,4)" fg:x="921" fg:w="2"/><text x="72.9414%" y="703.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="72.6914%" y="677" width="0.1579%" height="15" fill="rgb(214,107,37)" fg:x="921" fg:w="2"/><text x="72.9414%" y="687.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="72.7703%" y="661" width="0.0789%" height="15" fill="rgb(245,88,54)" fg:x="922" fg:w="1"/><text x="73.0203%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="72.7703%" y="645" width="0.0789%" height="15" fill="rgb(205,146,20)" fg:x="922" fg:w="1"/><text x="73.0203%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="72.7703%" y="629" width="0.0789%" height="15" fill="rgb(220,161,25)" fg:x="922" fg:w="1"/><text x="73.0203%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.7703%" y="613" width="0.0789%" height="15" fill="rgb(215,152,15)" fg:x="922" fg:w="1"/><text x="73.0203%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.7703%" y="597" width="0.0789%" height="15" fill="rgb(233,192,44)" fg:x="922" fg:w="1"/><text x="73.0203%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.7703%" y="581" width="0.0789%" height="15" fill="rgb(240,170,46)" fg:x="922" fg:w="1"/><text x="73.0203%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7703%" y="565" width="0.0789%" height="15" fill="rgb(207,104,33)" fg:x="922" fg:w="1"/><text x="73.0203%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7703%" y="549" width="0.0789%" height="15" fill="rgb(219,21,39)" fg:x="922" fg:w="1"/><text x="73.0203%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="72.8493%" y="709" width="0.0789%" height="15" fill="rgb(214,133,29)" fg:x="923" fg:w="1"/><text x="73.0993%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="72.8493%" y="693" width="0.0789%" height="15" fill="rgb(226,93,6)" fg:x="923" fg:w="1"/><text x="73.0993%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="72.8493%" y="677" width="0.0789%" height="15" fill="rgb(252,222,34)" fg:x="923" fg:w="1"/><text x="73.0993%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="72.8493%" y="661" width="0.0789%" height="15" fill="rgb(252,92,48)" fg:x="923" fg:w="1"/><text x="73.0993%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="72.8493%" y="645" width="0.0789%" height="15" fill="rgb(245,223,24)" fg:x="923" fg:w="1"/><text x="73.0993%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.8493%" y="629" width="0.0789%" height="15" fill="rgb(205,176,3)" fg:x="923" fg:w="1"/><text x="73.0993%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.8493%" y="613" width="0.0789%" height="15" fill="rgb(235,151,15)" fg:x="923" fg:w="1"/><text x="73.0993%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.8493%" y="597" width="0.0789%" height="15" fill="rgb(237,209,11)" fg:x="923" fg:w="1"/><text x="73.0993%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.8493%" y="581" width="0.0789%" height="15" fill="rgb(243,227,24)" fg:x="923" fg:w="1"/><text x="73.0993%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.8493%" y="565" width="0.0789%" height="15" fill="rgb(239,193,16)" fg:x="923" fg:w="1"/><text x="73.0993%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="72.8493%" y="549" width="0.0789%" height="15" fill="rgb(231,27,9)" fg:x="923" fg:w="1"/><text x="73.0993%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="72.8493%" y="533" width="0.0789%" height="15" fill="rgb(219,169,10)" fg:x="923" fg:w="1"/><text x="73.0993%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="72.8493%" y="517" width="0.0789%" height="15" fill="rgb(244,229,43)" fg:x="923" fg:w="1"/><text x="73.0993%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="72.8493%" y="501" width="0.0789%" height="15" fill="rgb(254,38,20)" fg:x="923" fg:w="1"/><text x="73.0993%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (39 samples, 3.08%)</title><rect x="69.9290%" y="725" width="3.0781%" height="15" fill="rgb(250,47,30)" fg:x="886" fg:w="39"/><text x="70.1790%" y="735.50">&lt;te..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="72.9282%" y="709" width="0.0789%" height="15" fill="rgb(224,124,36)" fg:x="924" fg:w="1"/><text x="73.1782%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="72.9282%" y="693" width="0.0789%" height="15" fill="rgb(246,68,51)" fg:x="924" fg:w="1"/><text x="73.1782%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="72.9282%" y="677" width="0.0789%" height="15" fill="rgb(253,43,49)" fg:x="924" fg:w="1"/><text x="73.1782%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="72.9282%" y="661" width="0.0789%" height="15" fill="rgb(219,54,36)" fg:x="924" fg:w="1"/><text x="73.1782%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="72.9282%" y="645" width="0.0789%" height="15" fill="rgb(227,133,34)" fg:x="924" fg:w="1"/><text x="73.1782%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.9282%" y="629" width="0.0789%" height="15" fill="rgb(247,227,15)" fg:x="924" fg:w="1"/><text x="73.1782%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.9282%" y="613" width="0.0789%" height="15" fill="rgb(229,96,14)" fg:x="924" fg:w="1"/><text x="73.1782%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.9282%" y="597" width="0.0789%" height="15" fill="rgb(220,79,17)" fg:x="924" fg:w="1"/><text x="73.1782%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.9282%" y="581" width="0.0789%" height="15" fill="rgb(205,131,53)" fg:x="924" fg:w="1"/><text x="73.1782%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.9282%" y="565" width="0.0789%" height="15" fill="rgb(209,50,29)" fg:x="924" fg:w="1"/><text x="73.1782%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="72.9282%" y="549" width="0.0789%" height="15" fill="rgb(245,86,46)" fg:x="924" fg:w="1"/><text x="73.1782%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.9282%" y="533" width="0.0789%" height="15" fill="rgb(235,66,46)" fg:x="924" fg:w="1"/><text x="73.1782%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="73.0071%" y="725" width="0.0789%" height="15" fill="rgb(232,148,31)" fg:x="925" fg:w="1"/><text x="73.2571%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="73.0071%" y="709" width="0.0789%" height="15" fill="rgb(217,149,8)" fg:x="925" fg:w="1"/><text x="73.2571%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="73.0071%" y="693" width="0.0789%" height="15" fill="rgb(209,183,11)" fg:x="925" fg:w="1"/><text x="73.2571%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.0071%" y="677" width="0.0789%" height="15" fill="rgb(208,55,20)" fg:x="925" fg:w="1"/><text x="73.2571%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="73.0860%" y="709" width="0.0789%" height="15" fill="rgb(218,39,14)" fg:x="926" fg:w="1"/><text x="73.3360%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.0860%" y="693" width="0.0789%" height="15" fill="rgb(216,169,33)" fg:x="926" fg:w="1"/><text x="73.3360%" y="703.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="73.1650%" y="629" width="0.0789%" height="15" fill="rgb(233,80,24)" fg:x="927" fg:w="1"/><text x="73.4150%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.1650%" y="613" width="0.0789%" height="15" fill="rgb(213,179,31)" fg:x="927" fg:w="1"/><text x="73.4150%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.1650%" y="597" width="0.0789%" height="15" fill="rgb(209,19,5)" fg:x="927" fg:w="1"/><text x="73.4150%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.1650%" y="581" width="0.0789%" height="15" fill="rgb(219,18,35)" fg:x="927" fg:w="1"/><text x="73.4150%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.1650%" y="565" width="0.0789%" height="15" fill="rgb(209,169,16)" fg:x="927" fg:w="1"/><text x="73.4150%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.1650%" y="549" width="0.0789%" height="15" fill="rgb(245,90,51)" fg:x="927" fg:w="1"/><text x="73.4150%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.1650%" y="533" width="0.0789%" height="15" fill="rgb(220,99,45)" fg:x="927" fg:w="1"/><text x="73.4150%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.1650%" y="517" width="0.0789%" height="15" fill="rgb(249,89,25)" fg:x="927" fg:w="1"/><text x="73.4150%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.3228%" y="597" width="0.0789%" height="15" fill="rgb(239,193,0)" fg:x="929" fg:w="1"/><text x="73.5728%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.4017%" y="549" width="0.0789%" height="15" fill="rgb(231,126,1)" fg:x="930" fg:w="1"/><text x="73.6517%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.4017%" y="533" width="0.0789%" height="15" fill="rgb(243,166,3)" fg:x="930" fg:w="1"/><text x="73.6517%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.4017%" y="517" width="0.0789%" height="15" fill="rgb(223,22,34)" fg:x="930" fg:w="1"/><text x="73.6517%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="73.4017%" y="597" width="0.2368%" height="15" fill="rgb(251,52,51)" fg:x="930" fg:w="3"/><text x="73.6517%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="73.4017%" y="581" width="0.2368%" height="15" fill="rgb(221,165,28)" fg:x="930" fg:w="3"/><text x="73.6517%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="73.4017%" y="565" width="0.2368%" height="15" fill="rgb(218,121,47)" fg:x="930" fg:w="3"/><text x="73.6517%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="73.4807%" y="549" width="0.1579%" height="15" fill="rgb(209,120,9)" fg:x="931" fg:w="2"/><text x="73.7307%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="73.2439%" y="613" width="0.4736%" height="15" fill="rgb(236,68,12)" fg:x="928" fg:w="6"/><text x="73.4939%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.6385%" y="597" width="0.0789%" height="15" fill="rgb(225,194,26)" fg:x="933" fg:w="1"/><text x="73.8885%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.63%)</title><rect x="73.1650%" y="645" width="0.6314%" height="15" fill="rgb(231,84,39)" fg:x="927" fg:w="8"/><text x="73.4150%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="73.2439%" y="629" width="0.5525%" height="15" fill="rgb(210,11,45)" fg:x="928" fg:w="7"/><text x="73.4939%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.7174%" y="613" width="0.0789%" height="15" fill="rgb(224,54,52)" fg:x="934" fg:w="1"/><text x="73.9674%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.7174%" y="597" width="0.0789%" height="15" fill="rgb(238,102,14)" fg:x="934" fg:w="1"/><text x="73.9674%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.7174%" y="581" width="0.0789%" height="15" fill="rgb(243,160,52)" fg:x="934" fg:w="1"/><text x="73.9674%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.7174%" y="565" width="0.0789%" height="15" fill="rgb(216,114,19)" fg:x="934" fg:w="1"/><text x="73.9674%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.7174%" y="549" width="0.0789%" height="15" fill="rgb(244,166,37)" fg:x="934" fg:w="1"/><text x="73.9674%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.7174%" y="533" width="0.0789%" height="15" fill="rgb(246,29,44)" fg:x="934" fg:w="1"/><text x="73.9674%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.7964%" y="597" width="0.0789%" height="15" fill="rgb(215,56,53)" fg:x="935" fg:w="1"/><text x="74.0464%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="73.7964%" y="645" width="0.1579%" height="15" fill="rgb(217,60,2)" fg:x="935" fg:w="2"/><text x="74.0464%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="73.7964%" y="629" width="0.1579%" height="15" fill="rgb(207,26,24)" fg:x="935" fg:w="2"/><text x="74.0464%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="73.7964%" y="613" width="0.1579%" height="15" fill="rgb(252,210,15)" fg:x="935" fg:w="2"/><text x="74.0464%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.8753%" y="597" width="0.0789%" height="15" fill="rgb(253,209,26)" fg:x="936" fg:w="1"/><text x="74.1253%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.8753%" y="581" width="0.0789%" height="15" fill="rgb(238,170,14)" fg:x="936" fg:w="1"/><text x="74.1253%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.9542%" y="565" width="0.0789%" height="15" fill="rgb(216,178,15)" fg:x="937" fg:w="1"/><text x="74.2042%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.9542%" y="549" width="0.0789%" height="15" fill="rgb(250,197,2)" fg:x="937" fg:w="1"/><text x="74.2042%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.0331%" y="549" width="0.0789%" height="15" fill="rgb(212,70,42)" fg:x="938" fg:w="1"/><text x="74.2831%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="73.9542%" y="613" width="0.3157%" height="15" fill="rgb(227,213,9)" fg:x="937" fg:w="4"/><text x="74.2042%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="73.9542%" y="597" width="0.3157%" height="15" fill="rgb(245,99,25)" fg:x="937" fg:w="4"/><text x="74.2042%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="73.9542%" y="581" width="0.3157%" height="15" fill="rgb(250,82,29)" fg:x="937" fg:w="4"/><text x="74.2042%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.0331%" y="565" width="0.2368%" height="15" fill="rgb(241,226,54)" fg:x="938" fg:w="3"/><text x="74.2831%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.1121%" y="549" width="0.1579%" height="15" fill="rgb(221,99,41)" fg:x="939" fg:w="2"/><text x="74.3621%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.1910%" y="533" width="0.0789%" height="15" fill="rgb(213,90,21)" fg:x="940" fg:w="1"/><text x="74.4410%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.47%)</title><rect x="73.9542%" y="629" width="0.4736%" height="15" fill="rgb(205,208,24)" fg:x="937" fg:w="6"/><text x="74.2042%" y="639.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="74.2699%" y="613" width="0.1579%" height="15" fill="rgb(246,31,12)" fg:x="941" fg:w="2"/><text x="74.5199%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="74.2699%" y="597" width="0.1579%" height="15" fill="rgb(213,154,6)" fg:x="941" fg:w="2"/><text x="74.5199%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.3489%" y="581" width="0.0789%" height="15" fill="rgb(222,163,29)" fg:x="942" fg:w="1"/><text x="74.5989%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5067%" y="597" width="0.0789%" height="15" fill="rgb(227,201,8)" fg:x="944" fg:w="1"/><text x="74.7567%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5856%" y="597" width="0.0789%" height="15" fill="rgb(233,9,32)" fg:x="945" fg:w="1"/><text x="74.8356%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.5856%" y="581" width="0.0789%" height="15" fill="rgb(217,54,24)" fg:x="945" fg:w="1"/><text x="74.8356%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7435%" y="549" width="0.0789%" height="15" fill="rgb(235,192,0)" fg:x="947" fg:w="1"/><text x="74.9935%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="74.8224%" y="549" width="0.2368%" height="15" fill="rgb(235,45,9)" fg:x="948" fg:w="3"/><text x="75.0724%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="74.8224%" y="533" width="0.2368%" height="15" fill="rgb(246,42,40)" fg:x="948" fg:w="3"/><text x="75.0724%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.9803%" y="517" width="0.0789%" height="15" fill="rgb(248,111,24)" fg:x="950" fg:w="1"/><text x="75.2303%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.79%)</title><rect x="74.4278%" y="629" width="0.7893%" height="15" fill="rgb(249,65,22)" fg:x="943" fg:w="10"/><text x="74.6778%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.79%)</title><rect x="74.4278%" y="613" width="0.7893%" height="15" fill="rgb(238,111,51)" fg:x="943" fg:w="10"/><text x="74.6778%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.55%)</title><rect x="74.6646%" y="597" width="0.5525%" height="15" fill="rgb(250,118,22)" fg:x="946" fg:w="7"/><text x="74.9146%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.47%)</title><rect x="74.7435%" y="581" width="0.4736%" height="15" fill="rgb(234,84,26)" fg:x="947" fg:w="6"/><text x="74.9935%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.47%)</title><rect x="74.7435%" y="565" width="0.4736%" height="15" fill="rgb(243,172,12)" fg:x="947" fg:w="6"/><text x="74.9935%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.0592%" y="549" width="0.1579%" height="15" fill="rgb(236,150,49)" fg:x="951" fg:w="2"/><text x="75.3092%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.0592%" y="533" width="0.1579%" height="15" fill="rgb(225,197,26)" fg:x="951" fg:w="2"/><text x="75.3092%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.0592%" y="517" width="0.1579%" height="15" fill="rgb(214,17,42)" fg:x="951" fg:w="2"/><text x="75.3092%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.0592%" y="501" width="0.1579%" height="15" fill="rgb(224,165,40)" fg:x="951" fg:w="2"/><text x="75.3092%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.0592%" y="485" width="0.1579%" height="15" fill="rgb(246,100,4)" fg:x="951" fg:w="2"/><text x="75.3092%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.0592%" y="469" width="0.1579%" height="15" fill="rgb(222,103,0)" fg:x="951" fg:w="2"/><text x="75.3092%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.0592%" y="453" width="0.1579%" height="15" fill="rgb(227,189,26)" fg:x="951" fg:w="2"/><text x="75.3092%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.0592%" y="437" width="0.1579%" height="15" fill="rgb(214,202,17)" fg:x="951" fg:w="2"/><text x="75.3092%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.0592%" y="421" width="0.1579%" height="15" fill="rgb(229,111,3)" fg:x="951" fg:w="2"/><text x="75.3092%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1381%" y="405" width="0.0789%" height="15" fill="rgb(229,172,15)" fg:x="952" fg:w="1"/><text x="75.3881%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1381%" y="389" width="0.0789%" height="15" fill="rgb(230,224,35)" fg:x="952" fg:w="1"/><text x="75.3881%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.2170%" y="565" width="0.0789%" height="15" fill="rgb(251,141,6)" fg:x="953" fg:w="1"/><text x="75.4670%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.2170%" y="549" width="0.0789%" height="15" fill="rgb(225,208,6)" fg:x="953" fg:w="1"/><text x="75.4670%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.2170%" y="533" width="0.0789%" height="15" fill="rgb(246,181,16)" fg:x="953" fg:w="1"/><text x="75.4670%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2170%" y="517" width="0.0789%" height="15" fill="rgb(227,129,36)" fg:x="953" fg:w="1"/><text x="75.4670%" y="527.50"></text></g><g><title>engine::session::state::State::close (28 samples, 2.21%)</title><rect x="73.1650%" y="709" width="2.2099%" height="15" fill="rgb(248,117,24)" fg:x="927" fg:w="28"/><text x="73.4150%" y="719.50">e..</text></g><g><title>engine::session::state::State::flush_entities (28 samples, 2.21%)</title><rect x="73.1650%" y="693" width="2.2099%" height="15" fill="rgb(214,185,35)" fg:x="927" fg:w="28"/><text x="73.4150%" y="703.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (28 samples, 2.21%)</title><rect x="73.1650%" y="677" width="2.2099%" height="15" fill="rgb(236,150,34)" fg:x="927" fg:w="28"/><text x="73.4150%" y="687.50">e..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (28 samples, 2.21%)</title><rect x="73.1650%" y="661" width="2.2099%" height="15" fill="rgb(243,228,27)" fg:x="927" fg:w="28"/><text x="73.4150%" y="671.50">e..</text></g><g><title>kernel::model::any_entity_changes (18 samples, 1.42%)</title><rect x="73.9542%" y="645" width="1.4207%" height="15" fill="rgb(245,77,44)" fg:x="937" fg:w="18"/><text x="74.2042%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="75.2170%" y="629" width="0.1579%" height="15" fill="rgb(235,214,42)" fg:x="953" fg:w="2"/><text x="75.4670%" y="639.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="75.2170%" y="613" width="0.1579%" height="15" fill="rgb(221,74,3)" fg:x="953" fg:w="2"/><text x="75.4670%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.2170%" y="597" width="0.1579%" height="15" fill="rgb(206,121,29)" fg:x="953" fg:w="2"/><text x="75.4670%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.2170%" y="581" width="0.1579%" height="15" fill="rgb(249,131,53)" fg:x="953" fg:w="2"/><text x="75.4670%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.2960%" y="565" width="0.0789%" height="15" fill="rgb(236,170,29)" fg:x="954" fg:w="1"/><text x="75.5460%" y="575.50"></text></g><g><title>engine::session::Session::close (30 samples, 2.37%)</title><rect x="73.0860%" y="725" width="2.3678%" height="15" fill="rgb(247,96,15)" fg:x="926" fg:w="30"/><text x="73.3360%" y="735.50">en..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="75.3749%" y="709" width="0.0789%" height="15" fill="rgb(211,210,7)" fg:x="955" fg:w="1"/><text x="75.6249%" y="719.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::stop (1 samples, 0.08%)</title><rect x="75.3749%" y="693" width="0.0789%" height="15" fill="rgb(240,88,50)" fg:x="955" fg:w="1"/><text x="75.6249%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="75.4538%" y="613" width="0.0789%" height="15" fill="rgb(209,229,26)" fg:x="956" fg:w="1"/><text x="75.7038%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="75.5328%" y="485" width="0.0789%" height="15" fill="rgb(210,68,23)" fg:x="957" fg:w="1"/><text x="75.7828%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6117%" y="485" width="0.0789%" height="15" fill="rgb(229,180,13)" fg:x="958" fg:w="1"/><text x="75.8617%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6117%" y="469" width="0.0789%" height="15" fill="rgb(236,53,44)" fg:x="958" fg:w="1"/><text x="75.8617%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.6906%" y="437" width="0.0789%" height="15" fill="rgb(244,214,29)" fg:x="959" fg:w="1"/><text x="75.9406%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.6906%" y="421" width="0.0789%" height="15" fill="rgb(220,75,29)" fg:x="959" fg:w="1"/><text x="75.9406%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.6906%" y="405" width="0.0789%" height="15" fill="rgb(214,183,37)" fg:x="959" fg:w="1"/><text x="75.9406%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.6906%" y="389" width="0.0789%" height="15" fill="rgb(239,117,29)" fg:x="959" fg:w="1"/><text x="75.9406%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.6906%" y="373" width="0.0789%" height="15" fill="rgb(237,171,35)" fg:x="959" fg:w="1"/><text x="75.9406%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.6906%" y="357" width="0.0789%" height="15" fill="rgb(229,178,53)" fg:x="959" fg:w="1"/><text x="75.9406%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.6906%" y="341" width="0.0789%" height="15" fill="rgb(210,102,19)" fg:x="959" fg:w="1"/><text x="75.9406%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.6906%" y="325" width="0.0789%" height="15" fill="rgb(235,127,22)" fg:x="959" fg:w="1"/><text x="75.9406%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.6906%" y="309" width="0.0789%" height="15" fill="rgb(244,31,31)" fg:x="959" fg:w="1"/><text x="75.9406%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="75.5328%" y="581" width="0.3157%" height="15" fill="rgb(231,43,21)" fg:x="957" fg:w="4"/><text x="75.7828%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="75.5328%" y="565" width="0.3157%" height="15" fill="rgb(217,131,35)" fg:x="957" fg:w="4"/><text x="75.7828%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="75.5328%" y="549" width="0.3157%" height="15" fill="rgb(221,149,4)" fg:x="957" fg:w="4"/><text x="75.7828%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (4 samples, 0.32%)</title><rect x="75.5328%" y="533" width="0.3157%" height="15" fill="rgb(232,170,28)" fg:x="957" fg:w="4"/><text x="75.7828%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="75.5328%" y="517" width="0.3157%" height="15" fill="rgb(238,56,10)" fg:x="957" fg:w="4"/><text x="75.7828%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="75.5328%" y="501" width="0.3157%" height="15" fill="rgb(235,196,14)" fg:x="957" fg:w="4"/><text x="75.7828%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="75.6906%" y="485" width="0.1579%" height="15" fill="rgb(216,45,48)" fg:x="959" fg:w="2"/><text x="75.9406%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.6906%" y="469" width="0.1579%" height="15" fill="rgb(238,213,17)" fg:x="959" fg:w="2"/><text x="75.9406%" y="479.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.6906%" y="453" width="0.1579%" height="15" fill="rgb(212,13,2)" fg:x="959" fg:w="2"/><text x="75.9406%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7695%" y="437" width="0.0789%" height="15" fill="rgb(240,114,20)" fg:x="960" fg:w="1"/><text x="76.0195%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7695%" y="421" width="0.0789%" height="15" fill="rgb(228,41,40)" fg:x="960" fg:w="1"/><text x="76.0195%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.7695%" y="405" width="0.0789%" height="15" fill="rgb(244,132,35)" fg:x="960" fg:w="1"/><text x="76.0195%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7695%" y="389" width="0.0789%" height="15" fill="rgb(253,189,4)" fg:x="960" fg:w="1"/><text x="76.0195%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7695%" y="373" width="0.0789%" height="15" fill="rgb(224,37,19)" fg:x="960" fg:w="1"/><text x="76.0195%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.7695%" y="357" width="0.0789%" height="15" fill="rgb(235,223,18)" fg:x="960" fg:w="1"/><text x="76.0195%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7695%" y="341" width="0.0789%" height="15" fill="rgb(235,163,25)" fg:x="960" fg:w="1"/><text x="76.0195%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7695%" y="325" width="0.0789%" height="15" fill="rgb(217,145,28)" fg:x="960" fg:w="1"/><text x="76.0195%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.7695%" y="309" width="0.0789%" height="15" fill="rgb(223,223,32)" fg:x="960" fg:w="1"/><text x="76.0195%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7695%" y="293" width="0.0789%" height="15" fill="rgb(227,189,39)" fg:x="960" fg:w="1"/><text x="76.0195%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7695%" y="277" width="0.0789%" height="15" fill="rgb(248,10,22)" fg:x="960" fg:w="1"/><text x="76.0195%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.7695%" y="261" width="0.0789%" height="15" fill="rgb(248,46,39)" fg:x="960" fg:w="1"/><text x="76.0195%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7695%" y="245" width="0.0789%" height="15" fill="rgb(248,113,48)" fg:x="960" fg:w="1"/><text x="76.0195%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7695%" y="229" width="0.0789%" height="15" fill="rgb(245,16,25)" fg:x="960" fg:w="1"/><text x="76.0195%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.7695%" y="213" width="0.0789%" height="15" fill="rgb(249,152,16)" fg:x="960" fg:w="1"/><text x="76.0195%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.7695%" y="197" width="0.0789%" height="15" fill="rgb(250,16,1)" fg:x="960" fg:w="1"/><text x="76.0195%" y="207.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (6 samples, 0.47%)</title><rect x="75.4538%" y="629" width="0.4736%" height="15" fill="rgb(249,138,3)" fg:x="956" fg:w="6"/><text x="75.7038%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.39%)</title><rect x="75.5328%" y="613" width="0.3946%" height="15" fill="rgb(227,71,41)" fg:x="957" fg:w="5"/><text x="75.7828%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.39%)</title><rect x="75.5328%" y="597" width="0.3946%" height="15" fill="rgb(209,184,23)" fg:x="957" fg:w="5"/><text x="75.7828%" y="607.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.8485%" y="581" width="0.0789%" height="15" fill="rgb(223,215,31)" fg:x="961" fg:w="1"/><text x="76.0985%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8485%" y="565" width="0.0789%" height="15" fill="rgb(210,146,28)" fg:x="961" fg:w="1"/><text x="76.0985%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8485%" y="549" width="0.0789%" height="15" fill="rgb(209,183,41)" fg:x="961" fg:w="1"/><text x="76.0985%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.8485%" y="533" width="0.0789%" height="15" fill="rgb(209,224,45)" fg:x="961" fg:w="1"/><text x="76.0985%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.8485%" y="517" width="0.0789%" height="15" fill="rgb(224,209,51)" fg:x="961" fg:w="1"/><text x="76.0985%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.8485%" y="501" width="0.0789%" height="15" fill="rgb(223,17,39)" fg:x="961" fg:w="1"/><text x="76.0985%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.8485%" y="485" width="0.0789%" height="15" fill="rgb(234,204,37)" fg:x="961" fg:w="1"/><text x="76.0985%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.8485%" y="469" width="0.0789%" height="15" fill="rgb(236,120,5)" fg:x="961" fg:w="1"/><text x="76.0985%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.8485%" y="453" width="0.0789%" height="15" fill="rgb(248,97,27)" fg:x="961" fg:w="1"/><text x="76.0985%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.8485%" y="437" width="0.0789%" height="15" fill="rgb(240,66,17)" fg:x="961" fg:w="1"/><text x="76.0985%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.8485%" y="421" width="0.0789%" height="15" fill="rgb(210,79,3)" fg:x="961" fg:w="1"/><text x="76.0985%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.8485%" y="405" width="0.0789%" height="15" fill="rgb(214,176,27)" fg:x="961" fg:w="1"/><text x="76.0985%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.8485%" y="389" width="0.0789%" height="15" fill="rgb(235,185,3)" fg:x="961" fg:w="1"/><text x="76.0985%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.8485%" y="373" width="0.0789%" height="15" fill="rgb(227,24,12)" fg:x="961" fg:w="1"/><text x="76.0985%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.8485%" y="357" width="0.0789%" height="15" fill="rgb(252,169,48)" fg:x="961" fg:w="1"/><text x="76.0985%" y="367.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="75.9274%" y="629" width="0.0789%" height="15" fill="rgb(212,65,1)" fg:x="962" fg:w="1"/><text x="76.1774%" y="639.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="75.9274%" y="613" width="0.0789%" height="15" fill="rgb(242,39,24)" fg:x="962" fg:w="1"/><text x="76.1774%" y="623.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (8 samples, 0.63%)</title><rect x="75.4538%" y="645" width="0.6314%" height="15" fill="rgb(249,32,23)" fg:x="956" fg:w="8"/><text x="75.7038%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="76.0063%" y="629" width="0.0789%" height="15" fill="rgb(251,195,23)" fg:x="963" fg:w="1"/><text x="76.2563%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="76.0063%" y="613" width="0.0789%" height="15" fill="rgb(236,174,8)" fg:x="963" fg:w="1"/><text x="76.2563%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.0063%" y="597" width="0.0789%" height="15" fill="rgb(220,197,8)" fg:x="963" fg:w="1"/><text x="76.2563%" y="607.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.0852%" y="645" width="0.0789%" height="15" fill="rgb(240,108,37)" fg:x="964" fg:w="1"/><text x="76.3352%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1642%" y="501" width="0.0789%" height="15" fill="rgb(232,176,24)" fg:x="965" fg:w="1"/><text x="76.4142%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3220%" y="405" width="0.0789%" height="15" fill="rgb(243,35,29)" fg:x="967" fg:w="1"/><text x="76.5720%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3220%" y="389" width="0.0789%" height="15" fill="rgb(210,37,18)" fg:x="967" fg:w="1"/><text x="76.5720%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3220%" y="373" width="0.0789%" height="15" fill="rgb(224,184,40)" fg:x="967" fg:w="1"/><text x="76.5720%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.3220%" y="357" width="0.0789%" height="15" fill="rgb(236,39,29)" fg:x="967" fg:w="1"/><text x="76.5720%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.3220%" y="341" width="0.0789%" height="15" fill="rgb(232,48,39)" fg:x="967" fg:w="1"/><text x="76.5720%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.3220%" y="325" width="0.0789%" height="15" fill="rgb(236,34,42)" fg:x="967" fg:w="1"/><text x="76.5720%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.3220%" y="309" width="0.0789%" height="15" fill="rgb(243,106,37)" fg:x="967" fg:w="1"/><text x="76.5720%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.3220%" y="293" width="0.0789%" height="15" fill="rgb(218,96,6)" fg:x="967" fg:w="1"/><text x="76.5720%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="76.3220%" y="277" width="0.0789%" height="15" fill="rgb(235,130,12)" fg:x="967" fg:w="1"/><text x="76.5720%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.3220%" y="261" width="0.0789%" height="15" fill="rgb(231,95,0)" fg:x="967" fg:w="1"/><text x="76.5720%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.3220%" y="421" width="0.1579%" height="15" fill="rgb(228,12,23)" fg:x="967" fg:w="2"/><text x="76.5720%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.4009%" y="405" width="0.0789%" height="15" fill="rgb(216,12,1)" fg:x="968" fg:w="1"/><text x="76.6509%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.4799%" y="325" width="0.0789%" height="15" fill="rgb(219,59,3)" fg:x="969" fg:w="1"/><text x="76.7299%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="76.3220%" y="469" width="0.3157%" height="15" fill="rgb(215,208,46)" fg:x="967" fg:w="4"/><text x="76.5720%" y="479.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="76.3220%" y="453" width="0.3157%" height="15" fill="rgb(254,224,29)" fg:x="967" fg:w="4"/><text x="76.5720%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="76.3220%" y="437" width="0.3157%" height="15" fill="rgb(232,14,29)" fg:x="967" fg:w="4"/><text x="76.5720%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.4799%" y="421" width="0.1579%" height="15" fill="rgb(208,45,52)" fg:x="969" fg:w="2"/><text x="76.7299%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.4799%" y="405" width="0.1579%" height="15" fill="rgb(234,191,28)" fg:x="969" fg:w="2"/><text x="76.7299%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.4799%" y="389" width="0.1579%" height="15" fill="rgb(244,67,43)" fg:x="969" fg:w="2"/><text x="76.7299%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.4799%" y="373" width="0.1579%" height="15" fill="rgb(236,189,24)" fg:x="969" fg:w="2"/><text x="76.7299%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="76.4799%" y="357" width="0.1579%" height="15" fill="rgb(239,214,33)" fg:x="969" fg:w="2"/><text x="76.7299%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.4799%" y="341" width="0.1579%" height="15" fill="rgb(226,176,41)" fg:x="969" fg:w="2"/><text x="76.7299%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.5588%" y="325" width="0.0789%" height="15" fill="rgb(248,47,8)" fg:x="970" fg:w="1"/><text x="76.8088%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.5588%" y="309" width="0.0789%" height="15" fill="rgb(218,81,44)" fg:x="970" fg:w="1"/><text x="76.8088%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.5588%" y="293" width="0.0789%" height="15" fill="rgb(213,98,6)" fg:x="970" fg:w="1"/><text x="76.8088%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.5588%" y="277" width="0.0789%" height="15" fill="rgb(222,85,22)" fg:x="970" fg:w="1"/><text x="76.8088%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.5588%" y="261" width="0.0789%" height="15" fill="rgb(239,46,39)" fg:x="970" fg:w="1"/><text x="76.8088%" y="271.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="76.6377%" y="453" width="0.0789%" height="15" fill="rgb(237,12,29)" fg:x="971" fg:w="1"/><text x="76.8877%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="76.6377%" y="469" width="0.2368%" height="15" fill="rgb(214,77,8)" fg:x="971" fg:w="3"/><text x="76.8877%" y="479.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="76.7167%" y="453" width="0.1579%" height="15" fill="rgb(217,168,37)" fg:x="972" fg:w="2"/><text x="76.9667%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="76.7167%" y="437" width="0.1579%" height="15" fill="rgb(221,217,23)" fg:x="972" fg:w="2"/><text x="76.9667%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.7956%" y="421" width="0.0789%" height="15" fill="rgb(243,229,36)" fg:x="973" fg:w="1"/><text x="77.0456%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.7956%" y="405" width="0.0789%" height="15" fill="rgb(251,163,40)" fg:x="973" fg:w="1"/><text x="77.0456%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.7956%" y="389" width="0.0789%" height="15" fill="rgb(237,222,12)" fg:x="973" fg:w="1"/><text x="77.0456%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.7956%" y="373" width="0.0789%" height="15" fill="rgb(248,132,6)" fg:x="973" fg:w="1"/><text x="77.0456%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.7956%" y="357" width="0.0789%" height="15" fill="rgb(227,167,50)" fg:x="973" fg:w="1"/><text x="77.0456%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7956%" y="341" width="0.0789%" height="15" fill="rgb(242,84,37)" fg:x="973" fg:w="1"/><text x="77.0456%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="76.8745%" y="469" width="0.0789%" height="15" fill="rgb(212,4,50)" fg:x="974" fg:w="1"/><text x="77.1245%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.8745%" y="453" width="0.0789%" height="15" fill="rgb(230,228,32)" fg:x="974" fg:w="1"/><text x="77.1245%" y="463.50"></text></g><g><title>kernel::model::base::Kind::new (1 samples, 0.08%)</title><rect x="76.8745%" y="437" width="0.0789%" height="15" fill="rgb(248,217,23)" fg:x="974" fg:w="1"/><text x="77.1245%" y="447.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="76.9534%" y="325" width="0.1579%" height="15" fill="rgb(238,197,32)" fg:x="975" fg:w="2"/><text x="77.2034%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="76.9534%" y="309" width="0.1579%" height="15" fill="rgb(236,106,1)" fg:x="975" fg:w="2"/><text x="77.2034%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="77.1113%" y="309" width="0.0789%" height="15" fill="rgb(219,228,13)" fg:x="977" fg:w="1"/><text x="77.3613%" y="319.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="77.1113%" y="293" width="0.0789%" height="15" fill="rgb(238,30,35)" fg:x="977" fg:w="1"/><text x="77.3613%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="76.9534%" y="389" width="0.3157%" height="15" fill="rgb(236,70,23)" fg:x="975" fg:w="4"/><text x="77.2034%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="76.9534%" y="373" width="0.3157%" height="15" fill="rgb(249,104,48)" fg:x="975" fg:w="4"/><text x="77.2034%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="76.9534%" y="357" width="0.3157%" height="15" fill="rgb(254,117,50)" fg:x="975" fg:w="4"/><text x="77.2034%" y="367.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="76.9534%" y="341" width="0.3157%" height="15" fill="rgb(223,152,4)" fg:x="975" fg:w="4"/><text x="77.2034%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="77.1113%" y="325" width="0.1579%" height="15" fill="rgb(245,6,2)" fg:x="977" fg:w="2"/><text x="77.3613%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="77.1902%" y="309" width="0.0789%" height="15" fill="rgb(249,150,24)" fg:x="978" fg:w="1"/><text x="77.4402%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="77.1902%" y="293" width="0.0789%" height="15" fill="rgb(228,185,42)" fg:x="978" fg:w="1"/><text x="77.4402%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.1902%" y="277" width="0.0789%" height="15" fill="rgb(226,39,33)" fg:x="978" fg:w="1"/><text x="77.4402%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.1902%" y="261" width="0.0789%" height="15" fill="rgb(221,166,19)" fg:x="978" fg:w="1"/><text x="77.4402%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="77.1902%" y="245" width="0.0789%" height="15" fill="rgb(209,109,2)" fg:x="978" fg:w="1"/><text x="77.4402%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="77.1902%" y="229" width="0.0789%" height="15" fill="rgb(252,216,26)" fg:x="978" fg:w="1"/><text x="77.4402%" y="239.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="77.2691%" y="389" width="0.0789%" height="15" fill="rgb(227,173,36)" fg:x="979" fg:w="1"/><text x="77.5191%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (1 samples, 0.08%)</title><rect x="77.3481%" y="389" width="0.0789%" height="15" fill="rgb(209,90,7)" fg:x="980" fg:w="1"/><text x="77.5981%" y="399.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="77.6638%" y="309" width="0.2368%" height="15" fill="rgb(250,194,11)" fg:x="984" fg:w="3"/><text x="77.9138%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.95%)</title><rect x="77.5848%" y="325" width="0.9471%" height="15" fill="rgb(220,72,50)" fg:x="983" fg:w="12"/><text x="77.8348%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.63%)</title><rect x="77.9006%" y="309" width="0.6314%" height="15" fill="rgb(222,106,48)" fg:x="987" fg:w="8"/><text x="78.1506%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.4530%" y="293" width="0.0789%" height="15" fill="rgb(216,220,45)" fg:x="994" fg:w="1"/><text x="78.7030%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="78.5320%" y="325" width="0.0789%" height="15" fill="rgb(234,112,18)" fg:x="995" fg:w="1"/><text x="78.7820%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="78.5320%" y="309" width="0.0789%" height="15" fill="rgb(206,179,9)" fg:x="995" fg:w="1"/><text x="78.7820%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="78.5320%" y="293" width="0.0789%" height="15" fill="rgb(215,115,40)" fg:x="995" fg:w="1"/><text x="78.7820%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="78.5320%" y="277" width="0.0789%" height="15" fill="rgb(222,69,34)" fg:x="995" fg:w="1"/><text x="78.7820%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="78.6109%" y="325" width="0.0789%" height="15" fill="rgb(209,161,10)" fg:x="996" fg:w="1"/><text x="78.8609%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="78.6109%" y="309" width="0.0789%" height="15" fill="rgb(217,6,38)" fg:x="996" fg:w="1"/><text x="78.8609%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="78.6109%" y="293" width="0.0789%" height="15" fill="rgb(229,229,48)" fg:x="996" fg:w="1"/><text x="78.8609%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.6109%" y="277" width="0.0789%" height="15" fill="rgb(225,21,28)" fg:x="996" fg:w="1"/><text x="78.8609%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.8477%" y="261" width="0.0789%" height="15" fill="rgb(206,33,13)" fg:x="999" fg:w="1"/><text x="79.0977%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="78.9266%" y="261" width="0.0789%" height="15" fill="rgb(242,178,17)" fg:x="1000" fg:w="1"/><text x="79.1766%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.9266%" y="245" width="0.0789%" height="15" fill="rgb(220,162,5)" fg:x="1000" fg:w="1"/><text x="79.1766%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.9266%" y="229" width="0.0789%" height="15" fill="rgb(210,33,43)" fg:x="1000" fg:w="1"/><text x="79.1766%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.9266%" y="213" width="0.0789%" height="15" fill="rgb(216,116,54)" fg:x="1000" fg:w="1"/><text x="79.1766%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="79.0055%" y="261" width="0.1579%" height="15" fill="rgb(249,92,24)" fg:x="1001" fg:w="2"/><text x="79.2555%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="79.0055%" y="245" width="0.1579%" height="15" fill="rgb(231,189,14)" fg:x="1001" fg:w="2"/><text x="79.2555%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="79.0845%" y="229" width="0.0789%" height="15" fill="rgb(230,8,41)" fg:x="1002" fg:w="1"/><text x="79.3345%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="79.1634%" y="261" width="0.0789%" height="15" fill="rgb(249,7,27)" fg:x="1003" fg:w="1"/><text x="79.4134%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="79.1634%" y="245" width="0.0789%" height="15" fill="rgb(232,86,5)" fg:x="1003" fg:w="1"/><text x="79.4134%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (48 samples, 3.79%)</title><rect x="79.2423%" y="261" width="3.7885%" height="15" fill="rgb(224,175,18)" fg:x="1004" fg:w="48"/><text x="79.4923%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (48 samples, 3.79%)</title><rect x="79.2423%" y="245" width="3.7885%" height="15" fill="rgb(220,129,12)" fg:x="1004" fg:w="48"/><text x="79.4923%" y="255.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (48 samples, 3.79%)</title><rect x="79.2423%" y="229" width="3.7885%" height="15" fill="rgb(210,19,36)" fg:x="1004" fg:w="48"/><text x="79.4923%" y="239.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.47%)</title><rect x="83.0308%" y="261" width="0.4736%" height="15" fill="rgb(219,96,14)" fg:x="1052" fg:w="6"/><text x="83.2808%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 4.89%)</title><rect x="78.6898%" y="309" width="4.8934%" height="15" fill="rgb(249,106,1)" fg:x="997" fg:w="62"/><text x="78.9398%" y="319.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (62 samples, 4.89%)</title><rect x="78.6898%" y="293" width="4.8934%" height="15" fill="rgb(249,155,20)" fg:x="997" fg:w="62"/><text x="78.9398%" y="303.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (62 samples, 4.89%)</title><rect x="78.6898%" y="277" width="4.8934%" height="15" fill="rgb(244,168,9)" fg:x="997" fg:w="62"/><text x="78.9398%" y="287.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="83.5043%" y="261" width="0.0789%" height="15" fill="rgb(216,23,50)" fg:x="1058" fg:w="1"/><text x="83.7543%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="83.6622%" y="293" width="0.1579%" height="15" fill="rgb(224,219,20)" fg:x="1060" fg:w="2"/><text x="83.9122%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="83.8200%" y="293" width="0.1579%" height="15" fill="rgb(222,156,15)" fg:x="1062" fg:w="2"/><text x="84.0700%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.8990%" y="277" width="0.0789%" height="15" fill="rgb(231,97,17)" fg:x="1063" fg:w="1"/><text x="84.1490%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.8990%" y="261" width="0.0789%" height="15" fill="rgb(218,70,48)" fg:x="1063" fg:w="1"/><text x="84.1490%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.8990%" y="245" width="0.0789%" height="15" fill="rgb(212,196,52)" fg:x="1063" fg:w="1"/><text x="84.1490%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="83.9779%" y="293" width="0.0789%" height="15" fill="rgb(243,203,18)" fg:x="1064" fg:w="1"/><text x="84.2279%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.55%)</title><rect x="83.5833%" y="309" width="0.5525%" height="15" fill="rgb(252,125,41)" fg:x="1059" fg:w="7"/><text x="83.8333%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="84.0568%" y="293" width="0.0789%" height="15" fill="rgb(223,180,33)" fg:x="1065" fg:w="1"/><text x="84.3068%" y="303.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::fixup_slot_ranges (1 samples, 0.08%)</title><rect x="84.0568%" y="277" width="0.0789%" height="15" fill="rgb(254,159,46)" fg:x="1065" fg:w="1"/><text x="84.3068%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="84.1358%" y="309" width="0.0789%" height="15" fill="rgb(254,38,10)" fg:x="1066" fg:w="1"/><text x="84.3858%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="84.1358%" y="293" width="0.0789%" height="15" fill="rgb(208,217,32)" fg:x="1066" fg:w="1"/><text x="84.3858%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.1358%" y="277" width="0.0789%" height="15" fill="rgb(221,120,13)" fg:x="1066" fg:w="1"/><text x="84.3858%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.1358%" y="261" width="0.0789%" height="15" fill="rgb(246,54,52)" fg:x="1066" fg:w="1"/><text x="84.3858%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.1358%" y="245" width="0.0789%" height="15" fill="rgb(242,34,25)" fg:x="1066" fg:w="1"/><text x="84.3858%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (88 samples, 6.95%)</title><rect x="77.4270%" y="341" width="6.9455%" height="15" fill="rgb(247,209,9)" fg:x="981" fg:w="88"/><text x="77.6770%" y="351.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (72 samples, 5.68%)</title><rect x="78.6898%" y="325" width="5.6827%" height="15" fill="rgb(228,71,26)" fg:x="997" fg:w="72"/><text x="78.9398%" y="335.50">regex_a..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="84.2147%" y="309" width="0.1579%" height="15" fill="rgb(222,145,49)" fg:x="1067" fg:w="2"/><text x="84.4647%" y="319.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="84.2936%" y="293" width="0.0789%" height="15" fill="rgb(218,121,17)" fg:x="1068" fg:w="1"/><text x="84.5436%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.2936%" y="277" width="0.0789%" height="15" fill="rgb(244,50,7)" fg:x="1068" fg:w="1"/><text x="84.5436%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.2936%" y="261" width="0.0789%" height="15" fill="rgb(246,229,37)" fg:x="1068" fg:w="1"/><text x="84.5436%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.2936%" y="245" width="0.0789%" height="15" fill="rgb(225,18,5)" fg:x="1068" fg:w="1"/><text x="84.5436%" y="255.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="84.4515%" y="293" width="0.0789%" height="15" fill="rgb(213,204,8)" fg:x="1070" fg:w="1"/><text x="84.7015%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="84.5304%" y="293" width="0.0789%" height="15" fill="rgb(238,103,6)" fg:x="1071" fg:w="1"/><text x="84.7804%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="84.5304%" y="277" width="0.0789%" height="15" fill="rgb(222,25,35)" fg:x="1071" fg:w="1"/><text x="84.7804%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="84.3725%" y="341" width="0.3157%" height="15" fill="rgb(213,203,35)" fg:x="1069" fg:w="4"/><text x="84.6225%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="84.3725%" y="325" width="0.3157%" height="15" fill="rgb(221,79,53)" fg:x="1069" fg:w="4"/><text x="84.6225%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="84.4515%" y="309" width="0.2368%" height="15" fill="rgb(243,200,35)" fg:x="1070" fg:w="3"/><text x="84.7015%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="84.6093%" y="293" width="0.0789%" height="15" fill="rgb(248,60,25)" fg:x="1072" fg:w="1"/><text x="84.8593%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.6093%" y="277" width="0.0789%" height="15" fill="rgb(227,53,46)" fg:x="1072" fg:w="1"/><text x="84.8593%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.6093%" y="261" width="0.0789%" height="15" fill="rgb(216,120,32)" fg:x="1072" fg:w="1"/><text x="84.8593%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.6093%" y="245" width="0.0789%" height="15" fill="rgb(220,134,1)" fg:x="1072" fg:w="1"/><text x="84.8593%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (94 samples, 7.42%)</title><rect x="77.4270%" y="389" width="7.4191%" height="15" fill="rgb(237,168,5)" fg:x="981" fg:w="94"/><text x="77.6770%" y="399.50">regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (94 samples, 7.42%)</title><rect x="77.4270%" y="373" width="7.4191%" height="15" fill="rgb(231,100,33)" fg:x="981" fg:w="94"/><text x="77.6770%" y="383.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (94 samples, 7.42%)</title><rect x="77.4270%" y="357" width="7.4191%" height="15" fill="rgb(236,177,47)" fg:x="981" fg:w="94"/><text x="77.6770%" y="367.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="84.6882%" y="341" width="0.1579%" height="15" fill="rgb(235,7,49)" fg:x="1073" fg:w="2"/><text x="84.9382%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="84.7672%" y="325" width="0.0789%" height="15" fill="rgb(232,119,22)" fg:x="1074" fg:w="1"/><text x="85.0172%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="84.7672%" y="309" width="0.0789%" height="15" fill="rgb(254,73,53)" fg:x="1074" fg:w="1"/><text x="85.0172%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.7672%" y="293" width="0.0789%" height="15" fill="rgb(251,35,20)" fg:x="1074" fg:w="1"/><text x="85.0172%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.7672%" y="277" width="0.0789%" height="15" fill="rgb(241,119,20)" fg:x="1074" fg:w="1"/><text x="85.0172%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.9250%" y="309" width="0.0789%" height="15" fill="rgb(207,102,14)" fg:x="1076" fg:w="1"/><text x="85.1750%" y="319.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (103 samples, 8.13%)</title><rect x="76.9534%" y="405" width="8.1294%" height="15" fill="rgb(248,201,50)" fg:x="975" fg:w="103"/><text x="77.2034%" y="415.50">indefinite:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="84.8461%" y="389" width="0.2368%" height="15" fill="rgb(222,185,44)" fg:x="1075" fg:w="3"/><text x="85.0961%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="84.8461%" y="373" width="0.2368%" height="15" fill="rgb(218,107,18)" fg:x="1075" fg:w="3"/><text x="85.0961%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="84.8461%" y="357" width="0.2368%" height="15" fill="rgb(237,177,39)" fg:x="1075" fg:w="3"/><text x="85.0961%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="84.8461%" y="341" width="0.2368%" height="15" fill="rgb(246,69,6)" fg:x="1075" fg:w="3"/><text x="85.0961%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="84.8461%" y="325" width="0.2368%" height="15" fill="rgb(234,208,37)" fg:x="1075" fg:w="3"/><text x="85.0961%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="85.0039%" y="309" width="0.0789%" height="15" fill="rgb(225,4,6)" fg:x="1077" fg:w="1"/><text x="85.2539%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.0829%" y="373" width="0.0789%" height="15" fill="rgb(233,45,0)" fg:x="1078" fg:w="1"/><text x="85.3329%" y="383.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="85.1618%" y="325" width="0.1579%" height="15" fill="rgb(226,136,5)" fg:x="1079" fg:w="2"/><text x="85.4118%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="85.1618%" y="357" width="0.2368%" height="15" fill="rgb(211,91,47)" fg:x="1079" fg:w="3"/><text x="85.4118%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="85.1618%" y="341" width="0.2368%" height="15" fill="rgb(242,88,51)" fg:x="1079" fg:w="3"/><text x="85.4118%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.3197%" y="325" width="0.0789%" height="15" fill="rgb(230,91,28)" fg:x="1081" fg:w="1"/><text x="85.5697%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.3986%" y="325" width="0.0789%" height="15" fill="rgb(254,186,29)" fg:x="1082" fg:w="1"/><text x="85.6486%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.3986%" y="309" width="0.0789%" height="15" fill="rgb(238,6,4)" fg:x="1082" fg:w="1"/><text x="85.6486%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.47%)</title><rect x="85.0829%" y="389" width="0.4736%" height="15" fill="rgb(221,151,16)" fg:x="1078" fg:w="6"/><text x="85.3329%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.39%)</title><rect x="85.1618%" y="373" width="0.3946%" height="15" fill="rgb(251,143,52)" fg:x="1079" fg:w="5"/><text x="85.4118%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="85.3986%" y="357" width="0.1579%" height="15" fill="rgb(206,90,15)" fg:x="1082" fg:w="2"/><text x="85.6486%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="85.3986%" y="341" width="0.1579%" height="15" fill="rgb(218,35,8)" fg:x="1082" fg:w="2"/><text x="85.6486%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.4775%" y="325" width="0.0789%" height="15" fill="rgb(239,215,6)" fg:x="1083" fg:w="1"/><text x="85.7275%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="85.5564%" y="373" width="0.0789%" height="15" fill="rgb(245,116,39)" fg:x="1084" fg:w="1"/><text x="85.8064%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="85.5564%" y="357" width="0.0789%" height="15" fill="rgb(242,65,28)" fg:x="1084" fg:w="1"/><text x="85.8064%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="85.5564%" y="341" width="0.0789%" height="15" fill="rgb(252,132,53)" fg:x="1084" fg:w="1"/><text x="85.8064%" y="351.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="85.5564%" y="325" width="0.0789%" height="15" fill="rgb(224,159,50)" fg:x="1084" fg:w="1"/><text x="85.8064%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="85.9511%" y="293" width="0.1579%" height="15" fill="rgb(224,93,4)" fg:x="1089" fg:w="2"/><text x="86.2011%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.9511%" y="277" width="0.1579%" height="15" fill="rgb(208,81,34)" fg:x="1089" fg:w="2"/><text x="86.2011%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="85.9511%" y="261" width="0.1579%" height="15" fill="rgb(233,92,54)" fg:x="1089" fg:w="2"/><text x="86.2011%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.71%)</title><rect x="85.6354%" y="325" width="0.7103%" height="15" fill="rgb(237,21,14)" fg:x="1085" fg:w="9"/><text x="85.8854%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.71%)</title><rect x="85.6354%" y="309" width="0.7103%" height="15" fill="rgb(249,128,51)" fg:x="1085" fg:w="9"/><text x="85.8854%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="86.1089%" y="293" width="0.2368%" height="15" fill="rgb(223,129,24)" fg:x="1091" fg:w="3"/><text x="86.3589%" y="303.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (11 samples, 0.87%)</title><rect x="85.5564%" y="389" width="0.8682%" height="15" fill="rgb(231,168,25)" fg:x="1084" fg:w="11"/><text x="85.8064%" y="399.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.79%)</title><rect x="85.6354%" y="373" width="0.7893%" height="15" fill="rgb(224,39,20)" fg:x="1085" fg:w="10"/><text x="85.8854%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.79%)</title><rect x="85.6354%" y="357" width="0.7893%" height="15" fill="rgb(225,152,53)" fg:x="1085" fg:w="10"/><text x="85.8854%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.79%)</title><rect x="85.6354%" y="341" width="0.7893%" height="15" fill="rgb(252,17,24)" fg:x="1085" fg:w="10"/><text x="85.8854%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="86.3457%" y="325" width="0.0789%" height="15" fill="rgb(250,114,30)" fg:x="1094" fg:w="1"/><text x="86.5957%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="86.3457%" y="309" width="0.0789%" height="15" fill="rgb(229,5,4)" fg:x="1094" fg:w="1"/><text x="86.5957%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.4246%" y="341" width="0.0789%" height="15" fill="rgb(225,176,49)" fg:x="1095" fg:w="1"/><text x="86.6746%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.4246%" y="325" width="0.0789%" height="15" fill="rgb(224,221,49)" fg:x="1095" fg:w="1"/><text x="86.6746%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.4246%" y="309" width="0.0789%" height="15" fill="rgb(253,169,27)" fg:x="1095" fg:w="1"/><text x="86.6746%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.4246%" y="293" width="0.0789%" height="15" fill="rgb(211,206,16)" fg:x="1095" fg:w="1"/><text x="86.6746%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.4246%" y="277" width="0.0789%" height="15" fill="rgb(244,87,35)" fg:x="1095" fg:w="1"/><text x="86.6746%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.4246%" y="261" width="0.0789%" height="15" fill="rgb(246,28,10)" fg:x="1095" fg:w="1"/><text x="86.6746%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="86.5036%" y="341" width="0.0789%" height="15" fill="rgb(229,12,44)" fg:x="1096" fg:w="1"/><text x="86.7536%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.5036%" y="325" width="0.0789%" height="15" fill="rgb(210,145,37)" fg:x="1096" fg:w="1"/><text x="86.7536%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.5036%" y="309" width="0.0789%" height="15" fill="rgb(227,112,52)" fg:x="1096" fg:w="1"/><text x="86.7536%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.10%)</title><rect x="86.7403%" y="325" width="1.1050%" height="15" fill="rgb(238,155,34)" fg:x="1099" fg:w="14"/><text x="86.9903%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.10%)</title><rect x="86.7403%" y="309" width="1.1050%" height="15" fill="rgb(239,226,36)" fg:x="1099" fg:w="14"/><text x="86.9903%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.7664%" y="293" width="0.0789%" height="15" fill="rgb(230,16,23)" fg:x="1112" fg:w="1"/><text x="88.0164%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="87.8453%" y="325" width="0.1579%" height="15" fill="rgb(236,171,36)" fg:x="1113" fg:w="2"/><text x="88.0953%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="87.8453%" y="309" width="0.1579%" height="15" fill="rgb(221,22,14)" fg:x="1113" fg:w="2"/><text x="88.0953%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="87.9242%" y="293" width="0.0789%" height="15" fill="rgb(242,43,11)" fg:x="1114" fg:w="1"/><text x="88.1742%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.1610%" y="293" width="0.0789%" height="15" fill="rgb(232,69,23)" fg:x="1117" fg:w="1"/><text x="88.4110%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.1610%" y="277" width="0.0789%" height="15" fill="rgb(216,180,54)" fg:x="1117" fg:w="1"/><text x="88.4110%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.1610%" y="261" width="0.0789%" height="15" fill="rgb(216,5,24)" fg:x="1117" fg:w="1"/><text x="88.4110%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="88.2399%" y="293" width="0.3157%" height="15" fill="rgb(225,89,9)" fg:x="1118" fg:w="4"/><text x="88.4899%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="88.4767%" y="277" width="0.0789%" height="15" fill="rgb(243,75,33)" fg:x="1121" fg:w="1"/><text x="88.7267%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="88.5556%" y="277" width="0.2368%" height="15" fill="rgb(247,141,45)" fg:x="1122" fg:w="3"/><text x="88.8056%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="88.5556%" y="261" width="0.2368%" height="15" fill="rgb(232,177,36)" fg:x="1122" fg:w="3"/><text x="88.8056%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (11 samples, 0.87%)</title><rect x="88.0032%" y="325" width="0.8682%" height="15" fill="rgb(219,125,36)" fg:x="1115" fg:w="11"/><text x="88.2532%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.87%)</title><rect x="88.0032%" y="309" width="0.8682%" height="15" fill="rgb(227,94,9)" fg:x="1115" fg:w="11"/><text x="88.2532%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="88.5556%" y="293" width="0.3157%" height="15" fill="rgb(240,34,52)" fg:x="1122" fg:w="4"/><text x="88.8056%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="88.7924%" y="277" width="0.0789%" height="15" fill="rgb(216,45,12)" fg:x="1125" fg:w="1"/><text x="89.0424%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="88.8713%" y="325" width="0.0789%" height="15" fill="rgb(246,21,19)" fg:x="1126" fg:w="1"/><text x="89.1213%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="88.8713%" y="309" width="0.0789%" height="15" fill="rgb(213,98,42)" fg:x="1126" fg:w="1"/><text x="89.1213%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="88.8713%" y="293" width="0.0789%" height="15" fill="rgb(250,136,47)" fg:x="1126" fg:w="1"/><text x="89.1213%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="88.8713%" y="277" width="0.0789%" height="15" fill="rgb(251,124,27)" fg:x="1126" fg:w="1"/><text x="89.1213%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="88.9503%" y="245" width="0.0789%" height="15" fill="rgb(229,180,14)" fg:x="1127" fg:w="1"/><text x="89.2003%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="89.5028%" y="213" width="0.2368%" height="15" fill="rgb(245,216,25)" fg:x="1134" fg:w="3"/><text x="89.7528%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="89.7395%" y="213" width="0.1579%" height="15" fill="rgb(251,43,5)" fg:x="1137" fg:w="2"/><text x="89.9895%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.8185%" y="197" width="0.0789%" height="15" fill="rgb(250,128,24)" fg:x="1138" fg:w="1"/><text x="90.0685%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.8185%" y="181" width="0.0789%" height="15" fill="rgb(217,117,27)" fg:x="1138" fg:w="1"/><text x="90.0685%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.8185%" y="165" width="0.0789%" height="15" fill="rgb(245,147,4)" fg:x="1138" fg:w="1"/><text x="90.0685%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="89.8974%" y="213" width="0.1579%" height="15" fill="rgb(242,201,35)" fg:x="1139" fg:w="2"/><text x="90.1474%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.9763%" y="197" width="0.0789%" height="15" fill="rgb(218,181,1)" fg:x="1140" fg:w="1"/><text x="90.2263%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.9763%" y="181" width="0.0789%" height="15" fill="rgb(222,6,29)" fg:x="1140" fg:w="1"/><text x="90.2263%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.9763%" y="165" width="0.0789%" height="15" fill="rgb(208,186,3)" fg:x="1140" fg:w="1"/><text x="90.2263%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.3710%" y="181" width="0.1579%" height="15" fill="rgb(216,36,26)" fg:x="1145" fg:w="2"/><text x="90.6210%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.4499%" y="165" width="0.0789%" height="15" fill="rgb(248,201,23)" fg:x="1146" fg:w="1"/><text x="90.6999%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.4499%" y="149" width="0.0789%" height="15" fill="rgb(251,170,31)" fg:x="1146" fg:w="1"/><text x="90.6999%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.71%)</title><rect x="90.0552%" y="213" width="0.7103%" height="15" fill="rgb(207,110,25)" fg:x="1141" fg:w="9"/><text x="90.3052%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.47%)</title><rect x="90.2920%" y="197" width="0.4736%" height="15" fill="rgb(250,54,15)" fg:x="1144" fg:w="6"/><text x="90.5420%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="90.5288%" y="181" width="0.2368%" height="15" fill="rgb(227,68,33)" fg:x="1147" fg:w="3"/><text x="90.7788%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.6867%" y="165" width="0.0789%" height="15" fill="rgb(238,34,41)" fg:x="1149" fg:w="1"/><text x="90.9367%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.6867%" y="149" width="0.0789%" height="15" fill="rgb(220,11,15)" fg:x="1149" fg:w="1"/><text x="90.9367%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.6867%" y="133" width="0.0789%" height="15" fill="rgb(246,111,35)" fg:x="1149" fg:w="1"/><text x="90.9367%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.6867%" y="117" width="0.0789%" height="15" fill="rgb(209,88,53)" fg:x="1149" fg:w="1"/><text x="90.9367%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (44 samples, 3.47%)</title><rect x="90.7656%" y="213" width="3.4728%" height="15" fill="rgb(231,185,47)" fg:x="1150" fg:w="44"/><text x="91.0156%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (44 samples, 3.47%)</title><rect x="90.7656%" y="197" width="3.4728%" height="15" fill="rgb(233,154,1)" fg:x="1150" fg:w="44"/><text x="91.0156%" y="207.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (44 samples, 3.47%)</title><rect x="90.7656%" y="181" width="3.4728%" height="15" fill="rgb(225,15,46)" fg:x="1150" fg:w="44"/><text x="91.0156%" y="191.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.39%)</title><rect x="94.2384%" y="213" width="0.3946%" height="15" fill="rgb(211,135,41)" fg:x="1194" fg:w="5"/><text x="94.4884%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 5.84%)</title><rect x="88.9503%" y="309" width="5.8406%" height="15" fill="rgb(208,54,0)" fg:x="1127" fg:w="74"/><text x="89.2003%" y="319.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (74 samples, 5.84%)</title><rect x="88.9503%" y="293" width="5.8406%" height="15" fill="rgb(244,136,14)" fg:x="1127" fg:w="74"/><text x="89.2003%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (74 samples, 5.84%)</title><rect x="88.9503%" y="277" width="5.8406%" height="15" fill="rgb(241,56,14)" fg:x="1127" fg:w="74"/><text x="89.2003%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (74 samples, 5.84%)</title><rect x="88.9503%" y="261" width="5.8406%" height="15" fill="rgb(205,80,24)" fg:x="1127" fg:w="74"/><text x="89.2003%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (73 samples, 5.76%)</title><rect x="89.0292%" y="245" width="5.7616%" height="15" fill="rgb(220,57,4)" fg:x="1128" fg:w="73"/><text x="89.2792%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (73 samples, 5.76%)</title><rect x="89.0292%" y="229" width="5.7616%" height="15" fill="rgb(226,193,50)" fg:x="1128" fg:w="73"/><text x="89.2792%" y="239.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="94.6330%" y="213" width="0.1579%" height="15" fill="rgb(231,168,22)" fg:x="1199" fg:w="2"/><text x="94.8830%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.7119%" y="197" width="0.0789%" height="15" fill="rgb(254,215,14)" fg:x="1200" fg:w="1"/><text x="94.9619%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7119%" y="181" width="0.0789%" height="15" fill="rgb(211,115,16)" fg:x="1200" fg:w="1"/><text x="94.9619%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="94.9487%" y="293" width="0.3157%" height="15" fill="rgb(236,210,16)" fg:x="1203" fg:w="4"/><text x="95.1987%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="95.0276%" y="277" width="0.2368%" height="15" fill="rgb(221,94,12)" fg:x="1204" fg:w="3"/><text x="95.2776%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="95.0276%" y="261" width="0.2368%" height="15" fill="rgb(235,218,49)" fg:x="1204" fg:w="3"/><text x="95.2776%" y="271.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="95.0276%" y="245" width="0.2368%" height="15" fill="rgb(217,114,14)" fg:x="1204" fg:w="3"/><text x="95.2776%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="95.2644%" y="293" width="0.2368%" height="15" fill="rgb(216,145,22)" fg:x="1207" fg:w="3"/><text x="95.5144%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (115 samples, 9.08%)</title><rect x="86.5825%" y="341" width="9.0766%" height="15" fill="rgb(217,112,39)" fg:x="1097" fg:w="115"/><text x="86.8325%" y="351.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (85 samples, 6.71%)</title><rect x="88.9503%" y="325" width="6.7088%" height="15" fill="rgb(225,85,32)" fg:x="1127" fg:w="85"/><text x="89.2003%" y="335.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.87%)</title><rect x="94.7908%" y="309" width="0.8682%" height="15" fill="rgb(245,209,47)" fg:x="1201" fg:w="11"/><text x="95.0408%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="95.5012%" y="293" width="0.1579%" height="15" fill="rgb(218,220,15)" fg:x="1210" fg:w="2"/><text x="95.7512%" y="303.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="95.5012%" y="277" width="0.1579%" height="15" fill="rgb(222,202,31)" fg:x="1210" fg:w="2"/><text x="95.7512%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.5801%" y="261" width="0.0789%" height="15" fill="rgb(243,203,4)" fg:x="1211" fg:w="1"/><text x="95.8301%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="95.6590%" y="341" width="0.0789%" height="15" fill="rgb(237,92,17)" fg:x="1212" fg:w="1"/><text x="95.9090%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="95.6590%" y="325" width="0.0789%" height="15" fill="rgb(231,119,7)" fg:x="1212" fg:w="1"/><text x="95.9090%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.6590%" y="309" width="0.0789%" height="15" fill="rgb(237,82,41)" fg:x="1212" fg:w="1"/><text x="95.9090%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (136 samples, 10.73%)</title><rect x="85.0829%" y="405" width="10.7340%" height="15" fill="rgb(226,81,48)" fg:x="1078" fg:w="136"/><text x="85.3329%" y="415.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::new (119 samples, 9.39%)</title><rect x="86.4246%" y="389" width="9.3923%" height="15" fill="rgb(234,70,51)" fg:x="1095" fg:w="119"/><text x="86.6746%" y="399.50">regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (119 samples, 9.39%)</title><rect x="86.4246%" y="373" width="9.3923%" height="15" fill="rgb(251,86,4)" fg:x="1095" fg:w="119"/><text x="86.6746%" y="383.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (119 samples, 9.39%)</title><rect x="86.4246%" y="357" width="9.3923%" height="15" fill="rgb(244,144,28)" fg:x="1095" fg:w="119"/><text x="86.6746%" y="367.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="95.7380%" y="341" width="0.0789%" height="15" fill="rgb(232,161,39)" fg:x="1213" fg:w="1"/><text x="95.9880%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.7380%" y="325" width="0.0789%" height="15" fill="rgb(247,34,51)" fg:x="1213" fg:w="1"/><text x="95.9880%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.7380%" y="309" width="0.0789%" height="15" fill="rgb(225,132,2)" fg:x="1213" fg:w="1"/><text x="95.9880%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="95.7380%" y="293" width="0.0789%" height="15" fill="rgb(209,159,44)" fg:x="1213" fg:w="1"/><text x="95.9880%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="96.0537%" y="325" width="0.0789%" height="15" fill="rgb(251,214,1)" fg:x="1217" fg:w="1"/><text x="96.3037%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.32%)</title><rect x="95.8958%" y="373" width="0.3157%" height="15" fill="rgb(247,84,47)" fg:x="1215" fg:w="4"/><text x="96.1458%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="95.8958%" y="357" width="0.3157%" height="15" fill="rgb(240,111,43)" fg:x="1215" fg:w="4"/><text x="96.1458%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="95.9747%" y="341" width="0.2368%" height="15" fill="rgb(215,214,35)" fg:x="1216" fg:w="3"/><text x="96.2247%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.1326%" y="325" width="0.0789%" height="15" fill="rgb(248,207,23)" fg:x="1218" fg:w="1"/><text x="96.3826%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.1326%" y="309" width="0.0789%" height="15" fill="rgb(214,186,4)" fg:x="1218" fg:w="1"/><text x="96.3826%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="96.2115%" y="373" width="0.0789%" height="15" fill="rgb(220,133,22)" fg:x="1219" fg:w="1"/><text x="96.4615%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="96.2115%" y="357" width="0.0789%" height="15" fill="rgb(239,134,19)" fg:x="1219" fg:w="1"/><text x="96.4615%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="96.2115%" y="341" width="0.0789%" height="15" fill="rgb(250,140,9)" fg:x="1219" fg:w="1"/><text x="96.4615%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.2115%" y="325" width="0.0789%" height="15" fill="rgb(225,59,14)" fg:x="1219" fg:w="1"/><text x="96.4615%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.4483%" y="325" width="0.0789%" height="15" fill="rgb(214,152,51)" fg:x="1222" fg:w="1"/><text x="96.6983%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="96.5272%" y="325" width="0.1579%" height="15" fill="rgb(251,227,43)" fg:x="1223" fg:w="2"/><text x="96.7772%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.5272%" y="309" width="0.1579%" height="15" fill="rgb(241,96,17)" fg:x="1223" fg:w="2"/><text x="96.7772%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.6062%" y="293" width="0.0789%" height="15" fill="rgb(234,198,43)" fg:x="1224" fg:w="1"/><text x="96.8562%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7640%" y="309" width="0.0789%" height="15" fill="rgb(220,108,29)" fg:x="1226" fg:w="1"/><text x="97.0140%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="96.8429%" y="309" width="0.0789%" height="15" fill="rgb(226,163,33)" fg:x="1227" fg:w="1"/><text x="97.0929%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="96.8429%" y="293" width="0.0789%" height="15" fill="rgb(205,194,45)" fg:x="1227" fg:w="1"/><text x="97.0929%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="96.9219%" y="293" width="0.1579%" height="15" fill="rgb(206,143,44)" fg:x="1228" fg:w="2"/><text x="97.1719%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="96.9219%" y="277" width="0.1579%" height="15" fill="rgb(236,136,36)" fg:x="1228" fg:w="2"/><text x="97.1719%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="96.9219%" y="261" width="0.1579%" height="15" fill="rgb(249,172,42)" fg:x="1228" fg:w="2"/><text x="97.1719%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="96.9219%" y="245" width="0.1579%" height="15" fill="rgb(216,139,23)" fg:x="1228" fg:w="2"/><text x="97.1719%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="97.0008%" y="229" width="0.0789%" height="15" fill="rgb(207,166,20)" fg:x="1229" fg:w="1"/><text x="97.2508%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.47%)</title><rect x="96.6851%" y="325" width="0.4736%" height="15" fill="rgb(210,209,22)" fg:x="1225" fg:w="6"/><text x="96.9351%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="96.9219%" y="309" width="0.2368%" height="15" fill="rgb(232,118,20)" fg:x="1228" fg:w="3"/><text x="97.1719%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="97.0797%" y="293" width="0.0789%" height="15" fill="rgb(238,113,42)" fg:x="1230" fg:w="1"/><text x="97.3297%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="97.2376%" y="277" width="0.1579%" height="15" fill="rgb(231,42,5)" fg:x="1232" fg:w="2"/><text x="97.4876%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="97.3165%" y="261" width="0.0789%" height="15" fill="rgb(243,166,24)" fg:x="1233" fg:w="1"/><text x="97.5665%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="97.1586%" y="293" width="0.3157%" height="15" fill="rgb(237,226,12)" fg:x="1231" fg:w="4"/><text x="97.4086%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="97.3954%" y="277" width="0.0789%" height="15" fill="rgb(229,133,24)" fg:x="1234" fg:w="1"/><text x="97.6454%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.39%)</title><rect x="97.1586%" y="325" width="0.3946%" height="15" fill="rgb(238,33,43)" fg:x="1231" fg:w="5"/><text x="97.4086%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.39%)</title><rect x="97.1586%" y="309" width="0.3946%" height="15" fill="rgb(227,59,38)" fg:x="1231" fg:w="5"/><text x="97.4086%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.4743%" y="293" width="0.0789%" height="15" fill="rgb(230,97,0)" fg:x="1235" fg:w="1"/><text x="97.7243%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.4743%" y="277" width="0.0789%" height="15" fill="rgb(250,173,50)" fg:x="1235" fg:w="1"/><text x="97.7243%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.4743%" y="261" width="0.0789%" height="15" fill="rgb(240,15,50)" fg:x="1235" fg:w="1"/><text x="97.7243%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.4743%" y="245" width="0.0789%" height="15" fill="rgb(221,93,22)" fg:x="1235" fg:w="1"/><text x="97.7243%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="97.6322%" y="277" width="0.1579%" height="15" fill="rgb(245,180,53)" fg:x="1237" fg:w="2"/><text x="97.8822%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="97.6322%" y="261" width="0.1579%" height="15" fill="rgb(231,88,51)" fg:x="1237" fg:w="2"/><text x="97.8822%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="97.6322%" y="245" width="0.1579%" height="15" fill="rgb(240,58,21)" fg:x="1237" fg:w="2"/><text x="97.8822%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.39%)</title><rect x="97.5533%" y="293" width="0.3946%" height="15" fill="rgb(237,21,10)" fg:x="1236" fg:w="5"/><text x="97.8033%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="97.7901%" y="277" width="0.1579%" height="15" fill="rgb(218,43,11)" fg:x="1239" fg:w="2"/><text x="98.0401%" y="287.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="97.8690%" y="261" width="0.0789%" height="15" fill="rgb(218,221,29)" fg:x="1240" fg:w="1"/><text x="98.1190%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (23 samples, 1.82%)</title><rect x="96.2904%" y="373" width="1.8153%" height="15" fill="rgb(214,118,42)" fg:x="1220" fg:w="23"/><text x="96.5404%" y="383.50">r..</text></g><g><title>regex::builders::Builder::build_one_string (22 samples, 1.74%)</title><rect x="96.3694%" y="357" width="1.7364%" height="15" fill="rgb(251,200,26)" fg:x="1221" fg:w="22"/><text x="96.6194%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (22 samples, 1.74%)</title><rect x="96.3694%" y="341" width="1.7364%" height="15" fill="rgb(237,101,39)" fg:x="1221" fg:w="22"/><text x="96.6194%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.55%)</title><rect x="97.5533%" y="325" width="0.5525%" height="15" fill="rgb(251,117,11)" fg:x="1236" fg:w="7"/><text x="97.8033%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.55%)</title><rect x="97.5533%" y="309" width="0.5525%" height="15" fill="rgb(216,223,23)" fg:x="1236" fg:w="7"/><text x="97.8033%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="97.9479%" y="293" width="0.1579%" height="15" fill="rgb(251,54,12)" fg:x="1241" fg:w="2"/><text x="98.1979%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="97.9479%" y="277" width="0.1579%" height="15" fill="rgb(254,176,54)" fg:x="1241" fg:w="2"/><text x="98.1979%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="98.0268%" y="261" width="0.0789%" height="15" fill="rgb(210,32,8)" fg:x="1242" fg:w="1"/><text x="98.2768%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.2636%" y="293" width="0.0789%" height="15" fill="rgb(235,52,38)" fg:x="1245" fg:w="1"/><text x="98.5136%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3425%" y="293" width="0.0789%" height="15" fill="rgb(231,4,44)" fg:x="1246" fg:w="1"/><text x="98.5925%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.3425%" y="277" width="0.0789%" height="15" fill="rgb(249,2,32)" fg:x="1246" fg:w="1"/><text x="98.5925%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.3425%" y="261" width="0.0789%" height="15" fill="rgb(224,65,26)" fg:x="1246" fg:w="1"/><text x="98.5925%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="98.4215%" y="293" width="0.1579%" height="15" fill="rgb(250,73,40)" fg:x="1247" fg:w="2"/><text x="98.6715%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (36 samples, 2.84%)</title><rect x="95.8169%" y="389" width="2.8414%" height="15" fill="rgb(253,177,16)" fg:x="1214" fg:w="36"/><text x="96.0669%" y="399.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.55%)</title><rect x="98.1058%" y="373" width="0.5525%" height="15" fill="rgb(217,32,34)" fg:x="1243" fg:w="7"/><text x="98.3558%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.55%)</title><rect x="98.1058%" y="357" width="0.5525%" height="15" fill="rgb(212,7,10)" fg:x="1243" fg:w="7"/><text x="98.3558%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.55%)</title><rect x="98.1058%" y="341" width="0.5525%" height="15" fill="rgb(245,89,8)" fg:x="1243" fg:w="7"/><text x="98.3558%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.55%)</title><rect x="98.1058%" y="325" width="0.5525%" height="15" fill="rgb(237,16,53)" fg:x="1243" fg:w="7"/><text x="98.3558%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.55%)</title><rect x="98.1058%" y="309" width="0.5525%" height="15" fill="rgb(250,204,30)" fg:x="1243" fg:w="7"/><text x="98.3558%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="98.5793%" y="293" width="0.0789%" height="15" fill="rgb(208,77,27)" fg:x="1249" fg:w="1"/><text x="98.8293%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.5793%" y="277" width="0.0789%" height="15" fill="rgb(250,204,28)" fg:x="1249" fg:w="1"/><text x="98.8293%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.5793%" y="261" width="0.0789%" height="15" fill="rgb(244,63,21)" fg:x="1249" fg:w="1"/><text x="98.8293%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5793%" y="245" width="0.0789%" height="15" fill="rgb(236,85,44)" fg:x="1249" fg:w="1"/><text x="98.8293%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (286 samples, 22.57%)</title><rect x="76.2431%" y="485" width="22.5730%" height="15" fill="rgb(215,98,4)" fg:x="966" fg:w="286"/><text x="76.4931%" y="495.50">&lt;&amp;kernel::model::entry::Entry as plu..</text></g><g><title>plugins_core::looking::model::qualify_name (277 samples, 21.86%)</title><rect x="76.9534%" y="469" width="21.8627%" height="15" fill="rgb(235,38,11)" fg:x="975" fg:w="277"/><text x="77.2034%" y="479.50">plugins_core::looking::model::quali..</text></g><g><title>indefinite::indefinite (277 samples, 21.86%)</title><rect x="76.9534%" y="453" width="21.8627%" height="15" fill="rgb(254,186,25)" fg:x="975" fg:w="277"/><text x="77.2034%" y="463.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (277 samples, 21.86%)</title><rect x="76.9534%" y="437" width="21.8627%" height="15" fill="rgb(225,55,31)" fg:x="975" fg:w="277"/><text x="77.2034%" y="447.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (277 samples, 21.86%)</title><rect x="76.9534%" y="421" width="21.8627%" height="15" fill="rgb(211,15,21)" fg:x="975" fg:w="277"/><text x="77.2034%" y="431.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (38 samples, 3.00%)</title><rect x="95.8169%" y="405" width="2.9992%" height="15" fill="rgb(215,187,41)" fg:x="1214" fg:w="38"/><text x="96.0669%" y="415.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="98.6582%" y="389" width="0.1579%" height="15" fill="rgb(248,69,32)" fg:x="1250" fg:w="2"/><text x="98.9082%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="98.8161%" y="485" width="0.0789%" height="15" fill="rgb(252,102,52)" fg:x="1252" fg:w="1"/><text x="99.0661%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.8950%" y="261" width="0.0789%" height="15" fill="rgb(253,140,32)" fg:x="1253" fg:w="1"/><text x="99.1450%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8950%" y="245" width="0.0789%" height="15" fill="rgb(216,56,42)" fg:x="1253" fg:w="1"/><text x="99.1450%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9740%" y="165" width="0.0789%" height="15" fill="rgb(216,184,14)" fg:x="1254" fg:w="1"/><text x="99.2240%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9740%" y="149" width="0.0789%" height="15" fill="rgb(237,187,27)" fg:x="1254" fg:w="1"/><text x="99.2240%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9740%" y="133" width="0.0789%" height="15" fill="rgb(219,65,3)" fg:x="1254" fg:w="1"/><text x="99.2240%" y="143.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="98.8950%" y="341" width="0.2368%" height="15" fill="rgb(245,83,25)" fg:x="1253" fg:w="3"/><text x="99.1450%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="98.8950%" y="325" width="0.2368%" height="15" fill="rgb(214,205,45)" fg:x="1253" fg:w="3"/><text x="99.1450%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.8950%" y="309" width="0.2368%" height="15" fill="rgb(241,20,18)" fg:x="1253" fg:w="3"/><text x="99.1450%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="98.8950%" y="293" width="0.2368%" height="15" fill="rgb(232,163,23)" fg:x="1253" fg:w="3"/><text x="99.1450%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.8950%" y="277" width="0.2368%" height="15" fill="rgb(214,5,46)" fg:x="1253" fg:w="3"/><text x="99.1450%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.9740%" y="261" width="0.1579%" height="15" fill="rgb(229,78,17)" fg:x="1254" fg:w="2"/><text x="99.2240%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.9740%" y="245" width="0.1579%" height="15" fill="rgb(248,89,10)" fg:x="1254" fg:w="2"/><text x="99.2240%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.9740%" y="229" width="0.1579%" height="15" fill="rgb(248,54,15)" fg:x="1254" fg:w="2"/><text x="99.2240%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.9740%" y="213" width="0.1579%" height="15" fill="rgb(223,116,6)" fg:x="1254" fg:w="2"/><text x="99.2240%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.9740%" y="197" width="0.1579%" height="15" fill="rgb(205,125,38)" fg:x="1254" fg:w="2"/><text x="99.2240%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.9740%" y="181" width="0.1579%" height="15" fill="rgb(251,78,38)" fg:x="1254" fg:w="2"/><text x="99.2240%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.0529%" y="165" width="0.0789%" height="15" fill="rgb(253,78,28)" fg:x="1255" fg:w="1"/><text x="99.3029%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.0529%" y="149" width="0.0789%" height="15" fill="rgb(209,120,3)" fg:x="1255" fg:w="1"/><text x="99.3029%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.0529%" y="133" width="0.0789%" height="15" fill="rgb(238,229,9)" fg:x="1255" fg:w="1"/><text x="99.3029%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="99.0529%" y="117" width="0.0789%" height="15" fill="rgb(253,159,18)" fg:x="1255" fg:w="1"/><text x="99.3029%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="99.0529%" y="101" width="0.0789%" height="15" fill="rgb(244,42,34)" fg:x="1255" fg:w="1"/><text x="99.3029%" y="111.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.1318%" y="309" width="0.0789%" height="15" fill="rgb(224,8,7)" fg:x="1256" fg:w="1"/><text x="99.3818%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1318%" y="293" width="0.0789%" height="15" fill="rgb(210,201,45)" fg:x="1256" fg:w="1"/><text x="99.3818%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1318%" y="277" width="0.0789%" height="15" fill="rgb(252,185,21)" fg:x="1256" fg:w="1"/><text x="99.3818%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1318%" y="261" width="0.0789%" height="15" fill="rgb(223,131,1)" fg:x="1256" fg:w="1"/><text x="99.3818%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1318%" y="245" width="0.0789%" height="15" fill="rgb(245,141,16)" fg:x="1256" fg:w="1"/><text x="99.3818%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1318%" y="229" width="0.0789%" height="15" fill="rgb(229,55,45)" fg:x="1256" fg:w="1"/><text x="99.3818%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1318%" y="213" width="0.0789%" height="15" fill="rgb(208,92,15)" fg:x="1256" fg:w="1"/><text x="99.3818%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1318%" y="197" width="0.0789%" height="15" fill="rgb(234,185,47)" fg:x="1256" fg:w="1"/><text x="99.3818%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (5 samples, 0.39%)</title><rect x="98.8950%" y="357" width="0.3946%" height="15" fill="rgb(253,104,50)" fg:x="1253" fg:w="5"/><text x="99.1450%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.1318%" y="341" width="0.1579%" height="15" fill="rgb(205,70,7)" fg:x="1256" fg:w="2"/><text x="99.3818%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1318%" y="325" width="0.1579%" height="15" fill="rgb(240,178,43)" fg:x="1256" fg:w="2"/><text x="99.3818%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2107%" y="309" width="0.0789%" height="15" fill="rgb(214,112,2)" fg:x="1257" fg:w="1"/><text x="99.4607%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2107%" y="293" width="0.0789%" height="15" fill="rgb(206,46,17)" fg:x="1257" fg:w="1"/><text x="99.4607%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.2107%" y="277" width="0.0789%" height="15" fill="rgb(225,220,16)" fg:x="1257" fg:w="1"/><text x="99.4607%" y="287.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (6 samples, 0.47%)</title><rect x="98.8950%" y="453" width="0.4736%" height="15" fill="rgb(238,65,40)" fg:x="1253" fg:w="6"/><text x="99.1450%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.47%)</title><rect x="98.8950%" y="437" width="0.4736%" height="15" fill="rgb(230,151,21)" fg:x="1253" fg:w="6"/><text x="99.1450%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.47%)</title><rect x="98.8950%" y="421" width="0.4736%" height="15" fill="rgb(218,58,49)" fg:x="1253" fg:w="6"/><text x="99.1450%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (6 samples, 0.47%)</title><rect x="98.8950%" y="405" width="0.4736%" height="15" fill="rgb(219,179,14)" fg:x="1253" fg:w="6"/><text x="99.1450%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.47%)</title><rect x="98.8950%" y="389" width="0.4736%" height="15" fill="rgb(223,72,1)" fg:x="1253" fg:w="6"/><text x="99.1450%" y="399.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.47%)</title><rect x="98.8950%" y="373" width="0.4736%" height="15" fill="rgb(238,126,10)" fg:x="1253" fg:w="6"/><text x="99.1450%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.2897%" y="357" width="0.0789%" height="15" fill="rgb(224,206,38)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.2897%" y="341" width="0.0789%" height="15" fill="rgb(212,201,54)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.2897%" y="325" width="0.0789%" height="15" fill="rgb(218,154,48)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2897%" y="309" width="0.0789%" height="15" fill="rgb(232,93,24)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2897%" y="293" width="0.0789%" height="15" fill="rgb(245,30,21)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2897%" y="277" width="0.0789%" height="15" fill="rgb(242,148,29)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2897%" y="261" width="0.0789%" height="15" fill="rgb(244,153,54)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.2897%" y="245" width="0.0789%" height="15" fill="rgb(252,87,22)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2897%" y="229" width="0.0789%" height="15" fill="rgb(210,51,29)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2897%" y="213" width="0.0789%" height="15" fill="rgb(242,136,47)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2897%" y="197" width="0.0789%" height="15" fill="rgb(238,68,4)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.3686%" y="421" width="0.0789%" height="15" fill="rgb(242,161,30)" fg:x="1259" fg:w="1"/><text x="99.6186%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.3686%" y="405" width="0.0789%" height="15" fill="rgb(218,58,44)" fg:x="1259" fg:w="1"/><text x="99.6186%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.3686%" y="389" width="0.0789%" height="15" fill="rgb(252,125,32)" fg:x="1259" fg:w="1"/><text x="99.6186%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3686%" y="373" width="0.0789%" height="15" fill="rgb(219,178,0)" fg:x="1259" fg:w="1"/><text x="99.6186%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3686%" y="357" width="0.0789%" height="15" fill="rgb(213,152,7)" fg:x="1259" fg:w="1"/><text x="99.6186%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.3686%" y="341" width="0.0789%" height="15" fill="rgb(249,109,34)" fg:x="1259" fg:w="1"/><text x="99.6186%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (305 samples, 24.07%)</title><rect x="75.4538%" y="709" width="24.0726%" height="15" fill="rgb(232,96,21)" fg:x="956" fg:w="305"/><text x="75.7038%" y="719.50">&lt;engine::session::Session as kernel::a..</text></g><g><title>kernel::plugins::mw::apply_middleware (305 samples, 24.07%)</title><rect x="75.4538%" y="693" width="24.0726%" height="15" fill="rgb(228,27,39)" fg:x="956" fg:w="305"/><text x="75.7038%" y="703.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (305 samples, 24.07%)</title><rect x="75.4538%" y="677" width="24.0726%" height="15" fill="rgb(211,182,52)" fg:x="956" fg:w="305"/><text x="75.7038%" y="687.50">kernel::plugins::mw::MiddlewareNext::h..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (305 samples, 24.07%)</title><rect x="75.4538%" y="661" width="24.0726%" height="15" fill="rgb(234,178,38)" fg:x="956" fg:w="305"/><text x="75.7038%" y="671.50">&lt;engine::session::ExpandSurroundingsMi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (296 samples, 23.36%)</title><rect x="76.1642%" y="645" width="23.3623%" height="15" fill="rgb(221,111,3)" fg:x="965" fg:w="296"/><text x="76.4142%" y="655.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (296 samples, 23.36%)</title><rect x="76.1642%" y="629" width="23.3623%" height="15" fill="rgb(228,175,21)" fg:x="965" fg:w="296"/><text x="76.4142%" y="639.50">&lt;plugins_dynlib::DynamicMiddleware as..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (296 samples, 23.36%)</title><rect x="76.1642%" y="613" width="23.3623%" height="15" fill="rgb(228,174,43)" fg:x="965" fg:w="296"/><text x="76.4142%" y="623.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (296 samples, 23.36%)</title><rect x="76.1642%" y="597" width="23.3623%" height="15" fill="rgb(211,191,0)" fg:x="965" fg:w="296"/><text x="76.4142%" y="607.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (296 samples, 23.36%)</title><rect x="76.1642%" y="581" width="23.3623%" height="15" fill="rgb(253,117,3)" fg:x="965" fg:w="296"/><text x="76.4142%" y="591.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (296 samples, 23.36%)</title><rect x="76.1642%" y="565" width="23.3623%" height="15" fill="rgb(241,127,19)" fg:x="965" fg:w="296"/><text x="76.4142%" y="575.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (296 samples, 23.36%)</title><rect x="76.1642%" y="549" width="23.3623%" height="15" fill="rgb(218,103,12)" fg:x="965" fg:w="296"/><text x="76.4142%" y="559.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops:..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (296 samples, 23.36%)</title><rect x="76.1642%" y="533" width="23.3623%" height="15" fill="rgb(236,214,43)" fg:x="965" fg:w="296"/><text x="76.4142%" y="543.50">&lt;engine::session::state::State as ker..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (296 samples, 23.36%)</title><rect x="76.1642%" y="517" width="23.3623%" height="15" fill="rgb(244,144,19)" fg:x="965" fg:w="296"/><text x="76.4142%" y="527.50">&lt;plugins_core::looking::actions::Look..</text></g><g><title>plugins_core::looking::model::new_area_observation (295 samples, 23.28%)</title><rect x="76.2431%" y="501" width="23.2833%" height="15" fill="rgb(246,188,10)" fg:x="966" fg:w="295"/><text x="76.4931%" y="511.50">plugins_core::looking::model::new_are..</text></g><g><title>kernel::model::entry::Entry::scope (8 samples, 0.63%)</title><rect x="98.8950%" y="485" width="0.6314%" height="15" fill="rgb(212,193,33)" fg:x="1253" fg:w="8"/><text x="99.1450%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.63%)</title><rect x="98.8950%" y="469" width="0.6314%" height="15" fill="rgb(241,51,29)" fg:x="1253" fg:w="8"/><text x="99.1450%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.3686%" y="453" width="0.1579%" height="15" fill="rgb(211,58,19)" fg:x="1259" fg:w="2"/><text x="99.6186%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.3686%" y="437" width="0.1579%" height="15" fill="rgb(229,111,26)" fg:x="1259" fg:w="2"/><text x="99.6186%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4475%" y="421" width="0.0789%" height="15" fill="rgb(213,115,40)" fg:x="1260" fg:w="1"/><text x="99.6975%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4475%" y="405" width="0.0789%" height="15" fill="rgb(209,56,44)" fg:x="1260" fg:w="1"/><text x="99.6975%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.4475%" y="389" width="0.0789%" height="15" fill="rgb(230,108,32)" fg:x="1260" fg:w="1"/><text x="99.6975%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.4475%" y="373" width="0.0789%" height="15" fill="rgb(216,165,31)" fg:x="1260" fg:w="1"/><text x="99.6975%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5264%" y="581" width="0.0789%" height="15" fill="rgb(218,122,21)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5264%" y="565" width="0.0789%" height="15" fill="rgb(223,224,47)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5264%" y="549" width="0.0789%" height="15" fill="rgb(238,102,44)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.5264%" y="709" width="0.1579%" height="15" fill="rgb(236,46,40)" fg:x="1261" fg:w="2"/><text x="99.7764%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.5264%" y="693" width="0.1579%" height="15" fill="rgb(247,202,50)" fg:x="1261" fg:w="2"/><text x="99.7764%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="99.5264%" y="677" width="0.1579%" height="15" fill="rgb(209,99,20)" fg:x="1261" fg:w="2"/><text x="99.7764%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5264%" y="661" width="0.1579%" height="15" fill="rgb(252,27,34)" fg:x="1261" fg:w="2"/><text x="99.7764%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5264%" y="645" width="0.1579%" height="15" fill="rgb(215,206,23)" fg:x="1261" fg:w="2"/><text x="99.7764%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.5264%" y="629" width="0.1579%" height="15" fill="rgb(212,135,36)" fg:x="1261" fg:w="2"/><text x="99.7764%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5264%" y="613" width="0.1579%" height="15" fill="rgb(240,189,1)" fg:x="1261" fg:w="2"/><text x="99.7764%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.5264%" y="597" width="0.1579%" height="15" fill="rgb(242,56,20)" fg:x="1261" fg:w="2"/><text x="99.7764%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6054%" y="581" width="0.0789%" height="15" fill="rgb(247,132,33)" fg:x="1262" fg:w="1"/><text x="99.8554%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.6054%" y="565" width="0.0789%" height="15" fill="rgb(208,149,11)" fg:x="1262" fg:w="1"/><text x="99.8554%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6054%" y="549" width="0.0789%" height="15" fill="rgb(211,33,11)" fg:x="1262" fg:w="1"/><text x="99.8554%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6054%" y="533" width="0.0789%" height="15" fill="rgb(221,29,38)" fg:x="1262" fg:w="1"/><text x="99.8554%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6054%" y="517" width="0.0789%" height="15" fill="rgb(206,182,49)" fg:x="1262" fg:w="1"/><text x="99.8554%" y="527.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.6843%" y="645" width="0.0789%" height="15" fill="rgb(216,140,1)" fg:x="1263" fg:w="1"/><text x="99.9343%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6843%" y="629" width="0.0789%" height="15" fill="rgb(232,57,40)" fg:x="1263" fg:w="1"/><text x="99.9343%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6843%" y="613" width="0.0789%" height="15" fill="rgb(224,186,18)" fg:x="1263" fg:w="1"/><text x="99.9343%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6843%" y="597" width="0.0789%" height="15" fill="rgb(215,121,11)" fg:x="1263" fg:w="1"/><text x="99.9343%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6843%" y="581" width="0.0789%" height="15" fill="rgb(245,147,10)" fg:x="1263" fg:w="1"/><text x="99.9343%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.6843%" y="565" width="0.0789%" height="15" fill="rgb(238,153,13)" fg:x="1263" fg:w="1"/><text x="99.9343%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.6843%" y="549" width="0.0789%" height="15" fill="rgb(233,108,0)" fg:x="1263" fg:w="1"/><text x="99.9343%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="99.6843%" y="661" width="0.1579%" height="15" fill="rgb(212,157,17)" fg:x="1263" fg:w="2"/><text x="99.9343%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7632%" y="645" width="0.0789%" height="15" fill="rgb(225,213,38)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7632%" y="629" width="0.0789%" height="15" fill="rgb(248,16,11)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.7632%" y="613" width="0.0789%" height="15" fill="rgb(241,33,4)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7632%" y="597" width="0.0789%" height="15" fill="rgb(222,26,43)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7632%" y="581" width="0.0789%" height="15" fill="rgb(243,29,36)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.7632%" y="565" width="0.0789%" height="15" fill="rgb(241,9,27)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.7632%" y="549" width="0.0789%" height="15" fill="rgb(205,117,26)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.7632%" y="533" width="0.0789%" height="15" fill="rgb(209,80,39)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="99.6843%" y="709" width="0.2368%" height="15" fill="rgb(239,155,6)" fg:x="1263" fg:w="3"/><text x="99.9343%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.6843%" y="693" width="0.2368%" height="15" fill="rgb(212,104,12)" fg:x="1263" fg:w="3"/><text x="99.9343%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.6843%" y="677" width="0.2368%" height="15" fill="rgb(234,204,3)" fg:x="1263" fg:w="3"/><text x="99.9343%" y="687.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.8421%" y="661" width="0.0789%" height="15" fill="rgb(251,218,7)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8421%" y="645" width="0.0789%" height="15" fill="rgb(221,81,32)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="655.50"></text></g><g><title>all (1,267 samples, 100%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(214,152,26)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="1087.50"></text></g><g><title>simple-484c7248 (1,267 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(223,22,3)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="1071.50">simple-484c7248</text></g><g><title>_start (1,267 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(207,174,7)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="1055.50">_start</text></g><g><title>__libc_start_main (1,267 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(224,19,52)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="1039.50">__libc_start_main</text></g><g><title>main (1,267 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(228,24,14)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="1023.50">main</text></g><g><title>std::rt::lang_start_internal (1,267 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(230,153,43)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,267 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(231,106,12)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,267 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(215,92,2)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,267 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(249,143,25)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,267 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(252,7,35)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,267 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(216,69,40)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,267 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(240,36,33)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,267 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(231,128,14)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,267 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(245,143,14)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,267 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(222,130,28)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="863.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,267 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(212,10,48)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="847.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,267 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(254,118,45)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="831.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,267 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(228,6,45)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="815.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,267 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(241,18,35)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="799.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (388 samples, 30.62%)</title><rect x="69.3765%" y="773" width="30.6235%" height="15" fill="rgb(227,214,53)" fg:x="879" fg:w="388"/><text x="69.6265%" y="783.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (388 samples, 30.62%)</title><rect x="69.3765%" y="757" width="30.6235%" height="15" fill="rgb(224,107,51)" fg:x="879" fg:w="388"/><text x="69.6265%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (388 samples, 30.62%)</title><rect x="69.3765%" y="741" width="30.6235%" height="15" fill="rgb(248,60,28)" fg:x="879" fg:w="388"/><text x="69.6265%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (311 samples, 24.55%)</title><rect x="75.4538%" y="725" width="24.5462%" height="15" fill="rgb(249,101,23)" fg:x="956" fg:w="311"/><text x="75.7038%" y="735.50">engine::session::Session::evaluate_and_..</text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.9211%" y="709" width="0.0789%" height="15" fill="rgb(228,51,19)" fg:x="1266" fg:w="1"/><text x="100.1711%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.9211%" y="693" width="0.0789%" height="15" fill="rgb(213,20,6)" fg:x="1266" fg:w="1"/><text x="100.1711%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.9211%" y="677" width="0.0789%" height="15" fill="rgb(212,124,10)" fg:x="1266" fg:w="1"/><text x="100.1711%" y="687.50"></text></g></svg></svg>