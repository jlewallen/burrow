<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1266"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="725" width="0.0790%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1580%" y="693" width="0.0790%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.4080%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2370%" y="661" width="0.0790%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.4870%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.39%)</title><rect x="0.0790%" y="725" width="0.3949%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="5"/><text x="0.3290%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="0.0790%" y="709" width="0.3949%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="5"/><text x="0.3290%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="0.2370%" y="693" width="0.2370%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="3"/><text x="0.4870%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.24%)</title><rect x="0.2370%" y="677" width="0.2370%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="3"/><text x="0.4870%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="0.3160%" y="661" width="0.1580%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="2"/><text x="0.5660%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.3160%" y="645" width="0.1580%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="2"/><text x="0.5660%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.6319%" y="613" width="0.1580%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="2"/><text x="0.8819%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.6319%" y="597" width="0.1580%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="2"/><text x="0.8819%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8689%" y="597" width="0.0790%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="1"/><text x="1.1189%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.9479%" y="597" width="0.0790%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="1"/><text x="1.1979%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9479%" y="581" width="0.0790%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="1"/><text x="1.1979%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.0269%" y="565" width="0.0790%" height="15" fill="rgb(217,207,13)" fg:x="13" fg:w="1"/><text x="1.2769%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="1.0269%" y="597" width="0.1580%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="2"/><text x="1.2769%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="1.0269%" y="581" width="0.1580%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="2"/><text x="1.2769%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.1058%" y="565" width="0.0790%" height="15" fill="rgb(210,31,41)" fg:x="14" fg:w="1"/><text x="1.3558%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.1058%" y="549" width="0.0790%" height="15" fill="rgb(221,200,47)" fg:x="14" fg:w="1"/><text x="1.3558%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.71%)</title><rect x="0.5529%" y="661" width="0.7109%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="9"/><text x="0.8029%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (9 samples, 0.71%)</title><rect x="0.5529%" y="645" width="0.7109%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="9"/><text x="0.8029%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.63%)</title><rect x="0.6319%" y="629" width="0.6319%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="8"/><text x="0.8819%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="0.7899%" y="613" width="0.4739%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="6"/><text x="1.0399%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.1848%" y="597" width="0.0790%" height="15" fill="rgb(247,18,42)" fg:x="15" fg:w="1"/><text x="1.4348%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1848%" y="581" width="0.0790%" height="15" fill="rgb(241,131,45)" fg:x="15" fg:w="1"/><text x="1.4348%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1848%" y="565" width="0.0790%" height="15" fill="rgb(249,31,29)" fg:x="15" fg:w="1"/><text x="1.4348%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.4218%" y="645" width="0.0790%" height="15" fill="rgb(225,111,53)" fg:x="18" fg:w="1"/><text x="1.6718%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.5798%" y="629" width="0.1580%" height="15" fill="rgb(238,160,17)" fg:x="20" fg:w="2"/><text x="1.8298%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.7378%" y="629" width="0.0790%" height="15" fill="rgb(214,148,48)" fg:x="22" fg:w="1"/><text x="1.9878%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7378%" y="613" width="0.0790%" height="15" fill="rgb(232,36,49)" fg:x="22" fg:w="1"/><text x="1.9878%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.8167%" y="613" width="0.1580%" height="15" fill="rgb(209,103,24)" fg:x="23" fg:w="2"/><text x="2.0667%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.9747%" y="613" width="0.1580%" height="15" fill="rgb(229,88,8)" fg:x="25" fg:w="2"/><text x="2.2247%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.1327%" y="597" width="0.0790%" height="15" fill="rgb(213,181,19)" fg:x="27" fg:w="1"/><text x="2.3827%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="2.2117%" y="597" width="0.0790%" height="15" fill="rgb(254,191,54)" fg:x="28" fg:w="1"/><text x="2.4617%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.2117%" y="581" width="0.0790%" height="15" fill="rgb(241,83,37)" fg:x="28" fg:w="1"/><text x="2.4617%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.2117%" y="565" width="0.0790%" height="15" fill="rgb(233,36,39)" fg:x="28" fg:w="1"/><text x="2.4617%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.2117%" y="549" width="0.0790%" height="15" fill="rgb(226,3,54)" fg:x="28" fg:w="1"/><text x="2.4617%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2117%" y="533" width="0.0790%" height="15" fill="rgb(245,192,40)" fg:x="28" fg:w="1"/><text x="2.4617%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2907%" y="581" width="0.0790%" height="15" fill="rgb(238,167,29)" fg:x="29" fg:w="1"/><text x="2.5407%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 1.97%)</title><rect x="0.4739%" y="709" width="1.9747%" height="15" fill="rgb(232,182,51)" fg:x="6" fg:w="25"/><text x="0.7239%" y="719.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (24 samples, 1.90%)</title><rect x="0.5529%" y="693" width="1.8957%" height="15" fill="rgb(231,60,39)" fg:x="7" fg:w="24"/><text x="0.8029%" y="703.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 1.90%)</title><rect x="0.5529%" y="677" width="1.8957%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="24"/><text x="0.8029%" y="687.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (15 samples, 1.18%)</title><rect x="1.2638%" y="661" width="1.1848%" height="15" fill="rgb(235,93,37)" fg:x="16" fg:w="15"/><text x="1.5138%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (12 samples, 0.95%)</title><rect x="1.5008%" y="645" width="0.9479%" height="15" fill="rgb(213,116,39)" fg:x="19" fg:w="12"/><text x="1.7508%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.63%)</title><rect x="1.8167%" y="629" width="0.6319%" height="15" fill="rgb(222,207,29)" fg:x="23" fg:w="8"/><text x="2.0667%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="2.1327%" y="613" width="0.3160%" height="15" fill="rgb(206,96,30)" fg:x="27" fg:w="4"/><text x="2.3827%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.2907%" y="597" width="0.1580%" height="15" fill="rgb(218,138,4)" fg:x="29" fg:w="2"/><text x="2.5407%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3697%" y="581" width="0.0790%" height="15" fill="rgb(250,191,14)" fg:x="30" fg:w="1"/><text x="2.6197%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 2.53%)</title><rect x="0.0000%" y="741" width="2.5276%" height="15" fill="rgb(239,60,40)" fg:x="0" fg:w="32"/><text x="0.2500%" y="751.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (26 samples, 2.05%)</title><rect x="0.4739%" y="725" width="2.0537%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="26"/><text x="0.7239%" y="735.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4487%" y="709" width="0.0790%" height="15" fill="rgb(225,35,8)" fg:x="31" fg:w="1"/><text x="2.6987%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="2.5276%" y="693" width="0.1580%" height="15" fill="rgb(250,213,24)" fg:x="32" fg:w="2"/><text x="2.7776%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="2.6066%" y="677" width="0.0790%" height="15" fill="rgb(247,123,22)" fg:x="33" fg:w="1"/><text x="2.8566%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="2.6856%" y="645" width="0.1580%" height="15" fill="rgb(231,138,38)" fg:x="34" fg:w="2"/><text x="2.9356%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="2.6856%" y="629" width="0.1580%" height="15" fill="rgb(231,145,46)" fg:x="34" fg:w="2"/><text x="2.9356%" y="639.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="2.6856%" y="613" width="0.1580%" height="15" fill="rgb(251,118,11)" fg:x="34" fg:w="2"/><text x="2.9356%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="2.6856%" y="597" width="0.1580%" height="15" fill="rgb(217,147,25)" fg:x="34" fg:w="2"/><text x="2.9356%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.7646%" y="581" width="0.0790%" height="15" fill="rgb(247,81,37)" fg:x="35" fg:w="1"/><text x="3.0146%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.7646%" y="565" width="0.0790%" height="15" fill="rgb(209,12,38)" fg:x="35" fg:w="1"/><text x="3.0146%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="2.7646%" y="549" width="0.0790%" height="15" fill="rgb(227,1,9)" fg:x="35" fg:w="1"/><text x="3.0146%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="2.7646%" y="533" width="0.0790%" height="15" fill="rgb(248,47,43)" fg:x="35" fg:w="1"/><text x="3.0146%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="2.7646%" y="517" width="0.0790%" height="15" fill="rgb(221,10,30)" fg:x="35" fg:w="1"/><text x="3.0146%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="2.7646%" y="501" width="0.0790%" height="15" fill="rgb(210,229,1)" fg:x="35" fg:w="1"/><text x="3.0146%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.7646%" y="485" width="0.0790%" height="15" fill="rgb(222,148,37)" fg:x="35" fg:w="1"/><text x="3.0146%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.7646%" y="469" width="0.0790%" height="15" fill="rgb(234,67,33)" fg:x="35" fg:w="1"/><text x="3.0146%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.7646%" y="453" width="0.0790%" height="15" fill="rgb(247,98,35)" fg:x="35" fg:w="1"/><text x="3.0146%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="2.7646%" y="437" width="0.0790%" height="15" fill="rgb(247,138,52)" fg:x="35" fg:w="1"/><text x="3.0146%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.7646%" y="421" width="0.0790%" height="15" fill="rgb(213,79,30)" fg:x="35" fg:w="1"/><text x="3.0146%" y="431.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="2.8436%" y="645" width="0.0790%" height="15" fill="rgb(246,177,23)" fg:x="36" fg:w="1"/><text x="3.0936%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8436%" y="629" width="0.0790%" height="15" fill="rgb(230,62,27)" fg:x="36" fg:w="1"/><text x="3.0936%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.55%)</title><rect x="2.6856%" y="661" width="0.5529%" height="15" fill="rgb(216,154,8)" fg:x="34" fg:w="7"/><text x="2.9356%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="2.9226%" y="645" width="0.3160%" height="15" fill="rgb(244,35,45)" fg:x="37" fg:w="4"/><text x="3.1726%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="2.9226%" y="629" width="0.3160%" height="15" fill="rgb(251,115,12)" fg:x="37" fg:w="4"/><text x="3.1726%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="2.9226%" y="613" width="0.3160%" height="15" fill="rgb(240,54,50)" fg:x="37" fg:w="4"/><text x="3.1726%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="2.9226%" y="597" width="0.3160%" height="15" fill="rgb(233,84,52)" fg:x="37" fg:w="4"/><text x="3.1726%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="2.9226%" y="581" width="0.3160%" height="15" fill="rgb(207,117,47)" fg:x="37" fg:w="4"/><text x="3.1726%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="2.9226%" y="565" width="0.3160%" height="15" fill="rgb(249,43,39)" fg:x="37" fg:w="4"/><text x="3.1726%" y="575.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="2.9226%" y="549" width="0.3160%" height="15" fill="rgb(209,38,44)" fg:x="37" fg:w="4"/><text x="3.1726%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (4 samples, 0.32%)</title><rect x="3.2385%" y="645" width="0.3160%" height="15" fill="rgb(236,212,23)" fg:x="41" fg:w="4"/><text x="3.4885%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="3.2385%" y="629" width="0.3160%" height="15" fill="rgb(242,79,21)" fg:x="41" fg:w="4"/><text x="3.4885%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="3.2385%" y="613" width="0.3160%" height="15" fill="rgb(211,96,35)" fg:x="41" fg:w="4"/><text x="3.4885%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.3965%" y="597" width="0.1580%" height="15" fill="rgb(253,215,40)" fg:x="43" fg:w="2"/><text x="3.6465%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.3965%" y="581" width="0.1580%" height="15" fill="rgb(211,81,21)" fg:x="43" fg:w="2"/><text x="3.6465%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="3.3965%" y="565" width="0.1580%" height="15" fill="rgb(208,190,38)" fg:x="43" fg:w="2"/><text x="3.6465%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="3.3965%" y="549" width="0.1580%" height="15" fill="rgb(235,213,38)" fg:x="43" fg:w="2"/><text x="3.6465%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="3.3965%" y="533" width="0.1580%" height="15" fill="rgb(237,122,38)" fg:x="43" fg:w="2"/><text x="3.6465%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="3.3965%" y="517" width="0.1580%" height="15" fill="rgb(244,218,35)" fg:x="43" fg:w="2"/><text x="3.6465%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="3.3965%" y="501" width="0.1580%" height="15" fill="rgb(240,68,47)" fg:x="43" fg:w="2"/><text x="3.6465%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="3.3965%" y="485" width="0.1580%" height="15" fill="rgb(210,16,53)" fg:x="43" fg:w="2"/><text x="3.6465%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="3.3965%" y="469" width="0.1580%" height="15" fill="rgb(235,124,12)" fg:x="43" fg:w="2"/><text x="3.6465%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="3.3965%" y="453" width="0.1580%" height="15" fill="rgb(224,169,11)" fg:x="43" fg:w="2"/><text x="3.6465%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="3.3965%" y="437" width="0.1580%" height="15" fill="rgb(250,166,2)" fg:x="43" fg:w="2"/><text x="3.6465%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.3965%" y="421" width="0.1580%" height="15" fill="rgb(242,216,29)" fg:x="43" fg:w="2"/><text x="3.6465%" y="431.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="3.6335%" y="597" width="0.3160%" height="15" fill="rgb(230,116,27)" fg:x="46" fg:w="4"/><text x="3.8835%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="3.6335%" y="581" width="0.3160%" height="15" fill="rgb(228,99,48)" fg:x="46" fg:w="4"/><text x="3.8835%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="3.6335%" y="565" width="0.3160%" height="15" fill="rgb(253,11,6)" fg:x="46" fg:w="4"/><text x="3.8835%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="3.6335%" y="549" width="0.3160%" height="15" fill="rgb(247,143,39)" fg:x="46" fg:w="4"/><text x="3.8835%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="3.6335%" y="533" width="0.3160%" height="15" fill="rgb(236,97,10)" fg:x="46" fg:w="4"/><text x="3.8835%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="3.7125%" y="517" width="0.2370%" height="15" fill="rgb(233,208,19)" fg:x="47" fg:w="3"/><text x="3.9625%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="3.7125%" y="501" width="0.2370%" height="15" fill="rgb(216,164,2)" fg:x="47" fg:w="3"/><text x="3.9625%" y="511.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="3.7125%" y="485" width="0.2370%" height="15" fill="rgb(220,129,5)" fg:x="47" fg:w="3"/><text x="3.9625%" y="495.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.08%)</title><rect x="3.9494%" y="517" width="0.0790%" height="15" fill="rgb(242,17,10)" fg:x="50" fg:w="1"/><text x="4.1994%" y="527.50"></text></g><g><title>std::io::error::Error::last_os_error (1 samples, 0.08%)</title><rect x="3.9494%" y="501" width="0.0790%" height="15" fill="rgb(242,107,0)" fg:x="50" fg:w="1"/><text x="4.1994%" y="511.50"></text></g><g><title>std::sys::unix::os::errno (1 samples, 0.08%)</title><rect x="3.9494%" y="485" width="0.0790%" height="15" fill="rgb(251,28,31)" fg:x="50" fg:w="1"/><text x="4.1994%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.55%)</title><rect x="3.6335%" y="629" width="0.5529%" height="15" fill="rgb(233,223,10)" fg:x="46" fg:w="7"/><text x="3.8835%" y="639.50"></text></g><g><title>glob::fill_todo (7 samples, 0.55%)</title><rect x="3.6335%" y="613" width="0.5529%" height="15" fill="rgb(215,21,27)" fg:x="46" fg:w="7"/><text x="3.8835%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="3.9494%" y="597" width="0.2370%" height="15" fill="rgb(232,23,21)" fg:x="50" fg:w="3"/><text x="4.1994%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="3.9494%" y="581" width="0.2370%" height="15" fill="rgb(244,5,23)" fg:x="50" fg:w="3"/><text x="4.1994%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="3.9494%" y="565" width="0.2370%" height="15" fill="rgb(226,81,46)" fg:x="50" fg:w="3"/><text x="4.1994%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="3.9494%" y="549" width="0.2370%" height="15" fill="rgb(247,70,30)" fg:x="50" fg:w="3"/><text x="4.1994%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="3.9494%" y="533" width="0.2370%" height="15" fill="rgb(212,68,19)" fg:x="50" fg:w="3"/><text x="4.1994%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="4.0284%" y="517" width="0.1580%" height="15" fill="rgb(240,187,13)" fg:x="51" fg:w="2"/><text x="4.2784%" y="527.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="4.0284%" y="501" width="0.1580%" height="15" fill="rgb(223,113,26)" fg:x="51" fg:w="2"/><text x="4.2784%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="4.1864%" y="629" width="0.0790%" height="15" fill="rgb(206,192,2)" fg:x="53" fg:w="1"/><text x="4.4364%" y="639.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.2654%" y="597" width="0.0790%" height="15" fill="rgb(241,108,4)" fg:x="54" fg:w="1"/><text x="4.5154%" y="607.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="4.2654%" y="581" width="0.0790%" height="15" fill="rgb(247,173,49)" fg:x="54" fg:w="1"/><text x="4.5154%" y="591.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (15 samples, 1.18%)</title><rect x="3.2385%" y="661" width="1.1848%" height="15" fill="rgb(224,114,35)" fg:x="41" fg:w="15"/><text x="3.4885%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (11 samples, 0.87%)</title><rect x="3.5545%" y="645" width="0.8689%" height="15" fill="rgb(245,159,27)" fg:x="45" fg:w="11"/><text x="3.8045%" y="655.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="4.2654%" y="629" width="0.1580%" height="15" fill="rgb(245,172,44)" fg:x="54" fg:w="2"/><text x="4.5154%" y="639.50"></text></g><g><title>glob::glob_with (2 samples, 0.16%)</title><rect x="4.2654%" y="613" width="0.1580%" height="15" fill="rgb(236,23,11)" fg:x="54" fg:w="2"/><text x="4.5154%" y="623.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="4.3444%" y="597" width="0.0790%" height="15" fill="rgb(205,117,38)" fg:x="55" fg:w="1"/><text x="4.5944%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.3444%" y="581" width="0.0790%" height="15" fill="rgb(237,72,25)" fg:x="55" fg:w="1"/><text x="4.5944%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.3444%" y="565" width="0.0790%" height="15" fill="rgb(244,70,9)" fg:x="55" fg:w="1"/><text x="4.5944%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.3444%" y="549" width="0.0790%" height="15" fill="rgb(217,125,39)" fg:x="55" fg:w="1"/><text x="4.5944%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5024%" y="581" width="0.0790%" height="15" fill="rgb(235,36,10)" fg:x="57" fg:w="1"/><text x="4.7524%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="4.5024%" y="597" width="0.1580%" height="15" fill="rgb(251,123,47)" fg:x="57" fg:w="2"/><text x="4.7524%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.5814%" y="581" width="0.0790%" height="15" fill="rgb(221,13,13)" fg:x="58" fg:w="1"/><text x="4.8314%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.5814%" y="565" width="0.0790%" height="15" fill="rgb(238,131,9)" fg:x="58" fg:w="1"/><text x="4.8314%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5814%" y="549" width="0.0790%" height="15" fill="rgb(211,50,8)" fg:x="58" fg:w="1"/><text x="4.8314%" y="559.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="4.4234%" y="629" width="0.3160%" height="15" fill="rgb(245,182,24)" fg:x="56" fg:w="4"/><text x="4.6734%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="4.4234%" y="613" width="0.3160%" height="15" fill="rgb(242,14,37)" fg:x="56" fg:w="4"/><text x="4.6734%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="4.6603%" y="597" width="0.0790%" height="15" fill="rgb(246,228,12)" fg:x="59" fg:w="1"/><text x="4.9103%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::actions::PutInsideAction as replies::DeserializeTagged&gt;::from_tagged_json (1 samples, 0.08%)</title><rect x="4.7393%" y="597" width="0.0790%" height="15" fill="rgb(213,55,15)" fg:x="60" fg:w="1"/><text x="4.9893%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="4.7393%" y="629" width="0.1580%" height="15" fill="rgb(209,9,3)" fg:x="60" fg:w="2"/><text x="4.9893%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="4.7393%" y="613" width="0.1580%" height="15" fill="rgb(230,59,30)" fg:x="60" fg:w="2"/><text x="4.9893%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.8183%" y="597" width="0.0790%" height="15" fill="rgb(209,121,21)" fg:x="61" fg:w="1"/><text x="5.0683%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.8973%" y="597" width="0.0790%" height="15" fill="rgb(220,109,13)" fg:x="62" fg:w="1"/><text x="5.1473%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.8973%" y="581" width="0.0790%" height="15" fill="rgb(232,18,1)" fg:x="62" fg:w="1"/><text x="5.1473%" y="591.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="4.8973%" y="629" width="0.1580%" height="15" fill="rgb(215,41,42)" fg:x="62" fg:w="2"/><text x="5.1473%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="4.8973%" y="613" width="0.1580%" height="15" fill="rgb(224,123,36)" fg:x="62" fg:w="2"/><text x="5.1473%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="4.9763%" y="597" width="0.0790%" height="15" fill="rgb(240,125,3)" fg:x="63" fg:w="1"/><text x="5.2263%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9763%" y="581" width="0.0790%" height="15" fill="rgb(205,98,50)" fg:x="63" fg:w="1"/><text x="5.2263%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.0553%" y="581" width="0.0790%" height="15" fill="rgb(205,185,37)" fg:x="64" fg:w="1"/><text x="5.3053%" y="591.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="5.0553%" y="629" width="0.1580%" height="15" fill="rgb(238,207,15)" fg:x="64" fg:w="2"/><text x="5.3053%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="5.0553%" y="613" width="0.1580%" height="15" fill="rgb(213,199,42)" fg:x="64" fg:w="2"/><text x="5.3053%" y="623.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="5.0553%" y="597" width="0.1580%" height="15" fill="rgb(235,201,11)" fg:x="64" fg:w="2"/><text x="5.3053%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.1343%" y="581" width="0.0790%" height="15" fill="rgb(207,46,11)" fg:x="65" fg:w="1"/><text x="5.3843%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="5.5292%" y="597" width="0.0790%" height="15" fill="rgb(241,35,35)" fg:x="70" fg:w="1"/><text x="5.7792%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="5.5292%" y="581" width="0.0790%" height="15" fill="rgb(243,32,47)" fg:x="70" fg:w="1"/><text x="5.7792%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (6 samples, 0.47%)</title><rect x="5.2133%" y="629" width="0.4739%" height="15" fill="rgb(247,202,23)" fg:x="66" fg:w="6"/><text x="5.4633%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.39%)</title><rect x="5.2923%" y="613" width="0.3949%" height="15" fill="rgb(219,102,11)" fg:x="67" fg:w="5"/><text x="5.5423%" y="623.50"></text></g><g><title>&lt;plugins_core::moving::actions::DeactivateRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="5.6082%" y="597" width="0.0790%" height="15" fill="rgb(243,110,44)" fg:x="71" fg:w="1"/><text x="5.8582%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="5.6082%" y="581" width="0.0790%" height="15" fill="rgb(222,74,54)" fg:x="71" fg:w="1"/><text x="5.8582%" y="591.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="5.6872%" y="629" width="0.0790%" height="15" fill="rgb(216,99,12)" fg:x="72" fg:w="1"/><text x="5.9372%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="5.6872%" y="613" width="0.0790%" height="15" fill="rgb(226,22,26)" fg:x="72" fg:w="1"/><text x="5.9372%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.6872%" y="597" width="0.0790%" height="15" fill="rgb(217,163,10)" fg:x="72" fg:w="1"/><text x="5.9372%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.6872%" y="581" width="0.0790%" height="15" fill="rgb(213,25,53)" fg:x="72" fg:w="1"/><text x="5.9372%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 1.42%)</title><rect x="4.4234%" y="645" width="1.4218%" height="15" fill="rgb(252,105,26)" fg:x="56" fg:w="18"/><text x="4.6734%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.7662%" y="629" width="0.0790%" height="15" fill="rgb(220,39,43)" fg:x="73" fg:w="1"/><text x="6.0162%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.7662%" y="613" width="0.0790%" height="15" fill="rgb(229,68,48)" fg:x="73" fg:w="1"/><text x="6.0162%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (19 samples, 1.50%)</title><rect x="4.4234%" y="661" width="1.5008%" height="15" fill="rgb(252,8,32)" fg:x="56" fg:w="19"/><text x="4.6734%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="5.8452%" y="645" width="0.0790%" height="15" fill="rgb(223,20,43)" fg:x="74" fg:w="1"/><text x="6.0952%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.9242%" y="661" width="0.0790%" height="15" fill="rgb(229,81,49)" fg:x="75" fg:w="1"/><text x="6.1742%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0032%" y="645" width="0.0790%" height="15" fill="rgb(236,28,36)" fg:x="76" fg:w="1"/><text x="6.2532%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="6.0032%" y="661" width="0.1580%" height="15" fill="rgb(249,185,26)" fg:x="76" fg:w="2"/><text x="6.2532%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="6.0821%" y="645" width="0.0790%" height="15" fill="rgb(249,174,33)" fg:x="77" fg:w="1"/><text x="6.3321%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0821%" y="629" width="0.0790%" height="15" fill="rgb(233,201,37)" fg:x="77" fg:w="1"/><text x="6.3321%" y="639.50"></text></g><g><title>engine::session::Session::initialize (45 samples, 3.55%)</title><rect x="2.6856%" y="693" width="3.5545%" height="15" fill="rgb(221,78,26)" fg:x="34" fg:w="45"/><text x="2.9356%" y="703.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::initialize (45 samples, 3.55%)</title><rect x="2.6856%" y="677" width="3.5545%" height="15" fill="rgb(250,127,30)" fg:x="34" fg:w="45"/><text x="2.9356%" y="687.50">kern..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="6.1611%" y="661" width="0.0790%" height="15" fill="rgb(230,49,44)" fg:x="78" fg:w="1"/><text x="6.4111%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="6.1611%" y="645" width="0.0790%" height="15" fill="rgb(229,67,23)" fg:x="78" fg:w="1"/><text x="6.4111%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (49 samples, 3.87%)</title><rect x="2.5276%" y="741" width="3.8705%" height="15" fill="rgb(249,83,47)" fg:x="32" fg:w="49"/><text x="2.7776%" y="751.50">&lt;eng..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (49 samples, 3.87%)</title><rect x="2.5276%" y="725" width="3.8705%" height="15" fill="rgb(215,43,3)" fg:x="32" fg:w="49"/><text x="2.7776%" y="735.50">engi..</text></g><g><title>engine::session::Session::new (49 samples, 3.87%)</title><rect x="2.5276%" y="709" width="3.8705%" height="15" fill="rgb(238,154,13)" fg:x="32" fg:w="49"/><text x="2.7776%" y="719.50">engi..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="6.2401%" y="693" width="0.1580%" height="15" fill="rgb(219,56,2)" fg:x="79" fg:w="2"/><text x="6.4901%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.2401%" y="677" width="0.1580%" height="15" fill="rgb(233,0,4)" fg:x="79" fg:w="2"/><text x="6.4901%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.3191%" y="661" width="0.0790%" height="15" fill="rgb(235,30,7)" fg:x="80" fg:w="1"/><text x="6.5691%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.3191%" y="645" width="0.0790%" height="15" fill="rgb(250,79,13)" fg:x="80" fg:w="1"/><text x="6.5691%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.3191%" y="629" width="0.0790%" height="15" fill="rgb(211,146,34)" fg:x="80" fg:w="1"/><text x="6.5691%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="6.3981%" y="725" width="0.1580%" height="15" fill="rgb(228,22,38)" fg:x="81" fg:w="2"/><text x="6.6481%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="6.4771%" y="709" width="0.0790%" height="15" fill="rgb(235,168,5)" fg:x="82" fg:w="1"/><text x="6.7271%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.4771%" y="693" width="0.0790%" height="15" fill="rgb(221,155,16)" fg:x="82" fg:w="1"/><text x="6.7271%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.4771%" y="677" width="0.0790%" height="15" fill="rgb(215,215,53)" fg:x="82" fg:w="1"/><text x="6.7271%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.4771%" y="661" width="0.0790%" height="15" fill="rgb(223,4,10)" fg:x="82" fg:w="1"/><text x="6.7271%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="6.5561%" y="661" width="0.0790%" height="15" fill="rgb(234,103,6)" fg:x="83" fg:w="1"/><text x="6.8061%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="6.5561%" y="645" width="0.0790%" height="15" fill="rgb(227,97,0)" fg:x="83" fg:w="1"/><text x="6.8061%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5561%" y="629" width="0.0790%" height="15" fill="rgb(234,150,53)" fg:x="83" fg:w="1"/><text x="6.8061%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5561%" y="613" width="0.0790%" height="15" fill="rgb(228,201,54)" fg:x="83" fg:w="1"/><text x="6.8061%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.5561%" y="597" width="0.0790%" height="15" fill="rgb(222,22,37)" fg:x="83" fg:w="1"/><text x="6.8061%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.5561%" y="581" width="0.0790%" height="15" fill="rgb(237,53,32)" fg:x="83" fg:w="1"/><text x="6.8061%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.5561%" y="565" width="0.0790%" height="15" fill="rgb(233,25,53)" fg:x="83" fg:w="1"/><text x="6.8061%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.5561%" y="549" width="0.0790%" height="15" fill="rgb(210,40,34)" fg:x="83" fg:w="1"/><text x="6.8061%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.5561%" y="533" width="0.0790%" height="15" fill="rgb(241,220,44)" fg:x="83" fg:w="1"/><text x="6.8061%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.5561%" y="677" width="0.1580%" height="15" fill="rgb(235,28,35)" fg:x="83" fg:w="2"/><text x="6.8061%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6351%" y="661" width="0.0790%" height="15" fill="rgb(210,56,17)" fg:x="84" fg:w="1"/><text x="6.8851%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="6.7141%" y="597" width="0.2370%" height="15" fill="rgb(224,130,29)" fg:x="85" fg:w="3"/><text x="6.9641%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="6.7930%" y="581" width="0.1580%" height="15" fill="rgb(235,212,8)" fg:x="86" fg:w="2"/><text x="7.0430%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="6.7930%" y="565" width="0.1580%" height="15" fill="rgb(223,33,50)" fg:x="86" fg:w="2"/><text x="7.0430%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="6.7141%" y="613" width="0.3160%" height="15" fill="rgb(219,149,13)" fg:x="85" fg:w="4"/><text x="6.9641%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9510%" y="597" width="0.0790%" height="15" fill="rgb(250,156,29)" fg:x="88" fg:w="1"/><text x="7.2010%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.0300%" y="613" width="0.0790%" height="15" fill="rgb(216,193,19)" fg:x="89" fg:w="1"/><text x="7.2800%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.47%)</title><rect x="6.7141%" y="629" width="0.4739%" height="15" fill="rgb(216,135,14)" fg:x="85" fg:w="6"/><text x="6.9641%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.1090%" y="613" width="0.0790%" height="15" fill="rgb(241,47,5)" fg:x="90" fg:w="1"/><text x="7.3590%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1090%" y="597" width="0.0790%" height="15" fill="rgb(233,42,35)" fg:x="90" fg:w="1"/><text x="7.3590%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="7.1880%" y="629" width="0.0790%" height="15" fill="rgb(231,13,6)" fg:x="91" fg:w="1"/><text x="7.4380%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.1880%" y="613" width="0.0790%" height="15" fill="rgb(207,181,40)" fg:x="91" fg:w="1"/><text x="7.4380%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.1880%" y="597" width="0.0790%" height="15" fill="rgb(254,173,49)" fg:x="91" fg:w="1"/><text x="7.4380%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.1880%" y="581" width="0.0790%" height="15" fill="rgb(221,1,38)" fg:x="91" fg:w="1"/><text x="7.4380%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.1880%" y="565" width="0.0790%" height="15" fill="rgb(206,124,46)" fg:x="91" fg:w="1"/><text x="7.4380%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.1880%" y="549" width="0.0790%" height="15" fill="rgb(249,21,11)" fg:x="91" fg:w="1"/><text x="7.4380%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.1880%" y="533" width="0.0790%" height="15" fill="rgb(222,201,40)" fg:x="91" fg:w="1"/><text x="7.4380%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.2670%" y="597" width="0.0790%" height="15" fill="rgb(235,61,29)" fg:x="92" fg:w="1"/><text x="7.5170%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.2670%" y="581" width="0.0790%" height="15" fill="rgb(219,207,3)" fg:x="92" fg:w="1"/><text x="7.5170%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="7.2670%" y="613" width="0.2370%" height="15" fill="rgb(222,56,46)" fg:x="92" fg:w="3"/><text x="7.5170%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.3460%" y="597" width="0.1580%" height="15" fill="rgb(239,76,54)" fg:x="93" fg:w="2"/><text x="7.5960%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.4250%" y="581" width="0.0790%" height="15" fill="rgb(231,124,27)" fg:x="94" fg:w="1"/><text x="7.6750%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.4250%" y="565" width="0.0790%" height="15" fill="rgb(249,195,6)" fg:x="94" fg:w="1"/><text x="7.6750%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.5829%" y="597" width="0.0790%" height="15" fill="rgb(237,174,47)" fg:x="96" fg:w="1"/><text x="7.8329%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.5829%" y="581" width="0.0790%" height="15" fill="rgb(206,201,31)" fg:x="96" fg:w="1"/><text x="7.8329%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.5829%" y="565" width="0.0790%" height="15" fill="rgb(231,57,52)" fg:x="96" fg:w="1"/><text x="7.8329%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.5829%" y="549" width="0.0790%" height="15" fill="rgb(248,177,22)" fg:x="96" fg:w="1"/><text x="7.8329%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.5829%" y="533" width="0.0790%" height="15" fill="rgb(215,211,37)" fg:x="96" fg:w="1"/><text x="7.8329%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.5829%" y="517" width="0.0790%" height="15" fill="rgb(241,128,51)" fg:x="96" fg:w="1"/><text x="7.8329%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.5829%" y="501" width="0.0790%" height="15" fill="rgb(227,165,31)" fg:x="96" fg:w="1"/><text x="7.8329%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="7.6619%" y="581" width="0.1580%" height="15" fill="rgb(228,167,24)" fg:x="97" fg:w="2"/><text x="7.9119%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.6619%" y="565" width="0.1580%" height="15" fill="rgb(228,143,12)" fg:x="97" fg:w="2"/><text x="7.9119%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.6619%" y="549" width="0.1580%" height="15" fill="rgb(249,149,8)" fg:x="97" fg:w="2"/><text x="7.9119%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.6619%" y="533" width="0.1580%" height="15" fill="rgb(243,35,44)" fg:x="97" fg:w="2"/><text x="7.9119%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7409%" y="517" width="0.0790%" height="15" fill="rgb(246,89,9)" fg:x="98" fg:w="1"/><text x="7.9909%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.7409%" y="501" width="0.0790%" height="15" fill="rgb(233,213,13)" fg:x="98" fg:w="1"/><text x="7.9909%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7409%" y="485" width="0.0790%" height="15" fill="rgb(233,141,41)" fg:x="98" fg:w="1"/><text x="7.9909%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7409%" y="469" width="0.0790%" height="15" fill="rgb(239,167,4)" fg:x="98" fg:w="1"/><text x="7.9909%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.7409%" y="453" width="0.0790%" height="15" fill="rgb(209,217,16)" fg:x="98" fg:w="1"/><text x="7.9909%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="7.8199%" y="565" width="0.2370%" height="15" fill="rgb(219,88,35)" fg:x="99" fg:w="3"/><text x="8.0699%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="7.8199%" y="549" width="0.2370%" height="15" fill="rgb(220,193,23)" fg:x="99" fg:w="3"/><text x="8.0699%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.8989%" y="533" width="0.1580%" height="15" fill="rgb(230,90,52)" fg:x="100" fg:w="2"/><text x="8.1489%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.9779%" y="517" width="0.0790%" height="15" fill="rgb(252,106,19)" fg:x="101" fg:w="1"/><text x="8.2279%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.0569%" y="549" width="0.0790%" height="15" fill="rgb(206,74,20)" fg:x="102" fg:w="1"/><text x="8.3069%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0569%" y="533" width="0.0790%" height="15" fill="rgb(230,138,44)" fg:x="102" fg:w="1"/><text x="8.3069%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0569%" y="517" width="0.0790%" height="15" fill="rgb(235,182,43)" fg:x="102" fg:w="1"/><text x="8.3069%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.0569%" y="501" width="0.0790%" height="15" fill="rgb(242,16,51)" fg:x="102" fg:w="1"/><text x="8.3069%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.0569%" y="485" width="0.0790%" height="15" fill="rgb(248,9,4)" fg:x="102" fg:w="1"/><text x="8.3069%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.0569%" y="469" width="0.0790%" height="15" fill="rgb(210,31,22)" fg:x="102" fg:w="1"/><text x="8.3069%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.0569%" y="453" width="0.0790%" height="15" fill="rgb(239,54,39)" fg:x="102" fg:w="1"/><text x="8.3069%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="7.5039%" y="613" width="0.7109%" height="15" fill="rgb(230,99,41)" fg:x="95" fg:w="9"/><text x="7.7539%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="7.6619%" y="597" width="0.5529%" height="15" fill="rgb(253,106,12)" fg:x="97" fg:w="7"/><text x="7.9119%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="7.8199%" y="581" width="0.3949%" height="15" fill="rgb(213,46,41)" fg:x="99" fg:w="5"/><text x="8.0699%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.0569%" y="565" width="0.1580%" height="15" fill="rgb(215,133,35)" fg:x="102" fg:w="2"/><text x="8.3069%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1359%" y="549" width="0.0790%" height="15" fill="rgb(213,28,5)" fg:x="103" fg:w="1"/><text x="8.3859%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.03%)</title><rect x="7.2670%" y="629" width="1.0269%" height="15" fill="rgb(215,77,49)" fg:x="92" fg:w="13"/><text x="7.5170%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2148%" y="613" width="0.0790%" height="15" fill="rgb(248,100,22)" fg:x="104" fg:w="1"/><text x="8.4648%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.2148%" y="597" width="0.0790%" height="15" fill="rgb(208,67,9)" fg:x="104" fg:w="1"/><text x="8.4648%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.2148%" y="581" width="0.0790%" height="15" fill="rgb(219,133,21)" fg:x="104" fg:w="1"/><text x="8.4648%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3728%" y="581" width="0.0790%" height="15" fill="rgb(246,46,29)" fg:x="106" fg:w="1"/><text x="8.6228%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4518%" y="581" width="0.0790%" height="15" fill="rgb(246,185,52)" fg:x="107" fg:w="1"/><text x="8.7018%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.4518%" y="565" width="0.0790%" height="15" fill="rgb(252,136,11)" fg:x="107" fg:w="1"/><text x="8.7018%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5308%" y="533" width="0.0790%" height="15" fill="rgb(219,138,53)" fg:x="108" fg:w="1"/><text x="8.7808%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="8.6888%" y="469" width="0.2370%" height="15" fill="rgb(211,51,23)" fg:x="110" fg:w="3"/><text x="8.9388%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8468%" y="453" width="0.0790%" height="15" fill="rgb(247,221,28)" fg:x="112" fg:w="1"/><text x="9.0968%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="8.6888%" y="485" width="0.3160%" height="15" fill="rgb(251,222,45)" fg:x="110" fg:w="4"/><text x="8.9388%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.9258%" y="469" width="0.0790%" height="15" fill="rgb(217,162,53)" fg:x="113" fg:w="1"/><text x="9.1758%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9258%" y="453" width="0.0790%" height="15" fill="rgb(229,93,14)" fg:x="113" fg:w="1"/><text x="9.1758%" y="463.50"></text></g><g><title>engine::session::Session::flush (33 samples, 2.61%)</title><rect x="6.5561%" y="725" width="2.6066%" height="15" fill="rgb(209,67,49)" fg:x="83" fg:w="33"/><text x="6.8061%" y="735.50">en..</text></g><g><title>engine::session::state::State::close (33 samples, 2.61%)</title><rect x="6.5561%" y="709" width="2.6066%" height="15" fill="rgb(213,87,29)" fg:x="83" fg:w="33"/><text x="6.8061%" y="719.50">en..</text></g><g><title>engine::session::state::State::flush_entities (33 samples, 2.61%)</title><rect x="6.5561%" y="693" width="2.6066%" height="15" fill="rgb(205,151,52)" fg:x="83" fg:w="33"/><text x="6.8061%" y="703.50">en..</text></g><g><title>core::iter::adapters::try_process (31 samples, 2.45%)</title><rect x="6.7141%" y="677" width="2.4487%" height="15" fill="rgb(253,215,39)" fg:x="85" fg:w="31"/><text x="6.9641%" y="687.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (31 samples, 2.45%)</title><rect x="6.7141%" y="661" width="2.4487%" height="15" fill="rgb(221,220,41)" fg:x="85" fg:w="31"/><text x="6.9641%" y="671.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (31 samples, 2.45%)</title><rect x="6.7141%" y="645" width="2.4487%" height="15" fill="rgb(218,133,21)" fg:x="85" fg:w="31"/><text x="6.9641%" y="655.50">en..</text></g><g><title>kernel::model::any_entity_changes (11 samples, 0.87%)</title><rect x="8.2938%" y="629" width="0.8689%" height="15" fill="rgb(221,193,43)" fg:x="105" fg:w="11"/><text x="8.5438%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.87%)</title><rect x="8.2938%" y="613" width="0.8689%" height="15" fill="rgb(240,128,52)" fg:x="105" fg:w="11"/><text x="8.5438%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.87%)</title><rect x="8.2938%" y="597" width="0.8689%" height="15" fill="rgb(253,114,12)" fg:x="105" fg:w="11"/><text x="8.5438%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.63%)</title><rect x="8.5308%" y="581" width="0.6319%" height="15" fill="rgb(215,223,47)" fg:x="108" fg:w="8"/><text x="8.7808%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.63%)</title><rect x="8.5308%" y="565" width="0.6319%" height="15" fill="rgb(248,225,23)" fg:x="108" fg:w="8"/><text x="8.7808%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.63%)</title><rect x="8.5308%" y="549" width="0.6319%" height="15" fill="rgb(250,108,0)" fg:x="108" fg:w="8"/><text x="8.7808%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.55%)</title><rect x="8.6098%" y="533" width="0.5529%" height="15" fill="rgb(228,208,7)" fg:x="109" fg:w="7"/><text x="8.8598%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.47%)</title><rect x="8.6888%" y="517" width="0.4739%" height="15" fill="rgb(244,45,10)" fg:x="110" fg:w="6"/><text x="8.9388%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.47%)</title><rect x="8.6888%" y="501" width="0.4739%" height="15" fill="rgb(207,125,25)" fg:x="110" fg:w="6"/><text x="8.9388%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="9.0047%" y="485" width="0.1580%" height="15" fill="rgb(210,195,18)" fg:x="114" fg:w="2"/><text x="9.2547%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.1627%" y="645" width="0.0790%" height="15" fill="rgb(249,80,12)" fg:x="116" fg:w="1"/><text x="9.4127%" y="655.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="9.1627%" y="725" width="0.1580%" height="15" fill="rgb(221,65,9)" fg:x="116" fg:w="2"/><text x="9.4127%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="9.1627%" y="709" width="0.1580%" height="15" fill="rgb(235,49,36)" fg:x="116" fg:w="2"/><text x="9.4127%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="9.1627%" y="693" width="0.1580%" height="15" fill="rgb(225,32,20)" fg:x="116" fg:w="2"/><text x="9.4127%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="9.1627%" y="677" width="0.1580%" height="15" fill="rgb(215,141,46)" fg:x="116" fg:w="2"/><text x="9.4127%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.1627%" y="661" width="0.1580%" height="15" fill="rgb(250,160,47)" fg:x="116" fg:w="2"/><text x="9.4127%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.2417%" y="645" width="0.0790%" height="15" fill="rgb(216,222,40)" fg:x="117" fg:w="1"/><text x="9.4917%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2417%" y="629" width="0.0790%" height="15" fill="rgb(234,217,39)" fg:x="117" fg:w="1"/><text x="9.4917%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.3207%" y="693" width="0.0790%" height="15" fill="rgb(207,178,40)" fg:x="118" fg:w="1"/><text x="9.5707%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.3997%" y="693" width="0.0790%" height="15" fill="rgb(221,136,13)" fg:x="119" fg:w="1"/><text x="9.6497%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.3997%" y="677" width="0.0790%" height="15" fill="rgb(249,199,10)" fg:x="119" fg:w="1"/><text x="9.6497%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.3997%" y="661" width="0.0790%" height="15" fill="rgb(249,222,13)" fg:x="119" fg:w="1"/><text x="9.6497%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.3997%" y="645" width="0.0790%" height="15" fill="rgb(244,185,38)" fg:x="119" fg:w="1"/><text x="9.6497%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.3997%" y="629" width="0.0790%" height="15" fill="rgb(236,202,9)" fg:x="119" fg:w="1"/><text x="9.6497%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.3997%" y="613" width="0.0790%" height="15" fill="rgb(250,229,37)" fg:x="119" fg:w="1"/><text x="9.6497%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.3997%" y="597" width="0.0790%" height="15" fill="rgb(206,174,23)" fg:x="119" fg:w="1"/><text x="9.6497%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.3997%" y="581" width="0.0790%" height="15" fill="rgb(211,33,43)" fg:x="119" fg:w="1"/><text x="9.6497%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.3997%" y="565" width="0.0790%" height="15" fill="rgb(245,58,50)" fg:x="119" fg:w="1"/><text x="9.6497%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.3997%" y="549" width="0.0790%" height="15" fill="rgb(244,68,36)" fg:x="119" fg:w="1"/><text x="9.6497%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.3997%" y="533" width="0.0790%" height="15" fill="rgb(232,229,15)" fg:x="119" fg:w="1"/><text x="9.6497%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.3997%" y="517" width="0.0790%" height="15" fill="rgb(254,30,23)" fg:x="119" fg:w="1"/><text x="9.6497%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.3997%" y="501" width="0.0790%" height="15" fill="rgb(235,160,14)" fg:x="119" fg:w="1"/><text x="9.6497%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.3997%" y="485" width="0.0790%" height="15" fill="rgb(212,155,44)" fg:x="119" fg:w="1"/><text x="9.6497%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.3997%" y="469" width="0.0790%" height="15" fill="rgb(226,2,50)" fg:x="119" fg:w="1"/><text x="9.6497%" y="479.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="9.4787%" y="677" width="0.0790%" height="15" fill="rgb(234,177,6)" fg:x="120" fg:w="1"/><text x="9.7287%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.4787%" y="661" width="0.0790%" height="15" fill="rgb(217,24,9)" fg:x="120" fg:w="1"/><text x="9.7287%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.4787%" y="645" width="0.0790%" height="15" fill="rgb(220,13,46)" fg:x="120" fg:w="1"/><text x="9.7287%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="9.5577%" y="661" width="0.0790%" height="15" fill="rgb(239,221,27)" fg:x="121" fg:w="1"/><text x="9.8077%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.5577%" y="645" width="0.0790%" height="15" fill="rgb(222,198,25)" fg:x="121" fg:w="1"/><text x="9.8077%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="9.5577%" y="629" width="0.0790%" height="15" fill="rgb(211,99,13)" fg:x="121" fg:w="1"/><text x="9.8077%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="9.4787%" y="693" width="0.2370%" height="15" fill="rgb(232,111,31)" fg:x="120" fg:w="3"/><text x="9.7287%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="9.5577%" y="677" width="0.1580%" height="15" fill="rgb(245,82,37)" fg:x="121" fg:w="2"/><text x="9.8077%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="9.6367%" y="661" width="0.0790%" height="15" fill="rgb(227,149,46)" fg:x="122" fg:w="1"/><text x="9.8867%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="9.7156%" y="645" width="0.0790%" height="15" fill="rgb(218,36,50)" fg:x="123" fg:w="1"/><text x="9.9656%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.7156%" y="629" width="0.0790%" height="15" fill="rgb(226,80,48)" fg:x="123" fg:w="1"/><text x="9.9656%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.7156%" y="613" width="0.0790%" height="15" fill="rgb(238,224,15)" fg:x="123" fg:w="1"/><text x="9.9656%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.7156%" y="597" width="0.0790%" height="15" fill="rgb(241,136,10)" fg:x="123" fg:w="1"/><text x="9.9656%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.7156%" y="581" width="0.0790%" height="15" fill="rgb(208,32,45)" fg:x="123" fg:w="1"/><text x="9.9656%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="9.7156%" y="677" width="0.2370%" height="15" fill="rgb(207,135,9)" fg:x="123" fg:w="3"/><text x="9.9656%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="9.7156%" y="661" width="0.2370%" height="15" fill="rgb(206,86,44)" fg:x="123" fg:w="3"/><text x="9.9656%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="9.7946%" y="645" width="0.1580%" height="15" fill="rgb(245,177,15)" fg:x="124" fg:w="2"/><text x="10.0446%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="9.7946%" y="629" width="0.1580%" height="15" fill="rgb(206,64,50)" fg:x="124" fg:w="2"/><text x="10.0446%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="9.7946%" y="613" width="0.1580%" height="15" fill="rgb(234,36,40)" fg:x="124" fg:w="2"/><text x="10.0446%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8736%" y="597" width="0.0790%" height="15" fill="rgb(213,64,8)" fg:x="125" fg:w="1"/><text x="10.1236%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.8736%" y="581" width="0.0790%" height="15" fill="rgb(210,75,36)" fg:x="125" fg:w="1"/><text x="10.1236%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8736%" y="565" width="0.0790%" height="15" fill="rgb(229,88,21)" fg:x="125" fg:w="1"/><text x="10.1236%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="9.9526%" y="677" width="0.0790%" height="15" fill="rgb(252,204,47)" fg:x="126" fg:w="1"/><text x="10.2026%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9526%" y="661" width="0.0790%" height="15" fill="rgb(208,77,27)" fg:x="126" fg:w="1"/><text x="10.2026%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (12 samples, 0.95%)</title><rect x="9.3207%" y="709" width="0.9479%" height="15" fill="rgb(221,76,26)" fg:x="118" fg:w="12"/><text x="9.5707%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.55%)</title><rect x="9.7156%" y="693" width="0.5529%" height="15" fill="rgb(225,139,18)" fg:x="123" fg:w="7"/><text x="9.9656%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="10.0316%" y="677" width="0.2370%" height="15" fill="rgb(230,137,11)" fg:x="127" fg:w="3"/><text x="10.2816%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="10.0316%" y="661" width="0.2370%" height="15" fill="rgb(212,28,1)" fg:x="127" fg:w="3"/><text x="10.2816%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="10.0316%" y="645" width="0.2370%" height="15" fill="rgb(248,164,17)" fg:x="127" fg:w="3"/><text x="10.2816%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1896%" y="629" width="0.0790%" height="15" fill="rgb(222,171,42)" fg:x="129" fg:w="1"/><text x="10.4396%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.1896%" y="613" width="0.0790%" height="15" fill="rgb(243,84,45)" fg:x="129" fg:w="1"/><text x="10.4396%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.03%)</title><rect x="9.3207%" y="725" width="1.0269%" height="15" fill="rgb(252,49,23)" fg:x="118" fg:w="13"/><text x="9.5707%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="10.2686%" y="709" width="0.0790%" height="15" fill="rgb(215,19,7)" fg:x="130" fg:w="1"/><text x="10.5186%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.2686%" y="693" width="0.0790%" height="15" fill="rgb(238,81,41)" fg:x="130" fg:w="1"/><text x="10.5186%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2686%" y="677" width="0.0790%" height="15" fill="rgb(210,199,37)" fg:x="130" fg:w="1"/><text x="10.5186%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.2686%" y="661" width="0.0790%" height="15" fill="rgb(244,192,49)" fg:x="130" fg:w="1"/><text x="10.5186%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2686%" y="645" width="0.0790%" height="15" fill="rgb(226,211,11)" fg:x="130" fg:w="1"/><text x="10.5186%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.2686%" y="629" width="0.0790%" height="15" fill="rgb(236,162,54)" fg:x="130" fg:w="1"/><text x="10.5186%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2686%" y="613" width="0.0790%" height="15" fill="rgb(220,229,9)" fg:x="130" fg:w="1"/><text x="10.5186%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="10.3476%" y="725" width="0.1580%" height="15" fill="rgb(250,87,22)" fg:x="131" fg:w="2"/><text x="10.5976%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="10.3476%" y="709" width="0.1580%" height="15" fill="rgb(239,43,17)" fg:x="131" fg:w="2"/><text x="10.5976%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="10.3476%" y="693" width="0.1580%" height="15" fill="rgb(231,177,25)" fg:x="131" fg:w="2"/><text x="10.5976%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="10.3476%" y="677" width="0.1580%" height="15" fill="rgb(219,179,1)" fg:x="131" fg:w="2"/><text x="10.5976%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="10.3476%" y="661" width="0.1580%" height="15" fill="rgb(238,219,53)" fg:x="131" fg:w="2"/><text x="10.5976%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="10.4265%" y="645" width="0.0790%" height="15" fill="rgb(232,167,36)" fg:x="132" fg:w="1"/><text x="10.6765%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.4265%" y="629" width="0.0790%" height="15" fill="rgb(244,19,51)" fg:x="132" fg:w="1"/><text x="10.6765%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.4265%" y="613" width="0.0790%" height="15" fill="rgb(224,6,22)" fg:x="132" fg:w="1"/><text x="10.6765%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.4265%" y="597" width="0.0790%" height="15" fill="rgb(224,145,5)" fg:x="132" fg:w="1"/><text x="10.6765%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4265%" y="581" width="0.0790%" height="15" fill="rgb(234,130,49)" fg:x="132" fg:w="1"/><text x="10.6765%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5055%" y="661" width="0.0790%" height="15" fill="rgb(254,6,2)" fg:x="133" fg:w="1"/><text x="10.7555%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="10.5055%" y="693" width="0.1580%" height="15" fill="rgb(208,96,46)" fg:x="133" fg:w="2"/><text x="10.7555%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="10.5055%" y="677" width="0.1580%" height="15" fill="rgb(239,3,39)" fg:x="133" fg:w="2"/><text x="10.7555%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="10.5845%" y="661" width="0.0790%" height="15" fill="rgb(233,210,1)" fg:x="134" fg:w="1"/><text x="10.8345%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.6635%" y="677" width="0.0790%" height="15" fill="rgb(244,137,37)" fg:x="135" fg:w="1"/><text x="10.9135%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6635%" y="661" width="0.0790%" height="15" fill="rgb(240,136,2)" fg:x="135" fg:w="1"/><text x="10.9135%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6635%" y="645" width="0.0790%" height="15" fill="rgb(239,18,37)" fg:x="135" fg:w="1"/><text x="10.9135%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6635%" y="629" width="0.0790%" height="15" fill="rgb(218,185,22)" fg:x="135" fg:w="1"/><text x="10.9135%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.6635%" y="613" width="0.0790%" height="15" fill="rgb(225,218,4)" fg:x="135" fg:w="1"/><text x="10.9135%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.6635%" y="597" width="0.0790%" height="15" fill="rgb(230,182,32)" fg:x="135" fg:w="1"/><text x="10.9135%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.6635%" y="581" width="0.0790%" height="15" fill="rgb(242,56,43)" fg:x="135" fg:w="1"/><text x="10.9135%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.6635%" y="565" width="0.0790%" height="15" fill="rgb(233,99,24)" fg:x="135" fg:w="1"/><text x="10.9135%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.6635%" y="549" width="0.0790%" height="15" fill="rgb(234,209,42)" fg:x="135" fg:w="1"/><text x="10.9135%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.6635%" y="533" width="0.0790%" height="15" fill="rgb(227,7,12)" fg:x="135" fg:w="1"/><text x="10.9135%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.6635%" y="517" width="0.0790%" height="15" fill="rgb(245,203,43)" fg:x="135" fg:w="1"/><text x="10.9135%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.6635%" y="501" width="0.0790%" height="15" fill="rgb(238,205,33)" fg:x="135" fg:w="1"/><text x="10.9135%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.6635%" y="485" width="0.0790%" height="15" fill="rgb(231,56,7)" fg:x="135" fg:w="1"/><text x="10.9135%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6635%" y="469" width="0.0790%" height="15" fill="rgb(244,186,29)" fg:x="135" fg:w="1"/><text x="10.9135%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="10.7425%" y="677" width="0.0790%" height="15" fill="rgb(234,111,31)" fg:x="136" fg:w="1"/><text x="10.9925%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.7425%" y="661" width="0.0790%" height="15" fill="rgb(241,149,10)" fg:x="136" fg:w="1"/><text x="10.9925%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (5 samples, 0.39%)</title><rect x="10.5055%" y="725" width="0.3949%" height="15" fill="rgb(249,206,44)" fg:x="133" fg:w="5"/><text x="10.7555%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.39%)</title><rect x="10.5055%" y="709" width="0.3949%" height="15" fill="rgb(251,153,30)" fg:x="133" fg:w="5"/><text x="10.7555%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="10.6635%" y="693" width="0.2370%" height="15" fill="rgb(239,152,38)" fg:x="135" fg:w="3"/><text x="10.9135%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="10.8215%" y="677" width="0.0790%" height="15" fill="rgb(249,139,47)" fg:x="137" fg:w="1"/><text x="11.0715%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="10.8215%" y="661" width="0.0790%" height="15" fill="rgb(244,64,35)" fg:x="137" fg:w="1"/><text x="11.0715%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.8215%" y="645" width="0.0790%" height="15" fill="rgb(216,46,15)" fg:x="137" fg:w="1"/><text x="11.0715%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.8215%" y="629" width="0.0790%" height="15" fill="rgb(250,74,19)" fg:x="137" fg:w="1"/><text x="11.0715%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.8215%" y="613" width="0.0790%" height="15" fill="rgb(249,42,33)" fg:x="137" fg:w="1"/><text x="11.0715%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.8215%" y="597" width="0.0790%" height="15" fill="rgb(242,149,17)" fg:x="137" fg:w="1"/><text x="11.0715%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.8215%" y="581" width="0.0790%" height="15" fill="rgb(244,29,21)" fg:x="137" fg:w="1"/><text x="11.0715%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="10.8215%" y="565" width="0.0790%" height="15" fill="rgb(220,130,37)" fg:x="137" fg:w="1"/><text x="11.0715%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="10.8215%" y="549" width="0.0790%" height="15" fill="rgb(211,67,2)" fg:x="137" fg:w="1"/><text x="11.0715%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="10.9795%" y="709" width="0.0790%" height="15" fill="rgb(235,68,52)" fg:x="139" fg:w="1"/><text x="11.2295%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9795%" y="693" width="0.0790%" height="15" fill="rgb(246,142,3)" fg:x="139" fg:w="1"/><text x="11.2295%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.9795%" y="677" width="0.0790%" height="15" fill="rgb(241,25,7)" fg:x="139" fg:w="1"/><text x="11.2295%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="11.0585%" y="709" width="0.0790%" height="15" fill="rgb(242,119,39)" fg:x="140" fg:w="1"/><text x="11.3085%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.2164%" y="645" width="0.0790%" height="15" fill="rgb(241,98,45)" fg:x="142" fg:w="1"/><text x="11.4664%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.2954%" y="645" width="0.0790%" height="15" fill="rgb(254,28,30)" fg:x="143" fg:w="1"/><text x="11.5454%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="11.2954%" y="629" width="0.0790%" height="15" fill="rgb(241,142,54)" fg:x="143" fg:w="1"/><text x="11.5454%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="11.2954%" y="613" width="0.0790%" height="15" fill="rgb(222,85,15)" fg:x="143" fg:w="1"/><text x="11.5454%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="11.3744%" y="581" width="0.3949%" height="15" fill="rgb(210,85,47)" fg:x="144" fg:w="5"/><text x="11.6244%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="11.4534%" y="565" width="0.3160%" height="15" fill="rgb(224,206,25)" fg:x="145" fg:w="4"/><text x="11.7034%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.32%)</title><rect x="11.4534%" y="549" width="0.3160%" height="15" fill="rgb(243,201,19)" fg:x="145" fg:w="4"/><text x="11.7034%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.6904%" y="533" width="0.0790%" height="15" fill="rgb(236,59,4)" fg:x="148" fg:w="1"/><text x="11.9404%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.7694%" y="581" width="0.0790%" height="15" fill="rgb(254,179,45)" fg:x="149" fg:w="1"/><text x="12.0194%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.55%)</title><rect x="11.3744%" y="597" width="0.5529%" height="15" fill="rgb(226,14,10)" fg:x="144" fg:w="7"/><text x="11.6244%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.8483%" y="581" width="0.0790%" height="15" fill="rgb(244,27,41)" fg:x="150" fg:w="1"/><text x="12.0983%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.8483%" y="565" width="0.0790%" height="15" fill="rgb(235,35,32)" fg:x="150" fg:w="1"/><text x="12.0983%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.9273%" y="533" width="0.0790%" height="15" fill="rgb(218,68,31)" fg:x="151" fg:w="1"/><text x="12.1773%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.9273%" y="517" width="0.0790%" height="15" fill="rgb(207,120,37)" fg:x="151" fg:w="1"/><text x="12.1773%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.9273%" y="501" width="0.0790%" height="15" fill="rgb(227,98,0)" fg:x="151" fg:w="1"/><text x="12.1773%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.9273%" y="485" width="0.0790%" height="15" fill="rgb(207,7,3)" fg:x="151" fg:w="1"/><text x="12.1773%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="11.9273%" y="597" width="0.1580%" height="15" fill="rgb(206,98,19)" fg:x="151" fg:w="2"/><text x="12.1773%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="11.9273%" y="581" width="0.1580%" height="15" fill="rgb(217,5,26)" fg:x="151" fg:w="2"/><text x="12.1773%" y="591.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="11.9273%" y="565" width="0.1580%" height="15" fill="rgb(235,190,38)" fg:x="151" fg:w="2"/><text x="12.1773%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="11.9273%" y="549" width="0.1580%" height="15" fill="rgb(247,86,24)" fg:x="151" fg:w="2"/><text x="12.1773%" y="559.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="12.0063%" y="533" width="0.0790%" height="15" fill="rgb(205,101,16)" fg:x="152" fg:w="1"/><text x="12.2563%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="12.0853%" y="565" width="0.3160%" height="15" fill="rgb(246,168,33)" fg:x="153" fg:w="4"/><text x="12.3353%" y="575.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="12.0853%" y="549" width="0.3160%" height="15" fill="rgb(231,114,1)" fg:x="153" fg:w="4"/><text x="12.3353%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.2433%" y="533" width="0.1580%" height="15" fill="rgb(207,184,53)" fg:x="155" fg:w="2"/><text x="12.4933%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="12.2433%" y="517" width="0.1580%" height="15" fill="rgb(224,95,51)" fg:x="155" fg:w="2"/><text x="12.4933%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="12.2433%" y="501" width="0.1580%" height="15" fill="rgb(212,188,45)" fg:x="155" fg:w="2"/><text x="12.4933%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="12.2433%" y="485" width="0.1580%" height="15" fill="rgb(223,154,38)" fg:x="155" fg:w="2"/><text x="12.4933%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="12.2433%" y="469" width="0.1580%" height="15" fill="rgb(251,22,52)" fg:x="155" fg:w="2"/><text x="12.4933%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.39%)</title><rect x="12.0853%" y="581" width="0.3949%" height="15" fill="rgb(229,209,22)" fg:x="153" fg:w="5"/><text x="12.3353%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.4013%" y="565" width="0.0790%" height="15" fill="rgb(234,138,34)" fg:x="157" fg:w="1"/><text x="12.6513%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.4013%" y="549" width="0.0790%" height="15" fill="rgb(212,95,11)" fg:x="157" fg:w="1"/><text x="12.6513%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.4013%" y="533" width="0.0790%" height="15" fill="rgb(240,179,47)" fg:x="157" fg:w="1"/><text x="12.6513%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.5592%" y="565" width="0.0790%" height="15" fill="rgb(240,163,11)" fg:x="159" fg:w="1"/><text x="12.8092%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.5592%" y="549" width="0.0790%" height="15" fill="rgb(236,37,12)" fg:x="159" fg:w="1"/><text x="12.8092%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.5592%" y="533" width="0.0790%" height="15" fill="rgb(232,164,16)" fg:x="159" fg:w="1"/><text x="12.8092%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.5592%" y="517" width="0.0790%" height="15" fill="rgb(244,205,15)" fg:x="159" fg:w="1"/><text x="12.8092%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="12.6382%" y="549" width="0.0790%" height="15" fill="rgb(223,117,47)" fg:x="160" fg:w="1"/><text x="12.8882%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.6382%" y="533" width="0.0790%" height="15" fill="rgb(244,107,35)" fg:x="160" fg:w="1"/><text x="12.8882%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.6382%" y="517" width="0.0790%" height="15" fill="rgb(205,140,8)" fg:x="160" fg:w="1"/><text x="12.8882%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.6382%" y="501" width="0.0790%" height="15" fill="rgb(228,84,46)" fg:x="160" fg:w="1"/><text x="12.8882%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.6382%" y="485" width="0.0790%" height="15" fill="rgb(254,188,9)" fg:x="160" fg:w="1"/><text x="12.8882%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.47%)</title><rect x="12.9542%" y="533" width="0.4739%" height="15" fill="rgb(206,112,54)" fg:x="164" fg:w="6"/><text x="13.2042%" y="543.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.39%)</title><rect x="13.0332%" y="517" width="0.3949%" height="15" fill="rgb(216,84,49)" fg:x="165" fg:w="5"/><text x="13.2832%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="13.1122%" y="501" width="0.3160%" height="15" fill="rgb(214,194,35)" fg:x="166" fg:w="4"/><text x="13.3622%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="13.1122%" y="485" width="0.3160%" height="15" fill="rgb(249,28,3)" fg:x="166" fg:w="4"/><text x="13.3622%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="13.1122%" y="469" width="0.3160%" height="15" fill="rgb(222,56,52)" fg:x="166" fg:w="4"/><text x="13.3622%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="13.1122%" y="453" width="0.3160%" height="15" fill="rgb(245,217,50)" fg:x="166" fg:w="4"/><text x="13.3622%" y="463.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="13.1122%" y="437" width="0.3160%" height="15" fill="rgb(213,201,24)" fg:x="166" fg:w="4"/><text x="13.3622%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="13.4281%" y="517" width="0.2370%" height="15" fill="rgb(248,116,28)" fg:x="170" fg:w="3"/><text x="13.6781%" y="527.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="13.4281%" y="501" width="0.2370%" height="15" fill="rgb(219,72,43)" fg:x="170" fg:w="3"/><text x="13.6781%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="13.4281%" y="485" width="0.2370%" height="15" fill="rgb(209,138,14)" fg:x="170" fg:w="3"/><text x="13.6781%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="13.4281%" y="469" width="0.2370%" height="15" fill="rgb(222,18,33)" fg:x="170" fg:w="3"/><text x="13.6781%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="13.5071%" y="453" width="0.1580%" height="15" fill="rgb(213,199,7)" fg:x="171" fg:w="2"/><text x="13.7571%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="13.5071%" y="437" width="0.1580%" height="15" fill="rgb(250,110,10)" fg:x="171" fg:w="2"/><text x="13.7571%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="13.5071%" y="421" width="0.1580%" height="15" fill="rgb(248,123,6)" fg:x="171" fg:w="2"/><text x="13.7571%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="13.6651%" y="517" width="0.0790%" height="15" fill="rgb(206,91,31)" fg:x="173" fg:w="1"/><text x="13.9151%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.18%)</title><rect x="12.6382%" y="565" width="1.1848%" height="15" fill="rgb(211,154,13)" fg:x="160" fg:w="15"/><text x="12.8882%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.11%)</title><rect x="12.7172%" y="549" width="1.1058%" height="15" fill="rgb(225,148,7)" fg:x="161" fg:w="14"/><text x="12.9672%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="13.4281%" y="533" width="0.3949%" height="15" fill="rgb(220,160,43)" fg:x="170" fg:w="5"/><text x="13.6781%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.7441%" y="517" width="0.0790%" height="15" fill="rgb(213,52,39)" fg:x="174" fg:w="1"/><text x="13.9941%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (24 samples, 1.90%)</title><rect x="12.0853%" y="597" width="1.8957%" height="15" fill="rgb(243,137,7)" fg:x="153" fg:w="24"/><text x="12.3353%" y="607.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.50%)</title><rect x="12.4803%" y="581" width="1.5008%" height="15" fill="rgb(230,79,13)" fg:x="158" fg:w="19"/><text x="12.7303%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.8231%" y="565" width="0.1580%" height="15" fill="rgb(247,105,23)" fg:x="175" fg:w="2"/><text x="14.0731%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.9021%" y="549" width="0.0790%" height="15" fill="rgb(223,179,41)" fg:x="176" fg:w="1"/><text x="14.1521%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.9021%" y="533" width="0.0790%" height="15" fill="rgb(218,9,34)" fg:x="176" fg:w="1"/><text x="14.1521%" y="543.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="13.9810%" y="565" width="0.0790%" height="15" fill="rgb(222,106,8)" fg:x="177" fg:w="1"/><text x="14.2310%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="13.9810%" y="549" width="0.0790%" height="15" fill="rgb(211,220,0)" fg:x="177" fg:w="1"/><text x="14.2310%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="13.9810%" y="533" width="0.0790%" height="15" fill="rgb(229,52,16)" fg:x="177" fg:w="1"/><text x="14.2310%" y="543.50"></text></g><g><title>alloc::str::join_generic_copy (1 samples, 0.08%)</title><rect x="13.9810%" y="517" width="0.0790%" height="15" fill="rgb(212,155,18)" fg:x="177" fg:w="1"/><text x="14.2310%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.0600%" y="517" width="0.0790%" height="15" fill="rgb(242,21,14)" fg:x="178" fg:w="1"/><text x="14.3100%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="13.9810%" y="581" width="0.2370%" height="15" fill="rgb(222,19,48)" fg:x="177" fg:w="3"/><text x="14.2310%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="14.0600%" y="565" width="0.1580%" height="15" fill="rgb(232,45,27)" fg:x="178" fg:w="2"/><text x="14.3100%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="14.0600%" y="549" width="0.1580%" height="15" fill="rgb(249,103,42)" fg:x="178" fg:w="2"/><text x="14.3100%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="14.0600%" y="533" width="0.1580%" height="15" fill="rgb(246,81,33)" fg:x="178" fg:w="2"/><text x="14.3100%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="14.1390%" y="517" width="0.0790%" height="15" fill="rgb(252,33,42)" fg:x="179" fg:w="1"/><text x="14.3890%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="14.1390%" y="501" width="0.0790%" height="15" fill="rgb(209,212,41)" fg:x="179" fg:w="1"/><text x="14.3890%" y="511.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="14.2970%" y="549" width="0.0790%" height="15" fill="rgb(207,154,6)" fg:x="181" fg:w="1"/><text x="14.5470%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="14.3760%" y="549" width="0.2370%" height="15" fill="rgb(223,64,47)" fg:x="182" fg:w="3"/><text x="14.6260%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="14.5340%" y="533" width="0.0790%" height="15" fill="rgb(211,161,38)" fg:x="184" fg:w="1"/><text x="14.7840%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="14.6130%" y="549" width="0.0790%" height="15" fill="rgb(219,138,40)" fg:x="185" fg:w="1"/><text x="14.8630%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.6130%" y="533" width="0.0790%" height="15" fill="rgb(241,228,46)" fg:x="185" fg:w="1"/><text x="14.8630%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6919%" y="501" width="0.0790%" height="15" fill="rgb(223,209,38)" fg:x="186" fg:w="1"/><text x="14.9419%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6919%" y="485" width="0.0790%" height="15" fill="rgb(236,164,45)" fg:x="186" fg:w="1"/><text x="14.9419%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.7709%" y="453" width="0.0790%" height="15" fill="rgb(231,15,5)" fg:x="187" fg:w="1"/><text x="15.0209%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.8499%" y="437" width="0.0790%" height="15" fill="rgb(252,35,15)" fg:x="188" fg:w="1"/><text x="15.0999%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="14.8499%" y="421" width="0.0790%" height="15" fill="rgb(248,181,18)" fg:x="188" fg:w="1"/><text x="15.0999%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="14.7709%" y="501" width="0.2370%" height="15" fill="rgb(233,39,42)" fg:x="187" fg:w="3"/><text x="15.0209%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="14.7709%" y="485" width="0.2370%" height="15" fill="rgb(238,110,33)" fg:x="187" fg:w="3"/><text x="15.0209%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="14.7709%" y="469" width="0.2370%" height="15" fill="rgb(233,195,10)" fg:x="187" fg:w="3"/><text x="15.0209%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="14.8499%" y="453" width="0.1580%" height="15" fill="rgb(254,105,3)" fg:x="188" fg:w="2"/><text x="15.0999%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9289%" y="437" width="0.0790%" height="15" fill="rgb(221,225,9)" fg:x="189" fg:w="1"/><text x="15.1789%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="15.4028%" y="485" width="0.0790%" height="15" fill="rgb(224,227,45)" fg:x="195" fg:w="1"/><text x="15.6528%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="15.5608%" y="453" width="0.1580%" height="15" fill="rgb(229,198,43)" fg:x="197" fg:w="2"/><text x="15.8108%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6398%" y="437" width="0.0790%" height="15" fill="rgb(206,209,35)" fg:x="198" fg:w="1"/><text x="15.8898%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.6398%" y="421" width="0.0790%" height="15" fill="rgb(245,195,53)" fg:x="198" fg:w="1"/><text x="15.8898%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.39%)</title><rect x="15.4818%" y="485" width="0.3949%" height="15" fill="rgb(240,92,26)" fg:x="196" fg:w="5"/><text x="15.7318%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="15.5608%" y="469" width="0.3160%" height="15" fill="rgb(207,40,23)" fg:x="197" fg:w="4"/><text x="15.8108%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.7188%" y="453" width="0.1580%" height="15" fill="rgb(223,111,35)" fg:x="199" fg:w="2"/><text x="15.9688%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (16 samples, 1.26%)</title><rect x="14.6919%" y="517" width="1.2638%" height="15" fill="rgb(229,147,28)" fg:x="186" fg:w="16"/><text x="14.9419%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (12 samples, 0.95%)</title><rect x="15.0079%" y="501" width="0.9479%" height="15" fill="rgb(211,29,28)" fg:x="190" fg:w="12"/><text x="15.2579%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="15.8768%" y="485" width="0.0790%" height="15" fill="rgb(228,72,33)" fg:x="201" fg:w="1"/><text x="16.1268%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="15.8768%" y="469" width="0.0790%" height="15" fill="rgb(205,214,31)" fg:x="201" fg:w="1"/><text x="16.1268%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (18 samples, 1.42%)</title><rect x="14.6919%" y="533" width="1.4218%" height="15" fill="rgb(224,111,15)" fg:x="186" fg:w="18"/><text x="14.9419%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="15.9558%" y="517" width="0.1580%" height="15" fill="rgb(253,21,26)" fg:x="202" fg:w="2"/><text x="16.2058%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.9558%" y="501" width="0.1580%" height="15" fill="rgb(245,139,43)" fg:x="202" fg:w="2"/><text x="16.2058%" y="511.50"></text></g><g><title>engine::session::Session::flush (64 samples, 5.06%)</title><rect x="11.1374%" y="709" width="5.0553%" height="15" fill="rgb(252,170,7)" fg:x="141" fg:w="64"/><text x="11.3874%" y="719.50">engine..</text></g><g><title>engine::session::Session::save_changes (63 samples, 4.98%)</title><rect x="11.2164%" y="693" width="4.9763%" height="15" fill="rgb(231,118,14)" fg:x="142" fg:w="63"/><text x="11.4664%" y="703.50">engine..</text></g><g><title>engine::session::state::State::close (63 samples, 4.98%)</title><rect x="11.2164%" y="677" width="4.9763%" height="15" fill="rgb(238,83,0)" fg:x="142" fg:w="63"/><text x="11.4664%" y="687.50">engine..</text></g><g><title>engine::session::state::State::flush_entities (63 samples, 4.98%)</title><rect x="11.2164%" y="661" width="4.9763%" height="15" fill="rgb(221,39,39)" fg:x="142" fg:w="63"/><text x="11.4664%" y="671.50">engine..</text></g><g><title>core::iter::adapters::try_process (61 samples, 4.82%)</title><rect x="11.3744%" y="645" width="4.8183%" height="15" fill="rgb(222,119,46)" fg:x="144" fg:w="61"/><text x="11.6244%" y="655.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (61 samples, 4.82%)</title><rect x="11.3744%" y="629" width="4.8183%" height="15" fill="rgb(222,165,49)" fg:x="144" fg:w="61"/><text x="11.6244%" y="639.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (61 samples, 4.82%)</title><rect x="11.3744%" y="613" width="4.8183%" height="15" fill="rgb(219,113,52)" fg:x="144" fg:w="61"/><text x="11.6244%" y="623.50">engine..</text></g><g><title>kernel::model::any_entity_changes (28 samples, 2.21%)</title><rect x="13.9810%" y="597" width="2.2117%" height="15" fill="rgb(214,7,15)" fg:x="177" fg:w="28"/><text x="14.2310%" y="607.50">k..</text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (25 samples, 1.97%)</title><rect x="14.2180%" y="581" width="1.9747%" height="15" fill="rgb(235,32,4)" fg:x="180" fg:w="25"/><text x="14.4680%" y="591.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (25 samples, 1.97%)</title><rect x="14.2180%" y="565" width="1.9747%" height="15" fill="rgb(238,90,54)" fg:x="180" fg:w="25"/><text x="14.4680%" y="575.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (19 samples, 1.50%)</title><rect x="14.6919%" y="549" width="1.5008%" height="15" fill="rgb(213,208,19)" fg:x="186" fg:w="19"/><text x="14.9419%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1137%" y="533" width="0.0790%" height="15" fill="rgb(233,156,4)" fg:x="204" fg:w="1"/><text x="16.3637%" y="543.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="16.1927%" y="709" width="0.0790%" height="15" fill="rgb(207,194,5)" fg:x="205" fg:w="1"/><text x="16.4427%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="16.1927%" y="693" width="0.0790%" height="15" fill="rgb(206,111,30)" fg:x="205" fg:w="1"/><text x="16.4427%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.1927%" y="677" width="0.0790%" height="15" fill="rgb(243,70,54)" fg:x="205" fg:w="1"/><text x="16.4427%" y="687.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="16.2717%" y="709" width="0.0790%" height="15" fill="rgb(242,28,8)" fg:x="206" fg:w="1"/><text x="16.5217%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="16.2717%" y="693" width="0.0790%" height="15" fill="rgb(219,106,18)" fg:x="206" fg:w="1"/><text x="16.5217%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="16.2717%" y="677" width="0.0790%" height="15" fill="rgb(244,222,10)" fg:x="206" fg:w="1"/><text x="16.5217%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.3507%" y="661" width="0.0790%" height="15" fill="rgb(236,179,52)" fg:x="207" fg:w="1"/><text x="16.6007%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="16.3507%" y="677" width="0.1580%" height="15" fill="rgb(213,23,39)" fg:x="207" fg:w="2"/><text x="16.6007%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.4297%" y="661" width="0.0790%" height="15" fill="rgb(238,48,10)" fg:x="208" fg:w="1"/><text x="16.6797%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4297%" y="645" width="0.0790%" height="15" fill="rgb(251,196,23)" fg:x="208" fg:w="1"/><text x="16.6797%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.4297%" y="629" width="0.0790%" height="15" fill="rgb(250,152,24)" fg:x="208" fg:w="1"/><text x="16.6797%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4297%" y="613" width="0.0790%" height="15" fill="rgb(209,150,17)" fg:x="208" fg:w="1"/><text x="16.6797%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="16.4297%" y="597" width="0.0790%" height="15" fill="rgb(234,202,34)" fg:x="208" fg:w="1"/><text x="16.6797%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (4 samples, 0.32%)</title><rect x="16.5087%" y="677" width="0.3160%" height="15" fill="rgb(253,148,53)" fg:x="209" fg:w="4"/><text x="16.7587%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="16.5087%" y="661" width="0.3160%" height="15" fill="rgb(218,129,16)" fg:x="209" fg:w="4"/><text x="16.7587%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (3 samples, 0.24%)</title><rect x="16.5877%" y="645" width="0.2370%" height="15" fill="rgb(216,85,19)" fg:x="210" fg:w="3"/><text x="16.8377%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="16.5877%" y="629" width="0.2370%" height="15" fill="rgb(235,228,7)" fg:x="210" fg:w="3"/><text x="16.8377%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="16.6667%" y="613" width="0.1580%" height="15" fill="rgb(245,175,0)" fg:x="211" fg:w="2"/><text x="16.9167%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.8246%" y="629" width="0.0790%" height="15" fill="rgb(208,168,36)" fg:x="213" fg:w="1"/><text x="17.0746%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="16.9036%" y="629" width="0.1580%" height="15" fill="rgb(246,171,24)" fg:x="214" fg:w="2"/><text x="17.1536%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="16.9036%" y="613" width="0.1580%" height="15" fill="rgb(215,142,24)" fg:x="214" fg:w="2"/><text x="17.1536%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="16.9036%" y="597" width="0.1580%" height="15" fill="rgb(250,187,7)" fg:x="214" fg:w="2"/><text x="17.1536%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="16.9036%" y="581" width="0.1580%" height="15" fill="rgb(228,66,33)" fg:x="214" fg:w="2"/><text x="17.1536%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="16.9036%" y="565" width="0.1580%" height="15" fill="rgb(234,215,21)" fg:x="214" fg:w="2"/><text x="17.1536%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="16.9036%" y="549" width="0.1580%" height="15" fill="rgb(222,191,20)" fg:x="214" fg:w="2"/><text x="17.1536%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.9826%" y="533" width="0.0790%" height="15" fill="rgb(245,79,54)" fg:x="215" fg:w="1"/><text x="17.2326%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9826%" y="517" width="0.0790%" height="15" fill="rgb(240,10,37)" fg:x="215" fg:w="1"/><text x="17.2326%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9826%" y="501" width="0.0790%" height="15" fill="rgb(214,192,32)" fg:x="215" fg:w="1"/><text x="17.2326%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="16.9826%" y="485" width="0.0790%" height="15" fill="rgb(209,36,54)" fg:x="215" fg:w="1"/><text x="17.2326%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.79%)</title><rect x="16.3507%" y="693" width="0.7899%" height="15" fill="rgb(220,10,11)" fg:x="207" fg:w="10"/><text x="16.6007%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="16.8246%" y="677" width="0.3160%" height="15" fill="rgb(221,106,17)" fg:x="213" fg:w="4"/><text x="17.0746%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="16.8246%" y="661" width="0.3160%" height="15" fill="rgb(251,142,44)" fg:x="213" fg:w="4"/><text x="17.0746%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="16.8246%" y="645" width="0.3160%" height="15" fill="rgb(238,13,15)" fg:x="213" fg:w="4"/><text x="17.0746%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="17.0616%" y="629" width="0.0790%" height="15" fill="rgb(208,107,27)" fg:x="216" fg:w="1"/><text x="17.3116%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.0616%" y="613" width="0.0790%" height="15" fill="rgb(205,136,37)" fg:x="216" fg:w="1"/><text x="17.3116%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0616%" y="597" width="0.0790%" height="15" fill="rgb(250,205,27)" fg:x="216" fg:w="1"/><text x="17.3116%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.2196%" y="677" width="0.0790%" height="15" fill="rgb(210,80,43)" fg:x="218" fg:w="1"/><text x="17.4696%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2196%" y="661" width="0.0790%" height="15" fill="rgb(247,160,36)" fg:x="218" fg:w="1"/><text x="17.4696%" y="671.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.03%)</title><rect x="16.3507%" y="709" width="1.0269%" height="15" fill="rgb(234,13,49)" fg:x="207" fg:w="13"/><text x="16.6007%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="17.1406%" y="693" width="0.2370%" height="15" fill="rgb(234,122,0)" fg:x="217" fg:w="3"/><text x="17.3906%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.2986%" y="677" width="0.0790%" height="15" fill="rgb(207,146,38)" fg:x="219" fg:w="1"/><text x="17.5486%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.2986%" y="661" width="0.0790%" height="15" fill="rgb(207,177,25)" fg:x="219" fg:w="1"/><text x="17.5486%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.2986%" y="645" width="0.0790%" height="15" fill="rgb(211,178,42)" fg:x="219" fg:w="1"/><text x="17.5486%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.2986%" y="629" width="0.0790%" height="15" fill="rgb(230,69,54)" fg:x="219" fg:w="1"/><text x="17.5486%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.2986%" y="613" width="0.0790%" height="15" fill="rgb(214,135,41)" fg:x="219" fg:w="1"/><text x="17.5486%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.2986%" y="597" width="0.0790%" height="15" fill="rgb(237,67,25)" fg:x="219" fg:w="1"/><text x="17.5486%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.2986%" y="581" width="0.0790%" height="15" fill="rgb(222,189,50)" fg:x="219" fg:w="1"/><text x="17.5486%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.2986%" y="565" width="0.0790%" height="15" fill="rgb(245,148,34)" fg:x="219" fg:w="1"/><text x="17.5486%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.3776%" y="581" width="0.0790%" height="15" fill="rgb(222,29,6)" fg:x="220" fg:w="1"/><text x="17.6276%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="17.4566%" y="549" width="0.0790%" height="15" fill="rgb(221,189,43)" fg:x="221" fg:w="1"/><text x="17.7066%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.4566%" y="533" width="0.0790%" height="15" fill="rgb(207,36,27)" fg:x="221" fg:w="1"/><text x="17.7066%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.4566%" y="517" width="0.0790%" height="15" fill="rgb(217,90,24)" fg:x="221" fg:w="1"/><text x="17.7066%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.5355%" y="549" width="0.0790%" height="15" fill="rgb(224,66,35)" fg:x="222" fg:w="1"/><text x="17.7855%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.5355%" y="533" width="0.0790%" height="15" fill="rgb(221,13,50)" fg:x="222" fg:w="1"/><text x="17.7855%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="17.3776%" y="629" width="0.3160%" height="15" fill="rgb(236,68,49)" fg:x="220" fg:w="4"/><text x="17.6276%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="17.3776%" y="613" width="0.3160%" height="15" fill="rgb(229,146,28)" fg:x="220" fg:w="4"/><text x="17.6276%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="17.3776%" y="597" width="0.3160%" height="15" fill="rgb(225,31,38)" fg:x="220" fg:w="4"/><text x="17.6276%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="17.4566%" y="581" width="0.2370%" height="15" fill="rgb(250,208,3)" fg:x="221" fg:w="3"/><text x="17.7066%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="17.4566%" y="565" width="0.2370%" height="15" fill="rgb(246,54,23)" fg:x="221" fg:w="3"/><text x="17.7066%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.6145%" y="549" width="0.0790%" height="15" fill="rgb(243,76,11)" fg:x="223" fg:w="1"/><text x="17.8645%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.39%)</title><rect x="17.3776%" y="645" width="0.3949%" height="15" fill="rgb(245,21,50)" fg:x="220" fg:w="5"/><text x="17.6276%" y="655.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="17.6935%" y="629" width="0.0790%" height="15" fill="rgb(228,9,43)" fg:x="224" fg:w="1"/><text x="17.9435%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.6935%" y="613" width="0.0790%" height="15" fill="rgb(208,100,47)" fg:x="224" fg:w="1"/><text x="17.9435%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (6 samples, 0.47%)</title><rect x="17.3776%" y="677" width="0.4739%" height="15" fill="rgb(232,26,8)" fg:x="220" fg:w="6"/><text x="17.6276%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (6 samples, 0.47%)</title><rect x="17.3776%" y="661" width="0.4739%" height="15" fill="rgb(216,166,38)" fg:x="220" fg:w="6"/><text x="17.6276%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="17.7725%" y="645" width="0.0790%" height="15" fill="rgb(251,202,51)" fg:x="225" fg:w="1"/><text x="18.0225%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.7725%" y="629" width="0.0790%" height="15" fill="rgb(254,216,34)" fg:x="225" fg:w="1"/><text x="18.0225%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.7725%" y="613" width="0.0790%" height="15" fill="rgb(251,32,27)" fg:x="225" fg:w="1"/><text x="18.0225%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.7725%" y="597" width="0.0790%" height="15" fill="rgb(208,127,28)" fg:x="225" fg:w="1"/><text x="18.0225%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.7725%" y="581" width="0.0790%" height="15" fill="rgb(224,137,22)" fg:x="225" fg:w="1"/><text x="18.0225%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.7725%" y="565" width="0.0790%" height="15" fill="rgb(254,70,32)" fg:x="225" fg:w="1"/><text x="18.0225%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.7725%" y="549" width="0.0790%" height="15" fill="rgb(229,75,37)" fg:x="225" fg:w="1"/><text x="18.0225%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.7725%" y="533" width="0.0790%" height="15" fill="rgb(252,64,23)" fg:x="225" fg:w="1"/><text x="18.0225%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (7 samples, 0.55%)</title><rect x="17.3776%" y="709" width="0.5529%" height="15" fill="rgb(232,162,48)" fg:x="220" fg:w="7"/><text x="17.6276%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (7 samples, 0.55%)</title><rect x="17.3776%" y="693" width="0.5529%" height="15" fill="rgb(246,160,12)" fg:x="220" fg:w="7"/><text x="17.6276%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.8515%" y="677" width="0.0790%" height="15" fill="rgb(247,166,0)" fg:x="226" fg:w="1"/><text x="18.1015%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8515%" y="661" width="0.0790%" height="15" fill="rgb(249,219,21)" fg:x="226" fg:w="1"/><text x="18.1015%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.8515%" y="645" width="0.0790%" height="15" fill="rgb(205,209,3)" fg:x="226" fg:w="1"/><text x="18.1015%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8515%" y="629" width="0.0790%" height="15" fill="rgb(243,44,1)" fg:x="226" fg:w="1"/><text x="18.1015%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.8515%" y="613" width="0.0790%" height="15" fill="rgb(206,159,16)" fg:x="226" fg:w="1"/><text x="18.1015%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.9305%" y="677" width="0.0790%" height="15" fill="rgb(244,77,30)" fg:x="227" fg:w="1"/><text x="18.1805%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.9305%" y="661" width="0.0790%" height="15" fill="rgb(218,69,12)" fg:x="227" fg:w="1"/><text x="18.1805%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.9305%" y="645" width="0.0790%" height="15" fill="rgb(212,87,7)" fg:x="227" fg:w="1"/><text x="18.1805%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.9305%" y="629" width="0.0790%" height="15" fill="rgb(245,114,25)" fg:x="227" fg:w="1"/><text x="18.1805%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="17.9305%" y="693" width="0.1580%" height="15" fill="rgb(210,61,42)" fg:x="227" fg:w="2"/><text x="18.1805%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.0095%" y="677" width="0.0790%" height="15" fill="rgb(211,52,33)" fg:x="228" fg:w="1"/><text x="18.2595%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.0095%" y="661" width="0.0790%" height="15" fill="rgb(234,58,33)" fg:x="228" fg:w="1"/><text x="18.2595%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.0095%" y="645" width="0.0790%" height="15" fill="rgb(220,115,36)" fg:x="228" fg:w="1"/><text x="18.2595%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.0095%" y="629" width="0.0790%" height="15" fill="rgb(243,153,54)" fg:x="228" fg:w="1"/><text x="18.2595%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="18.0095%" y="613" width="0.0790%" height="15" fill="rgb(251,47,18)" fg:x="228" fg:w="1"/><text x="18.2595%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="18.0095%" y="597" width="0.0790%" height="15" fill="rgb(242,102,42)" fg:x="228" fg:w="1"/><text x="18.2595%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="17.9305%" y="709" width="0.2370%" height="15" fill="rgb(234,31,38)" fg:x="227" fg:w="3"/><text x="18.1805%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.0885%" y="693" width="0.0790%" height="15" fill="rgb(221,117,51)" fg:x="229" fg:w="1"/><text x="18.3385%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="18.0885%" y="677" width="0.0790%" height="15" fill="rgb(212,20,18)" fg:x="229" fg:w="1"/><text x="18.3385%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.0885%" y="661" width="0.0790%" height="15" fill="rgb(245,133,36)" fg:x="229" fg:w="1"/><text x="18.3385%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="18.0885%" y="645" width="0.0790%" height="15" fill="rgb(212,6,19)" fg:x="229" fg:w="1"/><text x="18.3385%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="18.0885%" y="629" width="0.0790%" height="15" fill="rgb(218,1,36)" fg:x="229" fg:w="1"/><text x="18.3385%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.0885%" y="613" width="0.0790%" height="15" fill="rgb(246,84,54)" fg:x="229" fg:w="1"/><text x="18.3385%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0885%" y="597" width="0.0790%" height="15" fill="rgb(242,110,6)" fg:x="229" fg:w="1"/><text x="18.3385%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="18.1675%" y="645" width="0.0790%" height="15" fill="rgb(214,47,5)" fg:x="230" fg:w="1"/><text x="18.4175%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="18.1675%" y="629" width="0.0790%" height="15" fill="rgb(218,159,25)" fg:x="230" fg:w="1"/><text x="18.4175%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.1675%" y="613" width="0.0790%" height="15" fill="rgb(215,211,28)" fg:x="230" fg:w="1"/><text x="18.4175%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.1675%" y="597" width="0.0790%" height="15" fill="rgb(238,59,32)" fg:x="230" fg:w="1"/><text x="18.4175%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="18.1675%" y="693" width="0.1580%" height="15" fill="rgb(226,82,3)" fg:x="230" fg:w="2"/><text x="18.4175%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="18.1675%" y="677" width="0.1580%" height="15" fill="rgb(240,164,32)" fg:x="230" fg:w="2"/><text x="18.4175%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="18.1675%" y="661" width="0.1580%" height="15" fill="rgb(232,46,7)" fg:x="230" fg:w="2"/><text x="18.4175%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="18.2464%" y="645" width="0.0790%" height="15" fill="rgb(229,129,53)" fg:x="231" fg:w="1"/><text x="18.4964%" y="655.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="18.2464%" y="629" width="0.0790%" height="15" fill="rgb(234,188,29)" fg:x="231" fg:w="1"/><text x="18.4964%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="18.1675%" y="709" width="0.2370%" height="15" fill="rgb(246,141,4)" fg:x="230" fg:w="3"/><text x="18.4175%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="18.3254%" y="693" width="0.0790%" height="15" fill="rgb(229,23,39)" fg:x="232" fg:w="1"/><text x="18.5754%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.3254%" y="677" width="0.0790%" height="15" fill="rgb(206,12,3)" fg:x="232" fg:w="1"/><text x="18.5754%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="18.3254%" y="661" width="0.0790%" height="15" fill="rgb(252,226,20)" fg:x="232" fg:w="1"/><text x="18.5754%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.3254%" y="645" width="0.0790%" height="15" fill="rgb(216,123,35)" fg:x="232" fg:w="1"/><text x="18.5754%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="18.3254%" y="629" width="0.0790%" height="15" fill="rgb(212,68,40)" fg:x="232" fg:w="1"/><text x="18.5754%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.3254%" y="613" width="0.0790%" height="15" fill="rgb(254,125,32)" fg:x="232" fg:w="1"/><text x="18.5754%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.3254%" y="597" width="0.0790%" height="15" fill="rgb(253,97,22)" fg:x="232" fg:w="1"/><text x="18.5754%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (96 samples, 7.58%)</title><rect x="10.9005%" y="725" width="7.5829%" height="15" fill="rgb(241,101,14)" fg:x="138" fg:w="96"/><text x="11.1505%" y="735.50">plugins_co..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="18.4044%" y="709" width="0.0790%" height="15" fill="rgb(238,103,29)" fg:x="233" fg:w="1"/><text x="18.6544%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.4044%" y="693" width="0.0790%" height="15" fill="rgb(233,195,47)" fg:x="233" fg:w="1"/><text x="18.6544%" y="703.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="18.4044%" y="677" width="0.0790%" height="15" fill="rgb(246,218,30)" fg:x="233" fg:w="1"/><text x="18.6544%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.4044%" y="661" width="0.0790%" height="15" fill="rgb(219,145,47)" fg:x="233" fg:w="1"/><text x="18.6544%" y="671.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="18.4044%" y="645" width="0.0790%" height="15" fill="rgb(243,12,26)" fg:x="233" fg:w="1"/><text x="18.6544%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="18.4834%" y="725" width="0.1580%" height="15" fill="rgb(214,87,16)" fg:x="234" fg:w="2"/><text x="18.7334%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="18.4834%" y="709" width="0.1580%" height="15" fill="rgb(208,99,42)" fg:x="234" fg:w="2"/><text x="18.7334%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="18.5624%" y="693" width="0.0790%" height="15" fill="rgb(253,99,2)" fg:x="235" fg:w="1"/><text x="18.8124%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="18.5624%" y="677" width="0.0790%" height="15" fill="rgb(220,168,23)" fg:x="235" fg:w="1"/><text x="18.8124%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.5624%" y="661" width="0.0790%" height="15" fill="rgb(242,38,24)" fg:x="235" fg:w="1"/><text x="18.8124%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="18.6414%" y="677" width="0.1580%" height="15" fill="rgb(225,182,9)" fg:x="236" fg:w="2"/><text x="18.8914%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="18.7204%" y="661" width="0.0790%" height="15" fill="rgb(243,178,37)" fg:x="237" fg:w="1"/><text x="18.9704%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="18.7204%" y="645" width="0.0790%" height="15" fill="rgb(232,139,19)" fg:x="237" fg:w="1"/><text x="18.9704%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="18.7204%" y="629" width="0.0790%" height="15" fill="rgb(225,201,24)" fg:x="237" fg:w="1"/><text x="18.9704%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="18.7204%" y="613" width="0.0790%" height="15" fill="rgb(221,47,46)" fg:x="237" fg:w="1"/><text x="18.9704%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="18.7204%" y="597" width="0.0790%" height="15" fill="rgb(249,23,13)" fg:x="237" fg:w="1"/><text x="18.9704%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.7204%" y="581" width="0.0790%" height="15" fill="rgb(219,9,5)" fg:x="237" fg:w="1"/><text x="18.9704%" y="591.50"></text></g><g><title>plugins_core::build::Build::new (3 samples, 0.24%)</title><rect x="18.6414%" y="693" width="0.2370%" height="15" fill="rgb(254,171,16)" fg:x="236" fg:w="3"/><text x="18.8914%" y="703.50"></text></g><g><title>kernel::model::builder::build_entity (1 samples, 0.08%)</title><rect x="18.7994%" y="677" width="0.0790%" height="15" fill="rgb(230,171,20)" fg:x="238" fg:w="1"/><text x="19.0494%" y="687.50"></text></g><g><title>kernel::model::builder::EntityBuilder::new (1 samples, 0.08%)</title><rect x="18.7994%" y="661" width="0.0790%" height="15" fill="rgb(210,71,41)" fg:x="238" fg:w="1"/><text x="19.0494%" y="671.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="18.8784%" y="661" width="0.0790%" height="15" fill="rgb(206,173,20)" fg:x="239" fg:w="1"/><text x="19.1284%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.9573%" y="597" width="0.0790%" height="15" fill="rgb(233,88,34)" fg:x="240" fg:w="1"/><text x="19.2073%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.0363%" y="533" width="0.0790%" height="15" fill="rgb(223,209,46)" fg:x="241" fg:w="1"/><text x="19.2863%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.0363%" y="517" width="0.0790%" height="15" fill="rgb(250,43,18)" fg:x="241" fg:w="1"/><text x="19.2863%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="18.9573%" y="613" width="0.2370%" height="15" fill="rgb(208,13,10)" fg:x="240" fg:w="3"/><text x="19.2073%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="19.0363%" y="597" width="0.1580%" height="15" fill="rgb(212,200,36)" fg:x="241" fg:w="2"/><text x="19.2863%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.0363%" y="581" width="0.1580%" height="15" fill="rgb(225,90,30)" fg:x="241" fg:w="2"/><text x="19.2863%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="19.0363%" y="565" width="0.1580%" height="15" fill="rgb(236,182,39)" fg:x="241" fg:w="2"/><text x="19.2863%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.0363%" y="549" width="0.1580%" height="15" fill="rgb(212,144,35)" fg:x="241" fg:w="2"/><text x="19.2863%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.1153%" y="533" width="0.0790%" height="15" fill="rgb(228,63,44)" fg:x="242" fg:w="1"/><text x="19.3653%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.1153%" y="517" width="0.0790%" height="15" fill="rgb(228,109,6)" fg:x="242" fg:w="1"/><text x="19.3653%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="18.9573%" y="645" width="0.3160%" height="15" fill="rgb(238,117,24)" fg:x="240" fg:w="4"/><text x="19.2073%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="18.9573%" y="629" width="0.3160%" height="15" fill="rgb(242,26,26)" fg:x="240" fg:w="4"/><text x="19.2073%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="19.1943%" y="613" width="0.0790%" height="15" fill="rgb(221,92,48)" fg:x="243" fg:w="1"/><text x="19.4443%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.1943%" y="597" width="0.0790%" height="15" fill="rgb(209,209,32)" fg:x="243" fg:w="1"/><text x="19.4443%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="19.1943%" y="581" width="0.0790%" height="15" fill="rgb(221,70,22)" fg:x="243" fg:w="1"/><text x="19.4443%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.2733%" y="613" width="0.0790%" height="15" fill="rgb(248,145,5)" fg:x="244" fg:w="1"/><text x="19.5233%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.55%)</title><rect x="18.8784%" y="677" width="0.5529%" height="15" fill="rgb(226,116,26)" fg:x="239" fg:w="7"/><text x="19.1284%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.47%)</title><rect x="18.9573%" y="661" width="0.4739%" height="15" fill="rgb(244,5,17)" fg:x="240" fg:w="6"/><text x="19.2073%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="19.2733%" y="645" width="0.1580%" height="15" fill="rgb(252,159,33)" fg:x="244" fg:w="2"/><text x="19.5233%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="19.2733%" y="629" width="0.1580%" height="15" fill="rgb(206,71,0)" fg:x="244" fg:w="2"/><text x="19.5233%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="19.3523%" y="613" width="0.0790%" height="15" fill="rgb(233,118,54)" fg:x="245" fg:w="1"/><text x="19.6023%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="19.3523%" y="597" width="0.0790%" height="15" fill="rgb(234,83,48)" fg:x="245" fg:w="1"/><text x="19.6023%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.3523%" y="581" width="0.0790%" height="15" fill="rgb(228,3,54)" fg:x="245" fg:w="1"/><text x="19.6023%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.3523%" y="565" width="0.0790%" height="15" fill="rgb(226,155,13)" fg:x="245" fg:w="1"/><text x="19.6023%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.3523%" y="549" width="0.0790%" height="15" fill="rgb(241,28,37)" fg:x="245" fg:w="1"/><text x="19.6023%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.3523%" y="533" width="0.0790%" height="15" fill="rgb(233,93,10)" fg:x="245" fg:w="1"/><text x="19.6023%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.3523%" y="517" width="0.0790%" height="15" fill="rgb(225,113,19)" fg:x="245" fg:w="1"/><text x="19.6023%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.4313%" y="677" width="0.0790%" height="15" fill="rgb(241,2,18)" fg:x="246" fg:w="1"/><text x="19.6813%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4313%" y="661" width="0.0790%" height="15" fill="rgb(228,207,21)" fg:x="246" fg:w="1"/><text x="19.6813%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4313%" y="645" width="0.0790%" height="15" fill="rgb(213,211,35)" fg:x="246" fg:w="1"/><text x="19.6813%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.5103%" y="661" width="0.0790%" height="15" fill="rgb(209,83,10)" fg:x="247" fg:w="1"/><text x="19.7603%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.5103%" y="645" width="0.0790%" height="15" fill="rgb(209,164,1)" fg:x="247" fg:w="1"/><text x="19.7603%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.5103%" y="629" width="0.0790%" height="15" fill="rgb(213,184,43)" fg:x="247" fg:w="1"/><text x="19.7603%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.5103%" y="613" width="0.0790%" height="15" fill="rgb(231,61,34)" fg:x="247" fg:w="1"/><text x="19.7603%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.5103%" y="597" width="0.0790%" height="15" fill="rgb(235,75,3)" fg:x="247" fg:w="1"/><text x="19.7603%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.5103%" y="581" width="0.0790%" height="15" fill="rgb(220,106,47)" fg:x="247" fg:w="1"/><text x="19.7603%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.5103%" y="565" width="0.0790%" height="15" fill="rgb(210,196,33)" fg:x="247" fg:w="1"/><text x="19.7603%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.5103%" y="549" width="0.0790%" height="15" fill="rgb(229,154,42)" fg:x="247" fg:w="1"/><text x="19.7603%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.5103%" y="533" width="0.0790%" height="15" fill="rgb(228,114,26)" fg:x="247" fg:w="1"/><text x="19.7603%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.5103%" y="517" width="0.0790%" height="15" fill="rgb(208,144,1)" fg:x="247" fg:w="1"/><text x="19.7603%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.5103%" y="501" width="0.0790%" height="15" fill="rgb(239,112,37)" fg:x="247" fg:w="1"/><text x="19.7603%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.5103%" y="485" width="0.0790%" height="15" fill="rgb(210,96,50)" fg:x="247" fg:w="1"/><text x="19.7603%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.5103%" y="469" width="0.0790%" height="15" fill="rgb(222,178,2)" fg:x="247" fg:w="1"/><text x="19.7603%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.5103%" y="453" width="0.0790%" height="15" fill="rgb(226,74,18)" fg:x="247" fg:w="1"/><text x="19.7603%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.5103%" y="437" width="0.0790%" height="15" fill="rgb(225,67,54)" fg:x="247" fg:w="1"/><text x="19.7603%" y="447.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.79%)</title><rect x="18.8784%" y="693" width="0.7899%" height="15" fill="rgb(251,92,32)" fg:x="239" fg:w="10"/><text x="19.1284%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="19.5103%" y="677" width="0.1580%" height="15" fill="rgb(228,149,22)" fg:x="247" fg:w="2"/><text x="19.7603%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.5893%" y="661" width="0.0790%" height="15" fill="rgb(243,54,13)" fg:x="248" fg:w="1"/><text x="19.8393%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5893%" y="645" width="0.0790%" height="15" fill="rgb(243,180,28)" fg:x="248" fg:w="1"/><text x="19.8393%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.5893%" y="629" width="0.0790%" height="15" fill="rgb(208,167,24)" fg:x="248" fg:w="1"/><text x="19.8393%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5893%" y="613" width="0.0790%" height="15" fill="rgb(245,73,45)" fg:x="248" fg:w="1"/><text x="19.8393%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.5893%" y="597" width="0.0790%" height="15" fill="rgb(237,203,48)" fg:x="248" fg:w="1"/><text x="19.8393%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5893%" y="581" width="0.0790%" height="15" fill="rgb(211,197,16)" fg:x="248" fg:w="1"/><text x="19.8393%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (14 samples, 1.11%)</title><rect x="18.6414%" y="725" width="1.1058%" height="15" fill="rgb(243,99,51)" fg:x="236" fg:w="14"/><text x="18.8914%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (14 samples, 1.11%)</title><rect x="18.6414%" y="709" width="1.1058%" height="15" fill="rgb(215,123,29)" fg:x="236" fg:w="14"/><text x="18.8914%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="19.6682%" y="693" width="0.0790%" height="15" fill="rgb(239,186,37)" fg:x="249" fg:w="1"/><text x="19.9182%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="19.6682%" y="677" width="0.0790%" height="15" fill="rgb(252,136,39)" fg:x="249" fg:w="1"/><text x="19.9182%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="19.6682%" y="661" width="0.0790%" height="15" fill="rgb(223,213,32)" fg:x="249" fg:w="1"/><text x="19.9182%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="19.7472%" y="693" width="0.0790%" height="15" fill="rgb(233,115,5)" fg:x="250" fg:w="1"/><text x="19.9972%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.7472%" y="677" width="0.0790%" height="15" fill="rgb(207,226,44)" fg:x="250" fg:w="1"/><text x="19.9972%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.7472%" y="661" width="0.0790%" height="15" fill="rgb(208,126,0)" fg:x="250" fg:w="1"/><text x="19.9972%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.7472%" y="645" width="0.0790%" height="15" fill="rgb(244,66,21)" fg:x="250" fg:w="1"/><text x="19.9972%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.7472%" y="629" width="0.0790%" height="15" fill="rgb(222,97,12)" fg:x="250" fg:w="1"/><text x="19.9972%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="19.7472%" y="709" width="0.1580%" height="15" fill="rgb(219,213,19)" fg:x="250" fg:w="2"/><text x="19.9972%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="19.8262%" y="693" width="0.0790%" height="15" fill="rgb(252,169,30)" fg:x="251" fg:w="1"/><text x="20.0762%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.8262%" y="677" width="0.0790%" height="15" fill="rgb(206,32,51)" fg:x="251" fg:w="1"/><text x="20.0762%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="19.8262%" y="661" width="0.0790%" height="15" fill="rgb(250,172,42)" fg:x="251" fg:w="1"/><text x="20.0762%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.9842%" y="661" width="0.0790%" height="15" fill="rgb(209,34,43)" fg:x="253" fg:w="1"/><text x="20.2342%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.0632%" y="661" width="0.0790%" height="15" fill="rgb(223,11,35)" fg:x="254" fg:w="1"/><text x="20.3132%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="19.9052%" y="709" width="0.3160%" height="15" fill="rgb(251,219,26)" fg:x="252" fg:w="4"/><text x="20.1552%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="19.9052%" y="693" width="0.3160%" height="15" fill="rgb(231,119,3)" fg:x="252" fg:w="4"/><text x="20.1552%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="19.9052%" y="677" width="0.3160%" height="15" fill="rgb(216,97,11)" fg:x="252" fg:w="4"/><text x="20.1552%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.1422%" y="661" width="0.0790%" height="15" fill="rgb(223,59,9)" fg:x="255" fg:w="1"/><text x="20.3922%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.1422%" y="645" width="0.0790%" height="15" fill="rgb(233,93,31)" fg:x="255" fg:w="1"/><text x="20.3922%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.1422%" y="629" width="0.0790%" height="15" fill="rgb(239,81,33)" fg:x="255" fg:w="1"/><text x="20.3922%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.2212%" y="709" width="0.0790%" height="15" fill="rgb(213,120,34)" fg:x="256" fg:w="1"/><text x="20.4712%" y="719.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="20.3002%" y="709" width="0.0790%" height="15" fill="rgb(243,49,53)" fg:x="257" fg:w="1"/><text x="20.5502%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="20.3002%" y="693" width="0.0790%" height="15" fill="rgb(247,216,33)" fg:x="257" fg:w="1"/><text x="20.5502%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="20.3002%" y="677" width="0.0790%" height="15" fill="rgb(226,26,14)" fg:x="257" fg:w="1"/><text x="20.5502%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="20.3002%" y="661" width="0.0790%" height="15" fill="rgb(215,49,53)" fg:x="257" fg:w="1"/><text x="20.5502%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="20.3791%" y="629" width="0.0790%" height="15" fill="rgb(245,162,40)" fg:x="258" fg:w="1"/><text x="20.6291%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.3791%" y="613" width="0.0790%" height="15" fill="rgb(229,68,17)" fg:x="258" fg:w="1"/><text x="20.6291%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.3791%" y="597" width="0.0790%" height="15" fill="rgb(213,182,10)" fg:x="258" fg:w="1"/><text x="20.6291%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="20.3791%" y="661" width="0.1580%" height="15" fill="rgb(245,125,30)" fg:x="258" fg:w="2"/><text x="20.6291%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="20.3791%" y="645" width="0.1580%" height="15" fill="rgb(232,202,2)" fg:x="258" fg:w="2"/><text x="20.6291%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="20.4581%" y="629" width="0.0790%" height="15" fill="rgb(237,140,51)" fg:x="259" fg:w="1"/><text x="20.7081%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.4581%" y="613" width="0.0790%" height="15" fill="rgb(236,157,25)" fg:x="259" fg:w="1"/><text x="20.7081%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="20.4581%" y="597" width="0.0790%" height="15" fill="rgb(219,209,0)" fg:x="259" fg:w="1"/><text x="20.7081%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="20.4581%" y="581" width="0.0790%" height="15" fill="rgb(240,116,54)" fg:x="259" fg:w="1"/><text x="20.7081%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.4581%" y="565" width="0.0790%" height="15" fill="rgb(216,10,36)" fg:x="259" fg:w="1"/><text x="20.7081%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4581%" y="549" width="0.0790%" height="15" fill="rgb(222,72,44)" fg:x="259" fg:w="1"/><text x="20.7081%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4581%" y="533" width="0.0790%" height="15" fill="rgb(232,159,9)" fg:x="259" fg:w="1"/><text x="20.7081%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.4581%" y="517" width="0.0790%" height="15" fill="rgb(210,39,32)" fg:x="259" fg:w="1"/><text x="20.7081%" y="527.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="20.5371%" y="661" width="0.0790%" height="15" fill="rgb(216,194,45)" fg:x="260" fg:w="1"/><text x="20.7871%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.5371%" y="645" width="0.0790%" height="15" fill="rgb(218,18,35)" fg:x="260" fg:w="1"/><text x="20.7871%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::new_from_entity (1 samples, 0.08%)</title><rect x="20.6161%" y="661" width="0.0790%" height="15" fill="rgb(207,83,51)" fg:x="261" fg:w="1"/><text x="20.8661%" y="671.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="20.6161%" y="645" width="0.0790%" height="15" fill="rgb(225,63,43)" fg:x="261" fg:w="1"/><text x="20.8661%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="20.6951%" y="629" width="0.1580%" height="15" fill="rgb(207,57,36)" fg:x="262" fg:w="2"/><text x="20.9451%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="20.6951%" y="613" width="0.1580%" height="15" fill="rgb(216,99,33)" fg:x="262" fg:w="2"/><text x="20.9451%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="20.6951%" y="597" width="0.1580%" height="15" fill="rgb(225,42,16)" fg:x="262" fg:w="2"/><text x="20.9451%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="20.6951%" y="581" width="0.1580%" height="15" fill="rgb(220,201,45)" fg:x="262" fg:w="2"/><text x="20.9451%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="20.6951%" y="565" width="0.1580%" height="15" fill="rgb(225,33,4)" fg:x="262" fg:w="2"/><text x="20.9451%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="20.6951%" y="549" width="0.1580%" height="15" fill="rgb(224,33,50)" fg:x="262" fg:w="2"/><text x="20.9451%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="20.7741%" y="533" width="0.0790%" height="15" fill="rgb(246,198,51)" fg:x="263" fg:w="1"/><text x="21.0241%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.7741%" y="517" width="0.0790%" height="15" fill="rgb(205,22,4)" fg:x="263" fg:w="1"/><text x="21.0241%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.7741%" y="501" width="0.0790%" height="15" fill="rgb(206,3,8)" fg:x="263" fg:w="1"/><text x="21.0241%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.8531%" y="597" width="0.0790%" height="15" fill="rgb(251,23,15)" fg:x="264" fg:w="1"/><text x="21.1031%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.63%)</title><rect x="20.3791%" y="693" width="0.6319%" height="15" fill="rgb(252,88,28)" fg:x="258" fg:w="8"/><text x="20.6291%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.63%)</title><rect x="20.3791%" y="677" width="0.6319%" height="15" fill="rgb(212,127,14)" fg:x="258" fg:w="8"/><text x="20.6291%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="20.6951%" y="661" width="0.3160%" height="15" fill="rgb(247,145,37)" fg:x="262" fg:w="4"/><text x="20.9451%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="20.6951%" y="645" width="0.3160%" height="15" fill="rgb(209,117,53)" fg:x="262" fg:w="4"/><text x="20.9451%" y="655.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="20.8531%" y="629" width="0.1580%" height="15" fill="rgb(212,90,42)" fg:x="264" fg:w="2"/><text x="21.1031%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="20.8531%" y="613" width="0.1580%" height="15" fill="rgb(218,164,37)" fg:x="264" fg:w="2"/><text x="21.1031%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.9321%" y="597" width="0.0790%" height="15" fill="rgb(246,65,34)" fg:x="265" fg:w="1"/><text x="21.1821%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (186 samples, 14.69%)</title><rect x="6.3981%" y="741" width="14.6919%" height="15" fill="rgb(231,100,33)" fg:x="81" fg:w="186"/><text x="6.6481%" y="751.50">&lt;tests::HoldingKeyInVe..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (17 samples, 1.34%)</title><rect x="19.7472%" y="725" width="1.3428%" height="15" fill="rgb(228,126,14)" fg:x="250" fg:w="17"/><text x="19.9972%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.71%)</title><rect x="20.3791%" y="709" width="0.7109%" height="15" fill="rgb(215,173,21)" fg:x="258" fg:w="9"/><text x="20.6291%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.0111%" y="693" width="0.0790%" height="15" fill="rgb(210,6,40)" fg:x="266" fg:w="1"/><text x="21.2611%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::rollback (1 samples, 0.08%)</title><rect x="21.0900%" y="725" width="0.0790%" height="15" fill="rgb(212,48,18)" fg:x="267" fg:w="1"/><text x="21.3400%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="21.1690%" y="725" width="0.0790%" height="15" fill="rgb(230,214,11)" fg:x="268" fg:w="1"/><text x="21.4190%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="21.1690%" y="709" width="0.0790%" height="15" fill="rgb(254,105,39)" fg:x="268" fg:w="1"/><text x="21.4190%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="21.1690%" y="693" width="0.0790%" height="15" fill="rgb(245,158,5)" fg:x="268" fg:w="1"/><text x="21.4190%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="21.1690%" y="677" width="0.0790%" height="15" fill="rgb(249,208,11)" fg:x="268" fg:w="1"/><text x="21.4190%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="21.1690%" y="661" width="0.0790%" height="15" fill="rgb(210,39,28)" fg:x="268" fg:w="1"/><text x="21.4190%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="21.1690%" y="645" width="0.0790%" height="15" fill="rgb(211,56,53)" fg:x="268" fg:w="1"/><text x="21.4190%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="21.1690%" y="629" width="0.0790%" height="15" fill="rgb(226,201,30)" fg:x="268" fg:w="1"/><text x="21.4190%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="21.1690%" y="613" width="0.0790%" height="15" fill="rgb(239,101,34)" fg:x="268" fg:w="1"/><text x="21.4190%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="21.1690%" y="597" width="0.0790%" height="15" fill="rgb(226,209,5)" fg:x="268" fg:w="1"/><text x="21.4190%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="21.1690%" y="581" width="0.0790%" height="15" fill="rgb(250,105,47)" fg:x="268" fg:w="1"/><text x="21.4190%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.1690%" y="565" width="0.0790%" height="15" fill="rgb(230,72,3)" fg:x="268" fg:w="1"/><text x="21.4190%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.1690%" y="549" width="0.0790%" height="15" fill="rgb(232,218,39)" fg:x="268" fg:w="1"/><text x="21.4190%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="21.1690%" y="533" width="0.0790%" height="15" fill="rgb(248,166,6)" fg:x="268" fg:w="1"/><text x="21.4190%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="21.1690%" y="517" width="0.0790%" height="15" fill="rgb(247,89,20)" fg:x="268" fg:w="1"/><text x="21.4190%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="21.1690%" y="501" width="0.0790%" height="15" fill="rgb(248,130,54)" fg:x="268" fg:w="1"/><text x="21.4190%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="21.1690%" y="485" width="0.0790%" height="15" fill="rgb(234,196,4)" fg:x="268" fg:w="1"/><text x="21.4190%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="21.1690%" y="469" width="0.0790%" height="15" fill="rgb(250,143,31)" fg:x="268" fg:w="1"/><text x="21.4190%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="21.1690%" y="453" width="0.0790%" height="15" fill="rgb(211,110,34)" fg:x="268" fg:w="1"/><text x="21.4190%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="21.1690%" y="437" width="0.0790%" height="15" fill="rgb(215,124,48)" fg:x="268" fg:w="1"/><text x="21.4190%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="21.1690%" y="421" width="0.0790%" height="15" fill="rgb(216,46,13)" fg:x="268" fg:w="1"/><text x="21.4190%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.1690%" y="405" width="0.0790%" height="15" fill="rgb(205,184,25)" fg:x="268" fg:w="1"/><text x="21.4190%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.2480%" y="693" width="0.0790%" height="15" fill="rgb(228,1,10)" fg:x="269" fg:w="1"/><text x="21.4980%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="21.3270%" y="693" width="0.0790%" height="15" fill="rgb(213,116,27)" fg:x="270" fg:w="1"/><text x="21.5770%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::state::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="21.3270%" y="677" width="0.0790%" height="15" fill="rgb(241,95,50)" fg:x="270" fg:w="1"/><text x="21.5770%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (3 samples, 0.24%)</title><rect x="21.4060%" y="661" width="0.2370%" height="15" fill="rgb(238,48,32)" fg:x="271" fg:w="3"/><text x="21.6560%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="21.4060%" y="693" width="0.3160%" height="15" fill="rgb(235,113,49)" fg:x="271" fg:w="4"/><text x="21.6560%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="21.4060%" y="677" width="0.3160%" height="15" fill="rgb(205,127,43)" fg:x="271" fg:w="4"/><text x="21.6560%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.6430%" y="661" width="0.0790%" height="15" fill="rgb(250,162,2)" fg:x="274" fg:w="1"/><text x="21.8930%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="21.8009%" y="597" width="0.0790%" height="15" fill="rgb(220,13,41)" fg:x="276" fg:w="1"/><text x="22.0509%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="21.8009%" y="581" width="0.0790%" height="15" fill="rgb(249,221,25)" fg:x="276" fg:w="1"/><text x="22.0509%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.8009%" y="565" width="0.0790%" height="15" fill="rgb(215,208,19)" fg:x="276" fg:w="1"/><text x="22.0509%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="21.8009%" y="613" width="0.1580%" height="15" fill="rgb(236,175,2)" fg:x="276" fg:w="2"/><text x="22.0509%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="21.8799%" y="597" width="0.0790%" height="15" fill="rgb(241,52,2)" fg:x="277" fg:w="1"/><text x="22.1299%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="21.8799%" y="581" width="0.0790%" height="15" fill="rgb(248,140,14)" fg:x="277" fg:w="1"/><text x="22.1299%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.8799%" y="565" width="0.0790%" height="15" fill="rgb(253,22,42)" fg:x="277" fg:w="1"/><text x="22.1299%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="21.8009%" y="645" width="0.2370%" height="15" fill="rgb(234,61,47)" fg:x="276" fg:w="3"/><text x="22.0509%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="21.8009%" y="629" width="0.2370%" height="15" fill="rgb(208,226,15)" fg:x="276" fg:w="3"/><text x="22.0509%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.9589%" y="613" width="0.0790%" height="15" fill="rgb(217,221,4)" fg:x="278" fg:w="1"/><text x="22.2089%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="22.0379%" y="645" width="0.0790%" height="15" fill="rgb(212,174,34)" fg:x="279" fg:w="1"/><text x="22.2879%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="22.0379%" y="629" width="0.0790%" height="15" fill="rgb(253,83,4)" fg:x="279" fg:w="1"/><text x="22.2879%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="22.0379%" y="613" width="0.0790%" height="15" fill="rgb(250,195,49)" fg:x="279" fg:w="1"/><text x="22.2879%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="22.0379%" y="597" width="0.0790%" height="15" fill="rgb(241,192,25)" fg:x="279" fg:w="1"/><text x="22.2879%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.0379%" y="581" width="0.0790%" height="15" fill="rgb(208,124,10)" fg:x="279" fg:w="1"/><text x="22.2879%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.0379%" y="565" width="0.0790%" height="15" fill="rgb(222,33,0)" fg:x="279" fg:w="1"/><text x="22.2879%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.0379%" y="549" width="0.0790%" height="15" fill="rgb(234,209,28)" fg:x="279" fg:w="1"/><text x="22.2879%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.0379%" y="533" width="0.0790%" height="15" fill="rgb(224,11,23)" fg:x="279" fg:w="1"/><text x="22.2879%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="22.1169%" y="629" width="0.1580%" height="15" fill="rgb(232,99,1)" fg:x="280" fg:w="2"/><text x="22.3669%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="22.1169%" y="613" width="0.1580%" height="15" fill="rgb(237,95,45)" fg:x="280" fg:w="2"/><text x="22.3669%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="22.1169%" y="597" width="0.1580%" height="15" fill="rgb(208,109,11)" fg:x="280" fg:w="2"/><text x="22.3669%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="22.1169%" y="581" width="0.1580%" height="15" fill="rgb(216,190,48)" fg:x="280" fg:w="2"/><text x="22.3669%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="22.1169%" y="565" width="0.1580%" height="15" fill="rgb(251,171,36)" fg:x="280" fg:w="2"/><text x="22.3669%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="22.1169%" y="549" width="0.1580%" height="15" fill="rgb(230,62,22)" fg:x="280" fg:w="2"/><text x="22.3669%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="22.1169%" y="533" width="0.1580%" height="15" fill="rgb(225,114,35)" fg:x="280" fg:w="2"/><text x="22.3669%" y="543.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="22.1169%" y="517" width="0.1580%" height="15" fill="rgb(215,118,42)" fg:x="280" fg:w="2"/><text x="22.3669%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="22.2749%" y="613" width="0.1580%" height="15" fill="rgb(243,119,21)" fg:x="282" fg:w="2"/><text x="22.5249%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.3539%" y="597" width="0.0790%" height="15" fill="rgb(252,177,53)" fg:x="283" fg:w="1"/><text x="22.6039%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.4329%" y="597" width="0.0790%" height="15" fill="rgb(237,209,29)" fg:x="284" fg:w="1"/><text x="22.6829%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="22.5118%" y="565" width="0.3160%" height="15" fill="rgb(212,65,23)" fg:x="285" fg:w="4"/><text x="22.7618%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="22.5908%" y="549" width="0.2370%" height="15" fill="rgb(230,222,46)" fg:x="286" fg:w="3"/><text x="22.8408%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="22.5908%" y="533" width="0.2370%" height="15" fill="rgb(215,135,32)" fg:x="286" fg:w="3"/><text x="22.8408%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="22.5908%" y="517" width="0.2370%" height="15" fill="rgb(246,101,22)" fg:x="286" fg:w="3"/><text x="22.8408%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.7488%" y="501" width="0.0790%" height="15" fill="rgb(206,107,13)" fg:x="288" fg:w="1"/><text x="22.9988%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.39%)</title><rect x="22.5118%" y="597" width="0.3949%" height="15" fill="rgb(250,100,44)" fg:x="285" fg:w="5"/><text x="22.7618%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="22.5118%" y="581" width="0.3949%" height="15" fill="rgb(231,147,38)" fg:x="285" fg:w="5"/><text x="22.7618%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.8278%" y="565" width="0.0790%" height="15" fill="rgb(229,8,40)" fg:x="289" fg:w="1"/><text x="23.0778%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.9858%" y="549" width="0.0790%" height="15" fill="rgb(221,135,30)" fg:x="291" fg:w="1"/><text x="23.2358%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="22.9068%" y="597" width="0.2370%" height="15" fill="rgb(249,193,18)" fg:x="290" fg:w="3"/><text x="23.1568%" y="607.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="22.9068%" y="581" width="0.2370%" height="15" fill="rgb(209,133,39)" fg:x="290" fg:w="3"/><text x="23.1568%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="22.9068%" y="565" width="0.2370%" height="15" fill="rgb(232,100,14)" fg:x="290" fg:w="3"/><text x="23.1568%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="23.0648%" y="549" width="0.0790%" height="15" fill="rgb(224,185,1)" fg:x="292" fg:w="1"/><text x="23.3148%" y="559.50"></text></g><g><title>ryu::pretty::format64 (2 samples, 0.16%)</title><rect x="23.1438%" y="581" width="0.1580%" height="15" fill="rgb(223,139,8)" fg:x="293" fg:w="2"/><text x="23.3938%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="23.3017%" y="581" width="0.2370%" height="15" fill="rgb(232,213,38)" fg:x="295" fg:w="3"/><text x="23.5517%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.3807%" y="565" width="0.1580%" height="15" fill="rgb(207,94,22)" fg:x="296" fg:w="2"/><text x="23.6307%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.4597%" y="549" width="0.0790%" height="15" fill="rgb(219,183,54)" fg:x="297" fg:w="1"/><text x="23.7097%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.4597%" y="533" width="0.0790%" height="15" fill="rgb(216,185,54)" fg:x="297" fg:w="1"/><text x="23.7097%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.4597%" y="517" width="0.0790%" height="15" fill="rgb(254,217,39)" fg:x="297" fg:w="1"/><text x="23.7097%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.4597%" y="501" width="0.0790%" height="15" fill="rgb(240,178,23)" fg:x="297" fg:w="1"/><text x="23.7097%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.4597%" y="485" width="0.0790%" height="15" fill="rgb(218,11,47)" fg:x="297" fg:w="1"/><text x="23.7097%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="23.5387%" y="565" width="0.1580%" height="15" fill="rgb(218,51,51)" fg:x="298" fg:w="2"/><text x="23.7887%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.6177%" y="549" width="0.0790%" height="15" fill="rgb(238,126,27)" fg:x="299" fg:w="1"/><text x="23.8677%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.6177%" y="533" width="0.0790%" height="15" fill="rgb(249,202,22)" fg:x="299" fg:w="1"/><text x="23.8677%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.6177%" y="517" width="0.0790%" height="15" fill="rgb(254,195,49)" fg:x="299" fg:w="1"/><text x="23.8677%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="23.5387%" y="581" width="0.2370%" height="15" fill="rgb(208,123,14)" fg:x="298" fg:w="3"/><text x="23.7887%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.6967%" y="565" width="0.0790%" height="15" fill="rgb(224,200,8)" fg:x="300" fg:w="1"/><text x="23.9467%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.79%)</title><rect x="23.1438%" y="597" width="0.7899%" height="15" fill="rgb(217,61,36)" fg:x="293" fg:w="10"/><text x="23.3938%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.7757%" y="581" width="0.1580%" height="15" fill="rgb(206,35,45)" fg:x="301" fg:w="2"/><text x="24.0257%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.8547%" y="565" width="0.0790%" height="15" fill="rgb(217,65,33)" fg:x="302" fg:w="1"/><text x="24.1047%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (25 samples, 1.97%)</title><rect x="22.1169%" y="645" width="1.9747%" height="15" fill="rgb(222,158,48)" fg:x="280" fg:w="25"/><text x="22.3669%" y="655.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (23 samples, 1.82%)</title><rect x="22.2749%" y="629" width="1.8167%" height="15" fill="rgb(254,2,54)" fg:x="282" fg:w="23"/><text x="22.5249%" y="639.50">s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (21 samples, 1.66%)</title><rect x="22.4329%" y="613" width="1.6588%" height="15" fill="rgb(250,143,38)" fg:x="284" fg:w="21"/><text x="22.6829%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.9336%" y="597" width="0.1580%" height="15" fill="rgb(248,25,0)" fg:x="303" fg:w="2"/><text x="24.1836%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.0126%" y="581" width="0.0790%" height="15" fill="rgb(206,152,27)" fg:x="304" fg:w="1"/><text x="24.2626%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.0126%" y="565" width="0.0790%" height="15" fill="rgb(240,77,30)" fg:x="304" fg:w="1"/><text x="24.2626%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="24.2496%" y="565" width="0.1580%" height="15" fill="rgb(231,5,3)" fg:x="307" fg:w="2"/><text x="24.4996%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.4076%" y="549" width="0.0790%" height="15" fill="rgb(207,226,32)" fg:x="309" fg:w="1"/><text x="24.6576%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.4076%" y="533" width="0.0790%" height="15" fill="rgb(222,207,47)" fg:x="309" fg:w="1"/><text x="24.6576%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.4866%" y="533" width="0.0790%" height="15" fill="rgb(229,115,45)" fg:x="310" fg:w="1"/><text x="24.7366%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.6445%" y="501" width="0.0790%" height="15" fill="rgb(224,191,6)" fg:x="312" fg:w="1"/><text x="24.8945%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="24.5656%" y="533" width="0.2370%" height="15" fill="rgb(230,227,24)" fg:x="311" fg:w="3"/><text x="24.8156%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="24.6445%" y="517" width="0.1580%" height="15" fill="rgb(228,80,19)" fg:x="312" fg:w="2"/><text x="24.8945%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.7235%" y="501" width="0.0790%" height="15" fill="rgb(247,229,0)" fg:x="313" fg:w="1"/><text x="24.9735%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.7235%" y="485" width="0.0790%" height="15" fill="rgb(237,194,15)" fg:x="313" fg:w="1"/><text x="24.9735%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.7235%" y="469" width="0.0790%" height="15" fill="rgb(219,203,20)" fg:x="313" fg:w="1"/><text x="24.9735%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.7235%" y="453" width="0.0790%" height="15" fill="rgb(234,128,8)" fg:x="313" fg:w="1"/><text x="24.9735%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.63%)</title><rect x="24.2496%" y="613" width="0.6319%" height="15" fill="rgb(248,202,8)" fg:x="307" fg:w="8"/><text x="24.4996%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.63%)</title><rect x="24.2496%" y="597" width="0.6319%" height="15" fill="rgb(206,104,37)" fg:x="307" fg:w="8"/><text x="24.4996%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.63%)</title><rect x="24.2496%" y="581" width="0.6319%" height="15" fill="rgb(223,8,27)" fg:x="307" fg:w="8"/><text x="24.4996%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="24.4076%" y="565" width="0.4739%" height="15" fill="rgb(216,217,28)" fg:x="309" fg:w="6"/><text x="24.6576%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="24.4866%" y="549" width="0.3949%" height="15" fill="rgb(249,199,1)" fg:x="310" fg:w="5"/><text x="24.7366%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.8025%" y="533" width="0.0790%" height="15" fill="rgb(240,85,17)" fg:x="314" fg:w="1"/><text x="25.0525%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.8025%" y="517" width="0.0790%" height="15" fill="rgb(206,108,45)" fg:x="314" fg:w="1"/><text x="25.0525%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.8025%" y="501" width="0.0790%" height="15" fill="rgb(245,210,41)" fg:x="314" fg:w="1"/><text x="25.0525%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;treediff::tools::record::Recorder&lt;treediff::value::shared::Key,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="24.8815%" y="613" width="0.0790%" height="15" fill="rgb(206,13,37)" fg:x="315" fg:w="1"/><text x="25.1315%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="25.0395%" y="549" width="0.0790%" height="15" fill="rgb(250,61,18)" fg:x="317" fg:w="1"/><text x="25.2895%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="25.0395%" y="533" width="0.0790%" height="15" fill="rgb(235,172,48)" fg:x="317" fg:w="1"/><text x="25.2895%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="25.0395%" y="597" width="0.1580%" height="15" fill="rgb(249,201,17)" fg:x="317" fg:w="2"/><text x="25.2895%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="25.0395%" y="581" width="0.1580%" height="15" fill="rgb(219,208,6)" fg:x="317" fg:w="2"/><text x="25.2895%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="25.0395%" y="565" width="0.1580%" height="15" fill="rgb(248,31,23)" fg:x="317" fg:w="2"/><text x="25.2895%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.1185%" y="549" width="0.0790%" height="15" fill="rgb(245,15,42)" fg:x="318" fg:w="1"/><text x="25.3685%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.1975%" y="597" width="0.0790%" height="15" fill="rgb(222,217,39)" fg:x="319" fg:w="1"/><text x="25.4475%" y="607.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (16 samples, 1.26%)</title><rect x="24.0916%" y="629" width="1.2638%" height="15" fill="rgb(210,219,27)" fg:x="305" fg:w="16"/><text x="24.3416%" y="639.50"></text></g><g><title>treediff::diff::diff (5 samples, 0.39%)</title><rect x="24.9605%" y="613" width="0.3949%" height="15" fill="rgb(252,166,36)" fg:x="316" fg:w="5"/><text x="25.2105%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="25.2765%" y="597" width="0.0790%" height="15" fill="rgb(245,132,34)" fg:x="320" fg:w="1"/><text x="25.5265%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.6714%" y="597" width="0.0790%" height="15" fill="rgb(236,54,3)" fg:x="325" fg:w="1"/><text x="25.9214%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="25.7504%" y="597" width="0.0790%" height="15" fill="rgb(241,173,43)" fg:x="326" fg:w="1"/><text x="26.0004%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="25.7504%" y="581" width="0.0790%" height="15" fill="rgb(215,190,9)" fg:x="326" fg:w="1"/><text x="26.0004%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="25.8294%" y="597" width="0.0790%" height="15" fill="rgb(242,101,16)" fg:x="327" fg:w="1"/><text x="26.0794%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="25.8294%" y="581" width="0.0790%" height="15" fill="rgb(223,190,21)" fg:x="327" fg:w="1"/><text x="26.0794%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.8294%" y="565" width="0.0790%" height="15" fill="rgb(215,228,25)" fg:x="327" fg:w="1"/><text x="26.0794%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.0664%" y="549" width="0.1580%" height="15" fill="rgb(225,36,22)" fg:x="330" fg:w="2"/><text x="26.3164%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="26.0664%" y="533" width="0.1580%" height="15" fill="rgb(251,106,46)" fg:x="330" fg:w="2"/><text x="26.3164%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="26.2243%" y="549" width="0.2370%" height="15" fill="rgb(208,90,1)" fg:x="332" fg:w="3"/><text x="26.4743%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="26.3033%" y="533" width="0.1580%" height="15" fill="rgb(243,10,4)" fg:x="333" fg:w="2"/><text x="26.5533%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.9352%" y="485" width="0.0790%" height="15" fill="rgb(212,137,27)" fg:x="341" fg:w="1"/><text x="27.1852%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="26.9352%" y="501" width="0.1580%" height="15" fill="rgb(231,220,49)" fg:x="341" fg:w="2"/><text x="27.1852%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="27.0142%" y="485" width="0.0790%" height="15" fill="rgb(237,96,20)" fg:x="342" fg:w="1"/><text x="27.2642%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (15 samples, 1.18%)</title><rect x="25.9874%" y="565" width="1.1848%" height="15" fill="rgb(239,229,30)" fg:x="329" fg:w="15"/><text x="26.2374%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.71%)</title><rect x="26.4613%" y="549" width="0.7109%" height="15" fill="rgb(219,65,33)" fg:x="335" fg:w="9"/><text x="26.7113%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.55%)</title><rect x="26.6193%" y="533" width="0.5529%" height="15" fill="rgb(243,134,7)" fg:x="337" fg:w="7"/><text x="26.8693%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.55%)</title><rect x="26.6193%" y="517" width="0.5529%" height="15" fill="rgb(216,177,54)" fg:x="337" fg:w="7"/><text x="26.8693%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.0932%" y="501" width="0.0790%" height="15" fill="rgb(211,160,20)" fg:x="343" fg:w="1"/><text x="27.3432%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (17 samples, 1.34%)</title><rect x="25.9874%" y="581" width="1.3428%" height="15" fill="rgb(239,85,39)" fg:x="329" fg:w="17"/><text x="26.2374%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="27.1722%" y="565" width="0.1580%" height="15" fill="rgb(232,125,22)" fg:x="344" fg:w="2"/><text x="27.4222%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (28 samples, 2.21%)</title><rect x="25.3555%" y="629" width="2.2117%" height="15" fill="rgb(244,57,34)" fg:x="321" fg:w="28"/><text x="25.6055%" y="639.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (26 samples, 2.05%)</title><rect x="25.5134%" y="613" width="2.0537%" height="15" fill="rgb(214,203,32)" fg:x="323" fg:w="26"/><text x="25.7634%" y="623.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (21 samples, 1.66%)</title><rect x="25.9084%" y="597" width="1.6588%" height="15" fill="rgb(207,58,43)" fg:x="328" fg:w="21"/><text x="26.1584%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="27.3302%" y="581" width="0.2370%" height="15" fill="rgb(215,193,15)" fg:x="346" fg:w="3"/><text x="27.5802%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.4882%" y="565" width="0.0790%" height="15" fill="rgb(232,15,44)" fg:x="348" fg:w="1"/><text x="27.7382%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.9621%" y="389" width="0.0790%" height="15" fill="rgb(212,3,48)" fg:x="354" fg:w="1"/><text x="28.2121%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="27.9621%" y="373" width="0.0790%" height="15" fill="rgb(218,128,7)" fg:x="354" fg:w="1"/><text x="28.2121%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="27.9621%" y="485" width="0.2370%" height="15" fill="rgb(226,216,39)" fg:x="354" fg:w="3"/><text x="28.2121%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="27.9621%" y="469" width="0.2370%" height="15" fill="rgb(243,47,51)" fg:x="354" fg:w="3"/><text x="28.2121%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="27.9621%" y="453" width="0.2370%" height="15" fill="rgb(241,183,40)" fg:x="354" fg:w="3"/><text x="28.2121%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="27.9621%" y="437" width="0.2370%" height="15" fill="rgb(231,217,32)" fg:x="354" fg:w="3"/><text x="28.2121%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="27.9621%" y="421" width="0.2370%" height="15" fill="rgb(229,61,38)" fg:x="354" fg:w="3"/><text x="28.2121%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="27.9621%" y="405" width="0.2370%" height="15" fill="rgb(225,210,5)" fg:x="354" fg:w="3"/><text x="28.2121%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.0411%" y="389" width="0.1580%" height="15" fill="rgb(231,79,45)" fg:x="355" fg:w="2"/><text x="28.2911%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.0411%" y="373" width="0.1580%" height="15" fill="rgb(224,100,7)" fg:x="355" fg:w="2"/><text x="28.2911%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.1201%" y="357" width="0.0790%" height="15" fill="rgb(241,198,18)" fg:x="356" fg:w="1"/><text x="28.3701%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="28.3570%" y="421" width="0.0790%" height="15" fill="rgb(252,97,53)" fg:x="359" fg:w="1"/><text x="28.6070%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="28.1991%" y="469" width="0.3160%" height="15" fill="rgb(220,88,7)" fg:x="357" fg:w="4"/><text x="28.4491%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="28.1991%" y="453" width="0.3160%" height="15" fill="rgb(213,176,14)" fg:x="357" fg:w="4"/><text x="28.4491%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="28.2780%" y="437" width="0.2370%" height="15" fill="rgb(246,73,7)" fg:x="358" fg:w="3"/><text x="28.5280%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4360%" y="421" width="0.0790%" height="15" fill="rgb(245,64,36)" fg:x="360" fg:w="1"/><text x="28.6860%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="28.5150%" y="453" width="0.0790%" height="15" fill="rgb(245,80,10)" fg:x="361" fg:w="1"/><text x="28.7650%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.71%)</title><rect x="27.9621%" y="501" width="0.7109%" height="15" fill="rgb(232,107,50)" fg:x="354" fg:w="9"/><text x="28.2121%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.47%)</title><rect x="28.1991%" y="485" width="0.4739%" height="15" fill="rgb(253,3,0)" fg:x="357" fg:w="6"/><text x="28.4491%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="28.5150%" y="469" width="0.1580%" height="15" fill="rgb(212,99,53)" fg:x="361" fg:w="2"/><text x="28.7650%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.5940%" y="453" width="0.0790%" height="15" fill="rgb(249,111,54)" fg:x="362" fg:w="1"/><text x="28.8440%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.87%)</title><rect x="27.8831%" y="533" width="0.8689%" height="15" fill="rgb(249,55,30)" fg:x="353" fg:w="11"/><text x="28.1331%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.79%)</title><rect x="27.9621%" y="517" width="0.7899%" height="15" fill="rgb(237,47,42)" fg:x="354" fg:w="10"/><text x="28.2121%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.6730%" y="501" width="0.0790%" height="15" fill="rgb(211,20,18)" fg:x="363" fg:w="1"/><text x="28.9230%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.03%)</title><rect x="27.8041%" y="565" width="1.0269%" height="15" fill="rgb(231,203,46)" fg:x="352" fg:w="13"/><text x="28.0541%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.03%)</title><rect x="27.8041%" y="549" width="1.0269%" height="15" fill="rgb(237,142,3)" fg:x="352" fg:w="13"/><text x="28.0541%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.7520%" y="533" width="0.0790%" height="15" fill="rgb(241,107,1)" fg:x="364" fg:w="1"/><text x="29.0020%" y="543.50"></text></g><g><title>engine::session::state::State::close (98 samples, 7.74%)</title><rect x="21.2480%" y="725" width="7.7409%" height="15" fill="rgb(229,83,13)" fg:x="269" fg:w="98"/><text x="21.4980%" y="735.50">engine::ses..</text></g><g><title>engine::session::state::State::flush_entities (98 samples, 7.74%)</title><rect x="21.2480%" y="709" width="7.7409%" height="15" fill="rgb(241,91,40)" fg:x="269" fg:w="98"/><text x="21.4980%" y="719.50">engine::ses..</text></g><g><title>core::iter::adapters::try_process (92 samples, 7.27%)</title><rect x="21.7220%" y="693" width="7.2670%" height="15" fill="rgb(225,3,45)" fg:x="275" fg:w="92"/><text x="21.9720%" y="703.50">core::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (92 samples, 7.27%)</title><rect x="21.7220%" y="677" width="7.2670%" height="15" fill="rgb(244,223,14)" fg:x="275" fg:w="92"/><text x="21.9720%" y="687.50">&lt;alloc::ve..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (91 samples, 7.19%)</title><rect x="21.8009%" y="661" width="7.1880%" height="15" fill="rgb(224,124,37)" fg:x="276" fg:w="91"/><text x="22.0509%" y="671.50">engine::se..</text></g><g><title>kernel::model::any_entity_changes (62 samples, 4.90%)</title><rect x="24.0916%" y="645" width="4.8973%" height="15" fill="rgb(251,171,30)" fg:x="305" fg:w="62"/><text x="24.3416%" y="655.50">kernel..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (18 samples, 1.42%)</title><rect x="27.5671%" y="629" width="1.4218%" height="15" fill="rgb(236,46,54)" fg:x="349" fg:w="18"/><text x="27.8171%" y="639.50"></text></g><g><title>serde_json::de::from_trait (18 samples, 1.42%)</title><rect x="27.5671%" y="613" width="1.4218%" height="15" fill="rgb(245,213,5)" fg:x="349" fg:w="18"/><text x="27.8171%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.42%)</title><rect x="27.5671%" y="597" width="1.4218%" height="15" fill="rgb(230,144,27)" fg:x="349" fg:w="18"/><text x="27.8171%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (18 samples, 1.42%)</title><rect x="27.5671%" y="581" width="1.4218%" height="15" fill="rgb(220,86,6)" fg:x="349" fg:w="18"/><text x="27.8171%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="28.8310%" y="565" width="0.1580%" height="15" fill="rgb(240,20,13)" fg:x="365" fg:w="2"/><text x="29.0810%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.9100%" y="549" width="0.0790%" height="15" fill="rgb(217,89,34)" fg:x="366" fg:w="1"/><text x="29.1600%" y="559.50"></text></g><g><title>engine::session::Session::close (101 samples, 7.98%)</title><rect x="21.0900%" y="741" width="7.9779%" height="15" fill="rgb(229,13,5)" fg:x="267" fg:w="101"/><text x="21.3400%" y="751.50">engine::ses..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="28.9889%" y="725" width="0.0790%" height="15" fill="rgb(244,67,35)" fg:x="367" fg:w="1"/><text x="29.2389%" y="735.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="29.2259%" y="645" width="0.0790%" height="15" fill="rgb(221,40,2)" fg:x="370" fg:w="1"/><text x="29.4759%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.2259%" y="629" width="0.0790%" height="15" fill="rgb(237,157,21)" fg:x="370" fg:w="1"/><text x="29.4759%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (2 samples, 0.16%)</title><rect x="29.2259%" y="709" width="0.1580%" height="15" fill="rgb(222,94,11)" fg:x="370" fg:w="2"/><text x="29.4759%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="29.2259%" y="693" width="0.1580%" height="15" fill="rgb(249,113,6)" fg:x="370" fg:w="2"/><text x="29.4759%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="29.2259%" y="677" width="0.1580%" height="15" fill="rgb(238,137,36)" fg:x="370" fg:w="2"/><text x="29.4759%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.2259%" y="661" width="0.1580%" height="15" fill="rgb(210,102,26)" fg:x="370" fg:w="2"/><text x="29.4759%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="29.3049%" y="645" width="0.0790%" height="15" fill="rgb(218,30,30)" fg:x="371" fg:w="1"/><text x="29.5549%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.3049%" y="629" width="0.0790%" height="15" fill="rgb(214,67,26)" fg:x="371" fg:w="1"/><text x="29.5549%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.3049%" y="613" width="0.0790%" height="15" fill="rgb(251,9,53)" fg:x="371" fg:w="1"/><text x="29.5549%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="29.3049%" y="597" width="0.0790%" height="15" fill="rgb(228,204,25)" fg:x="371" fg:w="1"/><text x="29.5549%" y="607.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (3 samples, 0.24%)</title><rect x="29.3839%" y="709" width="0.2370%" height="15" fill="rgb(207,153,8)" fg:x="372" fg:w="3"/><text x="29.6339%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="29.3839%" y="693" width="0.2370%" height="15" fill="rgb(242,9,16)" fg:x="372" fg:w="3"/><text x="29.6339%" y="703.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="29.4629%" y="677" width="0.1580%" height="15" fill="rgb(217,211,10)" fg:x="373" fg:w="2"/><text x="29.7129%" y="687.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (2 samples, 0.16%)</title><rect x="29.4629%" y="661" width="0.1580%" height="15" fill="rgb(219,228,52)" fg:x="373" fg:w="2"/><text x="29.7129%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="29.5419%" y="645" width="0.0790%" height="15" fill="rgb(231,92,29)" fg:x="374" fg:w="1"/><text x="29.7919%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="29.6209%" y="693" width="0.1580%" height="15" fill="rgb(232,8,23)" fg:x="375" fg:w="2"/><text x="29.8709%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="29.6209%" y="677" width="0.1580%" height="15" fill="rgb(216,211,34)" fg:x="375" fg:w="2"/><text x="29.8709%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="29.6209%" y="661" width="0.1580%" height="15" fill="rgb(236,151,0)" fg:x="375" fg:w="2"/><text x="29.8709%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="29.6209%" y="645" width="0.1580%" height="15" fill="rgb(209,168,3)" fg:x="375" fg:w="2"/><text x="29.8709%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="29.6209%" y="629" width="0.1580%" height="15" fill="rgb(208,129,28)" fg:x="375" fg:w="2"/><text x="29.8709%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="29.6209%" y="613" width="0.1580%" height="15" fill="rgb(229,78,22)" fg:x="375" fg:w="2"/><text x="29.8709%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="29.6209%" y="597" width="0.1580%" height="15" fill="rgb(228,187,13)" fg:x="375" fg:w="2"/><text x="29.8709%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="29.6209%" y="581" width="0.1580%" height="15" fill="rgb(240,119,24)" fg:x="375" fg:w="2"/><text x="29.8709%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="29.6209%" y="565" width="0.1580%" height="15" fill="rgb(209,194,42)" fg:x="375" fg:w="2"/><text x="29.8709%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 0.16%)</title><rect x="29.6209%" y="549" width="0.1580%" height="15" fill="rgb(247,200,46)" fg:x="375" fg:w="2"/><text x="29.8709%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.6998%" y="533" width="0.0790%" height="15" fill="rgb(218,76,16)" fg:x="376" fg:w="1"/><text x="29.9498%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.6998%" y="517" width="0.0790%" height="15" fill="rgb(225,21,48)" fg:x="376" fg:w="1"/><text x="29.9498%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="29.6998%" y="501" width="0.0790%" height="15" fill="rgb(239,223,50)" fg:x="376" fg:w="1"/><text x="29.9498%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="29.6998%" y="485" width="0.0790%" height="15" fill="rgb(244,45,21)" fg:x="376" fg:w="1"/><text x="29.9498%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="29.6998%" y="469" width="0.0790%" height="15" fill="rgb(232,33,43)" fg:x="376" fg:w="1"/><text x="29.9498%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="29.6998%" y="453" width="0.0790%" height="15" fill="rgb(209,8,3)" fg:x="376" fg:w="1"/><text x="29.9498%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="29.6998%" y="437" width="0.0790%" height="15" fill="rgb(214,25,53)" fg:x="376" fg:w="1"/><text x="29.9498%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::PerformAction&gt; (1 samples, 0.08%)</title><rect x="29.7788%" y="693" width="0.0790%" height="15" fill="rgb(254,186,54)" fg:x="377" fg:w="1"/><text x="30.0288%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.8578%" y="677" width="0.0790%" height="15" fill="rgb(208,174,49)" fg:x="378" fg:w="1"/><text x="30.1078%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="29.8578%" y="661" width="0.0790%" height="15" fill="rgb(233,191,51)" fg:x="378" fg:w="1"/><text x="30.1078%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="29.9368%" y="677" width="0.0790%" height="15" fill="rgb(222,134,10)" fg:x="379" fg:w="1"/><text x="30.1868%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.9368%" y="661" width="0.0790%" height="15" fill="rgb(230,226,20)" fg:x="379" fg:w="1"/><text x="30.1868%" y="671.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="30.0158%" y="677" width="0.2370%" height="15" fill="rgb(251,111,25)" fg:x="380" fg:w="3"/><text x="30.2658%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.24%)</title><rect x="30.0158%" y="661" width="0.2370%" height="15" fill="rgb(224,40,46)" fg:x="380" fg:w="3"/><text x="30.2658%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (3 samples, 0.24%)</title><rect x="30.0158%" y="645" width="0.2370%" height="15" fill="rgb(236,108,47)" fg:x="380" fg:w="3"/><text x="30.2658%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="30.1738%" y="629" width="0.0790%" height="15" fill="rgb(234,93,0)" fg:x="382" fg:w="1"/><text x="30.4238%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.3318%" y="549" width="0.0790%" height="15" fill="rgb(224,213,32)" fg:x="384" fg:w="1"/><text x="30.5818%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.3318%" y="533" width="0.0790%" height="15" fill="rgb(251,11,48)" fg:x="384" fg:w="1"/><text x="30.5818%" y="543.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="30.4107%" y="549" width="0.0790%" height="15" fill="rgb(236,173,5)" fg:x="385" fg:w="1"/><text x="30.6607%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="30.3318%" y="565" width="0.2370%" height="15" fill="rgb(230,95,12)" fg:x="384" fg:w="3"/><text x="30.5818%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="30.4897%" y="549" width="0.0790%" height="15" fill="rgb(232,209,1)" fg:x="386" fg:w="1"/><text x="30.7397%" y="559.50"></text></g><g><title>engine::session::internal::&lt;impl core::convert::From&lt;engine::session::internal::Added&gt; for kernel::model::EntityPtr&gt;::from (1 samples, 0.08%)</title><rect x="30.5687%" y="517" width="0.0790%" height="15" fill="rgb(232,6,1)" fg:x="387" fg:w="1"/><text x="30.8187%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.6477%" y="469" width="0.0790%" height="15" fill="rgb(210,224,50)" fg:x="388" fg:w="1"/><text x="30.8977%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.6477%" y="453" width="0.0790%" height="15" fill="rgb(228,127,35)" fg:x="388" fg:w="1"/><text x="30.8977%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.6477%" y="437" width="0.0790%" height="15" fill="rgb(245,102,45)" fg:x="388" fg:w="1"/><text x="30.8977%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.6477%" y="421" width="0.0790%" height="15" fill="rgb(214,1,49)" fg:x="388" fg:w="1"/><text x="30.8977%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.6477%" y="405" width="0.0790%" height="15" fill="rgb(226,163,40)" fg:x="388" fg:w="1"/><text x="30.8977%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="30.6477%" y="389" width="0.0790%" height="15" fill="rgb(239,212,28)" fg:x="388" fg:w="1"/><text x="30.8977%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="30.6477%" y="373" width="0.0790%" height="15" fill="rgb(220,20,13)" fg:x="388" fg:w="1"/><text x="30.8977%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="30.6477%" y="357" width="0.0790%" height="15" fill="rgb(210,164,35)" fg:x="388" fg:w="1"/><text x="30.8977%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.6477%" y="341" width="0.0790%" height="15" fill="rgb(248,109,41)" fg:x="388" fg:w="1"/><text x="30.8977%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.6477%" y="325" width="0.0790%" height="15" fill="rgb(238,23,50)" fg:x="388" fg:w="1"/><text x="30.8977%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="30.6477%" y="309" width="0.0790%" height="15" fill="rgb(211,48,49)" fg:x="388" fg:w="1"/><text x="30.8977%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="30.6477%" y="293" width="0.0790%" height="15" fill="rgb(223,36,21)" fg:x="388" fg:w="1"/><text x="30.8977%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="30.6477%" y="277" width="0.0790%" height="15" fill="rgb(207,123,46)" fg:x="388" fg:w="1"/><text x="30.8977%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="30.6477%" y="261" width="0.0790%" height="15" fill="rgb(240,218,32)" fg:x="388" fg:w="1"/><text x="30.8977%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6477%" y="245" width="0.0790%" height="15" fill="rgb(252,5,43)" fg:x="388" fg:w="1"/><text x="30.8977%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="30.6477%" y="501" width="0.1580%" height="15" fill="rgb(252,84,19)" fg:x="388" fg:w="2"/><text x="30.8977%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="30.6477%" y="485" width="0.1580%" height="15" fill="rgb(243,152,39)" fg:x="388" fg:w="2"/><text x="30.8977%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.7267%" y="469" width="0.0790%" height="15" fill="rgb(234,160,15)" fg:x="389" fg:w="1"/><text x="30.9767%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.7267%" y="453" width="0.0790%" height="15" fill="rgb(237,34,20)" fg:x="389" fg:w="1"/><text x="30.9767%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="30.7267%" y="437" width="0.0790%" height="15" fill="rgb(229,97,13)" fg:x="389" fg:w="1"/><text x="30.9767%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="30.7267%" y="421" width="0.0790%" height="15" fill="rgb(234,71,50)" fg:x="389" fg:w="1"/><text x="30.9767%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="30.7267%" y="405" width="0.0790%" height="15" fill="rgb(253,155,4)" fg:x="389" fg:w="1"/><text x="30.9767%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.7267%" y="389" width="0.0790%" height="15" fill="rgb(222,185,37)" fg:x="389" fg:w="1"/><text x="30.9767%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.7267%" y="373" width="0.0790%" height="15" fill="rgb(251,177,13)" fg:x="389" fg:w="1"/><text x="30.9767%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="30.7267%" y="357" width="0.0790%" height="15" fill="rgb(250,179,40)" fg:x="389" fg:w="1"/><text x="30.9767%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="30.7267%" y="341" width="0.0790%" height="15" fill="rgb(242,44,2)" fg:x="389" fg:w="1"/><text x="30.9767%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="30.7267%" y="325" width="0.0790%" height="15" fill="rgb(216,177,13)" fg:x="389" fg:w="1"/><text x="30.9767%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="30.7267%" y="309" width="0.0790%" height="15" fill="rgb(216,106,43)" fg:x="389" fg:w="1"/><text x="30.9767%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.7267%" y="293" width="0.0790%" height="15" fill="rgb(216,183,2)" fg:x="389" fg:w="1"/><text x="30.9767%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="30.8057%" y="373" width="0.0790%" height="15" fill="rgb(249,75,3)" fg:x="390" fg:w="1"/><text x="31.0557%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="30.8057%" y="405" width="0.1580%" height="15" fill="rgb(219,67,39)" fg:x="390" fg:w="2"/><text x="31.0557%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="30.8057%" y="389" width="0.1580%" height="15" fill="rgb(253,228,2)" fg:x="390" fg:w="2"/><text x="31.0557%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="30.8847%" y="373" width="0.0790%" height="15" fill="rgb(235,138,27)" fg:x="391" fg:w="1"/><text x="31.1347%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.8847%" y="357" width="0.0790%" height="15" fill="rgb(236,97,51)" fg:x="391" fg:w="1"/><text x="31.1347%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.8847%" y="341" width="0.0790%" height="15" fill="rgb(240,80,30)" fg:x="391" fg:w="1"/><text x="31.1347%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="30.8847%" y="325" width="0.0790%" height="15" fill="rgb(230,178,19)" fg:x="391" fg:w="1"/><text x="31.1347%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="30.8847%" y="309" width="0.0790%" height="15" fill="rgb(210,190,27)" fg:x="391" fg:w="1"/><text x="31.1347%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="30.8057%" y="501" width="0.2370%" height="15" fill="rgb(222,107,31)" fg:x="390" fg:w="3"/><text x="31.0557%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="30.8057%" y="485" width="0.2370%" height="15" fill="rgb(216,127,34)" fg:x="390" fg:w="3"/><text x="31.0557%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="30.8057%" y="469" width="0.2370%" height="15" fill="rgb(234,116,52)" fg:x="390" fg:w="3"/><text x="31.0557%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="30.8057%" y="453" width="0.2370%" height="15" fill="rgb(222,124,15)" fg:x="390" fg:w="3"/><text x="31.0557%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="30.8057%" y="437" width="0.2370%" height="15" fill="rgb(231,179,28)" fg:x="390" fg:w="3"/><text x="31.0557%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="30.8057%" y="421" width="0.2370%" height="15" fill="rgb(226,93,45)" fg:x="390" fg:w="3"/><text x="31.0557%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="30.9637%" y="405" width="0.0790%" height="15" fill="rgb(215,8,51)" fg:x="392" fg:w="1"/><text x="31.2137%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.9637%" y="389" width="0.0790%" height="15" fill="rgb(223,106,5)" fg:x="392" fg:w="1"/><text x="31.2137%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="30.9637%" y="373" width="0.0790%" height="15" fill="rgb(250,191,5)" fg:x="392" fg:w="1"/><text x="31.2137%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="30.9637%" y="357" width="0.0790%" height="15" fill="rgb(242,132,44)" fg:x="392" fg:w="1"/><text x="31.2137%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="30.9637%" y="341" width="0.0790%" height="15" fill="rgb(251,152,29)" fg:x="392" fg:w="1"/><text x="31.2137%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="31.1216%" y="373" width="0.1580%" height="15" fill="rgb(218,179,5)" fg:x="394" fg:w="2"/><text x="31.3716%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="31.2006%" y="357" width="0.0790%" height="15" fill="rgb(227,67,19)" fg:x="395" fg:w="1"/><text x="31.4506%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.2006%" y="341" width="0.0790%" height="15" fill="rgb(233,119,31)" fg:x="395" fg:w="1"/><text x="31.4506%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.2006%" y="325" width="0.0790%" height="15" fill="rgb(241,120,22)" fg:x="395" fg:w="1"/><text x="31.4506%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.2006%" y="309" width="0.0790%" height="15" fill="rgb(224,102,30)" fg:x="395" fg:w="1"/><text x="31.4506%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="31.0427%" y="405" width="0.3160%" height="15" fill="rgb(210,164,37)" fg:x="393" fg:w="4"/><text x="31.2927%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="31.0427%" y="389" width="0.3160%" height="15" fill="rgb(226,191,16)" fg:x="393" fg:w="4"/><text x="31.2927%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.2796%" y="373" width="0.0790%" height="15" fill="rgb(214,40,45)" fg:x="396" fg:w="1"/><text x="31.5296%" y="383.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (14 samples, 1.11%)</title><rect x="30.3318%" y="597" width="1.1058%" height="15" fill="rgb(244,29,26)" fg:x="384" fg:w="14"/><text x="30.5818%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (14 samples, 1.11%)</title><rect x="30.3318%" y="581" width="1.1058%" height="15" fill="rgb(216,16,5)" fg:x="384" fg:w="14"/><text x="30.5818%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.87%)</title><rect x="30.5687%" y="565" width="0.8689%" height="15" fill="rgb(249,76,35)" fg:x="387" fg:w="11"/><text x="30.8187%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.87%)</title><rect x="30.5687%" y="549" width="0.8689%" height="15" fill="rgb(207,11,44)" fg:x="387" fg:w="11"/><text x="30.8187%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.87%)</title><rect x="30.5687%" y="533" width="0.8689%" height="15" fill="rgb(228,190,49)" fg:x="387" fg:w="11"/><text x="30.8187%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.79%)</title><rect x="30.6477%" y="517" width="0.7899%" height="15" fill="rgb(214,173,12)" fg:x="388" fg:w="10"/><text x="30.8977%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.39%)</title><rect x="31.0427%" y="501" width="0.3949%" height="15" fill="rgb(218,26,35)" fg:x="393" fg:w="5"/><text x="31.2927%" y="511.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.39%)</title><rect x="31.0427%" y="485" width="0.3949%" height="15" fill="rgb(220,200,19)" fg:x="393" fg:w="5"/><text x="31.2927%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.39%)</title><rect x="31.0427%" y="469" width="0.3949%" height="15" fill="rgb(239,95,49)" fg:x="393" fg:w="5"/><text x="31.2927%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="31.0427%" y="453" width="0.3949%" height="15" fill="rgb(235,85,53)" fg:x="393" fg:w="5"/><text x="31.2927%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.39%)</title><rect x="31.0427%" y="437" width="0.3949%" height="15" fill="rgb(233,133,31)" fg:x="393" fg:w="5"/><text x="31.2927%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="31.0427%" y="421" width="0.3949%" height="15" fill="rgb(218,25,20)" fg:x="393" fg:w="5"/><text x="31.2927%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.3586%" y="405" width="0.0790%" height="15" fill="rgb(252,210,38)" fg:x="397" fg:w="1"/><text x="31.6086%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="31.4376%" y="581" width="0.0790%" height="15" fill="rgb(242,134,21)" fg:x="398" fg:w="1"/><text x="31.6876%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="31.5166%" y="549" width="0.0790%" height="15" fill="rgb(213,28,48)" fg:x="399" fg:w="1"/><text x="31.7666%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9905%" y="357" width="0.0790%" height="15" fill="rgb(250,196,2)" fg:x="405" fg:w="1"/><text x="32.2405%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.0695%" y="357" width="0.0790%" height="15" fill="rgb(227,5,17)" fg:x="406" fg:w="1"/><text x="32.3195%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.0695%" y="341" width="0.0790%" height="15" fill="rgb(221,226,24)" fg:x="406" fg:w="1"/><text x="32.3195%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="32.0695%" y="325" width="0.0790%" height="15" fill="rgb(211,5,48)" fg:x="406" fg:w="1"/><text x="32.3195%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="32.1485%" y="357" width="0.0790%" height="15" fill="rgb(219,150,6)" fg:x="407" fg:w="1"/><text x="32.3985%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="32.1485%" y="341" width="0.0790%" height="15" fill="rgb(251,46,16)" fg:x="407" fg:w="1"/><text x="32.3985%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.1485%" y="325" width="0.0790%" height="15" fill="rgb(220,204,40)" fg:x="407" fg:w="1"/><text x="32.3985%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="32.2275%" y="341" width="0.0790%" height="15" fill="rgb(211,85,2)" fg:x="408" fg:w="1"/><text x="32.4775%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.2275%" y="325" width="0.0790%" height="15" fill="rgb(229,17,7)" fg:x="408" fg:w="1"/><text x="32.4775%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (5 samples, 0.39%)</title><rect x="31.9905%" y="389" width="0.3949%" height="15" fill="rgb(239,72,28)" fg:x="405" fg:w="5"/><text x="32.2405%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.39%)</title><rect x="31.9905%" y="373" width="0.3949%" height="15" fill="rgb(230,47,54)" fg:x="405" fg:w="5"/><text x="32.2405%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="32.2275%" y="357" width="0.1580%" height="15" fill="rgb(214,50,8)" fg:x="408" fg:w="2"/><text x="32.4775%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="32.3065%" y="341" width="0.0790%" height="15" fill="rgb(216,198,43)" fg:x="409" fg:w="1"/><text x="32.5565%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="32.3065%" y="325" width="0.0790%" height="15" fill="rgb(234,20,35)" fg:x="409" fg:w="1"/><text x="32.5565%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.3065%" y="309" width="0.0790%" height="15" fill="rgb(254,45,19)" fg:x="409" fg:w="1"/><text x="32.5565%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.3065%" y="293" width="0.0790%" height="15" fill="rgb(219,14,44)" fg:x="409" fg:w="1"/><text x="32.5565%" y="303.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (6 samples, 0.47%)</title><rect x="31.9905%" y="421" width="0.4739%" height="15" fill="rgb(217,220,26)" fg:x="405" fg:w="6"/><text x="32.2405%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (6 samples, 0.47%)</title><rect x="31.9905%" y="405" width="0.4739%" height="15" fill="rgb(213,158,28)" fg:x="405" fg:w="6"/><text x="32.2405%" y="415.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="32.3855%" y="389" width="0.0790%" height="15" fill="rgb(252,51,52)" fg:x="410" fg:w="1"/><text x="32.6355%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="32.3855%" y="373" width="0.0790%" height="15" fill="rgb(246,89,16)" fg:x="410" fg:w="1"/><text x="32.6355%" y="383.50"></text></g><g><title>&lt;core::char::ToLowercase as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="32.3855%" y="357" width="0.0790%" height="15" fill="rgb(216,158,49)" fg:x="410" fg:w="1"/><text x="32.6355%" y="367.50"></text></g><g><title>&lt;core::char::CaseMappingIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="32.3855%" y="341" width="0.0790%" height="15" fill="rgb(236,107,19)" fg:x="410" fg:w="1"/><text x="32.6355%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="32.7014%" y="389" width="0.0790%" height="15" fill="rgb(228,185,30)" fg:x="414" fg:w="1"/><text x="32.9514%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.7014%" y="373" width="0.0790%" height="15" fill="rgb(246,134,8)" fg:x="414" fg:w="1"/><text x="32.9514%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.7014%" y="357" width="0.0790%" height="15" fill="rgb(214,143,50)" fg:x="414" fg:w="1"/><text x="32.9514%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.7014%" y="341" width="0.0790%" height="15" fill="rgb(228,75,8)" fg:x="414" fg:w="1"/><text x="32.9514%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.7804%" y="357" width="0.0790%" height="15" fill="rgb(207,175,4)" fg:x="415" fg:w="1"/><text x="33.0304%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.7804%" y="341" width="0.0790%" height="15" fill="rgb(205,108,24)" fg:x="415" fg:w="1"/><text x="33.0304%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="32.7804%" y="373" width="0.1580%" height="15" fill="rgb(244,120,49)" fg:x="415" fg:w="2"/><text x="33.0304%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="32.8594%" y="357" width="0.0790%" height="15" fill="rgb(223,47,38)" fg:x="416" fg:w="1"/><text x="33.1094%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.8594%" y="341" width="0.0790%" height="15" fill="rgb(229,179,11)" fg:x="416" fg:w="1"/><text x="33.1094%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="32.8594%" y="325" width="0.0790%" height="15" fill="rgb(231,122,1)" fg:x="416" fg:w="1"/><text x="33.1094%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.8594%" y="309" width="0.0790%" height="15" fill="rgb(245,119,9)" fg:x="416" fg:w="1"/><text x="33.1094%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.9384%" y="373" width="0.0790%" height="15" fill="rgb(241,163,25)" fg:x="417" fg:w="1"/><text x="33.1884%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.39%)</title><rect x="32.7804%" y="389" width="0.3949%" height="15" fill="rgb(217,214,3)" fg:x="415" fg:w="5"/><text x="33.0304%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (2 samples, 0.16%)</title><rect x="33.0174%" y="373" width="0.1580%" height="15" fill="rgb(240,86,28)" fg:x="418" fg:w="2"/><text x="33.2674%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.1754%" y="357" width="0.0790%" height="15" fill="rgb(215,47,9)" fg:x="420" fg:w="1"/><text x="33.4254%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.1754%" y="341" width="0.0790%" height="15" fill="rgb(252,25,45)" fg:x="420" fg:w="1"/><text x="33.4254%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.1754%" y="325" width="0.0790%" height="15" fill="rgb(251,164,9)" fg:x="420" fg:w="1"/><text x="33.4254%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="33.1754%" y="309" width="0.0790%" height="15" fill="rgb(233,194,0)" fg:x="420" fg:w="1"/><text x="33.4254%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="33.1754%" y="293" width="0.0790%" height="15" fill="rgb(249,111,24)" fg:x="420" fg:w="1"/><text x="33.4254%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="33.1754%" y="277" width="0.0790%" height="15" fill="rgb(250,223,3)" fg:x="420" fg:w="1"/><text x="33.4254%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.1754%" y="261" width="0.0790%" height="15" fill="rgb(236,178,37)" fg:x="420" fg:w="1"/><text x="33.4254%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.1754%" y="245" width="0.0790%" height="15" fill="rgb(241,158,50)" fg:x="420" fg:w="1"/><text x="33.4254%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="33.1754%" y="229" width="0.0790%" height="15" fill="rgb(213,121,41)" fg:x="420" fg:w="1"/><text x="33.4254%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="33.1754%" y="213" width="0.0790%" height="15" fill="rgb(240,92,3)" fg:x="420" fg:w="1"/><text x="33.4254%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="33.1754%" y="197" width="0.0790%" height="15" fill="rgb(205,123,3)" fg:x="420" fg:w="1"/><text x="33.4254%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="33.1754%" y="181" width="0.0790%" height="15" fill="rgb(205,97,47)" fg:x="420" fg:w="1"/><text x="33.4254%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.1754%" y="165" width="0.0790%" height="15" fill="rgb(247,152,14)" fg:x="420" fg:w="1"/><text x="33.4254%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.2543%" y="357" width="0.0790%" height="15" fill="rgb(248,195,53)" fg:x="421" fg:w="1"/><text x="33.5043%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="33.1754%" y="373" width="0.2370%" height="15" fill="rgb(226,201,16)" fg:x="420" fg:w="3"/><text x="33.4254%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="33.3333%" y="357" width="0.0790%" height="15" fill="rgb(205,98,0)" fg:x="422" fg:w="1"/><text x="33.5833%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="33.3333%" y="341" width="0.0790%" height="15" fill="rgb(214,191,48)" fg:x="422" fg:w="1"/><text x="33.5833%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="33.3333%" y="325" width="0.0790%" height="15" fill="rgb(237,112,39)" fg:x="422" fg:w="1"/><text x="33.5833%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="33.3333%" y="309" width="0.0790%" height="15" fill="rgb(247,203,27)" fg:x="422" fg:w="1"/><text x="33.5833%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="33.3333%" y="293" width="0.0790%" height="15" fill="rgb(235,124,28)" fg:x="422" fg:w="1"/><text x="33.5833%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="33.3333%" y="277" width="0.0790%" height="15" fill="rgb(208,207,46)" fg:x="422" fg:w="1"/><text x="33.5833%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="33.4123%" y="373" width="0.0790%" height="15" fill="rgb(234,176,4)" fg:x="423" fg:w="1"/><text x="33.6623%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.4123%" y="357" width="0.0790%" height="15" fill="rgb(230,133,28)" fg:x="423" fg:w="1"/><text x="33.6623%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (5 samples, 0.39%)</title><rect x="33.1754%" y="389" width="0.3949%" height="15" fill="rgb(211,137,40)" fg:x="420" fg:w="5"/><text x="33.4254%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="33.4913%" y="373" width="0.0790%" height="15" fill="rgb(254,35,13)" fg:x="424" fg:w="1"/><text x="33.7413%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.4913%" y="357" width="0.0790%" height="15" fill="rgb(225,49,51)" fg:x="424" fg:w="1"/><text x="33.7413%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="33.7283%" y="357" width="0.0790%" height="15" fill="rgb(251,10,15)" fg:x="427" fg:w="1"/><text x="33.9783%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.8073%" y="357" width="0.0790%" height="15" fill="rgb(228,207,15)" fg:x="428" fg:w="1"/><text x="34.0573%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="33.8863%" y="357" width="0.1580%" height="15" fill="rgb(241,99,19)" fg:x="429" fg:w="2"/><text x="34.1363%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.9652%" y="341" width="0.0790%" height="15" fill="rgb(207,104,49)" fg:x="430" fg:w="1"/><text x="34.2152%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.2022%" y="293" width="0.0790%" height="15" fill="rgb(234,99,18)" fg:x="433" fg:w="1"/><text x="34.4522%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="34.2022%" y="277" width="0.0790%" height="15" fill="rgb(213,191,49)" fg:x="433" fg:w="1"/><text x="34.4522%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="34.2022%" y="261" width="0.0790%" height="15" fill="rgb(210,226,19)" fg:x="433" fg:w="1"/><text x="34.4522%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (10 samples, 0.79%)</title><rect x="33.5703%" y="373" width="0.7899%" height="15" fill="rgb(229,97,18)" fg:x="425" fg:w="10"/><text x="33.8203%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="34.0442%" y="357" width="0.3160%" height="15" fill="rgb(211,167,15)" fg:x="431" fg:w="4"/><text x="34.2942%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="34.0442%" y="341" width="0.3160%" height="15" fill="rgb(210,169,34)" fg:x="431" fg:w="4"/><text x="34.2942%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="34.1232%" y="325" width="0.2370%" height="15" fill="rgb(241,121,31)" fg:x="432" fg:w="3"/><text x="34.3732%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="34.1232%" y="309" width="0.2370%" height="15" fill="rgb(232,40,11)" fg:x="432" fg:w="3"/><text x="34.3732%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.2812%" y="293" width="0.0790%" height="15" fill="rgb(205,86,26)" fg:x="434" fg:w="1"/><text x="34.5312%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.2812%" y="277" width="0.0790%" height="15" fill="rgb(231,126,28)" fg:x="434" fg:w="1"/><text x="34.5312%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (11 samples, 0.87%)</title><rect x="33.5703%" y="389" width="0.8689%" height="15" fill="rgb(219,221,18)" fg:x="425" fg:w="11"/><text x="33.8203%" y="399.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="34.3602%" y="373" width="0.0790%" height="15" fill="rgb(211,40,0)" fg:x="435" fg:w="1"/><text x="34.6102%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="34.3602%" y="357" width="0.0790%" height="15" fill="rgb(239,85,43)" fg:x="435" fg:w="1"/><text x="34.6102%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="34.5182%" y="309" width="0.0790%" height="15" fill="rgb(231,55,21)" fg:x="437" fg:w="1"/><text x="34.7682%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="34.5182%" y="293" width="0.0790%" height="15" fill="rgb(225,184,43)" fg:x="437" fg:w="1"/><text x="34.7682%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="34.5182%" y="277" width="0.0790%" height="15" fill="rgb(251,158,41)" fg:x="437" fg:w="1"/><text x="34.7682%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="34.5182%" y="261" width="0.0790%" height="15" fill="rgb(234,159,37)" fg:x="437" fg:w="1"/><text x="34.7682%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="34.5182%" y="245" width="0.0790%" height="15" fill="rgb(216,204,22)" fg:x="437" fg:w="1"/><text x="34.7682%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="34.5972%" y="293" width="0.1580%" height="15" fill="rgb(214,17,3)" fg:x="438" fg:w="2"/><text x="34.8472%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.7551%" y="277" width="0.0790%" height="15" fill="rgb(212,111,17)" fg:x="440" fg:w="1"/><text x="35.0051%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.7551%" y="261" width="0.0790%" height="15" fill="rgb(221,157,24)" fg:x="440" fg:w="1"/><text x="35.0051%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.7551%" y="245" width="0.0790%" height="15" fill="rgb(252,16,13)" fg:x="440" fg:w="1"/><text x="35.0051%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="34.9131%" y="261" width="0.1580%" height="15" fill="rgb(221,62,2)" fg:x="442" fg:w="2"/><text x="35.1631%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.9921%" y="245" width="0.0790%" height="15" fill="rgb(247,87,22)" fg:x="443" fg:w="1"/><text x="35.2421%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.55%)</title><rect x="34.5972%" y="309" width="0.5529%" height="15" fill="rgb(215,73,9)" fg:x="438" fg:w="7"/><text x="34.8472%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (5 samples, 0.39%)</title><rect x="34.7551%" y="293" width="0.3949%" height="15" fill="rgb(207,175,33)" fg:x="440" fg:w="5"/><text x="35.0051%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="34.8341%" y="277" width="0.3160%" height="15" fill="rgb(243,129,54)" fg:x="441" fg:w="4"/><text x="35.0841%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="35.0711%" y="261" width="0.0790%" height="15" fill="rgb(227,119,45)" fg:x="444" fg:w="1"/><text x="35.3211%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.1501%" y="261" width="0.0790%" height="15" fill="rgb(205,109,36)" fg:x="445" fg:w="1"/><text x="35.4001%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="35.2291%" y="261" width="0.0790%" height="15" fill="rgb(205,6,39)" fg:x="446" fg:w="1"/><text x="35.4791%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.2291%" y="245" width="0.0790%" height="15" fill="rgb(221,32,16)" fg:x="446" fg:w="1"/><text x="35.4791%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.3870%" y="245" width="0.0790%" height="15" fill="rgb(228,144,50)" fg:x="448" fg:w="1"/><text x="35.6370%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.11%)</title><rect x="35.4660%" y="245" width="1.1058%" height="15" fill="rgb(229,201,53)" fg:x="449" fg:w="14"/><text x="35.7160%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.11%)</title><rect x="35.4660%" y="229" width="1.1058%" height="15" fill="rgb(249,153,27)" fg:x="449" fg:w="14"/><text x="35.7160%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="36.6509%" y="229" width="0.0790%" height="15" fill="rgb(227,106,25)" fg:x="464" fg:w="1"/><text x="36.9009%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="36.6509%" y="213" width="0.0790%" height="15" fill="rgb(230,65,29)" fg:x="464" fg:w="1"/><text x="36.9009%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.6509%" y="197" width="0.0790%" height="15" fill="rgb(221,57,46)" fg:x="464" fg:w="1"/><text x="36.9009%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="36.5719%" y="245" width="0.2370%" height="15" fill="rgb(229,161,17)" fg:x="463" fg:w="3"/><text x="36.8219%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="36.7299%" y="229" width="0.0790%" height="15" fill="rgb(222,213,11)" fg:x="465" fg:w="1"/><text x="36.9799%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="36.8088%" y="245" width="0.1580%" height="15" fill="rgb(235,35,13)" fg:x="466" fg:w="2"/><text x="37.0588%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="36.8878%" y="229" width="0.0790%" height="15" fill="rgb(233,158,34)" fg:x="467" fg:w="1"/><text x="37.1378%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="36.8878%" y="213" width="0.0790%" height="15" fill="rgb(215,151,48)" fg:x="467" fg:w="1"/><text x="37.1378%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="36.8878%" y="197" width="0.0790%" height="15" fill="rgb(229,84,14)" fg:x="467" fg:w="1"/><text x="37.1378%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.0458%" y="213" width="0.0790%" height="15" fill="rgb(229,68,14)" fg:x="469" fg:w="1"/><text x="37.2958%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.0458%" y="197" width="0.0790%" height="15" fill="rgb(243,106,26)" fg:x="469" fg:w="1"/><text x="37.2958%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="37.2038%" y="181" width="0.1580%" height="15" fill="rgb(206,45,38)" fg:x="471" fg:w="2"/><text x="37.4538%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="37.3618%" y="181" width="0.0790%" height="15" fill="rgb(226,6,15)" fg:x="473" fg:w="1"/><text x="37.6118%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.3618%" y="165" width="0.0790%" height="15" fill="rgb(232,22,54)" fg:x="473" fg:w="1"/><text x="37.6118%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.3618%" y="149" width="0.0790%" height="15" fill="rgb(229,222,32)" fg:x="473" fg:w="1"/><text x="37.6118%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.3618%" y="133" width="0.0790%" height="15" fill="rgb(228,62,29)" fg:x="473" fg:w="1"/><text x="37.6118%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="37.4408%" y="181" width="0.1580%" height="15" fill="rgb(251,103,34)" fg:x="474" fg:w="2"/><text x="37.6908%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="37.4408%" y="165" width="0.1580%" height="15" fill="rgb(233,12,30)" fg:x="474" fg:w="2"/><text x="37.6908%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.5197%" y="149" width="0.0790%" height="15" fill="rgb(238,52,0)" fg:x="475" fg:w="1"/><text x="37.7697%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.5197%" y="133" width="0.0790%" height="15" fill="rgb(223,98,5)" fg:x="475" fg:w="1"/><text x="37.7697%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.5197%" y="117" width="0.0790%" height="15" fill="rgb(228,75,37)" fg:x="475" fg:w="1"/><text x="37.7697%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="37.5987%" y="181" width="0.0790%" height="15" fill="rgb(205,115,49)" fg:x="476" fg:w="1"/><text x="37.8487%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="37.5987%" y="165" width="0.0790%" height="15" fill="rgb(250,154,43)" fg:x="476" fg:w="1"/><text x="37.8487%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="37.5987%" y="149" width="0.0790%" height="15" fill="rgb(226,43,29)" fg:x="476" fg:w="1"/><text x="37.8487%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.6777%" y="149" width="0.0790%" height="15" fill="rgb(249,228,39)" fg:x="477" fg:w="1"/><text x="37.9277%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (62 samples, 4.90%)</title><rect x="37.7567%" y="149" width="4.8973%" height="15" fill="rgb(216,79,43)" fg:x="478" fg:w="62"/><text x="38.0067%" y="159.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (64 samples, 5.06%)</title><rect x="37.6777%" y="181" width="5.0553%" height="15" fill="rgb(228,95,12)" fg:x="477" fg:w="64"/><text x="37.9277%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (64 samples, 5.06%)</title><rect x="37.6777%" y="165" width="5.0553%" height="15" fill="rgb(249,221,15)" fg:x="477" fg:w="64"/><text x="37.9277%" y="175.50">regex_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="42.6540%" y="149" width="0.0790%" height="15" fill="rgb(233,34,13)" fg:x="540" fg:w="1"/><text x="42.9040%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1 samples, 0.08%)</title><rect x="42.7330%" y="181" width="0.0790%" height="15" fill="rgb(214,103,39)" fg:x="541" fg:w="1"/><text x="42.9830%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 5.92%)</title><rect x="37.0458%" y="229" width="5.9242%" height="15" fill="rgb(251,126,39)" fg:x="469" fg:w="75"/><text x="37.2958%" y="239.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (74 samples, 5.85%)</title><rect x="37.1248%" y="213" width="5.8452%" height="15" fill="rgb(214,216,36)" fg:x="470" fg:w="74"/><text x="37.3748%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (74 samples, 5.85%)</title><rect x="37.1248%" y="197" width="5.8452%" height="15" fill="rgb(220,221,8)" fg:x="470" fg:w="74"/><text x="37.3748%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="42.8120%" y="181" width="0.1580%" height="15" fill="rgb(240,216,3)" fg:x="542" fg:w="2"/><text x="43.0620%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.8910%" y="165" width="0.0790%" height="15" fill="rgb(232,218,17)" fg:x="543" fg:w="1"/><text x="43.1410%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.9700%" y="229" width="0.0790%" height="15" fill="rgb(229,163,45)" fg:x="544" fg:w="1"/><text x="43.2200%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.1280%" y="213" width="0.0790%" height="15" fill="rgb(231,110,42)" fg:x="546" fg:w="1"/><text x="43.3780%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.2859%" y="165" width="0.0790%" height="15" fill="rgb(208,170,48)" fg:x="548" fg:w="1"/><text x="43.5359%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="43.2070%" y="213" width="0.3160%" height="15" fill="rgb(239,116,25)" fg:x="547" fg:w="4"/><text x="43.4570%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="43.2859%" y="197" width="0.2370%" height="15" fill="rgb(219,200,50)" fg:x="548" fg:w="3"/><text x="43.5359%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="43.2859%" y="181" width="0.2370%" height="15" fill="rgb(245,200,0)" fg:x="548" fg:w="3"/><text x="43.5359%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.3649%" y="165" width="0.1580%" height="15" fill="rgb(245,119,33)" fg:x="549" fg:w="2"/><text x="43.6149%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="43.5229%" y="213" width="0.0790%" height="15" fill="rgb(231,125,12)" fg:x="551" fg:w="1"/><text x="43.7729%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="43.6019%" y="213" width="0.1580%" height="15" fill="rgb(216,96,41)" fg:x="552" fg:w="2"/><text x="43.8519%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.79%)</title><rect x="43.0490%" y="229" width="0.7899%" height="15" fill="rgb(248,43,45)" fg:x="545" fg:w="10"/><text x="43.2990%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="43.7599%" y="213" width="0.0790%" height="15" fill="rgb(217,222,7)" fg:x="554" fg:w="1"/><text x="44.0099%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (109 samples, 8.61%)</title><rect x="35.3081%" y="261" width="8.6098%" height="15" fill="rgb(233,28,6)" fg:x="447" fg:w="109"/><text x="35.5581%" y="271.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (88 samples, 6.95%)</title><rect x="36.9668%" y="245" width="6.9510%" height="15" fill="rgb(231,218,15)" fg:x="468" fg:w="88"/><text x="37.2168%" y="255.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="43.8389%" y="229" width="0.0790%" height="15" fill="rgb(226,171,48)" fg:x="555" fg:w="1"/><text x="44.0889%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="43.8389%" y="213" width="0.0790%" height="15" fill="rgb(235,201,9)" fg:x="555" fg:w="1"/><text x="44.0889%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.8389%" y="197" width="0.0790%" height="15" fill="rgb(217,80,15)" fg:x="555" fg:w="1"/><text x="44.0889%" y="207.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="43.9179%" y="261" width="0.0790%" height="15" fill="rgb(219,152,8)" fg:x="556" fg:w="1"/><text x="44.1679%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="43.9179%" y="245" width="0.0790%" height="15" fill="rgb(243,107,38)" fg:x="556" fg:w="1"/><text x="44.1679%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="43.9179%" y="229" width="0.0790%" height="15" fill="rgb(231,17,5)" fg:x="556" fg:w="1"/><text x="44.1679%" y="239.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="43.9179%" y="213" width="0.0790%" height="15" fill="rgb(209,25,54)" fg:x="556" fg:w="1"/><text x="44.1679%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="43.9179%" y="197" width="0.0790%" height="15" fill="rgb(219,0,2)" fg:x="556" fg:w="1"/><text x="44.1679%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.3128%" y="229" width="0.0790%" height="15" fill="rgb(246,9,5)" fg:x="561" fg:w="1"/><text x="44.5628%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="44.4708%" y="213" width="0.1580%" height="15" fill="rgb(226,159,4)" fg:x="563" fg:w="2"/><text x="44.7208%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.95%)</title><rect x="43.9968%" y="261" width="0.9479%" height="15" fill="rgb(219,175,34)" fg:x="557" fg:w="12"/><text x="44.2468%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.95%)</title><rect x="43.9968%" y="245" width="0.9479%" height="15" fill="rgb(236,10,46)" fg:x="557" fg:w="12"/><text x="44.2468%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.55%)</title><rect x="44.3918%" y="229" width="0.5529%" height="15" fill="rgb(240,211,16)" fg:x="562" fg:w="7"/><text x="44.6418%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="44.6288%" y="213" width="0.3160%" height="15" fill="rgb(205,3,43)" fg:x="565" fg:w="4"/><text x="44.8788%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="44.6288%" y="197" width="0.3160%" height="15" fill="rgb(245,7,22)" fg:x="565" fg:w="4"/><text x="44.8788%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="44.6288%" y="181" width="0.3160%" height="15" fill="rgb(239,132,32)" fg:x="565" fg:w="4"/><text x="44.8788%" y="191.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="44.6288%" y="165" width="0.3160%" height="15" fill="rgb(228,202,34)" fg:x="565" fg:w="4"/><text x="44.8788%" y="175.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (127 samples, 10.03%)</title><rect x="35.1501%" y="277" width="10.0316%" height="15" fill="rgb(254,200,22)" fg:x="445" fg:w="127"/><text x="35.4001%" y="287.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="44.9447%" y="261" width="0.2370%" height="15" fill="rgb(219,10,39)" fg:x="569" fg:w="3"/><text x="45.1947%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="44.9447%" y="245" width="0.2370%" height="15" fill="rgb(226,210,39)" fg:x="569" fg:w="3"/><text x="45.1947%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="45.1027%" y="229" width="0.0790%" height="15" fill="rgb(208,219,16)" fg:x="571" fg:w="1"/><text x="45.3527%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::unicode_fold_and_negate (1 samples, 0.08%)</title><rect x="45.1027%" y="213" width="0.0790%" height="15" fill="rgb(216,158,51)" fg:x="571" fg:w="1"/><text x="45.3527%" y="223.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (128 samples, 10.11%)</title><rect x="35.1501%" y="293" width="10.1106%" height="15" fill="rgb(233,14,44)" fg:x="445" fg:w="128"/><text x="35.4001%" y="303.50">regex::builders..</text></g><g><title>regex_automata::util::syntax::Config::utf8 (1 samples, 0.08%)</title><rect x="45.1817%" y="277" width="0.0790%" height="15" fill="rgb(237,97,39)" fg:x="572" fg:w="1"/><text x="45.4317%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (129 samples, 10.19%)</title><rect x="35.1501%" y="309" width="10.1896%" height="15" fill="rgb(218,198,43)" fg:x="445" fg:w="129"/><text x="35.4001%" y="319.50">regex::regex::s..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="45.2607%" y="293" width="0.0790%" height="15" fill="rgb(231,104,20)" fg:x="573" fg:w="1"/><text x="45.5107%" y="303.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="45.2607%" y="277" width="0.0790%" height="15" fill="rgb(254,36,13)" fg:x="573" fg:w="1"/><text x="45.5107%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="45.7346%" y="229" width="0.0790%" height="15" fill="rgb(248,14,50)" fg:x="579" fg:w="1"/><text x="45.9846%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (146 samples, 11.53%)</title><rect x="34.4392%" y="325" width="11.5324%" height="15" fill="rgb(217,107,29)" fg:x="436" fg:w="146"/><text x="34.6892%" y="335.50">indefinite::helpe..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.63%)</title><rect x="45.3397%" y="309" width="0.6319%" height="15" fill="rgb(251,169,33)" fg:x="574" fg:w="8"/><text x="45.5897%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.63%)</title><rect x="45.3397%" y="293" width="0.6319%" height="15" fill="rgb(217,108,32)" fg:x="574" fg:w="8"/><text x="45.5897%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.63%)</title><rect x="45.3397%" y="277" width="0.6319%" height="15" fill="rgb(219,66,42)" fg:x="574" fg:w="8"/><text x="45.5897%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.63%)</title><rect x="45.3397%" y="261" width="0.6319%" height="15" fill="rgb(206,180,7)" fg:x="574" fg:w="8"/><text x="45.5897%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.55%)</title><rect x="45.4186%" y="245" width="0.5529%" height="15" fill="rgb(208,226,31)" fg:x="575" fg:w="7"/><text x="45.6686%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="45.8136%" y="229" width="0.1580%" height="15" fill="rgb(218,26,49)" fg:x="580" fg:w="2"/><text x="46.0636%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="45.9716%" y="277" width="0.0790%" height="15" fill="rgb(233,197,48)" fg:x="582" fg:w="1"/><text x="46.2216%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="45.9716%" y="261" width="0.0790%" height="15" fill="rgb(252,181,51)" fg:x="582" fg:w="1"/><text x="46.2216%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="45.9716%" y="245" width="0.0790%" height="15" fill="rgb(253,90,19)" fg:x="582" fg:w="1"/><text x="46.2216%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.9716%" y="229" width="0.0790%" height="15" fill="rgb(215,171,30)" fg:x="582" fg:w="1"/><text x="46.2216%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="46.0506%" y="261" width="0.0790%" height="15" fill="rgb(214,222,9)" fg:x="583" fg:w="1"/><text x="46.3006%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.0506%" y="245" width="0.0790%" height="15" fill="rgb(223,3,22)" fg:x="583" fg:w="1"/><text x="46.3006%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.39%)</title><rect x="45.9716%" y="309" width="0.3949%" height="15" fill="rgb(225,196,46)" fg:x="582" fg:w="5"/><text x="46.2216%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (5 samples, 0.39%)</title><rect x="45.9716%" y="293" width="0.3949%" height="15" fill="rgb(209,110,37)" fg:x="582" fg:w="5"/><text x="46.2216%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="46.0506%" y="277" width="0.3160%" height="15" fill="rgb(249,89,12)" fg:x="583" fg:w="4"/><text x="46.3006%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="46.1295%" y="261" width="0.2370%" height="15" fill="rgb(226,27,33)" fg:x="584" fg:w="3"/><text x="46.3795%" y="271.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="46.1295%" y="245" width="0.2370%" height="15" fill="rgb(213,82,22)" fg:x="584" fg:w="3"/><text x="46.3795%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="46.4455%" y="245" width="0.0790%" height="15" fill="rgb(248,140,0)" fg:x="588" fg:w="1"/><text x="46.6955%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="46.4455%" y="293" width="0.1580%" height="15" fill="rgb(228,106,3)" fg:x="588" fg:w="2"/><text x="46.6955%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="46.4455%" y="277" width="0.1580%" height="15" fill="rgb(209,23,37)" fg:x="588" fg:w="2"/><text x="46.6955%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="46.4455%" y="261" width="0.1580%" height="15" fill="rgb(241,93,50)" fg:x="588" fg:w="2"/><text x="46.6955%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="46.5245%" y="245" width="0.0790%" height="15" fill="rgb(253,46,43)" fg:x="589" fg:w="1"/><text x="46.7745%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.9194%" y="213" width="0.0790%" height="15" fill="rgb(226,206,43)" fg:x="594" fg:w="1"/><text x="47.1694%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.9194%" y="197" width="0.0790%" height="15" fill="rgb(217,54,7)" fg:x="594" fg:w="1"/><text x="47.1694%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.9984%" y="181" width="0.0790%" height="15" fill="rgb(223,5,52)" fg:x="595" fg:w="1"/><text x="47.2484%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="46.9984%" y="213" width="0.1580%" height="15" fill="rgb(206,52,46)" fg:x="595" fg:w="2"/><text x="47.2484%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="46.9984%" y="197" width="0.1580%" height="15" fill="rgb(253,136,11)" fg:x="595" fg:w="2"/><text x="47.2484%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="47.0774%" y="181" width="0.0790%" height="15" fill="rgb(208,106,33)" fg:x="596" fg:w="1"/><text x="47.3274%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="47.0774%" y="165" width="0.0790%" height="15" fill="rgb(206,54,4)" fg:x="596" fg:w="1"/><text x="47.3274%" y="175.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (11 samples, 0.87%)</title><rect x="46.3665%" y="309" width="0.8689%" height="15" fill="rgb(213,3,15)" fg:x="587" fg:w="11"/><text x="46.6165%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.63%)</title><rect x="46.6035%" y="293" width="0.6319%" height="15" fill="rgb(252,211,39)" fg:x="590" fg:w="8"/><text x="46.8535%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.63%)</title><rect x="46.6035%" y="277" width="0.6319%" height="15" fill="rgb(223,6,36)" fg:x="590" fg:w="8"/><text x="46.8535%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.63%)</title><rect x="46.6035%" y="261" width="0.6319%" height="15" fill="rgb(252,169,45)" fg:x="590" fg:w="8"/><text x="46.8535%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.63%)</title><rect x="46.6035%" y="245" width="0.6319%" height="15" fill="rgb(212,48,26)" fg:x="590" fg:w="8"/><text x="46.8535%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.63%)</title><rect x="46.6035%" y="229" width="0.6319%" height="15" fill="rgb(251,102,48)" fg:x="590" fg:w="8"/><text x="46.8535%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="47.1564%" y="213" width="0.0790%" height="15" fill="rgb(243,208,16)" fg:x="597" fg:w="1"/><text x="47.4064%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.3144%" y="229" width="0.0790%" height="15" fill="rgb(219,96,24)" fg:x="599" fg:w="1"/><text x="47.5644%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="47.3144%" y="245" width="0.1580%" height="15" fill="rgb(219,33,29)" fg:x="599" fg:w="2"/><text x="47.5644%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="47.3934%" y="229" width="0.0790%" height="15" fill="rgb(223,176,5)" fg:x="600" fg:w="1"/><text x="47.6434%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.3934%" y="213" width="0.0790%" height="15" fill="rgb(228,140,14)" fg:x="600" fg:w="1"/><text x="47.6434%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="47.2354%" y="261" width="0.3160%" height="15" fill="rgb(217,179,31)" fg:x="598" fg:w="4"/><text x="47.4854%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.4724%" y="245" width="0.0790%" height="15" fill="rgb(230,9,30)" fg:x="601" fg:w="1"/><text x="47.7224%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="47.7093%" y="229" width="0.0790%" height="15" fill="rgb(230,136,20)" fg:x="604" fg:w="1"/><text x="47.9593%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.7093%" y="213" width="0.0790%" height="15" fill="rgb(215,210,22)" fg:x="604" fg:w="1"/><text x="47.9593%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.7883%" y="229" width="0.0790%" height="15" fill="rgb(218,43,5)" fg:x="605" fg:w="1"/><text x="48.0383%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.39%)</title><rect x="47.5513%" y="261" width="0.3949%" height="15" fill="rgb(216,11,5)" fg:x="602" fg:w="5"/><text x="47.8013%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="47.5513%" y="245" width="0.3949%" height="15" fill="rgb(209,82,29)" fg:x="602" fg:w="5"/><text x="47.8013%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="47.8673%" y="229" width="0.0790%" height="15" fill="rgb(244,115,12)" fg:x="606" fg:w="1"/><text x="48.1173%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (20 samples, 1.58%)</title><rect x="48.1043%" y="245" width="1.5798%" height="15" fill="rgb(222,82,18)" fg:x="609" fg:w="20"/><text x="48.3543%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (19 samples, 1.50%)</title><rect x="48.1833%" y="229" width="1.5008%" height="15" fill="rgb(249,227,8)" fg:x="610" fg:w="19"/><text x="48.4333%" y="239.50"></text></g><g><title>__libc_free (5 samples, 0.39%)</title><rect x="49.2891%" y="213" width="0.3949%" height="15" fill="rgb(253,141,45)" fg:x="624" fg:w="5"/><text x="49.5391%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="49.7630%" y="229" width="0.0790%" height="15" fill="rgb(234,184,4)" fg:x="630" fg:w="1"/><text x="50.0130%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="49.6840%" y="245" width="0.2370%" height="15" fill="rgb(218,194,23)" fg:x="629" fg:w="3"/><text x="49.9340%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="49.8420%" y="229" width="0.0790%" height="15" fill="rgb(235,66,41)" fg:x="631" fg:w="1"/><text x="50.0920%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="49.8420%" y="213" width="0.0790%" height="15" fill="rgb(245,217,1)" fg:x="631" fg:w="1"/><text x="50.0920%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="49.8420%" y="197" width="0.0790%" height="15" fill="rgb(229,91,1)" fg:x="631" fg:w="1"/><text x="50.0920%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="50.1580%" y="213" width="0.1580%" height="15" fill="rgb(207,101,30)" fg:x="635" fg:w="2"/><text x="50.4080%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="50.1580%" y="197" width="0.1580%" height="15" fill="rgb(223,82,49)" fg:x="635" fg:w="2"/><text x="50.4080%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="50.1580%" y="181" width="0.1580%" height="15" fill="rgb(218,167,17)" fg:x="635" fg:w="2"/><text x="50.4080%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="50.1580%" y="165" width="0.1580%" height="15" fill="rgb(208,103,14)" fg:x="635" fg:w="2"/><text x="50.4080%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="50.3160%" y="213" width="0.0790%" height="15" fill="rgb(238,20,8)" fg:x="637" fg:w="1"/><text x="50.5660%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (10 samples, 0.79%)</title><rect x="49.9210%" y="245" width="0.7899%" height="15" fill="rgb(218,80,54)" fg:x="632" fg:w="10"/><text x="50.1710%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (10 samples, 0.79%)</title><rect x="49.9210%" y="229" width="0.7899%" height="15" fill="rgb(240,144,17)" fg:x="632" fg:w="10"/><text x="50.1710%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="50.3949%" y="213" width="0.3160%" height="15" fill="rgb(245,27,50)" fg:x="638" fg:w="4"/><text x="50.6449%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="50.3949%" y="197" width="0.3160%" height="15" fill="rgb(251,51,7)" fg:x="638" fg:w="4"/><text x="50.6449%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="50.3949%" y="181" width="0.3160%" height="15" fill="rgb(245,217,29)" fg:x="638" fg:w="4"/><text x="50.6449%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="50.7899%" y="213" width="0.0790%" height="15" fill="rgb(221,176,29)" fg:x="643" fg:w="1"/><text x="51.0399%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="51.5008%" y="133" width="0.1580%" height="15" fill="rgb(212,180,24)" fg:x="652" fg:w="2"/><text x="51.7508%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="51.6588%" y="133" width="0.3160%" height="15" fill="rgb(254,24,2)" fg:x="654" fg:w="4"/><text x="51.9088%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="51.8167%" y="117" width="0.1580%" height="15" fill="rgb(230,100,2)" fg:x="656" fg:w="2"/><text x="52.0667%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.8167%" y="101" width="0.1580%" height="15" fill="rgb(219,142,25)" fg:x="656" fg:w="2"/><text x="52.0667%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.8957%" y="85" width="0.0790%" height="15" fill="rgb(240,73,43)" fg:x="657" fg:w="1"/><text x="52.1457%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="51.9747%" y="133" width="0.2370%" height="15" fill="rgb(214,114,15)" fg:x="658" fg:w="3"/><text x="52.2247%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.0537%" y="117" width="0.1580%" height="15" fill="rgb(207,130,4)" fg:x="659" fg:w="2"/><text x="52.3037%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.1327%" y="101" width="0.0790%" height="15" fill="rgb(221,25,40)" fg:x="660" fg:w="1"/><text x="52.3827%" y="111.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="52.1327%" y="85" width="0.0790%" height="15" fill="rgb(241,184,7)" fg:x="660" fg:w="1"/><text x="52.3827%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.3697%" y="101" width="0.0790%" height="15" fill="rgb(235,159,4)" fg:x="663" fg:w="1"/><text x="52.6197%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.5276%" y="69" width="0.0790%" height="15" fill="rgb(214,87,48)" fg:x="665" fg:w="1"/><text x="52.7776%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="52.4487%" y="101" width="0.3160%" height="15" fill="rgb(246,198,24)" fg:x="664" fg:w="4"/><text x="52.6987%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="52.5276%" y="85" width="0.2370%" height="15" fill="rgb(209,66,40)" fg:x="665" fg:w="3"/><text x="52.7776%" y="95.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="52.6066%" y="69" width="0.1580%" height="15" fill="rgb(233,147,39)" fg:x="666" fg:w="2"/><text x="52.8566%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.71%)</title><rect x="52.2117%" y="133" width="0.7109%" height="15" fill="rgb(231,145,52)" fg:x="661" fg:w="9"/><text x="52.4617%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.71%)</title><rect x="52.2117%" y="117" width="0.7109%" height="15" fill="rgb(206,20,26)" fg:x="661" fg:w="9"/><text x="52.4617%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="52.7646%" y="101" width="0.1580%" height="15" fill="rgb(238,220,4)" fg:x="668" fg:w="2"/><text x="53.0146%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.8436%" y="85" width="0.0790%" height="15" fill="rgb(252,195,42)" fg:x="669" fg:w="1"/><text x="53.0936%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="52.9226%" y="133" width="0.0790%" height="15" fill="rgb(209,10,6)" fg:x="670" fg:w="1"/><text x="53.1726%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="52.9226%" y="117" width="0.0790%" height="15" fill="rgb(229,3,52)" fg:x="670" fg:w="1"/><text x="53.1726%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="52.9226%" y="101" width="0.0790%" height="15" fill="rgb(253,49,37)" fg:x="670" fg:w="1"/><text x="53.1726%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (63 samples, 4.98%)</title><rect x="53.0016%" y="133" width="4.9763%" height="15" fill="rgb(240,103,49)" fg:x="671" fg:w="63"/><text x="53.2516%" y="143.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (63 samples, 4.98%)</title><rect x="53.0016%" y="117" width="4.9763%" height="15" fill="rgb(250,182,30)" fg:x="671" fg:w="63"/><text x="53.2516%" y="127.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (63 samples, 4.98%)</title><rect x="53.0016%" y="101" width="4.9763%" height="15" fill="rgb(248,8,30)" fg:x="671" fg:w="63"/><text x="53.2516%" y="111.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="57.9779%" y="133" width="0.0790%" height="15" fill="rgb(237,120,30)" fg:x="734" fg:w="1"/><text x="58.2279%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="58.0569%" y="133" width="0.0790%" height="15" fill="rgb(221,146,34)" fg:x="735" fg:w="1"/><text x="58.3069%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (98 samples, 7.74%)</title><rect x="50.9479%" y="165" width="7.7409%" height="15" fill="rgb(242,55,13)" fg:x="645" fg:w="98"/><text x="51.1979%" y="175.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (98 samples, 7.74%)</title><rect x="50.9479%" y="149" width="7.7409%" height="15" fill="rgb(242,112,31)" fg:x="645" fg:w="98"/><text x="51.1979%" y="159.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (7 samples, 0.55%)</title><rect x="58.1359%" y="133" width="0.5529%" height="15" fill="rgb(249,192,27)" fg:x="736" fg:w="7"/><text x="58.3859%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.47%)</title><rect x="58.2148%" y="117" width="0.4739%" height="15" fill="rgb(208,204,44)" fg:x="737" fg:w="6"/><text x="58.4648%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="58.4518%" y="101" width="0.2370%" height="15" fill="rgb(208,93,54)" fg:x="740" fg:w="3"/><text x="58.7018%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="58.5308%" y="85" width="0.1580%" height="15" fill="rgb(242,1,31)" fg:x="741" fg:w="2"/><text x="58.7808%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (101 samples, 7.98%)</title><rect x="50.7899%" y="229" width="7.9779%" height="15" fill="rgb(241,83,25)" fg:x="643" fg:w="101"/><text x="51.0399%" y="239.50">&lt;core::iter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (100 samples, 7.90%)</title><rect x="50.8689%" y="213" width="7.8989%" height="15" fill="rgb(205,169,50)" fg:x="644" fg:w="100"/><text x="51.1189%" y="223.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (100 samples, 7.90%)</title><rect x="50.8689%" y="197" width="7.8989%" height="15" fill="rgb(239,186,37)" fg:x="644" fg:w="100"/><text x="51.1189%" y="207.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (99 samples, 7.82%)</title><rect x="50.9479%" y="181" width="7.8199%" height="15" fill="rgb(205,221,10)" fg:x="645" fg:w="99"/><text x="51.1979%" y="191.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_bounded (1 samples, 0.08%)</title><rect x="58.6888%" y="165" width="0.0790%" height="15" fill="rgb(218,196,15)" fg:x="743" fg:w="1"/><text x="58.9388%" y="175.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="59.0047%" y="213" width="0.2370%" height="15" fill="rgb(218,196,35)" fg:x="747" fg:w="3"/><text x="59.2547%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="59.2417%" y="213" width="0.3160%" height="15" fill="rgb(233,63,24)" fg:x="750" fg:w="4"/><text x="59.4917%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.7156%" y="197" width="0.0790%" height="15" fill="rgb(225,8,4)" fg:x="756" fg:w="1"/><text x="59.9656%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.7156%" y="181" width="0.0790%" height="15" fill="rgb(234,105,35)" fg:x="756" fg:w="1"/><text x="59.9656%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.7156%" y="165" width="0.0790%" height="15" fill="rgb(236,21,32)" fg:x="756" fg:w="1"/><text x="59.9656%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="59.5577%" y="213" width="0.3160%" height="15" fill="rgb(228,109,6)" fg:x="754" fg:w="4"/><text x="59.8077%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.7946%" y="197" width="0.0790%" height="15" fill="rgb(229,215,31)" fg:x="757" fg:w="1"/><text x="60.0446%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.7946%" y="181" width="0.0790%" height="15" fill="rgb(221,52,54)" fg:x="757" fg:w="1"/><text x="60.0446%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.7946%" y="165" width="0.0790%" height="15" fill="rgb(252,129,43)" fg:x="757" fg:w="1"/><text x="60.0446%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (152 samples, 12.01%)</title><rect x="47.9463%" y="261" width="12.0063%" height="15" fill="rgb(248,183,27)" fg:x="607" fg:w="152"/><text x="48.1963%" y="271.50">regex_automata::me..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (117 samples, 9.24%)</title><rect x="50.7109%" y="245" width="9.2417%" height="15" fill="rgb(250,0,22)" fg:x="642" fg:w="117"/><text x="50.9609%" y="255.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.18%)</title><rect x="58.7678%" y="229" width="1.1848%" height="15" fill="rgb(213,166,10)" fg:x="744" fg:w="15"/><text x="59.0178%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="59.8736%" y="213" width="0.0790%" height="15" fill="rgb(207,163,36)" fg:x="758" fg:w="1"/><text x="60.1236%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="59.8736%" y="197" width="0.0790%" height="15" fill="rgb(208,122,22)" fg:x="758" fg:w="1"/><text x="60.1236%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.0316%" y="229" width="0.0790%" height="15" fill="rgb(207,104,49)" fg:x="760" fg:w="1"/><text x="60.2816%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.0316%" y="213" width="0.0790%" height="15" fill="rgb(248,211,50)" fg:x="760" fg:w="1"/><text x="60.2816%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="60.1106%" y="213" width="0.0790%" height="15" fill="rgb(217,13,45)" fg:x="761" fg:w="1"/><text x="60.3606%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="60.1106%" y="197" width="0.0790%" height="15" fill="rgb(211,216,49)" fg:x="761" fg:w="1"/><text x="60.3606%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="60.1106%" y="229" width="0.1580%" height="15" fill="rgb(221,58,53)" fg:x="761" fg:w="2"/><text x="60.3606%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="60.1896%" y="213" width="0.0790%" height="15" fill="rgb(220,112,41)" fg:x="762" fg:w="1"/><text x="60.4396%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="60.1896%" y="197" width="0.0790%" height="15" fill="rgb(236,38,28)" fg:x="762" fg:w="1"/><text x="60.4396%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="60.1896%" y="181" width="0.0790%" height="15" fill="rgb(227,195,22)" fg:x="762" fg:w="1"/><text x="60.4396%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="60.2686%" y="229" width="0.0790%" height="15" fill="rgb(214,55,33)" fg:x="763" fg:w="1"/><text x="60.5186%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="60.2686%" y="213" width="0.0790%" height="15" fill="rgb(248,80,13)" fg:x="763" fg:w="1"/><text x="60.5186%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="60.3476%" y="229" width="0.0790%" height="15" fill="rgb(238,52,6)" fg:x="764" fg:w="1"/><text x="60.5976%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.3476%" y="213" width="0.0790%" height="15" fill="rgb(224,198,47)" fg:x="764" fg:w="1"/><text x="60.5976%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.3476%" y="197" width="0.0790%" height="15" fill="rgb(233,171,20)" fg:x="764" fg:w="1"/><text x="60.5976%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3476%" y="181" width="0.0790%" height="15" fill="rgb(241,30,25)" fg:x="764" fg:w="1"/><text x="60.5976%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.55%)</title><rect x="59.9526%" y="261" width="0.5529%" height="15" fill="rgb(207,171,38)" fg:x="759" fg:w="7"/><text x="60.2026%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.55%)</title><rect x="59.9526%" y="245" width="0.5529%" height="15" fill="rgb(234,70,1)" fg:x="759" fg:w="7"/><text x="60.2026%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="60.4265%" y="229" width="0.0790%" height="15" fill="rgb(232,178,18)" fg:x="765" fg:w="1"/><text x="60.6765%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="60.5845%" y="213" width="0.1580%" height="15" fill="rgb(241,78,40)" fg:x="767" fg:w="2"/><text x="60.8345%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="60.6635%" y="197" width="0.0790%" height="15" fill="rgb(222,35,25)" fg:x="768" fg:w="1"/><text x="60.9135%" y="207.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (173 samples, 13.67%)</title><rect x="47.2354%" y="293" width="13.6651%" height="15" fill="rgb(207,92,16)" fg:x="598" fg:w="173"/><text x="47.4854%" y="303.50">regex::builders::stri..</text></g><g><title>regex_automata::meta::regex::Builder::build (173 samples, 13.67%)</title><rect x="47.2354%" y="277" width="13.6651%" height="15" fill="rgb(216,59,51)" fg:x="598" fg:w="173"/><text x="47.4854%" y="287.50">regex_automata::meta:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.39%)</title><rect x="60.5055%" y="261" width="0.3949%" height="15" fill="rgb(213,80,28)" fg:x="766" fg:w="5"/><text x="60.7555%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.39%)</title><rect x="60.5055%" y="245" width="0.3949%" height="15" fill="rgb(220,93,7)" fg:x="766" fg:w="5"/><text x="60.7555%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="60.5845%" y="229" width="0.3160%" height="15" fill="rgb(225,24,44)" fg:x="767" fg:w="4"/><text x="60.8345%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (2 samples, 0.16%)</title><rect x="60.7425%" y="213" width="0.1580%" height="15" fill="rgb(243,74,40)" fg:x="769" fg:w="2"/><text x="60.9925%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="60.7425%" y="197" width="0.1580%" height="15" fill="rgb(228,39,7)" fg:x="769" fg:w="2"/><text x="60.9925%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (190 samples, 15.01%)</title><rect x="45.9716%" y="325" width="15.0079%" height="15" fill="rgb(227,79,8)" fg:x="582" fg:w="190"/><text x="46.2216%" y="335.50">indefinite::rules::numb..</text></g><g><title>regex::regex::string::Regex::new (174 samples, 13.74%)</title><rect x="47.2354%" y="309" width="13.7441%" height="15" fill="rgb(236,58,11)" fg:x="598" fg:w="174"/><text x="47.4854%" y="319.50">regex::regex::string:..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="60.9005%" y="293" width="0.0790%" height="15" fill="rgb(249,63,35)" fg:x="771" fg:w="1"/><text x="61.1505%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="60.9005%" y="277" width="0.0790%" height="15" fill="rgb(252,114,16)" fg:x="771" fg:w="1"/><text x="61.1505%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.9005%" y="261" width="0.0790%" height="15" fill="rgb(254,151,24)" fg:x="771" fg:w="1"/><text x="61.1505%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.9795%" y="309" width="0.0790%" height="15" fill="rgb(253,54,39)" fg:x="772" fg:w="1"/><text x="61.2295%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.0585%" y="261" width="0.0790%" height="15" fill="rgb(243,25,45)" fg:x="773" fg:w="1"/><text x="61.3085%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="61.0585%" y="293" width="0.1580%" height="15" fill="rgb(234,134,9)" fg:x="773" fg:w="2"/><text x="61.3085%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="61.0585%" y="277" width="0.1580%" height="15" fill="rgb(227,166,31)" fg:x="773" fg:w="2"/><text x="61.3085%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="61.1374%" y="261" width="0.0790%" height="15" fill="rgb(245,143,41)" fg:x="774" fg:w="1"/><text x="61.3874%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.1374%" y="245" width="0.0790%" height="15" fill="rgb(238,181,32)" fg:x="774" fg:w="1"/><text x="61.3874%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.1374%" y="229" width="0.0790%" height="15" fill="rgb(224,113,18)" fg:x="774" fg:w="1"/><text x="61.3874%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.2164%" y="245" width="0.0790%" height="15" fill="rgb(240,229,28)" fg:x="775" fg:w="1"/><text x="61.4664%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.2164%" y="229" width="0.0790%" height="15" fill="rgb(250,185,3)" fg:x="775" fg:w="1"/><text x="61.4664%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="61.2164%" y="213" width="0.0790%" height="15" fill="rgb(212,59,25)" fg:x="775" fg:w="1"/><text x="61.4664%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.2164%" y="197" width="0.0790%" height="15" fill="rgb(221,87,20)" fg:x="775" fg:w="1"/><text x="61.4664%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.2164%" y="181" width="0.0790%" height="15" fill="rgb(213,74,28)" fg:x="775" fg:w="1"/><text x="61.4664%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.2164%" y="165" width="0.0790%" height="15" fill="rgb(224,132,34)" fg:x="775" fg:w="1"/><text x="61.4664%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.2954%" y="245" width="0.0790%" height="15" fill="rgb(222,101,24)" fg:x="776" fg:w="1"/><text x="61.5454%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="61.3744%" y="245" width="0.0790%" height="15" fill="rgb(254,142,4)" fg:x="777" fg:w="1"/><text x="61.6244%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.3744%" y="229" width="0.0790%" height="15" fill="rgb(230,229,49)" fg:x="777" fg:w="1"/><text x="61.6244%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="61.3744%" y="213" width="0.0790%" height="15" fill="rgb(238,70,47)" fg:x="777" fg:w="1"/><text x="61.6244%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.3744%" y="197" width="0.0790%" height="15" fill="rgb(231,160,17)" fg:x="777" fg:w="1"/><text x="61.6244%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="61.3744%" y="181" width="0.0790%" height="15" fill="rgb(218,68,53)" fg:x="777" fg:w="1"/><text x="61.6244%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.3744%" y="165" width="0.0790%" height="15" fill="rgb(236,111,10)" fg:x="777" fg:w="1"/><text x="61.6244%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.3744%" y="149" width="0.0790%" height="15" fill="rgb(224,34,41)" fg:x="777" fg:w="1"/><text x="61.6244%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.3744%" y="133" width="0.0790%" height="15" fill="rgb(241,118,19)" fg:x="777" fg:w="1"/><text x="61.6244%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.4534%" y="229" width="0.1580%" height="15" fill="rgb(238,129,25)" fg:x="778" fg:w="2"/><text x="61.7034%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="61.6114%" y="229" width="0.1580%" height="15" fill="rgb(238,22,31)" fg:x="780" fg:w="2"/><text x="61.8614%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="61.6904%" y="213" width="0.0790%" height="15" fill="rgb(222,174,48)" fg:x="781" fg:w="1"/><text x="61.9404%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="61.7694%" y="213" width="0.0790%" height="15" fill="rgb(206,152,40)" fg:x="782" fg:w="1"/><text x="62.0194%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="61.7694%" y="197" width="0.0790%" height="15" fill="rgb(218,99,54)" fg:x="782" fg:w="1"/><text x="62.0194%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="61.7694%" y="181" width="0.0790%" height="15" fill="rgb(220,174,26)" fg:x="782" fg:w="1"/><text x="62.0194%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="61.7694%" y="165" width="0.0790%" height="15" fill="rgb(245,116,9)" fg:x="782" fg:w="1"/><text x="62.0194%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="61.8483%" y="213" width="0.0790%" height="15" fill="rgb(209,72,35)" fg:x="783" fg:w="1"/><text x="62.0983%" y="223.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="62.0063%" y="197" width="0.0790%" height="15" fill="rgb(226,126,21)" fg:x="785" fg:w="1"/><text x="62.2563%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (12 samples, 0.95%)</title><rect x="61.4534%" y="245" width="0.9479%" height="15" fill="rgb(227,192,1)" fg:x="778" fg:w="12"/><text x="61.7034%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (8 samples, 0.63%)</title><rect x="61.7694%" y="229" width="0.6319%" height="15" fill="rgb(237,180,29)" fg:x="782" fg:w="8"/><text x="62.0194%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.47%)</title><rect x="61.9273%" y="213" width="0.4739%" height="15" fill="rgb(230,197,35)" fg:x="784" fg:w="6"/><text x="62.1773%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="62.0853%" y="197" width="0.3160%" height="15" fill="rgb(246,193,31)" fg:x="786" fg:w="4"/><text x="62.3353%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="62.4013%" y="197" width="0.0790%" height="15" fill="rgb(241,36,4)" fg:x="790" fg:w="1"/><text x="62.6513%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.4013%" y="181" width="0.0790%" height="15" fill="rgb(241,130,17)" fg:x="790" fg:w="1"/><text x="62.6513%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.4013%" y="165" width="0.0790%" height="15" fill="rgb(206,137,32)" fg:x="790" fg:w="1"/><text x="62.6513%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.4013%" y="149" width="0.0790%" height="15" fill="rgb(237,228,51)" fg:x="790" fg:w="1"/><text x="62.6513%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="62.4803%" y="197" width="0.0790%" height="15" fill="rgb(243,6,42)" fg:x="791" fg:w="1"/><text x="62.7303%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="62.5592%" y="197" width="0.0790%" height="15" fill="rgb(251,74,28)" fg:x="792" fg:w="1"/><text x="62.8092%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.39%)</title><rect x="62.4013%" y="213" width="0.3949%" height="15" fill="rgb(218,20,49)" fg:x="790" fg:w="5"/><text x="62.6513%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="62.6382%" y="197" width="0.1580%" height="15" fill="rgb(238,28,14)" fg:x="793" fg:w="2"/><text x="62.8882%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="62.7172%" y="181" width="0.0790%" height="15" fill="rgb(229,40,46)" fg:x="794" fg:w="1"/><text x="62.9672%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="62.8752%" y="197" width="0.0790%" height="15" fill="rgb(244,195,20)" fg:x="796" fg:w="1"/><text x="63.1252%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.63%)</title><rect x="62.4013%" y="245" width="0.6319%" height="15" fill="rgb(253,56,35)" fg:x="790" fg:w="8"/><text x="62.6513%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.63%)</title><rect x="62.4013%" y="229" width="0.6319%" height="15" fill="rgb(210,149,44)" fg:x="790" fg:w="8"/><text x="62.6513%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="62.7962%" y="213" width="0.2370%" height="15" fill="rgb(240,135,12)" fg:x="795" fg:w="3"/><text x="63.0462%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.9542%" y="197" width="0.0790%" height="15" fill="rgb(251,24,50)" fg:x="797" fg:w="1"/><text x="63.2042%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="63.1122%" y="213" width="0.0790%" height="15" fill="rgb(243,200,47)" fg:x="799" fg:w="1"/><text x="63.3622%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (26 samples, 2.05%)</title><rect x="61.2164%" y="293" width="2.0537%" height="15" fill="rgb(224,166,26)" fg:x="775" fg:w="26"/><text x="61.4664%" y="303.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::build (26 samples, 2.05%)</title><rect x="61.2164%" y="277" width="2.0537%" height="15" fill="rgb(233,0,47)" fg:x="775" fg:w="26"/><text x="61.4664%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (26 samples, 2.05%)</title><rect x="61.2164%" y="261" width="2.0537%" height="15" fill="rgb(253,80,5)" fg:x="775" fg:w="26"/><text x="61.4664%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="63.0332%" y="245" width="0.2370%" height="15" fill="rgb(214,133,25)" fg:x="798" fg:w="3"/><text x="63.2832%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="63.0332%" y="229" width="0.2370%" height="15" fill="rgb(209,27,14)" fg:x="798" fg:w="3"/><text x="63.2832%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="63.1912%" y="213" width="0.0790%" height="15" fill="rgb(219,102,51)" fg:x="800" fg:w="1"/><text x="63.4412%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="63.1912%" y="197" width="0.0790%" height="15" fill="rgb(237,18,16)" fg:x="800" fg:w="1"/><text x="63.4412%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="63.3491%" y="213" width="0.0790%" height="15" fill="rgb(241,85,17)" fg:x="802" fg:w="1"/><text x="63.5991%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.4281%" y="197" width="0.0790%" height="15" fill="rgb(236,90,42)" fg:x="803" fg:w="1"/><text x="63.6781%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (32 samples, 2.53%)</title><rect x="61.0585%" y="309" width="2.5276%" height="15" fill="rgb(249,57,21)" fg:x="773" fg:w="32"/><text x="61.3085%" y="319.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="63.2701%" y="293" width="0.3160%" height="15" fill="rgb(243,12,36)" fg:x="801" fg:w="4"/><text x="63.5201%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="63.2701%" y="277" width="0.3160%" height="15" fill="rgb(253,128,47)" fg:x="801" fg:w="4"/><text x="63.5201%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="63.2701%" y="261" width="0.3160%" height="15" fill="rgb(207,33,20)" fg:x="801" fg:w="4"/><text x="63.5201%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="63.2701%" y="245" width="0.3160%" height="15" fill="rgb(233,215,35)" fg:x="801" fg:w="4"/><text x="63.5201%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="63.2701%" y="229" width="0.3160%" height="15" fill="rgb(249,188,52)" fg:x="801" fg:w="4"/><text x="63.5201%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="63.4281%" y="213" width="0.1580%" height="15" fill="rgb(225,12,32)" fg:x="803" fg:w="2"/><text x="63.6781%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.5071%" y="197" width="0.0790%" height="15" fill="rgb(247,98,14)" fg:x="804" fg:w="1"/><text x="63.7571%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.5071%" y="181" width="0.0790%" height="15" fill="rgb(247,219,48)" fg:x="804" fg:w="1"/><text x="63.7571%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.5071%" y="165" width="0.0790%" height="15" fill="rgb(253,60,48)" fg:x="804" fg:w="1"/><text x="63.7571%" y="175.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (394 samples, 31.12%)</title><rect x="32.5434%" y="405" width="31.1216%" height="15" fill="rgb(245,15,52)" fg:x="412" fg:w="394"/><text x="32.7934%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::lookin..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (370 samples, 29.23%)</title><rect x="34.4392%" y="389" width="29.2259%" height="15" fill="rgb(220,133,28)" fg:x="436" fg:w="370"/><text x="34.6892%" y="399.50">plugins_core::looking::model::Unqualified::qual..</text></g><g><title>indefinite::indefinite (370 samples, 29.23%)</title><rect x="34.4392%" y="373" width="29.2259%" height="15" fill="rgb(217,180,4)" fg:x="436" fg:w="370"/><text x="34.6892%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (370 samples, 29.23%)</title><rect x="34.4392%" y="357" width="29.2259%" height="15" fill="rgb(251,24,1)" fg:x="436" fg:w="370"/><text x="34.6892%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (370 samples, 29.23%)</title><rect x="34.4392%" y="341" width="29.2259%" height="15" fill="rgb(212,185,49)" fg:x="436" fg:w="370"/><text x="34.6892%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (34 samples, 2.69%)</title><rect x="60.9795%" y="325" width="2.6856%" height="15" fill="rgb(215,175,22)" fg:x="772" fg:w="34"/><text x="61.2295%" y="335.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="63.5861%" y="309" width="0.0790%" height="15" fill="rgb(250,205,14)" fg:x="805" fg:w="1"/><text x="63.8361%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.6651%" y="389" width="0.0790%" height="15" fill="rgb(225,211,22)" fg:x="806" fg:w="1"/><text x="63.9151%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="63.7441%" y="357" width="0.1580%" height="15" fill="rgb(251,179,42)" fg:x="807" fg:w="2"/><text x="63.9941%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.7441%" y="341" width="0.1580%" height="15" fill="rgb(208,216,51)" fg:x="807" fg:w="2"/><text x="63.9941%" y="351.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="63.8231%" y="325" width="0.0790%" height="15" fill="rgb(235,36,11)" fg:x="808" fg:w="1"/><text x="64.0731%" y="335.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.9021%" y="309" width="0.0790%" height="15" fill="rgb(213,189,28)" fg:x="809" fg:w="1"/><text x="64.1521%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.39%)</title><rect x="63.6651%" y="405" width="0.3949%" height="15" fill="rgb(227,203,42)" fg:x="806" fg:w="5"/><text x="63.9151%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="63.7441%" y="389" width="0.3160%" height="15" fill="rgb(244,72,36)" fg:x="807" fg:w="4"/><text x="63.9941%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="63.7441%" y="373" width="0.3160%" height="15" fill="rgb(213,53,17)" fg:x="807" fg:w="4"/><text x="63.9941%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="63.9021%" y="357" width="0.1580%" height="15" fill="rgb(207,167,3)" fg:x="809" fg:w="2"/><text x="64.1521%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="63.9021%" y="341" width="0.1580%" height="15" fill="rgb(216,98,30)" fg:x="809" fg:w="2"/><text x="64.1521%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="63.9021%" y="325" width="0.1580%" height="15" fill="rgb(236,123,15)" fg:x="809" fg:w="2"/><text x="64.1521%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.9810%" y="309" width="0.0790%" height="15" fill="rgb(248,81,50)" fg:x="810" fg:w="1"/><text x="64.2310%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.9810%" y="293" width="0.0790%" height="15" fill="rgb(214,120,4)" fg:x="810" fg:w="1"/><text x="64.2310%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.9810%" y="277" width="0.0790%" height="15" fill="rgb(208,179,34)" fg:x="810" fg:w="1"/><text x="64.2310%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="64.1390%" y="373" width="0.0790%" height="15" fill="rgb(227,140,7)" fg:x="812" fg:w="1"/><text x="64.3890%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="64.1390%" y="357" width="0.0790%" height="15" fill="rgb(214,22,6)" fg:x="812" fg:w="1"/><text x="64.3890%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.1390%" y="341" width="0.0790%" height="15" fill="rgb(207,137,27)" fg:x="812" fg:w="1"/><text x="64.3890%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.2180%" y="341" width="0.0790%" height="15" fill="rgb(210,8,46)" fg:x="813" fg:w="1"/><text x="64.4680%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="64.2180%" y="373" width="0.1580%" height="15" fill="rgb(240,16,54)" fg:x="813" fg:w="2"/><text x="64.4680%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="64.2180%" y="357" width="0.1580%" height="15" fill="rgb(211,209,29)" fg:x="813" fg:w="2"/><text x="64.4680%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.2970%" y="341" width="0.0790%" height="15" fill="rgb(226,228,24)" fg:x="814" fg:w="1"/><text x="64.5470%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2970%" y="325" width="0.0790%" height="15" fill="rgb(222,84,9)" fg:x="814" fg:w="1"/><text x="64.5470%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.3760%" y="357" width="0.0790%" height="15" fill="rgb(234,203,30)" fg:x="815" fg:w="1"/><text x="64.6260%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="64.3760%" y="341" width="0.0790%" height="15" fill="rgb(238,109,14)" fg:x="815" fg:w="1"/><text x="64.6260%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.3760%" y="325" width="0.0790%" height="15" fill="rgb(233,206,34)" fg:x="815" fg:w="1"/><text x="64.6260%" y="335.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (7 samples, 0.55%)</title><rect x="64.0600%" y="389" width="0.5529%" height="15" fill="rgb(220,167,47)" fg:x="811" fg:w="7"/><text x="64.3100%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="64.3760%" y="373" width="0.2370%" height="15" fill="rgb(238,105,10)" fg:x="815" fg:w="3"/><text x="64.6260%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="64.4550%" y="357" width="0.1580%" height="15" fill="rgb(213,227,17)" fg:x="816" fg:w="2"/><text x="64.7050%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.5340%" y="341" width="0.0790%" height="15" fill="rgb(217,132,38)" fg:x="817" fg:w="1"/><text x="64.7840%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.5340%" y="325" width="0.0790%" height="15" fill="rgb(242,146,4)" fg:x="817" fg:w="1"/><text x="64.7840%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.5340%" y="309" width="0.0790%" height="15" fill="rgb(212,61,9)" fg:x="817" fg:w="1"/><text x="64.7840%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.5340%" y="293" width="0.0790%" height="15" fill="rgb(247,126,22)" fg:x="817" fg:w="1"/><text x="64.7840%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.5340%" y="277" width="0.0790%" height="15" fill="rgb(220,196,2)" fg:x="817" fg:w="1"/><text x="64.7840%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.5340%" y="261" width="0.0790%" height="15" fill="rgb(208,46,4)" fg:x="817" fg:w="1"/><text x="64.7840%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.6130%" y="309" width="0.0790%" height="15" fill="rgb(252,104,46)" fg:x="818" fg:w="1"/><text x="64.8630%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.6130%" y="293" width="0.0790%" height="15" fill="rgb(237,152,48)" fg:x="818" fg:w="1"/><text x="64.8630%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="64.6130%" y="325" width="0.1580%" height="15" fill="rgb(221,59,37)" fg:x="818" fg:w="2"/><text x="64.8630%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.6919%" y="309" width="0.0790%" height="15" fill="rgb(209,202,51)" fg:x="819" fg:w="1"/><text x="64.9419%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.6919%" y="293" width="0.0790%" height="15" fill="rgb(228,81,30)" fg:x="819" fg:w="1"/><text x="64.9419%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.6919%" y="277" width="0.0790%" height="15" fill="rgb(227,42,39)" fg:x="819" fg:w="1"/><text x="64.9419%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.6919%" y="261" width="0.0790%" height="15" fill="rgb(221,26,2)" fg:x="819" fg:w="1"/><text x="64.9419%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.6919%" y="245" width="0.0790%" height="15" fill="rgb(254,61,31)" fg:x="819" fg:w="1"/><text x="64.9419%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.7709%" y="197" width="0.0790%" height="15" fill="rgb(222,173,38)" fg:x="820" fg:w="1"/><text x="65.0209%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.7709%" y="181" width="0.0790%" height="15" fill="rgb(218,50,12)" fg:x="820" fg:w="1"/><text x="65.0209%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.7709%" y="165" width="0.0790%" height="15" fill="rgb(223,88,40)" fg:x="820" fg:w="1"/><text x="65.0209%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7709%" y="149" width="0.0790%" height="15" fill="rgb(237,54,19)" fg:x="820" fg:w="1"/><text x="65.0209%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.7709%" y="229" width="0.1580%" height="15" fill="rgb(251,129,25)" fg:x="820" fg:w="2"/><text x="65.0209%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.7709%" y="213" width="0.1580%" height="15" fill="rgb(238,97,19)" fg:x="820" fg:w="2"/><text x="65.0209%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.8499%" y="197" width="0.0790%" height="15" fill="rgb(240,169,18)" fg:x="821" fg:w="1"/><text x="65.0999%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="64.7709%" y="277" width="0.3160%" height="15" fill="rgb(230,187,49)" fg:x="820" fg:w="4"/><text x="65.0209%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="64.7709%" y="261" width="0.3160%" height="15" fill="rgb(209,44,26)" fg:x="820" fg:w="4"/><text x="65.0209%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="64.7709%" y="245" width="0.3160%" height="15" fill="rgb(244,0,6)" fg:x="820" fg:w="4"/><text x="65.0209%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.9289%" y="229" width="0.1580%" height="15" fill="rgb(248,18,21)" fg:x="822" fg:w="2"/><text x="65.1789%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.9289%" y="213" width="0.1580%" height="15" fill="rgb(245,180,19)" fg:x="822" fg:w="2"/><text x="65.1789%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="64.9289%" y="197" width="0.1580%" height="15" fill="rgb(252,118,36)" fg:x="822" fg:w="2"/><text x="65.1789%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.9289%" y="181" width="0.1580%" height="15" fill="rgb(210,224,19)" fg:x="822" fg:w="2"/><text x="65.1789%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.9289%" y="165" width="0.1580%" height="15" fill="rgb(218,30,24)" fg:x="822" fg:w="2"/><text x="65.1789%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="65.0079%" y="149" width="0.0790%" height="15" fill="rgb(219,75,50)" fg:x="823" fg:w="1"/><text x="65.2579%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.0079%" y="133" width="0.0790%" height="15" fill="rgb(234,72,50)" fg:x="823" fg:w="1"/><text x="65.2579%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.0079%" y="117" width="0.0790%" height="15" fill="rgb(219,100,48)" fg:x="823" fg:w="1"/><text x="65.2579%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="65.0079%" y="101" width="0.0790%" height="15" fill="rgb(253,5,41)" fg:x="823" fg:w="1"/><text x="65.2579%" y="111.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.39%)</title><rect x="64.7709%" y="325" width="0.3949%" height="15" fill="rgb(247,181,11)" fg:x="820" fg:w="5"/><text x="65.0209%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.39%)</title><rect x="64.7709%" y="309" width="0.3949%" height="15" fill="rgb(222,223,25)" fg:x="820" fg:w="5"/><text x="65.0209%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.39%)</title><rect x="64.7709%" y="293" width="0.3949%" height="15" fill="rgb(214,198,28)" fg:x="820" fg:w="5"/><text x="65.0209%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.0869%" y="277" width="0.0790%" height="15" fill="rgb(230,46,43)" fg:x="824" fg:w="1"/><text x="65.3369%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.0869%" y="261" width="0.0790%" height="15" fill="rgb(233,65,53)" fg:x="824" fg:w="1"/><text x="65.3369%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.0869%" y="245" width="0.0790%" height="15" fill="rgb(221,121,27)" fg:x="824" fg:w="1"/><text x="65.3369%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.2449%" y="165" width="0.0790%" height="15" fill="rgb(247,70,47)" fg:x="826" fg:w="1"/><text x="65.4949%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.2449%" y="149" width="0.0790%" height="15" fill="rgb(228,85,35)" fg:x="826" fg:w="1"/><text x="65.4949%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.2449%" y="133" width="0.0790%" height="15" fill="rgb(209,50,18)" fg:x="826" fg:w="1"/><text x="65.4949%" y="143.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.2449%" y="117" width="0.0790%" height="15" fill="rgb(250,19,35)" fg:x="826" fg:w="1"/><text x="65.4949%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2449%" y="101" width="0.0790%" height="15" fill="rgb(253,107,29)" fg:x="826" fg:w="1"/><text x="65.4949%" y="111.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="65.1659%" y="261" width="0.2370%" height="15" fill="rgb(252,179,29)" fg:x="825" fg:w="3"/><text x="65.4159%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.2449%" y="245" width="0.1580%" height="15" fill="rgb(238,194,6)" fg:x="826" fg:w="2"/><text x="65.4949%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="65.2449%" y="229" width="0.1580%" height="15" fill="rgb(238,164,29)" fg:x="826" fg:w="2"/><text x="65.4949%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.2449%" y="213" width="0.1580%" height="15" fill="rgb(224,25,9)" fg:x="826" fg:w="2"/><text x="65.4949%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="65.2449%" y="197" width="0.1580%" height="15" fill="rgb(244,153,23)" fg:x="826" fg:w="2"/><text x="65.4949%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.2449%" y="181" width="0.1580%" height="15" fill="rgb(212,203,14)" fg:x="826" fg:w="2"/><text x="65.4949%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.3239%" y="165" width="0.0790%" height="15" fill="rgb(220,164,20)" fg:x="827" fg:w="1"/><text x="65.5739%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.3239%" y="149" width="0.0790%" height="15" fill="rgb(222,203,48)" fg:x="827" fg:w="1"/><text x="65.5739%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3239%" y="133" width="0.0790%" height="15" fill="rgb(215,159,22)" fg:x="827" fg:w="1"/><text x="65.5739%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 1.42%)</title><rect x="64.0600%" y="405" width="1.4218%" height="15" fill="rgb(216,183,47)" fg:x="811" fg:w="18"/><text x="64.3100%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.87%)</title><rect x="64.6130%" y="389" width="0.8689%" height="15" fill="rgb(229,195,25)" fg:x="818" fg:w="11"/><text x="64.8630%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.87%)</title><rect x="64.6130%" y="373" width="0.8689%" height="15" fill="rgb(224,132,51)" fg:x="818" fg:w="11"/><text x="64.8630%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.87%)</title><rect x="64.6130%" y="357" width="0.8689%" height="15" fill="rgb(240,63,7)" fg:x="818" fg:w="11"/><text x="64.8630%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.87%)</title><rect x="64.6130%" y="341" width="0.8689%" height="15" fill="rgb(249,182,41)" fg:x="818" fg:w="11"/><text x="64.8630%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="65.1659%" y="325" width="0.3160%" height="15" fill="rgb(243,47,26)" fg:x="825" fg:w="4"/><text x="65.4159%" y="335.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="65.1659%" y="309" width="0.3160%" height="15" fill="rgb(233,48,2)" fg:x="825" fg:w="4"/><text x="65.4159%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="65.1659%" y="293" width="0.3160%" height="15" fill="rgb(244,165,34)" fg:x="825" fg:w="4"/><text x="65.4159%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="65.1659%" y="277" width="0.3160%" height="15" fill="rgb(207,89,7)" fg:x="825" fg:w="4"/><text x="65.4159%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.4028%" y="261" width="0.0790%" height="15" fill="rgb(244,117,36)" fg:x="828" fg:w="1"/><text x="65.6528%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4028%" y="245" width="0.0790%" height="15" fill="rgb(226,144,34)" fg:x="828" fg:w="1"/><text x="65.6528%" y="255.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (431 samples, 34.04%)</title><rect x="31.5166%" y="565" width="34.0442%" height="15" fill="rgb(213,23,19)" fg:x="399" fg:w="431"/><text x="31.7666%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (430 samples, 33.97%)</title><rect x="31.5956%" y="549" width="33.9652%" height="15" fill="rgb(217,75,12)" fg:x="400" fg:w="430"/><text x="31.8456%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (430 samples, 33.97%)</title><rect x="31.5956%" y="533" width="33.9652%" height="15" fill="rgb(224,159,17)" fg:x="400" fg:w="430"/><text x="31.8456%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (430 samples, 33.97%)</title><rect x="31.5956%" y="517" width="33.9652%" height="15" fill="rgb(217,118,1)" fg:x="400" fg:w="430"/><text x="31.8456%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (429 samples, 33.89%)</title><rect x="31.6746%" y="501" width="33.8863%" height="15" fill="rgb(232,180,48)" fg:x="401" fg:w="429"/><text x="31.9246%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (429 samples, 33.89%)</title><rect x="31.6746%" y="485" width="33.8863%" height="15" fill="rgb(230,27,33)" fg:x="401" fg:w="429"/><text x="31.9246%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (428 samples, 33.81%)</title><rect x="31.7536%" y="469" width="33.8073%" height="15" fill="rgb(205,31,21)" fg:x="402" fg:w="428"/><text x="32.0036%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (428 samples, 33.81%)</title><rect x="31.7536%" y="453" width="33.8073%" height="15" fill="rgb(253,59,4)" fg:x="402" fg:w="428"/><text x="32.0036%" y="463.50">&lt;engine::session::state::State as kernel::actions::Perf..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (426 samples, 33.65%)</title><rect x="31.9115%" y="437" width="33.6493%" height="15" fill="rgb(224,201,9)" fg:x="404" fg:w="426"/><text x="32.1615%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::..</text></g><g><title>plugins_core::looking::model::new_area_observation (419 samples, 33.10%)</title><rect x="32.4645%" y="421" width="33.0964%" height="15" fill="rgb(229,206,30)" fg:x="411" fg:w="419"/><text x="32.7145%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="65.4818%" y="405" width="0.0790%" height="15" fill="rgb(212,67,47)" fg:x="829" fg:w="1"/><text x="65.7318%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4818%" y="389" width="0.0790%" height="15" fill="rgb(211,96,50)" fg:x="829" fg:w="1"/><text x="65.7318%" y="399.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.6398%" y="549" width="0.0790%" height="15" fill="rgb(252,114,18)" fg:x="831" fg:w="1"/><text x="65.8898%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="65.7188%" y="549" width="0.0790%" height="15" fill="rgb(223,58,37)" fg:x="832" fg:w="1"/><text x="65.9688%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.7188%" y="533" width="0.0790%" height="15" fill="rgb(237,70,4)" fg:x="832" fg:w="1"/><text x="65.9688%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.7188%" y="517" width="0.0790%" height="15" fill="rgb(244,85,46)" fg:x="832" fg:w="1"/><text x="65.9688%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.7188%" y="501" width="0.0790%" height="15" fill="rgb(223,39,52)" fg:x="832" fg:w="1"/><text x="65.9688%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.7188%" y="485" width="0.0790%" height="15" fill="rgb(218,200,14)" fg:x="832" fg:w="1"/><text x="65.9688%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.7188%" y="469" width="0.0790%" height="15" fill="rgb(208,171,16)" fg:x="832" fg:w="1"/><text x="65.9688%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.7188%" y="453" width="0.0790%" height="15" fill="rgb(234,200,18)" fg:x="832" fg:w="1"/><text x="65.9688%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.7188%" y="437" width="0.0790%" height="15" fill="rgb(228,45,11)" fg:x="832" fg:w="1"/><text x="65.9688%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.7188%" y="421" width="0.0790%" height="15" fill="rgb(237,182,11)" fg:x="832" fg:w="1"/><text x="65.9688%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.7188%" y="405" width="0.0790%" height="15" fill="rgb(241,175,49)" fg:x="832" fg:w="1"/><text x="65.9688%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.7188%" y="389" width="0.0790%" height="15" fill="rgb(247,38,35)" fg:x="832" fg:w="1"/><text x="65.9688%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.7188%" y="373" width="0.0790%" height="15" fill="rgb(228,39,49)" fg:x="832" fg:w="1"/><text x="65.9688%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.7188%" y="357" width="0.0790%" height="15" fill="rgb(226,101,26)" fg:x="832" fg:w="1"/><text x="65.9688%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.8768%" y="533" width="0.0790%" height="15" fill="rgb(206,141,19)" fg:x="834" fg:w="1"/><text x="66.1268%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.8768%" y="517" width="0.0790%" height="15" fill="rgb(211,200,13)" fg:x="834" fg:w="1"/><text x="66.1268%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.9558%" y="533" width="0.0790%" height="15" fill="rgb(241,121,6)" fg:x="835" fg:w="1"/><text x="66.2058%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0348%" y="501" width="0.0790%" height="15" fill="rgb(234,221,29)" fg:x="836" fg:w="1"/><text x="66.2848%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.0348%" y="485" width="0.0790%" height="15" fill="rgb(229,136,5)" fg:x="836" fg:w="1"/><text x="66.2848%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="66.0348%" y="517" width="0.2370%" height="15" fill="rgb(238,36,11)" fg:x="836" fg:w="3"/><text x="66.2848%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="66.1137%" y="501" width="0.1580%" height="15" fill="rgb(251,55,41)" fg:x="837" fg:w="2"/><text x="66.3637%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.1137%" y="485" width="0.1580%" height="15" fill="rgb(242,34,40)" fg:x="837" fg:w="2"/><text x="66.3637%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="66.1927%" y="469" width="0.0790%" height="15" fill="rgb(215,42,17)" fg:x="838" fg:w="1"/><text x="66.4427%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="66.1927%" y="453" width="0.0790%" height="15" fill="rgb(207,44,46)" fg:x="838" fg:w="1"/><text x="66.4427%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="66.1927%" y="437" width="0.0790%" height="15" fill="rgb(211,206,28)" fg:x="838" fg:w="1"/><text x="66.4427%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.1927%" y="421" width="0.0790%" height="15" fill="rgb(237,167,16)" fg:x="838" fg:w="1"/><text x="66.4427%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.1927%" y="405" width="0.0790%" height="15" fill="rgb(233,66,6)" fg:x="838" fg:w="1"/><text x="66.4427%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.1927%" y="389" width="0.0790%" height="15" fill="rgb(246,123,29)" fg:x="838" fg:w="1"/><text x="66.4427%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.3507%" y="453" width="0.0790%" height="15" fill="rgb(209,62,40)" fg:x="840" fg:w="1"/><text x="66.6007%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.3507%" y="437" width="0.0790%" height="15" fill="rgb(218,4,25)" fg:x="840" fg:w="1"/><text x="66.6007%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.3507%" y="421" width="0.0790%" height="15" fill="rgb(253,91,49)" fg:x="840" fg:w="1"/><text x="66.6007%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.3507%" y="405" width="0.0790%" height="15" fill="rgb(228,155,29)" fg:x="840" fg:w="1"/><text x="66.6007%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.3507%" y="389" width="0.0790%" height="15" fill="rgb(243,57,37)" fg:x="840" fg:w="1"/><text x="66.6007%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.3507%" y="373" width="0.0790%" height="15" fill="rgb(244,167,17)" fg:x="840" fg:w="1"/><text x="66.6007%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.3507%" y="357" width="0.0790%" height="15" fill="rgb(207,181,38)" fg:x="840" fg:w="1"/><text x="66.6007%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.3507%" y="341" width="0.0790%" height="15" fill="rgb(211,8,23)" fg:x="840" fg:w="1"/><text x="66.6007%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.3507%" y="325" width="0.0790%" height="15" fill="rgb(235,11,44)" fg:x="840" fg:w="1"/><text x="66.6007%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.3507%" y="309" width="0.0790%" height="15" fill="rgb(248,18,52)" fg:x="840" fg:w="1"/><text x="66.6007%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.3507%" y="293" width="0.0790%" height="15" fill="rgb(208,4,7)" fg:x="840" fg:w="1"/><text x="66.6007%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.3507%" y="277" width="0.0790%" height="15" fill="rgb(240,17,39)" fg:x="840" fg:w="1"/><text x="66.6007%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.3507%" y="261" width="0.0790%" height="15" fill="rgb(207,170,3)" fg:x="840" fg:w="1"/><text x="66.6007%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.3507%" y="245" width="0.0790%" height="15" fill="rgb(236,100,52)" fg:x="840" fg:w="1"/><text x="66.6007%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.3507%" y="229" width="0.0790%" height="15" fill="rgb(246,78,51)" fg:x="840" fg:w="1"/><text x="66.6007%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.3507%" y="213" width="0.0790%" height="15" fill="rgb(211,17,15)" fg:x="840" fg:w="1"/><text x="66.6007%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3507%" y="197" width="0.0790%" height="15" fill="rgb(209,59,46)" fg:x="840" fg:w="1"/><text x="66.6007%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.4297%" y="453" width="0.0790%" height="15" fill="rgb(210,92,25)" fg:x="841" fg:w="1"/><text x="66.6797%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.4297%" y="437" width="0.0790%" height="15" fill="rgb(238,174,52)" fg:x="841" fg:w="1"/><text x="66.6797%" y="447.50"></text></g><g><title>kernel::model::EntityPtr::new_from_entity (1 samples, 0.08%)</title><rect x="66.5087%" y="453" width="0.0790%" height="15" fill="rgb(230,73,7)" fg:x="842" fg:w="1"/><text x="66.7587%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5087%" y="437" width="0.0790%" height="15" fill="rgb(243,124,40)" fg:x="842" fg:w="1"/><text x="66.7587%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.5877%" y="373" width="0.0790%" height="15" fill="rgb(244,170,11)" fg:x="843" fg:w="1"/><text x="66.8377%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.6667%" y="357" width="0.0790%" height="15" fill="rgb(207,114,54)" fg:x="844" fg:w="1"/><text x="66.9167%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.6667%" y="341" width="0.0790%" height="15" fill="rgb(205,42,20)" fg:x="844" fg:w="1"/><text x="66.9167%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.6667%" y="325" width="0.0790%" height="15" fill="rgb(230,30,28)" fg:x="844" fg:w="1"/><text x="66.9167%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.6667%" y="309" width="0.0790%" height="15" fill="rgb(205,73,54)" fg:x="844" fg:w="1"/><text x="66.9167%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.6667%" y="293" width="0.0790%" height="15" fill="rgb(254,227,23)" fg:x="844" fg:w="1"/><text x="66.9167%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.6667%" y="277" width="0.0790%" height="15" fill="rgb(228,202,34)" fg:x="844" fg:w="1"/><text x="66.9167%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="66.5877%" y="405" width="0.2370%" height="15" fill="rgb(222,225,37)" fg:x="843" fg:w="3"/><text x="66.8377%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="66.5877%" y="389" width="0.2370%" height="15" fill="rgb(221,14,54)" fg:x="843" fg:w="3"/><text x="66.8377%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="66.6667%" y="373" width="0.1580%" height="15" fill="rgb(254,102,2)" fg:x="844" fg:w="2"/><text x="66.9167%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="66.7457%" y="357" width="0.0790%" height="15" fill="rgb(232,104,17)" fg:x="845" fg:w="1"/><text x="66.9957%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.7457%" y="341" width="0.0790%" height="15" fill="rgb(250,220,14)" fg:x="845" fg:w="1"/><text x="66.9957%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="66.7457%" y="325" width="0.0790%" height="15" fill="rgb(241,158,9)" fg:x="845" fg:w="1"/><text x="66.9957%" y="335.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="66.5877%" y="453" width="0.3160%" height="15" fill="rgb(246,9,43)" fg:x="843" fg:w="4"/><text x="66.8377%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="66.5877%" y="437" width="0.3160%" height="15" fill="rgb(206,73,33)" fg:x="843" fg:w="4"/><text x="66.8377%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="66.5877%" y="421" width="0.3160%" height="15" fill="rgb(222,79,8)" fg:x="843" fg:w="4"/><text x="66.8377%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.8246%" y="405" width="0.0790%" height="15" fill="rgb(234,8,54)" fg:x="846" fg:w="1"/><text x="67.0746%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.8246%" y="389" width="0.0790%" height="15" fill="rgb(209,134,38)" fg:x="846" fg:w="1"/><text x="67.0746%" y="399.50"></text></g><g><title>plugins_core::tools::contained_by (12 samples, 0.95%)</title><rect x="66.0348%" y="533" width="0.9479%" height="15" fill="rgb(230,127,29)" fg:x="836" fg:w="12"/><text x="66.2848%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.71%)</title><rect x="66.2717%" y="517" width="0.7109%" height="15" fill="rgb(242,44,41)" fg:x="839" fg:w="9"/><text x="66.5217%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.71%)</title><rect x="66.2717%" y="501" width="0.7109%" height="15" fill="rgb(222,56,43)" fg:x="839" fg:w="9"/><text x="66.5217%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.71%)</title><rect x="66.2717%" y="485" width="0.7109%" height="15" fill="rgb(238,39,47)" fg:x="839" fg:w="9"/><text x="66.5217%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.71%)</title><rect x="66.2717%" y="469" width="0.7109%" height="15" fill="rgb(226,79,43)" fg:x="839" fg:w="9"/><text x="66.5217%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="66.9036%" y="453" width="0.0790%" height="15" fill="rgb(242,105,53)" fg:x="847" fg:w="1"/><text x="67.1536%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="66.9036%" y="437" width="0.0790%" height="15" fill="rgb(251,132,46)" fg:x="847" fg:w="1"/><text x="67.1536%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.9036%" y="421" width="0.0790%" height="15" fill="rgb(231,77,14)" fg:x="847" fg:w="1"/><text x="67.1536%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.9036%" y="405" width="0.0790%" height="15" fill="rgb(240,135,9)" fg:x="847" fg:w="1"/><text x="67.1536%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.9036%" y="389" width="0.0790%" height="15" fill="rgb(248,109,14)" fg:x="847" fg:w="1"/><text x="67.1536%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.9036%" y="373" width="0.0790%" height="15" fill="rgb(227,146,52)" fg:x="847" fg:w="1"/><text x="67.1536%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.9036%" y="357" width="0.0790%" height="15" fill="rgb(232,54,3)" fg:x="847" fg:w="1"/><text x="67.1536%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.9036%" y="341" width="0.0790%" height="15" fill="rgb(229,201,43)" fg:x="847" fg:w="1"/><text x="67.1536%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.9036%" y="325" width="0.0790%" height="15" fill="rgb(252,161,33)" fg:x="847" fg:w="1"/><text x="67.1536%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.9826%" y="485" width="0.0790%" height="15" fill="rgb(226,146,40)" fg:x="848" fg:w="1"/><text x="67.2326%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9826%" y="469" width="0.0790%" height="15" fill="rgb(219,47,25)" fg:x="848" fg:w="1"/><text x="67.2326%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0616%" y="469" width="0.0790%" height="15" fill="rgb(250,135,13)" fg:x="849" fg:w="1"/><text x="67.3116%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0616%" y="453" width="0.0790%" height="15" fill="rgb(219,229,18)" fg:x="849" fg:w="1"/><text x="67.3116%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0616%" y="437" width="0.0790%" height="15" fill="rgb(217,152,27)" fg:x="849" fg:w="1"/><text x="67.3116%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="66.9826%" y="501" width="0.2370%" height="15" fill="rgb(225,71,47)" fg:x="848" fg:w="3"/><text x="67.2326%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="67.0616%" y="485" width="0.1580%" height="15" fill="rgb(220,139,14)" fg:x="849" fg:w="2"/><text x="67.3116%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1406%" y="469" width="0.0790%" height="15" fill="rgb(247,54,32)" fg:x="850" fg:w="1"/><text x="67.3906%" y="479.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="66.9826%" y="533" width="0.3160%" height="15" fill="rgb(252,131,39)" fg:x="848" fg:w="4"/><text x="67.2326%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="66.9826%" y="517" width="0.3160%" height="15" fill="rgb(210,108,39)" fg:x="848" fg:w="4"/><text x="67.2326%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.2196%" y="501" width="0.0790%" height="15" fill="rgb(205,23,29)" fg:x="851" fg:w="1"/><text x="67.4696%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.2196%" y="485" width="0.0790%" height="15" fill="rgb(246,139,46)" fg:x="851" fg:w="1"/><text x="67.4696%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="67.2196%" y="469" width="0.0790%" height="15" fill="rgb(250,81,26)" fg:x="851" fg:w="1"/><text x="67.4696%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="67.2196%" y="453" width="0.0790%" height="15" fill="rgb(214,104,7)" fg:x="851" fg:w="1"/><text x="67.4696%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="67.2196%" y="437" width="0.0790%" height="15" fill="rgb(233,189,8)" fg:x="851" fg:w="1"/><text x="67.4696%" y="447.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (21 samples, 1.66%)</title><rect x="65.7978%" y="549" width="1.6588%" height="15" fill="rgb(228,141,17)" fg:x="833" fg:w="21"/><text x="66.0478%" y="559.50"></text></g><g><title>plugins_core::tools::worn_by (2 samples, 0.16%)</title><rect x="67.2986%" y="533" width="0.1580%" height="15" fill="rgb(247,157,1)" fg:x="852" fg:w="2"/><text x="67.5486%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="67.2986%" y="517" width="0.1580%" height="15" fill="rgb(249,225,5)" fg:x="852" fg:w="2"/><text x="67.5486%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="67.3776%" y="501" width="0.0790%" height="15" fill="rgb(242,55,13)" fg:x="853" fg:w="1"/><text x="67.6276%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.3776%" y="485" width="0.0790%" height="15" fill="rgb(230,49,50)" fg:x="853" fg:w="1"/><text x="67.6276%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="67.3776%" y="469" width="0.0790%" height="15" fill="rgb(241,111,38)" fg:x="853" fg:w="1"/><text x="67.6276%" y="479.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::new_from_surroundings (1 samples, 0.08%)</title><rect x="67.4566%" y="549" width="0.0790%" height="15" fill="rgb(252,155,4)" fg:x="854" fg:w="1"/><text x="67.7066%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4566%" y="533" width="0.0790%" height="15" fill="rgb(212,69,32)" fg:x="854" fg:w="1"/><text x="67.7066%" y="543.50"></text></g><g><title>engine::session::Session::captured (481 samples, 37.99%)</title><rect x="29.6209%" y="709" width="37.9937%" height="15" fill="rgb(243,107,47)" fg:x="375" fg:w="481"/><text x="29.8709%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (478 samples, 37.76%)</title><rect x="29.8578%" y="693" width="37.7567%" height="15" fill="rgb(247,130,12)" fg:x="378" fg:w="478"/><text x="30.1078%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (473 samples, 37.36%)</title><rect x="30.2528%" y="677" width="37.3618%" height="15" fill="rgb(233,74,16)" fg:x="383" fg:w="473"/><text x="30.5028%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (473 samples, 37.36%)</title><rect x="30.2528%" y="661" width="37.3618%" height="15" fill="rgb(208,58,18)" fg:x="383" fg:w="473"/><text x="30.5028%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::per..</text></g><g><title>kernel::plugins::mw::apply_middleware (472 samples, 37.28%)</title><rect x="30.3318%" y="645" width="37.2828%" height="15" fill="rgb(242,225,1)" fg:x="384" fg:w="472"/><text x="30.5818%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (472 samples, 37.28%)</title><rect x="30.3318%" y="629" width="37.2828%" height="15" fill="rgb(249,39,40)" fg:x="384" fg:w="472"/><text x="30.5818%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (472 samples, 37.28%)</title><rect x="30.3318%" y="613" width="37.2828%" height="15" fill="rgb(207,72,44)" fg:x="384" fg:w="472"/><text x="30.5818%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plu..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (458 samples, 36.18%)</title><rect x="31.4376%" y="597" width="36.1769%" height="15" fill="rgb(215,193,12)" fg:x="398" fg:w="458"/><text x="31.6876%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (457 samples, 36.10%)</title><rect x="31.5166%" y="581" width="36.0979%" height="15" fill="rgb(248,41,39)" fg:x="399" fg:w="457"/><text x="31.7666%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middl..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (26 samples, 2.05%)</title><rect x="65.5608%" y="565" width="2.0537%" height="15" fill="rgb(253,85,4)" fg:x="830" fg:w="26"/><text x="65.8108%" y="575.50">p..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="67.5355%" y="549" width="0.0790%" height="15" fill="rgb(243,70,31)" fg:x="855" fg:w="1"/><text x="67.7855%" y="559.50"></text></g><g><title>plugins_rune::sources::get_script (1 samples, 0.08%)</title><rect x="67.5355%" y="533" width="0.0790%" height="15" fill="rgb(253,195,26)" fg:x="855" fg:w="1"/><text x="67.7855%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="67.5355%" y="517" width="0.0790%" height="15" fill="rgb(243,42,11)" fg:x="855" fg:w="1"/><text x="67.7855%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="67.5355%" y="501" width="0.0790%" height="15" fill="rgb(239,66,17)" fg:x="855" fg:w="1"/><text x="67.7855%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="67.6145%" y="693" width="0.0790%" height="15" fill="rgb(217,132,21)" fg:x="856" fg:w="1"/><text x="67.8645%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.8515%" y="613" width="0.0790%" height="15" fill="rgb(252,202,21)" fg:x="859" fg:w="1"/><text x="68.1015%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.8515%" y="597" width="0.0790%" height="15" fill="rgb(233,98,36)" fg:x="859" fg:w="1"/><text x="68.1015%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.8515%" y="581" width="0.0790%" height="15" fill="rgb(216,153,54)" fg:x="859" fg:w="1"/><text x="68.1015%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.8515%" y="565" width="0.0790%" height="15" fill="rgb(250,99,7)" fg:x="859" fg:w="1"/><text x="68.1015%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.8515%" y="549" width="0.0790%" height="15" fill="rgb(207,56,50)" fg:x="859" fg:w="1"/><text x="68.1015%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.8515%" y="533" width="0.0790%" height="15" fill="rgb(244,61,34)" fg:x="859" fg:w="1"/><text x="68.1015%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.8515%" y="517" width="0.0790%" height="15" fill="rgb(241,50,38)" fg:x="859" fg:w="1"/><text x="68.1015%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.8515%" y="501" width="0.0790%" height="15" fill="rgb(212,166,30)" fg:x="859" fg:w="1"/><text x="68.1015%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.8515%" y="485" width="0.0790%" height="15" fill="rgb(249,127,32)" fg:x="859" fg:w="1"/><text x="68.1015%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.8515%" y="469" width="0.0790%" height="15" fill="rgb(209,103,0)" fg:x="859" fg:w="1"/><text x="68.1015%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.8515%" y="453" width="0.0790%" height="15" fill="rgb(238,209,51)" fg:x="859" fg:w="1"/><text x="68.1015%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.8515%" y="437" width="0.0790%" height="15" fill="rgb(237,56,23)" fg:x="859" fg:w="1"/><text x="68.1015%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.8515%" y="661" width="0.1580%" height="15" fill="rgb(215,153,46)" fg:x="859" fg:w="2"/><text x="68.1015%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.8515%" y="645" width="0.1580%" height="15" fill="rgb(224,49,31)" fg:x="859" fg:w="2"/><text x="68.1015%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.8515%" y="629" width="0.1580%" height="15" fill="rgb(250,18,42)" fg:x="859" fg:w="2"/><text x="68.1015%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9305%" y="613" width="0.0790%" height="15" fill="rgb(215,176,39)" fg:x="860" fg:w="1"/><text x="68.1805%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="68.0885%" y="613" width="0.1580%" height="15" fill="rgb(223,77,29)" fg:x="862" fg:w="2"/><text x="68.3385%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="68.0885%" y="597" width="0.1580%" height="15" fill="rgb(234,94,52)" fg:x="862" fg:w="2"/><text x="68.3385%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="68.0885%" y="581" width="0.1580%" height="15" fill="rgb(220,154,50)" fg:x="862" fg:w="2"/><text x="68.3385%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="68.0885%" y="565" width="0.1580%" height="15" fill="rgb(212,11,10)" fg:x="862" fg:w="2"/><text x="68.3385%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="68.0885%" y="549" width="0.1580%" height="15" fill="rgb(205,166,19)" fg:x="862" fg:w="2"/><text x="68.3385%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.1675%" y="533" width="0.0790%" height="15" fill="rgb(244,198,16)" fg:x="863" fg:w="1"/><text x="68.4175%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="68.0095%" y="661" width="0.3160%" height="15" fill="rgb(219,69,12)" fg:x="861" fg:w="4"/><text x="68.2595%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="68.0095%" y="645" width="0.3160%" height="15" fill="rgb(245,30,7)" fg:x="861" fg:w="4"/><text x="68.2595%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="68.0095%" y="629" width="0.3160%" height="15" fill="rgb(218,221,48)" fg:x="861" fg:w="4"/><text x="68.2595%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.2464%" y="613" width="0.0790%" height="15" fill="rgb(216,66,15)" fg:x="864" fg:w="1"/><text x="68.4964%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2464%" y="597" width="0.0790%" height="15" fill="rgb(226,122,50)" fg:x="864" fg:w="1"/><text x="68.4964%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.2464%" y="581" width="0.0790%" height="15" fill="rgb(239,156,16)" fg:x="864" fg:w="1"/><text x="68.4964%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.4044%" y="597" width="0.0790%" height="15" fill="rgb(224,27,38)" fg:x="866" fg:w="1"/><text x="68.6544%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.4834%" y="597" width="0.0790%" height="15" fill="rgb(224,39,27)" fg:x="867" fg:w="1"/><text x="68.7334%" y="607.50"></text></g><g><title>engine::session::internal::Added::find_refs (12 samples, 0.95%)</title><rect x="67.6935%" y="693" width="0.9479%" height="15" fill="rgb(215,92,29)" fg:x="857" fg:w="12"/><text x="67.9435%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (11 samples, 0.87%)</title><rect x="67.7725%" y="677" width="0.8689%" height="15" fill="rgb(207,159,16)" fg:x="858" fg:w="11"/><text x="68.0225%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="68.3254%" y="661" width="0.3160%" height="15" fill="rgb(238,163,47)" fg:x="865" fg:w="4"/><text x="68.5754%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="68.3254%" y="645" width="0.3160%" height="15" fill="rgb(219,91,49)" fg:x="865" fg:w="4"/><text x="68.5754%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="68.4044%" y="629" width="0.2370%" height="15" fill="rgb(227,167,31)" fg:x="866" fg:w="3"/><text x="68.6544%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="68.4044%" y="613" width="0.2370%" height="15" fill="rgb(234,80,54)" fg:x="866" fg:w="3"/><text x="68.6544%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.5624%" y="597" width="0.0790%" height="15" fill="rgb(212,114,2)" fg:x="868" fg:w="1"/><text x="68.8124%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5624%" y="581" width="0.0790%" height="15" fill="rgb(234,50,24)" fg:x="868" fg:w="1"/><text x="68.8124%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.6414%" y="645" width="0.1580%" height="15" fill="rgb(221,68,8)" fg:x="869" fg:w="2"/><text x="68.8914%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7204%" y="629" width="0.0790%" height="15" fill="rgb(254,180,31)" fg:x="870" fg:w="1"/><text x="68.9704%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7204%" y="613" width="0.0790%" height="15" fill="rgb(247,130,50)" fg:x="870" fg:w="1"/><text x="68.9704%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="68.6414%" y="677" width="0.2370%" height="15" fill="rgb(211,109,4)" fg:x="869" fg:w="3"/><text x="68.8914%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="68.6414%" y="661" width="0.2370%" height="15" fill="rgb(238,50,21)" fg:x="869" fg:w="3"/><text x="68.8914%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7994%" y="645" width="0.0790%" height="15" fill="rgb(225,57,45)" fg:x="871" fg:w="1"/><text x="69.0494%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7994%" y="629" width="0.0790%" height="15" fill="rgb(209,196,50)" fg:x="871" fg:w="1"/><text x="69.0494%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.7994%" y="613" width="0.0790%" height="15" fill="rgb(242,140,13)" fg:x="871" fg:w="1"/><text x="69.0494%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.7994%" y="597" width="0.0790%" height="15" fill="rgb(217,111,7)" fg:x="871" fg:w="1"/><text x="69.0494%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.7994%" y="581" width="0.0790%" height="15" fill="rgb(253,193,51)" fg:x="871" fg:w="1"/><text x="69.0494%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.7994%" y="565" width="0.0790%" height="15" fill="rgb(252,70,29)" fg:x="871" fg:w="1"/><text x="69.0494%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.7994%" y="549" width="0.0790%" height="15" fill="rgb(232,127,12)" fg:x="871" fg:w="1"/><text x="69.0494%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.7994%" y="533" width="0.0790%" height="15" fill="rgb(211,180,21)" fg:x="871" fg:w="1"/><text x="69.0494%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.7994%" y="517" width="0.0790%" height="15" fill="rgb(229,72,13)" fg:x="871" fg:w="1"/><text x="69.0494%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.7994%" y="501" width="0.0790%" height="15" fill="rgb(240,211,49)" fg:x="871" fg:w="1"/><text x="69.0494%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.7994%" y="485" width="0.0790%" height="15" fill="rgb(219,149,40)" fg:x="871" fg:w="1"/><text x="69.0494%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.7994%" y="469" width="0.0790%" height="15" fill="rgb(210,127,46)" fg:x="871" fg:w="1"/><text x="69.0494%" y="479.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="68.8784%" y="677" width="0.0790%" height="15" fill="rgb(220,106,7)" fg:x="872" fg:w="1"/><text x="69.1284%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.8784%" y="661" width="0.0790%" height="15" fill="rgb(249,31,22)" fg:x="872" fg:w="1"/><text x="69.1284%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.8784%" y="645" width="0.0790%" height="15" fill="rgb(253,1,49)" fg:x="872" fg:w="1"/><text x="69.1284%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.8784%" y="629" width="0.0790%" height="15" fill="rgb(227,144,33)" fg:x="872" fg:w="1"/><text x="69.1284%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.8784%" y="613" width="0.0790%" height="15" fill="rgb(249,163,44)" fg:x="872" fg:w="1"/><text x="69.1284%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.8784%" y="597" width="0.0790%" height="15" fill="rgb(234,15,39)" fg:x="872" fg:w="1"/><text x="69.1284%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.8784%" y="581" width="0.0790%" height="15" fill="rgb(207,66,16)" fg:x="872" fg:w="1"/><text x="69.1284%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.8784%" y="565" width="0.0790%" height="15" fill="rgb(233,112,24)" fg:x="872" fg:w="1"/><text x="69.1284%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.8784%" y="549" width="0.0790%" height="15" fill="rgb(230,90,22)" fg:x="872" fg:w="1"/><text x="69.1284%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.8784%" y="533" width="0.0790%" height="15" fill="rgb(229,61,13)" fg:x="872" fg:w="1"/><text x="69.1284%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.8784%" y="517" width="0.0790%" height="15" fill="rgb(225,57,24)" fg:x="872" fg:w="1"/><text x="69.1284%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.8784%" y="501" width="0.0790%" height="15" fill="rgb(208,169,48)" fg:x="872" fg:w="1"/><text x="69.1284%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8784%" y="485" width="0.0790%" height="15" fill="rgb(244,218,51)" fg:x="872" fg:w="1"/><text x="69.1284%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.9573%" y="581" width="0.0790%" height="15" fill="rgb(214,148,10)" fg:x="873" fg:w="1"/><text x="69.2073%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.9573%" y="565" width="0.0790%" height="15" fill="rgb(225,174,27)" fg:x="873" fg:w="1"/><text x="69.2073%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.9573%" y="549" width="0.0790%" height="15" fill="rgb(230,96,26)" fg:x="873" fg:w="1"/><text x="69.2073%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.9573%" y="533" width="0.0790%" height="15" fill="rgb(232,10,30)" fg:x="873" fg:w="1"/><text x="69.2073%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.1153%" y="533" width="0.0790%" height="15" fill="rgb(222,8,50)" fg:x="875" fg:w="1"/><text x="69.3653%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="69.1153%" y="517" width="0.0790%" height="15" fill="rgb(213,81,27)" fg:x="875" fg:w="1"/><text x="69.3653%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1153%" y="501" width="0.0790%" height="15" fill="rgb(245,50,10)" fg:x="875" fg:w="1"/><text x="69.3653%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.1153%" y="485" width="0.0790%" height="15" fill="rgb(216,100,18)" fg:x="875" fg:w="1"/><text x="69.3653%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="68.9573%" y="677" width="0.3160%" height="15" fill="rgb(236,147,54)" fg:x="873" fg:w="4"/><text x="69.2073%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="68.9573%" y="661" width="0.3160%" height="15" fill="rgb(205,143,26)" fg:x="873" fg:w="4"/><text x="69.2073%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="68.9573%" y="645" width="0.3160%" height="15" fill="rgb(236,26,9)" fg:x="873" fg:w="4"/><text x="69.2073%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="68.9573%" y="629" width="0.3160%" height="15" fill="rgb(221,165,53)" fg:x="873" fg:w="4"/><text x="69.2073%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="68.9573%" y="613" width="0.3160%" height="15" fill="rgb(214,110,17)" fg:x="873" fg:w="4"/><text x="69.2073%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="68.9573%" y="597" width="0.3160%" height="15" fill="rgb(237,197,12)" fg:x="873" fg:w="4"/><text x="69.2073%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.0363%" y="581" width="0.2370%" height="15" fill="rgb(205,84,17)" fg:x="874" fg:w="3"/><text x="69.2863%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.1153%" y="565" width="0.1580%" height="15" fill="rgb(237,18,45)" fg:x="875" fg:w="2"/><text x="69.3653%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="69.1153%" y="549" width="0.1580%" height="15" fill="rgb(221,87,14)" fg:x="875" fg:w="2"/><text x="69.3653%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1943%" y="533" width="0.0790%" height="15" fill="rgb(238,186,15)" fg:x="876" fg:w="1"/><text x="69.4443%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.1943%" y="517" width="0.0790%" height="15" fill="rgb(208,115,11)" fg:x="876" fg:w="1"/><text x="69.4443%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.1943%" y="501" width="0.0790%" height="15" fill="rgb(254,175,0)" fg:x="876" fg:w="1"/><text x="69.4443%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1943%" y="485" width="0.0790%" height="15" fill="rgb(227,24,42)" fg:x="876" fg:w="1"/><text x="69.4443%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.1943%" y="469" width="0.0790%" height="15" fill="rgb(223,211,37)" fg:x="876" fg:w="1"/><text x="69.4443%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.1943%" y="453" width="0.0790%" height="15" fill="rgb(235,49,27)" fg:x="876" fg:w="1"/><text x="69.4443%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (23 samples, 1.82%)</title><rect x="67.6145%" y="709" width="1.8167%" height="15" fill="rgb(254,97,51)" fg:x="856" fg:w="23"/><text x="67.8645%" y="719.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.79%)</title><rect x="68.6414%" y="693" width="0.7899%" height="15" fill="rgb(249,51,40)" fg:x="869" fg:w="10"/><text x="68.8914%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="69.2733%" y="677" width="0.1580%" height="15" fill="rgb(210,128,45)" fg:x="877" fg:w="2"/><text x="69.5233%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="69.2733%" y="661" width="0.1580%" height="15" fill="rgb(224,137,50)" fg:x="877" fg:w="2"/><text x="69.5233%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.2733%" y="645" width="0.1580%" height="15" fill="rgb(242,15,9)" fg:x="877" fg:w="2"/><text x="69.5233%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.2733%" y="629" width="0.1580%" height="15" fill="rgb(233,187,41)" fg:x="877" fg:w="2"/><text x="69.5233%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.2733%" y="613" width="0.1580%" height="15" fill="rgb(227,2,29)" fg:x="877" fg:w="2"/><text x="69.5233%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.2733%" y="597" width="0.1580%" height="15" fill="rgb(222,70,3)" fg:x="877" fg:w="2"/><text x="69.5233%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.2733%" y="581" width="0.1580%" height="15" fill="rgb(213,11,42)" fg:x="877" fg:w="2"/><text x="69.5233%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.2733%" y="565" width="0.1580%" height="15" fill="rgb(225,150,9)" fg:x="877" fg:w="2"/><text x="69.5233%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.2733%" y="549" width="0.1580%" height="15" fill="rgb(230,162,45)" fg:x="877" fg:w="2"/><text x="69.5233%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.2733%" y="533" width="0.1580%" height="15" fill="rgb(222,14,52)" fg:x="877" fg:w="2"/><text x="69.5233%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.3523%" y="517" width="0.0790%" height="15" fill="rgb(254,198,14)" fg:x="878" fg:w="1"/><text x="69.6023%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3523%" y="501" width="0.0790%" height="15" fill="rgb(220,217,30)" fg:x="878" fg:w="1"/><text x="69.6023%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.5103%" y="661" width="0.0790%" height="15" fill="rgb(215,146,41)" fg:x="880" fg:w="1"/><text x="69.7603%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.5103%" y="645" width="0.0790%" height="15" fill="rgb(217,27,36)" fg:x="880" fg:w="1"/><text x="69.7603%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.5103%" y="629" width="0.0790%" height="15" fill="rgb(219,218,39)" fg:x="880" fg:w="1"/><text x="69.7603%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.5103%" y="613" width="0.0790%" height="15" fill="rgb(219,4,42)" fg:x="880" fg:w="1"/><text x="69.7603%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.5103%" y="597" width="0.0790%" height="15" fill="rgb(249,119,36)" fg:x="880" fg:w="1"/><text x="69.7603%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.5103%" y="581" width="0.0790%" height="15" fill="rgb(209,23,33)" fg:x="880" fg:w="1"/><text x="69.7603%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.5103%" y="565" width="0.0790%" height="15" fill="rgb(211,10,0)" fg:x="880" fg:w="1"/><text x="69.7603%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.5103%" y="549" width="0.0790%" height="15" fill="rgb(208,99,37)" fg:x="880" fg:w="1"/><text x="69.7603%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.5103%" y="533" width="0.0790%" height="15" fill="rgb(213,132,31)" fg:x="880" fg:w="1"/><text x="69.7603%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.5103%" y="517" width="0.0790%" height="15" fill="rgb(243,129,40)" fg:x="880" fg:w="1"/><text x="69.7603%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.5103%" y="501" width="0.0790%" height="15" fill="rgb(210,66,33)" fg:x="880" fg:w="1"/><text x="69.7603%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.5103%" y="485" width="0.0790%" height="15" fill="rgb(209,189,4)" fg:x="880" fg:w="1"/><text x="69.7603%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.5103%" y="469" width="0.0790%" height="15" fill="rgb(214,107,37)" fg:x="880" fg:w="1"/><text x="69.7603%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.5893%" y="581" width="0.0790%" height="15" fill="rgb(245,88,54)" fg:x="881" fg:w="1"/><text x="69.8393%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.6682%" y="533" width="0.0790%" height="15" fill="rgb(205,146,20)" fg:x="882" fg:w="1"/><text x="69.9182%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6682%" y="517" width="0.0790%" height="15" fill="rgb(220,161,25)" fg:x="882" fg:w="1"/><text x="69.9182%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="69.5893%" y="661" width="0.2370%" height="15" fill="rgb(215,152,15)" fg:x="881" fg:w="3"/><text x="69.8393%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="69.5893%" y="645" width="0.2370%" height="15" fill="rgb(233,192,44)" fg:x="881" fg:w="3"/><text x="69.8393%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.5893%" y="629" width="0.2370%" height="15" fill="rgb(240,170,46)" fg:x="881" fg:w="3"/><text x="69.8393%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="69.5893%" y="613" width="0.2370%" height="15" fill="rgb(207,104,33)" fg:x="881" fg:w="3"/><text x="69.8393%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.5893%" y="597" width="0.2370%" height="15" fill="rgb(219,21,39)" fg:x="881" fg:w="3"/><text x="69.8393%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.6682%" y="581" width="0.1580%" height="15" fill="rgb(214,133,29)" fg:x="882" fg:w="2"/><text x="69.9182%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.6682%" y="565" width="0.1580%" height="15" fill="rgb(226,93,6)" fg:x="882" fg:w="2"/><text x="69.9182%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.6682%" y="549" width="0.1580%" height="15" fill="rgb(252,222,34)" fg:x="882" fg:w="2"/><text x="69.9182%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.7472%" y="533" width="0.0790%" height="15" fill="rgb(252,92,48)" fg:x="883" fg:w="1"/><text x="69.9972%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7472%" y="517" width="0.0790%" height="15" fill="rgb(245,223,24)" fg:x="883" fg:w="1"/><text x="69.9972%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7472%" y="501" width="0.0790%" height="15" fill="rgb(205,176,3)" fg:x="883" fg:w="1"/><text x="69.9972%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.7472%" y="485" width="0.0790%" height="15" fill="rgb(235,151,15)" fg:x="883" fg:w="1"/><text x="69.9972%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7472%" y="469" width="0.0790%" height="15" fill="rgb(237,209,11)" fg:x="883" fg:w="1"/><text x="69.9972%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7472%" y="453" width="0.0790%" height="15" fill="rgb(243,227,24)" fg:x="883" fg:w="1"/><text x="69.9972%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.7472%" y="437" width="0.0790%" height="15" fill="rgb(239,193,16)" fg:x="883" fg:w="1"/><text x="69.9972%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.8262%" y="597" width="0.0790%" height="15" fill="rgb(231,27,9)" fg:x="884" fg:w="1"/><text x="70.0762%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8262%" y="581" width="0.0790%" height="15" fill="rgb(219,169,10)" fg:x="884" fg:w="1"/><text x="70.0762%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.8262%" y="565" width="0.0790%" height="15" fill="rgb(244,229,43)" fg:x="884" fg:w="1"/><text x="70.0762%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8262%" y="549" width="0.0790%" height="15" fill="rgb(254,38,20)" fg:x="884" fg:w="1"/><text x="70.0762%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.55%)</title><rect x="69.5103%" y="677" width="0.5529%" height="15" fill="rgb(250,47,30)" fg:x="880" fg:w="7"/><text x="69.7603%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="69.8262%" y="661" width="0.2370%" height="15" fill="rgb(224,124,36)" fg:x="884" fg:w="3"/><text x="70.0762%" y="671.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="69.8262%" y="645" width="0.2370%" height="15" fill="rgb(246,68,51)" fg:x="884" fg:w="3"/><text x="70.0762%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="69.8262%" y="629" width="0.2370%" height="15" fill="rgb(253,43,49)" fg:x="884" fg:w="3"/><text x="70.0762%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.8262%" y="613" width="0.2370%" height="15" fill="rgb(219,54,36)" fg:x="884" fg:w="3"/><text x="70.0762%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="69.9052%" y="597" width="0.1580%" height="15" fill="rgb(227,133,34)" fg:x="885" fg:w="2"/><text x="70.1552%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9842%" y="581" width="0.0790%" height="15" fill="rgb(247,227,15)" fg:x="886" fg:w="1"/><text x="70.2342%" y="591.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (520 samples, 41.07%)</title><rect x="29.0679%" y="741" width="41.0742%" height="15" fill="rgb(229,96,14)" fg:x="368" fg:w="520"/><text x="29.3179%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (520 samples, 41.07%)</title><rect x="29.0679%" y="725" width="41.0742%" height="15" fill="rgb(220,79,17)" fg:x="368" fg:w="520"/><text x="29.3179%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (9 samples, 0.71%)</title><rect x="69.4313%" y="709" width="0.7109%" height="15" fill="rgb(205,131,53)" fg:x="879" fg:w="9"/><text x="69.6813%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.71%)</title><rect x="69.4313%" y="693" width="0.7109%" height="15" fill="rgb(209,50,29)" fg:x="879" fg:w="9"/><text x="69.6813%" y="703.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="70.0632%" y="677" width="0.0790%" height="15" fill="rgb(245,86,46)" fg:x="887" fg:w="1"/><text x="70.3132%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (889 samples, 70.22%)</title><rect x="0.0000%" y="789" width="70.2212%" height="15" fill="rgb(235,66,46)" fg:x="0" fg:w="889"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (889 samples, 70.22%)</title><rect x="0.0000%" y="773" width="70.2212%" height="15" fill="rgb(232,148,31)" fg:x="0" fg:w="889"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (889 samples, 70.22%)</title><rect x="0.0000%" y="757" width="70.2212%" height="15" fill="rgb(217,149,8)" fg:x="0" fg:w="889"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="70.1422%" y="741" width="0.0790%" height="15" fill="rgb(209,183,11)" fg:x="888" fg:w="1"/><text x="70.3922%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.2212%" y="693" width="0.0790%" height="15" fill="rgb(208,55,20)" fg:x="889" fg:w="1"/><text x="70.4712%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3791%" y="661" width="0.0790%" height="15" fill="rgb(218,39,14)" fg:x="891" fg:w="1"/><text x="70.6291%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.39%)</title><rect x="70.2212%" y="725" width="0.3949%" height="15" fill="rgb(216,169,33)" fg:x="889" fg:w="5"/><text x="70.4712%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="70.2212%" y="709" width="0.3949%" height="15" fill="rgb(233,80,24)" fg:x="889" fg:w="5"/><text x="70.4712%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="70.3002%" y="693" width="0.3160%" height="15" fill="rgb(213,179,31)" fg:x="890" fg:w="4"/><text x="70.5502%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.24%)</title><rect x="70.3791%" y="677" width="0.2370%" height="15" fill="rgb(209,19,5)" fg:x="891" fg:w="3"/><text x="70.6291%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="70.4581%" y="661" width="0.1580%" height="15" fill="rgb(219,18,35)" fg:x="892" fg:w="2"/><text x="70.7081%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.5371%" y="645" width="0.0790%" height="15" fill="rgb(209,169,16)" fg:x="893" fg:w="1"/><text x="70.7871%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.6161%" y="613" width="0.0790%" height="15" fill="rgb(245,90,51)" fg:x="894" fg:w="1"/><text x="70.8661%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.6951%" y="597" width="0.0790%" height="15" fill="rgb(220,99,45)" fg:x="895" fg:w="1"/><text x="70.9451%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="70.6161%" y="661" width="0.2370%" height="15" fill="rgb(249,89,25)" fg:x="894" fg:w="3"/><text x="70.8661%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (3 samples, 0.24%)</title><rect x="70.6161%" y="645" width="0.2370%" height="15" fill="rgb(239,193,0)" fg:x="894" fg:w="3"/><text x="70.8661%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="70.6161%" y="629" width="0.2370%" height="15" fill="rgb(231,126,1)" fg:x="894" fg:w="3"/><text x="70.8661%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.6951%" y="613" width="0.1580%" height="15" fill="rgb(243,166,3)" fg:x="895" fg:w="2"/><text x="70.9451%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.7741%" y="597" width="0.0790%" height="15" fill="rgb(223,22,34)" fg:x="896" fg:w="1"/><text x="71.0241%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.7741%" y="581" width="0.0790%" height="15" fill="rgb(251,52,51)" fg:x="896" fg:w="1"/><text x="71.0241%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.8531%" y="645" width="0.0790%" height="15" fill="rgb(221,165,28)" fg:x="897" fg:w="1"/><text x="71.1031%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.9321%" y="613" width="0.0790%" height="15" fill="rgb(218,121,47)" fg:x="898" fg:w="1"/><text x="71.1821%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9321%" y="597" width="0.0790%" height="15" fill="rgb(209,120,9)" fg:x="898" fg:w="1"/><text x="71.1821%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.87%)</title><rect x="70.2212%" y="741" width="0.8689%" height="15" fill="rgb(236,68,12)" fg:x="889" fg:w="11"/><text x="70.4712%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (6 samples, 0.47%)</title><rect x="70.6161%" y="725" width="0.4739%" height="15" fill="rgb(225,194,26)" fg:x="894" fg:w="6"/><text x="70.8661%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.47%)</title><rect x="70.6161%" y="709" width="0.4739%" height="15" fill="rgb(231,84,39)" fg:x="894" fg:w="6"/><text x="70.8661%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (6 samples, 0.47%)</title><rect x="70.6161%" y="693" width="0.4739%" height="15" fill="rgb(210,11,45)" fg:x="894" fg:w="6"/><text x="70.8661%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.47%)</title><rect x="70.6161%" y="677" width="0.4739%" height="15" fill="rgb(224,54,52)" fg:x="894" fg:w="6"/><text x="70.8661%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="70.8531%" y="661" width="0.2370%" height="15" fill="rgb(238,102,14)" fg:x="897" fg:w="3"/><text x="71.1031%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.9321%" y="645" width="0.1580%" height="15" fill="rgb(243,160,52)" fg:x="898" fg:w="2"/><text x="71.1821%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.9321%" y="629" width="0.1580%" height="15" fill="rgb(216,114,19)" fg:x="898" fg:w="2"/><text x="71.1821%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.0111%" y="613" width="0.0790%" height="15" fill="rgb(244,166,37)" fg:x="899" fg:w="1"/><text x="71.2611%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.0111%" y="597" width="0.0790%" height="15" fill="rgb(246,29,44)" fg:x="899" fg:w="1"/><text x="71.2611%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.0111%" y="581" width="0.0790%" height="15" fill="rgb(215,56,53)" fg:x="899" fg:w="1"/><text x="71.2611%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.0111%" y="565" width="0.0790%" height="15" fill="rgb(217,60,2)" fg:x="899" fg:w="1"/><text x="71.2611%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0900%" y="613" width="0.0790%" height="15" fill="rgb(207,26,24)" fg:x="900" fg:w="1"/><text x="71.3400%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0900%" y="597" width="0.0790%" height="15" fill="rgb(252,210,15)" fg:x="900" fg:w="1"/><text x="71.3400%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.0900%" y="581" width="0.0790%" height="15" fill="rgb(253,209,26)" fg:x="900" fg:w="1"/><text x="71.3400%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.0900%" y="565" width="0.0790%" height="15" fill="rgb(238,170,14)" fg:x="900" fg:w="1"/><text x="71.3400%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.0900%" y="549" width="0.0790%" height="15" fill="rgb(216,178,15)" fg:x="900" fg:w="1"/><text x="71.3400%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0900%" y="533" width="0.0790%" height="15" fill="rgb(250,197,2)" fg:x="900" fg:w="1"/><text x="71.3400%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0900%" y="517" width="0.0790%" height="15" fill="rgb(212,70,42)" fg:x="900" fg:w="1"/><text x="71.3400%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.0900%" y="501" width="0.0790%" height="15" fill="rgb(227,213,9)" fg:x="900" fg:w="1"/><text x="71.3400%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.0900%" y="485" width="0.0790%" height="15" fill="rgb(245,99,25)" fg:x="900" fg:w="1"/><text x="71.3400%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.0900%" y="469" width="0.0790%" height="15" fill="rgb(250,82,29)" fg:x="900" fg:w="1"/><text x="71.3400%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.0900%" y="453" width="0.0790%" height="15" fill="rgb(241,226,54)" fg:x="900" fg:w="1"/><text x="71.3400%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0900%" y="437" width="0.0790%" height="15" fill="rgb(221,99,41)" fg:x="900" fg:w="1"/><text x="71.3400%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1690%" y="597" width="0.0790%" height="15" fill="rgb(213,90,21)" fg:x="901" fg:w="1"/><text x="71.4190%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1690%" y="581" width="0.0790%" height="15" fill="rgb(205,208,24)" fg:x="901" fg:w="1"/><text x="71.4190%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.1690%" y="565" width="0.0790%" height="15" fill="rgb(246,31,12)" fg:x="901" fg:w="1"/><text x="71.4190%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.1690%" y="549" width="0.0790%" height="15" fill="rgb(213,154,6)" fg:x="901" fg:w="1"/><text x="71.4190%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.1690%" y="533" width="0.0790%" height="15" fill="rgb(222,163,29)" fg:x="901" fg:w="1"/><text x="71.4190%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1690%" y="517" width="0.0790%" height="15" fill="rgb(227,201,8)" fg:x="901" fg:w="1"/><text x="71.4190%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1690%" y="501" width="0.0790%" height="15" fill="rgb(233,9,32)" fg:x="901" fg:w="1"/><text x="71.4190%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.1690%" y="485" width="0.0790%" height="15" fill="rgb(217,54,24)" fg:x="901" fg:w="1"/><text x="71.4190%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.1690%" y="469" width="0.0790%" height="15" fill="rgb(235,192,0)" fg:x="901" fg:w="1"/><text x="71.4190%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.1690%" y="453" width="0.0790%" height="15" fill="rgb(235,45,9)" fg:x="901" fg:w="1"/><text x="71.4190%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.1690%" y="437" width="0.0790%" height="15" fill="rgb(246,42,40)" fg:x="901" fg:w="1"/><text x="71.4190%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.1690%" y="421" width="0.0790%" height="15" fill="rgb(248,111,24)" fg:x="901" fg:w="1"/><text x="71.4190%" y="431.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="71.0900%" y="645" width="0.2370%" height="15" fill="rgb(249,65,22)" fg:x="900" fg:w="3"/><text x="71.3400%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="71.0900%" y="629" width="0.2370%" height="15" fill="rgb(238,111,51)" fg:x="900" fg:w="3"/><text x="71.3400%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.1690%" y="613" width="0.1580%" height="15" fill="rgb(250,118,22)" fg:x="901" fg:w="2"/><text x="71.4190%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2480%" y="597" width="0.0790%" height="15" fill="rgb(234,84,26)" fg:x="902" fg:w="1"/><text x="71.4980%" y="607.50"></text></g><g><title>glob::is_dir (1 samples, 0.08%)</title><rect x="71.3270%" y="597" width="0.0790%" height="15" fill="rgb(243,172,12)" fg:x="903" fg:w="1"/><text x="71.5770%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="71.3270%" y="581" width="0.0790%" height="15" fill="rgb(236,150,49)" fg:x="903" fg:w="1"/><text x="71.5770%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="71.3270%" y="565" width="0.0790%" height="15" fill="rgb(225,197,26)" fg:x="903" fg:w="1"/><text x="71.5770%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="71.3270%" y="549" width="0.0790%" height="15" fill="rgb(214,17,42)" fg:x="903" fg:w="1"/><text x="71.5770%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.3270%" y="533" width="0.0790%" height="15" fill="rgb(224,165,40)" fg:x="903" fg:w="1"/><text x="71.5770%" y="543.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="71.3270%" y="629" width="0.2370%" height="15" fill="rgb(246,100,4)" fg:x="903" fg:w="3"/><text x="71.5770%" y="639.50"></text></g><g><title>glob::fill_todo (3 samples, 0.24%)</title><rect x="71.3270%" y="613" width="0.2370%" height="15" fill="rgb(222,103,0)" fg:x="903" fg:w="3"/><text x="71.5770%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="71.4060%" y="597" width="0.1580%" height="15" fill="rgb(227,189,26)" fg:x="904" fg:w="2"/><text x="71.6560%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="71.4060%" y="581" width="0.1580%" height="15" fill="rgb(214,202,17)" fg:x="904" fg:w="2"/><text x="71.6560%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="71.4060%" y="565" width="0.1580%" height="15" fill="rgb(229,111,3)" fg:x="904" fg:w="2"/><text x="71.6560%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="71.4060%" y="549" width="0.1580%" height="15" fill="rgb(229,172,15)" fg:x="904" fg:w="2"/><text x="71.6560%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="71.4060%" y="533" width="0.1580%" height="15" fill="rgb(230,224,35)" fg:x="904" fg:w="2"/><text x="71.6560%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="71.4060%" y="517" width="0.1580%" height="15" fill="rgb(251,141,6)" fg:x="904" fg:w="2"/><text x="71.6560%" y="527.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="71.4060%" y="501" width="0.1580%" height="15" fill="rgb(225,208,6)" fg:x="904" fg:w="2"/><text x="71.6560%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="71.7220%" y="581" width="0.1580%" height="15" fill="rgb(246,181,16)" fg:x="908" fg:w="2"/><text x="71.9720%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="71.7220%" y="565" width="0.1580%" height="15" fill="rgb(227,129,36)" fg:x="908" fg:w="2"/><text x="71.9720%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.8009%" y="549" width="0.0790%" height="15" fill="rgb(248,117,24)" fg:x="909" fg:w="1"/><text x="72.0509%" y="559.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (11 samples, 0.87%)</title><rect x="71.0900%" y="661" width="0.8689%" height="15" fill="rgb(214,185,35)" fg:x="900" fg:w="11"/><text x="71.3400%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (8 samples, 0.63%)</title><rect x="71.3270%" y="645" width="0.6319%" height="15" fill="rgb(236,150,34)" fg:x="903" fg:w="8"/><text x="71.5770%" y="655.50"></text></g><g><title>glob::glob (5 samples, 0.39%)</title><rect x="71.5640%" y="629" width="0.3949%" height="15" fill="rgb(243,228,27)" fg:x="906" fg:w="5"/><text x="71.8140%" y="639.50"></text></g><g><title>glob::glob_with (5 samples, 0.39%)</title><rect x="71.5640%" y="613" width="0.3949%" height="15" fill="rgb(245,77,44)" fg:x="906" fg:w="5"/><text x="71.8140%" y="623.50"></text></g><g><title>glob::Pattern::new (5 samples, 0.39%)</title><rect x="71.5640%" y="597" width="0.3949%" height="15" fill="rgb(235,214,42)" fg:x="906" fg:w="5"/><text x="71.8140%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.8799%" y="581" width="0.0790%" height="15" fill="rgb(221,74,3)" fg:x="910" fg:w="1"/><text x="72.1299%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.8799%" y="565" width="0.0790%" height="15" fill="rgb(206,121,29)" fg:x="910" fg:w="1"/><text x="72.1299%" y="575.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="71.9589%" y="629" width="0.0790%" height="15" fill="rgb(249,131,53)" fg:x="911" fg:w="1"/><text x="72.2089%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="71.9589%" y="613" width="0.0790%" height="15" fill="rgb(236,170,29)" fg:x="911" fg:w="1"/><text x="72.2089%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="71.9589%" y="597" width="0.0790%" height="15" fill="rgb(247,96,15)" fg:x="911" fg:w="1"/><text x="72.2089%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0379%" y="597" width="0.0790%" height="15" fill="rgb(211,210,7)" fg:x="912" fg:w="1"/><text x="72.2879%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="72.0379%" y="629" width="0.1580%" height="15" fill="rgb(240,88,50)" fg:x="912" fg:w="2"/><text x="72.2879%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="72.0379%" y="613" width="0.1580%" height="15" fill="rgb(209,229,26)" fg:x="912" fg:w="2"/><text x="72.2879%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="72.1169%" y="597" width="0.0790%" height="15" fill="rgb(210,68,23)" fg:x="913" fg:w="1"/><text x="72.3669%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="72.1959%" y="629" width="0.0790%" height="15" fill="rgb(229,180,13)" fg:x="914" fg:w="1"/><text x="72.4459%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="72.1959%" y="613" width="0.0790%" height="15" fill="rgb(236,53,44)" fg:x="914" fg:w="1"/><text x="72.4459%" y="623.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="72.2749%" y="629" width="0.0790%" height="15" fill="rgb(244,214,29)" fg:x="915" fg:w="1"/><text x="72.5249%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="72.2749%" y="613" width="0.0790%" height="15" fill="rgb(220,75,29)" fg:x="915" fg:w="1"/><text x="72.5249%" y="623.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="72.3539%" y="629" width="0.0790%" height="15" fill="rgb(214,183,37)" fg:x="916" fg:w="1"/><text x="72.6039%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="72.3539%" y="613" width="0.0790%" height="15" fill="rgb(239,117,29)" fg:x="916" fg:w="1"/><text x="72.6039%" y="623.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="72.4329%" y="629" width="0.0790%" height="15" fill="rgb(237,171,35)" fg:x="917" fg:w="1"/><text x="72.6829%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="72.4329%" y="613" width="0.0790%" height="15" fill="rgb(229,178,53)" fg:x="917" fg:w="1"/><text x="72.6829%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="72.4329%" y="597" width="0.0790%" height="15" fill="rgb(210,102,19)" fg:x="917" fg:w="1"/><text x="72.6829%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.63%)</title><rect x="71.9589%" y="661" width="0.6319%" height="15" fill="rgb(235,127,22)" fg:x="911" fg:w="8"/><text x="72.2089%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.63%)</title><rect x="71.9589%" y="645" width="0.6319%" height="15" fill="rgb(244,31,31)" fg:x="911" fg:w="8"/><text x="72.2089%" y="655.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="72.5118%" y="629" width="0.0790%" height="15" fill="rgb(231,43,21)" fg:x="918" fg:w="1"/><text x="72.7618%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="72.5118%" y="613" width="0.0790%" height="15" fill="rgb(217,131,35)" fg:x="918" fg:w="1"/><text x="72.7618%" y="623.50"></text></g><g><title>&lt;plugins_core::moving::actions::DeactivateRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="72.5118%" y="597" width="0.0790%" height="15" fill="rgb(221,149,4)" fg:x="918" fg:w="1"/><text x="72.7618%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="72.5118%" y="581" width="0.0790%" height="15" fill="rgb(232,170,28)" fg:x="918" fg:w="1"/><text x="72.7618%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (21 samples, 1.66%)</title><rect x="71.0900%" y="677" width="1.6588%" height="15" fill="rgb(238,56,10)" fg:x="900" fg:w="21"/><text x="71.3400%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="72.5908%" y="661" width="0.1580%" height="15" fill="rgb(235,196,14)" fg:x="919" fg:w="2"/><text x="72.8408%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="72.5908%" y="645" width="0.1580%" height="15" fill="rgb(216,45,48)" fg:x="919" fg:w="2"/><text x="72.8408%" y="655.50"></text></g><g><title>engine::session::Session::initialize (22 samples, 1.74%)</title><rect x="71.0900%" y="693" width="1.7378%" height="15" fill="rgb(238,213,17)" fg:x="900" fg:w="22"/><text x="71.3400%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="72.7488%" y="677" width="0.0790%" height="15" fill="rgb(212,13,2)" fg:x="921" fg:w="1"/><text x="72.9988%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.7488%" y="661" width="0.0790%" height="15" fill="rgb(240,114,20)" fg:x="921" fg:w="1"/><text x="72.9988%" y="671.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (23 samples, 1.82%)</title><rect x="71.0900%" y="741" width="1.8167%" height="15" fill="rgb(228,41,40)" fg:x="900" fg:w="23"/><text x="71.3400%" y="751.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (23 samples, 1.82%)</title><rect x="71.0900%" y="725" width="1.8167%" height="15" fill="rgb(244,132,35)" fg:x="900" fg:w="23"/><text x="71.3400%" y="735.50">e..</text></g><g><title>engine::session::Session::new (23 samples, 1.82%)</title><rect x="71.0900%" y="709" width="1.8167%" height="15" fill="rgb(253,189,4)" fg:x="900" fg:w="23"/><text x="71.3400%" y="719.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="72.8278%" y="693" width="0.0790%" height="15" fill="rgb(224,37,19)" fg:x="922" fg:w="1"/><text x="73.0778%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.8278%" y="677" width="0.0790%" height="15" fill="rgb(235,223,18)" fg:x="922" fg:w="1"/><text x="73.0778%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.9068%" y="725" width="0.0790%" height="15" fill="rgb(235,163,25)" fg:x="923" fg:w="1"/><text x="73.1568%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.9068%" y="709" width="0.0790%" height="15" fill="rgb(217,145,28)" fg:x="923" fg:w="1"/><text x="73.1568%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="72.9858%" y="709" width="0.0790%" height="15" fill="rgb(223,223,32)" fg:x="924" fg:w="1"/><text x="73.2358%" y="719.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.0648%" y="677" width="0.0790%" height="15" fill="rgb(227,189,39)" fg:x="925" fg:w="1"/><text x="73.3148%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="73.0648%" y="661" width="0.0790%" height="15" fill="rgb(248,10,22)" fg:x="925" fg:w="1"/><text x="73.3148%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.1438%" y="581" width="0.0790%" height="15" fill="rgb(248,46,39)" fg:x="926" fg:w="1"/><text x="73.3938%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.1438%" y="565" width="0.0790%" height="15" fill="rgb(248,113,48)" fg:x="926" fg:w="1"/><text x="73.3938%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.1438%" y="549" width="0.0790%" height="15" fill="rgb(245,16,25)" fg:x="926" fg:w="1"/><text x="73.3938%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.1438%" y="629" width="0.1580%" height="15" fill="rgb(249,152,16)" fg:x="926" fg:w="2"/><text x="73.3938%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.1438%" y="613" width="0.1580%" height="15" fill="rgb(250,16,1)" fg:x="926" fg:w="2"/><text x="73.3938%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.1438%" y="597" width="0.1580%" height="15" fill="rgb(249,138,3)" fg:x="926" fg:w="2"/><text x="73.3938%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.2227%" y="581" width="0.0790%" height="15" fill="rgb(227,71,41)" fg:x="927" fg:w="1"/><text x="73.4727%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2227%" y="565" width="0.0790%" height="15" fill="rgb(209,184,23)" fg:x="927" fg:w="1"/><text x="73.4727%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="73.3017%" y="613" width="0.0790%" height="15" fill="rgb(223,215,31)" fg:x="928" fg:w="1"/><text x="73.5517%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.3017%" y="597" width="0.0790%" height="15" fill="rgb(210,146,28)" fg:x="928" fg:w="1"/><text x="73.5517%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.3807%" y="597" width="0.0790%" height="15" fill="rgb(209,183,41)" fg:x="929" fg:w="1"/><text x="73.6307%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="73.4597%" y="581" width="0.1580%" height="15" fill="rgb(209,224,45)" fg:x="930" fg:w="2"/><text x="73.7097%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.4597%" y="565" width="0.1580%" height="15" fill="rgb(224,209,51)" fg:x="930" fg:w="2"/><text x="73.7097%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.4597%" y="549" width="0.1580%" height="15" fill="rgb(223,17,39)" fg:x="930" fg:w="2"/><text x="73.7097%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.4597%" y="533" width="0.1580%" height="15" fill="rgb(234,204,37)" fg:x="930" fg:w="2"/><text x="73.7097%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.6177%" y="581" width="0.0790%" height="15" fill="rgb(236,120,5)" fg:x="932" fg:w="1"/><text x="73.8677%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.6177%" y="565" width="0.0790%" height="15" fill="rgb(248,97,27)" fg:x="932" fg:w="1"/><text x="73.8677%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.6177%" y="549" width="0.0790%" height="15" fill="rgb(240,66,17)" fg:x="932" fg:w="1"/><text x="73.8677%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.6177%" y="533" width="0.0790%" height="15" fill="rgb(210,79,3)" fg:x="932" fg:w="1"/><text x="73.8677%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.55%)</title><rect x="73.3017%" y="629" width="0.5529%" height="15" fill="rgb(214,176,27)" fg:x="928" fg:w="7"/><text x="73.5517%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="73.3807%" y="613" width="0.4739%" height="15" fill="rgb(235,185,3)" fg:x="929" fg:w="6"/><text x="73.6307%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="73.4597%" y="597" width="0.3949%" height="15" fill="rgb(227,24,12)" fg:x="930" fg:w="5"/><text x="73.7097%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.6967%" y="581" width="0.1580%" height="15" fill="rgb(252,169,48)" fg:x="933" fg:w="2"/><text x="73.9467%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.7757%" y="565" width="0.0790%" height="15" fill="rgb(212,65,1)" fg:x="934" fg:w="1"/><text x="74.0257%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.7757%" y="549" width="0.0790%" height="15" fill="rgb(242,39,24)" fg:x="934" fg:w="1"/><text x="74.0257%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.8547%" y="581" width="0.1580%" height="15" fill="rgb(249,32,23)" fg:x="935" fg:w="2"/><text x="74.1047%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9336%" y="565" width="0.0790%" height="15" fill="rgb(251,195,23)" fg:x="936" fg:w="1"/><text x="74.1836%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="74.0126%" y="581" width="0.1580%" height="15" fill="rgb(236,174,8)" fg:x="937" fg:w="2"/><text x="74.2626%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="74.0126%" y="565" width="0.1580%" height="15" fill="rgb(220,197,8)" fg:x="937" fg:w="2"/><text x="74.2626%" y="575.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.26%)</title><rect x="72.9858%" y="725" width="1.2638%" height="15" fill="rgb(240,108,37)" fg:x="924" fg:w="16"/><text x="73.2358%" y="735.50"></text></g><g><title>engine::session::state::State::close (15 samples, 1.18%)</title><rect x="73.0648%" y="709" width="1.1848%" height="15" fill="rgb(232,176,24)" fg:x="925" fg:w="15"/><text x="73.3148%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (15 samples, 1.18%)</title><rect x="73.0648%" y="693" width="1.1848%" height="15" fill="rgb(243,35,29)" fg:x="925" fg:w="15"/><text x="73.3148%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (14 samples, 1.11%)</title><rect x="73.1438%" y="677" width="1.1058%" height="15" fill="rgb(210,37,18)" fg:x="926" fg:w="14"/><text x="73.3938%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.11%)</title><rect x="73.1438%" y="661" width="1.1058%" height="15" fill="rgb(224,184,40)" fg:x="926" fg:w="14"/><text x="73.3938%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (14 samples, 1.11%)</title><rect x="73.1438%" y="645" width="1.1058%" height="15" fill="rgb(236,39,29)" fg:x="926" fg:w="14"/><text x="73.3938%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.39%)</title><rect x="73.8547%" y="629" width="0.3949%" height="15" fill="rgb(232,48,39)" fg:x="935" fg:w="5"/><text x="74.1047%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.39%)</title><rect x="73.8547%" y="613" width="0.3949%" height="15" fill="rgb(236,34,42)" fg:x="935" fg:w="5"/><text x="74.1047%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.39%)</title><rect x="73.8547%" y="597" width="0.3949%" height="15" fill="rgb(243,106,37)" fg:x="935" fg:w="5"/><text x="74.1047%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="74.1706%" y="581" width="0.0790%" height="15" fill="rgb(218,96,6)" fg:x="939" fg:w="1"/><text x="74.4206%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="74.1706%" y="565" width="0.0790%" height="15" fill="rgb(235,130,12)" fg:x="939" fg:w="1"/><text x="74.4206%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.1706%" y="549" width="0.0790%" height="15" fill="rgb(231,95,0)" fg:x="939" fg:w="1"/><text x="74.4206%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.1706%" y="533" width="0.0790%" height="15" fill="rgb(228,12,23)" fg:x="939" fg:w="1"/><text x="74.4206%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.1706%" y="517" width="0.0790%" height="15" fill="rgb(216,12,1)" fg:x="939" fg:w="1"/><text x="74.4206%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.1706%" y="501" width="0.0790%" height="15" fill="rgb(219,59,3)" fg:x="939" fg:w="1"/><text x="74.4206%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.1706%" y="485" width="0.0790%" height="15" fill="rgb(215,208,46)" fg:x="939" fg:w="1"/><text x="74.4206%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2496%" y="677" width="0.0790%" height="15" fill="rgb(254,224,29)" fg:x="940" fg:w="1"/><text x="74.4996%" y="687.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="74.2496%" y="725" width="0.1580%" height="15" fill="rgb(232,14,29)" fg:x="940" fg:w="2"/><text x="74.4996%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="74.2496%" y="709" width="0.1580%" height="15" fill="rgb(208,45,52)" fg:x="940" fg:w="2"/><text x="74.4996%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="74.2496%" y="693" width="0.1580%" height="15" fill="rgb(234,191,28)" fg:x="940" fg:w="2"/><text x="74.4996%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3286%" y="677" width="0.0790%" height="15" fill="rgb(244,67,43)" fg:x="941" fg:w="1"/><text x="74.5786%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3286%" y="661" width="0.0790%" height="15" fill="rgb(236,189,24)" fg:x="941" fg:w="1"/><text x="74.5786%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.3286%" y="645" width="0.0790%" height="15" fill="rgb(239,214,33)" fg:x="941" fg:w="1"/><text x="74.5786%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3286%" y="629" width="0.0790%" height="15" fill="rgb(226,176,41)" fg:x="941" fg:w="1"/><text x="74.5786%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.3286%" y="613" width="0.0790%" height="15" fill="rgb(248,47,8)" fg:x="941" fg:w="1"/><text x="74.5786%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="74.4076%" y="693" width="0.0790%" height="15" fill="rgb(218,81,44)" fg:x="942" fg:w="1"/><text x="74.6576%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.4076%" y="677" width="0.0790%" height="15" fill="rgb(213,98,6)" fg:x="942" fg:w="1"/><text x="74.6576%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="74.4076%" y="661" width="0.0790%" height="15" fill="rgb(222,85,22)" fg:x="942" fg:w="1"/><text x="74.6576%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.4076%" y="645" width="0.0790%" height="15" fill="rgb(239,46,39)" fg:x="942" fg:w="1"/><text x="74.6576%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="74.4076%" y="629" width="0.0790%" height="15" fill="rgb(237,12,29)" fg:x="942" fg:w="1"/><text x="74.6576%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="74.4076%" y="709" width="0.1580%" height="15" fill="rgb(214,77,8)" fg:x="942" fg:w="2"/><text x="74.6576%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.4866%" y="693" width="0.0790%" height="15" fill="rgb(217,168,37)" fg:x="943" fg:w="1"/><text x="74.7366%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="74.4866%" y="677" width="0.0790%" height="15" fill="rgb(221,217,23)" fg:x="943" fg:w="1"/><text x="74.7366%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4866%" y="661" width="0.0790%" height="15" fill="rgb(243,229,36)" fg:x="943" fg:w="1"/><text x="74.7366%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.4866%" y="645" width="0.0790%" height="15" fill="rgb(251,163,40)" fg:x="943" fg:w="1"/><text x="74.7366%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="74.4076%" y="725" width="0.2370%" height="15" fill="rgb(237,222,12)" fg:x="942" fg:w="3"/><text x="74.6576%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.5656%" y="709" width="0.0790%" height="15" fill="rgb(248,132,6)" fg:x="944" fg:w="1"/><text x="74.8156%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="74.5656%" y="693" width="0.0790%" height="15" fill="rgb(227,167,50)" fg:x="944" fg:w="1"/><text x="74.8156%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5656%" y="677" width="0.0790%" height="15" fill="rgb(242,84,37)" fg:x="944" fg:w="1"/><text x="74.8156%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.6445%" y="709" width="0.0790%" height="15" fill="rgb(212,4,50)" fg:x="945" fg:w="1"/><text x="74.8945%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.6445%" y="693" width="0.0790%" height="15" fill="rgb(230,228,32)" fg:x="945" fg:w="1"/><text x="74.8945%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.6445%" y="677" width="0.0790%" height="15" fill="rgb(248,217,23)" fg:x="945" fg:w="1"/><text x="74.8945%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6445%" y="661" width="0.0790%" height="15" fill="rgb(238,197,32)" fg:x="945" fg:w="1"/><text x="74.8945%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="74.7235%" y="709" width="0.0790%" height="15" fill="rgb(236,106,1)" fg:x="946" fg:w="1"/><text x="74.9735%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.7235%" y="693" width="0.0790%" height="15" fill="rgb(219,228,13)" fg:x="946" fg:w="1"/><text x="74.9735%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="74.7235%" y="677" width="0.0790%" height="15" fill="rgb(238,30,35)" fg:x="946" fg:w="1"/><text x="74.9735%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="74.7235%" y="661" width="0.0790%" height="15" fill="rgb(236,70,23)" fg:x="946" fg:w="1"/><text x="74.9735%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="74.7235%" y="645" width="0.0790%" height="15" fill="rgb(249,104,48)" fg:x="946" fg:w="1"/><text x="74.9735%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.7235%" y="629" width="0.0790%" height="15" fill="rgb(254,117,50)" fg:x="946" fg:w="1"/><text x="74.9735%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.7235%" y="613" width="0.0790%" height="15" fill="rgb(223,152,4)" fg:x="946" fg:w="1"/><text x="74.9735%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.7235%" y="597" width="0.0790%" height="15" fill="rgb(245,6,2)" fg:x="946" fg:w="1"/><text x="74.9735%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.8025%" y="645" width="0.0790%" height="15" fill="rgb(249,150,24)" fg:x="947" fg:w="1"/><text x="75.0525%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="74.8025%" y="629" width="0.0790%" height="15" fill="rgb(228,185,42)" fg:x="947" fg:w="1"/><text x="75.0525%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="74.8025%" y="613" width="0.0790%" height="15" fill="rgb(226,39,33)" fg:x="947" fg:w="1"/><text x="75.0525%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.8815%" y="597" width="0.0790%" height="15" fill="rgb(221,166,19)" fg:x="948" fg:w="1"/><text x="75.1315%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.8815%" y="581" width="0.0790%" height="15" fill="rgb(209,109,2)" fg:x="948" fg:w="1"/><text x="75.1315%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.8815%" y="565" width="0.0790%" height="15" fill="rgb(252,216,26)" fg:x="948" fg:w="1"/><text x="75.1315%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="74.9605%" y="549" width="0.1580%" height="15" fill="rgb(227,173,36)" fg:x="949" fg:w="2"/><text x="75.2105%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.9605%" y="533" width="0.1580%" height="15" fill="rgb(209,90,7)" fg:x="949" fg:w="2"/><text x="75.2105%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0395%" y="517" width="0.0790%" height="15" fill="rgb(250,194,11)" fg:x="950" fg:w="1"/><text x="75.2895%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.1185%" y="549" width="0.0790%" height="15" fill="rgb(220,72,50)" fg:x="951" fg:w="1"/><text x="75.3685%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.1185%" y="533" width="0.0790%" height="15" fill="rgb(222,106,48)" fg:x="951" fg:w="1"/><text x="75.3685%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.39%)</title><rect x="74.9605%" y="597" width="0.3949%" height="15" fill="rgb(216,220,45)" fg:x="949" fg:w="5"/><text x="75.2105%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="74.9605%" y="581" width="0.3949%" height="15" fill="rgb(234,112,18)" fg:x="949" fg:w="5"/><text x="75.2105%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="74.9605%" y="565" width="0.3949%" height="15" fill="rgb(206,179,9)" fg:x="949" fg:w="5"/><text x="75.2105%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.1975%" y="549" width="0.1580%" height="15" fill="rgb(215,115,40)" fg:x="952" fg:w="2"/><text x="75.4475%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="75.1975%" y="533" width="0.1580%" height="15" fill="rgb(222,69,34)" fg:x="952" fg:w="2"/><text x="75.4475%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4344%" y="549" width="0.0790%" height="15" fill="rgb(209,161,10)" fg:x="955" fg:w="1"/><text x="75.6844%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.5134%" y="501" width="0.0790%" height="15" fill="rgb(217,6,38)" fg:x="956" fg:w="1"/><text x="75.7634%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5134%" y="485" width="0.0790%" height="15" fill="rgb(229,229,48)" fg:x="956" fg:w="1"/><text x="75.7634%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.5134%" y="469" width="0.0790%" height="15" fill="rgb(225,21,28)" fg:x="956" fg:w="1"/><text x="75.7634%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5134%" y="453" width="0.0790%" height="15" fill="rgb(206,33,13)" fg:x="956" fg:w="1"/><text x="75.7634%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="75.5134%" y="533" width="0.1580%" height="15" fill="rgb(242,178,17)" fg:x="956" fg:w="2"/><text x="75.7634%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.5134%" y="517" width="0.1580%" height="15" fill="rgb(220,162,5)" fg:x="956" fg:w="2"/><text x="75.7634%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5924%" y="501" width="0.0790%" height="15" fill="rgb(210,33,43)" fg:x="957" fg:w="1"/><text x="75.8424%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5924%" y="485" width="0.0790%" height="15" fill="rgb(216,116,54)" fg:x="957" fg:w="1"/><text x="75.8424%" y="495.50"></text></g><g><title>engine::session::Session::flush (12 samples, 0.95%)</title><rect x="74.8025%" y="709" width="0.9479%" height="15" fill="rgb(249,92,24)" fg:x="947" fg:w="12"/><text x="75.0525%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (12 samples, 0.95%)</title><rect x="74.8025%" y="693" width="0.9479%" height="15" fill="rgb(231,189,14)" fg:x="947" fg:w="12"/><text x="75.0525%" y="703.50"></text></g><g><title>engine::session::state::State::close (12 samples, 0.95%)</title><rect x="74.8025%" y="677" width="0.9479%" height="15" fill="rgb(230,8,41)" fg:x="947" fg:w="12"/><text x="75.0525%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (12 samples, 0.95%)</title><rect x="74.8025%" y="661" width="0.9479%" height="15" fill="rgb(249,7,27)" fg:x="947" fg:w="12"/><text x="75.0525%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.87%)</title><rect x="74.8815%" y="645" width="0.8689%" height="15" fill="rgb(232,86,5)" fg:x="948" fg:w="11"/><text x="75.1315%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.87%)</title><rect x="74.8815%" y="629" width="0.8689%" height="15" fill="rgb(224,175,18)" fg:x="948" fg:w="11"/><text x="75.1315%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (11 samples, 0.87%)</title><rect x="74.8815%" y="613" width="0.8689%" height="15" fill="rgb(220,129,12)" fg:x="948" fg:w="11"/><text x="75.1315%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.39%)</title><rect x="75.3555%" y="597" width="0.3949%" height="15" fill="rgb(210,19,36)" fg:x="954" fg:w="5"/><text x="75.6055%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.39%)</title><rect x="75.3555%" y="581" width="0.3949%" height="15" fill="rgb(219,96,14)" fg:x="954" fg:w="5"/><text x="75.6055%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.39%)</title><rect x="75.3555%" y="565" width="0.3949%" height="15" fill="rgb(249,106,1)" fg:x="954" fg:w="5"/><text x="75.6055%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="75.5134%" y="549" width="0.2370%" height="15" fill="rgb(249,155,20)" fg:x="956" fg:w="3"/><text x="75.7634%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.6714%" y="533" width="0.0790%" height="15" fill="rgb(244,168,9)" fg:x="958" fg:w="1"/><text x="75.9214%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.6714%" y="517" width="0.0790%" height="15" fill="rgb(216,23,50)" fg:x="958" fg:w="1"/><text x="75.9214%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7504%" y="549" width="0.0790%" height="15" fill="rgb(224,219,20)" fg:x="959" fg:w="1"/><text x="76.0004%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7504%" y="533" width="0.0790%" height="15" fill="rgb(222,156,15)" fg:x="959" fg:w="1"/><text x="76.0004%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="75.7504%" y="661" width="0.1580%" height="15" fill="rgb(231,97,17)" fg:x="959" fg:w="2"/><text x="76.0004%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="75.7504%" y="645" width="0.1580%" height="15" fill="rgb(218,70,48)" fg:x="959" fg:w="2"/><text x="76.0004%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="75.7504%" y="629" width="0.1580%" height="15" fill="rgb(212,196,52)" fg:x="959" fg:w="2"/><text x="76.0004%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="75.7504%" y="613" width="0.1580%" height="15" fill="rgb(243,203,18)" fg:x="959" fg:w="2"/><text x="76.0004%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="75.7504%" y="597" width="0.1580%" height="15" fill="rgb(252,125,41)" fg:x="959" fg:w="2"/><text x="76.0004%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="75.7504%" y="581" width="0.1580%" height="15" fill="rgb(223,180,33)" fg:x="959" fg:w="2"/><text x="76.0004%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.7504%" y="565" width="0.1580%" height="15" fill="rgb(254,159,46)" fg:x="959" fg:w="2"/><text x="76.0004%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8294%" y="549" width="0.0790%" height="15" fill="rgb(254,38,10)" fg:x="960" fg:w="1"/><text x="76.0794%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="75.7504%" y="709" width="0.2370%" height="15" fill="rgb(208,217,32)" fg:x="959" fg:w="3"/><text x="76.0004%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="75.7504%" y="693" width="0.2370%" height="15" fill="rgb(221,120,13)" fg:x="959" fg:w="3"/><text x="76.0004%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="75.7504%" y="677" width="0.2370%" height="15" fill="rgb(246,54,52)" fg:x="959" fg:w="3"/><text x="76.0004%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="75.9084%" y="661" width="0.0790%" height="15" fill="rgb(242,34,25)" fg:x="961" fg:w="1"/><text x="76.1584%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.9084%" y="645" width="0.0790%" height="15" fill="rgb(247,209,9)" fg:x="961" fg:w="1"/><text x="76.1584%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.9084%" y="629" width="0.0790%" height="15" fill="rgb(228,71,26)" fg:x="961" fg:w="1"/><text x="76.1584%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="75.9084%" y="613" width="0.0790%" height="15" fill="rgb(222,145,49)" fg:x="961" fg:w="1"/><text x="76.1584%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.9084%" y="597" width="0.0790%" height="15" fill="rgb(218,121,17)" fg:x="961" fg:w="1"/><text x="76.1584%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.9084%" y="581" width="0.0790%" height="15" fill="rgb(244,50,7)" fg:x="961" fg:w="1"/><text x="76.1584%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="76.0664%" y="677" width="0.0790%" height="15" fill="rgb(246,229,37)" fg:x="963" fg:w="1"/><text x="76.3164%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="76.0664%" y="661" width="0.0790%" height="15" fill="rgb(225,18,5)" fg:x="963" fg:w="1"/><text x="76.3164%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.0664%" y="645" width="0.0790%" height="15" fill="rgb(213,204,8)" fg:x="963" fg:w="1"/><text x="76.3164%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="76.0664%" y="629" width="0.0790%" height="15" fill="rgb(238,103,6)" fg:x="963" fg:w="1"/><text x="76.3164%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0664%" y="613" width="0.0790%" height="15" fill="rgb(222,25,35)" fg:x="963" fg:w="1"/><text x="76.3164%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0664%" y="597" width="0.0790%" height="15" fill="rgb(213,203,35)" fg:x="963" fg:w="1"/><text x="76.3164%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1453%" y="661" width="0.0790%" height="15" fill="rgb(221,79,53)" fg:x="964" fg:w="1"/><text x="76.3953%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.1453%" y="645" width="0.0790%" height="15" fill="rgb(243,200,35)" fg:x="964" fg:w="1"/><text x="76.3953%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.1453%" y="629" width="0.0790%" height="15" fill="rgb(248,60,25)" fg:x="964" fg:w="1"/><text x="76.3953%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1453%" y="613" width="0.0790%" height="15" fill="rgb(227,53,46)" fg:x="964" fg:w="1"/><text x="76.3953%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.1453%" y="597" width="0.0790%" height="15" fill="rgb(216,120,32)" fg:x="964" fg:w="1"/><text x="76.3953%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1453%" y="581" width="0.0790%" height="15" fill="rgb(220,134,1)" fg:x="964" fg:w="1"/><text x="76.3953%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.32%)</title><rect x="75.9874%" y="709" width="0.3160%" height="15" fill="rgb(237,168,5)" fg:x="962" fg:w="4"/><text x="76.2374%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="76.0664%" y="693" width="0.2370%" height="15" fill="rgb(231,100,33)" fg:x="963" fg:w="3"/><text x="76.3164%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="76.1453%" y="677" width="0.1580%" height="15" fill="rgb(236,177,47)" fg:x="964" fg:w="2"/><text x="76.3953%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2243%" y="661" width="0.0790%" height="15" fill="rgb(235,7,49)" fg:x="965" fg:w="1"/><text x="76.4743%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.2243%" y="645" width="0.0790%" height="15" fill="rgb(232,119,22)" fg:x="965" fg:w="1"/><text x="76.4743%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2243%" y="629" width="0.0790%" height="15" fill="rgb(254,73,53)" fg:x="965" fg:w="1"/><text x="76.4743%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.2243%" y="613" width="0.0790%" height="15" fill="rgb(251,35,20)" fg:x="965" fg:w="1"/><text x="76.4743%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2243%" y="597" width="0.0790%" height="15" fill="rgb(241,119,20)" fg:x="965" fg:w="1"/><text x="76.4743%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2243%" y="581" width="0.0790%" height="15" fill="rgb(207,102,14)" fg:x="965" fg:w="1"/><text x="76.4743%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="76.2243%" y="565" width="0.0790%" height="15" fill="rgb(248,201,50)" fg:x="965" fg:w="1"/><text x="76.4743%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="76.3033%" y="645" width="0.0790%" height="15" fill="rgb(222,185,44)" fg:x="966" fg:w="1"/><text x="76.5533%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="76.3033%" y="629" width="0.0790%" height="15" fill="rgb(218,107,18)" fg:x="966" fg:w="1"/><text x="76.5533%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="76.3033%" y="613" width="0.0790%" height="15" fill="rgb(237,177,39)" fg:x="966" fg:w="1"/><text x="76.5533%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.3033%" y="597" width="0.0790%" height="15" fill="rgb(246,69,6)" fg:x="966" fg:w="1"/><text x="76.5533%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3033%" y="581" width="0.0790%" height="15" fill="rgb(234,208,37)" fg:x="966" fg:w="1"/><text x="76.5533%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="76.3033%" y="709" width="0.1580%" height="15" fill="rgb(225,4,6)" fg:x="966" fg:w="2"/><text x="76.5533%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="76.3033%" y="693" width="0.1580%" height="15" fill="rgb(233,45,0)" fg:x="966" fg:w="2"/><text x="76.5533%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.3033%" y="677" width="0.1580%" height="15" fill="rgb(226,136,5)" fg:x="966" fg:w="2"/><text x="76.5533%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.3033%" y="661" width="0.1580%" height="15" fill="rgb(211,91,47)" fg:x="966" fg:w="2"/><text x="76.5533%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.3823%" y="645" width="0.0790%" height="15" fill="rgb(242,88,51)" fg:x="967" fg:w="1"/><text x="76.6323%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3823%" y="629" width="0.0790%" height="15" fill="rgb(230,91,28)" fg:x="967" fg:w="1"/><text x="76.6323%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="76.3823%" y="613" width="0.0790%" height="15" fill="rgb(254,186,29)" fg:x="967" fg:w="1"/><text x="76.6323%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="76.3823%" y="597" width="0.0790%" height="15" fill="rgb(238,6,4)" fg:x="967" fg:w="1"/><text x="76.6323%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="76.4613%" y="693" width="0.0790%" height="15" fill="rgb(221,151,16)" fg:x="968" fg:w="1"/><text x="76.7113%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="76.4613%" y="677" width="0.0790%" height="15" fill="rgb(251,143,52)" fg:x="968" fg:w="1"/><text x="76.7113%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.4613%" y="661" width="0.0790%" height="15" fill="rgb(206,90,15)" fg:x="968" fg:w="1"/><text x="76.7113%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="76.4613%" y="645" width="0.0790%" height="15" fill="rgb(218,35,8)" fg:x="968" fg:w="1"/><text x="76.7113%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.4613%" y="629" width="0.0790%" height="15" fill="rgb(239,215,6)" fg:x="968" fg:w="1"/><text x="76.7113%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4613%" y="613" width="0.0790%" height="15" fill="rgb(245,116,39)" fg:x="968" fg:w="1"/><text x="76.7113%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.4613%" y="597" width="0.0790%" height="15" fill="rgb(242,65,28)" fg:x="968" fg:w="1"/><text x="76.7113%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4613%" y="581" width="0.0790%" height="15" fill="rgb(252,132,53)" fg:x="968" fg:w="1"/><text x="76.7113%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.4613%" y="565" width="0.0790%" height="15" fill="rgb(224,159,50)" fg:x="968" fg:w="1"/><text x="76.7113%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4613%" y="549" width="0.0790%" height="15" fill="rgb(224,93,4)" fg:x="968" fg:w="1"/><text x="76.7113%" y="559.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="76.4613%" y="533" width="0.0790%" height="15" fill="rgb(208,81,34)" fg:x="968" fg:w="1"/><text x="76.7113%" y="543.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.5403%" y="645" width="0.0790%" height="15" fill="rgb(233,92,54)" fg:x="969" fg:w="1"/><text x="76.7903%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="76.5403%" y="629" width="0.0790%" height="15" fill="rgb(237,21,14)" fg:x="969" fg:w="1"/><text x="76.7903%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.5403%" y="613" width="0.0790%" height="15" fill="rgb(249,128,51)" fg:x="969" fg:w="1"/><text x="76.7903%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.5403%" y="597" width="0.0790%" height="15" fill="rgb(223,129,24)" fg:x="969" fg:w="1"/><text x="76.7903%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.5403%" y="581" width="0.0790%" height="15" fill="rgb(231,168,25)" fg:x="969" fg:w="1"/><text x="76.7903%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.5403%" y="565" width="0.0790%" height="15" fill="rgb(224,39,20)" fg:x="969" fg:w="1"/><text x="76.7903%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.5403%" y="549" width="0.0790%" height="15" fill="rgb(225,152,53)" fg:x="969" fg:w="1"/><text x="76.7903%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.5403%" y="533" width="0.0790%" height="15" fill="rgb(252,17,24)" fg:x="969" fg:w="1"/><text x="76.7903%" y="543.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="76.5403%" y="693" width="0.1580%" height="15" fill="rgb(250,114,30)" fg:x="969" fg:w="2"/><text x="76.7903%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="76.5403%" y="677" width="0.1580%" height="15" fill="rgb(229,5,4)" fg:x="969" fg:w="2"/><text x="76.7903%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="76.5403%" y="661" width="0.1580%" height="15" fill="rgb(225,176,49)" fg:x="969" fg:w="2"/><text x="76.7903%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.6193%" y="645" width="0.0790%" height="15" fill="rgb(224,221,49)" fg:x="970" fg:w="1"/><text x="76.8693%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="76.6193%" y="629" width="0.0790%" height="15" fill="rgb(253,169,27)" fg:x="970" fg:w="1"/><text x="76.8693%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.6193%" y="613" width="0.0790%" height="15" fill="rgb(211,206,16)" fg:x="970" fg:w="1"/><text x="76.8693%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.6193%" y="597" width="0.0790%" height="15" fill="rgb(244,87,35)" fg:x="970" fg:w="1"/><text x="76.8693%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.6193%" y="581" width="0.0790%" height="15" fill="rgb(246,28,10)" fg:x="970" fg:w="1"/><text x="76.8693%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.6193%" y="565" width="0.0790%" height="15" fill="rgb(229,12,44)" fg:x="970" fg:w="1"/><text x="76.8693%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.6193%" y="549" width="0.0790%" height="15" fill="rgb(210,145,37)" fg:x="970" fg:w="1"/><text x="76.8693%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.6193%" y="533" width="0.0790%" height="15" fill="rgb(227,112,52)" fg:x="970" fg:w="1"/><text x="76.8693%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (28 samples, 2.21%)</title><rect x="74.6445%" y="725" width="2.2117%" height="15" fill="rgb(238,155,34)" fg:x="945" fg:w="28"/><text x="74.8945%" y="735.50">p..</text></g><g><title>plugins_core::tools::set_container (5 samples, 0.39%)</title><rect x="76.4613%" y="709" width="0.3949%" height="15" fill="rgb(239,226,36)" fg:x="968" fg:w="5"/><text x="76.7113%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="76.6983%" y="693" width="0.1580%" height="15" fill="rgb(230,16,23)" fg:x="971" fg:w="2"/><text x="76.9483%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="76.7773%" y="677" width="0.0790%" height="15" fill="rgb(236,171,36)" fg:x="972" fg:w="1"/><text x="77.0273%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7773%" y="661" width="0.0790%" height="15" fill="rgb(221,22,14)" fg:x="972" fg:w="1"/><text x="77.0273%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.7773%" y="645" width="0.0790%" height="15" fill="rgb(242,43,11)" fg:x="972" fg:w="1"/><text x="77.0273%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7773%" y="629" width="0.0790%" height="15" fill="rgb(232,69,23)" fg:x="972" fg:w="1"/><text x="77.0273%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.7773%" y="613" width="0.0790%" height="15" fill="rgb(216,180,54)" fg:x="972" fg:w="1"/><text x="77.0273%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7773%" y="597" width="0.0790%" height="15" fill="rgb(216,5,24)" fg:x="972" fg:w="1"/><text x="77.0273%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7773%" y="581" width="0.0790%" height="15" fill="rgb(225,89,9)" fg:x="972" fg:w="1"/><text x="77.0273%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="76.7773%" y="565" width="0.0790%" height="15" fill="rgb(243,75,33)" fg:x="972" fg:w="1"/><text x="77.0273%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (1 samples, 0.08%)</title><rect x="76.8562%" y="725" width="0.0790%" height="15" fill="rgb(247,141,45)" fg:x="973" fg:w="1"/><text x="77.1062%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="76.9352%" y="693" width="0.0790%" height="15" fill="rgb(232,177,36)" fg:x="974" fg:w="1"/><text x="77.1852%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9352%" y="677" width="0.0790%" height="15" fill="rgb(219,125,36)" fg:x="974" fg:w="1"/><text x="77.1852%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.9352%" y="661" width="0.0790%" height="15" fill="rgb(227,94,9)" fg:x="974" fg:w="1"/><text x="77.1852%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.9352%" y="645" width="0.0790%" height="15" fill="rgb(240,34,52)" fg:x="974" fg:w="1"/><text x="77.1852%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9352%" y="629" width="0.0790%" height="15" fill="rgb(216,45,12)" fg:x="974" fg:w="1"/><text x="77.1852%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.9352%" y="613" width="0.0790%" height="15" fill="rgb(246,21,19)" fg:x="974" fg:w="1"/><text x="77.1852%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.9352%" y="597" width="0.0790%" height="15" fill="rgb(213,98,42)" fg:x="974" fg:w="1"/><text x="77.1852%" y="607.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="77.0142%" y="693" width="0.0790%" height="15" fill="rgb(250,136,47)" fg:x="975" fg:w="1"/><text x="77.2642%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="77.0142%" y="677" width="0.0790%" height="15" fill="rgb(251,124,27)" fg:x="975" fg:w="1"/><text x="77.2642%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="77.0142%" y="661" width="0.0790%" height="15" fill="rgb(229,180,14)" fg:x="975" fg:w="1"/><text x="77.2642%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="77.0142%" y="645" width="0.0790%" height="15" fill="rgb(245,216,25)" fg:x="975" fg:w="1"/><text x="77.2642%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="77.0142%" y="629" width="0.0790%" height="15" fill="rgb(251,43,5)" fg:x="975" fg:w="1"/><text x="77.2642%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="77.0142%" y="613" width="0.0790%" height="15" fill="rgb(250,128,24)" fg:x="975" fg:w="1"/><text x="77.2642%" y="623.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.08%)</title><rect x="77.0142%" y="597" width="0.0790%" height="15" fill="rgb(217,117,27)" fg:x="975" fg:w="1"/><text x="77.2642%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="77.0932%" y="693" width="0.1580%" height="15" fill="rgb(245,147,4)" fg:x="976" fg:w="2"/><text x="77.3432%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="77.0932%" y="677" width="0.1580%" height="15" fill="rgb(242,201,35)" fg:x="976" fg:w="2"/><text x="77.3432%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.1722%" y="661" width="0.0790%" height="15" fill="rgb(218,181,1)" fg:x="977" fg:w="1"/><text x="77.4222%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.1722%" y="645" width="0.0790%" height="15" fill="rgb(222,6,29)" fg:x="977" fg:w="1"/><text x="77.4222%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.1722%" y="629" width="0.0790%" height="15" fill="rgb(208,186,3)" fg:x="977" fg:w="1"/><text x="77.4222%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.1722%" y="613" width="0.0790%" height="15" fill="rgb(216,36,26)" fg:x="977" fg:w="1"/><text x="77.4222%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.1722%" y="597" width="0.0790%" height="15" fill="rgb(248,201,23)" fg:x="977" fg:w="1"/><text x="77.4222%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.1722%" y="581" width="0.0790%" height="15" fill="rgb(251,170,31)" fg:x="977" fg:w="1"/><text x="77.4222%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.1722%" y="565" width="0.0790%" height="15" fill="rgb(207,110,25)" fg:x="977" fg:w="1"/><text x="77.4222%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.1722%" y="549" width="0.0790%" height="15" fill="rgb(250,54,15)" fg:x="977" fg:w="1"/><text x="77.4222%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.1722%" y="533" width="0.0790%" height="15" fill="rgb(227,68,33)" fg:x="977" fg:w="1"/><text x="77.4222%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.1722%" y="517" width="0.0790%" height="15" fill="rgb(238,34,41)" fg:x="977" fg:w="1"/><text x="77.4222%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.1722%" y="501" width="0.0790%" height="15" fill="rgb(220,11,15)" fg:x="977" fg:w="1"/><text x="77.4222%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.1722%" y="485" width="0.0790%" height="15" fill="rgb(246,111,35)" fg:x="977" fg:w="1"/><text x="77.4222%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.1722%" y="469" width="0.0790%" height="15" fill="rgb(209,88,53)" fg:x="977" fg:w="1"/><text x="77.4222%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.1722%" y="453" width="0.0790%" height="15" fill="rgb(231,185,47)" fg:x="977" fg:w="1"/><text x="77.4222%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1722%" y="437" width="0.0790%" height="15" fill="rgb(233,154,1)" fg:x="977" fg:w="1"/><text x="77.4222%" y="447.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.39%)</title><rect x="76.9352%" y="725" width="0.3949%" height="15" fill="rgb(225,15,46)" fg:x="974" fg:w="5"/><text x="77.1852%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.39%)</title><rect x="76.9352%" y="709" width="0.3949%" height="15" fill="rgb(211,135,41)" fg:x="974" fg:w="5"/><text x="77.1852%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="77.2512%" y="693" width="0.0790%" height="15" fill="rgb(208,54,0)" fg:x="978" fg:w="1"/><text x="77.5012%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.2512%" y="677" width="0.0790%" height="15" fill="rgb(244,136,14)" fg:x="978" fg:w="1"/><text x="77.5012%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="77.2512%" y="661" width="0.0790%" height="15" fill="rgb(241,56,14)" fg:x="978" fg:w="1"/><text x="77.5012%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.2512%" y="645" width="0.0790%" height="15" fill="rgb(205,80,24)" fg:x="978" fg:w="1"/><text x="77.5012%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="77.3302%" y="677" width="0.0790%" height="15" fill="rgb(220,57,4)" fg:x="979" fg:w="1"/><text x="77.5802%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.3302%" y="661" width="0.0790%" height="15" fill="rgb(226,193,50)" fg:x="979" fg:w="1"/><text x="77.5802%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.3302%" y="645" width="0.0790%" height="15" fill="rgb(231,168,22)" fg:x="979" fg:w="1"/><text x="77.5802%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.3302%" y="629" width="0.0790%" height="15" fill="rgb(254,215,14)" fg:x="979" fg:w="1"/><text x="77.5802%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.3302%" y="613" width="0.0790%" height="15" fill="rgb(211,115,16)" fg:x="979" fg:w="1"/><text x="77.5802%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.3302%" y="597" width="0.0790%" height="15" fill="rgb(236,210,16)" fg:x="979" fg:w="1"/><text x="77.5802%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.3302%" y="581" width="0.0790%" height="15" fill="rgb(221,94,12)" fg:x="979" fg:w="1"/><text x="77.5802%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="77.3302%" y="693" width="0.1580%" height="15" fill="rgb(235,218,49)" fg:x="979" fg:w="2"/><text x="77.5802%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="77.4092%" y="677" width="0.0790%" height="15" fill="rgb(217,114,14)" fg:x="980" fg:w="1"/><text x="77.6592%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4092%" y="661" width="0.0790%" height="15" fill="rgb(216,145,22)" fg:x="980" fg:w="1"/><text x="77.6592%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.4092%" y="645" width="0.0790%" height="15" fill="rgb(217,112,39)" fg:x="980" fg:w="1"/><text x="77.6592%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="77.4092%" y="629" width="0.0790%" height="15" fill="rgb(225,85,32)" fg:x="980" fg:w="1"/><text x="77.6592%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.4092%" y="613" width="0.0790%" height="15" fill="rgb(245,209,47)" fg:x="980" fg:w="1"/><text x="77.6592%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4092%" y="597" width="0.0790%" height="15" fill="rgb(218,220,15)" fg:x="980" fg:w="1"/><text x="77.6592%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (59 samples, 4.66%)</title><rect x="72.9068%" y="741" width="4.6603%" height="15" fill="rgb(222,202,31)" fg:x="923" fg:w="59"/><text x="73.1568%" y="751.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="77.3302%" y="725" width="0.2370%" height="15" fill="rgb(243,203,4)" fg:x="979" fg:w="3"/><text x="77.5802%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="77.3302%" y="709" width="0.2370%" height="15" fill="rgb(237,92,17)" fg:x="979" fg:w="3"/><text x="77.5802%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="77.4882%" y="693" width="0.0790%" height="15" fill="rgb(231,119,7)" fg:x="981" fg:w="1"/><text x="77.7382%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.4882%" y="677" width="0.0790%" height="15" fill="rgb(237,82,41)" fg:x="981" fg:w="1"/><text x="77.7382%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.4882%" y="661" width="0.0790%" height="15" fill="rgb(226,81,48)" fg:x="981" fg:w="1"/><text x="77.7382%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.4882%" y="645" width="0.0790%" height="15" fill="rgb(234,70,51)" fg:x="981" fg:w="1"/><text x="77.7382%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.4882%" y="629" width="0.0790%" height="15" fill="rgb(251,86,4)" fg:x="981" fg:w="1"/><text x="77.7382%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.4882%" y="613" width="0.0790%" height="15" fill="rgb(244,144,28)" fg:x="981" fg:w="1"/><text x="77.7382%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.5671%" y="725" width="0.0790%" height="15" fill="rgb(232,161,39)" fg:x="982" fg:w="1"/><text x="77.8171%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (2 samples, 0.16%)</title><rect x="77.5671%" y="741" width="0.1580%" height="15" fill="rgb(247,34,51)" fg:x="982" fg:w="2"/><text x="77.8171%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="77.6461%" y="725" width="0.0790%" height="15" fill="rgb(225,132,2)" fg:x="983" fg:w="1"/><text x="77.8961%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.6461%" y="709" width="0.0790%" height="15" fill="rgb(209,159,44)" fg:x="983" fg:w="1"/><text x="77.8961%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (2 samples, 0.16%)</title><rect x="77.7251%" y="741" width="0.1580%" height="15" fill="rgb(251,214,1)" fg:x="984" fg:w="2"/><text x="77.9751%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="77.7251%" y="725" width="0.1580%" height="15" fill="rgb(247,84,47)" fg:x="984" fg:w="2"/><text x="77.9751%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.7251%" y="709" width="0.1580%" height="15" fill="rgb(240,111,43)" fg:x="984" fg:w="2"/><text x="77.9751%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="77.7251%" y="693" width="0.1580%" height="15" fill="rgb(215,214,35)" fg:x="984" fg:w="2"/><text x="77.9751%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="77.7251%" y="677" width="0.1580%" height="15" fill="rgb(248,207,23)" fg:x="984" fg:w="2"/><text x="77.9751%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.8041%" y="661" width="0.0790%" height="15" fill="rgb(214,186,4)" fg:x="985" fg:w="1"/><text x="78.0541%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.8831%" y="709" width="0.0790%" height="15" fill="rgb(220,133,22)" fg:x="986" fg:w="1"/><text x="78.1331%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.8831%" y="693" width="0.0790%" height="15" fill="rgb(239,134,19)" fg:x="986" fg:w="1"/><text x="78.1331%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.8831%" y="677" width="0.0790%" height="15" fill="rgb(250,140,9)" fg:x="986" fg:w="1"/><text x="78.1331%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.8831%" y="661" width="0.0790%" height="15" fill="rgb(225,59,14)" fg:x="986" fg:w="1"/><text x="78.1331%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.8831%" y="645" width="0.0790%" height="15" fill="rgb(214,152,51)" fg:x="986" fg:w="1"/><text x="78.1331%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="77.8831%" y="629" width="0.0790%" height="15" fill="rgb(251,227,43)" fg:x="986" fg:w="1"/><text x="78.1331%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="77.8831%" y="613" width="0.0790%" height="15" fill="rgb(241,96,17)" fg:x="986" fg:w="1"/><text x="78.1331%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="77.8831%" y="725" width="0.1580%" height="15" fill="rgb(234,198,43)" fg:x="986" fg:w="2"/><text x="78.1331%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9621%" y="709" width="0.0790%" height="15" fill="rgb(220,108,29)" fg:x="987" fg:w="1"/><text x="78.2121%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9621%" y="693" width="0.0790%" height="15" fill="rgb(226,163,33)" fg:x="987" fg:w="1"/><text x="78.2121%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::rollback (1 samples, 0.08%)</title><rect x="78.0411%" y="725" width="0.0790%" height="15" fill="rgb(205,194,45)" fg:x="988" fg:w="1"/><text x="78.2911%" y="735.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="78.1201%" y="613" width="0.0790%" height="15" fill="rgb(206,143,44)" fg:x="989" fg:w="1"/><text x="78.3701%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.1201%" y="597" width="0.0790%" height="15" fill="rgb(236,136,36)" fg:x="989" fg:w="1"/><text x="78.3701%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="78.1201%" y="725" width="0.1580%" height="15" fill="rgb(249,172,42)" fg:x="989" fg:w="2"/><text x="78.3701%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="78.1201%" y="709" width="0.1580%" height="15" fill="rgb(216,139,23)" fg:x="989" fg:w="2"/><text x="78.3701%" y="719.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="78.1201%" y="693" width="0.1580%" height="15" fill="rgb(207,166,20)" fg:x="989" fg:w="2"/><text x="78.3701%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="78.1201%" y="677" width="0.1580%" height="15" fill="rgb(210,209,22)" fg:x="989" fg:w="2"/><text x="78.3701%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="78.1201%" y="661" width="0.1580%" height="15" fill="rgb(232,118,20)" fg:x="989" fg:w="2"/><text x="78.3701%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="78.1201%" y="645" width="0.1580%" height="15" fill="rgb(238,113,42)" fg:x="989" fg:w="2"/><text x="78.3701%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="78.1201%" y="629" width="0.1580%" height="15" fill="rgb(231,42,5)" fg:x="989" fg:w="2"/><text x="78.3701%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.1991%" y="613" width="0.0790%" height="15" fill="rgb(243,166,24)" fg:x="990" fg:w="1"/><text x="78.4491%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.1991%" y="597" width="0.0790%" height="15" fill="rgb(237,226,12)" fg:x="990" fg:w="1"/><text x="78.4491%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="78.1991%" y="581" width="0.0790%" height="15" fill="rgb(229,133,24)" fg:x="990" fg:w="1"/><text x="78.4491%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="78.1991%" y="565" width="0.0790%" height="15" fill="rgb(238,33,43)" fg:x="990" fg:w="1"/><text x="78.4491%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.1991%" y="549" width="0.0790%" height="15" fill="rgb(227,59,38)" fg:x="990" fg:w="1"/><text x="78.4491%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.1991%" y="533" width="0.0790%" height="15" fill="rgb(230,97,0)" fg:x="990" fg:w="1"/><text x="78.4491%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="78.1991%" y="517" width="0.0790%" height="15" fill="rgb(250,173,50)" fg:x="990" fg:w="1"/><text x="78.4491%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="78.1991%" y="501" width="0.0790%" height="15" fill="rgb(240,15,50)" fg:x="990" fg:w="1"/><text x="78.4491%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="78.1991%" y="485" width="0.0790%" height="15" fill="rgb(221,93,22)" fg:x="990" fg:w="1"/><text x="78.4491%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="78.1991%" y="469" width="0.0790%" height="15" fill="rgb(245,180,53)" fg:x="990" fg:w="1"/><text x="78.4491%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="78.1991%" y="453" width="0.0790%" height="15" fill="rgb(231,88,51)" fg:x="990" fg:w="1"/><text x="78.4491%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="78.1991%" y="437" width="0.0790%" height="15" fill="rgb(240,58,21)" fg:x="990" fg:w="1"/><text x="78.4491%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.2780%" y="597" width="0.0790%" height="15" fill="rgb(237,21,10)" fg:x="991" fg:w="1"/><text x="78.5280%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.2780%" y="581" width="0.0790%" height="15" fill="rgb(218,43,11)" fg:x="991" fg:w="1"/><text x="78.5280%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.2780%" y="565" width="0.0790%" height="15" fill="rgb(218,221,29)" fg:x="991" fg:w="1"/><text x="78.5280%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="78.2780%" y="645" width="0.3160%" height="15" fill="rgb(214,118,42)" fg:x="991" fg:w="4"/><text x="78.5280%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="78.2780%" y="629" width="0.3160%" height="15" fill="rgb(251,200,26)" fg:x="991" fg:w="4"/><text x="78.5280%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="78.2780%" y="613" width="0.3160%" height="15" fill="rgb(237,101,39)" fg:x="991" fg:w="4"/><text x="78.5280%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="78.3570%" y="597" width="0.2370%" height="15" fill="rgb(251,117,11)" fg:x="992" fg:w="3"/><text x="78.6070%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="78.4360%" y="581" width="0.1580%" height="15" fill="rgb(216,223,23)" fg:x="993" fg:w="2"/><text x="78.6860%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.5940%" y="629" width="0.0790%" height="15" fill="rgb(251,54,12)" fg:x="995" fg:w="1"/><text x="78.8440%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="78.6730%" y="629" width="0.1580%" height="15" fill="rgb(254,176,54)" fg:x="996" fg:w="2"/><text x="78.9230%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.7520%" y="613" width="0.0790%" height="15" fill="rgb(210,32,8)" fg:x="997" fg:w="1"/><text x="79.0020%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.7520%" y="597" width="0.0790%" height="15" fill="rgb(235,52,38)" fg:x="997" fg:w="1"/><text x="79.0020%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.8310%" y="613" width="0.0790%" height="15" fill="rgb(231,4,44)" fg:x="998" fg:w="1"/><text x="79.0810%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.8310%" y="597" width="0.0790%" height="15" fill="rgb(249,2,32)" fg:x="998" fg:w="1"/><text x="79.0810%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.8310%" y="581" width="0.0790%" height="15" fill="rgb(224,65,26)" fg:x="998" fg:w="1"/><text x="79.0810%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.8310%" y="565" width="0.0790%" height="15" fill="rgb(250,73,40)" fg:x="998" fg:w="1"/><text x="79.0810%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.8310%" y="549" width="0.0790%" height="15" fill="rgb(253,177,16)" fg:x="998" fg:w="1"/><text x="79.0810%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.8310%" y="533" width="0.0790%" height="15" fill="rgb(217,32,34)" fg:x="998" fg:w="1"/><text x="79.0810%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.8310%" y="517" width="0.0790%" height="15" fill="rgb(212,7,10)" fg:x="998" fg:w="1"/><text x="79.0810%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.9889%" y="597" width="0.0790%" height="15" fill="rgb(245,89,8)" fg:x="1000" fg:w="1"/><text x="79.2389%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.9889%" y="581" width="0.0790%" height="15" fill="rgb(237,16,53)" fg:x="1000" fg:w="1"/><text x="79.2389%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="79.0679%" y="581" width="0.1580%" height="15" fill="rgb(250,204,30)" fg:x="1001" fg:w="2"/><text x="79.3179%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="79.0679%" y="565" width="0.1580%" height="15" fill="rgb(208,77,27)" fg:x="1001" fg:w="2"/><text x="79.3179%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.1469%" y="549" width="0.0790%" height="15" fill="rgb(250,204,28)" fg:x="1002" fg:w="1"/><text x="79.3969%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.1469%" y="533" width="0.0790%" height="15" fill="rgb(244,63,21)" fg:x="1002" fg:w="1"/><text x="79.3969%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.1469%" y="517" width="0.0790%" height="15" fill="rgb(236,85,44)" fg:x="1002" fg:w="1"/><text x="79.3969%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.1469%" y="501" width="0.0790%" height="15" fill="rgb(215,98,4)" fg:x="1002" fg:w="1"/><text x="79.3969%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.1469%" y="485" width="0.0790%" height="15" fill="rgb(235,38,11)" fg:x="1002" fg:w="1"/><text x="79.3969%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.71%)</title><rect x="78.5940%" y="645" width="0.7109%" height="15" fill="rgb(254,186,25)" fg:x="995" fg:w="9"/><text x="78.8440%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="78.8310%" y="629" width="0.4739%" height="15" fill="rgb(225,55,31)" fg:x="998" fg:w="6"/><text x="79.0810%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="78.9100%" y="613" width="0.3949%" height="15" fill="rgb(211,15,21)" fg:x="999" fg:w="5"/><text x="79.1600%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.0679%" y="597" width="0.2370%" height="15" fill="rgb(215,187,41)" fg:x="1001" fg:w="3"/><text x="79.3179%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.2259%" y="581" width="0.0790%" height="15" fill="rgb(248,69,32)" fg:x="1003" fg:w="1"/><text x="79.4759%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.2259%" y="565" width="0.0790%" height="15" fill="rgb(252,102,52)" fg:x="1003" fg:w="1"/><text x="79.4759%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.2259%" y="549" width="0.0790%" height="15" fill="rgb(253,140,32)" fg:x="1003" fg:w="1"/><text x="79.4759%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.2259%" y="533" width="0.0790%" height="15" fill="rgb(216,56,42)" fg:x="1003" fg:w="1"/><text x="79.4759%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.2259%" y="517" width="0.0790%" height="15" fill="rgb(216,184,14)" fg:x="1003" fg:w="1"/><text x="79.4759%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.2259%" y="501" width="0.0790%" height="15" fill="rgb(237,187,27)" fg:x="1003" fg:w="1"/><text x="79.4759%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.2259%" y="485" width="0.0790%" height="15" fill="rgb(219,65,3)" fg:x="1003" fg:w="1"/><text x="79.4759%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.2259%" y="469" width="0.0790%" height="15" fill="rgb(245,83,25)" fg:x="1003" fg:w="1"/><text x="79.4759%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.3049%" y="581" width="0.0790%" height="15" fill="rgb(214,205,45)" fg:x="1004" fg:w="1"/><text x="79.5549%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.3839%" y="549" width="0.0790%" height="15" fill="rgb(241,20,18)" fg:x="1005" fg:w="1"/><text x="79.6339%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.3839%" y="533" width="0.0790%" height="15" fill="rgb(232,163,23)" fg:x="1005" fg:w="1"/><text x="79.6339%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="79.5419%" y="533" width="0.0790%" height="15" fill="rgb(214,5,46)" fg:x="1007" fg:w="1"/><text x="79.7919%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="79.5419%" y="517" width="0.0790%" height="15" fill="rgb(229,78,17)" fg:x="1007" fg:w="1"/><text x="79.7919%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.5419%" y="501" width="0.0790%" height="15" fill="rgb(248,89,10)" fg:x="1007" fg:w="1"/><text x="79.7919%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.5419%" y="485" width="0.0790%" height="15" fill="rgb(248,54,15)" fg:x="1007" fg:w="1"/><text x="79.7919%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="79.3049%" y="613" width="0.3949%" height="15" fill="rgb(223,116,6)" fg:x="1004" fg:w="5"/><text x="79.5549%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.39%)</title><rect x="79.3049%" y="597" width="0.3949%" height="15" fill="rgb(205,125,38)" fg:x="1004" fg:w="5"/><text x="79.5549%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="79.3839%" y="581" width="0.3160%" height="15" fill="rgb(251,78,38)" fg:x="1005" fg:w="4"/><text x="79.6339%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="79.3839%" y="565" width="0.3160%" height="15" fill="rgb(253,78,28)" fg:x="1005" fg:w="4"/><text x="79.6339%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="79.4629%" y="549" width="0.2370%" height="15" fill="rgb(209,120,3)" fg:x="1006" fg:w="3"/><text x="79.7129%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.6209%" y="533" width="0.0790%" height="15" fill="rgb(238,229,9)" fg:x="1008" fg:w="1"/><text x="79.8709%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.47%)</title><rect x="79.3049%" y="629" width="0.4739%" height="15" fill="rgb(253,159,18)" fg:x="1004" fg:w="6"/><text x="79.5549%" y="639.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="79.6998%" y="613" width="0.0790%" height="15" fill="rgb(244,42,34)" fg:x="1009" fg:w="1"/><text x="79.9498%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="79.6998%" y="597" width="0.0790%" height="15" fill="rgb(224,8,7)" fg:x="1009" fg:w="1"/><text x="79.9498%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="79.6998%" y="581" width="0.0790%" height="15" fill="rgb(210,201,45)" fg:x="1009" fg:w="1"/><text x="79.9498%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="79.6998%" y="565" width="0.0790%" height="15" fill="rgb(252,185,21)" fg:x="1009" fg:w="1"/><text x="79.9498%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="79.6998%" y="549" width="0.0790%" height="15" fill="rgb(223,131,1)" fg:x="1009" fg:w="1"/><text x="79.9498%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="79.6998%" y="533" width="0.0790%" height="15" fill="rgb(245,141,16)" fg:x="1009" fg:w="1"/><text x="79.9498%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.6998%" y="517" width="0.0790%" height="15" fill="rgb(229,55,45)" fg:x="1009" fg:w="1"/><text x="79.9498%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8578%" y="597" width="0.0790%" height="15" fill="rgb(208,92,15)" fg:x="1011" fg:w="1"/><text x="80.1078%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="79.9368%" y="597" width="0.0790%" height="15" fill="rgb(234,185,47)" fg:x="1012" fg:w="1"/><text x="80.1868%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.9368%" y="581" width="0.0790%" height="15" fill="rgb(253,104,50)" fg:x="1012" fg:w="1"/><text x="80.1868%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9368%" y="565" width="0.0790%" height="15" fill="rgb(205,70,7)" fg:x="1012" fg:w="1"/><text x="80.1868%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="80.0158%" y="597" width="0.1580%" height="15" fill="rgb(240,178,43)" fg:x="1013" fg:w="2"/><text x="80.2658%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="80.0158%" y="581" width="0.1580%" height="15" fill="rgb(214,112,2)" fg:x="1013" fg:w="2"/><text x="80.2658%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.1738%" y="501" width="0.0790%" height="15" fill="rgb(206,46,17)" fg:x="1015" fg:w="1"/><text x="80.4238%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="80.1738%" y="549" width="0.2370%" height="15" fill="rgb(225,220,16)" fg:x="1015" fg:w="3"/><text x="80.4238%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="80.1738%" y="533" width="0.2370%" height="15" fill="rgb(238,65,40)" fg:x="1015" fg:w="3"/><text x="80.4238%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="80.1738%" y="517" width="0.2370%" height="15" fill="rgb(230,151,21)" fg:x="1015" fg:w="3"/><text x="80.4238%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="80.2528%" y="501" width="0.1580%" height="15" fill="rgb(218,58,49)" fg:x="1016" fg:w="2"/><text x="80.5028%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.3318%" y="485" width="0.0790%" height="15" fill="rgb(219,179,14)" fg:x="1017" fg:w="1"/><text x="80.5818%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="80.4897%" y="517" width="0.1580%" height="15" fill="rgb(223,72,1)" fg:x="1019" fg:w="2"/><text x="80.7397%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5687%" y="501" width="0.0790%" height="15" fill="rgb(238,126,10)" fg:x="1020" fg:w="1"/><text x="80.8187%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.55%)</title><rect x="80.1738%" y="581" width="0.5529%" height="15" fill="rgb(224,206,38)" fg:x="1015" fg:w="7"/><text x="80.4238%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.55%)</title><rect x="80.1738%" y="565" width="0.5529%" height="15" fill="rgb(212,201,54)" fg:x="1015" fg:w="7"/><text x="80.4238%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="80.4107%" y="549" width="0.3160%" height="15" fill="rgb(218,154,48)" fg:x="1018" fg:w="4"/><text x="80.6607%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="80.4107%" y="533" width="0.3160%" height="15" fill="rgb(232,93,24)" fg:x="1018" fg:w="4"/><text x="80.6607%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6477%" y="517" width="0.0790%" height="15" fill="rgb(245,30,21)" fg:x="1021" fg:w="1"/><text x="80.8977%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.6477%" y="501" width="0.0790%" height="15" fill="rgb(242,148,29)" fg:x="1021" fg:w="1"/><text x="80.8977%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6477%" y="485" width="0.0790%" height="15" fill="rgb(244,153,54)" fg:x="1021" fg:w="1"/><text x="80.8977%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.03%)</title><rect x="79.7788%" y="629" width="1.0269%" height="15" fill="rgb(252,87,22)" fg:x="1010" fg:w="13"/><text x="80.0288%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.95%)</title><rect x="79.8578%" y="613" width="0.9479%" height="15" fill="rgb(210,51,29)" fg:x="1011" fg:w="12"/><text x="80.1078%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.63%)</title><rect x="80.1738%" y="597" width="0.6319%" height="15" fill="rgb(242,136,47)" fg:x="1015" fg:w="8"/><text x="80.4238%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="80.7267%" y="581" width="0.0790%" height="15" fill="rgb(238,68,4)" fg:x="1022" fg:w="1"/><text x="80.9767%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="80.7267%" y="565" width="0.0790%" height="15" fill="rgb(242,161,30)" fg:x="1022" fg:w="1"/><text x="80.9767%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.8057%" y="453" width="0.0790%" height="15" fill="rgb(218,58,44)" fg:x="1023" fg:w="1"/><text x="81.0557%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.8057%" y="437" width="0.0790%" height="15" fill="rgb(252,125,32)" fg:x="1023" fg:w="1"/><text x="81.0557%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.8057%" y="421" width="0.0790%" height="15" fill="rgb(219,178,0)" fg:x="1023" fg:w="1"/><text x="81.0557%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8057%" y="405" width="0.0790%" height="15" fill="rgb(213,152,7)" fg:x="1023" fg:w="1"/><text x="81.0557%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="80.8057%" y="485" width="0.1580%" height="15" fill="rgb(249,109,34)" fg:x="1023" fg:w="2"/><text x="81.0557%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="80.8057%" y="469" width="0.1580%" height="15" fill="rgb(232,96,21)" fg:x="1023" fg:w="2"/><text x="81.0557%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.8847%" y="453" width="0.0790%" height="15" fill="rgb(228,27,39)" fg:x="1024" fg:w="1"/><text x="81.1347%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8847%" y="437" width="0.0790%" height="15" fill="rgb(211,182,52)" fg:x="1024" fg:w="1"/><text x="81.1347%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="80.9637%" y="469" width="0.2370%" height="15" fill="rgb(234,178,38)" fg:x="1025" fg:w="3"/><text x="81.2137%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="81.0427%" y="453" width="0.1580%" height="15" fill="rgb(221,111,3)" fg:x="1026" fg:w="2"/><text x="81.2927%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.1216%" y="437" width="0.0790%" height="15" fill="rgb(228,175,21)" fg:x="1027" fg:w="1"/><text x="81.3716%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.47%)</title><rect x="80.8057%" y="501" width="0.4739%" height="15" fill="rgb(228,174,43)" fg:x="1023" fg:w="6"/><text x="81.0557%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="80.9637%" y="485" width="0.3160%" height="15" fill="rgb(211,191,0)" fg:x="1025" fg:w="4"/><text x="81.2137%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="81.2006%" y="469" width="0.0790%" height="15" fill="rgb(253,117,3)" fg:x="1028" fg:w="1"/><text x="81.4506%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.2006%" y="453" width="0.0790%" height="15" fill="rgb(241,127,19)" fg:x="1028" fg:w="1"/><text x="81.4506%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="80.8057%" y="533" width="0.5529%" height="15" fill="rgb(218,103,12)" fg:x="1023" fg:w="7"/><text x="81.0557%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.55%)</title><rect x="80.8057%" y="517" width="0.5529%" height="15" fill="rgb(236,214,43)" fg:x="1023" fg:w="7"/><text x="81.0557%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.2796%" y="501" width="0.0790%" height="15" fill="rgb(244,144,19)" fg:x="1029" fg:w="1"/><text x="81.5296%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.63%)</title><rect x="80.8057%" y="565" width="0.6319%" height="15" fill="rgb(246,188,10)" fg:x="1023" fg:w="8"/><text x="81.0557%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.63%)</title><rect x="80.8057%" y="549" width="0.6319%" height="15" fill="rgb(212,193,33)" fg:x="1023" fg:w="8"/><text x="81.0557%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="81.3586%" y="533" width="0.0790%" height="15" fill="rgb(241,51,29)" fg:x="1030" fg:w="1"/><text x="81.6086%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.3586%" y="517" width="0.0790%" height="15" fill="rgb(211,58,19)" fg:x="1030" fg:w="1"/><text x="81.6086%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="81.4376%" y="565" width="0.0790%" height="15" fill="rgb(229,111,26)" fg:x="1031" fg:w="1"/><text x="81.6876%" y="575.50"></text></g><g><title>engine::session::Session::close (47 samples, 3.71%)</title><rect x="77.8831%" y="741" width="3.7125%" height="15" fill="rgb(213,115,40)" fg:x="986" fg:w="47"/><text x="78.1331%" y="751.50">engi..</text></g><g><title>engine::session::state::State::close (42 samples, 3.32%)</title><rect x="78.2780%" y="725" width="3.3175%" height="15" fill="rgb(209,56,44)" fg:x="991" fg:w="42"/><text x="78.5280%" y="735.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.32%)</title><rect x="78.2780%" y="709" width="3.3175%" height="15" fill="rgb(230,108,32)" fg:x="991" fg:w="42"/><text x="78.5280%" y="719.50">eng..</text></g><g><title>core::iter::adapters::try_process (42 samples, 3.32%)</title><rect x="78.2780%" y="693" width="3.3175%" height="15" fill="rgb(216,165,31)" fg:x="991" fg:w="42"/><text x="78.5280%" y="703.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (42 samples, 3.32%)</title><rect x="78.2780%" y="677" width="3.3175%" height="15" fill="rgb(218,122,21)" fg:x="991" fg:w="42"/><text x="78.5280%" y="687.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (42 samples, 3.32%)</title><rect x="78.2780%" y="661" width="3.3175%" height="15" fill="rgb(223,224,47)" fg:x="991" fg:w="42"/><text x="78.5280%" y="671.50">eng..</text></g><g><title>kernel::model::any_entity_changes (29 samples, 2.29%)</title><rect x="79.3049%" y="645" width="2.2907%" height="15" fill="rgb(238,102,44)" fg:x="1004" fg:w="29"/><text x="79.5549%" y="655.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (10 samples, 0.79%)</title><rect x="80.8057%" y="629" width="0.7899%" height="15" fill="rgb(236,46,40)" fg:x="1023" fg:w="10"/><text x="81.0557%" y="639.50"></text></g><g><title>serde_json::de::from_trait (10 samples, 0.79%)</title><rect x="80.8057%" y="613" width="0.7899%" height="15" fill="rgb(247,202,50)" fg:x="1023" fg:w="10"/><text x="81.0557%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.79%)</title><rect x="80.8057%" y="597" width="0.7899%" height="15" fill="rgb(209,99,20)" fg:x="1023" fg:w="10"/><text x="81.0557%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.79%)</title><rect x="80.8057%" y="581" width="0.7899%" height="15" fill="rgb(252,27,34)" fg:x="1023" fg:w="10"/><text x="81.0557%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5166%" y="565" width="0.0790%" height="15" fill="rgb(215,206,23)" fg:x="1032" fg:w="1"/><text x="81.7666%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5166%" y="549" width="0.0790%" height="15" fill="rgb(212,135,36)" fg:x="1032" fg:w="1"/><text x="81.7666%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5166%" y="533" width="0.0790%" height="15" fill="rgb(240,189,1)" fg:x="1032" fg:w="1"/><text x="81.7666%" y="543.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="81.5956%" y="709" width="0.0790%" height="15" fill="rgb(242,56,20)" fg:x="1033" fg:w="1"/><text x="81.8456%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="81.5956%" y="693" width="0.0790%" height="15" fill="rgb(247,132,33)" fg:x="1033" fg:w="1"/><text x="81.8456%" y="703.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="81.5956%" y="677" width="0.0790%" height="15" fill="rgb(208,149,11)" fg:x="1033" fg:w="1"/><text x="81.8456%" y="687.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="81.5956%" y="661" width="0.0790%" height="15" fill="rgb(211,33,11)" fg:x="1033" fg:w="1"/><text x="81.8456%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="81.5956%" y="645" width="0.0790%" height="15" fill="rgb(221,29,38)" fg:x="1033" fg:w="1"/><text x="81.8456%" y="655.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="81.5956%" y="629" width="0.0790%" height="15" fill="rgb(206,182,49)" fg:x="1033" fg:w="1"/><text x="81.8456%" y="639.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="81.7536%" y="549" width="0.0790%" height="15" fill="rgb(216,140,1)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="81.7536%" y="533" width="0.0790%" height="15" fill="rgb(232,57,40)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="543.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="81.7536%" y="517" width="0.0790%" height="15" fill="rgb(224,186,18)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="81.7536%" y="501" width="0.0790%" height="15" fill="rgb(215,121,11)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="81.7536%" y="485" width="0.0790%" height="15" fill="rgb(245,147,10)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.7536%" y="469" width="0.0790%" height="15" fill="rgb(238,153,13)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.7536%" y="453" width="0.0790%" height="15" fill="rgb(233,108,0)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="81.7536%" y="437" width="0.0790%" height="15" fill="rgb(212,157,17)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="81.7536%" y="421" width="0.0790%" height="15" fill="rgb(225,213,38)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="81.7536%" y="405" width="0.0790%" height="15" fill="rgb(248,16,11)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="81.7536%" y="389" width="0.0790%" height="15" fill="rgb(241,33,4)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="81.7536%" y="373" width="0.0790%" height="15" fill="rgb(222,26,43)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="81.7536%" y="357" width="0.0790%" height="15" fill="rgb(243,29,36)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.7536%" y="341" width="0.0790%" height="15" fill="rgb(241,9,27)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="81.7536%" y="325" width="0.0790%" height="15" fill="rgb(205,117,26)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.7536%" y="309" width="0.0790%" height="15" fill="rgb(209,80,39)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="81.7536%" y="293" width="0.0790%" height="15" fill="rgb(239,155,6)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="81.7536%" y="277" width="0.0790%" height="15" fill="rgb(212,104,12)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="81.7536%" y="261" width="0.0790%" height="15" fill="rgb(234,204,3)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.7536%" y="245" width="0.0790%" height="15" fill="rgb(251,218,7)" fg:x="1035" fg:w="1"/><text x="82.0036%" y="255.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (3 samples, 0.24%)</title><rect x="81.6746%" y="597" width="0.2370%" height="15" fill="rgb(221,81,32)" fg:x="1034" fg:w="3"/><text x="81.9246%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.24%)</title><rect x="81.6746%" y="581" width="0.2370%" height="15" fill="rgb(214,152,26)" fg:x="1034" fg:w="3"/><text x="81.9246%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (3 samples, 0.24%)</title><rect x="81.6746%" y="565" width="0.2370%" height="15" fill="rgb(223,22,3)" fg:x="1034" fg:w="3"/><text x="81.9246%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="81.8325%" y="549" width="0.0790%" height="15" fill="rgb(207,174,7)" fg:x="1036" fg:w="1"/><text x="82.0825%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.08%)</title><rect x="81.8325%" y="533" width="0.0790%" height="15" fill="rgb(224,19,52)" fg:x="1036" fg:w="1"/><text x="82.0825%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="81.8325%" y="517" width="0.0790%" height="15" fill="rgb(228,24,14)" fg:x="1036" fg:w="1"/><text x="82.0825%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish::{{closure}} (1 samples, 0.08%)</title><rect x="81.8325%" y="501" width="0.0790%" height="15" fill="rgb(230,153,43)" fg:x="1036" fg:w="1"/><text x="82.0825%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="81.8325%" y="485" width="0.0790%" height="15" fill="rgb(231,106,12)" fg:x="1036" fg:w="1"/><text x="82.0825%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.32%)</title><rect x="81.6746%" y="693" width="0.3160%" height="15" fill="rgb(215,92,2)" fg:x="1034" fg:w="4"/><text x="81.9246%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (4 samples, 0.32%)</title><rect x="81.6746%" y="677" width="0.3160%" height="15" fill="rgb(249,143,25)" fg:x="1034" fg:w="4"/><text x="81.9246%" y="687.50"></text></g><g><title>core::fmt::write (4 samples, 0.32%)</title><rect x="81.6746%" y="661" width="0.3160%" height="15" fill="rgb(252,7,35)" fg:x="1034" fg:w="4"/><text x="81.9246%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.32%)</title><rect x="81.6746%" y="645" width="0.3160%" height="15" fill="rgb(216,69,40)" fg:x="1034" fg:w="4"/><text x="81.9246%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (4 samples, 0.32%)</title><rect x="81.6746%" y="629" width="0.3160%" height="15" fill="rgb(240,36,33)" fg:x="1034" fg:w="4"/><text x="81.9246%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (4 samples, 0.32%)</title><rect x="81.6746%" y="613" width="0.3160%" height="15" fill="rgb(231,128,14)" fg:x="1034" fg:w="4"/><text x="81.9246%" y="623.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="81.9115%" y="597" width="0.0790%" height="15" fill="rgb(245,143,14)" fg:x="1037" fg:w="1"/><text x="82.1615%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="81.9115%" y="581" width="0.0790%" height="15" fill="rgb(222,130,28)" fg:x="1037" fg:w="1"/><text x="82.1615%" y="591.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="81.9905%" y="677" width="0.0790%" height="15" fill="rgb(212,10,48)" fg:x="1038" fg:w="1"/><text x="82.2405%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="81.9905%" y="661" width="0.0790%" height="15" fill="rgb(254,118,45)" fg:x="1038" fg:w="1"/><text x="82.2405%" y="671.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="81.9905%" y="645" width="0.0790%" height="15" fill="rgb(228,6,45)" fg:x="1038" fg:w="1"/><text x="82.2405%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="82.0695%" y="565" width="0.0790%" height="15" fill="rgb(241,18,35)" fg:x="1039" fg:w="1"/><text x="82.3195%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.0695%" y="549" width="0.0790%" height="15" fill="rgb(227,214,53)" fg:x="1039" fg:w="1"/><text x="82.3195%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.2275%" y="453" width="0.0790%" height="15" fill="rgb(224,107,51)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.2275%" y="437" width="0.0790%" height="15" fill="rgb(248,60,28)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.2275%" y="421" width="0.0790%" height="15" fill="rgb(249,101,23)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.2275%" y="405" width="0.0790%" height="15" fill="rgb(228,51,19)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="82.2275%" y="389" width="0.0790%" height="15" fill="rgb(213,20,6)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="82.2275%" y="373" width="0.0790%" height="15" fill="rgb(212,124,10)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="82.2275%" y="357" width="0.0790%" height="15" fill="rgb(248,3,40)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.2275%" y="341" width="0.0790%" height="15" fill="rgb(223,178,23)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.2275%" y="325" width="0.0790%" height="15" fill="rgb(240,132,45)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="82.2275%" y="309" width="0.0790%" height="15" fill="rgb(245,164,36)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="82.2275%" y="293" width="0.0790%" height="15" fill="rgb(231,188,53)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="82.2275%" y="277" width="0.0790%" height="15" fill="rgb(237,198,39)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="82.2275%" y="261" width="0.0790%" height="15" fill="rgb(223,120,35)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.2275%" y="245" width="0.0790%" height="15" fill="rgb(253,107,49)" fg:x="1041" fg:w="1"/><text x="82.4775%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="82.1485%" y="501" width="0.2370%" height="15" fill="rgb(216,44,31)" fg:x="1040" fg:w="3"/><text x="82.3985%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="82.1485%" y="485" width="0.2370%" height="15" fill="rgb(253,87,21)" fg:x="1040" fg:w="3"/><text x="82.3985%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="82.1485%" y="469" width="0.2370%" height="15" fill="rgb(226,18,2)" fg:x="1040" fg:w="3"/><text x="82.3985%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.3065%" y="453" width="0.0790%" height="15" fill="rgb(216,8,46)" fg:x="1042" fg:w="1"/><text x="82.5565%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.3855%" y="485" width="0.0790%" height="15" fill="rgb(226,140,39)" fg:x="1043" fg:w="1"/><text x="82.6355%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.3855%" y="469" width="0.0790%" height="15" fill="rgb(221,194,54)" fg:x="1043" fg:w="1"/><text x="82.6355%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.3855%" y="453" width="0.0790%" height="15" fill="rgb(213,92,11)" fg:x="1043" fg:w="1"/><text x="82.6355%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.3855%" y="437" width="0.0790%" height="15" fill="rgb(229,162,46)" fg:x="1043" fg:w="1"/><text x="82.6355%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="82.3855%" y="501" width="0.1580%" height="15" fill="rgb(214,111,36)" fg:x="1043" fg:w="2"/><text x="82.6355%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.4645%" y="485" width="0.0790%" height="15" fill="rgb(207,6,21)" fg:x="1044" fg:w="1"/><text x="82.7145%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.4645%" y="469" width="0.0790%" height="15" fill="rgb(213,127,38)" fg:x="1044" fg:w="1"/><text x="82.7145%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.4645%" y="453" width="0.0790%" height="15" fill="rgb(238,118,32)" fg:x="1044" fg:w="1"/><text x="82.7145%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.4645%" y="437" width="0.0790%" height="15" fill="rgb(240,139,39)" fg:x="1044" fg:w="1"/><text x="82.7145%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.4645%" y="421" width="0.0790%" height="15" fill="rgb(235,10,37)" fg:x="1044" fg:w="1"/><text x="82.7145%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="82.5434%" y="501" width="0.0790%" height="15" fill="rgb(249,171,38)" fg:x="1045" fg:w="1"/><text x="82.7934%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.5434%" y="485" width="0.0790%" height="15" fill="rgb(242,144,32)" fg:x="1045" fg:w="1"/><text x="82.7934%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.5434%" y="469" width="0.0790%" height="15" fill="rgb(217,117,21)" fg:x="1045" fg:w="1"/><text x="82.7934%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.5434%" y="453" width="0.0790%" height="15" fill="rgb(249,87,1)" fg:x="1045" fg:w="1"/><text x="82.7934%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.5434%" y="437" width="0.0790%" height="15" fill="rgb(248,196,48)" fg:x="1045" fg:w="1"/><text x="82.7934%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="82.5434%" y="421" width="0.0790%" height="15" fill="rgb(251,206,33)" fg:x="1045" fg:w="1"/><text x="82.7934%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.5434%" y="405" width="0.0790%" height="15" fill="rgb(232,141,28)" fg:x="1045" fg:w="1"/><text x="82.7934%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.5434%" y="389" width="0.0790%" height="15" fill="rgb(209,167,14)" fg:x="1045" fg:w="1"/><text x="82.7934%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="82.5434%" y="373" width="0.0790%" height="15" fill="rgb(225,11,50)" fg:x="1045" fg:w="1"/><text x="82.7934%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.5434%" y="357" width="0.0790%" height="15" fill="rgb(209,50,20)" fg:x="1045" fg:w="1"/><text x="82.7934%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.5434%" y="341" width="0.0790%" height="15" fill="rgb(212,17,46)" fg:x="1045" fg:w="1"/><text x="82.7934%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="82.5434%" y="325" width="0.0790%" height="15" fill="rgb(216,101,39)" fg:x="1045" fg:w="1"/><text x="82.7934%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.6224%" y="405" width="0.0790%" height="15" fill="rgb(212,228,48)" fg:x="1046" fg:w="1"/><text x="82.8724%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.6224%" y="389" width="0.0790%" height="15" fill="rgb(250,6,50)" fg:x="1046" fg:w="1"/><text x="82.8724%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.6224%" y="373" width="0.0790%" height="15" fill="rgb(250,160,48)" fg:x="1046" fg:w="1"/><text x="82.8724%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.6224%" y="357" width="0.0790%" height="15" fill="rgb(244,216,33)" fg:x="1046" fg:w="1"/><text x="82.8724%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.6224%" y="341" width="0.0790%" height="15" fill="rgb(207,157,5)" fg:x="1046" fg:w="1"/><text x="82.8724%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.6224%" y="325" width="0.0790%" height="15" fill="rgb(228,199,8)" fg:x="1046" fg:w="1"/><text x="82.8724%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.6224%" y="309" width="0.0790%" height="15" fill="rgb(227,80,20)" fg:x="1046" fg:w="1"/><text x="82.8724%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.6224%" y="293" width="0.0790%" height="15" fill="rgb(222,9,33)" fg:x="1046" fg:w="1"/><text x="82.8724%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.6224%" y="277" width="0.0790%" height="15" fill="rgb(239,44,28)" fg:x="1046" fg:w="1"/><text x="82.8724%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="82.6224%" y="261" width="0.0790%" height="15" fill="rgb(249,187,43)" fg:x="1046" fg:w="1"/><text x="82.8724%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.6224%" y="245" width="0.0790%" height="15" fill="rgb(216,141,28)" fg:x="1046" fg:w="1"/><text x="82.8724%" y="255.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (9 samples, 0.71%)</title><rect x="82.0695%" y="597" width="0.7109%" height="15" fill="rgb(230,154,53)" fg:x="1039" fg:w="9"/><text x="82.3195%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (9 samples, 0.71%)</title><rect x="82.0695%" y="581" width="0.7109%" height="15" fill="rgb(227,82,4)" fg:x="1039" fg:w="9"/><text x="82.3195%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.63%)</title><rect x="82.1485%" y="565" width="0.6319%" height="15" fill="rgb(220,107,16)" fg:x="1040" fg:w="8"/><text x="82.3985%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.63%)</title><rect x="82.1485%" y="549" width="0.6319%" height="15" fill="rgb(207,187,2)" fg:x="1040" fg:w="8"/><text x="82.3985%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.63%)</title><rect x="82.1485%" y="533" width="0.6319%" height="15" fill="rgb(210,162,52)" fg:x="1040" fg:w="8"/><text x="82.3985%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.63%)</title><rect x="82.1485%" y="517" width="0.6319%" height="15" fill="rgb(217,216,49)" fg:x="1040" fg:w="8"/><text x="82.3985%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="82.6224%" y="501" width="0.1580%" height="15" fill="rgb(218,146,49)" fg:x="1046" fg:w="2"/><text x="82.8724%" y="511.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="82.6224%" y="485" width="0.1580%" height="15" fill="rgb(216,55,40)" fg:x="1046" fg:w="2"/><text x="82.8724%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="82.6224%" y="469" width="0.1580%" height="15" fill="rgb(208,196,21)" fg:x="1046" fg:w="2"/><text x="82.8724%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="82.6224%" y="453" width="0.1580%" height="15" fill="rgb(242,117,42)" fg:x="1046" fg:w="2"/><text x="82.8724%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="82.6224%" y="437" width="0.1580%" height="15" fill="rgb(210,11,23)" fg:x="1046" fg:w="2"/><text x="82.8724%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="82.6224%" y="421" width="0.1580%" height="15" fill="rgb(217,110,2)" fg:x="1046" fg:w="2"/><text x="82.8724%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="82.7014%" y="405" width="0.0790%" height="15" fill="rgb(229,77,54)" fg:x="1047" fg:w="1"/><text x="82.9514%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="82.7014%" y="389" width="0.0790%" height="15" fill="rgb(218,53,16)" fg:x="1047" fg:w="1"/><text x="82.9514%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9384%" y="357" width="0.0790%" height="15" fill="rgb(215,38,13)" fg:x="1050" fg:w="1"/><text x="83.1884%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="83.0174%" y="357" width="0.0790%" height="15" fill="rgb(235,42,18)" fg:x="1051" fg:w="1"/><text x="83.2674%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.0964%" y="357" width="0.0790%" height="15" fill="rgb(219,66,54)" fg:x="1052" fg:w="1"/><text x="83.3464%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.0964%" y="341" width="0.0790%" height="15" fill="rgb(222,205,4)" fg:x="1052" fg:w="1"/><text x="83.3464%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="83.0964%" y="325" width="0.0790%" height="15" fill="rgb(227,213,46)" fg:x="1052" fg:w="1"/><text x="83.3464%" y="335.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (5 samples, 0.39%)</title><rect x="82.8594%" y="421" width="0.3949%" height="15" fill="rgb(250,145,42)" fg:x="1049" fg:w="5"/><text x="83.1094%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.39%)</title><rect x="82.8594%" y="405" width="0.3949%" height="15" fill="rgb(219,15,2)" fg:x="1049" fg:w="5"/><text x="83.1094%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (4 samples, 0.32%)</title><rect x="82.9384%" y="389" width="0.3160%" height="15" fill="rgb(231,181,52)" fg:x="1050" fg:w="4"/><text x="83.1884%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="82.9384%" y="373" width="0.3160%" height="15" fill="rgb(235,1,42)" fg:x="1050" fg:w="4"/><text x="83.1884%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="83.1754%" y="357" width="0.0790%" height="15" fill="rgb(249,88,27)" fg:x="1053" fg:w="1"/><text x="83.4254%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="83.1754%" y="341" width="0.0790%" height="15" fill="rgb(235,145,16)" fg:x="1053" fg:w="1"/><text x="83.4254%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.1754%" y="325" width="0.0790%" height="15" fill="rgb(237,114,19)" fg:x="1053" fg:w="1"/><text x="83.4254%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.1754%" y="309" width="0.0790%" height="15" fill="rgb(238,51,50)" fg:x="1053" fg:w="1"/><text x="83.4254%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.2543%" y="389" width="0.0790%" height="15" fill="rgb(205,194,25)" fg:x="1054" fg:w="1"/><text x="83.5043%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.2543%" y="373" width="0.0790%" height="15" fill="rgb(215,203,17)" fg:x="1054" fg:w="1"/><text x="83.5043%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.2543%" y="357" width="0.0790%" height="15" fill="rgb(233,112,49)" fg:x="1054" fg:w="1"/><text x="83.5043%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.2543%" y="341" width="0.0790%" height="15" fill="rgb(241,130,26)" fg:x="1054" fg:w="1"/><text x="83.5043%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="83.3333%" y="389" width="0.0790%" height="15" fill="rgb(252,223,19)" fg:x="1055" fg:w="1"/><text x="83.5833%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.3333%" y="373" width="0.0790%" height="15" fill="rgb(211,95,25)" fg:x="1055" fg:w="1"/><text x="83.5833%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.3333%" y="357" width="0.0790%" height="15" fill="rgb(251,182,27)" fg:x="1055" fg:w="1"/><text x="83.5833%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.3333%" y="341" width="0.0790%" height="15" fill="rgb(238,24,4)" fg:x="1055" fg:w="1"/><text x="83.5833%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.3333%" y="325" width="0.0790%" height="15" fill="rgb(224,220,25)" fg:x="1055" fg:w="1"/><text x="83.5833%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.3333%" y="309" width="0.0790%" height="15" fill="rgb(239,133,26)" fg:x="1055" fg:w="1"/><text x="83.5833%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.3333%" y="293" width="0.0790%" height="15" fill="rgb(211,94,48)" fg:x="1055" fg:w="1"/><text x="83.5833%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.3333%" y="277" width="0.0790%" height="15" fill="rgb(239,87,6)" fg:x="1055" fg:w="1"/><text x="83.5833%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.3333%" y="261" width="0.0790%" height="15" fill="rgb(227,62,0)" fg:x="1055" fg:w="1"/><text x="83.5833%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="83.3333%" y="245" width="0.0790%" height="15" fill="rgb(211,226,4)" fg:x="1055" fg:w="1"/><text x="83.5833%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="83.3333%" y="229" width="0.0790%" height="15" fill="rgb(253,38,52)" fg:x="1055" fg:w="1"/><text x="83.5833%" y="239.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="83.4123%" y="389" width="0.1580%" height="15" fill="rgb(229,126,40)" fg:x="1056" fg:w="2"/><text x="83.6623%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="83.4123%" y="373" width="0.1580%" height="15" fill="rgb(229,165,44)" fg:x="1056" fg:w="2"/><text x="83.6623%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="83.4123%" y="357" width="0.1580%" height="15" fill="rgb(247,95,47)" fg:x="1056" fg:w="2"/><text x="83.6623%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.4123%" y="341" width="0.1580%" height="15" fill="rgb(216,140,30)" fg:x="1056" fg:w="2"/><text x="83.6623%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="83.4123%" y="325" width="0.1580%" height="15" fill="rgb(246,214,8)" fg:x="1056" fg:w="2"/><text x="83.6623%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.4123%" y="309" width="0.1580%" height="15" fill="rgb(227,224,15)" fg:x="1056" fg:w="2"/><text x="83.6623%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="83.4123%" y="293" width="0.1580%" height="15" fill="rgb(233,175,4)" fg:x="1056" fg:w="2"/><text x="83.6623%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.4913%" y="277" width="0.0790%" height="15" fill="rgb(221,66,45)" fg:x="1057" fg:w="1"/><text x="83.7413%" y="287.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="83.5703%" y="389" width="0.0790%" height="15" fill="rgb(221,178,18)" fg:x="1058" fg:w="1"/><text x="83.8203%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="83.5703%" y="373" width="0.0790%" height="15" fill="rgb(213,81,29)" fg:x="1058" fg:w="1"/><text x="83.8203%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.6493%" y="357" width="0.0790%" height="15" fill="rgb(220,89,49)" fg:x="1059" fg:w="1"/><text x="83.8993%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="83.6493%" y="373" width="0.1580%" height="15" fill="rgb(227,60,33)" fg:x="1059" fg:w="2"/><text x="83.8993%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="83.7283%" y="357" width="0.0790%" height="15" fill="rgb(205,113,12)" fg:x="1060" fg:w="1"/><text x="83.9783%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.7283%" y="341" width="0.0790%" height="15" fill="rgb(211,32,1)" fg:x="1060" fg:w="1"/><text x="83.9783%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.8073%" y="357" width="0.0790%" height="15" fill="rgb(246,2,12)" fg:x="1061" fg:w="1"/><text x="84.0573%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.8073%" y="341" width="0.0790%" height="15" fill="rgb(243,37,27)" fg:x="1061" fg:w="1"/><text x="84.0573%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.8073%" y="325" width="0.0790%" height="15" fill="rgb(248,211,31)" fg:x="1061" fg:w="1"/><text x="84.0573%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.8073%" y="309" width="0.0790%" height="15" fill="rgb(242,146,47)" fg:x="1061" fg:w="1"/><text x="84.0573%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.8073%" y="293" width="0.0790%" height="15" fill="rgb(206,70,20)" fg:x="1061" fg:w="1"/><text x="84.0573%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.8073%" y="277" width="0.0790%" height="15" fill="rgb(215,10,51)" fg:x="1061" fg:w="1"/><text x="84.0573%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.8073%" y="261" width="0.0790%" height="15" fill="rgb(243,178,53)" fg:x="1061" fg:w="1"/><text x="84.0573%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.8073%" y="245" width="0.0790%" height="15" fill="rgb(233,221,20)" fg:x="1061" fg:w="1"/><text x="84.0573%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="83.8073%" y="229" width="0.0790%" height="15" fill="rgb(218,95,35)" fg:x="1061" fg:w="1"/><text x="84.0573%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="83.8073%" y="213" width="0.0790%" height="15" fill="rgb(229,13,5)" fg:x="1061" fg:w="1"/><text x="84.0573%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.8863%" y="357" width="0.0790%" height="15" fill="rgb(252,164,30)" fg:x="1062" fg:w="1"/><text x="84.1363%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.8863%" y="341" width="0.0790%" height="15" fill="rgb(232,68,36)" fg:x="1062" fg:w="1"/><text x="84.1363%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.1232%" y="293" width="0.0790%" height="15" fill="rgb(219,59,54)" fg:x="1065" fg:w="1"/><text x="84.3732%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (9 samples, 0.71%)</title><rect x="83.6493%" y="389" width="0.7109%" height="15" fill="rgb(250,92,33)" fg:x="1059" fg:w="9"/><text x="83.8993%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.55%)</title><rect x="83.8073%" y="373" width="0.5529%" height="15" fill="rgb(229,162,54)" fg:x="1061" fg:w="7"/><text x="84.0573%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.39%)</title><rect x="83.9652%" y="357" width="0.3949%" height="15" fill="rgb(244,114,52)" fg:x="1063" fg:w="5"/><text x="84.2152%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.39%)</title><rect x="83.9652%" y="341" width="0.3949%" height="15" fill="rgb(212,211,43)" fg:x="1063" fg:w="5"/><text x="84.2152%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.39%)</title><rect x="83.9652%" y="325" width="0.3949%" height="15" fill="rgb(226,147,8)" fg:x="1063" fg:w="5"/><text x="84.2152%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.39%)</title><rect x="83.9652%" y="309" width="0.3949%" height="15" fill="rgb(226,23,13)" fg:x="1063" fg:w="5"/><text x="84.2152%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="84.2022%" y="293" width="0.1580%" height="15" fill="rgb(240,63,4)" fg:x="1066" fg:w="2"/><text x="84.4522%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="84.2022%" y="277" width="0.1580%" height="15" fill="rgb(221,1,32)" fg:x="1066" fg:w="2"/><text x="84.4522%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="84.3602%" y="309" width="0.0790%" height="15" fill="rgb(242,117,10)" fg:x="1068" fg:w="1"/><text x="84.6102%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="84.3602%" y="293" width="0.0790%" height="15" fill="rgb(249,172,44)" fg:x="1068" fg:w="1"/><text x="84.6102%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.3602%" y="277" width="0.0790%" height="15" fill="rgb(244,46,45)" fg:x="1068" fg:w="1"/><text x="84.6102%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.3602%" y="261" width="0.0790%" height="15" fill="rgb(206,43,17)" fg:x="1068" fg:w="1"/><text x="84.6102%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.3602%" y="245" width="0.0790%" height="15" fill="rgb(239,218,39)" fg:x="1068" fg:w="1"/><text x="84.6102%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.3602%" y="229" width="0.0790%" height="15" fill="rgb(208,169,54)" fg:x="1068" fg:w="1"/><text x="84.6102%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.5182%" y="261" width="0.0790%" height="15" fill="rgb(247,25,42)" fg:x="1070" fg:w="1"/><text x="84.7682%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="84.5972%" y="261" width="0.0790%" height="15" fill="rgb(226,23,31)" fg:x="1071" fg:w="1"/><text x="84.8472%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.5972%" y="245" width="0.0790%" height="15" fill="rgb(247,16,28)" fg:x="1071" fg:w="1"/><text x="84.8472%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="84.5972%" y="229" width="0.0790%" height="15" fill="rgb(231,147,38)" fg:x="1071" fg:w="1"/><text x="84.8472%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="84.6761%" y="245" width="0.1580%" height="15" fill="rgb(253,81,48)" fg:x="1072" fg:w="2"/><text x="84.9261%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="84.6761%" y="229" width="0.1580%" height="15" fill="rgb(249,222,43)" fg:x="1072" fg:w="2"/><text x="84.9261%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="84.8341%" y="245" width="0.0790%" height="15" fill="rgb(221,3,27)" fg:x="1074" fg:w="1"/><text x="85.0841%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="84.8341%" y="229" width="0.0790%" height="15" fill="rgb(228,180,5)" fg:x="1074" fg:w="1"/><text x="85.0841%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="84.8341%" y="213" width="0.0790%" height="15" fill="rgb(227,131,42)" fg:x="1074" fg:w="1"/><text x="85.0841%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="85.0711%" y="181" width="0.0790%" height="15" fill="rgb(212,3,39)" fg:x="1077" fg:w="1"/><text x="85.3211%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="85.0711%" y="165" width="0.0790%" height="15" fill="rgb(226,45,5)" fg:x="1077" fg:w="1"/><text x="85.3211%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (29 samples, 2.29%)</title><rect x="85.1501%" y="181" width="2.2907%" height="15" fill="rgb(215,167,45)" fg:x="1078" fg:w="29"/><text x="85.4001%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (29 samples, 2.29%)</title><rect x="85.1501%" y="165" width="2.2907%" height="15" fill="rgb(250,218,53)" fg:x="1078" fg:w="29"/><text x="85.4001%" y="175.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (29 samples, 2.29%)</title><rect x="85.1501%" y="149" width="2.2907%" height="15" fill="rgb(207,140,0)" fg:x="1078" fg:w="29"/><text x="85.4001%" y="159.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="87.4408%" y="181" width="0.0790%" height="15" fill="rgb(238,133,51)" fg:x="1107" fg:w="1"/><text x="87.6908%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.4408%" y="165" width="0.0790%" height="15" fill="rgb(218,203,53)" fg:x="1107" fg:w="1"/><text x="87.6908%" y="175.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="87.5197%" y="181" width="0.0790%" height="15" fill="rgb(226,184,25)" fg:x="1108" fg:w="1"/><text x="87.7697%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 2.76%)</title><rect x="84.9131%" y="229" width="2.7646%" height="15" fill="rgb(231,121,21)" fg:x="1075" fg:w="35"/><text x="85.1631%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (35 samples, 2.76%)</title><rect x="84.9131%" y="213" width="2.7646%" height="15" fill="rgb(251,14,34)" fg:x="1075" fg:w="35"/><text x="85.1631%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (35 samples, 2.76%)</title><rect x="84.9131%" y="197" width="2.7646%" height="15" fill="rgb(249,193,11)" fg:x="1075" fg:w="35"/><text x="85.1631%" y="207.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="87.5987%" y="181" width="0.0790%" height="15" fill="rgb(220,172,37)" fg:x="1109" fg:w="1"/><text x="87.8487%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.5987%" y="165" width="0.0790%" height="15" fill="rgb(231,229,43)" fg:x="1109" fg:w="1"/><text x="87.8487%" y="175.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="87.6777%" y="213" width="0.0790%" height="15" fill="rgb(250,161,5)" fg:x="1110" fg:w="1"/><text x="87.9277%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.7567%" y="213" width="0.0790%" height="15" fill="rgb(218,225,18)" fg:x="1111" fg:w="1"/><text x="88.0067%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.8357%" y="213" width="0.0790%" height="15" fill="rgb(245,45,42)" fg:x="1112" fg:w="1"/><text x="88.0857%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="87.9147%" y="213" width="0.1580%" height="15" fill="rgb(211,115,1)" fg:x="1113" fg:w="2"/><text x="88.1647%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.9937%" y="197" width="0.0790%" height="15" fill="rgb(248,133,52)" fg:x="1114" fg:w="1"/><text x="88.2437%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.9937%" y="181" width="0.0790%" height="15" fill="rgb(238,100,21)" fg:x="1114" fg:w="1"/><text x="88.2437%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.9937%" y="165" width="0.0790%" height="15" fill="rgb(247,144,11)" fg:x="1114" fg:w="1"/><text x="88.2437%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (44 samples, 3.48%)</title><rect x="84.6761%" y="261" width="3.4755%" height="15" fill="rgb(206,164,16)" fg:x="1072" fg:w="44"/><text x="84.9261%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (41 samples, 3.24%)</title><rect x="84.9131%" y="245" width="3.2385%" height="15" fill="rgb(222,34,3)" fg:x="1075" fg:w="41"/><text x="85.1631%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.47%)</title><rect x="87.6777%" y="229" width="0.4739%" height="15" fill="rgb(248,82,4)" fg:x="1110" fg:w="6"/><text x="87.9277%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="88.0727%" y="213" width="0.0790%" height="15" fill="rgb(228,81,46)" fg:x="1115" fg:w="1"/><text x="88.3227%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="88.1517%" y="261" width="0.1580%" height="15" fill="rgb(227,67,47)" fg:x="1116" fg:w="2"/><text x="88.4017%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="88.1517%" y="245" width="0.1580%" height="15" fill="rgb(215,93,53)" fg:x="1116" fg:w="2"/><text x="88.4017%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="88.1517%" y="229" width="0.1580%" height="15" fill="rgb(248,194,39)" fg:x="1116" fg:w="2"/><text x="88.4017%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="88.1517%" y="213" width="0.1580%" height="15" fill="rgb(215,5,19)" fg:x="1116" fg:w="2"/><text x="88.4017%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="88.1517%" y="197" width="0.1580%" height="15" fill="rgb(226,215,51)" fg:x="1116" fg:w="2"/><text x="88.4017%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="88.1517%" y="181" width="0.1580%" height="15" fill="rgb(225,56,26)" fg:x="1116" fg:w="2"/><text x="88.4017%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="88.1517%" y="165" width="0.1580%" height="15" fill="rgb(222,75,29)" fg:x="1116" fg:w="2"/><text x="88.4017%" y="175.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (50 samples, 3.95%)</title><rect x="84.4392%" y="277" width="3.9494%" height="15" fill="rgb(236,139,6)" fg:x="1069" fg:w="50"/><text x="84.6892%" y="287.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="88.3096%" y="261" width="0.0790%" height="15" fill="rgb(223,137,36)" fg:x="1118" fg:w="1"/><text x="88.5596%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="88.3096%" y="245" width="0.0790%" height="15" fill="rgb(226,99,2)" fg:x="1118" fg:w="1"/><text x="88.5596%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (51 samples, 4.03%)</title><rect x="84.4392%" y="309" width="4.0284%" height="15" fill="rgb(206,133,23)" fg:x="1069" fg:w="51"/><text x="84.6892%" y="319.50">rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (51 samples, 4.03%)</title><rect x="84.4392%" y="293" width="4.0284%" height="15" fill="rgb(243,173,15)" fg:x="1069" fg:w="51"/><text x="84.6892%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="88.3886%" y="277" width="0.0790%" height="15" fill="rgb(228,69,28)" fg:x="1119" fg:w="1"/><text x="88.6386%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (55 samples, 4.34%)</title><rect x="84.3602%" y="325" width="4.3444%" height="15" fill="rgb(212,51,22)" fg:x="1068" fg:w="55"/><text x="84.6102%" y="335.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="88.4676%" y="309" width="0.2370%" height="15" fill="rgb(227,113,0)" fg:x="1120" fg:w="3"/><text x="88.7176%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="88.4676%" y="293" width="0.2370%" height="15" fill="rgb(252,84,27)" fg:x="1120" fg:w="3"/><text x="88.7176%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="88.4676%" y="277" width="0.2370%" height="15" fill="rgb(223,145,39)" fg:x="1120" fg:w="3"/><text x="88.7176%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="88.4676%" y="261" width="0.2370%" height="15" fill="rgb(239,219,30)" fg:x="1120" fg:w="3"/><text x="88.7176%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="88.4676%" y="245" width="0.2370%" height="15" fill="rgb(224,196,39)" fg:x="1120" fg:w="3"/><text x="88.7176%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="88.6256%" y="229" width="0.0790%" height="15" fill="rgb(205,35,43)" fg:x="1122" fg:w="1"/><text x="88.8756%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.7046%" y="261" width="0.0790%" height="15" fill="rgb(228,201,21)" fg:x="1123" fg:w="1"/><text x="88.9546%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="88.7046%" y="309" width="0.2370%" height="15" fill="rgb(237,118,16)" fg:x="1123" fg:w="3"/><text x="88.9546%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="88.7046%" y="293" width="0.2370%" height="15" fill="rgb(241,17,19)" fg:x="1123" fg:w="3"/><text x="88.9546%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="88.7046%" y="277" width="0.2370%" height="15" fill="rgb(214,10,25)" fg:x="1123" fg:w="3"/><text x="88.9546%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="88.7836%" y="261" width="0.1580%" height="15" fill="rgb(238,37,29)" fg:x="1124" fg:w="2"/><text x="89.0336%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="88.7836%" y="245" width="0.1580%" height="15" fill="rgb(253,83,25)" fg:x="1124" fg:w="2"/><text x="89.0336%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="88.9415%" y="245" width="0.0790%" height="15" fill="rgb(234,192,12)" fg:x="1126" fg:w="1"/><text x="89.1915%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="88.9415%" y="229" width="0.0790%" height="15" fill="rgb(241,216,45)" fg:x="1126" fg:w="1"/><text x="89.1915%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (2 samples, 0.16%)</title><rect x="88.9415%" y="309" width="0.1580%" height="15" fill="rgb(242,22,33)" fg:x="1126" fg:w="2"/><text x="89.1915%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="88.9415%" y="293" width="0.1580%" height="15" fill="rgb(231,105,49)" fg:x="1126" fg:w="2"/><text x="89.1915%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="88.9415%" y="277" width="0.1580%" height="15" fill="rgb(218,204,15)" fg:x="1126" fg:w="2"/><text x="89.1915%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="88.9415%" y="261" width="0.1580%" height="15" fill="rgb(235,138,41)" fg:x="1126" fg:w="2"/><text x="89.1915%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="89.0205%" y="245" width="0.0790%" height="15" fill="rgb(246,0,9)" fg:x="1127" fg:w="1"/><text x="89.2705%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.0995%" y="261" width="0.0790%" height="15" fill="rgb(210,74,4)" fg:x="1128" fg:w="1"/><text x="89.3495%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.0995%" y="245" width="0.0790%" height="15" fill="rgb(250,60,41)" fg:x="1128" fg:w="1"/><text x="89.3495%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="89.0995%" y="229" width="0.0790%" height="15" fill="rgb(220,115,12)" fg:x="1128" fg:w="1"/><text x="89.3495%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.1785%" y="261" width="0.0790%" height="15" fill="rgb(237,100,13)" fg:x="1129" fg:w="1"/><text x="89.4285%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="89.2575%" y="229" width="0.0790%" height="15" fill="rgb(213,55,26)" fg:x="1130" fg:w="1"/><text x="89.5075%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.2575%" y="213" width="0.0790%" height="15" fill="rgb(216,17,4)" fg:x="1130" fg:w="1"/><text x="89.5075%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.2575%" y="197" width="0.0790%" height="15" fill="rgb(220,153,47)" fg:x="1130" fg:w="1"/><text x="89.5075%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.2575%" y="181" width="0.0790%" height="15" fill="rgb(215,131,9)" fg:x="1130" fg:w="1"/><text x="89.5075%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="89.2575%" y="261" width="0.2370%" height="15" fill="rgb(233,46,42)" fg:x="1130" fg:w="3"/><text x="89.5075%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="89.2575%" y="245" width="0.2370%" height="15" fill="rgb(226,86,7)" fg:x="1130" fg:w="3"/><text x="89.5075%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="89.3365%" y="229" width="0.1580%" height="15" fill="rgb(239,226,21)" fg:x="1131" fg:w="2"/><text x="89.5865%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="89.3365%" y="213" width="0.1580%" height="15" fill="rgb(244,137,22)" fg:x="1131" fg:w="2"/><text x="89.5865%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="89.4155%" y="197" width="0.0790%" height="15" fill="rgb(211,139,35)" fg:x="1132" fg:w="1"/><text x="89.6655%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.4155%" y="181" width="0.0790%" height="15" fill="rgb(214,62,50)" fg:x="1132" fg:w="1"/><text x="89.6655%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.4155%" y="165" width="0.0790%" height="15" fill="rgb(212,113,44)" fg:x="1132" fg:w="1"/><text x="89.6655%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.4155%" y="149" width="0.0790%" height="15" fill="rgb(226,150,43)" fg:x="1132" fg:w="1"/><text x="89.6655%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.39%)</title><rect x="89.4945%" y="245" width="0.3949%" height="15" fill="rgb(250,71,37)" fg:x="1133" fg:w="5"/><text x="89.7445%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.39%)</title><rect x="89.4945%" y="229" width="0.3949%" height="15" fill="rgb(219,76,19)" fg:x="1133" fg:w="5"/><text x="89.7445%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.8104%" y="213" width="0.0790%" height="15" fill="rgb(250,39,11)" fg:x="1137" fg:w="1"/><text x="90.0604%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="89.8894%" y="245" width="0.3160%" height="15" fill="rgb(230,64,31)" fg:x="1138" fg:w="4"/><text x="90.1394%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="90.0474%" y="229" width="0.1580%" height="15" fill="rgb(208,222,23)" fg:x="1140" fg:w="2"/><text x="90.2974%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="90.1264%" y="213" width="0.0790%" height="15" fill="rgb(227,125,18)" fg:x="1141" fg:w="1"/><text x="90.3764%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="90.2054%" y="213" width="0.1580%" height="15" fill="rgb(234,210,9)" fg:x="1142" fg:w="2"/><text x="90.4554%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="90.2054%" y="197" width="0.1580%" height="15" fill="rgb(217,127,24)" fg:x="1142" fg:w="2"/><text x="90.4554%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.2054%" y="181" width="0.1580%" height="15" fill="rgb(239,141,48)" fg:x="1142" fg:w="2"/><text x="90.4554%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="90.2054%" y="165" width="0.1580%" height="15" fill="rgb(227,109,8)" fg:x="1142" fg:w="2"/><text x="90.4554%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="90.3633%" y="213" width="0.1580%" height="15" fill="rgb(235,184,23)" fg:x="1144" fg:w="2"/><text x="90.6133%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="90.4423%" y="197" width="0.0790%" height="15" fill="rgb(227,226,48)" fg:x="1145" fg:w="1"/><text x="90.6923%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.71%)</title><rect x="90.2054%" y="245" width="0.7109%" height="15" fill="rgb(206,150,11)" fg:x="1142" fg:w="9"/><text x="90.4554%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (9 samples, 0.71%)</title><rect x="90.2054%" y="229" width="0.7109%" height="15" fill="rgb(254,2,33)" fg:x="1142" fg:w="9"/><text x="90.4554%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.39%)</title><rect x="90.5213%" y="213" width="0.3949%" height="15" fill="rgb(243,160,20)" fg:x="1146" fg:w="5"/><text x="90.7713%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.39%)</title><rect x="90.5213%" y="197" width="0.3949%" height="15" fill="rgb(218,208,30)" fg:x="1146" fg:w="5"/><text x="90.7713%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.39%)</title><rect x="90.5213%" y="181" width="0.3949%" height="15" fill="rgb(224,120,49)" fg:x="1146" fg:w="5"/><text x="90.7713%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="90.9163%" y="245" width="0.0790%" height="15" fill="rgb(246,12,2)" fg:x="1151" fg:w="1"/><text x="91.1663%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="90.9163%" y="229" width="0.0790%" height="15" fill="rgb(236,117,3)" fg:x="1151" fg:w="1"/><text x="91.1663%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="91.3112%" y="133" width="0.1580%" height="15" fill="rgb(216,128,52)" fg:x="1156" fg:w="2"/><text x="91.5612%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.39%)</title><rect x="91.4692%" y="133" width="0.3949%" height="15" fill="rgb(246,145,19)" fg:x="1158" fg:w="5"/><text x="91.7192%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.7062%" y="117" width="0.1580%" height="15" fill="rgb(222,11,46)" fg:x="1161" fg:w="2"/><text x="91.9562%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.7062%" y="101" width="0.1580%" height="15" fill="rgb(245,82,36)" fg:x="1161" fg:w="2"/><text x="91.9562%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="91.7062%" y="85" width="0.1580%" height="15" fill="rgb(250,73,51)" fg:x="1161" fg:w="2"/><text x="91.9562%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="91.8641%" y="133" width="0.2370%" height="15" fill="rgb(221,189,23)" fg:x="1163" fg:w="3"/><text x="92.1141%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="92.0221%" y="117" width="0.0790%" height="15" fill="rgb(210,33,7)" fg:x="1165" fg:w="1"/><text x="92.2721%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="92.0221%" y="101" width="0.0790%" height="15" fill="rgb(210,107,22)" fg:x="1165" fg:w="1"/><text x="92.2721%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="92.0221%" y="85" width="0.0790%" height="15" fill="rgb(222,116,37)" fg:x="1165" fg:w="1"/><text x="92.2721%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.0221%" y="69" width="0.0790%" height="15" fill="rgb(254,17,48)" fg:x="1165" fg:w="1"/><text x="92.2721%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.0221%" y="53" width="0.0790%" height="15" fill="rgb(224,36,32)" fg:x="1165" fg:w="1"/><text x="92.2721%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.0221%" y="37" width="0.0790%" height="15" fill="rgb(232,90,46)" fg:x="1165" fg:w="1"/><text x="92.2721%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (36 samples, 2.84%)</title><rect x="92.1011%" y="133" width="2.8436%" height="15" fill="rgb(241,66,40)" fg:x="1166" fg:w="36"/><text x="92.3511%" y="143.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (36 samples, 2.84%)</title><rect x="92.1011%" y="117" width="2.8436%" height="15" fill="rgb(249,184,29)" fg:x="1166" fg:w="36"/><text x="92.3511%" y="127.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (36 samples, 2.84%)</title><rect x="92.1011%" y="101" width="2.8436%" height="15" fill="rgb(231,181,1)" fg:x="1166" fg:w="36"/><text x="92.3511%" y="111.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="94.9447%" y="133" width="0.0790%" height="15" fill="rgb(224,94,2)" fg:x="1202" fg:w="1"/><text x="95.1947%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 4.27%)</title><rect x="90.9953%" y="229" width="4.2654%" height="15" fill="rgb(229,170,15)" fg:x="1152" fg:w="54"/><text x="91.2453%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.19%)</title><rect x="91.0742%" y="213" width="4.1864%" height="15" fill="rgb(240,127,35)" fg:x="1153" fg:w="53"/><text x="91.3242%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.19%)</title><rect x="91.0742%" y="197" width="4.1864%" height="15" fill="rgb(248,196,34)" fg:x="1153" fg:w="53"/><text x="91.3242%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.19%)</title><rect x="91.0742%" y="181" width="4.1864%" height="15" fill="rgb(236,137,7)" fg:x="1153" fg:w="53"/><text x="91.3242%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (53 samples, 4.19%)</title><rect x="91.0742%" y="165" width="4.1864%" height="15" fill="rgb(235,127,16)" fg:x="1153" fg:w="53"/><text x="91.3242%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.19%)</title><rect x="91.0742%" y="149" width="4.1864%" height="15" fill="rgb(250,192,54)" fg:x="1153" fg:w="53"/><text x="91.3242%" y="159.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="95.0237%" y="133" width="0.2370%" height="15" fill="rgb(218,98,20)" fg:x="1203" fg:w="3"/><text x="95.2737%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1817%" y="117" width="0.0790%" height="15" fill="rgb(230,176,47)" fg:x="1205" fg:w="1"/><text x="95.4317%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1817%" y="101" width="0.0790%" height="15" fill="rgb(244,2,33)" fg:x="1205" fg:w="1"/><text x="95.4317%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.1817%" y="85" width="0.0790%" height="15" fill="rgb(231,100,17)" fg:x="1205" fg:w="1"/><text x="95.4317%" y="95.50"></text></g><g><title>regex_automata::meta::strategy::new (74 samples, 5.85%)</title><rect x="89.4945%" y="261" width="5.8452%" height="15" fill="rgb(245,23,12)" fg:x="1133" fg:w="74"/><text x="89.7445%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (55 samples, 4.34%)</title><rect x="90.9953%" y="245" width="4.3444%" height="15" fill="rgb(249,55,22)" fg:x="1152" fg:w="55"/><text x="91.2453%" y="255.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="95.2607%" y="229" width="0.0790%" height="15" fill="rgb(207,134,9)" fg:x="1206" fg:w="1"/><text x="95.5107%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="95.2607%" y="213" width="0.0790%" height="15" fill="rgb(218,134,0)" fg:x="1206" fg:w="1"/><text x="95.5107%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="95.3397%" y="261" width="0.0790%" height="15" fill="rgb(213,212,33)" fg:x="1207" fg:w="1"/><text x="95.5897%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="95.3397%" y="245" width="0.0790%" height="15" fill="rgb(252,106,18)" fg:x="1207" fg:w="1"/><text x="95.5897%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.3397%" y="229" width="0.0790%" height="15" fill="rgb(208,126,42)" fg:x="1207" fg:w="1"/><text x="95.5897%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.3397%" y="213" width="0.0790%" height="15" fill="rgb(246,175,29)" fg:x="1207" fg:w="1"/><text x="95.5897%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.3397%" y="197" width="0.0790%" height="15" fill="rgb(215,13,50)" fg:x="1207" fg:w="1"/><text x="95.5897%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3397%" y="181" width="0.0790%" height="15" fill="rgb(216,172,15)" fg:x="1207" fg:w="1"/><text x="95.5897%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3397%" y="165" width="0.0790%" height="15" fill="rgb(212,103,13)" fg:x="1207" fg:w="1"/><text x="95.5897%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.4186%" y="213" width="0.0790%" height="15" fill="rgb(231,171,36)" fg:x="1208" fg:w="1"/><text x="95.6686%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="95.4186%" y="229" width="0.1580%" height="15" fill="rgb(250,123,20)" fg:x="1208" fg:w="2"/><text x="95.6686%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="95.4976%" y="213" width="0.0790%" height="15" fill="rgb(212,53,50)" fg:x="1209" fg:w="1"/><text x="95.7476%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="95.4976%" y="197" width="0.0790%" height="15" fill="rgb(243,54,12)" fg:x="1209" fg:w="1"/><text x="95.7476%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (88 samples, 6.95%)</title><rect x="88.7046%" y="325" width="6.9510%" height="15" fill="rgb(234,101,34)" fg:x="1123" fg:w="88"/><text x="88.9546%" y="335.50">indefinit..</text></g><g><title>regex::regex::string::Regex::new (83 samples, 6.56%)</title><rect x="89.0995%" y="309" width="6.5561%" height="15" fill="rgb(254,67,22)" fg:x="1128" fg:w="83"/><text x="89.3495%" y="319.50">regex::re..</text></g><g><title>regex::builders::string::RegexBuilder::build (83 samples, 6.56%)</title><rect x="89.0995%" y="293" width="6.5561%" height="15" fill="rgb(250,35,47)" fg:x="1128" fg:w="83"/><text x="89.3495%" y="303.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (83 samples, 6.56%)</title><rect x="89.0995%" y="277" width="6.5561%" height="15" fill="rgb(226,126,38)" fg:x="1128" fg:w="83"/><text x="89.3495%" y="287.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.4186%" y="261" width="0.2370%" height="15" fill="rgb(216,138,53)" fg:x="1208" fg:w="3"/><text x="95.6686%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.4186%" y="245" width="0.2370%" height="15" fill="rgb(246,199,43)" fg:x="1208" fg:w="3"/><text x="95.6686%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.5766%" y="229" width="0.0790%" height="15" fill="rgb(232,125,11)" fg:x="1210" fg:w="1"/><text x="95.8266%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.5766%" y="213" width="0.0790%" height="15" fill="rgb(218,219,45)" fg:x="1210" fg:w="1"/><text x="95.8266%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="95.5766%" y="197" width="0.0790%" height="15" fill="rgb(216,102,54)" fg:x="1210" fg:w="1"/><text x="95.8266%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.6556%" y="293" width="0.0790%" height="15" fill="rgb(250,228,7)" fg:x="1211" fg:w="1"/><text x="95.9056%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.6556%" y="277" width="0.0790%" height="15" fill="rgb(226,125,25)" fg:x="1211" fg:w="1"/><text x="95.9056%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="95.6556%" y="261" width="0.0790%" height="15" fill="rgb(224,165,27)" fg:x="1211" fg:w="1"/><text x="95.9056%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="95.6556%" y="245" width="0.0790%" height="15" fill="rgb(233,86,3)" fg:x="1211" fg:w="1"/><text x="95.9056%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="95.7346%" y="245" width="0.0790%" height="15" fill="rgb(228,116,20)" fg:x="1212" fg:w="1"/><text x="95.9846%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="95.8136%" y="229" width="0.0790%" height="15" fill="rgb(209,192,17)" fg:x="1213" fg:w="1"/><text x="96.0636%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="95.8136%" y="213" width="0.0790%" height="15" fill="rgb(224,88,34)" fg:x="1213" fg:w="1"/><text x="96.0636%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="95.8926%" y="213" width="0.0790%" height="15" fill="rgb(233,38,6)" fg:x="1214" fg:w="1"/><text x="96.1426%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="95.8926%" y="197" width="0.0790%" height="15" fill="rgb(212,59,30)" fg:x="1214" fg:w="1"/><text x="96.1426%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="95.8926%" y="181" width="0.0790%" height="15" fill="rgb(213,80,3)" fg:x="1214" fg:w="1"/><text x="96.1426%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="95.8926%" y="165" width="0.0790%" height="15" fill="rgb(251,178,7)" fg:x="1214" fg:w="1"/><text x="96.1426%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.8926%" y="149" width="0.0790%" height="15" fill="rgb(213,154,26)" fg:x="1214" fg:w="1"/><text x="96.1426%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="95.9716%" y="197" width="0.0790%" height="15" fill="rgb(238,165,49)" fg:x="1215" fg:w="1"/><text x="96.2216%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.32%)</title><rect x="95.8136%" y="245" width="0.3160%" height="15" fill="rgb(248,91,46)" fg:x="1213" fg:w="4"/><text x="96.0636%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="95.8926%" y="229" width="0.2370%" height="15" fill="rgb(244,21,52)" fg:x="1214" fg:w="3"/><text x="96.1426%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="95.9716%" y="213" width="0.1580%" height="15" fill="rgb(247,122,20)" fg:x="1215" fg:w="2"/><text x="96.2216%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="96.0506%" y="197" width="0.0790%" height="15" fill="rgb(218,27,9)" fg:x="1216" fg:w="1"/><text x="96.3006%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (7 samples, 0.55%)</title><rect x="95.7346%" y="293" width="0.5529%" height="15" fill="rgb(246,7,6)" fg:x="1212" fg:w="7"/><text x="95.9846%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (7 samples, 0.55%)</title><rect x="95.7346%" y="277" width="0.5529%" height="15" fill="rgb(227,135,54)" fg:x="1212" fg:w="7"/><text x="95.9846%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (7 samples, 0.55%)</title><rect x="95.7346%" y="261" width="0.5529%" height="15" fill="rgb(247,14,11)" fg:x="1212" fg:w="7"/><text x="95.9846%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="96.1295%" y="245" width="0.1580%" height="15" fill="rgb(206,149,34)" fg:x="1217" fg:w="2"/><text x="96.3795%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.1295%" y="229" width="0.1580%" height="15" fill="rgb(227,228,4)" fg:x="1217" fg:w="2"/><text x="96.3795%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.2085%" y="213" width="0.0790%" height="15" fill="rgb(238,218,28)" fg:x="1218" fg:w="1"/><text x="96.4585%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.2085%" y="197" width="0.0790%" height="15" fill="rgb(252,86,40)" fg:x="1218" fg:w="1"/><text x="96.4585%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.2085%" y="181" width="0.0790%" height="15" fill="rgb(251,225,11)" fg:x="1218" fg:w="1"/><text x="96.4585%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.2085%" y="165" width="0.0790%" height="15" fill="rgb(206,46,49)" fg:x="1218" fg:w="1"/><text x="96.4585%" y="175.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (10 samples, 0.79%)</title><rect x="95.6556%" y="309" width="0.7899%" height="15" fill="rgb(245,128,24)" fg:x="1211" fg:w="10"/><text x="95.9056%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="96.2875%" y="293" width="0.1580%" height="15" fill="rgb(219,177,34)" fg:x="1219" fg:w="2"/><text x="96.5375%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="96.2875%" y="277" width="0.1580%" height="15" fill="rgb(218,60,48)" fg:x="1219" fg:w="2"/><text x="96.5375%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="96.2875%" y="261" width="0.1580%" height="15" fill="rgb(221,11,5)" fg:x="1219" fg:w="2"/><text x="96.5375%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="96.2875%" y="245" width="0.1580%" height="15" fill="rgb(220,148,13)" fg:x="1219" fg:w="2"/><text x="96.5375%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="96.2875%" y="229" width="0.1580%" height="15" fill="rgb(210,16,3)" fg:x="1219" fg:w="2"/><text x="96.5375%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="96.3665%" y="213" width="0.0790%" height="15" fill="rgb(236,80,2)" fg:x="1220" fg:w="1"/><text x="96.6165%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (168 samples, 13.27%)</title><rect x="83.2543%" y="405" width="13.2701%" height="15" fill="rgb(239,129,19)" fg:x="1054" fg:w="168"/><text x="83.5043%" y="415.50">&lt;&amp;kernel::model::Ent..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (154 samples, 12.16%)</title><rect x="84.3602%" y="389" width="12.1643%" height="15" fill="rgb(220,106,35)" fg:x="1068" fg:w="154"/><text x="84.6102%" y="399.50">plugins_core::look..</text></g><g><title>indefinite::indefinite (154 samples, 12.16%)</title><rect x="84.3602%" y="373" width="12.1643%" height="15" fill="rgb(252,139,45)" fg:x="1068" fg:w="154"/><text x="84.6102%" y="383.50">indefinite::indefi..</text></g><g><title>indefinite::methods::indefinite (154 samples, 12.16%)</title><rect x="84.3602%" y="357" width="12.1643%" height="15" fill="rgb(229,8,36)" fg:x="1068" fg:w="154"/><text x="84.6102%" y="367.50">indefinite::method..</text></g><g><title>indefinite::methods::apply_rules (154 samples, 12.16%)</title><rect x="84.3602%" y="341" width="12.1643%" height="15" fill="rgb(230,126,33)" fg:x="1068" fg:w="154"/><text x="84.6102%" y="351.50">indefinite::method..</text></g><g><title>indefinite::rules::other::Other::run (11 samples, 0.87%)</title><rect x="95.6556%" y="325" width="0.8689%" height="15" fill="rgb(239,140,21)" fg:x="1211" fg:w="11"/><text x="95.9056%" y="335.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="96.4455%" y="309" width="0.0790%" height="15" fill="rgb(254,104,9)" fg:x="1221" fg:w="1"/><text x="96.6955%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="96.5245%" y="405" width="0.0790%" height="15" fill="rgb(239,52,14)" fg:x="1222" fg:w="1"/><text x="96.7745%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.5245%" y="389" width="0.0790%" height="15" fill="rgb(208,227,44)" fg:x="1222" fg:w="1"/><text x="96.7745%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="96.6035%" y="373" width="0.0790%" height="15" fill="rgb(246,18,19)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.6035%" y="357" width="0.0790%" height="15" fill="rgb(235,228,25)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.6035%" y="341" width="0.0790%" height="15" fill="rgb(240,156,20)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.6035%" y="325" width="0.0790%" height="15" fill="rgb(224,8,20)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.6035%" y="309" width="0.0790%" height="15" fill="rgb(214,12,52)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.6035%" y="293" width="0.0790%" height="15" fill="rgb(211,220,47)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.6035%" y="277" width="0.0790%" height="15" fill="rgb(250,173,5)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.6035%" y="261" width="0.0790%" height="15" fill="rgb(250,125,52)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.6035%" y="245" width="0.0790%" height="15" fill="rgb(209,133,18)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.6035%" y="229" width="0.0790%" height="15" fill="rgb(216,173,22)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.6035%" y="213" width="0.0790%" height="15" fill="rgb(205,3,22)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.6035%" y="197" width="0.0790%" height="15" fill="rgb(248,22,20)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.6035%" y="181" width="0.0790%" height="15" fill="rgb(233,6,29)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.6035%" y="165" width="0.0790%" height="15" fill="rgb(240,22,54)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.6035%" y="149" width="0.0790%" height="15" fill="rgb(231,133,32)" fg:x="1223" fg:w="1"/><text x="96.8535%" y="159.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (2 samples, 0.16%)</title><rect x="96.6035%" y="389" width="0.1580%" height="15" fill="rgb(248,193,4)" fg:x="1223" fg:w="2"/><text x="96.8535%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="96.6825%" y="373" width="0.0790%" height="15" fill="rgb(211,178,46)" fg:x="1224" fg:w="1"/><text x="96.9325%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.6825%" y="357" width="0.0790%" height="15" fill="rgb(224,5,42)" fg:x="1224" fg:w="1"/><text x="96.9325%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.6825%" y="341" width="0.0790%" height="15" fill="rgb(239,176,25)" fg:x="1224" fg:w="1"/><text x="96.9325%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7615%" y="325" width="0.0790%" height="15" fill="rgb(245,187,50)" fg:x="1225" fg:w="1"/><text x="97.0115%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7615%" y="309" width="0.0790%" height="15" fill="rgb(248,24,15)" fg:x="1225" fg:w="1"/><text x="97.0115%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7615%" y="293" width="0.0790%" height="15" fill="rgb(205,166,13)" fg:x="1225" fg:w="1"/><text x="97.0115%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7615%" y="277" width="0.0790%" height="15" fill="rgb(208,114,23)" fg:x="1225" fg:w="1"/><text x="97.0115%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7615%" y="261" width="0.0790%" height="15" fill="rgb(239,127,18)" fg:x="1225" fg:w="1"/><text x="97.0115%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7615%" y="245" width="0.0790%" height="15" fill="rgb(219,154,28)" fg:x="1225" fg:w="1"/><text x="97.0115%" y="255.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="96.8404%" y="325" width="0.0790%" height="15" fill="rgb(225,157,23)" fg:x="1226" fg:w="1"/><text x="97.0904%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.8404%" y="309" width="0.0790%" height="15" fill="rgb(219,8,6)" fg:x="1226" fg:w="1"/><text x="97.0904%" y="319.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.9194%" y="277" width="0.0790%" height="15" fill="rgb(212,47,6)" fg:x="1227" fg:w="1"/><text x="97.1694%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="96.9194%" y="325" width="0.2370%" height="15" fill="rgb(224,190,4)" fg:x="1227" fg:w="3"/><text x="97.1694%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="96.9194%" y="309" width="0.2370%" height="15" fill="rgb(239,183,29)" fg:x="1227" fg:w="3"/><text x="97.1694%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="96.9194%" y="293" width="0.2370%" height="15" fill="rgb(213,57,7)" fg:x="1227" fg:w="3"/><text x="97.1694%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="96.9984%" y="277" width="0.1580%" height="15" fill="rgb(216,148,1)" fg:x="1228" fg:w="2"/><text x="97.2484%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.9984%" y="261" width="0.1580%" height="15" fill="rgb(236,182,29)" fg:x="1228" fg:w="2"/><text x="97.2484%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="96.9984%" y="245" width="0.1580%" height="15" fill="rgb(244,120,48)" fg:x="1228" fg:w="2"/><text x="97.2484%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.9984%" y="229" width="0.1580%" height="15" fill="rgb(206,71,34)" fg:x="1228" fg:w="2"/><text x="97.2484%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="96.9984%" y="213" width="0.1580%" height="15" fill="rgb(242,32,6)" fg:x="1228" fg:w="2"/><text x="97.2484%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="96.9984%" y="197" width="0.1580%" height="15" fill="rgb(241,35,3)" fg:x="1228" fg:w="2"/><text x="97.2484%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.9984%" y="181" width="0.1580%" height="15" fill="rgb(222,62,19)" fg:x="1228" fg:w="2"/><text x="97.2484%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="96.9984%" y="165" width="0.1580%" height="15" fill="rgb(223,110,41)" fg:x="1228" fg:w="2"/><text x="97.2484%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.0774%" y="149" width="0.0790%" height="15" fill="rgb(208,224,4)" fg:x="1229" fg:w="1"/><text x="97.3274%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.0774%" y="133" width="0.0790%" height="15" fill="rgb(241,137,19)" fg:x="1229" fg:w="1"/><text x="97.3274%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2354%" y="245" width="0.0790%" height="15" fill="rgb(244,24,17)" fg:x="1231" fg:w="1"/><text x="97.4854%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.2354%" y="229" width="0.0790%" height="15" fill="rgb(245,178,49)" fg:x="1231" fg:w="1"/><text x="97.4854%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2354%" y="213" width="0.0790%" height="15" fill="rgb(219,160,38)" fg:x="1231" fg:w="1"/><text x="97.4854%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.2354%" y="197" width="0.0790%" height="15" fill="rgb(228,137,14)" fg:x="1231" fg:w="1"/><text x="97.4854%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2354%" y="181" width="0.0790%" height="15" fill="rgb(237,134,11)" fg:x="1231" fg:w="1"/><text x="97.4854%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.2354%" y="165" width="0.0790%" height="15" fill="rgb(211,126,44)" fg:x="1231" fg:w="1"/><text x="97.4854%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2354%" y="149" width="0.0790%" height="15" fill="rgb(226,171,33)" fg:x="1231" fg:w="1"/><text x="97.4854%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.2354%" y="133" width="0.0790%" height="15" fill="rgb(253,99,13)" fg:x="1231" fg:w="1"/><text x="97.4854%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2354%" y="117" width="0.0790%" height="15" fill="rgb(244,48,7)" fg:x="1231" fg:w="1"/><text x="97.4854%" y="127.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (185 samples, 14.61%)</title><rect x="82.7804%" y="565" width="14.6130%" height="15" fill="rgb(244,217,54)" fg:x="1048" fg:w="185"/><text x="83.0304%" y="575.50">kernel::plugins::mw::M..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (185 samples, 14.61%)</title><rect x="82.7804%" y="549" width="14.6130%" height="15" fill="rgb(224,15,18)" fg:x="1048" fg:w="185"/><text x="83.0304%" y="559.50">&lt;plugins_dynlib::Dynam..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (185 samples, 14.61%)</title><rect x="82.7804%" y="533" width="14.6130%" height="15" fill="rgb(244,99,12)" fg:x="1048" fg:w="185"/><text x="83.0304%" y="543.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (185 samples, 14.61%)</title><rect x="82.7804%" y="517" width="14.6130%" height="15" fill="rgb(233,226,8)" fg:x="1048" fg:w="185"/><text x="83.0304%" y="527.50">core::ops::function::F..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (185 samples, 14.61%)</title><rect x="82.7804%" y="501" width="14.6130%" height="15" fill="rgb(229,211,3)" fg:x="1048" fg:w="185"/><text x="83.0304%" y="511.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (185 samples, 14.61%)</title><rect x="82.7804%" y="485" width="14.6130%" height="15" fill="rgb(216,140,21)" fg:x="1048" fg:w="185"/><text x="83.0304%" y="495.50">core::ops::function::F..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (185 samples, 14.61%)</title><rect x="82.7804%" y="469" width="14.6130%" height="15" fill="rgb(234,122,30)" fg:x="1048" fg:w="185"/><text x="83.0304%" y="479.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (185 samples, 14.61%)</title><rect x="82.7804%" y="453" width="14.6130%" height="15" fill="rgb(236,25,46)" fg:x="1048" fg:w="185"/><text x="83.0304%" y="463.50">&lt;engine::session::stat..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (184 samples, 14.53%)</title><rect x="82.8594%" y="437" width="14.5340%" height="15" fill="rgb(217,52,54)" fg:x="1049" fg:w="184"/><text x="83.1094%" y="447.50">&lt;plugins_core::looking..</text></g><g><title>plugins_core::looking::model::new_area_observation (179 samples, 14.14%)</title><rect x="83.2543%" y="421" width="14.1390%" height="15" fill="rgb(222,29,26)" fg:x="1054" fg:w="179"/><text x="83.5043%" y="431.50">plugins_core::looking..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.79%)</title><rect x="96.6035%" y="405" width="0.7899%" height="15" fill="rgb(216,177,29)" fg:x="1223" fg:w="10"/><text x="96.8535%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.63%)</title><rect x="96.7615%" y="389" width="0.6319%" height="15" fill="rgb(247,136,51)" fg:x="1225" fg:w="8"/><text x="97.0115%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.63%)</title><rect x="96.7615%" y="373" width="0.6319%" height="15" fill="rgb(231,47,47)" fg:x="1225" fg:w="8"/><text x="97.0115%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.63%)</title><rect x="96.7615%" y="357" width="0.6319%" height="15" fill="rgb(211,192,36)" fg:x="1225" fg:w="8"/><text x="97.0115%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.63%)</title><rect x="96.7615%" y="341" width="0.6319%" height="15" fill="rgb(229,156,32)" fg:x="1225" fg:w="8"/><text x="97.0115%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="97.1564%" y="325" width="0.2370%" height="15" fill="rgb(248,213,20)" fg:x="1230" fg:w="3"/><text x="97.4064%" y="335.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="97.1564%" y="309" width="0.2370%" height="15" fill="rgb(217,64,7)" fg:x="1230" fg:w="3"/><text x="97.4064%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.1564%" y="293" width="0.2370%" height="15" fill="rgb(232,142,8)" fg:x="1230" fg:w="3"/><text x="97.4064%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.1564%" y="277" width="0.2370%" height="15" fill="rgb(224,92,44)" fg:x="1230" fg:w="3"/><text x="97.4064%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.1564%" y="261" width="0.2370%" height="15" fill="rgb(214,169,17)" fg:x="1230" fg:w="3"/><text x="97.4064%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3144%" y="245" width="0.0790%" height="15" fill="rgb(210,59,37)" fg:x="1232" fg:w="1"/><text x="97.5644%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.4724%" y="517" width="0.0790%" height="15" fill="rgb(214,116,48)" fg:x="1234" fg:w="1"/><text x="97.7224%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.4724%" y="501" width="0.0790%" height="15" fill="rgb(244,191,6)" fg:x="1234" fg:w="1"/><text x="97.7224%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4724%" y="485" width="0.0790%" height="15" fill="rgb(241,50,52)" fg:x="1234" fg:w="1"/><text x="97.7224%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.5513%" y="293" width="0.0790%" height="15" fill="rgb(236,75,39)" fg:x="1235" fg:w="1"/><text x="97.8013%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.5513%" y="277" width="0.0790%" height="15" fill="rgb(236,99,0)" fg:x="1235" fg:w="1"/><text x="97.8013%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.5513%" y="261" width="0.0790%" height="15" fill="rgb(207,202,15)" fg:x="1235" fg:w="1"/><text x="97.8013%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.5513%" y="325" width="0.1580%" height="15" fill="rgb(233,207,14)" fg:x="1235" fg:w="2"/><text x="97.8013%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.5513%" y="309" width="0.1580%" height="15" fill="rgb(226,27,51)" fg:x="1235" fg:w="2"/><text x="97.8013%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="97.6303%" y="293" width="0.0790%" height="15" fill="rgb(206,104,42)" fg:x="1236" fg:w="1"/><text x="97.8803%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.6303%" y="277" width="0.0790%" height="15" fill="rgb(212,225,4)" fg:x="1236" fg:w="1"/><text x="97.8803%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6303%" y="261" width="0.0790%" height="15" fill="rgb(233,96,42)" fg:x="1236" fg:w="1"/><text x="97.8803%" y="271.50"></text></g><g><title>plugins_core::tools::contained_by (4 samples, 0.32%)</title><rect x="97.4724%" y="533" width="0.3160%" height="15" fill="rgb(229,21,32)" fg:x="1234" fg:w="4"/><text x="97.7224%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="97.5513%" y="517" width="0.2370%" height="15" fill="rgb(226,216,24)" fg:x="1235" fg:w="3"/><text x="97.8013%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="97.5513%" y="501" width="0.2370%" height="15" fill="rgb(221,163,17)" fg:x="1235" fg:w="3"/><text x="97.8013%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="97.5513%" y="485" width="0.2370%" height="15" fill="rgb(216,216,42)" fg:x="1235" fg:w="3"/><text x="97.8013%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="97.5513%" y="469" width="0.2370%" height="15" fill="rgb(240,118,7)" fg:x="1235" fg:w="3"/><text x="97.8013%" y="479.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="97.5513%" y="453" width="0.2370%" height="15" fill="rgb(221,67,37)" fg:x="1235" fg:w="3"/><text x="97.8013%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="97.5513%" y="437" width="0.2370%" height="15" fill="rgb(241,32,44)" fg:x="1235" fg:w="3"/><text x="97.8013%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.5513%" y="421" width="0.2370%" height="15" fill="rgb(235,204,43)" fg:x="1235" fg:w="3"/><text x="97.8013%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="97.5513%" y="405" width="0.2370%" height="15" fill="rgb(213,116,10)" fg:x="1235" fg:w="3"/><text x="97.8013%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.5513%" y="389" width="0.2370%" height="15" fill="rgb(239,15,48)" fg:x="1235" fg:w="3"/><text x="97.8013%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.5513%" y="373" width="0.2370%" height="15" fill="rgb(207,123,36)" fg:x="1235" fg:w="3"/><text x="97.8013%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.5513%" y="357" width="0.2370%" height="15" fill="rgb(209,103,30)" fg:x="1235" fg:w="3"/><text x="97.8013%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.5513%" y="341" width="0.2370%" height="15" fill="rgb(238,100,19)" fg:x="1235" fg:w="3"/><text x="97.8013%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.7093%" y="325" width="0.0790%" height="15" fill="rgb(244,30,14)" fg:x="1237" fg:w="1"/><text x="97.9593%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7883%" y="501" width="0.0790%" height="15" fill="rgb(249,174,6)" fg:x="1238" fg:w="1"/><text x="98.0383%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7883%" y="485" width="0.0790%" height="15" fill="rgb(235,213,41)" fg:x="1238" fg:w="1"/><text x="98.0383%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7883%" y="469" width="0.0790%" height="15" fill="rgb(213,118,6)" fg:x="1238" fg:w="1"/><text x="98.0383%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7883%" y="453" width="0.0790%" height="15" fill="rgb(235,44,51)" fg:x="1238" fg:w="1"/><text x="98.0383%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7883%" y="437" width="0.0790%" height="15" fill="rgb(217,9,53)" fg:x="1238" fg:w="1"/><text x="98.0383%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.7883%" y="421" width="0.0790%" height="15" fill="rgb(237,172,34)" fg:x="1238" fg:w="1"/><text x="98.0383%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.7883%" y="405" width="0.0790%" height="15" fill="rgb(206,206,11)" fg:x="1238" fg:w="1"/><text x="98.0383%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.7883%" y="389" width="0.0790%" height="15" fill="rgb(214,149,29)" fg:x="1238" fg:w="1"/><text x="98.0383%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="97.7883%" y="373" width="0.0790%" height="15" fill="rgb(208,123,3)" fg:x="1238" fg:w="1"/><text x="98.0383%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="97.7883%" y="357" width="0.0790%" height="15" fill="rgb(229,126,4)" fg:x="1238" fg:w="1"/><text x="98.0383%" y="367.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (7 samples, 0.55%)</title><rect x="97.3934%" y="549" width="0.5529%" height="15" fill="rgb(222,92,36)" fg:x="1233" fg:w="7"/><text x="97.6434%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="97.7883%" y="533" width="0.1580%" height="15" fill="rgb(216,39,41)" fg:x="1238" fg:w="2"/><text x="98.0383%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.7883%" y="517" width="0.1580%" height="15" fill="rgb(253,127,28)" fg:x="1238" fg:w="2"/><text x="98.0383%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="97.8673%" y="501" width="0.0790%" height="15" fill="rgb(249,152,51)" fg:x="1239" fg:w="1"/><text x="98.1173%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.8673%" y="485" width="0.0790%" height="15" fill="rgb(209,123,42)" fg:x="1239" fg:w="1"/><text x="98.1173%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="97.8673%" y="469" width="0.0790%" height="15" fill="rgb(241,118,22)" fg:x="1239" fg:w="1"/><text x="98.1173%" y="479.50"></text></g><g><title>engine::session::Session::captured (207 samples, 16.35%)</title><rect x="81.6746%" y="709" width="16.3507%" height="15" fill="rgb(208,25,7)" fg:x="1034" fg:w="207"/><text x="81.9246%" y="719.50">engine::session::Session:..</text></g><g><title>engine::session::logs::capture (203 samples, 16.03%)</title><rect x="81.9905%" y="693" width="16.0348%" height="15" fill="rgb(243,144,39)" fg:x="1038" fg:w="203"/><text x="82.2405%" y="703.50">engine::session::logs::ca..</text></g><g><title>tracing_core::dispatcher::with_default (202 samples, 15.96%)</title><rect x="82.0695%" y="677" width="15.9558%" height="15" fill="rgb(250,50,5)" fg:x="1039" fg:w="202"/><text x="82.3195%" y="687.50">tracing_core::dispatcher:..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (202 samples, 15.96%)</title><rect x="82.0695%" y="661" width="15.9558%" height="15" fill="rgb(207,67,11)" fg:x="1039" fg:w="202"/><text x="82.3195%" y="671.50">&lt;engine::session::Session..</text></g><g><title>kernel::plugins::mw::apply_middleware (202 samples, 15.96%)</title><rect x="82.0695%" y="645" width="15.9558%" height="15" fill="rgb(245,204,40)" fg:x="1039" fg:w="202"/><text x="82.3195%" y="655.50">kernel::plugins::mw::appl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (202 samples, 15.96%)</title><rect x="82.0695%" y="629" width="15.9558%" height="15" fill="rgb(238,228,24)" fg:x="1039" fg:w="202"/><text x="82.3195%" y="639.50">kernel::plugins::mw::Midd..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (202 samples, 15.96%)</title><rect x="82.0695%" y="613" width="15.9558%" height="15" fill="rgb(217,116,22)" fg:x="1039" fg:w="202"/><text x="82.3195%" y="623.50">&lt;engine::session::ExpandS..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (193 samples, 15.24%)</title><rect x="82.7804%" y="597" width="15.2449%" height="15" fill="rgb(234,98,12)" fg:x="1048" fg:w="193"/><text x="83.0304%" y="607.50">kernel::plugins::mw::Mi..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (193 samples, 15.24%)</title><rect x="82.7804%" y="581" width="15.2449%" height="15" fill="rgb(242,170,50)" fg:x="1048" fg:w="193"/><text x="83.0304%" y="591.50">&lt;plugins_rune::RuneMidd..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (8 samples, 0.63%)</title><rect x="97.3934%" y="565" width="0.6319%" height="15" fill="rgb(235,7,5)" fg:x="1233" fg:w="8"/><text x="97.6434%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::new_from_surroundings (1 samples, 0.08%)</title><rect x="97.9463%" y="549" width="0.0790%" height="15" fill="rgb(241,114,28)" fg:x="1240" fg:w="1"/><text x="98.1963%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9463%" y="533" width="0.0790%" height="15" fill="rgb(246,112,42)" fg:x="1240" fg:w="1"/><text x="98.1963%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0253%" y="645" width="0.0790%" height="15" fill="rgb(248,228,14)" fg:x="1241" fg:w="1"/><text x="98.2753%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0253%" y="629" width="0.0790%" height="15" fill="rgb(208,133,18)" fg:x="1241" fg:w="1"/><text x="98.2753%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0253%" y="613" width="0.0790%" height="15" fill="rgb(207,35,49)" fg:x="1241" fg:w="1"/><text x="98.2753%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.0253%" y="597" width="0.0790%" height="15" fill="rgb(205,68,36)" fg:x="1241" fg:w="1"/><text x="98.2753%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.0253%" y="581" width="0.0790%" height="15" fill="rgb(245,62,40)" fg:x="1241" fg:w="1"/><text x="98.2753%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.0253%" y="565" width="0.0790%" height="15" fill="rgb(228,27,24)" fg:x="1241" fg:w="1"/><text x="98.2753%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0253%" y="549" width="0.0790%" height="15" fill="rgb(253,19,12)" fg:x="1241" fg:w="1"/><text x="98.2753%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0253%" y="533" width="0.0790%" height="15" fill="rgb(232,28,20)" fg:x="1241" fg:w="1"/><text x="98.2753%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.0253%" y="517" width="0.0790%" height="15" fill="rgb(218,35,51)" fg:x="1241" fg:w="1"/><text x="98.2753%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.0253%" y="501" width="0.0790%" height="15" fill="rgb(212,90,40)" fg:x="1241" fg:w="1"/><text x="98.2753%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.0253%" y="485" width="0.0790%" height="15" fill="rgb(220,172,12)" fg:x="1241" fg:w="1"/><text x="98.2753%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.0253%" y="469" width="0.0790%" height="15" fill="rgb(226,159,20)" fg:x="1241" fg:w="1"/><text x="98.2753%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0253%" y="453" width="0.0790%" height="15" fill="rgb(234,205,16)" fg:x="1241" fg:w="1"/><text x="98.2753%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.0253%" y="661" width="0.1580%" height="15" fill="rgb(207,9,39)" fg:x="1241" fg:w="2"/><text x="98.2753%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1043%" y="645" width="0.0790%" height="15" fill="rgb(249,143,15)" fg:x="1242" fg:w="1"/><text x="98.3543%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1043%" y="629" width="0.0790%" height="15" fill="rgb(253,133,29)" fg:x="1242" fg:w="1"/><text x="98.3543%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.1043%" y="613" width="0.0790%" height="15" fill="rgb(221,187,0)" fg:x="1242" fg:w="1"/><text x="98.3543%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.1043%" y="597" width="0.0790%" height="15" fill="rgb(205,204,26)" fg:x="1242" fg:w="1"/><text x="98.3543%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.1043%" y="581" width="0.0790%" height="15" fill="rgb(224,68,54)" fg:x="1242" fg:w="1"/><text x="98.3543%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1043%" y="565" width="0.0790%" height="15" fill="rgb(209,67,4)" fg:x="1242" fg:w="1"/><text x="98.3543%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1043%" y="549" width="0.0790%" height="15" fill="rgb(228,229,18)" fg:x="1242" fg:w="1"/><text x="98.3543%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.1043%" y="533" width="0.0790%" height="15" fill="rgb(231,89,13)" fg:x="1242" fg:w="1"/><text x="98.3543%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.1043%" y="517" width="0.0790%" height="15" fill="rgb(210,182,18)" fg:x="1242" fg:w="1"/><text x="98.3543%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.1043%" y="501" width="0.0790%" height="15" fill="rgb(240,105,2)" fg:x="1242" fg:w="1"/><text x="98.3543%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.1043%" y="485" width="0.0790%" height="15" fill="rgb(207,170,50)" fg:x="1242" fg:w="1"/><text x="98.3543%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1043%" y="469" width="0.0790%" height="15" fill="rgb(232,133,24)" fg:x="1242" fg:w="1"/><text x="98.3543%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1833%" y="613" width="0.0790%" height="15" fill="rgb(235,166,27)" fg:x="1243" fg:w="1"/><text x="98.4333%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1833%" y="597" width="0.0790%" height="15" fill="rgb(209,19,13)" fg:x="1243" fg:w="1"/><text x="98.4333%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2622%" y="565" width="0.0790%" height="15" fill="rgb(226,79,39)" fg:x="1244" fg:w="1"/><text x="98.5122%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2622%" y="549" width="0.0790%" height="15" fill="rgb(222,163,10)" fg:x="1244" fg:w="1"/><text x="98.5122%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2622%" y="533" width="0.0790%" height="15" fill="rgb(214,44,19)" fg:x="1244" fg:w="1"/><text x="98.5122%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.3412%" y="517" width="0.0790%" height="15" fill="rgb(210,217,13)" fg:x="1245" fg:w="1"/><text x="98.5912%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.3412%" y="501" width="0.0790%" height="15" fill="rgb(237,61,54)" fg:x="1245" fg:w="1"/><text x="98.5912%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.3412%" y="485" width="0.0790%" height="15" fill="rgb(226,184,24)" fg:x="1245" fg:w="1"/><text x="98.5912%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3412%" y="469" width="0.0790%" height="15" fill="rgb(223,226,4)" fg:x="1245" fg:w="1"/><text x="98.5912%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3412%" y="453" width="0.0790%" height="15" fill="rgb(210,26,41)" fg:x="1245" fg:w="1"/><text x="98.5912%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="98.4202%" y="485" width="0.0790%" height="15" fill="rgb(220,221,6)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.4202%" y="469" width="0.0790%" height="15" fill="rgb(225,89,49)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.4202%" y="453" width="0.0790%" height="15" fill="rgb(218,70,45)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="98.4202%" y="437" width="0.0790%" height="15" fill="rgb(238,166,21)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.4202%" y="421" width="0.0790%" height="15" fill="rgb(224,141,44)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.4202%" y="405" width="0.0790%" height="15" fill="rgb(230,12,49)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.4202%" y="389" width="0.0790%" height="15" fill="rgb(212,174,12)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.4202%" y="373" width="0.0790%" height="15" fill="rgb(246,67,9)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.4202%" y="357" width="0.0790%" height="15" fill="rgb(239,35,23)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.4202%" y="341" width="0.0790%" height="15" fill="rgb(211,167,0)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="351.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="98.4202%" y="325" width="0.0790%" height="15" fill="rgb(225,119,45)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="98.4202%" y="309" width="0.0790%" height="15" fill="rgb(210,162,6)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="98.4202%" y="293" width="0.0790%" height="15" fill="rgb(208,118,35)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="98.4202%" y="277" width="0.0790%" height="15" fill="rgb(239,4,53)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.4202%" y="261" width="0.0790%" height="15" fill="rgb(213,130,21)" fg:x="1246" fg:w="1"/><text x="98.6702%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.3412%" y="565" width="0.2370%" height="15" fill="rgb(235,148,0)" fg:x="1245" fg:w="3"/><text x="98.5912%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.3412%" y="549" width="0.2370%" height="15" fill="rgb(244,224,18)" fg:x="1245" fg:w="3"/><text x="98.5912%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.3412%" y="533" width="0.2370%" height="15" fill="rgb(211,214,4)" fg:x="1245" fg:w="3"/><text x="98.5912%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.4202%" y="517" width="0.1580%" height="15" fill="rgb(206,119,25)" fg:x="1246" fg:w="2"/><text x="98.6702%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.4202%" y="501" width="0.1580%" height="15" fill="rgb(243,93,47)" fg:x="1246" fg:w="2"/><text x="98.6702%" y="511.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="98.4992%" y="485" width="0.0790%" height="15" fill="rgb(224,194,6)" fg:x="1247" fg:w="1"/><text x="98.7492%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="98.2622%" y="613" width="0.3949%" height="15" fill="rgb(243,229,6)" fg:x="1244" fg:w="5"/><text x="98.5122%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.39%)</title><rect x="98.2622%" y="597" width="0.3949%" height="15" fill="rgb(207,23,50)" fg:x="1244" fg:w="5"/><text x="98.5122%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.39%)</title><rect x="98.2622%" y="581" width="0.3949%" height="15" fill="rgb(253,192,32)" fg:x="1244" fg:w="5"/><text x="98.5122%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5782%" y="565" width="0.0790%" height="15" fill="rgb(213,21,6)" fg:x="1248" fg:w="1"/><text x="98.8282%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5782%" y="549" width="0.0790%" height="15" fill="rgb(243,151,13)" fg:x="1248" fg:w="1"/><text x="98.8282%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.5782%" y="533" width="0.0790%" height="15" fill="rgb(233,165,41)" fg:x="1248" fg:w="1"/><text x="98.8282%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.5782%" y="517" width="0.0790%" height="15" fill="rgb(246,176,45)" fg:x="1248" fg:w="1"/><text x="98.8282%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.6572%" y="533" width="0.0790%" height="15" fill="rgb(217,170,52)" fg:x="1249" fg:w="1"/><text x="98.9072%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.63%)</title><rect x="98.1833%" y="661" width="0.6319%" height="15" fill="rgb(214,203,54)" fg:x="1243" fg:w="8"/><text x="98.4333%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.63%)</title><rect x="98.1833%" y="645" width="0.6319%" height="15" fill="rgb(248,215,49)" fg:x="1243" fg:w="8"/><text x="98.4333%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.63%)</title><rect x="98.1833%" y="629" width="0.6319%" height="15" fill="rgb(208,46,10)" fg:x="1243" fg:w="8"/><text x="98.4333%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.6572%" y="613" width="0.1580%" height="15" fill="rgb(254,5,31)" fg:x="1249" fg:w="2"/><text x="98.9072%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.6572%" y="597" width="0.1580%" height="15" fill="rgb(222,104,33)" fg:x="1249" fg:w="2"/><text x="98.9072%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="98.6572%" y="581" width="0.1580%" height="15" fill="rgb(248,49,16)" fg:x="1249" fg:w="2"/><text x="98.9072%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="98.6572%" y="565" width="0.1580%" height="15" fill="rgb(232,198,41)" fg:x="1249" fg:w="2"/><text x="98.9072%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="98.6572%" y="549" width="0.1580%" height="15" fill="rgb(214,125,3)" fg:x="1249" fg:w="2"/><text x="98.9072%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7362%" y="533" width="0.0790%" height="15" fill="rgb(229,220,28)" fg:x="1250" fg:w="1"/><text x="98.9862%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.7362%" y="517" width="0.0790%" height="15" fill="rgb(222,64,37)" fg:x="1250" fg:w="1"/><text x="98.9862%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7362%" y="501" width="0.0790%" height="15" fill="rgb(249,184,13)" fg:x="1250" fg:w="1"/><text x="98.9862%" y="511.50"></text></g><g><title>engine::session::internal::Added::find_refs (12 samples, 0.95%)</title><rect x="98.0253%" y="693" width="0.9479%" height="15" fill="rgb(252,176,6)" fg:x="1241" fg:w="12"/><text x="98.2753%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (12 samples, 0.95%)</title><rect x="98.0253%" y="677" width="0.9479%" height="15" fill="rgb(228,153,7)" fg:x="1241" fg:w="12"/><text x="98.2753%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.8152%" y="661" width="0.1580%" height="15" fill="rgb(242,193,5)" fg:x="1251" fg:w="2"/><text x="99.0652%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.8152%" y="645" width="0.1580%" height="15" fill="rgb(232,140,9)" fg:x="1251" fg:w="2"/><text x="99.0652%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.8942%" y="629" width="0.0790%" height="15" fill="rgb(213,222,16)" fg:x="1252" fg:w="1"/><text x="99.1442%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="98.9731%" y="677" width="0.2370%" height="15" fill="rgb(222,75,50)" fg:x="1253" fg:w="3"/><text x="99.2231%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="98.9731%" y="661" width="0.2370%" height="15" fill="rgb(205,180,2)" fg:x="1253" fg:w="3"/><text x="99.2231%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="98.9731%" y="645" width="0.2370%" height="15" fill="rgb(216,34,7)" fg:x="1253" fg:w="3"/><text x="99.2231%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="98.9731%" y="629" width="0.2370%" height="15" fill="rgb(253,16,32)" fg:x="1253" fg:w="3"/><text x="99.2231%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="98.9731%" y="613" width="0.2370%" height="15" fill="rgb(208,97,28)" fg:x="1253" fg:w="3"/><text x="99.2231%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="98.9731%" y="597" width="0.2370%" height="15" fill="rgb(225,92,11)" fg:x="1253" fg:w="3"/><text x="99.2231%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="98.9731%" y="581" width="0.2370%" height="15" fill="rgb(243,38,12)" fg:x="1253" fg:w="3"/><text x="99.2231%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="98.9731%" y="565" width="0.2370%" height="15" fill="rgb(208,139,16)" fg:x="1253" fg:w="3"/><text x="99.2231%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.24%)</title><rect x="98.9731%" y="549" width="0.2370%" height="15" fill="rgb(227,24,9)" fg:x="1253" fg:w="3"/><text x="99.2231%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.24%)</title><rect x="98.9731%" y="533" width="0.2370%" height="15" fill="rgb(206,62,11)" fg:x="1253" fg:w="3"/><text x="99.2231%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.24%)</title><rect x="98.9731%" y="517" width="0.2370%" height="15" fill="rgb(228,134,27)" fg:x="1253" fg:w="3"/><text x="99.2231%" y="527.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.24%)</title><rect x="98.9731%" y="501" width="0.2370%" height="15" fill="rgb(205,55,33)" fg:x="1253" fg:w="3"/><text x="99.2231%" y="511.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="98.9731%" y="485" width="0.2370%" height="15" fill="rgb(243,75,43)" fg:x="1253" fg:w="3"/><text x="99.2231%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.2101%" y="677" width="0.0790%" height="15" fill="rgb(223,27,42)" fg:x="1256" fg:w="1"/><text x="99.4601%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2101%" y="661" width="0.0790%" height="15" fill="rgb(232,189,33)" fg:x="1256" fg:w="1"/><text x="99.4601%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2101%" y="645" width="0.0790%" height="15" fill="rgb(210,9,39)" fg:x="1256" fg:w="1"/><text x="99.4601%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.2101%" y="629" width="0.0790%" height="15" fill="rgb(242,85,26)" fg:x="1256" fg:w="1"/><text x="99.4601%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2101%" y="613" width="0.0790%" height="15" fill="rgb(248,44,4)" fg:x="1256" fg:w="1"/><text x="99.4601%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2101%" y="597" width="0.0790%" height="15" fill="rgb(250,96,46)" fg:x="1256" fg:w="1"/><text x="99.4601%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2101%" y="581" width="0.0790%" height="15" fill="rgb(229,116,26)" fg:x="1256" fg:w="1"/><text x="99.4601%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.2891%" y="597" width="0.0790%" height="15" fill="rgb(246,94,34)" fg:x="1257" fg:w="1"/><text x="99.5391%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.2891%" y="677" width="0.1580%" height="15" fill="rgb(251,73,21)" fg:x="1257" fg:w="2"/><text x="99.5391%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.2891%" y="661" width="0.1580%" height="15" fill="rgb(254,121,25)" fg:x="1257" fg:w="2"/><text x="99.5391%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.2891%" y="645" width="0.1580%" height="15" fill="rgb(215,161,49)" fg:x="1257" fg:w="2"/><text x="99.5391%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.2891%" y="629" width="0.1580%" height="15" fill="rgb(221,43,13)" fg:x="1257" fg:w="2"/><text x="99.5391%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.2891%" y="613" width="0.1580%" height="15" fill="rgb(249,5,37)" fg:x="1257" fg:w="2"/><text x="99.5391%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3681%" y="597" width="0.0790%" height="15" fill="rgb(226,25,44)" fg:x="1258" fg:w="1"/><text x="99.6181%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.3681%" y="581" width="0.0790%" height="15" fill="rgb(238,189,16)" fg:x="1258" fg:w="1"/><text x="99.6181%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.3681%" y="565" width="0.0790%" height="15" fill="rgb(251,186,8)" fg:x="1258" fg:w="1"/><text x="99.6181%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.3681%" y="549" width="0.0790%" height="15" fill="rgb(254,34,31)" fg:x="1258" fg:w="1"/><text x="99.6181%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.3681%" y="533" width="0.0790%" height="15" fill="rgb(225,215,27)" fg:x="1258" fg:w="1"/><text x="99.6181%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (20 samples, 1.58%)</title><rect x="98.0253%" y="709" width="1.5798%" height="15" fill="rgb(221,192,48)" fg:x="1241" fg:w="20"/><text x="98.2753%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.63%)</title><rect x="98.9731%" y="693" width="0.6319%" height="15" fill="rgb(219,137,20)" fg:x="1253" fg:w="8"/><text x="99.2231%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.4471%" y="677" width="0.1580%" height="15" fill="rgb(219,84,11)" fg:x="1259" fg:w="2"/><text x="99.6971%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.4471%" y="661" width="0.1580%" height="15" fill="rgb(224,10,23)" fg:x="1259" fg:w="2"/><text x="99.6971%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.4471%" y="645" width="0.1580%" height="15" fill="rgb(248,22,39)" fg:x="1259" fg:w="2"/><text x="99.6971%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.4471%" y="629" width="0.1580%" height="15" fill="rgb(212,154,20)" fg:x="1259" fg:w="2"/><text x="99.6971%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.4471%" y="613" width="0.1580%" height="15" fill="rgb(236,199,50)" fg:x="1259" fg:w="2"/><text x="99.6971%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5261%" y="597" width="0.0790%" height="15" fill="rgb(211,9,17)" fg:x="1260" fg:w="1"/><text x="99.7761%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="99.6051%" y="677" width="0.0790%" height="15" fill="rgb(243,216,36)" fg:x="1261" fg:w="1"/><text x="99.8551%" y="687.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6840%" y="565" width="0.0790%" height="15" fill="rgb(250,2,10)" fg:x="1262" fg:w="1"/><text x="99.9340%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6840%" y="549" width="0.0790%" height="15" fill="rgb(226,50,48)" fg:x="1262" fg:w="1"/><text x="99.9340%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7630%" y="565" width="0.0790%" height="15" fill="rgb(243,81,16)" fg:x="1263" fg:w="1"/><text x="100.0130%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.7630%" y="549" width="0.0790%" height="15" fill="rgb(250,14,2)" fg:x="1263" fg:w="1"/><text x="100.0130%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.6840%" y="597" width="0.2370%" height="15" fill="rgb(233,135,29)" fg:x="1262" fg:w="3"/><text x="99.9340%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.6840%" y="581" width="0.2370%" height="15" fill="rgb(224,64,43)" fg:x="1262" fg:w="3"/><text x="99.9340%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8420%" y="565" width="0.0790%" height="15" fill="rgb(238,84,13)" fg:x="1264" fg:w="1"/><text x="100.0920%" y="575.50"></text></g><g><title>all (1,266 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(253,48,26)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-c60e4ccb (1,266 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(205,223,31)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="1087.50">simple-c60e4ccb</text></g><g><title>_start (1,266 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(221,41,32)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,266 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(213,158,31)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,266 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(245,126,43)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,266 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(227,7,22)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,266 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(252,90,44)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,266 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(253,91,0)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,266 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(252,175,49)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,266 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(246,150,1)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,266 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(241,192,25)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,266 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(239,187,11)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,266 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(218,202,51)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,266 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(225,176,8)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,266 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(219,122,41)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,266 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(248,140,20)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,266 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(245,41,37)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,266 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(235,82,39)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,266 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(230,108,42)" fg:x="0" fg:w="1266"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (377 samples, 29.78%)</title><rect x="70.2212%" y="789" width="29.7788%" height="15" fill="rgb(215,150,50)" fg:x="889" fg:w="377"/><text x="70.4712%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterio..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (377 samples, 29.78%)</title><rect x="70.2212%" y="773" width="29.7788%" height="15" fill="rgb(233,212,5)" fg:x="889" fg:w="377"/><text x="70.4712%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (377 samples, 29.78%)</title><rect x="70.2212%" y="757" width="29.7788%" height="15" fill="rgb(245,80,22)" fg:x="889" fg:w="377"/><text x="70.4712%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (233 samples, 18.40%)</title><rect x="81.5956%" y="741" width="18.4044%" height="15" fill="rgb(238,129,16)" fg:x="1033" fg:w="233"/><text x="81.8456%" y="751.50">engine::session::Session::eva..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (233 samples, 18.40%)</title><rect x="81.5956%" y="725" width="18.4044%" height="15" fill="rgb(240,19,0)" fg:x="1033" fg:w="233"/><text x="81.8456%" y="735.50">engine::session::Session::eva..</text></g><g><title>kernel::model::EntityPtrResolver::world (5 samples, 0.39%)</title><rect x="99.6051%" y="709" width="0.3949%" height="15" fill="rgb(232,42,35)" fg:x="1261" fg:w="5"/><text x="99.8551%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.39%)</title><rect x="99.6051%" y="693" width="0.3949%" height="15" fill="rgb(223,130,24)" fg:x="1261" fg:w="5"/><text x="99.8551%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.6840%" y="677" width="0.3160%" height="15" fill="rgb(237,16,22)" fg:x="1262" fg:w="4"/><text x="99.9340%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="99.6840%" y="661" width="0.3160%" height="15" fill="rgb(248,192,20)" fg:x="1262" fg:w="4"/><text x="99.9340%" y="671.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="99.6840%" y="645" width="0.3160%" height="15" fill="rgb(233,167,2)" fg:x="1262" fg:w="4"/><text x="99.9340%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="99.6840%" y="629" width="0.3160%" height="15" fill="rgb(252,71,44)" fg:x="1262" fg:w="4"/><text x="99.9340%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="99.6840%" y="613" width="0.3160%" height="15" fill="rgb(238,37,47)" fg:x="1262" fg:w="4"/><text x="99.9340%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.9210%" y="597" width="0.0790%" height="15" fill="rgb(214,202,54)" fg:x="1265" fg:w="1"/><text x="100.1710%" y="607.50"></text></g></svg></svg>