<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1239"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="725" width="0.0807%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="709" width="0.0807%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>&lt;engine::session::Session as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0807%" y="725" width="0.0807%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3307%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.1614%" y="725" width="0.1614%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="2"/><text x="0.4114%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.1614%" y="709" width="0.1614%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="2"/><text x="0.4114%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.2421%" y="693" width="0.0807%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.4921%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="0.2421%" y="677" width="0.0807%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.4921%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2421%" y="661" width="0.0807%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.4921%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3228%" y="693" width="0.0807%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="0.5728%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4036%" y="645" width="0.0807%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="1"/><text x="0.6536%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4843%" y="613" width="0.0807%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="1"/><text x="0.7343%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="0.5650%" y="613" width="0.2421%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="3"/><text x="0.8150%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.6457%" y="597" width="0.1614%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="2"/><text x="0.8957%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.8878%" y="597" width="0.1614%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="2"/><text x="1.1378%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9685%" y="581" width="0.0807%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="1"/><text x="1.2185%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="1.0492%" y="597" width="0.0807%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="1"/><text x="1.2992%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.0492%" y="581" width="0.0807%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="1"/><text x="1.2992%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.0492%" y="565" width="0.0807%" height="15" fill="rgb(210,31,41)" fg:x="13" fg:w="1"/><text x="1.2992%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0492%" y="549" width="0.0807%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="1"/><text x="1.2992%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.1299%" y="581" width="0.1614%" height="15" fill="rgb(226,26,5)" fg:x="14" fg:w="2"/><text x="1.3799%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.97%)</title><rect x="0.4036%" y="661" width="0.9685%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="12"/><text x="0.6536%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (11 samples, 0.89%)</title><rect x="0.4843%" y="645" width="0.8878%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="11"/><text x="0.7343%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (11 samples, 0.89%)</title><rect x="0.4843%" y="629" width="0.8878%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="11"/><text x="0.7343%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="0.8071%" y="613" width="0.5650%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="7"/><text x="1.0571%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.1299%" y="597" width="0.2421%" height="15" fill="rgb(241,131,45)" fg:x="14" fg:w="3"/><text x="1.3799%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2914%" y="581" width="0.0807%" height="15" fill="rgb(249,31,29)" fg:x="16" fg:w="1"/><text x="1.5414%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2914%" y="565" width="0.0807%" height="15" fill="rgb(225,111,53)" fg:x="16" fg:w="1"/><text x="1.5414%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3721%" y="661" width="0.0807%" height="15" fill="rgb(238,160,17)" fg:x="17" fg:w="1"/><text x="1.6221%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.4528%" y="645" width="0.0807%" height="15" fill="rgb(214,148,48)" fg:x="18" fg:w="1"/><text x="1.7028%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4528%" y="629" width="0.0807%" height="15" fill="rgb(232,36,49)" fg:x="18" fg:w="1"/><text x="1.7028%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5335%" y="629" width="0.0807%" height="15" fill="rgb(209,103,24)" fg:x="19" fg:w="1"/><text x="1.7835%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.37%)</title><rect x="0.4036%" y="677" width="1.3721%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="17"/><text x="0.6536%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="1.4528%" y="661" width="0.3228%" height="15" fill="rgb(213,181,19)" fg:x="18" fg:w="4"/><text x="1.7028%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.5335%" y="645" width="0.2421%" height="15" fill="rgb(254,191,54)" fg:x="19" fg:w="3"/><text x="1.7835%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.6142%" y="629" width="0.1614%" height="15" fill="rgb(241,83,37)" fg:x="20" fg:w="2"/><text x="1.8642%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.6949%" y="613" width="0.0807%" height="15" fill="rgb(233,36,39)" fg:x="21" fg:w="1"/><text x="1.9449%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.6949%" y="597" width="0.0807%" height="15" fill="rgb(226,3,54)" fg:x="21" fg:w="1"/><text x="1.9449%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 1.86%)</title><rect x="0.0000%" y="741" width="1.8563%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="23"/><text x="0.2500%" y="751.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (19 samples, 1.53%)</title><rect x="0.3228%" y="725" width="1.5335%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="19"/><text x="0.5728%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.53%)</title><rect x="0.3228%" y="709" width="1.5335%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="19"/><text x="0.5728%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (18 samples, 1.45%)</title><rect x="0.4036%" y="693" width="1.4528%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="18"/><text x="0.6536%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7756%" y="677" width="0.0807%" height="15" fill="rgb(208,69,12)" fg:x="22" fg:w="1"/><text x="2.0256%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="1.9370%" y="645" width="0.0807%" height="15" fill="rgb(235,93,37)" fg:x="24" fg:w="1"/><text x="2.1870%" y="655.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="1.9370%" y="629" width="0.0807%" height="15" fill="rgb(213,116,39)" fg:x="24" fg:w="1"/><text x="2.1870%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="1.9370%" y="613" width="0.0807%" height="15" fill="rgb(222,207,29)" fg:x="24" fg:w="1"/><text x="2.1870%" y="623.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="1.9370%" y="597" width="0.0807%" height="15" fill="rgb(206,96,30)" fg:x="24" fg:w="1"/><text x="2.1870%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="1.9370%" y="581" width="0.0807%" height="15" fill="rgb(218,138,4)" fg:x="24" fg:w="1"/><text x="2.1870%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="1.9370%" y="565" width="0.0807%" height="15" fill="rgb(250,191,14)" fg:x="24" fg:w="1"/><text x="2.1870%" y="575.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="1.9370%" y="549" width="0.0807%" height="15" fill="rgb(239,60,40)" fg:x="24" fg:w="1"/><text x="2.1870%" y="559.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="1.9370%" y="533" width="0.0807%" height="15" fill="rgb(206,27,48)" fg:x="24" fg:w="1"/><text x="2.1870%" y="543.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.40%)</title><rect x="1.8563%" y="661" width="0.4036%" height="15" fill="rgb(225,35,8)" fg:x="23" fg:w="5"/><text x="2.1063%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="2.0178%" y="645" width="0.2421%" height="15" fill="rgb(250,213,24)" fg:x="25" fg:w="3"/><text x="2.2678%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="2.0178%" y="629" width="0.2421%" height="15" fill="rgb(247,123,22)" fg:x="25" fg:w="3"/><text x="2.2678%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="2.0178%" y="613" width="0.2421%" height="15" fill="rgb(231,138,38)" fg:x="25" fg:w="3"/><text x="2.2678%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="2.0178%" y="597" width="0.2421%" height="15" fill="rgb(231,145,46)" fg:x="25" fg:w="3"/><text x="2.2678%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="2.0178%" y="581" width="0.2421%" height="15" fill="rgb(251,118,11)" fg:x="25" fg:w="3"/><text x="2.2678%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="2.0178%" y="565" width="0.2421%" height="15" fill="rgb(217,147,25)" fg:x="25" fg:w="3"/><text x="2.2678%" y="575.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="2.0178%" y="549" width="0.2421%" height="15" fill="rgb(247,81,37)" fg:x="25" fg:w="3"/><text x="2.2678%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="2.2599%" y="645" width="0.1614%" height="15" fill="rgb(209,12,38)" fg:x="28" fg:w="2"/><text x="2.5099%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="2.2599%" y="629" width="0.1614%" height="15" fill="rgb(227,1,9)" fg:x="28" fg:w="2"/><text x="2.5099%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="2.2599%" y="613" width="0.1614%" height="15" fill="rgb(248,47,43)" fg:x="28" fg:w="2"/><text x="2.5099%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="2.2599%" y="597" width="0.1614%" height="15" fill="rgb(221,10,30)" fg:x="28" fg:w="2"/><text x="2.5099%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="2.2599%" y="581" width="0.1614%" height="15" fill="rgb(210,229,1)" fg:x="28" fg:w="2"/><text x="2.5099%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="2.2599%" y="565" width="0.1614%" height="15" fill="rgb(222,148,37)" fg:x="28" fg:w="2"/><text x="2.5099%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="2.2599%" y="549" width="0.1614%" height="15" fill="rgb(234,67,33)" fg:x="28" fg:w="2"/><text x="2.5099%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="2.2599%" y="533" width="0.1614%" height="15" fill="rgb(247,98,35)" fg:x="28" fg:w="2"/><text x="2.5099%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="2.2599%" y="517" width="0.1614%" height="15" fill="rgb(247,138,52)" fg:x="28" fg:w="2"/><text x="2.5099%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="2.2599%" y="501" width="0.1614%" height="15" fill="rgb(213,79,30)" fg:x="28" fg:w="2"/><text x="2.5099%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="2.2599%" y="485" width="0.1614%" height="15" fill="rgb(246,177,23)" fg:x="28" fg:w="2"/><text x="2.5099%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="2.2599%" y="469" width="0.1614%" height="15" fill="rgb(230,62,27)" fg:x="28" fg:w="2"/><text x="2.5099%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="2.2599%" y="453" width="0.1614%" height="15" fill="rgb(216,154,8)" fg:x="28" fg:w="2"/><text x="2.5099%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="2.2599%" y="437" width="0.1614%" height="15" fill="rgb(244,35,45)" fg:x="28" fg:w="2"/><text x="2.5099%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="2.2599%" y="421" width="0.1614%" height="15" fill="rgb(251,115,12)" fg:x="28" fg:w="2"/><text x="2.5099%" y="431.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="2.4213%" y="597" width="0.3228%" height="15" fill="rgb(240,54,50)" fg:x="30" fg:w="4"/><text x="2.6713%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="2.4213%" y="581" width="0.3228%" height="15" fill="rgb(233,84,52)" fg:x="30" fg:w="4"/><text x="2.6713%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="2.4213%" y="565" width="0.3228%" height="15" fill="rgb(207,117,47)" fg:x="30" fg:w="4"/><text x="2.6713%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="2.4213%" y="549" width="0.3228%" height="15" fill="rgb(249,43,39)" fg:x="30" fg:w="4"/><text x="2.6713%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="2.4213%" y="533" width="0.3228%" height="15" fill="rgb(209,38,44)" fg:x="30" fg:w="4"/><text x="2.6713%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="2.4213%" y="517" width="0.3228%" height="15" fill="rgb(236,212,23)" fg:x="30" fg:w="4"/><text x="2.6713%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="2.4213%" y="501" width="0.3228%" height="15" fill="rgb(242,79,21)" fg:x="30" fg:w="4"/><text x="2.6713%" y="511.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="2.5020%" y="485" width="0.2421%" height="15" fill="rgb(211,96,35)" fg:x="31" fg:w="3"/><text x="2.7520%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="2.4213%" y="629" width="0.5650%" height="15" fill="rgb(253,215,40)" fg:x="30" fg:w="7"/><text x="2.6713%" y="639.50"></text></g><g><title>glob::fill_todo (7 samples, 0.56%)</title><rect x="2.4213%" y="613" width="0.5650%" height="15" fill="rgb(211,81,21)" fg:x="30" fg:w="7"/><text x="2.6713%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="2.7441%" y="597" width="0.2421%" height="15" fill="rgb(208,190,38)" fg:x="34" fg:w="3"/><text x="2.9941%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="2.7441%" y="581" width="0.2421%" height="15" fill="rgb(235,213,38)" fg:x="34" fg:w="3"/><text x="2.9941%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="2.7441%" y="565" width="0.2421%" height="15" fill="rgb(237,122,38)" fg:x="34" fg:w="3"/><text x="2.9941%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="2.7441%" y="549" width="0.2421%" height="15" fill="rgb(244,218,35)" fg:x="34" fg:w="3"/><text x="2.9941%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="2.7441%" y="533" width="0.2421%" height="15" fill="rgb(240,68,47)" fg:x="34" fg:w="3"/><text x="2.9941%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="2.8249%" y="517" width="0.1614%" height="15" fill="rgb(210,16,53)" fg:x="35" fg:w="2"/><text x="3.0749%" y="527.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="2.8249%" y="501" width="0.1614%" height="15" fill="rgb(235,124,12)" fg:x="35" fg:w="2"/><text x="3.0749%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.9863%" y="581" width="0.0807%" height="15" fill="rgb(224,169,11)" fg:x="37" fg:w="1"/><text x="3.2363%" y="591.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (11 samples, 0.89%)</title><rect x="2.2599%" y="661" width="0.8878%" height="15" fill="rgb(250,166,2)" fg:x="28" fg:w="11"/><text x="2.5099%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (9 samples, 0.73%)</title><rect x="2.4213%" y="645" width="0.7264%" height="15" fill="rgb(242,216,29)" fg:x="30" fg:w="9"/><text x="2.6713%" y="655.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="2.9863%" y="629" width="0.1614%" height="15" fill="rgb(230,116,27)" fg:x="37" fg:w="2"/><text x="3.2363%" y="639.50"></text></g><g><title>glob::glob_with (2 samples, 0.16%)</title><rect x="2.9863%" y="613" width="0.1614%" height="15" fill="rgb(228,99,48)" fg:x="37" fg:w="2"/><text x="3.2363%" y="623.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.16%)</title><rect x="2.9863%" y="597" width="0.1614%" height="15" fill="rgb(253,11,6)" fg:x="37" fg:w="2"/><text x="3.2363%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.0670%" y="581" width="0.0807%" height="15" fill="rgb(247,143,39)" fg:x="38" fg:w="1"/><text x="3.3170%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.0670%" y="565" width="0.0807%" height="15" fill="rgb(236,97,10)" fg:x="38" fg:w="1"/><text x="3.3170%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0670%" y="549" width="0.0807%" height="15" fill="rgb(233,208,19)" fg:x="38" fg:w="1"/><text x="3.3170%" y="559.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="3.1477%" y="597" width="0.1614%" height="15" fill="rgb(216,164,2)" fg:x="39" fg:w="2"/><text x="3.3977%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.2284%" y="581" width="0.0807%" height="15" fill="rgb(220,129,5)" fg:x="40" fg:w="1"/><text x="3.4784%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="3.3091%" y="597" width="0.0807%" height="15" fill="rgb(242,17,10)" fg:x="41" fg:w="1"/><text x="3.5591%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3091%" y="581" width="0.0807%" height="15" fill="rgb(242,107,0)" fg:x="41" fg:w="1"/><text x="3.5591%" y="591.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.40%)</title><rect x="3.1477%" y="629" width="0.4036%" height="15" fill="rgb(251,28,31)" fg:x="39" fg:w="5"/><text x="3.3977%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.40%)</title><rect x="3.1477%" y="613" width="0.4036%" height="15" fill="rgb(233,223,10)" fg:x="39" fg:w="5"/><text x="3.3977%" y="623.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="3.3898%" y="597" width="0.1614%" height="15" fill="rgb(215,21,27)" fg:x="42" fg:w="2"/><text x="3.6398%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.4705%" y="581" width="0.0807%" height="15" fill="rgb(232,23,21)" fg:x="43" fg:w="1"/><text x="3.7205%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="3.6320%" y="597" width="0.1614%" height="15" fill="rgb(244,5,23)" fg:x="45" fg:w="2"/><text x="3.8820%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.7934%" y="597" width="0.0807%" height="15" fill="rgb(226,81,46)" fg:x="47" fg:w="1"/><text x="4.0434%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7934%" y="581" width="0.0807%" height="15" fill="rgb(247,70,30)" fg:x="47" fg:w="1"/><text x="4.0434%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.8741%" y="581" width="0.0807%" height="15" fill="rgb(212,68,19)" fg:x="48" fg:w="1"/><text x="4.1241%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (6 samples, 0.48%)</title><rect x="3.5513%" y="629" width="0.4843%" height="15" fill="rgb(240,187,13)" fg:x="44" fg:w="6"/><text x="3.8013%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (6 samples, 0.48%)</title><rect x="3.5513%" y="613" width="0.4843%" height="15" fill="rgb(223,113,26)" fg:x="44" fg:w="6"/><text x="3.8013%" y="623.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="3.8741%" y="597" width="0.1614%" height="15" fill="rgb(206,192,2)" fg:x="48" fg:w="2"/><text x="4.1241%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.9548%" y="581" width="0.0807%" height="15" fill="rgb(241,108,4)" fg:x="49" fg:w="1"/><text x="4.2048%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.9548%" y="565" width="0.0807%" height="15" fill="rgb(247,173,49)" fg:x="49" fg:w="1"/><text x="4.2048%" y="575.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="3.9548%" y="549" width="0.0807%" height="15" fill="rgb(224,114,35)" fg:x="49" fg:w="1"/><text x="4.2048%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="3.9548%" y="533" width="0.0807%" height="15" fill="rgb(245,159,27)" fg:x="49" fg:w="1"/><text x="4.2048%" y="543.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.0355%" y="629" width="0.0807%" height="15" fill="rgb(245,172,44)" fg:x="50" fg:w="1"/><text x="4.2855%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.0355%" y="613" width="0.0807%" height="15" fill="rgb(236,23,11)" fg:x="50" fg:w="1"/><text x="4.2855%" y="623.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.0355%" y="597" width="0.0807%" height="15" fill="rgb(205,117,38)" fg:x="50" fg:w="1"/><text x="4.2855%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.0355%" y="581" width="0.0807%" height="15" fill="rgb(237,72,25)" fg:x="50" fg:w="1"/><text x="4.2855%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.0355%" y="565" width="0.0807%" height="15" fill="rgb(244,70,9)" fg:x="50" fg:w="1"/><text x="4.2855%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.0355%" y="549" width="0.0807%" height="15" fill="rgb(217,125,39)" fg:x="50" fg:w="1"/><text x="4.2855%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0355%" y="533" width="0.0807%" height="15" fill="rgb(235,36,10)" fg:x="50" fg:w="1"/><text x="4.2855%" y="543.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.1162%" y="629" width="0.0807%" height="15" fill="rgb(251,123,47)" fg:x="51" fg:w="1"/><text x="4.3662%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.1162%" y="613" width="0.0807%" height="15" fill="rgb(221,13,13)" fg:x="51" fg:w="1"/><text x="4.3662%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.1162%" y="597" width="0.0807%" height="15" fill="rgb(238,131,9)" fg:x="51" fg:w="1"/><text x="4.3662%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.1969%" y="597" width="0.0807%" height="15" fill="rgb(211,50,8)" fg:x="52" fg:w="1"/><text x="4.4469%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.1969%" y="581" width="0.0807%" height="15" fill="rgb(245,182,24)" fg:x="52" fg:w="1"/><text x="4.4469%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1969%" y="565" width="0.0807%" height="15" fill="rgb(242,14,37)" fg:x="52" fg:w="1"/><text x="4.4469%" y="575.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="4.1969%" y="629" width="0.1614%" height="15" fill="rgb(246,228,12)" fg:x="52" fg:w="2"/><text x="4.4469%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="4.1969%" y="613" width="0.1614%" height="15" fill="rgb(213,55,15)" fg:x="52" fg:w="2"/><text x="4.4469%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.2776%" y="597" width="0.0807%" height="15" fill="rgb(209,9,3)" fg:x="53" fg:w="1"/><text x="4.5276%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.2776%" y="581" width="0.0807%" height="15" fill="rgb(230,59,30)" fg:x="53" fg:w="1"/><text x="4.5276%" y="591.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.3584%" y="629" width="0.0807%" height="15" fill="rgb(209,121,21)" fg:x="54" fg:w="1"/><text x="4.6084%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.3584%" y="613" width="0.0807%" height="15" fill="rgb(220,109,13)" fg:x="54" fg:w="1"/><text x="4.6084%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.3584%" y="597" width="0.0807%" height="15" fill="rgb(232,18,1)" fg:x="54" fg:w="1"/><text x="4.6084%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.3584%" y="581" width="0.0807%" height="15" fill="rgb(215,41,42)" fg:x="54" fg:w="1"/><text x="4.6084%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.4391%" y="629" width="0.0807%" height="15" fill="rgb(224,123,36)" fg:x="55" fg:w="1"/><text x="4.6891%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.4391%" y="613" width="0.0807%" height="15" fill="rgb(240,125,3)" fg:x="55" fg:w="1"/><text x="4.6891%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.4391%" y="597" width="0.0807%" height="15" fill="rgb(205,98,50)" fg:x="55" fg:w="1"/><text x="4.6891%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 1.45%)</title><rect x="3.1477%" y="661" width="1.4528%" height="15" fill="rgb(205,185,37)" fg:x="39" fg:w="18"/><text x="3.3977%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 1.45%)</title><rect x="3.1477%" y="645" width="1.4528%" height="15" fill="rgb(238,207,15)" fg:x="39" fg:w="18"/><text x="3.3977%" y="655.50"></text></g><g><title>kernel::plugins::Plugin::schema (1 samples, 0.08%)</title><rect x="4.5198%" y="629" width="0.0807%" height="15" fill="rgb(213,199,42)" fg:x="56" fg:w="1"/><text x="4.7698%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="4.6005%" y="661" width="0.0807%" height="15" fill="rgb(235,201,11)" fg:x="57" fg:w="1"/><text x="4.8505%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="4.6005%" y="645" width="0.0807%" height="15" fill="rgb(207,46,11)" fg:x="57" fg:w="1"/><text x="4.8505%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.6005%" y="629" width="0.0807%" height="15" fill="rgb(241,35,35)" fg:x="57" fg:w="1"/><text x="4.8505%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (36 samples, 2.91%)</title><rect x="1.8563%" y="677" width="2.9056%" height="15" fill="rgb(243,32,47)" fg:x="23" fg:w="36"/><text x="2.1063%" y="687.50">ke..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="4.6812%" y="661" width="0.0807%" height="15" fill="rgb(247,202,23)" fg:x="58" fg:w="1"/><text x="4.9312%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="4.6812%" y="645" width="0.0807%" height="15" fill="rgb(219,102,11)" fg:x="58" fg:w="1"/><text x="4.9312%" y="655.50"></text></g><g><title>engine::session::Session::initialize (37 samples, 2.99%)</title><rect x="1.8563%" y="693" width="2.9863%" height="15" fill="rgb(243,110,44)" fg:x="23" fg:w="37"/><text x="2.1063%" y="703.50">eng..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="4.7619%" y="677" width="0.0807%" height="15" fill="rgb(222,74,54)" fg:x="59" fg:w="1"/><text x="5.0119%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.7619%" y="661" width="0.0807%" height="15" fill="rgb(216,99,12)" fg:x="59" fg:w="1"/><text x="5.0119%" y="671.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (38 samples, 3.07%)</title><rect x="1.8563%" y="741" width="3.0670%" height="15" fill="rgb(226,22,26)" fg:x="23" fg:w="38"/><text x="2.1063%" y="751.50">&lt;en..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (38 samples, 3.07%)</title><rect x="1.8563%" y="725" width="3.0670%" height="15" fill="rgb(217,163,10)" fg:x="23" fg:w="38"/><text x="2.1063%" y="735.50">eng..</text></g><g><title>engine::session::Session::new (38 samples, 3.07%)</title><rect x="1.8563%" y="709" width="3.0670%" height="15" fill="rgb(213,25,53)" fg:x="23" fg:w="38"/><text x="2.1063%" y="719.50">eng..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="4.8426%" y="693" width="0.0807%" height="15" fill="rgb(252,105,26)" fg:x="60" fg:w="1"/><text x="5.0926%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.8426%" y="677" width="0.0807%" height="15" fill="rgb(220,39,43)" fg:x="60" fg:w="1"/><text x="5.0926%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="4.9233%" y="725" width="0.1614%" height="15" fill="rgb(229,68,48)" fg:x="61" fg:w="2"/><text x="5.1733%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.0040%" y="709" width="0.0807%" height="15" fill="rgb(252,8,32)" fg:x="62" fg:w="1"/><text x="5.2540%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.0040%" y="693" width="0.0807%" height="15" fill="rgb(223,20,43)" fg:x="62" fg:w="1"/><text x="5.2540%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.0040%" y="677" width="0.0807%" height="15" fill="rgb(229,81,49)" fg:x="62" fg:w="1"/><text x="5.2540%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.0040%" y="661" width="0.0807%" height="15" fill="rgb(236,28,36)" fg:x="62" fg:w="1"/><text x="5.2540%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="5.0847%" y="725" width="0.0807%" height="15" fill="rgb(249,185,26)" fg:x="63" fg:w="1"/><text x="5.3347%" y="735.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.0847%" y="709" width="0.0807%" height="15" fill="rgb(249,174,33)" fg:x="63" fg:w="1"/><text x="5.3347%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="5.1655%" y="709" width="0.0807%" height="15" fill="rgb(233,201,37)" fg:x="64" fg:w="1"/><text x="5.4155%" y="719.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="5.1655%" y="693" width="0.0807%" height="15" fill="rgb(221,78,26)" fg:x="64" fg:w="1"/><text x="5.4155%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="5.2462%" y="613" width="0.0807%" height="15" fill="rgb(250,127,30)" fg:x="65" fg:w="1"/><text x="5.4962%" y="623.50"></text></g><g><title>engine::session::should_force_rollback (2 samples, 0.16%)</title><rect x="5.2462%" y="709" width="0.1614%" height="15" fill="rgb(230,49,44)" fg:x="65" fg:w="2"/><text x="5.4962%" y="719.50"></text></g><g><title>std::env::_var (2 samples, 0.16%)</title><rect x="5.2462%" y="693" width="0.1614%" height="15" fill="rgb(229,67,23)" fg:x="65" fg:w="2"/><text x="5.4962%" y="703.50"></text></g><g><title>std::env::var_os (2 samples, 0.16%)</title><rect x="5.2462%" y="677" width="0.1614%" height="15" fill="rgb(249,83,47)" fg:x="65" fg:w="2"/><text x="5.4962%" y="687.50"></text></g><g><title>std::env::_var_os (2 samples, 0.16%)</title><rect x="5.2462%" y="661" width="0.1614%" height="15" fill="rgb(215,43,3)" fg:x="65" fg:w="2"/><text x="5.4962%" y="671.50"></text></g><g><title>std::sys::unix::os::getenv (2 samples, 0.16%)</title><rect x="5.2462%" y="645" width="0.1614%" height="15" fill="rgb(238,154,13)" fg:x="65" fg:w="2"/><text x="5.4962%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="5.2462%" y="629" width="0.1614%" height="15" fill="rgb(219,56,2)" fg:x="65" fg:w="2"/><text x="5.4962%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="5.3269%" y="613" width="0.0807%" height="15" fill="rgb(233,0,4)" fg:x="66" fg:w="1"/><text x="5.5769%" y="623.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="5.3269%" y="597" width="0.0807%" height="15" fill="rgb(235,30,7)" fg:x="66" fg:w="1"/><text x="5.5769%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="5.4076%" y="645" width="0.0807%" height="15" fill="rgb(250,79,13)" fg:x="67" fg:w="1"/><text x="5.6576%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.4076%" y="629" width="0.0807%" height="15" fill="rgb(211,146,34)" fg:x="67" fg:w="1"/><text x="5.6576%" y="639.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="5.4076%" y="677" width="0.1614%" height="15" fill="rgb(228,22,38)" fg:x="67" fg:w="2"/><text x="5.6576%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="5.4076%" y="661" width="0.1614%" height="15" fill="rgb(235,168,5)" fg:x="67" fg:w="2"/><text x="5.6576%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="5.4883%" y="645" width="0.0807%" height="15" fill="rgb(221,155,16)" fg:x="68" fg:w="1"/><text x="5.7383%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.4883%" y="629" width="0.0807%" height="15" fill="rgb(215,215,53)" fg:x="68" fg:w="1"/><text x="5.7383%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="5.8918%" y="565" width="0.1614%" height="15" fill="rgb(223,4,10)" fg:x="73" fg:w="2"/><text x="6.1418%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="5.8918%" y="549" width="0.1614%" height="15" fill="rgb(234,103,6)" fg:x="73" fg:w="2"/><text x="6.1418%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="5.8111%" y="581" width="0.3228%" height="15" fill="rgb(227,97,0)" fg:x="72" fg:w="4"/><text x="6.0611%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.0533%" y="565" width="0.0807%" height="15" fill="rgb(234,150,53)" fg:x="75" fg:w="1"/><text x="6.3033%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.1340%" y="581" width="0.0807%" height="15" fill="rgb(228,201,54)" fg:x="76" fg:w="1"/><text x="6.3840%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.2147%" y="581" width="0.0807%" height="15" fill="rgb(222,22,37)" fg:x="77" fg:w="1"/><text x="6.4647%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.81%)</title><rect x="5.6497%" y="613" width="0.8071%" height="15" fill="rgb(237,53,32)" fg:x="70" fg:w="10"/><text x="5.8997%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="5.7304%" y="597" width="0.7264%" height="15" fill="rgb(233,25,53)" fg:x="71" fg:w="9"/><text x="5.9804%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="6.2954%" y="581" width="0.1614%" height="15" fill="rgb(210,40,34)" fg:x="78" fg:w="2"/><text x="6.5454%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="6.2954%" y="565" width="0.1614%" height="15" fill="rgb(241,220,44)" fg:x="78" fg:w="2"/><text x="6.5454%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="6.2954%" y="549" width="0.1614%" height="15" fill="rgb(235,28,35)" fg:x="78" fg:w="2"/><text x="6.5454%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.97%)</title><rect x="5.6497%" y="629" width="0.9685%" height="15" fill="rgb(210,56,17)" fg:x="70" fg:w="12"/><text x="5.8997%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="6.4568%" y="613" width="0.1614%" height="15" fill="rgb(224,130,29)" fg:x="80" fg:w="2"/><text x="6.7068%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.6182%" y="597" width="0.1614%" height="15" fill="rgb(235,212,8)" fg:x="82" fg:w="2"/><text x="6.8682%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.6182%" y="581" width="0.1614%" height="15" fill="rgb(223,33,50)" fg:x="82" fg:w="2"/><text x="6.8682%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.6182%" y="565" width="0.1614%" height="15" fill="rgb(219,149,13)" fg:x="82" fg:w="2"/><text x="6.8682%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.6182%" y="549" width="0.1614%" height="15" fill="rgb(250,156,29)" fg:x="82" fg:w="2"/><text x="6.8682%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.6990%" y="533" width="0.0807%" height="15" fill="rgb(216,193,19)" fg:x="83" fg:w="1"/><text x="6.9490%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.6990%" y="517" width="0.0807%" height="15" fill="rgb(216,135,14)" fg:x="83" fg:w="1"/><text x="6.9490%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.6990%" y="501" width="0.0807%" height="15" fill="rgb(241,47,5)" fg:x="83" fg:w="1"/><text x="6.9490%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="6.6182%" y="613" width="0.2421%" height="15" fill="rgb(233,42,35)" fg:x="82" fg:w="3"/><text x="6.8682%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.7797%" y="597" width="0.0807%" height="15" fill="rgb(231,13,6)" fg:x="84" fg:w="1"/><text x="7.0297%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.1025%" y="597" width="0.0807%" height="15" fill="rgb(207,181,40)" fg:x="88" fg:w="1"/><text x="7.3525%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.1832%" y="597" width="0.1614%" height="15" fill="rgb(254,173,49)" fg:x="89" fg:w="2"/><text x="7.4332%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.1832%" y="581" width="0.1614%" height="15" fill="rgb(221,1,38)" fg:x="89" fg:w="2"/><text x="7.4332%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.4253%" y="581" width="0.0807%" height="15" fill="rgb(206,124,46)" fg:x="92" fg:w="1"/><text x="7.6753%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.6675%" y="533" width="0.0807%" height="15" fill="rgb(249,21,11)" fg:x="95" fg:w="1"/><text x="7.9175%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.6675%" y="517" width="0.0807%" height="15" fill="rgb(222,201,40)" fg:x="95" fg:w="1"/><text x="7.9175%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.6675%" y="501" width="0.0807%" height="15" fill="rgb(235,61,29)" fg:x="95" fg:w="1"/><text x="7.9175%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="7.5061%" y="581" width="0.3228%" height="15" fill="rgb(219,207,3)" fg:x="93" fg:w="4"/><text x="7.7561%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="7.5061%" y="565" width="0.3228%" height="15" fill="rgb(222,56,46)" fg:x="93" fg:w="4"/><text x="7.7561%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="7.5061%" y="549" width="0.3228%" height="15" fill="rgb(239,76,54)" fg:x="93" fg:w="4"/><text x="7.7561%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7482%" y="533" width="0.0807%" height="15" fill="rgb(231,124,27)" fg:x="96" fg:w="1"/><text x="7.9982%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7482%" y="517" width="0.0807%" height="15" fill="rgb(249,195,6)" fg:x="96" fg:w="1"/><text x="7.9982%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.7482%" y="501" width="0.0807%" height="15" fill="rgb(237,174,47)" fg:x="96" fg:w="1"/><text x="7.9982%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7482%" y="485" width="0.0807%" height="15" fill="rgb(206,201,31)" fg:x="96" fg:w="1"/><text x="7.9982%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7482%" y="469" width="0.0807%" height="15" fill="rgb(231,57,52)" fg:x="96" fg:w="1"/><text x="7.9982%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.7482%" y="453" width="0.0807%" height="15" fill="rgb(248,177,22)" fg:x="96" fg:w="1"/><text x="7.9982%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="7.8289%" y="581" width="0.4036%" height="15" fill="rgb(215,211,37)" fg:x="97" fg:w="5"/><text x="8.0789%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.0710%" y="565" width="0.1614%" height="15" fill="rgb(241,128,51)" fg:x="100" fg:w="2"/><text x="8.3210%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.2324%" y="565" width="0.1614%" height="15" fill="rgb(227,165,31)" fg:x="102" fg:w="2"/><text x="8.4824%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.3132%" y="549" width="0.0807%" height="15" fill="rgb(228,167,24)" fg:x="103" fg:w="1"/><text x="8.5632%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.3939%" y="549" width="0.0807%" height="15" fill="rgb(228,143,12)" fg:x="104" fg:w="1"/><text x="8.6439%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="8.4746%" y="549" width="0.3228%" height="15" fill="rgb(249,149,8)" fg:x="105" fg:w="4"/><text x="8.7246%" y="559.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="8.4746%" y="533" width="0.3228%" height="15" fill="rgb(243,35,44)" fg:x="105" fg:w="4"/><text x="8.7246%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="8.4746%" y="517" width="0.3228%" height="15" fill="rgb(246,89,9)" fg:x="105" fg:w="4"/><text x="8.7246%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="8.4746%" y="501" width="0.3228%" height="15" fill="rgb(233,213,13)" fg:x="105" fg:w="4"/><text x="8.7246%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.6360%" y="485" width="0.1614%" height="15" fill="rgb(233,141,41)" fg:x="107" fg:w="2"/><text x="8.8860%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="8.6360%" y="469" width="0.1614%" height="15" fill="rgb(239,167,4)" fg:x="107" fg:w="2"/><text x="8.8860%" y="479.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="8.6360%" y="453" width="0.1614%" height="15" fill="rgb(209,217,16)" fg:x="107" fg:w="2"/><text x="8.8860%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="8.3939%" y="565" width="0.6457%" height="15" fill="rgb(219,88,35)" fg:x="104" fg:w="8"/><text x="8.6439%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.7974%" y="549" width="0.2421%" height="15" fill="rgb(220,193,23)" fg:x="109" fg:w="3"/><text x="9.0474%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.9588%" y="533" width="0.0807%" height="15" fill="rgb(230,90,52)" fg:x="111" fg:w="1"/><text x="9.2088%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.9588%" y="517" width="0.0807%" height="15" fill="rgb(252,106,19)" fg:x="111" fg:w="1"/><text x="9.2088%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="8.2324%" y="581" width="0.8878%" height="15" fill="rgb(206,74,20)" fg:x="102" fg:w="11"/><text x="8.4824%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.0395%" y="565" width="0.0807%" height="15" fill="rgb(230,138,44)" fg:x="112" fg:w="1"/><text x="9.2895%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.0395%" y="549" width="0.0807%" height="15" fill="rgb(235,182,43)" fg:x="112" fg:w="1"/><text x="9.2895%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="9.0395%" y="533" width="0.0807%" height="15" fill="rgb(242,16,51)" fg:x="112" fg:w="1"/><text x="9.2895%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (23 samples, 1.86%)</title><rect x="7.3446%" y="597" width="1.8563%" height="15" fill="rgb(248,9,4)" fg:x="91" fg:w="23"/><text x="7.5946%" y="607.50">s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.1203%" y="581" width="0.0807%" height="15" fill="rgb(210,31,22)" fg:x="113" fg:w="1"/><text x="9.3703%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (30 samples, 2.42%)</title><rect x="6.8604%" y="613" width="2.4213%" height="15" fill="rgb(239,54,39)" fg:x="85" fg:w="30"/><text x="7.1104%" y="623.50">se..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.2010%" y="597" width="0.0807%" height="15" fill="rgb(230,99,41)" fg:x="114" fg:w="1"/><text x="9.4510%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.2010%" y="581" width="0.0807%" height="15" fill="rgb(253,106,12)" fg:x="114" fg:w="1"/><text x="9.4510%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.2010%" y="565" width="0.0807%" height="15" fill="rgb(213,46,41)" fg:x="114" fg:w="1"/><text x="9.4510%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (34 samples, 2.74%)</title><rect x="6.6182%" y="629" width="2.7441%" height="15" fill="rgb(215,133,35)" fg:x="82" fg:w="34"/><text x="6.8682%" y="639.50">&lt;s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.2817%" y="613" width="0.0807%" height="15" fill="rgb(213,28,5)" fg:x="115" fg:w="1"/><text x="9.5317%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.2817%" y="597" width="0.0807%" height="15" fill="rgb(215,77,49)" fg:x="115" fg:w="1"/><text x="9.5317%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.2817%" y="581" width="0.0807%" height="15" fill="rgb(248,100,22)" fg:x="115" fg:w="1"/><text x="9.5317%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.3624%" y="597" width="0.0807%" height="15" fill="rgb(208,67,9)" fg:x="116" fg:w="1"/><text x="9.6124%" y="607.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="9.3624%" y="613" width="0.1614%" height="15" fill="rgb(219,133,21)" fg:x="116" fg:w="2"/><text x="9.6124%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4431%" y="597" width="0.0807%" height="15" fill="rgb(246,46,29)" fg:x="117" fg:w="1"/><text x="9.6931%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6045%" y="581" width="0.0807%" height="15" fill="rgb(246,185,52)" fg:x="119" fg:w="1"/><text x="9.8545%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.6045%" y="565" width="0.0807%" height="15" fill="rgb(252,136,11)" fg:x="119" fg:w="1"/><text x="9.8545%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="9.6852%" y="581" width="0.0807%" height="15" fill="rgb(219,138,53)" fg:x="120" fg:w="1"/><text x="9.9352%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.6852%" y="565" width="0.0807%" height="15" fill="rgb(211,51,23)" fg:x="120" fg:w="1"/><text x="9.9352%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6852%" y="549" width="0.0807%" height="15" fill="rgb(247,221,28)" fg:x="120" fg:w="1"/><text x="9.9352%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7659%" y="581" width="0.0807%" height="15" fill="rgb(251,222,45)" fg:x="121" fg:w="1"/><text x="10.0159%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.7659%" y="565" width="0.0807%" height="15" fill="rgb(217,162,53)" fg:x="121" fg:w="1"/><text x="10.0159%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7659%" y="549" width="0.0807%" height="15" fill="rgb(229,93,14)" fg:x="121" fg:w="1"/><text x="10.0159%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.8467%" y="533" width="0.1614%" height="15" fill="rgb(209,67,49)" fg:x="122" fg:w="2"/><text x="10.0967%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="9.8467%" y="517" width="0.1614%" height="15" fill="rgb(213,87,29)" fg:x="122" fg:w="2"/><text x="10.0967%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.1695%" y="501" width="0.0807%" height="15" fill="rgb(205,151,52)" fg:x="126" fg:w="1"/><text x="10.4195%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1695%" y="485" width="0.0807%" height="15" fill="rgb(253,215,39)" fg:x="126" fg:w="1"/><text x="10.4195%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1695%" y="469" width="0.0807%" height="15" fill="rgb(221,220,41)" fg:x="126" fg:w="1"/><text x="10.4195%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="10.0081%" y="533" width="0.3228%" height="15" fill="rgb(218,133,21)" fg:x="124" fg:w="4"/><text x="10.2581%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="10.0081%" y="517" width="0.3228%" height="15" fill="rgb(221,193,43)" fg:x="124" fg:w="4"/><text x="10.2581%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2502%" y="501" width="0.0807%" height="15" fill="rgb(240,128,52)" fg:x="127" fg:w="1"/><text x="10.5002%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="10.4116%" y="485" width="0.0807%" height="15" fill="rgb(253,114,12)" fg:x="129" fg:w="1"/><text x="10.6616%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.81%)</title><rect x="9.8467%" y="549" width="0.8071%" height="15" fill="rgb(215,223,47)" fg:x="122" fg:w="10"/><text x="10.0967%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="10.3309%" y="533" width="0.3228%" height="15" fill="rgb(248,225,23)" fg:x="128" fg:w="4"/><text x="10.5809%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="10.3309%" y="517" width="0.3228%" height="15" fill="rgb(250,108,0)" fg:x="128" fg:w="4"/><text x="10.5809%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="10.3309%" y="501" width="0.3228%" height="15" fill="rgb(228,208,7)" fg:x="128" fg:w="4"/><text x="10.5809%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.4923%" y="485" width="0.1614%" height="15" fill="rgb(244,45,10)" fg:x="130" fg:w="2"/><text x="10.7423%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.89%)</title><rect x="9.8467%" y="565" width="0.8878%" height="15" fill="rgb(207,125,25)" fg:x="122" fg:w="11"/><text x="10.0967%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.6538%" y="549" width="0.0807%" height="15" fill="rgb(210,195,18)" fg:x="132" fg:w="1"/><text x="10.9038%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7345%" y="565" width="0.0807%" height="15" fill="rgb(249,80,12)" fg:x="133" fg:w="1"/><text x="10.9845%" y="575.50"></text></g><g><title>engine::session::Session::flush (71 samples, 5.73%)</title><rect x="5.1655%" y="725" width="5.7304%" height="15" fill="rgb(221,65,9)" fg:x="64" fg:w="71"/><text x="5.4155%" y="735.50">engine:..</text></g><g><title>engine::session::state::State::close (68 samples, 5.49%)</title><rect x="5.4076%" y="709" width="5.4883%" height="15" fill="rgb(235,49,36)" fg:x="67" fg:w="68"/><text x="5.6576%" y="719.50">engine:..</text></g><g><title>engine::session::state::State::flush_entities (68 samples, 5.49%)</title><rect x="5.4076%" y="693" width="5.4883%" height="15" fill="rgb(225,32,20)" fg:x="67" fg:w="68"/><text x="5.6576%" y="703.50">engine:..</text></g><g><title>core::iter::adapters::try_process (66 samples, 5.33%)</title><rect x="5.5690%" y="677" width="5.3269%" height="15" fill="rgb(215,141,46)" fg:x="69" fg:w="66"/><text x="5.8190%" y="687.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (66 samples, 5.33%)</title><rect x="5.5690%" y="661" width="5.3269%" height="15" fill="rgb(250,160,47)" fg:x="69" fg:w="66"/><text x="5.8190%" y="671.50">&lt;alloc:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (66 samples, 5.33%)</title><rect x="5.5690%" y="645" width="5.3269%" height="15" fill="rgb(216,222,40)" fg:x="69" fg:w="66"/><text x="5.8190%" y="655.50">engine:..</text></g><g><title>kernel::model::any_entity_changes (19 samples, 1.53%)</title><rect x="9.3624%" y="629" width="1.5335%" height="15" fill="rgb(234,217,39)" fg:x="116" fg:w="19"/><text x="9.6124%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.37%)</title><rect x="9.5238%" y="613" width="1.3721%" height="15" fill="rgb(207,178,40)" fg:x="118" fg:w="17"/><text x="9.7738%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.37%)</title><rect x="9.5238%" y="597" width="1.3721%" height="15" fill="rgb(221,136,13)" fg:x="118" fg:w="17"/><text x="9.7738%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.05%)</title><rect x="9.8467%" y="581" width="1.0492%" height="15" fill="rgb(249,199,10)" fg:x="122" fg:w="13"/><text x="10.0967%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8152%" y="565" width="0.0807%" height="15" fill="rgb(249,222,13)" fg:x="134" fg:w="1"/><text x="11.0652%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.8959%" y="677" width="0.0807%" height="15" fill="rgb(244,185,38)" fg:x="135" fg:w="1"/><text x="11.1459%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="10.8959%" y="693" width="0.1614%" height="15" fill="rgb(236,202,9)" fg:x="135" fg:w="2"/><text x="11.1459%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.9766%" y="677" width="0.0807%" height="15" fill="rgb(250,229,37)" fg:x="136" fg:w="1"/><text x="11.2266%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.9766%" y="661" width="0.0807%" height="15" fill="rgb(206,174,23)" fg:x="136" fg:w="1"/><text x="11.2266%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.0573%" y="693" width="0.0807%" height="15" fill="rgb(211,33,43)" fg:x="137" fg:w="1"/><text x="11.3073%" y="703.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="11.1380%" y="693" width="0.0807%" height="15" fill="rgb(245,58,50)" fg:x="138" fg:w="1"/><text x="11.3880%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.1380%" y="677" width="0.0807%" height="15" fill="rgb(244,68,36)" fg:x="138" fg:w="1"/><text x="11.3880%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="11.1380%" y="661" width="0.0807%" height="15" fill="rgb(232,229,15)" fg:x="138" fg:w="1"/><text x="11.3880%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.1380%" y="645" width="0.0807%" height="15" fill="rgb(254,30,23)" fg:x="138" fg:w="1"/><text x="11.3880%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="11.1380%" y="629" width="0.0807%" height="15" fill="rgb(235,160,14)" fg:x="138" fg:w="1"/><text x="11.3880%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::new_from_entity (1 samples, 0.08%)</title><rect x="11.2187%" y="677" width="0.0807%" height="15" fill="rgb(212,155,44)" fg:x="139" fg:w="1"/><text x="11.4687%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.65%)</title><rect x="10.8959%" y="709" width="0.6457%" height="15" fill="rgb(226,2,50)" fg:x="135" fg:w="8"/><text x="11.1459%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="11.2187%" y="693" width="0.3228%" height="15" fill="rgb(234,177,6)" fg:x="139" fg:w="4"/><text x="11.4687%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="11.2994%" y="677" width="0.2421%" height="15" fill="rgb(217,24,9)" fg:x="140" fg:w="3"/><text x="11.5494%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="11.2994%" y="661" width="0.2421%" height="15" fill="rgb(220,13,46)" fg:x="140" fg:w="3"/><text x="11.5494%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="11.3801%" y="645" width="0.1614%" height="15" fill="rgb(239,221,27)" fg:x="141" fg:w="2"/><text x="11.6301%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="11.3801%" y="629" width="0.1614%" height="15" fill="rgb(222,198,25)" fg:x="141" fg:w="2"/><text x="11.6301%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.4609%" y="613" width="0.0807%" height="15" fill="rgb(211,99,13)" fg:x="142" fg:w="1"/><text x="11.7109%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4609%" y="597" width="0.0807%" height="15" fill="rgb(232,111,31)" fg:x="142" fg:w="1"/><text x="11.7109%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.4609%" y="581" width="0.0807%" height="15" fill="rgb(245,82,37)" fg:x="142" fg:w="1"/><text x="11.7109%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4609%" y="565" width="0.0807%" height="15" fill="rgb(227,149,46)" fg:x="142" fg:w="1"/><text x="11.7109%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.4609%" y="549" width="0.0807%" height="15" fill="rgb(218,36,50)" fg:x="142" fg:w="1"/><text x="11.7109%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4609%" y="533" width="0.0807%" height="15" fill="rgb(226,80,48)" fg:x="142" fg:w="1"/><text x="11.7109%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4609%" y="517" width="0.0807%" height="15" fill="rgb(238,224,15)" fg:x="142" fg:w="1"/><text x="11.7109%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.73%)</title><rect x="10.8959%" y="725" width="0.7264%" height="15" fill="rgb(241,136,10)" fg:x="135" fg:w="9"/><text x="11.1459%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.5416%" y="709" width="0.0807%" height="15" fill="rgb(208,32,45)" fg:x="143" fg:w="1"/><text x="11.7916%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.5416%" y="693" width="0.0807%" height="15" fill="rgb(207,135,9)" fg:x="143" fg:w="1"/><text x="11.7916%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.5416%" y="677" width="0.0807%" height="15" fill="rgb(206,86,44)" fg:x="143" fg:w="1"/><text x="11.7916%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.5416%" y="661" width="0.0807%" height="15" fill="rgb(245,177,15)" fg:x="143" fg:w="1"/><text x="11.7916%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.5416%" y="645" width="0.0807%" height="15" fill="rgb(206,64,50)" fg:x="143" fg:w="1"/><text x="11.7916%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.5416%" y="629" width="0.0807%" height="15" fill="rgb(234,36,40)" fg:x="143" fg:w="1"/><text x="11.7916%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.5416%" y="613" width="0.0807%" height="15" fill="rgb(213,64,8)" fg:x="143" fg:w="1"/><text x="11.7916%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.5416%" y="597" width="0.0807%" height="15" fill="rgb(210,75,36)" fg:x="143" fg:w="1"/><text x="11.7916%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.5416%" y="581" width="0.0807%" height="15" fill="rgb(229,88,21)" fg:x="143" fg:w="1"/><text x="11.7916%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.5416%" y="565" width="0.0807%" height="15" fill="rgb(252,204,47)" fg:x="143" fg:w="1"/><text x="11.7916%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.5416%" y="549" width="0.0807%" height="15" fill="rgb(208,77,27)" fg:x="143" fg:w="1"/><text x="11.7916%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.5416%" y="533" width="0.0807%" height="15" fill="rgb(221,76,26)" fg:x="143" fg:w="1"/><text x="11.7916%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.5416%" y="517" width="0.0807%" height="15" fill="rgb(225,139,18)" fg:x="143" fg:w="1"/><text x="11.7916%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.5416%" y="501" width="0.0807%" height="15" fill="rgb(230,137,11)" fg:x="143" fg:w="1"/><text x="11.7916%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.5416%" y="485" width="0.0807%" height="15" fill="rgb(212,28,1)" fg:x="143" fg:w="1"/><text x="11.7916%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="11.6223%" y="725" width="0.0807%" height="15" fill="rgb(248,164,17)" fg:x="144" fg:w="1"/><text x="11.8723%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="11.6223%" y="709" width="0.0807%" height="15" fill="rgb(222,171,42)" fg:x="144" fg:w="1"/><text x="11.8723%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.6223%" y="693" width="0.0807%" height="15" fill="rgb(243,84,45)" fg:x="144" fg:w="1"/><text x="11.8723%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="11.6223%" y="677" width="0.0807%" height="15" fill="rgb(252,49,23)" fg:x="144" fg:w="1"/><text x="11.8723%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="11.6223%" y="661" width="0.0807%" height="15" fill="rgb(215,19,7)" fg:x="144" fg:w="1"/><text x="11.8723%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="11.6223%" y="645" width="0.0807%" height="15" fill="rgb(238,81,41)" fg:x="144" fg:w="1"/><text x="11.8723%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="11.6223%" y="629" width="0.0807%" height="15" fill="rgb(210,199,37)" fg:x="144" fg:w="1"/><text x="11.8723%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="11.6223%" y="613" width="0.0807%" height="15" fill="rgb(244,192,49)" fg:x="144" fg:w="1"/><text x="11.8723%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="11.6223%" y="597" width="0.0807%" height="15" fill="rgb(226,211,11)" fg:x="144" fg:w="1"/><text x="11.8723%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.7030%" y="693" width="0.0807%" height="15" fill="rgb(236,162,54)" fg:x="145" fg:w="1"/><text x="11.9530%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="11.7030%" y="677" width="0.0807%" height="15" fill="rgb(220,229,9)" fg:x="145" fg:w="1"/><text x="11.9530%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.7030%" y="661" width="0.0807%" height="15" fill="rgb(250,87,22)" fg:x="145" fg:w="1"/><text x="11.9530%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.7030%" y="645" width="0.0807%" height="15" fill="rgb(239,43,17)" fg:x="145" fg:w="1"/><text x="11.9530%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.7837%" y="645" width="0.0807%" height="15" fill="rgb(231,177,25)" fg:x="146" fg:w="1"/><text x="12.0337%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.7837%" y="629" width="0.0807%" height="15" fill="rgb(219,179,1)" fg:x="146" fg:w="1"/><text x="12.0337%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="11.7837%" y="693" width="0.2421%" height="15" fill="rgb(238,219,53)" fg:x="146" fg:w="3"/><text x="12.0337%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="11.7837%" y="677" width="0.2421%" height="15" fill="rgb(232,167,36)" fg:x="146" fg:w="3"/><text x="12.0337%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="11.7837%" y="661" width="0.2421%" height="15" fill="rgb(244,19,51)" fg:x="146" fg:w="3"/><text x="12.0337%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="11.8644%" y="645" width="0.1614%" height="15" fill="rgb(224,6,22)" fg:x="147" fg:w="2"/><text x="12.1144%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="11.8644%" y="629" width="0.1614%" height="15" fill="rgb(224,145,5)" fg:x="147" fg:w="2"/><text x="12.1144%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.8644%" y="613" width="0.1614%" height="15" fill="rgb(234,130,49)" fg:x="147" fg:w="2"/><text x="12.1144%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.8644%" y="597" width="0.1614%" height="15" fill="rgb(254,6,2)" fg:x="147" fg:w="2"/><text x="12.1144%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.9451%" y="581" width="0.0807%" height="15" fill="rgb(208,96,46)" fg:x="148" fg:w="1"/><text x="12.1951%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9451%" y="565" width="0.0807%" height="15" fill="rgb(239,3,39)" fg:x="148" fg:w="1"/><text x="12.1951%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9451%" y="549" width="0.0807%" height="15" fill="rgb(233,210,1)" fg:x="148" fg:w="1"/><text x="12.1951%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9451%" y="533" width="0.0807%" height="15" fill="rgb(244,137,37)" fg:x="148" fg:w="1"/><text x="12.1951%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.9451%" y="517" width="0.0807%" height="15" fill="rgb(240,136,2)" fg:x="148" fg:w="1"/><text x="12.1951%" y="527.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.0258%" y="677" width="0.0807%" height="15" fill="rgb(239,18,37)" fg:x="149" fg:w="1"/><text x="12.2758%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="12.0258%" y="661" width="0.0807%" height="15" fill="rgb(218,185,22)" fg:x="149" fg:w="1"/><text x="12.2758%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="11.7030%" y="725" width="0.4843%" height="15" fill="rgb(225,218,4)" fg:x="145" fg:w="6"/><text x="11.9530%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="11.7030%" y="709" width="0.4843%" height="15" fill="rgb(230,182,32)" fg:x="145" fg:w="6"/><text x="11.9530%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="12.0258%" y="693" width="0.1614%" height="15" fill="rgb(242,56,43)" fg:x="149" fg:w="2"/><text x="12.2758%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.1065%" y="677" width="0.0807%" height="15" fill="rgb(233,99,24)" fg:x="150" fg:w="1"/><text x="12.3565%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.2680%" y="693" width="0.0807%" height="15" fill="rgb(234,209,42)" fg:x="152" fg:w="1"/><text x="12.5180%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeMut&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="12.2680%" y="677" width="0.0807%" height="15" fill="rgb(227,7,12)" fg:x="152" fg:w="1"/><text x="12.5180%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="12.2680%" y="709" width="0.1614%" height="15" fill="rgb(245,203,43)" fg:x="152" fg:w="2"/><text x="12.5180%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="12.3487%" y="693" width="0.0807%" height="15" fill="rgb(238,205,33)" fg:x="153" fg:w="1"/><text x="12.5987%" y="703.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="12.3487%" y="677" width="0.0807%" height="15" fill="rgb(231,56,7)" fg:x="153" fg:w="1"/><text x="12.5987%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3487%" y="661" width="0.0807%" height="15" fill="rgb(244,186,29)" fg:x="153" fg:w="1"/><text x="12.5987%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="12.4294%" y="709" width="0.0807%" height="15" fill="rgb(234,111,31)" fg:x="154" fg:w="1"/><text x="12.6794%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.4294%" y="693" width="0.0807%" height="15" fill="rgb(241,149,10)" fg:x="154" fg:w="1"/><text x="12.6794%" y="703.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="12.4294%" y="677" width="0.0807%" height="15" fill="rgb(249,206,44)" fg:x="154" fg:w="1"/><text x="12.6794%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.4294%" y="661" width="0.0807%" height="15" fill="rgb(251,153,30)" fg:x="154" fg:w="1"/><text x="12.6794%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.4294%" y="645" width="0.0807%" height="15" fill="rgb(239,152,38)" fg:x="154" fg:w="1"/><text x="12.6794%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="12.5101%" y="709" width="0.0807%" height="15" fill="rgb(249,139,47)" fg:x="155" fg:w="1"/><text x="12.7601%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.5101%" y="693" width="0.0807%" height="15" fill="rgb(244,64,35)" fg:x="155" fg:w="1"/><text x="12.7601%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="12.5101%" y="677" width="0.0807%" height="15" fill="rgb(216,46,15)" fg:x="155" fg:w="1"/><text x="12.7601%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="12.5101%" y="661" width="0.0807%" height="15" fill="rgb(250,74,19)" fg:x="155" fg:w="1"/><text x="12.7601%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="12.5101%" y="645" width="0.0807%" height="15" fill="rgb(249,42,33)" fg:x="155" fg:w="1"/><text x="12.7601%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.5101%" y="629" width="0.0807%" height="15" fill="rgb(242,149,17)" fg:x="155" fg:w="1"/><text x="12.7601%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.5101%" y="613" width="0.0807%" height="15" fill="rgb(244,29,21)" fg:x="155" fg:w="1"/><text x="12.7601%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.5101%" y="597" width="0.0807%" height="15" fill="rgb(220,130,37)" fg:x="155" fg:w="1"/><text x="12.7601%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5101%" y="581" width="0.0807%" height="15" fill="rgb(211,67,2)" fg:x="155" fg:w="1"/><text x="12.7601%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.5101%" y="565" width="0.0807%" height="15" fill="rgb(235,68,52)" fg:x="155" fg:w="1"/><text x="12.7601%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5101%" y="549" width="0.0807%" height="15" fill="rgb(246,142,3)" fg:x="155" fg:w="1"/><text x="12.7601%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.5101%" y="533" width="0.0807%" height="15" fill="rgb(241,25,7)" fg:x="155" fg:w="1"/><text x="12.7601%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5101%" y="517" width="0.0807%" height="15" fill="rgb(242,119,39)" fg:x="155" fg:w="1"/><text x="12.7601%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.5101%" y="501" width="0.0807%" height="15" fill="rgb(241,98,45)" fg:x="155" fg:w="1"/><text x="12.7601%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5908%" y="677" width="0.0807%" height="15" fill="rgb(254,28,30)" fg:x="156" fg:w="1"/><text x="12.8408%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5908%" y="661" width="0.0807%" height="15" fill="rgb(241,142,54)" fg:x="156" fg:w="1"/><text x="12.8408%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.5908%" y="645" width="0.0807%" height="15" fill="rgb(222,85,15)" fg:x="156" fg:w="1"/><text x="12.8408%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.5908%" y="629" width="0.0807%" height="15" fill="rgb(210,85,47)" fg:x="156" fg:w="1"/><text x="12.8408%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.5908%" y="613" width="0.0807%" height="15" fill="rgb(224,206,25)" fg:x="156" fg:w="1"/><text x="12.8408%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.5908%" y="597" width="0.0807%" height="15" fill="rgb(243,201,19)" fg:x="156" fg:w="1"/><text x="12.8408%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.5908%" y="581" width="0.0807%" height="15" fill="rgb(236,59,4)" fg:x="156" fg:w="1"/><text x="12.8408%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.5908%" y="565" width="0.0807%" height="15" fill="rgb(254,179,45)" fg:x="156" fg:w="1"/><text x="12.8408%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.5908%" y="549" width="0.0807%" height="15" fill="rgb(226,14,10)" fg:x="156" fg:w="1"/><text x="12.8408%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.5908%" y="533" width="0.0807%" height="15" fill="rgb(244,27,41)" fg:x="156" fg:w="1"/><text x="12.8408%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.5908%" y="517" width="0.0807%" height="15" fill="rgb(235,35,32)" fg:x="156" fg:w="1"/><text x="12.8408%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5908%" y="501" width="0.0807%" height="15" fill="rgb(218,68,31)" fg:x="156" fg:w="1"/><text x="12.8408%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="12.5908%" y="693" width="0.1614%" height="15" fill="rgb(207,120,37)" fg:x="156" fg:w="2"/><text x="12.8408%" y="703.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="12.6715%" y="677" width="0.0807%" height="15" fill="rgb(227,98,0)" fg:x="157" fg:w="1"/><text x="12.9215%" y="687.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="12.6715%" y="661" width="0.0807%" height="15" fill="rgb(207,7,3)" fg:x="157" fg:w="1"/><text x="12.9215%" y="671.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="12.6715%" y="645" width="0.0807%" height="15" fill="rgb(206,98,19)" fg:x="157" fg:w="1"/><text x="12.9215%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="12.7522%" y="645" width="0.1614%" height="15" fill="rgb(217,5,26)" fg:x="158" fg:w="2"/><text x="13.0022%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="12.7522%" y="629" width="0.1614%" height="15" fill="rgb(235,190,38)" fg:x="158" fg:w="2"/><text x="13.0022%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.8329%" y="613" width="0.0807%" height="15" fill="rgb(247,86,24)" fg:x="159" fg:w="1"/><text x="13.0829%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.9944%" y="549" width="0.0807%" height="15" fill="rgb(205,101,16)" fg:x="161" fg:w="1"/><text x="13.2444%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.9944%" y="533" width="0.0807%" height="15" fill="rgb(246,168,33)" fg:x="161" fg:w="1"/><text x="13.2444%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.9944%" y="517" width="0.0807%" height="15" fill="rgb(231,114,1)" fg:x="161" fg:w="1"/><text x="13.2444%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="12.9944%" y="565" width="0.1614%" height="15" fill="rgb(207,184,53)" fg:x="161" fg:w="2"/><text x="13.2444%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.0751%" y="549" width="0.0807%" height="15" fill="rgb(224,95,51)" fg:x="162" fg:w="1"/><text x="13.3251%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="12.9136%" y="597" width="0.3228%" height="15" fill="rgb(212,188,45)" fg:x="160" fg:w="4"/><text x="13.1636%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="12.9944%" y="581" width="0.2421%" height="15" fill="rgb(223,154,38)" fg:x="161" fg:w="3"/><text x="13.2444%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.1558%" y="565" width="0.0807%" height="15" fill="rgb(251,22,52)" fg:x="163" fg:w="1"/><text x="13.4058%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="13.2365%" y="581" width="0.1614%" height="15" fill="rgb(229,209,22)" fg:x="164" fg:w="2"/><text x="13.4865%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.2365%" y="565" width="0.1614%" height="15" fill="rgb(234,138,34)" fg:x="164" fg:w="2"/><text x="13.4865%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.3172%" y="549" width="0.0807%" height="15" fill="rgb(212,95,11)" fg:x="165" fg:w="1"/><text x="13.5672%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="13.3172%" y="533" width="0.0807%" height="15" fill="rgb(240,179,47)" fg:x="165" fg:w="1"/><text x="13.5672%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="13.4786%" y="565" width="0.0807%" height="15" fill="rgb(240,163,11)" fg:x="167" fg:w="1"/><text x="13.7286%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="13.5593%" y="565" width="0.0807%" height="15" fill="rgb(236,37,12)" fg:x="168" fg:w="1"/><text x="13.8093%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.5593%" y="549" width="0.0807%" height="15" fill="rgb(232,164,16)" fg:x="168" fg:w="1"/><text x="13.8093%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.5593%" y="533" width="0.0807%" height="15" fill="rgb(244,205,15)" fg:x="168" fg:w="1"/><text x="13.8093%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.5593%" y="517" width="0.0807%" height="15" fill="rgb(223,117,47)" fg:x="168" fg:w="1"/><text x="13.8093%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="13.6400%" y="565" width="0.4036%" height="15" fill="rgb(244,107,35)" fg:x="169" fg:w="5"/><text x="13.8900%" y="575.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="13.6400%" y="549" width="0.4036%" height="15" fill="rgb(205,140,8)" fg:x="169" fg:w="5"/><text x="13.8900%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (5 samples, 0.40%)</title><rect x="13.6400%" y="533" width="0.4036%" height="15" fill="rgb(228,84,46)" fg:x="169" fg:w="5"/><text x="13.8900%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 0.40%)</title><rect x="13.6400%" y="517" width="0.4036%" height="15" fill="rgb(254,188,9)" fg:x="169" fg:w="5"/><text x="13.8900%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="13.8822%" y="501" width="0.1614%" height="15" fill="rgb(206,112,54)" fg:x="172" fg:w="2"/><text x="14.1322%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="13.8822%" y="485" width="0.1614%" height="15" fill="rgb(216,84,49)" fg:x="172" fg:w="2"/><text x="14.1322%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="13.8822%" y="469" width="0.1614%" height="15" fill="rgb(214,194,35)" fg:x="172" fg:w="2"/><text x="14.1322%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.1243%" y="453" width="0.0807%" height="15" fill="rgb(249,28,3)" fg:x="175" fg:w="1"/><text x="14.3743%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="14.1243%" y="533" width="0.1614%" height="15" fill="rgb(222,56,52)" fg:x="175" fg:w="2"/><text x="14.3743%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="14.1243%" y="517" width="0.1614%" height="15" fill="rgb(245,217,50)" fg:x="175" fg:w="2"/><text x="14.3743%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="14.1243%" y="501" width="0.1614%" height="15" fill="rgb(213,201,24)" fg:x="175" fg:w="2"/><text x="14.3743%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.1243%" y="485" width="0.1614%" height="15" fill="rgb(248,116,28)" fg:x="175" fg:w="2"/><text x="14.3743%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="14.1243%" y="469" width="0.1614%" height="15" fill="rgb(219,72,43)" fg:x="175" fg:w="2"/><text x="14.3743%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="14.2050%" y="453" width="0.0807%" height="15" fill="rgb(209,138,14)" fg:x="176" fg:w="1"/><text x="14.4550%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="14.1243%" y="549" width="0.2421%" height="15" fill="rgb(222,18,33)" fg:x="175" fg:w="3"/><text x="14.3743%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.2857%" y="533" width="0.0807%" height="15" fill="rgb(213,199,7)" fg:x="177" fg:w="1"/><text x="14.5357%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="14.4471%" y="533" width="0.4036%" height="15" fill="rgb(250,110,10)" fg:x="179" fg:w="5"/><text x="14.6971%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="14.6086%" y="517" width="0.2421%" height="15" fill="rgb(248,123,6)" fg:x="181" fg:w="3"/><text x="14.8586%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="14.6086%" y="501" width="0.2421%" height="15" fill="rgb(206,91,31)" fg:x="181" fg:w="3"/><text x="14.8586%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="14.6893%" y="485" width="0.1614%" height="15" fill="rgb(211,154,13)" fg:x="182" fg:w="2"/><text x="14.9393%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="14.6893%" y="469" width="0.1614%" height="15" fill="rgb(225,148,7)" fg:x="182" fg:w="2"/><text x="14.9393%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="14.6893%" y="453" width="0.1614%" height="15" fill="rgb(220,160,43)" fg:x="182" fg:w="2"/><text x="14.9393%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="14.6893%" y="437" width="0.1614%" height="15" fill="rgb(213,52,39)" fg:x="182" fg:w="2"/><text x="14.9393%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (8 samples, 0.65%)</title><rect x="14.8507%" y="517" width="0.6457%" height="15" fill="rgb(243,137,7)" fg:x="184" fg:w="8"/><text x="15.1007%" y="527.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.48%)</title><rect x="15.0121%" y="501" width="0.4843%" height="15" fill="rgb(230,79,13)" fg:x="186" fg:w="6"/><text x="15.2621%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (5 samples, 0.40%)</title><rect x="15.0928%" y="485" width="0.4036%" height="15" fill="rgb(247,105,23)" fg:x="187" fg:w="5"/><text x="15.3428%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 0.40%)</title><rect x="15.0928%" y="469" width="0.4036%" height="15" fill="rgb(223,179,41)" fg:x="187" fg:w="5"/><text x="15.3428%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="15.1735%" y="453" width="0.3228%" height="15" fill="rgb(218,9,34)" fg:x="188" fg:w="4"/><text x="15.4235%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="15.1735%" y="437" width="0.3228%" height="15" fill="rgb(222,106,8)" fg:x="188" fg:w="4"/><text x="15.4235%" y="447.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="15.1735%" y="421" width="0.3228%" height="15" fill="rgb(211,220,0)" fg:x="188" fg:w="4"/><text x="15.4235%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="15.4964%" y="517" width="0.0807%" height="15" fill="rgb(229,52,16)" fg:x="192" fg:w="1"/><text x="15.7464%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.4964%" y="501" width="0.0807%" height="15" fill="rgb(212,155,18)" fg:x="192" fg:w="1"/><text x="15.7464%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.4964%" y="485" width="0.0807%" height="15" fill="rgb(242,21,14)" fg:x="192" fg:w="1"/><text x="15.7464%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="14.8507%" y="533" width="0.8071%" height="15" fill="rgb(222,19,48)" fg:x="184" fg:w="10"/><text x="15.1007%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.5771%" y="517" width="0.0807%" height="15" fill="rgb(232,45,27)" fg:x="193" fg:w="1"/><text x="15.8271%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.5771%" y="501" width="0.0807%" height="15" fill="rgb(249,103,42)" fg:x="193" fg:w="1"/><text x="15.8271%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.5771%" y="485" width="0.0807%" height="15" fill="rgb(246,81,33)" fg:x="193" fg:w="1"/><text x="15.8271%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (22 samples, 1.78%)</title><rect x="14.0436%" y="565" width="1.7756%" height="15" fill="rgb(252,33,42)" fg:x="174" fg:w="22"/><text x="14.2936%" y="575.50">s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (18 samples, 1.45%)</title><rect x="14.3664%" y="549" width="1.4528%" height="15" fill="rgb(209,212,41)" fg:x="178" fg:w="18"/><text x="14.6164%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.6578%" y="533" width="0.1614%" height="15" fill="rgb(207,154,6)" fg:x="194" fg:w="2"/><text x="15.9078%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.7385%" y="517" width="0.0807%" height="15" fill="rgb(223,64,47)" fg:x="195" fg:w="1"/><text x="15.9885%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.7385%" y="501" width="0.0807%" height="15" fill="rgb(211,161,38)" fg:x="195" fg:w="1"/><text x="15.9885%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (34 samples, 2.74%)</title><rect x="13.2365%" y="597" width="2.7441%" height="15" fill="rgb(219,138,40)" fg:x="164" fg:w="34"/><text x="13.4865%" y="607.50">&lt;s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (32 samples, 2.58%)</title><rect x="13.3979%" y="581" width="2.5827%" height="15" fill="rgb(241,228,46)" fg:x="166" fg:w="32"/><text x="13.6479%" y="591.50">se..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.8192%" y="565" width="0.1614%" height="15" fill="rgb(223,209,38)" fg:x="196" fg:w="2"/><text x="16.0692%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.8192%" y="549" width="0.1614%" height="15" fill="rgb(236,164,45)" fg:x="196" fg:w="2"/><text x="16.0692%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="15.8192%" y="533" width="0.1614%" height="15" fill="rgb(231,15,5)" fg:x="196" fg:w="2"/><text x="16.0692%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.8999%" y="517" width="0.0807%" height="15" fill="rgb(252,35,15)" fg:x="197" fg:w="1"/><text x="16.1499%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.8999%" y="501" width="0.0807%" height="15" fill="rgb(248,181,18)" fg:x="197" fg:w="1"/><text x="16.1499%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.8999%" y="485" width="0.0807%" height="15" fill="rgb(233,39,42)" fg:x="197" fg:w="1"/><text x="16.1499%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.9806%" y="565" width="0.0807%" height="15" fill="rgb(238,110,33)" fg:x="198" fg:w="1"/><text x="16.2306%" y="575.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="16.0613%" y="565" width="0.0807%" height="15" fill="rgb(233,195,10)" fg:x="199" fg:w="1"/><text x="16.3113%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="16.0613%" y="549" width="0.0807%" height="15" fill="rgb(254,105,3)" fg:x="199" fg:w="1"/><text x="16.3113%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.0613%" y="533" width="0.0807%" height="15" fill="rgb(221,225,9)" fg:x="199" fg:w="1"/><text x="16.3113%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="15.9806%" y="581" width="0.3228%" height="15" fill="rgb(224,227,45)" fg:x="198" fg:w="4"/><text x="16.2306%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="16.1421%" y="565" width="0.1614%" height="15" fill="rgb(229,198,43)" fg:x="200" fg:w="2"/><text x="16.3921%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="16.1421%" y="549" width="0.1614%" height="15" fill="rgb(206,209,35)" fg:x="200" fg:w="2"/><text x="16.3921%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="16.1421%" y="533" width="0.1614%" height="15" fill="rgb(245,195,53)" fg:x="200" fg:w="2"/><text x="16.3921%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="16.2228%" y="517" width="0.0807%" height="15" fill="rgb(240,92,26)" fg:x="201" fg:w="1"/><text x="16.4728%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.2228%" y="501" width="0.0807%" height="15" fill="rgb(207,40,23)" fg:x="201" fg:w="1"/><text x="16.4728%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="16.3842%" y="549" width="0.2421%" height="15" fill="rgb(223,111,35)" fg:x="203" fg:w="3"/><text x="16.6342%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="16.6263%" y="549" width="0.0807%" height="15" fill="rgb(229,147,28)" fg:x="206" fg:w="1"/><text x="16.8763%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.6263%" y="533" width="0.0807%" height="15" fill="rgb(211,29,28)" fg:x="206" fg:w="1"/><text x="16.8763%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.6263%" y="517" width="0.0807%" height="15" fill="rgb(228,72,33)" fg:x="206" fg:w="1"/><text x="16.8763%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7070%" y="549" width="0.0807%" height="15" fill="rgb(205,214,31)" fg:x="207" fg:w="1"/><text x="16.9570%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.7070%" y="533" width="0.0807%" height="15" fill="rgb(224,111,15)" fg:x="207" fg:w="1"/><text x="16.9570%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7070%" y="517" width="0.0807%" height="15" fill="rgb(253,21,26)" fg:x="207" fg:w="1"/><text x="16.9570%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7877%" y="501" width="0.0807%" height="15" fill="rgb(245,139,43)" fg:x="208" fg:w="1"/><text x="17.0377%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7877%" y="485" width="0.0807%" height="15" fill="rgb(252,170,7)" fg:x="208" fg:w="1"/><text x="17.0377%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.0299%" y="437" width="0.0807%" height="15" fill="rgb(231,118,14)" fg:x="211" fg:w="1"/><text x="17.2799%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.0299%" y="421" width="0.0807%" height="15" fill="rgb(238,83,0)" fg:x="211" fg:w="1"/><text x="17.2799%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.0299%" y="405" width="0.0807%" height="15" fill="rgb(221,39,39)" fg:x="211" fg:w="1"/><text x="17.2799%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="17.0299%" y="469" width="0.1614%" height="15" fill="rgb(222,119,46)" fg:x="211" fg:w="2"/><text x="17.2799%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="17.0299%" y="453" width="0.1614%" height="15" fill="rgb(222,165,49)" fg:x="211" fg:w="2"/><text x="17.2799%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1106%" y="437" width="0.0807%" height="15" fill="rgb(219,113,52)" fg:x="212" fg:w="1"/><text x="17.3606%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="16.8684%" y="501" width="0.4036%" height="15" fill="rgb(214,7,15)" fg:x="209" fg:w="5"/><text x="17.1184%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="16.8684%" y="485" width="0.4036%" height="15" fill="rgb(235,32,4)" fg:x="209" fg:w="5"/><text x="17.1184%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1913%" y="469" width="0.0807%" height="15" fill="rgb(238,90,54)" fg:x="213" fg:w="1"/><text x="17.4413%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="17.2720%" y="485" width="0.0807%" height="15" fill="rgb(213,208,19)" fg:x="214" fg:w="1"/><text x="17.5220%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.5141%" y="437" width="0.0807%" height="15" fill="rgb(233,156,4)" fg:x="217" fg:w="1"/><text x="17.7641%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.5141%" y="421" width="0.0807%" height="15" fill="rgb(207,194,5)" fg:x="217" fg:w="1"/><text x="17.7641%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.89%)</title><rect x="16.7877%" y="533" width="0.8878%" height="15" fill="rgb(206,111,30)" fg:x="208" fg:w="11"/><text x="17.0377%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.89%)</title><rect x="16.7877%" y="517" width="0.8878%" height="15" fill="rgb(243,70,54)" fg:x="208" fg:w="11"/><text x="17.0377%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="17.2720%" y="501" width="0.4036%" height="15" fill="rgb(242,28,8)" fg:x="214" fg:w="5"/><text x="17.5220%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="17.3527%" y="485" width="0.3228%" height="15" fill="rgb(219,106,18)" fg:x="215" fg:w="4"/><text x="17.6027%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="17.3527%" y="469" width="0.3228%" height="15" fill="rgb(244,222,10)" fg:x="215" fg:w="4"/><text x="17.6027%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="17.4334%" y="453" width="0.2421%" height="15" fill="rgb(236,179,52)" fg:x="216" fg:w="3"/><text x="17.6834%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.5948%" y="437" width="0.0807%" height="15" fill="rgb(213,23,39)" fg:x="218" fg:w="1"/><text x="17.8448%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.5948%" y="421" width="0.0807%" height="15" fill="rgb(238,48,10)" fg:x="218" fg:w="1"/><text x="17.8448%" y="431.50"></text></g><g><title>engine::session::Session::flush (65 samples, 5.25%)</title><rect x="12.5908%" y="709" width="5.2462%" height="15" fill="rgb(251,196,23)" fg:x="156" fg:w="65"/><text x="12.8408%" y="719.50">engine..</text></g><g><title>engine::session::Session::save_changes (63 samples, 5.08%)</title><rect x="12.7522%" y="693" width="5.0847%" height="15" fill="rgb(250,152,24)" fg:x="158" fg:w="63"/><text x="13.0022%" y="703.50">engine..</text></g><g><title>engine::session::state::State::close (63 samples, 5.08%)</title><rect x="12.7522%" y="677" width="5.0847%" height="15" fill="rgb(209,150,17)" fg:x="158" fg:w="63"/><text x="13.0022%" y="687.50">engine..</text></g><g><title>engine::session::state::State::flush_entities (63 samples, 5.08%)</title><rect x="12.7522%" y="661" width="5.0847%" height="15" fill="rgb(234,202,34)" fg:x="158" fg:w="63"/><text x="13.0022%" y="671.50">engine..</text></g><g><title>core::iter::adapters::try_process (61 samples, 4.92%)</title><rect x="12.9136%" y="645" width="4.9233%" height="15" fill="rgb(253,148,53)" fg:x="160" fg:w="61"/><text x="13.1636%" y="655.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (61 samples, 4.92%)</title><rect x="12.9136%" y="629" width="4.9233%" height="15" fill="rgb(218,129,16)" fg:x="160" fg:w="61"/><text x="13.1636%" y="639.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (61 samples, 4.92%)</title><rect x="12.9136%" y="613" width="4.9233%" height="15" fill="rgb(216,85,19)" fg:x="160" fg:w="61"/><text x="13.1636%" y="623.50">engine..</text></g><g><title>kernel::model::any_entity_changes (23 samples, 1.86%)</title><rect x="15.9806%" y="597" width="1.8563%" height="15" fill="rgb(235,228,7)" fg:x="198" fg:w="23"/><text x="16.2306%" y="607.50">k..</text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (19 samples, 1.53%)</title><rect x="16.3035%" y="581" width="1.5335%" height="15" fill="rgb(245,175,0)" fg:x="202" fg:w="19"/><text x="16.5535%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (19 samples, 1.53%)</title><rect x="16.3035%" y="565" width="1.5335%" height="15" fill="rgb(208,168,36)" fg:x="202" fg:w="19"/><text x="16.5535%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.05%)</title><rect x="16.7877%" y="549" width="1.0492%" height="15" fill="rgb(246,171,24)" fg:x="208" fg:w="13"/><text x="17.0377%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.6755%" y="533" width="0.1614%" height="15" fill="rgb(215,142,24)" fg:x="219" fg:w="2"/><text x="17.9255%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.7563%" y="517" width="0.0807%" height="15" fill="rgb(250,187,7)" fg:x="220" fg:w="1"/><text x="18.0063%" y="527.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="17.8370%" y="709" width="0.0807%" height="15" fill="rgb(228,66,33)" fg:x="221" fg:w="1"/><text x="18.0870%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="17.8370%" y="693" width="0.0807%" height="15" fill="rgb(234,215,21)" fg:x="221" fg:w="1"/><text x="18.0870%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="17.8370%" y="677" width="0.0807%" height="15" fill="rgb(222,191,20)" fg:x="221" fg:w="1"/><text x="18.0870%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="17.8370%" y="661" width="0.0807%" height="15" fill="rgb(245,79,54)" fg:x="221" fg:w="1"/><text x="18.0870%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="17.9984%" y="677" width="0.1614%" height="15" fill="rgb(240,10,37)" fg:x="223" fg:w="2"/><text x="18.2484%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.0791%" y="661" width="0.0807%" height="15" fill="rgb(214,192,32)" fg:x="224" fg:w="1"/><text x="18.3291%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.0791%" y="645" width="0.0807%" height="15" fill="rgb(209,36,54)" fg:x="224" fg:w="1"/><text x="18.3291%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.0791%" y="629" width="0.0807%" height="15" fill="rgb(220,10,11)" fg:x="224" fg:w="1"/><text x="18.3291%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.0791%" y="613" width="0.0807%" height="15" fill="rgb(221,106,17)" fg:x="224" fg:w="1"/><text x="18.3291%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.0791%" y="597" width="0.0807%" height="15" fill="rgb(251,142,44)" fg:x="224" fg:w="1"/><text x="18.3291%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.0791%" y="581" width="0.0807%" height="15" fill="rgb(238,13,15)" fg:x="224" fg:w="1"/><text x="18.3291%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.0791%" y="565" width="0.0807%" height="15" fill="rgb(208,107,27)" fg:x="224" fg:w="1"/><text x="18.3291%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="18.0791%" y="549" width="0.0807%" height="15" fill="rgb(205,136,37)" fg:x="224" fg:w="1"/><text x="18.3291%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.0791%" y="533" width="0.0807%" height="15" fill="rgb(250,205,27)" fg:x="224" fg:w="1"/><text x="18.3291%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="18.1598%" y="677" width="0.0807%" height="15" fill="rgb(210,80,43)" fg:x="225" fg:w="1"/><text x="18.4098%" y="687.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="18.1598%" y="661" width="0.0807%" height="15" fill="rgb(247,160,36)" fg:x="225" fg:w="1"/><text x="18.4098%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.2405%" y="613" width="0.0807%" height="15" fill="rgb(234,13,49)" fg:x="226" fg:w="1"/><text x="18.4905%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.2405%" y="597" width="0.0807%" height="15" fill="rgb(234,122,0)" fg:x="226" fg:w="1"/><text x="18.4905%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.2405%" y="581" width="0.0807%" height="15" fill="rgb(207,146,38)" fg:x="226" fg:w="1"/><text x="18.4905%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.2405%" y="565" width="0.0807%" height="15" fill="rgb(207,177,25)" fg:x="226" fg:w="1"/><text x="18.4905%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.2405%" y="549" width="0.0807%" height="15" fill="rgb(211,178,42)" fg:x="226" fg:w="1"/><text x="18.4905%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.2405%" y="533" width="0.0807%" height="15" fill="rgb(230,69,54)" fg:x="226" fg:w="1"/><text x="18.4905%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.2405%" y="517" width="0.0807%" height="15" fill="rgb(214,135,41)" fg:x="226" fg:w="1"/><text x="18.4905%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.2405%" y="501" width="0.0807%" height="15" fill="rgb(237,67,25)" fg:x="226" fg:w="1"/><text x="18.4905%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="18.2405%" y="485" width="0.0807%" height="15" fill="rgb(222,189,50)" fg:x="226" fg:w="1"/><text x="18.4905%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.2405%" y="469" width="0.0807%" height="15" fill="rgb(245,148,34)" fg:x="226" fg:w="1"/><text x="18.4905%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="18.2405%" y="629" width="0.2421%" height="15" fill="rgb(222,29,6)" fg:x="226" fg:w="3"/><text x="18.4905%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.3212%" y="613" width="0.1614%" height="15" fill="rgb(221,189,43)" fg:x="227" fg:w="2"/><text x="18.5712%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.3212%" y="597" width="0.1614%" height="15" fill="rgb(207,36,27)" fg:x="227" fg:w="2"/><text x="18.5712%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.4019%" y="581" width="0.0807%" height="15" fill="rgb(217,90,24)" fg:x="228" fg:w="1"/><text x="18.6519%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.4019%" y="565" width="0.0807%" height="15" fill="rgb(224,66,35)" fg:x="228" fg:w="1"/><text x="18.6519%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="18.2405%" y="661" width="0.3228%" height="15" fill="rgb(221,13,50)" fg:x="226" fg:w="4"/><text x="18.4905%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="18.2405%" y="645" width="0.3228%" height="15" fill="rgb(236,68,49)" fg:x="226" fg:w="4"/><text x="18.4905%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.4826%" y="629" width="0.0807%" height="15" fill="rgb(229,146,28)" fg:x="229" fg:w="1"/><text x="18.7326%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4826%" y="613" width="0.0807%" height="15" fill="rgb(225,31,38)" fg:x="229" fg:w="1"/><text x="18.7326%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.4826%" y="597" width="0.0807%" height="15" fill="rgb(250,208,3)" fg:x="229" fg:w="1"/><text x="18.7326%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.6441%" y="629" width="0.0807%" height="15" fill="rgb(246,54,23)" fg:x="231" fg:w="1"/><text x="18.8941%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.6441%" y="613" width="0.0807%" height="15" fill="rgb(243,76,11)" fg:x="231" fg:w="1"/><text x="18.8941%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="18.6441%" y="597" width="0.0807%" height="15" fill="rgb(245,21,50)" fg:x="231" fg:w="1"/><text x="18.8941%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.81%)</title><rect x="17.9984%" y="693" width="0.8071%" height="15" fill="rgb(228,9,43)" fg:x="223" fg:w="10"/><text x="18.2484%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.56%)</title><rect x="18.2405%" y="677" width="0.5650%" height="15" fill="rgb(208,100,47)" fg:x="226" fg:w="7"/><text x="18.4905%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="18.5634%" y="661" width="0.2421%" height="15" fill="rgb(232,26,8)" fg:x="230" fg:w="3"/><text x="18.8134%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="18.5634%" y="645" width="0.2421%" height="15" fill="rgb(216,166,38)" fg:x="230" fg:w="3"/><text x="18.8134%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="18.7248%" y="629" width="0.0807%" height="15" fill="rgb(251,202,51)" fg:x="232" fg:w="1"/><text x="18.9748%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.7248%" y="613" width="0.0807%" height="15" fill="rgb(254,216,34)" fg:x="232" fg:w="1"/><text x="18.9748%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.7248%" y="597" width="0.0807%" height="15" fill="rgb(251,32,27)" fg:x="232" fg:w="1"/><text x="18.9748%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.8055%" y="677" width="0.1614%" height="15" fill="rgb(208,127,28)" fg:x="233" fg:w="2"/><text x="19.0555%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.8055%" y="661" width="0.1614%" height="15" fill="rgb(224,137,22)" fg:x="233" fg:w="2"/><text x="19.0555%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.8862%" y="645" width="0.0807%" height="15" fill="rgb(254,70,32)" fg:x="234" fg:w="1"/><text x="19.1362%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.8862%" y="629" width="0.0807%" height="15" fill="rgb(229,75,37)" fg:x="234" fg:w="1"/><text x="19.1362%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.8862%" y="613" width="0.0807%" height="15" fill="rgb(252,64,23)" fg:x="234" fg:w="1"/><text x="19.1362%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.8862%" y="597" width="0.0807%" height="15" fill="rgb(232,162,48)" fg:x="234" fg:w="1"/><text x="19.1362%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.8862%" y="581" width="0.0807%" height="15" fill="rgb(246,160,12)" fg:x="234" fg:w="1"/><text x="19.1362%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.8862%" y="565" width="0.0807%" height="15" fill="rgb(247,166,0)" fg:x="234" fg:w="1"/><text x="19.1362%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.8862%" y="549" width="0.0807%" height="15" fill="rgb(249,219,21)" fg:x="234" fg:w="1"/><text x="19.1362%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.8862%" y="533" width="0.0807%" height="15" fill="rgb(205,209,3)" fg:x="234" fg:w="1"/><text x="19.1362%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.8862%" y="517" width="0.0807%" height="15" fill="rgb(243,44,1)" fg:x="234" fg:w="1"/><text x="19.1362%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.8862%" y="501" width="0.0807%" height="15" fill="rgb(206,159,16)" fg:x="234" fg:w="1"/><text x="19.1362%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.8862%" y="485" width="0.0807%" height="15" fill="rgb(244,77,30)" fg:x="234" fg:w="1"/><text x="19.1362%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.8862%" y="469" width="0.0807%" height="15" fill="rgb(218,69,12)" fg:x="234" fg:w="1"/><text x="19.1362%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.8862%" y="453" width="0.0807%" height="15" fill="rgb(212,87,7)" fg:x="234" fg:w="1"/><text x="19.1362%" y="463.50"></text></g><g><title>plugins_core::build::Build::save (14 samples, 1.13%)</title><rect x="17.9177%" y="709" width="1.1299%" height="15" fill="rgb(245,114,25)" fg:x="222" fg:w="14"/><text x="18.1677%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="18.8055%" y="693" width="0.2421%" height="15" fill="rgb(210,61,42)" fg:x="233" fg:w="3"/><text x="19.0555%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.9669%" y="677" width="0.0807%" height="15" fill="rgb(211,52,33)" fg:x="235" fg:w="1"/><text x="19.2169%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.9669%" y="661" width="0.0807%" height="15" fill="rgb(234,58,33)" fg:x="235" fg:w="1"/><text x="19.2169%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.9669%" y="645" width="0.0807%" height="15" fill="rgb(220,115,36)" fg:x="235" fg:w="1"/><text x="19.2169%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.9669%" y="629" width="0.0807%" height="15" fill="rgb(243,153,54)" fg:x="235" fg:w="1"/><text x="19.2169%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.9669%" y="613" width="0.0807%" height="15" fill="rgb(251,47,18)" fg:x="235" fg:w="1"/><text x="19.2169%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.9669%" y="597" width="0.0807%" height="15" fill="rgb(242,102,42)" fg:x="235" fg:w="1"/><text x="19.2169%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="19.0476%" y="677" width="0.0807%" height="15" fill="rgb(234,31,38)" fg:x="236" fg:w="1"/><text x="19.2976%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="19.0476%" y="661" width="0.0807%" height="15" fill="rgb(221,117,51)" fg:x="236" fg:w="1"/><text x="19.2976%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="19.0476%" y="645" width="0.0807%" height="15" fill="rgb(212,20,18)" fg:x="236" fg:w="1"/><text x="19.2976%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="19.0476%" y="629" width="0.0807%" height="15" fill="rgb(245,133,36)" fg:x="236" fg:w="1"/><text x="19.2976%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0476%" y="613" width="0.0807%" height="15" fill="rgb(212,6,19)" fg:x="236" fg:w="1"/><text x="19.2976%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0476%" y="597" width="0.0807%" height="15" fill="rgb(218,1,36)" fg:x="236" fg:w="1"/><text x="19.2976%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0476%" y="581" width="0.0807%" height="15" fill="rgb(246,84,54)" fg:x="236" fg:w="1"/><text x="19.2976%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="19.1283%" y="645" width="0.1614%" height="15" fill="rgb(242,110,6)" fg:x="237" fg:w="2"/><text x="19.3783%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="19.1283%" y="629" width="0.1614%" height="15" fill="rgb(214,47,5)" fg:x="237" fg:w="2"/><text x="19.3783%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="19.1283%" y="613" width="0.1614%" height="15" fill="rgb(218,159,25)" fg:x="237" fg:w="2"/><text x="19.3783%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.2090%" y="597" width="0.0807%" height="15" fill="rgb(215,211,28)" fg:x="238" fg:w="1"/><text x="19.4590%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.2090%" y="581" width="0.0807%" height="15" fill="rgb(238,59,32)" fg:x="238" fg:w="1"/><text x="19.4590%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.32%)</title><rect x="19.0476%" y="709" width="0.3228%" height="15" fill="rgb(226,82,3)" fg:x="236" fg:w="4"/><text x="19.2976%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="19.0476%" y="693" width="0.3228%" height="15" fill="rgb(240,164,32)" fg:x="236" fg:w="4"/><text x="19.2976%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="19.1283%" y="677" width="0.2421%" height="15" fill="rgb(232,46,7)" fg:x="237" fg:w="3"/><text x="19.3783%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (3 samples, 0.24%)</title><rect x="19.1283%" y="661" width="0.2421%" height="15" fill="rgb(229,129,53)" fg:x="237" fg:w="3"/><text x="19.3783%" y="671.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="19.2897%" y="645" width="0.0807%" height="15" fill="rgb(234,188,29)" fg:x="239" fg:w="1"/><text x="19.5397%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.2897%" y="629" width="0.0807%" height="15" fill="rgb(246,141,4)" fg:x="239" fg:w="1"/><text x="19.5397%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3705%" y="677" width="0.0807%" height="15" fill="rgb(229,23,39)" fg:x="240" fg:w="1"/><text x="19.6205%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.3705%" y="661" width="0.0807%" height="15" fill="rgb(206,12,3)" fg:x="240" fg:w="1"/><text x="19.6205%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3705%" y="645" width="0.0807%" height="15" fill="rgb(252,226,20)" fg:x="240" fg:w="1"/><text x="19.6205%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.3705%" y="629" width="0.0807%" height="15" fill="rgb(216,123,35)" fg:x="240" fg:w="1"/><text x="19.6205%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.3705%" y="613" width="0.0807%" height="15" fill="rgb(212,68,40)" fg:x="240" fg:w="1"/><text x="19.6205%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.3705%" y="597" width="0.0807%" height="15" fill="rgb(254,125,32)" fg:x="240" fg:w="1"/><text x="19.6205%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.3705%" y="581" width="0.0807%" height="15" fill="rgb(253,97,22)" fg:x="240" fg:w="1"/><text x="19.6205%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.3705%" y="565" width="0.0807%" height="15" fill="rgb(241,101,14)" fg:x="240" fg:w="1"/><text x="19.6205%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.3705%" y="549" width="0.0807%" height="15" fill="rgb(238,103,29)" fg:x="240" fg:w="1"/><text x="19.6205%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.3705%" y="533" width="0.0807%" height="15" fill="rgb(233,195,47)" fg:x="240" fg:w="1"/><text x="19.6205%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.3705%" y="517" width="0.0807%" height="15" fill="rgb(246,218,30)" fg:x="240" fg:w="1"/><text x="19.6205%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.3705%" y="501" width="0.0807%" height="15" fill="rgb(219,145,47)" fg:x="240" fg:w="1"/><text x="19.6205%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.3705%" y="485" width="0.0807%" height="15" fill="rgb(243,12,26)" fg:x="240" fg:w="1"/><text x="19.6205%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.3705%" y="469" width="0.0807%" height="15" fill="rgb(214,87,16)" fg:x="240" fg:w="1"/><text x="19.6205%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.3705%" y="453" width="0.0807%" height="15" fill="rgb(208,99,42)" fg:x="240" fg:w="1"/><text x="19.6205%" y="463.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (4 samples, 0.32%)</title><rect x="19.3705%" y="709" width="0.3228%" height="15" fill="rgb(253,99,2)" fg:x="240" fg:w="4"/><text x="19.6205%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="19.3705%" y="693" width="0.3228%" height="15" fill="rgb(220,168,23)" fg:x="240" fg:w="4"/><text x="19.6205%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="19.4512%" y="677" width="0.2421%" height="15" fill="rgb(242,38,24)" fg:x="241" fg:w="3"/><text x="19.7012%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="19.4512%" y="661" width="0.2421%" height="15" fill="rgb(225,182,9)" fg:x="241" fg:w="3"/><text x="19.7012%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.6126%" y="645" width="0.0807%" height="15" fill="rgb(243,178,37)" fg:x="243" fg:w="1"/><text x="19.8626%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.6126%" y="629" width="0.0807%" height="15" fill="rgb(232,139,19)" fg:x="243" fg:w="1"/><text x="19.8626%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="19.6933%" y="693" width="0.0807%" height="15" fill="rgb(225,201,24)" fg:x="244" fg:w="1"/><text x="19.9433%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="19.6933%" y="677" width="0.0807%" height="15" fill="rgb(221,47,46)" fg:x="244" fg:w="1"/><text x="19.9433%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="19.6933%" y="661" width="0.0807%" height="15" fill="rgb(249,23,13)" fg:x="244" fg:w="1"/><text x="19.9433%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="19.6933%" y="645" width="0.0807%" height="15" fill="rgb(219,9,5)" fg:x="244" fg:w="1"/><text x="19.9433%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.6933%" y="629" width="0.0807%" height="15" fill="rgb(254,171,16)" fg:x="244" fg:w="1"/><text x="19.9433%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="19.7740%" y="693" width="0.0807%" height="15" fill="rgb(230,171,20)" fg:x="245" fg:w="1"/><text x="20.0240%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="19.6933%" y="709" width="0.3228%" height="15" fill="rgb(210,71,41)" fg:x="244" fg:w="4"/><text x="19.9433%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="19.8547%" y="693" width="0.1614%" height="15" fill="rgb(206,173,20)" fg:x="246" fg:w="2"/><text x="20.1047%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="19.8547%" y="677" width="0.1614%" height="15" fill="rgb(233,88,34)" fg:x="246" fg:w="2"/><text x="20.1047%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="19.8547%" y="661" width="0.1614%" height="15" fill="rgb(223,209,46)" fg:x="246" fg:w="2"/><text x="20.1047%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="19.8547%" y="645" width="0.1614%" height="15" fill="rgb(250,43,18)" fg:x="246" fg:w="2"/><text x="20.1047%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="19.8547%" y="629" width="0.1614%" height="15" fill="rgb(208,13,10)" fg:x="246" fg:w="2"/><text x="20.1047%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="19.8547%" y="613" width="0.1614%" height="15" fill="rgb(212,200,36)" fg:x="246" fg:w="2"/><text x="20.1047%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.8547%" y="597" width="0.1614%" height="15" fill="rgb(225,90,30)" fg:x="246" fg:w="2"/><text x="20.1047%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.9354%" y="581" width="0.0807%" height="15" fill="rgb(236,182,39)" fg:x="247" fg:w="1"/><text x="20.1854%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="19.9354%" y="565" width="0.0807%" height="15" fill="rgb(212,144,35)" fg:x="247" fg:w="1"/><text x="20.1854%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (98 samples, 7.91%)</title><rect x="12.1872%" y="725" width="7.9096%" height="15" fill="rgb(228,63,44)" fg:x="151" fg:w="98"/><text x="12.4372%" y="735.50">plugins_cor..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="20.0161%" y="709" width="0.0807%" height="15" fill="rgb(228,109,6)" fg:x="248" fg:w="1"/><text x="20.2661%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.0969%" y="597" width="0.0807%" height="15" fill="rgb(238,117,24)" fg:x="249" fg:w="1"/><text x="20.3469%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.0969%" y="581" width="0.0807%" height="15" fill="rgb(242,26,26)" fg:x="249" fg:w="1"/><text x="20.3469%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.0969%" y="565" width="0.0807%" height="15" fill="rgb(221,92,48)" fg:x="249" fg:w="1"/><text x="20.3469%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.0969%" y="549" width="0.0807%" height="15" fill="rgb(209,209,32)" fg:x="249" fg:w="1"/><text x="20.3469%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.0969%" y="533" width="0.0807%" height="15" fill="rgb(221,70,22)" fg:x="249" fg:w="1"/><text x="20.3469%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.0969%" y="517" width="0.0807%" height="15" fill="rgb(248,145,5)" fg:x="249" fg:w="1"/><text x="20.3469%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.0969%" y="501" width="0.0807%" height="15" fill="rgb(226,116,26)" fg:x="249" fg:w="1"/><text x="20.3469%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.0969%" y="485" width="0.0807%" height="15" fill="rgb(244,5,17)" fg:x="249" fg:w="1"/><text x="20.3469%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.0969%" y="469" width="0.0807%" height="15" fill="rgb(252,159,33)" fg:x="249" fg:w="1"/><text x="20.3469%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.0969%" y="453" width="0.0807%" height="15" fill="rgb(206,71,0)" fg:x="249" fg:w="1"/><text x="20.3469%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.0969%" y="437" width="0.0807%" height="15" fill="rgb(233,118,54)" fg:x="249" fg:w="1"/><text x="20.3469%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.0969%" y="421" width="0.0807%" height="15" fill="rgb(234,83,48)" fg:x="249" fg:w="1"/><text x="20.3469%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.0969%" y="405" width="0.0807%" height="15" fill="rgb(228,3,54)" fg:x="249" fg:w="1"/><text x="20.3469%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0969%" y="389" width="0.0807%" height="15" fill="rgb(226,155,13)" fg:x="249" fg:w="1"/><text x="20.3469%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="20.0969%" y="613" width="0.1614%" height="15" fill="rgb(241,28,37)" fg:x="249" fg:w="2"/><text x="20.3469%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.1776%" y="597" width="0.0807%" height="15" fill="rgb(233,93,10)" fg:x="250" fg:w="1"/><text x="20.4276%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.1776%" y="581" width="0.0807%" height="15" fill="rgb(225,113,19)" fg:x="250" fg:w="1"/><text x="20.4276%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.1776%" y="565" width="0.0807%" height="15" fill="rgb(241,2,18)" fg:x="250" fg:w="1"/><text x="20.4276%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.1776%" y="549" width="0.0807%" height="15" fill="rgb(228,207,21)" fg:x="250" fg:w="1"/><text x="20.4276%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="20.0969%" y="645" width="0.2421%" height="15" fill="rgb(213,211,35)" fg:x="249" fg:w="3"/><text x="20.3469%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="20.0969%" y="629" width="0.2421%" height="15" fill="rgb(209,83,10)" fg:x="249" fg:w="3"/><text x="20.3469%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="20.2583%" y="613" width="0.0807%" height="15" fill="rgb(209,164,1)" fg:x="251" fg:w="1"/><text x="20.5083%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.2583%" y="597" width="0.0807%" height="15" fill="rgb(213,184,43)" fg:x="251" fg:w="1"/><text x="20.5083%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="20.0969%" y="693" width="0.3228%" height="15" fill="rgb(231,61,34)" fg:x="249" fg:w="4"/><text x="20.3469%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="20.0969%" y="677" width="0.3228%" height="15" fill="rgb(235,75,3)" fg:x="249" fg:w="4"/><text x="20.3469%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="20.0969%" y="661" width="0.3228%" height="15" fill="rgb(220,106,47)" fg:x="249" fg:w="4"/><text x="20.3469%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="20.3390%" y="645" width="0.0807%" height="15" fill="rgb(210,196,33)" fg:x="252" fg:w="1"/><text x="20.5890%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.3390%" y="629" width="0.0807%" height="15" fill="rgb(229,154,42)" fg:x="252" fg:w="1"/><text x="20.5890%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="20.3390%" y="613" width="0.0807%" height="15" fill="rgb(228,114,26)" fg:x="252" fg:w="1"/><text x="20.5890%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="20.3390%" y="597" width="0.0807%" height="15" fill="rgb(208,144,1)" fg:x="252" fg:w="1"/><text x="20.5890%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="20.3390%" y="581" width="0.0807%" height="15" fill="rgb(239,112,37)" fg:x="252" fg:w="1"/><text x="20.5890%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="20.3390%" y="565" width="0.0807%" height="15" fill="rgb(210,96,50)" fg:x="252" fg:w="1"/><text x="20.5890%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.40%)</title><rect x="20.0969%" y="725" width="0.4036%" height="15" fill="rgb(222,178,2)" fg:x="249" fg:w="5"/><text x="20.3469%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.40%)</title><rect x="20.0969%" y="709" width="0.4036%" height="15" fill="rgb(226,74,18)" fg:x="249" fg:w="5"/><text x="20.3469%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="20.4197%" y="693" width="0.0807%" height="15" fill="rgb(225,67,54)" fg:x="253" fg:w="1"/><text x="20.6697%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="20.4197%" y="677" width="0.0807%" height="15" fill="rgb(251,92,32)" fg:x="253" fg:w="1"/><text x="20.6697%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="20.4197%" y="661" width="0.0807%" height="15" fill="rgb(228,149,22)" fg:x="253" fg:w="1"/><text x="20.6697%" y="671.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="20.4197%" y="645" width="0.0807%" height="15" fill="rgb(243,54,13)" fg:x="253" fg:w="1"/><text x="20.6697%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="20.5004%" y="693" width="0.0807%" height="15" fill="rgb(243,180,28)" fg:x="254" fg:w="1"/><text x="20.7504%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="20.5004%" y="709" width="0.1614%" height="15" fill="rgb(208,167,24)" fg:x="254" fg:w="2"/><text x="20.7504%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="20.5811%" y="693" width="0.0807%" height="15" fill="rgb(245,73,45)" fg:x="255" fg:w="1"/><text x="20.8311%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.5811%" y="677" width="0.0807%" height="15" fill="rgb(237,203,48)" fg:x="255" fg:w="1"/><text x="20.8311%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="20.5811%" y="661" width="0.0807%" height="15" fill="rgb(211,197,16)" fg:x="255" fg:w="1"/><text x="20.8311%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="20.5811%" y="645" width="0.0807%" height="15" fill="rgb(243,99,51)" fg:x="255" fg:w="1"/><text x="20.8311%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.5811%" y="629" width="0.0807%" height="15" fill="rgb(215,123,29)" fg:x="255" fg:w="1"/><text x="20.8311%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.5811%" y="613" width="0.0807%" height="15" fill="rgb(239,186,37)" fg:x="255" fg:w="1"/><text x="20.8311%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="20.5811%" y="597" width="0.0807%" height="15" fill="rgb(252,136,39)" fg:x="255" fg:w="1"/><text x="20.8311%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.6618%" y="709" width="0.0807%" height="15" fill="rgb(223,213,32)" fg:x="256" fg:w="1"/><text x="20.9118%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.6618%" y="693" width="0.0807%" height="15" fill="rgb(233,115,5)" fg:x="256" fg:w="1"/><text x="20.9118%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="20.6618%" y="677" width="0.0807%" height="15" fill="rgb(207,226,44)" fg:x="256" fg:w="1"/><text x="20.9118%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.6618%" y="661" width="0.0807%" height="15" fill="rgb(208,126,0)" fg:x="256" fg:w="1"/><text x="20.9118%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.6618%" y="645" width="0.0807%" height="15" fill="rgb(244,66,21)" fg:x="256" fg:w="1"/><text x="20.9118%" y="655.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="20.7425%" y="693" width="0.0807%" height="15" fill="rgb(222,97,12)" fg:x="257" fg:w="1"/><text x="20.9925%" y="703.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="20.7425%" y="709" width="0.1614%" height="15" fill="rgb(219,213,19)" fg:x="257" fg:w="2"/><text x="20.9925%" y="719.50"></text></g><g><title>kernel::model::builder::build_entity (1 samples, 0.08%)</title><rect x="20.8232%" y="693" width="0.0807%" height="15" fill="rgb(252,169,30)" fg:x="258" fg:w="1"/><text x="21.0732%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="20.9847%" y="693" width="0.1614%" height="15" fill="rgb(206,32,51)" fg:x="260" fg:w="2"/><text x="21.2347%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="21.2268%" y="677" width="0.0807%" height="15" fill="rgb(250,172,42)" fg:x="263" fg:w="1"/><text x="21.4768%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.3075%" y="613" width="0.0807%" height="15" fill="rgb(209,34,43)" fg:x="264" fg:w="1"/><text x="21.5575%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.3075%" y="597" width="0.0807%" height="15" fill="rgb(223,11,35)" fg:x="264" fg:w="1"/><text x="21.5575%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.3075%" y="581" width="0.0807%" height="15" fill="rgb(251,219,26)" fg:x="264" fg:w="1"/><text x="21.5575%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="21.3075%" y="629" width="0.2421%" height="15" fill="rgb(231,119,3)" fg:x="264" fg:w="3"/><text x="21.5575%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.3882%" y="613" width="0.1614%" height="15" fill="rgb(216,97,11)" fg:x="265" fg:w="2"/><text x="21.6382%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.3882%" y="597" width="0.1614%" height="15" fill="rgb(223,59,9)" fg:x="265" fg:w="2"/><text x="21.6382%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.4689%" y="581" width="0.0807%" height="15" fill="rgb(233,93,31)" fg:x="266" fg:w="1"/><text x="21.7189%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.4689%" y="565" width="0.0807%" height="15" fill="rgb(239,81,33)" fg:x="266" fg:w="1"/><text x="21.7189%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.4689%" y="549" width="0.0807%" height="15" fill="rgb(213,120,34)" fg:x="266" fg:w="1"/><text x="21.7189%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="21.3075%" y="661" width="0.3228%" height="15" fill="rgb(243,49,53)" fg:x="264" fg:w="4"/><text x="21.5575%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="21.3075%" y="645" width="0.3228%" height="15" fill="rgb(247,216,33)" fg:x="264" fg:w="4"/><text x="21.5575%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="21.5496%" y="629" width="0.0807%" height="15" fill="rgb(226,26,14)" fg:x="267" fg:w="1"/><text x="21.7996%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.5496%" y="613" width="0.0807%" height="15" fill="rgb(215,49,53)" fg:x="267" fg:w="1"/><text x="21.7996%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="21.5496%" y="597" width="0.0807%" height="15" fill="rgb(245,162,40)" fg:x="267" fg:w="1"/><text x="21.7996%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="21.5496%" y="581" width="0.0807%" height="15" fill="rgb(229,68,17)" fg:x="267" fg:w="1"/><text x="21.7996%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.5496%" y="565" width="0.0807%" height="15" fill="rgb(213,182,10)" fg:x="267" fg:w="1"/><text x="21.7996%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="21.1461%" y="693" width="0.5650%" height="15" fill="rgb(245,125,30)" fg:x="262" fg:w="7"/><text x="21.3961%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="21.3075%" y="677" width="0.4036%" height="15" fill="rgb(232,202,2)" fg:x="264" fg:w="5"/><text x="21.5575%" y="687.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="21.6303%" y="661" width="0.0807%" height="15" fill="rgb(237,140,51)" fg:x="268" fg:w="1"/><text x="21.8803%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.6303%" y="645" width="0.0807%" height="15" fill="rgb(236,157,25)" fg:x="268" fg:w="1"/><text x="21.8803%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.6303%" y="629" width="0.0807%" height="15" fill="rgb(219,209,0)" fg:x="268" fg:w="1"/><text x="21.8803%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.6303%" y="613" width="0.0807%" height="15" fill="rgb(240,116,54)" fg:x="268" fg:w="1"/><text x="21.8803%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.6303%" y="597" width="0.0807%" height="15" fill="rgb(216,10,36)" fg:x="268" fg:w="1"/><text x="21.8803%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.6303%" y="581" width="0.0807%" height="15" fill="rgb(222,72,44)" fg:x="268" fg:w="1"/><text x="21.8803%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.6303%" y="565" width="0.0807%" height="15" fill="rgb(232,159,9)" fg:x="268" fg:w="1"/><text x="21.8803%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.6303%" y="549" width="0.0807%" height="15" fill="rgb(210,39,32)" fg:x="268" fg:w="1"/><text x="21.8803%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.6303%" y="533" width="0.0807%" height="15" fill="rgb(216,194,45)" fg:x="268" fg:w="1"/><text x="21.8803%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.6303%" y="517" width="0.0807%" height="15" fill="rgb(218,18,35)" fg:x="268" fg:w="1"/><text x="21.8803%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.6303%" y="501" width="0.0807%" height="15" fill="rgb(207,83,51)" fg:x="268" fg:w="1"/><text x="21.8803%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.6303%" y="485" width="0.0807%" height="15" fill="rgb(225,63,43)" fg:x="268" fg:w="1"/><text x="21.8803%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.6303%" y="469" width="0.0807%" height="15" fill="rgb(207,57,36)" fg:x="268" fg:w="1"/><text x="21.8803%" y="479.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (210 samples, 16.95%)</title><rect x="4.9233%" y="741" width="16.9492%" height="15" fill="rgb(216,99,33)" fg:x="61" fg:w="210"/><text x="5.1733%" y="751.50">&lt;tests::HoldingKeyInVessel..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (17 samples, 1.37%)</title><rect x="20.5004%" y="725" width="1.3721%" height="15" fill="rgb(225,42,16)" fg:x="254" fg:w="17"/><text x="20.7504%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (12 samples, 0.97%)</title><rect x="20.9040%" y="709" width="0.9685%" height="15" fill="rgb(220,201,45)" fg:x="259" fg:w="12"/><text x="21.1540%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="21.7111%" y="693" width="0.1614%" height="15" fill="rgb(225,33,4)" fg:x="269" fg:w="2"/><text x="21.9611%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.7111%" y="677" width="0.1614%" height="15" fill="rgb(224,33,50)" fg:x="269" fg:w="2"/><text x="21.9611%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.7111%" y="661" width="0.1614%" height="15" fill="rgb(246,198,51)" fg:x="269" fg:w="2"/><text x="21.9611%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="21.7111%" y="645" width="0.1614%" height="15" fill="rgb(205,22,4)" fg:x="269" fg:w="2"/><text x="21.9611%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.7111%" y="629" width="0.1614%" height="15" fill="rgb(206,3,8)" fg:x="269" fg:w="2"/><text x="21.9611%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.7111%" y="613" width="0.1614%" height="15" fill="rgb(251,23,15)" fg:x="269" fg:w="2"/><text x="21.9611%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.7111%" y="597" width="0.1614%" height="15" fill="rgb(252,88,28)" fg:x="269" fg:w="2"/><text x="21.9611%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="21.7111%" y="581" width="0.1614%" height="15" fill="rgb(212,127,14)" fg:x="269" fg:w="2"/><text x="21.9611%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.7918%" y="565" width="0.0807%" height="15" fill="rgb(247,145,37)" fg:x="270" fg:w="1"/><text x="22.0418%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="21.8725%" y="741" width="0.0807%" height="15" fill="rgb(209,117,53)" fg:x="271" fg:w="1"/><text x="22.1225%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.9532%" y="709" width="0.0807%" height="15" fill="rgb(212,90,42)" fg:x="272" fg:w="1"/><text x="22.2032%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.9532%" y="693" width="0.0807%" height="15" fill="rgb(218,164,37)" fg:x="272" fg:w="1"/><text x="22.2032%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.9532%" y="677" width="0.0807%" height="15" fill="rgb(246,65,34)" fg:x="272" fg:w="1"/><text x="22.2032%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.9532%" y="661" width="0.0807%" height="15" fill="rgb(231,100,33)" fg:x="272" fg:w="1"/><text x="22.2032%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.9532%" y="645" width="0.0807%" height="15" fill="rgb(228,126,14)" fg:x="272" fg:w="1"/><text x="22.2032%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="21.9532%" y="629" width="0.0807%" height="15" fill="rgb(215,173,21)" fg:x="272" fg:w="1"/><text x="22.2032%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="21.9532%" y="613" width="0.0807%" height="15" fill="rgb(210,6,40)" fg:x="272" fg:w="1"/><text x="22.2032%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="21.9532%" y="725" width="0.1614%" height="15" fill="rgb(212,48,18)" fg:x="272" fg:w="2"/><text x="22.2032%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.0339%" y="709" width="0.0807%" height="15" fill="rgb(230,214,11)" fg:x="273" fg:w="1"/><text x="22.2839%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.0339%" y="693" width="0.0807%" height="15" fill="rgb(254,105,39)" fg:x="273" fg:w="1"/><text x="22.2839%" y="703.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="22.1146%" y="613" width="0.1614%" height="15" fill="rgb(245,158,5)" fg:x="274" fg:w="2"/><text x="22.3646%" y="623.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="22.1146%" y="597" width="0.1614%" height="15" fill="rgb(249,208,11)" fg:x="274" fg:w="2"/><text x="22.3646%" y="607.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="22.1953%" y="581" width="0.0807%" height="15" fill="rgb(210,39,28)" fg:x="275" fg:w="1"/><text x="22.4453%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="22.1953%" y="565" width="0.0807%" height="15" fill="rgb(211,56,53)" fg:x="275" fg:w="1"/><text x="22.4453%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="22.1953%" y="549" width="0.0807%" height="15" fill="rgb(226,201,30)" fg:x="275" fg:w="1"/><text x="22.4453%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.08%)</title><rect x="22.1953%" y="533" width="0.0807%" height="15" fill="rgb(239,101,34)" fg:x="275" fg:w="1"/><text x="22.4453%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="22.1146%" y="725" width="0.2421%" height="15" fill="rgb(226,209,5)" fg:x="274" fg:w="3"/><text x="22.3646%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="22.1146%" y="709" width="0.2421%" height="15" fill="rgb(250,105,47)" fg:x="274" fg:w="3"/><text x="22.3646%" y="719.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="22.1146%" y="693" width="0.2421%" height="15" fill="rgb(230,72,3)" fg:x="274" fg:w="3"/><text x="22.3646%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="22.1146%" y="677" width="0.2421%" height="15" fill="rgb(232,218,39)" fg:x="274" fg:w="3"/><text x="22.3646%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="22.1146%" y="661" width="0.2421%" height="15" fill="rgb(248,166,6)" fg:x="274" fg:w="3"/><text x="22.3646%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (3 samples, 0.24%)</title><rect x="22.1146%" y="645" width="0.2421%" height="15" fill="rgb(247,89,20)" fg:x="274" fg:w="3"/><text x="22.3646%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (3 samples, 0.24%)</title><rect x="22.1146%" y="629" width="0.2421%" height="15" fill="rgb(248,130,54)" fg:x="274" fg:w="3"/><text x="22.3646%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="22.2760%" y="613" width="0.0807%" height="15" fill="rgb(234,196,4)" fg:x="276" fg:w="1"/><text x="22.5260%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="22.2760%" y="597" width="0.0807%" height="15" fill="rgb(250,143,31)" fg:x="276" fg:w="1"/><text x="22.5260%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="22.2760%" y="581" width="0.0807%" height="15" fill="rgb(211,110,34)" fg:x="276" fg:w="1"/><text x="22.5260%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="22.2760%" y="565" width="0.0807%" height="15" fill="rgb(215,124,48)" fg:x="276" fg:w="1"/><text x="22.5260%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.2760%" y="549" width="0.0807%" height="15" fill="rgb(216,46,13)" fg:x="276" fg:w="1"/><text x="22.5260%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.2760%" y="533" width="0.0807%" height="15" fill="rgb(205,184,25)" fg:x="276" fg:w="1"/><text x="22.5260%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="22.2760%" y="517" width="0.0807%" height="15" fill="rgb(228,1,10)" fg:x="276" fg:w="1"/><text x="22.5260%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="22.2760%" y="501" width="0.0807%" height="15" fill="rgb(213,116,27)" fg:x="276" fg:w="1"/><text x="22.5260%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="22.2760%" y="485" width="0.0807%" height="15" fill="rgb(241,95,50)" fg:x="276" fg:w="1"/><text x="22.5260%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="22.2760%" y="469" width="0.0807%" height="15" fill="rgb(238,48,32)" fg:x="276" fg:w="1"/><text x="22.5260%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="22.2760%" y="453" width="0.0807%" height="15" fill="rgb(235,113,49)" fg:x="276" fg:w="1"/><text x="22.5260%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="22.2760%" y="437" width="0.0807%" height="15" fill="rgb(205,127,43)" fg:x="276" fg:w="1"/><text x="22.5260%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.2760%" y="421" width="0.0807%" height="15" fill="rgb(250,162,2)" fg:x="276" fg:w="1"/><text x="22.5260%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="22.2760%" y="405" width="0.0807%" height="15" fill="rgb(220,13,41)" fg:x="276" fg:w="1"/><text x="22.5260%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.2760%" y="389" width="0.0807%" height="15" fill="rgb(249,221,25)" fg:x="276" fg:w="1"/><text x="22.5260%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.2760%" y="373" width="0.0807%" height="15" fill="rgb(215,208,19)" fg:x="276" fg:w="1"/><text x="22.5260%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="22.3567%" y="693" width="0.0807%" height="15" fill="rgb(236,175,2)" fg:x="277" fg:w="1"/><text x="22.6067%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="22.3567%" y="677" width="0.0807%" height="15" fill="rgb(241,52,2)" fg:x="277" fg:w="1"/><text x="22.6067%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="22.3567%" y="661" width="0.0807%" height="15" fill="rgb(248,140,14)" fg:x="277" fg:w="1"/><text x="22.6067%" y="671.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="22.3567%" y="645" width="0.0807%" height="15" fill="rgb(253,22,42)" fg:x="277" fg:w="1"/><text x="22.6067%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.5182%" y="661" width="0.0807%" height="15" fill="rgb(234,61,47)" fg:x="279" fg:w="1"/><text x="22.7682%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.5182%" y="645" width="0.0807%" height="15" fill="rgb(208,226,15)" fg:x="279" fg:w="1"/><text x="22.7682%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.5182%" y="629" width="0.0807%" height="15" fill="rgb(217,221,4)" fg:x="279" fg:w="1"/><text x="22.7682%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="22.6796%" y="629" width="0.1614%" height="15" fill="rgb(212,174,34)" fg:x="281" fg:w="2"/><text x="22.9296%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="22.7603%" y="613" width="0.0807%" height="15" fill="rgb(253,83,4)" fg:x="282" fg:w="1"/><text x="23.0103%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="22.7603%" y="597" width="0.0807%" height="15" fill="rgb(250,195,49)" fg:x="282" fg:w="1"/><text x="23.0103%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="22.7603%" y="581" width="0.0807%" height="15" fill="rgb(241,192,25)" fg:x="282" fg:w="1"/><text x="23.0103%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.7603%" y="565" width="0.0807%" height="15" fill="rgb(208,124,10)" fg:x="282" fg:w="1"/><text x="23.0103%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="22.6796%" y="645" width="0.2421%" height="15" fill="rgb(222,33,0)" fg:x="281" fg:w="3"/><text x="22.9296%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.8410%" y="629" width="0.0807%" height="15" fill="rgb(234,209,28)" fg:x="283" fg:w="1"/><text x="23.0910%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.8410%" y="613" width="0.0807%" height="15" fill="rgb(224,11,23)" fg:x="283" fg:w="1"/><text x="23.0910%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="22.9217%" y="645" width="0.0807%" height="15" fill="rgb(232,99,1)" fg:x="284" fg:w="1"/><text x="23.1717%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="22.9217%" y="629" width="0.0807%" height="15" fill="rgb(237,95,45)" fg:x="284" fg:w="1"/><text x="23.1717%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="22.9217%" y="613" width="0.0807%" height="15" fill="rgb(208,109,11)" fg:x="284" fg:w="1"/><text x="23.1717%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="22.9217%" y="597" width="0.0807%" height="15" fill="rgb(216,190,48)" fg:x="284" fg:w="1"/><text x="23.1717%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.9217%" y="581" width="0.0807%" height="15" fill="rgb(251,171,36)" fg:x="284" fg:w="1"/><text x="23.1717%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.9217%" y="565" width="0.0807%" height="15" fill="rgb(230,62,22)" fg:x="284" fg:w="1"/><text x="23.1717%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.9217%" y="549" width="0.0807%" height="15" fill="rgb(225,114,35)" fg:x="284" fg:w="1"/><text x="23.1717%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.9217%" y="533" width="0.0807%" height="15" fill="rgb(215,118,42)" fg:x="284" fg:w="1"/><text x="23.1717%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="23.0024%" y="629" width="0.1614%" height="15" fill="rgb(243,119,21)" fg:x="285" fg:w="2"/><text x="23.2524%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="23.0024%" y="613" width="0.1614%" height="15" fill="rgb(252,177,53)" fg:x="285" fg:w="2"/><text x="23.2524%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.0024%" y="597" width="0.1614%" height="15" fill="rgb(237,209,29)" fg:x="285" fg:w="2"/><text x="23.2524%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="23.0024%" y="581" width="0.1614%" height="15" fill="rgb(212,65,23)" fg:x="285" fg:w="2"/><text x="23.2524%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="23.0024%" y="565" width="0.1614%" height="15" fill="rgb(230,222,46)" fg:x="285" fg:w="2"/><text x="23.2524%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="23.0024%" y="549" width="0.1614%" height="15" fill="rgb(215,135,32)" fg:x="285" fg:w="2"/><text x="23.2524%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="23.0024%" y="533" width="0.1614%" height="15" fill="rgb(246,101,22)" fg:x="285" fg:w="2"/><text x="23.2524%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.0831%" y="517" width="0.0807%" height="15" fill="rgb(206,107,13)" fg:x="286" fg:w="1"/><text x="23.3331%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="23.2446%" y="613" width="0.0807%" height="15" fill="rgb(250,100,44)" fg:x="288" fg:w="1"/><text x="23.4946%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.2446%" y="597" width="0.0807%" height="15" fill="rgb(231,147,38)" fg:x="288" fg:w="1"/><text x="23.4946%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="23.3253%" y="597" width="0.3228%" height="15" fill="rgb(229,8,40)" fg:x="289" fg:w="4"/><text x="23.5753%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="23.4060%" y="581" width="0.2421%" height="15" fill="rgb(221,135,30)" fg:x="290" fg:w="3"/><text x="23.6560%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="23.4060%" y="565" width="0.2421%" height="15" fill="rgb(249,193,18)" fg:x="290" fg:w="3"/><text x="23.6560%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="23.4060%" y="549" width="0.2421%" height="15" fill="rgb(209,133,39)" fg:x="290" fg:w="3"/><text x="23.6560%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="23.4060%" y="533" width="0.2421%" height="15" fill="rgb(232,100,14)" fg:x="290" fg:w="3"/><text x="23.6560%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="23.4867%" y="517" width="0.1614%" height="15" fill="rgb(224,185,1)" fg:x="291" fg:w="2"/><text x="23.7367%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="23.4867%" y="501" width="0.1614%" height="15" fill="rgb(223,139,8)" fg:x="291" fg:w="2"/><text x="23.7367%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="23.4867%" y="485" width="0.1614%" height="15" fill="rgb(232,213,38)" fg:x="291" fg:w="2"/><text x="23.7367%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="23.4867%" y="469" width="0.1614%" height="15" fill="rgb(207,94,22)" fg:x="291" fg:w="2"/><text x="23.7367%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="23.6481%" y="597" width="0.0807%" height="15" fill="rgb(219,183,54)" fg:x="293" fg:w="1"/><text x="23.8981%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.6481%" y="581" width="0.0807%" height="15" fill="rgb(216,185,54)" fg:x="293" fg:w="1"/><text x="23.8981%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.6481%" y="565" width="0.0807%" height="15" fill="rgb(254,217,39)" fg:x="293" fg:w="1"/><text x="23.8981%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="23.7288%" y="565" width="0.1614%" height="15" fill="rgb(240,178,23)" fg:x="294" fg:w="2"/><text x="23.9788%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.8095%" y="549" width="0.0807%" height="15" fill="rgb(218,11,47)" fg:x="295" fg:w="1"/><text x="24.0595%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="23.7288%" y="581" width="0.2421%" height="15" fill="rgb(218,51,51)" fg:x="294" fg:w="3"/><text x="23.9788%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.8902%" y="565" width="0.0807%" height="15" fill="rgb(238,126,27)" fg:x="296" fg:w="1"/><text x="24.1402%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.8902%" y="549" width="0.0807%" height="15" fill="rgb(249,202,22)" fg:x="296" fg:w="1"/><text x="24.1402%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.8902%" y="533" width="0.0807%" height="15" fill="rgb(254,195,49)" fg:x="296" fg:w="1"/><text x="24.1402%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="23.7288%" y="597" width="0.3228%" height="15" fill="rgb(208,123,14)" fg:x="294" fg:w="4"/><text x="23.9788%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.9709%" y="581" width="0.0807%" height="15" fill="rgb(224,200,8)" fg:x="297" fg:w="1"/><text x="24.2209%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.9709%" y="565" width="0.0807%" height="15" fill="rgb(217,61,36)" fg:x="297" fg:w="1"/><text x="24.2209%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.9709%" y="549" width="0.0807%" height="15" fill="rgb(206,35,45)" fg:x="297" fg:w="1"/><text x="24.2209%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="23.3253%" y="613" width="0.8878%" height="15" fill="rgb(217,65,33)" fg:x="289" fg:w="11"/><text x="23.5753%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="24.0517%" y="597" width="0.1614%" height="15" fill="rgb(222,158,48)" fg:x="298" fg:w="2"/><text x="24.3017%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.1324%" y="581" width="0.0807%" height="15" fill="rgb(254,2,54)" fg:x="299" fg:w="1"/><text x="24.3824%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.1324%" y="565" width="0.0807%" height="15" fill="rgb(250,143,38)" fg:x="299" fg:w="1"/><text x="24.3824%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.29%)</title><rect x="23.0024%" y="645" width="1.2914%" height="15" fill="rgb(248,25,0)" fg:x="285" fg:w="16"/><text x="23.2524%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.13%)</title><rect x="23.1638%" y="629" width="1.1299%" height="15" fill="rgb(206,152,27)" fg:x="287" fg:w="14"/><text x="23.4138%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.2131%" y="613" width="0.0807%" height="15" fill="rgb(240,77,30)" fg:x="300" fg:w="1"/><text x="24.4631%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.2938%" y="581" width="0.0807%" height="15" fill="rgb(231,5,3)" fg:x="301" fg:w="1"/><text x="24.5438%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.3745%" y="565" width="0.0807%" height="15" fill="rgb(207,226,32)" fg:x="302" fg:w="1"/><text x="24.6245%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.4552%" y="549" width="0.0807%" height="15" fill="rgb(222,207,47)" fg:x="303" fg:w="1"/><text x="24.7052%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.4552%" y="533" width="0.0807%" height="15" fill="rgb(229,115,45)" fg:x="303" fg:w="1"/><text x="24.7052%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.5359%" y="533" width="0.0807%" height="15" fill="rgb(224,191,6)" fg:x="304" fg:w="1"/><text x="24.7859%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="24.2938%" y="613" width="0.4036%" height="15" fill="rgb(230,227,24)" fg:x="301" fg:w="5"/><text x="24.5438%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="24.2938%" y="597" width="0.4036%" height="15" fill="rgb(228,80,19)" fg:x="301" fg:w="5"/><text x="24.5438%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="24.3745%" y="581" width="0.3228%" height="15" fill="rgb(247,229,0)" fg:x="302" fg:w="4"/><text x="24.6245%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="24.4552%" y="565" width="0.2421%" height="15" fill="rgb(237,194,15)" fg:x="303" fg:w="3"/><text x="24.7052%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="24.5359%" y="549" width="0.1614%" height="15" fill="rgb(219,203,20)" fg:x="304" fg:w="2"/><text x="24.7859%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.6166%" y="533" width="0.0807%" height="15" fill="rgb(234,128,8)" fg:x="305" fg:w="1"/><text x="24.8666%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.6166%" y="517" width="0.0807%" height="15" fill="rgb(248,202,8)" fg:x="305" fg:w="1"/><text x="24.8666%" y="527.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="24.6973%" y="613" width="0.0807%" height="15" fill="rgb(206,104,37)" fg:x="306" fg:w="1"/><text x="24.9473%" y="623.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.56%)</title><rect x="24.2938%" y="629" width="0.5650%" height="15" fill="rgb(223,8,27)" fg:x="301" fg:w="7"/><text x="24.5438%" y="639.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="24.7780%" y="613" width="0.0807%" height="15" fill="rgb(216,217,28)" fg:x="307" fg:w="1"/><text x="25.0280%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="24.7780%" y="597" width="0.0807%" height="15" fill="rgb(249,199,1)" fg:x="307" fg:w="1"/><text x="25.0280%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="24.7780%" y="581" width="0.0807%" height="15" fill="rgb(240,85,17)" fg:x="307" fg:w="1"/><text x="25.0280%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="24.7780%" y="565" width="0.0807%" height="15" fill="rgb(206,108,45)" fg:x="307" fg:w="1"/><text x="25.0280%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.0202%" y="597" width="0.0807%" height="15" fill="rgb(245,210,41)" fg:x="310" fg:w="1"/><text x="25.2702%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="25.0202%" y="581" width="0.0807%" height="15" fill="rgb(206,13,37)" fg:x="310" fg:w="1"/><text x="25.2702%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="25.1009%" y="597" width="0.0807%" height="15" fill="rgb(250,61,18)" fg:x="311" fg:w="1"/><text x="25.3509%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="25.1816%" y="581" width="0.0807%" height="15" fill="rgb(235,172,48)" fg:x="312" fg:w="1"/><text x="25.4316%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="25.1816%" y="597" width="0.1614%" height="15" fill="rgb(249,201,17)" fg:x="312" fg:w="2"/><text x="25.4316%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="25.2623%" y="581" width="0.0807%" height="15" fill="rgb(219,208,6)" fg:x="313" fg:w="1"/><text x="25.5123%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.2623%" y="565" width="0.0807%" height="15" fill="rgb(248,31,23)" fg:x="313" fg:w="1"/><text x="25.5123%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="25.3430%" y="597" width="0.0807%" height="15" fill="rgb(245,15,42)" fg:x="314" fg:w="1"/><text x="25.5930%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="25.3430%" y="581" width="0.0807%" height="15" fill="rgb(222,217,39)" fg:x="314" fg:w="1"/><text x="25.5930%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.3430%" y="565" width="0.0807%" height="15" fill="rgb(210,219,27)" fg:x="314" fg:w="1"/><text x="25.5930%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="25.5044%" y="549" width="0.2421%" height="15" fill="rgb(252,166,36)" fg:x="316" fg:w="3"/><text x="25.7544%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="25.5851%" y="533" width="0.1614%" height="15" fill="rgb(245,132,34)" fg:x="317" fg:w="2"/><text x="25.8351%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="25.8273%" y="485" width="0.1614%" height="15" fill="rgb(236,54,3)" fg:x="320" fg:w="2"/><text x="26.0773%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="25.8273%" y="469" width="0.1614%" height="15" fill="rgb(241,173,43)" fg:x="320" fg:w="2"/><text x="26.0773%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="25.9080%" y="453" width="0.0807%" height="15" fill="rgb(215,190,9)" fg:x="321" fg:w="1"/><text x="26.1580%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="25.7466%" y="517" width="0.4036%" height="15" fill="rgb(242,101,16)" fg:x="319" fg:w="5"/><text x="25.9966%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="25.8273%" y="501" width="0.3228%" height="15" fill="rgb(223,190,21)" fg:x="320" fg:w="4"/><text x="26.0773%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="25.9887%" y="485" width="0.1614%" height="15" fill="rgb(215,228,25)" fg:x="322" fg:w="2"/><text x="26.2387%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.48%)</title><rect x="25.7466%" y="549" width="0.4843%" height="15" fill="rgb(225,36,22)" fg:x="319" fg:w="6"/><text x="25.9966%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="25.7466%" y="533" width="0.4843%" height="15" fill="rgb(251,106,46)" fg:x="319" fg:w="6"/><text x="25.9966%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.1501%" y="517" width="0.0807%" height="15" fill="rgb(208,90,1)" fg:x="324" fg:w="1"/><text x="26.4001%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.3115%" y="517" width="0.1614%" height="15" fill="rgb(243,10,4)" fg:x="326" fg:w="2"/><text x="26.5615%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="26.6344%" y="501" width="0.0807%" height="15" fill="rgb(212,137,27)" fg:x="330" fg:w="1"/><text x="26.8844%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="26.7151%" y="501" width="0.0807%" height="15" fill="rgb(231,220,49)" fg:x="331" fg:w="1"/><text x="26.9651%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.7151%" y="485" width="0.0807%" height="15" fill="rgb(237,96,20)" fg:x="331" fg:w="1"/><text x="26.9651%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (17 samples, 1.37%)</title><rect x="25.5044%" y="565" width="1.3721%" height="15" fill="rgb(239,229,30)" fg:x="316" fg:w="17"/><text x="25.7544%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.65%)</title><rect x="26.2308%" y="549" width="0.6457%" height="15" fill="rgb(219,65,33)" fg:x="325" fg:w="8"/><text x="26.4808%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="26.2308%" y="533" width="0.6457%" height="15" fill="rgb(243,134,7)" fg:x="325" fg:w="8"/><text x="26.4808%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="26.4730%" y="517" width="0.4036%" height="15" fill="rgb(216,177,54)" fg:x="328" fg:w="5"/><text x="26.7230%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.7958%" y="501" width="0.0807%" height="15" fill="rgb(211,160,20)" fg:x="332" fg:w="1"/><text x="27.0458%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (18 samples, 1.45%)</title><rect x="25.5044%" y="581" width="1.4528%" height="15" fill="rgb(239,85,39)" fg:x="316" fg:w="18"/><text x="25.7544%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="26.8765%" y="565" width="0.0807%" height="15" fill="rgb(232,125,22)" fg:x="333" fg:w="1"/><text x="27.1265%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8765%" y="549" width="0.0807%" height="15" fill="rgb(244,57,34)" fg:x="333" fg:w="1"/><text x="27.1265%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (27 samples, 2.18%)</title><rect x="24.8588%" y="629" width="2.1792%" height="15" fill="rgb(214,203,32)" fg:x="308" fg:w="27"/><text x="25.1088%" y="639.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (26 samples, 2.10%)</title><rect x="24.9395%" y="613" width="2.0985%" height="15" fill="rgb(207,58,43)" fg:x="309" fg:w="26"/><text x="25.1895%" y="623.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (20 samples, 1.61%)</title><rect x="25.4237%" y="597" width="1.6142%" height="15" fill="rgb(215,193,15)" fg:x="315" fg:w="20"/><text x="25.6737%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.9572%" y="581" width="0.0807%" height="15" fill="rgb(232,15,44)" fg:x="334" fg:w="1"/><text x="27.2072%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.9572%" y="565" width="0.0807%" height="15" fill="rgb(212,3,48)" fg:x="334" fg:w="1"/><text x="27.2072%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="27.0379%" y="549" width="0.0807%" height="15" fill="rgb(218,128,7)" fg:x="335" fg:w="1"/><text x="27.2879%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="27.1994%" y="485" width="0.3228%" height="15" fill="rgb(226,216,39)" fg:x="337" fg:w="4"/><text x="27.4494%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="27.1994%" y="469" width="0.3228%" height="15" fill="rgb(243,47,51)" fg:x="337" fg:w="4"/><text x="27.4494%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="27.3608%" y="453" width="0.1614%" height="15" fill="rgb(241,183,40)" fg:x="339" fg:w="2"/><text x="27.6108%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.3608%" y="437" width="0.1614%" height="15" fill="rgb(231,217,32)" fg:x="339" fg:w="2"/><text x="27.6108%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.6029%" y="437" width="0.0807%" height="15" fill="rgb(229,61,38)" fg:x="342" fg:w="1"/><text x="27.8529%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.6029%" y="421" width="0.0807%" height="15" fill="rgb(225,210,5)" fg:x="342" fg:w="1"/><text x="27.8529%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="27.6029%" y="453" width="0.1614%" height="15" fill="rgb(231,79,45)" fg:x="342" fg:w="2"/><text x="27.8529%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.6836%" y="437" width="0.0807%" height="15" fill="rgb(224,100,7)" fg:x="343" fg:w="1"/><text x="27.9336%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="27.5222%" y="469" width="0.3228%" height="15" fill="rgb(241,198,18)" fg:x="341" fg:w="4"/><text x="27.7722%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.7643%" y="453" width="0.0807%" height="15" fill="rgb(252,97,53)" fg:x="344" fg:w="1"/><text x="28.0143%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="27.5222%" y="485" width="0.4036%" height="15" fill="rgb(220,88,7)" fg:x="341" fg:w="5"/><text x="27.7722%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.8450%" y="469" width="0.0807%" height="15" fill="rgb(213,176,14)" fg:x="345" fg:w="1"/><text x="28.0950%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.8450%" y="453" width="0.0807%" height="15" fill="rgb(246,73,7)" fg:x="345" fg:w="1"/><text x="28.0950%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.89%)</title><rect x="27.1186%" y="501" width="0.8878%" height="15" fill="rgb(245,64,36)" fg:x="336" fg:w="11"/><text x="27.3686%" y="511.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="27.9257%" y="485" width="0.0807%" height="15" fill="rgb(245,80,10)" fg:x="346" fg:w="1"/><text x="28.1757%" y="495.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1 samples, 0.08%)</title><rect x="27.9257%" y="469" width="0.0807%" height="15" fill="rgb(232,107,50)" fg:x="346" fg:w="1"/><text x="28.1757%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.0065%" y="501" width="0.0807%" height="15" fill="rgb(253,3,0)" fg:x="347" fg:w="1"/><text x="28.2565%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.0065%" y="485" width="0.0807%" height="15" fill="rgb(212,99,53)" fg:x="347" fg:w="1"/><text x="28.2565%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.13%)</title><rect x="27.1186%" y="533" width="1.1299%" height="15" fill="rgb(249,111,54)" fg:x="336" fg:w="14"/><text x="27.3686%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.13%)</title><rect x="27.1186%" y="517" width="1.1299%" height="15" fill="rgb(249,55,30)" fg:x="336" fg:w="14"/><text x="27.3686%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.0872%" y="501" width="0.1614%" height="15" fill="rgb(237,47,42)" fg:x="348" fg:w="2"/><text x="28.3372%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.0872%" y="485" width="0.1614%" height="15" fill="rgb(211,20,18)" fg:x="348" fg:w="2"/><text x="28.3372%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.1679%" y="469" width="0.0807%" height="15" fill="rgb(231,203,46)" fg:x="349" fg:w="1"/><text x="28.4179%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 1.29%)</title><rect x="27.0379%" y="565" width="1.2914%" height="15" fill="rgb(237,142,3)" fg:x="335" fg:w="16"/><text x="27.2879%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (15 samples, 1.21%)</title><rect x="27.1186%" y="549" width="1.2107%" height="15" fill="rgb(241,107,1)" fg:x="336" fg:w="15"/><text x="27.3686%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.2486%" y="533" width="0.0807%" height="15" fill="rgb(229,83,13)" fg:x="350" fg:w="1"/><text x="28.4986%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.2486%" y="517" width="0.0807%" height="15" fill="rgb(241,91,40)" fg:x="350" fg:w="1"/><text x="28.4986%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.3293%" y="565" width="0.0807%" height="15" fill="rgb(225,3,45)" fg:x="351" fg:w="1"/><text x="28.5793%" y="575.50"></text></g><g><title>engine::session::Session::close (82 samples, 6.62%)</title><rect x="21.9532%" y="741" width="6.6182%" height="15" fill="rgb(244,223,14)" fg:x="272" fg:w="82"/><text x="22.2032%" y="751.50">engine::s..</text></g><g><title>engine::session::state::State::close (77 samples, 6.21%)</title><rect x="22.3567%" y="725" width="6.2147%" height="15" fill="rgb(224,124,37)" fg:x="277" fg:w="77"/><text x="22.6067%" y="735.50">engine::..</text></g><g><title>engine::session::state::State::flush_entities (77 samples, 6.21%)</title><rect x="22.3567%" y="709" width="6.2147%" height="15" fill="rgb(251,171,30)" fg:x="277" fg:w="77"/><text x="22.6067%" y="719.50">engine::..</text></g><g><title>core::iter::adapters::try_process (76 samples, 6.13%)</title><rect x="22.4374%" y="693" width="6.1340%" height="15" fill="rgb(236,46,54)" fg:x="278" fg:w="76"/><text x="22.6874%" y="703.50">core::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (76 samples, 6.13%)</title><rect x="22.4374%" y="677" width="6.1340%" height="15" fill="rgb(245,213,5)" fg:x="278" fg:w="76"/><text x="22.6874%" y="687.50">&lt;alloc::..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (74 samples, 5.97%)</title><rect x="22.5989%" y="661" width="5.9726%" height="15" fill="rgb(230,144,27)" fg:x="280" fg:w="74"/><text x="22.8489%" y="671.50">engine::..</text></g><g><title>kernel::model::any_entity_changes (53 samples, 4.28%)</title><rect x="24.2938%" y="645" width="4.2776%" height="15" fill="rgb(220,86,6)" fg:x="301" fg:w="53"/><text x="24.5438%" y="655.50">kerne..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (19 samples, 1.53%)</title><rect x="27.0379%" y="629" width="1.5335%" height="15" fill="rgb(240,20,13)" fg:x="335" fg:w="19"/><text x="27.2879%" y="639.50"></text></g><g><title>serde_json::de::from_trait (19 samples, 1.53%)</title><rect x="27.0379%" y="613" width="1.5335%" height="15" fill="rgb(217,89,34)" fg:x="335" fg:w="19"/><text x="27.2879%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 1.53%)</title><rect x="27.0379%" y="597" width="1.5335%" height="15" fill="rgb(229,13,5)" fg:x="335" fg:w="19"/><text x="27.2879%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (19 samples, 1.53%)</title><rect x="27.0379%" y="581" width="1.5335%" height="15" fill="rgb(244,67,35)" fg:x="335" fg:w="19"/><text x="27.2879%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.4100%" y="565" width="0.1614%" height="15" fill="rgb(221,40,2)" fg:x="352" fg:w="2"/><text x="28.6600%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.4907%" y="549" width="0.0807%" height="15" fill="rgb(237,157,21)" fg:x="353" fg:w="1"/><text x="28.7407%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4907%" y="533" width="0.0807%" height="15" fill="rgb(222,94,11)" fg:x="353" fg:w="1"/><text x="28.7407%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="28.6521%" y="693" width="0.1614%" height="15" fill="rgb(249,113,6)" fg:x="355" fg:w="2"/><text x="28.9021%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="28.6521%" y="677" width="0.1614%" height="15" fill="rgb(238,137,36)" fg:x="355" fg:w="2"/><text x="28.9021%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.6521%" y="661" width="0.1614%" height="15" fill="rgb(210,102,26)" fg:x="355" fg:w="2"/><text x="28.9021%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="28.6521%" y="645" width="0.1614%" height="15" fill="rgb(218,30,30)" fg:x="355" fg:w="2"/><text x="28.9021%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.7328%" y="629" width="0.0807%" height="15" fill="rgb(214,67,26)" fg:x="356" fg:w="1"/><text x="28.9828%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (3 samples, 0.24%)</title><rect x="28.6521%" y="709" width="0.2421%" height="15" fill="rgb(251,9,53)" fg:x="355" fg:w="3"/><text x="28.9021%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.8136%" y="693" width="0.0807%" height="15" fill="rgb(228,204,25)" fg:x="357" fg:w="1"/><text x="29.0636%" y="703.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="28.9750%" y="677" width="0.0807%" height="15" fill="rgb(207,153,8)" fg:x="359" fg:w="1"/><text x="29.2250%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="28.9750%" y="661" width="0.0807%" height="15" fill="rgb(242,9,16)" fg:x="359" fg:w="1"/><text x="29.2250%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="28.9750%" y="645" width="0.0807%" height="15" fill="rgb(217,211,10)" fg:x="359" fg:w="1"/><text x="29.2250%" y="655.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="29.0557%" y="677" width="0.0807%" height="15" fill="rgb(219,228,52)" fg:x="360" fg:w="1"/><text x="29.3057%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="29.0557%" y="661" width="0.0807%" height="15" fill="rgb(231,92,29)" fg:x="360" fg:w="1"/><text x="29.3057%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="29.0557%" y="645" width="0.0807%" height="15" fill="rgb(232,8,23)" fg:x="360" fg:w="1"/><text x="29.3057%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="29.0557%" y="629" width="0.0807%" height="15" fill="rgb(216,211,34)" fg:x="360" fg:w="1"/><text x="29.3057%" y="639.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="29.0557%" y="613" width="0.0807%" height="15" fill="rgb(236,151,0)" fg:x="360" fg:w="1"/><text x="29.3057%" y="623.50"></text></g><g><title>&lt;engine::session::logs::SessionSubscriber as tracing_core::subscriber::Subscriber&gt;::enabled (1 samples, 0.08%)</title><rect x="29.0557%" y="597" width="0.0807%" height="15" fill="rgb(209,168,3)" fg:x="360" fg:w="1"/><text x="29.3057%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="29.2171%" y="645" width="0.0807%" height="15" fill="rgb(208,129,28)" fg:x="362" fg:w="1"/><text x="29.4671%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.2978%" y="549" width="0.1614%" height="15" fill="rgb(229,78,22)" fg:x="363" fg:w="2"/><text x="29.5478%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.2978%" y="533" width="0.1614%" height="15" fill="rgb(228,187,13)" fg:x="363" fg:w="2"/><text x="29.5478%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.3785%" y="517" width="0.0807%" height="15" fill="rgb(240,119,24)" fg:x="364" fg:w="1"/><text x="29.6285%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.3785%" y="501" width="0.0807%" height="15" fill="rgb(209,194,42)" fg:x="364" fg:w="1"/><text x="29.6285%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.3785%" y="485" width="0.0807%" height="15" fill="rgb(247,200,46)" fg:x="364" fg:w="1"/><text x="29.6285%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.3785%" y="469" width="0.0807%" height="15" fill="rgb(218,76,16)" fg:x="364" fg:w="1"/><text x="29.6285%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.3785%" y="453" width="0.0807%" height="15" fill="rgb(225,21,48)" fg:x="364" fg:w="1"/><text x="29.6285%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.3785%" y="437" width="0.0807%" height="15" fill="rgb(239,223,50)" fg:x="364" fg:w="1"/><text x="29.6285%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.3785%" y="421" width="0.0807%" height="15" fill="rgb(244,45,21)" fg:x="364" fg:w="1"/><text x="29.6285%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="29.3785%" y="405" width="0.0807%" height="15" fill="rgb(232,33,43)" fg:x="364" fg:w="1"/><text x="29.6285%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="29.3785%" y="389" width="0.0807%" height="15" fill="rgb(209,8,3)" fg:x="364" fg:w="1"/><text x="29.6285%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="29.3785%" y="373" width="0.0807%" height="15" fill="rgb(214,25,53)" fg:x="364" fg:w="1"/><text x="29.6285%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="29.3785%" y="357" width="0.0807%" height="15" fill="rgb(254,186,54)" fg:x="364" fg:w="1"/><text x="29.6285%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.3785%" y="341" width="0.0807%" height="15" fill="rgb(208,174,49)" fg:x="364" fg:w="1"/><text x="29.6285%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="29.2978%" y="565" width="0.2421%" height="15" fill="rgb(233,191,51)" fg:x="363" fg:w="3"/><text x="29.5478%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.4592%" y="549" width="0.0807%" height="15" fill="rgb(222,134,10)" fg:x="365" fg:w="1"/><text x="29.7092%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.4592%" y="533" width="0.0807%" height="15" fill="rgb(230,226,20)" fg:x="365" fg:w="1"/><text x="29.7092%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.4592%" y="517" width="0.0807%" height="15" fill="rgb(251,111,25)" fg:x="365" fg:w="1"/><text x="29.7092%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.4592%" y="501" width="0.0807%" height="15" fill="rgb(224,40,46)" fg:x="365" fg:w="1"/><text x="29.7092%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.4592%" y="485" width="0.0807%" height="15" fill="rgb(236,108,47)" fg:x="365" fg:w="1"/><text x="29.7092%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.5400%" y="501" width="0.0807%" height="15" fill="rgb(234,93,0)" fg:x="366" fg:w="1"/><text x="29.7900%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.5400%" y="485" width="0.0807%" height="15" fill="rgb(224,213,32)" fg:x="366" fg:w="1"/><text x="29.7900%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.5400%" y="469" width="0.0807%" height="15" fill="rgb(251,11,48)" fg:x="366" fg:w="1"/><text x="29.7900%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.5400%" y="453" width="0.0807%" height="15" fill="rgb(236,173,5)" fg:x="366" fg:w="1"/><text x="29.7900%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="29.7014%" y="421" width="0.1614%" height="15" fill="rgb(230,95,12)" fg:x="368" fg:w="2"/><text x="29.9514%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="29.6207%" y="501" width="0.3228%" height="15" fill="rgb(232,209,1)" fg:x="367" fg:w="4"/><text x="29.8707%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="29.6207%" y="485" width="0.3228%" height="15" fill="rgb(232,6,1)" fg:x="367" fg:w="4"/><text x="29.8707%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="29.7014%" y="469" width="0.2421%" height="15" fill="rgb(210,224,50)" fg:x="368" fg:w="3"/><text x="29.9514%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="29.7014%" y="453" width="0.2421%" height="15" fill="rgb(228,127,35)" fg:x="368" fg:w="3"/><text x="29.9514%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="29.7014%" y="437" width="0.2421%" height="15" fill="rgb(245,102,45)" fg:x="368" fg:w="3"/><text x="29.9514%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.8628%" y="421" width="0.0807%" height="15" fill="rgb(214,1,49)" fg:x="370" fg:w="1"/><text x="30.1128%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.8628%" y="405" width="0.0807%" height="15" fill="rgb(226,163,40)" fg:x="370" fg:w="1"/><text x="30.1128%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.8628%" y="389" width="0.0807%" height="15" fill="rgb(239,212,28)" fg:x="370" fg:w="1"/><text x="30.1128%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.9435%" y="453" width="0.0807%" height="15" fill="rgb(220,20,13)" fg:x="371" fg:w="1"/><text x="30.1935%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.0242%" y="373" width="0.0807%" height="15" fill="rgb(210,164,35)" fg:x="372" fg:w="1"/><text x="30.2742%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="30.0242%" y="405" width="0.1614%" height="15" fill="rgb(248,109,41)" fg:x="372" fg:w="2"/><text x="30.2742%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="30.0242%" y="389" width="0.1614%" height="15" fill="rgb(238,23,50)" fg:x="372" fg:w="2"/><text x="30.2742%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="30.1049%" y="373" width="0.0807%" height="15" fill="rgb(211,48,49)" fg:x="373" fg:w="1"/><text x="30.3549%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.1049%" y="357" width="0.0807%" height="15" fill="rgb(223,36,21)" fg:x="373" fg:w="1"/><text x="30.3549%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.1049%" y="341" width="0.0807%" height="15" fill="rgb(207,123,46)" fg:x="373" fg:w="1"/><text x="30.3549%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="30.1049%" y="325" width="0.0807%" height="15" fill="rgb(240,218,32)" fg:x="373" fg:w="1"/><text x="30.3549%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.1049%" y="309" width="0.0807%" height="15" fill="rgb(252,5,43)" fg:x="373" fg:w="1"/><text x="30.3549%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="30.1049%" y="293" width="0.0807%" height="15" fill="rgb(252,84,19)" fg:x="373" fg:w="1"/><text x="30.3549%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="30.1856%" y="213" width="0.0807%" height="15" fill="rgb(243,152,39)" fg:x="374" fg:w="1"/><text x="30.4356%" y="223.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="29.9435%" y="501" width="0.4036%" height="15" fill="rgb(234,160,15)" fg:x="371" fg:w="5"/><text x="30.1935%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="29.9435%" y="485" width="0.4036%" height="15" fill="rgb(237,34,20)" fg:x="371" fg:w="5"/><text x="30.1935%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="29.9435%" y="469" width="0.4036%" height="15" fill="rgb(229,97,13)" fg:x="371" fg:w="5"/><text x="30.1935%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="30.0242%" y="453" width="0.3228%" height="15" fill="rgb(234,71,50)" fg:x="372" fg:w="4"/><text x="30.2742%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="30.0242%" y="437" width="0.3228%" height="15" fill="rgb(253,155,4)" fg:x="372" fg:w="4"/><text x="30.2742%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="30.0242%" y="421" width="0.3228%" height="15" fill="rgb(222,185,37)" fg:x="372" fg:w="4"/><text x="30.2742%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.1856%" y="405" width="0.1614%" height="15" fill="rgb(251,177,13)" fg:x="374" fg:w="2"/><text x="30.4356%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="30.1856%" y="389" width="0.1614%" height="15" fill="rgb(250,179,40)" fg:x="374" fg:w="2"/><text x="30.4356%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="30.1856%" y="373" width="0.1614%" height="15" fill="rgb(242,44,2)" fg:x="374" fg:w="2"/><text x="30.4356%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="30.1856%" y="357" width="0.1614%" height="15" fill="rgb(216,177,13)" fg:x="374" fg:w="2"/><text x="30.4356%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="30.1856%" y="341" width="0.1614%" height="15" fill="rgb(216,106,43)" fg:x="374" fg:w="2"/><text x="30.4356%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.1856%" y="325" width="0.1614%" height="15" fill="rgb(216,183,2)" fg:x="374" fg:w="2"/><text x="30.4356%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="30.1856%" y="309" width="0.1614%" height="15" fill="rgb(249,75,3)" fg:x="374" fg:w="2"/><text x="30.4356%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="30.1856%" y="293" width="0.1614%" height="15" fill="rgb(219,67,39)" fg:x="374" fg:w="2"/><text x="30.4356%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.1856%" y="277" width="0.1614%" height="15" fill="rgb(253,228,2)" fg:x="374" fg:w="2"/><text x="30.4356%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="30.1856%" y="261" width="0.1614%" height="15" fill="rgb(235,138,27)" fg:x="374" fg:w="2"/><text x="30.4356%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="30.1856%" y="245" width="0.1614%" height="15" fill="rgb(236,97,51)" fg:x="374" fg:w="2"/><text x="30.4356%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.1856%" y="229" width="0.1614%" height="15" fill="rgb(240,80,30)" fg:x="374" fg:w="2"/><text x="30.4356%" y="239.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="30.2663%" y="213" width="0.0807%" height="15" fill="rgb(230,178,19)" fg:x="375" fg:w="1"/><text x="30.5163%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.5085%" y="325" width="0.0807%" height="15" fill="rgb(210,190,27)" fg:x="378" fg:w="1"/><text x="30.7585%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.5085%" y="309" width="0.0807%" height="15" fill="rgb(222,107,31)" fg:x="378" fg:w="1"/><text x="30.7585%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="30.5085%" y="405" width="0.1614%" height="15" fill="rgb(216,127,34)" fg:x="378" fg:w="2"/><text x="30.7585%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="30.5085%" y="389" width="0.1614%" height="15" fill="rgb(234,116,52)" fg:x="378" fg:w="2"/><text x="30.7585%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="30.5085%" y="373" width="0.1614%" height="15" fill="rgb(222,124,15)" fg:x="378" fg:w="2"/><text x="30.7585%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="30.5085%" y="357" width="0.1614%" height="15" fill="rgb(231,179,28)" fg:x="378" fg:w="2"/><text x="30.7585%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="30.5085%" y="341" width="0.1614%" height="15" fill="rgb(226,93,45)" fg:x="378" fg:w="2"/><text x="30.7585%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="30.5892%" y="325" width="0.0807%" height="15" fill="rgb(215,8,51)" fg:x="379" fg:w="1"/><text x="30.8392%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.5892%" y="309" width="0.0807%" height="15" fill="rgb(223,106,5)" fg:x="379" fg:w="1"/><text x="30.8392%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="30.6699%" y="373" width="0.0807%" height="15" fill="rgb(250,191,5)" fg:x="380" fg:w="1"/><text x="30.9199%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="30.6699%" y="357" width="0.0807%" height="15" fill="rgb(242,132,44)" fg:x="380" fg:w="1"/><text x="30.9199%" y="367.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (19 samples, 1.53%)</title><rect x="29.2978%" y="597" width="1.5335%" height="15" fill="rgb(251,152,29)" fg:x="363" fg:w="19"/><text x="29.5478%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (19 samples, 1.53%)</title><rect x="29.2978%" y="581" width="1.5335%" height="15" fill="rgb(218,179,5)" fg:x="363" fg:w="19"/><text x="29.5478%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (16 samples, 1.29%)</title><rect x="29.5400%" y="565" width="1.2914%" height="15" fill="rgb(227,67,19)" fg:x="366" fg:w="16"/><text x="29.7900%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (16 samples, 1.29%)</title><rect x="29.5400%" y="549" width="1.2914%" height="15" fill="rgb(233,119,31)" fg:x="366" fg:w="16"/><text x="29.7900%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.29%)</title><rect x="29.5400%" y="533" width="1.2914%" height="15" fill="rgb(241,120,22)" fg:x="366" fg:w="16"/><text x="29.7900%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.29%)</title><rect x="29.5400%" y="517" width="1.2914%" height="15" fill="rgb(224,102,30)" fg:x="366" fg:w="16"/><text x="29.7900%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="30.3471%" y="501" width="0.4843%" height="15" fill="rgb(210,164,37)" fg:x="376" fg:w="6"/><text x="30.5971%" y="511.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="30.3471%" y="485" width="0.4843%" height="15" fill="rgb(226,191,16)" fg:x="376" fg:w="6"/><text x="30.5971%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="30.3471%" y="469" width="0.4843%" height="15" fill="rgb(214,40,45)" fg:x="376" fg:w="6"/><text x="30.5971%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="30.4278%" y="453" width="0.4036%" height="15" fill="rgb(244,29,26)" fg:x="377" fg:w="5"/><text x="30.6778%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="30.5085%" y="437" width="0.3228%" height="15" fill="rgb(216,16,5)" fg:x="378" fg:w="4"/><text x="30.7585%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="30.5085%" y="421" width="0.3228%" height="15" fill="rgb(249,76,35)" fg:x="378" fg:w="4"/><text x="30.7585%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.6699%" y="405" width="0.1614%" height="15" fill="rgb(207,11,44)" fg:x="380" fg:w="2"/><text x="30.9199%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.6699%" y="389" width="0.1614%" height="15" fill="rgb(228,190,49)" fg:x="380" fg:w="2"/><text x="30.9199%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="30.7506%" y="373" width="0.0807%" height="15" fill="rgb(214,173,12)" fg:x="381" fg:w="1"/><text x="31.0006%" y="383.50"></text></g><g><title>&lt;twox_hash::sixty_four::XxHash64 as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="30.8313%" y="517" width="0.0807%" height="15" fill="rgb(218,26,35)" fg:x="382" fg:w="1"/><text x="31.0813%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.0734%" y="357" width="0.0807%" height="15" fill="rgb(220,200,19)" fg:x="385" fg:w="1"/><text x="31.3234%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.0734%" y="341" width="0.0807%" height="15" fill="rgb(239,95,49)" fg:x="385" fg:w="1"/><text x="31.3234%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="31.0734%" y="325" width="0.0807%" height="15" fill="rgb(235,85,53)" fg:x="385" fg:w="1"/><text x="31.3234%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="31.1542%" y="357" width="0.0807%" height="15" fill="rgb(233,133,31)" fg:x="386" fg:w="1"/><text x="31.4042%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="31.1542%" y="341" width="0.0807%" height="15" fill="rgb(218,25,20)" fg:x="386" fg:w="1"/><text x="31.4042%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.1542%" y="325" width="0.0807%" height="15" fill="rgb(252,210,38)" fg:x="386" fg:w="1"/><text x="31.4042%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="31.2349%" y="341" width="0.0807%" height="15" fill="rgb(242,134,21)" fg:x="387" fg:w="1"/><text x="31.4849%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="31.2349%" y="325" width="0.0807%" height="15" fill="rgb(213,28,48)" fg:x="387" fg:w="1"/><text x="31.4849%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.2349%" y="309" width="0.0807%" height="15" fill="rgb(250,196,2)" fg:x="387" fg:w="1"/><text x="31.4849%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="31.3963%" y="325" width="0.0807%" height="15" fill="rgb(227,5,17)" fg:x="389" fg:w="1"/><text x="31.6463%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.3963%" y="309" width="0.0807%" height="15" fill="rgb(221,226,24)" fg:x="389" fg:w="1"/><text x="31.6463%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.3963%" y="293" width="0.0807%" height="15" fill="rgb(211,5,48)" fg:x="389" fg:w="1"/><text x="31.6463%" y="303.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (6 samples, 0.48%)</title><rect x="31.0734%" y="421" width="0.4843%" height="15" fill="rgb(219,150,6)" fg:x="385" fg:w="6"/><text x="31.3234%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (6 samples, 0.48%)</title><rect x="31.0734%" y="405" width="0.4843%" height="15" fill="rgb(251,46,16)" fg:x="385" fg:w="6"/><text x="31.3234%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (6 samples, 0.48%)</title><rect x="31.0734%" y="389" width="0.4843%" height="15" fill="rgb(220,204,40)" fg:x="385" fg:w="6"/><text x="31.3234%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="31.0734%" y="373" width="0.4843%" height="15" fill="rgb(211,85,2)" fg:x="385" fg:w="6"/><text x="31.3234%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="31.2349%" y="357" width="0.3228%" height="15" fill="rgb(229,17,7)" fg:x="387" fg:w="4"/><text x="31.4849%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (3 samples, 0.24%)</title><rect x="31.3156%" y="341" width="0.2421%" height="15" fill="rgb(239,72,28)" fg:x="388" fg:w="3"/><text x="31.5656%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="31.4770%" y="325" width="0.0807%" height="15" fill="rgb(230,47,54)" fg:x="390" fg:w="1"/><text x="31.7270%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="31.4770%" y="309" width="0.0807%" height="15" fill="rgb(214,50,8)" fg:x="390" fg:w="1"/><text x="31.7270%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="31.4770%" y="293" width="0.0807%" height="15" fill="rgb(216,198,43)" fg:x="390" fg:w="1"/><text x="31.7270%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.4770%" y="277" width="0.0807%" height="15" fill="rgb(234,20,35)" fg:x="390" fg:w="1"/><text x="31.7270%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.5577%" y="373" width="0.0807%" height="15" fill="rgb(254,45,19)" fg:x="391" fg:w="1"/><text x="31.8077%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.5577%" y="357" width="0.0807%" height="15" fill="rgb(219,14,44)" fg:x="391" fg:w="1"/><text x="31.8077%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="31.5577%" y="389" width="0.1614%" height="15" fill="rgb(217,220,26)" fg:x="391" fg:w="2"/><text x="31.8077%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.6384%" y="373" width="0.0807%" height="15" fill="rgb(213,158,28)" fg:x="392" fg:w="1"/><text x="31.8884%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.6384%" y="357" width="0.0807%" height="15" fill="rgb(252,51,52)" fg:x="392" fg:w="1"/><text x="31.8884%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.6384%" y="341" width="0.0807%" height="15" fill="rgb(246,89,16)" fg:x="392" fg:w="1"/><text x="31.8884%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.6384%" y="325" width="0.0807%" height="15" fill="rgb(216,158,49)" fg:x="392" fg:w="1"/><text x="31.8884%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.6384%" y="309" width="0.0807%" height="15" fill="rgb(236,107,19)" fg:x="392" fg:w="1"/><text x="31.8884%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.6384%" y="293" width="0.0807%" height="15" fill="rgb(228,185,30)" fg:x="392" fg:w="1"/><text x="31.8884%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="31.7998%" y="357" width="0.2421%" height="15" fill="rgb(246,134,8)" fg:x="394" fg:w="3"/><text x="32.0498%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="31.7998%" y="341" width="0.2421%" height="15" fill="rgb(214,143,50)" fg:x="394" fg:w="3"/><text x="32.0498%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="31.7998%" y="325" width="0.2421%" height="15" fill="rgb(228,75,8)" fg:x="394" fg:w="3"/><text x="32.0498%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="31.7998%" y="309" width="0.2421%" height="15" fill="rgb(207,175,4)" fg:x="394" fg:w="3"/><text x="32.0498%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="31.7998%" y="293" width="0.2421%" height="15" fill="rgb(205,108,24)" fg:x="394" fg:w="3"/><text x="32.0498%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="31.7998%" y="277" width="0.2421%" height="15" fill="rgb(244,120,49)" fg:x="394" fg:w="3"/><text x="32.0498%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="31.7998%" y="261" width="0.2421%" height="15" fill="rgb(223,47,38)" fg:x="394" fg:w="3"/><text x="32.0498%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="31.7998%" y="245" width="0.2421%" height="15" fill="rgb(229,179,11)" fg:x="394" fg:w="3"/><text x="32.0498%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="31.7998%" y="229" width="0.2421%" height="15" fill="rgb(231,122,1)" fg:x="394" fg:w="3"/><text x="32.0498%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="31.7998%" y="213" width="0.2421%" height="15" fill="rgb(245,119,9)" fg:x="394" fg:w="3"/><text x="32.0498%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.24%)</title><rect x="31.7998%" y="197" width="0.2421%" height="15" fill="rgb(241,163,25)" fg:x="394" fg:w="3"/><text x="32.0498%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.24%)</title><rect x="31.7998%" y="181" width="0.2421%" height="15" fill="rgb(217,214,3)" fg:x="394" fg:w="3"/><text x="32.0498%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.24%)</title><rect x="31.7998%" y="165" width="0.2421%" height="15" fill="rgb(240,86,28)" fg:x="394" fg:w="3"/><text x="32.0498%" y="175.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.24%)</title><rect x="31.7998%" y="149" width="0.2421%" height="15" fill="rgb(215,47,9)" fg:x="394" fg:w="3"/><text x="32.0498%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.8805%" y="133" width="0.1614%" height="15" fill="rgb(252,25,45)" fg:x="395" fg:w="2"/><text x="32.1305%" y="143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.0420%" y="277" width="0.0807%" height="15" fill="rgb(251,164,9)" fg:x="397" fg:w="1"/><text x="32.2920%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="32.0420%" y="293" width="0.1614%" height="15" fill="rgb(233,194,0)" fg:x="397" fg:w="2"/><text x="32.2920%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="32.1227%" y="277" width="0.0807%" height="15" fill="rgb(249,111,24)" fg:x="398" fg:w="1"/><text x="32.3727%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.1227%" y="261" width="0.0807%" height="15" fill="rgb(250,223,3)" fg:x="398" fg:w="1"/><text x="32.3727%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="31.7998%" y="373" width="0.4843%" height="15" fill="rgb(236,178,37)" fg:x="394" fg:w="6"/><text x="32.0498%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="32.0420%" y="357" width="0.2421%" height="15" fill="rgb(241,158,50)" fg:x="397" fg:w="3"/><text x="32.2920%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="32.0420%" y="341" width="0.2421%" height="15" fill="rgb(213,121,41)" fg:x="397" fg:w="3"/><text x="32.2920%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="32.0420%" y="325" width="0.2421%" height="15" fill="rgb(240,92,3)" fg:x="397" fg:w="3"/><text x="32.2920%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="32.0420%" y="309" width="0.2421%" height="15" fill="rgb(205,123,3)" fg:x="397" fg:w="3"/><text x="32.2920%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="32.2034%" y="293" width="0.0807%" height="15" fill="rgb(205,97,47)" fg:x="399" fg:w="1"/><text x="32.4534%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.2034%" y="277" width="0.0807%" height="15" fill="rgb(247,152,14)" fg:x="399" fg:w="1"/><text x="32.4534%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.2841%" y="373" width="0.0807%" height="15" fill="rgb(248,195,53)" fg:x="400" fg:w="1"/><text x="32.5341%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (9 samples, 0.73%)</title><rect x="31.7191%" y="389" width="0.7264%" height="15" fill="rgb(226,201,16)" fg:x="393" fg:w="9"/><text x="31.9691%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="32.3648%" y="373" width="0.0807%" height="15" fill="rgb(205,98,0)" fg:x="401" fg:w="1"/><text x="32.6148%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.3648%" y="357" width="0.0807%" height="15" fill="rgb(214,191,48)" fg:x="401" fg:w="1"/><text x="32.6148%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="32.3648%" y="341" width="0.0807%" height="15" fill="rgb(237,112,39)" fg:x="401" fg:w="1"/><text x="32.6148%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="32.4455%" y="357" width="0.1614%" height="15" fill="rgb(247,203,27)" fg:x="402" fg:w="2"/><text x="32.6955%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="32.4455%" y="341" width="0.1614%" height="15" fill="rgb(235,124,28)" fg:x="402" fg:w="2"/><text x="32.6955%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.5262%" y="325" width="0.0807%" height="15" fill="rgb(208,207,46)" fg:x="403" fg:w="1"/><text x="32.7762%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.5262%" y="309" width="0.0807%" height="15" fill="rgb(234,176,4)" fg:x="403" fg:w="1"/><text x="32.7762%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.5262%" y="293" width="0.0807%" height="15" fill="rgb(230,133,28)" fg:x="403" fg:w="1"/><text x="32.7762%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="32.5262%" y="277" width="0.0807%" height="15" fill="rgb(211,137,40)" fg:x="403" fg:w="1"/><text x="32.7762%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="32.5262%" y="261" width="0.0807%" height="15" fill="rgb(254,35,13)" fg:x="403" fg:w="1"/><text x="32.7762%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="32.5262%" y="245" width="0.0807%" height="15" fill="rgb(225,49,51)" fg:x="403" fg:w="1"/><text x="32.7762%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="32.5262%" y="229" width="0.0807%" height="15" fill="rgb(251,10,15)" fg:x="403" fg:w="1"/><text x="32.7762%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="32.5262%" y="213" width="0.0807%" height="15" fill="rgb(228,207,15)" fg:x="403" fg:w="1"/><text x="32.7762%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.6069%" y="357" width="0.0807%" height="15" fill="rgb(241,99,19)" fg:x="404" fg:w="1"/><text x="32.8569%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.6069%" y="341" width="0.0807%" height="15" fill="rgb(207,104,49)" fg:x="404" fg:w="1"/><text x="32.8569%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.6877%" y="357" width="0.0807%" height="15" fill="rgb(234,99,18)" fg:x="405" fg:w="1"/><text x="32.9377%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="32.6877%" y="341" width="0.0807%" height="15" fill="rgb(213,191,49)" fg:x="405" fg:w="1"/><text x="32.9377%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;kernel::plugins::ActionSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="32.7684%" y="357" width="0.0807%" height="15" fill="rgb(210,226,19)" fg:x="406" fg:w="1"/><text x="33.0184%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.9298%" y="293" width="0.0807%" height="15" fill="rgb(229,97,18)" fg:x="408" fg:w="1"/><text x="33.1798%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.0105%" y="293" width="0.0807%" height="15" fill="rgb(211,167,15)" fg:x="409" fg:w="1"/><text x="33.2605%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (10 samples, 0.81%)</title><rect x="32.4455%" y="373" width="0.8071%" height="15" fill="rgb(210,169,34)" fg:x="402" fg:w="10"/><text x="32.6955%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="32.8491%" y="357" width="0.4036%" height="15" fill="rgb(241,121,31)" fg:x="407" fg:w="5"/><text x="33.0991%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="32.9298%" y="341" width="0.3228%" height="15" fill="rgb(232,40,11)" fg:x="408" fg:w="4"/><text x="33.1798%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="32.9298%" y="325" width="0.3228%" height="15" fill="rgb(205,86,26)" fg:x="408" fg:w="4"/><text x="33.1798%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="32.9298%" y="309" width="0.3228%" height="15" fill="rgb(231,126,28)" fg:x="408" fg:w="4"/><text x="33.1798%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="33.0912%" y="293" width="0.1614%" height="15" fill="rgb(219,221,18)" fg:x="410" fg:w="2"/><text x="33.3412%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="33.0912%" y="277" width="0.1614%" height="15" fill="rgb(211,40,0)" fg:x="410" fg:w="2"/><text x="33.3412%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (11 samples, 0.89%)</title><rect x="32.4455%" y="389" width="0.8878%" height="15" fill="rgb(239,85,43)" fg:x="402" fg:w="11"/><text x="32.6955%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="33.2526%" y="373" width="0.0807%" height="15" fill="rgb(231,55,21)" fg:x="412" fg:w="1"/><text x="33.5026%" y="383.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="33.3333%" y="389" width="0.2421%" height="15" fill="rgb(225,184,43)" fg:x="413" fg:w="3"/><text x="33.5833%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.24%)</title><rect x="33.3333%" y="373" width="0.2421%" height="15" fill="rgb(251,158,41)" fg:x="413" fg:w="3"/><text x="33.5833%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="33.4140%" y="357" width="0.1614%" height="15" fill="rgb(234,159,37)" fg:x="414" fg:w="2"/><text x="33.6640%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="33.4948%" y="341" width="0.0807%" height="15" fill="rgb(216,204,22)" fg:x="415" fg:w="1"/><text x="33.7448%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="33.4948%" y="325" width="0.0807%" height="15" fill="rgb(214,17,3)" fg:x="415" fg:w="1"/><text x="33.7448%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.4948%" y="309" width="0.0807%" height="15" fill="rgb(212,111,17)" fg:x="415" fg:w="1"/><text x="33.7448%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.4948%" y="293" width="0.0807%" height="15" fill="rgb(221,157,24)" fg:x="415" fg:w="1"/><text x="33.7448%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="33.6562%" y="357" width="0.2421%" height="15" fill="rgb(252,16,13)" fg:x="417" fg:w="3"/><text x="33.9062%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="33.6562%" y="341" width="0.2421%" height="15" fill="rgb(221,62,2)" fg:x="417" fg:w="3"/><text x="33.9062%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="33.6562%" y="325" width="0.2421%" height="15" fill="rgb(247,87,22)" fg:x="417" fg:w="3"/><text x="33.9062%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.8176%" y="309" width="0.0807%" height="15" fill="rgb(215,73,9)" fg:x="419" fg:w="1"/><text x="34.0676%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.8176%" y="293" width="0.0807%" height="15" fill="rgb(207,175,33)" fg:x="419" fg:w="1"/><text x="34.0676%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="33.8176%" y="277" width="0.0807%" height="15" fill="rgb(243,129,54)" fg:x="419" fg:w="1"/><text x="34.0676%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="33.8176%" y="261" width="0.0807%" height="15" fill="rgb(227,119,45)" fg:x="419" fg:w="1"/><text x="34.0676%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="33.8176%" y="245" width="0.0807%" height="15" fill="rgb(205,109,36)" fg:x="419" fg:w="1"/><text x="34.0676%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.8176%" y="229" width="0.0807%" height="15" fill="rgb(205,6,39)" fg:x="419" fg:w="1"/><text x="34.0676%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.8176%" y="213" width="0.0807%" height="15" fill="rgb(221,32,16)" fg:x="419" fg:w="1"/><text x="34.0676%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="33.8176%" y="197" width="0.0807%" height="15" fill="rgb(228,144,50)" fg:x="419" fg:w="1"/><text x="34.0676%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="33.8176%" y="181" width="0.0807%" height="15" fill="rgb(229,201,53)" fg:x="419" fg:w="1"/><text x="34.0676%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="33.8176%" y="165" width="0.0807%" height="15" fill="rgb(249,153,27)" fg:x="419" fg:w="1"/><text x="34.0676%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="33.8176%" y="149" width="0.0807%" height="15" fill="rgb(227,106,25)" fg:x="419" fg:w="1"/><text x="34.0676%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.8176%" y="133" width="0.0807%" height="15" fill="rgb(230,65,29)" fg:x="419" fg:w="1"/><text x="34.0676%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="33.9790%" y="293" width="0.0807%" height="15" fill="rgb(221,57,46)" fg:x="421" fg:w="1"/><text x="34.2290%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.9790%" y="277" width="0.0807%" height="15" fill="rgb(229,161,17)" fg:x="421" fg:w="1"/><text x="34.2290%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.9790%" y="261" width="0.0807%" height="15" fill="rgb(222,213,11)" fg:x="421" fg:w="1"/><text x="34.2290%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.0597%" y="293" width="0.0807%" height="15" fill="rgb(235,35,13)" fg:x="422" fg:w="1"/><text x="34.3097%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (8 samples, 0.65%)</title><rect x="33.5755%" y="389" width="0.6457%" height="15" fill="rgb(233,158,34)" fg:x="416" fg:w="8"/><text x="33.8255%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (8 samples, 0.65%)</title><rect x="33.5755%" y="373" width="0.6457%" height="15" fill="rgb(215,151,48)" fg:x="416" fg:w="8"/><text x="33.8255%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="33.8983%" y="357" width="0.3228%" height="15" fill="rgb(229,84,14)" fg:x="420" fg:w="4"/><text x="34.1483%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="33.8983%" y="341" width="0.3228%" height="15" fill="rgb(229,68,14)" fg:x="420" fg:w="4"/><text x="34.1483%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="33.9790%" y="325" width="0.2421%" height="15" fill="rgb(243,106,26)" fg:x="421" fg:w="3"/><text x="34.2290%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="33.9790%" y="309" width="0.2421%" height="15" fill="rgb(206,45,38)" fg:x="421" fg:w="3"/><text x="34.2290%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.1404%" y="293" width="0.0807%" height="15" fill="rgb(226,6,15)" fg:x="423" fg:w="1"/><text x="34.3904%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.1404%" y="277" width="0.0807%" height="15" fill="rgb(232,22,54)" fg:x="423" fg:w="1"/><text x="34.3904%" y="287.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="34.2211%" y="341" width="0.0807%" height="15" fill="rgb(229,222,32)" fg:x="424" fg:w="1"/><text x="34.4711%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="34.2211%" y="325" width="0.0807%" height="15" fill="rgb(228,62,29)" fg:x="424" fg:w="1"/><text x="34.4711%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="34.2211%" y="309" width="0.0807%" height="15" fill="rgb(251,103,34)" fg:x="424" fg:w="1"/><text x="34.4711%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="34.2211%" y="293" width="0.0807%" height="15" fill="rgb(233,12,30)" fg:x="424" fg:w="1"/><text x="34.4711%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="34.2211%" y="277" width="0.0807%" height="15" fill="rgb(238,52,0)" fg:x="424" fg:w="1"/><text x="34.4711%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="34.3826%" y="309" width="0.0807%" height="15" fill="rgb(223,98,5)" fg:x="426" fg:w="1"/><text x="34.6326%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="34.4633%" y="309" width="0.1614%" height="15" fill="rgb(228,75,37)" fg:x="427" fg:w="2"/><text x="34.7133%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="34.4633%" y="293" width="0.1614%" height="15" fill="rgb(205,115,49)" fg:x="427" fg:w="2"/><text x="34.7133%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="34.4633%" y="277" width="0.1614%" height="15" fill="rgb(250,154,43)" fg:x="427" fg:w="2"/><text x="34.7133%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="34.4633%" y="261" width="0.1614%" height="15" fill="rgb(226,43,29)" fg:x="427" fg:w="2"/><text x="34.7133%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="34.4633%" y="245" width="0.1614%" height="15" fill="rgb(249,228,39)" fg:x="427" fg:w="2"/><text x="34.7133%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="34.5440%" y="229" width="0.0807%" height="15" fill="rgb(216,79,43)" fg:x="428" fg:w="1"/><text x="34.7940%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.9475%" y="261" width="0.0807%" height="15" fill="rgb(228,95,12)" fg:x="433" fg:w="1"/><text x="35.1975%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.9475%" y="245" width="0.0807%" height="15" fill="rgb(249,221,15)" fg:x="433" fg:w="1"/><text x="35.1975%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.0282%" y="261" width="0.0807%" height="15" fill="rgb(233,34,13)" fg:x="434" fg:w="1"/><text x="35.2782%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.1090%" y="261" width="0.0807%" height="15" fill="rgb(214,103,39)" fg:x="435" fg:w="1"/><text x="35.3590%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="35.1897%" y="261" width="0.0807%" height="15" fill="rgb(251,126,39)" fg:x="436" fg:w="1"/><text x="35.4397%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.73%)</title><rect x="35.3511%" y="245" width="0.7264%" height="15" fill="rgb(214,216,36)" fg:x="438" fg:w="9"/><text x="35.6011%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.73%)</title><rect x="35.3511%" y="229" width="0.7264%" height="15" fill="rgb(220,221,8)" fg:x="438" fg:w="9"/><text x="35.6011%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="35.9161%" y="213" width="0.1614%" height="15" fill="rgb(240,216,3)" fg:x="445" fg:w="2"/><text x="36.1661%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="36.0775%" y="229" width="0.0807%" height="15" fill="rgb(232,218,17)" fg:x="447" fg:w="1"/><text x="36.3275%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="36.0775%" y="213" width="0.0807%" height="15" fill="rgb(229,163,45)" fg:x="447" fg:w="1"/><text x="36.3275%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.0775%" y="197" width="0.0807%" height="15" fill="rgb(231,110,42)" fg:x="447" fg:w="1"/><text x="36.3275%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="36.0775%" y="245" width="0.1614%" height="15" fill="rgb(208,170,48)" fg:x="447" fg:w="2"/><text x="36.3275%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="36.1582%" y="229" width="0.0807%" height="15" fill="rgb(239,116,25)" fg:x="448" fg:w="1"/><text x="36.4082%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="36.1582%" y="213" width="0.0807%" height="15" fill="rgb(219,200,50)" fg:x="448" fg:w="1"/><text x="36.4082%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="36.2389%" y="229" width="0.1614%" height="15" fill="rgb(245,200,0)" fg:x="449" fg:w="2"/><text x="36.4889%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="36.4003%" y="229" width="0.0807%" height="15" fill="rgb(245,119,33)" fg:x="451" fg:w="1"/><text x="36.6503%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="36.2389%" y="245" width="0.4036%" height="15" fill="rgb(231,125,12)" fg:x="449" fg:w="5"/><text x="36.4889%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="36.4810%" y="229" width="0.1614%" height="15" fill="rgb(216,96,41)" fg:x="452" fg:w="2"/><text x="36.7310%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="36.6425%" y="245" width="0.0807%" height="15" fill="rgb(248,43,45)" fg:x="454" fg:w="1"/><text x="36.8925%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.8039%" y="213" width="0.0807%" height="15" fill="rgb(217,222,7)" fg:x="456" fg:w="1"/><text x="37.0539%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.8039%" y="197" width="0.0807%" height="15" fill="rgb(233,28,6)" fg:x="456" fg:w="1"/><text x="37.0539%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.8039%" y="181" width="0.0807%" height="15" fill="rgb(231,218,15)" fg:x="456" fg:w="1"/><text x="37.0539%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="37.1267%" y="181" width="0.0807%" height="15" fill="rgb(226,171,48)" fg:x="460" fg:w="1"/><text x="37.3767%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.1267%" y="165" width="0.0807%" height="15" fill="rgb(235,201,9)" fg:x="460" fg:w="1"/><text x="37.3767%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.1267%" y="149" width="0.0807%" height="15" fill="rgb(217,80,15)" fg:x="460" fg:w="1"/><text x="37.3767%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.1267%" y="133" width="0.0807%" height="15" fill="rgb(219,152,8)" fg:x="460" fg:w="1"/><text x="37.3767%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="37.2074%" y="181" width="0.0807%" height="15" fill="rgb(243,107,38)" fg:x="461" fg:w="1"/><text x="37.4574%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.2074%" y="165" width="0.0807%" height="15" fill="rgb(231,17,5)" fg:x="461" fg:w="1"/><text x="37.4574%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.2074%" y="149" width="0.0807%" height="15" fill="rgb(209,25,54)" fg:x="461" fg:w="1"/><text x="37.4574%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.2074%" y="133" width="0.0807%" height="15" fill="rgb(219,0,2)" fg:x="461" fg:w="1"/><text x="37.4574%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.3688%" y="149" width="0.0807%" height="15" fill="rgb(246,9,5)" fg:x="463" fg:w="1"/><text x="37.6188%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.3688%" y="133" width="0.0807%" height="15" fill="rgb(226,159,4)" fg:x="463" fg:w="1"/><text x="37.6188%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.3688%" y="117" width="0.0807%" height="15" fill="rgb(219,175,34)" fg:x="463" fg:w="1"/><text x="37.6188%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="37.2881%" y="181" width="0.3228%" height="15" fill="rgb(236,10,46)" fg:x="462" fg:w="4"/><text x="37.5381%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="37.2881%" y="165" width="0.3228%" height="15" fill="rgb(240,211,16)" fg:x="462" fg:w="4"/><text x="37.5381%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="37.4496%" y="149" width="0.1614%" height="15" fill="rgb(205,3,43)" fg:x="464" fg:w="2"/><text x="37.6996%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.5303%" y="133" width="0.0807%" height="15" fill="rgb(245,7,22)" fg:x="465" fg:w="1"/><text x="37.7803%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="37.6110%" y="181" width="0.0807%" height="15" fill="rgb(239,132,32)" fg:x="466" fg:w="1"/><text x="37.8610%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="37.6110%" y="165" width="0.0807%" height="15" fill="rgb(228,202,34)" fg:x="466" fg:w="1"/><text x="37.8610%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.6110%" y="149" width="0.0807%" height="15" fill="rgb(254,200,22)" fg:x="466" fg:w="1"/><text x="37.8610%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.6110%" y="133" width="0.0807%" height="15" fill="rgb(219,10,39)" fg:x="466" fg:w="1"/><text x="37.8610%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (69 samples, 5.57%)</title><rect x="37.6917%" y="181" width="5.5690%" height="15" fill="rgb(226,210,39)" fg:x="467" fg:w="69"/><text x="37.9417%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (69 samples, 5.57%)</title><rect x="37.6917%" y="165" width="5.5690%" height="15" fill="rgb(208,219,16)" fg:x="467" fg:w="69"/><text x="37.9417%" y="175.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (69 samples, 5.57%)</title><rect x="37.6917%" y="149" width="5.5690%" height="15" fill="rgb(216,158,51)" fg:x="467" fg:w="69"/><text x="37.9417%" y="159.50">alloc::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (82 samples, 6.62%)</title><rect x="36.8039%" y="229" width="6.6182%" height="15" fill="rgb(233,14,44)" fg:x="456" fg:w="82"/><text x="37.0539%" y="239.50">&lt;core::it..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (81 samples, 6.54%)</title><rect x="36.8846%" y="213" width="6.5375%" height="15" fill="rgb(237,97,39)" fg:x="457" fg:w="81"/><text x="37.1346%" y="223.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (81 samples, 6.54%)</title><rect x="36.8846%" y="197" width="6.5375%" height="15" fill="rgb(218,198,43)" fg:x="457" fg:w="81"/><text x="37.1346%" y="207.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="43.2607%" y="181" width="0.1614%" height="15" fill="rgb(231,104,20)" fg:x="536" fg:w="2"/><text x="43.5107%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="43.9064%" y="213" width="0.2421%" height="15" fill="rgb(254,36,13)" fg:x="544" fg:w="3"/><text x="44.1564%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.0678%" y="197" width="0.0807%" height="15" fill="rgb(248,14,50)" fg:x="546" fg:w="1"/><text x="44.3178%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.0678%" y="181" width="0.0807%" height="15" fill="rgb(217,107,29)" fg:x="546" fg:w="1"/><text x="44.3178%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.0678%" y="165" width="0.0807%" height="15" fill="rgb(251,169,33)" fg:x="546" fg:w="1"/><text x="44.3178%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.7942%" y="197" width="0.0807%" height="15" fill="rgb(217,108,32)" fg:x="555" fg:w="1"/><text x="45.0442%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.8749%" y="197" width="0.0807%" height="15" fill="rgb(219,66,42)" fg:x="556" fg:w="1"/><text x="45.1249%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.8749%" y="181" width="0.0807%" height="15" fill="rgb(206,180,7)" fg:x="556" fg:w="1"/><text x="45.1249%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.8749%" y="165" width="0.0807%" height="15" fill="rgb(208,226,31)" fg:x="556" fg:w="1"/><text x="45.1249%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (11 samples, 0.89%)</title><rect x="44.1485%" y="213" width="0.8878%" height="15" fill="rgb(218,26,49)" fg:x="547" fg:w="11"/><text x="44.3985%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.9556%" y="197" width="0.0807%" height="15" fill="rgb(233,197,48)" fg:x="557" fg:w="1"/><text x="45.2056%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.9556%" y="181" width="0.0807%" height="15" fill="rgb(252,181,51)" fg:x="557" fg:w="1"/><text x="45.2056%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.9556%" y="165" width="0.0807%" height="15" fill="rgb(253,90,19)" fg:x="557" fg:w="1"/><text x="45.2056%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (21 samples, 1.69%)</title><rect x="43.4221%" y="229" width="1.6949%" height="15" fill="rgb(215,171,30)" fg:x="538" fg:w="21"/><text x="43.6721%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="45.0363%" y="213" width="0.0807%" height="15" fill="rgb(214,222,9)" fg:x="558" fg:w="1"/><text x="45.2863%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="45.1170%" y="229" width="0.2421%" height="15" fill="rgb(223,3,22)" fg:x="559" fg:w="3"/><text x="45.3670%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="45.1977%" y="213" width="0.1614%" height="15" fill="rgb(225,196,46)" fg:x="560" fg:w="2"/><text x="45.4477%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::ClassBytesIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="45.2785%" y="197" width="0.0807%" height="15" fill="rgb(209,110,37)" fg:x="561" fg:w="1"/><text x="45.5285%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (109 samples, 8.80%)</title><rect x="36.7232%" y="245" width="8.7974%" height="15" fill="rgb(249,89,12)" fg:x="455" fg:w="109"/><text x="36.9732%" y="255.50">regex_automa..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="45.3592%" y="229" width="0.1614%" height="15" fill="rgb(226,27,33)" fg:x="562" fg:w="2"/><text x="45.6092%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="45.4399%" y="213" width="0.0807%" height="15" fill="rgb(213,82,22)" fg:x="563" fg:w="1"/><text x="45.6899%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="45.5206%" y="245" width="0.0807%" height="15" fill="rgb(248,140,0)" fg:x="564" fg:w="1"/><text x="45.7706%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (129 samples, 10.41%)</title><rect x="35.2704%" y="261" width="10.4116%" height="15" fill="rgb(228,106,3)" fg:x="437" fg:w="129"/><text x="35.5204%" y="271.50">regex_automata:..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="45.6013%" y="245" width="0.0807%" height="15" fill="rgb(209,23,37)" fg:x="565" fg:w="1"/><text x="45.8513%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (3 samples, 0.24%)</title><rect x="45.6820%" y="213" width="0.2421%" height="15" fill="rgb(241,93,50)" fg:x="566" fg:w="3"/><text x="45.9320%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.81%)</title><rect x="45.6820%" y="261" width="0.8071%" height="15" fill="rgb(253,46,43)" fg:x="566" fg:w="10"/><text x="45.9320%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.81%)</title><rect x="45.6820%" y="245" width="0.8071%" height="15" fill="rgb(226,206,43)" fg:x="566" fg:w="10"/><text x="45.9320%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (10 samples, 0.81%)</title><rect x="45.6820%" y="229" width="0.8071%" height="15" fill="rgb(217,54,7)" fg:x="566" fg:w="10"/><text x="45.9320%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (7 samples, 0.56%)</title><rect x="45.9241%" y="213" width="0.5650%" height="15" fill="rgb(223,5,52)" fg:x="569" fg:w="7"/><text x="46.1741%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="46.0048%" y="197" width="0.4843%" height="15" fill="rgb(206,52,46)" fg:x="570" fg:w="6"/><text x="46.2548%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="46.0048%" y="181" width="0.4843%" height="15" fill="rgb(253,136,11)" fg:x="570" fg:w="6"/><text x="46.2548%" y="191.50"></text></g><g><title>__libc_malloc (6 samples, 0.48%)</title><rect x="46.0048%" y="165" width="0.4843%" height="15" fill="rgb(208,106,33)" fg:x="570" fg:w="6"/><text x="46.2548%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="46.4891%" y="213" width="0.2421%" height="15" fill="rgb(206,54,4)" fg:x="576" fg:w="3"/><text x="46.7391%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.6505%" y="197" width="0.0807%" height="15" fill="rgb(213,3,15)" fg:x="578" fg:w="1"/><text x="46.9005%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.6505%" y="181" width="0.0807%" height="15" fill="rgb(252,211,39)" fg:x="578" fg:w="1"/><text x="46.9005%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="46.4891%" y="229" width="0.3228%" height="15" fill="rgb(223,6,36)" fg:x="576" fg:w="4"/><text x="46.7391%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="46.7312%" y="213" width="0.0807%" height="15" fill="rgb(252,169,45)" fg:x="579" fg:w="1"/><text x="46.9812%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="46.8119%" y="229" width="0.1614%" height="15" fill="rgb(212,48,26)" fg:x="580" fg:w="2"/><text x="47.0619%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (153 samples, 12.35%)</title><rect x="34.7054%" y="277" width="12.3487%" height="15" fill="rgb(251,102,48)" fg:x="430" fg:w="153"/><text x="34.9554%" y="287.50">regex_automata::me..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="46.4891%" y="261" width="0.5650%" height="15" fill="rgb(243,208,16)" fg:x="576" fg:w="7"/><text x="46.7391%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="46.4891%" y="245" width="0.5650%" height="15" fill="rgb(219,96,24)" fg:x="576" fg:w="7"/><text x="46.7391%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.9734%" y="229" width="0.0807%" height="15" fill="rgb(219,33,29)" fg:x="582" fg:w="1"/><text x="47.2234%" y="239.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (157 samples, 12.67%)</title><rect x="34.6247%" y="293" width="12.6715%" height="15" fill="rgb(223,176,5)" fg:x="429" fg:w="157"/><text x="34.8747%" y="303.50">regex::builders::st..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (3 samples, 0.24%)</title><rect x="47.0541%" y="277" width="0.2421%" height="15" fill="rgb(228,140,14)" fg:x="583" fg:w="3"/><text x="47.3041%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::utf8 (1 samples, 0.08%)</title><rect x="47.2155%" y="261" width="0.0807%" height="15" fill="rgb(217,179,31)" fg:x="585" fg:w="1"/><text x="47.4655%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="47.3769%" y="277" width="0.0807%" height="15" fill="rgb(230,9,30)" fg:x="587" fg:w="1"/><text x="47.6269%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (160 samples, 12.91%)</title><rect x="34.6247%" y="309" width="12.9136%" height="15" fill="rgb(230,136,20)" fg:x="429" fg:w="160"/><text x="34.8747%" y="319.50">&lt;regex::regex::stri..</text></g><g><title>regex::builders::string::RegexBuilder::new (3 samples, 0.24%)</title><rect x="47.2962%" y="293" width="0.2421%" height="15" fill="rgb(215,210,22)" fg:x="586" fg:w="3"/><text x="47.5462%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.4576%" y="277" width="0.0807%" height="15" fill="rgb(218,43,5)" fg:x="588" fg:w="1"/><text x="47.7076%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.4576%" y="261" width="0.0807%" height="15" fill="rgb(216,11,5)" fg:x="588" fg:w="1"/><text x="47.7076%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="47.5383%" y="261" width="0.0807%" height="15" fill="rgb(209,82,29)" fg:x="589" fg:w="1"/><text x="47.7883%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="47.5383%" y="245" width="0.0807%" height="15" fill="rgb(244,115,12)" fg:x="589" fg:w="1"/><text x="47.7883%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="47.6190%" y="261" width="0.0807%" height="15" fill="rgb(222,82,18)" fg:x="590" fg:w="1"/><text x="47.8690%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="47.6190%" y="245" width="0.0807%" height="15" fill="rgb(249,227,8)" fg:x="590" fg:w="1"/><text x="47.8690%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="47.5383%" y="277" width="0.3228%" height="15" fill="rgb(253,141,45)" fg:x="589" fg:w="4"/><text x="47.7883%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="47.6998%" y="261" width="0.1614%" height="15" fill="rgb(234,184,4)" fg:x="591" fg:w="2"/><text x="47.9498%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="47.6998%" y="245" width="0.1614%" height="15" fill="rgb(218,194,23)" fg:x="591" fg:w="2"/><text x="47.9498%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.7805%" y="229" width="0.0807%" height="15" fill="rgb(235,66,41)" fg:x="592" fg:w="1"/><text x="48.0305%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.7805%" y="213" width="0.0807%" height="15" fill="rgb(245,217,1)" fg:x="592" fg:w="1"/><text x="48.0305%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="47.8612%" y="261" width="0.0807%" height="15" fill="rgb(229,91,1)" fg:x="593" fg:w="1"/><text x="48.1112%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.8612%" y="245" width="0.0807%" height="15" fill="rgb(207,101,30)" fg:x="593" fg:w="1"/><text x="48.1112%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="47.5383%" y="309" width="0.4843%" height="15" fill="rgb(223,82,49)" fg:x="589" fg:w="6"/><text x="47.7883%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="47.5383%" y="293" width="0.4843%" height="15" fill="rgb(218,167,17)" fg:x="589" fg:w="6"/><text x="47.7883%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="47.8612%" y="277" width="0.1614%" height="15" fill="rgb(208,103,14)" fg:x="593" fg:w="2"/><text x="48.1112%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="47.9419%" y="261" width="0.0807%" height="15" fill="rgb(238,20,8)" fg:x="594" fg:w="1"/><text x="48.1919%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.9419%" y="245" width="0.0807%" height="15" fill="rgb(218,80,54)" fg:x="594" fg:w="1"/><text x="48.1919%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="48.6683%" y="213" width="0.0807%" height="15" fill="rgb(240,144,17)" fg:x="603" fg:w="1"/><text x="48.9183%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="48.6683%" y="229" width="0.1614%" height="15" fill="rgb(245,27,50)" fg:x="603" fg:w="2"/><text x="48.9183%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="48.7490%" y="213" width="0.0807%" height="15" fill="rgb(251,51,7)" fg:x="604" fg:w="1"/><text x="48.9990%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="48.8297%" y="229" width="0.2421%" height="15" fill="rgb(245,217,29)" fg:x="605" fg:w="3"/><text x="49.0797%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.97%)</title><rect x="48.1840%" y="261" width="0.9685%" height="15" fill="rgb(221,176,29)" fg:x="597" fg:w="12"/><text x="48.4340%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.97%)</title><rect x="48.1840%" y="245" width="0.9685%" height="15" fill="rgb(212,180,24)" fg:x="597" fg:w="12"/><text x="48.4340%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="49.0718%" y="229" width="0.0807%" height="15" fill="rgb(254,24,2)" fg:x="608" fg:w="1"/><text x="49.3218%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.0718%" y="213" width="0.0807%" height="15" fill="rgb(230,100,2)" fg:x="608" fg:w="1"/><text x="49.3218%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (185 samples, 14.93%)</title><rect x="34.3019%" y="325" width="14.9314%" height="15" fill="rgb(219,142,25)" fg:x="425" fg:w="185"/><text x="34.5519%" y="335.50">indefinite::helper::Hel..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.21%)</title><rect x="48.0226%" y="309" width="1.2107%" height="15" fill="rgb(240,73,43)" fg:x="595" fg:w="15"/><text x="48.2726%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (14 samples, 1.13%)</title><rect x="48.1033%" y="293" width="1.1299%" height="15" fill="rgb(214,114,15)" fg:x="596" fg:w="14"/><text x="48.3533%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.13%)</title><rect x="48.1033%" y="277" width="1.1299%" height="15" fill="rgb(207,130,4)" fg:x="596" fg:w="14"/><text x="48.3533%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="49.1525%" y="261" width="0.0807%" height="15" fill="rgb(221,25,40)" fg:x="609" fg:w="1"/><text x="49.4025%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="49.1525%" y="245" width="0.0807%" height="15" fill="rgb(241,184,7)" fg:x="609" fg:w="1"/><text x="49.4025%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.1525%" y="229" width="0.0807%" height="15" fill="rgb(235,159,4)" fg:x="609" fg:w="1"/><text x="49.4025%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.1525%" y="213" width="0.0807%" height="15" fill="rgb(214,87,48)" fg:x="609" fg:w="1"/><text x="49.4025%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.1525%" y="197" width="0.0807%" height="15" fill="rgb(246,198,24)" fg:x="609" fg:w="1"/><text x="49.4025%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="49.3140%" y="261" width="0.0807%" height="15" fill="rgb(209,66,40)" fg:x="611" fg:w="1"/><text x="49.5640%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.3140%" y="245" width="0.0807%" height="15" fill="rgb(233,147,39)" fg:x="611" fg:w="1"/><text x="49.5640%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="49.3140%" y="229" width="0.0807%" height="15" fill="rgb(231,145,52)" fg:x="611" fg:w="1"/><text x="49.5640%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.3140%" y="213" width="0.0807%" height="15" fill="rgb(206,20,26)" fg:x="611" fg:w="1"/><text x="49.5640%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.65%)</title><rect x="49.3947%" y="245" width="0.6457%" height="15" fill="rgb(238,220,4)" fg:x="612" fg:w="8"/><text x="49.6447%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="49.5561%" y="229" width="0.4843%" height="15" fill="rgb(252,195,42)" fg:x="614" fg:w="6"/><text x="49.8061%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.9596%" y="213" width="0.0807%" height="15" fill="rgb(209,10,6)" fg:x="619" fg:w="1"/><text x="50.2096%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="50.0404%" y="245" width="0.0807%" height="15" fill="rgb(229,3,52)" fg:x="620" fg:w="1"/><text x="50.2904%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="50.0404%" y="229" width="0.0807%" height="15" fill="rgb(253,49,37)" fg:x="620" fg:w="1"/><text x="50.2904%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="50.5246%" y="213" width="0.0807%" height="15" fill="rgb(240,103,49)" fg:x="626" fg:w="1"/><text x="50.7746%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.5246%" y="197" width="0.0807%" height="15" fill="rgb(250,182,30)" fg:x="626" fg:w="1"/><text x="50.7746%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.5246%" y="181" width="0.0807%" height="15" fill="rgb(248,8,30)" fg:x="626" fg:w="1"/><text x="50.7746%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.5246%" y="165" width="0.0807%" height="15" fill="rgb(237,120,30)" fg:x="626" fg:w="1"/><text x="50.7746%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.8475%" y="181" width="0.0807%" height="15" fill="rgb(221,146,34)" fg:x="630" fg:w="1"/><text x="51.0975%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.8475%" y="165" width="0.0807%" height="15" fill="rgb(242,55,13)" fg:x="630" fg:w="1"/><text x="51.0975%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.8475%" y="149" width="0.0807%" height="15" fill="rgb(242,112,31)" fg:x="630" fg:w="1"/><text x="51.0975%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.40%)</title><rect x="50.6053%" y="213" width="0.4036%" height="15" fill="rgb(249,192,27)" fg:x="627" fg:w="5"/><text x="50.8553%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="50.8475%" y="197" width="0.1614%" height="15" fill="rgb(208,204,44)" fg:x="630" fg:w="2"/><text x="51.0975%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.9282%" y="181" width="0.0807%" height="15" fill="rgb(208,93,54)" fg:x="631" fg:w="1"/><text x="51.1782%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.9282%" y="165" width="0.0807%" height="15" fill="rgb(242,1,31)" fg:x="631" fg:w="1"/><text x="51.1782%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.9282%" y="149" width="0.0807%" height="15" fill="rgb(241,83,25)" fg:x="631" fg:w="1"/><text x="51.1782%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (19 samples, 1.53%)</title><rect x="50.1211%" y="245" width="1.5335%" height="15" fill="rgb(205,169,50)" fg:x="621" fg:w="19"/><text x="50.3711%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (19 samples, 1.53%)</title><rect x="50.1211%" y="229" width="1.5335%" height="15" fill="rgb(239,186,37)" fg:x="621" fg:w="19"/><text x="50.3711%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.65%)</title><rect x="51.0089%" y="213" width="0.6457%" height="15" fill="rgb(205,221,10)" fg:x="632" fg:w="8"/><text x="51.2589%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (7 samples, 0.56%)</title><rect x="51.0896%" y="197" width="0.5650%" height="15" fill="rgb(218,196,15)" fg:x="633" fg:w="7"/><text x="51.3396%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.48%)</title><rect x="51.1703%" y="181" width="0.4843%" height="15" fill="rgb(218,196,35)" fg:x="634" fg:w="6"/><text x="51.4203%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="52.2195%" y="133" width="0.1614%" height="15" fill="rgb(233,63,24)" fg:x="647" fg:w="2"/><text x="52.4695%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.3810%" y="133" width="0.0807%" height="15" fill="rgb(225,8,4)" fg:x="649" fg:w="1"/><text x="52.6310%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="52.4617%" y="133" width="0.3228%" height="15" fill="rgb(234,105,35)" fg:x="650" fg:w="4"/><text x="52.7117%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.6231%" y="117" width="0.1614%" height="15" fill="rgb(236,21,32)" fg:x="652" fg:w="2"/><text x="52.8731%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="52.6231%" y="101" width="0.1614%" height="15" fill="rgb(228,109,6)" fg:x="652" fg:w="2"/><text x="52.8731%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="52.6231%" y="85" width="0.1614%" height="15" fill="rgb(229,215,31)" fg:x="652" fg:w="2"/><text x="52.8731%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="52.7845%" y="133" width="0.2421%" height="15" fill="rgb(221,52,54)" fg:x="654" fg:w="3"/><text x="53.0345%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.8652%" y="117" width="0.1614%" height="15" fill="rgb(252,129,43)" fg:x="655" fg:w="2"/><text x="53.1152%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="52.8652%" y="101" width="0.1614%" height="15" fill="rgb(248,183,27)" fg:x="655" fg:w="2"/><text x="53.1152%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="52.8652%" y="85" width="0.1614%" height="15" fill="rgb(250,0,22)" fg:x="655" fg:w="2"/><text x="53.1152%" y="95.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="53.5109%" y="69" width="0.1614%" height="15" fill="rgb(213,166,10)" fg:x="663" fg:w="2"/><text x="53.7609%" y="79.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="53.6723%" y="69" width="0.0807%" height="15" fill="rgb(207,163,36)" fg:x="665" fg:w="1"/><text x="53.9223%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="53.6723%" y="53" width="0.0807%" height="15" fill="rgb(208,122,22)" fg:x="665" fg:w="1"/><text x="53.9223%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="53.5109%" y="101" width="0.5650%" height="15" fill="rgb(207,104,49)" fg:x="663" fg:w="7"/><text x="53.7609%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.56%)</title><rect x="53.5109%" y="85" width="0.5650%" height="15" fill="rgb(248,211,50)" fg:x="663" fg:w="7"/><text x="53.7609%" y="95.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="53.7530%" y="69" width="0.3228%" height="15" fill="rgb(217,13,45)" fg:x="666" fg:w="4"/><text x="54.0030%" y="79.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="54.5601%" y="85" width="0.1614%" height="15" fill="rgb(211,216,49)" fg:x="676" fg:w="2"/><text x="54.8101%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (25 samples, 2.02%)</title><rect x="53.0266%" y="133" width="2.0178%" height="15" fill="rgb(221,58,53)" fg:x="657" fg:w="25"/><text x="53.2766%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (24 samples, 1.94%)</title><rect x="53.1073%" y="117" width="1.9370%" height="15" fill="rgb(220,112,41)" fg:x="658" fg:w="24"/><text x="53.3573%" y="127.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (12 samples, 0.97%)</title><rect x="54.0759%" y="101" width="0.9685%" height="15" fill="rgb(236,38,28)" fg:x="670" fg:w="12"/><text x="54.3259%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="54.7215%" y="85" width="0.3228%" height="15" fill="rgb(227,195,22)" fg:x="678" fg:w="4"/><text x="54.9715%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="54.7215%" y="69" width="0.3228%" height="15" fill="rgb(214,55,33)" fg:x="678" fg:w="4"/><text x="54.9715%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="54.8023%" y="53" width="0.2421%" height="15" fill="rgb(248,80,13)" fg:x="679" fg:w="3"/><text x="55.0523%" y="63.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="54.8023%" y="37" width="0.2421%" height="15" fill="rgb(238,52,6)" fg:x="679" fg:w="3"/><text x="55.0523%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="55.0444%" y="133" width="0.1614%" height="15" fill="rgb(224,198,47)" fg:x="682" fg:w="2"/><text x="55.2944%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="55.0444%" y="117" width="0.1614%" height="15" fill="rgb(233,171,20)" fg:x="682" fg:w="2"/><text x="55.2944%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="55.0444%" y="101" width="0.1614%" height="15" fill="rgb(241,30,25)" fg:x="682" fg:w="2"/><text x="55.2944%" y="111.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="55.2058%" y="101" width="0.2421%" height="15" fill="rgb(207,171,38)" fg:x="684" fg:w="3"/><text x="55.4558%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (64 samples, 5.17%)</title><rect x="55.2058%" y="133" width="5.1655%" height="15" fill="rgb(234,70,1)" fg:x="684" fg:w="64"/><text x="55.4558%" y="143.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (64 samples, 5.17%)</title><rect x="55.2058%" y="117" width="5.1655%" height="15" fill="rgb(232,178,18)" fg:x="684" fg:w="64"/><text x="55.4558%" y="127.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (61 samples, 4.92%)</title><rect x="55.4479%" y="101" width="4.9233%" height="15" fill="rgb(241,78,40)" fg:x="687" fg:w="61"/><text x="55.6979%" y="111.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="60.3713%" y="133" width="0.2421%" height="15" fill="rgb(222,35,25)" fg:x="748" fg:w="3"/><text x="60.6213%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5327%" y="117" width="0.0807%" height="15" fill="rgb(207,92,16)" fg:x="750" fg:w="1"/><text x="60.7827%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 9.44%)</title><rect x="51.6546%" y="229" width="9.4431%" height="15" fill="rgb(216,59,51)" fg:x="640" fg:w="117"/><text x="51.9046%" y="239.50">&lt;core::iter::a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (117 samples, 9.44%)</title><rect x="51.6546%" y="213" width="9.4431%" height="15" fill="rgb(213,80,28)" fg:x="640" fg:w="117"/><text x="51.9046%" y="223.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (117 samples, 9.44%)</title><rect x="51.6546%" y="197" width="9.4431%" height="15" fill="rgb(220,93,7)" fg:x="640" fg:w="117"/><text x="51.9046%" y="207.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (116 samples, 9.36%)</title><rect x="51.7353%" y="181" width="9.3624%" height="15" fill="rgb(225,24,44)" fg:x="641" fg:w="116"/><text x="51.9853%" y="191.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (116 samples, 9.36%)</title><rect x="51.7353%" y="165" width="9.3624%" height="15" fill="rgb(243,74,40)" fg:x="641" fg:w="116"/><text x="51.9853%" y="175.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (115 samples, 9.28%)</title><rect x="51.8160%" y="149" width="9.2817%" height="15" fill="rgb(228,39,7)" fg:x="642" fg:w="115"/><text x="52.0660%" y="159.50">regex_automat..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.48%)</title><rect x="60.6134%" y="133" width="0.4843%" height="15" fill="rgb(227,79,8)" fg:x="751" fg:w="6"/><text x="60.8634%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="60.8555%" y="117" width="0.2421%" height="15" fill="rgb(236,58,11)" fg:x="754" fg:w="3"/><text x="61.1055%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="60.8555%" y="101" width="0.2421%" height="15" fill="rgb(249,63,35)" fg:x="754" fg:w="3"/><text x="61.1055%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.0169%" y="85" width="0.0807%" height="15" fill="rgb(252,114,16)" fg:x="756" fg:w="1"/><text x="61.2669%" y="95.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="61.1784%" y="213" width="0.0807%" height="15" fill="rgb(254,151,24)" fg:x="758" fg:w="1"/><text x="61.4284%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.2591%" y="213" width="0.1614%" height="15" fill="rgb(253,54,39)" fg:x="759" fg:w="2"/><text x="61.5091%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="61.4205%" y="213" width="0.4843%" height="15" fill="rgb(243,25,45)" fg:x="761" fg:w="6"/><text x="61.6705%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.1469%" y="197" width="0.0807%" height="15" fill="rgb(234,134,9)" fg:x="770" fg:w="1"/><text x="62.3969%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (161 samples, 12.99%)</title><rect x="49.3947%" y="261" width="12.9944%" height="15" fill="rgb(227,166,31)" fg:x="612" fg:w="161"/><text x="49.6447%" y="271.50">regex_automata::meta..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (133 samples, 10.73%)</title><rect x="51.6546%" y="245" width="10.7345%" height="15" fill="rgb(245,143,41)" fg:x="640" fg:w="133"/><text x="51.9046%" y="255.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.29%)</title><rect x="61.0977%" y="229" width="1.2914%" height="15" fill="rgb(238,181,32)" fg:x="757" fg:w="16"/><text x="61.3477%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="61.9048%" y="213" width="0.4843%" height="15" fill="rgb(224,113,18)" fg:x="767" fg:w="6"/><text x="62.1548%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="62.2276%" y="197" width="0.1614%" height="15" fill="rgb(240,229,28)" fg:x="771" fg:w="2"/><text x="62.4776%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.2276%" y="181" width="0.1614%" height="15" fill="rgb(250,185,3)" fg:x="771" fg:w="2"/><text x="62.4776%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="62.4697%" y="229" width="0.0807%" height="15" fill="rgb(212,59,25)" fg:x="774" fg:w="1"/><text x="62.7197%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="62.4697%" y="213" width="0.0807%" height="15" fill="rgb(221,87,20)" fg:x="774" fg:w="1"/><text x="62.7197%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="62.5504%" y="213" width="0.0807%" height="15" fill="rgb(213,74,28)" fg:x="775" fg:w="1"/><text x="62.8004%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="62.5504%" y="197" width="0.0807%" height="15" fill="rgb(224,132,34)" fg:x="775" fg:w="1"/><text x="62.8004%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="62.5504%" y="229" width="0.2421%" height="15" fill="rgb(222,101,24)" fg:x="775" fg:w="3"/><text x="62.8004%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="62.6312%" y="213" width="0.1614%" height="15" fill="rgb(254,142,4)" fg:x="776" fg:w="2"/><text x="62.8812%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="62.6312%" y="197" width="0.1614%" height="15" fill="rgb(230,229,49)" fg:x="776" fg:w="2"/><text x="62.8812%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.6312%" y="181" width="0.1614%" height="15" fill="rgb(238,70,47)" fg:x="776" fg:w="2"/><text x="62.8812%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="62.6312%" y="165" width="0.1614%" height="15" fill="rgb(231,160,17)" fg:x="776" fg:w="2"/><text x="62.8812%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="62.7926%" y="229" width="0.0807%" height="15" fill="rgb(218,68,53)" fg:x="778" fg:w="1"/><text x="63.0426%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="62.7926%" y="213" width="0.0807%" height="15" fill="rgb(236,111,10)" fg:x="778" fg:w="1"/><text x="63.0426%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="62.3890%" y="261" width="0.5650%" height="15" fill="rgb(224,34,41)" fg:x="773" fg:w="7"/><text x="62.6390%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="62.3890%" y="245" width="0.5650%" height="15" fill="rgb(241,118,19)" fg:x="773" fg:w="7"/><text x="62.6390%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="62.8733%" y="229" width="0.0807%" height="15" fill="rgb(238,129,25)" fg:x="779" fg:w="1"/><text x="63.1233%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="62.8733%" y="213" width="0.0807%" height="15" fill="rgb(238,22,31)" fg:x="779" fg:w="1"/><text x="63.1233%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.56%)</title><rect x="62.9540%" y="229" width="0.5650%" height="15" fill="rgb(222,174,48)" fg:x="780" fg:w="7"/><text x="63.2040%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.48%)</title><rect x="63.0347%" y="213" width="0.4843%" height="15" fill="rgb(206,152,40)" fg:x="781" fg:w="6"/><text x="63.2847%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="63.2768%" y="197" width="0.2421%" height="15" fill="rgb(218,99,54)" fg:x="784" fg:w="3"/><text x="63.5268%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.4383%" y="181" width="0.0807%" height="15" fill="rgb(220,174,26)" fg:x="786" fg:w="1"/><text x="63.6883%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="63.5190%" y="213" width="0.1614%" height="15" fill="rgb(245,116,9)" fg:x="787" fg:w="2"/><text x="63.7690%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="63.5997%" y="197" width="0.0807%" height="15" fill="rgb(209,72,35)" fg:x="788" fg:w="1"/><text x="63.8497%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="63.5997%" y="181" width="0.0807%" height="15" fill="rgb(226,126,21)" fg:x="788" fg:w="1"/><text x="63.8497%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="63.5190%" y="229" width="0.2421%" height="15" fill="rgb(227,192,1)" fg:x="787" fg:w="3"/><text x="63.7690%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="63.6804%" y="213" width="0.0807%" height="15" fill="rgb(237,180,29)" fg:x="789" fg:w="1"/><text x="63.9304%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.6804%" y="197" width="0.0807%" height="15" fill="rgb(230,197,35)" fg:x="789" fg:w="1"/><text x="63.9304%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (180 samples, 14.53%)</title><rect x="49.3140%" y="309" width="14.5278%" height="15" fill="rgb(246,193,31)" fg:x="611" fg:w="180"/><text x="49.5640%" y="319.50">&lt;regex::regex::string:..</text></g><g><title>regex::builders::string::RegexBuilder::build (180 samples, 14.53%)</title><rect x="49.3140%" y="293" width="14.5278%" height="15" fill="rgb(241,36,4)" fg:x="611" fg:w="180"/><text x="49.5640%" y="303.50">regex::builders::strin..</text></g><g><title>regex_automata::meta::regex::Builder::build (180 samples, 14.53%)</title><rect x="49.3140%" y="277" width="14.5278%" height="15" fill="rgb(241,130,17)" fg:x="611" fg:w="180"/><text x="49.5640%" y="287.50">regex_automata::meta::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.89%)</title><rect x="62.9540%" y="261" width="0.8878%" height="15" fill="rgb(206,137,32)" fg:x="780" fg:w="11"/><text x="63.2040%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.89%)</title><rect x="62.9540%" y="245" width="0.8878%" height="15" fill="rgb(237,228,51)" fg:x="780" fg:w="11"/><text x="63.2040%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="63.7611%" y="229" width="0.0807%" height="15" fill="rgb(243,6,42)" fg:x="790" fg:w="1"/><text x="64.0111%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.8418%" y="261" width="0.0807%" height="15" fill="rgb(251,74,28)" fg:x="791" fg:w="1"/><text x="64.0918%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="63.8418%" y="277" width="0.1614%" height="15" fill="rgb(218,20,49)" fg:x="791" fg:w="2"/><text x="64.0918%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="63.9225%" y="261" width="0.0807%" height="15" fill="rgb(238,28,14)" fg:x="792" fg:w="1"/><text x="64.1725%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.9225%" y="245" width="0.0807%" height="15" fill="rgb(229,40,46)" fg:x="792" fg:w="1"/><text x="64.1725%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.9225%" y="229" width="0.0807%" height="15" fill="rgb(244,195,20)" fg:x="792" fg:w="1"/><text x="64.1725%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.9225%" y="213" width="0.0807%" height="15" fill="rgb(253,56,35)" fg:x="792" fg:w="1"/><text x="64.1725%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.1646%" y="245" width="0.0807%" height="15" fill="rgb(210,149,44)" fg:x="795" fg:w="1"/><text x="64.4146%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.56%)</title><rect x="63.8418%" y="309" width="0.5650%" height="15" fill="rgb(240,135,12)" fg:x="791" fg:w="7"/><text x="64.0918%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (7 samples, 0.56%)</title><rect x="63.8418%" y="293" width="0.5650%" height="15" fill="rgb(251,24,50)" fg:x="791" fg:w="7"/><text x="64.0918%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.40%)</title><rect x="64.0032%" y="277" width="0.4036%" height="15" fill="rgb(243,200,47)" fg:x="793" fg:w="5"/><text x="64.2532%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (5 samples, 0.40%)</title><rect x="64.0032%" y="261" width="0.4036%" height="15" fill="rgb(224,166,26)" fg:x="793" fg:w="5"/><text x="64.2532%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="64.2454%" y="245" width="0.1614%" height="15" fill="rgb(233,0,47)" fg:x="796" fg:w="2"/><text x="64.4954%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="64.4068%" y="293" width="0.1614%" height="15" fill="rgb(253,80,5)" fg:x="798" fg:w="2"/><text x="64.6568%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="64.4068%" y="277" width="0.1614%" height="15" fill="rgb(214,133,25)" fg:x="798" fg:w="2"/><text x="64.6568%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="64.4875%" y="261" width="0.0807%" height="15" fill="rgb(209,27,14)" fg:x="799" fg:w="1"/><text x="64.7375%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="64.4875%" y="245" width="0.0807%" height="15" fill="rgb(219,102,51)" fg:x="799" fg:w="1"/><text x="64.7375%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.5682%" y="229" width="0.0807%" height="15" fill="rgb(237,18,16)" fg:x="800" fg:w="1"/><text x="64.8182%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.5682%" y="213" width="0.0807%" height="15" fill="rgb(241,85,17)" fg:x="800" fg:w="1"/><text x="64.8182%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.9718%" y="197" width="0.0807%" height="15" fill="rgb(236,90,42)" fg:x="805" fg:w="1"/><text x="65.2218%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="64.9718%" y="213" width="0.1614%" height="15" fill="rgb(249,57,21)" fg:x="805" fg:w="2"/><text x="65.2218%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="65.0525%" y="197" width="0.0807%" height="15" fill="rgb(243,12,36)" fg:x="806" fg:w="1"/><text x="65.3025%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0525%" y="181" width="0.0807%" height="15" fill="rgb(253,128,47)" fg:x="806" fg:w="1"/><text x="65.3025%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (199 samples, 16.06%)</title><rect x="49.2333%" y="325" width="16.0613%" height="15" fill="rgb(207,33,20)" fg:x="610" fg:w="199"/><text x="49.4833%" y="335.50">indefinite::rules::number..</text></g><g><title>regex::regex::string::Regex::is_match_at (11 samples, 0.89%)</title><rect x="64.4068%" y="309" width="0.8878%" height="15" fill="rgb(233,215,35)" fg:x="798" fg:w="11"/><text x="64.6568%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.73%)</title><rect x="64.5682%" y="293" width="0.7264%" height="15" fill="rgb(249,188,52)" fg:x="800" fg:w="9"/><text x="64.8182%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.73%)</title><rect x="64.5682%" y="277" width="0.7264%" height="15" fill="rgb(225,12,32)" fg:x="800" fg:w="9"/><text x="64.8182%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.73%)</title><rect x="64.5682%" y="261" width="0.7264%" height="15" fill="rgb(247,98,14)" fg:x="800" fg:w="9"/><text x="64.8182%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="64.5682%" y="245" width="0.7264%" height="15" fill="rgb(247,219,48)" fg:x="800" fg:w="9"/><text x="64.8182%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.65%)</title><rect x="64.6489%" y="229" width="0.6457%" height="15" fill="rgb(253,60,48)" fg:x="801" fg:w="8"/><text x="64.8989%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="65.1332%" y="213" width="0.1614%" height="15" fill="rgb(245,15,52)" fg:x="807" fg:w="2"/><text x="65.3832%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2946%" y="309" width="0.0807%" height="15" fill="rgb(220,133,28)" fg:x="809" fg:w="1"/><text x="65.5446%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="65.4560%" y="245" width="0.1614%" height="15" fill="rgb(217,180,4)" fg:x="811" fg:w="2"/><text x="65.7060%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="65.4560%" y="229" width="0.1614%" height="15" fill="rgb(251,24,1)" fg:x="811" fg:w="2"/><text x="65.7060%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="65.5367%" y="213" width="0.0807%" height="15" fill="rgb(212,185,49)" fg:x="812" fg:w="1"/><text x="65.7867%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.5367%" y="197" width="0.0807%" height="15" fill="rgb(215,175,22)" fg:x="812" fg:w="1"/><text x="65.7867%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.5367%" y="181" width="0.0807%" height="15" fill="rgb(250,205,14)" fg:x="812" fg:w="1"/><text x="65.7867%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.5367%" y="165" width="0.0807%" height="15" fill="rgb(225,211,22)" fg:x="812" fg:w="1"/><text x="65.7867%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="65.6174%" y="213" width="0.0807%" height="15" fill="rgb(251,179,42)" fg:x="813" fg:w="1"/><text x="65.8674%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="65.6174%" y="245" width="0.1614%" height="15" fill="rgb(208,216,51)" fg:x="813" fg:w="2"/><text x="65.8674%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="65.6174%" y="229" width="0.1614%" height="15" fill="rgb(235,36,11)" fg:x="813" fg:w="2"/><text x="65.8674%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="65.6981%" y="213" width="0.0807%" height="15" fill="rgb(213,189,28)" fg:x="814" fg:w="1"/><text x="65.9481%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.6981%" y="197" width="0.0807%" height="15" fill="rgb(227,203,42)" fg:x="814" fg:w="1"/><text x="65.9481%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="65.6981%" y="181" width="0.0807%" height="15" fill="rgb(244,72,36)" fg:x="814" fg:w="1"/><text x="65.9481%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.6981%" y="165" width="0.0807%" height="15" fill="rgb(213,53,17)" fg:x="814" fg:w="1"/><text x="65.9481%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.6981%" y="149" width="0.0807%" height="15" fill="rgb(207,167,3)" fg:x="814" fg:w="1"/><text x="65.9481%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.6981%" y="133" width="0.0807%" height="15" fill="rgb(216,98,30)" fg:x="814" fg:w="1"/><text x="65.9481%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="65.7789%" y="245" width="0.0807%" height="15" fill="rgb(236,123,15)" fg:x="815" fg:w="1"/><text x="66.0289%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9403%" y="229" width="0.0807%" height="15" fill="rgb(248,81,50)" fg:x="817" fg:w="1"/><text x="66.1903%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="66.1017%" y="213" width="0.0807%" height="15" fill="rgb(214,120,4)" fg:x="819" fg:w="1"/><text x="66.3517%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="66.0210%" y="229" width="0.2421%" height="15" fill="rgb(208,179,34)" fg:x="818" fg:w="3"/><text x="66.2710%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="66.1824%" y="213" width="0.0807%" height="15" fill="rgb(227,140,7)" fg:x="820" fg:w="1"/><text x="66.4324%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="66.1824%" y="197" width="0.0807%" height="15" fill="rgb(214,22,6)" fg:x="820" fg:w="1"/><text x="66.4324%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="66.1824%" y="181" width="0.0807%" height="15" fill="rgb(207,137,27)" fg:x="820" fg:w="1"/><text x="66.4324%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.1824%" y="165" width="0.0807%" height="15" fill="rgb(210,8,46)" fg:x="820" fg:w="1"/><text x="66.4324%" y="175.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="66.2631%" y="197" width="0.0807%" height="15" fill="rgb(240,16,54)" fg:x="821" fg:w="1"/><text x="66.5131%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.56%)</title><rect x="65.8596%" y="245" width="0.5650%" height="15" fill="rgb(211,209,29)" fg:x="816" fg:w="7"/><text x="66.1096%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="66.2631%" y="229" width="0.1614%" height="15" fill="rgb(226,228,24)" fg:x="821" fg:w="2"/><text x="66.5131%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="66.2631%" y="213" width="0.1614%" height="15" fill="rgb(222,84,9)" fg:x="821" fg:w="2"/><text x="66.5131%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="66.3438%" y="197" width="0.0807%" height="15" fill="rgb(234,203,30)" fg:x="822" fg:w="1"/><text x="66.5938%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="66.5860%" y="197" width="0.0807%" height="15" fill="rgb(238,109,14)" fg:x="825" fg:w="1"/><text x="66.8360%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="66.5860%" y="181" width="0.0807%" height="15" fill="rgb(233,206,34)" fg:x="825" fg:w="1"/><text x="66.8360%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="66.5860%" y="165" width="0.0807%" height="15" fill="rgb(220,167,47)" fg:x="825" fg:w="1"/><text x="66.8360%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="66.5860%" y="149" width="0.0807%" height="15" fill="rgb(238,105,10)" fg:x="825" fg:w="1"/><text x="66.8360%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="66.6667%" y="197" width="0.0807%" height="15" fill="rgb(213,227,17)" fg:x="826" fg:w="1"/><text x="66.9167%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="66.4245%" y="245" width="0.4036%" height="15" fill="rgb(217,132,38)" fg:x="823" fg:w="5"/><text x="66.6745%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="66.4245%" y="229" width="0.4036%" height="15" fill="rgb(242,146,4)" fg:x="823" fg:w="5"/><text x="66.6745%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="66.4245%" y="213" width="0.4036%" height="15" fill="rgb(212,61,9)" fg:x="823" fg:w="5"/><text x="66.6745%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="66.7474%" y="197" width="0.0807%" height="15" fill="rgb(247,126,22)" fg:x="827" fg:w="1"/><text x="66.9974%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.7474%" y="181" width="0.0807%" height="15" fill="rgb(220,196,2)" fg:x="827" fg:w="1"/><text x="66.9974%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.7474%" y="165" width="0.0807%" height="15" fill="rgb(208,46,4)" fg:x="827" fg:w="1"/><text x="66.9974%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.7474%" y="149" width="0.0807%" height="15" fill="rgb(252,104,46)" fg:x="827" fg:w="1"/><text x="66.9974%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.9088%" y="197" width="0.0807%" height="15" fill="rgb(237,152,48)" fg:x="829" fg:w="1"/><text x="67.1588%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.9088%" y="181" width="0.0807%" height="15" fill="rgb(221,59,37)" fg:x="829" fg:w="1"/><text x="67.1588%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.9088%" y="165" width="0.0807%" height="15" fill="rgb(209,202,51)" fg:x="829" fg:w="1"/><text x="67.1588%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="66.8281%" y="213" width="0.2421%" height="15" fill="rgb(228,81,30)" fg:x="828" fg:w="3"/><text x="67.0781%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="66.9895%" y="197" width="0.0807%" height="15" fill="rgb(227,42,39)" fg:x="830" fg:w="1"/><text x="67.2395%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="67.0702%" y="197" width="0.0807%" height="15" fill="rgb(221,26,2)" fg:x="831" fg:w="1"/><text x="67.3202%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (23 samples, 1.86%)</title><rect x="65.3753%" y="293" width="1.8563%" height="15" fill="rgb(254,61,31)" fg:x="810" fg:w="23"/><text x="65.6253%" y="303.50">&lt;..</text></g><g><title>regex::builders::string::RegexBuilder::build (23 samples, 1.86%)</title><rect x="65.3753%" y="277" width="1.8563%" height="15" fill="rgb(222,173,38)" fg:x="810" fg:w="23"/><text x="65.6253%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (23 samples, 1.86%)</title><rect x="65.3753%" y="261" width="1.8563%" height="15" fill="rgb(218,50,12)" fg:x="810" fg:w="23"/><text x="65.6253%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="66.8281%" y="245" width="0.4036%" height="15" fill="rgb(223,88,40)" fg:x="828" fg:w="5"/><text x="67.0781%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="66.8281%" y="229" width="0.4036%" height="15" fill="rgb(237,54,19)" fg:x="828" fg:w="5"/><text x="67.0781%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="67.0702%" y="213" width="0.1614%" height="15" fill="rgb(251,129,25)" fg:x="831" fg:w="2"/><text x="67.3202%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::pop (1 samples, 0.08%)</title><rect x="67.1509%" y="197" width="0.0807%" height="15" fill="rgb(238,97,19)" fg:x="832" fg:w="1"/><text x="67.4009%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="67.2316%" y="245" width="0.0807%" height="15" fill="rgb(240,169,18)" fg:x="833" fg:w="1"/><text x="67.4816%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.2316%" y="229" width="0.0807%" height="15" fill="rgb(230,187,49)" fg:x="833" fg:w="1"/><text x="67.4816%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="67.2316%" y="293" width="0.2421%" height="15" fill="rgb(209,44,26)" fg:x="833" fg:w="3"/><text x="67.4816%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="67.2316%" y="277" width="0.2421%" height="15" fill="rgb(244,0,6)" fg:x="833" fg:w="3"/><text x="67.4816%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="67.2316%" y="261" width="0.2421%" height="15" fill="rgb(248,18,21)" fg:x="833" fg:w="3"/><text x="67.4816%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="67.3123%" y="245" width="0.1614%" height="15" fill="rgb(245,180,19)" fg:x="834" fg:w="2"/><text x="67.5623%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="67.3123%" y="229" width="0.1614%" height="15" fill="rgb(252,118,36)" fg:x="834" fg:w="2"/><text x="67.5623%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="67.7159%" y="213" width="0.1614%" height="15" fill="rgb(210,224,19)" fg:x="839" fg:w="2"/><text x="67.9659%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="67.7159%" y="197" width="0.1614%" height="15" fill="rgb(218,30,24)" fg:x="839" fg:w="2"/><text x="67.9659%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.7966%" y="181" width="0.0807%" height="15" fill="rgb(219,75,50)" fg:x="840" fg:w="1"/><text x="68.0466%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="67.4738%" y="229" width="0.5650%" height="15" fill="rgb(234,72,50)" fg:x="836" fg:w="7"/><text x="67.7238%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="67.8773%" y="213" width="0.1614%" height="15" fill="rgb(219,100,48)" fg:x="841" fg:w="2"/><text x="68.1273%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="67.9580%" y="197" width="0.0807%" height="15" fill="rgb(253,5,41)" fg:x="842" fg:w="1"/><text x="68.2080%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9580%" y="181" width="0.0807%" height="15" fill="rgb(247,181,11)" fg:x="842" fg:w="1"/><text x="68.2080%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="67.4738%" y="245" width="0.7264%" height="15" fill="rgb(222,223,25)" fg:x="836" fg:w="9"/><text x="67.7238%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="68.0387%" y="229" width="0.1614%" height="15" fill="rgb(214,198,28)" fg:x="843" fg:w="2"/><text x="68.2887%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (455 samples, 36.72%)</title><rect x="31.5577%" y="405" width="36.7232%" height="15" fill="rgb(230,46,43)" fg:x="391" fg:w="455"/><text x="31.8077%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (422 samples, 34.06%)</title><rect x="34.2211%" y="389" width="34.0597%" height="15" fill="rgb(233,65,53)" fg:x="424" fg:w="422"/><text x="34.4711%" y="399.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (422 samples, 34.06%)</title><rect x="34.2211%" y="373" width="34.0597%" height="15" fill="rgb(221,121,27)" fg:x="424" fg:w="422"/><text x="34.4711%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (422 samples, 34.06%)</title><rect x="34.2211%" y="357" width="34.0597%" height="15" fill="rgb(247,70,47)" fg:x="424" fg:w="422"/><text x="34.4711%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (421 samples, 33.98%)</title><rect x="34.3019%" y="341" width="33.9790%" height="15" fill="rgb(228,85,35)" fg:x="425" fg:w="421"/><text x="34.5519%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (37 samples, 2.99%)</title><rect x="65.2946%" y="325" width="2.9863%" height="15" fill="rgb(209,50,18)" fg:x="809" fg:w="37"/><text x="65.5446%" y="335.50">ind..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (36 samples, 2.91%)</title><rect x="65.3753%" y="309" width="2.9056%" height="15" fill="rgb(250,19,35)" fg:x="810" fg:w="36"/><text x="65.6253%" y="319.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.81%)</title><rect x="67.4738%" y="293" width="0.8071%" height="15" fill="rgb(253,107,29)" fg:x="836" fg:w="10"/><text x="67.7238%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.81%)</title><rect x="67.4738%" y="277" width="0.8071%" height="15" fill="rgb(252,179,29)" fg:x="836" fg:w="10"/><text x="67.7238%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.81%)</title><rect x="67.4738%" y="261" width="0.8071%" height="15" fill="rgb(238,194,6)" fg:x="836" fg:w="10"/><text x="67.7238%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="68.2002%" y="245" width="0.0807%" height="15" fill="rgb(238,164,29)" fg:x="845" fg:w="1"/><text x="68.4502%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="68.2002%" y="229" width="0.0807%" height="15" fill="rgb(224,25,9)" fg:x="845" fg:w="1"/><text x="68.4502%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="68.2809%" y="389" width="0.2421%" height="15" fill="rgb(244,153,23)" fg:x="846" fg:w="3"/><text x="68.5309%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.3616%" y="373" width="0.1614%" height="15" fill="rgb(212,203,14)" fg:x="847" fg:w="2"/><text x="68.6116%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.3616%" y="357" width="0.1614%" height="15" fill="rgb(220,164,20)" fg:x="847" fg:w="2"/><text x="68.6116%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.4423%" y="341" width="0.0807%" height="15" fill="rgb(222,203,48)" fg:x="848" fg:w="1"/><text x="68.6923%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.4423%" y="325" width="0.0807%" height="15" fill="rgb(215,159,22)" fg:x="848" fg:w="1"/><text x="68.6923%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.4423%" y="309" width="0.0807%" height="15" fill="rgb(216,183,47)" fg:x="848" fg:w="1"/><text x="68.6923%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.4423%" y="293" width="0.0807%" height="15" fill="rgb(229,195,25)" fg:x="848" fg:w="1"/><text x="68.6923%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.4423%" y="277" width="0.0807%" height="15" fill="rgb(224,132,51)" fg:x="848" fg:w="1"/><text x="68.6923%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="68.4423%" y="261" width="0.0807%" height="15" fill="rgb(240,63,7)" fg:x="848" fg:w="1"/><text x="68.6923%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.4423%" y="245" width="0.0807%" height="15" fill="rgb(249,182,41)" fg:x="848" fg:w="1"/><text x="68.6923%" y="255.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.6037%" y="309" width="0.0807%" height="15" fill="rgb(243,47,26)" fg:x="850" fg:w="1"/><text x="68.8537%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.6037%" y="293" width="0.0807%" height="15" fill="rgb(233,48,2)" fg:x="850" fg:w="1"/><text x="68.8537%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.6037%" y="277" width="0.0807%" height="15" fill="rgb(244,165,34)" fg:x="850" fg:w="1"/><text x="68.8537%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.6037%" y="261" width="0.0807%" height="15" fill="rgb(207,89,7)" fg:x="850" fg:w="1"/><text x="68.8537%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.6037%" y="245" width="0.0807%" height="15" fill="rgb(244,117,36)" fg:x="850" fg:w="1"/><text x="68.8537%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="68.6037%" y="357" width="0.1614%" height="15" fill="rgb(226,144,34)" fg:x="850" fg:w="2"/><text x="68.8537%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="68.6037%" y="341" width="0.1614%" height="15" fill="rgb(213,23,19)" fg:x="850" fg:w="2"/><text x="68.8537%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="68.6037%" y="325" width="0.1614%" height="15" fill="rgb(217,75,12)" fg:x="850" fg:w="2"/><text x="68.8537%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.6844%" y="309" width="0.0807%" height="15" fill="rgb(224,159,17)" fg:x="851" fg:w="1"/><text x="68.9344%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.6844%" y="293" width="0.0807%" height="15" fill="rgb(217,118,1)" fg:x="851" fg:w="1"/><text x="68.9344%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="68.6844%" y="277" width="0.0807%" height="15" fill="rgb(232,180,48)" fg:x="851" fg:w="1"/><text x="68.9344%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="68.2809%" y="405" width="0.5650%" height="15" fill="rgb(230,27,33)" fg:x="846" fg:w="7"/><text x="68.5309%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="68.5230%" y="389" width="0.3228%" height="15" fill="rgb(205,31,21)" fg:x="849" fg:w="4"/><text x="68.7730%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="68.5230%" y="373" width="0.3228%" height="15" fill="rgb(253,59,4)" fg:x="849" fg:w="4"/><text x="68.7730%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.7651%" y="357" width="0.0807%" height="15" fill="rgb(224,201,9)" fg:x="852" fg:w="1"/><text x="69.0151%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7651%" y="341" width="0.0807%" height="15" fill="rgb(229,206,30)" fg:x="852" fg:w="1"/><text x="69.0151%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="68.7651%" y="325" width="0.0807%" height="15" fill="rgb(212,67,47)" fg:x="852" fg:w="1"/><text x="69.0151%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="68.7651%" y="309" width="0.0807%" height="15" fill="rgb(211,96,50)" fg:x="852" fg:w="1"/><text x="69.0151%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.8458%" y="357" width="0.0807%" height="15" fill="rgb(252,114,18)" fg:x="853" fg:w="1"/><text x="69.0958%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.8458%" y="341" width="0.0807%" height="15" fill="rgb(223,58,37)" fg:x="853" fg:w="1"/><text x="69.0958%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.8458%" y="325" width="0.0807%" height="15" fill="rgb(237,70,4)" fg:x="853" fg:w="1"/><text x="69.0958%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="68.8458%" y="373" width="0.1614%" height="15" fill="rgb(244,85,46)" fg:x="853" fg:w="2"/><text x="69.0958%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.9266%" y="357" width="0.0807%" height="15" fill="rgb(223,39,52)" fg:x="854" fg:w="1"/><text x="69.1766%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0073%" y="277" width="0.0807%" height="15" fill="rgb(218,200,14)" fg:x="855" fg:w="1"/><text x="69.2573%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.0073%" y="261" width="0.0807%" height="15" fill="rgb(208,171,16)" fg:x="855" fg:w="1"/><text x="69.2573%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (4 samples, 0.32%)</title><rect x="68.8458%" y="389" width="0.3228%" height="15" fill="rgb(234,200,18)" fg:x="853" fg:w="4"/><text x="69.0958%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="69.0073%" y="373" width="0.1614%" height="15" fill="rgb(228,45,11)" fg:x="855" fg:w="2"/><text x="69.2573%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="69.0073%" y="357" width="0.1614%" height="15" fill="rgb(237,182,11)" fg:x="855" fg:w="2"/><text x="69.2573%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.0073%" y="341" width="0.1614%" height="15" fill="rgb(241,175,49)" fg:x="855" fg:w="2"/><text x="69.2573%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.0073%" y="325" width="0.1614%" height="15" fill="rgb(247,38,35)" fg:x="855" fg:w="2"/><text x="69.2573%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.0073%" y="309" width="0.1614%" height="15" fill="rgb(228,39,49)" fg:x="855" fg:w="2"/><text x="69.2573%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.0073%" y="293" width="0.1614%" height="15" fill="rgb(226,101,26)" fg:x="855" fg:w="2"/><text x="69.2573%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.0880%" y="277" width="0.0807%" height="15" fill="rgb(206,141,19)" fg:x="856" fg:w="1"/><text x="69.3380%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.0880%" y="261" width="0.0807%" height="15" fill="rgb(211,200,13)" fg:x="856" fg:w="1"/><text x="69.3380%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.1687%" y="325" width="0.0807%" height="15" fill="rgb(241,121,6)" fg:x="857" fg:w="1"/><text x="69.4187%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.1687%" y="309" width="0.0807%" height="15" fill="rgb(234,221,29)" fg:x="857" fg:w="1"/><text x="69.4187%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.2494%" y="325" width="0.0807%" height="15" fill="rgb(229,136,5)" fg:x="858" fg:w="1"/><text x="69.4994%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2494%" y="309" width="0.0807%" height="15" fill="rgb(238,36,11)" fg:x="858" fg:w="1"/><text x="69.4994%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2494%" y="293" width="0.0807%" height="15" fill="rgb(251,55,41)" fg:x="858" fg:w="1"/><text x="69.4994%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.2494%" y="277" width="0.0807%" height="15" fill="rgb(242,34,40)" fg:x="858" fg:w="1"/><text x="69.4994%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2494%" y="261" width="0.0807%" height="15" fill="rgb(215,42,17)" fg:x="858" fg:w="1"/><text x="69.4994%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2494%" y="245" width="0.0807%" height="15" fill="rgb(207,44,46)" fg:x="858" fg:w="1"/><text x="69.4994%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2494%" y="229" width="0.0807%" height="15" fill="rgb(211,206,28)" fg:x="858" fg:w="1"/><text x="69.4994%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.3301%" y="245" width="0.0807%" height="15" fill="rgb(237,167,16)" fg:x="859" fg:w="1"/><text x="69.5801%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.3301%" y="229" width="0.0807%" height="15" fill="rgb(233,66,6)" fg:x="859" fg:w="1"/><text x="69.5801%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4108%" y="197" width="0.0807%" height="15" fill="rgb(246,123,29)" fg:x="860" fg:w="1"/><text x="69.6608%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4108%" y="181" width="0.0807%" height="15" fill="rgb(209,62,40)" fg:x="860" fg:w="1"/><text x="69.6608%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4108%" y="165" width="0.0807%" height="15" fill="rgb(218,4,25)" fg:x="860" fg:w="1"/><text x="69.6608%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4108%" y="149" width="0.0807%" height="15" fill="rgb(253,91,49)" fg:x="860" fg:w="1"/><text x="69.6608%" y="159.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.4108%" y="133" width="0.0807%" height="15" fill="rgb(228,155,29)" fg:x="860" fg:w="1"/><text x="69.6608%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.4108%" y="229" width="0.1614%" height="15" fill="rgb(243,57,37)" fg:x="860" fg:w="2"/><text x="69.6608%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.4108%" y="213" width="0.1614%" height="15" fill="rgb(244,167,17)" fg:x="860" fg:w="2"/><text x="69.6608%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4915%" y="197" width="0.0807%" height="15" fill="rgb(207,181,38)" fg:x="861" fg:w="1"/><text x="69.7415%" y="207.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="69.3301%" y="325" width="0.3228%" height="15" fill="rgb(211,8,23)" fg:x="859" fg:w="4"/><text x="69.5801%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.3301%" y="309" width="0.3228%" height="15" fill="rgb(235,11,44)" fg:x="859" fg:w="4"/><text x="69.5801%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.3301%" y="293" width="0.3228%" height="15" fill="rgb(248,18,52)" fg:x="859" fg:w="4"/><text x="69.5801%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="69.3301%" y="277" width="0.3228%" height="15" fill="rgb(208,4,7)" fg:x="859" fg:w="4"/><text x="69.5801%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.3301%" y="261" width="0.3228%" height="15" fill="rgb(240,17,39)" fg:x="859" fg:w="4"/><text x="69.5801%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="69.4108%" y="245" width="0.2421%" height="15" fill="rgb(207,170,3)" fg:x="860" fg:w="3"/><text x="69.6608%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.5722%" y="229" width="0.0807%" height="15" fill="rgb(236,100,52)" fg:x="862" fg:w="1"/><text x="69.8222%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.5722%" y="213" width="0.0807%" height="15" fill="rgb(246,78,51)" fg:x="862" fg:w="1"/><text x="69.8222%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.5722%" y="197" width="0.0807%" height="15" fill="rgb(211,17,15)" fg:x="862" fg:w="1"/><text x="69.8222%" y="207.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.5722%" y="181" width="0.0807%" height="15" fill="rgb(209,59,46)" fg:x="862" fg:w="1"/><text x="69.8222%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.7337%" y="197" width="0.0807%" height="15" fill="rgb(210,92,25)" fg:x="864" fg:w="1"/><text x="69.9837%" y="207.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="69.7337%" y="181" width="0.0807%" height="15" fill="rgb(238,174,52)" fg:x="864" fg:w="1"/><text x="69.9837%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.7337%" y="229" width="0.1614%" height="15" fill="rgb(230,73,7)" fg:x="864" fg:w="2"/><text x="69.9837%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.7337%" y="213" width="0.1614%" height="15" fill="rgb(243,124,40)" fg:x="864" fg:w="2"/><text x="69.9837%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.8144%" y="197" width="0.0807%" height="15" fill="rgb(244,170,11)" fg:x="865" fg:w="1"/><text x="70.0644%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.8144%" y="181" width="0.0807%" height="15" fill="rgb(207,114,54)" fg:x="865" fg:w="1"/><text x="70.0644%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="69.6529%" y="261" width="0.3228%" height="15" fill="rgb(205,42,20)" fg:x="863" fg:w="4"/><text x="69.9029%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="69.6529%" y="245" width="0.3228%" height="15" fill="rgb(230,30,28)" fg:x="863" fg:w="4"/><text x="69.9029%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.8951%" y="229" width="0.0807%" height="15" fill="rgb(205,73,54)" fg:x="866" fg:w="1"/><text x="70.1451%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="69.8951%" y="213" width="0.0807%" height="15" fill="rgb(254,227,23)" fg:x="866" fg:w="1"/><text x="70.1451%" y="223.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.89%)</title><rect x="69.1687%" y="389" width="0.8878%" height="15" fill="rgb(228,202,34)" fg:x="857" fg:w="11"/><text x="69.4187%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.89%)</title><rect x="69.1687%" y="373" width="0.8878%" height="15" fill="rgb(222,225,37)" fg:x="857" fg:w="11"/><text x="69.4187%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.89%)</title><rect x="69.1687%" y="357" width="0.8878%" height="15" fill="rgb(221,14,54)" fg:x="857" fg:w="11"/><text x="69.4187%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.89%)</title><rect x="69.1687%" y="341" width="0.8878%" height="15" fill="rgb(254,102,2)" fg:x="857" fg:w="11"/><text x="69.4187%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="69.6529%" y="325" width="0.4036%" height="15" fill="rgb(232,104,17)" fg:x="863" fg:w="5"/><text x="69.9029%" y="335.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="69.6529%" y="309" width="0.4036%" height="15" fill="rgb(250,220,14)" fg:x="863" fg:w="5"/><text x="69.9029%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="69.6529%" y="293" width="0.4036%" height="15" fill="rgb(241,158,9)" fg:x="863" fg:w="5"/><text x="69.9029%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="69.6529%" y="277" width="0.4036%" height="15" fill="rgb(246,9,43)" fg:x="863" fg:w="5"/><text x="69.9029%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9758%" y="261" width="0.0807%" height="15" fill="rgb(206,73,33)" fg:x="867" fg:w="1"/><text x="70.2258%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.29%)</title><rect x="68.8458%" y="405" width="1.2914%" height="15" fill="rgb(222,79,8)" fg:x="853" fg:w="16"/><text x="69.0958%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0565%" y="389" width="0.0807%" height="15" fill="rgb(234,8,54)" fg:x="868" fg:w="1"/><text x="70.3065%" y="399.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="70.1372%" y="405" width="0.0807%" height="15" fill="rgb(209,134,38)" fg:x="869" fg:w="1"/><text x="70.3872%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="70.1372%" y="389" width="0.0807%" height="15" fill="rgb(230,127,29)" fg:x="869" fg:w="1"/><text x="70.3872%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="70.1372%" y="373" width="0.0807%" height="15" fill="rgb(242,44,41)" fg:x="869" fg:w="1"/><text x="70.3872%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.2179%" y="405" width="0.0807%" height="15" fill="rgb(222,56,43)" fg:x="870" fg:w="1"/><text x="70.4679%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.2179%" y="389" width="0.0807%" height="15" fill="rgb(238,39,47)" fg:x="870" fg:w="1"/><text x="70.4679%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2179%" y="373" width="0.0807%" height="15" fill="rgb(226,79,43)" fg:x="870" fg:w="1"/><text x="70.4679%" y="383.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (489 samples, 39.47%)</title><rect x="30.9927%" y="437" width="39.4673%" height="15" fill="rgb(242,105,53)" fg:x="384" fg:w="489"/><text x="31.2427%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::..</text></g><g><title>plugins_core::looking::model::new_area_observation (482 samples, 38.90%)</title><rect x="31.5577%" y="421" width="38.9023%" height="15" fill="rgb(251,132,46)" fg:x="391" fg:w="482"/><text x="31.8077%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (2 samples, 0.16%)</title><rect x="70.2986%" y="405" width="0.1614%" height="15" fill="rgb(231,77,14)" fg:x="871" fg:w="2"/><text x="70.5486%" y="415.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="70.2986%" y="389" width="0.1614%" height="15" fill="rgb(240,135,9)" fg:x="871" fg:w="2"/><text x="70.5486%" y="399.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (493 samples, 39.79%)</title><rect x="30.8313%" y="565" width="39.7902%" height="15" fill="rgb(248,109,14)" fg:x="382" fg:w="493"/><text x="31.0813%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (493 samples, 39.79%)</title><rect x="30.8313%" y="549" width="39.7902%" height="15" fill="rgb(227,146,52)" fg:x="382" fg:w="493"/><text x="31.0813%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middle..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (493 samples, 39.79%)</title><rect x="30.8313%" y="533" width="39.7902%" height="15" fill="rgb(232,54,3)" fg:x="382" fg:w="493"/><text x="31.0813%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (492 samples, 39.71%)</title><rect x="30.9120%" y="517" width="39.7094%" height="15" fill="rgb(229,201,43)" fg:x="383" fg:w="492"/><text x="31.1620%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (492 samples, 39.71%)</title><rect x="30.9120%" y="501" width="39.7094%" height="15" fill="rgb(252,161,33)" fg:x="383" fg:w="492"/><text x="31.1620%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (492 samples, 39.71%)</title><rect x="30.9120%" y="485" width="39.7094%" height="15" fill="rgb(226,146,40)" fg:x="383" fg:w="492"/><text x="31.1620%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (492 samples, 39.71%)</title><rect x="30.9120%" y="469" width="39.7094%" height="15" fill="rgb(219,47,25)" fg:x="383" fg:w="492"/><text x="31.1620%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::ca..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (492 samples, 39.71%)</title><rect x="30.9120%" y="453" width="39.7094%" height="15" fill="rgb(250,135,13)" fg:x="383" fg:w="492"/><text x="31.1620%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::pe..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="70.4600%" y="437" width="0.1614%" height="15" fill="rgb(219,229,18)" fg:x="873" fg:w="2"/><text x="70.7100%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="70.4600%" y="421" width="0.1614%" height="15" fill="rgb(217,152,27)" fg:x="873" fg:w="2"/><text x="70.7100%" y="431.50"></text></g><g><title>__rdl_alloc (2 samples, 0.16%)</title><rect x="70.4600%" y="405" width="0.1614%" height="15" fill="rgb(225,71,47)" fg:x="873" fg:w="2"/><text x="70.7100%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.16%)</title><rect x="70.4600%" y="389" width="0.1614%" height="15" fill="rgb(220,139,14)" fg:x="873" fg:w="2"/><text x="70.7100%" y="399.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.7022%" y="549" width="0.1614%" height="15" fill="rgb(247,54,32)" fg:x="876" fg:w="2"/><text x="70.9522%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1057%" y="533" width="0.0807%" height="15" fill="rgb(252,131,39)" fg:x="881" fg:w="1"/><text x="71.3557%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="71.1864%" y="501" width="0.0807%" height="15" fill="rgb(210,108,39)" fg:x="882" fg:w="1"/><text x="71.4364%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.1864%" y="485" width="0.0807%" height="15" fill="rgb(205,23,29)" fg:x="882" fg:w="1"/><text x="71.4364%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="71.1864%" y="517" width="0.2421%" height="15" fill="rgb(246,139,46)" fg:x="882" fg:w="3"/><text x="71.4364%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.2672%" y="501" width="0.1614%" height="15" fill="rgb(250,81,26)" fg:x="883" fg:w="2"/><text x="71.5172%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.2672%" y="485" width="0.1614%" height="15" fill="rgb(214,104,7)" fg:x="883" fg:w="2"/><text x="71.5172%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.3479%" y="469" width="0.0807%" height="15" fill="rgb(233,189,8)" fg:x="884" fg:w="1"/><text x="71.5979%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.3479%" y="453" width="0.0807%" height="15" fill="rgb(228,141,17)" fg:x="884" fg:w="1"/><text x="71.5979%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.3479%" y="437" width="0.0807%" height="15" fill="rgb(247,157,1)" fg:x="884" fg:w="1"/><text x="71.5979%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.3479%" y="421" width="0.0807%" height="15" fill="rgb(249,225,5)" fg:x="884" fg:w="1"/><text x="71.5979%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3479%" y="405" width="0.0807%" height="15" fill="rgb(242,55,13)" fg:x="884" fg:w="1"/><text x="71.5979%" y="415.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (2 samples, 0.16%)</title><rect x="71.5093%" y="469" width="0.1614%" height="15" fill="rgb(230,49,50)" fg:x="886" fg:w="2"/><text x="71.7593%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6707%" y="453" width="0.0807%" height="15" fill="rgb(241,111,38)" fg:x="888" fg:w="1"/><text x="71.9207%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6707%" y="437" width="0.0807%" height="15" fill="rgb(252,155,4)" fg:x="888" fg:w="1"/><text x="71.9207%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6707%" y="421" width="0.0807%" height="15" fill="rgb(212,69,32)" fg:x="888" fg:w="1"/><text x="71.9207%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6707%" y="405" width="0.0807%" height="15" fill="rgb(243,107,47)" fg:x="888" fg:w="1"/><text x="71.9207%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6707%" y="389" width="0.0807%" height="15" fill="rgb(247,130,12)" fg:x="888" fg:w="1"/><text x="71.9207%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6707%" y="373" width="0.0807%" height="15" fill="rgb(233,74,16)" fg:x="888" fg:w="1"/><text x="71.9207%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6707%" y="357" width="0.0807%" height="15" fill="rgb(208,58,18)" fg:x="888" fg:w="1"/><text x="71.9207%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.6707%" y="341" width="0.0807%" height="15" fill="rgb(242,225,1)" fg:x="888" fg:w="1"/><text x="71.9207%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.6707%" y="325" width="0.0807%" height="15" fill="rgb(249,39,40)" fg:x="888" fg:w="1"/><text x="71.9207%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.6707%" y="309" width="0.0807%" height="15" fill="rgb(207,72,44)" fg:x="888" fg:w="1"/><text x="71.9207%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.6707%" y="293" width="0.0807%" height="15" fill="rgb(215,193,12)" fg:x="888" fg:w="1"/><text x="71.9207%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.6707%" y="277" width="0.0807%" height="15" fill="rgb(248,41,39)" fg:x="888" fg:w="1"/><text x="71.9207%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="71.7514%" y="453" width="0.0807%" height="15" fill="rgb(253,85,4)" fg:x="889" fg:w="1"/><text x="72.0014%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7514%" y="437" width="0.0807%" height="15" fill="rgb(243,70,31)" fg:x="889" fg:w="1"/><text x="72.0014%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7514%" y="421" width="0.0807%" height="15" fill="rgb(253,195,26)" fg:x="889" fg:w="1"/><text x="72.0014%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7514%" y="405" width="0.0807%" height="15" fill="rgb(243,42,11)" fg:x="889" fg:w="1"/><text x="72.0014%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7514%" y="389" width="0.0807%" height="15" fill="rgb(239,66,17)" fg:x="889" fg:w="1"/><text x="72.0014%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.9935%" y="357" width="0.0807%" height="15" fill="rgb(217,132,21)" fg:x="892" fg:w="1"/><text x="72.2435%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.9935%" y="341" width="0.0807%" height="15" fill="rgb(252,202,21)" fg:x="892" fg:w="1"/><text x="72.2435%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.9935%" y="325" width="0.0807%" height="15" fill="rgb(233,98,36)" fg:x="892" fg:w="1"/><text x="72.2435%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.9935%" y="309" width="0.0807%" height="15" fill="rgb(216,153,54)" fg:x="892" fg:w="1"/><text x="72.2435%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.9935%" y="293" width="0.0807%" height="15" fill="rgb(250,99,7)" fg:x="892" fg:w="1"/><text x="72.2435%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.9935%" y="277" width="0.0807%" height="15" fill="rgb(207,56,50)" fg:x="892" fg:w="1"/><text x="72.2435%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.9935%" y="261" width="0.0807%" height="15" fill="rgb(244,61,34)" fg:x="892" fg:w="1"/><text x="72.2435%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0743%" y="325" width="0.0807%" height="15" fill="rgb(241,50,38)" fg:x="893" fg:w="1"/><text x="72.3243%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="72.0743%" y="357" width="0.2421%" height="15" fill="rgb(212,166,30)" fg:x="893" fg:w="3"/><text x="72.3243%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.0743%" y="341" width="0.2421%" height="15" fill="rgb(249,127,32)" fg:x="893" fg:w="3"/><text x="72.3243%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="72.1550%" y="325" width="0.1614%" height="15" fill="rgb(209,103,0)" fg:x="894" fg:w="2"/><text x="72.4050%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="72.1550%" y="309" width="0.1614%" height="15" fill="rgb(238,209,51)" fg:x="894" fg:w="2"/><text x="72.4050%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="72.1550%" y="293" width="0.1614%" height="15" fill="rgb(237,56,23)" fg:x="894" fg:w="2"/><text x="72.4050%" y="303.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="71.8321%" y="453" width="0.5650%" height="15" fill="rgb(215,153,46)" fg:x="890" fg:w="7"/><text x="72.0821%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="71.8321%" y="437" width="0.5650%" height="15" fill="rgb(224,49,31)" fg:x="890" fg:w="7"/><text x="72.0821%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="71.8321%" y="421" width="0.5650%" height="15" fill="rgb(250,18,42)" fg:x="890" fg:w="7"/><text x="72.0821%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="71.9935%" y="405" width="0.4036%" height="15" fill="rgb(215,176,39)" fg:x="892" fg:w="5"/><text x="72.2435%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="71.9935%" y="389" width="0.4036%" height="15" fill="rgb(223,77,29)" fg:x="892" fg:w="5"/><text x="72.2435%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="71.9935%" y="373" width="0.4036%" height="15" fill="rgb(234,94,52)" fg:x="892" fg:w="5"/><text x="72.2435%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3164%" y="357" width="0.0807%" height="15" fill="rgb(220,154,50)" fg:x="896" fg:w="1"/><text x="72.5664%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.3164%" y="341" width="0.0807%" height="15" fill="rgb(212,11,10)" fg:x="896" fg:w="1"/><text x="72.5664%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.3164%" y="325" width="0.0807%" height="15" fill="rgb(205,166,19)" fg:x="896" fg:w="1"/><text x="72.5664%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3164%" y="309" width="0.0807%" height="15" fill="rgb(244,198,16)" fg:x="896" fg:w="1"/><text x="72.5664%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.3164%" y="293" width="0.0807%" height="15" fill="rgb(219,69,12)" fg:x="896" fg:w="1"/><text x="72.5664%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.3164%" y="277" width="0.0807%" height="15" fill="rgb(245,30,7)" fg:x="896" fg:w="1"/><text x="72.5664%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.3164%" y="261" width="0.0807%" height="15" fill="rgb(218,221,48)" fg:x="896" fg:w="1"/><text x="72.5664%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.4778%" y="389" width="0.0807%" height="15" fill="rgb(216,66,15)" fg:x="898" fg:w="1"/><text x="72.7278%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.4778%" y="373" width="0.0807%" height="15" fill="rgb(226,122,50)" fg:x="898" fg:w="1"/><text x="72.7278%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.4778%" y="357" width="0.0807%" height="15" fill="rgb(239,156,16)" fg:x="898" fg:w="1"/><text x="72.7278%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.4778%" y="341" width="0.0807%" height="15" fill="rgb(224,27,38)" fg:x="898" fg:w="1"/><text x="72.7278%" y="351.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (15 samples, 1.21%)</title><rect x="71.4286%" y="501" width="1.2107%" height="15" fill="rgb(224,39,27)" fg:x="885" fg:w="15"/><text x="71.6786%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.21%)</title><rect x="71.4286%" y="485" width="1.2107%" height="15" fill="rgb(215,92,29)" fg:x="885" fg:w="15"/><text x="71.6786%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.97%)</title><rect x="71.6707%" y="469" width="0.9685%" height="15" fill="rgb(207,159,16)" fg:x="888" fg:w="12"/><text x="71.9207%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="72.3971%" y="453" width="0.2421%" height="15" fill="rgb(238,163,47)" fg:x="897" fg:w="3"/><text x="72.6471%" y="463.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="72.3971%" y="437" width="0.2421%" height="15" fill="rgb(219,91,49)" fg:x="897" fg:w="3"/><text x="72.6471%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.3971%" y="421" width="0.2421%" height="15" fill="rgb(227,167,31)" fg:x="897" fg:w="3"/><text x="72.6471%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.3971%" y="405" width="0.2421%" height="15" fill="rgb(234,80,54)" fg:x="897" fg:w="3"/><text x="72.6471%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.5585%" y="389" width="0.0807%" height="15" fill="rgb(212,114,2)" fg:x="899" fg:w="1"/><text x="72.8085%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5585%" y="373" width="0.0807%" height="15" fill="rgb(234,50,24)" fg:x="899" fg:w="1"/><text x="72.8085%" y="383.50"></text></g><g><title>plugins_core::tools::contained_by (19 samples, 1.53%)</title><rect x="71.1864%" y="533" width="1.5335%" height="15" fill="rgb(221,68,8)" fg:x="882" fg:w="19"/><text x="71.4364%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (16 samples, 1.29%)</title><rect x="71.4286%" y="517" width="1.2914%" height="15" fill="rgb(254,180,31)" fg:x="885" fg:w="16"/><text x="71.6786%" y="527.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="72.6392%" y="501" width="0.0807%" height="15" fill="rgb(247,130,50)" fg:x="900" fg:w="1"/><text x="72.8892%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8006%" y="437" width="0.0807%" height="15" fill="rgb(211,109,4)" fg:x="902" fg:w="1"/><text x="73.0506%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.7199%" y="453" width="0.2421%" height="15" fill="rgb(238,50,21)" fg:x="901" fg:w="3"/><text x="72.9699%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8814%" y="437" width="0.0807%" height="15" fill="rgb(225,57,45)" fg:x="903" fg:w="1"/><text x="73.1314%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="72.7199%" y="501" width="0.3228%" height="15" fill="rgb(209,196,50)" fg:x="901" fg:w="4"/><text x="72.9699%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="72.7199%" y="485" width="0.3228%" height="15" fill="rgb(242,140,13)" fg:x="901" fg:w="4"/><text x="72.9699%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="72.7199%" y="469" width="0.3228%" height="15" fill="rgb(217,111,7)" fg:x="901" fg:w="4"/><text x="72.9699%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.9621%" y="453" width="0.0807%" height="15" fill="rgb(253,193,51)" fg:x="904" fg:w="1"/><text x="73.2121%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1235%" y="421" width="0.0807%" height="15" fill="rgb(252,70,29)" fg:x="906" fg:w="1"/><text x="73.3735%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="72.7199%" y="517" width="0.5650%" height="15" fill="rgb(232,127,12)" fg:x="901" fg:w="7"/><text x="72.9699%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="73.0428%" y="501" width="0.2421%" height="15" fill="rgb(211,180,21)" fg:x="905" fg:w="3"/><text x="73.2928%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.0428%" y="485" width="0.2421%" height="15" fill="rgb(229,72,13)" fg:x="905" fg:w="3"/><text x="73.2928%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="73.0428%" y="469" width="0.2421%" height="15" fill="rgb(240,211,49)" fg:x="905" fg:w="3"/><text x="73.2928%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="73.0428%" y="453" width="0.2421%" height="15" fill="rgb(219,149,40)" fg:x="905" fg:w="3"/><text x="73.2928%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="73.0428%" y="437" width="0.2421%" height="15" fill="rgb(210,127,46)" fg:x="905" fg:w="3"/><text x="73.2928%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2042%" y="421" width="0.0807%" height="15" fill="rgb(220,106,7)" fg:x="907" fg:w="1"/><text x="73.4542%" y="431.50"></text></g><g><title>plugins_core::tools::occupied_by (9 samples, 0.73%)</title><rect x="72.7199%" y="533" width="0.7264%" height="15" fill="rgb(249,31,22)" fg:x="901" fg:w="9"/><text x="72.9699%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (2 samples, 0.16%)</title><rect x="73.2849%" y="517" width="0.1614%" height="15" fill="rgb(253,1,49)" fg:x="908" fg:w="2"/><text x="73.5349%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (2 samples, 0.16%)</title><rect x="73.2849%" y="501" width="0.1614%" height="15" fill="rgb(227,144,33)" fg:x="908" fg:w="2"/><text x="73.5349%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="73.2849%" y="485" width="0.1614%" height="15" fill="rgb(249,163,44)" fg:x="908" fg:w="2"/><text x="73.5349%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="73.4463%" y="501" width="0.0807%" height="15" fill="rgb(234,15,39)" fg:x="910" fg:w="1"/><text x="73.6963%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.4463%" y="485" width="0.0807%" height="15" fill="rgb(207,66,16)" fg:x="910" fg:w="1"/><text x="73.6963%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.4463%" y="469" width="0.0807%" height="15" fill="rgb(233,112,24)" fg:x="910" fg:w="1"/><text x="73.6963%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5270%" y="501" width="0.0807%" height="15" fill="rgb(230,90,22)" fg:x="911" fg:w="1"/><text x="73.7770%" y="511.50"></text></g><g><title>engine::session::Session::captured (555 samples, 44.79%)</title><rect x="28.8943%" y="709" width="44.7942%" height="15" fill="rgb(229,61,13)" fg:x="358" fg:w="555"/><text x="29.1443%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (554 samples, 44.71%)</title><rect x="28.9750%" y="693" width="44.7135%" height="15" fill="rgb(225,57,24)" fg:x="359" fg:w="554"/><text x="29.2250%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (552 samples, 44.55%)</title><rect x="29.1364%" y="677" width="44.5521%" height="15" fill="rgb(208,169,48)" fg:x="361" fg:w="552"/><text x="29.3864%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (551 samples, 44.47%)</title><rect x="29.2171%" y="661" width="44.4713%" height="15" fill="rgb(244,218,51)" fg:x="362" fg:w="551"/><text x="29.4671%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (550 samples, 44.39%)</title><rect x="29.2978%" y="645" width="44.3906%" height="15" fill="rgb(214,148,10)" fg:x="363" fg:w="550"/><text x="29.5478%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (550 samples, 44.39%)</title><rect x="29.2978%" y="629" width="44.3906%" height="15" fill="rgb(225,174,27)" fg:x="363" fg:w="550"/><text x="29.5478%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (550 samples, 44.39%)</title><rect x="29.2978%" y="613" width="44.3906%" height="15" fill="rgb(230,96,26)" fg:x="363" fg:w="550"/><text x="29.5478%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Mi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (531 samples, 42.86%)</title><rect x="30.8313%" y="597" width="42.8571%" height="15" fill="rgb(232,10,30)" fg:x="382" fg:w="531"/><text x="31.0813%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (531 samples, 42.86%)</title><rect x="30.8313%" y="581" width="42.8571%" height="15" fill="rgb(222,8,50)" fg:x="382" fg:w="531"/><text x="31.0813%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::han..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (38 samples, 3.07%)</title><rect x="70.6215%" y="565" width="3.0670%" height="15" fill="rgb(213,81,27)" fg:x="875" fg:w="38"/><text x="70.8715%" y="575.50">plu..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (35 samples, 2.82%)</title><rect x="70.8636%" y="549" width="2.8249%" height="15" fill="rgb(245,50,10)" fg:x="878" fg:w="35"/><text x="71.1136%" y="559.50">pl..</text></g><g><title>plugins_core::tools::worn_by (3 samples, 0.24%)</title><rect x="73.4463%" y="533" width="0.2421%" height="15" fill="rgb(216,100,18)" fg:x="910" fg:w="3"/><text x="73.6963%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="73.4463%" y="517" width="0.2421%" height="15" fill="rgb(236,147,54)" fg:x="910" fg:w="3"/><text x="73.6963%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.6077%" y="501" width="0.0807%" height="15" fill="rgb(205,143,26)" fg:x="912" fg:w="1"/><text x="73.8577%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6077%" y="485" width="0.0807%" height="15" fill="rgb(236,26,9)" fg:x="912" fg:w="1"/><text x="73.8577%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.6885%" y="597" width="0.0807%" height="15" fill="rgb(221,165,53)" fg:x="913" fg:w="1"/><text x="73.9385%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6885%" y="581" width="0.0807%" height="15" fill="rgb(214,110,17)" fg:x="913" fg:w="1"/><text x="73.9385%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.6885%" y="613" width="0.1614%" height="15" fill="rgb(237,197,12)" fg:x="913" fg:w="2"/><text x="73.9385%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.7692%" y="597" width="0.0807%" height="15" fill="rgb(205,84,17)" fg:x="914" fg:w="1"/><text x="74.0192%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.7692%" y="581" width="0.0807%" height="15" fill="rgb(237,18,45)" fg:x="914" fg:w="1"/><text x="74.0192%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.7692%" y="565" width="0.0807%" height="15" fill="rgb(221,87,14)" fg:x="914" fg:w="1"/><text x="74.0192%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.7692%" y="549" width="0.0807%" height="15" fill="rgb(238,186,15)" fg:x="914" fg:w="1"/><text x="74.0192%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.7692%" y="533" width="0.0807%" height="15" fill="rgb(208,115,11)" fg:x="914" fg:w="1"/><text x="74.0192%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.7692%" y="517" width="0.0807%" height="15" fill="rgb(254,175,0)" fg:x="914" fg:w="1"/><text x="74.0192%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.7692%" y="501" width="0.0807%" height="15" fill="rgb(227,24,42)" fg:x="914" fg:w="1"/><text x="74.0192%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.7692%" y="485" width="0.0807%" height="15" fill="rgb(223,211,37)" fg:x="914" fg:w="1"/><text x="74.0192%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.7692%" y="469" width="0.0807%" height="15" fill="rgb(235,49,27)" fg:x="914" fg:w="1"/><text x="74.0192%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.7692%" y="453" width="0.0807%" height="15" fill="rgb(254,97,51)" fg:x="914" fg:w="1"/><text x="74.0192%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.7692%" y="437" width="0.0807%" height="15" fill="rgb(249,51,40)" fg:x="914" fg:w="1"/><text x="74.0192%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7692%" y="421" width="0.0807%" height="15" fill="rgb(210,128,45)" fg:x="914" fg:w="1"/><text x="74.0192%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="73.6885%" y="645" width="0.2421%" height="15" fill="rgb(224,137,50)" fg:x="913" fg:w="3"/><text x="73.9385%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="73.6885%" y="629" width="0.2421%" height="15" fill="rgb(242,15,9)" fg:x="913" fg:w="3"/><text x="73.9385%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.8499%" y="613" width="0.0807%" height="15" fill="rgb(233,187,41)" fg:x="915" fg:w="1"/><text x="74.0999%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.8499%" y="597" width="0.0807%" height="15" fill="rgb(227,2,29)" fg:x="915" fg:w="1"/><text x="74.0999%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="73.6885%" y="661" width="0.3228%" height="15" fill="rgb(222,70,3)" fg:x="913" fg:w="4"/><text x="73.9385%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9306%" y="645" width="0.0807%" height="15" fill="rgb(213,11,42)" fg:x="916" fg:w="1"/><text x="74.1806%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9306%" y="629" width="0.0807%" height="15" fill="rgb(225,150,9)" fg:x="916" fg:w="1"/><text x="74.1806%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.9306%" y="613" width="0.0807%" height="15" fill="rgb(230,162,45)" fg:x="916" fg:w="1"/><text x="74.1806%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.9306%" y="597" width="0.0807%" height="15" fill="rgb(222,14,52)" fg:x="916" fg:w="1"/><text x="74.1806%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.9306%" y="581" width="0.0807%" height="15" fill="rgb(254,198,14)" fg:x="916" fg:w="1"/><text x="74.1806%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9306%" y="565" width="0.0807%" height="15" fill="rgb(220,217,30)" fg:x="916" fg:w="1"/><text x="74.1806%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9306%" y="549" width="0.0807%" height="15" fill="rgb(215,146,41)" fg:x="916" fg:w="1"/><text x="74.1806%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.9306%" y="533" width="0.0807%" height="15" fill="rgb(217,27,36)" fg:x="916" fg:w="1"/><text x="74.1806%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.9306%" y="517" width="0.0807%" height="15" fill="rgb(219,218,39)" fg:x="916" fg:w="1"/><text x="74.1806%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.9306%" y="501" width="0.0807%" height="15" fill="rgb(219,4,42)" fg:x="916" fg:w="1"/><text x="74.1806%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.9306%" y="485" width="0.0807%" height="15" fill="rgb(249,119,36)" fg:x="916" fg:w="1"/><text x="74.1806%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9306%" y="469" width="0.0807%" height="15" fill="rgb(209,23,33)" fg:x="916" fg:w="1"/><text x="74.1806%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0113%" y="581" width="0.0807%" height="15" fill="rgb(211,10,0)" fg:x="917" fg:w="1"/><text x="74.2613%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0113%" y="565" width="0.0807%" height="15" fill="rgb(208,99,37)" fg:x="917" fg:w="1"/><text x="74.2613%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0113%" y="549" width="0.0807%" height="15" fill="rgb(213,132,31)" fg:x="917" fg:w="1"/><text x="74.2613%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.0113%" y="613" width="0.1614%" height="15" fill="rgb(243,129,40)" fg:x="917" fg:w="2"/><text x="74.2613%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.0113%" y="597" width="0.1614%" height="15" fill="rgb(210,66,33)" fg:x="917" fg:w="2"/><text x="74.2613%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0920%" y="581" width="0.0807%" height="15" fill="rgb(209,189,4)" fg:x="918" fg:w="1"/><text x="74.3420%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0920%" y="565" width="0.0807%" height="15" fill="rgb(214,107,37)" fg:x="918" fg:w="1"/><text x="74.3420%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1727%" y="565" width="0.0807%" height="15" fill="rgb(245,88,54)" fg:x="919" fg:w="1"/><text x="74.4227%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1727%" y="549" width="0.0807%" height="15" fill="rgb(205,146,20)" fg:x="919" fg:w="1"/><text x="74.4227%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1727%" y="533" width="0.0807%" height="15" fill="rgb(220,161,25)" fg:x="919" fg:w="1"/><text x="74.4227%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.1727%" y="517" width="0.0807%" height="15" fill="rgb(215,152,15)" fg:x="919" fg:w="1"/><text x="74.4227%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.1727%" y="501" width="0.0807%" height="15" fill="rgb(233,192,44)" fg:x="919" fg:w="1"/><text x="74.4227%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.1727%" y="485" width="0.0807%" height="15" fill="rgb(240,170,46)" fg:x="919" fg:w="1"/><text x="74.4227%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.1727%" y="469" width="0.0807%" height="15" fill="rgb(207,104,33)" fg:x="919" fg:w="1"/><text x="74.4227%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.1727%" y="453" width="0.0807%" height="15" fill="rgb(219,21,39)" fg:x="919" fg:w="1"/><text x="74.4227%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.1727%" y="437" width="0.0807%" height="15" fill="rgb(214,133,29)" fg:x="919" fg:w="1"/><text x="74.4227%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.1727%" y="421" width="0.0807%" height="15" fill="rgb(226,93,6)" fg:x="919" fg:w="1"/><text x="74.4227%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.1727%" y="405" width="0.0807%" height="15" fill="rgb(252,222,34)" fg:x="919" fg:w="1"/><text x="74.4227%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.1727%" y="389" width="0.0807%" height="15" fill="rgb(252,92,48)" fg:x="919" fg:w="1"/><text x="74.4227%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.1727%" y="373" width="0.0807%" height="15" fill="rgb(245,223,24)" fg:x="919" fg:w="1"/><text x="74.4227%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.1727%" y="357" width="0.0807%" height="15" fill="rgb(205,176,3)" fg:x="919" fg:w="1"/><text x="74.4227%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1727%" y="341" width="0.0807%" height="15" fill="rgb(235,151,15)" fg:x="919" fg:w="1"/><text x="74.4227%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="74.1727%" y="613" width="0.1614%" height="15" fill="rgb(237,209,11)" fg:x="919" fg:w="2"/><text x="74.4227%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="74.1727%" y="597" width="0.1614%" height="15" fill="rgb(243,227,24)" fg:x="919" fg:w="2"/><text x="74.4227%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="74.1727%" y="581" width="0.1614%" height="15" fill="rgb(239,193,16)" fg:x="919" fg:w="2"/><text x="74.4227%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.2534%" y="565" width="0.0807%" height="15" fill="rgb(231,27,9)" fg:x="920" fg:w="1"/><text x="74.5034%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.3341%" y="581" width="0.1614%" height="15" fill="rgb(219,169,10)" fg:x="921" fg:w="2"/><text x="74.5841%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="74.3341%" y="565" width="0.1614%" height="15" fill="rgb(244,229,43)" fg:x="921" fg:w="2"/><text x="74.5841%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="74.3341%" y="549" width="0.1614%" height="15" fill="rgb(254,38,20)" fg:x="921" fg:w="2"/><text x="74.5841%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="74.0113%" y="661" width="0.5650%" height="15" fill="rgb(250,47,30)" fg:x="917" fg:w="7"/><text x="74.2613%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="74.0113%" y="645" width="0.5650%" height="15" fill="rgb(224,124,36)" fg:x="917" fg:w="7"/><text x="74.2613%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="74.0113%" y="629" width="0.5650%" height="15" fill="rgb(246,68,51)" fg:x="917" fg:w="7"/><text x="74.2613%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="74.3341%" y="613" width="0.2421%" height="15" fill="rgb(253,43,49)" fg:x="921" fg:w="3"/><text x="74.5841%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="74.3341%" y="597" width="0.2421%" height="15" fill="rgb(219,54,36)" fg:x="921" fg:w="3"/><text x="74.5841%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.4956%" y="581" width="0.0807%" height="15" fill="rgb(227,133,34)" fg:x="923" fg:w="1"/><text x="74.7456%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.5763%" y="629" width="0.0807%" height="15" fill="rgb(247,227,15)" fg:x="924" fg:w="1"/><text x="74.8263%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.5763%" y="613" width="0.0807%" height="15" fill="rgb(229,96,14)" fg:x="924" fg:w="1"/><text x="74.8263%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5763%" y="597" width="0.0807%" height="15" fill="rgb(220,79,17)" fg:x="924" fg:w="1"/><text x="74.8263%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5763%" y="581" width="0.0807%" height="15" fill="rgb(205,131,53)" fg:x="924" fg:w="1"/><text x="74.8263%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="74.5763%" y="565" width="0.0807%" height="15" fill="rgb(209,50,29)" fg:x="924" fg:w="1"/><text x="74.8263%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.5763%" y="549" width="0.0807%" height="15" fill="rgb(245,86,46)" fg:x="924" fg:w="1"/><text x="74.8263%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.5763%" y="533" width="0.0807%" height="15" fill="rgb(235,66,46)" fg:x="924" fg:w="1"/><text x="74.8263%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5763%" y="517" width="0.0807%" height="15" fill="rgb(232,148,31)" fg:x="924" fg:w="1"/><text x="74.8263%" y="527.50"></text></g><g><title>engine::session::internal::Added::find_refs (13 samples, 1.05%)</title><rect x="73.6885%" y="693" width="1.0492%" height="15" fill="rgb(217,149,8)" fg:x="913" fg:w="13"/><text x="73.9385%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (13 samples, 1.05%)</title><rect x="73.6885%" y="677" width="1.0492%" height="15" fill="rgb(209,183,11)" fg:x="913" fg:w="13"/><text x="73.9385%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.5763%" y="661" width="0.1614%" height="15" fill="rgb(208,55,20)" fg:x="924" fg:w="2"/><text x="74.8263%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.5763%" y="645" width="0.1614%" height="15" fill="rgb(218,39,14)" fg:x="924" fg:w="2"/><text x="74.8263%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6570%" y="629" width="0.0807%" height="15" fill="rgb(216,169,33)" fg:x="925" fg:w="1"/><text x="74.9070%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7377%" y="677" width="0.0807%" height="15" fill="rgb(233,80,24)" fg:x="926" fg:w="1"/><text x="74.9877%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7377%" y="661" width="0.0807%" height="15" fill="rgb(213,179,31)" fg:x="926" fg:w="1"/><text x="74.9877%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7377%" y="645" width="0.0807%" height="15" fill="rgb(209,19,5)" fg:x="926" fg:w="1"/><text x="74.9877%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7377%" y="629" width="0.0807%" height="15" fill="rgb(219,18,35)" fg:x="926" fg:w="1"/><text x="74.9877%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7377%" y="613" width="0.0807%" height="15" fill="rgb(209,169,16)" fg:x="926" fg:w="1"/><text x="74.9877%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7377%" y="597" width="0.0807%" height="15" fill="rgb(245,90,51)" fg:x="926" fg:w="1"/><text x="74.9877%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.7377%" y="581" width="0.0807%" height="15" fill="rgb(220,99,45)" fg:x="926" fg:w="1"/><text x="74.9877%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.7377%" y="565" width="0.0807%" height="15" fill="rgb(249,89,25)" fg:x="926" fg:w="1"/><text x="74.9877%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.7377%" y="549" width="0.0807%" height="15" fill="rgb(239,193,0)" fg:x="926" fg:w="1"/><text x="74.9877%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="74.7377%" y="533" width="0.0807%" height="15" fill="rgb(231,126,1)" fg:x="926" fg:w="1"/><text x="74.9877%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.7377%" y="517" width="0.0807%" height="15" fill="rgb(243,166,3)" fg:x="926" fg:w="1"/><text x="74.9877%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.8991%" y="549" width="0.0807%" height="15" fill="rgb(223,22,34)" fg:x="928" fg:w="1"/><text x="75.1491%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.8991%" y="533" width="0.0807%" height="15" fill="rgb(251,52,51)" fg:x="928" fg:w="1"/><text x="75.1491%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8991%" y="517" width="0.0807%" height="15" fill="rgb(221,165,28)" fg:x="928" fg:w="1"/><text x="75.1491%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.8991%" y="581" width="0.1614%" height="15" fill="rgb(218,121,47)" fg:x="928" fg:w="2"/><text x="75.1491%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.8991%" y="565" width="0.1614%" height="15" fill="rgb(209,120,9)" fg:x="928" fg:w="2"/><text x="75.1491%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="74.9798%" y="549" width="0.0807%" height="15" fill="rgb(236,68,12)" fg:x="929" fg:w="1"/><text x="75.2298%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.9798%" y="533" width="0.0807%" height="15" fill="rgb(225,194,26)" fg:x="929" fg:w="1"/><text x="75.2298%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="74.8184%" y="677" width="0.3228%" height="15" fill="rgb(231,84,39)" fg:x="927" fg:w="4"/><text x="75.0684%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="74.8184%" y="661" width="0.3228%" height="15" fill="rgb(210,11,45)" fg:x="927" fg:w="4"/><text x="75.0684%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="74.8184%" y="645" width="0.3228%" height="15" fill="rgb(224,54,52)" fg:x="927" fg:w="4"/><text x="75.0684%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="74.8184%" y="629" width="0.3228%" height="15" fill="rgb(238,102,14)" fg:x="927" fg:w="4"/><text x="75.0684%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="74.8184%" y="613" width="0.3228%" height="15" fill="rgb(243,160,52)" fg:x="927" fg:w="4"/><text x="75.0684%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="74.8184%" y="597" width="0.3228%" height="15" fill="rgb(216,114,19)" fg:x="927" fg:w="4"/><text x="75.0684%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.0605%" y="581" width="0.0807%" height="15" fill="rgb(244,166,37)" fg:x="930" fg:w="1"/><text x="75.3105%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.0605%" y="565" width="0.0807%" height="15" fill="rgb(246,29,44)" fg:x="930" fg:w="1"/><text x="75.3105%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.0605%" y="549" width="0.0807%" height="15" fill="rgb(215,56,53)" fg:x="930" fg:w="1"/><text x="75.3105%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.0605%" y="533" width="0.0807%" height="15" fill="rgb(217,60,2)" fg:x="930" fg:w="1"/><text x="75.3105%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0605%" y="517" width="0.0807%" height="15" fill="rgb(207,26,24)" fg:x="930" fg:w="1"/><text x="75.3105%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.2220%" y="613" width="0.1614%" height="15" fill="rgb(252,210,15)" fg:x="932" fg:w="2"/><text x="75.4720%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.2220%" y="597" width="0.1614%" height="15" fill="rgb(253,209,26)" fg:x="932" fg:w="2"/><text x="75.4720%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.2220%" y="581" width="0.1614%" height="15" fill="rgb(238,170,14)" fg:x="932" fg:w="2"/><text x="75.4720%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.2220%" y="565" width="0.1614%" height="15" fill="rgb(216,178,15)" fg:x="932" fg:w="2"/><text x="75.4720%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3027%" y="549" width="0.0807%" height="15" fill="rgb(250,197,2)" fg:x="933" fg:w="1"/><text x="75.5527%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3027%" y="533" width="0.0807%" height="15" fill="rgb(212,70,42)" fg:x="933" fg:w="1"/><text x="75.5527%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3027%" y="517" width="0.0807%" height="15" fill="rgb(227,213,9)" fg:x="933" fg:w="1"/><text x="75.5527%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.3027%" y="501" width="0.0807%" height="15" fill="rgb(245,99,25)" fg:x="933" fg:w="1"/><text x="75.5527%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.3027%" y="485" width="0.0807%" height="15" fill="rgb(250,82,29)" fg:x="933" fg:w="1"/><text x="75.5527%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (22 samples, 1.78%)</title><rect x="73.6885%" y="709" width="1.7756%" height="15" fill="rgb(241,226,54)" fg:x="913" fg:w="22"/><text x="73.9385%" y="719.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.73%)</title><rect x="74.7377%" y="693" width="0.7264%" height="15" fill="rgb(221,99,41)" fg:x="926" fg:w="9"/><text x="74.9877%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="75.1412%" y="677" width="0.3228%" height="15" fill="rgb(213,90,21)" fg:x="931" fg:w="4"/><text x="75.3912%" y="687.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="75.1412%" y="661" width="0.3228%" height="15" fill="rgb(205,208,24)" fg:x="931" fg:w="4"/><text x="75.3912%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="75.1412%" y="645" width="0.3228%" height="15" fill="rgb(246,31,12)" fg:x="931" fg:w="4"/><text x="75.3912%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="75.1412%" y="629" width="0.3228%" height="15" fill="rgb(213,154,6)" fg:x="931" fg:w="4"/><text x="75.3912%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.3834%" y="613" width="0.0807%" height="15" fill="rgb(222,163,29)" fg:x="934" fg:w="1"/><text x="75.6334%" y="623.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.3834%" y="597" width="0.0807%" height="15" fill="rgb(227,201,8)" fg:x="934" fg:w="1"/><text x="75.6334%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4641%" y="581" width="0.0807%" height="15" fill="rgb(233,9,32)" fg:x="935" fg:w="1"/><text x="75.7141%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.4641%" y="565" width="0.0807%" height="15" fill="rgb(217,54,24)" fg:x="935" fg:w="1"/><text x="75.7141%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="75.4641%" y="661" width="0.1614%" height="15" fill="rgb(235,192,0)" fg:x="935" fg:w="2"/><text x="75.7141%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.4641%" y="645" width="0.1614%" height="15" fill="rgb(235,45,9)" fg:x="935" fg:w="2"/><text x="75.7141%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.4641%" y="629" width="0.1614%" height="15" fill="rgb(246,42,40)" fg:x="935" fg:w="2"/><text x="75.7141%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="75.4641%" y="613" width="0.1614%" height="15" fill="rgb(248,111,24)" fg:x="935" fg:w="2"/><text x="75.7141%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.4641%" y="597" width="0.1614%" height="15" fill="rgb(249,65,22)" fg:x="935" fg:w="2"/><text x="75.7141%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.5448%" y="581" width="0.0807%" height="15" fill="rgb(238,111,51)" fg:x="936" fg:w="1"/><text x="75.7948%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.5448%" y="565" width="0.0807%" height="15" fill="rgb(250,118,22)" fg:x="936" fg:w="1"/><text x="75.7948%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5448%" y="549" width="0.0807%" height="15" fill="rgb(234,84,26)" fg:x="936" fg:w="1"/><text x="75.7948%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="75.6255%" y="613" width="0.0807%" height="15" fill="rgb(243,172,12)" fg:x="937" fg:w="1"/><text x="75.8755%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7062%" y="581" width="0.0807%" height="15" fill="rgb(236,150,49)" fg:x="938" fg:w="1"/><text x="75.9562%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="75.6255%" y="661" width="0.3228%" height="15" fill="rgb(225,197,26)" fg:x="937" fg:w="4"/><text x="75.8755%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="75.6255%" y="645" width="0.3228%" height="15" fill="rgb(214,17,42)" fg:x="937" fg:w="4"/><text x="75.8755%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="75.6255%" y="629" width="0.3228%" height="15" fill="rgb(224,165,40)" fg:x="937" fg:w="4"/><text x="75.8755%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="75.7062%" y="613" width="0.2421%" height="15" fill="rgb(246,100,4)" fg:x="938" fg:w="3"/><text x="75.9562%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.7062%" y="597" width="0.2421%" height="15" fill="rgb(222,103,0)" fg:x="938" fg:w="3"/><text x="75.9562%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.7869%" y="581" width="0.1614%" height="15" fill="rgb(227,189,26)" fg:x="939" fg:w="2"/><text x="76.0369%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.7869%" y="565" width="0.1614%" height="15" fill="rgb(214,202,17)" fg:x="939" fg:w="2"/><text x="76.0369%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.8676%" y="549" width="0.0807%" height="15" fill="rgb(229,111,3)" fg:x="940" fg:w="1"/><text x="76.1176%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.8676%" y="533" width="0.0807%" height="15" fill="rgb(229,172,15)" fg:x="940" fg:w="1"/><text x="76.1176%" y="543.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="75.9483%" y="661" width="0.0807%" height="15" fill="rgb(230,224,35)" fg:x="941" fg:w="1"/><text x="76.1983%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.9483%" y="645" width="0.0807%" height="15" fill="rgb(251,141,6)" fg:x="941" fg:w="1"/><text x="76.1983%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="75.9483%" y="629" width="0.0807%" height="15" fill="rgb(225,208,6)" fg:x="941" fg:w="1"/><text x="76.1983%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.0291%" y="501" width="0.0807%" height="15" fill="rgb(246,181,16)" fg:x="942" fg:w="1"/><text x="76.2791%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="76.0291%" y="485" width="0.0807%" height="15" fill="rgb(227,129,36)" fg:x="942" fg:w="1"/><text x="76.2791%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.0291%" y="533" width="0.1614%" height="15" fill="rgb(248,117,24)" fg:x="942" fg:w="2"/><text x="76.2791%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.0291%" y="517" width="0.1614%" height="15" fill="rgb(214,185,35)" fg:x="942" fg:w="2"/><text x="76.2791%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1098%" y="501" width="0.0807%" height="15" fill="rgb(236,150,34)" fg:x="943" fg:w="1"/><text x="76.3598%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (945 samples, 76.27%)</title><rect x="0.0000%" y="789" width="76.2712%" height="15" fill="rgb(243,228,27)" fg:x="0" fg:w="945"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (945 samples, 76.27%)</title><rect x="0.0000%" y="773" width="76.2712%" height="15" fill="rgb(245,77,44)" fg:x="0" fg:w="945"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (945 samples, 76.27%)</title><rect x="0.0000%" y="757" width="76.2712%" height="15" fill="rgb(235,214,42)" fg:x="0" fg:w="945"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (591 samples, 47.70%)</title><rect x="28.5714%" y="741" width="47.6998%" height="15" fill="rgb(221,74,3)" fg:x="354" fg:w="591"/><text x="28.8214%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (591 samples, 47.70%)</title><rect x="28.5714%" y="725" width="47.6998%" height="15" fill="rgb(206,121,29)" fg:x="354" fg:w="591"/><text x="28.8214%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (10 samples, 0.81%)</title><rect x="75.4641%" y="709" width="0.8071%" height="15" fill="rgb(249,131,53)" fg:x="935" fg:w="10"/><text x="75.7141%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.81%)</title><rect x="75.4641%" y="693" width="0.8071%" height="15" fill="rgb(236,170,29)" fg:x="935" fg:w="10"/><text x="75.7141%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.81%)</title><rect x="75.4641%" y="677" width="0.8071%" height="15" fill="rgb(247,96,15)" fg:x="935" fg:w="10"/><text x="75.7141%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="76.0291%" y="661" width="0.2421%" height="15" fill="rgb(211,210,7)" fg:x="942" fg:w="3"/><text x="76.2791%" y="671.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="76.0291%" y="645" width="0.2421%" height="15" fill="rgb(240,88,50)" fg:x="942" fg:w="3"/><text x="76.2791%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="76.0291%" y="629" width="0.2421%" height="15" fill="rgb(209,229,26)" fg:x="942" fg:w="3"/><text x="76.2791%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="76.0291%" y="613" width="0.2421%" height="15" fill="rgb(210,68,23)" fg:x="942" fg:w="3"/><text x="76.2791%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="76.0291%" y="597" width="0.2421%" height="15" fill="rgb(229,180,13)" fg:x="942" fg:w="3"/><text x="76.2791%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="76.0291%" y="581" width="0.2421%" height="15" fill="rgb(236,53,44)" fg:x="942" fg:w="3"/><text x="76.2791%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="76.0291%" y="565" width="0.2421%" height="15" fill="rgb(244,214,29)" fg:x="942" fg:w="3"/><text x="76.2791%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="76.0291%" y="549" width="0.2421%" height="15" fill="rgb(220,75,29)" fg:x="942" fg:w="3"/><text x="76.2791%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.1905%" y="533" width="0.0807%" height="15" fill="rgb(214,183,37)" fg:x="944" fg:w="1"/><text x="76.4405%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1905%" y="517" width="0.0807%" height="15" fill="rgb(239,117,29)" fg:x="944" fg:w="1"/><text x="76.4405%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="76.2712%" y="693" width="0.0807%" height="15" fill="rgb(237,171,35)" fg:x="945" fg:w="1"/><text x="76.5212%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="76.2712%" y="677" width="0.0807%" height="15" fill="rgb(229,178,53)" fg:x="945" fg:w="1"/><text x="76.5212%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="76.2712%" y="661" width="0.0807%" height="15" fill="rgb(210,102,19)" fg:x="945" fg:w="1"/><text x="76.5212%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.2712%" y="645" width="0.0807%" height="15" fill="rgb(235,127,22)" fg:x="945" fg:w="1"/><text x="76.5212%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="76.2712%" y="725" width="0.1614%" height="15" fill="rgb(244,31,31)" fg:x="945" fg:w="2"/><text x="76.5212%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.2712%" y="709" width="0.1614%" height="15" fill="rgb(231,43,21)" fg:x="945" fg:w="2"/><text x="76.5212%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynamicPlugin&gt; (1 samples, 0.08%)</title><rect x="76.3519%" y="693" width="0.0807%" height="15" fill="rgb(217,131,35)" fg:x="946" fg:w="1"/><text x="76.6019%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3519%" y="677" width="0.0807%" height="15" fill="rgb(221,149,4)" fg:x="946" fg:w="1"/><text x="76.6019%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="76.2712%" y="741" width="0.4036%" height="15" fill="rgb(232,170,28)" fg:x="945" fg:w="5"/><text x="76.5212%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (3 samples, 0.24%)</title><rect x="76.4326%" y="725" width="0.2421%" height="15" fill="rgb(238,56,10)" fg:x="947" fg:w="3"/><text x="76.6826%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="76.4326%" y="709" width="0.2421%" height="15" fill="rgb(235,196,14)" fg:x="947" fg:w="3"/><text x="76.6826%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="76.4326%" y="693" width="0.2421%" height="15" fill="rgb(216,45,48)" fg:x="947" fg:w="3"/><text x="76.6826%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="76.4326%" y="677" width="0.2421%" height="15" fill="rgb(238,213,17)" fg:x="947" fg:w="3"/><text x="76.6826%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.5133%" y="661" width="0.1614%" height="15" fill="rgb(212,13,2)" fg:x="948" fg:w="2"/><text x="76.7633%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (2 samples, 0.16%)</title><rect x="76.5133%" y="645" width="0.1614%" height="15" fill="rgb(240,114,20)" fg:x="948" fg:w="2"/><text x="76.7633%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="76.5133%" y="629" width="0.1614%" height="15" fill="rgb(228,41,40)" fg:x="948" fg:w="2"/><text x="76.7633%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.5940%" y="613" width="0.0807%" height="15" fill="rgb(244,132,35)" fg:x="949" fg:w="1"/><text x="76.8440%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="76.5940%" y="597" width="0.0807%" height="15" fill="rgb(253,189,4)" fg:x="949" fg:w="1"/><text x="76.8440%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.5940%" y="581" width="0.0807%" height="15" fill="rgb(224,37,19)" fg:x="949" fg:w="1"/><text x="76.8440%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.5940%" y="565" width="0.0807%" height="15" fill="rgb(235,223,18)" fg:x="949" fg:w="1"/><text x="76.8440%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="76.7554%" y="661" width="0.2421%" height="15" fill="rgb(235,163,25)" fg:x="951" fg:w="3"/><text x="77.0054%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="76.7554%" y="645" width="0.2421%" height="15" fill="rgb(217,145,28)" fg:x="951" fg:w="3"/><text x="77.0054%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="76.7554%" y="629" width="0.2421%" height="15" fill="rgb(223,223,32)" fg:x="951" fg:w="3"/><text x="77.0054%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="76.7554%" y="613" width="0.2421%" height="15" fill="rgb(227,189,39)" fg:x="951" fg:w="3"/><text x="77.0054%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="76.7554%" y="597" width="0.2421%" height="15" fill="rgb(248,10,22)" fg:x="951" fg:w="3"/><text x="77.0054%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="76.7554%" y="581" width="0.2421%" height="15" fill="rgb(248,46,39)" fg:x="951" fg:w="3"/><text x="77.0054%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="76.7554%" y="565" width="0.2421%" height="15" fill="rgb(248,113,48)" fg:x="951" fg:w="3"/><text x="77.0054%" y="575.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="76.7554%" y="549" width="0.2421%" height="15" fill="rgb(245,16,25)" fg:x="951" fg:w="3"/><text x="77.0054%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="76.9976%" y="645" width="0.1614%" height="15" fill="rgb(249,152,16)" fg:x="954" fg:w="2"/><text x="77.2476%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.9976%" y="629" width="0.1614%" height="15" fill="rgb(250,16,1)" fg:x="954" fg:w="2"/><text x="77.2476%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.9976%" y="613" width="0.1614%" height="15" fill="rgb(249,138,3)" fg:x="954" fg:w="2"/><text x="77.2476%" y="623.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.08%)</title><rect x="77.1590%" y="501" width="0.0807%" height="15" fill="rgb(227,71,41)" fg:x="956" fg:w="1"/><text x="77.4090%" y="511.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="77.1590%" y="597" width="0.3228%" height="15" fill="rgb(209,184,23)" fg:x="956" fg:w="4"/><text x="77.4090%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="77.1590%" y="581" width="0.3228%" height="15" fill="rgb(223,215,31)" fg:x="956" fg:w="4"/><text x="77.4090%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="77.1590%" y="565" width="0.3228%" height="15" fill="rgb(210,146,28)" fg:x="956" fg:w="4"/><text x="77.4090%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="77.1590%" y="549" width="0.3228%" height="15" fill="rgb(209,183,41)" fg:x="956" fg:w="4"/><text x="77.4090%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="77.1590%" y="533" width="0.3228%" height="15" fill="rgb(209,224,45)" fg:x="956" fg:w="4"/><text x="77.4090%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="77.1590%" y="517" width="0.3228%" height="15" fill="rgb(224,209,51)" fg:x="956" fg:w="4"/><text x="77.4090%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="77.2397%" y="501" width="0.2421%" height="15" fill="rgb(223,17,39)" fg:x="957" fg:w="3"/><text x="77.4897%" y="511.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="77.2397%" y="485" width="0.2421%" height="15" fill="rgb(234,204,37)" fg:x="957" fg:w="3"/><text x="77.4897%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="77.1590%" y="629" width="0.4036%" height="15" fill="rgb(236,120,5)" fg:x="956" fg:w="5"/><text x="77.4090%" y="639.50"></text></g><g><title>glob::fill_todo (5 samples, 0.40%)</title><rect x="77.1590%" y="613" width="0.4036%" height="15" fill="rgb(248,97,27)" fg:x="956" fg:w="5"/><text x="77.4090%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="77.4818%" y="597" width="0.0807%" height="15" fill="rgb(240,66,17)" fg:x="960" fg:w="1"/><text x="77.7318%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="77.4818%" y="581" width="0.0807%" height="15" fill="rgb(210,79,3)" fg:x="960" fg:w="1"/><text x="77.7318%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="77.4818%" y="565" width="0.0807%" height="15" fill="rgb(214,176,27)" fg:x="960" fg:w="1"/><text x="77.7318%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="77.4818%" y="549" width="0.0807%" height="15" fill="rgb(235,185,3)" fg:x="960" fg:w="1"/><text x="77.7318%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="77.4818%" y="533" width="0.0807%" height="15" fill="rgb(227,24,12)" fg:x="960" fg:w="1"/><text x="77.7318%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="77.4818%" y="517" width="0.0807%" height="15" fill="rgb(252,169,48)" fg:x="960" fg:w="1"/><text x="77.7318%" y="527.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="77.4818%" y="501" width="0.0807%" height="15" fill="rgb(212,65,1)" fg:x="960" fg:w="1"/><text x="77.7318%" y="511.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.65%)</title><rect x="76.9976%" y="661" width="0.6457%" height="15" fill="rgb(242,39,24)" fg:x="954" fg:w="8"/><text x="77.2476%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (6 samples, 0.48%)</title><rect x="77.1590%" y="645" width="0.4843%" height="15" fill="rgb(249,32,23)" fg:x="956" fg:w="6"/><text x="77.4090%" y="655.50"></text></g><g><title>glob::glob (1 samples, 0.08%)</title><rect x="77.5626%" y="629" width="0.0807%" height="15" fill="rgb(251,195,23)" fg:x="961" fg:w="1"/><text x="77.8126%" y="639.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="77.5626%" y="613" width="0.0807%" height="15" fill="rgb(236,174,8)" fg:x="961" fg:w="1"/><text x="77.8126%" y="623.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="77.5626%" y="597" width="0.0807%" height="15" fill="rgb(220,197,8)" fg:x="961" fg:w="1"/><text x="77.8126%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.5626%" y="581" width="0.0807%" height="15" fill="rgb(240,108,37)" fg:x="961" fg:w="1"/><text x="77.8126%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.5626%" y="565" width="0.0807%" height="15" fill="rgb(232,176,24)" fg:x="961" fg:w="1"/><text x="77.8126%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="77.7240%" y="629" width="0.0807%" height="15" fill="rgb(243,35,29)" fg:x="963" fg:w="1"/><text x="77.9740%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="77.7240%" y="613" width="0.0807%" height="15" fill="rgb(210,37,18)" fg:x="963" fg:w="1"/><text x="77.9740%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="77.7240%" y="597" width="0.0807%" height="15" fill="rgb(224,184,40)" fg:x="963" fg:w="1"/><text x="77.9740%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7240%" y="581" width="0.0807%" height="15" fill="rgb(236,39,29)" fg:x="963" fg:w="1"/><text x="77.9740%" y="591.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="77.8047%" y="597" width="0.0807%" height="15" fill="rgb(232,48,39)" fg:x="964" fg:w="1"/><text x="78.0547%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="77.8047%" y="629" width="0.1614%" height="15" fill="rgb(236,34,42)" fg:x="964" fg:w="2"/><text x="78.0547%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="77.8047%" y="613" width="0.1614%" height="15" fill="rgb(243,106,37)" fg:x="964" fg:w="2"/><text x="78.0547%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="77.8854%" y="597" width="0.0807%" height="15" fill="rgb(218,96,6)" fg:x="965" fg:w="1"/><text x="78.1354%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.8854%" y="581" width="0.0807%" height="15" fill="rgb(235,130,12)" fg:x="965" fg:w="1"/><text x="78.1354%" y="591.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="77.9661%" y="629" width="0.0807%" height="15" fill="rgb(231,95,0)" fg:x="966" fg:w="1"/><text x="78.2161%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="77.9661%" y="613" width="0.0807%" height="15" fill="rgb(228,12,23)" fg:x="966" fg:w="1"/><text x="78.2161%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="77.9661%" y="597" width="0.0807%" height="15" fill="rgb(216,12,1)" fg:x="966" fg:w="1"/><text x="78.2161%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.9661%" y="581" width="0.0807%" height="15" fill="rgb(219,59,3)" fg:x="966" fg:w="1"/><text x="78.2161%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.9661%" y="565" width="0.0807%" height="15" fill="rgb(215,208,46)" fg:x="966" fg:w="1"/><text x="78.2161%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.9661%" y="549" width="0.0807%" height="15" fill="rgb(254,224,29)" fg:x="966" fg:w="1"/><text x="78.2161%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9661%" y="533" width="0.0807%" height="15" fill="rgb(232,14,29)" fg:x="966" fg:w="1"/><text x="78.2161%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="77.6433%" y="661" width="0.4843%" height="15" fill="rgb(208,45,52)" fg:x="962" fg:w="6"/><text x="77.8933%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.48%)</title><rect x="77.6433%" y="645" width="0.4843%" height="15" fill="rgb(234,191,28)" fg:x="962" fg:w="6"/><text x="77.8933%" y="655.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="78.0468%" y="629" width="0.0807%" height="15" fill="rgb(244,67,43)" fg:x="967" fg:w="1"/><text x="78.2968%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="78.0468%" y="613" width="0.0807%" height="15" fill="rgb(236,189,24)" fg:x="967" fg:w="1"/><text x="78.2968%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.0468%" y="597" width="0.0807%" height="15" fill="rgb(239,214,33)" fg:x="967" fg:w="1"/><text x="78.2968%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.0468%" y="581" width="0.0807%" height="15" fill="rgb(226,176,41)" fg:x="967" fg:w="1"/><text x="78.2968%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.0468%" y="565" width="0.0807%" height="15" fill="rgb(248,47,8)" fg:x="967" fg:w="1"/><text x="78.2968%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="78.1275%" y="661" width="0.0807%" height="15" fill="rgb(218,81,44)" fg:x="968" fg:w="1"/><text x="78.3775%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.1275%" y="645" width="0.0807%" height="15" fill="rgb(213,98,6)" fg:x="968" fg:w="1"/><text x="78.3775%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (19 samples, 1.53%)</title><rect x="76.7554%" y="677" width="1.5335%" height="15" fill="rgb(222,85,22)" fg:x="951" fg:w="19"/><text x="77.0054%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="78.2082%" y="661" width="0.0807%" height="15" fill="rgb(239,46,39)" fg:x="969" fg:w="1"/><text x="78.4582%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="78.2082%" y="645" width="0.0807%" height="15" fill="rgb(237,12,29)" fg:x="969" fg:w="1"/><text x="78.4582%" y="655.50"></text></g><g><title>engine::session::Session::initialize (21 samples, 1.69%)</title><rect x="76.6747%" y="693" width="1.6949%" height="15" fill="rgb(214,77,8)" fg:x="950" fg:w="21"/><text x="76.9247%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="78.2889%" y="677" width="0.0807%" height="15" fill="rgb(217,168,37)" fg:x="970" fg:w="1"/><text x="78.5389%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.2889%" y="661" width="0.0807%" height="15" fill="rgb(221,217,23)" fg:x="970" fg:w="1"/><text x="78.5389%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.2889%" y="645" width="0.0807%" height="15" fill="rgb(243,229,36)" fg:x="970" fg:w="1"/><text x="78.5389%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.2889%" y="629" width="0.0807%" height="15" fill="rgb(251,163,40)" fg:x="970" fg:w="1"/><text x="78.5389%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.2889%" y="613" width="0.0807%" height="15" fill="rgb(237,222,12)" fg:x="970" fg:w="1"/><text x="78.5389%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (22 samples, 1.78%)</title><rect x="76.6747%" y="741" width="1.7756%" height="15" fill="rgb(248,132,6)" fg:x="950" fg:w="22"/><text x="76.9247%" y="751.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (22 samples, 1.78%)</title><rect x="76.6747%" y="725" width="1.7756%" height="15" fill="rgb(227,167,50)" fg:x="950" fg:w="22"/><text x="76.9247%" y="735.50">e..</text></g><g><title>engine::session::Session::new (22 samples, 1.78%)</title><rect x="76.6747%" y="709" width="1.7756%" height="15" fill="rgb(242,84,37)" fg:x="950" fg:w="22"/><text x="76.9247%" y="719.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="78.3697%" y="693" width="0.0807%" height="15" fill="rgb(212,4,50)" fg:x="971" fg:w="1"/><text x="78.6197%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.3697%" y="677" width="0.0807%" height="15" fill="rgb(230,228,32)" fg:x="971" fg:w="1"/><text x="78.6197%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.3697%" y="661" width="0.0807%" height="15" fill="rgb(248,217,23)" fg:x="971" fg:w="1"/><text x="78.6197%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.3697%" y="645" width="0.0807%" height="15" fill="rgb(238,197,32)" fg:x="971" fg:w="1"/><text x="78.6197%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.3697%" y="629" width="0.0807%" height="15" fill="rgb(236,106,1)" fg:x="971" fg:w="1"/><text x="78.6197%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.4504%" y="725" width="0.0807%" height="15" fill="rgb(219,228,13)" fg:x="972" fg:w="1"/><text x="78.7004%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::EntityPtr&gt;&gt; (1 samples, 0.08%)</title><rect x="78.5311%" y="725" width="0.0807%" height="15" fill="rgb(238,30,35)" fg:x="973" fg:w="1"/><text x="78.7811%" y="735.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.5311%" y="709" width="0.0807%" height="15" fill="rgb(236,70,23)" fg:x="973" fg:w="1"/><text x="78.7811%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.6118%" y="581" width="0.0807%" height="15" fill="rgb(249,104,48)" fg:x="974" fg:w="1"/><text x="78.8618%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.6118%" y="565" width="0.0807%" height="15" fill="rgb(254,117,50)" fg:x="974" fg:w="1"/><text x="78.8618%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.6118%" y="629" width="0.1614%" height="15" fill="rgb(223,152,4)" fg:x="974" fg:w="2"/><text x="78.8618%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.6118%" y="613" width="0.1614%" height="15" fill="rgb(245,6,2)" fg:x="974" fg:w="2"/><text x="78.8618%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.6118%" y="597" width="0.1614%" height="15" fill="rgb(249,150,24)" fg:x="974" fg:w="2"/><text x="78.8618%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.6925%" y="581" width="0.0807%" height="15" fill="rgb(228,185,42)" fg:x="975" fg:w="1"/><text x="78.9425%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.8539%" y="597" width="0.0807%" height="15" fill="rgb(226,39,33)" fg:x="977" fg:w="1"/><text x="79.1039%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.8539%" y="581" width="0.0807%" height="15" fill="rgb(221,166,19)" fg:x="977" fg:w="1"/><text x="79.1039%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.8539%" y="565" width="0.0807%" height="15" fill="rgb(209,109,2)" fg:x="977" fg:w="1"/><text x="79.1039%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.8539%" y="549" width="0.0807%" height="15" fill="rgb(252,216,26)" fg:x="977" fg:w="1"/><text x="79.1039%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.8539%" y="533" width="0.0807%" height="15" fill="rgb(227,173,36)" fg:x="977" fg:w="1"/><text x="79.1039%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.8539%" y="517" width="0.0807%" height="15" fill="rgb(209,90,7)" fg:x="977" fg:w="1"/><text x="79.1039%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.8539%" y="501" width="0.0807%" height="15" fill="rgb(250,194,11)" fg:x="977" fg:w="1"/><text x="79.1039%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.9346%" y="581" width="0.0807%" height="15" fill="rgb(220,72,50)" fg:x="978" fg:w="1"/><text x="79.1846%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.0153%" y="581" width="0.0807%" height="15" fill="rgb(222,106,48)" fg:x="979" fg:w="1"/><text x="79.2653%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.0153%" y="565" width="0.0807%" height="15" fill="rgb(216,220,45)" fg:x="979" fg:w="1"/><text x="79.2653%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.0960%" y="565" width="0.0807%" height="15" fill="rgb(234,112,18)" fg:x="980" fg:w="1"/><text x="79.3460%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.0960%" y="549" width="0.0807%" height="15" fill="rgb(206,179,9)" fg:x="980" fg:w="1"/><text x="79.3460%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.0960%" y="533" width="0.0807%" height="15" fill="rgb(215,115,40)" fg:x="980" fg:w="1"/><text x="79.3460%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.0960%" y="517" width="0.0807%" height="15" fill="rgb(222,69,34)" fg:x="980" fg:w="1"/><text x="79.3460%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="79.0960%" y="501" width="0.0807%" height="15" fill="rgb(209,161,10)" fg:x="980" fg:w="1"/><text x="79.3460%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="78.7732%" y="629" width="0.4843%" height="15" fill="rgb(217,6,38)" fg:x="976" fg:w="6"/><text x="79.0232%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="78.7732%" y="613" width="0.4843%" height="15" fill="rgb(229,229,48)" fg:x="976" fg:w="6"/><text x="79.0232%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="78.9346%" y="597" width="0.3228%" height="15" fill="rgb(225,21,28)" fg:x="978" fg:w="4"/><text x="79.1846%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.0960%" y="581" width="0.1614%" height="15" fill="rgb(206,33,13)" fg:x="980" fg:w="2"/><text x="79.3460%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.1768%" y="565" width="0.0807%" height="15" fill="rgb(242,178,17)" fg:x="981" fg:w="1"/><text x="79.4268%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.2575%" y="581" width="0.0807%" height="15" fill="rgb(220,162,5)" fg:x="982" fg:w="1"/><text x="79.5075%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.2575%" y="565" width="0.0807%" height="15" fill="rgb(210,33,43)" fg:x="982" fg:w="1"/><text x="79.5075%" y="575.50"></text></g><g><title>engine::session::Session::flush (12 samples, 0.97%)</title><rect x="78.6118%" y="725" width="0.9685%" height="15" fill="rgb(216,116,54)" fg:x="974" fg:w="12"/><text x="78.8618%" y="735.50"></text></g><g><title>engine::session::state::State::close (12 samples, 0.97%)</title><rect x="78.6118%" y="709" width="0.9685%" height="15" fill="rgb(249,92,24)" fg:x="974" fg:w="12"/><text x="78.8618%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (12 samples, 0.97%)</title><rect x="78.6118%" y="693" width="0.9685%" height="15" fill="rgb(231,189,14)" fg:x="974" fg:w="12"/><text x="78.8618%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (12 samples, 0.97%)</title><rect x="78.6118%" y="677" width="0.9685%" height="15" fill="rgb(230,8,41)" fg:x="974" fg:w="12"/><text x="78.8618%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.97%)</title><rect x="78.6118%" y="661" width="0.9685%" height="15" fill="rgb(249,7,27)" fg:x="974" fg:w="12"/><text x="78.8618%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (12 samples, 0.97%)</title><rect x="78.6118%" y="645" width="0.9685%" height="15" fill="rgb(232,86,5)" fg:x="974" fg:w="12"/><text x="78.8618%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="79.2575%" y="629" width="0.3228%" height="15" fill="rgb(224,175,18)" fg:x="982" fg:w="4"/><text x="79.5075%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="79.2575%" y="613" width="0.3228%" height="15" fill="rgb(220,129,12)" fg:x="982" fg:w="4"/><text x="79.5075%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="79.2575%" y="597" width="0.3228%" height="15" fill="rgb(210,19,36)" fg:x="982" fg:w="4"/><text x="79.5075%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="79.3382%" y="581" width="0.2421%" height="15" fill="rgb(219,96,14)" fg:x="983" fg:w="3"/><text x="79.5882%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="79.4189%" y="565" width="0.1614%" height="15" fill="rgb(249,106,1)" fg:x="984" fg:w="2"/><text x="79.6689%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.5803%" y="709" width="0.0807%" height="15" fill="rgb(249,155,20)" fg:x="986" fg:w="1"/><text x="79.8303%" y="719.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="79.6610%" y="693" width="0.0807%" height="15" fill="rgb(244,168,9)" fg:x="987" fg:w="1"/><text x="79.9110%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="79.6610%" y="677" width="0.0807%" height="15" fill="rgb(216,23,50)" fg:x="987" fg:w="1"/><text x="79.9110%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.6610%" y="661" width="0.0807%" height="15" fill="rgb(224,219,20)" fg:x="987" fg:w="1"/><text x="79.9110%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.6610%" y="645" width="0.0807%" height="15" fill="rgb(222,156,15)" fg:x="987" fg:w="1"/><text x="79.9110%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.6610%" y="629" width="0.0807%" height="15" fill="rgb(231,97,17)" fg:x="987" fg:w="1"/><text x="79.9110%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.6610%" y="613" width="0.0807%" height="15" fill="rgb(218,70,48)" fg:x="987" fg:w="1"/><text x="79.9110%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="79.7417%" y="677" width="0.0807%" height="15" fill="rgb(212,196,52)" fg:x="988" fg:w="1"/><text x="79.9917%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="79.7417%" y="661" width="0.0807%" height="15" fill="rgb(243,203,18)" fg:x="988" fg:w="1"/><text x="79.9917%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="79.7417%" y="645" width="0.0807%" height="15" fill="rgb(252,125,41)" fg:x="988" fg:w="1"/><text x="79.9917%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.7417%" y="629" width="0.0807%" height="15" fill="rgb(223,180,33)" fg:x="988" fg:w="1"/><text x="79.9917%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="79.7417%" y="613" width="0.0807%" height="15" fill="rgb(254,159,46)" fg:x="988" fg:w="1"/><text x="79.9917%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="79.7417%" y="597" width="0.0807%" height="15" fill="rgb(254,38,10)" fg:x="988" fg:w="1"/><text x="79.9917%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.7417%" y="581" width="0.0807%" height="15" fill="rgb(208,217,32)" fg:x="988" fg:w="1"/><text x="79.9917%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8224%" y="645" width="0.0807%" height="15" fill="rgb(221,120,13)" fg:x="989" fg:w="1"/><text x="80.0724%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="79.6610%" y="709" width="0.3228%" height="15" fill="rgb(246,54,52)" fg:x="987" fg:w="4"/><text x="79.9110%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="79.7417%" y="693" width="0.2421%" height="15" fill="rgb(242,34,25)" fg:x="988" fg:w="3"/><text x="79.9917%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="79.8224%" y="677" width="0.1614%" height="15" fill="rgb(247,209,9)" fg:x="989" fg:w="2"/><text x="80.0724%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="79.8224%" y="661" width="0.1614%" height="15" fill="rgb(228,71,26)" fg:x="989" fg:w="2"/><text x="80.0724%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="79.9031%" y="645" width="0.0807%" height="15" fill="rgb(222,145,49)" fg:x="990" fg:w="1"/><text x="80.1531%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.9031%" y="629" width="0.0807%" height="15" fill="rgb(218,121,17)" fg:x="990" fg:w="1"/><text x="80.1531%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.9031%" y="613" width="0.0807%" height="15" fill="rgb(244,50,7)" fg:x="990" fg:w="1"/><text x="80.1531%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9839%" y="709" width="0.0807%" height="15" fill="rgb(246,229,37)" fg:x="991" fg:w="1"/><text x="80.2339%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9839%" y="693" width="0.0807%" height="15" fill="rgb(225,18,5)" fg:x="991" fg:w="1"/><text x="80.2339%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.9839%" y="677" width="0.0807%" height="15" fill="rgb(213,204,8)" fg:x="991" fg:w="1"/><text x="80.2339%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="79.5803%" y="725" width="0.5650%" height="15" fill="rgb(238,103,6)" fg:x="986" fg:w="7"/><text x="79.8303%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.0646%" y="709" width="0.0807%" height="15" fill="rgb(222,25,35)" fg:x="992" fg:w="1"/><text x="80.3146%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.0646%" y="693" width="0.0807%" height="15" fill="rgb(213,203,35)" fg:x="992" fg:w="1"/><text x="80.3146%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0646%" y="677" width="0.0807%" height="15" fill="rgb(221,79,53)" fg:x="992" fg:w="1"/><text x="80.3146%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.0646%" y="661" width="0.0807%" height="15" fill="rgb(243,200,35)" fg:x="992" fg:w="1"/><text x="80.3146%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0646%" y="645" width="0.0807%" height="15" fill="rgb(248,60,25)" fg:x="992" fg:w="1"/><text x="80.3146%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="80.1453%" y="725" width="0.0807%" height="15" fill="rgb(227,53,46)" fg:x="993" fg:w="1"/><text x="80.3953%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="80.1453%" y="709" width="0.0807%" height="15" fill="rgb(216,120,32)" fg:x="993" fg:w="1"/><text x="80.3953%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.1453%" y="693" width="0.0807%" height="15" fill="rgb(220,134,1)" fg:x="993" fg:w="1"/><text x="80.3953%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1453%" y="677" width="0.0807%" height="15" fill="rgb(237,168,5)" fg:x="993" fg:w="1"/><text x="80.3953%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.1453%" y="661" width="0.0807%" height="15" fill="rgb(231,100,33)" fg:x="993" fg:w="1"/><text x="80.3953%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.1453%" y="645" width="0.0807%" height="15" fill="rgb(236,177,47)" fg:x="993" fg:w="1"/><text x="80.3953%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="80.2260%" y="693" width="0.1614%" height="15" fill="rgb(235,7,49)" fg:x="994" fg:w="2"/><text x="80.4760%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="80.2260%" y="677" width="0.1614%" height="15" fill="rgb(232,119,22)" fg:x="994" fg:w="2"/><text x="80.4760%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="80.2260%" y="661" width="0.1614%" height="15" fill="rgb(254,73,53)" fg:x="994" fg:w="2"/><text x="80.4760%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="80.2260%" y="645" width="0.1614%" height="15" fill="rgb(251,35,20)" fg:x="994" fg:w="2"/><text x="80.4760%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.2260%" y="629" width="0.1614%" height="15" fill="rgb(241,119,20)" fg:x="994" fg:w="2"/><text x="80.4760%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.2260%" y="613" width="0.1614%" height="15" fill="rgb(207,102,14)" fg:x="994" fg:w="2"/><text x="80.4760%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.3067%" y="597" width="0.0807%" height="15" fill="rgb(248,201,50)" fg:x="995" fg:w="1"/><text x="80.5567%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3067%" y="581" width="0.0807%" height="15" fill="rgb(222,185,44)" fg:x="995" fg:w="1"/><text x="80.5567%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.3067%" y="565" width="0.0807%" height="15" fill="rgb(218,107,18)" fg:x="995" fg:w="1"/><text x="80.5567%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.3874%" y="693" width="0.0807%" height="15" fill="rgb(237,177,39)" fg:x="996" fg:w="1"/><text x="80.6374%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3874%" y="677" width="0.0807%" height="15" fill="rgb(246,69,6)" fg:x="996" fg:w="1"/><text x="80.6374%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.3874%" y="661" width="0.0807%" height="15" fill="rgb(234,208,37)" fg:x="996" fg:w="1"/><text x="80.6374%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.3874%" y="645" width="0.0807%" height="15" fill="rgb(225,4,6)" fg:x="996" fg:w="1"/><text x="80.6374%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="80.3874%" y="629" width="0.0807%" height="15" fill="rgb(233,45,0)" fg:x="996" fg:w="1"/><text x="80.6374%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.3874%" y="613" width="0.0807%" height="15" fill="rgb(226,136,5)" fg:x="996" fg:w="1"/><text x="80.6374%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.4681%" y="677" width="0.0807%" height="15" fill="rgb(211,91,47)" fg:x="997" fg:w="1"/><text x="80.7181%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.4681%" y="661" width="0.0807%" height="15" fill="rgb(242,88,51)" fg:x="997" fg:w="1"/><text x="80.7181%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.4681%" y="645" width="0.0807%" height="15" fill="rgb(230,91,28)" fg:x="997" fg:w="1"/><text x="80.7181%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="80.4681%" y="693" width="0.1614%" height="15" fill="rgb(254,186,29)" fg:x="997" fg:w="2"/><text x="80.7181%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="80.5488%" y="677" width="0.0807%" height="15" fill="rgb(238,6,4)" fg:x="998" fg:w="1"/><text x="80.7988%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.5488%" y="661" width="0.0807%" height="15" fill="rgb(221,151,16)" fg:x="998" fg:w="1"/><text x="80.7988%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.5488%" y="645" width="0.0807%" height="15" fill="rgb(251,143,52)" fg:x="998" fg:w="1"/><text x="80.7988%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.5488%" y="629" width="0.0807%" height="15" fill="rgb(206,90,15)" fg:x="998" fg:w="1"/><text x="80.7988%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.5488%" y="613" width="0.0807%" height="15" fill="rgb(218,35,8)" fg:x="998" fg:w="1"/><text x="80.7988%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.5488%" y="597" width="0.0807%" height="15" fill="rgb(239,215,6)" fg:x="998" fg:w="1"/><text x="80.7988%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.5488%" y="581" width="0.0807%" height="15" fill="rgb(245,116,39)" fg:x="998" fg:w="1"/><text x="80.7988%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.5488%" y="565" width="0.0807%" height="15" fill="rgb(242,65,28)" fg:x="998" fg:w="1"/><text x="80.7988%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.5488%" y="549" width="0.0807%" height="15" fill="rgb(252,132,53)" fg:x="998" fg:w="1"/><text x="80.7988%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="80.2260%" y="725" width="0.4843%" height="15" fill="rgb(224,159,50)" fg:x="994" fg:w="6"/><text x="80.4760%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="80.2260%" y="709" width="0.4843%" height="15" fill="rgb(224,93,4)" fg:x="994" fg:w="6"/><text x="80.4760%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="80.6295%" y="693" width="0.0807%" height="15" fill="rgb(208,81,34)" fg:x="999" fg:w="1"/><text x="80.8795%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.6295%" y="677" width="0.0807%" height="15" fill="rgb(233,92,54)" fg:x="999" fg:w="1"/><text x="80.8795%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6295%" y="661" width="0.0807%" height="15" fill="rgb(237,21,14)" fg:x="999" fg:w="1"/><text x="80.8795%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.6295%" y="645" width="0.0807%" height="15" fill="rgb(249,128,51)" fg:x="999" fg:w="1"/><text x="80.8795%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6295%" y="629" width="0.0807%" height="15" fill="rgb(223,129,24)" fg:x="999" fg:w="1"/><text x="80.8795%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.6295%" y="613" width="0.0807%" height="15" fill="rgb(231,168,25)" fg:x="999" fg:w="1"/><text x="80.8795%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6295%" y="597" width="0.0807%" height="15" fill="rgb(224,39,20)" fg:x="999" fg:w="1"/><text x="80.8795%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6295%" y="581" width="0.0807%" height="15" fill="rgb(225,152,53)" fg:x="999" fg:w="1"/><text x="80.8795%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="80.7103%" y="709" width="0.0807%" height="15" fill="rgb(252,17,24)" fg:x="1000" fg:w="1"/><text x="80.9603%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.7103%" y="693" width="0.0807%" height="15" fill="rgb(250,114,30)" fg:x="1000" fg:w="1"/><text x="80.9603%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="80.7103%" y="677" width="0.0807%" height="15" fill="rgb(229,5,4)" fg:x="1000" fg:w="1"/><text x="80.9603%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.8717%" y="597" width="0.0807%" height="15" fill="rgb(225,176,49)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.8717%" y="581" width="0.0807%" height="15" fill="rgb(224,221,49)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.8717%" y="565" width="0.0807%" height="15" fill="rgb(253,169,27)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.8717%" y="549" width="0.0807%" height="15" fill="rgb(211,206,16)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.8717%" y="533" width="0.0807%" height="15" fill="rgb(244,87,35)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.8717%" y="517" width="0.0807%" height="15" fill="rgb(246,28,10)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8717%" y="501" width="0.0807%" height="15" fill="rgb(229,12,44)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="80.8717%" y="693" width="0.1614%" height="15" fill="rgb(210,145,37)" fg:x="1002" fg:w="2"/><text x="81.1217%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="80.8717%" y="677" width="0.1614%" height="15" fill="rgb(227,112,52)" fg:x="1002" fg:w="2"/><text x="81.1217%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="80.8717%" y="661" width="0.1614%" height="15" fill="rgb(238,155,34)" fg:x="1002" fg:w="2"/><text x="81.1217%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="80.8717%" y="645" width="0.1614%" height="15" fill="rgb(239,226,36)" fg:x="1002" fg:w="2"/><text x="81.1217%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="80.8717%" y="629" width="0.1614%" height="15" fill="rgb(230,16,23)" fg:x="1002" fg:w="2"/><text x="81.1217%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="80.8717%" y="613" width="0.1614%" height="15" fill="rgb(236,171,36)" fg:x="1002" fg:w="2"/><text x="81.1217%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="80.9524%" y="597" width="0.0807%" height="15" fill="rgb(221,22,14)" fg:x="1003" fg:w="1"/><text x="81.2024%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="80.9524%" y="581" width="0.0807%" height="15" fill="rgb(242,43,11)" fg:x="1003" fg:w="1"/><text x="81.2024%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="81.0331%" y="581" width="0.0807%" height="15" fill="rgb(232,69,23)" fg:x="1004" fg:w="1"/><text x="81.2831%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.0331%" y="565" width="0.0807%" height="15" fill="rgb(216,180,54)" fg:x="1004" fg:w="1"/><text x="81.2831%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.0331%" y="549" width="0.0807%" height="15" fill="rgb(216,5,24)" fg:x="1004" fg:w="1"/><text x="81.2831%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.0331%" y="533" width="0.0807%" height="15" fill="rgb(225,89,9)" fg:x="1004" fg:w="1"/><text x="81.2831%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="81.0331%" y="517" width="0.0807%" height="15" fill="rgb(243,75,33)" fg:x="1004" fg:w="1"/><text x="81.2831%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="81.1945%" y="565" width="0.1614%" height="15" fill="rgb(247,141,45)" fg:x="1006" fg:w="2"/><text x="81.4445%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="81.1945%" y="549" width="0.1614%" height="15" fill="rgb(232,177,36)" fg:x="1006" fg:w="2"/><text x="81.4445%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.2752%" y="533" width="0.0807%" height="15" fill="rgb(219,125,36)" fg:x="1007" fg:w="1"/><text x="81.5252%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.2752%" y="517" width="0.0807%" height="15" fill="rgb(227,94,9)" fg:x="1007" fg:w="1"/><text x="81.5252%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.4366%" y="549" width="0.0807%" height="15" fill="rgb(240,34,52)" fg:x="1009" fg:w="1"/><text x="81.6866%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.4366%" y="533" width="0.0807%" height="15" fill="rgb(216,45,12)" fg:x="1009" fg:w="1"/><text x="81.6866%" y="543.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="81.5174%" y="533" width="0.0807%" height="15" fill="rgb(246,21,19)" fg:x="1010" fg:w="1"/><text x="81.7674%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="81.5174%" y="549" width="0.1614%" height="15" fill="rgb(213,98,42)" fg:x="1010" fg:w="2"/><text x="81.7674%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.5981%" y="533" width="0.0807%" height="15" fill="rgb(250,136,47)" fg:x="1011" fg:w="1"/><text x="81.8481%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.89%)</title><rect x="81.0331%" y="597" width="0.8878%" height="15" fill="rgb(251,124,27)" fg:x="1004" fg:w="11"/><text x="81.2831%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="81.1138%" y="581" width="0.8071%" height="15" fill="rgb(229,180,14)" fg:x="1005" fg:w="10"/><text x="81.3638%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="81.3559%" y="565" width="0.5650%" height="15" fill="rgb(245,216,25)" fg:x="1008" fg:w="7"/><text x="81.6059%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="81.6788%" y="549" width="0.2421%" height="15" fill="rgb(251,43,5)" fg:x="1012" fg:w="3"/><text x="81.9288%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.8402%" y="533" width="0.0807%" height="15" fill="rgb(250,128,24)" fg:x="1014" fg:w="1"/><text x="82.0902%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="81.8402%" y="517" width="0.0807%" height="15" fill="rgb(217,117,27)" fg:x="1014" fg:w="1"/><text x="82.0902%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="81.9209%" y="581" width="0.0807%" height="15" fill="rgb(245,147,4)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="591.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="81.9209%" y="565" width="0.0807%" height="15" fill="rgb(242,201,35)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="575.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="81.9209%" y="549" width="0.0807%" height="15" fill="rgb(218,181,1)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.9209%" y="533" width="0.0807%" height="15" fill="rgb(222,6,29)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.0016%" y="549" width="0.0807%" height="15" fill="rgb(208,186,3)" fg:x="1016" fg:w="1"/><text x="82.2516%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.0016%" y="533" width="0.0807%" height="15" fill="rgb(216,36,26)" fg:x="1016" fg:w="1"/><text x="82.2516%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0016%" y="517" width="0.0807%" height="15" fill="rgb(248,201,23)" fg:x="1016" fg:w="1"/><text x="82.2516%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="82.0823%" y="533" width="0.0807%" height="15" fill="rgb(251,170,31)" fg:x="1017" fg:w="1"/><text x="82.3323%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.0823%" y="517" width="0.0807%" height="15" fill="rgb(207,110,25)" fg:x="1017" fg:w="1"/><text x="82.3323%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.0823%" y="501" width="0.0807%" height="15" fill="rgb(250,54,15)" fg:x="1017" fg:w="1"/><text x="82.3323%" y="511.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.45%)</title><rect x="80.7910%" y="709" width="1.4528%" height="15" fill="rgb(227,68,33)" fg:x="1001" fg:w="18"/><text x="81.0410%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (15 samples, 1.21%)</title><rect x="81.0331%" y="693" width="1.2107%" height="15" fill="rgb(238,34,41)" fg:x="1004" fg:w="15"/><text x="81.2831%" y="703.50"></text></g><g><title>engine::session::state::State::close (15 samples, 1.21%)</title><rect x="81.0331%" y="677" width="1.2107%" height="15" fill="rgb(220,11,15)" fg:x="1004" fg:w="15"/><text x="81.2831%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (15 samples, 1.21%)</title><rect x="81.0331%" y="661" width="1.2107%" height="15" fill="rgb(246,111,35)" fg:x="1004" fg:w="15"/><text x="81.2831%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.21%)</title><rect x="81.0331%" y="645" width="1.2107%" height="15" fill="rgb(209,88,53)" fg:x="1004" fg:w="15"/><text x="81.2831%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.21%)</title><rect x="81.0331%" y="629" width="1.2107%" height="15" fill="rgb(231,185,47)" fg:x="1004" fg:w="15"/><text x="81.2831%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.21%)</title><rect x="81.0331%" y="613" width="1.2107%" height="15" fill="rgb(233,154,1)" fg:x="1004" fg:w="15"/><text x="81.2831%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="81.9209%" y="597" width="0.3228%" height="15" fill="rgb(225,15,46)" fg:x="1015" fg:w="4"/><text x="82.1709%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="82.0016%" y="581" width="0.2421%" height="15" fill="rgb(211,135,41)" fg:x="1016" fg:w="3"/><text x="82.2516%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="82.0016%" y="565" width="0.2421%" height="15" fill="rgb(208,54,0)" fg:x="1016" fg:w="3"/><text x="82.2516%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="82.0823%" y="549" width="0.1614%" height="15" fill="rgb(244,136,14)" fg:x="1017" fg:w="2"/><text x="82.3323%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.1630%" y="533" width="0.0807%" height="15" fill="rgb(241,56,14)" fg:x="1018" fg:w="1"/><text x="82.4130%" y="543.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="82.2437%" y="709" width="0.0807%" height="15" fill="rgb(205,80,24)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="82.2437%" y="693" width="0.0807%" height="15" fill="rgb(220,57,4)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="82.2437%" y="677" width="0.0807%" height="15" fill="rgb(226,193,50)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.2437%" y="661" width="0.0807%" height="15" fill="rgb(231,168,22)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.2437%" y="645" width="0.0807%" height="15" fill="rgb(254,215,14)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.3245%" y="693" width="0.0807%" height="15" fill="rgb(211,115,16)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.3245%" y="677" width="0.0807%" height="15" fill="rgb(236,210,16)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="82.3245%" y="661" width="0.0807%" height="15" fill="rgb(221,94,12)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="82.3245%" y="645" width="0.0807%" height="15" fill="rgb(235,218,49)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="82.3245%" y="629" width="0.0807%" height="15" fill="rgb(217,114,14)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.3245%" y="613" width="0.0807%" height="15" fill="rgb(216,145,22)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.3245%" y="597" width="0.0807%" height="15" fill="rgb(217,112,39)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="82.3245%" y="581" width="0.0807%" height="15" fill="rgb(225,85,32)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="82.3245%" y="565" width="0.0807%" height="15" fill="rgb(245,209,47)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="82.3245%" y="549" width="0.0807%" height="15" fill="rgb(218,220,15)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="82.3245%" y="533" width="0.0807%" height="15" fill="rgb(222,202,31)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.3245%" y="517" width="0.0807%" height="15" fill="rgb(243,203,4)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.4052%" y="677" width="0.0807%" height="15" fill="rgb(237,92,17)" fg:x="1021" fg:w="1"/><text x="82.6552%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.4052%" y="661" width="0.0807%" height="15" fill="rgb(231,119,7)" fg:x="1021" fg:w="1"/><text x="82.6552%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.4052%" y="645" width="0.0807%" height="15" fill="rgb(237,82,41)" fg:x="1021" fg:w="1"/><text x="82.6552%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.4052%" y="629" width="0.0807%" height="15" fill="rgb(226,81,48)" fg:x="1021" fg:w="1"/><text x="82.6552%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4052%" y="613" width="0.0807%" height="15" fill="rgb(234,70,51)" fg:x="1021" fg:w="1"/><text x="82.6552%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="82.4859%" y="661" width="0.0807%" height="15" fill="rgb(251,86,4)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="82.4859%" y="645" width="0.0807%" height="15" fill="rgb(244,144,28)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.4859%" y="629" width="0.0807%" height="15" fill="rgb(232,161,39)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="82.4859%" y="677" width="0.1614%" height="15" fill="rgb(247,34,51)" fg:x="1022" fg:w="2"/><text x="82.7359%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="82.5666%" y="661" width="0.0807%" height="15" fill="rgb(225,132,2)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="82.5666%" y="645" width="0.0807%" height="15" fill="rgb(209,159,44)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.5666%" y="629" width="0.0807%" height="15" fill="rgb(251,214,1)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="82.6473%" y="677" width="0.0807%" height="15" fill="rgb(247,84,47)" fg:x="1024" fg:w="1"/><text x="82.8973%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.6473%" y="661" width="0.0807%" height="15" fill="rgb(240,111,43)" fg:x="1024" fg:w="1"/><text x="82.8973%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.6473%" y="645" width="0.0807%" height="15" fill="rgb(215,214,35)" fg:x="1024" fg:w="1"/><text x="82.8973%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="82.6473%" y="629" width="0.0807%" height="15" fill="rgb(248,207,23)" fg:x="1024" fg:w="1"/><text x="82.8973%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="82.6473%" y="613" width="0.0807%" height="15" fill="rgb(214,186,4)" fg:x="1024" fg:w="1"/><text x="82.8973%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.6473%" y="597" width="0.0807%" height="15" fill="rgb(220,133,22)" fg:x="1024" fg:w="1"/><text x="82.8973%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.6473%" y="581" width="0.0807%" height="15" fill="rgb(239,134,19)" fg:x="1024" fg:w="1"/><text x="82.8973%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.6473%" y="565" width="0.0807%" height="15" fill="rgb(250,140,9)" fg:x="1024" fg:w="1"/><text x="82.8973%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.6473%" y="549" width="0.0807%" height="15" fill="rgb(225,59,14)" fg:x="1024" fg:w="1"/><text x="82.8973%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="82.4052%" y="693" width="0.4036%" height="15" fill="rgb(214,152,51)" fg:x="1021" fg:w="5"/><text x="82.6552%" y="703.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="82.7280%" y="677" width="0.0807%" height="15" fill="rgb(251,227,43)" fg:x="1025" fg:w="1"/><text x="82.9780%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="82.3245%" y="709" width="0.5650%" height="15" fill="rgb(241,96,17)" fg:x="1020" fg:w="7"/><text x="82.5745%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.8087%" y="693" width="0.0807%" height="15" fill="rgb(234,198,43)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.8087%" y="677" width="0.0807%" height="15" fill="rgb(220,108,29)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.8087%" y="661" width="0.0807%" height="15" fill="rgb(226,163,33)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="82.8894%" y="709" width="0.0807%" height="15" fill="rgb(205,194,45)" fg:x="1027" fg:w="1"/><text x="83.1394%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="82.8894%" y="693" width="0.0807%" height="15" fill="rgb(206,143,44)" fg:x="1027" fg:w="1"/><text x="83.1394%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="82.8894%" y="677" width="0.0807%" height="15" fill="rgb(236,136,36)" fg:x="1027" fg:w="1"/><text x="83.1394%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="82.8894%" y="661" width="0.0807%" height="15" fill="rgb(249,172,42)" fg:x="1027" fg:w="1"/><text x="83.1394%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.8894%" y="645" width="0.0807%" height="15" fill="rgb(216,139,23)" fg:x="1027" fg:w="1"/><text x="83.1394%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.8894%" y="629" width="0.0807%" height="15" fill="rgb(207,166,20)" fg:x="1027" fg:w="1"/><text x="83.1394%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="82.9701%" y="677" width="0.0807%" height="15" fill="rgb(210,209,22)" fg:x="1028" fg:w="1"/><text x="83.2201%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="82.9701%" y="661" width="0.0807%" height="15" fill="rgb(232,118,20)" fg:x="1028" fg:w="1"/><text x="83.2201%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="82.9701%" y="645" width="0.0807%" height="15" fill="rgb(238,113,42)" fg:x="1028" fg:w="1"/><text x="83.2201%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.9701%" y="629" width="0.0807%" height="15" fill="rgb(231,42,5)" fg:x="1028" fg:w="1"/><text x="83.2201%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="82.9701%" y="709" width="0.1614%" height="15" fill="rgb(243,166,24)" fg:x="1028" fg:w="2"/><text x="83.2201%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="82.9701%" y="693" width="0.1614%" height="15" fill="rgb(237,226,12)" fg:x="1028" fg:w="2"/><text x="83.2201%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="83.0508%" y="677" width="0.0807%" height="15" fill="rgb(229,133,24)" fg:x="1029" fg:w="1"/><text x="83.3008%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="83.0508%" y="661" width="0.0807%" height="15" fill="rgb(238,33,43)" fg:x="1029" fg:w="1"/><text x="83.3008%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.0508%" y="645" width="0.0807%" height="15" fill="rgb(227,59,38)" fg:x="1029" fg:w="1"/><text x="83.3008%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="83.0508%" y="629" width="0.0807%" height="15" fill="rgb(230,97,0)" fg:x="1029" fg:w="1"/><text x="83.3008%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.0508%" y="613" width="0.0807%" height="15" fill="rgb(250,173,50)" fg:x="1029" fg:w="1"/><text x="83.3008%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.0508%" y="597" width="0.0807%" height="15" fill="rgb(240,15,50)" fg:x="1029" fg:w="1"/><text x="83.3008%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.0508%" y="581" width="0.0807%" height="15" fill="rgb(221,93,22)" fg:x="1029" fg:w="1"/><text x="83.3008%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="83.0508%" y="565" width="0.0807%" height="15" fill="rgb(245,180,53)" fg:x="1029" fg:w="1"/><text x="83.3008%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="83.1316%" y="661" width="0.0807%" height="15" fill="rgb(231,88,51)" fg:x="1030" fg:w="1"/><text x="83.3816%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.1316%" y="645" width="0.0807%" height="15" fill="rgb(240,58,21)" fg:x="1030" fg:w="1"/><text x="83.3816%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.1316%" y="629" width="0.0807%" height="15" fill="rgb(237,21,10)" fg:x="1030" fg:w="1"/><text x="83.3816%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.1316%" y="613" width="0.0807%" height="15" fill="rgb(218,43,11)" fg:x="1030" fg:w="1"/><text x="83.3816%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (32 samples, 2.58%)</title><rect x="80.7103%" y="725" width="2.5827%" height="15" fill="rgb(218,221,29)" fg:x="1000" fg:w="32"/><text x="80.9603%" y="735.50">pl..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="83.1316%" y="709" width="0.1614%" height="15" fill="rgb(214,118,42)" fg:x="1030" fg:w="2"/><text x="83.3816%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="83.1316%" y="693" width="0.1614%" height="15" fill="rgb(251,200,26)" fg:x="1030" fg:w="2"/><text x="83.3816%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="83.1316%" y="677" width="0.1614%" height="15" fill="rgb(237,101,39)" fg:x="1030" fg:w="2"/><text x="83.3816%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="83.2123%" y="661" width="0.0807%" height="15" fill="rgb(251,117,11)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.2123%" y="645" width="0.0807%" height="15" fill="rgb(216,223,23)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.2123%" y="629" width="0.0807%" height="15" fill="rgb(251,54,12)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.2123%" y="613" width="0.0807%" height="15" fill="rgb(254,176,54)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.2123%" y="597" width="0.0807%" height="15" fill="rgb(210,32,8)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.2123%" y="581" width="0.0807%" height="15" fill="rgb(235,52,38)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.2123%" y="565" width="0.0807%" height="15" fill="rgb(231,4,44)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.2123%" y="549" width="0.0807%" height="15" fill="rgb(249,2,32)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.2123%" y="533" width="0.0807%" height="15" fill="rgb(224,65,26)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.2123%" y="517" width="0.0807%" height="15" fill="rgb(250,73,40)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.2123%" y="501" width="0.0807%" height="15" fill="rgb(253,177,16)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.2123%" y="485" width="0.0807%" height="15" fill="rgb(217,32,34)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="83.2123%" y="469" width="0.0807%" height="15" fill="rgb(212,7,10)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="83.2123%" y="453" width="0.0807%" height="15" fill="rgb(245,89,8)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="83.2123%" y="437" width="0.0807%" height="15" fill="rgb(237,16,53)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="83.2123%" y="421" width="0.0807%" height="15" fill="rgb(250,204,30)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.2123%" y="405" width="0.0807%" height="15" fill="rgb(208,77,27)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="415.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="83.2930%" y="645" width="0.0807%" height="15" fill="rgb(250,204,28)" fg:x="1032" fg:w="1"/><text x="83.5430%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="83.2930%" y="629" width="0.0807%" height="15" fill="rgb(244,63,21)" fg:x="1032" fg:w="1"/><text x="83.5430%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="83.2930%" y="613" width="0.0807%" height="15" fill="rgb(236,85,44)" fg:x="1032" fg:w="1"/><text x="83.5430%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.2930%" y="597" width="0.0807%" height="15" fill="rgb(215,98,4)" fg:x="1032" fg:w="1"/><text x="83.5430%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="83.2930%" y="677" width="0.1614%" height="15" fill="rgb(235,38,11)" fg:x="1032" fg:w="2"/><text x="83.5430%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="83.2930%" y="661" width="0.1614%" height="15" fill="rgb(254,186,25)" fg:x="1032" fg:w="2"/><text x="83.5430%" y="671.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="83.3737%" y="645" width="0.0807%" height="15" fill="rgb(225,55,31)" fg:x="1033" fg:w="1"/><text x="83.6237%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.3737%" y="629" width="0.0807%" height="15" fill="rgb(211,15,21)" fg:x="1033" fg:w="1"/><text x="83.6237%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.3737%" y="613" width="0.0807%" height="15" fill="rgb(215,187,41)" fg:x="1033" fg:w="1"/><text x="83.6237%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.4544%" y="677" width="0.0807%" height="15" fill="rgb(248,69,32)" fg:x="1034" fg:w="1"/><text x="83.7044%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="83.2930%" y="693" width="0.3228%" height="15" fill="rgb(252,102,52)" fg:x="1032" fg:w="4"/><text x="83.5430%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.5351%" y="677" width="0.0807%" height="15" fill="rgb(253,140,32)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.5351%" y="661" width="0.0807%" height="15" fill="rgb(216,56,42)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.5351%" y="645" width="0.0807%" height="15" fill="rgb(216,184,14)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.5351%" y="629" width="0.0807%" height="15" fill="rgb(237,187,27)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.5351%" y="613" width="0.0807%" height="15" fill="rgb(219,65,3)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.5351%" y="597" width="0.0807%" height="15" fill="rgb(245,83,25)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.5351%" y="581" width="0.0807%" height="15" fill="rgb(214,205,45)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.5351%" y="565" width="0.0807%" height="15" fill="rgb(241,20,18)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.5351%" y="549" width="0.0807%" height="15" fill="rgb(232,163,23)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.5351%" y="533" width="0.0807%" height="15" fill="rgb(214,5,46)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.5351%" y="517" width="0.0807%" height="15" fill="rgb(229,78,17)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="83.5351%" y="501" width="0.0807%" height="15" fill="rgb(248,89,10)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="83.5351%" y="485" width="0.0807%" height="15" fill="rgb(248,54,15)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="83.5351%" y="469" width="0.0807%" height="15" fill="rgb(223,116,6)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="83.5351%" y="453" width="0.0807%" height="15" fill="rgb(205,125,38)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.5351%" y="437" width="0.0807%" height="15" fill="rgb(251,78,38)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="447.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.40%)</title><rect x="83.2930%" y="725" width="0.4036%" height="15" fill="rgb(253,78,28)" fg:x="1032" fg:w="5"/><text x="83.5430%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.40%)</title><rect x="83.2930%" y="709" width="0.4036%" height="15" fill="rgb(209,120,3)" fg:x="1032" fg:w="5"/><text x="83.5430%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="83.6158%" y="693" width="0.0807%" height="15" fill="rgb(238,229,9)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="83.6158%" y="677" width="0.0807%" height="15" fill="rgb(253,159,18)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="83.6158%" y="661" width="0.0807%" height="15" fill="rgb(244,42,34)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.6158%" y="645" width="0.0807%" height="15" fill="rgb(224,8,7)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.6158%" y="629" width="0.0807%" height="15" fill="rgb(210,201,45)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="639.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="83.6965%" y="709" width="0.0807%" height="15" fill="rgb(252,185,21)" fg:x="1037" fg:w="1"/><text x="83.9465%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="83.6965%" y="693" width="0.0807%" height="15" fill="rgb(223,131,1)" fg:x="1037" fg:w="1"/><text x="83.9465%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="83.8579%" y="677" width="0.0807%" height="15" fill="rgb(245,141,16)" fg:x="1039" fg:w="1"/><text x="84.1079%" y="687.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="83.8579%" y="661" width="0.0807%" height="15" fill="rgb(229,55,45)" fg:x="1039" fg:w="1"/><text x="84.1079%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.8579%" y="645" width="0.0807%" height="15" fill="rgb(208,92,15)" fg:x="1039" fg:w="1"/><text x="84.1079%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="83.9387%" y="677" width="0.0807%" height="15" fill="rgb(234,185,47)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="83.9387%" y="661" width="0.0807%" height="15" fill="rgb(253,104,50)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="83.9387%" y="645" width="0.0807%" height="15" fill="rgb(205,70,7)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="83.9387%" y="629" width="0.0807%" height="15" fill="rgb(240,178,43)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.9387%" y="613" width="0.0807%" height="15" fill="rgb(214,112,2)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.9387%" y="597" width="0.0807%" height="15" fill="rgb(206,46,17)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.9387%" y="581" width="0.0807%" height="15" fill="rgb(225,220,16)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.9387%" y="565" width="0.0807%" height="15" fill="rgb(238,65,40)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="83.8579%" y="693" width="0.2421%" height="15" fill="rgb(230,151,21)" fg:x="1039" fg:w="3"/><text x="84.1079%" y="703.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="84.0194%" y="677" width="0.0807%" height="15" fill="rgb(218,58,49)" fg:x="1041" fg:w="1"/><text x="84.2694%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.1001%" y="693" width="0.0807%" height="15" fill="rgb(219,179,14)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.1001%" y="677" width="0.0807%" height="15" fill="rgb(223,72,1)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.1001%" y="661" width="0.0807%" height="15" fill="rgb(238,126,10)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.1001%" y="645" width="0.0807%" height="15" fill="rgb(224,206,38)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.1001%" y="629" width="0.0807%" height="15" fill="rgb(212,201,54)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.1001%" y="613" width="0.0807%" height="15" fill="rgb(218,154,48)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.1001%" y="597" width="0.0807%" height="15" fill="rgb(232,93,24)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.1001%" y="581" width="0.0807%" height="15" fill="rgb(245,30,21)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.1001%" y="565" width="0.0807%" height="15" fill="rgb(242,148,29)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.1001%" y="549" width="0.0807%" height="15" fill="rgb(244,153,54)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.1001%" y="533" width="0.0807%" height="15" fill="rgb(252,87,22)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.1001%" y="517" width="0.0807%" height="15" fill="rgb(210,51,29)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.1001%" y="501" width="0.0807%" height="15" fill="rgb(242,136,47)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (72 samples, 5.81%)</title><rect x="78.4504%" y="741" width="5.8111%" height="15" fill="rgb(238,68,4)" fg:x="972" fg:w="72"/><text x="78.7004%" y="751.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (7 samples, 0.56%)</title><rect x="83.6965%" y="725" width="0.5650%" height="15" fill="rgb(242,161,30)" fg:x="1037" fg:w="7"/><text x="83.9465%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="83.7772%" y="709" width="0.4843%" height="15" fill="rgb(218,58,44)" fg:x="1038" fg:w="6"/><text x="84.0272%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.1808%" y="693" width="0.0807%" height="15" fill="rgb(252,125,32)" fg:x="1043" fg:w="1"/><text x="84.4308%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.1808%" y="677" width="0.0807%" height="15" fill="rgb(219,178,0)" fg:x="1043" fg:w="1"/><text x="84.4308%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.1808%" y="661" width="0.0807%" height="15" fill="rgb(213,152,7)" fg:x="1043" fg:w="1"/><text x="84.4308%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.1808%" y="645" width="0.0807%" height="15" fill="rgb(249,109,34)" fg:x="1043" fg:w="1"/><text x="84.4308%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.1808%" y="629" width="0.0807%" height="15" fill="rgb(232,96,21)" fg:x="1043" fg:w="1"/><text x="84.4308%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.1808%" y="613" width="0.0807%" height="15" fill="rgb(228,27,39)" fg:x="1043" fg:w="1"/><text x="84.4308%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="84.1808%" y="597" width="0.0807%" height="15" fill="rgb(211,182,52)" fg:x="1043" fg:w="1"/><text x="84.4308%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="84.2615%" y="741" width="0.0807%" height="15" fill="rgb(234,178,38)" fg:x="1044" fg:w="1"/><text x="84.5115%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="84.2615%" y="725" width="0.0807%" height="15" fill="rgb(221,111,3)" fg:x="1044" fg:w="1"/><text x="84.5115%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="84.2615%" y="709" width="0.0807%" height="15" fill="rgb(228,175,21)" fg:x="1044" fg:w="1"/><text x="84.5115%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.2615%" y="693" width="0.0807%" height="15" fill="rgb(228,174,43)" fg:x="1044" fg:w="1"/><text x="84.5115%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="84.3422%" y="725" width="0.0807%" height="15" fill="rgb(211,191,0)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.3422%" y="709" width="0.0807%" height="15" fill="rgb(253,117,3)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.3422%" y="693" width="0.0807%" height="15" fill="rgb(241,127,19)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.3422%" y="677" width="0.0807%" height="15" fill="rgb(218,103,12)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.3422%" y="661" width="0.0807%" height="15" fill="rgb(236,214,43)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.3422%" y="645" width="0.0807%" height="15" fill="rgb(244,144,19)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.3422%" y="629" width="0.0807%" height="15" fill="rgb(246,188,10)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.3422%" y="613" width="0.0807%" height="15" fill="rgb(212,193,33)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.3422%" y="597" width="0.0807%" height="15" fill="rgb(241,51,29)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.3422%" y="581" width="0.0807%" height="15" fill="rgb(211,58,19)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.3422%" y="565" width="0.0807%" height="15" fill="rgb(229,111,26)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.3422%" y="549" width="0.0807%" height="15" fill="rgb(213,115,40)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="84.4229%" y="725" width="0.0807%" height="15" fill="rgb(209,56,44)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="84.4229%" y="709" width="0.0807%" height="15" fill="rgb(230,108,32)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="84.4229%" y="693" width="0.0807%" height="15" fill="rgb(216,165,31)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="84.4229%" y="677" width="0.0807%" height="15" fill="rgb(218,122,21)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="84.4229%" y="661" width="0.0807%" height="15" fill="rgb(223,224,47)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="84.4229%" y="645" width="0.0807%" height="15" fill="rgb(238,102,44)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="84.4229%" y="629" width="0.0807%" height="15" fill="rgb(236,46,40)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="84.4229%" y="613" width="0.0807%" height="15" fill="rgb(247,202,50)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="84.4229%" y="597" width="0.0807%" height="15" fill="rgb(209,99,20)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="607.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="84.4229%" y="581" width="0.0807%" height="15" fill="rgb(252,27,34)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="84.4229%" y="565" width="0.0807%" height="15" fill="rgb(215,206,23)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="84.4229%" y="549" width="0.0807%" height="15" fill="rgb(212,135,36)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.08%)</title><rect x="84.4229%" y="533" width="0.0807%" height="15" fill="rgb(240,189,1)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="84.5843%" y="597" width="0.1614%" height="15" fill="rgb(242,56,20)" fg:x="1048" fg:w="2"/><text x="84.8343%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.6651%" y="581" width="0.0807%" height="15" fill="rgb(247,132,33)" fg:x="1049" fg:w="1"/><text x="84.9151%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="84.5843%" y="629" width="0.2421%" height="15" fill="rgb(208,149,11)" fg:x="1048" fg:w="3"/><text x="84.8343%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="84.5843%" y="613" width="0.2421%" height="15" fill="rgb(211,33,11)" fg:x="1048" fg:w="3"/><text x="84.8343%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.7458%" y="597" width="0.0807%" height="15" fill="rgb(221,29,38)" fg:x="1050" fg:w="1"/><text x="84.9958%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.7458%" y="581" width="0.0807%" height="15" fill="rgb(206,182,49)" fg:x="1050" fg:w="1"/><text x="84.9958%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="84.5843%" y="645" width="0.3228%" height="15" fill="rgb(216,140,1)" fg:x="1048" fg:w="4"/><text x="84.8343%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.8265%" y="629" width="0.0807%" height="15" fill="rgb(232,57,40)" fg:x="1051" fg:w="1"/><text x="85.0765%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.8265%" y="613" width="0.0807%" height="15" fill="rgb(224,186,18)" fg:x="1051" fg:w="1"/><text x="85.0765%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="84.9072%" y="645" width="0.0807%" height="15" fill="rgb(215,121,11)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="84.9072%" y="629" width="0.0807%" height="15" fill="rgb(245,147,10)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="84.9072%" y="613" width="0.0807%" height="15" fill="rgb(238,153,13)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="84.9072%" y="597" width="0.0807%" height="15" fill="rgb(233,108,0)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.9072%" y="581" width="0.0807%" height="15" fill="rgb(212,157,17)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.9072%" y="565" width="0.0807%" height="15" fill="rgb(225,213,38)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.9072%" y="549" width="0.0807%" height="15" fill="rgb(248,16,11)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9072%" y="533" width="0.0807%" height="15" fill="rgb(241,33,4)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="85.0686%" y="597" width="0.0807%" height="15" fill="rgb(222,26,43)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.0686%" y="581" width="0.0807%" height="15" fill="rgb(243,29,36)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="85.0686%" y="565" width="0.0807%" height="15" fill="rgb(241,9,27)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.0686%" y="549" width="0.0807%" height="15" fill="rgb(205,117,26)" fg:x="1054" fg:w="1"/><text x="85.3186%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="85.2300%" y="581" width="0.0807%" height="15" fill="rgb(209,80,39)" fg:x="1056" fg:w="1"/><text x="85.4800%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.2300%" y="565" width="0.0807%" height="15" fill="rgb(239,155,6)" fg:x="1056" fg:w="1"/><text x="85.4800%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="85.2300%" y="549" width="0.0807%" height="15" fill="rgb(212,104,12)" fg:x="1056" fg:w="1"/><text x="85.4800%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.2300%" y="533" width="0.0807%" height="15" fill="rgb(234,204,3)" fg:x="1056" fg:w="1"/><text x="85.4800%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.2300%" y="517" width="0.0807%" height="15" fill="rgb(251,218,7)" fg:x="1056" fg:w="1"/><text x="85.4800%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.2300%" y="501" width="0.0807%" height="15" fill="rgb(221,81,32)" fg:x="1056" fg:w="1"/><text x="85.4800%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.2300%" y="485" width="0.0807%" height="15" fill="rgb(214,152,26)" fg:x="1056" fg:w="1"/><text x="85.4800%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="85.3914%" y="565" width="0.1614%" height="15" fill="rgb(223,22,3)" fg:x="1058" fg:w="2"/><text x="85.6414%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="85.3914%" y="549" width="0.1614%" height="15" fill="rgb(207,174,7)" fg:x="1058" fg:w="2"/><text x="85.6414%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="85.3914%" y="533" width="0.1614%" height="15" fill="rgb(224,19,52)" fg:x="1058" fg:w="2"/><text x="85.6414%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="85.3914%" y="517" width="0.1614%" height="15" fill="rgb(228,24,14)" fg:x="1058" fg:w="2"/><text x="85.6414%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.4722%" y="501" width="0.0807%" height="15" fill="rgb(230,153,43)" fg:x="1059" fg:w="1"/><text x="85.7222%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.4722%" y="485" width="0.0807%" height="15" fill="rgb(231,106,12)" fg:x="1059" fg:w="1"/><text x="85.7222%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.4722%" y="469" width="0.0807%" height="15" fill="rgb(215,92,2)" fg:x="1059" fg:w="1"/><text x="85.7222%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="85.3107%" y="581" width="0.3228%" height="15" fill="rgb(249,143,25)" fg:x="1057" fg:w="4"/><text x="85.5607%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="85.5529%" y="565" width="0.0807%" height="15" fill="rgb(252,7,35)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.73%)</title><rect x="84.9879%" y="645" width="0.7264%" height="15" fill="rgb(216,69,40)" fg:x="1053" fg:w="9"/><text x="85.2379%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="84.9879%" y="629" width="0.7264%" height="15" fill="rgb(240,36,33)" fg:x="1053" fg:w="9"/><text x="85.2379%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="85.0686%" y="613" width="0.6457%" height="15" fill="rgb(231,128,14)" fg:x="1054" fg:w="8"/><text x="85.3186%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="85.1493%" y="597" width="0.5650%" height="15" fill="rgb(245,143,14)" fg:x="1055" fg:w="7"/><text x="85.3993%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.6336%" y="581" width="0.0807%" height="15" fill="rgb(222,130,28)" fg:x="1061" fg:w="1"/><text x="85.8836%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="85.7143%" y="613" width="0.1614%" height="15" fill="rgb(212,10,48)" fg:x="1062" fg:w="2"/><text x="85.9643%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="85.7143%" y="597" width="0.1614%" height="15" fill="rgb(254,118,45)" fg:x="1062" fg:w="2"/><text x="85.9643%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="85.7143%" y="581" width="0.1614%" height="15" fill="rgb(228,6,45)" fg:x="1062" fg:w="2"/><text x="85.9643%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="85.7143%" y="565" width="0.1614%" height="15" fill="rgb(241,18,35)" fg:x="1062" fg:w="2"/><text x="85.9643%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="85.7143%" y="549" width="0.1614%" height="15" fill="rgb(227,214,53)" fg:x="1062" fg:w="2"/><text x="85.9643%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="85.7143%" y="629" width="0.2421%" height="15" fill="rgb(224,107,51)" fg:x="1062" fg:w="3"/><text x="85.9643%" y="639.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="85.8757%" y="613" width="0.0807%" height="15" fill="rgb(248,60,28)" fg:x="1064" fg:w="1"/><text x="86.1257%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="85.8757%" y="597" width="0.0807%" height="15" fill="rgb(249,101,23)" fg:x="1064" fg:w="1"/><text x="86.1257%" y="607.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="85.8757%" y="581" width="0.0807%" height="15" fill="rgb(228,51,19)" fg:x="1064" fg:w="1"/><text x="86.1257%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="85.8757%" y="565" width="0.0807%" height="15" fill="rgb(213,20,6)" fg:x="1064" fg:w="1"/><text x="86.1257%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="85.8757%" y="549" width="0.0807%" height="15" fill="rgb(212,124,10)" fg:x="1064" fg:w="1"/><text x="86.1257%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0371%" y="597" width="0.0807%" height="15" fill="rgb(248,3,40)" fg:x="1066" fg:w="1"/><text x="86.2871%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="86.1178%" y="597" width="0.1614%" height="15" fill="rgb(223,178,23)" fg:x="1067" fg:w="2"/><text x="86.3678%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="86.1985%" y="581" width="0.0807%" height="15" fill="rgb(240,132,45)" fg:x="1068" fg:w="1"/><text x="86.4485%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="86.2793%" y="597" width="0.0807%" height="15" fill="rgb(245,164,36)" fg:x="1069" fg:w="1"/><text x="86.5293%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="86.4407%" y="549" width="0.0807%" height="15" fill="rgb(231,188,53)" fg:x="1071" fg:w="1"/><text x="86.6907%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="86.3600%" y="565" width="0.2421%" height="15" fill="rgb(237,198,39)" fg:x="1070" fg:w="3"/><text x="86.6100%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="86.5214%" y="549" width="0.0807%" height="15" fill="rgb(223,120,35)" fg:x="1072" fg:w="1"/><text x="86.7714%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="86.5214%" y="533" width="0.0807%" height="15" fill="rgb(253,107,49)" fg:x="1072" fg:w="1"/><text x="86.7714%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.73%)</title><rect x="85.9564%" y="629" width="0.7264%" height="15" fill="rgb(216,44,31)" fg:x="1065" fg:w="9"/><text x="86.2064%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="86.0371%" y="613" width="0.6457%" height="15" fill="rgb(253,87,21)" fg:x="1066" fg:w="8"/><text x="86.2871%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="86.3600%" y="597" width="0.3228%" height="15" fill="rgb(226,18,2)" fg:x="1070" fg:w="4"/><text x="86.6100%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="86.3600%" y="581" width="0.3228%" height="15" fill="rgb(216,8,46)" fg:x="1070" fg:w="4"/><text x="86.6100%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="86.6021%" y="565" width="0.0807%" height="15" fill="rgb(226,140,39)" fg:x="1073" fg:w="1"/><text x="86.8521%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="86.6828%" y="453" width="0.1614%" height="15" fill="rgb(221,194,54)" fg:x="1074" fg:w="2"/><text x="86.9328%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="86.6828%" y="437" width="0.1614%" height="15" fill="rgb(213,92,11)" fg:x="1074" fg:w="2"/><text x="86.9328%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="86.6828%" y="485" width="0.2421%" height="15" fill="rgb(229,162,46)" fg:x="1074" fg:w="3"/><text x="86.9328%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="86.6828%" y="469" width="0.2421%" height="15" fill="rgb(214,111,36)" fg:x="1074" fg:w="3"/><text x="86.9328%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.8442%" y="453" width="0.0807%" height="15" fill="rgb(207,6,21)" fg:x="1076" fg:w="1"/><text x="87.0942%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="86.6828%" y="501" width="0.3228%" height="15" fill="rgb(213,127,38)" fg:x="1074" fg:w="4"/><text x="86.9328%" y="511.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="86.9249%" y="485" width="0.0807%" height="15" fill="rgb(238,118,32)" fg:x="1077" fg:w="1"/><text x="87.1749%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="86.6828%" y="533" width="0.4036%" height="15" fill="rgb(240,139,39)" fg:x="1074" fg:w="5"/><text x="86.9328%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="86.6828%" y="517" width="0.4036%" height="15" fill="rgb(235,10,37)" fg:x="1074" fg:w="5"/><text x="86.9328%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.0056%" y="501" width="0.0807%" height="15" fill="rgb(249,171,38)" fg:x="1078" fg:w="1"/><text x="87.2556%" y="511.50"></text></g><g><title>engine::session::Session::close (35 samples, 2.82%)</title><rect x="84.3422%" y="741" width="2.8249%" height="15" fill="rgb(242,144,32)" fg:x="1045" fg:w="35"/><text x="84.5922%" y="751.50">en..</text></g><g><title>engine::session::state::State::close (33 samples, 2.66%)</title><rect x="84.5036%" y="725" width="2.6634%" height="15" fill="rgb(217,117,21)" fg:x="1047" fg:w="33"/><text x="84.7536%" y="735.50">en..</text></g><g><title>engine::session::state::State::flush_entities (33 samples, 2.66%)</title><rect x="84.5036%" y="709" width="2.6634%" height="15" fill="rgb(249,87,1)" fg:x="1047" fg:w="33"/><text x="84.7536%" y="719.50">en..</text></g><g><title>core::iter::adapters::try_process (33 samples, 2.66%)</title><rect x="84.5036%" y="693" width="2.6634%" height="15" fill="rgb(248,196,48)" fg:x="1047" fg:w="33"/><text x="84.7536%" y="703.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (32 samples, 2.58%)</title><rect x="84.5843%" y="677" width="2.5827%" height="15" fill="rgb(251,206,33)" fg:x="1048" fg:w="32"/><text x="84.8343%" y="687.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (32 samples, 2.58%)</title><rect x="84.5843%" y="661" width="2.5827%" height="15" fill="rgb(232,141,28)" fg:x="1048" fg:w="32"/><text x="84.8343%" y="671.50">en..</text></g><g><title>kernel::model::any_entity_changes (18 samples, 1.45%)</title><rect x="85.7143%" y="645" width="1.4528%" height="15" fill="rgb(209,167,14)" fg:x="1062" fg:w="18"/><text x="85.9643%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="86.6828%" y="629" width="0.4843%" height="15" fill="rgb(225,11,50)" fg:x="1074" fg:w="6"/><text x="86.9328%" y="639.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="86.6828%" y="613" width="0.4843%" height="15" fill="rgb(209,50,20)" fg:x="1074" fg:w="6"/><text x="86.9328%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="86.6828%" y="597" width="0.4843%" height="15" fill="rgb(212,17,46)" fg:x="1074" fg:w="6"/><text x="86.9328%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="86.6828%" y="581" width="0.4843%" height="15" fill="rgb(216,101,39)" fg:x="1074" fg:w="6"/><text x="86.9328%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="86.6828%" y="565" width="0.4843%" height="15" fill="rgb(212,228,48)" fg:x="1074" fg:w="6"/><text x="86.9328%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="86.6828%" y="549" width="0.4843%" height="15" fill="rgb(250,6,50)" fg:x="1074" fg:w="6"/><text x="86.9328%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.0864%" y="533" width="0.0807%" height="15" fill="rgb(250,160,48)" fg:x="1079" fg:w="1"/><text x="87.3364%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.0864%" y="517" width="0.0807%" height="15" fill="rgb(244,216,33)" fg:x="1079" fg:w="1"/><text x="87.3364%" y="527.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="87.1671%" y="709" width="0.0807%" height="15" fill="rgb(207,157,5)" fg:x="1080" fg:w="1"/><text x="87.4171%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="87.1671%" y="693" width="0.0807%" height="15" fill="rgb(228,199,8)" fg:x="1080" fg:w="1"/><text x="87.4171%" y="703.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="87.1671%" y="677" width="0.0807%" height="15" fill="rgb(227,80,20)" fg:x="1080" fg:w="1"/><text x="87.4171%" y="687.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="87.1671%" y="661" width="0.0807%" height="15" fill="rgb(222,9,33)" fg:x="1080" fg:w="1"/><text x="87.4171%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.3285%" y="501" width="0.0807%" height="15" fill="rgb(239,44,28)" fg:x="1082" fg:w="1"/><text x="87.5785%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.3285%" y="485" width="0.0807%" height="15" fill="rgb(249,187,43)" fg:x="1082" fg:w="1"/><text x="87.5785%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.4092%" y="405" width="0.0807%" height="15" fill="rgb(216,141,28)" fg:x="1083" fg:w="1"/><text x="87.6592%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.4092%" y="389" width="0.0807%" height="15" fill="rgb(230,154,53)" fg:x="1083" fg:w="1"/><text x="87.6592%" y="399.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="87.3285%" y="597" width="0.2421%" height="15" fill="rgb(227,82,4)" fg:x="1082" fg:w="3"/><text x="87.5785%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (3 samples, 0.24%)</title><rect x="87.3285%" y="581" width="0.2421%" height="15" fill="rgb(220,107,16)" fg:x="1082" fg:w="3"/><text x="87.5785%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="87.3285%" y="565" width="0.2421%" height="15" fill="rgb(207,187,2)" fg:x="1082" fg:w="3"/><text x="87.5785%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="87.3285%" y="549" width="0.2421%" height="15" fill="rgb(210,162,52)" fg:x="1082" fg:w="3"/><text x="87.5785%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="87.3285%" y="533" width="0.2421%" height="15" fill="rgb(217,216,49)" fg:x="1082" fg:w="3"/><text x="87.5785%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="87.3285%" y="517" width="0.2421%" height="15" fill="rgb(218,146,49)" fg:x="1082" fg:w="3"/><text x="87.5785%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="87.4092%" y="501" width="0.1614%" height="15" fill="rgb(216,55,40)" fg:x="1083" fg:w="2"/><text x="87.6592%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="87.4092%" y="485" width="0.1614%" height="15" fill="rgb(208,196,21)" fg:x="1083" fg:w="2"/><text x="87.6592%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.4092%" y="469" width="0.1614%" height="15" fill="rgb(242,117,42)" fg:x="1083" fg:w="2"/><text x="87.6592%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="87.4092%" y="453" width="0.1614%" height="15" fill="rgb(210,11,23)" fg:x="1083" fg:w="2"/><text x="87.6592%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.4092%" y="437" width="0.1614%" height="15" fill="rgb(217,110,2)" fg:x="1083" fg:w="2"/><text x="87.6592%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="87.4092%" y="421" width="0.1614%" height="15" fill="rgb(229,77,54)" fg:x="1083" fg:w="2"/><text x="87.6592%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.4899%" y="405" width="0.0807%" height="15" fill="rgb(218,53,16)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.4899%" y="389" width="0.0807%" height="15" fill="rgb(215,38,13)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="87.4899%" y="373" width="0.0807%" height="15" fill="rgb(235,42,18)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="87.4899%" y="357" width="0.0807%" height="15" fill="rgb(219,66,54)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="87.4899%" y="341" width="0.0807%" height="15" fill="rgb(222,205,4)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.4899%" y="325" width="0.0807%" height="15" fill="rgb(227,213,46)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.4899%" y="309" width="0.0807%" height="15" fill="rgb(250,145,42)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="87.4899%" y="293" width="0.0807%" height="15" fill="rgb(219,15,2)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.4899%" y="277" width="0.0807%" height="15" fill="rgb(231,181,52)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.4899%" y="261" width="0.0807%" height="15" fill="rgb(235,1,42)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="87.4899%" y="245" width="0.0807%" height="15" fill="rgb(249,88,27)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.4899%" y="229" width="0.0807%" height="15" fill="rgb(235,145,16)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.4899%" y="213" width="0.0807%" height="15" fill="rgb(237,114,19)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.4899%" y="197" width="0.0807%" height="15" fill="rgb(238,51,50)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="87.4899%" y="181" width="0.0807%" height="15" fill="rgb(205,194,25)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.5706%" y="597" width="0.0807%" height="15" fill="rgb(215,203,17)" fg:x="1085" fg:w="1"/><text x="87.8206%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.7320%" y="357" width="0.0807%" height="15" fill="rgb(233,112,49)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.7320%" y="341" width="0.0807%" height="15" fill="rgb(241,130,26)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.7320%" y="325" width="0.0807%" height="15" fill="rgb(252,223,19)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.7320%" y="309" width="0.0807%" height="15" fill="rgb(211,95,25)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.7320%" y="293" width="0.0807%" height="15" fill="rgb(251,182,27)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.7320%" y="277" width="0.0807%" height="15" fill="rgb(238,24,4)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.7320%" y="261" width="0.0807%" height="15" fill="rgb(224,220,25)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.7320%" y="245" width="0.0807%" height="15" fill="rgb(239,133,26)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.7320%" y="229" width="0.0807%" height="15" fill="rgb(211,94,48)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.7320%" y="213" width="0.0807%" height="15" fill="rgb(239,87,6)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="87.7320%" y="197" width="0.0807%" height="15" fill="rgb(227,62,0)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="87.7320%" y="181" width="0.0807%" height="15" fill="rgb(211,226,4)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="87.7320%" y="165" width="0.0807%" height="15" fill="rgb(253,38,52)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="87.7320%" y="149" width="0.0807%" height="15" fill="rgb(229,126,40)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.7320%" y="133" width="0.0807%" height="15" fill="rgb(229,165,44)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="87.8128%" y="357" width="0.0807%" height="15" fill="rgb(247,95,47)" fg:x="1088" fg:w="1"/><text x="88.0628%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="87.8935%" y="325" width="0.0807%" height="15" fill="rgb(216,140,30)" fg:x="1089" fg:w="1"/><text x="88.1435%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="87.7320%" y="389" width="0.3228%" height="15" fill="rgb(246,214,8)" fg:x="1087" fg:w="4"/><text x="87.9820%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="87.7320%" y="373" width="0.3228%" height="15" fill="rgb(227,224,15)" fg:x="1087" fg:w="4"/><text x="87.9820%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="87.8935%" y="357" width="0.1614%" height="15" fill="rgb(233,175,4)" fg:x="1089" fg:w="2"/><text x="88.1435%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.8935%" y="341" width="0.1614%" height="15" fill="rgb(221,66,45)" fg:x="1089" fg:w="2"/><text x="88.1435%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="87.9742%" y="325" width="0.0807%" height="15" fill="rgb(221,178,18)" fg:x="1090" fg:w="1"/><text x="88.2242%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.9742%" y="309" width="0.0807%" height="15" fill="rgb(213,81,29)" fg:x="1090" fg:w="1"/><text x="88.2242%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.9742%" y="293" width="0.0807%" height="15" fill="rgb(220,89,49)" fg:x="1090" fg:w="1"/><text x="88.2242%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="88.0549%" y="325" width="0.0807%" height="15" fill="rgb(227,60,33)" fg:x="1091" fg:w="1"/><text x="88.3049%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.0549%" y="309" width="0.0807%" height="15" fill="rgb(205,113,12)" fg:x="1091" fg:w="1"/><text x="88.3049%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.1356%" y="293" width="0.0807%" height="15" fill="rgb(211,32,1)" fg:x="1092" fg:w="1"/><text x="88.3856%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.1356%" y="277" width="0.0807%" height="15" fill="rgb(246,2,12)" fg:x="1092" fg:w="1"/><text x="88.3856%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="88.0549%" y="389" width="0.2421%" height="15" fill="rgb(243,37,27)" fg:x="1091" fg:w="3"/><text x="88.3049%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="88.0549%" y="373" width="0.2421%" height="15" fill="rgb(248,211,31)" fg:x="1091" fg:w="3"/><text x="88.3049%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="88.0549%" y="357" width="0.2421%" height="15" fill="rgb(242,146,47)" fg:x="1091" fg:w="3"/><text x="88.3049%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="88.0549%" y="341" width="0.2421%" height="15" fill="rgb(206,70,20)" fg:x="1091" fg:w="3"/><text x="88.3049%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="88.1356%" y="325" width="0.1614%" height="15" fill="rgb(215,10,51)" fg:x="1092" fg:w="2"/><text x="88.3856%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="88.1356%" y="309" width="0.1614%" height="15" fill="rgb(243,178,53)" fg:x="1092" fg:w="2"/><text x="88.3856%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.2163%" y="293" width="0.0807%" height="15" fill="rgb(233,221,20)" fg:x="1093" fg:w="1"/><text x="88.4663%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.2163%" y="277" width="0.0807%" height="15" fill="rgb(218,95,35)" fg:x="1093" fg:w="1"/><text x="88.4663%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.2163%" y="261" width="0.0807%" height="15" fill="rgb(229,13,5)" fg:x="1093" fg:w="1"/><text x="88.4663%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="88.2163%" y="245" width="0.0807%" height="15" fill="rgb(252,164,30)" fg:x="1093" fg:w="1"/><text x="88.4663%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.2970%" y="373" width="0.0807%" height="15" fill="rgb(232,68,36)" fg:x="1094" fg:w="1"/><text x="88.5470%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="88.2970%" y="357" width="0.0807%" height="15" fill="rgb(219,59,54)" fg:x="1094" fg:w="1"/><text x="88.5470%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.2970%" y="341" width="0.0807%" height="15" fill="rgb(250,92,33)" fg:x="1094" fg:w="1"/><text x="88.5470%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="88.2970%" y="389" width="0.3228%" height="15" fill="rgb(229,162,54)" fg:x="1094" fg:w="4"/><text x="88.5470%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="88.3777%" y="373" width="0.2421%" height="15" fill="rgb(244,114,52)" fg:x="1095" fg:w="3"/><text x="88.6277%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="88.4584%" y="357" width="0.1614%" height="15" fill="rgb(212,211,43)" fg:x="1096" fg:w="2"/><text x="88.7084%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.5391%" y="341" width="0.0807%" height="15" fill="rgb(226,147,8)" fg:x="1097" fg:w="1"/><text x="88.7891%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="88.5391%" y="325" width="0.0807%" height="15" fill="rgb(226,23,13)" fg:x="1097" fg:w="1"/><text x="88.7891%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.5391%" y="309" width="0.0807%" height="15" fill="rgb(240,63,4)" fg:x="1097" fg:w="1"/><text x="88.7891%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="88.6199%" y="309" width="0.0807%" height="15" fill="rgb(221,1,32)" fg:x="1098" fg:w="1"/><text x="88.8699%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.6199%" y="293" width="0.0807%" height="15" fill="rgb(242,117,10)" fg:x="1098" fg:w="1"/><text x="88.8699%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.6199%" y="277" width="0.0807%" height="15" fill="rgb(249,172,44)" fg:x="1098" fg:w="1"/><text x="88.8699%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="88.7006%" y="309" width="0.0807%" height="15" fill="rgb(244,46,45)" fg:x="1099" fg:w="1"/><text x="88.9506%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="88.7006%" y="293" width="0.0807%" height="15" fill="rgb(206,43,17)" fg:x="1099" fg:w="1"/><text x="88.9506%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.7813%" y="229" width="0.0807%" height="15" fill="rgb(239,218,39)" fg:x="1100" fg:w="1"/><text x="89.0313%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="88.7813%" y="261" width="0.1614%" height="15" fill="rgb(208,169,54)" fg:x="1100" fg:w="2"/><text x="89.0313%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="88.7813%" y="245" width="0.1614%" height="15" fill="rgb(247,25,42)" fg:x="1100" fg:w="2"/><text x="89.0313%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="88.8620%" y="229" width="0.0807%" height="15" fill="rgb(226,23,31)" fg:x="1101" fg:w="1"/><text x="89.1120%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="89.0234%" y="245" width="0.5650%" height="15" fill="rgb(247,16,28)" fg:x="1103" fg:w="7"/><text x="89.2734%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="89.0234%" y="229" width="0.5650%" height="15" fill="rgb(231,147,38)" fg:x="1103" fg:w="7"/><text x="89.2734%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.5077%" y="213" width="0.0807%" height="15" fill="rgb(253,81,48)" fg:x="1109" fg:w="1"/><text x="89.7577%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="89.5884%" y="245" width="0.0807%" height="15" fill="rgb(249,222,43)" fg:x="1110" fg:w="1"/><text x="89.8384%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="89.6691%" y="181" width="0.1614%" height="15" fill="rgb(221,3,27)" fg:x="1111" fg:w="2"/><text x="89.9191%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (18 samples, 1.45%)</title><rect x="89.8305%" y="181" width="1.4528%" height="15" fill="rgb(228,180,5)" fg:x="1113" fg:w="18"/><text x="90.0805%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (18 samples, 1.45%)</title><rect x="89.8305%" y="165" width="1.4528%" height="15" fill="rgb(227,131,42)" fg:x="1113" fg:w="18"/><text x="90.0805%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (18 samples, 1.45%)</title><rect x="89.8305%" y="149" width="1.4528%" height="15" fill="rgb(212,3,39)" fg:x="1113" fg:w="18"/><text x="90.0805%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 1.69%)</title><rect x="89.6691%" y="229" width="1.6949%" height="15" fill="rgb(226,45,5)" fg:x="1111" fg:w="21"/><text x="89.9191%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (21 samples, 1.69%)</title><rect x="89.6691%" y="213" width="1.6949%" height="15" fill="rgb(215,167,45)" fg:x="1111" fg:w="21"/><text x="89.9191%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (21 samples, 1.69%)</title><rect x="89.6691%" y="197" width="1.6949%" height="15" fill="rgb(250,218,53)" fg:x="1111" fg:w="21"/><text x="89.9191%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="91.2833%" y="181" width="0.0807%" height="15" fill="rgb(207,140,0)" fg:x="1131" fg:w="1"/><text x="91.5333%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.2833%" y="165" width="0.0807%" height="15" fill="rgb(238,133,51)" fg:x="1131" fg:w="1"/><text x="91.5333%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="91.5254%" y="213" width="0.1614%" height="15" fill="rgb(218,203,53)" fg:x="1134" fg:w="2"/><text x="91.7754%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="91.3640%" y="229" width="0.4036%" height="15" fill="rgb(226,184,25)" fg:x="1132" fg:w="5"/><text x="91.6140%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="91.6868%" y="213" width="0.0807%" height="15" fill="rgb(231,121,21)" fg:x="1136" fg:w="1"/><text x="91.9368%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (28 samples, 2.26%)</title><rect x="89.6691%" y="245" width="2.2599%" height="15" fill="rgb(251,14,34)" fg:x="1111" fg:w="28"/><text x="89.9191%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="91.7676%" y="229" width="0.1614%" height="15" fill="rgb(249,193,11)" fg:x="1137" fg:w="2"/><text x="92.0176%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="91.7676%" y="213" width="0.1614%" height="15" fill="rgb(220,172,37)" fg:x="1137" fg:w="2"/><text x="92.0176%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::Interval::difference (1 samples, 0.08%)</title><rect x="91.8483%" y="197" width="0.0807%" height="15" fill="rgb(231,229,43)" fg:x="1138" fg:w="1"/><text x="92.0983%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (38 samples, 3.07%)</title><rect x="88.9427%" y="261" width="3.0670%" height="15" fill="rgb(250,161,5)" fg:x="1102" fg:w="38"/><text x="89.1927%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="91.9290%" y="245" width="0.0807%" height="15" fill="rgb(218,225,18)" fg:x="1139" fg:w="1"/><text x="92.1790%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="91.9290%" y="229" width="0.0807%" height="15" fill="rgb(245,45,42)" fg:x="1139" fg:w="1"/><text x="92.1790%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="91.9290%" y="213" width="0.0807%" height="15" fill="rgb(211,115,1)" fg:x="1139" fg:w="1"/><text x="92.1790%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="92.0097%" y="261" width="0.1614%" height="15" fill="rgb(248,133,52)" fg:x="1140" fg:w="2"/><text x="92.2597%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="92.0097%" y="245" width="0.1614%" height="15" fill="rgb(238,100,21)" fg:x="1140" fg:w="2"/><text x="92.2597%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (43 samples, 3.47%)</title><rect x="88.7813%" y="309" width="3.4705%" height="15" fill="rgb(247,144,11)" fg:x="1100" fg:w="43"/><text x="89.0313%" y="319.50">&lt;re..</text></g><g><title>regex::builders::string::RegexBuilder::build (43 samples, 3.47%)</title><rect x="88.7813%" y="293" width="3.4705%" height="15" fill="rgb(206,164,16)" fg:x="1100" fg:w="43"/><text x="89.0313%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (43 samples, 3.47%)</title><rect x="88.7813%" y="277" width="3.4705%" height="15" fill="rgb(222,34,3)" fg:x="1100" fg:w="43"/><text x="89.0313%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="92.1711%" y="261" width="0.0807%" height="15" fill="rgb(248,82,4)" fg:x="1142" fg:w="1"/><text x="92.4211%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="92.1711%" y="245" width="0.0807%" height="15" fill="rgb(228,81,46)" fg:x="1142" fg:w="1"/><text x="92.4211%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="92.1711%" y="229" width="0.0807%" height="15" fill="rgb(227,67,47)" fg:x="1142" fg:w="1"/><text x="92.4211%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::case_fold_simple (1 samples, 0.08%)</title><rect x="92.1711%" y="213" width="0.0807%" height="15" fill="rgb(215,93,53)" fg:x="1142" fg:w="1"/><text x="92.4211%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (46 samples, 3.71%)</title><rect x="88.6199%" y="325" width="3.7127%" height="15" fill="rgb(248,194,39)" fg:x="1098" fg:w="46"/><text x="88.8699%" y="335.50">inde..</text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="92.2518%" y="309" width="0.0807%" height="15" fill="rgb(215,5,19)" fg:x="1143" fg:w="1"/><text x="92.5018%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="92.2518%" y="293" width="0.0807%" height="15" fill="rgb(226,215,51)" fg:x="1143" fg:w="1"/><text x="92.5018%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.2518%" y="277" width="0.0807%" height="15" fill="rgb(225,56,26)" fg:x="1143" fg:w="1"/><text x="92.5018%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="92.2518%" y="261" width="0.0807%" height="15" fill="rgb(222,75,29)" fg:x="1143" fg:w="1"/><text x="92.5018%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.2518%" y="245" width="0.0807%" height="15" fill="rgb(236,139,6)" fg:x="1143" fg:w="1"/><text x="92.5018%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.2518%" y="229" width="0.0807%" height="15" fill="rgb(223,137,36)" fg:x="1143" fg:w="1"/><text x="92.5018%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="92.3325%" y="261" width="0.0807%" height="15" fill="rgb(226,99,2)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.3325%" y="245" width="0.0807%" height="15" fill="rgb(206,133,23)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.4132%" y="229" width="0.0807%" height="15" fill="rgb(243,173,15)" fg:x="1145" fg:w="1"/><text x="92.6632%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="92.4132%" y="245" width="0.4036%" height="15" fill="rgb(228,69,28)" fg:x="1145" fg:w="5"/><text x="92.6632%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="92.4939%" y="229" width="0.3228%" height="15" fill="rgb(212,51,22)" fg:x="1146" fg:w="4"/><text x="92.7439%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.7361%" y="213" width="0.0807%" height="15" fill="rgb(227,113,0)" fg:x="1149" fg:w="1"/><text x="92.9861%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="92.8168%" y="245" width="0.1614%" height="15" fill="rgb(252,84,27)" fg:x="1150" fg:w="2"/><text x="93.0668%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="92.8168%" y="229" width="0.1614%" height="15" fill="rgb(223,145,39)" fg:x="1150" fg:w="2"/><text x="93.0668%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="92.9782%" y="245" width="0.0807%" height="15" fill="rgb(239,219,30)" fg:x="1152" fg:w="1"/><text x="93.2282%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="92.9782%" y="229" width="0.0807%" height="15" fill="rgb(224,196,39)" fg:x="1152" fg:w="1"/><text x="93.2282%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="92.9782%" y="213" width="0.0807%" height="15" fill="rgb(205,35,43)" fg:x="1152" fg:w="1"/><text x="93.2282%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="92.9782%" y="197" width="0.0807%" height="15" fill="rgb(228,201,21)" fg:x="1152" fg:w="1"/><text x="93.2282%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="92.9782%" y="181" width="0.0807%" height="15" fill="rgb(237,118,16)" fg:x="1152" fg:w="1"/><text x="93.2282%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="93.0589%" y="245" width="0.0807%" height="15" fill="rgb(241,17,19)" fg:x="1153" fg:w="1"/><text x="93.3089%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.0589%" y="229" width="0.0807%" height="15" fill="rgb(214,10,25)" fg:x="1153" fg:w="1"/><text x="93.3089%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="93.3010%" y="133" width="0.0807%" height="15" fill="rgb(238,37,29)" fg:x="1156" fg:w="1"/><text x="93.5510%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.3818%" y="133" width="0.0807%" height="15" fill="rgb(253,83,25)" fg:x="1157" fg:w="1"/><text x="93.6318%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="93.5432%" y="101" width="0.1614%" height="15" fill="rgb(234,192,12)" fg:x="1159" fg:w="2"/><text x="93.7932%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="93.5432%" y="85" width="0.1614%" height="15" fill="rgb(241,216,45)" fg:x="1159" fg:w="2"/><text x="93.7932%" y="95.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="93.5432%" y="69" width="0.1614%" height="15" fill="rgb(242,22,33)" fg:x="1159" fg:w="2"/><text x="93.7932%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="93.4625%" y="133" width="0.3228%" height="15" fill="rgb(231,105,49)" fg:x="1158" fg:w="4"/><text x="93.7125%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="93.5432%" y="117" width="0.2421%" height="15" fill="rgb(218,204,15)" fg:x="1159" fg:w="3"/><text x="93.7932%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="93.7046%" y="101" width="0.0807%" height="15" fill="rgb(235,138,41)" fg:x="1161" fg:w="1"/><text x="93.9546%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (16 samples, 1.29%)</title><rect x="93.7853%" y="133" width="1.2914%" height="15" fill="rgb(246,0,9)" fg:x="1162" fg:w="16"/><text x="94.0353%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (16 samples, 1.29%)</title><rect x="93.7853%" y="117" width="1.2914%" height="15" fill="rgb(210,74,4)" fg:x="1162" fg:w="16"/><text x="94.0353%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (16 samples, 1.29%)</title><rect x="93.7853%" y="101" width="1.2914%" height="15" fill="rgb(250,60,41)" fg:x="1162" fg:w="16"/><text x="94.0353%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 2.02%)</title><rect x="93.1396%" y="229" width="2.0178%" height="15" fill="rgb(220,115,12)" fg:x="1154" fg:w="25"/><text x="93.3896%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25 samples, 2.02%)</title><rect x="93.1396%" y="213" width="2.0178%" height="15" fill="rgb(237,100,13)" fg:x="1154" fg:w="25"/><text x="93.3896%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25 samples, 2.02%)</title><rect x="93.1396%" y="197" width="2.0178%" height="15" fill="rgb(213,55,26)" fg:x="1154" fg:w="25"/><text x="93.3896%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25 samples, 2.02%)</title><rect x="93.1396%" y="181" width="2.0178%" height="15" fill="rgb(216,17,4)" fg:x="1154" fg:w="25"/><text x="93.3896%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (25 samples, 2.02%)</title><rect x="93.1396%" y="165" width="2.0178%" height="15" fill="rgb(220,153,47)" fg:x="1154" fg:w="25"/><text x="93.3896%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25 samples, 2.02%)</title><rect x="93.1396%" y="149" width="2.0178%" height="15" fill="rgb(215,131,9)" fg:x="1154" fg:w="25"/><text x="93.3896%" y="159.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="95.0767%" y="133" width="0.0807%" height="15" fill="rgb(233,46,42)" fg:x="1178" fg:w="1"/><text x="95.3267%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3188%" y="213" width="0.0807%" height="15" fill="rgb(226,86,7)" fg:x="1181" fg:w="1"/><text x="95.5688%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="95.3995%" y="213" width="0.0807%" height="15" fill="rgb(239,226,21)" fg:x="1182" fg:w="1"/><text x="95.6495%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (39 samples, 3.15%)</title><rect x="92.4132%" y="261" width="3.1477%" height="15" fill="rgb(244,137,22)" fg:x="1145" fg:w="39"/><text x="92.6632%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (30 samples, 2.42%)</title><rect x="93.1396%" y="245" width="2.4213%" height="15" fill="rgb(211,139,35)" fg:x="1154" fg:w="30"/><text x="93.3896%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="95.1574%" y="229" width="0.4036%" height="15" fill="rgb(214,62,50)" fg:x="1179" fg:w="5"/><text x="95.4074%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="95.4802%" y="213" width="0.0807%" height="15" fill="rgb(212,113,44)" fg:x="1183" fg:w="1"/><text x="95.7302%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="95.5609%" y="261" width="0.0807%" height="15" fill="rgb(226,150,43)" fg:x="1184" fg:w="1"/><text x="95.8109%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="95.5609%" y="245" width="0.0807%" height="15" fill="rgb(250,71,37)" fg:x="1184" fg:w="1"/><text x="95.8109%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="95.5609%" y="229" width="0.0807%" height="15" fill="rgb(219,76,19)" fg:x="1184" fg:w="1"/><text x="95.8109%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (42 samples, 3.39%)</title><rect x="92.3325%" y="309" width="3.3898%" height="15" fill="rgb(250,39,11)" fg:x="1144" fg:w="42"/><text x="92.5825%" y="319.50">&lt;re..</text></g><g><title>regex::builders::string::RegexBuilder::build (42 samples, 3.39%)</title><rect x="92.3325%" y="293" width="3.3898%" height="15" fill="rgb(230,64,31)" fg:x="1144" fg:w="42"/><text x="92.5825%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (42 samples, 3.39%)</title><rect x="92.3325%" y="277" width="3.3898%" height="15" fill="rgb(208,222,23)" fg:x="1144" fg:w="42"/><text x="92.5825%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="95.6416%" y="261" width="0.0807%" height="15" fill="rgb(227,125,18)" fg:x="1185" fg:w="1"/><text x="95.8916%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.6416%" y="245" width="0.0807%" height="15" fill="rgb(234,210,9)" fg:x="1185" fg:w="1"/><text x="95.8916%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.7224%" y="277" width="0.0807%" height="15" fill="rgb(217,127,24)" fg:x="1186" fg:w="1"/><text x="95.9724%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="95.7224%" y="261" width="0.0807%" height="15" fill="rgb(239,141,48)" fg:x="1186" fg:w="1"/><text x="95.9724%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.7224%" y="245" width="0.0807%" height="15" fill="rgb(227,109,8)" fg:x="1186" fg:w="1"/><text x="95.9724%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="95.7224%" y="309" width="0.1614%" height="15" fill="rgb(235,184,23)" fg:x="1186" fg:w="2"/><text x="95.9724%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="95.7224%" y="293" width="0.1614%" height="15" fill="rgb(227,226,48)" fg:x="1186" fg:w="2"/><text x="95.9724%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.8031%" y="277" width="0.0807%" height="15" fill="rgb(206,150,11)" fg:x="1187" fg:w="1"/><text x="96.0531%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.8031%" y="261" width="0.0807%" height="15" fill="rgb(254,2,33)" fg:x="1187" fg:w="1"/><text x="96.0531%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.8031%" y="245" width="0.0807%" height="15" fill="rgb(243,160,20)" fg:x="1187" fg:w="1"/><text x="96.0531%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="95.8838%" y="245" width="0.0807%" height="15" fill="rgb(218,208,30)" fg:x="1188" fg:w="1"/><text x="96.1338%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.9645%" y="229" width="0.0807%" height="15" fill="rgb(224,120,49)" fg:x="1189" fg:w="1"/><text x="96.2145%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="96.0452%" y="229" width="0.1614%" height="15" fill="rgb(246,12,2)" fg:x="1190" fg:w="2"/><text x="96.2952%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="96.0452%" y="213" width="0.1614%" height="15" fill="rgb(236,117,3)" fg:x="1190" fg:w="2"/><text x="96.2952%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (49 samples, 3.95%)</title><rect x="92.3325%" y="325" width="3.9548%" height="15" fill="rgb(216,128,52)" fg:x="1144" fg:w="49"/><text x="92.5825%" y="335.50">inde..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="95.8838%" y="309" width="0.4036%" height="15" fill="rgb(246,145,19)" fg:x="1188" fg:w="5"/><text x="96.1338%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="95.8838%" y="293" width="0.4036%" height="15" fill="rgb(222,11,46)" fg:x="1188" fg:w="5"/><text x="96.1338%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="95.8838%" y="277" width="0.4036%" height="15" fill="rgb(245,82,36)" fg:x="1188" fg:w="5"/><text x="96.1338%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="95.8838%" y="261" width="0.4036%" height="15" fill="rgb(250,73,51)" fg:x="1188" fg:w="5"/><text x="96.1338%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="95.9645%" y="245" width="0.3228%" height="15" fill="rgb(221,189,23)" fg:x="1189" fg:w="4"/><text x="96.2145%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="96.2066%" y="229" width="0.0807%" height="15" fill="rgb(210,33,7)" fg:x="1192" fg:w="1"/><text x="96.4566%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.2873%" y="245" width="0.0807%" height="15" fill="rgb(210,107,22)" fg:x="1193" fg:w="1"/><text x="96.5373%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.2873%" y="229" width="0.0807%" height="15" fill="rgb(222,116,37)" fg:x="1193" fg:w="1"/><text x="96.5373%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.2873%" y="213" width="0.0807%" height="15" fill="rgb(254,17,48)" fg:x="1193" fg:w="1"/><text x="96.5373%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.2873%" y="197" width="0.0807%" height="15" fill="rgb(224,36,32)" fg:x="1193" fg:w="1"/><text x="96.5373%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.2873%" y="181" width="0.0807%" height="15" fill="rgb(232,90,46)" fg:x="1193" fg:w="1"/><text x="96.5373%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.4487%" y="229" width="0.0807%" height="15" fill="rgb(241,66,40)" fg:x="1195" fg:w="1"/><text x="96.6987%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="96.5295%" y="229" width="0.0807%" height="15" fill="rgb(249,184,29)" fg:x="1196" fg:w="1"/><text x="96.7795%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.5295%" y="213" width="0.0807%" height="15" fill="rgb(231,181,1)" fg:x="1196" fg:w="1"/><text x="96.7795%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.32%)</title><rect x="96.3680%" y="245" width="0.3228%" height="15" fill="rgb(224,94,2)" fg:x="1194" fg:w="4"/><text x="96.6180%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="96.6102%" y="229" width="0.0807%" height="15" fill="rgb(229,170,15)" fg:x="1197" fg:w="1"/><text x="96.8602%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="96.6102%" y="213" width="0.0807%" height="15" fill="rgb(240,127,35)" fg:x="1197" fg:w="1"/><text x="96.8602%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="96.6102%" y="197" width="0.0807%" height="15" fill="rgb(248,196,34)" fg:x="1197" fg:w="1"/><text x="96.8602%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6102%" y="181" width="0.0807%" height="15" fill="rgb(236,137,7)" fg:x="1197" fg:w="1"/><text x="96.8602%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6102%" y="165" width="0.0807%" height="15" fill="rgb(235,127,16)" fg:x="1197" fg:w="1"/><text x="96.8602%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="96.6102%" y="149" width="0.0807%" height="15" fill="rgb(250,192,54)" fg:x="1197" fg:w="1"/><text x="96.8602%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="96.6102%" y="133" width="0.0807%" height="15" fill="rgb(218,98,20)" fg:x="1197" fg:w="1"/><text x="96.8602%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.6909%" y="213" width="0.0807%" height="15" fill="rgb(230,176,47)" fg:x="1198" fg:w="1"/><text x="96.9409%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="96.6909%" y="197" width="0.0807%" height="15" fill="rgb(244,2,33)" fg:x="1198" fg:w="1"/><text x="96.9409%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6909%" y="181" width="0.0807%" height="15" fill="rgb(231,100,17)" fg:x="1198" fg:w="1"/><text x="96.9409%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6909%" y="165" width="0.0807%" height="15" fill="rgb(245,23,12)" fg:x="1198" fg:w="1"/><text x="96.9409%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="96.6909%" y="245" width="0.1614%" height="15" fill="rgb(249,55,22)" fg:x="1198" fg:w="2"/><text x="96.9409%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="96.6909%" y="229" width="0.1614%" height="15" fill="rgb(207,134,9)" fg:x="1198" fg:w="2"/><text x="96.9409%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="96.7716%" y="213" width="0.0807%" height="15" fill="rgb(218,134,0)" fg:x="1199" fg:w="1"/><text x="97.0216%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="96.7716%" y="197" width="0.0807%" height="15" fill="rgb(213,212,33)" fg:x="1199" fg:w="1"/><text x="97.0216%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.8523%" y="213" width="0.0807%" height="15" fill="rgb(252,106,18)" fg:x="1200" fg:w="1"/><text x="97.1023%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.8523%" y="197" width="0.0807%" height="15" fill="rgb(208,126,42)" fg:x="1200" fg:w="1"/><text x="97.1023%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (9 samples, 0.73%)</title><rect x="96.2873%" y="293" width="0.7264%" height="15" fill="rgb(246,175,29)" fg:x="1193" fg:w="9"/><text x="96.5373%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (9 samples, 0.73%)</title><rect x="96.2873%" y="277" width="0.7264%" height="15" fill="rgb(215,13,50)" fg:x="1193" fg:w="9"/><text x="96.5373%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9 samples, 0.73%)</title><rect x="96.2873%" y="261" width="0.7264%" height="15" fill="rgb(216,172,15)" fg:x="1193" fg:w="9"/><text x="96.5373%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="96.8523%" y="245" width="0.1614%" height="15" fill="rgb(212,103,13)" fg:x="1200" fg:w="2"/><text x="97.1023%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.8523%" y="229" width="0.1614%" height="15" fill="rgb(231,171,36)" fg:x="1200" fg:w="2"/><text x="97.1023%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.9330%" y="213" width="0.0807%" height="15" fill="rgb(250,123,20)" fg:x="1201" fg:w="1"/><text x="97.1830%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="96.9330%" y="197" width="0.0807%" height="15" fill="rgb(212,53,50)" fg:x="1201" fg:w="1"/><text x="97.1830%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="96.9330%" y="181" width="0.0807%" height="15" fill="rgb(243,54,12)" fg:x="1201" fg:w="1"/><text x="97.1830%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="96.9330%" y="165" width="0.0807%" height="15" fill="rgb(234,101,34)" fg:x="1201" fg:w="1"/><text x="97.1830%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="97.0137%" y="293" width="0.0807%" height="15" fill="rgb(254,67,22)" fg:x="1202" fg:w="1"/><text x="97.2637%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="97.0137%" y="277" width="0.0807%" height="15" fill="rgb(250,35,47)" fg:x="1202" fg:w="1"/><text x="97.2637%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="97.0137%" y="261" width="0.0807%" height="15" fill="rgb(226,126,38)" fg:x="1202" fg:w="1"/><text x="97.2637%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="97.0137%" y="245" width="0.0807%" height="15" fill="rgb(216,138,53)" fg:x="1202" fg:w="1"/><text x="97.2637%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (11 samples, 0.89%)</title><rect x="96.2873%" y="309" width="0.8878%" height="15" fill="rgb(246,199,43)" fg:x="1193" fg:w="11"/><text x="96.5373%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="97.0944%" y="293" width="0.0807%" height="15" fill="rgb(232,125,11)" fg:x="1203" fg:w="1"/><text x="97.3444%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="97.0944%" y="277" width="0.0807%" height="15" fill="rgb(218,219,45)" fg:x="1203" fg:w="1"/><text x="97.3444%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.0944%" y="261" width="0.0807%" height="15" fill="rgb(216,102,54)" fg:x="1203" fg:w="1"/><text x="97.3444%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="97.0944%" y="245" width="0.0807%" height="15" fill="rgb(250,228,7)" fg:x="1203" fg:w="1"/><text x="97.3444%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (120 samples, 9.69%)</title><rect x="87.6513%" y="405" width="9.6852%" height="15" fill="rgb(226,125,25)" fg:x="1086" fg:w="120"/><text x="87.9013%" y="415.50">&lt;&amp;kernel::mode..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (108 samples, 8.72%)</title><rect x="88.6199%" y="389" width="8.7167%" height="15" fill="rgb(224,165,27)" fg:x="1098" fg:w="108"/><text x="88.8699%" y="399.50">plugins_core..</text></g><g><title>indefinite::indefinite (108 samples, 8.72%)</title><rect x="88.6199%" y="373" width="8.7167%" height="15" fill="rgb(233,86,3)" fg:x="1098" fg:w="108"/><text x="88.8699%" y="383.50">indefinite::..</text></g><g><title>indefinite::methods::indefinite (108 samples, 8.72%)</title><rect x="88.6199%" y="357" width="8.7167%" height="15" fill="rgb(228,116,20)" fg:x="1098" fg:w="108"/><text x="88.8699%" y="367.50">indefinite::..</text></g><g><title>indefinite::methods::apply_rules (108 samples, 8.72%)</title><rect x="88.6199%" y="341" width="8.7167%" height="15" fill="rgb(209,192,17)" fg:x="1098" fg:w="108"/><text x="88.8699%" y="351.50">indefinite::..</text></g><g><title>indefinite::rules::other::Other::run (13 samples, 1.05%)</title><rect x="96.2873%" y="325" width="1.0492%" height="15" fill="rgb(224,88,34)" fg:x="1193" fg:w="13"/><text x="96.5373%" y="335.50"></text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="97.1751%" y="309" width="0.1614%" height="15" fill="rgb(233,38,6)" fg:x="1204" fg:w="2"/><text x="97.4251%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.2559%" y="293" width="0.0807%" height="15" fill="rgb(212,59,30)" fg:x="1205" fg:w="1"/><text x="97.5059%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3366%" y="389" width="0.0807%" height="15" fill="rgb(213,80,3)" fg:x="1206" fg:w="1"/><text x="97.5866%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.3366%" y="373" width="0.0807%" height="15" fill="rgb(251,178,7)" fg:x="1206" fg:w="1"/><text x="97.5866%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3366%" y="357" width="0.0807%" height="15" fill="rgb(213,154,26)" fg:x="1206" fg:w="1"/><text x="97.5866%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.4173%" y="357" width="0.0807%" height="15" fill="rgb(238,165,49)" fg:x="1207" fg:w="1"/><text x="97.6673%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="97.3366%" y="405" width="0.2421%" height="15" fill="rgb(248,91,46)" fg:x="1206" fg:w="3"/><text x="97.5866%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.4173%" y="389" width="0.1614%" height="15" fill="rgb(244,21,52)" fg:x="1207" fg:w="2"/><text x="97.6673%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.4173%" y="373" width="0.1614%" height="15" fill="rgb(247,122,20)" fg:x="1207" fg:w="2"/><text x="97.6673%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.4980%" y="357" width="0.0807%" height="15" fill="rgb(218,27,9)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.4980%" y="341" width="0.0807%" height="15" fill="rgb(246,7,6)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.4980%" y="325" width="0.0807%" height="15" fill="rgb(227,135,54)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="335.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.4980%" y="309" width="0.0807%" height="15" fill="rgb(247,14,11)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.4980%" y="293" width="0.0807%" height="15" fill="rgb(206,149,34)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4980%" y="277" width="0.0807%" height="15" fill="rgb(227,228,4)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.6594%" y="325" width="0.0807%" height="15" fill="rgb(238,218,28)" fg:x="1210" fg:w="1"/><text x="97.9094%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6594%" y="309" width="0.0807%" height="15" fill="rgb(252,86,40)" fg:x="1210" fg:w="1"/><text x="97.9094%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6594%" y="293" width="0.0807%" height="15" fill="rgb(251,225,11)" fg:x="1210" fg:w="1"/><text x="97.9094%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.6594%" y="277" width="0.0807%" height="15" fill="rgb(206,46,49)" fg:x="1210" fg:w="1"/><text x="97.9094%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6594%" y="261" width="0.0807%" height="15" fill="rgb(245,128,24)" fg:x="1210" fg:w="1"/><text x="97.9094%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.6594%" y="245" width="0.0807%" height="15" fill="rgb(219,177,34)" fg:x="1210" fg:w="1"/><text x="97.9094%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="97.5787%" y="405" width="0.2421%" height="15" fill="rgb(218,60,48)" fg:x="1209" fg:w="3"/><text x="97.8287%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="97.5787%" y="389" width="0.2421%" height="15" fill="rgb(221,11,5)" fg:x="1209" fg:w="3"/><text x="97.8287%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="97.5787%" y="373" width="0.2421%" height="15" fill="rgb(220,148,13)" fg:x="1209" fg:w="3"/><text x="97.8287%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="97.6594%" y="357" width="0.1614%" height="15" fill="rgb(210,16,3)" fg:x="1210" fg:w="2"/><text x="97.9094%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="97.6594%" y="341" width="0.1614%" height="15" fill="rgb(236,80,2)" fg:x="1210" fg:w="2"/><text x="97.9094%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="97.7401%" y="325" width="0.0807%" height="15" fill="rgb(239,129,19)" fg:x="1211" fg:w="1"/><text x="97.9901%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7401%" y="309" width="0.0807%" height="15" fill="rgb(220,106,35)" fg:x="1211" fg:w="1"/><text x="97.9901%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7401%" y="293" width="0.0807%" height="15" fill="rgb(252,139,45)" fg:x="1211" fg:w="1"/><text x="97.9901%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.7401%" y="277" width="0.0807%" height="15" fill="rgb(229,8,36)" fg:x="1211" fg:w="1"/><text x="97.9901%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7401%" y="261" width="0.0807%" height="15" fill="rgb(230,126,33)" fg:x="1211" fg:w="1"/><text x="97.9901%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (127 samples, 10.25%)</title><rect x="87.6513%" y="565" width="10.2502%" height="15" fill="rgb(239,140,21)" fg:x="1086" fg:w="127"/><text x="87.9013%" y="575.50">kernel::plugins..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (127 samples, 10.25%)</title><rect x="87.6513%" y="549" width="10.2502%" height="15" fill="rgb(254,104,9)" fg:x="1086" fg:w="127"/><text x="87.9013%" y="559.50">&lt;plugins_dynlib..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (127 samples, 10.25%)</title><rect x="87.6513%" y="533" width="10.2502%" height="15" fill="rgb(239,52,14)" fg:x="1086" fg:w="127"/><text x="87.9013%" y="543.50">kernel::plugins..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (127 samples, 10.25%)</title><rect x="87.6513%" y="517" width="10.2502%" height="15" fill="rgb(208,227,44)" fg:x="1086" fg:w="127"/><text x="87.9013%" y="527.50">core::ops::func..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (127 samples, 10.25%)</title><rect x="87.6513%" y="501" width="10.2502%" height="15" fill="rgb(246,18,19)" fg:x="1086" fg:w="127"/><text x="87.9013%" y="511.50">kernel::plugins..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (127 samples, 10.25%)</title><rect x="87.6513%" y="485" width="10.2502%" height="15" fill="rgb(235,228,25)" fg:x="1086" fg:w="127"/><text x="87.9013%" y="495.50">core::ops::func..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (127 samples, 10.25%)</title><rect x="87.6513%" y="469" width="10.2502%" height="15" fill="rgb(240,156,20)" fg:x="1086" fg:w="127"/><text x="87.9013%" y="479.50">&lt;alloc::boxed::..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (127 samples, 10.25%)</title><rect x="87.6513%" y="453" width="10.2502%" height="15" fill="rgb(224,8,20)" fg:x="1086" fg:w="127"/><text x="87.9013%" y="463.50">&lt;engine::sessio..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (127 samples, 10.25%)</title><rect x="87.6513%" y="437" width="10.2502%" height="15" fill="rgb(214,12,52)" fg:x="1086" fg:w="127"/><text x="87.9013%" y="447.50">&lt;plugins_core::..</text></g><g><title>plugins_core::looking::model::new_area_observation (127 samples, 10.25%)</title><rect x="87.6513%" y="421" width="10.2502%" height="15" fill="rgb(211,220,47)" fg:x="1086" fg:w="127"/><text x="87.9013%" y="431.50">plugins_core::l..</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="97.8208%" y="405" width="0.0807%" height="15" fill="rgb(250,173,5)" fg:x="1212" fg:w="1"/><text x="98.0708%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="97.8208%" y="389" width="0.0807%" height="15" fill="rgb(250,125,52)" fg:x="1212" fg:w="1"/><text x="98.0708%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8208%" y="373" width="0.0807%" height="15" fill="rgb(209,133,18)" fg:x="1212" fg:w="1"/><text x="98.0708%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.0630%" y="517" width="0.0807%" height="15" fill="rgb(216,173,22)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0630%" y="501" width="0.0807%" height="15" fill="rgb(205,3,22)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0630%" y="485" width="0.0807%" height="15" fill="rgb(248,22,20)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.0630%" y="469" width="0.0807%" height="15" fill="rgb(233,6,29)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0630%" y="453" width="0.0807%" height="15" fill="rgb(240,22,54)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1437%" y="453" width="0.0807%" height="15" fill="rgb(231,133,32)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1437%" y="437" width="0.0807%" height="15" fill="rgb(248,193,4)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1437%" y="421" width="0.0807%" height="15" fill="rgb(211,178,46)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1437%" y="405" width="0.0807%" height="15" fill="rgb(224,5,42)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1437%" y="389" width="0.0807%" height="15" fill="rgb(239,176,25)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1437%" y="373" width="0.0807%" height="15" fill="rgb(245,187,50)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1437%" y="357" width="0.0807%" height="15" fill="rgb(248,24,15)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.1437%" y="341" width="0.0807%" height="15" fill="rgb(205,166,13)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.1437%" y="325" width="0.0807%" height="15" fill="rgb(208,114,23)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.1437%" y="309" width="0.0807%" height="15" fill="rgb(239,127,18)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1437%" y="293" width="0.0807%" height="15" fill="rgb(219,154,28)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1437%" y="277" width="0.0807%" height="15" fill="rgb(225,157,23)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.1437%" y="261" width="0.0807%" height="15" fill="rgb(219,8,6)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.1437%" y="245" width="0.0807%" height="15" fill="rgb(212,47,6)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.1437%" y="229" width="0.0807%" height="15" fill="rgb(224,190,4)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.1437%" y="213" width="0.0807%" height="15" fill="rgb(239,183,29)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1437%" y="197" width="0.0807%" height="15" fill="rgb(213,57,7)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.2244%" y="453" width="0.0807%" height="15" fill="rgb(216,148,1)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2244%" y="437" width="0.0807%" height="15" fill="rgb(236,182,29)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2244%" y="421" width="0.0807%" height="15" fill="rgb(244,120,48)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.2244%" y="405" width="0.0807%" height="15" fill="rgb(206,71,34)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2244%" y="389" width="0.0807%" height="15" fill="rgb(242,32,6)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="399.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.2244%" y="373" width="0.0807%" height="15" fill="rgb(241,35,3)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3051%" y="357" width="0.0807%" height="15" fill="rgb(222,62,19)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3051%" y="341" width="0.0807%" height="15" fill="rgb(223,110,41)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3051%" y="325" width="0.0807%" height="15" fill="rgb(208,224,4)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3051%" y="309" width="0.0807%" height="15" fill="rgb(241,137,19)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.3051%" y="293" width="0.0807%" height="15" fill="rgb(244,24,17)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3051%" y="277" width="0.0807%" height="15" fill="rgb(245,178,49)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3051%" y="261" width="0.0807%" height="15" fill="rgb(219,160,38)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.3051%" y="453" width="0.1614%" height="15" fill="rgb(228,137,14)" fg:x="1218" fg:w="2"/><text x="98.5551%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.3051%" y="437" width="0.1614%" height="15" fill="rgb(237,134,11)" fg:x="1218" fg:w="2"/><text x="98.5551%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.3051%" y="421" width="0.1614%" height="15" fill="rgb(211,126,44)" fg:x="1218" fg:w="2"/><text x="98.5551%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.3051%" y="405" width="0.1614%" height="15" fill="rgb(226,171,33)" fg:x="1218" fg:w="2"/><text x="98.5551%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.3051%" y="389" width="0.1614%" height="15" fill="rgb(253,99,13)" fg:x="1218" fg:w="2"/><text x="98.5551%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.3051%" y="373" width="0.1614%" height="15" fill="rgb(244,48,7)" fg:x="1218" fg:w="2"/><text x="98.5551%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.3858%" y="357" width="0.0807%" height="15" fill="rgb(244,217,54)" fg:x="1219" fg:w="1"/><text x="98.6358%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.3858%" y="341" width="0.0807%" height="15" fill="rgb(224,15,18)" fg:x="1219" fg:w="1"/><text x="98.6358%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.3858%" y="325" width="0.0807%" height="15" fill="rgb(244,99,12)" fg:x="1219" fg:w="1"/><text x="98.6358%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3858%" y="309" width="0.0807%" height="15" fill="rgb(233,226,8)" fg:x="1219" fg:w="1"/><text x="98.6358%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.4665%" y="341" width="0.0807%" height="15" fill="rgb(229,211,3)" fg:x="1220" fg:w="1"/><text x="98.7165%" y="351.50"></text></g><g><title>plugins_core::tools::contained_by (7 samples, 0.56%)</title><rect x="98.0630%" y="533" width="0.5650%" height="15" fill="rgb(216,140,21)" fg:x="1215" fg:w="7"/><text x="98.3130%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="98.1437%" y="517" width="0.4843%" height="15" fill="rgb(234,122,30)" fg:x="1216" fg:w="6"/><text x="98.3937%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="98.1437%" y="501" width="0.4843%" height="15" fill="rgb(236,25,46)" fg:x="1216" fg:w="6"/><text x="98.3937%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="98.1437%" y="485" width="0.4843%" height="15" fill="rgb(217,52,54)" fg:x="1216" fg:w="6"/><text x="98.3937%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="98.1437%" y="469" width="0.4843%" height="15" fill="rgb(222,29,26)" fg:x="1216" fg:w="6"/><text x="98.3937%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="98.4665%" y="453" width="0.1614%" height="15" fill="rgb(216,177,29)" fg:x="1220" fg:w="2"/><text x="98.7165%" y="463.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="98.4665%" y="437" width="0.1614%" height="15" fill="rgb(247,136,51)" fg:x="1220" fg:w="2"/><text x="98.7165%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.4665%" y="421" width="0.1614%" height="15" fill="rgb(231,47,47)" fg:x="1220" fg:w="2"/><text x="98.7165%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.4665%" y="405" width="0.1614%" height="15" fill="rgb(211,192,36)" fg:x="1220" fg:w="2"/><text x="98.7165%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.4665%" y="389" width="0.1614%" height="15" fill="rgb(229,156,32)" fg:x="1220" fg:w="2"/><text x="98.7165%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.4665%" y="373" width="0.1614%" height="15" fill="rgb(248,213,20)" fg:x="1220" fg:w="2"/><text x="98.7165%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.4665%" y="357" width="0.1614%" height="15" fill="rgb(217,64,7)" fg:x="1220" fg:w="2"/><text x="98.7165%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.5472%" y="341" width="0.0807%" height="15" fill="rgb(232,142,8)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.5472%" y="325" width="0.0807%" height="15" fill="rgb(224,92,44)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.5472%" y="309" width="0.0807%" height="15" fill="rgb(214,169,17)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.5472%" y="293" width="0.0807%" height="15" fill="rgb(210,59,37)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.5472%" y="277" width="0.0807%" height="15" fill="rgb(214,116,48)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.6279%" y="453" width="0.0807%" height="15" fill="rgb(244,191,6)" fg:x="1222" fg:w="1"/><text x="98.8779%" y="463.50"></text></g><g><title>engine::session::Session::captured (143 samples, 11.54%)</title><rect x="87.2478%" y="709" width="11.5416%" height="15" fill="rgb(241,50,52)" fg:x="1081" fg:w="143"/><text x="87.4978%" y="719.50">engine::session::..</text></g><g><title>engine::session::logs::capture (143 samples, 11.54%)</title><rect x="87.2478%" y="693" width="11.5416%" height="15" fill="rgb(236,75,39)" fg:x="1081" fg:w="143"/><text x="87.4978%" y="703.50">engine::session::..</text></g><g><title>tracing_core::dispatcher::with_default (143 samples, 11.54%)</title><rect x="87.2478%" y="677" width="11.5416%" height="15" fill="rgb(236,99,0)" fg:x="1081" fg:w="143"/><text x="87.4978%" y="687.50">tracing_core::dis..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (143 samples, 11.54%)</title><rect x="87.2478%" y="661" width="11.5416%" height="15" fill="rgb(207,202,15)" fg:x="1081" fg:w="143"/><text x="87.4978%" y="671.50">&lt;engine::session:..</text></g><g><title>kernel::plugins::mw::apply_middleware (142 samples, 11.46%)</title><rect x="87.3285%" y="645" width="11.4609%" height="15" fill="rgb(233,207,14)" fg:x="1082" fg:w="142"/><text x="87.5785%" y="655.50">kernel::plugins::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (142 samples, 11.46%)</title><rect x="87.3285%" y="629" width="11.4609%" height="15" fill="rgb(226,27,51)" fg:x="1082" fg:w="142"/><text x="87.5785%" y="639.50">kernel::plugins::..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (142 samples, 11.46%)</title><rect x="87.3285%" y="613" width="11.4609%" height="15" fill="rgb(206,104,42)" fg:x="1082" fg:w="142"/><text x="87.5785%" y="623.50">&lt;engine::session:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (138 samples, 11.14%)</title><rect x="87.6513%" y="597" width="11.1380%" height="15" fill="rgb(212,225,4)" fg:x="1086" fg:w="138"/><text x="87.9013%" y="607.50">kernel::plugins:..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (138 samples, 11.14%)</title><rect x="87.6513%" y="581" width="11.1380%" height="15" fill="rgb(233,96,42)" fg:x="1086" fg:w="138"/><text x="87.9013%" y="591.50">&lt;plugins_rune::R..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (11 samples, 0.89%)</title><rect x="97.9015%" y="565" width="0.8878%" height="15" fill="rgb(229,21,32)" fg:x="1213" fg:w="11"/><text x="98.1515%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (11 samples, 0.89%)</title><rect x="97.9015%" y="549" width="0.8878%" height="15" fill="rgb(226,216,24)" fg:x="1213" fg:w="11"/><text x="98.1515%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="98.6279%" y="533" width="0.1614%" height="15" fill="rgb(221,163,17)" fg:x="1222" fg:w="2"/><text x="98.8779%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.6279%" y="517" width="0.1614%" height="15" fill="rgb(216,216,42)" fg:x="1222" fg:w="2"/><text x="98.8779%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.6279%" y="501" width="0.1614%" height="15" fill="rgb(240,118,7)" fg:x="1222" fg:w="2"/><text x="98.8779%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.6279%" y="485" width="0.1614%" height="15" fill="rgb(221,67,37)" fg:x="1222" fg:w="2"/><text x="98.8779%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.6279%" y="469" width="0.1614%" height="15" fill="rgb(241,32,44)" fg:x="1222" fg:w="2"/><text x="98.8779%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7086%" y="453" width="0.0807%" height="15" fill="rgb(235,204,43)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="98.7893%" y="693" width="0.0807%" height="15" fill="rgb(213,116,10)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8701%" y="565" width="0.0807%" height="15" fill="rgb(239,15,48)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.8701%" y="549" width="0.0807%" height="15" fill="rgb(207,123,36)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.8701%" y="533" width="0.0807%" height="15" fill="rgb(209,103,30)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8701%" y="517" width="0.0807%" height="15" fill="rgb(238,100,19)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8701%" y="501" width="0.0807%" height="15" fill="rgb(244,30,14)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="511.50"></text></g><g><title>engine::session::internal::Added::find_refs (2 samples, 0.16%)</title><rect x="98.8701%" y="693" width="0.1614%" height="15" fill="rgb(249,174,6)" fg:x="1225" fg:w="2"/><text x="99.1201%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.8701%" y="677" width="0.1614%" height="15" fill="rgb(235,213,41)" fg:x="1225" fg:w="2"/><text x="99.1201%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.8701%" y="661" width="0.1614%" height="15" fill="rgb(213,118,6)" fg:x="1225" fg:w="2"/><text x="99.1201%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.8701%" y="645" width="0.1614%" height="15" fill="rgb(235,44,51)" fg:x="1225" fg:w="2"/><text x="99.1201%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.8701%" y="629" width="0.1614%" height="15" fill="rgb(217,9,53)" fg:x="1225" fg:w="2"/><text x="99.1201%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.8701%" y="613" width="0.1614%" height="15" fill="rgb(237,172,34)" fg:x="1225" fg:w="2"/><text x="99.1201%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.8701%" y="597" width="0.1614%" height="15" fill="rgb(206,206,11)" fg:x="1225" fg:w="2"/><text x="99.1201%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.8701%" y="581" width="0.1614%" height="15" fill="rgb(214,149,29)" fg:x="1225" fg:w="2"/><text x="99.1201%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9508%" y="565" width="0.0807%" height="15" fill="rgb(208,123,3)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9508%" y="549" width="0.0807%" height="15" fill="rgb(229,126,4)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::new_from_entity (1 samples, 0.08%)</title><rect x="99.0315%" y="677" width="0.0807%" height="15" fill="rgb(222,92,36)" fg:x="1227" fg:w="1"/><text x="99.2815%" y="687.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1122%" y="581" width="0.0807%" height="15" fill="rgb(216,39,41)" fg:x="1228" fg:w="1"/><text x="99.3622%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1122%" y="565" width="0.0807%" height="15" fill="rgb(253,127,28)" fg:x="1228" fg:w="1"/><text x="99.3622%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1122%" y="549" width="0.0807%" height="15" fill="rgb(249,152,51)" fg:x="1228" fg:w="1"/><text x="99.3622%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.1122%" y="677" width="0.2421%" height="15" fill="rgb(209,123,42)" fg:x="1228" fg:w="3"/><text x="99.3622%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.1122%" y="661" width="0.2421%" height="15" fill="rgb(241,118,22)" fg:x="1228" fg:w="3"/><text x="99.3622%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.1122%" y="645" width="0.2421%" height="15" fill="rgb(208,25,7)" fg:x="1228" fg:w="3"/><text x="99.3622%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="99.1122%" y="629" width="0.2421%" height="15" fill="rgb(243,144,39)" fg:x="1228" fg:w="3"/><text x="99.3622%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.1122%" y="613" width="0.2421%" height="15" fill="rgb(250,50,5)" fg:x="1228" fg:w="3"/><text x="99.3622%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.1122%" y="597" width="0.2421%" height="15" fill="rgb(207,67,11)" fg:x="1228" fg:w="3"/><text x="99.3622%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1929%" y="581" width="0.1614%" height="15" fill="rgb(245,204,40)" fg:x="1229" fg:w="2"/><text x="99.4429%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.1929%" y="565" width="0.1614%" height="15" fill="rgb(238,228,24)" fg:x="1229" fg:w="2"/><text x="99.4429%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.65%)</title><rect x="98.7893%" y="709" width="0.6457%" height="15" fill="rgb(217,116,22)" fg:x="1224" fg:w="8"/><text x="99.0393%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.0315%" y="693" width="0.4036%" height="15" fill="rgb(234,98,12)" fg:x="1227" fg:w="5"/><text x="99.2815%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.3543%" y="677" width="0.0807%" height="15" fill="rgb(242,170,50)" fg:x="1231" fg:w="1"/><text x="99.6043%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.3543%" y="661" width="0.0807%" height="15" fill="rgb(235,7,5)" fg:x="1231" fg:w="1"/><text x="99.6043%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3543%" y="645" width="0.0807%" height="15" fill="rgb(241,114,28)" fg:x="1231" fg:w="1"/><text x="99.6043%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3543%" y="629" width="0.0807%" height="15" fill="rgb(246,112,42)" fg:x="1231" fg:w="1"/><text x="99.6043%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3543%" y="613" width="0.0807%" height="15" fill="rgb(248,228,14)" fg:x="1231" fg:w="1"/><text x="99.6043%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3543%" y="597" width="0.0807%" height="15" fill="rgb(208,133,18)" fg:x="1231" fg:w="1"/><text x="99.6043%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.3543%" y="581" width="0.0807%" height="15" fill="rgb(207,35,49)" fg:x="1231" fg:w="1"/><text x="99.6043%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="99.4350%" y="677" width="0.0807%" height="15" fill="rgb(205,68,36)" fg:x="1232" fg:w="1"/><text x="99.6850%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.5157%" y="661" width="0.0807%" height="15" fill="rgb(245,62,40)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5157%" y="645" width="0.0807%" height="15" fill="rgb(228,27,24)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5157%" y="629" width="0.0807%" height="15" fill="rgb(253,19,12)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5157%" y="613" width="0.0807%" height="15" fill="rgb(232,28,20)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5157%" y="597" width="0.0807%" height="15" fill="rgb(218,35,51)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5157%" y="581" width="0.0807%" height="15" fill="rgb(212,90,40)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.5157%" y="565" width="0.0807%" height="15" fill="rgb(220,172,12)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.5157%" y="549" width="0.0807%" height="15" fill="rgb(226,159,20)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.5157%" y="533" width="0.0807%" height="15" fill="rgb(234,205,16)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.5157%" y="517" width="0.0807%" height="15" fill="rgb(207,9,39)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.5157%" y="501" width="0.0807%" height="15" fill="rgb(249,143,15)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="511.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.5964%" y="661" width="0.0807%" height="15" fill="rgb(253,133,29)" fg:x="1234" fg:w="1"/><text x="99.8464%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.6772%" y="661" width="0.0807%" height="15" fill="rgb(221,187,0)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6772%" y="645" width="0.0807%" height="15" fill="rgb(205,204,26)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6772%" y="629" width="0.0807%" height="15" fill="rgb(224,68,54)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6772%" y="613" width="0.0807%" height="15" fill="rgb(209,67,4)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6772%" y="597" width="0.0807%" height="15" fill="rgb(228,229,18)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6772%" y="581" width="0.0807%" height="15" fill="rgb(231,89,13)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6772%" y="565" width="0.0807%" height="15" fill="rgb(210,182,18)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6772%" y="549" width="0.0807%" height="15" fill="rgb(240,105,2)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="559.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.6772%" y="533" width="0.0807%" height="15" fill="rgb(207,170,50)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="99.6772%" y="517" width="0.0807%" height="15" fill="rgb(232,133,24)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7579%" y="597" width="0.1614%" height="15" fill="rgb(235,166,27)" fg:x="1236" fg:w="2"/><text x="100.0079%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8386%" y="581" width="0.0807%" height="15" fill="rgb(209,19,13)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8386%" y="565" width="0.0807%" height="15" fill="rgb(226,79,39)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8386%" y="549" width="0.0807%" height="15" fill="rgb(222,163,10)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8386%" y="533" width="0.0807%" height="15" fill="rgb(214,44,19)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8386%" y="517" width="0.0807%" height="15" fill="rgb(210,217,13)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8386%" y="501" width="0.0807%" height="15" fill="rgb(237,61,54)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8386%" y="485" width="0.0807%" height="15" fill="rgb(226,184,24)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8386%" y="469" width="0.0807%" height="15" fill="rgb(223,226,4)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="479.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="99.8386%" y="453" width="0.0807%" height="15" fill="rgb(210,26,41)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="463.50"></text></g><g><title>all (1,239 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(220,221,6)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-a6d94806 (1,239 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(225,89,49)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1087.50">simple-a6d94806</text></g><g><title>_start (1,239 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(218,70,45)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,239 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(238,166,21)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,239 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(224,141,44)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,239 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(230,12,49)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,239 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(212,174,12)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,239 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(246,67,9)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,239 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(239,35,23)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,239 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(211,167,0)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,239 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(225,119,45)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,239 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(210,162,6)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,239 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(208,118,35)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,239 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(239,4,53)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,239 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(213,130,21)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,239 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(235,148,0)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,239 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(244,224,18)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,239 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(211,214,4)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,239 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(206,119,25)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (294 samples, 23.73%)</title><rect x="76.2712%" y="789" width="23.7288%" height="15" fill="rgb(243,93,47)" fg:x="945" fg:w="294"/><text x="76.5212%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; a..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (294 samples, 23.73%)</title><rect x="76.2712%" y="773" width="23.7288%" height="15" fill="rgb(224,194,6)" fg:x="945" fg:w="294"/><text x="76.5212%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (294 samples, 23.73%)</title><rect x="76.2712%" y="757" width="23.7288%" height="15" fill="rgb(243,229,6)" fg:x="945" fg:w="294"/><text x="76.5212%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (159 samples, 12.83%)</title><rect x="87.1671%" y="741" width="12.8329%" height="15" fill="rgb(207,23,50)" fg:x="1080" fg:w="159"/><text x="87.4171%" y="751.50">engine::session::Se..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (159 samples, 12.83%)</title><rect x="87.1671%" y="725" width="12.8329%" height="15" fill="rgb(253,192,32)" fg:x="1080" fg:w="159"/><text x="87.4171%" y="735.50">engine::session::Se..</text></g><g><title>kernel::model::EntityPtrResolver::world (7 samples, 0.56%)</title><rect x="99.4350%" y="709" width="0.5650%" height="15" fill="rgb(213,21,6)" fg:x="1232" fg:w="7"/><text x="99.6850%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="99.4350%" y="693" width="0.5650%" height="15" fill="rgb(243,151,13)" fg:x="1232" fg:w="7"/><text x="99.6850%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="99.5157%" y="677" width="0.4843%" height="15" fill="rgb(233,165,41)" fg:x="1233" fg:w="6"/><text x="99.7657%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="99.7579%" y="661" width="0.2421%" height="15" fill="rgb(246,176,45)" fg:x="1236" fg:w="3"/><text x="100.0079%" y="671.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="99.7579%" y="645" width="0.2421%" height="15" fill="rgb(217,170,52)" fg:x="1236" fg:w="3"/><text x="100.0079%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.7579%" y="629" width="0.2421%" height="15" fill="rgb(214,203,54)" fg:x="1236" fg:w="3"/><text x="100.0079%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.7579%" y="613" width="0.2421%" height="15" fill="rgb(248,215,49)" fg:x="1236" fg:w="3"/><text x="100.0079%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9193%" y="597" width="0.0807%" height="15" fill="rgb(208,46,10)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="607.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.9193%" y="581" width="0.0807%" height="15" fill="rgb(254,5,31)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="591.50"></text></g></svg></svg>