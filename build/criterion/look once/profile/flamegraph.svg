<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1190" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1173.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1173.00"> </text><svg id="frames" x="10" width="1180" total_samples="1241"><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.1612%" y="645" width="0.1612%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.4112%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.1612%" y="629" width="0.1612%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.4112%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0000%" y="789" width="0.4835%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (6 samples, 0.48%)</title><rect x="0.0000%" y="773" width="0.4835%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0000%" y="757" width="0.4835%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (5 samples, 0.40%)</title><rect x="0.0806%" y="741" width="0.4029%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="5"/><text x="0.3306%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0806%" y="725" width="0.4029%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="5"/><text x="0.3306%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0806%" y="709" width="0.4029%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="5"/><text x="0.3306%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (5 samples, 0.40%)</title><rect x="0.0806%" y="693" width="0.4029%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="5"/><text x="0.3306%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="0.0806%" y="677" width="0.4029%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="5"/><text x="0.3306%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.1612%" y="661" width="0.3223%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="4"/><text x="0.4112%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.3223%" y="645" width="0.1612%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="2"/><text x="0.5723%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4029%" y="629" width="0.0806%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="1"/><text x="0.6529%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4029%" y="613" width="0.0806%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="1"/><text x="0.6529%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4029%" y="597" width="0.0806%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="1"/><text x="0.6529%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4029%" y="581" width="0.0806%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="0.6529%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.5641%" y="757" width="0.0806%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="1"/><text x="0.8141%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.6446%" y="709" width="0.0806%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1"/><text x="0.8946%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.6446%" y="693" width="0.0806%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="1"/><text x="0.8946%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.6446%" y="677" width="0.0806%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="1"/><text x="0.8946%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.6446%" y="661" width="0.0806%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="1"/><text x="0.8946%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.6446%" y="645" width="0.0806%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="1"/><text x="0.8946%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.6446%" y="629" width="0.0806%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="1"/><text x="0.8946%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.6446%" y="613" width="0.0806%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="1"/><text x="0.8946%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.6446%" y="597" width="0.0806%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="1"/><text x="0.8946%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.6446%" y="581" width="0.0806%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="1"/><text x="0.8946%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="0.7252%" y="693" width="0.0806%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="1"/><text x="0.9752%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="0.7252%" y="677" width="0.0806%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="1"/><text x="0.9752%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.7252%" y="661" width="0.0806%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="1"/><text x="0.9752%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7252%" y="645" width="0.0806%" height="15" fill="rgb(232,36,49)" fg:x="9" fg:w="1"/><text x="0.9752%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.7252%" y="629" width="0.0806%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="1"/><text x="0.9752%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7252%" y="613" width="0.0806%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="1"/><text x="0.9752%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.7252%" y="597" width="0.0806%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="1"/><text x="0.9752%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7252%" y="581" width="0.0806%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="1"/><text x="0.9752%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7252%" y="565" width="0.0806%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="1"/><text x="0.9752%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="0.7252%" y="549" width="0.0806%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="1"/><text x="0.9752%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7252%" y="533" width="0.0806%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="1"/><text x="0.9752%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7252%" y="517" width="0.0806%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="1"/><text x="0.9752%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="0.7252%" y="501" width="0.0806%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="1"/><text x="0.9752%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7252%" y="485" width="0.0806%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="1"/><text x="0.9752%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7252%" y="469" width="0.0806%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="1"/><text x="0.9752%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.8058%" y="645" width="0.0806%" height="15" fill="rgb(208,69,12)" fg:x="10" fg:w="1"/><text x="1.0558%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.8058%" y="629" width="0.0806%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="1"/><text x="1.0558%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.32%)</title><rect x="0.6446%" y="757" width="0.3223%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="4"/><text x="0.8946%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="0.6446%" y="741" width="0.3223%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="4"/><text x="0.8946%" y="751.50"></text></g><g><title>engine::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="0.6446%" y="725" width="0.3223%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="4"/><text x="0.8946%" y="735.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="0.7252%" y="709" width="0.2417%" height="15" fill="rgb(218,138,4)" fg:x="9" fg:w="3"/><text x="0.9752%" y="719.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="0.8058%" y="693" width="0.1612%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="2"/><text x="1.0558%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.8058%" y="677" width="0.1612%" height="15" fill="rgb(239,60,40)" fg:x="10" fg:w="2"/><text x="1.0558%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.8058%" y="661" width="0.1612%" height="15" fill="rgb(206,27,48)" fg:x="10" fg:w="2"/><text x="1.0558%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8864%" y="645" width="0.0806%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="1"/><text x="1.1364%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.8864%" y="629" width="0.0806%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="1"/><text x="1.1364%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8864%" y="613" width="0.0806%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="1"/><text x="1.1364%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.8864%" y="597" width="0.0806%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="1"/><text x="1.1364%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8864%" y="581" width="0.0806%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="1"/><text x="1.1364%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.8864%" y="565" width="0.0806%" height="15" fill="rgb(251,118,11)" fg:x="11" fg:w="1"/><text x="1.1364%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8864%" y="549" width="0.0806%" height="15" fill="rgb(217,147,25)" fg:x="11" fg:w="1"/><text x="1.1364%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.8864%" y="533" width="0.0806%" height="15" fill="rgb(247,81,37)" fg:x="11" fg:w="1"/><text x="1.1364%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8864%" y="517" width="0.0806%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="1"/><text x="1.1364%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.8864%" y="501" width="0.0806%" height="15" fill="rgb(227,1,9)" fg:x="11" fg:w="1"/><text x="1.1364%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8864%" y="485" width="0.0806%" height="15" fill="rgb(248,47,43)" fg:x="11" fg:w="1"/><text x="1.1364%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.8864%" y="469" width="0.0806%" height="15" fill="rgb(221,10,30)" fg:x="11" fg:w="1"/><text x="1.1364%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.8864%" y="453" width="0.0806%" height="15" fill="rgb(210,229,1)" fg:x="11" fg:w="1"/><text x="1.1364%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.8864%" y="437" width="0.0806%" height="15" fill="rgb(222,148,37)" fg:x="11" fg:w="1"/><text x="1.1364%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.8864%" y="421" width="0.0806%" height="15" fill="rgb(234,67,33)" fg:x="11" fg:w="1"/><text x="1.1364%" y="431.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="0.9670%" y="757" width="0.0806%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="1"/><text x="1.2170%" y="767.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="1.0475%" y="757" width="0.0806%" height="15" fill="rgb(247,138,52)" fg:x="13" fg:w="1"/><text x="1.2975%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="1.0475%" y="741" width="0.0806%" height="15" fill="rgb(213,79,30)" fg:x="13" fg:w="1"/><text x="1.2975%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="1.0475%" y="725" width="0.0806%" height="15" fill="rgb(246,177,23)" fg:x="13" fg:w="1"/><text x="1.2975%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.0475%" y="709" width="0.0806%" height="15" fill="rgb(230,62,27)" fg:x="13" fg:w="1"/><text x="1.2975%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.0475%" y="693" width="0.0806%" height="15" fill="rgb(216,154,8)" fg:x="13" fg:w="1"/><text x="1.2975%" y="703.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="1.1281%" y="757" width="0.0806%" height="15" fill="rgb(244,35,45)" fg:x="14" fg:w="1"/><text x="1.3781%" y="767.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="1.1281%" y="741" width="0.0806%" height="15" fill="rgb(251,115,12)" fg:x="14" fg:w="1"/><text x="1.3781%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.1281%" y="725" width="0.0806%" height="15" fill="rgb(240,54,50)" fg:x="14" fg:w="1"/><text x="1.3781%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.1281%" y="709" width="0.0806%" height="15" fill="rgb(233,84,52)" fg:x="14" fg:w="1"/><text x="1.3781%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.1281%" y="693" width="0.0806%" height="15" fill="rgb(207,117,47)" fg:x="14" fg:w="1"/><text x="1.3781%" y="703.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.1281%" y="677" width="0.0806%" height="15" fill="rgb(249,43,39)" fg:x="14" fg:w="1"/><text x="1.3781%" y="687.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="1.2893%" y="709" width="0.1612%" height="15" fill="rgb(209,38,44)" fg:x="16" fg:w="2"/><text x="1.5393%" y="719.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="1.2893%" y="693" width="0.1612%" height="15" fill="rgb(236,212,23)" fg:x="16" fg:w="2"/><text x="1.5393%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.3699%" y="677" width="0.0806%" height="15" fill="rgb(242,79,21)" fg:x="17" fg:w="1"/><text x="1.6199%" y="687.50"></text></g><g><title>libloading::os::unix::Library::open (6 samples, 0.48%)</title><rect x="1.2893%" y="725" width="0.4835%" height="15" fill="rgb(211,96,35)" fg:x="16" fg:w="6"/><text x="1.5393%" y="735.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="1.4504%" y="709" width="0.3223%" height="15" fill="rgb(253,215,40)" fg:x="18" fg:w="4"/><text x="1.7004%" y="719.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="1.4504%" y="693" width="0.3223%" height="15" fill="rgb(211,81,21)" fg:x="18" fg:w="4"/><text x="1.7004%" y="703.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.4504%" y="677" width="0.3223%" height="15" fill="rgb(208,190,38)" fg:x="18" fg:w="4"/><text x="1.7004%" y="687.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.4504%" y="661" width="0.3223%" height="15" fill="rgb(235,213,38)" fg:x="18" fg:w="4"/><text x="1.7004%" y="671.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.4504%" y="645" width="0.3223%" height="15" fill="rgb(237,122,38)" fg:x="18" fg:w="4"/><text x="1.7004%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (8 samples, 0.64%)</title><rect x="1.2087%" y="757" width="0.6446%" height="15" fill="rgb(244,218,35)" fg:x="15" fg:w="8"/><text x="1.4587%" y="767.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.56%)</title><rect x="1.2893%" y="741" width="0.5641%" height="15" fill="rgb(240,68,47)" fg:x="16" fg:w="7"/><text x="1.5393%" y="751.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="1.7728%" y="725" width="0.0806%" height="15" fill="rgb(210,16,53)" fg:x="22" fg:w="1"/><text x="2.0228%" y="735.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.08%)</title><rect x="1.7728%" y="709" width="0.0806%" height="15" fill="rgb(235,124,12)" fg:x="22" fg:w="1"/><text x="2.0228%" y="719.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="1.8533%" y="757" width="0.1612%" height="15" fill="rgb(224,169,11)" fg:x="23" fg:w="2"/><text x="2.1033%" y="767.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="1.8533%" y="741" width="0.1612%" height="15" fill="rgb(250,166,2)" fg:x="23" fg:w="2"/><text x="2.1033%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="1.8533%" y="725" width="0.1612%" height="15" fill="rgb(242,216,29)" fg:x="23" fg:w="2"/><text x="2.1033%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.9339%" y="709" width="0.0806%" height="15" fill="rgb(230,116,27)" fg:x="24" fg:w="1"/><text x="2.1839%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.9339%" y="693" width="0.0806%" height="15" fill="rgb(228,99,48)" fg:x="24" fg:w="1"/><text x="2.1839%" y="703.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.9339%" y="677" width="0.0806%" height="15" fill="rgb(253,11,6)" fg:x="24" fg:w="1"/><text x="2.1839%" y="687.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (20 samples, 1.61%)</title><rect x="0.4835%" y="789" width="1.6116%" height="15" fill="rgb(247,143,39)" fg:x="6" fg:w="20"/><text x="0.7335%" y="799.50"></text></g><g><title>engine::session::Session::new (19 samples, 1.53%)</title><rect x="0.5641%" y="773" width="1.5310%" height="15" fill="rgb(236,97,10)" fg:x="7" fg:w="19"/><text x="0.8141%" y="783.50"></text></g><g><title>kernel::session::set_my_session (1 samples, 0.08%)</title><rect x="2.0145%" y="757" width="0.0806%" height="15" fill="rgb(233,208,19)" fg:x="25" fg:w="1"/><text x="2.2645%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.0951%" y="741" width="0.0806%" height="15" fill="rgb(216,164,2)" fg:x="26" fg:w="1"/><text x="2.3451%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.0951%" y="725" width="0.0806%" height="15" fill="rgb(220,129,5)" fg:x="26" fg:w="1"/><text x="2.3451%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.0951%" y="709" width="0.0806%" height="15" fill="rgb(242,17,10)" fg:x="26" fg:w="1"/><text x="2.3451%" y="719.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.0951%" y="693" width="0.0806%" height="15" fill="rgb(242,107,0)" fg:x="26" fg:w="1"/><text x="2.3451%" y="703.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="2.1757%" y="741" width="0.0806%" height="15" fill="rgb(251,28,31)" fg:x="27" fg:w="1"/><text x="2.4257%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="2.1757%" y="725" width="0.0806%" height="15" fill="rgb(233,223,10)" fg:x="27" fg:w="1"/><text x="2.4257%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.1757%" y="709" width="0.0806%" height="15" fill="rgb(215,21,27)" fg:x="27" fg:w="1"/><text x="2.4257%" y="719.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="2.2562%" y="709" width="0.0806%" height="15" fill="rgb(232,23,21)" fg:x="28" fg:w="1"/><text x="2.5062%" y="719.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="2.2562%" y="693" width="0.0806%" height="15" fill="rgb(244,5,23)" fg:x="28" fg:w="1"/><text x="2.5062%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.2562%" y="677" width="0.0806%" height="15" fill="rgb(226,81,46)" fg:x="28" fg:w="1"/><text x="2.5062%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="2.2562%" y="661" width="0.0806%" height="15" fill="rgb(247,70,30)" fg:x="28" fg:w="1"/><text x="2.5062%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.2562%" y="645" width="0.0806%" height="15" fill="rgb(212,68,19)" fg:x="28" fg:w="1"/><text x="2.5062%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.2562%" y="629" width="0.0806%" height="15" fill="rgb(240,187,13)" fg:x="28" fg:w="1"/><text x="2.5062%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.2562%" y="613" width="0.0806%" height="15" fill="rgb(223,113,26)" fg:x="28" fg:w="1"/><text x="2.5062%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.2562%" y="597" width="0.0806%" height="15" fill="rgb(206,192,2)" fg:x="28" fg:w="1"/><text x="2.5062%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.3368%" y="677" width="0.0806%" height="15" fill="rgb(241,108,4)" fg:x="29" fg:w="1"/><text x="2.5868%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.3368%" y="661" width="0.0806%" height="15" fill="rgb(247,173,49)" fg:x="29" fg:w="1"/><text x="2.5868%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.3368%" y="645" width="0.0806%" height="15" fill="rgb(224,114,35)" fg:x="29" fg:w="1"/><text x="2.5868%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="2.3368%" y="693" width="0.1612%" height="15" fill="rgb(245,159,27)" fg:x="29" fg:w="2"/><text x="2.5868%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.4174%" y="677" width="0.0806%" height="15" fill="rgb(245,172,44)" fg:x="30" fg:w="1"/><text x="2.6674%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.4174%" y="661" width="0.0806%" height="15" fill="rgb(236,23,11)" fg:x="30" fg:w="1"/><text x="2.6674%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.4174%" y="645" width="0.0806%" height="15" fill="rgb(205,117,38)" fg:x="30" fg:w="1"/><text x="2.6674%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.4980%" y="677" width="0.1612%" height="15" fill="rgb(237,72,25)" fg:x="31" fg:w="2"/><text x="2.7480%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.4980%" y="661" width="0.1612%" height="15" fill="rgb(244,70,9)" fg:x="31" fg:w="2"/><text x="2.7480%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="2.4980%" y="645" width="0.1612%" height="15" fill="rgb(217,125,39)" fg:x="31" fg:w="2"/><text x="2.7480%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.4980%" y="629" width="0.1612%" height="15" fill="rgb(235,36,10)" fg:x="31" fg:w="2"/><text x="2.7480%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="2.4980%" y="613" width="0.1612%" height="15" fill="rgb(251,123,47)" fg:x="31" fg:w="2"/><text x="2.7480%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="2.4980%" y="597" width="0.1612%" height="15" fill="rgb(221,13,13)" fg:x="31" fg:w="2"/><text x="2.7480%" y="607.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="2.4980%" y="581" width="0.1612%" height="15" fill="rgb(238,131,9)" fg:x="31" fg:w="2"/><text x="2.7480%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.6591%" y="661" width="0.0806%" height="15" fill="rgb(211,50,8)" fg:x="33" fg:w="1"/><text x="2.9091%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6591%" y="645" width="0.0806%" height="15" fill="rgb(245,182,24)" fg:x="33" fg:w="1"/><text x="2.9091%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6591%" y="629" width="0.0806%" height="15" fill="rgb(242,14,37)" fg:x="33" fg:w="1"/><text x="2.9091%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.6591%" y="613" width="0.0806%" height="15" fill="rgb(246,228,12)" fg:x="33" fg:w="1"/><text x="2.9091%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.6591%" y="597" width="0.0806%" height="15" fill="rgb(213,55,15)" fg:x="33" fg:w="1"/><text x="2.9091%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="2.6591%" y="581" width="0.0806%" height="15" fill="rgb(209,9,3)" fg:x="33" fg:w="1"/><text x="2.9091%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.7397%" y="645" width="0.0806%" height="15" fill="rgb(230,59,30)" fg:x="34" fg:w="1"/><text x="2.9897%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.7397%" y="629" width="0.0806%" height="15" fill="rgb(209,121,21)" fg:x="34" fg:w="1"/><text x="2.9897%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.7397%" y="613" width="0.0806%" height="15" fill="rgb(220,109,13)" fg:x="34" fg:w="1"/><text x="2.9897%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="2.7397%" y="597" width="0.0806%" height="15" fill="rgb(232,18,1)" fg:x="34" fg:w="1"/><text x="2.9897%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.8203%" y="629" width="0.1612%" height="15" fill="rgb(215,41,42)" fg:x="35" fg:w="2"/><text x="3.0703%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.8203%" y="613" width="0.1612%" height="15" fill="rgb(224,123,36)" fg:x="35" fg:w="2"/><text x="3.0703%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="2.8203%" y="597" width="0.1612%" height="15" fill="rgb(240,125,3)" fg:x="35" fg:w="2"/><text x="3.0703%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.8203%" y="581" width="0.1612%" height="15" fill="rgb(205,98,50)" fg:x="35" fg:w="2"/><text x="3.0703%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.9009%" y="565" width="0.0806%" height="15" fill="rgb(205,185,37)" fg:x="36" fg:w="1"/><text x="3.1509%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.9009%" y="549" width="0.0806%" height="15" fill="rgb(238,207,15)" fg:x="36" fg:w="1"/><text x="3.1509%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.9009%" y="533" width="0.0806%" height="15" fill="rgb(213,199,42)" fg:x="36" fg:w="1"/><text x="3.1509%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.73%)</title><rect x="2.3368%" y="709" width="0.7252%" height="15" fill="rgb(235,201,11)" fg:x="29" fg:w="9"/><text x="2.5868%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="2.4980%" y="693" width="0.5641%" height="15" fill="rgb(207,46,11)" fg:x="31" fg:w="7"/><text x="2.7480%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="2.6591%" y="677" width="0.4029%" height="15" fill="rgb(241,35,35)" fg:x="33" fg:w="5"/><text x="2.9091%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="2.7397%" y="661" width="0.3223%" height="15" fill="rgb(243,32,47)" fg:x="34" fg:w="4"/><text x="2.9897%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.8203%" y="645" width="0.2417%" height="15" fill="rgb(247,202,23)" fg:x="35" fg:w="3"/><text x="3.0703%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.9815%" y="629" width="0.0806%" height="15" fill="rgb(219,102,11)" fg:x="37" fg:w="1"/><text x="3.2315%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.9815%" y="613" width="0.0806%" height="15" fill="rgb(243,110,44)" fg:x="37" fg:w="1"/><text x="3.2315%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="2.9815%" y="597" width="0.0806%" height="15" fill="rgb(222,74,54)" fg:x="37" fg:w="1"/><text x="3.2315%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="3.0620%" y="709" width="0.2417%" height="15" fill="rgb(216,99,12)" fg:x="38" fg:w="3"/><text x="3.3120%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="3.0620%" y="693" width="0.2417%" height="15" fill="rgb(226,22,26)" fg:x="38" fg:w="3"/><text x="3.3120%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="3.0620%" y="677" width="0.2417%" height="15" fill="rgb(217,163,10)" fg:x="38" fg:w="3"/><text x="3.3120%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="3.0620%" y="661" width="0.2417%" height="15" fill="rgb(213,25,53)" fg:x="38" fg:w="3"/><text x="3.3120%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="3.0620%" y="645" width="0.2417%" height="15" fill="rgb(252,105,26)" fg:x="38" fg:w="3"/><text x="3.3120%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="3.0620%" y="629" width="0.2417%" height="15" fill="rgb(220,39,43)" fg:x="38" fg:w="3"/><text x="3.3120%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="3.1426%" y="613" width="0.1612%" height="15" fill="rgb(229,68,48)" fg:x="39" fg:w="2"/><text x="3.3926%" y="623.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.3038%" y="677" width="0.0806%" height="15" fill="rgb(252,8,32)" fg:x="41" fg:w="1"/><text x="3.5538%" y="687.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="3.3038%" y="693" width="0.1612%" height="15" fill="rgb(223,20,43)" fg:x="41" fg:w="2"/><text x="3.5538%" y="703.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="3.3844%" y="677" width="0.0806%" height="15" fill="rgb(229,81,49)" fg:x="42" fg:w="1"/><text x="3.6344%" y="687.50"></text></g><g><title>treediff::tools::record::mk (1 samples, 0.08%)</title><rect x="3.3844%" y="661" width="0.0806%" height="15" fill="rgb(236,28,36)" fg:x="42" fg:w="1"/><text x="3.6344%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5455%" y="661" width="0.0806%" height="15" fill="rgb(249,185,26)" fg:x="44" fg:w="1"/><text x="3.7955%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5455%" y="645" width="0.0806%" height="15" fill="rgb(249,174,33)" fg:x="44" fg:w="1"/><text x="3.7955%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.6261%" y="613" width="0.0806%" height="15" fill="rgb(233,201,37)" fg:x="45" fg:w="1"/><text x="3.8761%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.6261%" y="597" width="0.0806%" height="15" fill="rgb(221,78,26)" fg:x="45" fg:w="1"/><text x="3.8761%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="3.6261%" y="581" width="0.0806%" height="15" fill="rgb(250,127,30)" fg:x="45" fg:w="1"/><text x="3.8761%" y="591.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.69%)</title><rect x="2.0951%" y="773" width="1.6922%" height="15" fill="rgb(230,49,44)" fg:x="26" fg:w="21"/><text x="2.3451%" y="783.50"></text></g><g><title>engine::session::Session::save_entity_changes (21 samples, 1.69%)</title><rect x="2.0951%" y="757" width="1.6922%" height="15" fill="rgb(229,67,23)" fg:x="26" fg:w="21"/><text x="2.3451%" y="767.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (19 samples, 1.53%)</title><rect x="2.2562%" y="741" width="1.5310%" height="15" fill="rgb(249,83,47)" fg:x="28" fg:w="19"/><text x="2.5062%" y="751.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (19 samples, 1.53%)</title><rect x="2.2562%" y="725" width="1.5310%" height="15" fill="rgb(215,43,3)" fg:x="28" fg:w="19"/><text x="2.5062%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="3.3038%" y="709" width="0.4835%" height="15" fill="rgb(238,154,13)" fg:x="41" fg:w="6"/><text x="3.5538%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="3.4649%" y="693" width="0.3223%" height="15" fill="rgb(219,56,2)" fg:x="43" fg:w="4"/><text x="3.7149%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="3.4649%" y="677" width="0.3223%" height="15" fill="rgb(233,0,4)" fg:x="43" fg:w="4"/><text x="3.7149%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="3.6261%" y="661" width="0.1612%" height="15" fill="rgb(235,30,7)" fg:x="45" fg:w="2"/><text x="3.8761%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="3.6261%" y="645" width="0.1612%" height="15" fill="rgb(250,79,13)" fg:x="45" fg:w="2"/><text x="3.8761%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="3.6261%" y="629" width="0.1612%" height="15" fill="rgb(211,146,34)" fg:x="45" fg:w="2"/><text x="3.8761%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.7067%" y="613" width="0.0806%" height="15" fill="rgb(228,22,38)" fg:x="46" fg:w="1"/><text x="3.9567%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.7067%" y="597" width="0.0806%" height="15" fill="rgb(235,168,5)" fg:x="46" fg:w="1"/><text x="3.9567%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.7067%" y="581" width="0.0806%" height="15" fill="rgb(221,155,16)" fg:x="46" fg:w="1"/><text x="3.9567%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.7873%" y="741" width="0.0806%" height="15" fill="rgb(215,215,53)" fg:x="47" fg:w="1"/><text x="4.0373%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.7873%" y="725" width="0.0806%" height="15" fill="rgb(223,4,10)" fg:x="47" fg:w="1"/><text x="4.0373%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.7873%" y="709" width="0.0806%" height="15" fill="rgb(234,103,6)" fg:x="47" fg:w="1"/><text x="4.0373%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.7873%" y="693" width="0.0806%" height="15" fill="rgb(227,97,0)" fg:x="47" fg:w="1"/><text x="4.0373%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7873%" y="677" width="0.0806%" height="15" fill="rgb(234,150,53)" fg:x="47" fg:w="1"/><text x="4.0373%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.7873%" y="661" width="0.0806%" height="15" fill="rgb(228,201,54)" fg:x="47" fg:w="1"/><text x="4.0373%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7873%" y="645" width="0.0806%" height="15" fill="rgb(222,22,37)" fg:x="47" fg:w="1"/><text x="4.0373%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.7873%" y="629" width="0.0806%" height="15" fill="rgb(237,53,32)" fg:x="47" fg:w="1"/><text x="4.0373%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7873%" y="613" width="0.0806%" height="15" fill="rgb(233,25,53)" fg:x="47" fg:w="1"/><text x="4.0373%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.7873%" y="597" width="0.0806%" height="15" fill="rgb(210,40,34)" fg:x="47" fg:w="1"/><text x="4.0373%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7873%" y="581" width="0.0806%" height="15" fill="rgb(241,220,44)" fg:x="47" fg:w="1"/><text x="4.0373%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.7873%" y="565" width="0.0806%" height="15" fill="rgb(235,28,35)" fg:x="47" fg:w="1"/><text x="4.0373%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7873%" y="549" width="0.0806%" height="15" fill="rgb(210,56,17)" fg:x="47" fg:w="1"/><text x="4.0373%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.7873%" y="533" width="0.0806%" height="15" fill="rgb(224,130,29)" fg:x="47" fg:w="1"/><text x="4.0373%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7873%" y="517" width="0.0806%" height="15" fill="rgb(235,212,8)" fg:x="47" fg:w="1"/><text x="4.0373%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.8678%" y="741" width="0.0806%" height="15" fill="rgb(223,33,50)" fg:x="48" fg:w="1"/><text x="4.1178%" y="751.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.8678%" y="725" width="0.0806%" height="15" fill="rgb(219,149,13)" fg:x="48" fg:w="1"/><text x="4.1178%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.8678%" y="709" width="0.0806%" height="15" fill="rgb(250,156,29)" fg:x="48" fg:w="1"/><text x="4.1178%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.8678%" y="693" width="0.0806%" height="15" fill="rgb(216,193,19)" fg:x="48" fg:w="1"/><text x="4.1178%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.8678%" y="677" width="0.0806%" height="15" fill="rgb(216,135,14)" fg:x="48" fg:w="1"/><text x="4.1178%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.8678%" y="661" width="0.0806%" height="15" fill="rgb(241,47,5)" fg:x="48" fg:w="1"/><text x="4.1178%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.8678%" y="645" width="0.0806%" height="15" fill="rgb(233,42,35)" fg:x="48" fg:w="1"/><text x="4.1178%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.8678%" y="629" width="0.0806%" height="15" fill="rgb(231,13,6)" fg:x="48" fg:w="1"/><text x="4.1178%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.8678%" y="613" width="0.0806%" height="15" fill="rgb(207,181,40)" fg:x="48" fg:w="1"/><text x="4.1178%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.8678%" y="597" width="0.0806%" height="15" fill="rgb(254,173,49)" fg:x="48" fg:w="1"/><text x="4.1178%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.8678%" y="581" width="0.0806%" height="15" fill="rgb(221,1,38)" fg:x="48" fg:w="1"/><text x="4.1178%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.8678%" y="565" width="0.0806%" height="15" fill="rgb(206,124,46)" fg:x="48" fg:w="1"/><text x="4.1178%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.8678%" y="549" width="0.0806%" height="15" fill="rgb(249,21,11)" fg:x="48" fg:w="1"/><text x="4.1178%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.0290%" y="693" width="0.1612%" height="15" fill="rgb(222,201,40)" fg:x="50" fg:w="2"/><text x="4.2790%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.0290%" y="677" width="0.1612%" height="15" fill="rgb(235,61,29)" fg:x="50" fg:w="2"/><text x="4.2790%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.0290%" y="661" width="0.1612%" height="15" fill="rgb(219,207,3)" fg:x="50" fg:w="2"/><text x="4.2790%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="4.0290%" y="645" width="0.1612%" height="15" fill="rgb(222,56,46)" fg:x="50" fg:w="2"/><text x="4.2790%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="4.0290%" y="629" width="0.1612%" height="15" fill="rgb(239,76,54)" fg:x="50" fg:w="2"/><text x="4.2790%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="4.0290%" y="613" width="0.1612%" height="15" fill="rgb(231,124,27)" fg:x="50" fg:w="2"/><text x="4.2790%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="4.0290%" y="597" width="0.1612%" height="15" fill="rgb(249,195,6)" fg:x="50" fg:w="2"/><text x="4.2790%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.1096%" y="581" width="0.0806%" height="15" fill="rgb(237,174,47)" fg:x="51" fg:w="1"/><text x="4.3596%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.1096%" y="565" width="0.0806%" height="15" fill="rgb(206,201,31)" fg:x="51" fg:w="1"/><text x="4.3596%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1096%" y="549" width="0.0806%" height="15" fill="rgb(231,57,52)" fg:x="51" fg:w="1"/><text x="4.3596%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1096%" y="533" width="0.0806%" height="15" fill="rgb(248,177,22)" fg:x="51" fg:w="1"/><text x="4.3596%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1902%" y="645" width="0.0806%" height="15" fill="rgb(215,211,37)" fg:x="52" fg:w="1"/><text x="4.4402%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1902%" y="629" width="0.0806%" height="15" fill="rgb(241,128,51)" fg:x="52" fg:w="1"/><text x="4.4402%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1902%" y="613" width="0.0806%" height="15" fill="rgb(227,165,31)" fg:x="52" fg:w="1"/><text x="4.4402%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1902%" y="597" width="0.0806%" height="15" fill="rgb(228,167,24)" fg:x="52" fg:w="1"/><text x="4.4402%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1902%" y="581" width="0.0806%" height="15" fill="rgb(228,143,12)" fg:x="52" fg:w="1"/><text x="4.4402%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1902%" y="565" width="0.0806%" height="15" fill="rgb(249,149,8)" fg:x="52" fg:w="1"/><text x="4.4402%" y="575.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.56%)</title><rect x="3.7873%" y="773" width="0.5641%" height="15" fill="rgb(243,35,44)" fg:x="47" fg:w="7"/><text x="4.0373%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.56%)</title><rect x="3.7873%" y="757" width="0.5641%" height="15" fill="rgb(246,89,9)" fg:x="47" fg:w="7"/><text x="4.0373%" y="767.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="3.9484%" y="741" width="0.4029%" height="15" fill="rgb(233,213,13)" fg:x="49" fg:w="5"/><text x="4.1984%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="4.0290%" y="725" width="0.3223%" height="15" fill="rgb(233,141,41)" fg:x="50" fg:w="4"/><text x="4.2790%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="4.0290%" y="709" width="0.3223%" height="15" fill="rgb(239,167,4)" fg:x="50" fg:w="4"/><text x="4.2790%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="4.1902%" y="693" width="0.1612%" height="15" fill="rgb(209,217,16)" fg:x="52" fg:w="2"/><text x="4.4402%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.1902%" y="677" width="0.1612%" height="15" fill="rgb(219,88,35)" fg:x="52" fg:w="2"/><text x="4.4402%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.1902%" y="661" width="0.1612%" height="15" fill="rgb(220,193,23)" fg:x="52" fg:w="2"/><text x="4.4402%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.2707%" y="645" width="0.0806%" height="15" fill="rgb(230,90,52)" fg:x="53" fg:w="1"/><text x="4.5207%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.2707%" y="629" width="0.0806%" height="15" fill="rgb(252,106,19)" fg:x="53" fg:w="1"/><text x="4.5207%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.2707%" y="613" width="0.0806%" height="15" fill="rgb(206,74,20)" fg:x="53" fg:w="1"/><text x="4.5207%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.2707%" y="597" width="0.0806%" height="15" fill="rgb(230,138,44)" fg:x="53" fg:w="1"/><text x="4.5207%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.2707%" y="581" width="0.0806%" height="15" fill="rgb(235,182,43)" fg:x="53" fg:w="1"/><text x="4.5207%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.2707%" y="565" width="0.0806%" height="15" fill="rgb(242,16,51)" fg:x="53" fg:w="1"/><text x="4.5207%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.2707%" y="549" width="0.0806%" height="15" fill="rgb(248,9,4)" fg:x="53" fg:w="1"/><text x="4.5207%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.2707%" y="533" width="0.0806%" height="15" fill="rgb(210,31,22)" fg:x="53" fg:w="1"/><text x="4.5207%" y="543.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="4.3513%" y="725" width="0.0806%" height="15" fill="rgb(239,54,39)" fg:x="54" fg:w="1"/><text x="4.6013%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.3513%" y="709" width="0.0806%" height="15" fill="rgb(230,99,41)" fg:x="54" fg:w="1"/><text x="4.6013%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.3513%" y="693" width="0.0806%" height="15" fill="rgb(253,106,12)" fg:x="54" fg:w="1"/><text x="4.6013%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.3513%" y="677" width="0.0806%" height="15" fill="rgb(213,46,41)" fg:x="54" fg:w="1"/><text x="4.6013%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.3513%" y="661" width="0.0806%" height="15" fill="rgb(215,133,35)" fg:x="54" fg:w="1"/><text x="4.6013%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.3513%" y="645" width="0.0806%" height="15" fill="rgb(213,28,5)" fg:x="54" fg:w="1"/><text x="4.6013%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.3513%" y="629" width="0.0806%" height="15" fill="rgb(215,77,49)" fg:x="54" fg:w="1"/><text x="4.6013%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.3513%" y="613" width="0.0806%" height="15" fill="rgb(248,100,22)" fg:x="54" fg:w="1"/><text x="4.6013%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.3513%" y="597" width="0.0806%" height="15" fill="rgb(208,67,9)" fg:x="54" fg:w="1"/><text x="4.6013%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.3513%" y="581" width="0.0806%" height="15" fill="rgb(219,133,21)" fg:x="54" fg:w="1"/><text x="4.6013%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.3513%" y="565" width="0.0806%" height="15" fill="rgb(246,46,29)" fg:x="54" fg:w="1"/><text x="4.6013%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.3513%" y="549" width="0.0806%" height="15" fill="rgb(246,185,52)" fg:x="54" fg:w="1"/><text x="4.6013%" y="559.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="4.3513%" y="773" width="0.1612%" height="15" fill="rgb(252,136,11)" fg:x="54" fg:w="2"/><text x="4.6013%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.3513%" y="757" width="0.1612%" height="15" fill="rgb(219,138,53)" fg:x="54" fg:w="2"/><text x="4.6013%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="4.3513%" y="741" width="0.1612%" height="15" fill="rgb(211,51,23)" fg:x="54" fg:w="2"/><text x="4.6013%" y="751.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="4.4319%" y="725" width="0.0806%" height="15" fill="rgb(247,221,28)" fg:x="55" fg:w="1"/><text x="4.6819%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.4319%" y="709" width="0.0806%" height="15" fill="rgb(251,222,45)" fg:x="55" fg:w="1"/><text x="4.6819%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="4.5931%" y="709" width="0.0806%" height="15" fill="rgb(217,162,53)" fg:x="57" fg:w="1"/><text x="4.8431%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="4.5931%" y="693" width="0.0806%" height="15" fill="rgb(229,93,14)" fg:x="57" fg:w="1"/><text x="4.8431%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="4.5931%" y="677" width="0.0806%" height="15" fill="rgb(209,67,49)" fg:x="57" fg:w="1"/><text x="4.8431%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.5931%" y="661" width="0.0806%" height="15" fill="rgb(213,87,29)" fg:x="57" fg:w="1"/><text x="4.8431%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.5931%" y="645" width="0.0806%" height="15" fill="rgb(205,151,52)" fg:x="57" fg:w="1"/><text x="4.8431%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5931%" y="629" width="0.0806%" height="15" fill="rgb(253,215,39)" fg:x="57" fg:w="1"/><text x="4.8431%" y="639.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="4.6737%" y="709" width="0.0806%" height="15" fill="rgb(221,220,41)" fg:x="58" fg:w="1"/><text x="4.9237%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.6737%" y="693" width="0.0806%" height="15" fill="rgb(218,133,21)" fg:x="58" fg:w="1"/><text x="4.9237%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="4.6737%" y="677" width="0.0806%" height="15" fill="rgb(221,193,43)" fg:x="58" fg:w="1"/><text x="4.9237%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="4.6737%" y="661" width="0.0806%" height="15" fill="rgb(240,128,52)" fg:x="58" fg:w="1"/><text x="4.9237%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.6737%" y="645" width="0.0806%" height="15" fill="rgb(253,114,12)" fg:x="58" fg:w="1"/><text x="4.9237%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.6737%" y="629" width="0.0806%" height="15" fill="rgb(215,223,47)" fg:x="58" fg:w="1"/><text x="4.9237%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.6737%" y="613" width="0.0806%" height="15" fill="rgb(248,225,23)" fg:x="58" fg:w="1"/><text x="4.9237%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.6737%" y="597" width="0.0806%" height="15" fill="rgb(250,108,0)" fg:x="58" fg:w="1"/><text x="4.9237%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.6737%" y="581" width="0.0806%" height="15" fill="rgb(228,208,7)" fg:x="58" fg:w="1"/><text x="4.9237%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.6737%" y="565" width="0.0806%" height="15" fill="rgb(244,45,10)" fg:x="58" fg:w="1"/><text x="4.9237%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.6737%" y="549" width="0.0806%" height="15" fill="rgb(207,125,25)" fg:x="58" fg:w="1"/><text x="4.9237%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="4.7542%" y="693" width="0.0806%" height="15" fill="rgb(210,195,18)" fg:x="59" fg:w="1"/><text x="5.0042%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="4.7542%" y="677" width="0.0806%" height="15" fill="rgb(249,80,12)" fg:x="59" fg:w="1"/><text x="5.0042%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.7542%" y="661" width="0.0806%" height="15" fill="rgb(221,65,9)" fg:x="59" fg:w="1"/><text x="5.0042%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="4.5931%" y="757" width="0.3223%" height="15" fill="rgb(235,49,36)" fg:x="57" fg:w="4"/><text x="4.8431%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="4.5931%" y="741" width="0.3223%" height="15" fill="rgb(225,32,20)" fg:x="57" fg:w="4"/><text x="4.8431%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="4.5931%" y="725" width="0.3223%" height="15" fill="rgb(215,141,46)" fg:x="57" fg:w="4"/><text x="4.8431%" y="735.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="4.7542%" y="709" width="0.1612%" height="15" fill="rgb(250,160,47)" fg:x="59" fg:w="2"/><text x="5.0042%" y="719.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="4.8348%" y="693" width="0.0806%" height="15" fill="rgb(216,222,40)" fg:x="60" fg:w="1"/><text x="5.0848%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="4.8348%" y="677" width="0.0806%" height="15" fill="rgb(234,217,39)" fg:x="60" fg:w="1"/><text x="5.0848%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.8348%" y="661" width="0.0806%" height="15" fill="rgb(207,178,40)" fg:x="60" fg:w="1"/><text x="5.0848%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8348%" y="645" width="0.0806%" height="15" fill="rgb(221,136,13)" fg:x="60" fg:w="1"/><text x="5.0848%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="4.9154%" y="725" width="0.0806%" height="15" fill="rgb(249,199,10)" fg:x="61" fg:w="1"/><text x="5.1654%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.9154%" y="709" width="0.0806%" height="15" fill="rgb(249,222,13)" fg:x="61" fg:w="1"/><text x="5.1654%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.9154%" y="693" width="0.0806%" height="15" fill="rgb(244,185,38)" fg:x="61" fg:w="1"/><text x="5.1654%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.9960%" y="613" width="0.0806%" height="15" fill="rgb(236,202,9)" fg:x="62" fg:w="1"/><text x="5.2460%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.9960%" y="597" width="0.0806%" height="15" fill="rgb(250,229,37)" fg:x="62" fg:w="1"/><text x="5.2460%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.9960%" y="661" width="0.1612%" height="15" fill="rgb(206,174,23)" fg:x="62" fg:w="2"/><text x="5.2460%" y="671.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.9960%" y="645" width="0.1612%" height="15" fill="rgb(211,33,43)" fg:x="62" fg:w="2"/><text x="5.2460%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.9960%" y="629" width="0.1612%" height="15" fill="rgb(245,58,50)" fg:x="62" fg:w="2"/><text x="5.2460%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="5.0766%" y="613" width="0.0806%" height="15" fill="rgb(244,68,36)" fg:x="63" fg:w="1"/><text x="5.3266%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.1571%" y="645" width="0.0806%" height="15" fill="rgb(232,229,15)" fg:x="64" fg:w="1"/><text x="5.4071%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1571%" y="629" width="0.0806%" height="15" fill="rgb(254,30,23)" fg:x="64" fg:w="1"/><text x="5.4071%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1571%" y="613" width="0.0806%" height="15" fill="rgb(235,160,14)" fg:x="64" fg:w="1"/><text x="5.4071%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.2377%" y="645" width="0.0806%" height="15" fill="rgb(212,155,44)" fg:x="65" fg:w="1"/><text x="5.4877%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.2377%" y="629" width="0.0806%" height="15" fill="rgb(226,2,50)" fg:x="65" fg:w="1"/><text x="5.4877%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.2377%" y="613" width="0.0806%" height="15" fill="rgb(234,177,6)" fg:x="65" fg:w="1"/><text x="5.4877%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.3183%" y="629" width="0.0806%" height="15" fill="rgb(217,24,9)" fg:x="66" fg:w="1"/><text x="5.5683%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3183%" y="613" width="0.0806%" height="15" fill="rgb(220,13,46)" fg:x="66" fg:w="1"/><text x="5.5683%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3183%" y="597" width="0.0806%" height="15" fill="rgb(239,221,27)" fg:x="66" fg:w="1"/><text x="5.5683%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.3183%" y="581" width="0.0806%" height="15" fill="rgb(222,198,25)" fg:x="66" fg:w="1"/><text x="5.5683%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3989%" y="613" width="0.0806%" height="15" fill="rgb(211,99,13)" fg:x="67" fg:w="1"/><text x="5.6489%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3989%" y="597" width="0.0806%" height="15" fill="rgb(232,111,31)" fg:x="67" fg:w="1"/><text x="5.6489%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3989%" y="581" width="0.0806%" height="15" fill="rgb(245,82,37)" fg:x="67" fg:w="1"/><text x="5.6489%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="5.1571%" y="661" width="0.4029%" height="15" fill="rgb(227,149,46)" fg:x="64" fg:w="5"/><text x="5.4071%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.3183%" y="645" width="0.2417%" height="15" fill="rgb(218,36,50)" fg:x="66" fg:w="3"/><text x="5.5683%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.3989%" y="629" width="0.1612%" height="15" fill="rgb(226,80,48)" fg:x="67" fg:w="2"/><text x="5.6489%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.4795%" y="613" width="0.0806%" height="15" fill="rgb(238,224,15)" fg:x="68" fg:w="1"/><text x="5.7295%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.4795%" y="597" width="0.0806%" height="15" fill="rgb(241,136,10)" fg:x="68" fg:w="1"/><text x="5.7295%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="4.9960%" y="677" width="0.7252%" height="15" fill="rgb(208,32,45)" fg:x="62" fg:w="9"/><text x="5.2460%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.5600%" y="661" width="0.1612%" height="15" fill="rgb(207,135,9)" fg:x="69" fg:w="2"/><text x="5.8100%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.5600%" y="645" width="0.1612%" height="15" fill="rgb(206,86,44)" fg:x="69" fg:w="2"/><text x="5.8100%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="5.5600%" y="629" width="0.1612%" height="15" fill="rgb(245,177,15)" fg:x="69" fg:w="2"/><text x="5.8100%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.6406%" y="613" width="0.0806%" height="15" fill="rgb(206,64,50)" fg:x="70" fg:w="1"/><text x="5.8906%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.6406%" y="597" width="0.0806%" height="15" fill="rgb(234,36,40)" fg:x="70" fg:w="1"/><text x="5.8906%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.6406%" y="581" width="0.0806%" height="15" fill="rgb(213,64,8)" fg:x="70" fg:w="1"/><text x="5.8906%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="4.9960%" y="693" width="0.8058%" height="15" fill="rgb(210,75,36)" fg:x="62" fg:w="10"/><text x="5.2460%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7212%" y="677" width="0.0806%" height="15" fill="rgb(229,88,21)" fg:x="71" fg:w="1"/><text x="5.9712%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.7212%" y="661" width="0.0806%" height="15" fill="rgb(252,204,47)" fg:x="71" fg:w="1"/><text x="5.9712%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8018%" y="645" width="0.0806%" height="15" fill="rgb(208,77,27)" fg:x="72" fg:w="1"/><text x="6.0518%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8018%" y="629" width="0.0806%" height="15" fill="rgb(221,76,26)" fg:x="72" fg:w="1"/><text x="6.0518%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="5.8018%" y="613" width="0.0806%" height="15" fill="rgb(225,139,18)" fg:x="72" fg:w="1"/><text x="6.0518%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.8824%" y="565" width="0.1612%" height="15" fill="rgb(230,137,11)" fg:x="73" fg:w="2"/><text x="6.1324%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.8824%" y="549" width="0.1612%" height="15" fill="rgb(212,28,1)" fg:x="73" fg:w="2"/><text x="6.1324%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.8824%" y="533" width="0.1612%" height="15" fill="rgb(248,164,17)" fg:x="73" fg:w="2"/><text x="6.1324%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="5.8824%" y="517" width="0.1612%" height="15" fill="rgb(222,171,42)" fg:x="73" fg:w="2"/><text x="6.1324%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="5.8824%" y="597" width="0.2417%" height="15" fill="rgb(243,84,45)" fg:x="73" fg:w="3"/><text x="6.1324%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="5.8824%" y="581" width="0.2417%" height="15" fill="rgb(252,49,23)" fg:x="73" fg:w="3"/><text x="6.1324%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0435%" y="565" width="0.0806%" height="15" fill="rgb(215,19,7)" fg:x="75" fg:w="1"/><text x="6.2935%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="5.8824%" y="613" width="0.3223%" height="15" fill="rgb(238,81,41)" fg:x="73" fg:w="4"/><text x="6.1324%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1241%" y="597" width="0.0806%" height="15" fill="rgb(210,199,37)" fg:x="76" fg:w="1"/><text x="6.3741%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.1241%" y="581" width="0.0806%" height="15" fill="rgb(244,192,49)" fg:x="76" fg:w="1"/><text x="6.3741%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1241%" y="565" width="0.0806%" height="15" fill="rgb(226,211,11)" fg:x="76" fg:w="1"/><text x="6.3741%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.1241%" y="549" width="0.0806%" height="15" fill="rgb(236,162,54)" fg:x="76" fg:w="1"/><text x="6.3741%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1241%" y="533" width="0.0806%" height="15" fill="rgb(220,229,9)" fg:x="76" fg:w="1"/><text x="6.3741%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="5.8824%" y="629" width="0.4835%" height="15" fill="rgb(250,87,22)" fg:x="73" fg:w="6"/><text x="6.1324%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="6.2047%" y="613" width="0.1612%" height="15" fill="rgb(239,43,17)" fg:x="77" fg:w="2"/><text x="6.4547%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2853%" y="597" width="0.0806%" height="15" fill="rgb(231,177,25)" fg:x="78" fg:w="1"/><text x="6.5353%" y="607.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (18 samples, 1.45%)</title><rect x="4.9960%" y="725" width="1.4504%" height="15" fill="rgb(219,179,1)" fg:x="62" fg:w="18"/><text x="5.2460%" y="735.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (18 samples, 1.45%)</title><rect x="4.9960%" y="709" width="1.4504%" height="15" fill="rgb(238,219,53)" fg:x="62" fg:w="18"/><text x="5.2460%" y="719.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="5.8018%" y="693" width="0.6446%" height="15" fill="rgb(232,167,36)" fg:x="72" fg:w="8"/><text x="6.0518%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="5.8018%" y="677" width="0.6446%" height="15" fill="rgb(244,19,51)" fg:x="72" fg:w="8"/><text x="6.0518%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="5.8018%" y="661" width="0.6446%" height="15" fill="rgb(224,6,22)" fg:x="72" fg:w="8"/><text x="6.0518%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="5.8824%" y="645" width="0.5641%" height="15" fill="rgb(224,145,5)" fg:x="73" fg:w="7"/><text x="6.1324%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3658%" y="629" width="0.0806%" height="15" fill="rgb(234,130,49)" fg:x="79" fg:w="1"/><text x="6.6158%" y="639.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.61%)</title><rect x="4.9154%" y="757" width="1.6116%" height="15" fill="rgb(254,6,2)" fg:x="61" fg:w="20"/><text x="5.1654%" y="767.50"></text></g><g><title>engine::session::Session::save_entity_changes (20 samples, 1.61%)</title><rect x="4.9154%" y="741" width="1.6116%" height="15" fill="rgb(208,96,46)" fg:x="61" fg:w="20"/><text x="5.1654%" y="751.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="6.4464%" y="725" width="0.0806%" height="15" fill="rgb(239,3,39)" fg:x="80" fg:w="1"/><text x="6.6964%" y="735.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="6.4464%" y="709" width="0.0806%" height="15" fill="rgb(233,210,1)" fg:x="80" fg:w="1"/><text x="6.6964%" y="719.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="6.4464%" y="693" width="0.0806%" height="15" fill="rgb(244,137,37)" fg:x="80" fg:w="1"/><text x="6.6964%" y="703.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="6.4464%" y="677" width="0.0806%" height="15" fill="rgb(240,136,2)" fg:x="80" fg:w="1"/><text x="6.6964%" y="687.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="6.4464%" y="661" width="0.0806%" height="15" fill="rgb(239,18,37)" fg:x="80" fg:w="1"/><text x="6.6964%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="6.5270%" y="757" width="0.0806%" height="15" fill="rgb(218,185,22)" fg:x="81" fg:w="1"/><text x="6.7770%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.5270%" y="741" width="0.0806%" height="15" fill="rgb(225,218,4)" fg:x="81" fg:w="1"/><text x="6.7770%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.6882%" y="645" width="0.0806%" height="15" fill="rgb(230,182,32)" fg:x="83" fg:w="1"/><text x="6.9382%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.6882%" y="629" width="0.0806%" height="15" fill="rgb(242,56,43)" fg:x="83" fg:w="1"/><text x="6.9382%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.6882%" y="613" width="0.0806%" height="15" fill="rgb(233,99,24)" fg:x="83" fg:w="1"/><text x="6.9382%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6882%" y="597" width="0.0806%" height="15" fill="rgb(234,209,42)" fg:x="83" fg:w="1"/><text x="6.9382%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="6.6076%" y="725" width="0.2417%" height="15" fill="rgb(227,7,12)" fg:x="82" fg:w="3"/><text x="6.8576%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="6.6076%" y="709" width="0.2417%" height="15" fill="rgb(245,203,43)" fg:x="82" fg:w="3"/><text x="6.8576%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.6882%" y="693" width="0.1612%" height="15" fill="rgb(238,205,33)" fg:x="83" fg:w="2"/><text x="6.9382%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.6882%" y="677" width="0.1612%" height="15" fill="rgb(231,56,7)" fg:x="83" fg:w="2"/><text x="6.9382%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.6882%" y="661" width="0.1612%" height="15" fill="rgb(244,186,29)" fg:x="83" fg:w="2"/><text x="6.9382%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="6.7687%" y="645" width="0.0806%" height="15" fill="rgb(234,111,31)" fg:x="84" fg:w="1"/><text x="7.0187%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.7687%" y="629" width="0.0806%" height="15" fill="rgb(241,149,10)" fg:x="84" fg:w="1"/><text x="7.0187%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.7687%" y="613" width="0.0806%" height="15" fill="rgb(249,206,44)" fg:x="84" fg:w="1"/><text x="7.0187%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8493%" y="709" width="0.0806%" height="15" fill="rgb(251,153,30)" fg:x="85" fg:w="1"/><text x="7.0993%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9299%" y="677" width="0.0806%" height="15" fill="rgb(239,152,38)" fg:x="86" fg:w="1"/><text x="7.1799%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9299%" y="661" width="0.0806%" height="15" fill="rgb(249,139,47)" fg:x="86" fg:w="1"/><text x="7.1799%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.9299%" y="645" width="0.0806%" height="15" fill="rgb(244,64,35)" fg:x="86" fg:w="1"/><text x="7.1799%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.9299%" y="629" width="0.0806%" height="15" fill="rgb(216,46,15)" fg:x="86" fg:w="1"/><text x="7.1799%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.9299%" y="613" width="0.0806%" height="15" fill="rgb(250,74,19)" fg:x="86" fg:w="1"/><text x="7.1799%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.9299%" y="597" width="0.0806%" height="15" fill="rgb(249,42,33)" fg:x="86" fg:w="1"/><text x="7.1799%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.9299%" y="581" width="0.0806%" height="15" fill="rgb(242,149,17)" fg:x="86" fg:w="1"/><text x="7.1799%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.9299%" y="565" width="0.0806%" height="15" fill="rgb(244,29,21)" fg:x="86" fg:w="1"/><text x="7.1799%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.9299%" y="549" width="0.0806%" height="15" fill="rgb(220,130,37)" fg:x="86" fg:w="1"/><text x="7.1799%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.9299%" y="533" width="0.0806%" height="15" fill="rgb(211,67,2)" fg:x="86" fg:w="1"/><text x="7.1799%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.9299%" y="517" width="0.0806%" height="15" fill="rgb(235,68,52)" fg:x="86" fg:w="1"/><text x="7.1799%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9299%" y="501" width="0.0806%" height="15" fill="rgb(246,142,3)" fg:x="86" fg:w="1"/><text x="7.1799%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="7.0105%" y="661" width="0.0806%" height="15" fill="rgb(241,25,7)" fg:x="87" fg:w="1"/><text x="7.2605%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.0105%" y="645" width="0.0806%" height="15" fill="rgb(242,119,39)" fg:x="87" fg:w="1"/><text x="7.2605%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.0105%" y="677" width="0.1612%" height="15" fill="rgb(241,98,45)" fg:x="87" fg:w="2"/><text x="7.2605%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.0911%" y="661" width="0.0806%" height="15" fill="rgb(254,28,30)" fg:x="88" fg:w="1"/><text x="7.3411%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.0911%" y="645" width="0.0806%" height="15" fill="rgb(241,142,54)" fg:x="88" fg:w="1"/><text x="7.3411%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.1716%" y="613" width="0.0806%" height="15" fill="rgb(222,85,15)" fg:x="89" fg:w="1"/><text x="7.4216%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.1716%" y="597" width="0.0806%" height="15" fill="rgb(210,85,47)" fg:x="89" fg:w="1"/><text x="7.4216%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.1716%" y="581" width="0.0806%" height="15" fill="rgb(224,206,25)" fg:x="89" fg:w="1"/><text x="7.4216%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="7.1716%" y="629" width="0.1612%" height="15" fill="rgb(243,201,19)" fg:x="89" fg:w="2"/><text x="7.4216%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2522%" y="613" width="0.0806%" height="15" fill="rgb(236,59,4)" fg:x="90" fg:w="1"/><text x="7.5022%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="7.3328%" y="629" width="0.0806%" height="15" fill="rgb(254,179,45)" fg:x="91" fg:w="1"/><text x="7.5828%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.3328%" y="613" width="0.0806%" height="15" fill="rgb(226,14,10)" fg:x="91" fg:w="1"/><text x="7.5828%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3328%" y="597" width="0.0806%" height="15" fill="rgb(244,27,41)" fg:x="91" fg:w="1"/><text x="7.5828%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (7 samples, 0.56%)</title><rect x="6.9299%" y="709" width="0.5641%" height="15" fill="rgb(235,35,32)" fg:x="86" fg:w="7"/><text x="7.1799%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (7 samples, 0.56%)</title><rect x="6.9299%" y="693" width="0.5641%" height="15" fill="rgb(218,68,31)" fg:x="86" fg:w="7"/><text x="7.1799%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="7.1716%" y="677" width="0.3223%" height="15" fill="rgb(207,120,37)" fg:x="89" fg:w="4"/><text x="7.4216%" y="687.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="7.1716%" y="661" width="0.3223%" height="15" fill="rgb(227,98,0)" fg:x="89" fg:w="4"/><text x="7.4216%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="7.1716%" y="645" width="0.3223%" height="15" fill="rgb(207,7,3)" fg:x="89" fg:w="4"/><text x="7.4216%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.4134%" y="629" width="0.0806%" height="15" fill="rgb(206,98,19)" fg:x="92" fg:w="1"/><text x="7.6634%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.4134%" y="613" width="0.0806%" height="15" fill="rgb(217,5,26)" fg:x="92" fg:w="1"/><text x="7.6634%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.4134%" y="597" width="0.0806%" height="15" fill="rgb(235,190,38)" fg:x="92" fg:w="1"/><text x="7.6634%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.4134%" y="581" width="0.0806%" height="15" fill="rgb(247,86,24)" fg:x="92" fg:w="1"/><text x="7.6634%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.4134%" y="565" width="0.0806%" height="15" fill="rgb(205,101,16)" fg:x="92" fg:w="1"/><text x="7.6634%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.4134%" y="549" width="0.0806%" height="15" fill="rgb(246,168,33)" fg:x="92" fg:w="1"/><text x="7.6634%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.4134%" y="533" width="0.0806%" height="15" fill="rgb(231,114,1)" fg:x="92" fg:w="1"/><text x="7.6634%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.4134%" y="517" width="0.0806%" height="15" fill="rgb(207,184,53)" fg:x="92" fg:w="1"/><text x="7.6634%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.4134%" y="501" width="0.0806%" height="15" fill="rgb(224,95,51)" fg:x="92" fg:w="1"/><text x="7.6634%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4134%" y="485" width="0.0806%" height="15" fill="rgb(212,188,45)" fg:x="92" fg:w="1"/><text x="7.6634%" y="495.50"></text></g><g><title>plugins_core::build::Build::holding (12 samples, 0.97%)</title><rect x="6.6076%" y="757" width="0.9670%" height="15" fill="rgb(223,154,38)" fg:x="82" fg:w="12"/><text x="6.8576%" y="767.50"></text></g><g><title>plugins_core::tools::set_container (12 samples, 0.97%)</title><rect x="6.6076%" y="741" width="0.9670%" height="15" fill="rgb(251,22,52)" fg:x="82" fg:w="12"/><text x="6.8576%" y="751.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (9 samples, 0.73%)</title><rect x="6.8493%" y="725" width="0.7252%" height="15" fill="rgb(229,209,22)" fg:x="85" fg:w="9"/><text x="7.0993%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="7.4940%" y="709" width="0.0806%" height="15" fill="rgb(234,138,34)" fg:x="93" fg:w="1"/><text x="7.7440%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.4940%" y="693" width="0.0806%" height="15" fill="rgb(212,95,11)" fg:x="93" fg:w="1"/><text x="7.7440%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="7.4940%" y="677" width="0.0806%" height="15" fill="rgb(240,179,47)" fg:x="93" fg:w="1"/><text x="7.7440%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="7.4940%" y="661" width="0.0806%" height="15" fill="rgb(240,163,11)" fg:x="93" fg:w="1"/><text x="7.7440%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="7.4940%" y="645" width="0.0806%" height="15" fill="rgb(236,37,12)" fg:x="93" fg:w="1"/><text x="7.7440%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="7.4940%" y="629" width="0.0806%" height="15" fill="rgb(232,164,16)" fg:x="93" fg:w="1"/><text x="7.7440%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="7.4940%" y="613" width="0.0806%" height="15" fill="rgb(244,205,15)" fg:x="93" fg:w="1"/><text x="7.7440%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.4940%" y="597" width="0.0806%" height="15" fill="rgb(223,117,47)" fg:x="93" fg:w="1"/><text x="7.7440%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.4940%" y="581" width="0.0806%" height="15" fill="rgb(244,107,35)" fg:x="93" fg:w="1"/><text x="7.7440%" y="591.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="7.4940%" y="565" width="0.0806%" height="15" fill="rgb(205,140,8)" fg:x="93" fg:w="1"/><text x="7.7440%" y="575.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="7.4940%" y="549" width="0.0806%" height="15" fill="rgb(228,84,46)" fg:x="93" fg:w="1"/><text x="7.7440%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.4940%" y="533" width="0.0806%" height="15" fill="rgb(254,188,9)" fg:x="93" fg:w="1"/><text x="7.7440%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.4940%" y="517" width="0.0806%" height="15" fill="rgb(206,112,54)" fg:x="93" fg:w="1"/><text x="7.7440%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="7.4940%" y="501" width="0.0806%" height="15" fill="rgb(216,84,49)" fg:x="93" fg:w="1"/><text x="7.7440%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="7.4940%" y="485" width="0.0806%" height="15" fill="rgb(214,194,35)" fg:x="93" fg:w="1"/><text x="7.7440%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="7.4940%" y="469" width="0.0806%" height="15" fill="rgb(249,28,3)" fg:x="93" fg:w="1"/><text x="7.7440%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="7.4940%" y="453" width="0.0806%" height="15" fill="rgb(222,56,52)" fg:x="93" fg:w="1"/><text x="7.7440%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="7.4940%" y="437" width="0.0806%" height="15" fill="rgb(245,217,50)" fg:x="93" fg:w="1"/><text x="7.7440%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.5745%" y="677" width="0.0806%" height="15" fill="rgb(213,201,24)" fg:x="94" fg:w="1"/><text x="7.8245%" y="687.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="7.5745%" y="757" width="0.1612%" height="15" fill="rgb(248,116,28)" fg:x="94" fg:w="2"/><text x="7.8245%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="7.5745%" y="741" width="0.1612%" height="15" fill="rgb(219,72,43)" fg:x="94" fg:w="2"/><text x="7.8245%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="7.5745%" y="725" width="0.1612%" height="15" fill="rgb(209,138,14)" fg:x="94" fg:w="2"/><text x="7.8245%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="7.5745%" y="709" width="0.1612%" height="15" fill="rgb(222,18,33)" fg:x="94" fg:w="2"/><text x="7.8245%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.5745%" y="693" width="0.1612%" height="15" fill="rgb(213,199,7)" fg:x="94" fg:w="2"/><text x="7.8245%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.6551%" y="677" width="0.0806%" height="15" fill="rgb(250,110,10)" fg:x="95" fg:w="1"/><text x="7.9051%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.6551%" y="661" width="0.0806%" height="15" fill="rgb(248,123,6)" fg:x="95" fg:w="1"/><text x="7.9051%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6551%" y="645" width="0.0806%" height="15" fill="rgb(206,91,31)" fg:x="95" fg:w="1"/><text x="7.9051%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6551%" y="629" width="0.0806%" height="15" fill="rgb(211,154,13)" fg:x="95" fg:w="1"/><text x="7.9051%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6551%" y="613" width="0.0806%" height="15" fill="rgb(225,148,7)" fg:x="95" fg:w="1"/><text x="7.9051%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.7357%" y="693" width="0.0806%" height="15" fill="rgb(220,160,43)" fg:x="96" fg:w="1"/><text x="7.9857%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.7357%" y="677" width="0.0806%" height="15" fill="rgb(213,52,39)" fg:x="96" fg:w="1"/><text x="7.9857%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.7357%" y="661" width="0.0806%" height="15" fill="rgb(243,137,7)" fg:x="96" fg:w="1"/><text x="7.9857%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="7.7357%" y="741" width="0.1612%" height="15" fill="rgb(230,79,13)" fg:x="96" fg:w="2"/><text x="7.9857%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="7.7357%" y="725" width="0.1612%" height="15" fill="rgb(247,105,23)" fg:x="96" fg:w="2"/><text x="7.9857%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="7.7357%" y="709" width="0.1612%" height="15" fill="rgb(223,179,41)" fg:x="96" fg:w="2"/><text x="7.9857%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.8163%" y="693" width="0.0806%" height="15" fill="rgb(218,9,34)" fg:x="97" fg:w="1"/><text x="8.0663%" y="703.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.8163%" y="677" width="0.0806%" height="15" fill="rgb(222,106,8)" fg:x="97" fg:w="1"/><text x="8.0663%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.8163%" y="661" width="0.0806%" height="15" fill="rgb(211,220,0)" fg:x="97" fg:w="1"/><text x="8.0663%" y="671.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8163%" y="645" width="0.0806%" height="15" fill="rgb(229,52,16)" fg:x="97" fg:w="1"/><text x="8.0663%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.8163%" y="629" width="0.0806%" height="15" fill="rgb(212,155,18)" fg:x="97" fg:w="1"/><text x="8.0663%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="7.8163%" y="613" width="0.0806%" height="15" fill="rgb(242,21,14)" fg:x="97" fg:w="1"/><text x="8.0663%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.8163%" y="597" width="0.0806%" height="15" fill="rgb(222,19,48)" fg:x="97" fg:w="1"/><text x="8.0663%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.8163%" y="581" width="0.0806%" height="15" fill="rgb(232,45,27)" fg:x="97" fg:w="1"/><text x="8.0663%" y="591.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="7.8163%" y="565" width="0.0806%" height="15" fill="rgb(249,103,42)" fg:x="97" fg:w="1"/><text x="8.0663%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8163%" y="549" width="0.0806%" height="15" fill="rgb(246,81,33)" fg:x="97" fg:w="1"/><text x="8.0663%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.8969%" y="725" width="0.0806%" height="15" fill="rgb(252,33,42)" fg:x="98" fg:w="1"/><text x="8.1469%" y="735.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8969%" y="709" width="0.0806%" height="15" fill="rgb(209,212,41)" fg:x="98" fg:w="1"/><text x="8.1469%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.8969%" y="693" width="0.0806%" height="15" fill="rgb(207,154,6)" fg:x="98" fg:w="1"/><text x="8.1469%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.8969%" y="677" width="0.0806%" height="15" fill="rgb(223,64,47)" fg:x="98" fg:w="1"/><text x="8.1469%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="7.8969%" y="661" width="0.0806%" height="15" fill="rgb(211,161,38)" fg:x="98" fg:w="1"/><text x="8.1469%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8969%" y="645" width="0.0806%" height="15" fill="rgb(219,138,40)" fg:x="98" fg:w="1"/><text x="8.1469%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.9774%" y="677" width="0.0806%" height="15" fill="rgb(241,228,46)" fg:x="99" fg:w="1"/><text x="8.2274%" y="687.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="7.9774%" y="661" width="0.0806%" height="15" fill="rgb(223,209,38)" fg:x="99" fg:w="1"/><text x="8.2274%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.9774%" y="645" width="0.0806%" height="15" fill="rgb(236,164,45)" fg:x="99" fg:w="1"/><text x="8.2274%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="7.9774%" y="629" width="0.0806%" height="15" fill="rgb(231,15,5)" fg:x="99" fg:w="1"/><text x="8.2274%" y="639.50"></text></g><g><title>plugins_core::build::Build::occupying (5 samples, 0.40%)</title><rect x="7.7357%" y="757" width="0.4029%" height="15" fill="rgb(252,35,15)" fg:x="96" fg:w="5"/><text x="7.9857%" y="767.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="7.8969%" y="741" width="0.2417%" height="15" fill="rgb(248,181,18)" fg:x="98" fg:w="3"/><text x="8.1469%" y="751.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="7.9774%" y="725" width="0.1612%" height="15" fill="rgb(233,39,42)" fg:x="99" fg:w="2"/><text x="8.2274%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="7.9774%" y="709" width="0.1612%" height="15" fill="rgb(238,110,33)" fg:x="99" fg:w="2"/><text x="8.2274%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="7.9774%" y="693" width="0.1612%" height="15" fill="rgb(233,195,10)" fg:x="99" fg:w="2"/><text x="8.2274%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.0580%" y="677" width="0.0806%" height="15" fill="rgb(254,105,3)" fg:x="100" fg:w="1"/><text x="8.3080%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.0580%" y="661" width="0.0806%" height="15" fill="rgb(221,225,9)" fg:x="100" fg:w="1"/><text x="8.3080%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.0580%" y="645" width="0.0806%" height="15" fill="rgb(224,227,45)" fg:x="100" fg:w="1"/><text x="8.3080%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0580%" y="629" width="0.0806%" height="15" fill="rgb(229,198,43)" fg:x="100" fg:w="1"/><text x="8.3080%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0580%" y="613" width="0.0806%" height="15" fill="rgb(206,209,35)" fg:x="100" fg:w="1"/><text x="8.3080%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.0580%" y="597" width="0.0806%" height="15" fill="rgb(245,195,53)" fg:x="100" fg:w="1"/><text x="8.3080%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.1386%" y="565" width="0.0806%" height="15" fill="rgb(240,92,26)" fg:x="101" fg:w="1"/><text x="8.3886%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.1386%" y="549" width="0.0806%" height="15" fill="rgb(207,40,23)" fg:x="101" fg:w="1"/><text x="8.3886%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="8.1386%" y="533" width="0.0806%" height="15" fill="rgb(223,111,35)" fg:x="101" fg:w="1"/><text x="8.3886%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (47 samples, 3.79%)</title><rect x="4.5125%" y="773" width="3.7873%" height="15" fill="rgb(229,147,28)" fg:x="56" fg:w="47"/><text x="4.7625%" y="783.50">plug..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="8.1386%" y="757" width="0.1612%" height="15" fill="rgb(211,29,28)" fg:x="101" fg:w="2"/><text x="8.3886%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="8.1386%" y="741" width="0.1612%" height="15" fill="rgb(228,72,33)" fg:x="101" fg:w="2"/><text x="8.3886%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="8.1386%" y="725" width="0.1612%" height="15" fill="rgb(205,214,31)" fg:x="101" fg:w="2"/><text x="8.3886%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="8.1386%" y="709" width="0.1612%" height="15" fill="rgb(224,111,15)" fg:x="101" fg:w="2"/><text x="8.3886%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="8.1386%" y="693" width="0.1612%" height="15" fill="rgb(253,21,26)" fg:x="101" fg:w="2"/><text x="8.3886%" y="703.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="8.1386%" y="677" width="0.1612%" height="15" fill="rgb(245,139,43)" fg:x="101" fg:w="2"/><text x="8.3886%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="8.1386%" y="661" width="0.1612%" height="15" fill="rgb(252,170,7)" fg:x="101" fg:w="2"/><text x="8.3886%" y="671.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (2 samples, 0.16%)</title><rect x="8.1386%" y="645" width="0.1612%" height="15" fill="rgb(231,118,14)" fg:x="101" fg:w="2"/><text x="8.3886%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.1386%" y="629" width="0.1612%" height="15" fill="rgb(238,83,0)" fg:x="101" fg:w="2"/><text x="8.3886%" y="639.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="8.1386%" y="613" width="0.1612%" height="15" fill="rgb(221,39,39)" fg:x="101" fg:w="2"/><text x="8.3886%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.1386%" y="597" width="0.1612%" height="15" fill="rgb(222,119,46)" fg:x="101" fg:w="2"/><text x="8.3886%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="8.1386%" y="581" width="0.1612%" height="15" fill="rgb(222,165,49)" fg:x="101" fg:w="2"/><text x="8.3886%" y="591.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="8.2192%" y="565" width="0.0806%" height="15" fill="rgb(219,113,52)" fg:x="102" fg:w="1"/><text x="8.4692%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2192%" y="549" width="0.0806%" height="15" fill="rgb(214,7,15)" fg:x="102" fg:w="1"/><text x="8.4692%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2192%" y="533" width="0.0806%" height="15" fill="rgb(235,32,4)" fg:x="102" fg:w="1"/><text x="8.4692%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2192%" y="517" width="0.0806%" height="15" fill="rgb(238,90,54)" fg:x="102" fg:w="1"/><text x="8.4692%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="8.2998%" y="741" width="0.0806%" height="15" fill="rgb(213,208,19)" fg:x="103" fg:w="1"/><text x="8.5498%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="8.2998%" y="725" width="0.0806%" height="15" fill="rgb(233,156,4)" fg:x="103" fg:w="1"/><text x="8.5498%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="8.2998%" y="709" width="0.0806%" height="15" fill="rgb(207,194,5)" fg:x="103" fg:w="1"/><text x="8.5498%" y="719.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="8.2998%" y="693" width="0.0806%" height="15" fill="rgb(206,111,30)" fg:x="103" fg:w="1"/><text x="8.5498%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.2998%" y="677" width="0.0806%" height="15" fill="rgb(243,70,54)" fg:x="103" fg:w="1"/><text x="8.5498%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.2998%" y="661" width="0.0806%" height="15" fill="rgb(242,28,8)" fg:x="103" fg:w="1"/><text x="8.5498%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.2998%" y="645" width="0.0806%" height="15" fill="rgb(219,106,18)" fg:x="103" fg:w="1"/><text x="8.5498%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.2998%" y="629" width="0.0806%" height="15" fill="rgb(244,222,10)" fg:x="103" fg:w="1"/><text x="8.5498%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.2998%" y="613" width="0.0806%" height="15" fill="rgb(236,179,52)" fg:x="103" fg:w="1"/><text x="8.5498%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.2998%" y="597" width="0.0806%" height="15" fill="rgb(213,23,39)" fg:x="103" fg:w="1"/><text x="8.5498%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.2998%" y="581" width="0.0806%" height="15" fill="rgb(238,48,10)" fg:x="103" fg:w="1"/><text x="8.5498%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.2998%" y="565" width="0.0806%" height="15" fill="rgb(251,196,23)" fg:x="103" fg:w="1"/><text x="8.5498%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.2998%" y="549" width="0.0806%" height="15" fill="rgb(250,152,24)" fg:x="103" fg:w="1"/><text x="8.5498%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.2998%" y="533" width="0.0806%" height="15" fill="rgb(209,150,17)" fg:x="103" fg:w="1"/><text x="8.5498%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.2998%" y="517" width="0.0806%" height="15" fill="rgb(234,202,34)" fg:x="103" fg:w="1"/><text x="8.5498%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.2998%" y="501" width="0.0806%" height="15" fill="rgb(253,148,53)" fg:x="103" fg:w="1"/><text x="8.5498%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (79 samples, 6.37%)</title><rect x="2.0951%" y="789" width="6.3658%" height="15" fill="rgb(218,129,16)" fg:x="26" fg:w="79"/><text x="2.3451%" y="799.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="8.2998%" y="773" width="0.1612%" height="15" fill="rgb(216,85,19)" fg:x="103" fg:w="2"/><text x="8.5498%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="8.2998%" y="757" width="0.1612%" height="15" fill="rgb(235,228,7)" fg:x="103" fg:w="2"/><text x="8.5498%" y="767.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="8.3803%" y="741" width="0.0806%" height="15" fill="rgb(245,175,0)" fg:x="104" fg:w="1"/><text x="8.6303%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="8.3803%" y="725" width="0.0806%" height="15" fill="rgb(208,168,36)" fg:x="104" fg:w="1"/><text x="8.6303%" y="735.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="8.3803%" y="709" width="0.0806%" height="15" fill="rgb(246,171,24)" fg:x="104" fg:w="1"/><text x="8.6303%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="8.4609%" y="789" width="0.0806%" height="15" fill="rgb(215,142,24)" fg:x="105" fg:w="1"/><text x="8.7109%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="8.4609%" y="773" width="0.0806%" height="15" fill="rgb(250,187,7)" fg:x="105" fg:w="1"/><text x="8.7109%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4609%" y="757" width="0.0806%" height="15" fill="rgb(228,66,33)" fg:x="105" fg:w="1"/><text x="8.7109%" y="767.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="8.5415%" y="773" width="0.0806%" height="15" fill="rgb(234,215,21)" fg:x="106" fg:w="1"/><text x="8.7915%" y="783.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="8.5415%" y="757" width="0.0806%" height="15" fill="rgb(222,191,20)" fg:x="106" fg:w="1"/><text x="8.7915%" y="767.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.5415%" y="741" width="0.0806%" height="15" fill="rgb(245,79,54)" fg:x="106" fg:w="1"/><text x="8.7915%" y="751.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.5415%" y="725" width="0.0806%" height="15" fill="rgb(240,10,37)" fg:x="106" fg:w="1"/><text x="8.7915%" y="735.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="8.5415%" y="709" width="0.0806%" height="15" fill="rgb(214,192,32)" fg:x="106" fg:w="1"/><text x="8.7915%" y="719.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="8.6221%" y="725" width="0.0806%" height="15" fill="rgb(209,36,54)" fg:x="107" fg:w="1"/><text x="8.8721%" y="735.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="8.6221%" y="709" width="0.0806%" height="15" fill="rgb(220,10,11)" fg:x="107" fg:w="1"/><text x="8.8721%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.7832%" y="693" width="0.0806%" height="15" fill="rgb(221,106,17)" fg:x="109" fg:w="1"/><text x="9.0332%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.7832%" y="677" width="0.0806%" height="15" fill="rgb(251,142,44)" fg:x="109" fg:w="1"/><text x="9.0332%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.7832%" y="661" width="0.0806%" height="15" fill="rgb(238,13,15)" fg:x="109" fg:w="1"/><text x="9.0332%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.7832%" y="645" width="0.0806%" height="15" fill="rgb(208,107,27)" fg:x="109" fg:w="1"/><text x="9.0332%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="8.7027%" y="709" width="0.2417%" height="15" fill="rgb(205,136,37)" fg:x="108" fg:w="3"/><text x="8.9527%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.8638%" y="693" width="0.0806%" height="15" fill="rgb(250,205,27)" fg:x="110" fg:w="1"/><text x="9.1138%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.8638%" y="677" width="0.0806%" height="15" fill="rgb(210,80,43)" fg:x="110" fg:w="1"/><text x="9.1138%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.8638%" y="661" width="0.0806%" height="15" fill="rgb(247,160,36)" fg:x="110" fg:w="1"/><text x="9.1138%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="9.0250%" y="629" width="0.1612%" height="15" fill="rgb(234,13,49)" fg:x="112" fg:w="2"/><text x="9.2750%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.1056%" y="613" width="0.0806%" height="15" fill="rgb(234,122,0)" fg:x="113" fg:w="1"/><text x="9.3556%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.1056%" y="597" width="0.0806%" height="15" fill="rgb(207,146,38)" fg:x="113" fg:w="1"/><text x="9.3556%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.1056%" y="581" width="0.0806%" height="15" fill="rgb(207,177,25)" fg:x="113" fg:w="1"/><text x="9.3556%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.1056%" y="565" width="0.0806%" height="15" fill="rgb(211,178,42)" fg:x="113" fg:w="1"/><text x="9.3556%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.1056%" y="549" width="0.0806%" height="15" fill="rgb(230,69,54)" fg:x="113" fg:w="1"/><text x="9.3556%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.1056%" y="533" width="0.0806%" height="15" fill="rgb(214,135,41)" fg:x="113" fg:w="1"/><text x="9.3556%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="9.0250%" y="677" width="0.2417%" height="15" fill="rgb(237,67,25)" fg:x="112" fg:w="3"/><text x="9.2750%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="9.0250%" y="661" width="0.2417%" height="15" fill="rgb(222,189,50)" fg:x="112" fg:w="3"/><text x="9.2750%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="9.0250%" y="645" width="0.2417%" height="15" fill="rgb(245,148,34)" fg:x="112" fg:w="3"/><text x="9.2750%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1861%" y="629" width="0.0806%" height="15" fill="rgb(222,29,6)" fg:x="114" fg:w="1"/><text x="9.4361%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.1861%" y="613" width="0.0806%" height="15" fill="rgb(221,189,43)" fg:x="114" fg:w="1"/><text x="9.4361%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.1861%" y="597" width="0.0806%" height="15" fill="rgb(207,36,27)" fg:x="114" fg:w="1"/><text x="9.4361%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="9.0250%" y="693" width="0.3223%" height="15" fill="rgb(217,90,24)" fg:x="112" fg:w="4"/><text x="9.2750%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.2667%" y="677" width="0.0806%" height="15" fill="rgb(224,66,35)" fg:x="115" fg:w="1"/><text x="9.5167%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="8.7027%" y="725" width="0.8058%" height="15" fill="rgb(221,13,50)" fg:x="108" fg:w="10"/><text x="8.9527%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="8.9444%" y="709" width="0.5641%" height="15" fill="rgb(236,68,49)" fg:x="111" fg:w="7"/><text x="9.1944%" y="719.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.3473%" y="693" width="0.1612%" height="15" fill="rgb(229,146,28)" fg:x="116" fg:w="2"/><text x="9.5973%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="9.3473%" y="677" width="0.1612%" height="15" fill="rgb(225,31,38)" fg:x="116" fg:w="2"/><text x="9.5973%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="9.3473%" y="661" width="0.1612%" height="15" fill="rgb(250,208,3)" fg:x="116" fg:w="2"/><text x="9.5973%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.4279%" y="645" width="0.0806%" height="15" fill="rgb(246,54,23)" fg:x="117" fg:w="1"/><text x="9.6779%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.4279%" y="629" width="0.0806%" height="15" fill="rgb(243,76,11)" fg:x="117" fg:w="1"/><text x="9.6779%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.5890%" y="693" width="0.0806%" height="15" fill="rgb(245,21,50)" fg:x="119" fg:w="1"/><text x="9.8390%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.7502%" y="661" width="0.0806%" height="15" fill="rgb(228,9,43)" fg:x="121" fg:w="1"/><text x="10.0002%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.9114%" y="645" width="0.0806%" height="15" fill="rgb(208,100,47)" fg:x="123" fg:w="1"/><text x="10.1614%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.9919%" y="629" width="0.0806%" height="15" fill="rgb(232,26,8)" fg:x="124" fg:w="1"/><text x="10.2419%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="9.5085%" y="725" width="0.6446%" height="15" fill="rgb(216,166,38)" fg:x="118" fg:w="8"/><text x="9.7585%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="9.5890%" y="709" width="0.5641%" height="15" fill="rgb(251,202,51)" fg:x="119" fg:w="7"/><text x="9.8390%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="9.6696%" y="693" width="0.4835%" height="15" fill="rgb(254,216,34)" fg:x="120" fg:w="6"/><text x="9.9196%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="9.7502%" y="677" width="0.4029%" height="15" fill="rgb(251,32,27)" fg:x="121" fg:w="5"/><text x="10.0002%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.8308%" y="661" width="0.3223%" height="15" fill="rgb(208,127,28)" fg:x="122" fg:w="4"/><text x="10.0808%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.9919%" y="645" width="0.1612%" height="15" fill="rgb(224,137,22)" fg:x="124" fg:w="2"/><text x="10.2419%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.0725%" y="629" width="0.0806%" height="15" fill="rgb(254,70,32)" fg:x="125" fg:w="1"/><text x="10.3225%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.0725%" y="613" width="0.0806%" height="15" fill="rgb(229,75,37)" fg:x="125" fg:w="1"/><text x="10.3225%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.1531%" y="645" width="0.0806%" height="15" fill="rgb(252,64,23)" fg:x="126" fg:w="1"/><text x="10.4031%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.2337%" y="629" width="0.0806%" height="15" fill="rgb(232,162,48)" fg:x="127" fg:w="1"/><text x="10.4837%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.2337%" y="613" width="0.0806%" height="15" fill="rgb(246,160,12)" fg:x="127" fg:w="1"/><text x="10.4837%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.3948%" y="581" width="0.0806%" height="15" fill="rgb(247,166,0)" fg:x="129" fg:w="1"/><text x="10.6448%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="10.1531%" y="693" width="0.4029%" height="15" fill="rgb(249,219,21)" fg:x="126" fg:w="5"/><text x="10.4031%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="10.1531%" y="677" width="0.4029%" height="15" fill="rgb(205,209,3)" fg:x="126" fg:w="5"/><text x="10.4031%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="10.1531%" y="661" width="0.4029%" height="15" fill="rgb(243,44,1)" fg:x="126" fg:w="5"/><text x="10.4031%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="10.2337%" y="645" width="0.3223%" height="15" fill="rgb(206,159,16)" fg:x="127" fg:w="4"/><text x="10.4837%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="10.3143%" y="629" width="0.2417%" height="15" fill="rgb(244,77,30)" fg:x="128" fg:w="3"/><text x="10.5643%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="10.3143%" y="613" width="0.2417%" height="15" fill="rgb(218,69,12)" fg:x="128" fg:w="3"/><text x="10.5643%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="10.3948%" y="597" width="0.1612%" height="15" fill="rgb(212,87,7)" fg:x="129" fg:w="2"/><text x="10.6448%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.4754%" y="581" width="0.0806%" height="15" fill="rgb(245,114,25)" fg:x="130" fg:w="1"/><text x="10.7254%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="10.5560%" y="661" width="0.1612%" height="15" fill="rgb(210,61,42)" fg:x="131" fg:w="2"/><text x="10.8060%" y="671.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.64%)</title><rect x="10.1531%" y="709" width="0.6446%" height="15" fill="rgb(211,52,33)" fg:x="126" fg:w="8"/><text x="10.4031%" y="719.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="10.5560%" y="693" width="0.2417%" height="15" fill="rgb(234,58,33)" fg:x="131" fg:w="3"/><text x="10.8060%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="10.5560%" y="677" width="0.2417%" height="15" fill="rgb(220,115,36)" fg:x="131" fg:w="3"/><text x="10.8060%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.7172%" y="661" width="0.0806%" height="15" fill="rgb(243,153,54)" fg:x="133" fg:w="1"/><text x="10.9672%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="10.7977%" y="709" width="0.0806%" height="15" fill="rgb(251,47,18)" fg:x="134" fg:w="1"/><text x="11.0477%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.7977%" y="693" width="0.0806%" height="15" fill="rgb(242,102,42)" fg:x="134" fg:w="1"/><text x="11.0477%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9589%" y="677" width="0.0806%" height="15" fill="rgb(234,31,38)" fg:x="136" fg:w="1"/><text x="11.2089%" y="687.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="11.0395%" y="677" width="0.0806%" height="15" fill="rgb(221,117,51)" fg:x="137" fg:w="1"/><text x="11.2895%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="11.2812%" y="629" width="0.2417%" height="15" fill="rgb(212,20,18)" fg:x="140" fg:w="3"/><text x="11.5312%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.3618%" y="613" width="0.1612%" height="15" fill="rgb(245,133,36)" fg:x="141" fg:w="2"/><text x="11.6118%" y="623.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.3618%" y="597" width="0.1612%" height="15" fill="rgb(212,6,19)" fg:x="141" fg:w="2"/><text x="11.6118%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.5230%" y="629" width="0.0806%" height="15" fill="rgb(218,1,36)" fg:x="143" fg:w="1"/><text x="11.7730%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.5230%" y="613" width="0.0806%" height="15" fill="rgb(246,84,54)" fg:x="143" fg:w="1"/><text x="11.7730%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.7647%" y="613" width="0.0806%" height="15" fill="rgb(242,110,6)" fg:x="146" fg:w="1"/><text x="12.0147%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.9259%" y="597" width="0.1612%" height="15" fill="rgb(214,47,5)" fg:x="148" fg:w="2"/><text x="12.1759%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.0064%" y="581" width="0.0806%" height="15" fill="rgb(218,159,25)" fg:x="149" fg:w="1"/><text x="12.2564%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.1676%" y="549" width="0.0806%" height="15" fill="rgb(215,211,28)" fg:x="151" fg:w="1"/><text x="12.4176%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2482%" y="533" width="0.0806%" height="15" fill="rgb(238,59,32)" fg:x="152" fg:w="1"/><text x="12.4982%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2482%" y="517" width="0.0806%" height="15" fill="rgb(226,82,3)" fg:x="152" fg:w="1"/><text x="12.4982%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.2482%" y="501" width="0.0806%" height="15" fill="rgb(240,164,32)" fg:x="152" fg:w="1"/><text x="12.4982%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.3288%" y="517" width="0.0806%" height="15" fill="rgb(232,46,7)" fg:x="153" fg:w="1"/><text x="12.5788%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (16 samples, 1.29%)</title><rect x="11.2006%" y="661" width="1.2893%" height="15" fill="rgb(229,129,53)" fg:x="139" fg:w="16"/><text x="11.4506%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (16 samples, 1.29%)</title><rect x="11.2006%" y="645" width="1.2893%" height="15" fill="rgb(234,188,29)" fg:x="139" fg:w="16"/><text x="11.4506%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (11 samples, 0.89%)</title><rect x="11.6035%" y="629" width="0.8864%" height="15" fill="rgb(246,141,4)" fg:x="144" fg:w="11"/><text x="11.8535%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="11.8453%" y="613" width="0.6446%" height="15" fill="rgb(229,23,39)" fg:x="147" fg:w="8"/><text x="12.0953%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="12.0870%" y="597" width="0.4029%" height="15" fill="rgb(206,12,3)" fg:x="150" fg:w="5"/><text x="12.3370%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="12.1676%" y="581" width="0.3223%" height="15" fill="rgb(252,226,20)" fg:x="151" fg:w="4"/><text x="12.4176%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="12.1676%" y="565" width="0.3223%" height="15" fill="rgb(216,123,35)" fg:x="151" fg:w="4"/><text x="12.4176%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="12.2482%" y="549" width="0.2417%" height="15" fill="rgb(212,68,40)" fg:x="152" fg:w="3"/><text x="12.4982%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="12.3288%" y="533" width="0.1612%" height="15" fill="rgb(254,125,32)" fg:x="153" fg:w="2"/><text x="12.5788%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.4093%" y="517" width="0.0806%" height="15" fill="rgb(253,97,22)" fg:x="154" fg:w="1"/><text x="12.6593%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.4093%" y="501" width="0.0806%" height="15" fill="rgb(241,101,14)" fg:x="154" fg:w="1"/><text x="12.6593%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.4093%" y="485" width="0.0806%" height="15" fill="rgb(238,103,29)" fg:x="154" fg:w="1"/><text x="12.6593%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4093%" y="469" width="0.0806%" height="15" fill="rgb(233,195,47)" fg:x="154" fg:w="1"/><text x="12.6593%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4899%" y="661" width="0.0806%" height="15" fill="rgb(246,218,30)" fg:x="155" fg:w="1"/><text x="12.7399%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (22 samples, 1.77%)</title><rect x="10.8783%" y="709" width="1.7728%" height="15" fill="rgb(219,145,47)" fg:x="135" fg:w="22"/><text x="11.1283%" y="719.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (22 samples, 1.77%)</title><rect x="10.8783%" y="693" width="1.7728%" height="15" fill="rgb(243,12,26)" fg:x="135" fg:w="22"/><text x="11.1283%" y="703.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (19 samples, 1.53%)</title><rect x="11.1201%" y="677" width="1.5310%" height="15" fill="rgb(214,87,16)" fg:x="138" fg:w="19"/><text x="11.3701%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5705%" y="661" width="0.0806%" height="15" fill="rgb(208,99,42)" fg:x="156" fg:w="1"/><text x="12.8205%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5705%" y="645" width="0.0806%" height="15" fill="rgb(253,99,2)" fg:x="156" fg:w="1"/><text x="12.8205%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5705%" y="629" width="0.0806%" height="15" fill="rgb(220,168,23)" fg:x="156" fg:w="1"/><text x="12.8205%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.9734%" y="533" width="0.0806%" height="15" fill="rgb(242,38,24)" fg:x="161" fg:w="1"/><text x="13.2234%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9734%" y="517" width="0.0806%" height="15" fill="rgb(225,182,9)" fg:x="161" fg:w="1"/><text x="13.2234%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="12.9734%" y="565" width="0.1612%" height="15" fill="rgb(243,178,37)" fg:x="161" fg:w="2"/><text x="13.2234%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.9734%" y="549" width="0.1612%" height="15" fill="rgb(232,139,19)" fg:x="161" fg:w="2"/><text x="13.2234%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0540%" y="533" width="0.0806%" height="15" fill="rgb(225,201,24)" fg:x="162" fg:w="1"/><text x="13.3040%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0540%" y="517" width="0.0806%" height="15" fill="rgb(221,47,46)" fg:x="162" fg:w="1"/><text x="13.3040%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="12.8122%" y="613" width="0.4835%" height="15" fill="rgb(249,23,13)" fg:x="159" fg:w="6"/><text x="13.0622%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="12.8122%" y="597" width="0.4835%" height="15" fill="rgb(219,9,5)" fg:x="159" fg:w="6"/><text x="13.0622%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="12.8928%" y="581" width="0.4029%" height="15" fill="rgb(254,171,16)" fg:x="160" fg:w="5"/><text x="13.1428%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="13.1346%" y="565" width="0.1612%" height="15" fill="rgb(230,171,20)" fg:x="163" fg:w="2"/><text x="13.3846%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.2151%" y="549" width="0.0806%" height="15" fill="rgb(210,71,41)" fg:x="164" fg:w="1"/><text x="13.4651%" y="559.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (59 samples, 4.75%)</title><rect x="8.6221%" y="757" width="4.7542%" height="15" fill="rgb(206,173,20)" fg:x="107" fg:w="59"/><text x="8.8721%" y="767.50">engine..</text></g><g><title>engine::session::SavesEntities::check_for_changes (59 samples, 4.75%)</title><rect x="8.6221%" y="741" width="4.7542%" height="15" fill="rgb(233,88,34)" fg:x="107" fg:w="59"/><text x="8.8721%" y="751.50">engine..</text></g><g><title>kernel::model::any_entity_changes (40 samples, 3.22%)</title><rect x="10.1531%" y="725" width="3.2232%" height="15" fill="rgb(223,209,46)" fg:x="126" fg:w="40"/><text x="10.4031%" y="735.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.73%)</title><rect x="12.6511%" y="709" width="0.7252%" height="15" fill="rgb(250,43,18)" fg:x="157" fg:w="9"/><text x="12.9011%" y="719.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.73%)</title><rect x="12.6511%" y="693" width="0.7252%" height="15" fill="rgb(208,13,10)" fg:x="157" fg:w="9"/><text x="12.9011%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.73%)</title><rect x="12.6511%" y="677" width="0.7252%" height="15" fill="rgb(212,200,36)" fg:x="157" fg:w="9"/><text x="12.9011%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.73%)</title><rect x="12.6511%" y="661" width="0.7252%" height="15" fill="rgb(225,90,30)" fg:x="157" fg:w="9"/><text x="12.9011%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="12.8122%" y="645" width="0.5641%" height="15" fill="rgb(236,182,39)" fg:x="159" fg:w="7"/><text x="13.0622%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="12.8122%" y="629" width="0.5641%" height="15" fill="rgb(212,144,35)" fg:x="159" fg:w="7"/><text x="13.0622%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.2957%" y="613" width="0.0806%" height="15" fill="rgb(228,63,44)" fg:x="165" fg:w="1"/><text x="13.5457%" y="623.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="13.2957%" y="597" width="0.0806%" height="15" fill="rgb(228,109,6)" fg:x="165" fg:w="1"/><text x="13.5457%" y="607.50"></text></g><g><title>engine::session::Session::close (61 samples, 4.92%)</title><rect x="8.5415%" y="789" width="4.9154%" height="15" fill="rgb(238,117,24)" fg:x="106" fg:w="61"/><text x="8.7915%" y="799.50">engine..</text></g><g><title>engine::session::Session::save_entity_changes (60 samples, 4.83%)</title><rect x="8.6221%" y="773" width="4.8348%" height="15" fill="rgb(242,26,26)" fg:x="107" fg:w="60"/><text x="8.8721%" y="783.50">engine..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="13.3763%" y="757" width="0.0806%" height="15" fill="rgb(221,92,48)" fg:x="166" fg:w="1"/><text x="13.6263%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="13.3763%" y="741" width="0.0806%" height="15" fill="rgb(209,209,32)" fg:x="166" fg:w="1"/><text x="13.6263%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="13.3763%" y="725" width="0.0806%" height="15" fill="rgb(221,70,22)" fg:x="166" fg:w="1"/><text x="13.6263%" y="735.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="13.3763%" y="709" width="0.0806%" height="15" fill="rgb(248,145,5)" fg:x="166" fg:w="1"/><text x="13.6263%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.3763%" y="693" width="0.0806%" height="15" fill="rgb(226,116,26)" fg:x="166" fg:w="1"/><text x="13.6263%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.3763%" y="677" width="0.0806%" height="15" fill="rgb(244,5,17)" fg:x="166" fg:w="1"/><text x="13.6263%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.3763%" y="661" width="0.0806%" height="15" fill="rgb(252,159,33)" fg:x="166" fg:w="1"/><text x="13.6263%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.3763%" y="645" width="0.0806%" height="15" fill="rgb(206,71,0)" fg:x="166" fg:w="1"/><text x="13.6263%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.3763%" y="629" width="0.0806%" height="15" fill="rgb(233,118,54)" fg:x="166" fg:w="1"/><text x="13.6263%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.3763%" y="613" width="0.0806%" height="15" fill="rgb(234,83,48)" fg:x="166" fg:w="1"/><text x="13.6263%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.3763%" y="597" width="0.0806%" height="15" fill="rgb(228,3,54)" fg:x="166" fg:w="1"/><text x="13.6263%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.3763%" y="581" width="0.0806%" height="15" fill="rgb(226,155,13)" fg:x="166" fg:w="1"/><text x="13.6263%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.3763%" y="565" width="0.0806%" height="15" fill="rgb(241,28,37)" fg:x="166" fg:w="1"/><text x="13.6263%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.3763%" y="549" width="0.0806%" height="15" fill="rgb(233,93,10)" fg:x="166" fg:w="1"/><text x="13.6263%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.3763%" y="533" width="0.0806%" height="15" fill="rgb(225,113,19)" fg:x="166" fg:w="1"/><text x="13.6263%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.3763%" y="517" width="0.0806%" height="15" fill="rgb(241,2,18)" fg:x="166" fg:w="1"/><text x="13.6263%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3763%" y="501" width="0.0806%" height="15" fill="rgb(228,207,21)" fg:x="166" fg:w="1"/><text x="13.6263%" y="511.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Evaluator&gt;::evaluate (2 samples, 0.16%)</title><rect x="13.6180%" y="693" width="0.1612%" height="15" fill="rgb(213,211,35)" fg:x="169" fg:w="2"/><text x="13.8680%" y="703.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="13.6180%" y="677" width="0.1612%" height="15" fill="rgb(209,83,10)" fg:x="169" fg:w="2"/><text x="13.8680%" y="687.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="13.6986%" y="661" width="0.0806%" height="15" fill="rgb(209,164,1)" fg:x="170" fg:w="1"/><text x="13.9486%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Evaluator&gt;::evaluate (2 samples, 0.16%)</title><rect x="13.7792%" y="693" width="0.1612%" height="15" fill="rgb(213,184,43)" fg:x="171" fg:w="2"/><text x="14.0292%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="13.8598%" y="677" width="0.0806%" height="15" fill="rgb(231,61,34)" fg:x="172" fg:w="1"/><text x="14.1098%" y="687.50"></text></g><g><title>&lt;plugins_core::carrying::parser::TakeOutActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="13.8598%" y="661" width="0.0806%" height="15" fill="rgb(235,75,3)" fg:x="172" fg:w="1"/><text x="14.1098%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="13.8598%" y="645" width="0.0806%" height="15" fill="rgb(220,106,47)" fg:x="172" fg:w="1"/><text x="14.1098%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.0210%" y="629" width="0.0806%" height="15" fill="rgb(210,196,33)" fg:x="174" fg:w="1"/><text x="14.2710%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1015%" y="597" width="0.0806%" height="15" fill="rgb(229,154,42)" fg:x="175" fg:w="1"/><text x="14.3515%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="14.1015%" y="629" width="0.1612%" height="15" fill="rgb(228,114,26)" fg:x="175" fg:w="2"/><text x="14.3515%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="14.1015%" y="613" width="0.1612%" height="15" fill="rgb(208,144,1)" fg:x="175" fg:w="2"/><text x="14.3515%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1821%" y="597" width="0.0806%" height="15" fill="rgb(239,112,37)" fg:x="176" fg:w="1"/><text x="14.4321%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1821%" y="581" width="0.0806%" height="15" fill="rgb(210,96,50)" fg:x="176" fg:w="1"/><text x="14.4321%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1821%" y="565" width="0.0806%" height="15" fill="rgb(222,178,2)" fg:x="176" fg:w="1"/><text x="14.4321%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.1821%" y="549" width="0.0806%" height="15" fill="rgb(226,74,18)" fg:x="176" fg:w="1"/><text x="14.4321%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1821%" y="533" width="0.0806%" height="15" fill="rgb(225,67,54)" fg:x="176" fg:w="1"/><text x="14.4321%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="14.2627%" y="613" width="0.1612%" height="15" fill="rgb(251,92,32)" fg:x="177" fg:w="2"/><text x="14.5127%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.2627%" y="597" width="0.1612%" height="15" fill="rgb(228,149,22)" fg:x="177" fg:w="2"/><text x="14.5127%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="14.0210%" y="645" width="0.4835%" height="15" fill="rgb(243,54,13)" fg:x="174" fg:w="6"/><text x="14.2710%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="14.2627%" y="629" width="0.2417%" height="15" fill="rgb(243,180,28)" fg:x="177" fg:w="3"/><text x="14.5127%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.4239%" y="613" width="0.0806%" height="15" fill="rgb(208,167,24)" fg:x="179" fg:w="1"/><text x="14.6739%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.4239%" y="597" width="0.0806%" height="15" fill="rgb(245,73,45)" fg:x="179" fg:w="1"/><text x="14.6739%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.4239%" y="581" width="0.0806%" height="15" fill="rgb(237,203,48)" fg:x="179" fg:w="1"/><text x="14.6739%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.5850%" y="581" width="0.0806%" height="15" fill="rgb(211,197,16)" fg:x="181" fg:w="1"/><text x="14.8350%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.5850%" y="565" width="0.0806%" height="15" fill="rgb(243,99,51)" fg:x="181" fg:w="1"/><text x="14.8350%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.5850%" y="549" width="0.0806%" height="15" fill="rgb(215,123,29)" fg:x="181" fg:w="1"/><text x="14.8350%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.5850%" y="533" width="0.0806%" height="15" fill="rgb(239,186,37)" fg:x="181" fg:w="1"/><text x="14.8350%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.5850%" y="517" width="0.0806%" height="15" fill="rgb(252,136,39)" fg:x="181" fg:w="1"/><text x="14.8350%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.5850%" y="501" width="0.0806%" height="15" fill="rgb(223,213,32)" fg:x="181" fg:w="1"/><text x="14.8350%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.5850%" y="485" width="0.0806%" height="15" fill="rgb(233,115,5)" fg:x="181" fg:w="1"/><text x="14.8350%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.5850%" y="469" width="0.0806%" height="15" fill="rgb(207,226,44)" fg:x="181" fg:w="1"/><text x="14.8350%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.5850%" y="453" width="0.0806%" height="15" fill="rgb(208,126,0)" fg:x="181" fg:w="1"/><text x="14.8350%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.5850%" y="437" width="0.0806%" height="15" fill="rgb(244,66,21)" fg:x="181" fg:w="1"/><text x="14.8350%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="14.5850%" y="421" width="0.0806%" height="15" fill="rgb(222,97,12)" fg:x="181" fg:w="1"/><text x="14.8350%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="14.5850%" y="405" width="0.0806%" height="15" fill="rgb(219,213,19)" fg:x="181" fg:w="1"/><text x="14.8350%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="14.5044%" y="597" width="0.2417%" height="15" fill="rgb(252,169,30)" fg:x="180" fg:w="3"/><text x="14.7544%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.6656%" y="581" width="0.0806%" height="15" fill="rgb(206,32,51)" fg:x="182" fg:w="1"/><text x="14.9156%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.6656%" y="565" width="0.0806%" height="15" fill="rgb(250,172,42)" fg:x="182" fg:w="1"/><text x="14.9156%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.6656%" y="549" width="0.0806%" height="15" fill="rgb(209,34,43)" fg:x="182" fg:w="1"/><text x="14.9156%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.6656%" y="533" width="0.0806%" height="15" fill="rgb(223,11,35)" fg:x="182" fg:w="1"/><text x="14.9156%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.6656%" y="517" width="0.0806%" height="15" fill="rgb(251,219,26)" fg:x="182" fg:w="1"/><text x="14.9156%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.6656%" y="501" width="0.0806%" height="15" fill="rgb(231,119,3)" fg:x="182" fg:w="1"/><text x="14.9156%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.6656%" y="485" width="0.0806%" height="15" fill="rgb(216,97,11)" fg:x="182" fg:w="1"/><text x="14.9156%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.6656%" y="469" width="0.0806%" height="15" fill="rgb(223,59,9)" fg:x="182" fg:w="1"/><text x="14.9156%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.6656%" y="453" width="0.0806%" height="15" fill="rgb(233,93,31)" fg:x="182" fg:w="1"/><text x="14.9156%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.6656%" y="437" width="0.0806%" height="15" fill="rgb(239,81,33)" fg:x="182" fg:w="1"/><text x="14.9156%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.6656%" y="421" width="0.0806%" height="15" fill="rgb(213,120,34)" fg:x="182" fg:w="1"/><text x="14.9156%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7462%" y="565" width="0.0806%" height="15" fill="rgb(243,49,53)" fg:x="183" fg:w="1"/><text x="14.9962%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7462%" y="549" width="0.0806%" height="15" fill="rgb(247,216,33)" fg:x="183" fg:w="1"/><text x="14.9962%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.7462%" y="533" width="0.0806%" height="15" fill="rgb(226,26,14)" fg:x="183" fg:w="1"/><text x="14.9962%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.7462%" y="517" width="0.0806%" height="15" fill="rgb(215,49,53)" fg:x="183" fg:w="1"/><text x="14.9962%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.7462%" y="501" width="0.0806%" height="15" fill="rgb(245,162,40)" fg:x="183" fg:w="1"/><text x="14.9962%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7462%" y="485" width="0.0806%" height="15" fill="rgb(229,68,17)" fg:x="183" fg:w="1"/><text x="14.9962%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7462%" y="469" width="0.0806%" height="15" fill="rgb(213,182,10)" fg:x="183" fg:w="1"/><text x="14.9962%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.7462%" y="453" width="0.0806%" height="15" fill="rgb(245,125,30)" fg:x="183" fg:w="1"/><text x="14.9962%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.7462%" y="437" width="0.0806%" height="15" fill="rgb(232,202,2)" fg:x="183" fg:w="1"/><text x="14.9962%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.7462%" y="421" width="0.0806%" height="15" fill="rgb(237,140,51)" fg:x="183" fg:w="1"/><text x="14.9962%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.7462%" y="405" width="0.0806%" height="15" fill="rgb(236,157,25)" fg:x="183" fg:w="1"/><text x="14.9962%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7462%" y="389" width="0.0806%" height="15" fill="rgb(219,209,0)" fg:x="183" fg:w="1"/><text x="14.9962%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="14.7462%" y="597" width="0.1612%" height="15" fill="rgb(240,116,54)" fg:x="183" fg:w="2"/><text x="14.9962%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.7462%" y="581" width="0.1612%" height="15" fill="rgb(216,10,36)" fg:x="183" fg:w="2"/><text x="14.9962%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.8268%" y="565" width="0.0806%" height="15" fill="rgb(222,72,44)" fg:x="184" fg:w="1"/><text x="15.0768%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.48%)</title><rect x="14.5044%" y="613" width="0.4835%" height="15" fill="rgb(232,159,9)" fg:x="180" fg:w="6"/><text x="14.7544%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9073%" y="597" width="0.0806%" height="15" fill="rgb(210,39,32)" fg:x="185" fg:w="1"/><text x="15.1573%" y="607.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (7 samples, 0.56%)</title><rect x="14.5044%" y="645" width="0.5641%" height="15" fill="rgb(216,194,45)" fg:x="180" fg:w="7"/><text x="14.7544%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (7 samples, 0.56%)</title><rect x="14.5044%" y="629" width="0.5641%" height="15" fill="rgb(218,18,35)" fg:x="180" fg:w="7"/><text x="14.7544%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.9879%" y="613" width="0.0806%" height="15" fill="rgb(207,83,51)" fg:x="186" fg:w="1"/><text x="15.2379%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.9879%" y="597" width="0.0806%" height="15" fill="rgb(225,63,43)" fg:x="186" fg:w="1"/><text x="15.2379%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.9879%" y="581" width="0.0806%" height="15" fill="rgb(207,57,36)" fg:x="186" fg:w="1"/><text x="15.2379%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.9879%" y="565" width="0.0806%" height="15" fill="rgb(216,99,33)" fg:x="186" fg:w="1"/><text x="15.2379%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.9879%" y="549" width="0.0806%" height="15" fill="rgb(225,42,16)" fg:x="186" fg:w="1"/><text x="15.2379%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.9879%" y="533" width="0.0806%" height="15" fill="rgb(220,201,45)" fg:x="186" fg:w="1"/><text x="15.2379%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.9879%" y="517" width="0.0806%" height="15" fill="rgb(225,33,4)" fg:x="186" fg:w="1"/><text x="15.2379%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.9879%" y="501" width="0.0806%" height="15" fill="rgb(224,33,50)" fg:x="186" fg:w="1"/><text x="15.2379%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.9879%" y="485" width="0.0806%" height="15" fill="rgb(246,198,51)" fg:x="186" fg:w="1"/><text x="15.2379%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.9879%" y="469" width="0.0806%" height="15" fill="rgb(205,22,4)" fg:x="186" fg:w="1"/><text x="15.2379%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.9879%" y="453" width="0.0806%" height="15" fill="rgb(206,3,8)" fg:x="186" fg:w="1"/><text x="15.2379%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9879%" y="437" width="0.0806%" height="15" fill="rgb(251,23,15)" fg:x="186" fg:w="1"/><text x="15.2379%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.1491%" y="501" width="0.0806%" height="15" fill="rgb(252,88,28)" fg:x="188" fg:w="1"/><text x="15.3991%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="15.1491%" y="485" width="0.0806%" height="15" fill="rgb(212,127,14)" fg:x="188" fg:w="1"/><text x="15.3991%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="15.1491%" y="469" width="0.0806%" height="15" fill="rgb(247,145,37)" fg:x="188" fg:w="1"/><text x="15.3991%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.1491%" y="453" width="0.0806%" height="15" fill="rgb(209,117,53)" fg:x="188" fg:w="1"/><text x="15.3991%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.1491%" y="437" width="0.0806%" height="15" fill="rgb(212,90,42)" fg:x="188" fg:w="1"/><text x="15.3991%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.1491%" y="421" width="0.0806%" height="15" fill="rgb(218,164,37)" fg:x="188" fg:w="1"/><text x="15.3991%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.1491%" y="405" width="0.0806%" height="15" fill="rgb(246,65,34)" fg:x="188" fg:w="1"/><text x="15.3991%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="15.1491%" y="533" width="0.1612%" height="15" fill="rgb(231,100,33)" fg:x="188" fg:w="2"/><text x="15.3991%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="15.1491%" y="517" width="0.1612%" height="15" fill="rgb(228,126,14)" fg:x="188" fg:w="2"/><text x="15.3991%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="15.2297%" y="501" width="0.0806%" height="15" fill="rgb(215,173,21)" fg:x="189" fg:w="1"/><text x="15.4797%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="15.2297%" y="485" width="0.0806%" height="15" fill="rgb(210,6,40)" fg:x="189" fg:w="1"/><text x="15.4797%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="15.2297%" y="469" width="0.0806%" height="15" fill="rgb(212,48,18)" fg:x="189" fg:w="1"/><text x="15.4797%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.2297%" y="453" width="0.0806%" height="15" fill="rgb(230,214,11)" fg:x="189" fg:w="1"/><text x="15.4797%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.2297%" y="437" width="0.0806%" height="15" fill="rgb(254,105,39)" fg:x="189" fg:w="1"/><text x="15.4797%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.2297%" y="421" width="0.0806%" height="15" fill="rgb(245,158,5)" fg:x="189" fg:w="1"/><text x="15.4797%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.2297%" y="405" width="0.0806%" height="15" fill="rgb(249,208,11)" fg:x="189" fg:w="1"/><text x="15.4797%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.2297%" y="389" width="0.0806%" height="15" fill="rgb(210,39,28)" fg:x="189" fg:w="1"/><text x="15.4797%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.2297%" y="373" width="0.0806%" height="15" fill="rgb(211,56,53)" fg:x="189" fg:w="1"/><text x="15.4797%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="15.3102%" y="517" width="0.0806%" height="15" fill="rgb(226,201,30)" fg:x="190" fg:w="1"/><text x="15.5602%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="15.3102%" y="533" width="0.1612%" height="15" fill="rgb(239,101,34)" fg:x="190" fg:w="2"/><text x="15.5602%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="15.3908%" y="517" width="0.0806%" height="15" fill="rgb(226,209,5)" fg:x="191" fg:w="1"/><text x="15.6408%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="15.3908%" y="501" width="0.0806%" height="15" fill="rgb(250,105,47)" fg:x="191" fg:w="1"/><text x="15.6408%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.3908%" y="485" width="0.0806%" height="15" fill="rgb(230,72,3)" fg:x="191" fg:w="1"/><text x="15.6408%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.3908%" y="469" width="0.0806%" height="15" fill="rgb(232,218,39)" fg:x="191" fg:w="1"/><text x="15.6408%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.3908%" y="453" width="0.0806%" height="15" fill="rgb(248,166,6)" fg:x="191" fg:w="1"/><text x="15.6408%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.3908%" y="437" width="0.0806%" height="15" fill="rgb(247,89,20)" fg:x="191" fg:w="1"/><text x="15.6408%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.3908%" y="421" width="0.0806%" height="15" fill="rgb(248,130,54)" fg:x="191" fg:w="1"/><text x="15.6408%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.3908%" y="405" width="0.0806%" height="15" fill="rgb(234,196,4)" fg:x="191" fg:w="1"/><text x="15.6408%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="15.4714%" y="405" width="0.0806%" height="15" fill="rgb(250,143,31)" fg:x="192" fg:w="1"/><text x="15.7214%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.4714%" y="389" width="0.0806%" height="15" fill="rgb(211,110,34)" fg:x="192" fg:w="1"/><text x="15.7214%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.4714%" y="373" width="0.0806%" height="15" fill="rgb(215,124,48)" fg:x="192" fg:w="1"/><text x="15.7214%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="15.4714%" y="517" width="0.1612%" height="15" fill="rgb(216,46,13)" fg:x="192" fg:w="2"/><text x="15.7214%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="15.4714%" y="501" width="0.1612%" height="15" fill="rgb(205,184,25)" fg:x="192" fg:w="2"/><text x="15.7214%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.4714%" y="485" width="0.1612%" height="15" fill="rgb(228,1,10)" fg:x="192" fg:w="2"/><text x="15.7214%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.4714%" y="469" width="0.1612%" height="15" fill="rgb(213,116,27)" fg:x="192" fg:w="2"/><text x="15.7214%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="15.4714%" y="453" width="0.1612%" height="15" fill="rgb(241,95,50)" fg:x="192" fg:w="2"/><text x="15.7214%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.4714%" y="437" width="0.1612%" height="15" fill="rgb(238,48,32)" fg:x="192" fg:w="2"/><text x="15.7214%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="15.4714%" y="421" width="0.1612%" height="15" fill="rgb(235,113,49)" fg:x="192" fg:w="2"/><text x="15.7214%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="15.5520%" y="405" width="0.0806%" height="15" fill="rgb(205,127,43)" fg:x="193" fg:w="1"/><text x="15.8020%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.5520%" y="389" width="0.0806%" height="15" fill="rgb(250,162,2)" fg:x="193" fg:w="1"/><text x="15.8020%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="15.5520%" y="373" width="0.0806%" height="15" fill="rgb(220,13,41)" fg:x="193" fg:w="1"/><text x="15.8020%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="15.5520%" y="357" width="0.0806%" height="15" fill="rgb(249,221,25)" fg:x="193" fg:w="1"/><text x="15.8020%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="15.5520%" y="341" width="0.0806%" height="15" fill="rgb(215,208,19)" fg:x="193" fg:w="1"/><text x="15.8020%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.6326%" y="405" width="0.0806%" height="15" fill="rgb(236,175,2)" fg:x="194" fg:w="1"/><text x="15.8826%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="15.6326%" y="389" width="0.0806%" height="15" fill="rgb(241,52,2)" fg:x="194" fg:w="1"/><text x="15.8826%" y="399.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (10 samples, 0.81%)</title><rect x="15.0685%" y="645" width="0.8058%" height="15" fill="rgb(248,140,14)" fg:x="187" fg:w="10"/><text x="15.3185%" y="655.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (10 samples, 0.81%)</title><rect x="15.0685%" y="629" width="0.8058%" height="15" fill="rgb(253,22,42)" fg:x="187" fg:w="10"/><text x="15.3185%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (10 samples, 0.81%)</title><rect x="15.0685%" y="613" width="0.8058%" height="15" fill="rgb(234,61,47)" fg:x="187" fg:w="10"/><text x="15.3185%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (10 samples, 0.81%)</title><rect x="15.0685%" y="597" width="0.8058%" height="15" fill="rgb(208,226,15)" fg:x="187" fg:w="10"/><text x="15.3185%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (9 samples, 0.73%)</title><rect x="15.1491%" y="581" width="0.7252%" height="15" fill="rgb(217,221,4)" fg:x="188" fg:w="9"/><text x="15.3991%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.73%)</title><rect x="15.1491%" y="565" width="0.7252%" height="15" fill="rgb(212,174,34)" fg:x="188" fg:w="9"/><text x="15.3991%" y="575.50"></text></g><g><title>engine::internal::Entities::add_persisted (9 samples, 0.73%)</title><rect x="15.1491%" y="549" width="0.7252%" height="15" fill="rgb(253,83,4)" fg:x="188" fg:w="9"/><text x="15.3991%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="15.4714%" y="533" width="0.4029%" height="15" fill="rgb(250,195,49)" fg:x="192" fg:w="5"/><text x="15.7214%" y="543.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="15.6326%" y="517" width="0.2417%" height="15" fill="rgb(241,192,25)" fg:x="194" fg:w="3"/><text x="15.8826%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="15.6326%" y="501" width="0.2417%" height="15" fill="rgb(208,124,10)" fg:x="194" fg:w="3"/><text x="15.8826%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="15.6326%" y="485" width="0.2417%" height="15" fill="rgb(222,33,0)" fg:x="194" fg:w="3"/><text x="15.8826%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="15.6326%" y="469" width="0.2417%" height="15" fill="rgb(234,209,28)" fg:x="194" fg:w="3"/><text x="15.8826%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="15.6326%" y="453" width="0.2417%" height="15" fill="rgb(224,11,23)" fg:x="194" fg:w="3"/><text x="15.8826%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="15.6326%" y="437" width="0.2417%" height="15" fill="rgb(232,99,1)" fg:x="194" fg:w="3"/><text x="15.8826%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="15.6326%" y="421" width="0.2417%" height="15" fill="rgb(237,95,45)" fg:x="194" fg:w="3"/><text x="15.8826%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="15.7131%" y="405" width="0.1612%" height="15" fill="rgb(208,109,11)" fg:x="195" fg:w="2"/><text x="15.9631%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.7937%" y="389" width="0.0806%" height="15" fill="rgb(216,190,48)" fg:x="196" fg:w="1"/><text x="16.0437%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.7937%" y="373" width="0.0806%" height="15" fill="rgb(251,171,36)" fg:x="196" fg:w="1"/><text x="16.0437%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.7937%" y="357" width="0.0806%" height="15" fill="rgb(230,62,22)" fg:x="196" fg:w="1"/><text x="16.0437%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.7937%" y="341" width="0.0806%" height="15" fill="rgb(225,114,35)" fg:x="196" fg:w="1"/><text x="16.0437%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.7937%" y="325" width="0.0806%" height="15" fill="rgb(215,118,42)" fg:x="196" fg:w="1"/><text x="16.0437%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.7937%" y="309" width="0.0806%" height="15" fill="rgb(243,119,21)" fg:x="196" fg:w="1"/><text x="16.0437%" y="319.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="15.8743%" y="517" width="0.0806%" height="15" fill="rgb(252,177,53)" fg:x="197" fg:w="1"/><text x="16.1243%" y="527.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.8743%" y="501" width="0.0806%" height="15" fill="rgb(237,209,29)" fg:x="197" fg:w="1"/><text x="16.1243%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="16.0355%" y="485" width="0.1612%" height="15" fill="rgb(212,65,23)" fg:x="199" fg:w="2"/><text x="16.2855%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="16.0355%" y="469" width="0.1612%" height="15" fill="rgb(230,222,46)" fg:x="199" fg:w="2"/><text x="16.2855%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="16.1160%" y="453" width="0.0806%" height="15" fill="rgb(215,135,32)" fg:x="200" fg:w="1"/><text x="16.3660%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="16.1160%" y="437" width="0.0806%" height="15" fill="rgb(246,101,22)" fg:x="200" fg:w="1"/><text x="16.3660%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="16.1160%" y="421" width="0.0806%" height="15" fill="rgb(206,107,13)" fg:x="200" fg:w="1"/><text x="16.3660%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.2772%" y="469" width="0.0806%" height="15" fill="rgb(250,100,44)" fg:x="202" fg:w="1"/><text x="16.5272%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.4384%" y="389" width="0.1612%" height="15" fill="rgb(231,147,38)" fg:x="204" fg:w="2"/><text x="16.6884%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.5189%" y="373" width="0.0806%" height="15" fill="rgb(229,8,40)" fg:x="205" fg:w="1"/><text x="16.7689%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5189%" y="357" width="0.0806%" height="15" fill="rgb(221,135,30)" fg:x="205" fg:w="1"/><text x="16.7689%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5189%" y="341" width="0.0806%" height="15" fill="rgb(249,193,18)" fg:x="205" fg:w="1"/><text x="16.7689%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.5189%" y="325" width="0.0806%" height="15" fill="rgb(209,133,39)" fg:x="205" fg:w="1"/><text x="16.7689%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.5189%" y="309" width="0.0806%" height="15" fill="rgb(232,100,14)" fg:x="205" fg:w="1"/><text x="16.7689%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.5189%" y="293" width="0.0806%" height="15" fill="rgb(224,185,1)" fg:x="205" fg:w="1"/><text x="16.7689%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.5189%" y="277" width="0.0806%" height="15" fill="rgb(223,139,8)" fg:x="205" fg:w="1"/><text x="16.7689%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.5189%" y="261" width="0.0806%" height="15" fill="rgb(232,213,38)" fg:x="205" fg:w="1"/><text x="16.7689%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.5189%" y="245" width="0.0806%" height="15" fill="rgb(207,94,22)" fg:x="205" fg:w="1"/><text x="16.7689%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.5189%" y="229" width="0.0806%" height="15" fill="rgb(219,183,54)" fg:x="205" fg:w="1"/><text x="16.7689%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.5189%" y="213" width="0.0806%" height="15" fill="rgb(216,185,54)" fg:x="205" fg:w="1"/><text x="16.7689%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.5189%" y="197" width="0.0806%" height="15" fill="rgb(254,217,39)" fg:x="205" fg:w="1"/><text x="16.7689%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5189%" y="181" width="0.0806%" height="15" fill="rgb(240,178,23)" fg:x="205" fg:w="1"/><text x="16.7689%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="16.4384%" y="437" width="0.2417%" height="15" fill="rgb(218,11,47)" fg:x="204" fg:w="3"/><text x="16.6884%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="16.4384%" y="421" width="0.2417%" height="15" fill="rgb(218,51,51)" fg:x="204" fg:w="3"/><text x="16.6884%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="16.4384%" y="405" width="0.2417%" height="15" fill="rgb(238,126,27)" fg:x="204" fg:w="3"/><text x="16.6884%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5995%" y="389" width="0.0806%" height="15" fill="rgb(249,202,22)" fg:x="206" fg:w="1"/><text x="16.8495%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5995%" y="373" width="0.0806%" height="15" fill="rgb(254,195,49)" fg:x="206" fg:w="1"/><text x="16.8495%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.5995%" y="357" width="0.0806%" height="15" fill="rgb(208,123,14)" fg:x="206" fg:w="1"/><text x="16.8495%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.5995%" y="341" width="0.0806%" height="15" fill="rgb(224,200,8)" fg:x="206" fg:w="1"/><text x="16.8495%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.5995%" y="325" width="0.0806%" height="15" fill="rgb(217,61,36)" fg:x="206" fg:w="1"/><text x="16.8495%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="16.5995%" y="309" width="0.0806%" height="15" fill="rgb(206,35,45)" fg:x="206" fg:w="1"/><text x="16.8495%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="16.5995%" y="293" width="0.0806%" height="15" fill="rgb(217,65,33)" fg:x="206" fg:w="1"/><text x="16.8495%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.8413%" y="309" width="0.1612%" height="15" fill="rgb(222,158,48)" fg:x="209" fg:w="2"/><text x="17.0913%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.8413%" y="293" width="0.1612%" height="15" fill="rgb(254,2,54)" fg:x="209" fg:w="2"/><text x="17.0913%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="16.8413%" y="373" width="0.2417%" height="15" fill="rgb(250,143,38)" fg:x="209" fg:w="3"/><text x="17.0913%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="16.8413%" y="357" width="0.2417%" height="15" fill="rgb(248,25,0)" fg:x="209" fg:w="3"/><text x="17.0913%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (3 samples, 0.24%)</title><rect x="16.8413%" y="341" width="0.2417%" height="15" fill="rgb(206,152,27)" fg:x="209" fg:w="3"/><text x="17.0913%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="16.8413%" y="325" width="0.2417%" height="15" fill="rgb(240,77,30)" fg:x="209" fg:w="3"/><text x="17.0913%" y="335.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="17.0024%" y="309" width="0.0806%" height="15" fill="rgb(231,5,3)" fg:x="211" fg:w="1"/><text x="17.2524%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (12 samples, 0.97%)</title><rect x="16.1966%" y="485" width="0.9670%" height="15" fill="rgb(207,226,32)" fg:x="201" fg:w="12"/><text x="16.4466%" y="495.50"></text></g><g><title>kernel::model::props::load_props (10 samples, 0.81%)</title><rect x="16.3578%" y="469" width="0.8058%" height="15" fill="rgb(222,207,47)" fg:x="203" fg:w="10"/><text x="16.6078%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (10 samples, 0.81%)</title><rect x="16.3578%" y="453" width="0.8058%" height="15" fill="rgb(229,115,45)" fg:x="203" fg:w="10"/><text x="16.6078%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (6 samples, 0.48%)</title><rect x="16.6801%" y="437" width="0.4835%" height="15" fill="rgb(224,191,6)" fg:x="207" fg:w="6"/><text x="16.9301%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="16.6801%" y="421" width="0.4835%" height="15" fill="rgb(230,227,24)" fg:x="207" fg:w="6"/><text x="16.9301%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (5 samples, 0.40%)</title><rect x="16.7607%" y="405" width="0.4029%" height="15" fill="rgb(228,80,19)" fg:x="208" fg:w="5"/><text x="17.0107%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="16.7607%" y="389" width="0.4029%" height="15" fill="rgb(247,229,0)" fg:x="208" fg:w="5"/><text x="17.0107%" y="399.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="17.0830%" y="373" width="0.0806%" height="15" fill="rgb(237,194,15)" fg:x="212" fg:w="1"/><text x="17.3330%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.1636%" y="373" width="0.0806%" height="15" fill="rgb(219,203,20)" fg:x="213" fg:w="1"/><text x="17.4136%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1636%" y="357" width="0.0806%" height="15" fill="rgb(234,128,8)" fg:x="213" fg:w="1"/><text x="17.4136%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.1636%" y="389" width="0.1612%" height="15" fill="rgb(248,202,8)" fg:x="213" fg:w="2"/><text x="17.4136%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2442%" y="373" width="0.0806%" height="15" fill="rgb(206,104,37)" fg:x="214" fg:w="1"/><text x="17.4942%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.1636%" y="437" width="0.2417%" height="15" fill="rgb(223,8,27)" fg:x="213" fg:w="3"/><text x="17.4136%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.1636%" y="421" width="0.2417%" height="15" fill="rgb(216,217,28)" fg:x="213" fg:w="3"/><text x="17.4136%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.1636%" y="405" width="0.2417%" height="15" fill="rgb(249,199,1)" fg:x="213" fg:w="3"/><text x="17.4136%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3247%" y="389" width="0.0806%" height="15" fill="rgb(240,85,17)" fg:x="215" fg:w="1"/><text x="17.5747%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (6 samples, 0.48%)</title><rect x="17.1636%" y="485" width="0.4835%" height="15" fill="rgb(206,108,45)" fg:x="213" fg:w="6"/><text x="17.4136%" y="495.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="17.1636%" y="469" width="0.4835%" height="15" fill="rgb(245,210,41)" fg:x="213" fg:w="6"/><text x="17.4136%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="17.1636%" y="453" width="0.4835%" height="15" fill="rgb(206,13,37)" fg:x="213" fg:w="6"/><text x="17.4136%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="17.4053%" y="437" width="0.2417%" height="15" fill="rgb(250,61,18)" fg:x="216" fg:w="3"/><text x="17.6553%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="17.4053%" y="421" width="0.2417%" height="15" fill="rgb(235,172,48)" fg:x="216" fg:w="3"/><text x="17.6553%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="17.4053%" y="405" width="0.2417%" height="15" fill="rgb(249,201,17)" fg:x="216" fg:w="3"/><text x="17.6553%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.4859%" y="389" width="0.1612%" height="15" fill="rgb(219,208,6)" fg:x="217" fg:w="2"/><text x="17.7359%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.5665%" y="373" width="0.0806%" height="15" fill="rgb(248,31,23)" fg:x="218" fg:w="1"/><text x="17.8165%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5665%" y="357" width="0.0806%" height="15" fill="rgb(245,15,42)" fg:x="218" fg:w="1"/><text x="17.8165%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.5665%" y="341" width="0.0806%" height="15" fill="rgb(222,217,39)" fg:x="218" fg:w="1"/><text x="17.8165%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5665%" y="325" width="0.0806%" height="15" fill="rgb(210,219,27)" fg:x="218" fg:w="1"/><text x="17.8165%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.6471%" y="357" width="0.0806%" height="15" fill="rgb(252,166,36)" fg:x="219" fg:w="1"/><text x="17.8971%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.6471%" y="341" width="0.0806%" height="15" fill="rgb(245,132,34)" fg:x="219" fg:w="1"/><text x="17.8971%" y="351.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="17.6471%" y="325" width="0.0806%" height="15" fill="rgb(236,54,3)" fg:x="219" fg:w="1"/><text x="17.8971%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="17.6471%" y="309" width="0.0806%" height="15" fill="rgb(241,173,43)" fg:x="219" fg:w="1"/><text x="17.8971%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="17.6471%" y="293" width="0.0806%" height="15" fill="rgb(215,190,9)" fg:x="219" fg:w="1"/><text x="17.8971%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="17.6471%" y="277" width="0.0806%" height="15" fill="rgb(242,101,16)" fg:x="219" fg:w="1"/><text x="17.8971%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.6471%" y="261" width="0.0806%" height="15" fill="rgb(223,190,21)" fg:x="219" fg:w="1"/><text x="17.8971%" y="271.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="17.6471%" y="485" width="0.1612%" height="15" fill="rgb(215,228,25)" fg:x="219" fg:w="2"/><text x="17.8971%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="17.6471%" y="469" width="0.1612%" height="15" fill="rgb(225,36,22)" fg:x="219" fg:w="2"/><text x="17.8971%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (2 samples, 0.16%)</title><rect x="17.6471%" y="453" width="0.1612%" height="15" fill="rgb(251,106,46)" fg:x="219" fg:w="2"/><text x="17.8971%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="17.6471%" y="437" width="0.1612%" height="15" fill="rgb(208,90,1)" fg:x="219" fg:w="2"/><text x="17.8971%" y="447.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="17.6471%" y="421" width="0.1612%" height="15" fill="rgb(243,10,4)" fg:x="219" fg:w="2"/><text x="17.8971%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="17.6471%" y="405" width="0.1612%" height="15" fill="rgb(212,137,27)" fg:x="219" fg:w="2"/><text x="17.8971%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="17.6471%" y="389" width="0.1612%" height="15" fill="rgb(231,220,49)" fg:x="219" fg:w="2"/><text x="17.8971%" y="399.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="17.6471%" y="373" width="0.1612%" height="15" fill="rgb(237,96,20)" fg:x="219" fg:w="2"/><text x="17.8971%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.7276%" y="357" width="0.0806%" height="15" fill="rgb(239,229,30)" fg:x="220" fg:w="1"/><text x="17.9776%" y="367.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="17.7276%" y="341" width="0.0806%" height="15" fill="rgb(219,65,33)" fg:x="220" fg:w="1"/><text x="17.9776%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.9694%" y="437" width="0.0806%" height="15" fill="rgb(243,134,7)" fg:x="223" fg:w="1"/><text x="18.2194%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.9694%" y="421" width="0.0806%" height="15" fill="rgb(216,177,54)" fg:x="223" fg:w="1"/><text x="18.2194%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.9694%" y="405" width="0.0806%" height="15" fill="rgb(211,160,20)" fg:x="223" fg:w="1"/><text x="18.2194%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.9694%" y="389" width="0.0806%" height="15" fill="rgb(239,85,39)" fg:x="223" fg:w="1"/><text x="18.2194%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.9694%" y="373" width="0.0806%" height="15" fill="rgb(232,125,22)" fg:x="223" fg:w="1"/><text x="18.2194%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.9694%" y="357" width="0.0806%" height="15" fill="rgb(244,57,34)" fg:x="223" fg:w="1"/><text x="18.2194%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="17.9694%" y="341" width="0.0806%" height="15" fill="rgb(214,203,32)" fg:x="223" fg:w="1"/><text x="18.2194%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="17.9694%" y="325" width="0.0806%" height="15" fill="rgb(207,58,43)" fg:x="223" fg:w="1"/><text x="18.2194%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="17.9694%" y="309" width="0.0806%" height="15" fill="rgb(215,193,15)" fg:x="223" fg:w="1"/><text x="18.2194%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="17.9694%" y="293" width="0.0806%" height="15" fill="rgb(232,15,44)" fg:x="223" fg:w="1"/><text x="18.2194%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="17.9694%" y="277" width="0.0806%" height="15" fill="rgb(212,3,48)" fg:x="223" fg:w="1"/><text x="18.2194%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="17.9694%" y="261" width="0.0806%" height="15" fill="rgb(218,128,7)" fg:x="223" fg:w="1"/><text x="18.2194%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.9694%" y="245" width="0.0806%" height="15" fill="rgb(226,216,39)" fg:x="223" fg:w="1"/><text x="18.2194%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="17.9694%" y="229" width="0.0806%" height="15" fill="rgb(243,47,51)" fg:x="223" fg:w="1"/><text x="18.2194%" y="239.50"></text></g><g><title>core::cmp::max (1 samples, 0.08%)</title><rect x="17.9694%" y="213" width="0.0806%" height="15" fill="rgb(241,183,40)" fg:x="223" fg:w="1"/><text x="18.2194%" y="223.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.08%)</title><rect x="17.9694%" y="197" width="0.0806%" height="15" fill="rgb(231,217,32)" fg:x="223" fg:w="1"/><text x="18.2194%" y="207.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.08%)</title><rect x="17.9694%" y="181" width="0.0806%" height="15" fill="rgb(229,61,38)" fg:x="223" fg:w="1"/><text x="18.2194%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.0500%" y="405" width="0.0806%" height="15" fill="rgb(225,210,5)" fg:x="224" fg:w="1"/><text x="18.3000%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="18.1305%" y="325" width="0.0806%" height="15" fill="rgb(231,79,45)" fg:x="225" fg:w="1"/><text x="18.3805%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="18.1305%" y="309" width="0.0806%" height="15" fill="rgb(224,100,7)" fg:x="225" fg:w="1"/><text x="18.3805%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2111%" y="309" width="0.0806%" height="15" fill="rgb(241,198,18)" fg:x="226" fg:w="1"/><text x="18.4611%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="18.2917%" y="309" width="0.0806%" height="15" fill="rgb(252,97,53)" fg:x="227" fg:w="1"/><text x="18.5417%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="18.1305%" y="341" width="0.4029%" height="15" fill="rgb(220,88,7)" fg:x="225" fg:w="5"/><text x="18.3805%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (4 samples, 0.32%)</title><rect x="18.2111%" y="325" width="0.3223%" height="15" fill="rgb(213,176,14)" fg:x="226" fg:w="4"/><text x="18.4611%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="18.3723%" y="309" width="0.1612%" height="15" fill="rgb(246,73,7)" fg:x="228" fg:w="2"/><text x="18.6223%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.5334%" y="309" width="0.0806%" height="15" fill="rgb(245,64,36)" fg:x="230" fg:w="1"/><text x="18.7834%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.5334%" y="293" width="0.0806%" height="15" fill="rgb(245,80,10)" fg:x="230" fg:w="1"/><text x="18.7834%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.5334%" y="277" width="0.0806%" height="15" fill="rgb(232,107,50)" fg:x="230" fg:w="1"/><text x="18.7834%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="18.1305%" y="405" width="0.5641%" height="15" fill="rgb(253,3,0)" fg:x="225" fg:w="7"/><text x="18.3805%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="18.1305%" y="389" width="0.5641%" height="15" fill="rgb(212,99,53)" fg:x="225" fg:w="7"/><text x="18.3805%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (7 samples, 0.56%)</title><rect x="18.1305%" y="373" width="0.5641%" height="15" fill="rgb(249,111,54)" fg:x="225" fg:w="7"/><text x="18.3805%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (7 samples, 0.56%)</title><rect x="18.1305%" y="357" width="0.5641%" height="15" fill="rgb(249,55,30)" fg:x="225" fg:w="7"/><text x="18.3805%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="18.5334%" y="341" width="0.1612%" height="15" fill="rgb(237,47,42)" fg:x="230" fg:w="2"/><text x="18.7834%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="18.5334%" y="325" width="0.1612%" height="15" fill="rgb(211,20,18)" fg:x="230" fg:w="2"/><text x="18.7834%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="18.6140%" y="309" width="0.0806%" height="15" fill="rgb(231,203,46)" fg:x="231" fg:w="1"/><text x="18.8640%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.6946%" y="389" width="0.0806%" height="15" fill="rgb(237,142,3)" fg:x="232" fg:w="1"/><text x="18.9446%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.7752%" y="357" width="0.0806%" height="15" fill="rgb(241,107,1)" fg:x="233" fg:w="1"/><text x="19.0252%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.7752%" y="341" width="0.0806%" height="15" fill="rgb(229,83,13)" fg:x="233" fg:w="1"/><text x="19.0252%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="18.7752%" y="373" width="0.1612%" height="15" fill="rgb(241,91,40)" fg:x="233" fg:w="2"/><text x="19.0252%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="18.8558%" y="357" width="0.0806%" height="15" fill="rgb(225,3,45)" fg:x="234" fg:w="1"/><text x="19.1058%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.9363%" y="341" width="0.0806%" height="15" fill="rgb(244,223,14)" fg:x="235" fg:w="1"/><text x="19.1863%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="18.6946%" y="405" width="0.4029%" height="15" fill="rgb(224,124,37)" fg:x="232" fg:w="5"/><text x="18.9446%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="18.7752%" y="389" width="0.3223%" height="15" fill="rgb(251,171,30)" fg:x="233" fg:w="4"/><text x="19.0252%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="18.9363%" y="373" width="0.1612%" height="15" fill="rgb(236,46,54)" fg:x="235" fg:w="2"/><text x="19.1863%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="18.9363%" y="357" width="0.1612%" height="15" fill="rgb(245,213,5)" fg:x="235" fg:w="2"/><text x="19.1863%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.0169%" y="341" width="0.0806%" height="15" fill="rgb(230,144,27)" fg:x="236" fg:w="1"/><text x="19.2669%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.1781%" y="357" width="0.0806%" height="15" fill="rgb(220,86,6)" fg:x="238" fg:w="1"/><text x="19.4281%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.2587%" y="357" width="0.0806%" height="15" fill="rgb(240,20,13)" fg:x="239" fg:w="1"/><text x="19.5087%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (2 samples, 0.16%)</title><rect x="19.3392%" y="357" width="0.1612%" height="15" fill="rgb(217,89,34)" fg:x="240" fg:w="2"/><text x="19.5892%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="19.3392%" y="341" width="0.1612%" height="15" fill="rgb(229,13,5)" fg:x="240" fg:w="2"/><text x="19.5892%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="19.8227%" y="341" width="0.1612%" height="15" fill="rgb(244,67,35)" fg:x="246" fg:w="2"/><text x="20.0727%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.9839%" y="341" width="0.0806%" height="15" fill="rgb(221,40,2)" fg:x="248" fg:w="1"/><text x="20.2339%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="20.0645%" y="325" width="0.1612%" height="15" fill="rgb(237,157,21)" fg:x="249" fg:w="2"/><text x="20.3145%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.05%)</title><rect x="20.2256%" y="325" width="1.0475%" height="15" fill="rgb(222,94,11)" fg:x="251" fg:w="13"/><text x="20.4756%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="21.1120%" y="309" width="0.1612%" height="15" fill="rgb(249,113,6)" fg:x="262" fg:w="2"/><text x="21.3620%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (17 samples, 1.37%)</title><rect x="20.0645%" y="341" width="1.3699%" height="15" fill="rgb(238,137,36)" fg:x="249" fg:w="17"/><text x="20.3145%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (2 samples, 0.16%)</title><rect x="21.2732%" y="325" width="0.1612%" height="15" fill="rgb(210,102,26)" fg:x="264" fg:w="2"/><text x="21.5232%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.3537%" y="309" width="0.0806%" height="15" fill="rgb(218,30,30)" fg:x="265" fg:w="1"/><text x="21.6037%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="21.4343%" y="325" width="0.1612%" height="15" fill="rgb(214,67,26)" fg:x="266" fg:w="2"/><text x="21.6843%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (2 samples, 0.16%)</title><rect x="21.4343%" y="309" width="0.1612%" height="15" fill="rgb(251,9,53)" fg:x="266" fg:w="2"/><text x="21.6843%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="21.5955%" y="325" width="0.5641%" height="15" fill="rgb(228,204,25)" fg:x="268" fg:w="7"/><text x="21.8455%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="22.0790%" y="309" width="0.0806%" height="15" fill="rgb(207,153,8)" fg:x="274" fg:w="1"/><text x="22.3290%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (10 samples, 0.81%)</title><rect x="21.4343%" y="341" width="0.8058%" height="15" fill="rgb(242,9,16)" fg:x="266" fg:w="10"/><text x="21.6843%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="22.1595%" y="325" width="0.0806%" height="15" fill="rgb(217,211,10)" fg:x="275" fg:w="1"/><text x="22.4095%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="22.1595%" y="309" width="0.0806%" height="15" fill="rgb(219,228,52)" fg:x="275" fg:w="1"/><text x="22.4095%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="22.1595%" y="293" width="0.0806%" height="15" fill="rgb(231,92,29)" fg:x="275" fg:w="1"/><text x="22.4095%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.1595%" y="277" width="0.0806%" height="15" fill="rgb(232,8,23)" fg:x="275" fg:w="1"/><text x="22.4095%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.1595%" y="261" width="0.0806%" height="15" fill="rgb(216,211,34)" fg:x="275" fg:w="1"/><text x="22.4095%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.1595%" y="245" width="0.0806%" height="15" fill="rgb(236,151,0)" fg:x="275" fg:w="1"/><text x="22.4095%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.6430%" y="277" width="0.0806%" height="15" fill="rgb(209,168,3)" fg:x="281" fg:w="1"/><text x="22.8930%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="22.7236%" y="277" width="0.2417%" height="15" fill="rgb(208,129,28)" fg:x="282" fg:w="3"/><text x="22.9736%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.9654%" y="277" width="0.0806%" height="15" fill="rgb(229,78,22)" fg:x="285" fg:w="1"/><text x="23.2154%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="23.0459%" y="277" width="0.0806%" height="15" fill="rgb(228,187,13)" fg:x="286" fg:w="1"/><text x="23.2959%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.0459%" y="261" width="0.0806%" height="15" fill="rgb(240,119,24)" fg:x="286" fg:w="1"/><text x="23.2959%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.0459%" y="245" width="0.0806%" height="15" fill="rgb(209,194,42)" fg:x="286" fg:w="1"/><text x="23.2959%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.0459%" y="229" width="0.0806%" height="15" fill="rgb(247,200,46)" fg:x="286" fg:w="1"/><text x="23.2959%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="23.1265%" y="277" width="0.1612%" height="15" fill="rgb(218,76,16)" fg:x="287" fg:w="2"/><text x="23.3765%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="23.1265%" y="261" width="0.1612%" height="15" fill="rgb(225,21,48)" fg:x="287" fg:w="2"/><text x="23.3765%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="23.1265%" y="245" width="0.1612%" height="15" fill="rgb(239,223,50)" fg:x="287" fg:w="2"/><text x="23.3765%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.2071%" y="229" width="0.0806%" height="15" fill="rgb(244,45,21)" fg:x="288" fg:w="1"/><text x="23.4571%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.2877%" y="245" width="0.0806%" height="15" fill="rgb(232,33,43)" fg:x="289" fg:w="1"/><text x="23.5377%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.2877%" y="229" width="0.0806%" height="15" fill="rgb(209,8,3)" fg:x="289" fg:w="1"/><text x="23.5377%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.2877%" y="213" width="0.0806%" height="15" fill="rgb(214,25,53)" fg:x="289" fg:w="1"/><text x="23.5377%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.56%)</title><rect x="23.2877%" y="277" width="0.5641%" height="15" fill="rgb(254,186,54)" fg:x="289" fg:w="7"/><text x="23.5377%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (7 samples, 0.56%)</title><rect x="23.2877%" y="261" width="0.5641%" height="15" fill="rgb(208,174,49)" fg:x="289" fg:w="7"/><text x="23.5377%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="23.3683%" y="245" width="0.4835%" height="15" fill="rgb(233,191,51)" fg:x="290" fg:w="6"/><text x="23.6183%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="23.7712%" y="229" width="0.0806%" height="15" fill="rgb(222,134,10)" fg:x="295" fg:w="1"/><text x="24.0212%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.7712%" y="213" width="0.0806%" height="15" fill="rgb(230,226,20)" fg:x="295" fg:w="1"/><text x="24.0212%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.7712%" y="197" width="0.0806%" height="15" fill="rgb(251,111,25)" fg:x="295" fg:w="1"/><text x="24.0212%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.7712%" y="181" width="0.0806%" height="15" fill="rgb(224,40,46)" fg:x="295" fg:w="1"/><text x="24.0212%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (3 samples, 0.24%)</title><rect x="23.8517%" y="277" width="0.2417%" height="15" fill="rgb(236,108,47)" fg:x="296" fg:w="3"/><text x="24.1017%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="23.9323%" y="261" width="0.1612%" height="15" fill="rgb(234,93,0)" fg:x="297" fg:w="2"/><text x="24.1823%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="24.0129%" y="245" width="0.0806%" height="15" fill="rgb(224,213,32)" fg:x="298" fg:w="1"/><text x="24.2629%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (80 samples, 6.45%)</title><rect x="24.0935%" y="277" width="6.4464%" height="15" fill="rgb(251,11,48)" fg:x="299" fg:w="80"/><text x="24.3435%" y="287.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (80 samples, 6.45%)</title><rect x="24.0935%" y="261" width="6.4464%" height="15" fill="rgb(236,173,5)" fg:x="299" fg:w="80"/><text x="24.3435%" y="271.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (80 samples, 6.45%)</title><rect x="24.0935%" y="245" width="6.4464%" height="15" fill="rgb(230,95,12)" fg:x="299" fg:w="80"/><text x="24.3435%" y="255.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="30.5399%" y="277" width="0.4029%" height="15" fill="rgb(232,209,1)" fg:x="379" fg:w="5"/><text x="30.7899%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.8622%" y="261" width="0.0806%" height="15" fill="rgb(232,6,1)" fg:x="383" fg:w="1"/><text x="31.1122%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (109 samples, 8.78%)</title><rect x="22.3207%" y="325" width="8.7832%" height="15" fill="rgb(210,224,50)" fg:x="277" fg:w="109"/><text x="22.5707%" y="335.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (109 samples, 8.78%)</title><rect x="22.3207%" y="309" width="8.7832%" height="15" fill="rgb(228,127,35)" fg:x="277" fg:w="109"/><text x="22.5707%" y="319.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (109 samples, 8.78%)</title><rect x="22.3207%" y="293" width="8.7832%" height="15" fill="rgb(245,102,45)" fg:x="277" fg:w="109"/><text x="22.5707%" y="303.50">regex_automa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="30.9428%" y="277" width="0.1612%" height="15" fill="rgb(214,1,49)" fg:x="384" fg:w="2"/><text x="31.1928%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.0234%" y="261" width="0.0806%" height="15" fill="rgb(226,163,40)" fg:x="385" fg:w="1"/><text x="31.2734%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.0234%" y="245" width="0.0806%" height="15" fill="rgb(239,212,28)" fg:x="385" fg:w="1"/><text x="31.2734%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.0234%" y="229" width="0.0806%" height="15" fill="rgb(220,20,13)" fg:x="385" fg:w="1"/><text x="31.2734%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.1039%" y="325" width="0.0806%" height="15" fill="rgb(210,164,35)" fg:x="386" fg:w="1"/><text x="31.3539%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.4263%" y="309" width="0.1612%" height="15" fill="rgb(248,109,41)" fg:x="390" fg:w="2"/><text x="31.6763%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.5874%" y="309" width="0.0806%" height="15" fill="rgb(238,23,50)" fg:x="392" fg:w="1"/><text x="31.8374%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.5874%" y="293" width="0.0806%" height="15" fill="rgb(211,48,49)" fg:x="392" fg:w="1"/><text x="31.8374%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.5874%" y="277" width="0.0806%" height="15" fill="rgb(223,36,21)" fg:x="392" fg:w="1"/><text x="31.8374%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="31.6680%" y="309" width="0.4835%" height="15" fill="rgb(207,123,46)" fg:x="393" fg:w="6"/><text x="31.9180%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="31.8292%" y="293" width="0.3223%" height="15" fill="rgb(240,218,32)" fg:x="395" fg:w="4"/><text x="32.0792%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="31.8292%" y="277" width="0.3223%" height="15" fill="rgb(252,5,43)" fg:x="395" fg:w="4"/><text x="32.0792%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="31.9098%" y="261" width="0.2417%" height="15" fill="rgb(252,84,19)" fg:x="396" fg:w="3"/><text x="32.1598%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.6350%" y="293" width="0.0806%" height="15" fill="rgb(243,152,39)" fg:x="405" fg:w="1"/><text x="32.8850%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.7156%" y="261" width="0.0806%" height="15" fill="rgb(234,160,15)" fg:x="406" fg:w="1"/><text x="32.9656%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.73%)</title><rect x="32.1515%" y="309" width="0.7252%" height="15" fill="rgb(237,34,20)" fg:x="399" fg:w="9"/><text x="32.4015%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="32.7156%" y="293" width="0.1612%" height="15" fill="rgb(229,97,13)" fg:x="406" fg:w="2"/><text x="32.9656%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.7156%" y="277" width="0.1612%" height="15" fill="rgb(234,71,50)" fg:x="406" fg:w="2"/><text x="32.9656%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.7961%" y="261" width="0.0806%" height="15" fill="rgb(253,155,4)" fg:x="407" fg:w="1"/><text x="33.0461%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="32.8767%" y="309" width="0.1612%" height="15" fill="rgb(222,185,37)" fg:x="408" fg:w="2"/><text x="33.1267%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.0379%" y="293" width="0.0806%" height="15" fill="rgb(251,177,13)" fg:x="410" fg:w="1"/><text x="33.2879%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (25 samples, 2.01%)</title><rect x="31.1845%" y="325" width="2.0145%" height="15" fill="rgb(250,179,40)" fg:x="387" fg:w="25"/><text x="31.4345%" y="335.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="33.0379%" y="309" width="0.1612%" height="15" fill="rgb(242,44,2)" fg:x="410" fg:w="2"/><text x="33.2879%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="33.1185%" y="293" width="0.0806%" height="15" fill="rgb(216,177,13)" fg:x="411" fg:w="1"/><text x="33.3685%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="33.1990%" y="309" width="0.0806%" height="15" fill="rgb(216,106,43)" fg:x="412" fg:w="1"/><text x="33.4490%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="33.1990%" y="325" width="0.1612%" height="15" fill="rgb(216,183,2)" fg:x="412" fg:w="2"/><text x="33.4490%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="33.2796%" y="309" width="0.0806%" height="15" fill="rgb(249,75,3)" fg:x="413" fg:w="1"/><text x="33.5296%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="33.2796%" y="293" width="0.0806%" height="15" fill="rgb(219,67,39)" fg:x="413" fg:w="1"/><text x="33.5296%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (139 samples, 11.20%)</title><rect x="22.2401%" y="341" width="11.2006%" height="15" fill="rgb(253,228,2)" fg:x="276" fg:w="139"/><text x="22.4901%" y="351.50">regex_automata::..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="33.3602%" y="325" width="0.0806%" height="15" fill="rgb(235,138,27)" fg:x="414" fg:w="1"/><text x="33.6102%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="33.4408%" y="341" width="0.0806%" height="15" fill="rgb(236,97,51)" fg:x="415" fg:w="1"/><text x="33.6908%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::new (176 samples, 14.18%)</title><rect x="19.5004%" y="357" width="14.1821%" height="15" fill="rgb(240,80,30)" fg:x="242" fg:w="176"/><text x="19.7504%" y="367.50">regex_automata::meta::..</text></g><g><title>regex_automata::util::prefilter::suffixes (2 samples, 0.16%)</title><rect x="33.5214%" y="341" width="0.1612%" height="15" fill="rgb(230,178,19)" fg:x="416" fg:w="2"/><text x="33.7714%" y="351.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="33.6019%" y="325" width="0.0806%" height="15" fill="rgb(210,190,27)" fg:x="417" fg:w="1"/><text x="33.8519%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.6825%" y="325" width="0.0806%" height="15" fill="rgb(222,107,31)" fg:x="418" fg:w="1"/><text x="33.9325%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.6825%" y="309" width="0.0806%" height="15" fill="rgb(216,127,34)" fg:x="418" fg:w="1"/><text x="33.9325%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="33.7631%" y="309" width="0.0806%" height="15" fill="rgb(234,116,52)" fg:x="419" fg:w="1"/><text x="34.0131%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="33.7631%" y="293" width="0.0806%" height="15" fill="rgb(222,124,15)" fg:x="419" fg:w="1"/><text x="34.0131%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="33.7631%" y="325" width="0.1612%" height="15" fill="rgb(231,179,28)" fg:x="419" fg:w="2"/><text x="34.0131%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="33.8437%" y="309" width="0.0806%" height="15" fill="rgb(226,93,45)" fg:x="420" fg:w="1"/><text x="34.0937%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.8437%" y="293" width="0.0806%" height="15" fill="rgb(215,8,51)" fg:x="420" fg:w="1"/><text x="34.0937%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.8437%" y="277" width="0.0806%" height="15" fill="rgb(223,106,5)" fg:x="420" fg:w="1"/><text x="34.0937%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.8437%" y="261" width="0.0806%" height="15" fill="rgb(250,191,5)" fg:x="420" fg:w="1"/><text x="34.0937%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="33.6825%" y="357" width="0.3223%" height="15" fill="rgb(242,132,44)" fg:x="418" fg:w="4"/><text x="33.9325%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="33.6825%" y="341" width="0.3223%" height="15" fill="rgb(251,152,29)" fg:x="418" fg:w="4"/><text x="33.9325%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="33.9243%" y="325" width="0.0806%" height="15" fill="rgb(218,179,5)" fg:x="421" fg:w="1"/><text x="34.1743%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.2466%" y="293" width="0.0806%" height="15" fill="rgb(227,67,19)" fg:x="425" fg:w="1"/><text x="34.4966%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.2466%" y="277" width="0.0806%" height="15" fill="rgb(233,119,31)" fg:x="425" fg:w="1"/><text x="34.4966%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.2466%" y="261" width="0.0806%" height="15" fill="rgb(241,120,22)" fg:x="425" fg:w="1"/><text x="34.4966%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="34.0854%" y="325" width="0.3223%" height="15" fill="rgb(224,102,30)" fg:x="423" fg:w="4"/><text x="34.3354%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="34.1660%" y="309" width="0.2417%" height="15" fill="rgb(210,164,37)" fg:x="424" fg:w="3"/><text x="34.4160%" y="319.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="34.3272%" y="293" width="0.0806%" height="15" fill="rgb(226,191,16)" fg:x="426" fg:w="1"/><text x="34.5772%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="34.4077%" y="325" width="0.1612%" height="15" fill="rgb(214,40,45)" fg:x="427" fg:w="2"/><text x="34.6577%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="34.4883%" y="309" width="0.0806%" height="15" fill="rgb(244,29,26)" fg:x="428" fg:w="1"/><text x="34.7383%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.4883%" y="293" width="0.0806%" height="15" fill="rgb(216,16,5)" fg:x="428" fg:w="1"/><text x="34.7383%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (193 samples, 15.55%)</title><rect x="19.0975%" y="405" width="15.5520%" height="15" fill="rgb(249,76,35)" fg:x="237" fg:w="193"/><text x="19.3475%" y="415.50">regex::regex::string::Re..</text></g><g><title>regex::builders::Builder::build_one_string (192 samples, 15.47%)</title><rect x="19.1781%" y="389" width="15.4714%" height="15" fill="rgb(207,11,44)" fg:x="238" fg:w="192"/><text x="19.4281%" y="399.50">regex::builders::Builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (192 samples, 15.47%)</title><rect x="19.1781%" y="373" width="15.4714%" height="15" fill="rgb(228,190,49)" fg:x="238" fg:w="192"/><text x="19.4281%" y="383.50">regex_automata::meta::re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.64%)</title><rect x="34.0048%" y="357" width="0.6446%" height="15" fill="rgb(214,173,12)" fg:x="422" fg:w="8"/><text x="34.2548%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.64%)</title><rect x="34.0048%" y="341" width="0.6446%" height="15" fill="rgb(218,26,35)" fg:x="422" fg:w="8"/><text x="34.2548%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.5689%" y="325" width="0.0806%" height="15" fill="rgb(220,200,19)" fg:x="429" fg:w="1"/><text x="34.8189%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.2135%" y="325" width="0.0806%" height="15" fill="rgb(239,95,49)" fg:x="437" fg:w="1"/><text x="35.4635%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="35.3747%" y="309" width="0.1612%" height="15" fill="rgb(235,85,53)" fg:x="439" fg:w="2"/><text x="35.6247%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.32%)</title><rect x="35.2941%" y="325" width="0.3223%" height="15" fill="rgb(233,133,31)" fg:x="438" fg:w="4"/><text x="35.5441%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.5359%" y="309" width="0.0806%" height="15" fill="rgb(218,25,20)" fg:x="441" fg:w="1"/><text x="35.7859%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="35.5359%" y="293" width="0.0806%" height="15" fill="rgb(252,210,38)" fg:x="441" fg:w="1"/><text x="35.7859%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="35.6164%" y="325" width="0.1612%" height="15" fill="rgb(242,134,21)" fg:x="442" fg:w="2"/><text x="35.8664%" y="335.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (221 samples, 17.81%)</title><rect x="18.0500%" y="421" width="17.8082%" height="15" fill="rgb(213,28,48)" fg:x="224" fg:w="221"/><text x="18.3000%" y="431.50">indefinite::helper::Helper::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.21%)</title><rect x="34.6495%" y="405" width="1.2087%" height="15" fill="rgb(250,196,2)" fg:x="430" fg:w="15"/><text x="34.8995%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.21%)</title><rect x="34.6495%" y="389" width="1.2087%" height="15" fill="rgb(227,5,17)" fg:x="430" fg:w="15"/><text x="34.8995%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.21%)</title><rect x="34.6495%" y="373" width="1.2087%" height="15" fill="rgb(221,226,24)" fg:x="430" fg:w="15"/><text x="34.8995%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.13%)</title><rect x="34.7301%" y="357" width="1.1281%" height="15" fill="rgb(211,5,48)" fg:x="431" fg:w="14"/><text x="34.9801%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.13%)</title><rect x="34.7301%" y="341" width="1.1281%" height="15" fill="rgb(219,150,6)" fg:x="431" fg:w="14"/><text x="34.9801%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="35.7776%" y="325" width="0.0806%" height="15" fill="rgb(251,46,16)" fg:x="444" fg:w="1"/><text x="36.0276%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.7776%" y="309" width="0.0806%" height="15" fill="rgb(220,204,40)" fg:x="444" fg:w="1"/><text x="36.0276%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.7776%" y="293" width="0.0806%" height="15" fill="rgb(211,85,2)" fg:x="444" fg:w="1"/><text x="36.0276%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.7776%" y="277" width="0.0806%" height="15" fill="rgb(229,17,7)" fg:x="444" fg:w="1"/><text x="36.0276%" y="287.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="35.8582%" y="405" width="0.0806%" height="15" fill="rgb(239,72,28)" fg:x="445" fg:w="1"/><text x="36.1082%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="35.9388%" y="357" width="0.0806%" height="15" fill="rgb(230,47,54)" fg:x="446" fg:w="1"/><text x="36.1888%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="35.9388%" y="373" width="0.1612%" height="15" fill="rgb(214,50,8)" fg:x="446" fg:w="2"/><text x="36.1888%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="36.0193%" y="357" width="0.0806%" height="15" fill="rgb(216,198,43)" fg:x="447" fg:w="1"/><text x="36.2693%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="36.0193%" y="341" width="0.0806%" height="15" fill="rgb(234,20,35)" fg:x="447" fg:w="1"/><text x="36.2693%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.0193%" y="325" width="0.0806%" height="15" fill="rgb(254,45,19)" fg:x="447" fg:w="1"/><text x="36.2693%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.0193%" y="309" width="0.0806%" height="15" fill="rgb(219,14,44)" fg:x="447" fg:w="1"/><text x="36.2693%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="36.0999%" y="341" width="0.1612%" height="15" fill="rgb(217,220,26)" fg:x="448" fg:w="2"/><text x="36.3499%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.1805%" y="325" width="0.0806%" height="15" fill="rgb(213,158,28)" fg:x="449" fg:w="1"/><text x="36.4305%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="35.9388%" y="405" width="0.4835%" height="15" fill="rgb(252,51,52)" fg:x="446" fg:w="6"/><text x="36.1888%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="35.9388%" y="389" width="0.4835%" height="15" fill="rgb(246,89,16)" fg:x="446" fg:w="6"/><text x="36.1888%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="36.0999%" y="373" width="0.3223%" height="15" fill="rgb(216,158,49)" fg:x="448" fg:w="4"/><text x="36.3499%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.32%)</title><rect x="36.0999%" y="357" width="0.3223%" height="15" fill="rgb(236,107,19)" fg:x="448" fg:w="4"/><text x="36.3499%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.2611%" y="341" width="0.1612%" height="15" fill="rgb(228,185,30)" fg:x="450" fg:w="2"/><text x="36.5111%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.5028%" y="325" width="0.0806%" height="15" fill="rgb(246,134,8)" fg:x="453" fg:w="1"/><text x="36.7528%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="36.5028%" y="309" width="0.0806%" height="15" fill="rgb(214,143,50)" fg:x="453" fg:w="1"/><text x="36.7528%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="36.5028%" y="293" width="0.0806%" height="15" fill="rgb(228,75,8)" fg:x="453" fg:w="1"/><text x="36.7528%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.0669%" y="277" width="0.0806%" height="15" fill="rgb(207,175,4)" fg:x="460" fg:w="1"/><text x="37.3169%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="37.0669%" y="309" width="0.2417%" height="15" fill="rgb(205,108,24)" fg:x="460" fg:w="3"/><text x="37.3169%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="37.0669%" y="293" width="0.2417%" height="15" fill="rgb(244,120,49)" fg:x="460" fg:w="3"/><text x="37.3169%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="37.1475%" y="277" width="0.1612%" height="15" fill="rgb(223,47,38)" fg:x="461" fg:w="2"/><text x="37.3975%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="37.3086%" y="309" width="0.1612%" height="15" fill="rgb(229,179,11)" fg:x="463" fg:w="2"/><text x="37.5586%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.3892%" y="293" width="0.0806%" height="15" fill="rgb(231,122,1)" fg:x="464" fg:w="1"/><text x="37.6392%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (21 samples, 1.69%)</title><rect x="36.5834%" y="325" width="1.6922%" height="15" fill="rgb(245,119,9)" fg:x="454" fg:w="21"/><text x="36.8334%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (10 samples, 0.81%)</title><rect x="37.4698%" y="309" width="0.8058%" height="15" fill="rgb(241,163,25)" fg:x="465" fg:w="10"/><text x="37.7198%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (23 samples, 1.85%)</title><rect x="36.5028%" y="341" width="1.8533%" height="15" fill="rgb(217,214,3)" fg:x="453" fg:w="23"/><text x="36.7528%" y="351.50">r..</text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="38.2756%" y="325" width="0.0806%" height="15" fill="rgb(240,86,28)" fg:x="475" fg:w="1"/><text x="38.5256%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.2756%" y="309" width="0.0806%" height="15" fill="rgb(215,47,9)" fg:x="475" fg:w="1"/><text x="38.5256%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.2756%" y="293" width="0.0806%" height="15" fill="rgb(252,25,45)" fg:x="475" fg:w="1"/><text x="38.5256%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.2756%" y="277" width="0.0806%" height="15" fill="rgb(251,164,9)" fg:x="475" fg:w="1"/><text x="38.5256%" y="287.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (25 samples, 2.01%)</title><rect x="36.4222%" y="405" width="2.0145%" height="15" fill="rgb(233,194,0)" fg:x="452" fg:w="25"/><text x="36.6722%" y="415.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (25 samples, 2.01%)</title><rect x="36.4222%" y="389" width="2.0145%" height="15" fill="rgb(249,111,24)" fg:x="452" fg:w="25"/><text x="36.6722%" y="399.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (24 samples, 1.93%)</title><rect x="36.5028%" y="373" width="1.9339%" height="15" fill="rgb(250,223,3)" fg:x="453" fg:w="24"/><text x="36.7528%" y="383.50">r..</text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (24 samples, 1.93%)</title><rect x="36.5028%" y="357" width="1.9339%" height="15" fill="rgb(236,178,37)" fg:x="453" fg:w="24"/><text x="36.7528%" y="367.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="38.3562%" y="341" width="0.0806%" height="15" fill="rgb(241,158,50)" fg:x="476" fg:w="1"/><text x="38.6062%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="38.3562%" y="325" width="0.0806%" height="15" fill="rgb(213,121,41)" fg:x="476" fg:w="1"/><text x="38.6062%" y="335.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="38.4367%" y="389" width="0.0806%" height="15" fill="rgb(240,92,3)" fg:x="477" fg:w="1"/><text x="38.6867%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="38.5979%" y="357" width="0.1612%" height="15" fill="rgb(205,123,3)" fg:x="479" fg:w="2"/><text x="38.8479%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="38.5979%" y="341" width="0.1612%" height="15" fill="rgb(205,97,47)" fg:x="479" fg:w="2"/><text x="38.8479%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="38.5979%" y="325" width="0.1612%" height="15" fill="rgb(247,152,14)" fg:x="479" fg:w="2"/><text x="38.8479%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.9202%" y="325" width="0.0806%" height="15" fill="rgb(248,195,53)" fg:x="483" fg:w="1"/><text x="39.1702%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="38.7591%" y="357" width="0.3223%" height="15" fill="rgb(226,201,16)" fg:x="481" fg:w="4"/><text x="39.0091%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="38.7591%" y="341" width="0.3223%" height="15" fill="rgb(205,98,0)" fg:x="481" fg:w="4"/><text x="39.0091%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="39.0008%" y="325" width="0.0806%" height="15" fill="rgb(214,191,48)" fg:x="484" fg:w="1"/><text x="39.2508%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="39.0814%" y="357" width="0.0806%" height="15" fill="rgb(237,112,39)" fg:x="485" fg:w="1"/><text x="39.3314%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.4037%" y="325" width="0.0806%" height="15" fill="rgb(247,203,27)" fg:x="489" fg:w="1"/><text x="39.6537%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.21%)</title><rect x="39.4843%" y="325" width="1.2087%" height="15" fill="rgb(235,124,28)" fg:x="490" fg:w="15"/><text x="39.7343%" y="335.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="40.3707%" y="309" width="0.3223%" height="15" fill="rgb(208,207,46)" fg:x="501" fg:w="4"/><text x="40.6207%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (19 samples, 1.53%)</title><rect x="39.2425%" y="341" width="1.5310%" height="15" fill="rgb(234,176,4)" fg:x="487" fg:w="19"/><text x="39.4925%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="40.6930%" y="325" width="0.0806%" height="15" fill="rgb(230,133,28)" fg:x="505" fg:w="1"/><text x="40.9430%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="40.7736%" y="341" width="0.1612%" height="15" fill="rgb(211,137,40)" fg:x="506" fg:w="2"/><text x="41.0236%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.8541%" y="325" width="0.0806%" height="15" fill="rgb(254,35,13)" fg:x="507" fg:w="1"/><text x="41.1041%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="40.8541%" y="309" width="0.0806%" height="15" fill="rgb(225,49,51)" fg:x="507" fg:w="1"/><text x="41.1041%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="40.8541%" y="293" width="0.0806%" height="15" fill="rgb(251,10,15)" fg:x="507" fg:w="1"/><text x="41.1041%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="41.0153%" y="325" width="0.4029%" height="15" fill="rgb(228,207,15)" fg:x="509" fg:w="5"/><text x="41.2653%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="41.3376%" y="309" width="0.0806%" height="15" fill="rgb(241,99,19)" fg:x="513" fg:w="1"/><text x="41.5876%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.3376%" y="293" width="0.0806%" height="15" fill="rgb(207,104,49)" fg:x="513" fg:w="1"/><text x="41.5876%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="40.9347%" y="341" width="0.5641%" height="15" fill="rgb(234,99,18)" fg:x="508" fg:w="7"/><text x="41.1847%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="41.4182%" y="325" width="0.0806%" height="15" fill="rgb(213,191,49)" fg:x="514" fg:w="1"/><text x="41.6682%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="41.4988%" y="325" width="0.0806%" height="15" fill="rgb(210,226,19)" fg:x="515" fg:w="1"/><text x="41.7488%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="41.4988%" y="309" width="0.0806%" height="15" fill="rgb(229,97,18)" fg:x="515" fg:w="1"/><text x="41.7488%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="41.6600%" y="309" width="0.3223%" height="15" fill="rgb(211,167,15)" fg:x="517" fg:w="4"/><text x="41.9100%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="41.7405%" y="293" width="0.2417%" height="15" fill="rgb(210,169,34)" fg:x="518" fg:w="3"/><text x="41.9905%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="41.7405%" y="277" width="0.2417%" height="15" fill="rgb(241,121,31)" fg:x="518" fg:w="3"/><text x="41.9905%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="41.7405%" y="261" width="0.2417%" height="15" fill="rgb(232,40,11)" fg:x="518" fg:w="3"/><text x="41.9905%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.56%)</title><rect x="41.9823%" y="309" width="0.5641%" height="15" fill="rgb(205,86,26)" fg:x="521" fg:w="7"/><text x="42.2323%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="42.1434%" y="293" width="0.4029%" height="15" fill="rgb(231,126,28)" fg:x="523" fg:w="5"/><text x="42.3934%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="42.4658%" y="277" width="0.0806%" height="15" fill="rgb(219,221,18)" fg:x="527" fg:w="1"/><text x="42.7158%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.4658%" y="261" width="0.0806%" height="15" fill="rgb(211,40,0)" fg:x="527" fg:w="1"/><text x="42.7158%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.4658%" y="245" width="0.0806%" height="15" fill="rgb(239,85,43)" fg:x="527" fg:w="1"/><text x="42.7158%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.5463%" y="277" width="0.0806%" height="15" fill="rgb(231,55,21)" fg:x="528" fg:w="1"/><text x="42.7963%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (9 samples, 0.73%)</title><rect x="42.5463%" y="309" width="0.7252%" height="15" fill="rgb(225,184,43)" fg:x="528" fg:w="9"/><text x="42.7963%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (9 samples, 0.73%)</title><rect x="42.5463%" y="293" width="0.7252%" height="15" fill="rgb(251,158,41)" fg:x="528" fg:w="9"/><text x="42.7963%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.64%)</title><rect x="42.6269%" y="277" width="0.6446%" height="15" fill="rgb(234,159,37)" fg:x="529" fg:w="8"/><text x="42.8769%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (22 samples, 1.77%)</title><rect x="41.5794%" y="325" width="1.7728%" height="15" fill="rgb(216,204,22)" fg:x="516" fg:w="22"/><text x="41.8294%" y="335.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="43.2716%" y="309" width="0.0806%" height="15" fill="rgb(214,17,3)" fg:x="537" fg:w="1"/><text x="43.5216%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.2716%" y="293" width="0.0806%" height="15" fill="rgb(212,111,17)" fg:x="537" fg:w="1"/><text x="43.5216%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (24 samples, 1.93%)</title><rect x="41.4988%" y="341" width="1.9339%" height="15" fill="rgb(221,157,24)" fg:x="515" fg:w="24"/><text x="41.7488%" y="351.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="43.3521%" y="325" width="0.0806%" height="15" fill="rgb(252,16,13)" fg:x="538" fg:w="1"/><text x="43.6021%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="43.3521%" y="309" width="0.0806%" height="15" fill="rgb(221,62,2)" fg:x="538" fg:w="1"/><text x="43.6021%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="43.3521%" y="293" width="0.0806%" height="15" fill="rgb(247,87,22)" fg:x="538" fg:w="1"/><text x="43.6021%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="43.4327%" y="341" width="0.0806%" height="15" fill="rgb(215,73,9)" fg:x="539" fg:w="1"/><text x="43.6827%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="43.4327%" y="325" width="0.0806%" height="15" fill="rgb(207,175,33)" fg:x="539" fg:w="1"/><text x="43.6827%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="43.4327%" y="309" width="0.0806%" height="15" fill="rgb(243,129,54)" fg:x="539" fg:w="1"/><text x="43.6827%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="43.8356%" y="245" width="0.0806%" height="15" fill="rgb(227,119,45)" fg:x="544" fg:w="1"/><text x="44.0856%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="45.1249%" y="229" width="0.5641%" height="15" fill="rgb(205,109,36)" fg:x="560" fg:w="7"/><text x="45.3749%" y="239.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="45.6890%" y="229" width="0.3223%" height="15" fill="rgb(205,6,39)" fg:x="567" fg:w="4"/><text x="45.9390%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="46.0113%" y="229" width="0.2417%" height="15" fill="rgb(221,32,16)" fg:x="571" fg:w="3"/><text x="46.2613%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="46.2530%" y="229" width="0.0806%" height="15" fill="rgb(228,144,50)" fg:x="574" fg:w="1"/><text x="46.5030%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.8977%" y="197" width="0.0806%" height="15" fill="rgb(229,201,53)" fg:x="582" fg:w="1"/><text x="47.1477%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.3006%" y="165" width="0.0806%" height="15" fill="rgb(249,153,27)" fg:x="587" fg:w="1"/><text x="47.5506%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.73%)</title><rect x="46.9782%" y="197" width="0.7252%" height="15" fill="rgb(227,106,25)" fg:x="583" fg:w="9"/><text x="47.2282%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="47.2200%" y="181" width="0.4835%" height="15" fill="rgb(230,65,29)" fg:x="586" fg:w="6"/><text x="47.4700%" y="191.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="47.3811%" y="165" width="0.3223%" height="15" fill="rgb(221,57,46)" fg:x="588" fg:w="4"/><text x="47.6311%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.5093%" y="181" width="0.0806%" height="15" fill="rgb(229,161,17)" fg:x="602" fg:w="1"/><text x="48.7593%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (30 samples, 2.42%)</title><rect x="46.3336%" y="229" width="2.4174%" height="15" fill="rgb(222,213,11)" fg:x="575" fg:w="30"/><text x="46.5836%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (27 samples, 2.18%)</title><rect x="46.5753%" y="213" width="2.1757%" height="15" fill="rgb(235,35,13)" fg:x="578" fg:w="27"/><text x="46.8253%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (13 samples, 1.05%)</title><rect x="47.7035%" y="197" width="1.0475%" height="15" fill="rgb(233,158,34)" fg:x="592" fg:w="13"/><text x="47.9535%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="48.5898%" y="181" width="0.1612%" height="15" fill="rgb(215,151,48)" fg:x="603" fg:w="2"/><text x="48.8398%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.6704%" y="165" width="0.0806%" height="15" fill="rgb(229,84,14)" fg:x="604" fg:w="1"/><text x="48.9204%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.6704%" y="149" width="0.0806%" height="15" fill="rgb(229,68,14)" fg:x="604" fg:w="1"/><text x="48.9204%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.6704%" y="133" width="0.0806%" height="15" fill="rgb(243,106,26)" fg:x="604" fg:w="1"/><text x="48.9204%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (3 samples, 0.24%)</title><rect x="48.7510%" y="229" width="0.2417%" height="15" fill="rgb(206,45,38)" fg:x="605" fg:w="3"/><text x="49.0010%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="48.7510%" y="213" width="0.2417%" height="15" fill="rgb(226,6,15)" fg:x="605" fg:w="3"/><text x="49.0010%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="48.7510%" y="197" width="0.2417%" height="15" fill="rgb(232,22,54)" fg:x="605" fg:w="3"/><text x="49.0010%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="48.9122%" y="181" width="0.0806%" height="15" fill="rgb(229,222,32)" fg:x="607" fg:w="1"/><text x="49.1622%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="48.9927%" y="213" width="0.0806%" height="15" fill="rgb(228,62,29)" fg:x="608" fg:w="1"/><text x="49.2427%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.9927%" y="197" width="0.0806%" height="15" fill="rgb(251,103,34)" fg:x="608" fg:w="1"/><text x="49.2427%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.9927%" y="181" width="0.0806%" height="15" fill="rgb(233,12,30)" fg:x="608" fg:w="1"/><text x="49.2427%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.9927%" y="165" width="0.0806%" height="15" fill="rgb(238,52,0)" fg:x="608" fg:w="1"/><text x="49.2427%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (83 samples, 6.69%)</title><rect x="48.9927%" y="229" width="6.6882%" height="15" fill="rgb(223,98,5)" fg:x="608" fg:w="83"/><text x="49.2427%" y="239.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (82 samples, 6.61%)</title><rect x="49.0733%" y="213" width="6.6076%" height="15" fill="rgb(228,75,37)" fg:x="609" fg:w="82"/><text x="49.3233%" y="223.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (82 samples, 6.61%)</title><rect x="49.0733%" y="197" width="6.6076%" height="15" fill="rgb(205,115,49)" fg:x="609" fg:w="82"/><text x="49.3233%" y="207.50">alloc::ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="55.6809%" y="229" width="0.4029%" height="15" fill="rgb(250,154,43)" fg:x="691" fg:w="5"/><text x="55.9309%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="56.0838%" y="229" width="0.0806%" height="15" fill="rgb(226,43,29)" fg:x="696" fg:w="1"/><text x="56.3338%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (3 samples, 0.24%)</title><rect x="56.1644%" y="229" width="0.2417%" height="15" fill="rgb(249,228,39)" fg:x="697" fg:w="3"/><text x="56.4144%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (165 samples, 13.30%)</title><rect x="43.7550%" y="261" width="13.2957%" height="15" fill="rgb(216,79,43)" fg:x="543" fg:w="165"/><text x="44.0050%" y="271.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (163 samples, 13.13%)</title><rect x="43.9162%" y="245" width="13.1346%" height="15" fill="rgb(228,95,12)" fg:x="545" fg:w="163"/><text x="44.1662%" y="255.50">regex_automata::nfa:..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (8 samples, 0.64%)</title><rect x="56.4061%" y="229" width="0.6446%" height="15" fill="rgb(249,221,15)" fg:x="700" fg:w="8"/><text x="56.6561%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="56.7284%" y="213" width="0.3223%" height="15" fill="rgb(233,34,13)" fg:x="704" fg:w="4"/><text x="56.9784%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="56.8090%" y="197" width="0.2417%" height="15" fill="rgb(214,103,39)" fg:x="705" fg:w="3"/><text x="57.0590%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="56.8896%" y="181" width="0.1612%" height="15" fill="rgb(251,126,39)" fg:x="706" fg:w="2"/><text x="57.1396%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (169 samples, 13.62%)</title><rect x="43.5133%" y="325" width="13.6180%" height="15" fill="rgb(214,216,36)" fg:x="540" fg:w="169"/><text x="43.7633%" y="335.50">&lt;core::iter::adapters..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (168 samples, 13.54%)</title><rect x="43.5939%" y="309" width="13.5375%" height="15" fill="rgb(220,221,8)" fg:x="541" fg:w="168"/><text x="43.8439%" y="319.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (168 samples, 13.54%)</title><rect x="43.5939%" y="293" width="13.5375%" height="15" fill="rgb(240,216,3)" fg:x="541" fg:w="168"/><text x="43.8439%" y="303.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (166 samples, 13.38%)</title><rect x="43.7550%" y="277" width="13.3763%" height="15" fill="rgb(232,218,17)" fg:x="543" fg:w="166"/><text x="44.0050%" y="287.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_bounded (1 samples, 0.08%)</title><rect x="57.0508%" y="261" width="0.0806%" height="15" fill="rgb(229,163,45)" fg:x="708" fg:w="1"/><text x="57.3008%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="57.2925%" y="309" width="0.1612%" height="15" fill="rgb(231,110,42)" fg:x="711" fg:w="2"/><text x="57.5425%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.4537%" y="309" width="0.0806%" height="15" fill="rgb(208,170,48)" fg:x="713" fg:w="1"/><text x="57.7037%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.5342%" y="309" width="0.0806%" height="15" fill="rgb(239,116,25)" fg:x="714" fg:w="1"/><text x="57.7842%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (12 samples, 0.97%)</title><rect x="57.6148%" y="309" width="0.9670%" height="15" fill="rgb(219,200,50)" fg:x="715" fg:w="12"/><text x="57.8648%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="58.3400%" y="293" width="0.2417%" height="15" fill="rgb(245,200,0)" fg:x="724" fg:w="3"/><text x="58.5900%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="58.3400%" y="277" width="0.2417%" height="15" fill="rgb(245,119,33)" fg:x="724" fg:w="3"/><text x="58.5900%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="58.3400%" y="261" width="0.2417%" height="15" fill="rgb(231,125,12)" fg:x="724" fg:w="3"/><text x="58.5900%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (11 samples, 0.89%)</title><rect x="58.5818%" y="309" width="0.8864%" height="15" fill="rgb(216,96,41)" fg:x="727" fg:w="11"/><text x="58.8318%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.3876%" y="293" width="0.0806%" height="15" fill="rgb(248,43,45)" fg:x="737" fg:w="1"/><text x="59.6376%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (5 samples, 0.40%)</title><rect x="59.4682%" y="309" width="0.4029%" height="15" fill="rgb(217,222,7)" fg:x="738" fg:w="5"/><text x="59.7182%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (258 samples, 20.79%)</title><rect x="39.1620%" y="357" width="20.7897%" height="15" fill="rgb(233,28,6)" fg:x="486" fg:w="258"/><text x="39.4120%" y="367.50">regex_automata::meta::strategy::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (204 samples, 16.44%)</title><rect x="43.5133%" y="341" width="16.4384%" height="15" fill="rgb(231,218,15)" fg:x="540" fg:w="204"/><text x="43.7633%" y="351.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (35 samples, 2.82%)</title><rect x="57.1313%" y="325" width="2.8203%" height="15" fill="rgb(226,171,48)" fg:x="709" fg:w="35"/><text x="57.3813%" y="335.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="59.8711%" y="309" width="0.0806%" height="15" fill="rgb(235,201,9)" fg:x="743" fg:w="1"/><text x="60.1211%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="59.8711%" y="293" width="0.0806%" height="15" fill="rgb(217,80,15)" fg:x="743" fg:w="1"/><text x="60.1211%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.8711%" y="277" width="0.0806%" height="15" fill="rgb(219,152,8)" fg:x="743" fg:w="1"/><text x="60.1211%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.9517%" y="325" width="0.0806%" height="15" fill="rgb(243,107,38)" fg:x="744" fg:w="1"/><text x="60.2017%" y="335.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="60.1128%" y="309" width="0.1612%" height="15" fill="rgb(231,17,5)" fg:x="746" fg:w="2"/><text x="60.3628%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="60.2740%" y="309" width="0.1612%" height="15" fill="rgb(209,25,54)" fg:x="748" fg:w="2"/><text x="60.5240%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="60.3546%" y="293" width="0.0806%" height="15" fill="rgb(219,0,2)" fg:x="749" fg:w="1"/><text x="60.6046%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="60.0322%" y="325" width="0.5641%" height="15" fill="rgb(246,9,5)" fg:x="745" fg:w="7"/><text x="60.2822%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="60.4351%" y="309" width="0.1612%" height="15" fill="rgb(226,159,4)" fg:x="750" fg:w="2"/><text x="60.6851%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="60.4351%" y="293" width="0.1612%" height="15" fill="rgb(219,175,34)" fg:x="750" fg:w="2"/><text x="60.6851%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.4351%" y="277" width="0.1612%" height="15" fill="rgb(236,10,46)" fg:x="750" fg:w="2"/><text x="60.6851%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.4351%" y="261" width="0.1612%" height="15" fill="rgb(240,211,16)" fg:x="750" fg:w="2"/><text x="60.6851%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="60.5963%" y="325" width="0.0806%" height="15" fill="rgb(205,3,43)" fg:x="752" fg:w="1"/><text x="60.8463%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="60.5963%" y="309" width="0.0806%" height="15" fill="rgb(245,7,22)" fg:x="752" fg:w="1"/><text x="60.8463%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.89%)</title><rect x="59.9517%" y="357" width="0.8864%" height="15" fill="rgb(239,132,32)" fg:x="744" fg:w="11"/><text x="60.2017%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.89%)</title><rect x="59.9517%" y="341" width="0.8864%" height="15" fill="rgb(228,202,34)" fg:x="744" fg:w="11"/><text x="60.2017%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="60.6769%" y="325" width="0.1612%" height="15" fill="rgb(254,200,22)" fg:x="753" fg:w="2"/><text x="60.9269%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="61.0798%" y="293" width="0.1612%" height="15" fill="rgb(219,10,39)" fg:x="758" fg:w="2"/><text x="61.3298%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="61.0798%" y="277" width="0.1612%" height="15" fill="rgb(226,210,39)" fg:x="758" fg:w="2"/><text x="61.3298%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="61.0798%" y="261" width="0.1612%" height="15" fill="rgb(208,219,16)" fg:x="758" fg:w="2"/><text x="61.3298%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="60.9186%" y="309" width="0.4029%" height="15" fill="rgb(216,158,51)" fg:x="756" fg:w="5"/><text x="61.1686%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="61.2409%" y="293" width="0.0806%" height="15" fill="rgb(233,14,44)" fg:x="760" fg:w="1"/><text x="61.4909%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (2 samples, 0.16%)</title><rect x="61.3215%" y="309" width="0.1612%" height="15" fill="rgb(237,97,39)" fg:x="761" fg:w="2"/><text x="61.5715%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.4021%" y="293" width="0.0806%" height="15" fill="rgb(218,198,43)" fg:x="762" fg:w="1"/><text x="61.6521%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.4021%" y="277" width="0.0806%" height="15" fill="rgb(231,104,20)" fg:x="762" fg:w="1"/><text x="61.6521%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4021%" y="261" width="0.0806%" height="15" fill="rgb(254,36,13)" fg:x="762" fg:w="1"/><text x="61.6521%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="61.4827%" y="309" width="0.0806%" height="15" fill="rgb(248,14,50)" fg:x="763" fg:w="1"/><text x="61.7327%" y="319.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="61.4827%" y="293" width="0.0806%" height="15" fill="rgb(217,107,29)" fg:x="763" fg:w="1"/><text x="61.7327%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="61.4827%" y="277" width="0.0806%" height="15" fill="rgb(251,169,33)" fg:x="763" fg:w="1"/><text x="61.7327%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (9 samples, 0.73%)</title><rect x="60.9186%" y="325" width="0.7252%" height="15" fill="rgb(217,108,32)" fg:x="756" fg:w="9"/><text x="61.1686%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="61.5633%" y="309" width="0.0806%" height="15" fill="rgb(219,66,42)" fg:x="764" fg:w="1"/><text x="61.8133%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (321 samples, 25.87%)</title><rect x="35.8582%" y="421" width="25.8662%" height="15" fill="rgb(206,180,7)" fg:x="445" fg:w="321"/><text x="36.1082%" y="431.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (289 samples, 23.29%)</title><rect x="38.4367%" y="405" width="23.2877%" height="15" fill="rgb(208,226,31)" fg:x="477" fg:w="289"/><text x="38.6867%" y="415.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (288 samples, 23.21%)</title><rect x="38.5173%" y="389" width="23.2071%" height="15" fill="rgb(218,26,49)" fg:x="478" fg:w="288"/><text x="38.7673%" y="399.50">regex::builders::Builder::build_one_s..</text></g><g><title>regex_automata::meta::regex::Builder::build (288 samples, 23.21%)</title><rect x="38.5173%" y="373" width="23.2071%" height="15" fill="rgb(233,197,48)" fg:x="478" fg:w="288"/><text x="38.7673%" y="383.50">regex_automata::meta::regex::Builder:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.89%)</title><rect x="60.8380%" y="357" width="0.8864%" height="15" fill="rgb(252,181,51)" fg:x="755" fg:w="11"/><text x="61.0880%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.89%)</title><rect x="60.8380%" y="341" width="0.8864%" height="15" fill="rgb(253,90,19)" fg:x="755" fg:w="11"/><text x="61.0880%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="61.6438%" y="325" width="0.0806%" height="15" fill="rgb(215,171,30)" fg:x="765" fg:w="1"/><text x="61.8938%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.7244%" y="405" width="0.0806%" height="15" fill="rgb(214,222,9)" fg:x="766" fg:w="1"/><text x="61.9744%" y="415.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="61.8050%" y="405" width="0.0806%" height="15" fill="rgb(223,3,22)" fg:x="767" fg:w="1"/><text x="62.0550%" y="415.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="61.8050%" y="389" width="0.0806%" height="15" fill="rgb(225,196,46)" fg:x="767" fg:w="1"/><text x="62.0550%" y="399.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="61.8050%" y="373" width="0.0806%" height="15" fill="rgb(209,110,37)" fg:x="767" fg:w="1"/><text x="62.0550%" y="383.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="61.8050%" y="357" width="0.0806%" height="15" fill="rgb(249,89,12)" fg:x="767" fg:w="1"/><text x="62.0550%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="61.8050%" y="341" width="0.0806%" height="15" fill="rgb(226,27,33)" fg:x="767" fg:w="1"/><text x="62.0550%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="61.8856%" y="357" width="0.0806%" height="15" fill="rgb(213,82,22)" fg:x="768" fg:w="1"/><text x="62.1356%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="61.8856%" y="341" width="0.0806%" height="15" fill="rgb(248,140,0)" fg:x="768" fg:w="1"/><text x="62.1356%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="61.8856%" y="389" width="0.1612%" height="15" fill="rgb(228,106,3)" fg:x="768" fg:w="2"/><text x="62.1356%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="61.8856%" y="373" width="0.1612%" height="15" fill="rgb(209,23,37)" fg:x="768" fg:w="2"/><text x="62.1356%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="61.9662%" y="357" width="0.0806%" height="15" fill="rgb(241,93,50)" fg:x="769" fg:w="1"/><text x="62.2162%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.9662%" y="341" width="0.0806%" height="15" fill="rgb(253,46,43)" fg:x="769" fg:w="1"/><text x="62.2162%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.9662%" y="325" width="0.0806%" height="15" fill="rgb(226,206,43)" fg:x="769" fg:w="1"/><text x="62.2162%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.0467%" y="357" width="0.0806%" height="15" fill="rgb(217,54,7)" fg:x="770" fg:w="1"/><text x="62.2967%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.1273%" y="357" width="0.0806%" height="15" fill="rgb(223,5,52)" fg:x="771" fg:w="1"/><text x="62.3773%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="62.1273%" y="341" width="0.0806%" height="15" fill="rgb(206,52,46)" fg:x="771" fg:w="1"/><text x="62.3773%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.1273%" y="325" width="0.0806%" height="15" fill="rgb(253,136,11)" fg:x="771" fg:w="1"/><text x="62.3773%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="62.2079%" y="341" width="0.1612%" height="15" fill="rgb(208,106,33)" fg:x="772" fg:w="2"/><text x="62.4579%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.2885%" y="325" width="0.0806%" height="15" fill="rgb(206,54,4)" fg:x="773" fg:w="1"/><text x="62.5385%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="62.0467%" y="389" width="0.4029%" height="15" fill="rgb(213,3,15)" fg:x="770" fg:w="5"/><text x="62.2967%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="62.0467%" y="373" width="0.4029%" height="15" fill="rgb(252,211,39)" fg:x="770" fg:w="5"/><text x="62.2967%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="62.2079%" y="357" width="0.2417%" height="15" fill="rgb(223,6,36)" fg:x="772" fg:w="3"/><text x="62.4579%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="62.3691%" y="341" width="0.0806%" height="15" fill="rgb(252,169,45)" fg:x="774" fg:w="1"/><text x="62.6191%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.3691%" y="325" width="0.0806%" height="15" fill="rgb(212,48,26)" fg:x="774" fg:w="1"/><text x="62.6191%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.4496%" y="373" width="0.0806%" height="15" fill="rgb(251,102,48)" fg:x="775" fg:w="1"/><text x="62.6996%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="62.4496%" y="357" width="0.0806%" height="15" fill="rgb(243,208,16)" fg:x="775" fg:w="1"/><text x="62.6996%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.5302%" y="341" width="0.1612%" height="15" fill="rgb(219,96,24)" fg:x="776" fg:w="2"/><text x="62.7802%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.5302%" y="325" width="0.1612%" height="15" fill="rgb(219,33,29)" fg:x="776" fg:w="2"/><text x="62.7802%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="62.6108%" y="309" width="0.0806%" height="15" fill="rgb(223,176,5)" fg:x="777" fg:w="1"/><text x="62.8608%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::hir::Hir]&gt; (1 samples, 0.08%)</title><rect x="62.6108%" y="293" width="0.0806%" height="15" fill="rgb(228,140,14)" fg:x="777" fg:w="1"/><text x="62.8608%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6914%" y="341" width="0.0806%" height="15" fill="rgb(217,179,31)" fg:x="778" fg:w="1"/><text x="62.9414%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.7720%" y="309" width="0.0806%" height="15" fill="rgb(230,9,30)" fg:x="779" fg:w="1"/><text x="63.0220%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.7720%" y="293" width="0.0806%" height="15" fill="rgb(230,136,20)" fg:x="779" fg:w="1"/><text x="63.0220%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.7720%" y="277" width="0.0806%" height="15" fill="rgb(215,210,22)" fg:x="779" fg:w="1"/><text x="63.0220%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.7720%" y="261" width="0.0806%" height="15" fill="rgb(218,43,5)" fg:x="779" fg:w="1"/><text x="63.0220%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="62.7720%" y="341" width="0.1612%" height="15" fill="rgb(216,11,5)" fg:x="779" fg:w="2"/><text x="63.0220%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.7720%" y="325" width="0.1612%" height="15" fill="rgb(209,82,29)" fg:x="779" fg:w="2"/><text x="63.0220%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="62.8525%" y="309" width="0.0806%" height="15" fill="rgb(244,115,12)" fg:x="780" fg:w="1"/><text x="63.1025%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.8525%" y="293" width="0.0806%" height="15" fill="rgb(222,82,18)" fg:x="780" fg:w="1"/><text x="63.1025%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="63.0137%" y="325" width="0.1612%" height="15" fill="rgb(249,227,8)" fg:x="782" fg:w="2"/><text x="63.2637%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="63.1749%" y="325" width="0.0806%" height="15" fill="rgb(253,141,45)" fg:x="784" fg:w="1"/><text x="63.4249%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (9 samples, 0.73%)</title><rect x="63.2554%" y="309" width="0.7252%" height="15" fill="rgb(234,184,4)" fg:x="785" fg:w="9"/><text x="63.5054%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="63.9001%" y="293" width="0.0806%" height="15" fill="rgb(218,194,23)" fg:x="793" fg:w="1"/><text x="64.1501%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.9001%" y="277" width="0.0806%" height="15" fill="rgb(235,66,41)" fg:x="793" fg:w="1"/><text x="64.1501%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (10 samples, 0.81%)</title><rect x="63.2554%" y="325" width="0.8058%" height="15" fill="rgb(245,217,1)" fg:x="785" fg:w="10"/><text x="63.5054%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="63.9807%" y="309" width="0.0806%" height="15" fill="rgb(229,91,1)" fg:x="794" fg:w="1"/><text x="64.2307%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="63.9807%" y="293" width="0.0806%" height="15" fill="rgb(207,101,30)" fg:x="794" fg:w="1"/><text x="64.2307%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="64.0612%" y="325" width="0.0806%" height="15" fill="rgb(223,82,49)" fg:x="795" fg:w="1"/><text x="64.3112%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="64.0612%" y="309" width="0.0806%" height="15" fill="rgb(218,167,17)" fg:x="795" fg:w="1"/><text x="64.3112%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="64.1418%" y="309" width="0.2417%" height="15" fill="rgb(208,103,14)" fg:x="796" fg:w="3"/><text x="64.3918%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="64.1418%" y="293" width="0.2417%" height="15" fill="rgb(238,20,8)" fg:x="796" fg:w="3"/><text x="64.3918%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="64.1418%" y="277" width="0.2417%" height="15" fill="rgb(218,80,54)" fg:x="796" fg:w="3"/><text x="64.3918%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="64.2224%" y="261" width="0.1612%" height="15" fill="rgb(240,144,17)" fg:x="797" fg:w="2"/><text x="64.4724%" y="271.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="64.5447%" y="293" width="0.1612%" height="15" fill="rgb(245,27,50)" fg:x="801" fg:w="2"/><text x="64.7947%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="64.7059%" y="293" width="0.1612%" height="15" fill="rgb(251,51,7)" fg:x="803" fg:w="2"/><text x="64.9559%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="64.8670%" y="293" width="0.0806%" height="15" fill="rgb(245,217,29)" fg:x="805" fg:w="1"/><text x="65.1170%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.8670%" y="277" width="0.0806%" height="15" fill="rgb(221,176,29)" fg:x="805" fg:w="1"/><text x="65.1170%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.8670%" y="261" width="0.0806%" height="15" fill="rgb(212,180,24)" fg:x="805" fg:w="1"/><text x="65.1170%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.8670%" y="245" width="0.0806%" height="15" fill="rgb(254,24,2)" fg:x="805" fg:w="1"/><text x="65.1170%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="64.9476%" y="293" width="0.5641%" height="15" fill="rgb(230,100,2)" fg:x="806" fg:w="7"/><text x="65.1976%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4311%" y="277" width="0.0806%" height="15" fill="rgb(219,142,25)" fg:x="812" fg:w="1"/><text x="65.6811%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="65.5117%" y="293" width="0.0806%" height="15" fill="rgb(240,73,43)" fg:x="813" fg:w="1"/><text x="65.7617%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (34 samples, 2.74%)</title><rect x="62.9331%" y="341" width="2.7397%" height="15" fill="rgb(214,114,15)" fg:x="781" fg:w="34"/><text x="63.1831%" y="351.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (19 samples, 1.53%)</title><rect x="64.1418%" y="325" width="1.5310%" height="15" fill="rgb(207,130,4)" fg:x="796" fg:w="19"/><text x="64.3918%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.29%)</title><rect x="64.3836%" y="309" width="1.2893%" height="15" fill="rgb(221,25,40)" fg:x="799" fg:w="16"/><text x="64.6336%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="65.5923%" y="293" width="0.0806%" height="15" fill="rgb(241,184,7)" fg:x="814" fg:w="1"/><text x="65.8423%" y="303.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="65.5923%" y="277" width="0.0806%" height="15" fill="rgb(235,159,4)" fg:x="814" fg:w="1"/><text x="65.8423%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.5923%" y="261" width="0.0806%" height="15" fill="rgb(214,87,48)" fg:x="814" fg:w="1"/><text x="65.8423%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.5923%" y="245" width="0.0806%" height="15" fill="rgb(246,198,24)" fg:x="814" fg:w="1"/><text x="65.8423%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.5923%" y="229" width="0.0806%" height="15" fill="rgb(209,66,40)" fg:x="814" fg:w="1"/><text x="65.8423%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="65.9952%" y="293" width="0.1612%" height="15" fill="rgb(233,147,39)" fg:x="819" fg:w="2"/><text x="66.2452%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="65.9952%" y="277" width="0.1612%" height="15" fill="rgb(231,145,52)" fg:x="819" fg:w="2"/><text x="66.2452%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.9952%" y="261" width="0.1612%" height="15" fill="rgb(206,20,26)" fg:x="819" fg:w="2"/><text x="66.2452%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.0757%" y="245" width="0.0806%" height="15" fill="rgb(238,220,4)" fg:x="820" fg:w="1"/><text x="66.3257%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="66.1563%" y="293" width="0.1612%" height="15" fill="rgb(252,195,42)" fg:x="821" fg:w="2"/><text x="66.4063%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="66.2369%" y="277" width="0.0806%" height="15" fill="rgb(209,10,6)" fg:x="822" fg:w="1"/><text x="66.4869%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="66.2369%" y="261" width="0.0806%" height="15" fill="rgb(229,3,52)" fg:x="822" fg:w="1"/><text x="66.4869%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.64%)</title><rect x="65.7534%" y="309" width="0.6446%" height="15" fill="rgb(253,49,37)" fg:x="816" fg:w="8"/><text x="66.0034%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="66.3175%" y="293" width="0.0806%" height="15" fill="rgb(240,103,49)" fg:x="823" fg:w="1"/><text x="66.5675%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.3175%" y="277" width="0.0806%" height="15" fill="rgb(250,182,30)" fg:x="823" fg:w="1"/><text x="66.5675%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.3175%" y="261" width="0.0806%" height="15" fill="rgb(248,8,30)" fg:x="823" fg:w="1"/><text x="66.5675%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3175%" y="245" width="0.0806%" height="15" fill="rgb(237,120,30)" fg:x="823" fg:w="1"/><text x="66.5675%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.81%)</title><rect x="65.6728%" y="341" width="0.8058%" height="15" fill="rgb(221,146,34)" fg:x="815" fg:w="10"/><text x="65.9228%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.81%)</title><rect x="65.6728%" y="325" width="0.8058%" height="15" fill="rgb(242,55,13)" fg:x="815" fg:w="10"/><text x="65.9228%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="66.3981%" y="309" width="0.0806%" height="15" fill="rgb(242,112,31)" fg:x="824" fg:w="1"/><text x="66.6481%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.3981%" y="293" width="0.0806%" height="15" fill="rgb(249,192,27)" fg:x="824" fg:w="1"/><text x="66.6481%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="66.4786%" y="309" width="0.3223%" height="15" fill="rgb(208,204,44)" fg:x="825" fg:w="4"/><text x="66.7286%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="66.4786%" y="293" width="0.3223%" height="15" fill="rgb(208,93,54)" fg:x="825" fg:w="4"/><text x="66.7286%" y="303.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="66.7204%" y="277" width="0.0806%" height="15" fill="rgb(242,1,31)" fg:x="828" fg:w="1"/><text x="66.9704%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (55 samples, 4.43%)</title><rect x="62.4496%" y="389" width="4.4319%" height="15" fill="rgb(241,83,25)" fg:x="775" fg:w="55"/><text x="62.6996%" y="399.50">regex..</text></g><g><title>regex::builders::Builder::build_one_string (54 samples, 4.35%)</title><rect x="62.5302%" y="373" width="4.3513%" height="15" fill="rgb(205,169,50)" fg:x="776" fg:w="54"/><text x="62.7802%" y="383.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (54 samples, 4.35%)</title><rect x="62.5302%" y="357" width="4.3513%" height="15" fill="rgb(239,186,37)" fg:x="776" fg:w="54"/><text x="62.7802%" y="367.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="66.4786%" y="341" width="0.4029%" height="15" fill="rgb(205,221,10)" fg:x="825" fg:w="5"/><text x="66.7286%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="66.4786%" y="325" width="0.4029%" height="15" fill="rgb(218,196,15)" fg:x="825" fg:w="5"/><text x="66.7286%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="66.8010%" y="309" width="0.0806%" height="15" fill="rgb(218,196,35)" fg:x="829" fg:w="1"/><text x="67.0510%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="66.8010%" y="293" width="0.0806%" height="15" fill="rgb(233,63,24)" fg:x="829" fg:w="1"/><text x="67.0510%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.8010%" y="277" width="0.0806%" height="15" fill="rgb(225,8,4)" fg:x="829" fg:w="1"/><text x="67.0510%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (639 samples, 51.49%)</title><rect x="15.9549%" y="501" width="51.4907%" height="15" fill="rgb(234,105,35)" fg:x="198" fg:w="639"/><text x="16.2049%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::Obser..</text></g><g><title>plugins_core::looking::model::qualify_name (616 samples, 49.64%)</title><rect x="17.8082%" y="485" width="49.6374%" height="15" fill="rgb(236,21,32)" fg:x="221" fg:w="616"/><text x="18.0582%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (615 samples, 49.56%)</title><rect x="17.8888%" y="469" width="49.5568%" height="15" fill="rgb(228,109,6)" fg:x="222" fg:w="615"/><text x="18.1388%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (614 samples, 49.48%)</title><rect x="17.9694%" y="453" width="49.4762%" height="15" fill="rgb(229,215,31)" fg:x="223" fg:w="614"/><text x="18.2194%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (613 samples, 49.40%)</title><rect x="18.0500%" y="437" width="49.3956%" height="15" fill="rgb(221,52,54)" fg:x="224" fg:w="613"/><text x="18.3000%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (71 samples, 5.72%)</title><rect x="61.7244%" y="421" width="5.7212%" height="15" fill="rgb(252,129,43)" fg:x="766" fg:w="71"/><text x="61.9744%" y="431.50">indefin..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (69 samples, 5.56%)</title><rect x="61.8856%" y="405" width="5.5600%" height="15" fill="rgb(248,183,27)" fg:x="768" fg:w="69"/><text x="62.1356%" y="415.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="66.8815%" y="389" width="0.5641%" height="15" fill="rgb(250,0,22)" fg:x="830" fg:w="7"/><text x="67.1315%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="66.8815%" y="373" width="0.5641%" height="15" fill="rgb(213,166,10)" fg:x="830" fg:w="7"/><text x="67.1315%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="66.8815%" y="357" width="0.5641%" height="15" fill="rgb(207,163,36)" fg:x="830" fg:w="7"/><text x="67.1315%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="66.8815%" y="341" width="0.5641%" height="15" fill="rgb(208,122,22)" fg:x="830" fg:w="7"/><text x="67.1315%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="66.8815%" y="325" width="0.5641%" height="15" fill="rgb(207,104,49)" fg:x="830" fg:w="7"/><text x="67.1315%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="67.3650%" y="309" width="0.0806%" height="15" fill="rgb(248,211,50)" fg:x="836" fg:w="1"/><text x="67.6150%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="67.4456%" y="501" width="0.1612%" height="15" fill="rgb(217,13,45)" fg:x="837" fg:w="2"/><text x="67.6956%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7679%" y="405" width="0.0806%" height="15" fill="rgb(211,216,49)" fg:x="841" fg:w="1"/><text x="68.0179%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7679%" y="389" width="0.0806%" height="15" fill="rgb(221,58,53)" fg:x="841" fg:w="1"/><text x="68.0179%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.7679%" y="373" width="0.0806%" height="15" fill="rgb(220,112,41)" fg:x="841" fg:w="1"/><text x="68.0179%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.7679%" y="357" width="0.0806%" height="15" fill="rgb(236,38,28)" fg:x="841" fg:w="1"/><text x="68.0179%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.7679%" y="341" width="0.0806%" height="15" fill="rgb(227,195,22)" fg:x="841" fg:w="1"/><text x="68.0179%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.7679%" y="325" width="0.0806%" height="15" fill="rgb(214,55,33)" fg:x="841" fg:w="1"/><text x="68.0179%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.7679%" y="309" width="0.0806%" height="15" fill="rgb(248,80,13)" fg:x="841" fg:w="1"/><text x="68.0179%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.7679%" y="293" width="0.0806%" height="15" fill="rgb(238,52,6)" fg:x="841" fg:w="1"/><text x="68.0179%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.7679%" y="277" width="0.0806%" height="15" fill="rgb(224,198,47)" fg:x="841" fg:w="1"/><text x="68.0179%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.7679%" y="261" width="0.0806%" height="15" fill="rgb(233,171,20)" fg:x="841" fg:w="1"/><text x="68.0179%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.7679%" y="245" width="0.0806%" height="15" fill="rgb(241,30,25)" fg:x="841" fg:w="1"/><text x="68.0179%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7679%" y="229" width="0.0806%" height="15" fill="rgb(207,171,38)" fg:x="841" fg:w="1"/><text x="68.0179%" y="239.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="67.6068%" y="469" width="0.3223%" height="15" fill="rgb(234,70,1)" fg:x="839" fg:w="4"/><text x="67.8568%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="67.6068%" y="453" width="0.3223%" height="15" fill="rgb(232,178,18)" fg:x="839" fg:w="4"/><text x="67.8568%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="67.6068%" y="437" width="0.3223%" height="15" fill="rgb(241,78,40)" fg:x="839" fg:w="4"/><text x="67.8568%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="67.6068%" y="421" width="0.3223%" height="15" fill="rgb(222,35,25)" fg:x="839" fg:w="4"/><text x="67.8568%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.8485%" y="405" width="0.0806%" height="15" fill="rgb(207,92,16)" fg:x="842" fg:w="1"/><text x="68.0985%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="68.0902%" y="309" width="0.0806%" height="15" fill="rgb(216,59,51)" fg:x="845" fg:w="1"/><text x="68.3402%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0902%" y="293" width="0.0806%" height="15" fill="rgb(213,80,28)" fg:x="845" fg:w="1"/><text x="68.3402%" y="303.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="68.0097%" y="357" width="0.2417%" height="15" fill="rgb(220,93,7)" fg:x="844" fg:w="3"/><text x="68.2597%" y="367.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="68.0902%" y="341" width="0.1612%" height="15" fill="rgb(225,24,44)" fg:x="845" fg:w="2"/><text x="68.3402%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="68.0902%" y="325" width="0.1612%" height="15" fill="rgb(243,74,40)" fg:x="845" fg:w="2"/><text x="68.3402%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.1708%" y="309" width="0.0806%" height="15" fill="rgb(228,39,7)" fg:x="846" fg:w="1"/><text x="68.4208%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.1708%" y="293" width="0.0806%" height="15" fill="rgb(227,79,8)" fg:x="846" fg:w="1"/><text x="68.4208%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1708%" y="277" width="0.0806%" height="15" fill="rgb(236,58,11)" fg:x="846" fg:w="1"/><text x="68.4208%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1708%" y="261" width="0.0806%" height="15" fill="rgb(249,63,35)" fg:x="846" fg:w="1"/><text x="68.4208%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1708%" y="245" width="0.0806%" height="15" fill="rgb(252,114,16)" fg:x="846" fg:w="1"/><text x="68.4208%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1708%" y="229" width="0.0806%" height="15" fill="rgb(254,151,24)" fg:x="846" fg:w="1"/><text x="68.4208%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1708%" y="213" width="0.0806%" height="15" fill="rgb(253,54,39)" fg:x="846" fg:w="1"/><text x="68.4208%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1708%" y="197" width="0.0806%" height="15" fill="rgb(243,25,45)" fg:x="846" fg:w="1"/><text x="68.4208%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.1708%" y="181" width="0.0806%" height="15" fill="rgb(234,134,9)" fg:x="846" fg:w="1"/><text x="68.4208%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.1708%" y="165" width="0.0806%" height="15" fill="rgb(227,166,31)" fg:x="846" fg:w="1"/><text x="68.4208%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.1708%" y="149" width="0.0806%" height="15" fill="rgb(245,143,41)" fg:x="846" fg:w="1"/><text x="68.4208%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1708%" y="133" width="0.0806%" height="15" fill="rgb(238,181,32)" fg:x="846" fg:w="1"/><text x="68.4208%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1708%" y="117" width="0.0806%" height="15" fill="rgb(224,113,18)" fg:x="846" fg:w="1"/><text x="68.4208%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.1708%" y="101" width="0.0806%" height="15" fill="rgb(240,229,28)" fg:x="846" fg:w="1"/><text x="68.4208%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.1708%" y="85" width="0.0806%" height="15" fill="rgb(250,185,3)" fg:x="846" fg:w="1"/><text x="68.4208%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.1708%" y="69" width="0.0806%" height="15" fill="rgb(212,59,25)" fg:x="846" fg:w="1"/><text x="68.4208%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.1708%" y="53" width="0.0806%" height="15" fill="rgb(221,87,20)" fg:x="846" fg:w="1"/><text x="68.4208%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1708%" y="37" width="0.0806%" height="15" fill="rgb(213,74,28)" fg:x="846" fg:w="1"/><text x="68.4208%" y="47.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="68.2514%" y="277" width="0.0806%" height="15" fill="rgb(224,132,34)" fg:x="847" fg:w="1"/><text x="68.5014%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.3320%" y="165" width="0.0806%" height="15" fill="rgb(222,101,24)" fg:x="848" fg:w="1"/><text x="68.5820%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.3320%" y="149" width="0.0806%" height="15" fill="rgb(254,142,4)" fg:x="848" fg:w="1"/><text x="68.5820%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.3320%" y="133" width="0.0806%" height="15" fill="rgb(230,229,49)" fg:x="848" fg:w="1"/><text x="68.5820%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.3320%" y="117" width="0.0806%" height="15" fill="rgb(238,70,47)" fg:x="848" fg:w="1"/><text x="68.5820%" y="127.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="68.3320%" y="101" width="0.0806%" height="15" fill="rgb(231,160,17)" fg:x="848" fg:w="1"/><text x="68.5820%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.3320%" y="229" width="0.1612%" height="15" fill="rgb(218,68,53)" fg:x="848" fg:w="2"/><text x="68.5820%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.3320%" y="213" width="0.1612%" height="15" fill="rgb(236,111,10)" fg:x="848" fg:w="2"/><text x="68.5820%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.3320%" y="197" width="0.1612%" height="15" fill="rgb(224,34,41)" fg:x="848" fg:w="2"/><text x="68.5820%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.3320%" y="181" width="0.1612%" height="15" fill="rgb(241,118,19)" fg:x="848" fg:w="2"/><text x="68.5820%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4126%" y="165" width="0.0806%" height="15" fill="rgb(238,129,25)" fg:x="849" fg:w="1"/><text x="68.6626%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4126%" y="149" width="0.0806%" height="15" fill="rgb(238,22,31)" fg:x="849" fg:w="1"/><text x="68.6626%" y="159.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (4 samples, 0.32%)</title><rect x="68.2514%" y="341" width="0.3223%" height="15" fill="rgb(222,174,48)" fg:x="847" fg:w="4"/><text x="68.5014%" y="351.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (4 samples, 0.32%)</title><rect x="68.2514%" y="325" width="0.3223%" height="15" fill="rgb(206,152,40)" fg:x="847" fg:w="4"/><text x="68.5014%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="68.2514%" y="309" width="0.3223%" height="15" fill="rgb(218,99,54)" fg:x="847" fg:w="4"/><text x="68.5014%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="68.2514%" y="293" width="0.3223%" height="15" fill="rgb(220,174,26)" fg:x="847" fg:w="4"/><text x="68.5014%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="68.3320%" y="277" width="0.2417%" height="15" fill="rgb(245,116,9)" fg:x="848" fg:w="3"/><text x="68.5820%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.3320%" y="261" width="0.2417%" height="15" fill="rgb(209,72,35)" fg:x="848" fg:w="3"/><text x="68.5820%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="68.3320%" y="245" width="0.2417%" height="15" fill="rgb(226,126,21)" fg:x="848" fg:w="3"/><text x="68.5820%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.4932%" y="229" width="0.0806%" height="15" fill="rgb(227,192,1)" fg:x="850" fg:w="1"/><text x="68.7432%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.4932%" y="213" width="0.0806%" height="15" fill="rgb(237,180,29)" fg:x="850" fg:w="1"/><text x="68.7432%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.4932%" y="197" width="0.0806%" height="15" fill="rgb(230,197,35)" fg:x="850" fg:w="1"/><text x="68.7432%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.4932%" y="181" width="0.0806%" height="15" fill="rgb(246,193,31)" fg:x="850" fg:w="1"/><text x="68.7432%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.4932%" y="165" width="0.0806%" height="15" fill="rgb(241,36,4)" fg:x="850" fg:w="1"/><text x="68.7432%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.6543%" y="293" width="0.0806%" height="15" fill="rgb(241,130,17)" fg:x="852" fg:w="1"/><text x="68.9043%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.6543%" y="277" width="0.0806%" height="15" fill="rgb(206,137,32)" fg:x="852" fg:w="1"/><text x="68.9043%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="68.6543%" y="261" width="0.0806%" height="15" fill="rgb(237,228,51)" fg:x="852" fg:w="1"/><text x="68.9043%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.8155%" y="197" width="0.0806%" height="15" fill="rgb(243,6,42)" fg:x="854" fg:w="1"/><text x="69.0655%" y="207.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="68.8155%" y="181" width="0.0806%" height="15" fill="rgb(251,74,28)" fg:x="854" fg:w="1"/><text x="69.0655%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8961%" y="181" width="0.0806%" height="15" fill="rgb(218,20,49)" fg:x="855" fg:w="1"/><text x="69.1461%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8961%" y="165" width="0.0806%" height="15" fill="rgb(238,28,14)" fg:x="855" fg:w="1"/><text x="69.1461%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8961%" y="149" width="0.0806%" height="15" fill="rgb(229,40,46)" fg:x="855" fg:w="1"/><text x="69.1461%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.8961%" y="133" width="0.0806%" height="15" fill="rgb(244,195,20)" fg:x="855" fg:w="1"/><text x="69.1461%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8961%" y="117" width="0.0806%" height="15" fill="rgb(253,56,35)" fg:x="855" fg:w="1"/><text x="69.1461%" y="127.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (14 samples, 1.13%)</title><rect x="67.9291%" y="469" width="1.1281%" height="15" fill="rgb(210,149,44)" fg:x="843" fg:w="14"/><text x="68.1791%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (13 samples, 1.05%)</title><rect x="68.0097%" y="453" width="1.0475%" height="15" fill="rgb(240,135,12)" fg:x="844" fg:w="13"/><text x="68.2597%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.05%)</title><rect x="68.0097%" y="437" width="1.0475%" height="15" fill="rgb(251,24,50)" fg:x="844" fg:w="13"/><text x="68.2597%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 1.05%)</title><rect x="68.0097%" y="421" width="1.0475%" height="15" fill="rgb(243,200,47)" fg:x="844" fg:w="13"/><text x="68.2597%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (13 samples, 1.05%)</title><rect x="68.0097%" y="405" width="1.0475%" height="15" fill="rgb(224,166,26)" fg:x="844" fg:w="13"/><text x="68.2597%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (13 samples, 1.05%)</title><rect x="68.0097%" y="389" width="1.0475%" height="15" fill="rgb(233,0,47)" fg:x="844" fg:w="13"/><text x="68.2597%" y="399.50"></text></g><g><title>engine::internal::Entities::add_persisted (13 samples, 1.05%)</title><rect x="68.0097%" y="373" width="1.0475%" height="15" fill="rgb(253,80,5)" fg:x="844" fg:w="13"/><text x="68.2597%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity (10 samples, 0.81%)</title><rect x="68.2514%" y="357" width="0.8058%" height="15" fill="rgb(214,133,25)" fg:x="847" fg:w="10"/><text x="68.5014%" y="367.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="68.5737%" y="341" width="0.4835%" height="15" fill="rgb(209,27,14)" fg:x="851" fg:w="6"/><text x="68.8237%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.48%)</title><rect x="68.5737%" y="325" width="0.4835%" height="15" fill="rgb(219,102,51)" fg:x="851" fg:w="6"/><text x="68.8237%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="68.5737%" y="309" width="0.4835%" height="15" fill="rgb(237,18,16)" fg:x="851" fg:w="6"/><text x="68.8237%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="68.7349%" y="293" width="0.3223%" height="15" fill="rgb(241,85,17)" fg:x="853" fg:w="4"/><text x="68.9849%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="68.7349%" y="277" width="0.3223%" height="15" fill="rgb(236,90,42)" fg:x="853" fg:w="4"/><text x="68.9849%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="68.7349%" y="261" width="0.3223%" height="15" fill="rgb(249,57,21)" fg:x="853" fg:w="4"/><text x="68.9849%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="68.7349%" y="245" width="0.3223%" height="15" fill="rgb(243,12,36)" fg:x="853" fg:w="4"/><text x="68.9849%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="68.7349%" y="229" width="0.3223%" height="15" fill="rgb(253,128,47)" fg:x="853" fg:w="4"/><text x="68.9849%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="68.8155%" y="213" width="0.2417%" height="15" fill="rgb(207,33,20)" fg:x="854" fg:w="3"/><text x="69.0655%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.8961%" y="197" width="0.1612%" height="15" fill="rgb(233,215,35)" fg:x="855" fg:w="2"/><text x="69.1461%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9766%" y="181" width="0.0806%" height="15" fill="rgb(249,188,52)" fg:x="856" fg:w="1"/><text x="69.2266%" y="191.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="69.0572%" y="469" width="0.0806%" height="15" fill="rgb(225,12,32)" fg:x="857" fg:w="1"/><text x="69.3072%" y="479.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (687 samples, 55.36%)</title><rect x="13.9404%" y="661" width="55.3586%" height="15" fill="rgb(247,98,14)" fg:x="173" fg:w="687"/><text x="14.1904%" y="671.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (663 samples, 53.42%)</title><rect x="15.8743%" y="645" width="53.4247%" height="15" fill="rgb(247,219,48)" fg:x="197" fg:w="663"/><text x="16.1243%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (663 samples, 53.42%)</title><rect x="15.8743%" y="629" width="53.4247%" height="15" fill="rgb(253,60,48)" fg:x="197" fg:w="663"/><text x="16.1243%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (663 samples, 53.42%)</title><rect x="15.8743%" y="613" width="53.4247%" height="15" fill="rgb(245,15,52)" fg:x="197" fg:w="663"/><text x="16.1243%" y="623.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (663 samples, 53.42%)</title><rect x="15.8743%" y="597" width="53.4247%" height="15" fill="rgb(220,133,28)" fg:x="197" fg:w="663"/><text x="16.1243%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (663 samples, 53.42%)</title><rect x="15.8743%" y="581" width="53.4247%" height="15" fill="rgb(217,180,4)" fg:x="197" fg:w="663"/><text x="16.1243%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (663 samples, 53.42%)</title><rect x="15.8743%" y="565" width="53.4247%" height="15" fill="rgb(251,24,1)" fg:x="197" fg:w="663"/><text x="16.1243%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (663 samples, 53.42%)</title><rect x="15.8743%" y="549" width="53.4247%" height="15" fill="rgb(212,185,49)" fg:x="197" fg:w="663"/><text x="16.1243%" y="559.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (663 samples, 53.42%)</title><rect x="15.8743%" y="533" width="53.4247%" height="15" fill="rgb(215,175,22)" fg:x="197" fg:w="663"/><text x="16.1243%" y="543.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (662 samples, 53.34%)</title><rect x="15.9549%" y="517" width="53.3441%" height="15" fill="rgb(250,205,14)" fg:x="198" fg:w="662"/><text x="16.2049%" y="527.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (21 samples, 1.69%)</title><rect x="67.6068%" y="501" width="1.6922%" height="15" fill="rgb(225,211,22)" fg:x="839" fg:w="21"/><text x="67.8568%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (21 samples, 1.69%)</title><rect x="67.6068%" y="485" width="1.6922%" height="15" fill="rgb(251,179,42)" fg:x="839" fg:w="21"/><text x="67.8568%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.1378%" y="469" width="0.1612%" height="15" fill="rgb(208,216,51)" fg:x="858" fg:w="2"/><text x="69.3878%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.1378%" y="453" width="0.1612%" height="15" fill="rgb(235,36,11)" fg:x="858" fg:w="2"/><text x="69.3878%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.2184%" y="437" width="0.0806%" height="15" fill="rgb(213,189,28)" fg:x="859" fg:w="1"/><text x="69.4684%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="69.2990%" y="597" width="0.0806%" height="15" fill="rgb(227,203,42)" fg:x="860" fg:w="1"/><text x="69.5490%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="69.2990%" y="581" width="0.0806%" height="15" fill="rgb(244,72,36)" fg:x="860" fg:w="1"/><text x="69.5490%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.2990%" y="565" width="0.0806%" height="15" fill="rgb(213,53,17)" fg:x="860" fg:w="1"/><text x="69.5490%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.2990%" y="549" width="0.0806%" height="15" fill="rgb(207,167,3)" fg:x="860" fg:w="1"/><text x="69.5490%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.2990%" y="533" width="0.0806%" height="15" fill="rgb(216,98,30)" fg:x="860" fg:w="1"/><text x="69.5490%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.3795%" y="469" width="0.0806%" height="15" fill="rgb(236,123,15)" fg:x="861" fg:w="1"/><text x="69.6295%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3795%" y="453" width="0.0806%" height="15" fill="rgb(248,81,50)" fg:x="861" fg:w="1"/><text x="69.6295%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.4601%" y="469" width="0.0806%" height="15" fill="rgb(214,120,4)" fg:x="862" fg:w="1"/><text x="69.7101%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.4601%" y="453" width="0.0806%" height="15" fill="rgb(208,179,34)" fg:x="862" fg:w="1"/><text x="69.7101%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.4601%" y="437" width="0.0806%" height="15" fill="rgb(227,140,7)" fg:x="862" fg:w="1"/><text x="69.7101%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.4601%" y="421" width="0.0806%" height="15" fill="rgb(214,22,6)" fg:x="862" fg:w="1"/><text x="69.7101%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.4601%" y="405" width="0.0806%" height="15" fill="rgb(207,137,27)" fg:x="862" fg:w="1"/><text x="69.7101%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.5407%" y="421" width="0.0806%" height="15" fill="rgb(210,8,46)" fg:x="863" fg:w="1"/><text x="69.7907%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="69.3795%" y="517" width="0.3223%" height="15" fill="rgb(240,16,54)" fg:x="861" fg:w="4"/><text x="69.6295%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.3795%" y="501" width="0.3223%" height="15" fill="rgb(211,209,29)" fg:x="861" fg:w="4"/><text x="69.6295%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="69.3795%" y="485" width="0.3223%" height="15" fill="rgb(226,228,24)" fg:x="861" fg:w="4"/><text x="69.6295%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.5407%" y="469" width="0.1612%" height="15" fill="rgb(222,84,9)" fg:x="863" fg:w="2"/><text x="69.7907%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.5407%" y="453" width="0.1612%" height="15" fill="rgb(234,203,30)" fg:x="863" fg:w="2"/><text x="69.7907%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="69.5407%" y="437" width="0.1612%" height="15" fill="rgb(238,109,14)" fg:x="863" fg:w="2"/><text x="69.7907%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6213%" y="421" width="0.0806%" height="15" fill="rgb(233,206,34)" fg:x="864" fg:w="1"/><text x="69.8713%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6213%" y="405" width="0.0806%" height="15" fill="rgb(220,167,47)" fg:x="864" fg:w="1"/><text x="69.8713%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.6213%" y="389" width="0.0806%" height="15" fill="rgb(238,105,10)" fg:x="864" fg:w="1"/><text x="69.8713%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6213%" y="373" width="0.0806%" height="15" fill="rgb(213,227,17)" fg:x="864" fg:w="1"/><text x="69.8713%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6213%" y="357" width="0.0806%" height="15" fill="rgb(217,132,38)" fg:x="864" fg:w="1"/><text x="69.8713%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.6213%" y="341" width="0.0806%" height="15" fill="rgb(242,146,4)" fg:x="864" fg:w="1"/><text x="69.8713%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6213%" y="325" width="0.0806%" height="15" fill="rgb(212,61,9)" fg:x="864" fg:w="1"/><text x="69.8713%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6213%" y="309" width="0.0806%" height="15" fill="rgb(247,126,22)" fg:x="864" fg:w="1"/><text x="69.8713%" y="319.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (5 samples, 0.40%)</title><rect x="69.3795%" y="581" width="0.4029%" height="15" fill="rgb(220,196,2)" fg:x="861" fg:w="5"/><text x="69.6295%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (5 samples, 0.40%)</title><rect x="69.3795%" y="565" width="0.4029%" height="15" fill="rgb(208,46,4)" fg:x="861" fg:w="5"/><text x="69.6295%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="69.3795%" y="549" width="0.4029%" height="15" fill="rgb(252,104,46)" fg:x="861" fg:w="5"/><text x="69.6295%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="69.3795%" y="533" width="0.4029%" height="15" fill="rgb(237,152,48)" fg:x="861" fg:w="5"/><text x="69.6295%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.7019%" y="517" width="0.0806%" height="15" fill="rgb(221,59,37)" fg:x="865" fg:w="1"/><text x="69.9519%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7019%" y="501" width="0.0806%" height="15" fill="rgb(209,202,51)" fg:x="865" fg:w="1"/><text x="69.9519%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.7019%" y="485" width="0.0806%" height="15" fill="rgb(228,81,30)" fg:x="865" fg:w="1"/><text x="69.9519%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.56%)</title><rect x="69.2990%" y="629" width="0.5641%" height="15" fill="rgb(227,42,39)" fg:x="860" fg:w="7"/><text x="69.5490%" y="639.50"></text></g><g><title>engine::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="69.2990%" y="613" width="0.5641%" height="15" fill="rgb(221,26,2)" fg:x="860" fg:w="7"/><text x="69.5490%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity (6 samples, 0.48%)</title><rect x="69.3795%" y="597" width="0.4835%" height="15" fill="rgb(254,61,31)" fg:x="861" fg:w="6"/><text x="69.6295%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="69.7824%" y="581" width="0.0806%" height="15" fill="rgb(222,173,38)" fg:x="866" fg:w="1"/><text x="70.0324%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.7824%" y="565" width="0.0806%" height="15" fill="rgb(218,50,12)" fg:x="866" fg:w="1"/><text x="70.0324%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7824%" y="549" width="0.0806%" height="15" fill="rgb(223,88,40)" fg:x="866" fg:w="1"/><text x="70.0324%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.7824%" y="533" width="0.0806%" height="15" fill="rgb(237,54,19)" fg:x="866" fg:w="1"/><text x="70.0324%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7824%" y="517" width="0.0806%" height="15" fill="rgb(251,129,25)" fg:x="866" fg:w="1"/><text x="70.0324%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.7824%" y="501" width="0.0806%" height="15" fill="rgb(238,97,19)" fg:x="866" fg:w="1"/><text x="70.0324%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7824%" y="485" width="0.0806%" height="15" fill="rgb(240,169,18)" fg:x="866" fg:w="1"/><text x="70.0324%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.7824%" y="469" width="0.0806%" height="15" fill="rgb(230,187,49)" fg:x="866" fg:w="1"/><text x="70.0324%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7824%" y="453" width="0.0806%" height="15" fill="rgb(209,44,26)" fg:x="866" fg:w="1"/><text x="70.0324%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.7824%" y="437" width="0.0806%" height="15" fill="rgb(244,0,6)" fg:x="866" fg:w="1"/><text x="70.0324%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (8 samples, 0.64%)</title><rect x="69.2990%" y="645" width="0.6446%" height="15" fill="rgb(248,18,21)" fg:x="860" fg:w="8"/><text x="69.5490%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="69.8630%" y="629" width="0.0806%" height="15" fill="rgb(245,180,19)" fg:x="867" fg:w="1"/><text x="70.1130%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="69.8630%" y="613" width="0.0806%" height="15" fill="rgb(252,118,36)" fg:x="867" fg:w="1"/><text x="70.1130%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="69.8630%" y="597" width="0.0806%" height="15" fill="rgb(210,224,19)" fg:x="867" fg:w="1"/><text x="70.1130%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.8630%" y="581" width="0.0806%" height="15" fill="rgb(218,30,24)" fg:x="867" fg:w="1"/><text x="70.1130%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.8630%" y="565" width="0.0806%" height="15" fill="rgb(219,75,50)" fg:x="867" fg:w="1"/><text x="70.1130%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="69.8630%" y="549" width="0.0806%" height="15" fill="rgb(234,72,50)" fg:x="867" fg:w="1"/><text x="70.1130%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="69.8630%" y="533" width="0.0806%" height="15" fill="rgb(219,100,48)" fg:x="867" fg:w="1"/><text x="70.1130%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.8630%" y="517" width="0.0806%" height="15" fill="rgb(253,5,41)" fg:x="867" fg:w="1"/><text x="70.1130%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.8630%" y="501" width="0.0806%" height="15" fill="rgb(247,181,11)" fg:x="867" fg:w="1"/><text x="70.1130%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.8630%" y="485" width="0.0806%" height="15" fill="rgb(222,223,25)" fg:x="867" fg:w="1"/><text x="70.1130%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="69.8630%" y="469" width="0.0806%" height="15" fill="rgb(214,198,28)" fg:x="867" fg:w="1"/><text x="70.1130%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="69.8630%" y="453" width="0.0806%" height="15" fill="rgb(230,46,43)" fg:x="867" fg:w="1"/><text x="70.1130%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="69.8630%" y="437" width="0.0806%" height="15" fill="rgb(233,65,53)" fg:x="867" fg:w="1"/><text x="70.1130%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="69.8630%" y="421" width="0.0806%" height="15" fill="rgb(221,121,27)" fg:x="867" fg:w="1"/><text x="70.1130%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="69.8630%" y="405" width="0.0806%" height="15" fill="rgb(247,70,47)" fg:x="867" fg:w="1"/><text x="70.1130%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="69.8630%" y="389" width="0.0806%" height="15" fill="rgb(228,85,35)" fg:x="867" fg:w="1"/><text x="70.1130%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.8630%" y="373" width="0.0806%" height="15" fill="rgb(209,50,18)" fg:x="867" fg:w="1"/><text x="70.1130%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="69.8630%" y="357" width="0.0806%" height="15" fill="rgb(250,19,35)" fg:x="867" fg:w="1"/><text x="70.1130%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.8630%" y="341" width="0.0806%" height="15" fill="rgb(253,107,29)" fg:x="867" fg:w="1"/><text x="70.1130%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8630%" y="325" width="0.0806%" height="15" fill="rgb(252,179,29)" fg:x="867" fg:w="1"/><text x="70.1130%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0242%" y="613" width="0.0806%" height="15" fill="rgb(238,194,6)" fg:x="869" fg:w="1"/><text x="70.2742%" y="623.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (698 samples, 56.24%)</title><rect x="13.9404%" y="693" width="56.2450%" height="15" fill="rgb(238,164,29)" fg:x="173" fg:w="698"/><text x="14.1904%" y="703.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (698 samples, 56.24%)</title><rect x="13.9404%" y="677" width="56.2450%" height="15" fill="rgb(224,25,9)" fg:x="173" fg:w="698"/><text x="14.1904%" y="687.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (11 samples, 0.89%)</title><rect x="69.2990%" y="661" width="0.8864%" height="15" fill="rgb(244,153,23)" fg:x="860" fg:w="11"/><text x="69.5490%" y="671.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::find_name_key (3 samples, 0.24%)</title><rect x="69.9436%" y="645" width="0.2417%" height="15" fill="rgb(212,203,14)" fg:x="868" fg:w="3"/><text x="70.1936%" y="655.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="70.0242%" y="629" width="0.1612%" height="15" fill="rgb(220,164,20)" fg:x="869" fg:w="2"/><text x="70.2742%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="70.1048%" y="613" width="0.0806%" height="15" fill="rgb(222,203,48)" fg:x="870" fg:w="1"/><text x="70.3548%" y="623.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="70.1048%" y="597" width="0.0806%" height="15" fill="rgb(215,159,22)" fg:x="870" fg:w="1"/><text x="70.3548%" y="607.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (705 samples, 56.81%)</title><rect x="13.4569%" y="757" width="56.8090%" height="15" fill="rgb(216,183,47)" fg:x="167" fg:w="705"/><text x="13.7069%" y="767.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (704 samples, 56.73%)</title><rect x="13.5375%" y="741" width="56.7284%" height="15" fill="rgb(229,195,25)" fg:x="168" fg:w="704"/><text x="13.7875%" y="751.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (704 samples, 56.73%)</title><rect x="13.5375%" y="725" width="56.7284%" height="15" fill="rgb(224,132,51)" fg:x="168" fg:w="704"/><text x="13.7875%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (703 samples, 56.65%)</title><rect x="13.6180%" y="709" width="56.6479%" height="15" fill="rgb(240,63,7)" fg:x="169" fg:w="703"/><text x="13.8680%" y="719.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="70.1853%" y="693" width="0.0806%" height="15" fill="rgb(249,182,41)" fg:x="871" fg:w="1"/><text x="70.4353%" y="703.50"></text></g><g><title>&lt;plugins_core::moving::parser::GoActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="70.1853%" y="677" width="0.0806%" height="15" fill="rgb(243,47,26)" fg:x="871" fg:w="1"/><text x="70.4353%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (873 samples, 70.35%)</title><rect x="0.0000%" y="837" width="70.3465%" height="15" fill="rgb(233,48,2)" fg:x="0" fg:w="873"/><text x="0.2500%" y="847.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (873 samples, 70.35%)</title><rect x="0.0000%" y="821" width="70.3465%" height="15" fill="rgb(244,165,34)" fg:x="0" fg:w="873"/><text x="0.2500%" y="831.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (873 samples, 70.35%)</title><rect x="0.0000%" y="805" width="70.3465%" height="15" fill="rgb(207,89,7)" fg:x="0" fg:w="873"/><text x="0.2500%" y="815.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (706 samples, 56.89%)</title><rect x="13.4569%" y="789" width="56.8896%" height="15" fill="rgb(244,117,36)" fg:x="167" fg:w="706"/><text x="13.7069%" y="799.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (706 samples, 56.89%)</title><rect x="13.4569%" y="773" width="56.8896%" height="15" fill="rgb(226,144,34)" fg:x="167" fg:w="706"/><text x="13.7069%" y="783.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="70.2659%" y="757" width="0.0806%" height="15" fill="rgb(213,23,19)" fg:x="872" fg:w="1"/><text x="70.5159%" y="767.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="70.2659%" y="741" width="0.0806%" height="15" fill="rgb(217,75,12)" fg:x="872" fg:w="1"/><text x="70.5159%" y="751.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="70.2659%" y="725" width="0.0806%" height="15" fill="rgb(224,159,17)" fg:x="872" fg:w="1"/><text x="70.5159%" y="735.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="70.2659%" y="709" width="0.0806%" height="15" fill="rgb(217,118,1)" fg:x="872" fg:w="1"/><text x="70.5159%" y="719.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="70.2659%" y="693" width="0.0806%" height="15" fill="rgb(232,180,48)" fg:x="872" fg:w="1"/><text x="70.5159%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4271%" y="645" width="0.0806%" height="15" fill="rgb(230,27,33)" fg:x="874" fg:w="1"/><text x="70.6771%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.5077%" y="645" width="0.0806%" height="15" fill="rgb(205,31,21)" fg:x="875" fg:w="1"/><text x="70.7577%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="70.3465%" y="789" width="0.3223%" height="15" fill="rgb(253,59,4)" fg:x="873" fg:w="4"/><text x="70.5965%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (3 samples, 0.24%)</title><rect x="70.4271%" y="773" width="0.2417%" height="15" fill="rgb(224,201,9)" fg:x="874" fg:w="3"/><text x="70.6771%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="70.4271%" y="757" width="0.2417%" height="15" fill="rgb(229,206,30)" fg:x="874" fg:w="3"/><text x="70.6771%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="70.4271%" y="741" width="0.2417%" height="15" fill="rgb(212,67,47)" fg:x="874" fg:w="3"/><text x="70.6771%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="70.4271%" y="725" width="0.2417%" height="15" fill="rgb(211,96,50)" fg:x="874" fg:w="3"/><text x="70.6771%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="70.4271%" y="709" width="0.2417%" height="15" fill="rgb(252,114,18)" fg:x="874" fg:w="3"/><text x="70.6771%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (3 samples, 0.24%)</title><rect x="70.4271%" y="693" width="0.2417%" height="15" fill="rgb(223,58,37)" fg:x="874" fg:w="3"/><text x="70.6771%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="70.4271%" y="677" width="0.2417%" height="15" fill="rgb(237,70,4)" fg:x="874" fg:w="3"/><text x="70.6771%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="70.4271%" y="661" width="0.2417%" height="15" fill="rgb(244,85,46)" fg:x="874" fg:w="3"/><text x="70.6771%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.5882%" y="645" width="0.0806%" height="15" fill="rgb(223,39,52)" fg:x="876" fg:w="1"/><text x="70.8382%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.5882%" y="629" width="0.0806%" height="15" fill="rgb(218,200,14)" fg:x="876" fg:w="1"/><text x="70.8382%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.5882%" y="613" width="0.0806%" height="15" fill="rgb(208,171,16)" fg:x="876" fg:w="1"/><text x="70.8382%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.5882%" y="597" width="0.0806%" height="15" fill="rgb(234,200,18)" fg:x="876" fg:w="1"/><text x="70.8382%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="70.6688%" y="725" width="0.0806%" height="15" fill="rgb(228,45,11)" fg:x="877" fg:w="1"/><text x="70.9188%" y="735.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="70.7494%" y="709" width="0.0806%" height="15" fill="rgb(237,182,11)" fg:x="878" fg:w="1"/><text x="70.9994%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.7494%" y="693" width="0.0806%" height="15" fill="rgb(241,175,49)" fg:x="878" fg:w="1"/><text x="70.9994%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.7494%" y="677" width="0.0806%" height="15" fill="rgb(247,38,35)" fg:x="878" fg:w="1"/><text x="70.9994%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.7494%" y="661" width="0.0806%" height="15" fill="rgb(228,39,49)" fg:x="878" fg:w="1"/><text x="70.9994%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.7494%" y="645" width="0.0806%" height="15" fill="rgb(226,101,26)" fg:x="878" fg:w="1"/><text x="70.9994%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.7494%" y="629" width="0.0806%" height="15" fill="rgb(206,141,19)" fg:x="878" fg:w="1"/><text x="70.9994%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7494%" y="613" width="0.0806%" height="15" fill="rgb(211,200,13)" fg:x="878" fg:w="1"/><text x="70.9994%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.7494%" y="597" width="0.0806%" height="15" fill="rgb(241,121,6)" fg:x="878" fg:w="1"/><text x="70.9994%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7494%" y="581" width="0.0806%" height="15" fill="rgb(234,221,29)" fg:x="878" fg:w="1"/><text x="70.9994%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.7494%" y="565" width="0.0806%" height="15" fill="rgb(229,136,5)" fg:x="878" fg:w="1"/><text x="70.9994%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7494%" y="549" width="0.0806%" height="15" fill="rgb(238,36,11)" fg:x="878" fg:w="1"/><text x="70.9994%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.7494%" y="533" width="0.0806%" height="15" fill="rgb(251,55,41)" fg:x="878" fg:w="1"/><text x="70.9994%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7494%" y="517" width="0.0806%" height="15" fill="rgb(242,34,40)" fg:x="878" fg:w="1"/><text x="70.9994%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.7494%" y="501" width="0.0806%" height="15" fill="rgb(215,42,17)" fg:x="878" fg:w="1"/><text x="70.9994%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7494%" y="485" width="0.0806%" height="15" fill="rgb(207,44,46)" fg:x="878" fg:w="1"/><text x="70.9994%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.7494%" y="469" width="0.0806%" height="15" fill="rgb(211,206,28)" fg:x="878" fg:w="1"/><text x="70.9994%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="70.7494%" y="453" width="0.0806%" height="15" fill="rgb(237,167,16)" fg:x="878" fg:w="1"/><text x="70.9994%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.8300%" y="709" width="0.0806%" height="15" fill="rgb(233,66,6)" fg:x="879" fg:w="1"/><text x="71.0800%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.8300%" y="693" width="0.0806%" height="15" fill="rgb(246,123,29)" fg:x="879" fg:w="1"/><text x="71.0800%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.8300%" y="677" width="0.0806%" height="15" fill="rgb(209,62,40)" fg:x="879" fg:w="1"/><text x="71.0800%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.8300%" y="661" width="0.0806%" height="15" fill="rgb(218,4,25)" fg:x="879" fg:w="1"/><text x="71.0800%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8300%" y="645" width="0.0806%" height="15" fill="rgb(253,91,49)" fg:x="879" fg:w="1"/><text x="71.0800%" y="655.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="70.9106%" y="709" width="0.0806%" height="15" fill="rgb(228,155,29)" fg:x="880" fg:w="1"/><text x="71.1606%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9106%" y="693" width="0.0806%" height="15" fill="rgb(243,57,37)" fg:x="880" fg:w="1"/><text x="71.1606%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9106%" y="677" width="0.0806%" height="15" fill="rgb(244,167,17)" fg:x="880" fg:w="1"/><text x="71.1606%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.9106%" y="661" width="0.0806%" height="15" fill="rgb(207,181,38)" fg:x="880" fg:w="1"/><text x="71.1606%" y="671.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="70.9911%" y="693" width="0.0806%" height="15" fill="rgb(211,8,23)" fg:x="881" fg:w="1"/><text x="71.2411%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="70.9911%" y="677" width="0.0806%" height="15" fill="rgb(235,11,44)" fg:x="881" fg:w="1"/><text x="71.2411%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9911%" y="661" width="0.0806%" height="15" fill="rgb(248,18,52)" fg:x="881" fg:w="1"/><text x="71.2411%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9911%" y="645" width="0.0806%" height="15" fill="rgb(208,4,7)" fg:x="881" fg:w="1"/><text x="71.2411%" y="655.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.0717%" y="613" width="0.0806%" height="15" fill="rgb(240,17,39)" fg:x="882" fg:w="1"/><text x="71.3217%" y="623.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.0717%" y="597" width="0.0806%" height="15" fill="rgb(207,170,3)" fg:x="882" fg:w="1"/><text x="71.3217%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (7 samples, 0.56%)</title><rect x="70.6688%" y="757" width="0.5641%" height="15" fill="rgb(236,100,52)" fg:x="877" fg:w="7"/><text x="70.9188%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.56%)</title><rect x="70.6688%" y="741" width="0.5641%" height="15" fill="rgb(246,78,51)" fg:x="877" fg:w="7"/><text x="70.9188%" y="751.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="70.7494%" y="725" width="0.4835%" height="15" fill="rgb(211,17,15)" fg:x="878" fg:w="6"/><text x="70.9994%" y="735.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="70.9911%" y="709" width="0.2417%" height="15" fill="rgb(209,59,46)" fg:x="881" fg:w="3"/><text x="71.2411%" y="719.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="71.0717%" y="693" width="0.1612%" height="15" fill="rgb(210,92,25)" fg:x="882" fg:w="2"/><text x="71.3217%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.0717%" y="677" width="0.1612%" height="15" fill="rgb(238,174,52)" fg:x="882" fg:w="2"/><text x="71.3217%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.0717%" y="661" width="0.1612%" height="15" fill="rgb(230,73,7)" fg:x="882" fg:w="2"/><text x="71.3217%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.0717%" y="645" width="0.1612%" height="15" fill="rgb(243,124,40)" fg:x="882" fg:w="2"/><text x="71.3217%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.0717%" y="629" width="0.1612%" height="15" fill="rgb(244,170,11)" fg:x="882" fg:w="2"/><text x="71.3217%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.1523%" y="613" width="0.0806%" height="15" fill="rgb(207,114,54)" fg:x="883" fg:w="1"/><text x="71.4023%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (2 samples, 0.16%)</title><rect x="71.2329%" y="757" width="0.1612%" height="15" fill="rgb(205,42,20)" fg:x="884" fg:w="2"/><text x="71.4829%" y="767.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="71.3135%" y="741" width="0.0806%" height="15" fill="rgb(230,30,28)" fg:x="885" fg:w="1"/><text x="71.5635%" y="751.50"></text></g><g><title>libloading::os::unix::Library::open (1 samples, 0.08%)</title><rect x="71.3135%" y="725" width="0.0806%" height="15" fill="rgb(205,73,54)" fg:x="885" fg:w="1"/><text x="71.5635%" y="735.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="71.3135%" y="709" width="0.0806%" height="15" fill="rgb(254,227,23)" fg:x="885" fg:w="1"/><text x="71.5635%" y="719.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="71.3135%" y="693" width="0.0806%" height="15" fill="rgb(228,202,34)" fg:x="885" fg:w="1"/><text x="71.5635%" y="703.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="71.3135%" y="677" width="0.0806%" height="15" fill="rgb(222,225,37)" fg:x="885" fg:w="1"/><text x="71.5635%" y="687.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="71.3135%" y="661" width="0.0806%" height="15" fill="rgb(221,14,54)" fg:x="885" fg:w="1"/><text x="71.5635%" y="671.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="71.3135%" y="645" width="0.0806%" height="15" fill="rgb(254,102,2)" fg:x="885" fg:w="1"/><text x="71.5635%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (10 samples, 0.81%)</title><rect x="70.6688%" y="789" width="0.8058%" height="15" fill="rgb(232,104,17)" fg:x="877" fg:w="10"/><text x="70.9188%" y="799.50"></text></g><g><title>engine::session::Session::new (10 samples, 0.81%)</title><rect x="70.6688%" y="773" width="0.8058%" height="15" fill="rgb(250,220,14)" fg:x="877" fg:w="10"/><text x="70.9188%" y="783.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="71.3940%" y="757" width="0.0806%" height="15" fill="rgb(241,158,9)" fg:x="886" fg:w="1"/><text x="71.6440%" y="767.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.4746%" y="693" width="0.0806%" height="15" fill="rgb(246,9,43)" fg:x="887" fg:w="1"/><text x="71.7246%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.4746%" y="677" width="0.0806%" height="15" fill="rgb(206,73,33)" fg:x="887" fg:w="1"/><text x="71.7246%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.5552%" y="661" width="0.0806%" height="15" fill="rgb(222,79,8)" fg:x="888" fg:w="1"/><text x="71.8052%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5552%" y="645" width="0.0806%" height="15" fill="rgb(234,8,54)" fg:x="888" fg:w="1"/><text x="71.8052%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5552%" y="629" width="0.0806%" height="15" fill="rgb(209,134,38)" fg:x="888" fg:w="1"/><text x="71.8052%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.5552%" y="613" width="0.0806%" height="15" fill="rgb(230,127,29)" fg:x="888" fg:w="1"/><text x="71.8052%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.5552%" y="597" width="0.0806%" height="15" fill="rgb(242,44,41)" fg:x="888" fg:w="1"/><text x="71.8052%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.5552%" y="581" width="0.0806%" height="15" fill="rgb(222,56,43)" fg:x="888" fg:w="1"/><text x="71.8052%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.5552%" y="565" width="0.0806%" height="15" fill="rgb(238,39,47)" fg:x="888" fg:w="1"/><text x="71.8052%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.6358%" y="661" width="0.0806%" height="15" fill="rgb(226,79,43)" fg:x="889" fg:w="1"/><text x="71.8858%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.6358%" y="645" width="0.0806%" height="15" fill="rgb(242,105,53)" fg:x="889" fg:w="1"/><text x="71.8858%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.6358%" y="629" width="0.0806%" height="15" fill="rgb(251,132,46)" fg:x="889" fg:w="1"/><text x="71.8858%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.7164%" y="645" width="0.0806%" height="15" fill="rgb(231,77,14)" fg:x="890" fg:w="1"/><text x="71.9664%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.7164%" y="661" width="0.1612%" height="15" fill="rgb(240,135,9)" fg:x="890" fg:w="2"/><text x="71.9664%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.7969%" y="645" width="0.0806%" height="15" fill="rgb(248,109,14)" fg:x="891" fg:w="1"/><text x="72.0469%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.7969%" y="629" width="0.0806%" height="15" fill="rgb(227,146,52)" fg:x="891" fg:w="1"/><text x="72.0469%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.7969%" y="613" width="0.0806%" height="15" fill="rgb(232,54,3)" fg:x="891" fg:w="1"/><text x="72.0469%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.7969%" y="597" width="0.0806%" height="15" fill="rgb(229,201,43)" fg:x="891" fg:w="1"/><text x="72.0469%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.7969%" y="581" width="0.0806%" height="15" fill="rgb(252,161,33)" fg:x="891" fg:w="1"/><text x="72.0469%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="71.5552%" y="677" width="0.4029%" height="15" fill="rgb(226,146,40)" fg:x="888" fg:w="5"/><text x="71.8052%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.8775%" y="661" width="0.0806%" height="15" fill="rgb(219,47,25)" fg:x="892" fg:w="1"/><text x="72.1275%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.8775%" y="645" width="0.0806%" height="15" fill="rgb(250,135,13)" fg:x="892" fg:w="1"/><text x="72.1275%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.8775%" y="629" width="0.0806%" height="15" fill="rgb(219,229,18)" fg:x="892" fg:w="1"/><text x="72.1275%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="71.4746%" y="709" width="0.5641%" height="15" fill="rgb(217,152,27)" fg:x="887" fg:w="7"/><text x="71.7246%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="71.5552%" y="693" width="0.4835%" height="15" fill="rgb(225,71,47)" fg:x="888" fg:w="6"/><text x="71.8052%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.9581%" y="677" width="0.0806%" height="15" fill="rgb(220,139,14)" fg:x="893" fg:w="1"/><text x="72.2081%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.9581%" y="661" width="0.0806%" height="15" fill="rgb(247,54,32)" fg:x="893" fg:w="1"/><text x="72.2081%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.9581%" y="645" width="0.0806%" height="15" fill="rgb(252,131,39)" fg:x="893" fg:w="1"/><text x="72.2081%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.9581%" y="629" width="0.0806%" height="15" fill="rgb(210,108,39)" fg:x="893" fg:w="1"/><text x="72.2081%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.9581%" y="613" width="0.0806%" height="15" fill="rgb(205,23,29)" fg:x="893" fg:w="1"/><text x="72.2081%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0387%" y="709" width="0.0806%" height="15" fill="rgb(246,139,46)" fg:x="894" fg:w="1"/><text x="72.2887%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.0387%" y="693" width="0.0806%" height="15" fill="rgb(250,81,26)" fg:x="894" fg:w="1"/><text x="72.2887%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0387%" y="677" width="0.0806%" height="15" fill="rgb(214,104,7)" fg:x="894" fg:w="1"/><text x="72.2887%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0387%" y="661" width="0.0806%" height="15" fill="rgb(233,189,8)" fg:x="894" fg:w="1"/><text x="72.2887%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0387%" y="645" width="0.0806%" height="15" fill="rgb(228,141,17)" fg:x="894" fg:w="1"/><text x="72.2887%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0387%" y="629" width="0.0806%" height="15" fill="rgb(247,157,1)" fg:x="894" fg:w="1"/><text x="72.2887%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0387%" y="613" width="0.0806%" height="15" fill="rgb(249,225,5)" fg:x="894" fg:w="1"/><text x="72.2887%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="72.1998%" y="661" width="0.0806%" height="15" fill="rgb(242,55,13)" fg:x="896" fg:w="1"/><text x="72.4498%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.1998%" y="645" width="0.0806%" height="15" fill="rgb(230,49,50)" fg:x="896" fg:w="1"/><text x="72.4498%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.1998%" y="629" width="0.0806%" height="15" fill="rgb(241,111,38)" fg:x="896" fg:w="1"/><text x="72.4498%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.2804%" y="629" width="0.0806%" height="15" fill="rgb(252,155,4)" fg:x="897" fg:w="1"/><text x="72.5304%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2804%" y="613" width="0.0806%" height="15" fill="rgb(212,69,32)" fg:x="897" fg:w="1"/><text x="72.5304%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.2804%" y="597" width="0.0806%" height="15" fill="rgb(243,107,47)" fg:x="897" fg:w="1"/><text x="72.5304%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2804%" y="581" width="0.0806%" height="15" fill="rgb(247,130,12)" fg:x="897" fg:w="1"/><text x="72.5304%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2804%" y="565" width="0.0806%" height="15" fill="rgb(233,74,16)" fg:x="897" fg:w="1"/><text x="72.5304%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2804%" y="549" width="0.0806%" height="15" fill="rgb(208,58,18)" fg:x="897" fg:w="1"/><text x="72.5304%" y="559.50"></text></g><g><title>engine::session::Session::flush (12 samples, 0.97%)</title><rect x="71.4746%" y="773" width="0.9670%" height="15" fill="rgb(242,225,1)" fg:x="887" fg:w="12"/><text x="71.7246%" y="783.50"></text></g><g><title>engine::session::Session::save_entity_changes (12 samples, 0.97%)</title><rect x="71.4746%" y="757" width="0.9670%" height="15" fill="rgb(249,39,40)" fg:x="887" fg:w="12"/><text x="71.7246%" y="767.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (12 samples, 0.97%)</title><rect x="71.4746%" y="741" width="0.9670%" height="15" fill="rgb(207,72,44)" fg:x="887" fg:w="12"/><text x="71.7246%" y="751.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (12 samples, 0.97%)</title><rect x="71.4746%" y="725" width="0.9670%" height="15" fill="rgb(215,193,12)" fg:x="887" fg:w="12"/><text x="71.7246%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="72.1193%" y="709" width="0.3223%" height="15" fill="rgb(248,41,39)" fg:x="895" fg:w="4"/><text x="72.3693%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="72.1193%" y="693" width="0.3223%" height="15" fill="rgb(253,85,4)" fg:x="895" fg:w="4"/><text x="72.3693%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="72.1193%" y="677" width="0.3223%" height="15" fill="rgb(243,70,31)" fg:x="895" fg:w="4"/><text x="72.3693%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="72.2804%" y="661" width="0.1612%" height="15" fill="rgb(253,195,26)" fg:x="897" fg:w="2"/><text x="72.5304%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="72.2804%" y="645" width="0.1612%" height="15" fill="rgb(243,42,11)" fg:x="897" fg:w="2"/><text x="72.5304%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="72.3610%" y="629" width="0.0806%" height="15" fill="rgb(239,66,17)" fg:x="898" fg:w="1"/><text x="72.6110%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3610%" y="613" width="0.0806%" height="15" fill="rgb(217,132,21)" fg:x="898" fg:w="1"/><text x="72.6110%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.4416%" y="709" width="0.0806%" height="15" fill="rgb(252,202,21)" fg:x="899" fg:w="1"/><text x="72.6916%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.4416%" y="693" width="0.0806%" height="15" fill="rgb(233,98,36)" fg:x="899" fg:w="1"/><text x="72.6916%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.4416%" y="677" width="0.0806%" height="15" fill="rgb(216,153,54)" fg:x="899" fg:w="1"/><text x="72.6916%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.4416%" y="661" width="0.0806%" height="15" fill="rgb(250,99,7)" fg:x="899" fg:w="1"/><text x="72.6916%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4416%" y="645" width="0.0806%" height="15" fill="rgb(207,56,50)" fg:x="899" fg:w="1"/><text x="72.6916%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.4416%" y="629" width="0.0806%" height="15" fill="rgb(244,61,34)" fg:x="899" fg:w="1"/><text x="72.6916%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4416%" y="613" width="0.0806%" height="15" fill="rgb(241,50,38)" fg:x="899" fg:w="1"/><text x="72.6916%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.4416%" y="597" width="0.0806%" height="15" fill="rgb(212,166,30)" fg:x="899" fg:w="1"/><text x="72.6916%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4416%" y="581" width="0.0806%" height="15" fill="rgb(249,127,32)" fg:x="899" fg:w="1"/><text x="72.6916%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.4416%" y="565" width="0.0806%" height="15" fill="rgb(209,103,0)" fg:x="899" fg:w="1"/><text x="72.6916%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4416%" y="549" width="0.0806%" height="15" fill="rgb(238,209,51)" fg:x="899" fg:w="1"/><text x="72.6916%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.4416%" y="533" width="0.0806%" height="15" fill="rgb(237,56,23)" fg:x="899" fg:w="1"/><text x="72.6916%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4416%" y="517" width="0.0806%" height="15" fill="rgb(215,153,46)" fg:x="899" fg:w="1"/><text x="72.6916%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="72.4416%" y="501" width="0.0806%" height="15" fill="rgb(224,49,31)" fg:x="899" fg:w="1"/><text x="72.6916%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.4416%" y="485" width="0.0806%" height="15" fill="rgb(250,18,42)" fg:x="899" fg:w="1"/><text x="72.6916%" y="495.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5222%" y="661" width="0.0806%" height="15" fill="rgb(215,176,39)" fg:x="900" fg:w="1"/><text x="72.7722%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.5222%" y="645" width="0.0806%" height="15" fill="rgb(223,77,29)" fg:x="900" fg:w="1"/><text x="72.7722%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="72.5222%" y="629" width="0.0806%" height="15" fill="rgb(234,94,52)" fg:x="900" fg:w="1"/><text x="72.7722%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.5222%" y="613" width="0.0806%" height="15" fill="rgb(220,154,50)" fg:x="900" fg:w="1"/><text x="72.7722%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="72.5222%" y="597" width="0.0806%" height="15" fill="rgb(212,11,10)" fg:x="900" fg:w="1"/><text x="72.7722%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="72.4416%" y="757" width="0.2417%" height="15" fill="rgb(205,166,19)" fg:x="899" fg:w="3"/><text x="72.6916%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="72.4416%" y="741" width="0.2417%" height="15" fill="rgb(244,198,16)" fg:x="899" fg:w="3"/><text x="72.6916%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="72.4416%" y="725" width="0.2417%" height="15" fill="rgb(219,69,12)" fg:x="899" fg:w="3"/><text x="72.6916%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="72.5222%" y="709" width="0.1612%" height="15" fill="rgb(245,30,7)" fg:x="900" fg:w="2"/><text x="72.7722%" y="719.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="72.5222%" y="693" width="0.1612%" height="15" fill="rgb(218,221,48)" fg:x="900" fg:w="2"/><text x="72.7722%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="72.5222%" y="677" width="0.1612%" height="15" fill="rgb(216,66,15)" fg:x="900" fg:w="2"/><text x="72.7722%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="72.6027%" y="661" width="0.0806%" height="15" fill="rgb(226,122,50)" fg:x="901" fg:w="1"/><text x="72.8527%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.6027%" y="645" width="0.0806%" height="15" fill="rgb(239,156,16)" fg:x="901" fg:w="1"/><text x="72.8527%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.6027%" y="629" width="0.0806%" height="15" fill="rgb(224,27,38)" fg:x="901" fg:w="1"/><text x="72.8527%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.6027%" y="613" width="0.0806%" height="15" fill="rgb(224,39,27)" fg:x="901" fg:w="1"/><text x="72.8527%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.6027%" y="597" width="0.0806%" height="15" fill="rgb(215,92,29)" fg:x="901" fg:w="1"/><text x="72.8527%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.6027%" y="581" width="0.0806%" height="15" fill="rgb(207,159,16)" fg:x="901" fg:w="1"/><text x="72.8527%" y="591.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.40%)</title><rect x="72.4416%" y="773" width="0.4029%" height="15" fill="rgb(238,163,47)" fg:x="899" fg:w="5"/><text x="72.6916%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="72.6833%" y="757" width="0.1612%" height="15" fill="rgb(219,91,49)" fg:x="902" fg:w="2"/><text x="72.9333%" y="767.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="72.7639%" y="741" width="0.0806%" height="15" fill="rgb(227,167,31)" fg:x="903" fg:w="1"/><text x="73.0139%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="72.7639%" y="725" width="0.0806%" height="15" fill="rgb(234,80,54)" fg:x="903" fg:w="1"/><text x="73.0139%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="72.7639%" y="709" width="0.0806%" height="15" fill="rgb(212,114,2)" fg:x="903" fg:w="1"/><text x="73.0139%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.7639%" y="693" width="0.0806%" height="15" fill="rgb(234,50,24)" fg:x="903" fg:w="1"/><text x="73.0139%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.7639%" y="677" width="0.0806%" height="15" fill="rgb(221,68,8)" fg:x="903" fg:w="1"/><text x="73.0139%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7639%" y="661" width="0.0806%" height="15" fill="rgb(254,180,31)" fg:x="903" fg:w="1"/><text x="73.0139%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7639%" y="645" width="0.0806%" height="15" fill="rgb(247,130,50)" fg:x="903" fg:w="1"/><text x="73.0139%" y="655.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="72.8445%" y="773" width="0.1612%" height="15" fill="rgb(211,109,4)" fg:x="904" fg:w="2"/><text x="73.0945%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="72.9251%" y="757" width="0.0806%" height="15" fill="rgb(238,50,21)" fg:x="905" fg:w="1"/><text x="73.1751%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="72.9251%" y="741" width="0.0806%" height="15" fill="rgb(225,57,45)" fg:x="905" fg:w="1"/><text x="73.1751%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="72.9251%" y="725" width="0.0806%" height="15" fill="rgb(209,196,50)" fg:x="905" fg:w="1"/><text x="73.1751%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="72.9251%" y="709" width="0.0806%" height="15" fill="rgb(242,140,13)" fg:x="905" fg:w="1"/><text x="73.1751%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="72.9251%" y="693" width="0.0806%" height="15" fill="rgb(217,111,7)" fg:x="905" fg:w="1"/><text x="73.1751%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="72.9251%" y="677" width="0.0806%" height="15" fill="rgb(253,193,51)" fg:x="905" fg:w="1"/><text x="73.1751%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="73.0056%" y="757" width="0.0806%" height="15" fill="rgb(252,70,29)" fg:x="906" fg:w="1"/><text x="73.2556%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.0056%" y="741" width="0.0806%" height="15" fill="rgb(232,127,12)" fg:x="906" fg:w="1"/><text x="73.2556%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="73.0056%" y="725" width="0.0806%" height="15" fill="rgb(211,180,21)" fg:x="906" fg:w="1"/><text x="73.2556%" y="735.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="73.0056%" y="709" width="0.0806%" height="15" fill="rgb(229,72,13)" fg:x="906" fg:w="1"/><text x="73.2556%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.0056%" y="693" width="0.0806%" height="15" fill="rgb(240,211,49)" fg:x="906" fg:w="1"/><text x="73.2556%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="73.0056%" y="677" width="0.0806%" height="15" fill="rgb(219,149,40)" fg:x="906" fg:w="1"/><text x="73.2556%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.0056%" y="661" width="0.0806%" height="15" fill="rgb(210,127,46)" fg:x="906" fg:w="1"/><text x="73.2556%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="73.0056%" y="645" width="0.0806%" height="15" fill="rgb(220,106,7)" fg:x="906" fg:w="1"/><text x="73.2556%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.0056%" y="629" width="0.0806%" height="15" fill="rgb(249,31,22)" fg:x="906" fg:w="1"/><text x="73.2556%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.0056%" y="613" width="0.0806%" height="15" fill="rgb(253,1,49)" fg:x="906" fg:w="1"/><text x="73.2556%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0056%" y="597" width="0.0806%" height="15" fill="rgb(227,144,33)" fg:x="906" fg:w="1"/><text x="73.2556%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0056%" y="581" width="0.0806%" height="15" fill="rgb(249,163,44)" fg:x="906" fg:w="1"/><text x="73.2556%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0056%" y="565" width="0.0806%" height="15" fill="rgb(234,15,39)" fg:x="906" fg:w="1"/><text x="73.2556%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0056%" y="549" width="0.0806%" height="15" fill="rgb(207,66,16)" fg:x="906" fg:w="1"/><text x="73.2556%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.0056%" y="533" width="0.0806%" height="15" fill="rgb(233,112,24)" fg:x="906" fg:w="1"/><text x="73.2556%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0056%" y="517" width="0.0806%" height="15" fill="rgb(230,90,22)" fg:x="906" fg:w="1"/><text x="73.2556%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0056%" y="501" width="0.0806%" height="15" fill="rgb(229,61,13)" fg:x="906" fg:w="1"/><text x="73.2556%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0056%" y="485" width="0.0806%" height="15" fill="rgb(225,57,24)" fg:x="906" fg:w="1"/><text x="73.2556%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::entry::Entry&gt;&gt; (1 samples, 0.08%)</title><rect x="73.0862%" y="757" width="0.0806%" height="15" fill="rgb(208,169,48)" fg:x="907" fg:w="1"/><text x="73.3362%" y="767.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="73.1668%" y="725" width="0.0806%" height="15" fill="rgb(244,218,51)" fg:x="908" fg:w="1"/><text x="73.4168%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.1668%" y="709" width="0.0806%" height="15" fill="rgb(214,148,10)" fg:x="908" fg:w="1"/><text x="73.4168%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.1668%" y="693" width="0.0806%" height="15" fill="rgb(225,174,27)" fg:x="908" fg:w="1"/><text x="73.4168%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.1668%" y="677" width="0.0806%" height="15" fill="rgb(230,96,26)" fg:x="908" fg:w="1"/><text x="73.4168%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.1668%" y="661" width="0.0806%" height="15" fill="rgb(232,10,30)" fg:x="908" fg:w="1"/><text x="73.4168%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="73.2474%" y="693" width="0.2417%" height="15" fill="rgb(222,8,50)" fg:x="909" fg:w="3"/><text x="73.4974%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="73.3280%" y="677" width="0.1612%" height="15" fill="rgb(213,81,27)" fg:x="910" fg:w="2"/><text x="73.5780%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.4085%" y="661" width="0.0806%" height="15" fill="rgb(245,50,10)" fg:x="911" fg:w="1"/><text x="73.6585%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.4085%" y="645" width="0.0806%" height="15" fill="rgb(216,100,18)" fg:x="911" fg:w="1"/><text x="73.6585%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.4085%" y="629" width="0.0806%" height="15" fill="rgb(236,147,54)" fg:x="911" fg:w="1"/><text x="73.6585%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5697%" y="645" width="0.0806%" height="15" fill="rgb(205,143,26)" fg:x="913" fg:w="1"/><text x="73.8197%" y="655.50"></text></g><g><title>engine::session::Session::flush (7 samples, 0.56%)</title><rect x="73.1668%" y="757" width="0.5641%" height="15" fill="rgb(236,26,9)" fg:x="908" fg:w="7"/><text x="73.4168%" y="767.50"></text></g><g><title>engine::session::Session::save_entity_changes (7 samples, 0.56%)</title><rect x="73.1668%" y="741" width="0.5641%" height="15" fill="rgb(221,165,53)" fg:x="908" fg:w="7"/><text x="73.4168%" y="751.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (6 samples, 0.48%)</title><rect x="73.2474%" y="725" width="0.4835%" height="15" fill="rgb(214,110,17)" fg:x="909" fg:w="6"/><text x="73.4974%" y="735.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (6 samples, 0.48%)</title><rect x="73.2474%" y="709" width="0.4835%" height="15" fill="rgb(237,197,12)" fg:x="909" fg:w="6"/><text x="73.4974%" y="719.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="73.4891%" y="693" width="0.2417%" height="15" fill="rgb(205,84,17)" fg:x="912" fg:w="3"/><text x="73.7391%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="73.4891%" y="677" width="0.2417%" height="15" fill="rgb(237,18,45)" fg:x="912" fg:w="3"/><text x="73.7391%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="73.5697%" y="661" width="0.1612%" height="15" fill="rgb(221,87,14)" fg:x="913" fg:w="2"/><text x="73.8197%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6503%" y="645" width="0.0806%" height="15" fill="rgb(238,186,15)" fg:x="914" fg:w="1"/><text x="73.9003%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="73.7309%" y="741" width="0.1612%" height="15" fill="rgb(208,115,11)" fg:x="915" fg:w="2"/><text x="73.9809%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="73.7309%" y="725" width="0.1612%" height="15" fill="rgb(254,175,0)" fg:x="915" fg:w="2"/><text x="73.9809%" y="735.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="73.7309%" y="709" width="0.1612%" height="15" fill="rgb(227,24,42)" fg:x="915" fg:w="2"/><text x="73.9809%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.7309%" y="693" width="0.1612%" height="15" fill="rgb(223,211,37)" fg:x="915" fg:w="2"/><text x="73.9809%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.7309%" y="677" width="0.1612%" height="15" fill="rgb(235,49,27)" fg:x="915" fg:w="2"/><text x="73.9809%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="73.7309%" y="661" width="0.1612%" height="15" fill="rgb(254,97,51)" fg:x="915" fg:w="2"/><text x="73.9809%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8114%" y="645" width="0.0806%" height="15" fill="rgb(249,51,40)" fg:x="916" fg:w="1"/><text x="74.0614%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="73.8920%" y="725" width="0.0806%" height="15" fill="rgb(210,128,45)" fg:x="917" fg:w="1"/><text x="74.1420%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="73.8920%" y="709" width="0.0806%" height="15" fill="rgb(224,137,50)" fg:x="917" fg:w="1"/><text x="74.1420%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.8920%" y="693" width="0.0806%" height="15" fill="rgb(242,15,9)" fg:x="917" fg:w="1"/><text x="74.1420%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.8920%" y="677" width="0.0806%" height="15" fill="rgb(233,187,41)" fg:x="917" fg:w="1"/><text x="74.1420%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.8920%" y="661" width="0.0806%" height="15" fill="rgb(227,2,29)" fg:x="917" fg:w="1"/><text x="74.1420%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.8920%" y="645" width="0.0806%" height="15" fill="rgb(222,70,3)" fg:x="917" fg:w="1"/><text x="74.1420%" y="655.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="73.7309%" y="757" width="0.3223%" height="15" fill="rgb(213,11,42)" fg:x="915" fg:w="4"/><text x="73.9809%" y="767.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="73.8920%" y="741" width="0.1612%" height="15" fill="rgb(225,150,9)" fg:x="917" fg:w="2"/><text x="74.1420%" y="751.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="73.9726%" y="725" width="0.0806%" height="15" fill="rgb(230,162,45)" fg:x="918" fg:w="1"/><text x="74.2226%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="73.9726%" y="709" width="0.0806%" height="15" fill="rgb(222,14,52)" fg:x="918" fg:w="1"/><text x="74.2226%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="73.9726%" y="693" width="0.0806%" height="15" fill="rgb(254,198,14)" fg:x="918" fg:w="1"/><text x="74.2226%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.9726%" y="677" width="0.0806%" height="15" fill="rgb(220,217,30)" fg:x="918" fg:w="1"/><text x="74.2226%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.9726%" y="661" width="0.0806%" height="15" fill="rgb(215,146,41)" fg:x="918" fg:w="1"/><text x="74.2226%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.9726%" y="645" width="0.0806%" height="15" fill="rgb(217,27,36)" fg:x="918" fg:w="1"/><text x="74.2226%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9726%" y="629" width="0.0806%" height="15" fill="rgb(219,218,39)" fg:x="918" fg:w="1"/><text x="74.2226%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9726%" y="613" width="0.0806%" height="15" fill="rgb(219,4,42)" fg:x="918" fg:w="1"/><text x="74.2226%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9726%" y="597" width="0.0806%" height="15" fill="rgb(249,119,36)" fg:x="918" fg:w="1"/><text x="74.2226%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9726%" y="581" width="0.0806%" height="15" fill="rgb(209,23,33)" fg:x="918" fg:w="1"/><text x="74.2226%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9726%" y="565" width="0.0806%" height="15" fill="rgb(211,10,0)" fg:x="918" fg:w="1"/><text x="74.2226%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9726%" y="549" width="0.0806%" height="15" fill="rgb(208,99,37)" fg:x="918" fg:w="1"/><text x="74.2226%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.9726%" y="533" width="0.0806%" height="15" fill="rgb(213,132,31)" fg:x="918" fg:w="1"/><text x="74.2226%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.9726%" y="517" width="0.0806%" height="15" fill="rgb(243,129,40)" fg:x="918" fg:w="1"/><text x="74.2226%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.9726%" y="501" width="0.0806%" height="15" fill="rgb(210,66,33)" fg:x="918" fg:w="1"/><text x="74.2226%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9726%" y="485" width="0.0806%" height="15" fill="rgb(209,189,4)" fg:x="918" fg:w="1"/><text x="74.2226%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9726%" y="469" width="0.0806%" height="15" fill="rgb(214,107,37)" fg:x="918" fg:w="1"/><text x="74.2226%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.9726%" y="453" width="0.0806%" height="15" fill="rgb(245,88,54)" fg:x="918" fg:w="1"/><text x="74.2226%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.9726%" y="437" width="0.0806%" height="15" fill="rgb(205,146,20)" fg:x="918" fg:w="1"/><text x="74.2226%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.9726%" y="421" width="0.0806%" height="15" fill="rgb(220,161,25)" fg:x="918" fg:w="1"/><text x="74.2226%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.9726%" y="405" width="0.0806%" height="15" fill="rgb(215,152,15)" fg:x="918" fg:w="1"/><text x="74.2226%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9726%" y="389" width="0.0806%" height="15" fill="rgb(233,192,44)" fg:x="918" fg:w="1"/><text x="74.2226%" y="399.50"></text></g><g><title>plugins_core::build::Build::occupying (1 samples, 0.08%)</title><rect x="74.0532%" y="757" width="0.0806%" height="15" fill="rgb(240,170,46)" fg:x="919" fg:w="1"/><text x="74.3032%" y="767.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="74.0532%" y="741" width="0.0806%" height="15" fill="rgb(207,104,33)" fg:x="919" fg:w="1"/><text x="74.3032%" y="751.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="74.0532%" y="725" width="0.0806%" height="15" fill="rgb(219,21,39)" fg:x="919" fg:w="1"/><text x="74.3032%" y="735.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0532%" y="709" width="0.0806%" height="15" fill="rgb(214,133,29)" fg:x="919" fg:w="1"/><text x="74.3032%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.0532%" y="693" width="0.0806%" height="15" fill="rgb(226,93,6)" fg:x="919" fg:w="1"/><text x="74.3032%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.0532%" y="677" width="0.0806%" height="15" fill="rgb(252,222,34)" fg:x="919" fg:w="1"/><text x="74.3032%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0532%" y="661" width="0.0806%" height="15" fill="rgb(252,92,48)" fg:x="919" fg:w="1"/><text x="74.3032%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.0532%" y="645" width="0.0806%" height="15" fill="rgb(245,223,24)" fg:x="919" fg:w="1"/><text x="74.3032%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.0532%" y="629" width="0.0806%" height="15" fill="rgb(205,176,3)" fg:x="919" fg:w="1"/><text x="74.3032%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.0532%" y="613" width="0.0806%" height="15" fill="rgb(235,151,15)" fg:x="919" fg:w="1"/><text x="74.3032%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="74.0532%" y="597" width="0.0806%" height="15" fill="rgb(237,209,11)" fg:x="919" fg:w="1"/><text x="74.3032%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="74.1338%" y="741" width="0.0806%" height="15" fill="rgb(243,227,24)" fg:x="920" fg:w="1"/><text x="74.3838%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.1338%" y="725" width="0.0806%" height="15" fill="rgb(239,193,16)" fg:x="920" fg:w="1"/><text x="74.3838%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.1338%" y="709" width="0.0806%" height="15" fill="rgb(231,27,9)" fg:x="920" fg:w="1"/><text x="74.3838%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="74.1338%" y="693" width="0.0806%" height="15" fill="rgb(219,169,10)" fg:x="920" fg:w="1"/><text x="74.3838%" y="703.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="74.1338%" y="677" width="0.0806%" height="15" fill="rgb(244,229,43)" fg:x="920" fg:w="1"/><text x="74.3838%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="74.1338%" y="661" width="0.0806%" height="15" fill="rgb(254,38,20)" fg:x="920" fg:w="1"/><text x="74.3838%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1338%" y="645" width="0.0806%" height="15" fill="rgb(250,47,30)" fg:x="920" fg:w="1"/><text x="74.3838%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1338%" y="629" width="0.0806%" height="15" fill="rgb(224,124,36)" fg:x="920" fg:w="1"/><text x="74.3838%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1338%" y="613" width="0.0806%" height="15" fill="rgb(246,68,51)" fg:x="920" fg:w="1"/><text x="74.3838%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1338%" y="597" width="0.0806%" height="15" fill="rgb(253,43,49)" fg:x="920" fg:w="1"/><text x="74.3838%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.1338%" y="581" width="0.0806%" height="15" fill="rgb(219,54,36)" fg:x="920" fg:w="1"/><text x="74.3838%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.1338%" y="565" width="0.0806%" height="15" fill="rgb(227,133,34)" fg:x="920" fg:w="1"/><text x="74.3838%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.1338%" y="549" width="0.0806%" height="15" fill="rgb(247,227,15)" fg:x="920" fg:w="1"/><text x="74.3838%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.1338%" y="533" width="0.0806%" height="15" fill="rgb(229,96,14)" fg:x="920" fg:w="1"/><text x="74.3838%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.1338%" y="517" width="0.0806%" height="15" fill="rgb(220,79,17)" fg:x="920" fg:w="1"/><text x="74.3838%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.1338%" y="501" width="0.0806%" height="15" fill="rgb(205,131,53)" fg:x="920" fg:w="1"/><text x="74.3838%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.1338%" y="485" width="0.0806%" height="15" fill="rgb(209,50,29)" fg:x="920" fg:w="1"/><text x="74.3838%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.1338%" y="469" width="0.0806%" height="15" fill="rgb(245,86,46)" fg:x="920" fg:w="1"/><text x="74.3838%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.1338%" y="453" width="0.0806%" height="15" fill="rgb(235,66,46)" fg:x="920" fg:w="1"/><text x="74.3838%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.1338%" y="437" width="0.0806%" height="15" fill="rgb(232,148,31)" fg:x="920" fg:w="1"/><text x="74.3838%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.1338%" y="421" width="0.0806%" height="15" fill="rgb(217,149,8)" fg:x="920" fg:w="1"/><text x="74.3838%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1338%" y="405" width="0.0806%" height="15" fill="rgb(209,183,11)" fg:x="920" fg:w="1"/><text x="74.3838%" y="415.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (16 samples, 1.29%)</title><rect x="73.0056%" y="773" width="1.2893%" height="15" fill="rgb(208,55,20)" fg:x="906" fg:w="16"/><text x="73.2556%" y="783.50"></text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="74.1338%" y="757" width="0.1612%" height="15" fill="rgb(218,39,14)" fg:x="920" fg:w="2"/><text x="74.3838%" y="767.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="74.2143%" y="741" width="0.0806%" height="15" fill="rgb(216,169,33)" fg:x="921" fg:w="1"/><text x="74.4643%" y="751.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="74.2143%" y="725" width="0.0806%" height="15" fill="rgb(233,80,24)" fg:x="921" fg:w="1"/><text x="74.4643%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2143%" y="709" width="0.0806%" height="15" fill="rgb(213,179,31)" fg:x="921" fg:w="1"/><text x="74.4643%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2143%" y="693" width="0.0806%" height="15" fill="rgb(209,19,5)" fg:x="921" fg:w="1"/><text x="74.4643%" y="703.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (36 samples, 2.90%)</title><rect x="71.4746%" y="789" width="2.9009%" height="15" fill="rgb(219,18,35)" fg:x="887" fg:w="36"/><text x="71.7246%" y="799.50">&lt;t..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="74.2949%" y="773" width="0.0806%" height="15" fill="rgb(209,169,16)" fg:x="922" fg:w="1"/><text x="74.5449%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="74.2949%" y="757" width="0.0806%" height="15" fill="rgb(245,90,51)" fg:x="922" fg:w="1"/><text x="74.5449%" y="767.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="74.2949%" y="741" width="0.0806%" height="15" fill="rgb(220,99,45)" fg:x="922" fg:w="1"/><text x="74.5449%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="74.2949%" y="725" width="0.0806%" height="15" fill="rgb(249,89,25)" fg:x="922" fg:w="1"/><text x="74.5449%" y="735.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="74.2949%" y="709" width="0.0806%" height="15" fill="rgb(239,193,0)" fg:x="922" fg:w="1"/><text x="74.5449%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2949%" y="693" width="0.0806%" height="15" fill="rgb(231,126,1)" fg:x="922" fg:w="1"/><text x="74.5449%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2949%" y="677" width="0.0806%" height="15" fill="rgb(243,166,3)" fg:x="922" fg:w="1"/><text x="74.5449%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.2949%" y="661" width="0.0806%" height="15" fill="rgb(223,22,34)" fg:x="922" fg:w="1"/><text x="74.5449%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="74.3755%" y="789" width="0.0806%" height="15" fill="rgb(251,52,51)" fg:x="923" fg:w="1"/><text x="74.6255%" y="799.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="74.3755%" y="773" width="0.0806%" height="15" fill="rgb(221,165,28)" fg:x="923" fg:w="1"/><text x="74.6255%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="74.3755%" y="757" width="0.0806%" height="15" fill="rgb(218,121,47)" fg:x="923" fg:w="1"/><text x="74.6255%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.3755%" y="741" width="0.0806%" height="15" fill="rgb(209,120,9)" fg:x="923" fg:w="1"/><text x="74.6255%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="74.4561%" y="789" width="0.0806%" height="15" fill="rgb(236,68,12)" fg:x="924" fg:w="1"/><text x="74.7061%" y="799.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.4561%" y="773" width="0.0806%" height="15" fill="rgb(225,194,26)" fg:x="924" fg:w="1"/><text x="74.7061%" y="783.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.5367%" y="757" width="0.0806%" height="15" fill="rgb(231,84,39)" fg:x="925" fg:w="1"/><text x="74.7867%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="74.5367%" y="741" width="0.0806%" height="15" fill="rgb(210,11,45)" fg:x="925" fg:w="1"/><text x="74.7867%" y="751.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="74.5367%" y="725" width="0.0806%" height="15" fill="rgb(224,54,52)" fg:x="925" fg:w="1"/><text x="74.7867%" y="735.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="74.6172%" y="725" width="0.0806%" height="15" fill="rgb(238,102,14)" fg:x="926" fg:w="1"/><text x="74.8672%" y="735.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="74.6172%" y="709" width="0.0806%" height="15" fill="rgb(243,160,52)" fg:x="926" fg:w="1"/><text x="74.8672%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.6172%" y="693" width="0.0806%" height="15" fill="rgb(216,114,19)" fg:x="926" fg:w="1"/><text x="74.8672%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.6172%" y="677" width="0.0806%" height="15" fill="rgb(244,166,37)" fg:x="926" fg:w="1"/><text x="74.8672%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.6172%" y="661" width="0.0806%" height="15" fill="rgb(246,29,44)" fg:x="926" fg:w="1"/><text x="74.8672%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.6172%" y="645" width="0.0806%" height="15" fill="rgb(215,56,53)" fg:x="926" fg:w="1"/><text x="74.8672%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.6172%" y="629" width="0.0806%" height="15" fill="rgb(217,60,2)" fg:x="926" fg:w="1"/><text x="74.8672%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6172%" y="613" width="0.0806%" height="15" fill="rgb(207,26,24)" fg:x="926" fg:w="1"/><text x="74.8672%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.6978%" y="709" width="0.0806%" height="15" fill="rgb(252,210,15)" fg:x="927" fg:w="1"/><text x="74.9478%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.7784%" y="677" width="0.0806%" height="15" fill="rgb(253,209,26)" fg:x="928" fg:w="1"/><text x="75.0284%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7784%" y="661" width="0.0806%" height="15" fill="rgb(238,170,14)" fg:x="928" fg:w="1"/><text x="75.0284%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.7784%" y="645" width="0.0806%" height="15" fill="rgb(216,178,15)" fg:x="928" fg:w="1"/><text x="75.0284%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.7784%" y="629" width="0.0806%" height="15" fill="rgb(250,197,2)" fg:x="928" fg:w="1"/><text x="75.0284%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.7784%" y="613" width="0.0806%" height="15" fill="rgb(212,70,42)" fg:x="928" fg:w="1"/><text x="75.0284%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.7784%" y="597" width="0.0806%" height="15" fill="rgb(227,213,9)" fg:x="928" fg:w="1"/><text x="75.0284%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.8590%" y="677" width="0.0806%" height="15" fill="rgb(245,99,25)" fg:x="929" fg:w="1"/><text x="75.1090%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.8590%" y="661" width="0.0806%" height="15" fill="rgb(250,82,29)" fg:x="929" fg:w="1"/><text x="75.1090%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.8590%" y="645" width="0.0806%" height="15" fill="rgb(241,226,54)" fg:x="929" fg:w="1"/><text x="75.1090%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.8590%" y="629" width="0.0806%" height="15" fill="rgb(221,99,41)" fg:x="929" fg:w="1"/><text x="75.1090%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="74.6978%" y="725" width="0.3223%" height="15" fill="rgb(213,90,21)" fg:x="927" fg:w="4"/><text x="74.9478%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="74.7784%" y="709" width="0.2417%" height="15" fill="rgb(205,208,24)" fg:x="928" fg:w="3"/><text x="75.0284%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="74.7784%" y="693" width="0.2417%" height="15" fill="rgb(246,31,12)" fg:x="928" fg:w="3"/><text x="75.0284%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.9396%" y="677" width="0.0806%" height="15" fill="rgb(213,154,6)" fg:x="930" fg:w="1"/><text x="75.1896%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.9396%" y="661" width="0.0806%" height="15" fill="rgb(222,163,29)" fg:x="930" fg:w="1"/><text x="75.1896%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.0201%" y="725" width="0.2417%" height="15" fill="rgb(227,201,8)" fg:x="931" fg:w="3"/><text x="75.2701%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="75.0201%" y="709" width="0.2417%" height="15" fill="rgb(233,9,32)" fg:x="931" fg:w="3"/><text x="75.2701%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.0201%" y="693" width="0.2417%" height="15" fill="rgb(217,54,24)" fg:x="931" fg:w="3"/><text x="75.2701%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.1813%" y="677" width="0.0806%" height="15" fill="rgb(235,192,0)" fg:x="933" fg:w="1"/><text x="75.4313%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.1813%" y="661" width="0.0806%" height="15" fill="rgb(235,45,9)" fg:x="933" fg:w="1"/><text x="75.4313%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="75.1813%" y="645" width="0.0806%" height="15" fill="rgb(246,42,40)" fg:x="933" fg:w="1"/><text x="75.4313%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.1813%" y="629" width="0.0806%" height="15" fill="rgb(248,111,24)" fg:x="933" fg:w="1"/><text x="75.4313%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.1813%" y="613" width="0.0806%" height="15" fill="rgb(249,65,22)" fg:x="933" fg:w="1"/><text x="75.4313%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.2619%" y="661" width="0.0806%" height="15" fill="rgb(238,111,51)" fg:x="934" fg:w="1"/><text x="75.5119%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.3425%" y="661" width="0.0806%" height="15" fill="rgb(250,118,22)" fg:x="935" fg:w="1"/><text x="75.5925%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.2619%" y="693" width="0.2417%" height="15" fill="rgb(234,84,26)" fg:x="934" fg:w="3"/><text x="75.5119%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="75.2619%" y="677" width="0.2417%" height="15" fill="rgb(243,172,12)" fg:x="934" fg:w="3"/><text x="75.5119%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4230%" y="661" width="0.0806%" height="15" fill="rgb(236,150,49)" fg:x="936" fg:w="1"/><text x="75.6730%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4230%" y="645" width="0.0806%" height="15" fill="rgb(225,197,26)" fg:x="936" fg:w="1"/><text x="75.6730%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4230%" y="629" width="0.0806%" height="15" fill="rgb(214,17,42)" fg:x="936" fg:w="1"/><text x="75.6730%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="75.4230%" y="613" width="0.0806%" height="15" fill="rgb(224,165,40)" fg:x="936" fg:w="1"/><text x="75.6730%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.4230%" y="597" width="0.0806%" height="15" fill="rgb(246,100,4)" fg:x="936" fg:w="1"/><text x="75.6730%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4230%" y="581" width="0.0806%" height="15" fill="rgb(222,103,0)" fg:x="936" fg:w="1"/><text x="75.6730%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="75.2619%" y="709" width="0.3223%" height="15" fill="rgb(227,189,26)" fg:x="934" fg:w="4"/><text x="75.5119%" y="719.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="75.5036%" y="693" width="0.0806%" height="15" fill="rgb(214,202,17)" fg:x="937" fg:w="1"/><text x="75.7536%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.5036%" y="677" width="0.0806%" height="15" fill="rgb(229,111,3)" fg:x="937" fg:w="1"/><text x="75.7536%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.5036%" y="661" width="0.0806%" height="15" fill="rgb(229,172,15)" fg:x="937" fg:w="1"/><text x="75.7536%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5842%" y="677" width="0.0806%" height="15" fill="rgb(230,224,35)" fg:x="938" fg:w="1"/><text x="75.8342%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.6648%" y="677" width="0.1612%" height="15" fill="rgb(251,141,6)" fg:x="939" fg:w="2"/><text x="75.9148%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7454%" y="661" width="0.0806%" height="15" fill="rgb(225,208,6)" fg:x="940" fg:w="1"/><text x="75.9954%" y="671.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="75.7454%" y="645" width="0.0806%" height="15" fill="rgb(246,181,16)" fg:x="940" fg:w="1"/><text x="75.9954%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9065%" y="629" width="0.0806%" height="15" fill="rgb(227,129,36)" fg:x="942" fg:w="1"/><text x="76.1565%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9065%" y="613" width="0.0806%" height="15" fill="rgb(248,117,24)" fg:x="942" fg:w="1"/><text x="76.1565%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9065%" y="597" width="0.0806%" height="15" fill="rgb(214,185,35)" fg:x="942" fg:w="1"/><text x="76.1565%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="75.9871%" y="613" width="0.0806%" height="15" fill="rgb(236,150,34)" fg:x="943" fg:w="1"/><text x="76.2371%" y="623.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="76.1483%" y="533" width="0.0806%" height="15" fill="rgb(243,228,27)" fg:x="945" fg:w="1"/><text x="76.3983%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.73%)</title><rect x="75.5842%" y="709" width="0.7252%" height="15" fill="rgb(245,77,44)" fg:x="938" fg:w="9"/><text x="75.8342%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.73%)</title><rect x="75.5842%" y="693" width="0.7252%" height="15" fill="rgb(235,214,42)" fg:x="938" fg:w="9"/><text x="75.8342%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="75.8259%" y="677" width="0.4835%" height="15" fill="rgb(221,74,3)" fg:x="941" fg:w="6"/><text x="76.0759%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="75.9065%" y="661" width="0.4029%" height="15" fill="rgb(206,121,29)" fg:x="942" fg:w="5"/><text x="76.1565%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="75.9065%" y="645" width="0.4029%" height="15" fill="rgb(249,131,53)" fg:x="942" fg:w="5"/><text x="76.1565%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="75.9871%" y="629" width="0.3223%" height="15" fill="rgb(236,170,29)" fg:x="943" fg:w="4"/><text x="76.2371%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="76.0677%" y="613" width="0.2417%" height="15" fill="rgb(247,96,15)" fg:x="944" fg:w="3"/><text x="76.3177%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="76.0677%" y="597" width="0.2417%" height="15" fill="rgb(211,210,7)" fg:x="944" fg:w="3"/><text x="76.3177%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="76.1483%" y="581" width="0.1612%" height="15" fill="rgb(240,88,50)" fg:x="945" fg:w="2"/><text x="76.3983%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.1483%" y="565" width="0.1612%" height="15" fill="rgb(209,229,26)" fg:x="945" fg:w="2"/><text x="76.3983%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="76.1483%" y="549" width="0.1612%" height="15" fill="rgb(210,68,23)" fg:x="945" fg:w="2"/><text x="76.3983%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2288%" y="533" width="0.0806%" height="15" fill="rgb(229,180,13)" fg:x="946" fg:w="1"/><text x="76.4788%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.2288%" y="517" width="0.0806%" height="15" fill="rgb(236,53,44)" fg:x="946" fg:w="1"/><text x="76.4788%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2288%" y="501" width="0.0806%" height="15" fill="rgb(244,214,29)" fg:x="946" fg:w="1"/><text x="76.4788%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2288%" y="485" width="0.0806%" height="15" fill="rgb(220,75,29)" fg:x="946" fg:w="1"/><text x="76.4788%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2288%" y="469" width="0.0806%" height="15" fill="rgb(214,183,37)" fg:x="946" fg:w="1"/><text x="76.4788%" y="479.50"></text></g><g><title>engine::session::Session::close (23 samples, 1.85%)</title><rect x="74.5367%" y="789" width="1.8533%" height="15" fill="rgb(239,117,29)" fg:x="925" fg:w="23"/><text x="74.7867%" y="799.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (23 samples, 1.85%)</title><rect x="74.5367%" y="773" width="1.8533%" height="15" fill="rgb(237,171,35)" fg:x="925" fg:w="23"/><text x="74.7867%" y="783.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (22 samples, 1.77%)</title><rect x="74.6172%" y="757" width="1.7728%" height="15" fill="rgb(229,178,53)" fg:x="926" fg:w="22"/><text x="74.8672%" y="767.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (22 samples, 1.77%)</title><rect x="74.6172%" y="741" width="1.7728%" height="15" fill="rgb(210,102,19)" fg:x="926" fg:w="22"/><text x="74.8672%" y="751.50">e..</text></g><g><title>kernel::model::any_entity_changes (14 samples, 1.13%)</title><rect x="75.2619%" y="725" width="1.1281%" height="15" fill="rgb(235,127,22)" fg:x="934" fg:w="14"/><text x="75.5119%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="76.3094%" y="709" width="0.0806%" height="15" fill="rgb(244,31,31)" fg:x="947" fg:w="1"/><text x="76.5594%" y="719.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="76.3094%" y="693" width="0.0806%" height="15" fill="rgb(231,43,21)" fg:x="947" fg:w="1"/><text x="76.5594%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.3094%" y="677" width="0.0806%" height="15" fill="rgb(217,131,35)" fg:x="947" fg:w="1"/><text x="76.5594%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.3094%" y="661" width="0.0806%" height="15" fill="rgb(221,149,4)" fg:x="947" fg:w="1"/><text x="76.5594%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.3094%" y="645" width="0.0806%" height="15" fill="rgb(232,170,28)" fg:x="947" fg:w="1"/><text x="76.5594%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.3094%" y="629" width="0.0806%" height="15" fill="rgb(238,56,10)" fg:x="947" fg:w="1"/><text x="76.5594%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.3900%" y="645" width="0.0806%" height="15" fill="rgb(235,196,14)" fg:x="948" fg:w="1"/><text x="76.6400%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3900%" y="629" width="0.0806%" height="15" fill="rgb(216,45,48)" fg:x="948" fg:w="1"/><text x="76.6400%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.3900%" y="613" width="0.0806%" height="15" fill="rgb(238,213,17)" fg:x="948" fg:w="1"/><text x="76.6400%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3900%" y="597" width="0.0806%" height="15" fill="rgb(212,13,2)" fg:x="948" fg:w="1"/><text x="76.6400%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5512%" y="549" width="0.0806%" height="15" fill="rgb(240,114,20)" fg:x="950" fg:w="1"/><text x="76.8012%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5512%" y="533" width="0.0806%" height="15" fill="rgb(228,41,40)" fg:x="950" fg:w="1"/><text x="76.8012%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.5512%" y="517" width="0.0806%" height="15" fill="rgb(244,132,35)" fg:x="950" fg:w="1"/><text x="76.8012%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.5512%" y="501" width="0.0806%" height="15" fill="rgb(253,189,4)" fg:x="950" fg:w="1"/><text x="76.8012%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.5512%" y="485" width="0.0806%" height="15" fill="rgb(224,37,19)" fg:x="950" fg:w="1"/><text x="76.8012%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.5512%" y="469" width="0.0806%" height="15" fill="rgb(235,223,18)" fg:x="950" fg:w="1"/><text x="76.8012%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.5512%" y="453" width="0.0806%" height="15" fill="rgb(235,163,25)" fg:x="950" fg:w="1"/><text x="76.8012%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.5512%" y="437" width="0.0806%" height="15" fill="rgb(217,145,28)" fg:x="950" fg:w="1"/><text x="76.8012%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.5512%" y="421" width="0.0806%" height="15" fill="rgb(223,223,32)" fg:x="950" fg:w="1"/><text x="76.8012%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.5512%" y="405" width="0.0806%" height="15" fill="rgb(227,189,39)" fg:x="950" fg:w="1"/><text x="76.8012%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.5512%" y="389" width="0.0806%" height="15" fill="rgb(248,10,22)" fg:x="950" fg:w="1"/><text x="76.8012%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5512%" y="373" width="0.0806%" height="15" fill="rgb(248,46,39)" fg:x="950" fg:w="1"/><text x="76.8012%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.5512%" y="581" width="0.1612%" height="15" fill="rgb(248,113,48)" fg:x="950" fg:w="2"/><text x="76.8012%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.5512%" y="565" width="0.1612%" height="15" fill="rgb(245,16,25)" fg:x="950" fg:w="2"/><text x="76.8012%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6317%" y="549" width="0.0806%" height="15" fill="rgb(249,152,16)" fg:x="951" fg:w="1"/><text x="76.8817%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="76.4706%" y="597" width="0.3223%" height="15" fill="rgb(250,16,1)" fg:x="949" fg:w="4"/><text x="76.7206%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7123%" y="581" width="0.0806%" height="15" fill="rgb(249,138,3)" fg:x="952" fg:w="1"/><text x="76.9623%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7123%" y="565" width="0.0806%" height="15" fill="rgb(227,71,41)" fg:x="952" fg:w="1"/><text x="76.9623%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.7123%" y="549" width="0.0806%" height="15" fill="rgb(209,184,23)" fg:x="952" fg:w="1"/><text x="76.9623%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.7123%" y="533" width="0.0806%" height="15" fill="rgb(223,215,31)" fg:x="952" fg:w="1"/><text x="76.9623%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.7123%" y="517" width="0.0806%" height="15" fill="rgb(210,146,28)" fg:x="952" fg:w="1"/><text x="76.9623%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7123%" y="501" width="0.0806%" height="15" fill="rgb(209,183,41)" fg:x="952" fg:w="1"/><text x="76.9623%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7123%" y="485" width="0.0806%" height="15" fill="rgb(209,224,45)" fg:x="952" fg:w="1"/><text x="76.9623%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.7123%" y="469" width="0.0806%" height="15" fill="rgb(224,209,51)" fg:x="952" fg:w="1"/><text x="76.9623%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.7123%" y="453" width="0.0806%" height="15" fill="rgb(223,17,39)" fg:x="952" fg:w="1"/><text x="76.9623%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.7123%" y="437" width="0.0806%" height="15" fill="rgb(234,204,37)" fg:x="952" fg:w="1"/><text x="76.9623%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.7123%" y="421" width="0.0806%" height="15" fill="rgb(236,120,5)" fg:x="952" fg:w="1"/><text x="76.9623%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7123%" y="405" width="0.0806%" height="15" fill="rgb(248,97,27)" fg:x="952" fg:w="1"/><text x="76.9623%" y="415.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (5 samples, 0.40%)</title><rect x="76.4706%" y="645" width="0.4029%" height="15" fill="rgb(240,66,17)" fg:x="949" fg:w="5"/><text x="76.7206%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (5 samples, 0.40%)</title><rect x="76.4706%" y="629" width="0.4029%" height="15" fill="rgb(210,79,3)" fg:x="949" fg:w="5"/><text x="76.7206%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="76.4706%" y="613" width="0.4029%" height="15" fill="rgb(214,176,27)" fg:x="949" fg:w="5"/><text x="76.7206%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7929%" y="597" width="0.0806%" height="15" fill="rgb(235,185,3)" fg:x="953" fg:w="1"/><text x="77.0429%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7929%" y="581" width="0.0806%" height="15" fill="rgb(227,24,12)" fg:x="953" fg:w="1"/><text x="77.0429%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.7929%" y="565" width="0.0806%" height="15" fill="rgb(252,169,48)" fg:x="953" fg:w="1"/><text x="77.0429%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.7929%" y="549" width="0.0806%" height="15" fill="rgb(212,65,1)" fg:x="953" fg:w="1"/><text x="77.0429%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.7929%" y="533" width="0.0806%" height="15" fill="rgb(242,39,24)" fg:x="953" fg:w="1"/><text x="77.0429%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7929%" y="517" width="0.0806%" height="15" fill="rgb(249,32,23)" fg:x="953" fg:w="1"/><text x="77.0429%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7929%" y="501" width="0.0806%" height="15" fill="rgb(251,195,23)" fg:x="953" fg:w="1"/><text x="77.0429%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.7929%" y="485" width="0.0806%" height="15" fill="rgb(236,174,8)" fg:x="953" fg:w="1"/><text x="77.0429%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.7929%" y="469" width="0.0806%" height="15" fill="rgb(220,197,8)" fg:x="953" fg:w="1"/><text x="77.0429%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.7929%" y="453" width="0.0806%" height="15" fill="rgb(240,108,37)" fg:x="953" fg:w="1"/><text x="77.0429%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.7929%" y="437" width="0.0806%" height="15" fill="rgb(232,176,24)" fg:x="953" fg:w="1"/><text x="77.0429%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7929%" y="421" width="0.0806%" height="15" fill="rgb(243,35,29)" fg:x="953" fg:w="1"/><text x="77.0429%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.9541%" y="533" width="0.0806%" height="15" fill="rgb(210,37,18)" fg:x="955" fg:w="1"/><text x="77.2041%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.9541%" y="517" width="0.0806%" height="15" fill="rgb(224,184,40)" fg:x="955" fg:w="1"/><text x="77.2041%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.9541%" y="501" width="0.0806%" height="15" fill="rgb(236,39,29)" fg:x="955" fg:w="1"/><text x="77.2041%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.9541%" y="485" width="0.0806%" height="15" fill="rgb(232,48,39)" fg:x="955" fg:w="1"/><text x="77.2041%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9541%" y="469" width="0.0806%" height="15" fill="rgb(236,34,42)" fg:x="955" fg:w="1"/><text x="77.2041%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.9541%" y="453" width="0.0806%" height="15" fill="rgb(243,106,37)" fg:x="955" fg:w="1"/><text x="77.2041%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9541%" y="437" width="0.0806%" height="15" fill="rgb(218,96,6)" fg:x="955" fg:w="1"/><text x="77.2041%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.9541%" y="421" width="0.0806%" height="15" fill="rgb(235,130,12)" fg:x="955" fg:w="1"/><text x="77.2041%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9541%" y="405" width="0.0806%" height="15" fill="rgb(231,95,0)" fg:x="955" fg:w="1"/><text x="77.2041%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.9541%" y="389" width="0.0806%" height="15" fill="rgb(228,12,23)" fg:x="955" fg:w="1"/><text x="77.2041%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9541%" y="373" width="0.0806%" height="15" fill="rgb(216,12,1)" fg:x="955" fg:w="1"/><text x="77.2041%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.9541%" y="357" width="0.0806%" height="15" fill="rgb(219,59,3)" fg:x="955" fg:w="1"/><text x="77.2041%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9541%" y="341" width="0.0806%" height="15" fill="rgb(215,208,46)" fg:x="955" fg:w="1"/><text x="77.2041%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.9541%" y="325" width="0.0806%" height="15" fill="rgb(254,224,29)" fg:x="955" fg:w="1"/><text x="77.2041%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.9541%" y="309" width="0.0806%" height="15" fill="rgb(232,14,29)" fg:x="955" fg:w="1"/><text x="77.2041%" y="319.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="77.0346%" y="517" width="0.0806%" height="15" fill="rgb(208,45,52)" fg:x="956" fg:w="1"/><text x="77.2846%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="77.0346%" y="501" width="0.0806%" height="15" fill="rgb(234,191,28)" fg:x="956" fg:w="1"/><text x="77.2846%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.0346%" y="485" width="0.0806%" height="15" fill="rgb(244,67,43)" fg:x="956" fg:w="1"/><text x="77.2846%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0346%" y="469" width="0.0806%" height="15" fill="rgb(236,189,24)" fg:x="956" fg:w="1"/><text x="77.2846%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.0346%" y="453" width="0.0806%" height="15" fill="rgb(239,214,33)" fg:x="956" fg:w="1"/><text x="77.2846%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0346%" y="437" width="0.0806%" height="15" fill="rgb(226,176,41)" fg:x="956" fg:w="1"/><text x="77.2846%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.0346%" y="421" width="0.0806%" height="15" fill="rgb(248,47,8)" fg:x="956" fg:w="1"/><text x="77.2846%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0346%" y="405" width="0.0806%" height="15" fill="rgb(218,81,44)" fg:x="956" fg:w="1"/><text x="77.2846%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.0346%" y="389" width="0.0806%" height="15" fill="rgb(213,98,6)" fg:x="956" fg:w="1"/><text x="77.2846%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.0346%" y="373" width="0.0806%" height="15" fill="rgb(222,85,22)" fg:x="956" fg:w="1"/><text x="77.2846%" y="383.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (4 samples, 0.32%)</title><rect x="76.8735%" y="645" width="0.3223%" height="15" fill="rgb(239,46,39)" fg:x="954" fg:w="4"/><text x="77.1235%" y="655.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="76.8735%" y="629" width="0.3223%" height="15" fill="rgb(237,12,29)" fg:x="954" fg:w="4"/><text x="77.1235%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="76.8735%" y="613" width="0.3223%" height="15" fill="rgb(214,77,8)" fg:x="954" fg:w="4"/><text x="77.1235%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="76.8735%" y="597" width="0.3223%" height="15" fill="rgb(217,168,37)" fg:x="954" fg:w="4"/><text x="77.1235%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="76.9541%" y="581" width="0.2417%" height="15" fill="rgb(221,217,23)" fg:x="955" fg:w="3"/><text x="77.2041%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="76.9541%" y="565" width="0.2417%" height="15" fill="rgb(243,229,36)" fg:x="955" fg:w="3"/><text x="77.2041%" y="575.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="76.9541%" y="549" width="0.2417%" height="15" fill="rgb(251,163,40)" fg:x="955" fg:w="3"/><text x="77.2041%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="77.0346%" y="533" width="0.1612%" height="15" fill="rgb(237,222,12)" fg:x="956" fg:w="2"/><text x="77.2846%" y="543.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="77.1152%" y="517" width="0.0806%" height="15" fill="rgb(248,132,6)" fg:x="957" fg:w="1"/><text x="77.3652%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.1152%" y="501" width="0.0806%" height="15" fill="rgb(227,167,50)" fg:x="957" fg:w="1"/><text x="77.3652%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.1152%" y="485" width="0.0806%" height="15" fill="rgb(242,84,37)" fg:x="957" fg:w="1"/><text x="77.3652%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.1152%" y="469" width="0.0806%" height="15" fill="rgb(212,4,50)" fg:x="957" fg:w="1"/><text x="77.3652%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.1152%" y="453" width="0.0806%" height="15" fill="rgb(230,228,32)" fg:x="957" fg:w="1"/><text x="77.3652%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.1152%" y="437" width="0.0806%" height="15" fill="rgb(248,217,23)" fg:x="957" fg:w="1"/><text x="77.3652%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.1152%" y="421" width="0.0806%" height="15" fill="rgb(238,197,32)" fg:x="957" fg:w="1"/><text x="77.3652%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.1152%" y="405" width="0.0806%" height="15" fill="rgb(236,106,1)" fg:x="957" fg:w="1"/><text x="77.3652%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.2764%" y="437" width="0.1612%" height="15" fill="rgb(219,228,13)" fg:x="959" fg:w="2"/><text x="77.5264%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.2764%" y="421" width="0.1612%" height="15" fill="rgb(238,30,35)" fg:x="959" fg:w="2"/><text x="77.5264%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.2764%" y="405" width="0.1612%" height="15" fill="rgb(236,70,23)" fg:x="959" fg:w="2"/><text x="77.5264%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.2764%" y="389" width="0.1612%" height="15" fill="rgb(249,104,48)" fg:x="959" fg:w="2"/><text x="77.5264%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="77.2764%" y="373" width="0.1612%" height="15" fill="rgb(254,117,50)" fg:x="959" fg:w="2"/><text x="77.5264%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="77.4376%" y="341" width="0.1612%" height="15" fill="rgb(223,152,4)" fg:x="961" fg:w="2"/><text x="77.6876%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.5181%" y="325" width="0.0806%" height="15" fill="rgb(245,6,2)" fg:x="962" fg:w="1"/><text x="77.7681%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.40%)</title><rect x="77.2764%" y="485" width="0.4029%" height="15" fill="rgb(249,150,24)" fg:x="959" fg:w="5"/><text x="77.5264%" y="495.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="77.2764%" y="469" width="0.4029%" height="15" fill="rgb(228,185,42)" fg:x="959" fg:w="5"/><text x="77.5264%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="77.2764%" y="453" width="0.4029%" height="15" fill="rgb(226,39,33)" fg:x="959" fg:w="5"/><text x="77.5264%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="77.4376%" y="437" width="0.2417%" height="15" fill="rgb(221,166,19)" fg:x="961" fg:w="3"/><text x="77.6876%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="77.4376%" y="421" width="0.2417%" height="15" fill="rgb(209,109,2)" fg:x="961" fg:w="3"/><text x="77.6876%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="77.4376%" y="405" width="0.2417%" height="15" fill="rgb(252,216,26)" fg:x="961" fg:w="3"/><text x="77.6876%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="77.4376%" y="389" width="0.2417%" height="15" fill="rgb(227,173,36)" fg:x="961" fg:w="3"/><text x="77.6876%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="77.4376%" y="373" width="0.2417%" height="15" fill="rgb(209,90,7)" fg:x="961" fg:w="3"/><text x="77.6876%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="77.4376%" y="357" width="0.2417%" height="15" fill="rgb(250,194,11)" fg:x="961" fg:w="3"/><text x="77.6876%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.5987%" y="341" width="0.0806%" height="15" fill="rgb(220,72,50)" fg:x="963" fg:w="1"/><text x="77.8487%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.6793%" y="485" width="0.0806%" height="15" fill="rgb(222,106,48)" fg:x="964" fg:w="1"/><text x="77.9293%" y="495.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.6793%" y="469" width="0.0806%" height="15" fill="rgb(216,220,45)" fg:x="964" fg:w="1"/><text x="77.9293%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.6793%" y="453" width="0.0806%" height="15" fill="rgb(234,112,18)" fg:x="964" fg:w="1"/><text x="77.9293%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.6793%" y="437" width="0.0806%" height="15" fill="rgb(206,179,9)" fg:x="964" fg:w="1"/><text x="77.9293%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6793%" y="421" width="0.0806%" height="15" fill="rgb(215,115,40)" fg:x="964" fg:w="1"/><text x="77.9293%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6793%" y="405" width="0.0806%" height="15" fill="rgb(222,69,34)" fg:x="964" fg:w="1"/><text x="77.9293%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.6793%" y="389" width="0.0806%" height="15" fill="rgb(209,161,10)" fg:x="964" fg:w="1"/><text x="77.9293%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.6793%" y="373" width="0.0806%" height="15" fill="rgb(217,6,38)" fg:x="964" fg:w="1"/><text x="77.9293%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.6793%" y="357" width="0.0806%" height="15" fill="rgb(229,229,48)" fg:x="964" fg:w="1"/><text x="77.9293%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.6793%" y="341" width="0.0806%" height="15" fill="rgb(225,21,28)" fg:x="964" fg:w="1"/><text x="77.9293%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.6793%" y="325" width="0.0806%" height="15" fill="rgb(206,33,13)" fg:x="964" fg:w="1"/><text x="77.9293%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.6793%" y="309" width="0.0806%" height="15" fill="rgb(242,178,17)" fg:x="964" fg:w="1"/><text x="77.9293%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.6793%" y="293" width="0.0806%" height="15" fill="rgb(220,162,5)" fg:x="964" fg:w="1"/><text x="77.9293%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.6793%" y="277" width="0.0806%" height="15" fill="rgb(210,33,43)" fg:x="964" fg:w="1"/><text x="77.9293%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.6793%" y="261" width="0.0806%" height="15" fill="rgb(216,116,54)" fg:x="964" fg:w="1"/><text x="77.9293%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6793%" y="245" width="0.0806%" height="15" fill="rgb(249,92,24)" fg:x="964" fg:w="1"/><text x="77.9293%" y="255.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="77.7599%" y="485" width="0.0806%" height="15" fill="rgb(231,189,14)" fg:x="965" fg:w="1"/><text x="78.0099%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.7599%" y="469" width="0.0806%" height="15" fill="rgb(230,8,41)" fg:x="965" fg:w="1"/><text x="78.0099%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.7599%" y="453" width="0.0806%" height="15" fill="rgb(249,7,27)" fg:x="965" fg:w="1"/><text x="78.0099%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="77.7599%" y="437" width="0.0806%" height="15" fill="rgb(232,86,5)" fg:x="965" fg:w="1"/><text x="78.0099%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="77.9210%" y="325" width="0.0806%" height="15" fill="rgb(224,175,18)" fg:x="967" fg:w="1"/><text x="78.1710%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="77.9210%" y="309" width="0.0806%" height="15" fill="rgb(220,129,12)" fg:x="967" fg:w="1"/><text x="78.1710%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="77.9210%" y="405" width="0.1612%" height="15" fill="rgb(210,19,36)" fg:x="967" fg:w="2"/><text x="78.1710%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="77.9210%" y="389" width="0.1612%" height="15" fill="rgb(219,96,14)" fg:x="967" fg:w="2"/><text x="78.1710%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="77.9210%" y="373" width="0.1612%" height="15" fill="rgb(249,106,1)" fg:x="967" fg:w="2"/><text x="78.1710%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="77.9210%" y="357" width="0.1612%" height="15" fill="rgb(249,155,20)" fg:x="967" fg:w="2"/><text x="78.1710%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="77.9210%" y="341" width="0.1612%" height="15" fill="rgb(244,168,9)" fg:x="967" fg:w="2"/><text x="78.1710%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="78.0016%" y="325" width="0.0806%" height="15" fill="rgb(216,23,50)" fg:x="968" fg:w="1"/><text x="78.2516%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.0016%" y="309" width="0.0806%" height="15" fill="rgb(224,219,20)" fg:x="968" fg:w="1"/><text x="78.2516%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.0016%" y="293" width="0.0806%" height="15" fill="rgb(222,156,15)" fg:x="968" fg:w="1"/><text x="78.2516%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.0016%" y="277" width="0.0806%" height="15" fill="rgb(231,97,17)" fg:x="968" fg:w="1"/><text x="78.2516%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="78.0822%" y="373" width="0.0806%" height="15" fill="rgb(218,70,48)" fg:x="969" fg:w="1"/><text x="78.3322%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.0822%" y="357" width="0.0806%" height="15" fill="rgb(212,196,52)" fg:x="969" fg:w="1"/><text x="78.3322%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="78.0822%" y="405" width="0.2417%" height="15" fill="rgb(243,203,18)" fg:x="969" fg:w="3"/><text x="78.3322%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="78.0822%" y="389" width="0.2417%" height="15" fill="rgb(252,125,41)" fg:x="969" fg:w="3"/><text x="78.3322%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="78.1628%" y="373" width="0.1612%" height="15" fill="rgb(223,180,33)" fg:x="970" fg:w="2"/><text x="78.4128%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="78.1628%" y="357" width="0.1612%" height="15" fill="rgb(254,159,46)" fg:x="970" fg:w="2"/><text x="78.4128%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="78.3239%" y="357" width="0.0806%" height="15" fill="rgb(254,38,10)" fg:x="972" fg:w="1"/><text x="78.5739%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.3239%" y="341" width="0.0806%" height="15" fill="rgb(208,217,32)" fg:x="972" fg:w="1"/><text x="78.5739%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="78.3239%" y="325" width="0.0806%" height="15" fill="rgb(221,120,13)" fg:x="972" fg:w="1"/><text x="78.5739%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.3239%" y="309" width="0.0806%" height="15" fill="rgb(246,54,52)" fg:x="972" fg:w="1"/><text x="78.5739%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.4045%" y="325" width="0.0806%" height="15" fill="rgb(242,34,25)" fg:x="973" fg:w="1"/><text x="78.6545%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="78.4045%" y="341" width="0.3223%" height="15" fill="rgb(247,209,9)" fg:x="973" fg:w="4"/><text x="78.6545%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="78.4851%" y="325" width="0.2417%" height="15" fill="rgb(228,71,26)" fg:x="974" fg:w="3"/><text x="78.7351%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="78.7268%" y="341" width="0.4029%" height="15" fill="rgb(222,145,49)" fg:x="977" fg:w="5"/><text x="78.9768%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="78.7268%" y="325" width="0.4029%" height="15" fill="rgb(218,121,17)" fg:x="977" fg:w="5"/><text x="78.9768%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="79.2909%" y="277" width="0.1612%" height="15" fill="rgb(244,50,7)" fg:x="984" fg:w="2"/><text x="79.5409%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="79.4521%" y="277" width="0.0806%" height="15" fill="rgb(246,229,37)" fg:x="986" fg:w="1"/><text x="79.7021%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="79.5326%" y="277" width="0.0806%" height="15" fill="rgb(225,18,5)" fg:x="987" fg:w="1"/><text x="79.7826%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="79.5326%" y="261" width="0.0806%" height="15" fill="rgb(213,204,8)" fg:x="987" fg:w="1"/><text x="79.7826%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="79.5326%" y="245" width="0.0806%" height="15" fill="rgb(238,103,6)" fg:x="987" fg:w="1"/><text x="79.7826%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5326%" y="229" width="0.0806%" height="15" fill="rgb(222,25,35)" fg:x="987" fg:w="1"/><text x="79.7826%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (27 samples, 2.18%)</title><rect x="79.6132%" y="277" width="2.1757%" height="15" fill="rgb(213,203,35)" fg:x="988" fg:w="27"/><text x="79.8632%" y="287.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (27 samples, 2.18%)</title><rect x="79.6132%" y="261" width="2.1757%" height="15" fill="rgb(221,79,53)" fg:x="988" fg:w="27"/><text x="79.8632%" y="271.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (27 samples, 2.18%)</title><rect x="79.6132%" y="245" width="2.1757%" height="15" fill="rgb(243,200,35)" fg:x="988" fg:w="27"/><text x="79.8632%" y="255.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="81.7889%" y="277" width="0.1612%" height="15" fill="rgb(248,60,25)" fg:x="1015" fg:w="2"/><text x="82.0389%" y="287.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="81.9500%" y="277" width="0.0806%" height="15" fill="rgb(227,53,46)" fg:x="1017" fg:w="1"/><text x="82.2000%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 2.98%)</title><rect x="79.1297%" y="325" width="2.9815%" height="15" fill="rgb(216,120,32)" fg:x="982" fg:w="37"/><text x="79.3797%" y="335.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (37 samples, 2.98%)</title><rect x="79.1297%" y="309" width="2.9815%" height="15" fill="rgb(220,134,1)" fg:x="982" fg:w="37"/><text x="79.3797%" y="319.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (37 samples, 2.98%)</title><rect x="79.1297%" y="293" width="2.9815%" height="15" fill="rgb(237,168,5)" fg:x="982" fg:w="37"/><text x="79.3797%" y="303.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="82.0306%" y="277" width="0.0806%" height="15" fill="rgb(231,100,33)" fg:x="1018" fg:w="1"/><text x="82.2806%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.0306%" y="261" width="0.0806%" height="15" fill="rgb(236,177,47)" fg:x="1018" fg:w="1"/><text x="82.2806%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.0306%" y="245" width="0.0806%" height="15" fill="rgb(235,7,49)" fg:x="1018" fg:w="1"/><text x="82.2806%" y="255.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="82.1918%" y="309" width="0.0806%" height="15" fill="rgb(232,119,22)" fg:x="1020" fg:w="1"/><text x="82.4418%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.2724%" y="309" width="0.0806%" height="15" fill="rgb(254,73,53)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="82.3529%" y="309" width="0.0806%" height="15" fill="rgb(251,35,20)" fg:x="1022" fg:w="1"/><text x="82.6029%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="82.4335%" y="309" width="0.4835%" height="15" fill="rgb(241,119,20)" fg:x="1023" fg:w="6"/><text x="82.6835%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9976%" y="277" width="0.0806%" height="15" fill="rgb(207,102,14)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (59 samples, 4.75%)</title><rect x="78.4045%" y="357" width="4.7542%" height="15" fill="rgb(248,201,50)" fg:x="973" fg:w="59"/><text x="78.6545%" y="367.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (50 samples, 4.03%)</title><rect x="79.1297%" y="341" width="4.0290%" height="15" fill="rgb(222,185,44)" fg:x="982" fg:w="50"/><text x="79.3797%" y="351.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.05%)</title><rect x="82.1112%" y="325" width="1.0475%" height="15" fill="rgb(218,107,18)" fg:x="1019" fg:w="13"/><text x="82.3612%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (3 samples, 0.24%)</title><rect x="82.9170%" y="309" width="0.2417%" height="15" fill="rgb(237,177,39)" fg:x="1029" fg:w="3"/><text x="83.1670%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (3 samples, 0.24%)</title><rect x="82.9170%" y="293" width="0.2417%" height="15" fill="rgb(246,69,6)" fg:x="1029" fg:w="3"/><text x="83.1670%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.0782%" y="277" width="0.0806%" height="15" fill="rgb(234,208,37)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.0782%" y="261" width="0.0806%" height="15" fill="rgb(225,4,6)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.0782%" y="245" width="0.0806%" height="15" fill="rgb(233,45,0)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="83.2393%" y="309" width="0.0806%" height="15" fill="rgb(226,136,5)" fg:x="1033" fg:w="1"/><text x="83.4893%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="83.2393%" y="293" width="0.0806%" height="15" fill="rgb(211,91,47)" fg:x="1033" fg:w="1"/><text x="83.4893%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (63 samples, 5.08%)</title><rect x="78.3239%" y="405" width="5.0766%" height="15" fill="rgb(242,88,51)" fg:x="972" fg:w="63"/><text x="78.5739%" y="415.50">regex:..</text></g><g><title>regex::builders::Builder::build_one_string (63 samples, 5.08%)</title><rect x="78.3239%" y="389" width="5.0766%" height="15" fill="rgb(230,91,28)" fg:x="972" fg:w="63"/><text x="78.5739%" y="399.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (63 samples, 5.08%)</title><rect x="78.3239%" y="373" width="5.0766%" height="15" fill="rgb(254,186,29)" fg:x="972" fg:w="63"/><text x="78.5739%" y="383.50">regex_..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="83.1587%" y="357" width="0.2417%" height="15" fill="rgb(238,6,4)" fg:x="1032" fg:w="3"/><text x="83.4087%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="83.1587%" y="341" width="0.2417%" height="15" fill="rgb(221,151,16)" fg:x="1032" fg:w="3"/><text x="83.4087%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="83.1587%" y="325" width="0.2417%" height="15" fill="rgb(251,143,52)" fg:x="1032" fg:w="3"/><text x="83.4087%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="83.3199%" y="309" width="0.0806%" height="15" fill="rgb(206,90,15)" fg:x="1034" fg:w="1"/><text x="83.5699%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.3199%" y="293" width="0.0806%" height="15" fill="rgb(218,35,8)" fg:x="1034" fg:w="1"/><text x="83.5699%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.3199%" y="277" width="0.0806%" height="15" fill="rgb(239,215,6)" fg:x="1034" fg:w="1"/><text x="83.5699%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.3199%" y="261" width="0.0806%" height="15" fill="rgb(245,116,39)" fg:x="1034" fg:w="1"/><text x="83.5699%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.6422%" y="341" width="0.0806%" height="15" fill="rgb(242,65,28)" fg:x="1038" fg:w="1"/><text x="83.8922%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.6422%" y="325" width="0.0806%" height="15" fill="rgb(252,132,53)" fg:x="1038" fg:w="1"/><text x="83.8922%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="83.6422%" y="309" width="0.0806%" height="15" fill="rgb(224,159,50)" fg:x="1038" fg:w="1"/><text x="83.8922%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.9645%" y="325" width="0.0806%" height="15" fill="rgb(224,93,4)" fg:x="1042" fg:w="1"/><text x="84.2145%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="83.7228%" y="341" width="0.4029%" height="15" fill="rgb(208,81,34)" fg:x="1039" fg:w="5"/><text x="83.9728%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="84.0451%" y="325" width="0.0806%" height="15" fill="rgb(233,92,54)" fg:x="1043" fg:w="1"/><text x="84.2951%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.0451%" y="309" width="0.0806%" height="15" fill="rgb(237,21,14)" fg:x="1043" fg:w="1"/><text x="84.2951%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.0451%" y="293" width="0.0806%" height="15" fill="rgb(249,128,51)" fg:x="1043" fg:w="1"/><text x="84.2951%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.0451%" y="277" width="0.0806%" height="15" fill="rgb(223,129,24)" fg:x="1043" fg:w="1"/><text x="84.2951%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="83.6422%" y="357" width="0.6446%" height="15" fill="rgb(231,168,25)" fg:x="1038" fg:w="8"/><text x="83.8922%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="84.1257%" y="341" width="0.1612%" height="15" fill="rgb(224,39,20)" fg:x="1044" fg:w="2"/><text x="84.3757%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="84.1257%" y="325" width="0.1612%" height="15" fill="rgb(225,152,53)" fg:x="1044" fg:w="2"/><text x="84.3757%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.2063%" y="309" width="0.0806%" height="15" fill="rgb(252,17,24)" fg:x="1045" fg:w="1"/><text x="84.4563%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.2063%" y="293" width="0.0806%" height="15" fill="rgb(250,114,30)" fg:x="1045" fg:w="1"/><text x="84.4563%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (81 samples, 6.53%)</title><rect x="77.8405%" y="421" width="6.5270%" height="15" fill="rgb(229,5,4)" fg:x="966" fg:w="81"/><text x="78.0905%" y="431.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.97%)</title><rect x="83.4005%" y="405" width="0.9670%" height="15" fill="rgb(225,176,49)" fg:x="1035" fg:w="12"/><text x="83.6505%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.97%)</title><rect x="83.4005%" y="389" width="0.9670%" height="15" fill="rgb(224,221,49)" fg:x="1035" fg:w="12"/><text x="83.6505%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.89%)</title><rect x="83.4811%" y="373" width="0.8864%" height="15" fill="rgb(253,169,27)" fg:x="1036" fg:w="11"/><text x="83.7311%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="84.2869%" y="357" width="0.0806%" height="15" fill="rgb(211,206,16)" fg:x="1046" fg:w="1"/><text x="84.5369%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="84.2869%" y="341" width="0.0806%" height="15" fill="rgb(244,87,35)" fg:x="1046" fg:w="1"/><text x="84.5369%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.3674%" y="357" width="0.0806%" height="15" fill="rgb(246,28,10)" fg:x="1047" fg:w="1"/><text x="84.6174%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.3674%" y="341" width="0.0806%" height="15" fill="rgb(229,12,44)" fg:x="1047" fg:w="1"/><text x="84.6174%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.3674%" y="325" width="0.0806%" height="15" fill="rgb(210,145,37)" fg:x="1047" fg:w="1"/><text x="84.6174%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="84.4480%" y="357" width="0.0806%" height="15" fill="rgb(227,112,52)" fg:x="1048" fg:w="1"/><text x="84.6980%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="84.4480%" y="341" width="0.0806%" height="15" fill="rgb(238,155,34)" fg:x="1048" fg:w="1"/><text x="84.6980%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.4480%" y="325" width="0.0806%" height="15" fill="rgb(239,226,36)" fg:x="1048" fg:w="1"/><text x="84.6980%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="84.3674%" y="373" width="0.2417%" height="15" fill="rgb(230,16,23)" fg:x="1047" fg:w="3"/><text x="84.6174%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="84.5286%" y="357" width="0.0806%" height="15" fill="rgb(236,171,36)" fg:x="1049" fg:w="1"/><text x="84.7786%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.5286%" y="341" width="0.0806%" height="15" fill="rgb(221,22,14)" fg:x="1049" fg:w="1"/><text x="84.7786%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.5286%" y="325" width="0.0806%" height="15" fill="rgb(242,43,11)" fg:x="1049" fg:w="1"/><text x="84.7786%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.5286%" y="309" width="0.0806%" height="15" fill="rgb(232,69,23)" fg:x="1049" fg:w="1"/><text x="84.7786%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="84.3674%" y="405" width="0.3223%" height="15" fill="rgb(216,180,54)" fg:x="1047" fg:w="4"/><text x="84.6174%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="84.3674%" y="389" width="0.3223%" height="15" fill="rgb(216,5,24)" fg:x="1047" fg:w="4"/><text x="84.6174%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="84.6092%" y="373" width="0.0806%" height="15" fill="rgb(225,89,9)" fg:x="1050" fg:w="1"/><text x="84.8592%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="84.6092%" y="357" width="0.0806%" height="15" fill="rgb(243,75,33)" fg:x="1050" fg:w="1"/><text x="84.8592%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.6092%" y="341" width="0.0806%" height="15" fill="rgb(247,141,45)" fg:x="1050" fg:w="1"/><text x="84.8592%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="85.1732%" y="309" width="0.1612%" height="15" fill="rgb(232,177,36)" fg:x="1057" fg:w="2"/><text x="85.4232%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.1732%" y="293" width="0.1612%" height="15" fill="rgb(219,125,36)" fg:x="1057" fg:w="2"/><text x="85.4232%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="85.1732%" y="277" width="0.1612%" height="15" fill="rgb(227,94,9)" fg:x="1057" fg:w="2"/><text x="85.4232%" y="287.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.73%)</title><rect x="84.6898%" y="405" width="0.7252%" height="15" fill="rgb(240,34,52)" fg:x="1051" fg:w="9"/><text x="84.9398%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.73%)</title><rect x="84.6898%" y="389" width="0.7252%" height="15" fill="rgb(216,45,12)" fg:x="1051" fg:w="9"/><text x="84.9398%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.73%)</title><rect x="84.6898%" y="373" width="0.7252%" height="15" fill="rgb(246,21,19)" fg:x="1051" fg:w="9"/><text x="84.9398%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.73%)</title><rect x="84.6898%" y="357" width="0.7252%" height="15" fill="rgb(213,98,42)" fg:x="1051" fg:w="9"/><text x="84.9398%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="84.6898%" y="341" width="0.7252%" height="15" fill="rgb(250,136,47)" fg:x="1051" fg:w="9"/><text x="84.9398%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.73%)</title><rect x="84.6898%" y="325" width="0.7252%" height="15" fill="rgb(251,124,27)" fg:x="1051" fg:w="9"/><text x="84.9398%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="85.3344%" y="309" width="0.0806%" height="15" fill="rgb(229,180,14)" fg:x="1059" fg:w="1"/><text x="85.5844%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.4150%" y="357" width="0.0806%" height="15" fill="rgb(245,216,25)" fg:x="1060" fg:w="1"/><text x="85.6650%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.4956%" y="293" width="0.0806%" height="15" fill="rgb(251,43,5)" fg:x="1061" fg:w="1"/><text x="85.7456%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.4956%" y="277" width="0.0806%" height="15" fill="rgb(250,128,24)" fg:x="1061" fg:w="1"/><text x="85.7456%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="85.4956%" y="357" width="0.1612%" height="15" fill="rgb(217,117,27)" fg:x="1061" fg:w="2"/><text x="85.7456%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="85.4956%" y="341" width="0.1612%" height="15" fill="rgb(245,147,4)" fg:x="1061" fg:w="2"/><text x="85.7456%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="85.4956%" y="325" width="0.1612%" height="15" fill="rgb(242,201,35)" fg:x="1061" fg:w="2"/><text x="85.7456%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="85.4956%" y="309" width="0.1612%" height="15" fill="rgb(218,181,1)" fg:x="1061" fg:w="2"/><text x="85.7456%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.5761%" y="293" width="0.0806%" height="15" fill="rgb(222,6,29)" fg:x="1062" fg:w="1"/><text x="85.8261%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.6567%" y="341" width="0.0806%" height="15" fill="rgb(208,186,3)" fg:x="1063" fg:w="1"/><text x="85.9067%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.7373%" y="325" width="0.0806%" height="15" fill="rgb(216,36,26)" fg:x="1064" fg:w="1"/><text x="85.9873%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.81%)</title><rect x="85.7373%" y="341" width="0.8058%" height="15" fill="rgb(248,201,23)" fg:x="1064" fg:w="10"/><text x="85.9873%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.73%)</title><rect x="85.8179%" y="325" width="0.7252%" height="15" fill="rgb(251,170,31)" fg:x="1065" fg:w="9"/><text x="86.0679%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.4625%" y="309" width="0.0806%" height="15" fill="rgb(207,110,25)" fg:x="1073" fg:w="1"/><text x="86.7125%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="86.5431%" y="341" width="0.4835%" height="15" fill="rgb(250,54,15)" fg:x="1074" fg:w="6"/><text x="86.7931%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="86.5431%" y="325" width="0.4835%" height="15" fill="rgb(227,68,33)" fg:x="1074" fg:w="6"/><text x="86.7931%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="86.9460%" y="309" width="0.0806%" height="15" fill="rgb(238,34,41)" fg:x="1079" fg:w="1"/><text x="87.1960%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.9460%" y="293" width="0.0806%" height="15" fill="rgb(220,11,15)" fg:x="1079" fg:w="1"/><text x="87.1960%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="87.0266%" y="325" width="0.0806%" height="15" fill="rgb(246,111,35)" fg:x="1080" fg:w="1"/><text x="87.2766%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="87.0266%" y="309" width="0.0806%" height="15" fill="rgb(209,88,53)" fg:x="1080" fg:w="1"/><text x="87.2766%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.0266%" y="293" width="0.0806%" height="15" fill="rgb(231,185,47)" fg:x="1080" fg:w="1"/><text x="87.2766%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="87.1878%" y="309" width="0.0806%" height="15" fill="rgb(233,154,1)" fg:x="1082" fg:w="1"/><text x="87.4378%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.1878%" y="293" width="0.0806%" height="15" fill="rgb(225,15,46)" fg:x="1082" fg:w="1"/><text x="87.4378%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.1878%" y="277" width="0.0806%" height="15" fill="rgb(211,135,41)" fg:x="1082" fg:w="1"/><text x="87.4378%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.1878%" y="261" width="0.0806%" height="15" fill="rgb(208,54,0)" fg:x="1082" fg:w="1"/><text x="87.4378%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.48%)</title><rect x="87.2683%" y="309" width="0.4835%" height="15" fill="rgb(244,136,14)" fg:x="1083" fg:w="6"/><text x="87.5183%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="87.5907%" y="293" width="0.1612%" height="15" fill="rgb(241,56,14)" fg:x="1087" fg:w="2"/><text x="87.8407%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.6712%" y="277" width="0.0806%" height="15" fill="rgb(205,80,24)" fg:x="1088" fg:w="1"/><text x="87.9212%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.6712%" y="261" width="0.0806%" height="15" fill="rgb(220,57,4)" fg:x="1088" fg:w="1"/><text x="87.9212%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.6712%" y="245" width="0.0806%" height="15" fill="rgb(226,193,50)" fg:x="1088" fg:w="1"/><text x="87.9212%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (7 samples, 0.56%)</title><rect x="87.7518%" y="293" width="0.5641%" height="15" fill="rgb(231,168,22)" fg:x="1089" fg:w="7"/><text x="88.0018%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.48%)</title><rect x="87.8324%" y="277" width="0.4835%" height="15" fill="rgb(254,215,14)" fg:x="1090" fg:w="6"/><text x="88.0824%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (16 samples, 1.29%)</title><rect x="87.1072%" y="325" width="1.2893%" height="15" fill="rgb(211,115,16)" fg:x="1081" fg:w="16"/><text x="87.3572%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.64%)</title><rect x="87.7518%" y="309" width="0.6446%" height="15" fill="rgb(236,210,16)" fg:x="1089" fg:w="8"/><text x="88.0018%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="88.3159%" y="293" width="0.0806%" height="15" fill="rgb(221,94,12)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (18 samples, 1.45%)</title><rect x="87.0266%" y="341" width="1.4504%" height="15" fill="rgb(235,218,49)" fg:x="1080" fg:w="18"/><text x="87.2766%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="88.3965%" y="325" width="0.0806%" height="15" fill="rgb(217,114,14)" fg:x="1097" fg:w="1"/><text x="88.6465%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="88.3965%" y="309" width="0.0806%" height="15" fill="rgb(216,145,22)" fg:x="1097" fg:w="1"/><text x="88.6465%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="88.4770%" y="341" width="0.0806%" height="15" fill="rgb(217,112,39)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="351.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="89.6052%" y="229" width="0.2417%" height="15" fill="rgb(225,85,32)" fg:x="1112" fg:w="3"/><text x="89.8552%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="89.8469%" y="229" width="0.1612%" height="15" fill="rgb(245,209,47)" fg:x="1115" fg:w="2"/><text x="90.0969%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.0081%" y="229" width="0.0806%" height="15" fill="rgb(218,220,15)" fg:x="1117" fg:w="1"/><text x="90.2581%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.0886%" y="229" width="0.0806%" height="15" fill="rgb(222,202,31)" fg:x="1118" fg:w="1"/><text x="90.3386%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.0886%" y="213" width="0.0806%" height="15" fill="rgb(243,203,4)" fg:x="1118" fg:w="1"/><text x="90.3386%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.0886%" y="197" width="0.0806%" height="15" fill="rgb(237,92,17)" fg:x="1118" fg:w="1"/><text x="90.3386%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.0886%" y="181" width="0.0806%" height="15" fill="rgb(231,119,7)" fg:x="1118" fg:w="1"/><text x="90.3386%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.4110%" y="197" width="0.0806%" height="15" fill="rgb(237,82,41)" fg:x="1122" fg:w="1"/><text x="90.6610%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.6527%" y="165" width="0.0806%" height="15" fill="rgb(226,81,48)" fg:x="1125" fg:w="1"/><text x="90.9027%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="90.4915%" y="197" width="0.4029%" height="15" fill="rgb(234,70,51)" fg:x="1123" fg:w="5"/><text x="90.7415%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="90.6527%" y="181" width="0.2417%" height="15" fill="rgb(251,86,4)" fg:x="1125" fg:w="3"/><text x="90.9027%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="90.7333%" y="165" width="0.1612%" height="15" fill="rgb(244,144,28)" fg:x="1126" fg:w="2"/><text x="90.9833%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.1362%" y="181" width="0.0806%" height="15" fill="rgb(232,161,39)" fg:x="1131" fg:w="1"/><text x="91.3862%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (14 samples, 1.13%)</title><rect x="90.1692%" y="229" width="1.1281%" height="15" fill="rgb(247,34,51)" fg:x="1119" fg:w="14"/><text x="90.4192%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (13 samples, 1.05%)</title><rect x="90.2498%" y="213" width="1.0475%" height="15" fill="rgb(225,132,2)" fg:x="1120" fg:w="13"/><text x="90.4998%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="90.8944%" y="197" width="0.4029%" height="15" fill="rgb(209,159,44)" fg:x="1128" fg:w="5"/><text x="91.1444%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.2168%" y="181" width="0.0806%" height="15" fill="rgb(251,214,1)" fg:x="1132" fg:w="1"/><text x="91.4668%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.2168%" y="165" width="0.0806%" height="15" fill="rgb(247,84,47)" fg:x="1132" fg:w="1"/><text x="91.4668%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.2168%" y="149" width="0.0806%" height="15" fill="rgb(240,111,43)" fg:x="1132" fg:w="1"/><text x="91.4668%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.2168%" y="133" width="0.0806%" height="15" fill="rgb(215,214,35)" fg:x="1132" fg:w="1"/><text x="91.4668%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (39 samples, 3.14%)</title><rect x="91.2973%" y="229" width="3.1426%" height="15" fill="rgb(248,207,23)" fg:x="1133" fg:w="39"/><text x="91.5473%" y="239.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (39 samples, 3.14%)</title><rect x="91.2973%" y="213" width="3.1426%" height="15" fill="rgb(214,186,4)" fg:x="1133" fg:w="39"/><text x="91.5473%" y="223.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (39 samples, 3.14%)</title><rect x="91.2973%" y="197" width="3.1426%" height="15" fill="rgb(220,133,22)" fg:x="1133" fg:w="39"/><text x="91.5473%" y="207.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="94.4400%" y="229" width="0.2417%" height="15" fill="rgb(239,134,19)" fg:x="1172" fg:w="3"/><text x="94.6900%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="94.6817%" y="229" width="0.0806%" height="15" fill="rgb(250,140,9)" fg:x="1175" fg:w="1"/><text x="94.9317%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="94.7623%" y="229" width="0.1612%" height="15" fill="rgb(225,59,14)" fg:x="1176" fg:w="2"/><text x="95.0123%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.9234%" y="181" width="0.0806%" height="15" fill="rgb(214,152,51)" fg:x="1178" fg:w="1"/><text x="95.1734%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (81 samples, 6.53%)</title><rect x="88.5576%" y="325" width="6.5270%" height="15" fill="rgb(251,227,43)" fg:x="1099" fg:w="81"/><text x="88.8076%" y="335.50">&lt;core::it..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (81 samples, 6.53%)</title><rect x="88.5576%" y="309" width="6.5270%" height="15" fill="rgb(241,96,17)" fg:x="1099" fg:w="81"/><text x="88.8076%" y="319.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (80 samples, 6.45%)</title><rect x="88.6382%" y="293" width="6.4464%" height="15" fill="rgb(234,198,43)" fg:x="1100" fg:w="80"/><text x="88.8882%" y="303.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (80 samples, 6.45%)</title><rect x="88.6382%" y="277" width="6.4464%" height="15" fill="rgb(220,108,29)" fg:x="1100" fg:w="80"/><text x="88.8882%" y="287.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (80 samples, 6.45%)</title><rect x="88.6382%" y="261" width="6.4464%" height="15" fill="rgb(226,163,33)" fg:x="1100" fg:w="80"/><text x="88.8882%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (80 samples, 6.45%)</title><rect x="88.6382%" y="245" width="6.4464%" height="15" fill="rgb(205,194,45)" fg:x="1100" fg:w="80"/><text x="88.8882%" y="255.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="94.9234%" y="229" width="0.1612%" height="15" fill="rgb(206,143,44)" fg:x="1178" fg:w="2"/><text x="95.1734%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.9234%" y="213" width="0.1612%" height="15" fill="rgb(236,136,36)" fg:x="1178" fg:w="2"/><text x="95.1734%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.9234%" y="197" width="0.1612%" height="15" fill="rgb(249,172,42)" fg:x="1178" fg:w="2"/><text x="95.1734%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="95.0040%" y="181" width="0.0806%" height="15" fill="rgb(216,139,23)" fg:x="1179" fg:w="1"/><text x="95.2540%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="95.0040%" y="165" width="0.0806%" height="15" fill="rgb(207,166,20)" fg:x="1179" fg:w="1"/><text x="95.2540%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.2458%" y="309" width="0.0806%" height="15" fill="rgb(210,209,22)" fg:x="1182" fg:w="1"/><text x="95.4958%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (10 samples, 0.81%)</title><rect x="95.3263%" y="309" width="0.8058%" height="15" fill="rgb(232,118,20)" fg:x="1183" fg:w="10"/><text x="95.5763%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.9710%" y="293" width="0.1612%" height="15" fill="rgb(238,113,42)" fg:x="1191" fg:w="2"/><text x="96.2210%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.9710%" y="277" width="0.1612%" height="15" fill="rgb(231,42,5)" fg:x="1191" fg:w="2"/><text x="96.2210%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="95.9710%" y="261" width="0.1612%" height="15" fill="rgb(243,166,24)" fg:x="1191" fg:w="2"/><text x="96.2210%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="96.1322%" y="309" width="0.3223%" height="15" fill="rgb(237,226,12)" fg:x="1193" fg:w="4"/><text x="96.3822%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (135 samples, 10.88%)</title><rect x="85.6567%" y="357" width="10.8783%" height="15" fill="rgb(229,133,24)" fg:x="1063" fg:w="135"/><text x="85.9067%" y="367.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (99 samples, 7.98%)</title><rect x="88.5576%" y="341" width="7.9774%" height="15" fill="rgb(238,33,43)" fg:x="1099" fg:w="99"/><text x="88.8076%" y="351.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (18 samples, 1.45%)</title><rect x="95.0846%" y="325" width="1.4504%" height="15" fill="rgb(227,59,38)" fg:x="1180" fg:w="18"/><text x="95.3346%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="96.4545%" y="309" width="0.0806%" height="15" fill="rgb(230,97,0)" fg:x="1197" fg:w="1"/><text x="96.7045%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.4545%" y="293" width="0.0806%" height="15" fill="rgb(250,173,50)" fg:x="1197" fg:w="1"/><text x="96.7045%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.4545%" y="277" width="0.0806%" height="15" fill="rgb(240,15,50)" fg:x="1197" fg:w="1"/><text x="96.7045%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.4545%" y="261" width="0.0806%" height="15" fill="rgb(221,93,22)" fg:x="1197" fg:w="1"/><text x="96.7045%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.5351%" y="325" width="0.0806%" height="15" fill="rgb(245,180,53)" fg:x="1198" fg:w="1"/><text x="96.7851%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.5351%" y="309" width="0.0806%" height="15" fill="rgb(231,88,51)" fg:x="1198" fg:w="1"/><text x="96.7851%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="96.5351%" y="357" width="0.1612%" height="15" fill="rgb(240,58,21)" fg:x="1198" fg:w="2"/><text x="96.7851%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="96.5351%" y="341" width="0.1612%" height="15" fill="rgb(237,21,10)" fg:x="1198" fg:w="2"/><text x="96.7851%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="96.6156%" y="325" width="0.0806%" height="15" fill="rgb(218,43,11)" fg:x="1199" fg:w="1"/><text x="96.8656%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="96.6962%" y="309" width="0.1612%" height="15" fill="rgb(218,221,29)" fg:x="1200" fg:w="2"/><text x="96.9462%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="96.7768%" y="293" width="0.0806%" height="15" fill="rgb(214,118,42)" fg:x="1201" fg:w="1"/><text x="97.0268%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.7768%" y="277" width="0.0806%" height="15" fill="rgb(251,200,26)" fg:x="1201" fg:w="1"/><text x="97.0268%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="96.6962%" y="325" width="0.2417%" height="15" fill="rgb(237,101,39)" fg:x="1200" fg:w="3"/><text x="96.9462%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="96.8574%" y="309" width="0.0806%" height="15" fill="rgb(251,117,11)" fg:x="1202" fg:w="1"/><text x="97.1074%" y="319.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="96.8574%" y="293" width="0.0806%" height="15" fill="rgb(216,223,23)" fg:x="1202" fg:w="1"/><text x="97.1074%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (157 samples, 12.65%)</title><rect x="84.3674%" y="421" width="12.6511%" height="15" fill="rgb(251,54,12)" fg:x="1047" fg:w="157"/><text x="84.6174%" y="431.50">indefinite::rules::..</text></g><g><title>regex::regex::string::Regex::new (144 samples, 11.60%)</title><rect x="85.4150%" y="405" width="11.6035%" height="15" fill="rgb(254,176,54)" fg:x="1060" fg:w="144"/><text x="85.6650%" y="415.50">regex::regex::str..</text></g><g><title>regex::builders::Builder::build_one_string (144 samples, 11.60%)</title><rect x="85.4150%" y="389" width="11.6035%" height="15" fill="rgb(210,32,8)" fg:x="1060" fg:w="144"/><text x="85.6650%" y="399.50">regex::builders::..</text></g><g><title>regex_automata::meta::regex::Builder::build (144 samples, 11.60%)</title><rect x="85.4150%" y="373" width="11.6035%" height="15" fill="rgb(235,52,38)" fg:x="1060" fg:w="144"/><text x="85.6650%" y="383.50">regex_automata::m..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="96.6962%" y="357" width="0.3223%" height="15" fill="rgb(231,4,44)" fg:x="1200" fg:w="4"/><text x="96.9462%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="96.6962%" y="341" width="0.3223%" height="15" fill="rgb(249,2,32)" fg:x="1200" fg:w="4"/><text x="96.9462%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.9380%" y="325" width="0.0806%" height="15" fill="rgb(224,65,26)" fg:x="1203" fg:w="1"/><text x="97.1880%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="96.9380%" y="309" width="0.0806%" height="15" fill="rgb(250,73,40)" fg:x="1203" fg:w="1"/><text x="97.1880%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="96.9380%" y="293" width="0.0806%" height="15" fill="rgb(253,177,16)" fg:x="1203" fg:w="1"/><text x="97.1880%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.9380%" y="277" width="0.0806%" height="15" fill="rgb(217,32,34)" fg:x="1203" fg:w="1"/><text x="97.1880%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="97.0185%" y="389" width="0.0806%" height="15" fill="rgb(212,7,10)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="97.0185%" y="373" width="0.0806%" height="15" fill="rgb(245,89,8)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.0991%" y="357" width="0.0806%" height="15" fill="rgb(237,16,53)" fg:x="1205" fg:w="1"/><text x="97.3491%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="97.0991%" y="341" width="0.0806%" height="15" fill="rgb(250,204,30)" fg:x="1205" fg:w="1"/><text x="97.3491%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.0991%" y="325" width="0.0806%" height="15" fill="rgb(208,77,27)" fg:x="1205" fg:w="1"/><text x="97.3491%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="97.0991%" y="389" width="0.1612%" height="15" fill="rgb(250,204,28)" fg:x="1205" fg:w="2"/><text x="97.3491%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="97.0991%" y="373" width="0.1612%" height="15" fill="rgb(244,63,21)" fg:x="1205" fg:w="2"/><text x="97.3491%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.1797%" y="357" width="0.0806%" height="15" fill="rgb(236,85,44)" fg:x="1206" fg:w="1"/><text x="97.4297%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="97.1797%" y="341" width="0.0806%" height="15" fill="rgb(215,98,4)" fg:x="1206" fg:w="1"/><text x="97.4297%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.1797%" y="325" width="0.0806%" height="15" fill="rgb(235,38,11)" fg:x="1206" fg:w="1"/><text x="97.4297%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.2603%" y="341" width="0.0806%" height="15" fill="rgb(254,186,25)" fg:x="1207" fg:w="1"/><text x="97.5103%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.2603%" y="325" width="0.0806%" height="15" fill="rgb(225,55,31)" fg:x="1207" fg:w="1"/><text x="97.5103%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2603%" y="309" width="0.0806%" height="15" fill="rgb(211,15,21)" fg:x="1207" fg:w="1"/><text x="97.5103%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="97.5020%" y="325" width="0.0806%" height="15" fill="rgb(215,187,41)" fg:x="1210" fg:w="1"/><text x="97.7520%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="97.5020%" y="309" width="0.0806%" height="15" fill="rgb(248,69,32)" fg:x="1210" fg:w="1"/><text x="97.7520%" y="319.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="97.6632%" y="293" width="0.0806%" height="15" fill="rgb(252,102,52)" fg:x="1212" fg:w="1"/><text x="97.9132%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="97.7438%" y="293" width="0.1612%" height="15" fill="rgb(253,140,32)" fg:x="1213" fg:w="2"/><text x="97.9938%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.8243%" y="277" width="0.0806%" height="15" fill="rgb(216,56,42)" fg:x="1214" fg:w="1"/><text x="98.0743%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.8243%" y="261" width="0.0806%" height="15" fill="rgb(216,184,14)" fg:x="1214" fg:w="1"/><text x="98.0743%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.8243%" y="245" width="0.0806%" height="15" fill="rgb(237,187,27)" fg:x="1214" fg:w="1"/><text x="98.0743%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (10 samples, 0.81%)</title><rect x="97.3409%" y="341" width="0.8058%" height="15" fill="rgb(219,65,3)" fg:x="1208" fg:w="10"/><text x="97.5909%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.56%)</title><rect x="97.5826%" y="325" width="0.5641%" height="15" fill="rgb(245,83,25)" fg:x="1211" fg:w="7"/><text x="97.8326%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="97.5826%" y="309" width="0.5641%" height="15" fill="rgb(214,205,45)" fg:x="1211" fg:w="7"/><text x="97.8326%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="97.9049%" y="293" width="0.2417%" height="15" fill="rgb(241,20,18)" fg:x="1215" fg:w="3"/><text x="98.1549%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="98.2272%" y="293" width="0.1612%" height="15" fill="rgb(232,163,23)" fg:x="1219" fg:w="2"/><text x="98.4772%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="98.1467%" y="341" width="0.3223%" height="15" fill="rgb(214,5,46)" fg:x="1218" fg:w="4"/><text x="98.3967%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="98.1467%" y="325" width="0.3223%" height="15" fill="rgb(229,78,17)" fg:x="1218" fg:w="4"/><text x="98.3967%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="98.2272%" y="309" width="0.2417%" height="15" fill="rgb(248,89,10)" fg:x="1219" fg:w="3"/><text x="98.4772%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="98.3884%" y="293" width="0.0806%" height="15" fill="rgb(248,54,15)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.3884%" y="277" width="0.0806%" height="15" fill="rgb(223,116,6)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.3884%" y="261" width="0.0806%" height="15" fill="rgb(205,125,38)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3884%" y="245" width="0.0806%" height="15" fill="rgb(251,78,38)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.5496%" y="277" width="0.0806%" height="15" fill="rgb(253,78,28)" fg:x="1223" fg:w="1"/><text x="98.7996%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="98.5496%" y="309" width="0.1612%" height="15" fill="rgb(209,120,3)" fg:x="1223" fg:w="2"/><text x="98.7996%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="98.5496%" y="293" width="0.1612%" height="15" fill="rgb(238,229,9)" fg:x="1223" fg:w="2"/><text x="98.7996%" y="303.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="98.6301%" y="277" width="0.0806%" height="15" fill="rgb(253,159,18)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (19 samples, 1.53%)</title><rect x="97.2603%" y="389" width="1.5310%" height="15" fill="rgb(244,42,34)" fg:x="1207" fg:w="19"/><text x="97.5103%" y="399.50"></text></g><g><title>regex::builders::Builder::build_one_string (19 samples, 1.53%)</title><rect x="97.2603%" y="373" width="1.5310%" height="15" fill="rgb(224,8,7)" fg:x="1207" fg:w="19"/><text x="97.5103%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (19 samples, 1.53%)</title><rect x="97.2603%" y="357" width="1.5310%" height="15" fill="rgb(210,201,45)" fg:x="1207" fg:w="19"/><text x="97.5103%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="98.4690%" y="341" width="0.3223%" height="15" fill="rgb(252,185,21)" fg:x="1222" fg:w="4"/><text x="98.7190%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="98.4690%" y="325" width="0.3223%" height="15" fill="rgb(223,131,1)" fg:x="1222" fg:w="4"/><text x="98.7190%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="98.7107%" y="309" width="0.0806%" height="15" fill="rgb(245,141,16)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.8719%" y="309" width="0.0806%" height="15" fill="rgb(229,55,45)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.8719%" y="293" width="0.0806%" height="15" fill="rgb(208,92,15)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.8719%" y="277" width="0.0806%" height="15" fill="rgb(234,185,47)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="287.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (25 samples, 2.01%)</title><rect x="97.0185%" y="405" width="2.0145%" height="15" fill="rgb(253,104,50)" fg:x="1204" fg:w="25"/><text x="97.2685%" y="415.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="98.7913%" y="389" width="0.2417%" height="15" fill="rgb(205,70,7)" fg:x="1226" fg:w="3"/><text x="99.0413%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="98.7913%" y="373" width="0.2417%" height="15" fill="rgb(240,178,43)" fg:x="1226" fg:w="3"/><text x="99.0413%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="98.7913%" y="357" width="0.2417%" height="15" fill="rgb(214,112,2)" fg:x="1226" fg:w="3"/><text x="99.0413%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="98.8719%" y="341" width="0.1612%" height="15" fill="rgb(206,46,17)" fg:x="1227" fg:w="2"/><text x="99.1219%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="98.8719%" y="325" width="0.1612%" height="15" fill="rgb(225,220,16)" fg:x="1227" fg:w="2"/><text x="99.1219%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="98.9525%" y="309" width="0.0806%" height="15" fill="rgb(238,65,40)" fg:x="1228" fg:w="1"/><text x="99.2025%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (272 samples, 21.92%)</title><rect x="77.2764%" y="501" width="21.9178%" height="15" fill="rgb(230,151,21)" fg:x="959" fg:w="272"/><text x="77.5264%" y="511.50">&lt;&amp;kernel::model::entry::Entry as pl..</text></g><g><title>plugins_core::looking::model::qualify_name (265 samples, 21.35%)</title><rect x="77.8405%" y="485" width="21.3537%" height="15" fill="rgb(218,58,49)" fg:x="966" fg:w="265"/><text x="78.0905%" y="495.50">plugins_core::looking::model::qual..</text></g><g><title>indefinite::indefinite (265 samples, 21.35%)</title><rect x="77.8405%" y="469" width="21.3537%" height="15" fill="rgb(219,179,14)" fg:x="966" fg:w="265"/><text x="78.0905%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (265 samples, 21.35%)</title><rect x="77.8405%" y="453" width="21.3537%" height="15" fill="rgb(223,72,1)" fg:x="966" fg:w="265"/><text x="78.0905%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (265 samples, 21.35%)</title><rect x="77.8405%" y="437" width="21.3537%" height="15" fill="rgb(238,126,10)" fg:x="966" fg:w="265"/><text x="78.0905%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (27 samples, 2.18%)</title><rect x="97.0185%" y="421" width="2.1757%" height="15" fill="rgb(224,206,38)" fg:x="1204" fg:w="27"/><text x="97.2685%" y="431.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="99.0330%" y="405" width="0.1612%" height="15" fill="rgb(212,201,54)" fg:x="1229" fg:w="2"/><text x="99.2830%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1942%" y="309" width="0.0806%" height="15" fill="rgb(218,154,48)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1942%" y="293" width="0.0806%" height="15" fill="rgb(232,93,24)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1942%" y="277" width="0.0806%" height="15" fill="rgb(245,30,21)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1942%" y="261" width="0.0806%" height="15" fill="rgb(242,148,29)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1942%" y="245" width="0.0806%" height="15" fill="rgb(244,153,54)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1942%" y="229" width="0.0806%" height="15" fill="rgb(252,87,22)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.1942%" y="213" width="0.0806%" height="15" fill="rgb(210,51,29)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.1942%" y="197" width="0.0806%" height="15" fill="rgb(242,136,47)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.1942%" y="181" width="0.0806%" height="15" fill="rgb(238,68,4)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1942%" y="165" width="0.0806%" height="15" fill="rgb(242,161,30)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1942%" y="149" width="0.0806%" height="15" fill="rgb(218,58,44)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.1942%" y="133" width="0.0806%" height="15" fill="rgb(252,125,32)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.1942%" y="117" width="0.0806%" height="15" fill="rgb(219,178,0)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.1942%" y="101" width="0.0806%" height="15" fill="rgb(213,152,7)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.1942%" y="85" width="0.0806%" height="15" fill="rgb(249,109,34)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="99.1942%" y="357" width="0.1612%" height="15" fill="rgb(232,96,21)" fg:x="1231" fg:w="2"/><text x="99.4442%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="99.1942%" y="341" width="0.1612%" height="15" fill="rgb(228,27,39)" fg:x="1231" fg:w="2"/><text x="99.4442%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="99.1942%" y="325" width="0.1612%" height="15" fill="rgb(211,182,52)" fg:x="1231" fg:w="2"/><text x="99.4442%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2748%" y="309" width="0.0806%" height="15" fill="rgb(234,178,38)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2748%" y="293" width="0.0806%" height="15" fill="rgb(221,111,3)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2748%" y="277" width="0.0806%" height="15" fill="rgb(228,175,21)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2748%" y="261" width="0.0806%" height="15" fill="rgb(228,174,43)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.2748%" y="245" width="0.0806%" height="15" fill="rgb(211,191,0)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2748%" y="229" width="0.0806%" height="15" fill="rgb(253,117,3)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.2748%" y="213" width="0.0806%" height="15" fill="rgb(241,127,19)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="223.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="99.3554%" y="341" width="0.1612%" height="15" fill="rgb(218,103,12)" fg:x="1233" fg:w="2"/><text x="99.6054%" y="351.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="99.3554%" y="325" width="0.1612%" height="15" fill="rgb(236,214,43)" fg:x="1233" fg:w="2"/><text x="99.6054%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.3554%" y="309" width="0.1612%" height="15" fill="rgb(244,144,19)" fg:x="1233" fg:w="2"/><text x="99.6054%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.3554%" y="293" width="0.1612%" height="15" fill="rgb(246,188,10)" fg:x="1233" fg:w="2"/><text x="99.6054%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.3554%" y="277" width="0.1612%" height="15" fill="rgb(212,193,33)" fg:x="1233" fg:w="2"/><text x="99.6054%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.3554%" y="261" width="0.1612%" height="15" fill="rgb(241,51,29)" fg:x="1233" fg:w="2"/><text x="99.6054%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.4359%" y="245" width="0.0806%" height="15" fill="rgb(211,58,19)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4359%" y="229" width="0.0806%" height="15" fill="rgb(229,111,26)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4359%" y="213" width="0.0806%" height="15" fill="rgb(213,115,40)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.4359%" y="197" width="0.0806%" height="15" fill="rgb(209,56,44)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4359%" y="181" width="0.0806%" height="15" fill="rgb(230,108,32)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4359%" y="165" width="0.0806%" height="15" fill="rgb(216,165,31)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.4359%" y="149" width="0.0806%" height="15" fill="rgb(218,122,21)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4359%" y="133" width="0.0806%" height="15" fill="rgb(223,224,47)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4359%" y="117" width="0.0806%" height="15" fill="rgb(238,102,44)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4359%" y="101" width="0.0806%" height="15" fill="rgb(236,46,40)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="111.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (5 samples, 0.40%)</title><rect x="99.1942%" y="469" width="0.4029%" height="15" fill="rgb(247,202,50)" fg:x="1231" fg:w="5"/><text x="99.4442%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="99.1942%" y="453" width="0.4029%" height="15" fill="rgb(209,99,20)" fg:x="1231" fg:w="5"/><text x="99.4442%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="99.1942%" y="437" width="0.4029%" height="15" fill="rgb(252,27,34)" fg:x="1231" fg:w="5"/><text x="99.4442%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.40%)</title><rect x="99.1942%" y="421" width="0.4029%" height="15" fill="rgb(215,206,23)" fg:x="1231" fg:w="5"/><text x="99.4442%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.40%)</title><rect x="99.1942%" y="405" width="0.4029%" height="15" fill="rgb(212,135,36)" fg:x="1231" fg:w="5"/><text x="99.4442%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="99.1942%" y="389" width="0.4029%" height="15" fill="rgb(240,189,1)" fg:x="1231" fg:w="5"/><text x="99.4442%" y="399.50"></text></g><g><title>engine::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.1942%" y="373" width="0.4029%" height="15" fill="rgb(242,56,20)" fg:x="1231" fg:w="5"/><text x="99.4442%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="99.3554%" y="357" width="0.2417%" height="15" fill="rgb(247,132,33)" fg:x="1233" fg:w="3"/><text x="99.6054%" y="367.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.5165%" y="341" width="0.0806%" height="15" fill="rgb(208,149,11)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5165%" y="325" width="0.0806%" height="15" fill="rgb(211,33,11)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5165%" y="309" width="0.0806%" height="15" fill="rgb(221,29,38)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5165%" y="293" width="0.0806%" height="15" fill="rgb(206,182,49)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5165%" y="277" width="0.0806%" height="15" fill="rgb(216,140,1)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5165%" y="261" width="0.0806%" height="15" fill="rgb(232,57,40)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5165%" y="245" width="0.0806%" height="15" fill="rgb(224,186,18)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5165%" y="229" width="0.0806%" height="15" fill="rgb(215,121,11)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5165%" y="213" width="0.0806%" height="15" fill="rgb(245,147,10)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5165%" y="197" width="0.0806%" height="15" fill="rgb(238,153,13)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5165%" y="181" width="0.0806%" height="15" fill="rgb(233,108,0)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5165%" y="165" width="0.0806%" height="15" fill="rgb(212,157,17)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="175.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (289 samples, 23.29%)</title><rect x="76.3900%" y="661" width="23.2877%" height="15" fill="rgb(225,213,38)" fg:x="948" fg:w="289"/><text x="76.6400%" y="671.50">&lt;engine::perform::StandardPerformer a..</text></g><g><title>kernel::plugins::mw::apply_middleware (279 samples, 22.48%)</title><rect x="77.1958%" y="645" width="22.4819%" height="15" fill="rgb(248,16,11)" fg:x="958" fg:w="279"/><text x="77.4458%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (279 samples, 22.48%)</title><rect x="77.1958%" y="629" width="22.4819%" height="15" fill="rgb(241,33,4)" fg:x="958" fg:w="279"/><text x="77.4458%" y="639.50">kernel::plugins::mw::MiddlewareNext:..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (279 samples, 22.48%)</title><rect x="77.1958%" y="613" width="22.4819%" height="15" fill="rgb(222,26,43)" fg:x="958" fg:w="279"/><text x="77.4458%" y="623.50">&lt;plugins_dynlib::DynamicMiddleware a..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (279 samples, 22.48%)</title><rect x="77.1958%" y="597" width="22.4819%" height="15" fill="rgb(243,29,36)" fg:x="958" fg:w="279"/><text x="77.4458%" y="607.50">kernel::plugins::mw::MiddlewareNext:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (279 samples, 22.48%)</title><rect x="77.1958%" y="581" width="22.4819%" height="15" fill="rgb(241,9,27)" fg:x="958" fg:w="279"/><text x="77.4458%" y="591.50">core::ops::function::FnOnce::call_on..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (279 samples, 22.48%)</title><rect x="77.1958%" y="565" width="22.4819%" height="15" fill="rgb(205,117,26)" fg:x="958" fg:w="279"/><text x="77.4458%" y="575.50">kernel::plugins::mw::MiddlewareNext:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (278 samples, 22.40%)</title><rect x="77.2764%" y="549" width="22.4013%" height="15" fill="rgb(209,80,39)" fg:x="959" fg:w="278"/><text x="77.5264%" y="559.50">core::ops::function::FnOnce::call_o..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (278 samples, 22.40%)</title><rect x="77.2764%" y="533" width="22.4013%" height="15" fill="rgb(239,155,6)" fg:x="959" fg:w="278"/><text x="77.5264%" y="543.50">&lt;plugins_core::looking::actions::Lo..</text></g><g><title>plugins_core::looking::model::new_area_observation (278 samples, 22.40%)</title><rect x="77.2764%" y="517" width="22.4013%" height="15" fill="rgb(212,104,12)" fg:x="959" fg:w="278"/><text x="77.5264%" y="527.50">plugins_core::looking::model::new_a..</text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.48%)</title><rect x="99.1942%" y="501" width="0.4835%" height="15" fill="rgb(234,204,3)" fg:x="1231" fg:w="6"/><text x="99.4442%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="99.1942%" y="485" width="0.4835%" height="15" fill="rgb(251,218,7)" fg:x="1231" fg:w="6"/><text x="99.4442%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5971%" y="469" width="0.0806%" height="15" fill="rgb(221,81,32)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5971%" y="453" width="0.0806%" height="15" fill="rgb(214,152,26)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.5971%" y="437" width="0.0806%" height="15" fill="rgb(223,22,3)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5971%" y="421" width="0.0806%" height="15" fill="rgb(207,174,7)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6777%" y="373" width="0.0806%" height="15" fill="rgb(224,19,52)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6777%" y="357" width="0.0806%" height="15" fill="rgb(228,24,14)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6777%" y="341" width="0.0806%" height="15" fill="rgb(230,153,43)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6777%" y="325" width="0.0806%" height="15" fill="rgb(231,106,12)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6777%" y="309" width="0.0806%" height="15" fill="rgb(215,92,2)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6777%" y="293" width="0.0806%" height="15" fill="rgb(249,143,25)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6777%" y="277" width="0.0806%" height="15" fill="rgb(252,7,35)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="99.6777%" y="645" width="0.1612%" height="15" fill="rgb(216,69,40)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.6777%" y="629" width="0.1612%" height="15" fill="rgb(240,36,33)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="639.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.6777%" y="613" width="0.1612%" height="15" fill="rgb(231,128,14)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="99.6777%" y="597" width="0.1612%" height="15" fill="rgb(245,143,14)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="99.6777%" y="581" width="0.1612%" height="15" fill="rgb(222,130,28)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="99.6777%" y="565" width="0.1612%" height="15" fill="rgb(212,10,48)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6777%" y="549" width="0.1612%" height="15" fill="rgb(254,118,45)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6777%" y="533" width="0.1612%" height="15" fill="rgb(228,6,45)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6777%" y="517" width="0.1612%" height="15" fill="rgb(241,18,35)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6777%" y="501" width="0.1612%" height="15" fill="rgb(227,214,53)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6777%" y="485" width="0.1612%" height="15" fill="rgb(224,107,51)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6777%" y="469" width="0.1612%" height="15" fill="rgb(248,60,28)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6777%" y="453" width="0.1612%" height="15" fill="rgb(249,101,23)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6777%" y="437" width="0.1612%" height="15" fill="rgb(228,51,19)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6777%" y="421" width="0.1612%" height="15" fill="rgb(213,20,6)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6777%" y="405" width="0.1612%" height="15" fill="rgb(212,124,10)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6777%" y="389" width="0.1612%" height="15" fill="rgb(248,3,40)" fg:x="1237" fg:w="2"/><text x="99.9277%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.7583%" y="373" width="0.0806%" height="15" fill="rgb(223,178,23)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7583%" y="357" width="0.0806%" height="15" fill="rgb(240,132,45)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="367.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (292 samples, 23.53%)</title><rect x="76.3900%" y="693" width="23.5294%" height="15" fill="rgb(245,164,36)" fg:x="948" fg:w="292"/><text x="76.6400%" y="703.50">&lt;plugins_core::looking::LookingPlugin..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (292 samples, 23.53%)</title><rect x="76.3900%" y="677" width="23.5294%" height="15" fill="rgb(231,188,53)" fg:x="948" fg:w="292"/><text x="76.6400%" y="687.50">&lt;engine::perform::StandardPerformer a..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (3 samples, 0.24%)</title><rect x="99.6777%" y="661" width="0.2417%" height="15" fill="rgb(237,198,39)" fg:x="1237" fg:w="3"/><text x="99.9277%" y="671.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="99.8388%" y="645" width="0.0806%" height="15" fill="rgb(223,120,35)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="99.8388%" y="629" width="0.0806%" height="15" fill="rgb(253,107,49)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.8388%" y="613" width="0.0806%" height="15" fill="rgb(216,44,31)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.8388%" y="597" width="0.0806%" height="15" fill="rgb(253,87,21)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.8388%" y="581" width="0.0806%" height="15" fill="rgb(226,18,2)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8388%" y="565" width="0.0806%" height="15" fill="rgb(216,8,46)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8388%" y="549" width="0.0806%" height="15" fill="rgb(226,140,39)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8388%" y="533" width="0.0806%" height="15" fill="rgb(221,194,54)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.8388%" y="517" width="0.0806%" height="15" fill="rgb(213,92,11)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8388%" y="501" width="0.0806%" height="15" fill="rgb(229,162,46)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8388%" y="485" width="0.0806%" height="15" fill="rgb(214,111,36)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="495.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8388%" y="469" width="0.0806%" height="15" fill="rgb(207,6,21)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.8388%" y="453" width="0.0806%" height="15" fill="rgb(213,127,38)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8388%" y="437" width="0.0806%" height="15" fill="rgb(238,118,32)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8388%" y="421" width="0.0806%" height="15" fill="rgb(240,139,39)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="431.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8388%" y="405" width="0.0806%" height="15" fill="rgb(235,10,37)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="415.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="99.8388%" y="389" width="0.0806%" height="15" fill="rgb(249,171,38)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="399.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="99.8388%" y="373" width="0.0806%" height="15" fill="rgb(242,144,32)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="383.50"></text></g><g><title>all (1,241 samples, 100%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(217,117,21)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1151.50"></text></g><g><title>simple-2f0f8a36 (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(249,87,1)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1135.50">simple-2f0f8a36</text></g><g><title>_start (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(248,196,48)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1119.50">_start</text></g><g><title>__libc_start_main (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(251,206,33)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1103.50">__libc_start_main</text></g><g><title>main (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(232,141,28)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1087.50">main</text></g><g><title>std::rt::lang_start_internal (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(209,167,14)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1071.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(225,11,50)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1055.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(209,50,20)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1039.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(212,17,46)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1023.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,241 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(216,101,39)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,241 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(212,228,48)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,241 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(250,6,50)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,241 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(250,160,48)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,241 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(244,216,33)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="943.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,241 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(207,157,5)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="927.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,241 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(228,199,8)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="911.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,241 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(227,80,20)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="895.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,241 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(222,9,33)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="879.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,241 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(239,44,28)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="863.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (368 samples, 29.65%)</title><rect x="70.3465%" y="837" width="29.6535%" height="15" fill="rgb(249,187,43)" fg:x="873" fg:w="368"/><text x="70.5965%" y="847.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterio..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (368 samples, 29.65%)</title><rect x="70.3465%" y="821" width="29.6535%" height="15" fill="rgb(216,141,28)" fg:x="873" fg:w="368"/><text x="70.5965%" y="831.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (368 samples, 29.65%)</title><rect x="70.3465%" y="805" width="29.6535%" height="15" fill="rgb(230,154,53)" fg:x="873" fg:w="368"/><text x="70.5965%" y="815.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (293 samples, 23.61%)</title><rect x="76.3900%" y="789" width="23.6100%" height="15" fill="rgb(227,82,4)" fg:x="948" fg:w="293"/><text x="76.6400%" y="799.50">engine::session::Session::evaluate_and..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (293 samples, 23.61%)</title><rect x="76.3900%" y="773" width="23.6100%" height="15" fill="rgb(220,107,16)" fg:x="948" fg:w="293"/><text x="76.6400%" y="783.50">engine::perform::StandardPerformer::ev..</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (293 samples, 23.61%)</title><rect x="76.3900%" y="757" width="23.6100%" height="15" fill="rgb(207,187,2)" fg:x="948" fg:w="293"/><text x="76.6400%" y="767.50">&lt;kernel::plugins::SessionPlugins as ke..</text></g><g><title>core::iter::adapters::try_process (293 samples, 23.61%)</title><rect x="76.3900%" y="741" width="23.6100%" height="15" fill="rgb(210,162,52)" fg:x="948" fg:w="293"/><text x="76.6400%" y="751.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (293 samples, 23.61%)</title><rect x="76.3900%" y="725" width="23.6100%" height="15" fill="rgb(217,216,49)" fg:x="948" fg:w="293"/><text x="76.6400%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spe..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (293 samples, 23.61%)</title><rect x="76.3900%" y="709" width="23.6100%" height="15" fill="rgb(218,146,49)" fg:x="948" fg:w="293"/><text x="76.6400%" y="719.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; a..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="99.9194%" y="693" width="0.0806%" height="15" fill="rgb(216,55,40)" fg:x="1240" fg:w="1"/><text x="100.1694%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.9194%" y="677" width="0.0806%" height="15" fill="rgb(208,196,21)" fg:x="1240" fg:w="1"/><text x="100.1694%" y="687.50"></text></g></svg></svg>