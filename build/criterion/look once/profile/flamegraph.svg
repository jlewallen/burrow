<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="1226"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="645" width="0.0816%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0000%" y="629" width="0.0816%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="613" width="0.0816%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0816%" y="629" width="0.0816%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3316%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0816%" y="613" width="0.0816%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.3316%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.3263%" y="549" width="0.1631%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="2"/><text x="0.5763%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4078%" y="533" width="0.0816%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="0.6578%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5710%" y="533" width="0.0816%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="1"/><text x="0.8210%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.6525%" y="533" width="0.1631%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="2"/><text x="0.9025%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.6525%" y="517" width="0.1631%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="2"/><text x="0.9025%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8157%" y="517" width="0.0816%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="1"/><text x="1.0657%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.8972%" y="501" width="0.0816%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="1"/><text x="1.1472%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8972%" y="485" width="0.0816%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="1"/><text x="1.1472%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9788%" y="501" width="0.0816%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="1"/><text x="1.2288%" y="511.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.2235%" y="485" width="0.2447%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="3"/><text x="1.4735%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.31%)</title><rect x="0.2447%" y="565" width="1.3051%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="16"/><text x="0.4947%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 1.06%)</title><rect x="0.4894%" y="549" width="1.0604%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="13"/><text x="0.7394%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.73%)</title><rect x="0.8157%" y="533" width="0.7341%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="9"/><text x="1.0657%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="0.8972%" y="517" width="0.6525%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="8"/><text x="1.1472%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="1.0604%" y="501" width="0.4894%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="6"/><text x="1.3104%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.4682%" y="485" width="0.0816%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="1"/><text x="1.7182%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.33%)</title><rect x="1.5498%" y="533" width="0.3263%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="4"/><text x="1.7998%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.7129%" y="517" width="0.1631%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="2"/><text x="1.9629%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="1.8760%" y="517" width="0.1631%" height="15" fill="rgb(247,18,42)" fg:x="23" fg:w="2"/><text x="2.1260%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.8760%" y="501" width="0.1631%" height="15" fill="rgb(241,131,45)" fg:x="23" fg:w="2"/><text x="2.1260%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.8760%" y="485" width="0.1631%" height="15" fill="rgb(249,31,29)" fg:x="23" fg:w="2"/><text x="2.1260%" y="495.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="2.0392%" y="517" width="0.2447%" height="15" fill="rgb(225,111,53)" fg:x="25" fg:w="3"/><text x="2.2892%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.2838%" y="517" width="0.0816%" height="15" fill="rgb(238,160,17)" fg:x="28" fg:w="1"/><text x="2.5338%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.90%)</title><rect x="1.5498%" y="565" width="0.8972%" height="15" fill="rgb(214,148,48)" fg:x="19" fg:w="11"/><text x="1.7998%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.90%)</title><rect x="1.5498%" y="549" width="0.8972%" height="15" fill="rgb(232,36,49)" fg:x="19" fg:w="11"/><text x="1.7998%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="1.8760%" y="533" width="0.5710%" height="15" fill="rgb(209,103,24)" fg:x="23" fg:w="7"/><text x="2.1260%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3654%" y="517" width="0.0816%" height="15" fill="rgb(229,88,8)" fg:x="29" fg:w="1"/><text x="2.6154%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3654%" y="501" width="0.0816%" height="15" fill="rgb(213,181,19)" fg:x="29" fg:w="1"/><text x="2.6154%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 2.37%)</title><rect x="0.1631%" y="581" width="2.3654%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="29"/><text x="0.4131%" y="591.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;kernel::model::entity_ref::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="2.4470%" y="565" width="0.0816%" height="15" fill="rgb(241,83,37)" fg:x="30" fg:w="1"/><text x="2.6970%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 2.45%)</title><rect x="0.1631%" y="613" width="2.4470%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="30"/><text x="0.4131%" y="623.50">&lt;h..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (30 samples, 2.45%)</title><rect x="0.1631%" y="597" width="2.4470%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="30"/><text x="0.4131%" y="607.50">co..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5285%" y="581" width="0.0816%" height="15" fill="rgb(245,192,40)" fg:x="31" fg:w="1"/><text x="2.7785%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 2.61%)</title><rect x="0.0816%" y="645" width="2.6101%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="32"/><text x="0.3316%" y="655.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (31 samples, 2.53%)</title><rect x="0.1631%" y="629" width="2.5285%" height="15" fill="rgb(232,182,51)" fg:x="2" fg:w="31"/><text x="0.4131%" y="639.50">co..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6101%" y="613" width="0.0816%" height="15" fill="rgb(231,60,39)" fg:x="32" fg:w="1"/><text x="2.8601%" y="623.50"></text></g><g><title>dlerror (3 samples, 0.24%)</title><rect x="2.8548%" y="533" width="0.2447%" height="15" fill="rgb(208,69,12)" fg:x="35" fg:w="3"/><text x="3.1048%" y="543.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="3.0179%" y="517" width="0.0816%" height="15" fill="rgb(235,93,37)" fg:x="37" fg:w="1"/><text x="3.2679%" y="527.50"></text></g><g><title>dlopen (10 samples, 0.82%)</title><rect x="3.0995%" y="533" width="0.8157%" height="15" fill="rgb(213,116,39)" fg:x="38" fg:w="10"/><text x="3.3495%" y="543.50"></text></g><g><title>_dl_catch_error (9 samples, 0.73%)</title><rect x="3.1811%" y="517" width="0.7341%" height="15" fill="rgb(222,207,29)" fg:x="39" fg:w="9"/><text x="3.4311%" y="527.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.73%)</title><rect x="3.1811%" y="501" width="0.7341%" height="15" fill="rgb(206,96,30)" fg:x="39" fg:w="9"/><text x="3.4311%" y="511.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.73%)</title><rect x="3.1811%" y="485" width="0.7341%" height="15" fill="rgb(218,138,4)" fg:x="39" fg:w="9"/><text x="3.4311%" y="495.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.73%)</title><rect x="3.1811%" y="469" width="0.7341%" height="15" fill="rgb(250,191,14)" fg:x="39" fg:w="9"/><text x="3.4311%" y="479.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (14 samples, 1.14%)</title><rect x="2.8548%" y="565" width="1.1419%" height="15" fill="rgb(239,60,40)" fg:x="35" fg:w="14"/><text x="3.1048%" y="575.50"></text></g><g><title>libloading::safe::Library::new (14 samples, 1.14%)</title><rect x="2.8548%" y="549" width="1.1419%" height="15" fill="rgb(206,27,48)" fg:x="35" fg:w="14"/><text x="3.1048%" y="559.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="3.9152%" y="533" width="0.0816%" height="15" fill="rgb(225,35,8)" fg:x="48" fg:w="1"/><text x="4.1652%" y="543.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.08%)</title><rect x="3.9152%" y="517" width="0.0816%" height="15" fill="rgb(250,213,24)" fg:x="48" fg:w="1"/><text x="4.1652%" y="527.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.08%)</title><rect x="3.9152%" y="501" width="0.0816%" height="15" fill="rgb(247,123,22)" fg:x="48" fg:w="1"/><text x="4.1652%" y="511.50"></text></g><g><title>alloc::ffi::c_str::CString::_from_vec_unchecked (1 samples, 0.08%)</title><rect x="3.9152%" y="485" width="0.0816%" height="15" fill="rgb(231,138,38)" fg:x="48" fg:w="1"/><text x="4.1652%" y="495.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (17 samples, 1.39%)</title><rect x="2.7732%" y="581" width="1.3866%" height="15" fill="rgb(231,145,46)" fg:x="34" fg:w="17"/><text x="3.0232%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="3.9967%" y="565" width="0.1631%" height="15" fill="rgb(251,118,11)" fg:x="49" fg:w="2"/><text x="4.2467%" y="575.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="3.9967%" y="549" width="0.1631%" height="15" fill="rgb(217,147,25)" fg:x="49" fg:w="2"/><text x="4.2467%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.1599%" y="565" width="0.0816%" height="15" fill="rgb(247,81,37)" fg:x="51" fg:w="1"/><text x="4.4099%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1599%" y="549" width="0.0816%" height="15" fill="rgb(209,12,38)" fg:x="51" fg:w="1"/><text x="4.4099%" y="559.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="4.3230%" y="533" width="0.0816%" height="15" fill="rgb(227,1,9)" fg:x="53" fg:w="1"/><text x="4.5730%" y="543.50"></text></g><g><title>engine::session::Session::initialize (21 samples, 1.71%)</title><rect x="2.7732%" y="597" width="1.7129%" height="15" fill="rgb(248,47,43)" fg:x="34" fg:w="21"/><text x="3.0232%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (4 samples, 0.33%)</title><rect x="4.1599%" y="581" width="0.3263%" height="15" fill="rgb(221,10,30)" fg:x="51" fg:w="4"/><text x="4.4099%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="4.2414%" y="565" width="0.2447%" height="15" fill="rgb(210,229,1)" fg:x="52" fg:w="3"/><text x="4.4914%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.3230%" y="549" width="0.1631%" height="15" fill="rgb(222,148,37)" fg:x="53" fg:w="2"/><text x="4.5730%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.4046%" y="533" width="0.0816%" height="15" fill="rgb(234,67,33)" fg:x="54" fg:w="1"/><text x="4.6546%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.4046%" y="517" width="0.0816%" height="15" fill="rgb(247,98,35)" fg:x="54" fg:w="1"/><text x="4.6546%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.4046%" y="501" width="0.0816%" height="15" fill="rgb(247,138,52)" fg:x="54" fg:w="1"/><text x="4.6546%" y="511.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (23 samples, 1.88%)</title><rect x="2.6917%" y="645" width="1.8760%" height="15" fill="rgb(213,79,30)" fg:x="33" fg:w="23"/><text x="2.9417%" y="655.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (23 samples, 1.88%)</title><rect x="2.6917%" y="629" width="1.8760%" height="15" fill="rgb(246,177,23)" fg:x="33" fg:w="23"/><text x="2.9417%" y="639.50">e..</text></g><g><title>engine::session::Session::new (23 samples, 1.88%)</title><rect x="2.6917%" y="613" width="1.8760%" height="15" fill="rgb(230,62,27)" fg:x="33" fg:w="23"/><text x="2.9417%" y="623.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="4.4861%" y="597" width="0.0816%" height="15" fill="rgb(216,154,8)" fg:x="55" fg:w="1"/><text x="4.7361%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="4.4861%" y="581" width="0.0816%" height="15" fill="rgb(244,35,45)" fg:x="55" fg:w="1"/><text x="4.7361%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.4861%" y="565" width="0.0816%" height="15" fill="rgb(251,115,12)" fg:x="55" fg:w="1"/><text x="4.7361%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.4861%" y="549" width="0.0816%" height="15" fill="rgb(240,54,50)" fg:x="55" fg:w="1"/><text x="4.7361%" y="559.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="4.5677%" y="613" width="0.0816%" height="15" fill="rgb(233,84,52)" fg:x="56" fg:w="1"/><text x="4.8177%" y="623.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="4.5677%" y="597" width="0.0816%" height="15" fill="rgb(207,117,47)" fg:x="56" fg:w="1"/><text x="4.8177%" y="607.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="4.5677%" y="581" width="0.0816%" height="15" fill="rgb(249,43,39)" fg:x="56" fg:w="1"/><text x="4.8177%" y="591.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="4.5677%" y="565" width="0.0816%" height="15" fill="rgb(209,38,44)" fg:x="56" fg:w="1"/><text x="4.8177%" y="575.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="4.5677%" y="549" width="0.0816%" height="15" fill="rgb(236,212,23)" fg:x="56" fg:w="1"/><text x="4.8177%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="4.5677%" y="533" width="0.0816%" height="15" fill="rgb(242,79,21)" fg:x="56" fg:w="1"/><text x="4.8177%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.5677%" y="517" width="0.0816%" height="15" fill="rgb(211,96,35)" fg:x="56" fg:w="1"/><text x="4.8177%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.6493%" y="501" width="0.1631%" height="15" fill="rgb(253,215,40)" fg:x="57" fg:w="2"/><text x="4.8993%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.6493%" y="485" width="0.1631%" height="15" fill="rgb(211,81,21)" fg:x="57" fg:w="2"/><text x="4.8993%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.7308%" y="469" width="0.0816%" height="15" fill="rgb(208,190,38)" fg:x="58" fg:w="1"/><text x="4.9808%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.7308%" y="453" width="0.0816%" height="15" fill="rgb(235,213,38)" fg:x="58" fg:w="1"/><text x="4.9808%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.33%)</title><rect x="4.6493%" y="517" width="0.3263%" height="15" fill="rgb(237,122,38)" fg:x="57" fg:w="4"/><text x="4.8993%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.8124%" y="501" width="0.1631%" height="15" fill="rgb(244,218,35)" fg:x="59" fg:w="2"/><text x="5.0624%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.8124%" y="485" width="0.1631%" height="15" fill="rgb(240,68,47)" fg:x="59" fg:w="2"/><text x="5.0624%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.8940%" y="469" width="0.0816%" height="15" fill="rgb(210,16,53)" fg:x="60" fg:w="1"/><text x="5.1440%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.33%)</title><rect x="4.9755%" y="501" width="0.3263%" height="15" fill="rgb(235,124,12)" fg:x="61" fg:w="4"/><text x="5.2255%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.33%)</title><rect x="4.9755%" y="485" width="0.3263%" height="15" fill="rgb(224,169,11)" fg:x="61" fg:w="4"/><text x="5.2255%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.1387%" y="469" width="0.1631%" height="15" fill="rgb(250,166,2)" fg:x="63" fg:w="2"/><text x="5.3887%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="5.2202%" y="453" width="0.0816%" height="15" fill="rgb(242,216,29)" fg:x="64" fg:w="1"/><text x="5.4702%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="5.3834%" y="485" width="0.2447%" height="15" fill="rgb(230,116,27)" fg:x="66" fg:w="3"/><text x="5.6334%" y="495.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="5.3834%" y="469" width="0.2447%" height="15" fill="rgb(228,99,48)" fg:x="66" fg:w="3"/><text x="5.6334%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.4649%" y="453" width="0.1631%" height="15" fill="rgb(253,11,6)" fg:x="67" fg:w="2"/><text x="5.7149%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5465%" y="437" width="0.0816%" height="15" fill="rgb(247,143,39)" fg:x="68" fg:w="1"/><text x="5.7965%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.5465%" y="421" width="0.0816%" height="15" fill="rgb(236,97,10)" fg:x="68" fg:w="1"/><text x="5.7965%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.5465%" y="405" width="0.0816%" height="15" fill="rgb(233,208,19)" fg:x="68" fg:w="1"/><text x="5.7965%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.5465%" y="389" width="0.0816%" height="15" fill="rgb(216,164,2)" fg:x="68" fg:w="1"/><text x="5.7965%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6281%" y="453" width="0.0816%" height="15" fill="rgb(220,129,5)" fg:x="69" fg:w="1"/><text x="5.8781%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.6281%" y="437" width="0.0816%" height="15" fill="rgb(242,17,10)" fg:x="69" fg:w="1"/><text x="5.8781%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.6281%" y="421" width="0.0816%" height="15" fill="rgb(242,107,0)" fg:x="69" fg:w="1"/><text x="5.8781%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.6281%" y="405" width="0.0816%" height="15" fill="rgb(251,28,31)" fg:x="69" fg:w="1"/><text x="5.8781%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.6281%" y="389" width="0.0816%" height="15" fill="rgb(233,223,10)" fg:x="69" fg:w="1"/><text x="5.8781%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.6281%" y="373" width="0.0816%" height="15" fill="rgb(215,21,27)" fg:x="69" fg:w="1"/><text x="5.8781%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.6281%" y="357" width="0.0816%" height="15" fill="rgb(232,23,21)" fg:x="69" fg:w="1"/><text x="5.8781%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.6281%" y="469" width="0.1631%" height="15" fill="rgb(244,5,23)" fg:x="69" fg:w="2"/><text x="5.8781%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7096%" y="453" width="0.0816%" height="15" fill="rgb(226,81,46)" fg:x="70" fg:w="1"/><text x="5.9596%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.6281%" y="485" width="0.2447%" height="15" fill="rgb(247,70,30)" fg:x="69" fg:w="3"/><text x="5.8781%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7912%" y="469" width="0.0816%" height="15" fill="rgb(212,68,19)" fg:x="71" fg:w="1"/><text x="6.0412%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.7912%" y="453" width="0.0816%" height="15" fill="rgb(240,187,13)" fg:x="71" fg:w="1"/><text x="6.0412%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.7912%" y="437" width="0.0816%" height="15" fill="rgb(223,113,26)" fg:x="71" fg:w="1"/><text x="6.0412%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="5.3018%" y="501" width="0.6525%" height="15" fill="rgb(206,192,2)" fg:x="65" fg:w="8"/><text x="5.5518%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.8728%" y="485" width="0.0816%" height="15" fill="rgb(241,108,4)" fg:x="72" fg:w="1"/><text x="6.1228%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.8728%" y="469" width="0.0816%" height="15" fill="rgb(247,173,49)" fg:x="72" fg:w="1"/><text x="6.1228%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.8728%" y="453" width="0.0816%" height="15" fill="rgb(224,114,35)" fg:x="72" fg:w="1"/><text x="6.1228%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (17 samples, 1.39%)</title><rect x="4.6493%" y="533" width="1.3866%" height="15" fill="rgb(245,159,27)" fg:x="57" fg:w="17"/><text x="4.8993%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.06%)</title><rect x="4.9755%" y="517" width="1.0604%" height="15" fill="rgb(245,172,44)" fg:x="61" fg:w="13"/><text x="5.2255%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.9543%" y="501" width="0.0816%" height="15" fill="rgb(236,23,11)" fg:x="73" fg:w="1"/><text x="6.2043%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.9543%" y="485" width="0.0816%" height="15" fill="rgb(205,117,38)" fg:x="73" fg:w="1"/><text x="6.2043%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="6.1990%" y="485" width="0.1631%" height="15" fill="rgb(237,72,25)" fg:x="76" fg:w="2"/><text x="6.4490%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="6.3622%" y="485" width="0.1631%" height="15" fill="rgb(244,70,9)" fg:x="78" fg:w="2"/><text x="6.6122%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.4437%" y="469" width="0.0816%" height="15" fill="rgb(217,125,39)" fg:x="79" fg:w="1"/><text x="6.6937%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6069%" y="469" width="0.0816%" height="15" fill="rgb(235,36,10)" fg:x="81" fg:w="1"/><text x="6.8569%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.33%)</title><rect x="6.6884%" y="453" width="0.3263%" height="15" fill="rgb(251,123,47)" fg:x="82" fg:w="4"/><text x="6.9384%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="6.8515%" y="437" width="0.1631%" height="15" fill="rgb(221,13,13)" fg:x="84" fg:w="2"/><text x="7.1015%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 1.06%)</title><rect x="6.0359%" y="533" width="1.0604%" height="15" fill="rgb(238,131,9)" fg:x="74" fg:w="13"/><text x="6.2859%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 1.06%)</title><rect x="6.0359%" y="517" width="1.0604%" height="15" fill="rgb(211,50,8)" fg:x="74" fg:w="13"/><text x="6.2859%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (12 samples, 0.98%)</title><rect x="6.1175%" y="501" width="0.9788%" height="15" fill="rgb(245,182,24)" fg:x="75" fg:w="12"/><text x="6.3675%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="6.5253%" y="485" width="0.5710%" height="15" fill="rgb(242,14,37)" fg:x="80" fg:w="7"/><text x="6.7753%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="6.6884%" y="469" width="0.4078%" height="15" fill="rgb(246,228,12)" fg:x="82" fg:w="5"/><text x="6.9384%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.0147%" y="453" width="0.0816%" height="15" fill="rgb(213,55,15)" fg:x="86" fg:w="1"/><text x="7.2647%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.0147%" y="437" width="0.0816%" height="15" fill="rgb(209,9,3)" fg:x="86" fg:w="1"/><text x="7.2647%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.0962%" y="485" width="0.1631%" height="15" fill="rgb(230,59,30)" fg:x="87" fg:w="2"/><text x="7.3462%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1778%" y="469" width="0.0816%" height="15" fill="rgb(209,121,21)" fg:x="88" fg:w="1"/><text x="7.4278%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="7.2594%" y="485" width="0.1631%" height="15" fill="rgb(220,109,13)" fg:x="89" fg:w="2"/><text x="7.5094%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="7.2594%" y="469" width="0.1631%" height="15" fill="rgb(232,18,1)" fg:x="89" fg:w="2"/><text x="7.5094%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="7.2594%" y="453" width="0.1631%" height="15" fill="rgb(215,41,42)" fg:x="89" fg:w="2"/><text x="7.5094%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="7.5856%" y="421" width="0.3263%" height="15" fill="rgb(224,123,36)" fg:x="93" fg:w="4"/><text x="7.8356%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="7.6672%" y="405" width="0.2447%" height="15" fill="rgb(240,125,3)" fg:x="94" fg:w="3"/><text x="7.9172%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.8303%" y="389" width="0.0816%" height="15" fill="rgb(205,98,50)" fg:x="96" fg:w="1"/><text x="8.0803%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8303%" y="373" width="0.0816%" height="15" fill="rgb(205,185,37)" fg:x="96" fg:w="1"/><text x="8.0803%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8303%" y="357" width="0.0816%" height="15" fill="rgb(238,207,15)" fg:x="96" fg:w="1"/><text x="8.0803%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8303%" y="341" width="0.0816%" height="15" fill="rgb(213,199,42)" fg:x="96" fg:w="1"/><text x="8.0803%" y="351.50"></text></g><g><title>engine::session::Session::flush (42 samples, 3.43%)</title><rect x="4.5677%" y="629" width="3.4258%" height="15" fill="rgb(235,201,11)" fg:x="56" fg:w="42"/><text x="4.8177%" y="639.50">eng..</text></g><g><title>engine::session::state::State::close (41 samples, 3.34%)</title><rect x="4.6493%" y="613" width="3.3442%" height="15" fill="rgb(207,46,11)" fg:x="57" fg:w="41"/><text x="4.8993%" y="623.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (41 samples, 3.34%)</title><rect x="4.6493%" y="597" width="3.3442%" height="15" fill="rgb(241,35,35)" fg:x="57" fg:w="41"/><text x="4.8993%" y="607.50">eng..</text></g><g><title>core::iter::adapters::try_process (41 samples, 3.34%)</title><rect x="4.6493%" y="581" width="3.3442%" height="15" fill="rgb(243,32,47)" fg:x="57" fg:w="41"/><text x="4.8993%" y="591.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 3.34%)</title><rect x="4.6493%" y="565" width="3.3442%" height="15" fill="rgb(247,202,23)" fg:x="57" fg:w="41"/><text x="4.8993%" y="575.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (41 samples, 3.34%)</title><rect x="4.6493%" y="549" width="3.3442%" height="15" fill="rgb(219,102,11)" fg:x="57" fg:w="41"/><text x="4.8993%" y="559.50">eng..</text></g><g><title>kernel::model::any_entity_changes (11 samples, 0.90%)</title><rect x="7.0962%" y="533" width="0.8972%" height="15" fill="rgb(243,110,44)" fg:x="87" fg:w="11"/><text x="7.3462%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.90%)</title><rect x="7.0962%" y="517" width="0.8972%" height="15" fill="rgb(222,74,54)" fg:x="87" fg:w="11"/><text x="7.3462%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.90%)</title><rect x="7.0962%" y="501" width="0.8972%" height="15" fill="rgb(216,99,12)" fg:x="87" fg:w="11"/><text x="7.3462%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.57%)</title><rect x="7.4225%" y="485" width="0.5710%" height="15" fill="rgb(226,22,26)" fg:x="91" fg:w="7"/><text x="7.6725%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.57%)</title><rect x="7.4225%" y="469" width="0.5710%" height="15" fill="rgb(217,163,10)" fg:x="91" fg:w="7"/><text x="7.6725%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="7.4225%" y="453" width="0.5710%" height="15" fill="rgb(213,25,53)" fg:x="91" fg:w="7"/><text x="7.6725%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.57%)</title><rect x="7.4225%" y="437" width="0.5710%" height="15" fill="rgb(252,105,26)" fg:x="91" fg:w="7"/><text x="7.6725%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.9119%" y="421" width="0.0816%" height="15" fill="rgb(220,39,43)" fg:x="97" fg:w="1"/><text x="8.1619%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.0750%" y="581" width="0.0816%" height="15" fill="rgb(229,68,48)" fg:x="99" fg:w="1"/><text x="8.3250%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.0750%" y="565" width="0.0816%" height="15" fill="rgb(252,8,32)" fg:x="99" fg:w="1"/><text x="8.3250%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.0750%" y="549" width="0.0816%" height="15" fill="rgb(223,20,43)" fg:x="99" fg:w="1"/><text x="8.3250%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0750%" y="533" width="0.0816%" height="15" fill="rgb(229,81,49)" fg:x="99" fg:w="1"/><text x="8.3250%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.0750%" y="517" width="0.0816%" height="15" fill="rgb(236,28,36)" fg:x="99" fg:w="1"/><text x="8.3250%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="8.1566%" y="581" width="0.1631%" height="15" fill="rgb(249,185,26)" fg:x="100" fg:w="2"/><text x="8.4066%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="8.1566%" y="565" width="0.1631%" height="15" fill="rgb(249,174,33)" fg:x="100" fg:w="2"/><text x="8.4066%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.1566%" y="549" width="0.1631%" height="15" fill="rgb(233,201,37)" fg:x="100" fg:w="2"/><text x="8.4066%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.1566%" y="533" width="0.1631%" height="15" fill="rgb(221,78,26)" fg:x="100" fg:w="2"/><text x="8.4066%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.2382%" y="517" width="0.0816%" height="15" fill="rgb(250,127,30)" fg:x="101" fg:w="1"/><text x="8.4882%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2382%" y="501" width="0.0816%" height="15" fill="rgb(230,49,44)" fg:x="101" fg:w="1"/><text x="8.4882%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.3197%" y="469" width="0.0816%" height="15" fill="rgb(229,67,23)" fg:x="102" fg:w="1"/><text x="8.5697%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.3197%" y="453" width="0.0816%" height="15" fill="rgb(249,83,47)" fg:x="102" fg:w="1"/><text x="8.5697%" y="463.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.3197%" y="533" width="0.1631%" height="15" fill="rgb(215,43,3)" fg:x="102" fg:w="2"/><text x="8.5697%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="8.3197%" y="517" width="0.1631%" height="15" fill="rgb(238,154,13)" fg:x="102" fg:w="2"/><text x="8.5697%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.3197%" y="501" width="0.1631%" height="15" fill="rgb(219,56,2)" fg:x="102" fg:w="2"/><text x="8.5697%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.3197%" y="485" width="0.1631%" height="15" fill="rgb(233,0,4)" fg:x="102" fg:w="2"/><text x="8.5697%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.4013%" y="469" width="0.0816%" height="15" fill="rgb(235,30,7)" fg:x="103" fg:w="1"/><text x="8.6513%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4013%" y="453" width="0.0816%" height="15" fill="rgb(250,79,13)" fg:x="103" fg:w="1"/><text x="8.6513%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.4013%" y="437" width="0.0816%" height="15" fill="rgb(211,146,34)" fg:x="103" fg:w="1"/><text x="8.6513%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4013%" y="421" width="0.0816%" height="15" fill="rgb(228,22,38)" fg:x="103" fg:w="1"/><text x="8.6513%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.4013%" y="405" width="0.0816%" height="15" fill="rgb(235,168,5)" fg:x="103" fg:w="1"/><text x="8.6513%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.4829%" y="453" width="0.0816%" height="15" fill="rgb(221,155,16)" fg:x="104" fg:w="1"/><text x="8.7329%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.4829%" y="437" width="0.0816%" height="15" fill="rgb(215,215,53)" fg:x="104" fg:w="1"/><text x="8.7329%" y="447.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.33%)</title><rect x="8.3197%" y="565" width="0.3263%" height="15" fill="rgb(223,4,10)" fg:x="102" fg:w="4"/><text x="8.5697%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (4 samples, 0.33%)</title><rect x="8.3197%" y="549" width="0.3263%" height="15" fill="rgb(234,103,6)" fg:x="102" fg:w="4"/><text x="8.5697%" y="559.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="8.4829%" y="533" width="0.1631%" height="15" fill="rgb(227,97,0)" fg:x="104" fg:w="2"/><text x="8.7329%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="8.4829%" y="517" width="0.1631%" height="15" fill="rgb(234,150,53)" fg:x="104" fg:w="2"/><text x="8.7329%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.4829%" y="501" width="0.1631%" height="15" fill="rgb(228,201,54)" fg:x="104" fg:w="2"/><text x="8.7329%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="8.4829%" y="485" width="0.1631%" height="15" fill="rgb(222,22,37)" fg:x="104" fg:w="2"/><text x="8.7329%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="8.4829%" y="469" width="0.1631%" height="15" fill="rgb(237,53,32)" fg:x="104" fg:w="2"/><text x="8.7329%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.5644%" y="453" width="0.0816%" height="15" fill="rgb(233,25,53)" fg:x="105" fg:w="1"/><text x="8.8144%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5644%" y="437" width="0.0816%" height="15" fill="rgb(210,40,34)" fg:x="105" fg:w="1"/><text x="8.8144%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7276%" y="533" width="0.0816%" height="15" fill="rgb(241,220,44)" fg:x="107" fg:w="1"/><text x="8.9776%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8091%" y="533" width="0.0816%" height="15" fill="rgb(235,28,35)" fg:x="108" fg:w="1"/><text x="9.0591%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.8091%" y="517" width="0.0816%" height="15" fill="rgb(210,56,17)" fg:x="108" fg:w="1"/><text x="9.0591%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.8091%" y="501" width="0.0816%" height="15" fill="rgb(224,130,29)" fg:x="108" fg:w="1"/><text x="9.0591%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.65%)</title><rect x="8.3197%" y="581" width="0.6525%" height="15" fill="rgb(235,212,8)" fg:x="102" fg:w="8"/><text x="8.5697%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="8.6460%" y="565" width="0.3263%" height="15" fill="rgb(223,33,50)" fg:x="106" fg:w="4"/><text x="8.8960%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="8.7276%" y="549" width="0.2447%" height="15" fill="rgb(219,149,13)" fg:x="107" fg:w="3"/><text x="8.9776%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="8.8907%" y="533" width="0.0816%" height="15" fill="rgb(250,156,29)" fg:x="109" fg:w="1"/><text x="9.1407%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="8.8907%" y="517" width="0.0816%" height="15" fill="rgb(216,193,19)" fg:x="109" fg:w="1"/><text x="9.1407%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.8907%" y="501" width="0.0816%" height="15" fill="rgb(216,135,14)" fg:x="109" fg:w="1"/><text x="9.1407%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8907%" y="485" width="0.0816%" height="15" fill="rgb(241,47,5)" fg:x="109" fg:w="1"/><text x="9.1407%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.8907%" y="469" width="0.0816%" height="15" fill="rgb(233,42,35)" fg:x="109" fg:w="1"/><text x="9.1407%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8907%" y="453" width="0.0816%" height="15" fill="rgb(231,13,6)" fg:x="109" fg:w="1"/><text x="9.1407%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.8907%" y="437" width="0.0816%" height="15" fill="rgb(207,181,40)" fg:x="109" fg:w="1"/><text x="9.1407%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.8907%" y="421" width="0.0816%" height="15" fill="rgb(254,173,49)" fg:x="109" fg:w="1"/><text x="9.1407%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.9723%" y="517" width="0.0816%" height="15" fill="rgb(221,1,38)" fg:x="110" fg:w="1"/><text x="9.2223%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="8.9723%" y="565" width="0.1631%" height="15" fill="rgb(206,124,46)" fg:x="110" fg:w="2"/><text x="9.2223%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.9723%" y="549" width="0.1631%" height="15" fill="rgb(249,21,11)" fg:x="110" fg:w="2"/><text x="9.2223%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="8.9723%" y="533" width="0.1631%" height="15" fill="rgb(222,201,40)" fg:x="110" fg:w="2"/><text x="9.2223%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.0538%" y="517" width="0.0816%" height="15" fill="rgb(235,61,29)" fg:x="111" fg:w="1"/><text x="9.3038%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.0538%" y="501" width="0.0816%" height="15" fill="rgb(219,207,3)" fg:x="111" fg:w="1"/><text x="9.3038%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.0538%" y="485" width="0.0816%" height="15" fill="rgb(222,56,46)" fg:x="111" fg:w="1"/><text x="9.3038%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.0538%" y="469" width="0.0816%" height="15" fill="rgb(239,76,54)" fg:x="111" fg:w="1"/><text x="9.3038%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0538%" y="453" width="0.0816%" height="15" fill="rgb(231,124,27)" fg:x="111" fg:w="1"/><text x="9.3038%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.0538%" y="437" width="0.0816%" height="15" fill="rgb(249,195,6)" fg:x="111" fg:w="1"/><text x="9.3038%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="8.9723%" y="581" width="0.2447%" height="15" fill="rgb(237,174,47)" fg:x="110" fg:w="3"/><text x="9.2223%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="9.1354%" y="565" width="0.0816%" height="15" fill="rgb(206,201,31)" fg:x="112" fg:w="1"/><text x="9.3854%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.1354%" y="549" width="0.0816%" height="15" fill="rgb(231,57,52)" fg:x="112" fg:w="1"/><text x="9.3854%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="9.1354%" y="533" width="0.0816%" height="15" fill="rgb(248,177,22)" fg:x="112" fg:w="1"/><text x="9.3854%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.1354%" y="517" width="0.0816%" height="15" fill="rgb(215,211,37)" fg:x="112" fg:w="1"/><text x="9.3854%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.1354%" y="501" width="0.0816%" height="15" fill="rgb(241,128,51)" fg:x="112" fg:w="1"/><text x="9.3854%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.1354%" y="485" width="0.0816%" height="15" fill="rgb(227,165,31)" fg:x="112" fg:w="1"/><text x="9.3854%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.1354%" y="469" width="0.0816%" height="15" fill="rgb(228,167,24)" fg:x="112" fg:w="1"/><text x="9.3854%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2170%" y="501" width="0.0816%" height="15" fill="rgb(228,143,12)" fg:x="113" fg:w="1"/><text x="9.4670%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.2170%" y="549" width="0.1631%" height="15" fill="rgb(249,149,8)" fg:x="113" fg:w="2"/><text x="9.4670%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.2170%" y="533" width="0.1631%" height="15" fill="rgb(243,35,44)" fg:x="113" fg:w="2"/><text x="9.4670%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="9.2170%" y="517" width="0.1631%" height="15" fill="rgb(246,89,9)" fg:x="113" fg:w="2"/><text x="9.4670%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.2985%" y="501" width="0.0816%" height="15" fill="rgb(233,213,13)" fg:x="114" fg:w="1"/><text x="9.5485%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2985%" y="485" width="0.0816%" height="15" fill="rgb(233,141,41)" fg:x="114" fg:w="1"/><text x="9.5485%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.2985%" y="469" width="0.0816%" height="15" fill="rgb(239,167,4)" fg:x="114" fg:w="1"/><text x="9.5485%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2985%" y="453" width="0.0816%" height="15" fill="rgb(209,217,16)" fg:x="114" fg:w="1"/><text x="9.5485%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.2985%" y="437" width="0.0816%" height="15" fill="rgb(219,88,35)" fg:x="114" fg:w="1"/><text x="9.5485%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2985%" y="421" width="0.0816%" height="15" fill="rgb(220,193,23)" fg:x="114" fg:w="1"/><text x="9.5485%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (17 samples, 1.39%)</title><rect x="8.0750%" y="597" width="1.3866%" height="15" fill="rgb(230,90,52)" fg:x="99" fg:w="17"/><text x="8.3250%" y="607.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (3 samples, 0.24%)</title><rect x="9.2170%" y="581" width="0.2447%" height="15" fill="rgb(252,106,19)" fg:x="113" fg:w="3"/><text x="9.4670%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="9.2170%" y="565" width="0.2447%" height="15" fill="rgb(206,74,20)" fg:x="113" fg:w="3"/><text x="9.4670%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="9.3801%" y="549" width="0.0816%" height="15" fill="rgb(230,138,44)" fg:x="115" fg:w="1"/><text x="9.6301%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="9.3801%" y="533" width="0.0816%" height="15" fill="rgb(235,182,43)" fg:x="115" fg:w="1"/><text x="9.6301%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3801%" y="517" width="0.0816%" height="15" fill="rgb(242,16,51)" fg:x="115" fg:w="1"/><text x="9.6301%" y="527.50"></text></g><g><title>plugins_core::build::Build::into_entry (20 samples, 1.63%)</title><rect x="7.9935%" y="613" width="1.6313%" height="15" fill="rgb(248,9,4)" fg:x="98" fg:w="20"/><text x="8.2435%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.4617%" y="597" width="0.1631%" height="15" fill="rgb(210,31,22)" fg:x="116" fg:w="2"/><text x="9.7117%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.4617%" y="581" width="0.1631%" height="15" fill="rgb(239,54,39)" fg:x="116" fg:w="2"/><text x="9.7117%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="9.5432%" y="565" width="0.0816%" height="15" fill="rgb(230,99,41)" fg:x="117" fg:w="1"/><text x="9.7932%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="9.6248%" y="597" width="0.1631%" height="15" fill="rgb(253,106,12)" fg:x="118" fg:w="2"/><text x="9.8748%" y="607.50"></text></g><g><title>plugins_core::build::Build::carryable (26 samples, 2.12%)</title><rect x="7.9935%" y="629" width="2.1207%" height="15" fill="rgb(213,46,41)" fg:x="98" fg:w="26"/><text x="8.2435%" y="639.50">p..</text></g><g><title>plugins_core::tools::set_quantity (6 samples, 0.49%)</title><rect x="9.6248%" y="613" width="0.4894%" height="15" fill="rgb(215,133,35)" fg:x="118" fg:w="6"/><text x="9.8748%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.33%)</title><rect x="9.7879%" y="597" width="0.3263%" height="15" fill="rgb(213,28,5)" fg:x="120" fg:w="4"/><text x="10.0379%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (4 samples, 0.33%)</title><rect x="9.7879%" y="581" width="0.3263%" height="15" fill="rgb(215,77,49)" fg:x="120" fg:w="4"/><text x="10.0379%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="9.8695%" y="565" width="0.2447%" height="15" fill="rgb(248,100,22)" fg:x="121" fg:w="3"/><text x="10.1195%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (2 samples, 0.16%)</title><rect x="9.9511%" y="549" width="0.1631%" height="15" fill="rgb(208,67,9)" fg:x="122" fg:w="2"/><text x="10.2011%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.0326%" y="533" width="0.0816%" height="15" fill="rgb(219,133,21)" fg:x="123" fg:w="1"/><text x="10.2826%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0326%" y="517" width="0.0816%" height="15" fill="rgb(246,46,29)" fg:x="123" fg:w="1"/><text x="10.2826%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.0326%" y="501" width="0.0816%" height="15" fill="rgb(246,185,52)" fg:x="123" fg:w="1"/><text x="10.2826%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0326%" y="485" width="0.0816%" height="15" fill="rgb(252,136,11)" fg:x="123" fg:w="1"/><text x="10.2826%" y="495.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="10.1142%" y="629" width="0.1631%" height="15" fill="rgb(219,138,53)" fg:x="124" fg:w="2"/><text x="10.3642%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="10.1958%" y="613" width="0.0816%" height="15" fill="rgb(211,51,23)" fg:x="125" fg:w="1"/><text x="10.4458%" y="623.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="10.1958%" y="597" width="0.0816%" height="15" fill="rgb(247,221,28)" fg:x="125" fg:w="1"/><text x="10.4458%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.1958%" y="581" width="0.0816%" height="15" fill="rgb(251,222,45)" fg:x="125" fg:w="1"/><text x="10.4458%" y="591.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="10.1958%" y="565" width="0.0816%" height="15" fill="rgb(217,162,53)" fg:x="125" fg:w="1"/><text x="10.4458%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.1958%" y="549" width="0.0816%" height="15" fill="rgb(229,93,14)" fg:x="125" fg:w="1"/><text x="10.4458%" y="559.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1958%" y="533" width="0.0816%" height="15" fill="rgb(209,67,49)" fg:x="125" fg:w="1"/><text x="10.4458%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.1958%" y="517" width="0.0816%" height="15" fill="rgb(213,87,29)" fg:x="125" fg:w="1"/><text x="10.4458%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1958%" y="501" width="0.0816%" height="15" fill="rgb(205,151,52)" fg:x="125" fg:w="1"/><text x="10.4458%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="10.2773%" y="629" width="0.1631%" height="15" fill="rgb(253,215,39)" fg:x="126" fg:w="2"/><text x="10.5273%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="10.2773%" y="613" width="0.1631%" height="15" fill="rgb(221,220,41)" fg:x="126" fg:w="2"/><text x="10.5273%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="10.2773%" y="597" width="0.1631%" height="15" fill="rgb(218,133,21)" fg:x="126" fg:w="2"/><text x="10.5273%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="10.2773%" y="581" width="0.1631%" height="15" fill="rgb(221,193,43)" fg:x="126" fg:w="2"/><text x="10.5273%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="10.2773%" y="565" width="0.1631%" height="15" fill="rgb(240,128,52)" fg:x="126" fg:w="2"/><text x="10.5273%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.2773%" y="549" width="0.1631%" height="15" fill="rgb(253,114,12)" fg:x="126" fg:w="2"/><text x="10.5273%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="10.2773%" y="533" width="0.1631%" height="15" fill="rgb(215,223,47)" fg:x="126" fg:w="2"/><text x="10.5273%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.2773%" y="517" width="0.1631%" height="15" fill="rgb(248,225,23)" fg:x="126" fg:w="2"/><text x="10.5273%" y="527.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="10.3589%" y="501" width="0.0816%" height="15" fill="rgb(250,108,0)" fg:x="127" fg:w="1"/><text x="10.6089%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="10.4405%" y="613" width="0.0816%" height="15" fill="rgb(228,208,7)" fg:x="128" fg:w="1"/><text x="10.6905%" y="623.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="10.4405%" y="597" width="0.0816%" height="15" fill="rgb(244,45,10)" fg:x="128" fg:w="1"/><text x="10.6905%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4405%" y="581" width="0.0816%" height="15" fill="rgb(207,125,25)" fg:x="128" fg:w="1"/><text x="10.6905%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4405%" y="565" width="0.0816%" height="15" fill="rgb(210,195,18)" fg:x="128" fg:w="1"/><text x="10.6905%" y="575.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="10.5220%" y="613" width="0.0816%" height="15" fill="rgb(249,80,12)" fg:x="129" fg:w="1"/><text x="10.7720%" y="623.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="10.5220%" y="597" width="0.0816%" height="15" fill="rgb(221,65,9)" fg:x="129" fg:w="1"/><text x="10.7720%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.5220%" y="581" width="0.0816%" height="15" fill="rgb(235,49,36)" fg:x="129" fg:w="1"/><text x="10.7720%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="10.6852%" y="565" width="0.0816%" height="15" fill="rgb(225,32,20)" fg:x="131" fg:w="1"/><text x="10.9352%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.6852%" y="549" width="0.0816%" height="15" fill="rgb(215,141,46)" fg:x="131" fg:w="1"/><text x="10.9352%" y="559.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="10.7667%" y="501" width="0.0816%" height="15" fill="rgb(250,160,47)" fg:x="132" fg:w="1"/><text x="11.0167%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.7667%" y="485" width="0.0816%" height="15" fill="rgb(216,222,40)" fg:x="132" fg:w="1"/><text x="11.0167%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="10.7667%" y="517" width="0.2447%" height="15" fill="rgb(234,217,39)" fg:x="132" fg:w="3"/><text x="11.0167%" y="527.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="10.8483%" y="501" width="0.1631%" height="15" fill="rgb(207,178,40)" fg:x="133" fg:w="2"/><text x="11.0983%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="10.8483%" y="485" width="0.1631%" height="15" fill="rgb(221,136,13)" fg:x="133" fg:w="2"/><text x="11.0983%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.8483%" y="469" width="0.1631%" height="15" fill="rgb(249,199,10)" fg:x="133" fg:w="2"/><text x="11.0983%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.8483%" y="453" width="0.1631%" height="15" fill="rgb(249,222,13)" fg:x="133" fg:w="2"/><text x="11.0983%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.8483%" y="437" width="0.1631%" height="15" fill="rgb(244,185,38)" fg:x="133" fg:w="2"/><text x="11.0983%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.9299%" y="421" width="0.0816%" height="15" fill="rgb(236,202,9)" fg:x="134" fg:w="1"/><text x="11.1799%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.9299%" y="405" width="0.0816%" height="15" fill="rgb(250,229,37)" fg:x="134" fg:w="1"/><text x="11.1799%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.9299%" y="389" width="0.0816%" height="15" fill="rgb(206,174,23)" fg:x="134" fg:w="1"/><text x="11.1799%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.9299%" y="373" width="0.0816%" height="15" fill="rgb(211,33,43)" fg:x="134" fg:w="1"/><text x="11.1799%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.9299%" y="357" width="0.0816%" height="15" fill="rgb(245,58,50)" fg:x="134" fg:w="1"/><text x="11.1799%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.9299%" y="341" width="0.0816%" height="15" fill="rgb(244,68,36)" fg:x="134" fg:w="1"/><text x="11.1799%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.9299%" y="325" width="0.0816%" height="15" fill="rgb(232,229,15)" fg:x="134" fg:w="1"/><text x="11.1799%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.9299%" y="309" width="0.0816%" height="15" fill="rgb(254,30,23)" fg:x="134" fg:w="1"/><text x="11.1799%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.9299%" y="293" width="0.0816%" height="15" fill="rgb(235,160,14)" fg:x="134" fg:w="1"/><text x="11.1799%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.9299%" y="277" width="0.0816%" height="15" fill="rgb(212,155,44)" fg:x="134" fg:w="1"/><text x="11.1799%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.9299%" y="261" width="0.0816%" height="15" fill="rgb(226,2,50)" fg:x="134" fg:w="1"/><text x="11.1799%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9299%" y="245" width="0.0816%" height="15" fill="rgb(234,177,6)" fg:x="134" fg:w="1"/><text x="11.1799%" y="255.50"></text></g><g><title>kernel::model::entry::Entry::new (4 samples, 0.33%)</title><rect x="10.7667%" y="533" width="0.3263%" height="15" fill="rgb(217,24,9)" fg:x="132" fg:w="4"/><text x="11.0167%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.0114%" y="517" width="0.0816%" height="15" fill="rgb(220,13,46)" fg:x="135" fg:w="1"/><text x="11.2614%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.0114%" y="501" width="0.0816%" height="15" fill="rgb(239,221,27)" fg:x="135" fg:w="1"/><text x="11.2614%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.0114%" y="485" width="0.0816%" height="15" fill="rgb(222,198,25)" fg:x="135" fg:w="1"/><text x="11.2614%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.0114%" y="469" width="0.0816%" height="15" fill="rgb(211,99,13)" fg:x="135" fg:w="1"/><text x="11.2614%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0114%" y="453" width="0.0816%" height="15" fill="rgb(232,111,31)" fg:x="135" fg:w="1"/><text x="11.2614%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.0114%" y="437" width="0.0816%" height="15" fill="rgb(245,82,37)" fg:x="135" fg:w="1"/><text x="11.2614%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0114%" y="421" width="0.0816%" height="15" fill="rgb(227,149,46)" fg:x="135" fg:w="1"/><text x="11.2614%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.0114%" y="405" width="0.0816%" height="15" fill="rgb(218,36,50)" fg:x="135" fg:w="1"/><text x="11.2614%" y="415.50"></text></g><g><title>plugins_core::build::Build::into_entry (5 samples, 0.41%)</title><rect x="10.7667%" y="565" width="0.4078%" height="15" fill="rgb(226,80,48)" fg:x="132" fg:w="5"/><text x="11.0167%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="10.7667%" y="549" width="0.4078%" height="15" fill="rgb(238,224,15)" fg:x="132" fg:w="5"/><text x="11.0167%" y="559.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="11.0930%" y="533" width="0.0816%" height="15" fill="rgb(241,136,10)" fg:x="136" fg:w="1"/><text x="11.3430%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="11.0930%" y="517" width="0.0816%" height="15" fill="rgb(208,32,45)" fg:x="136" fg:w="1"/><text x="11.3430%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.0930%" y="501" width="0.0816%" height="15" fill="rgb(207,135,9)" fg:x="136" fg:w="1"/><text x="11.3430%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.0930%" y="485" width="0.0816%" height="15" fill="rgb(206,86,44)" fg:x="136" fg:w="1"/><text x="11.3430%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.0930%" y="469" width="0.0816%" height="15" fill="rgb(245,177,15)" fg:x="136" fg:w="1"/><text x="11.3430%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.0930%" y="453" width="0.0816%" height="15" fill="rgb(206,64,50)" fg:x="136" fg:w="1"/><text x="11.3430%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.2561%" y="501" width="0.0816%" height="15" fill="rgb(234,36,40)" fg:x="138" fg:w="1"/><text x="11.5061%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.2561%" y="485" width="0.0816%" height="15" fill="rgb(213,64,8)" fg:x="138" fg:w="1"/><text x="11.5061%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.2561%" y="469" width="0.0816%" height="15" fill="rgb(210,75,36)" fg:x="138" fg:w="1"/><text x="11.5061%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.2561%" y="453" width="0.0816%" height="15" fill="rgb(229,88,21)" fg:x="138" fg:w="1"/><text x="11.5061%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.2561%" y="437" width="0.0816%" height="15" fill="rgb(252,204,47)" fg:x="138" fg:w="1"/><text x="11.5061%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.2561%" y="421" width="0.0816%" height="15" fill="rgb(208,77,27)" fg:x="138" fg:w="1"/><text x="11.5061%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.2561%" y="405" width="0.0816%" height="15" fill="rgb(221,76,26)" fg:x="138" fg:w="1"/><text x="11.5061%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.2561%" y="389" width="0.0816%" height="15" fill="rgb(225,139,18)" fg:x="138" fg:w="1"/><text x="11.5061%" y="399.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="11.2561%" y="533" width="0.1631%" height="15" fill="rgb(230,137,11)" fg:x="138" fg:w="2"/><text x="11.5061%" y="543.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="11.2561%" y="517" width="0.1631%" height="15" fill="rgb(212,28,1)" fg:x="138" fg:w="2"/><text x="11.5061%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.3377%" y="501" width="0.0816%" height="15" fill="rgb(248,164,17)" fg:x="139" fg:w="1"/><text x="11.5877%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.3377%" y="485" width="0.0816%" height="15" fill="rgb(222,171,42)" fg:x="139" fg:w="1"/><text x="11.5877%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.3377%" y="469" width="0.0816%" height="15" fill="rgb(243,84,45)" fg:x="139" fg:w="1"/><text x="11.5877%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.3377%" y="453" width="0.0816%" height="15" fill="rgb(252,49,23)" fg:x="139" fg:w="1"/><text x="11.5877%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.3377%" y="437" width="0.0816%" height="15" fill="rgb(215,19,7)" fg:x="139" fg:w="1"/><text x="11.5877%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.90%)</title><rect x="10.6036%" y="613" width="0.8972%" height="15" fill="rgb(238,81,41)" fg:x="130" fg:w="11"/><text x="10.8536%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.90%)</title><rect x="10.6036%" y="597" width="0.8972%" height="15" fill="rgb(210,199,37)" fg:x="130" fg:w="11"/><text x="10.8536%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (11 samples, 0.90%)</title><rect x="10.6036%" y="581" width="0.8972%" height="15" fill="rgb(244,192,49)" fg:x="130" fg:w="11"/><text x="10.8536%" y="591.50"></text></g><g><title>plugins_core::build::Build::leads_to (4 samples, 0.33%)</title><rect x="11.1746%" y="565" width="0.3263%" height="15" fill="rgb(226,211,11)" fg:x="137" fg:w="4"/><text x="11.4246%" y="575.50"></text></g><g><title>plugins_core::tools::leads_to (4 samples, 0.33%)</title><rect x="11.1746%" y="549" width="0.3263%" height="15" fill="rgb(236,162,54)" fg:x="137" fg:w="4"/><text x="11.4246%" y="559.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.4192%" y="533" width="0.0816%" height="15" fill="rgb(220,229,9)" fg:x="140" fg:w="1"/><text x="11.6692%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.4192%" y="517" width="0.0816%" height="15" fill="rgb(250,87,22)" fg:x="140" fg:w="1"/><text x="11.6692%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4192%" y="501" width="0.0816%" height="15" fill="rgb(239,43,17)" fg:x="140" fg:w="1"/><text x="11.6692%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4192%" y="485" width="0.0816%" height="15" fill="rgb(231,177,25)" fg:x="140" fg:w="1"/><text x="11.6692%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="11.6639%" y="485" width="0.1631%" height="15" fill="rgb(219,179,1)" fg:x="143" fg:w="2"/><text x="11.9139%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.6639%" y="469" width="0.1631%" height="15" fill="rgb(238,219,53)" fg:x="143" fg:w="2"/><text x="11.9139%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.9902%" y="469" width="0.0816%" height="15" fill="rgb(232,167,36)" fg:x="147" fg:w="1"/><text x="12.2402%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.0718%" y="469" width="0.1631%" height="15" fill="rgb(244,19,51)" fg:x="148" fg:w="2"/><text x="12.3218%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="12.3165%" y="421" width="0.1631%" height="15" fill="rgb(224,6,22)" fg:x="151" fg:w="2"/><text x="12.5665%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.3165%" y="405" width="0.1631%" height="15" fill="rgb(224,145,5)" fg:x="151" fg:w="2"/><text x="12.5665%" y="415.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.3165%" y="389" width="0.1631%" height="15" fill="rgb(234,130,49)" fg:x="151" fg:w="2"/><text x="12.5665%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.3165%" y="373" width="0.1631%" height="15" fill="rgb(254,6,2)" fg:x="151" fg:w="2"/><text x="12.5665%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="12.3980%" y="357" width="0.0816%" height="15" fill="rgb(208,96,46)" fg:x="152" fg:w="1"/><text x="12.6480%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="12.3165%" y="453" width="0.2447%" height="15" fill="rgb(239,3,39)" fg:x="151" fg:w="3"/><text x="12.5665%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="12.3165%" y="437" width="0.2447%" height="15" fill="rgb(233,210,1)" fg:x="151" fg:w="3"/><text x="12.5665%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.4796%" y="421" width="0.0816%" height="15" fill="rgb(244,137,37)" fg:x="153" fg:w="1"/><text x="12.7296%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.4796%" y="405" width="0.0816%" height="15" fill="rgb(240,136,2)" fg:x="153" fg:w="1"/><text x="12.7296%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="12.5612%" y="453" width="0.2447%" height="15" fill="rgb(239,18,37)" fg:x="154" fg:w="3"/><text x="12.8112%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.6427%" y="437" width="0.1631%" height="15" fill="rgb(218,185,22)" fg:x="155" fg:w="2"/><text x="12.8927%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.7243%" y="421" width="0.0816%" height="15" fill="rgb(225,218,4)" fg:x="156" fg:w="1"/><text x="12.9743%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.7243%" y="405" width="0.0816%" height="15" fill="rgb(230,182,32)" fg:x="156" fg:w="1"/><text x="12.9743%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.7243%" y="389" width="0.0816%" height="15" fill="rgb(242,56,43)" fg:x="156" fg:w="1"/><text x="12.9743%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.7243%" y="373" width="0.0816%" height="15" fill="rgb(233,99,24)" fg:x="156" fg:w="1"/><text x="12.9743%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.7243%" y="357" width="0.0816%" height="15" fill="rgb(234,209,42)" fg:x="156" fg:w="1"/><text x="12.9743%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.8059%" y="437" width="0.0816%" height="15" fill="rgb(227,7,12)" fg:x="157" fg:w="1"/><text x="13.0559%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.8059%" y="421" width="0.0816%" height="15" fill="rgb(245,203,43)" fg:x="157" fg:w="1"/><text x="13.0559%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.8059%" y="405" width="0.0816%" height="15" fill="rgb(238,205,33)" fg:x="157" fg:w="1"/><text x="13.0559%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.8059%" y="389" width="0.0816%" height="15" fill="rgb(231,56,7)" fg:x="157" fg:w="1"/><text x="13.0559%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.8874%" y="421" width="0.1631%" height="15" fill="rgb(244,186,29)" fg:x="158" fg:w="2"/><text x="13.1374%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.8874%" y="405" width="0.1631%" height="15" fill="rgb(234,111,31)" fg:x="158" fg:w="2"/><text x="13.1374%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.9690%" y="389" width="0.0816%" height="15" fill="rgb(241,149,10)" fg:x="159" fg:w="1"/><text x="13.2190%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.9690%" y="373" width="0.0816%" height="15" fill="rgb(249,206,44)" fg:x="159" fg:w="1"/><text x="13.2190%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="13.1321%" y="405" width="0.2447%" height="15" fill="rgb(251,153,30)" fg:x="161" fg:w="3"/><text x="13.3821%" y="415.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="13.1321%" y="389" width="0.2447%" height="15" fill="rgb(239,152,38)" fg:x="161" fg:w="3"/><text x="13.3821%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="13.1321%" y="373" width="0.2447%" height="15" fill="rgb(249,139,47)" fg:x="161" fg:w="3"/><text x="13.3821%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="13.1321%" y="357" width="0.2447%" height="15" fill="rgb(244,64,35)" fg:x="161" fg:w="3"/><text x="13.3821%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="13.1321%" y="341" width="0.2447%" height="15" fill="rgb(216,46,15)" fg:x="161" fg:w="3"/><text x="13.3821%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="13.1321%" y="325" width="0.2447%" height="15" fill="rgb(250,74,19)" fg:x="161" fg:w="3"/><text x="13.3821%" y="335.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="13.1321%" y="309" width="0.2447%" height="15" fill="rgb(249,42,33)" fg:x="161" fg:w="3"/><text x="13.3821%" y="319.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="13.0506%" y="421" width="0.4894%" height="15" fill="rgb(242,149,17)" fg:x="160" fg:w="6"/><text x="13.3006%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.3768%" y="405" width="0.1631%" height="15" fill="rgb(244,29,21)" fg:x="164" fg:w="2"/><text x="13.6268%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.4584%" y="389" width="0.0816%" height="15" fill="rgb(220,130,37)" fg:x="165" fg:w="1"/><text x="13.7084%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.4584%" y="373" width="0.0816%" height="15" fill="rgb(211,67,2)" fg:x="165" fg:w="1"/><text x="13.7084%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.4584%" y="357" width="0.0816%" height="15" fill="rgb(235,68,52)" fg:x="165" fg:w="1"/><text x="13.7084%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.4584%" y="341" width="0.0816%" height="15" fill="rgb(246,142,3)" fg:x="165" fg:w="1"/><text x="13.7084%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.4584%" y="325" width="0.0816%" height="15" fill="rgb(241,25,7)" fg:x="165" fg:w="1"/><text x="13.7084%" y="335.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.82%)</title><rect x="12.8874%" y="437" width="0.8157%" height="15" fill="rgb(242,119,39)" fg:x="158" fg:w="10"/><text x="13.1374%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.5400%" y="421" width="0.1631%" height="15" fill="rgb(241,98,45)" fg:x="166" fg:w="2"/><text x="13.7900%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.6215%" y="405" width="0.0816%" height="15" fill="rgb(254,28,30)" fg:x="167" fg:w="1"/><text x="13.8715%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="13.6215%" y="389" width="0.0816%" height="15" fill="rgb(241,142,54)" fg:x="167" fg:w="1"/><text x="13.8715%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.14%)</title><rect x="12.8059%" y="453" width="1.1419%" height="15" fill="rgb(222,85,15)" fg:x="157" fg:w="14"/><text x="13.0559%" y="463.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="13.7031%" y="437" width="0.2447%" height="15" fill="rgb(210,85,47)" fg:x="168" fg:w="3"/><text x="13.9531%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.7847%" y="421" width="0.1631%" height="15" fill="rgb(224,206,25)" fg:x="169" fg:w="2"/><text x="14.0347%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.8662%" y="405" width="0.0816%" height="15" fill="rgb(243,201,19)" fg:x="170" fg:w="1"/><text x="14.1162%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.8662%" y="389" width="0.0816%" height="15" fill="rgb(236,59,4)" fg:x="170" fg:w="1"/><text x="14.1162%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.8662%" y="373" width="0.0816%" height="15" fill="rgb(254,179,45)" fg:x="170" fg:w="1"/><text x="14.1162%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.8662%" y="357" width="0.0816%" height="15" fill="rgb(226,14,10)" fg:x="170" fg:w="1"/><text x="14.1162%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (22 samples, 1.79%)</title><rect x="12.2349%" y="469" width="1.7945%" height="15" fill="rgb(244,27,41)" fg:x="150" fg:w="22"/><text x="12.4849%" y="479.50">s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.9478%" y="453" width="0.0816%" height="15" fill="rgb(235,35,32)" fg:x="171" fg:w="1"/><text x="14.1978%" y="463.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="14.1109%" y="389" width="0.0816%" height="15" fill="rgb(218,68,31)" fg:x="173" fg:w="1"/><text x="14.3609%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="14.1109%" y="373" width="0.0816%" height="15" fill="rgb(207,120,37)" fg:x="173" fg:w="1"/><text x="14.3609%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (30 samples, 2.45%)</title><rect x="11.8271%" y="485" width="2.4470%" height="15" fill="rgb(227,98,0)" fg:x="145" fg:w="30"/><text x="12.0771%" y="495.50">se..</text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="14.0294%" y="469" width="0.2447%" height="15" fill="rgb(207,7,3)" fg:x="172" fg:w="3"/><text x="14.2794%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="14.0294%" y="453" width="0.2447%" height="15" fill="rgb(206,98,19)" fg:x="172" fg:w="3"/><text x="14.2794%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="14.0294%" y="437" width="0.2447%" height="15" fill="rgb(217,5,26)" fg:x="172" fg:w="3"/><text x="14.2794%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="14.1109%" y="421" width="0.1631%" height="15" fill="rgb(235,190,38)" fg:x="173" fg:w="2"/><text x="14.3609%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="14.1109%" y="405" width="0.1631%" height="15" fill="rgb(247,86,24)" fg:x="173" fg:w="2"/><text x="14.3609%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.1925%" y="389" width="0.0816%" height="15" fill="rgb(205,101,16)" fg:x="174" fg:w="1"/><text x="14.4425%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (33 samples, 2.69%)</title><rect x="11.6639%" y="501" width="2.6917%" height="15" fill="rgb(246,168,33)" fg:x="143" fg:w="33"/><text x="11.9139%" y="511.50">&lt;s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.2741%" y="485" width="0.0816%" height="15" fill="rgb(231,114,1)" fg:x="175" fg:w="1"/><text x="14.5241%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.2741%" y="469" width="0.0816%" height="15" fill="rgb(207,184,53)" fg:x="175" fg:w="1"/><text x="14.5241%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.2741%" y="453" width="0.0816%" height="15" fill="rgb(224,95,51)" fg:x="175" fg:w="1"/><text x="14.5241%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.2741%" y="437" width="0.0816%" height="15" fill="rgb(212,188,45)" fg:x="175" fg:w="1"/><text x="14.5241%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.3556%" y="453" width="0.1631%" height="15" fill="rgb(223,154,38)" fg:x="176" fg:w="2"/><text x="14.6056%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="14.5188%" y="453" width="0.1631%" height="15" fill="rgb(251,22,52)" fg:x="178" fg:w="2"/><text x="14.7688%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.5188%" y="437" width="0.1631%" height="15" fill="rgb(229,209,22)" fg:x="178" fg:w="2"/><text x="14.7688%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.6819%" y="437" width="0.0816%" height="15" fill="rgb(234,138,34)" fg:x="180" fg:w="1"/><text x="14.9319%" y="447.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="14.8450%" y="421" width="0.2447%" height="15" fill="rgb(212,95,11)" fg:x="182" fg:w="3"/><text x="15.0950%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.0897%" y="405" width="0.0816%" height="15" fill="rgb(240,179,47)" fg:x="185" fg:w="1"/><text x="15.3397%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.90%)</title><rect x="14.3556%" y="501" width="0.8972%" height="15" fill="rgb(240,163,11)" fg:x="176" fg:w="11"/><text x="14.6056%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (11 samples, 0.90%)</title><rect x="14.3556%" y="485" width="0.8972%" height="15" fill="rgb(236,37,12)" fg:x="176" fg:w="11"/><text x="14.6056%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.90%)</title><rect x="14.3556%" y="469" width="0.8972%" height="15" fill="rgb(232,164,16)" fg:x="176" fg:w="11"/><text x="14.6056%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="14.6819%" y="453" width="0.5710%" height="15" fill="rgb(244,205,15)" fg:x="180" fg:w="7"/><text x="14.9319%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="14.7635%" y="437" width="0.4894%" height="15" fill="rgb(223,117,47)" fg:x="181" fg:w="6"/><text x="15.0135%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="15.0897%" y="421" width="0.1631%" height="15" fill="rgb(244,107,35)" fg:x="185" fg:w="2"/><text x="15.3397%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.1713%" y="405" width="0.0816%" height="15" fill="rgb(205,140,8)" fg:x="186" fg:w="1"/><text x="15.4213%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.1713%" y="389" width="0.0816%" height="15" fill="rgb(228,84,46)" fg:x="186" fg:w="1"/><text x="15.4213%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.4160%" y="453" width="0.0816%" height="15" fill="rgb(254,188,9)" fg:x="189" fg:w="1"/><text x="15.6660%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.4160%" y="437" width="0.0816%" height="15" fill="rgb(206,112,54)" fg:x="189" fg:w="1"/><text x="15.6660%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.6607%" y="421" width="0.0816%" height="15" fill="rgb(216,84,49)" fg:x="192" fg:w="1"/><text x="15.9107%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (5 samples, 0.41%)</title><rect x="15.4976%" y="453" width="0.4078%" height="15" fill="rgb(214,194,35)" fg:x="190" fg:w="5"/><text x="15.7476%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="15.4976%" y="437" width="0.4078%" height="15" fill="rgb(249,28,3)" fg:x="190" fg:w="5"/><text x="15.7476%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.7423%" y="421" width="0.1631%" height="15" fill="rgb(222,56,52)" fg:x="193" fg:w="2"/><text x="15.9923%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.7423%" y="405" width="0.1631%" height="15" fill="rgb(245,217,50)" fg:x="193" fg:w="2"/><text x="15.9923%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.8238%" y="389" width="0.0816%" height="15" fill="rgb(213,201,24)" fg:x="194" fg:w="1"/><text x="16.0738%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.0685%" y="405" width="0.0816%" height="15" fill="rgb(248,116,28)" fg:x="197" fg:w="1"/><text x="16.3185%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.0685%" y="389" width="0.0816%" height="15" fill="rgb(219,72,43)" fg:x="197" fg:w="1"/><text x="16.3185%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0685%" y="373" width="0.0816%" height="15" fill="rgb(209,138,14)" fg:x="197" fg:w="1"/><text x="16.3185%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="16.1501%" y="405" width="0.0816%" height="15" fill="rgb(222,18,33)" fg:x="198" fg:w="1"/><text x="16.4001%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.1501%" y="389" width="0.0816%" height="15" fill="rgb(213,199,7)" fg:x="198" fg:w="1"/><text x="16.4001%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.1501%" y="373" width="0.0816%" height="15" fill="rgb(250,110,10)" fg:x="198" fg:w="1"/><text x="16.4001%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="16.2316%" y="357" width="0.2447%" height="15" fill="rgb(248,123,6)" fg:x="199" fg:w="3"/><text x="16.4816%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3948%" y="341" width="0.0816%" height="15" fill="rgb(206,91,31)" fg:x="201" fg:w="1"/><text x="16.6448%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.3948%" y="325" width="0.0816%" height="15" fill="rgb(211,154,13)" fg:x="201" fg:w="1"/><text x="16.6448%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="16.0685%" y="421" width="0.5710%" height="15" fill="rgb(225,148,7)" fg:x="197" fg:w="7"/><text x="16.3185%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="16.2316%" y="405" width="0.4078%" height="15" fill="rgb(220,160,43)" fg:x="199" fg:w="5"/><text x="16.4816%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="16.2316%" y="389" width="0.4078%" height="15" fill="rgb(213,52,39)" fg:x="199" fg:w="5"/><text x="16.4816%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="16.2316%" y="373" width="0.4078%" height="15" fill="rgb(243,137,7)" fg:x="199" fg:w="5"/><text x="16.4816%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.4763%" y="357" width="0.1631%" height="15" fill="rgb(230,79,13)" fg:x="202" fg:w="2"/><text x="16.7263%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.82%)</title><rect x="15.9869%" y="437" width="0.8157%" height="15" fill="rgb(247,105,23)" fg:x="196" fg:w="10"/><text x="16.2369%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="16.6395%" y="421" width="0.1631%" height="15" fill="rgb(223,179,41)" fg:x="204" fg:w="2"/><text x="16.8895%" y="431.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="16.7210%" y="405" width="0.0816%" height="15" fill="rgb(218,9,34)" fg:x="205" fg:w="1"/><text x="16.9710%" y="415.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="16.7210%" y="389" width="0.0816%" height="15" fill="rgb(222,106,8)" fg:x="205" fg:w="1"/><text x="16.9710%" y="399.50"></text></g><g><title>engine::session::Session::flush (66 samples, 5.38%)</title><rect x="11.5008%" y="613" width="5.3834%" height="15" fill="rgb(211,220,0)" fg:x="141" fg:w="66"/><text x="11.7508%" y="623.50">engine:..</text></g><g><title>engine::session::Session::save_changes (66 samples, 5.38%)</title><rect x="11.5008%" y="597" width="5.3834%" height="15" fill="rgb(229,52,16)" fg:x="141" fg:w="66"/><text x="11.7508%" y="607.50">engine:..</text></g><g><title>engine::session::state::State::close (66 samples, 5.38%)</title><rect x="11.5008%" y="581" width="5.3834%" height="15" fill="rgb(212,155,18)" fg:x="141" fg:w="66"/><text x="11.7508%" y="591.50">engine:..</text></g><g><title>engine::session::state::State::flush_entities (66 samples, 5.38%)</title><rect x="11.5008%" y="565" width="5.3834%" height="15" fill="rgb(242,21,14)" fg:x="141" fg:w="66"/><text x="11.7508%" y="575.50">engine:..</text></g><g><title>core::iter::adapters::try_process (65 samples, 5.30%)</title><rect x="11.5824%" y="549" width="5.3018%" height="15" fill="rgb(222,19,48)" fg:x="142" fg:w="65"/><text x="11.8324%" y="559.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (65 samples, 5.30%)</title><rect x="11.5824%" y="533" width="5.3018%" height="15" fill="rgb(232,45,27)" fg:x="142" fg:w="65"/><text x="11.8324%" y="543.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (64 samples, 5.22%)</title><rect x="11.6639%" y="517" width="5.2202%" height="15" fill="rgb(249,103,42)" fg:x="143" fg:w="64"/><text x="11.9139%" y="527.50">engine..</text></g><g><title>kernel::model::any_entity_changes (20 samples, 1.63%)</title><rect x="15.2529%" y="501" width="1.6313%" height="15" fill="rgb(246,81,33)" fg:x="187" fg:w="20"/><text x="15.5029%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (19 samples, 1.55%)</title><rect x="15.3344%" y="485" width="1.5498%" height="15" fill="rgb(252,33,42)" fg:x="188" fg:w="19"/><text x="15.5844%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (19 samples, 1.55%)</title><rect x="15.3344%" y="469" width="1.5498%" height="15" fill="rgb(209,212,41)" fg:x="188" fg:w="19"/><text x="15.5844%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.98%)</title><rect x="15.9054%" y="453" width="0.9788%" height="15" fill="rgb(207,154,6)" fg:x="195" fg:w="12"/><text x="16.1554%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.8026%" y="437" width="0.0816%" height="15" fill="rgb(223,64,47)" fg:x="206" fg:w="1"/><text x="17.0526%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="16.8842%" y="549" width="0.1631%" height="15" fill="rgb(211,161,38)" fg:x="207" fg:w="2"/><text x="17.1342%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="16.8842%" y="533" width="0.1631%" height="15" fill="rgb(219,138,40)" fg:x="207" fg:w="2"/><text x="17.1342%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="16.8842%" y="517" width="0.1631%" height="15" fill="rgb(241,228,46)" fg:x="207" fg:w="2"/><text x="17.1342%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.8842%" y="501" width="0.1631%" height="15" fill="rgb(223,209,38)" fg:x="207" fg:w="2"/><text x="17.1342%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.8842%" y="485" width="0.1631%" height="15" fill="rgb(236,164,45)" fg:x="207" fg:w="2"/><text x="17.1342%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.8842%" y="469" width="0.1631%" height="15" fill="rgb(231,15,5)" fg:x="207" fg:w="2"/><text x="17.1342%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="16.8842%" y="453" width="0.1631%" height="15" fill="rgb(252,35,15)" fg:x="207" fg:w="2"/><text x="17.1342%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.9657%" y="437" width="0.0816%" height="15" fill="rgb(248,181,18)" fg:x="208" fg:w="1"/><text x="17.2157%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.9657%" y="421" width="0.0816%" height="15" fill="rgb(233,39,42)" fg:x="208" fg:w="1"/><text x="17.2157%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.9657%" y="405" width="0.0816%" height="15" fill="rgb(238,110,33)" fg:x="208" fg:w="1"/><text x="17.2157%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.9657%" y="389" width="0.0816%" height="15" fill="rgb(233,195,10)" fg:x="208" fg:w="1"/><text x="17.2157%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.9657%" y="373" width="0.0816%" height="15" fill="rgb(254,105,3)" fg:x="208" fg:w="1"/><text x="17.2157%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.9657%" y="357" width="0.0816%" height="15" fill="rgb(221,225,9)" fg:x="208" fg:w="1"/><text x="17.2157%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.9657%" y="341" width="0.0816%" height="15" fill="rgb(224,227,45)" fg:x="208" fg:w="1"/><text x="17.2157%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.9657%" y="325" width="0.0816%" height="15" fill="rgb(229,198,43)" fg:x="208" fg:w="1"/><text x="17.2157%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.9657%" y="309" width="0.0816%" height="15" fill="rgb(206,209,35)" fg:x="208" fg:w="1"/><text x="17.2157%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.9657%" y="293" width="0.0816%" height="15" fill="rgb(245,195,53)" fg:x="208" fg:w="1"/><text x="17.2157%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.9657%" y="277" width="0.0816%" height="15" fill="rgb(240,92,26)" fg:x="208" fg:w="1"/><text x="17.2157%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="17.0473%" y="533" width="0.1631%" height="15" fill="rgb(207,40,23)" fg:x="209" fg:w="2"/><text x="17.2973%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.1289%" y="517" width="0.0816%" height="15" fill="rgb(223,111,35)" fg:x="210" fg:w="1"/><text x="17.3789%" y="527.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="17.2104%" y="533" width="0.0816%" height="15" fill="rgb(229,147,28)" fg:x="211" fg:w="1"/><text x="17.4604%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.2104%" y="517" width="0.0816%" height="15" fill="rgb(211,29,28)" fg:x="211" fg:w="1"/><text x="17.4604%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.2920%" y="501" width="0.0816%" height="15" fill="rgb(228,72,33)" fg:x="212" fg:w="1"/><text x="17.5420%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.2920%" y="485" width="0.0816%" height="15" fill="rgb(205,214,31)" fg:x="212" fg:w="1"/><text x="17.5420%" y="495.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (7 samples, 0.57%)</title><rect x="16.8842%" y="581" width="0.5710%" height="15" fill="rgb(224,111,15)" fg:x="207" fg:w="7"/><text x="17.1342%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (7 samples, 0.57%)</title><rect x="16.8842%" y="565" width="0.5710%" height="15" fill="rgb(253,21,26)" fg:x="207" fg:w="7"/><text x="17.1342%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (5 samples, 0.41%)</title><rect x="17.0473%" y="549" width="0.4078%" height="15" fill="rgb(245,139,43)" fg:x="209" fg:w="5"/><text x="17.2973%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="17.2920%" y="533" width="0.1631%" height="15" fill="rgb(252,170,7)" fg:x="212" fg:w="2"/><text x="17.5420%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="17.2920%" y="517" width="0.1631%" height="15" fill="rgb(231,118,14)" fg:x="212" fg:w="2"/><text x="17.5420%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.3736%" y="501" width="0.0816%" height="15" fill="rgb(238,83,0)" fg:x="213" fg:w="1"/><text x="17.6236%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3736%" y="485" width="0.0816%" height="15" fill="rgb(221,39,39)" fg:x="213" fg:w="1"/><text x="17.6236%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.3736%" y="469" width="0.0816%" height="15" fill="rgb(222,119,46)" fg:x="213" fg:w="1"/><text x="17.6236%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3736%" y="453" width="0.0816%" height="15" fill="rgb(222,165,49)" fg:x="213" fg:w="1"/><text x="17.6236%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.3736%" y="437" width="0.0816%" height="15" fill="rgb(219,113,52)" fg:x="213" fg:w="1"/><text x="17.6236%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3736%" y="421" width="0.0816%" height="15" fill="rgb(214,7,15)" fg:x="213" fg:w="1"/><text x="17.6236%" y="431.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.4551%" y="581" width="0.0816%" height="15" fill="rgb(235,32,4)" fg:x="214" fg:w="1"/><text x="17.7051%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="17.4551%" y="565" width="0.0816%" height="15" fill="rgb(238,90,54)" fg:x="214" fg:w="1"/><text x="17.7051%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.4551%" y="549" width="0.0816%" height="15" fill="rgb(213,208,19)" fg:x="214" fg:w="1"/><text x="17.7051%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.4551%" y="533" width="0.0816%" height="15" fill="rgb(233,156,4)" fg:x="214" fg:w="1"/><text x="17.7051%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.4551%" y="517" width="0.0816%" height="15" fill="rgb(207,194,5)" fg:x="214" fg:w="1"/><text x="17.7051%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.4551%" y="501" width="0.0816%" height="15" fill="rgb(206,111,30)" fg:x="214" fg:w="1"/><text x="17.7051%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4551%" y="485" width="0.0816%" height="15" fill="rgb(243,70,54)" fg:x="214" fg:w="1"/><text x="17.7051%" y="495.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="17.5367%" y="517" width="0.0816%" height="15" fill="rgb(242,28,8)" fg:x="215" fg:w="1"/><text x="17.7867%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.5367%" y="501" width="0.0816%" height="15" fill="rgb(219,106,18)" fg:x="215" fg:w="1"/><text x="17.7867%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.6183%" y="485" width="0.0816%" height="15" fill="rgb(244,222,10)" fg:x="216" fg:w="1"/><text x="17.8683%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.6183%" y="469" width="0.0816%" height="15" fill="rgb(236,179,52)" fg:x="216" fg:w="1"/><text x="17.8683%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.6183%" y="453" width="0.0816%" height="15" fill="rgb(213,23,39)" fg:x="216" fg:w="1"/><text x="17.8683%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.6183%" y="437" width="0.0816%" height="15" fill="rgb(238,48,10)" fg:x="216" fg:w="1"/><text x="17.8683%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.6183%" y="421" width="0.0816%" height="15" fill="rgb(251,196,23)" fg:x="216" fg:w="1"/><text x="17.8683%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.6183%" y="405" width="0.0816%" height="15" fill="rgb(250,152,24)" fg:x="216" fg:w="1"/><text x="17.8683%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.6183%" y="389" width="0.0816%" height="15" fill="rgb(209,150,17)" fg:x="216" fg:w="1"/><text x="17.8683%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.41%)</title><rect x="17.5367%" y="533" width="0.4078%" height="15" fill="rgb(234,202,34)" fg:x="215" fg:w="5"/><text x="17.7867%" y="543.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.33%)</title><rect x="17.6183%" y="517" width="0.3263%" height="15" fill="rgb(253,148,53)" fg:x="216" fg:w="4"/><text x="17.8683%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="17.6183%" y="501" width="0.3263%" height="15" fill="rgb(218,129,16)" fg:x="216" fg:w="4"/><text x="17.8683%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="17.6998%" y="485" width="0.2447%" height="15" fill="rgb(216,85,19)" fg:x="217" fg:w="3"/><text x="17.9498%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="17.6998%" y="469" width="0.2447%" height="15" fill="rgb(235,228,7)" fg:x="217" fg:w="3"/><text x="17.9498%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="17.6998%" y="453" width="0.2447%" height="15" fill="rgb(245,175,0)" fg:x="217" fg:w="3"/><text x="17.9498%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="17.6998%" y="437" width="0.2447%" height="15" fill="rgb(208,168,36)" fg:x="217" fg:w="3"/><text x="17.9498%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="17.6998%" y="421" width="0.2447%" height="15" fill="rgb(246,171,24)" fg:x="217" fg:w="3"/><text x="17.9498%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="17.6998%" y="405" width="0.2447%" height="15" fill="rgb(215,142,24)" fg:x="217" fg:w="3"/><text x="17.9498%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.8630%" y="389" width="0.0816%" height="15" fill="rgb(250,187,7)" fg:x="219" fg:w="1"/><text x="18.1130%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (6 samples, 0.49%)</title><rect x="17.5367%" y="581" width="0.4894%" height="15" fill="rgb(228,66,33)" fg:x="215" fg:w="6"/><text x="17.7867%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (6 samples, 0.49%)</title><rect x="17.5367%" y="565" width="0.4894%" height="15" fill="rgb(234,215,21)" fg:x="215" fg:w="6"/><text x="17.7867%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (6 samples, 0.49%)</title><rect x="17.5367%" y="549" width="0.4894%" height="15" fill="rgb(222,191,20)" fg:x="215" fg:w="6"/><text x="17.7867%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="17.9445%" y="533" width="0.0816%" height="15" fill="rgb(245,79,54)" fg:x="220" fg:w="1"/><text x="18.1945%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="17.9445%" y="517" width="0.0816%" height="15" fill="rgb(240,10,37)" fg:x="220" fg:w="1"/><text x="18.1945%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="17.9445%" y="501" width="0.0816%" height="15" fill="rgb(214,192,32)" fg:x="220" fg:w="1"/><text x="18.1945%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.9445%" y="485" width="0.0816%" height="15" fill="rgb(209,36,54)" fg:x="220" fg:w="1"/><text x="18.1945%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.9445%" y="469" width="0.0816%" height="15" fill="rgb(220,10,11)" fg:x="220" fg:w="1"/><text x="18.1945%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.9445%" y="453" width="0.0816%" height="15" fill="rgb(221,106,17)" fg:x="220" fg:w="1"/><text x="18.1945%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.9445%" y="437" width="0.0816%" height="15" fill="rgb(251,142,44)" fg:x="220" fg:w="1"/><text x="18.1945%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.9445%" y="421" width="0.0816%" height="15" fill="rgb(238,13,15)" fg:x="220" fg:w="1"/><text x="18.1945%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.9445%" y="405" width="0.0816%" height="15" fill="rgb(208,107,27)" fg:x="220" fg:w="1"/><text x="18.1945%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.9445%" y="389" width="0.0816%" height="15" fill="rgb(205,136,37)" fg:x="220" fg:w="1"/><text x="18.1945%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.9445%" y="373" width="0.0816%" height="15" fill="rgb(250,205,27)" fg:x="220" fg:w="1"/><text x="18.1945%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.9445%" y="357" width="0.0816%" height="15" fill="rgb(210,80,43)" fg:x="220" fg:w="1"/><text x="18.1945%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.9445%" y="341" width="0.0816%" height="15" fill="rgb(247,160,36)" fg:x="220" fg:w="1"/><text x="18.1945%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.9445%" y="325" width="0.0816%" height="15" fill="rgb(234,13,49)" fg:x="220" fg:w="1"/><text x="18.1945%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.9445%" y="309" width="0.0816%" height="15" fill="rgb(234,122,0)" fg:x="220" fg:w="1"/><text x="18.1945%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.9445%" y="293" width="0.0816%" height="15" fill="rgb(207,146,38)" fg:x="220" fg:w="1"/><text x="18.1945%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.9445%" y="277" width="0.0816%" height="15" fill="rgb(207,177,25)" fg:x="220" fg:w="1"/><text x="18.1945%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.9445%" y="261" width="0.0816%" height="15" fill="rgb(211,178,42)" fg:x="220" fg:w="1"/><text x="18.1945%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.0261%" y="565" width="0.0816%" height="15" fill="rgb(230,69,54)" fg:x="221" fg:w="1"/><text x="18.2761%" y="575.50"></text></g><g><title>plugins_core::build::Build::holding (16 samples, 1.31%)</title><rect x="16.8842%" y="613" width="1.3051%" height="15" fill="rgb(214,135,41)" fg:x="207" fg:w="16"/><text x="17.1342%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (16 samples, 1.31%)</title><rect x="16.8842%" y="597" width="1.3051%" height="15" fill="rgb(237,67,25)" fg:x="207" fg:w="16"/><text x="17.1342%" y="607.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="18.0261%" y="581" width="0.1631%" height="15" fill="rgb(222,189,50)" fg:x="221" fg:w="2"/><text x="18.2761%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.1077%" y="565" width="0.0816%" height="15" fill="rgb(245,148,34)" fg:x="222" fg:w="1"/><text x="18.3577%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.1077%" y="549" width="0.0816%" height="15" fill="rgb(222,29,6)" fg:x="222" fg:w="1"/><text x="18.3577%" y="559.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="18.1077%" y="533" width="0.0816%" height="15" fill="rgb(221,189,43)" fg:x="222" fg:w="1"/><text x="18.3577%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="18.1077%" y="517" width="0.0816%" height="15" fill="rgb(207,36,27)" fg:x="222" fg:w="1"/><text x="18.3577%" y="527.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="18.1892%" y="613" width="0.0816%" height="15" fill="rgb(217,90,24)" fg:x="223" fg:w="1"/><text x="18.4392%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="18.1892%" y="597" width="0.0816%" height="15" fill="rgb(224,66,35)" fg:x="223" fg:w="1"/><text x="18.4392%" y="607.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="18.1892%" y="581" width="0.0816%" height="15" fill="rgb(221,13,50)" fg:x="223" fg:w="1"/><text x="18.4392%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1892%" y="565" width="0.0816%" height="15" fill="rgb(236,68,49)" fg:x="223" fg:w="1"/><text x="18.4392%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1892%" y="549" width="0.0816%" height="15" fill="rgb(229,146,28)" fg:x="223" fg:w="1"/><text x="18.4392%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="18.1892%" y="533" width="0.0816%" height="15" fill="rgb(225,31,38)" fg:x="223" fg:w="1"/><text x="18.4392%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1892%" y="517" width="0.0816%" height="15" fill="rgb(250,208,3)" fg:x="223" fg:w="1"/><text x="18.4392%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="18.2708%" y="565" width="0.0816%" height="15" fill="rgb(246,54,23)" fg:x="224" fg:w="1"/><text x="18.5208%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.2708%" y="549" width="0.0816%" height="15" fill="rgb(243,76,11)" fg:x="224" fg:w="1"/><text x="18.5208%" y="559.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2708%" y="533" width="0.0816%" height="15" fill="rgb(245,21,50)" fg:x="224" fg:w="1"/><text x="18.5208%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.2708%" y="517" width="0.0816%" height="15" fill="rgb(228,9,43)" fg:x="224" fg:w="1"/><text x="18.5208%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2708%" y="501" width="0.0816%" height="15" fill="rgb(208,100,47)" fg:x="224" fg:w="1"/><text x="18.5208%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="18.3524%" y="549" width="0.0816%" height="15" fill="rgb(232,26,8)" fg:x="225" fg:w="1"/><text x="18.6024%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="18.3524%" y="533" width="0.0816%" height="15" fill="rgb(216,166,38)" fg:x="225" fg:w="1"/><text x="18.6024%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="18.3524%" y="517" width="0.0816%" height="15" fill="rgb(251,202,51)" fg:x="225" fg:w="1"/><text x="18.6024%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="18.3524%" y="501" width="0.0816%" height="15" fill="rgb(254,216,34)" fg:x="225" fg:w="1"/><text x="18.6024%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.3524%" y="485" width="0.0816%" height="15" fill="rgb(251,32,27)" fg:x="225" fg:w="1"/><text x="18.6024%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.3524%" y="469" width="0.0816%" height="15" fill="rgb(208,127,28)" fg:x="225" fg:w="1"/><text x="18.6024%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.3524%" y="453" width="0.0816%" height="15" fill="rgb(224,137,22)" fg:x="225" fg:w="1"/><text x="18.6024%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.3524%" y="437" width="0.0816%" height="15" fill="rgb(254,70,32)" fg:x="225" fg:w="1"/><text x="18.6024%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3524%" y="421" width="0.0816%" height="15" fill="rgb(229,75,37)" fg:x="225" fg:w="1"/><text x="18.6024%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3524%" y="405" width="0.0816%" height="15" fill="rgb(252,64,23)" fg:x="225" fg:w="1"/><text x="18.6024%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="18.4339%" y="549" width="0.0816%" height="15" fill="rgb(232,162,48)" fg:x="226" fg:w="1"/><text x="18.6839%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="18.3524%" y="565" width="0.2447%" height="15" fill="rgb(246,160,12)" fg:x="225" fg:w="3"/><text x="18.6024%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="18.5155%" y="549" width="0.0816%" height="15" fill="rgb(247,166,0)" fg:x="227" fg:w="1"/><text x="18.7655%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.5155%" y="533" width="0.0816%" height="15" fill="rgb(249,219,21)" fg:x="227" fg:w="1"/><text x="18.7655%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="18.5155%" y="517" width="0.0816%" height="15" fill="rgb(205,209,3)" fg:x="227" fg:w="1"/><text x="18.7655%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.5155%" y="501" width="0.0816%" height="15" fill="rgb(243,44,1)" fg:x="227" fg:w="1"/><text x="18.7655%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.5155%" y="485" width="0.0816%" height="15" fill="rgb(206,159,16)" fg:x="227" fg:w="1"/><text x="18.7655%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.5155%" y="469" width="0.0816%" height="15" fill="rgb(244,77,30)" fg:x="227" fg:w="1"/><text x="18.7655%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5155%" y="453" width="0.0816%" height="15" fill="rgb(218,69,12)" fg:x="227" fg:w="1"/><text x="18.7655%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.5971%" y="533" width="0.0816%" height="15" fill="rgb(212,87,7)" fg:x="228" fg:w="1"/><text x="18.8471%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="18.5971%" y="549" width="0.1631%" height="15" fill="rgb(245,114,25)" fg:x="228" fg:w="2"/><text x="18.8471%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="18.6786%" y="533" width="0.0816%" height="15" fill="rgb(210,61,42)" fg:x="229" fg:w="1"/><text x="18.9286%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="18.6786%" y="517" width="0.0816%" height="15" fill="rgb(211,52,33)" fg:x="229" fg:w="1"/><text x="18.9286%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.6786%" y="501" width="0.0816%" height="15" fill="rgb(234,58,33)" fg:x="229" fg:w="1"/><text x="18.9286%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.6786%" y="485" width="0.0816%" height="15" fill="rgb(220,115,36)" fg:x="229" fg:w="1"/><text x="18.9286%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.6786%" y="469" width="0.0816%" height="15" fill="rgb(243,153,54)" fg:x="229" fg:w="1"/><text x="18.9286%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.6786%" y="453" width="0.0816%" height="15" fill="rgb(251,47,18)" fg:x="229" fg:w="1"/><text x="18.9286%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.6786%" y="437" width="0.0816%" height="15" fill="rgb(242,102,42)" fg:x="229" fg:w="1"/><text x="18.9286%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.6786%" y="421" width="0.0816%" height="15" fill="rgb(234,31,38)" fg:x="229" fg:w="1"/><text x="18.9286%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.6786%" y="405" width="0.0816%" height="15" fill="rgb(221,117,51)" fg:x="229" fg:w="1"/><text x="18.9286%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="18.7602%" y="549" width="0.0816%" height="15" fill="rgb(212,20,18)" fg:x="230" fg:w="1"/><text x="19.0102%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="18.7602%" y="533" width="0.0816%" height="15" fill="rgb(245,133,36)" fg:x="230" fg:w="1"/><text x="19.0102%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="18.7602%" y="517" width="0.0816%" height="15" fill="rgb(212,6,19)" fg:x="230" fg:w="1"/><text x="19.0102%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.7602%" y="501" width="0.0816%" height="15" fill="rgb(218,1,36)" fg:x="230" fg:w="1"/><text x="19.0102%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.7602%" y="485" width="0.0816%" height="15" fill="rgb(246,84,54)" fg:x="230" fg:w="1"/><text x="19.0102%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.7602%" y="469" width="0.0816%" height="15" fill="rgb(242,110,6)" fg:x="230" fg:w="1"/><text x="19.0102%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.7602%" y="453" width="0.0816%" height="15" fill="rgb(214,47,5)" fg:x="230" fg:w="1"/><text x="19.0102%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.7602%" y="437" width="0.0816%" height="15" fill="rgb(218,159,25)" fg:x="230" fg:w="1"/><text x="19.0102%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.7602%" y="421" width="0.0816%" height="15" fill="rgb(215,211,28)" fg:x="230" fg:w="1"/><text x="19.0102%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::new (4 samples, 0.33%)</title><rect x="18.5971%" y="565" width="0.3263%" height="15" fill="rgb(238,59,32)" fg:x="228" fg:w="4"/><text x="18.8471%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="18.8418%" y="549" width="0.0816%" height="15" fill="rgb(226,82,3)" fg:x="231" fg:w="1"/><text x="19.0918%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="18.8418%" y="533" width="0.0816%" height="15" fill="rgb(240,164,32)" fg:x="231" fg:w="1"/><text x="19.0918%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="18.8418%" y="517" width="0.0816%" height="15" fill="rgb(232,46,7)" fg:x="231" fg:w="1"/><text x="19.0918%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="18.8418%" y="501" width="0.0816%" height="15" fill="rgb(229,129,53)" fg:x="231" fg:w="1"/><text x="19.0918%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.8418%" y="485" width="0.0816%" height="15" fill="rgb(234,188,29)" fg:x="231" fg:w="1"/><text x="19.0918%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.8418%" y="469" width="0.0816%" height="15" fill="rgb(246,141,4)" fg:x="231" fg:w="1"/><text x="19.0918%" y="479.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="18.8418%" y="453" width="0.0816%" height="15" fill="rgb(229,23,39)" fg:x="231" fg:w="1"/><text x="19.0918%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="18.8418%" y="437" width="0.0816%" height="15" fill="rgb(206,12,3)" fg:x="231" fg:w="1"/><text x="19.0918%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="18.8418%" y="421" width="0.0816%" height="15" fill="rgb(252,226,20)" fg:x="231" fg:w="1"/><text x="19.0918%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="18.8418%" y="405" width="0.0816%" height="15" fill="rgb(216,123,35)" fg:x="231" fg:w="1"/><text x="19.0918%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="18.8418%" y="389" width="0.0816%" height="15" fill="rgb(212,68,40)" fg:x="231" fg:w="1"/><text x="19.0918%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="18.8418%" y="373" width="0.0816%" height="15" fill="rgb(254,125,32)" fg:x="231" fg:w="1"/><text x="19.0918%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.8418%" y="357" width="0.0816%" height="15" fill="rgb(253,97,22)" fg:x="231" fg:w="1"/><text x="19.0918%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="18.8418%" y="341" width="0.0816%" height="15" fill="rgb(241,101,14)" fg:x="231" fg:w="1"/><text x="19.0918%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.8418%" y="325" width="0.0816%" height="15" fill="rgb(238,103,29)" fg:x="231" fg:w="1"/><text x="19.0918%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="18.8418%" y="309" width="0.0816%" height="15" fill="rgb(233,195,47)" fg:x="231" fg:w="1"/><text x="19.0918%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="18.8418%" y="293" width="0.0816%" height="15" fill="rgb(246,218,30)" fg:x="231" fg:w="1"/><text x="19.0918%" y="303.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="18.8418%" y="277" width="0.0816%" height="15" fill="rgb(219,145,47)" fg:x="231" fg:w="1"/><text x="19.0918%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.8418%" y="261" width="0.0816%" height="15" fill="rgb(243,12,26)" fg:x="231" fg:w="1"/><text x="19.0918%" y="271.50"></text></g><g><title>plugins_core::build::Build::into_entry (9 samples, 0.73%)</title><rect x="18.2708%" y="597" width="0.7341%" height="15" fill="rgb(214,87,16)" fg:x="224" fg:w="9"/><text x="18.5208%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.73%)</title><rect x="18.2708%" y="581" width="0.7341%" height="15" fill="rgb(208,99,42)" fg:x="224" fg:w="9"/><text x="18.5208%" y="591.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="18.9233%" y="565" width="0.0816%" height="15" fill="rgb(253,99,2)" fg:x="232" fg:w="1"/><text x="19.1733%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="18.9233%" y="549" width="0.0816%" height="15" fill="rgb(220,168,23)" fg:x="232" fg:w="1"/><text x="19.1733%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="18.9233%" y="533" width="0.0816%" height="15" fill="rgb(242,38,24)" fg:x="232" fg:w="1"/><text x="19.1733%" y="543.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="19.0049%" y="581" width="0.0816%" height="15" fill="rgb(225,182,9)" fg:x="233" fg:w="1"/><text x="19.2549%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="19.0049%" y="565" width="0.0816%" height="15" fill="rgb(243,178,37)" fg:x="233" fg:w="1"/><text x="19.2549%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="19.0049%" y="549" width="0.0816%" height="15" fill="rgb(232,139,19)" fg:x="233" fg:w="1"/><text x="19.2549%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.0049%" y="533" width="0.0816%" height="15" fill="rgb(225,201,24)" fg:x="233" fg:w="1"/><text x="19.2549%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.0049%" y="517" width="0.0816%" height="15" fill="rgb(221,47,46)" fg:x="233" fg:w="1"/><text x="19.2549%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="19.1680%" y="533" width="0.1631%" height="15" fill="rgb(249,23,13)" fg:x="235" fg:w="2"/><text x="19.4180%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.2496%" y="517" width="0.0816%" height="15" fill="rgb(219,9,5)" fg:x="236" fg:w="1"/><text x="19.4996%" y="527.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.33%)</title><rect x="19.0865%" y="581" width="0.3263%" height="15" fill="rgb(254,171,16)" fg:x="234" fg:w="4"/><text x="19.3365%" y="591.50"></text></g><g><title>serde_json::value::to_value (4 samples, 0.33%)</title><rect x="19.0865%" y="565" width="0.3263%" height="15" fill="rgb(230,171,20)" fg:x="234" fg:w="4"/><text x="19.3365%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="19.1680%" y="549" width="0.2447%" height="15" fill="rgb(210,71,41)" fg:x="235" fg:w="3"/><text x="19.4180%" y="559.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="19.3312%" y="533" width="0.0816%" height="15" fill="rgb(206,173,20)" fg:x="237" fg:w="1"/><text x="19.5812%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.3312%" y="517" width="0.0816%" height="15" fill="rgb(233,88,34)" fg:x="237" fg:w="1"/><text x="19.5812%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.3312%" y="501" width="0.0816%" height="15" fill="rgb(223,209,46)" fg:x="237" fg:w="1"/><text x="19.5812%" y="511.50"></text></g><g><title>plugins_core::build::Build::occupying (15 samples, 1.22%)</title><rect x="18.2708%" y="613" width="1.2235%" height="15" fill="rgb(250,43,18)" fg:x="224" fg:w="15"/><text x="18.5208%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (6 samples, 0.49%)</title><rect x="19.0049%" y="597" width="0.4894%" height="15" fill="rgb(208,13,10)" fg:x="233" fg:w="6"/><text x="19.2549%" y="607.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="19.4127%" y="581" width="0.0816%" height="15" fill="rgb(212,200,36)" fg:x="238" fg:w="1"/><text x="19.6627%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="19.4127%" y="565" width="0.0816%" height="15" fill="rgb(225,90,30)" fg:x="238" fg:w="1"/><text x="19.6627%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="19.4127%" y="549" width="0.0816%" height="15" fill="rgb(236,182,39)" fg:x="238" fg:w="1"/><text x="19.6627%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="19.4127%" y="533" width="0.0816%" height="15" fill="rgb(212,144,35)" fg:x="238" fg:w="1"/><text x="19.6627%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.4127%" y="517" width="0.0816%" height="15" fill="rgb(228,63,44)" fg:x="238" fg:w="1"/><text x="19.6627%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.4127%" y="501" width="0.0816%" height="15" fill="rgb(228,109,6)" fg:x="238" fg:w="1"/><text x="19.6627%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4127%" y="485" width="0.0816%" height="15" fill="rgb(238,117,24)" fg:x="238" fg:w="1"/><text x="19.6627%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4127%" y="469" width="0.0816%" height="15" fill="rgb(242,26,26)" fg:x="238" fg:w="1"/><text x="19.6627%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4127%" y="453" width="0.0816%" height="15" fill="rgb(221,92,48)" fg:x="238" fg:w="1"/><text x="19.6627%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.4127%" y="437" width="0.0816%" height="15" fill="rgb(209,209,32)" fg:x="238" fg:w="1"/><text x="19.6627%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.4127%" y="421" width="0.0816%" height="15" fill="rgb(221,70,22)" fg:x="238" fg:w="1"/><text x="19.6627%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.4127%" y="405" width="0.0816%" height="15" fill="rgb(248,145,5)" fg:x="238" fg:w="1"/><text x="19.6627%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.4127%" y="389" width="0.0816%" height="15" fill="rgb(226,116,26)" fg:x="238" fg:w="1"/><text x="19.6627%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.4127%" y="373" width="0.0816%" height="15" fill="rgb(244,5,17)" fg:x="238" fg:w="1"/><text x="19.6627%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.4127%" y="357" width="0.0816%" height="15" fill="rgb(252,159,33)" fg:x="238" fg:w="1"/><text x="19.6627%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.4127%" y="341" width="0.0816%" height="15" fill="rgb(206,71,0)" fg:x="238" fg:w="1"/><text x="19.6627%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.4127%" y="325" width="0.0816%" height="15" fill="rgb(233,118,54)" fg:x="238" fg:w="1"/><text x="19.6627%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.4127%" y="309" width="0.0816%" height="15" fill="rgb(234,83,48)" fg:x="238" fg:w="1"/><text x="19.6627%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.4127%" y="293" width="0.0816%" height="15" fill="rgb(228,3,54)" fg:x="238" fg:w="1"/><text x="19.6627%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.4127%" y="277" width="0.0816%" height="15" fill="rgb(226,155,13)" fg:x="238" fg:w="1"/><text x="19.6627%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.4127%" y="261" width="0.0816%" height="15" fill="rgb(241,28,37)" fg:x="238" fg:w="1"/><text x="19.6627%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="19.4943%" y="565" width="0.0816%" height="15" fill="rgb(233,93,10)" fg:x="239" fg:w="1"/><text x="19.7443%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.4943%" y="549" width="0.0816%" height="15" fill="rgb(225,113,19)" fg:x="239" fg:w="1"/><text x="19.7443%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.4943%" y="533" width="0.0816%" height="15" fill="rgb(241,2,18)" fg:x="239" fg:w="1"/><text x="19.7443%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.4943%" y="517" width="0.0816%" height="15" fill="rgb(228,207,21)" fg:x="239" fg:w="1"/><text x="19.7443%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.4943%" y="501" width="0.0816%" height="15" fill="rgb(213,211,35)" fg:x="239" fg:w="1"/><text x="19.7443%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.4943%" y="485" width="0.0816%" height="15" fill="rgb(209,83,10)" fg:x="239" fg:w="1"/><text x="19.7443%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="19.5759%" y="549" width="0.1631%" height="15" fill="rgb(209,164,1)" fg:x="240" fg:w="2"/><text x="19.8259%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="19.5759%" y="533" width="0.1631%" height="15" fill="rgb(213,184,43)" fg:x="240" fg:w="2"/><text x="19.8259%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="19.6574%" y="517" width="0.0816%" height="15" fill="rgb(231,61,34)" fg:x="241" fg:w="1"/><text x="19.9074%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.7390%" y="517" width="0.0816%" height="15" fill="rgb(235,75,3)" fg:x="242" fg:w="1"/><text x="19.9890%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.33%)</title><rect x="19.5759%" y="565" width="0.3263%" height="15" fill="rgb(220,106,47)" fg:x="240" fg:w="4"/><text x="19.8259%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="19.7390%" y="549" width="0.1631%" height="15" fill="rgb(210,196,33)" fg:x="242" fg:w="2"/><text x="19.9890%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="19.7390%" y="533" width="0.1631%" height="15" fill="rgb(229,154,42)" fg:x="242" fg:w="2"/><text x="19.9890%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="19.8206%" y="517" width="0.0816%" height="15" fill="rgb(228,114,26)" fg:x="243" fg:w="1"/><text x="20.0706%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8206%" y="501" width="0.0816%" height="15" fill="rgb(208,144,1)" fg:x="243" fg:w="1"/><text x="20.0706%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="19.9021%" y="565" width="0.0816%" height="15" fill="rgb(239,112,37)" fg:x="244" fg:w="1"/><text x="20.1521%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="19.9021%" y="549" width="0.0816%" height="15" fill="rgb(210,96,50)" fg:x="244" fg:w="1"/><text x="20.1521%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.9021%" y="533" width="0.0816%" height="15" fill="rgb(222,178,2)" fg:x="244" fg:w="1"/><text x="20.1521%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.9021%" y="517" width="0.0816%" height="15" fill="rgb(226,74,18)" fg:x="244" fg:w="1"/><text x="20.1521%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.9021%" y="501" width="0.0816%" height="15" fill="rgb(225,67,54)" fg:x="244" fg:w="1"/><text x="20.1521%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.9021%" y="485" width="0.0816%" height="15" fill="rgb(251,92,32)" fg:x="244" fg:w="1"/><text x="20.1521%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.9021%" y="469" width="0.0816%" height="15" fill="rgb(228,149,22)" fg:x="244" fg:w="1"/><text x="20.1521%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.9021%" y="453" width="0.0816%" height="15" fill="rgb(243,54,13)" fg:x="244" fg:w="1"/><text x="20.1521%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.9021%" y="437" width="0.0816%" height="15" fill="rgb(243,180,28)" fg:x="244" fg:w="1"/><text x="20.1521%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.9021%" y="421" width="0.0816%" height="15" fill="rgb(208,167,24)" fg:x="244" fg:w="1"/><text x="20.1521%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.9021%" y="405" width="0.0816%" height="15" fill="rgb(245,73,45)" fg:x="244" fg:w="1"/><text x="20.1521%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.9021%" y="389" width="0.0816%" height="15" fill="rgb(237,203,48)" fg:x="244" fg:w="1"/><text x="20.1521%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.9021%" y="373" width="0.0816%" height="15" fill="rgb(211,197,16)" fg:x="244" fg:w="1"/><text x="20.1521%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.9021%" y="357" width="0.0816%" height="15" fill="rgb(243,99,51)" fg:x="244" fg:w="1"/><text x="20.1521%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.9021%" y="341" width="0.0816%" height="15" fill="rgb(215,123,29)" fg:x="244" fg:w="1"/><text x="20.1521%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.9021%" y="325" width="0.0816%" height="15" fill="rgb(239,186,37)" fg:x="244" fg:w="1"/><text x="20.1521%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.9021%" y="309" width="0.0816%" height="15" fill="rgb(252,136,39)" fg:x="244" fg:w="1"/><text x="20.1521%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.9021%" y="293" width="0.0816%" height="15" fill="rgb(223,213,32)" fg:x="244" fg:w="1"/><text x="20.1521%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.9021%" y="277" width="0.0816%" height="15" fill="rgb(233,115,5)" fg:x="244" fg:w="1"/><text x="20.1521%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="19.9837%" y="533" width="0.0816%" height="15" fill="rgb(207,226,44)" fg:x="245" fg:w="1"/><text x="20.2337%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.9837%" y="517" width="0.0816%" height="15" fill="rgb(208,126,0)" fg:x="245" fg:w="1"/><text x="20.2337%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.9837%" y="501" width="0.0816%" height="15" fill="rgb(244,66,21)" fg:x="245" fg:w="1"/><text x="20.2337%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.9837%" y="485" width="0.0816%" height="15" fill="rgb(222,97,12)" fg:x="245" fg:w="1"/><text x="20.2337%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.9837%" y="469" width="0.0816%" height="15" fill="rgb(219,213,19)" fg:x="245" fg:w="1"/><text x="20.2337%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.9837%" y="453" width="0.0816%" height="15" fill="rgb(252,169,30)" fg:x="245" fg:w="1"/><text x="20.2337%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.9837%" y="437" width="0.0816%" height="15" fill="rgb(206,32,51)" fg:x="245" fg:w="1"/><text x="20.2337%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.9837%" y="421" width="0.0816%" height="15" fill="rgb(250,172,42)" fg:x="245" fg:w="1"/><text x="20.2337%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.9837%" y="405" width="0.0816%" height="15" fill="rgb(209,34,43)" fg:x="245" fg:w="1"/><text x="20.2337%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.9837%" y="389" width="0.0816%" height="15" fill="rgb(223,11,35)" fg:x="245" fg:w="1"/><text x="20.2337%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.9837%" y="373" width="0.0816%" height="15" fill="rgb(251,219,26)" fg:x="245" fg:w="1"/><text x="20.2337%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="19.9837%" y="357" width="0.0816%" height="15" fill="rgb(231,119,3)" fg:x="245" fg:w="1"/><text x="20.2337%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="19.9837%" y="341" width="0.0816%" height="15" fill="rgb(216,97,11)" fg:x="245" fg:w="1"/><text x="20.2337%" y="351.50"></text></g><g><title>plugins_core::build::Build::into_entry (8 samples, 0.65%)</title><rect x="19.4943%" y="597" width="0.6525%" height="15" fill="rgb(223,59,9)" fg:x="239" fg:w="8"/><text x="19.7443%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.65%)</title><rect x="19.4943%" y="581" width="0.6525%" height="15" fill="rgb(233,93,31)" fg:x="239" fg:w="8"/><text x="19.7443%" y="591.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (2 samples, 0.16%)</title><rect x="19.9837%" y="565" width="0.1631%" height="15" fill="rgb(239,81,33)" fg:x="245" fg:w="2"/><text x="20.2337%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="19.9837%" y="549" width="0.1631%" height="15" fill="rgb(213,120,34)" fg:x="245" fg:w="2"/><text x="20.2337%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="20.0653%" y="533" width="0.0816%" height="15" fill="rgb(243,49,53)" fg:x="246" fg:w="1"/><text x="20.3153%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="20.0653%" y="517" width="0.0816%" height="15" fill="rgb(247,216,33)" fg:x="246" fg:w="1"/><text x="20.3153%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.0653%" y="501" width="0.0816%" height="15" fill="rgb(226,26,14)" fg:x="246" fg:w="1"/><text x="20.3153%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.0653%" y="485" width="0.0816%" height="15" fill="rgb(215,49,53)" fg:x="246" fg:w="1"/><text x="20.3153%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.0653%" y="469" width="0.0816%" height="15" fill="rgb(245,162,40)" fg:x="246" fg:w="1"/><text x="20.3153%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.0653%" y="453" width="0.0816%" height="15" fill="rgb(229,68,17)" fg:x="246" fg:w="1"/><text x="20.3153%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.0653%" y="437" width="0.0816%" height="15" fill="rgb(213,182,10)" fg:x="246" fg:w="1"/><text x="20.3153%" y="447.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (120 samples, 9.79%)</title><rect x="10.4405%" y="629" width="9.7879%" height="15" fill="rgb(245,125,30)" fg:x="128" fg:w="120"/><text x="10.6905%" y="639.50">plugins_core::..</text></g><g><title>plugins_core::build::Build::wearing (9 samples, 0.73%)</title><rect x="19.4943%" y="613" width="0.7341%" height="15" fill="rgb(232,202,2)" fg:x="239" fg:w="9"/><text x="19.7443%" y="623.50"></text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="20.1468%" y="597" width="0.0816%" height="15" fill="rgb(237,140,51)" fg:x="247" fg:w="1"/><text x="20.3968%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="20.1468%" y="581" width="0.0816%" height="15" fill="rgb(236,157,25)" fg:x="247" fg:w="1"/><text x="20.3968%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="20.1468%" y="565" width="0.0816%" height="15" fill="rgb(219,209,0)" fg:x="247" fg:w="1"/><text x="20.3968%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.1468%" y="549" width="0.0816%" height="15" fill="rgb(240,116,54)" fg:x="247" fg:w="1"/><text x="20.3968%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.1468%" y="533" width="0.0816%" height="15" fill="rgb(216,10,36)" fg:x="247" fg:w="1"/><text x="20.3968%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="20.2284%" y="629" width="0.0816%" height="15" fill="rgb(222,72,44)" fg:x="248" fg:w="1"/><text x="20.4784%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="20.2284%" y="613" width="0.0816%" height="15" fill="rgb(232,159,9)" fg:x="248" fg:w="1"/><text x="20.4784%" y="623.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="20.2284%" y="597" width="0.0816%" height="15" fill="rgb(210,39,32)" fg:x="248" fg:w="1"/><text x="20.4784%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="20.3915%" y="517" width="0.0816%" height="15" fill="rgb(216,194,45)" fg:x="250" fg:w="1"/><text x="20.6415%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="20.3915%" y="501" width="0.0816%" height="15" fill="rgb(218,18,35)" fg:x="250" fg:w="1"/><text x="20.6415%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.4731%" y="453" width="0.0816%" height="15" fill="rgb(207,83,51)" fg:x="251" fg:w="1"/><text x="20.7231%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.4731%" y="437" width="0.0816%" height="15" fill="rgb(225,63,43)" fg:x="251" fg:w="1"/><text x="20.7231%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="20.3915%" y="565" width="0.2447%" height="15" fill="rgb(207,57,36)" fg:x="250" fg:w="3"/><text x="20.6415%" y="575.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="20.3915%" y="549" width="0.2447%" height="15" fill="rgb(216,99,33)" fg:x="250" fg:w="3"/><text x="20.6415%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="20.3915%" y="533" width="0.2447%" height="15" fill="rgb(225,42,16)" fg:x="250" fg:w="3"/><text x="20.6415%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="20.4731%" y="517" width="0.1631%" height="15" fill="rgb(220,201,45)" fg:x="251" fg:w="2"/><text x="20.7231%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.4731%" y="501" width="0.1631%" height="15" fill="rgb(225,33,4)" fg:x="251" fg:w="2"/><text x="20.7231%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="20.4731%" y="485" width="0.1631%" height="15" fill="rgb(224,33,50)" fg:x="251" fg:w="2"/><text x="20.7231%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.4731%" y="469" width="0.1631%" height="15" fill="rgb(246,198,51)" fg:x="251" fg:w="2"/><text x="20.7231%" y="479.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="20.5546%" y="453" width="0.0816%" height="15" fill="rgb(205,22,4)" fg:x="252" fg:w="1"/><text x="20.8046%" y="463.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="20.6362%" y="549" width="0.0816%" height="15" fill="rgb(206,3,8)" fg:x="253" fg:w="1"/><text x="20.8862%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="20.6362%" y="533" width="0.0816%" height="15" fill="rgb(251,23,15)" fg:x="253" fg:w="1"/><text x="20.8862%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="20.6362%" y="517" width="0.0816%" height="15" fill="rgb(252,88,28)" fg:x="253" fg:w="1"/><text x="20.8862%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.6362%" y="501" width="0.0816%" height="15" fill="rgb(212,127,14)" fg:x="253" fg:w="1"/><text x="20.8862%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.6362%" y="485" width="0.0816%" height="15" fill="rgb(247,145,37)" fg:x="253" fg:w="1"/><text x="20.8862%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.6362%" y="469" width="0.0816%" height="15" fill="rgb(209,117,53)" fg:x="253" fg:w="1"/><text x="20.8862%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.6362%" y="453" width="0.0816%" height="15" fill="rgb(212,90,42)" fg:x="253" fg:w="1"/><text x="20.8862%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.6362%" y="437" width="0.0816%" height="15" fill="rgb(218,164,37)" fg:x="253" fg:w="1"/><text x="20.8862%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.6362%" y="421" width="0.0816%" height="15" fill="rgb(246,65,34)" fg:x="253" fg:w="1"/><text x="20.8862%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.6362%" y="405" width="0.0816%" height="15" fill="rgb(231,100,33)" fg:x="253" fg:w="1"/><text x="20.8862%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.6362%" y="389" width="0.0816%" height="15" fill="rgb(228,126,14)" fg:x="253" fg:w="1"/><text x="20.8862%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.6362%" y="373" width="0.0816%" height="15" fill="rgb(215,173,21)" fg:x="253" fg:w="1"/><text x="20.8862%" y="383.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="20.6362%" y="565" width="0.1631%" height="15" fill="rgb(210,6,40)" fg:x="253" fg:w="2"/><text x="20.8862%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="20.7178%" y="549" width="0.0816%" height="15" fill="rgb(212,48,18)" fg:x="254" fg:w="1"/><text x="20.9678%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.7178%" y="533" width="0.0816%" height="15" fill="rgb(230,214,11)" fg:x="254" fg:w="1"/><text x="20.9678%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="20.7178%" y="517" width="0.0816%" height="15" fill="rgb(254,105,39)" fg:x="254" fg:w="1"/><text x="20.9678%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="20.7178%" y="501" width="0.0816%" height="15" fill="rgb(245,158,5)" fg:x="254" fg:w="1"/><text x="20.9678%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.7993%" y="501" width="0.0816%" height="15" fill="rgb(249,208,11)" fg:x="255" fg:w="1"/><text x="21.0493%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.7993%" y="485" width="0.0816%" height="15" fill="rgb(210,39,28)" fg:x="255" fg:w="1"/><text x="21.0493%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.7993%" y="469" width="0.0816%" height="15" fill="rgb(211,56,53)" fg:x="255" fg:w="1"/><text x="21.0493%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="20.8809%" y="437" width="0.0816%" height="15" fill="rgb(226,201,30)" fg:x="256" fg:w="1"/><text x="21.1309%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.8809%" y="421" width="0.0816%" height="15" fill="rgb(239,101,34)" fg:x="256" fg:w="1"/><text x="21.1309%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="20.7993%" y="565" width="0.2447%" height="15" fill="rgb(226,209,5)" fg:x="255" fg:w="3"/><text x="21.0493%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="20.7993%" y="549" width="0.2447%" height="15" fill="rgb(250,105,47)" fg:x="255" fg:w="3"/><text x="21.0493%" y="559.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="20.7993%" y="533" width="0.2447%" height="15" fill="rgb(230,72,3)" fg:x="255" fg:w="3"/><text x="21.0493%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="20.7993%" y="517" width="0.2447%" height="15" fill="rgb(232,218,39)" fg:x="255" fg:w="3"/><text x="21.0493%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="20.8809%" y="501" width="0.1631%" height="15" fill="rgb(248,166,6)" fg:x="256" fg:w="2"/><text x="21.1309%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.8809%" y="485" width="0.1631%" height="15" fill="rgb(247,89,20)" fg:x="256" fg:w="2"/><text x="21.1309%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="20.8809%" y="469" width="0.1631%" height="15" fill="rgb(248,130,54)" fg:x="256" fg:w="2"/><text x="21.1309%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.8809%" y="453" width="0.1631%" height="15" fill="rgb(234,196,4)" fg:x="256" fg:w="2"/><text x="21.1309%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.9625%" y="437" width="0.0816%" height="15" fill="rgb(250,143,31)" fg:x="257" fg:w="1"/><text x="21.2125%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.73%)</title><rect x="20.3915%" y="581" width="0.7341%" height="15" fill="rgb(211,110,34)" fg:x="250" fg:w="9"/><text x="20.6415%" y="591.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="21.0440%" y="565" width="0.0816%" height="15" fill="rgb(215,124,48)" fg:x="258" fg:w="1"/><text x="21.2940%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="21.0440%" y="549" width="0.0816%" height="15" fill="rgb(216,46,13)" fg:x="258" fg:w="1"/><text x="21.2940%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="21.0440%" y="533" width="0.0816%" height="15" fill="rgb(205,184,25)" fg:x="258" fg:w="1"/><text x="21.2940%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="21.0440%" y="517" width="0.0816%" height="15" fill="rgb(228,1,10)" fg:x="258" fg:w="1"/><text x="21.2940%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.0440%" y="501" width="0.0816%" height="15" fill="rgb(213,116,27)" fg:x="258" fg:w="1"/><text x="21.2940%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.0440%" y="485" width="0.0816%" height="15" fill="rgb(241,95,50)" fg:x="258" fg:w="1"/><text x="21.2940%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.0440%" y="469" width="0.0816%" height="15" fill="rgb(238,48,32)" fg:x="258" fg:w="1"/><text x="21.2940%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.0440%" y="453" width="0.0816%" height="15" fill="rgb(235,113,49)" fg:x="258" fg:w="1"/><text x="21.2940%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.0440%" y="437" width="0.0816%" height="15" fill="rgb(205,127,43)" fg:x="258" fg:w="1"/><text x="21.2940%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.0440%" y="421" width="0.0816%" height="15" fill="rgb(250,162,2)" fg:x="258" fg:w="1"/><text x="21.2940%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.0440%" y="405" width="0.0816%" height="15" fill="rgb(220,13,41)" fg:x="258" fg:w="1"/><text x="21.2940%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.0440%" y="389" width="0.0816%" height="15" fill="rgb(249,221,25)" fg:x="258" fg:w="1"/><text x="21.2940%" y="399.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (11 samples, 0.90%)</title><rect x="20.3100%" y="629" width="0.8972%" height="15" fill="rgb(215,208,19)" fg:x="249" fg:w="11"/><text x="20.5600%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (11 samples, 0.90%)</title><rect x="20.3100%" y="613" width="0.8972%" height="15" fill="rgb(236,175,2)" fg:x="249" fg:w="11"/><text x="20.5600%" y="623.50"></text></g><g><title>plugins_core::build::Build::into_entry (10 samples, 0.82%)</title><rect x="20.3915%" y="597" width="0.8157%" height="15" fill="rgb(241,52,2)" fg:x="250" fg:w="10"/><text x="20.6415%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="21.1256%" y="581" width="0.0816%" height="15" fill="rgb(248,140,14)" fg:x="259" fg:w="1"/><text x="21.3756%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="21.1256%" y="565" width="0.0816%" height="15" fill="rgb(253,22,42)" fg:x="259" fg:w="1"/><text x="21.3756%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.1256%" y="549" width="0.0816%" height="15" fill="rgb(234,61,47)" fg:x="259" fg:w="1"/><text x="21.3756%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.1256%" y="533" width="0.0816%" height="15" fill="rgb(208,226,15)" fg:x="259" fg:w="1"/><text x="21.3756%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.1256%" y="517" width="0.0816%" height="15" fill="rgb(217,221,4)" fg:x="259" fg:w="1"/><text x="21.3756%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.1256%" y="501" width="0.0816%" height="15" fill="rgb(212,174,34)" fg:x="259" fg:w="1"/><text x="21.3756%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.1256%" y="485" width="0.0816%" height="15" fill="rgb(253,83,4)" fg:x="259" fg:w="1"/><text x="21.3756%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.1256%" y="469" width="0.0816%" height="15" fill="rgb(250,195,49)" fg:x="259" fg:w="1"/><text x="21.3756%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.1256%" y="453" width="0.0816%" height="15" fill="rgb(241,192,25)" fg:x="259" fg:w="1"/><text x="21.3756%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="21.1256%" y="437" width="0.0816%" height="15" fill="rgb(208,124,10)" fg:x="259" fg:w="1"/><text x="21.3756%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="21.1256%" y="421" width="0.0816%" height="15" fill="rgb(222,33,0)" fg:x="259" fg:w="1"/><text x="21.3756%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="21.2072%" y="533" width="0.0816%" height="15" fill="rgb(234,209,28)" fg:x="260" fg:w="1"/><text x="21.4572%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.2072%" y="517" width="0.0816%" height="15" fill="rgb(224,11,23)" fg:x="260" fg:w="1"/><text x="21.4572%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.2072%" y="501" width="0.0816%" height="15" fill="rgb(232,99,1)" fg:x="260" fg:w="1"/><text x="21.4572%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="21.2887%" y="533" width="0.1631%" height="15" fill="rgb(237,95,45)" fg:x="261" fg:w="2"/><text x="21.5387%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.3703%" y="517" width="0.0816%" height="15" fill="rgb(208,109,11)" fg:x="262" fg:w="1"/><text x="21.6203%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.3703%" y="501" width="0.0816%" height="15" fill="rgb(216,190,48)" fg:x="262" fg:w="1"/><text x="21.6203%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.33%)</title><rect x="21.2072%" y="581" width="0.3263%" height="15" fill="rgb(251,171,36)" fg:x="260" fg:w="4"/><text x="21.4572%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="21.2072%" y="565" width="0.3263%" height="15" fill="rgb(230,62,22)" fg:x="260" fg:w="4"/><text x="21.4572%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="21.2072%" y="549" width="0.3263%" height="15" fill="rgb(225,114,35)" fg:x="260" fg:w="4"/><text x="21.4572%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="21.4519%" y="533" width="0.0816%" height="15" fill="rgb(215,118,42)" fg:x="263" fg:w="1"/><text x="21.7019%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="21.5334%" y="581" width="0.0816%" height="15" fill="rgb(243,119,21)" fg:x="264" fg:w="1"/><text x="21.7834%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="21.5334%" y="565" width="0.0816%" height="15" fill="rgb(252,177,53)" fg:x="264" fg:w="1"/><text x="21.7834%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="21.5334%" y="549" width="0.0816%" height="15" fill="rgb(237,209,29)" fg:x="264" fg:w="1"/><text x="21.7834%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.5334%" y="533" width="0.0816%" height="15" fill="rgb(212,65,23)" fg:x="264" fg:w="1"/><text x="21.7834%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.5334%" y="517" width="0.0816%" height="15" fill="rgb(230,222,46)" fg:x="264" fg:w="1"/><text x="21.7834%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.5334%" y="501" width="0.0816%" height="15" fill="rgb(215,135,32)" fg:x="264" fg:w="1"/><text x="21.7834%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.5334%" y="485" width="0.0816%" height="15" fill="rgb(246,101,22)" fg:x="264" fg:w="1"/><text x="21.7834%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.5334%" y="469" width="0.0816%" height="15" fill="rgb(206,107,13)" fg:x="264" fg:w="1"/><text x="21.7834%" y="479.50"></text></g><g><title>plugins_core::build::Build::into_entry (6 samples, 0.49%)</title><rect x="21.2072%" y="613" width="0.4894%" height="15" fill="rgb(250,100,44)" fg:x="260" fg:w="6"/><text x="21.4572%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.49%)</title><rect x="21.2072%" y="597" width="0.4894%" height="15" fill="rgb(231,147,38)" fg:x="260" fg:w="6"/><text x="21.4572%" y="607.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="21.6150%" y="581" width="0.0816%" height="15" fill="rgb(229,8,40)" fg:x="265" fg:w="1"/><text x="21.8650%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (7 samples, 0.57%)</title><rect x="21.2072%" y="629" width="0.5710%" height="15" fill="rgb(221,135,30)" fg:x="260" fg:w="7"/><text x="21.4572%" y="639.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="21.6966%" y="613" width="0.0816%" height="15" fill="rgb(249,193,18)" fg:x="266" fg:w="1"/><text x="21.9466%" y="623.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="21.6966%" y="597" width="0.0816%" height="15" fill="rgb(209,133,39)" fg:x="266" fg:w="1"/><text x="21.9466%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (212 samples, 17.29%)</title><rect x="4.5677%" y="645" width="17.2920%" height="15" fill="rgb(232,100,14)" fg:x="56" fg:w="212"/><text x="4.8177%" y="655.50">&lt;tests::HoldingKeyInVessel ..</text></g><g><title>plugins_core::build::BuildSurroundings::route (1 samples, 0.08%)</title><rect x="21.7781%" y="629" width="0.0816%" height="15" fill="rgb(224,185,1)" fg:x="267" fg:w="1"/><text x="22.0281%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="21.7781%" y="613" width="0.0816%" height="15" fill="rgb(223,139,8)" fg:x="267" fg:w="1"/><text x="22.0281%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="21.8597%" y="645" width="0.0816%" height="15" fill="rgb(232,213,38)" fg:x="268" fg:w="1"/><text x="22.1097%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="21.8597%" y="629" width="0.0816%" height="15" fill="rgb(207,94,22)" fg:x="268" fg:w="1"/><text x="22.1097%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::Effect&gt; (1 samples, 0.08%)</title><rect x="21.9413%" y="645" width="0.0816%" height="15" fill="rgb(219,183,54)" fg:x="269" fg:w="1"/><text x="22.1913%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="22.0228%" y="629" width="0.0816%" height="15" fill="rgb(216,185,54)" fg:x="270" fg:w="1"/><text x="22.2728%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.0228%" y="613" width="0.0816%" height="15" fill="rgb(254,217,39)" fg:x="270" fg:w="1"/><text x="22.2728%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="22.1044%" y="597" width="0.0816%" height="15" fill="rgb(240,178,23)" fg:x="271" fg:w="1"/><text x="22.3544%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="22.1044%" y="581" width="0.0816%" height="15" fill="rgb(218,11,47)" fg:x="271" fg:w="1"/><text x="22.3544%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="22.1044%" y="565" width="0.0816%" height="15" fill="rgb(218,51,51)" fg:x="271" fg:w="1"/><text x="22.3544%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.1044%" y="549" width="0.0816%" height="15" fill="rgb(238,126,27)" fg:x="271" fg:w="1"/><text x="22.3544%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.1044%" y="533" width="0.0816%" height="15" fill="rgb(249,202,22)" fg:x="271" fg:w="1"/><text x="22.3544%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="22.1044%" y="517" width="0.0816%" height="15" fill="rgb(254,195,49)" fg:x="271" fg:w="1"/><text x="22.3544%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="22.1044%" y="501" width="0.0816%" height="15" fill="rgb(208,123,14)" fg:x="271" fg:w="1"/><text x="22.3544%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="22.1044%" y="485" width="0.0816%" height="15" fill="rgb(224,200,8)" fg:x="271" fg:w="1"/><text x="22.3544%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.1044%" y="469" width="0.0816%" height="15" fill="rgb(217,61,36)" fg:x="271" fg:w="1"/><text x="22.3544%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.1044%" y="453" width="0.0816%" height="15" fill="rgb(206,35,45)" fg:x="271" fg:w="1"/><text x="22.3544%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="22.1044%" y="437" width="0.0816%" height="15" fill="rgb(217,65,33)" fg:x="271" fg:w="1"/><text x="22.3544%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="22.1044%" y="421" width="0.0816%" height="15" fill="rgb(222,158,48)" fg:x="271" fg:w="1"/><text x="22.3544%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="22.1044%" y="405" width="0.0816%" height="15" fill="rgb(254,2,54)" fg:x="271" fg:w="1"/><text x="22.3544%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="22.1044%" y="389" width="0.0816%" height="15" fill="rgb(250,143,38)" fg:x="271" fg:w="1"/><text x="22.3544%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.1044%" y="373" width="0.0816%" height="15" fill="rgb(248,25,0)" fg:x="271" fg:w="1"/><text x="22.3544%" y="383.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="22.2675%" y="533" width="0.0816%" height="15" fill="rgb(206,152,27)" fg:x="273" fg:w="1"/><text x="22.5175%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.2675%" y="517" width="0.0816%" height="15" fill="rgb(240,77,30)" fg:x="273" fg:w="1"/><text x="22.5175%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.2675%" y="501" width="0.0816%" height="15" fill="rgb(231,5,3)" fg:x="273" fg:w="1"/><text x="22.5175%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.2675%" y="485" width="0.0816%" height="15" fill="rgb(207,226,32)" fg:x="273" fg:w="1"/><text x="22.5175%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.2675%" y="469" width="0.0816%" height="15" fill="rgb(222,207,47)" fg:x="273" fg:w="1"/><text x="22.5175%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.3491%" y="517" width="0.0816%" height="15" fill="rgb(229,115,45)" fg:x="274" fg:w="1"/><text x="22.5991%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.3491%" y="501" width="0.0816%" height="15" fill="rgb(224,191,6)" fg:x="274" fg:w="1"/><text x="22.5991%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.3491%" y="485" width="0.0816%" height="15" fill="rgb(230,227,24)" fg:x="274" fg:w="1"/><text x="22.5991%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.3491%" y="469" width="0.0816%" height="15" fill="rgb(228,80,19)" fg:x="274" fg:w="1"/><text x="22.5991%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.4307%" y="469" width="0.0816%" height="15" fill="rgb(247,229,0)" fg:x="275" fg:w="1"/><text x="22.6807%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.4307%" y="453" width="0.0816%" height="15" fill="rgb(237,194,15)" fg:x="275" fg:w="1"/><text x="22.6807%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.4307%" y="437" width="0.0816%" height="15" fill="rgb(219,203,20)" fg:x="275" fg:w="1"/><text x="22.6807%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.4307%" y="421" width="0.0816%" height="15" fill="rgb(234,128,8)" fg:x="275" fg:w="1"/><text x="22.6807%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.4307%" y="405" width="0.0816%" height="15" fill="rgb(248,202,8)" fg:x="275" fg:w="1"/><text x="22.6807%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.4307%" y="389" width="0.0816%" height="15" fill="rgb(206,104,37)" fg:x="275" fg:w="1"/><text x="22.6807%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.4307%" y="373" width="0.0816%" height="15" fill="rgb(223,8,27)" fg:x="275" fg:w="1"/><text x="22.6807%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="22.4307%" y="501" width="0.2447%" height="15" fill="rgb(216,217,28)" fg:x="275" fg:w="3"/><text x="22.6807%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="22.4307%" y="485" width="0.2447%" height="15" fill="rgb(249,199,1)" fg:x="275" fg:w="3"/><text x="22.6807%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="22.5122%" y="469" width="0.1631%" height="15" fill="rgb(240,85,17)" fg:x="276" fg:w="2"/><text x="22.7622%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.5938%" y="453" width="0.0816%" height="15" fill="rgb(206,108,45)" fg:x="277" fg:w="1"/><text x="22.8438%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.6754%" y="501" width="0.0816%" height="15" fill="rgb(245,210,41)" fg:x="278" fg:w="1"/><text x="22.9254%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.6754%" y="485" width="0.0816%" height="15" fill="rgb(206,13,37)" fg:x="278" fg:w="1"/><text x="22.9254%" y="495.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="22.7569%" y="485" width="0.0816%" height="15" fill="rgb(250,61,18)" fg:x="279" fg:w="1"/><text x="23.0069%" y="495.50"></text></g><g><title>ryu::d2s::d2d (1 samples, 0.08%)</title><rect x="22.7569%" y="469" width="0.0816%" height="15" fill="rgb(235,172,48)" fg:x="279" fg:w="1"/><text x="23.0069%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="22.8385%" y="485" width="0.1631%" height="15" fill="rgb(249,201,17)" fg:x="280" fg:w="2"/><text x="23.0885%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="22.8385%" y="469" width="0.1631%" height="15" fill="rgb(219,208,6)" fg:x="280" fg:w="2"/><text x="23.0885%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="22.8385%" y="453" width="0.1631%" height="15" fill="rgb(248,31,23)" fg:x="280" fg:w="2"/><text x="23.0885%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.9201%" y="437" width="0.0816%" height="15" fill="rgb(245,15,42)" fg:x="281" fg:w="1"/><text x="23.1701%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="23.0016%" y="469" width="0.0816%" height="15" fill="rgb(222,217,39)" fg:x="282" fg:w="1"/><text x="23.2516%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.0016%" y="453" width="0.0816%" height="15" fill="rgb(210,219,27)" fg:x="282" fg:w="1"/><text x="23.2516%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="23.0016%" y="485" width="0.1631%" height="15" fill="rgb(252,166,36)" fg:x="282" fg:w="2"/><text x="23.2516%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="23.0832%" y="469" width="0.0816%" height="15" fill="rgb(245,132,34)" fg:x="283" fg:w="1"/><text x="23.3332%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.0832%" y="453" width="0.0816%" height="15" fill="rgb(236,54,3)" fg:x="283" fg:w="1"/><text x="23.3332%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.0832%" y="437" width="0.0816%" height="15" fill="rgb(241,173,43)" fg:x="283" fg:w="1"/><text x="23.3332%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.0832%" y="421" width="0.0816%" height="15" fill="rgb(215,190,9)" fg:x="283" fg:w="1"/><text x="23.3332%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.0832%" y="405" width="0.0816%" height="15" fill="rgb(242,101,16)" fg:x="283" fg:w="1"/><text x="23.3332%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.0832%" y="389" width="0.0816%" height="15" fill="rgb(223,190,21)" fg:x="283" fg:w="1"/><text x="23.3332%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.0832%" y="373" width="0.0816%" height="15" fill="rgb(215,228,25)" fg:x="283" fg:w="1"/><text x="23.3332%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="22.7569%" y="501" width="0.4894%" height="15" fill="rgb(225,36,22)" fg:x="279" fg:w="6"/><text x="23.0069%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.1648%" y="485" width="0.0816%" height="15" fill="rgb(251,106,46)" fg:x="284" fg:w="1"/><text x="23.4148%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.1648%" y="469" width="0.0816%" height="15" fill="rgb(208,90,1)" fg:x="284" fg:w="1"/><text x="23.4148%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.1648%" y="453" width="0.0816%" height="15" fill="rgb(243,10,4)" fg:x="284" fg:w="1"/><text x="23.4148%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.1648%" y="437" width="0.0816%" height="15" fill="rgb(212,137,27)" fg:x="284" fg:w="1"/><text x="23.4148%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.1648%" y="421" width="0.0816%" height="15" fill="rgb(231,220,49)" fg:x="284" fg:w="1"/><text x="23.4148%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.1648%" y="405" width="0.0816%" height="15" fill="rgb(237,96,20)" fg:x="284" fg:w="1"/><text x="23.4148%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.2463%" y="469" width="0.0816%" height="15" fill="rgb(239,229,30)" fg:x="285" fg:w="1"/><text x="23.4963%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.98%)</title><rect x="22.4307%" y="517" width="0.9788%" height="15" fill="rgb(219,65,33)" fg:x="275" fg:w="12"/><text x="22.6807%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.2463%" y="501" width="0.1631%" height="15" fill="rgb(243,134,7)" fg:x="285" fg:w="2"/><text x="23.4963%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="23.2463%" y="485" width="0.1631%" height="15" fill="rgb(216,177,54)" fg:x="285" fg:w="2"/><text x="23.4963%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="23.3279%" y="469" width="0.0816%" height="15" fill="rgb(211,160,20)" fg:x="286" fg:w="1"/><text x="23.5779%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (15 samples, 1.22%)</title><rect x="22.2675%" y="549" width="1.2235%" height="15" fill="rgb(239,85,39)" fg:x="273" fg:w="15"/><text x="22.5175%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.14%)</title><rect x="22.3491%" y="533" width="1.1419%" height="15" fill="rgb(232,125,22)" fg:x="274" fg:w="14"/><text x="22.5991%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.4095%" y="517" width="0.0816%" height="15" fill="rgb(244,57,34)" fg:x="287" fg:w="1"/><text x="23.6595%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.4095%" y="501" width="0.0816%" height="15" fill="rgb(214,203,32)" fg:x="287" fg:w="1"/><text x="23.6595%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.4095%" y="485" width="0.0816%" height="15" fill="rgb(207,58,43)" fg:x="287" fg:w="1"/><text x="23.6595%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.4910%" y="517" width="0.0816%" height="15" fill="rgb(215,193,15)" fg:x="288" fg:w="1"/><text x="23.7410%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.5726%" y="501" width="0.0816%" height="15" fill="rgb(232,15,44)" fg:x="289" fg:w="1"/><text x="23.8226%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="23.6542%" y="501" width="0.1631%" height="15" fill="rgb(212,3,48)" fg:x="290" fg:w="2"/><text x="23.9042%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.7357%" y="485" width="0.0816%" height="15" fill="rgb(218,128,7)" fg:x="291" fg:w="1"/><text x="23.9857%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="23.4910%" y="549" width="0.4894%" height="15" fill="rgb(226,216,39)" fg:x="288" fg:w="6"/><text x="23.7410%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="23.4910%" y="533" width="0.4894%" height="15" fill="rgb(243,47,51)" fg:x="288" fg:w="6"/><text x="23.7410%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="23.5726%" y="517" width="0.4078%" height="15" fill="rgb(241,183,40)" fg:x="289" fg:w="5"/><text x="23.8226%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="23.8173%" y="501" width="0.1631%" height="15" fill="rgb(231,217,32)" fg:x="292" fg:w="2"/><text x="24.0673%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="23.8173%" y="485" width="0.1631%" height="15" fill="rgb(229,61,38)" fg:x="292" fg:w="2"/><text x="24.0673%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="23.8989%" y="469" width="0.0816%" height="15" fill="rgb(225,210,5)" fg:x="293" fg:w="1"/><text x="24.1489%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="23.8989%" y="453" width="0.0816%" height="15" fill="rgb(231,79,45)" fg:x="293" fg:w="1"/><text x="24.1489%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.8989%" y="437" width="0.0816%" height="15" fill="rgb(224,100,7)" fg:x="293" fg:w="1"/><text x="24.1489%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="24.1436%" y="485" width="0.1631%" height="15" fill="rgb(241,198,18)" fg:x="296" fg:w="2"/><text x="24.3936%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.3067%" y="485" width="0.0816%" height="15" fill="rgb(252,97,53)" fg:x="298" fg:w="1"/><text x="24.5567%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.4698%" y="469" width="0.0816%" height="15" fill="rgb(220,88,7)" fg:x="300" fg:w="1"/><text x="24.7198%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="24.5514%" y="469" width="0.1631%" height="15" fill="rgb(213,176,14)" fg:x="301" fg:w="2"/><text x="24.8014%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="24.5514%" y="453" width="0.1631%" height="15" fill="rgb(246,73,7)" fg:x="301" fg:w="2"/><text x="24.8014%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.7145%" y="453" width="0.0816%" height="15" fill="rgb(245,64,36)" fg:x="303" fg:w="1"/><text x="24.9645%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.7145%" y="437" width="0.0816%" height="15" fill="rgb(245,80,10)" fg:x="303" fg:w="1"/><text x="24.9645%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="24.7961%" y="437" width="0.1631%" height="15" fill="rgb(232,107,50)" fg:x="304" fg:w="2"/><text x="25.0461%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.8777%" y="421" width="0.0816%" height="15" fill="rgb(253,3,0)" fg:x="305" fg:w="1"/><text x="25.1277%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="24.9592%" y="437" width="0.0816%" height="15" fill="rgb(212,99,53)" fg:x="306" fg:w="1"/><text x="25.2092%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="24.9592%" y="421" width="0.0816%" height="15" fill="rgb(249,111,54)" fg:x="306" fg:w="1"/><text x="25.2092%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.9592%" y="405" width="0.0816%" height="15" fill="rgb(249,55,30)" fg:x="306" fg:w="1"/><text x="25.2092%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.9592%" y="389" width="0.0816%" height="15" fill="rgb(237,47,42)" fg:x="306" fg:w="1"/><text x="25.2092%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (14 samples, 1.14%)</title><rect x="23.9804%" y="517" width="1.1419%" height="15" fill="rgb(211,20,18)" fg:x="294" fg:w="14"/><text x="24.2304%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (14 samples, 1.14%)</title><rect x="23.9804%" y="501" width="1.1419%" height="15" fill="rgb(231,203,46)" fg:x="294" fg:w="14"/><text x="24.2304%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.73%)</title><rect x="24.3883%" y="485" width="0.7341%" height="15" fill="rgb(237,142,3)" fg:x="299" fg:w="9"/><text x="24.6383%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="24.7145%" y="469" width="0.4078%" height="15" fill="rgb(241,107,1)" fg:x="303" fg:w="5"/><text x="24.9645%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="24.7961%" y="453" width="0.3263%" height="15" fill="rgb(229,83,13)" fg:x="304" fg:w="4"/><text x="25.0461%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="25.0408%" y="437" width="0.0816%" height="15" fill="rgb(241,91,40)" fg:x="307" fg:w="1"/><text x="25.2908%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.0408%" y="421" width="0.0816%" height="15" fill="rgb(225,3,45)" fg:x="307" fg:w="1"/><text x="25.2908%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.0408%" y="405" width="0.0816%" height="15" fill="rgb(244,223,14)" fg:x="307" fg:w="1"/><text x="25.2908%" y="415.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="25.2855%" y="453" width="0.0816%" height="15" fill="rgb(224,124,37)" fg:x="310" fg:w="1"/><text x="25.5355%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="25.2855%" y="437" width="0.0816%" height="15" fill="rgb(251,171,30)" fg:x="310" fg:w="1"/><text x="25.5355%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.2855%" y="421" width="0.0816%" height="15" fill="rgb(236,46,54)" fg:x="310" fg:w="1"/><text x="25.5355%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.33%)</title><rect x="25.1223%" y="485" width="0.3263%" height="15" fill="rgb(245,213,5)" fg:x="308" fg:w="4"/><text x="25.3723%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="25.2855%" y="469" width="0.1631%" height="15" fill="rgb(230,144,27)" fg:x="310" fg:w="2"/><text x="25.5355%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="25.3670%" y="453" width="0.0816%" height="15" fill="rgb(220,86,6)" fg:x="311" fg:w="1"/><text x="25.6170%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.3670%" y="437" width="0.0816%" height="15" fill="rgb(240,20,13)" fg:x="311" fg:w="1"/><text x="25.6170%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.49%)</title><rect x="25.1223%" y="501" width="0.4894%" height="15" fill="rgb(217,89,34)" fg:x="308" fg:w="6"/><text x="25.3723%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="25.4486%" y="485" width="0.1631%" height="15" fill="rgb(229,13,5)" fg:x="312" fg:w="2"/><text x="25.6986%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (21 samples, 1.71%)</title><rect x="23.9804%" y="533" width="1.7129%" height="15" fill="rgb(244,67,35)" fg:x="294" fg:w="21"/><text x="24.2304%" y="543.50"></text></g><g><title>treediff::diff::diff (7 samples, 0.57%)</title><rect x="25.1223%" y="517" width="0.5710%" height="15" fill="rgb(221,40,2)" fg:x="308" fg:w="7"/><text x="25.3723%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="25.6117%" y="501" width="0.0816%" height="15" fill="rgb(237,157,21)" fg:x="314" fg:w="1"/><text x="25.8617%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.6117%" y="485" width="0.0816%" height="15" fill="rgb(222,94,11)" fg:x="314" fg:w="1"/><text x="25.8617%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.41%)</title><rect x="25.8564%" y="501" width="0.4078%" height="15" fill="rgb(249,113,6)" fg:x="317" fg:w="5"/><text x="26.1064%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.33%)</title><rect x="25.9380%" y="485" width="0.3263%" height="15" fill="rgb(238,137,36)" fg:x="318" fg:w="4"/><text x="26.1880%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (3 samples, 0.24%)</title><rect x="26.0196%" y="469" width="0.2447%" height="15" fill="rgb(210,102,26)" fg:x="319" fg:w="3"/><text x="26.2696%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="26.2643%" y="501" width="0.1631%" height="15" fill="rgb(218,30,30)" fg:x="322" fg:w="2"/><text x="26.5143%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.3458%" y="485" width="0.0816%" height="15" fill="rgb(214,67,26)" fg:x="323" fg:w="1"/><text x="26.5958%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="26.4274%" y="501" width="0.0816%" height="15" fill="rgb(251,9,53)" fg:x="324" fg:w="1"/><text x="26.6774%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.4274%" y="485" width="0.0816%" height="15" fill="rgb(228,204,25)" fg:x="324" fg:w="1"/><text x="26.6774%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.4274%" y="469" width="0.0816%" height="15" fill="rgb(207,153,8)" fg:x="324" fg:w="1"/><text x="26.6774%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.4274%" y="453" width="0.0816%" height="15" fill="rgb(242,9,16)" fg:x="324" fg:w="1"/><text x="26.6774%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.4274%" y="437" width="0.0816%" height="15" fill="rgb(217,211,10)" fg:x="324" fg:w="1"/><text x="26.6774%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="26.5090%" y="469" width="0.0816%" height="15" fill="rgb(219,228,52)" fg:x="325" fg:w="1"/><text x="26.7590%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.5905%" y="453" width="0.1631%" height="15" fill="rgb(231,92,29)" fg:x="326" fg:w="2"/><text x="26.8405%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.6721%" y="437" width="0.0816%" height="15" fill="rgb(232,8,23)" fg:x="327" fg:w="1"/><text x="26.9221%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.6721%" y="421" width="0.0816%" height="15" fill="rgb(216,211,34)" fg:x="327" fg:w="1"/><text x="26.9221%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="26.8352%" y="421" width="0.2447%" height="15" fill="rgb(236,151,0)" fg:x="329" fg:w="3"/><text x="27.0852%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.9168%" y="405" width="0.1631%" height="15" fill="rgb(209,168,3)" fg:x="330" fg:w="2"/><text x="27.1668%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.9984%" y="389" width="0.0816%" height="15" fill="rgb(208,129,28)" fg:x="331" fg:w="1"/><text x="27.2484%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="27.2431%" y="389" width="0.2447%" height="15" fill="rgb(229,78,22)" fg:x="334" fg:w="3"/><text x="27.4931%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.4062%" y="373" width="0.0816%" height="15" fill="rgb(228,187,13)" fg:x="336" fg:w="1"/><text x="27.6562%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.73%)</title><rect x="26.8352%" y="437" width="0.7341%" height="15" fill="rgb(240,119,24)" fg:x="329" fg:w="9"/><text x="27.0852%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="27.0799%" y="421" width="0.4894%" height="15" fill="rgb(209,194,42)" fg:x="332" fg:w="6"/><text x="27.3299%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="27.2431%" y="405" width="0.3263%" height="15" fill="rgb(247,200,46)" fg:x="334" fg:w="4"/><text x="27.4931%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="27.4878%" y="389" width="0.0816%" height="15" fill="rgb(218,76,16)" fg:x="337" fg:w="1"/><text x="27.7378%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.4878%" y="373" width="0.0816%" height="15" fill="rgb(225,21,48)" fg:x="337" fg:w="1"/><text x="27.7378%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (13 samples, 1.06%)</title><rect x="26.5905%" y="469" width="1.0604%" height="15" fill="rgb(239,223,50)" fg:x="326" fg:w="13"/><text x="26.8405%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (11 samples, 0.90%)</title><rect x="26.7537%" y="453" width="0.8972%" height="15" fill="rgb(244,45,21)" fg:x="328" fg:w="11"/><text x="27.0037%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.5693%" y="437" width="0.0816%" height="15" fill="rgb(232,33,43)" fg:x="338" fg:w="1"/><text x="27.8193%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (16 samples, 1.31%)</title><rect x="26.5090%" y="485" width="1.3051%" height="15" fill="rgb(209,8,3)" fg:x="325" fg:w="16"/><text x="26.7590%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="27.6509%" y="469" width="0.1631%" height="15" fill="rgb(214,25,53)" fg:x="339" fg:w="2"/><text x="27.9009%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.7325%" y="453" width="0.0816%" height="15" fill="rgb(254,186,54)" fg:x="340" fg:w="1"/><text x="27.9825%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.8956%" y="453" width="0.0816%" height="15" fill="rgb(208,174,49)" fg:x="342" fg:w="1"/><text x="28.1456%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (29 samples, 2.37%)</title><rect x="25.6933%" y="533" width="2.3654%" height="15" fill="rgb(233,191,51)" fg:x="315" fg:w="29"/><text x="25.9433%" y="543.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (29 samples, 2.37%)</title><rect x="25.6933%" y="517" width="2.3654%" height="15" fill="rgb(222,134,10)" fg:x="315" fg:w="29"/><text x="25.9433%" y="527.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (19 samples, 1.55%)</title><rect x="26.5090%" y="501" width="1.5498%" height="15" fill="rgb(230,226,20)" fg:x="325" fg:w="19"/><text x="26.7590%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="27.8140%" y="485" width="0.2447%" height="15" fill="rgb(251,111,25)" fg:x="341" fg:w="3"/><text x="28.0640%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.8956%" y="469" width="0.1631%" height="15" fill="rgb(224,40,46)" fg:x="342" fg:w="2"/><text x="28.1456%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="27.9772%" y="453" width="0.0816%" height="15" fill="rgb(236,108,47)" fg:x="343" fg:w="1"/><text x="28.2272%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.3034%" y="389" width="0.0816%" height="15" fill="rgb(234,93,0)" fg:x="347" fg:w="1"/><text x="28.5534%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.3034%" y="373" width="0.0816%" height="15" fill="rgb(224,213,32)" fg:x="347" fg:w="1"/><text x="28.5534%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.3034%" y="357" width="0.0816%" height="15" fill="rgb(251,11,48)" fg:x="347" fg:w="1"/><text x="28.5534%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.3034%" y="341" width="0.0816%" height="15" fill="rgb(236,173,5)" fg:x="347" fg:w="1"/><text x="28.5534%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.3034%" y="325" width="0.0816%" height="15" fill="rgb(230,95,12)" fg:x="347" fg:w="1"/><text x="28.5534%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="28.4666%" y="357" width="0.0816%" height="15" fill="rgb(232,209,1)" fg:x="349" fg:w="1"/><text x="28.7166%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="28.4666%" y="373" width="0.3263%" height="15" fill="rgb(232,6,1)" fg:x="349" fg:w="4"/><text x="28.7166%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="28.5481%" y="357" width="0.2447%" height="15" fill="rgb(210,224,50)" fg:x="350" fg:w="3"/><text x="28.7981%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="28.5481%" y="341" width="0.2447%" height="15" fill="rgb(228,127,35)" fg:x="350" fg:w="3"/><text x="28.7981%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="28.5481%" y="325" width="0.2447%" height="15" fill="rgb(245,102,45)" fg:x="350" fg:w="3"/><text x="28.7981%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="28.7113%" y="309" width="0.0816%" height="15" fill="rgb(214,1,49)" fg:x="352" fg:w="1"/><text x="28.9613%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="28.7928%" y="373" width="0.1631%" height="15" fill="rgb(226,163,40)" fg:x="353" fg:w="2"/><text x="29.0428%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.8744%" y="357" width="0.0816%" height="15" fill="rgb(239,212,28)" fg:x="354" fg:w="1"/><text x="29.1244%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.82%)</title><rect x="28.3034%" y="405" width="0.8157%" height="15" fill="rgb(220,20,13)" fg:x="347" fg:w="10"/><text x="28.5534%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.73%)</title><rect x="28.3850%" y="389" width="0.7341%" height="15" fill="rgb(210,164,35)" fg:x="348" fg:w="9"/><text x="28.6350%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.9560%" y="373" width="0.1631%" height="15" fill="rgb(248,109,41)" fg:x="355" fg:w="2"/><text x="29.2060%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.9560%" y="357" width="0.1631%" height="15" fill="rgb(238,23,50)" fg:x="355" fg:w="2"/><text x="29.2060%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="29.0375%" y="341" width="0.0816%" height="15" fill="rgb(211,48,49)" fg:x="356" fg:w="1"/><text x="29.2875%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="29.1191%" y="389" width="0.0816%" height="15" fill="rgb(223,36,21)" fg:x="357" fg:w="1"/><text x="29.3691%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.06%)</title><rect x="28.2219%" y="437" width="1.0604%" height="15" fill="rgb(207,123,46)" fg:x="346" fg:w="13"/><text x="28.4719%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.06%)</title><rect x="28.2219%" y="421" width="1.0604%" height="15" fill="rgb(240,218,32)" fg:x="346" fg:w="13"/><text x="28.4719%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="29.1191%" y="405" width="0.1631%" height="15" fill="rgb(252,5,43)" fg:x="357" fg:w="2"/><text x="29.3691%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.2007%" y="389" width="0.0816%" height="15" fill="rgb(252,84,19)" fg:x="358" fg:w="1"/><text x="29.4507%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.2822%" y="437" width="0.0816%" height="15" fill="rgb(243,152,39)" fg:x="359" fg:w="1"/><text x="29.5322%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="29.2822%" y="421" width="0.0816%" height="15" fill="rgb(234,160,15)" fg:x="359" fg:w="1"/><text x="29.5322%" y="431.50"></text></g><g><title>engine::session::Session::close (92 samples, 7.50%)</title><rect x="22.0228%" y="645" width="7.5041%" height="15" fill="rgb(237,34,20)" fg:x="270" fg:w="92"/><text x="22.2728%" y="655.50">engine::se..</text></g><g><title>engine::session::state::State::close (91 samples, 7.42%)</title><rect x="22.1044%" y="629" width="7.4225%" height="15" fill="rgb(229,97,13)" fg:x="271" fg:w="91"/><text x="22.3544%" y="639.50">engine::se..</text></g><g><title>engine::session::state::State::flush_entities (91 samples, 7.42%)</title><rect x="22.1044%" y="613" width="7.4225%" height="15" fill="rgb(234,71,50)" fg:x="271" fg:w="91"/><text x="22.3544%" y="623.50">engine::se..</text></g><g><title>core::iter::adapters::try_process (90 samples, 7.34%)</title><rect x="22.1860%" y="597" width="7.3409%" height="15" fill="rgb(253,155,4)" fg:x="272" fg:w="90"/><text x="22.4360%" y="607.50">core::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (90 samples, 7.34%)</title><rect x="22.1860%" y="581" width="7.3409%" height="15" fill="rgb(222,185,37)" fg:x="272" fg:w="90"/><text x="22.4360%" y="591.50">&lt;alloc::ve..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (90 samples, 7.34%)</title><rect x="22.1860%" y="565" width="7.3409%" height="15" fill="rgb(251,177,13)" fg:x="272" fg:w="90"/><text x="22.4360%" y="575.50">engine::se..</text></g><g><title>kernel::model::any_entity_changes (68 samples, 5.55%)</title><rect x="23.9804%" y="549" width="5.5465%" height="15" fill="rgb(250,179,40)" fg:x="294" fg:w="68"/><text x="24.2304%" y="559.50">kernel:..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (18 samples, 1.47%)</title><rect x="28.0587%" y="533" width="1.4682%" height="15" fill="rgb(242,44,2)" fg:x="344" fg:w="18"/><text x="28.3087%" y="543.50"></text></g><g><title>serde_json::de::from_trait (18 samples, 1.47%)</title><rect x="28.0587%" y="517" width="1.4682%" height="15" fill="rgb(216,177,13)" fg:x="344" fg:w="18"/><text x="28.3087%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.47%)</title><rect x="28.0587%" y="501" width="1.4682%" height="15" fill="rgb(216,106,43)" fg:x="344" fg:w="18"/><text x="28.3087%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (18 samples, 1.47%)</title><rect x="28.0587%" y="485" width="1.4682%" height="15" fill="rgb(216,183,2)" fg:x="344" fg:w="18"/><text x="28.3087%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.47%)</title><rect x="28.0587%" y="469" width="1.4682%" height="15" fill="rgb(249,75,3)" fg:x="344" fg:w="18"/><text x="28.3087%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (18 samples, 1.47%)</title><rect x="28.0587%" y="453" width="1.4682%" height="15" fill="rgb(219,67,39)" fg:x="344" fg:w="18"/><text x="28.3087%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.3638%" y="437" width="0.1631%" height="15" fill="rgb(253,228,2)" fg:x="360" fg:w="2"/><text x="29.6138%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.4454%" y="421" width="0.0816%" height="15" fill="rgb(235,138,27)" fg:x="361" fg:w="1"/><text x="29.6954%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.6900%" y="421" width="0.0816%" height="15" fill="rgb(236,97,51)" fg:x="364" fg:w="1"/><text x="29.9400%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.6900%" y="405" width="0.0816%" height="15" fill="rgb(240,80,30)" fg:x="364" fg:w="1"/><text x="29.9400%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.6900%" y="389" width="0.0816%" height="15" fill="rgb(230,178,19)" fg:x="364" fg:w="1"/><text x="29.9400%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.6900%" y="373" width="0.0816%" height="15" fill="rgb(210,190,27)" fg:x="364" fg:w="1"/><text x="29.9400%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.6900%" y="357" width="0.0816%" height="15" fill="rgb(222,107,31)" fg:x="364" fg:w="1"/><text x="29.9400%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.6900%" y="341" width="0.0816%" height="15" fill="rgb(216,127,34)" fg:x="364" fg:w="1"/><text x="29.9400%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.6900%" y="325" width="0.0816%" height="15" fill="rgb(234,116,52)" fg:x="364" fg:w="1"/><text x="29.9400%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.6900%" y="309" width="0.0816%" height="15" fill="rgb(222,124,15)" fg:x="364" fg:w="1"/><text x="29.9400%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.6900%" y="293" width="0.0816%" height="15" fill="rgb(231,179,28)" fg:x="364" fg:w="1"/><text x="29.9400%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.6900%" y="277" width="0.0816%" height="15" fill="rgb(226,93,45)" fg:x="364" fg:w="1"/><text x="29.9400%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="29.6900%" y="261" width="0.0816%" height="15" fill="rgb(215,8,51)" fg:x="364" fg:w="1"/><text x="29.9400%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="29.6900%" y="245" width="0.0816%" height="15" fill="rgb(223,106,5)" fg:x="364" fg:w="1"/><text x="29.9400%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="29.6900%" y="229" width="0.0816%" height="15" fill="rgb(250,191,5)" fg:x="364" fg:w="1"/><text x="29.9400%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="29.6900%" y="213" width="0.0816%" height="15" fill="rgb(242,132,44)" fg:x="364" fg:w="1"/><text x="29.9400%" y="223.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="29.6900%" y="197" width="0.0816%" height="15" fill="rgb(251,152,29)" fg:x="364" fg:w="1"/><text x="29.9400%" y="207.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="29.6900%" y="181" width="0.0816%" height="15" fill="rgb(218,179,5)" fg:x="364" fg:w="1"/><text x="29.9400%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="29.6900%" y="469" width="0.1631%" height="15" fill="rgb(227,67,19)" fg:x="364" fg:w="2"/><text x="29.9400%" y="479.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="29.6900%" y="453" width="0.1631%" height="15" fill="rgb(233,119,31)" fg:x="364" fg:w="2"/><text x="29.9400%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="29.6900%" y="437" width="0.1631%" height="15" fill="rgb(241,120,22)" fg:x="364" fg:w="2"/><text x="29.9400%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.7716%" y="421" width="0.0816%" height="15" fill="rgb(224,102,30)" fg:x="365" fg:w="1"/><text x="30.0216%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.7716%" y="405" width="0.0816%" height="15" fill="rgb(210,164,37)" fg:x="365" fg:w="1"/><text x="30.0216%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="29.7716%" y="389" width="0.0816%" height="15" fill="rgb(226,191,16)" fg:x="365" fg:w="1"/><text x="30.0216%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.7716%" y="373" width="0.0816%" height="15" fill="rgb(214,40,45)" fg:x="365" fg:w="1"/><text x="30.0216%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.7716%" y="357" width="0.0816%" height="15" fill="rgb(244,29,26)" fg:x="365" fg:w="1"/><text x="30.0216%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="29.7716%" y="341" width="0.0816%" height="15" fill="rgb(216,16,5)" fg:x="365" fg:w="1"/><text x="30.0216%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="29.7716%" y="325" width="0.0816%" height="15" fill="rgb(249,76,35)" fg:x="365" fg:w="1"/><text x="30.0216%" y="335.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="29.6900%" y="533" width="0.2447%" height="15" fill="rgb(207,11,44)" fg:x="364" fg:w="3"/><text x="29.9400%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (3 samples, 0.24%)</title><rect x="29.6900%" y="517" width="0.2447%" height="15" fill="rgb(228,190,49)" fg:x="364" fg:w="3"/><text x="29.9400%" y="527.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (3 samples, 0.24%)</title><rect x="29.6900%" y="501" width="0.2447%" height="15" fill="rgb(214,173,12)" fg:x="364" fg:w="3"/><text x="29.9400%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="29.6900%" y="485" width="0.2447%" height="15" fill="rgb(218,26,35)" fg:x="364" fg:w="3"/><text x="29.9400%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="29.8532%" y="469" width="0.0816%" height="15" fill="rgb(220,200,19)" fg:x="366" fg:w="1"/><text x="30.1032%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="29.8532%" y="453" width="0.0816%" height="15" fill="rgb(239,95,49)" fg:x="366" fg:w="1"/><text x="30.1032%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="29.8532%" y="437" width="0.0816%" height="15" fill="rgb(235,85,53)" fg:x="366" fg:w="1"/><text x="30.1032%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.8532%" y="421" width="0.0816%" height="15" fill="rgb(233,133,31)" fg:x="366" fg:w="1"/><text x="30.1032%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.8532%" y="405" width="0.0816%" height="15" fill="rgb(218,25,20)" fg:x="366" fg:w="1"/><text x="30.1032%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.8532%" y="389" width="0.0816%" height="15" fill="rgb(252,210,38)" fg:x="366" fg:w="1"/><text x="30.1032%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.8532%" y="373" width="0.0816%" height="15" fill="rgb(242,134,21)" fg:x="366" fg:w="1"/><text x="30.1032%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.8532%" y="357" width="0.0816%" height="15" fill="rgb(213,28,48)" fg:x="366" fg:w="1"/><text x="30.1032%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.8532%" y="341" width="0.0816%" height="15" fill="rgb(250,196,2)" fg:x="366" fg:w="1"/><text x="30.1032%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.8532%" y="325" width="0.0816%" height="15" fill="rgb(227,5,17)" fg:x="366" fg:w="1"/><text x="30.1032%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.8532%" y="309" width="0.0816%" height="15" fill="rgb(221,226,24)" fg:x="366" fg:w="1"/><text x="30.1032%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="29.8532%" y="293" width="0.0816%" height="15" fill="rgb(211,5,48)" fg:x="366" fg:w="1"/><text x="30.1032%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="29.8532%" y="277" width="0.0816%" height="15" fill="rgb(219,150,6)" fg:x="366" fg:w="1"/><text x="30.1032%" y="287.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.41%)</title><rect x="29.6085%" y="549" width="0.4078%" height="15" fill="rgb(251,46,16)" fg:x="363" fg:w="5"/><text x="29.8585%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="29.9347%" y="533" width="0.0816%" height="15" fill="rgb(220,204,40)" fg:x="367" fg:w="1"/><text x="30.1847%" y="543.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="29.9347%" y="517" width="0.0816%" height="15" fill="rgb(211,85,2)" fg:x="367" fg:w="1"/><text x="30.1847%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="29.9347%" y="501" width="0.0816%" height="15" fill="rgb(229,17,7)" fg:x="367" fg:w="1"/><text x="30.1847%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="29.9347%" y="485" width="0.0816%" height="15" fill="rgb(239,72,28)" fg:x="367" fg:w="1"/><text x="30.1847%" y="495.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="29.9347%" y="469" width="0.0816%" height="15" fill="rgb(230,47,54)" fg:x="367" fg:w="1"/><text x="30.1847%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="29.9347%" y="453" width="0.0816%" height="15" fill="rgb(214,50,8)" fg:x="367" fg:w="1"/><text x="30.1847%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.9347%" y="437" width="0.0816%" height="15" fill="rgb(216,198,43)" fg:x="367" fg:w="1"/><text x="30.1847%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.9347%" y="421" width="0.0816%" height="15" fill="rgb(234,20,35)" fg:x="367" fg:w="1"/><text x="30.1847%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.9347%" y="405" width="0.0816%" height="15" fill="rgb(254,45,19)" fg:x="367" fg:w="1"/><text x="30.1847%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.9347%" y="389" width="0.0816%" height="15" fill="rgb(219,14,44)" fg:x="367" fg:w="1"/><text x="30.1847%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.9347%" y="373" width="0.0816%" height="15" fill="rgb(217,220,26)" fg:x="367" fg:w="1"/><text x="30.1847%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.9347%" y="357" width="0.0816%" height="15" fill="rgb(213,158,28)" fg:x="367" fg:w="1"/><text x="30.1847%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.9347%" y="341" width="0.0816%" height="15" fill="rgb(252,51,52)" fg:x="367" fg:w="1"/><text x="30.1847%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.9347%" y="325" width="0.0816%" height="15" fill="rgb(246,89,16)" fg:x="367" fg:w="1"/><text x="30.1847%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.9347%" y="309" width="0.0816%" height="15" fill="rgb(216,158,49)" fg:x="367" fg:w="1"/><text x="30.1847%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.9347%" y="293" width="0.0816%" height="15" fill="rgb(236,107,19)" fg:x="367" fg:w="1"/><text x="30.1847%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="29.9347%" y="277" width="0.0816%" height="15" fill="rgb(228,185,30)" fg:x="367" fg:w="1"/><text x="30.1847%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="29.9347%" y="261" width="0.0816%" height="15" fill="rgb(246,134,8)" fg:x="367" fg:w="1"/><text x="30.1847%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="29.9347%" y="245" width="0.0816%" height="15" fill="rgb(214,143,50)" fg:x="367" fg:w="1"/><text x="30.1847%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="29.9347%" y="229" width="0.0816%" height="15" fill="rgb(228,75,8)" fg:x="367" fg:w="1"/><text x="30.1847%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.9347%" y="213" width="0.0816%" height="15" fill="rgb(207,175,4)" fg:x="367" fg:w="1"/><text x="30.1847%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.1794%" y="357" width="0.0816%" height="15" fill="rgb(205,108,24)" fg:x="370" fg:w="1"/><text x="30.4294%" y="367.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (2 samples, 0.16%)</title><rect x="30.1794%" y="421" width="0.1631%" height="15" fill="rgb(244,120,49)" fg:x="370" fg:w="2"/><text x="30.4294%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="30.1794%" y="405" width="0.1631%" height="15" fill="rgb(223,47,38)" fg:x="370" fg:w="2"/><text x="30.4294%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (2 samples, 0.16%)</title><rect x="30.1794%" y="389" width="0.1631%" height="15" fill="rgb(229,179,11)" fg:x="370" fg:w="2"/><text x="30.4294%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="30.1794%" y="373" width="0.1631%" height="15" fill="rgb(231,122,1)" fg:x="370" fg:w="2"/><text x="30.4294%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="30.2610%" y="357" width="0.0816%" height="15" fill="rgb(245,119,9)" fg:x="371" fg:w="1"/><text x="30.5110%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="30.2610%" y="341" width="0.0816%" height="15" fill="rgb(241,163,25)" fg:x="371" fg:w="1"/><text x="30.5110%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="30.5057%" y="373" width="0.0816%" height="15" fill="rgb(217,214,3)" fg:x="374" fg:w="1"/><text x="30.7557%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="30.5873%" y="309" width="0.1631%" height="15" fill="rgb(240,86,28)" fg:x="375" fg:w="2"/><text x="30.8373%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.6688%" y="293" width="0.0816%" height="15" fill="rgb(215,47,9)" fg:x="376" fg:w="1"/><text x="30.9188%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.6688%" y="277" width="0.0816%" height="15" fill="rgb(252,25,45)" fg:x="376" fg:w="1"/><text x="30.9188%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="30.6688%" y="261" width="0.0816%" height="15" fill="rgb(251,164,9)" fg:x="376" fg:w="1"/><text x="30.9188%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="30.6688%" y="245" width="0.0816%" height="15" fill="rgb(233,194,0)" fg:x="376" fg:w="1"/><text x="30.9188%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="30.6688%" y="229" width="0.0816%" height="15" fill="rgb(249,111,24)" fg:x="376" fg:w="1"/><text x="30.9188%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.6688%" y="213" width="0.0816%" height="15" fill="rgb(250,223,3)" fg:x="376" fg:w="1"/><text x="30.9188%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.6688%" y="197" width="0.0816%" height="15" fill="rgb(236,178,37)" fg:x="376" fg:w="1"/><text x="30.9188%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="30.6688%" y="181" width="0.0816%" height="15" fill="rgb(241,158,50)" fg:x="376" fg:w="1"/><text x="30.9188%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="30.6688%" y="165" width="0.0816%" height="15" fill="rgb(213,121,41)" fg:x="376" fg:w="1"/><text x="30.9188%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="30.6688%" y="149" width="0.0816%" height="15" fill="rgb(240,92,3)" fg:x="376" fg:w="1"/><text x="30.9188%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="30.6688%" y="133" width="0.0816%" height="15" fill="rgb(205,123,3)" fg:x="376" fg:w="1"/><text x="30.9188%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6688%" y="117" width="0.0816%" height="15" fill="rgb(205,97,47)" fg:x="376" fg:w="1"/><text x="30.9188%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="30.5873%" y="341" width="0.2447%" height="15" fill="rgb(247,152,14)" fg:x="375" fg:w="3"/><text x="30.8373%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="30.5873%" y="325" width="0.2447%" height="15" fill="rgb(248,195,53)" fg:x="375" fg:w="3"/><text x="30.8373%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.7504%" y="309" width="0.0816%" height="15" fill="rgb(226,201,16)" fg:x="377" fg:w="1"/><text x="31.0004%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.7504%" y="293" width="0.0816%" height="15" fill="rgb(205,98,0)" fg:x="377" fg:w="1"/><text x="31.0004%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="30.7504%" y="277" width="0.0816%" height="15" fill="rgb(214,191,48)" fg:x="377" fg:w="1"/><text x="31.0004%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="30.7504%" y="261" width="0.0816%" height="15" fill="rgb(237,112,39)" fg:x="377" fg:w="1"/><text x="31.0004%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="30.7504%" y="245" width="0.0816%" height="15" fill="rgb(247,203,27)" fg:x="377" fg:w="1"/><text x="31.0004%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="30.7504%" y="229" width="0.0816%" height="15" fill="rgb(235,124,28)" fg:x="377" fg:w="1"/><text x="31.0004%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="30.7504%" y="213" width="0.0816%" height="15" fill="rgb(208,207,46)" fg:x="377" fg:w="1"/><text x="31.0004%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.41%)</title><rect x="30.5057%" y="389" width="0.4078%" height="15" fill="rgb(234,176,4)" fg:x="374" fg:w="5"/><text x="30.7557%" y="399.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.33%)</title><rect x="30.5873%" y="373" width="0.3263%" height="15" fill="rgb(230,133,28)" fg:x="375" fg:w="4"/><text x="30.8373%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="30.5873%" y="357" width="0.3263%" height="15" fill="rgb(211,137,40)" fg:x="375" fg:w="4"/><text x="30.8373%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="30.8320%" y="341" width="0.0816%" height="15" fill="rgb(254,35,13)" fg:x="378" fg:w="1"/><text x="31.0820%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.8320%" y="325" width="0.0816%" height="15" fill="rgb(225,49,51)" fg:x="378" fg:w="1"/><text x="31.0820%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="30.8320%" y="309" width="0.0816%" height="15" fill="rgb(251,10,15)" fg:x="378" fg:w="1"/><text x="31.0820%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.8320%" y="293" width="0.0816%" height="15" fill="rgb(228,207,15)" fg:x="378" fg:w="1"/><text x="31.0820%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.8320%" y="277" width="0.0816%" height="15" fill="rgb(241,99,19)" fg:x="378" fg:w="1"/><text x="31.0820%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.9135%" y="373" width="0.0816%" height="15" fill="rgb(207,104,49)" fg:x="379" fg:w="1"/><text x="31.1635%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.9135%" y="357" width="0.0816%" height="15" fill="rgb(234,99,18)" fg:x="379" fg:w="1"/><text x="31.1635%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="30.9135%" y="341" width="0.0816%" height="15" fill="rgb(213,191,49)" fg:x="379" fg:w="1"/><text x="31.1635%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="30.9135%" y="325" width="0.0816%" height="15" fill="rgb(210,226,19)" fg:x="379" fg:w="1"/><text x="31.1635%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="30.9135%" y="309" width="0.0816%" height="15" fill="rgb(229,97,18)" fg:x="379" fg:w="1"/><text x="31.1635%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.9135%" y="293" width="0.0816%" height="15" fill="rgb(211,167,15)" fg:x="379" fg:w="1"/><text x="31.1635%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.9135%" y="277" width="0.0816%" height="15" fill="rgb(210,169,34)" fg:x="379" fg:w="1"/><text x="31.1635%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="30.9135%" y="261" width="0.0816%" height="15" fill="rgb(241,121,31)" fg:x="379" fg:w="1"/><text x="31.1635%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="30.9135%" y="245" width="0.0816%" height="15" fill="rgb(232,40,11)" fg:x="379" fg:w="1"/><text x="31.1635%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="30.9135%" y="229" width="0.0816%" height="15" fill="rgb(205,86,26)" fg:x="379" fg:w="1"/><text x="31.1635%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="30.9135%" y="213" width="0.0816%" height="15" fill="rgb(231,126,28)" fg:x="379" fg:w="1"/><text x="31.1635%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.9135%" y="197" width="0.0816%" height="15" fill="rgb(219,221,18)" fg:x="379" fg:w="1"/><text x="31.1635%" y="207.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="30.9951%" y="373" width="0.0816%" height="15" fill="rgb(211,40,0)" fg:x="380" fg:w="1"/><text x="31.2451%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.33%)</title><rect x="31.1582%" y="325" width="0.3263%" height="15" fill="rgb(239,85,43)" fg:x="382" fg:w="4"/><text x="31.4082%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.33%)</title><rect x="31.1582%" y="309" width="0.3263%" height="15" fill="rgb(231,55,21)" fg:x="382" fg:w="4"/><text x="31.4082%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="31.2398%" y="293" width="0.2447%" height="15" fill="rgb(225,184,43)" fg:x="383" fg:w="3"/><text x="31.4898%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.4029%" y="277" width="0.0816%" height="15" fill="rgb(251,158,41)" fg:x="385" fg:w="1"/><text x="31.6529%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.4029%" y="261" width="0.0816%" height="15" fill="rgb(234,159,37)" fg:x="385" fg:w="1"/><text x="31.6529%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.4029%" y="245" width="0.0816%" height="15" fill="rgb(216,204,22)" fg:x="385" fg:w="1"/><text x="31.6529%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.4029%" y="229" width="0.0816%" height="15" fill="rgb(214,17,3)" fg:x="385" fg:w="1"/><text x="31.6529%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.4029%" y="213" width="0.0816%" height="15" fill="rgb(212,111,17)" fg:x="385" fg:w="1"/><text x="31.6529%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.4029%" y="197" width="0.0816%" height="15" fill="rgb(221,157,24)" fg:x="385" fg:w="1"/><text x="31.6529%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.4029%" y="181" width="0.0816%" height="15" fill="rgb(252,16,13)" fg:x="385" fg:w="1"/><text x="31.6529%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="31.4029%" y="165" width="0.0816%" height="15" fill="rgb(221,62,2)" fg:x="385" fg:w="1"/><text x="31.6529%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="31.4029%" y="149" width="0.0816%" height="15" fill="rgb(247,87,22)" fg:x="385" fg:w="1"/><text x="31.6529%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="31.4029%" y="133" width="0.0816%" height="15" fill="rgb(215,73,9)" fg:x="385" fg:w="1"/><text x="31.6529%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.4029%" y="117" width="0.0816%" height="15" fill="rgb(207,175,33)" fg:x="385" fg:w="1"/><text x="31.6529%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="31.1582%" y="341" width="0.4078%" height="15" fill="rgb(243,129,54)" fg:x="382" fg:w="5"/><text x="31.4082%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.4845%" y="325" width="0.0816%" height="15" fill="rgb(227,119,45)" fg:x="386" fg:w="1"/><text x="31.7345%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.5661%" y="309" width="0.0816%" height="15" fill="rgb(205,109,36)" fg:x="387" fg:w="1"/><text x="31.8161%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (11 samples, 0.90%)</title><rect x="30.9135%" y="389" width="0.8972%" height="15" fill="rgb(205,6,39)" fg:x="379" fg:w="11"/><text x="31.1635%" y="399.50"></text></g><g><title>kernel::model::props::load_props (9 samples, 0.73%)</title><rect x="31.0767%" y="373" width="0.7341%" height="15" fill="rgb(221,32,16)" fg:x="381" fg:w="9"/><text x="31.3267%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (9 samples, 0.73%)</title><rect x="31.0767%" y="357" width="0.7341%" height="15" fill="rgb(228,144,50)" fg:x="381" fg:w="9"/><text x="31.3267%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="31.5661%" y="341" width="0.2447%" height="15" fill="rgb(229,201,53)" fg:x="387" fg:w="3"/><text x="31.8161%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="31.5661%" y="325" width="0.2447%" height="15" fill="rgb(249,153,27)" fg:x="387" fg:w="3"/><text x="31.8161%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="31.6476%" y="309" width="0.1631%" height="15" fill="rgb(227,106,25)" fg:x="388" fg:w="2"/><text x="31.8976%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="31.6476%" y="293" width="0.1631%" height="15" fill="rgb(230,65,29)" fg:x="388" fg:w="2"/><text x="31.8976%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="31.6476%" y="277" width="0.1631%" height="15" fill="rgb(221,57,46)" fg:x="388" fg:w="2"/><text x="31.8976%" y="287.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="31.9739%" y="325" width="0.0816%" height="15" fill="rgb(229,161,17)" fg:x="392" fg:w="1"/><text x="32.2239%" y="335.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="31.9739%" y="309" width="0.0816%" height="15" fill="rgb(222,213,11)" fg:x="392" fg:w="1"/><text x="32.2239%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="31.9739%" y="293" width="0.0816%" height="15" fill="rgb(235,35,13)" fg:x="392" fg:w="1"/><text x="32.2239%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.9739%" y="277" width="0.0816%" height="15" fill="rgb(233,158,34)" fg:x="392" fg:w="1"/><text x="32.2239%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.9739%" y="261" width="0.0816%" height="15" fill="rgb(215,151,48)" fg:x="392" fg:w="1"/><text x="32.2239%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.9739%" y="245" width="0.0816%" height="15" fill="rgb(229,84,14)" fg:x="392" fg:w="1"/><text x="32.2239%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="31.9739%" y="229" width="0.0816%" height="15" fill="rgb(229,68,14)" fg:x="392" fg:w="1"/><text x="32.2239%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="31.9739%" y="213" width="0.0816%" height="15" fill="rgb(243,106,26)" fg:x="392" fg:w="1"/><text x="32.2239%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="31.9739%" y="197" width="0.0816%" height="15" fill="rgb(206,45,38)" fg:x="392" fg:w="1"/><text x="32.2239%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9739%" y="181" width="0.0816%" height="15" fill="rgb(226,6,15)" fg:x="392" fg:w="1"/><text x="32.2239%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="32.0555%" y="229" width="0.1631%" height="15" fill="rgb(232,22,54)" fg:x="393" fg:w="2"/><text x="32.3055%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.1370%" y="213" width="0.0816%" height="15" fill="rgb(229,222,32)" fg:x="394" fg:w="1"/><text x="32.3870%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="32.1370%" y="197" width="0.0816%" height="15" fill="rgb(228,62,29)" fg:x="394" fg:w="1"/><text x="32.3870%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="32.0555%" y="309" width="0.2447%" height="15" fill="rgb(251,103,34)" fg:x="393" fg:w="3"/><text x="32.3055%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="32.0555%" y="293" width="0.2447%" height="15" fill="rgb(233,12,30)" fg:x="393" fg:w="3"/><text x="32.3055%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="32.0555%" y="277" width="0.2447%" height="15" fill="rgb(238,52,0)" fg:x="393" fg:w="3"/><text x="32.3055%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="32.0555%" y="261" width="0.2447%" height="15" fill="rgb(223,98,5)" fg:x="393" fg:w="3"/><text x="32.3055%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="32.0555%" y="245" width="0.2447%" height="15" fill="rgb(228,75,37)" fg:x="393" fg:w="3"/><text x="32.3055%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="32.2186%" y="229" width="0.0816%" height="15" fill="rgb(205,115,49)" fg:x="395" fg:w="1"/><text x="32.4686%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.3002%" y="293" width="0.0816%" height="15" fill="rgb(250,154,43)" fg:x="396" fg:w="1"/><text x="32.5502%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="32.3817%" y="277" width="0.0816%" height="15" fill="rgb(226,43,29)" fg:x="397" fg:w="1"/><text x="32.6317%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="32.3817%" y="261" width="0.0816%" height="15" fill="rgb(249,228,39)" fg:x="397" fg:w="1"/><text x="32.6317%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="32.3817%" y="245" width="0.0816%" height="15" fill="rgb(216,79,43)" fg:x="397" fg:w="1"/><text x="32.6317%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.4633%" y="261" width="0.0816%" height="15" fill="rgb(228,95,12)" fg:x="398" fg:w="1"/><text x="32.7133%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="32.3002%" y="309" width="0.3263%" height="15" fill="rgb(249,221,15)" fg:x="396" fg:w="4"/><text x="32.5502%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="32.3817%" y="293" width="0.2447%" height="15" fill="rgb(233,34,13)" fg:x="397" fg:w="3"/><text x="32.6317%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="32.4633%" y="277" width="0.1631%" height="15" fill="rgb(214,103,39)" fg:x="398" fg:w="2"/><text x="32.7133%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="32.5449%" y="261" width="0.0816%" height="15" fill="rgb(251,126,39)" fg:x="399" fg:w="1"/><text x="32.7949%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="32.6264%" y="293" width="0.0816%" height="15" fill="rgb(214,216,36)" fg:x="400" fg:w="1"/><text x="32.8764%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.7080%" y="277" width="0.0816%" height="15" fill="rgb(220,221,8)" fg:x="401" fg:w="1"/><text x="32.9580%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="32.7896%" y="261" width="0.0816%" height="15" fill="rgb(240,216,3)" fg:x="402" fg:w="1"/><text x="33.0396%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.7896%" y="245" width="0.0816%" height="15" fill="rgb(232,218,17)" fg:x="402" fg:w="1"/><text x="33.0396%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.7896%" y="229" width="0.0816%" height="15" fill="rgb(229,163,45)" fg:x="402" fg:w="1"/><text x="33.0396%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.0343%" y="229" width="0.0816%" height="15" fill="rgb(231,110,42)" fg:x="405" fg:w="1"/><text x="33.2843%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.82%)</title><rect x="33.1158%" y="229" width="0.8157%" height="15" fill="rgb(208,170,48)" fg:x="406" fg:w="10"/><text x="33.3658%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="33.6868%" y="213" width="0.2447%" height="15" fill="rgb(239,116,25)" fg:x="413" fg:w="3"/><text x="33.9368%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.98%)</title><rect x="33.0343%" y="245" width="0.9788%" height="15" fill="rgb(219,200,50)" fg:x="405" fg:w="12"/><text x="33.2843%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="33.9315%" y="229" width="0.0816%" height="15" fill="rgb(245,200,0)" fg:x="416" fg:w="1"/><text x="34.1815%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="34.0131%" y="245" width="0.0816%" height="15" fill="rgb(245,119,33)" fg:x="417" fg:w="1"/><text x="34.2631%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="34.0131%" y="229" width="0.0816%" height="15" fill="rgb(231,125,12)" fg:x="417" fg:w="1"/><text x="34.2631%" y="239.50"></text></g><g><title>regex_syntax::parser::ParserBuilder::new (1 samples, 0.08%)</title><rect x="34.0131%" y="213" width="0.0816%" height="15" fill="rgb(216,96,41)" fg:x="417" fg:w="1"/><text x="34.2631%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="34.0946%" y="245" width="0.4078%" height="15" fill="rgb(248,43,45)" fg:x="418" fg:w="5"/><text x="34.3446%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="34.0946%" y="229" width="0.4078%" height="15" fill="rgb(217,222,7)" fg:x="418" fg:w="5"/><text x="34.3446%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="34.4209%" y="213" width="0.0816%" height="15" fill="rgb(233,28,6)" fg:x="422" fg:w="1"/><text x="34.6709%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="34.5024%" y="197" width="0.0816%" height="15" fill="rgb(231,218,15)" fg:x="423" fg:w="1"/><text x="34.7524%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="34.5840%" y="197" width="0.0816%" height="15" fill="rgb(226,171,48)" fg:x="424" fg:w="1"/><text x="34.8340%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="34.8287%" y="181" width="0.0816%" height="15" fill="rgb(235,201,9)" fg:x="427" fg:w="1"/><text x="35.0787%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.9103%" y="181" width="0.0816%" height="15" fill="rgb(217,80,15)" fg:x="428" fg:w="1"/><text x="35.1603%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="34.9918%" y="181" width="0.0816%" height="15" fill="rgb(219,152,8)" fg:x="429" fg:w="1"/><text x="35.2418%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.9918%" y="165" width="0.0816%" height="15" fill="rgb(243,107,38)" fg:x="429" fg:w="1"/><text x="35.2418%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.9918%" y="149" width="0.0816%" height="15" fill="rgb(231,17,5)" fg:x="429" fg:w="1"/><text x="35.2418%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.9918%" y="133" width="0.0816%" height="15" fill="rgb(209,25,54)" fg:x="429" fg:w="1"/><text x="35.2418%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="35.0734%" y="181" width="0.0816%" height="15" fill="rgb(219,0,2)" fg:x="430" fg:w="1"/><text x="35.3234%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="35.1550%" y="181" width="0.0816%" height="15" fill="rgb(246,9,5)" fg:x="431" fg:w="1"/><text x="35.4050%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="35.1550%" y="165" width="0.0816%" height="15" fill="rgb(226,159,4)" fg:x="431" fg:w="1"/><text x="35.4050%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="35.1550%" y="149" width="0.0816%" height="15" fill="rgb(219,175,34)" fg:x="431" fg:w="1"/><text x="35.4050%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (59 samples, 4.81%)</title><rect x="35.2365%" y="181" width="4.8124%" height="15" fill="rgb(236,10,46)" fg:x="432" fg:w="59"/><text x="35.4865%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (59 samples, 4.81%)</title><rect x="35.2365%" y="165" width="4.8124%" height="15" fill="rgb(240,211,16)" fg:x="432" fg:w="59"/><text x="35.4865%" y="175.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (59 samples, 4.81%)</title><rect x="35.2365%" y="149" width="4.8124%" height="15" fill="rgb(205,3,43)" fg:x="432" fg:w="59"/><text x="35.4865%" y="159.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="40.0489%" y="181" width="0.1631%" height="15" fill="rgb(245,7,22)" fg:x="491" fg:w="2"/><text x="40.2989%" y="191.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="40.2121%" y="181" width="0.0816%" height="15" fill="rgb(239,132,32)" fg:x="493" fg:w="1"/><text x="40.4621%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 5.87%)</title><rect x="34.5024%" y="229" width="5.8728%" height="15" fill="rgb(228,202,34)" fg:x="423" fg:w="72"/><text x="34.7524%" y="239.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (72 samples, 5.87%)</title><rect x="34.5024%" y="213" width="5.8728%" height="15" fill="rgb(254,200,22)" fg:x="423" fg:w="72"/><text x="34.7524%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (70 samples, 5.71%)</title><rect x="34.6656%" y="197" width="5.7096%" height="15" fill="rgb(219,10,39)" fg:x="425" fg:w="70"/><text x="34.9156%" y="207.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="40.2936%" y="181" width="0.0816%" height="15" fill="rgb(226,210,39)" fg:x="494" fg:w="1"/><text x="40.5436%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.4568%" y="213" width="0.0816%" height="15" fill="rgb(208,219,16)" fg:x="496" fg:w="1"/><text x="40.7068%" y="223.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="40.5383%" y="213" width="0.2447%" height="15" fill="rgb(216,158,51)" fg:x="497" fg:w="3"/><text x="40.7883%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.41%)</title><rect x="40.7830%" y="213" width="0.4078%" height="15" fill="rgb(233,14,44)" fg:x="500" fg:w="5"/><text x="41.0330%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="41.0277%" y="197" width="0.1631%" height="15" fill="rgb(237,97,39)" fg:x="503" fg:w="2"/><text x="41.2777%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.0277%" y="181" width="0.1631%" height="15" fill="rgb(218,198,43)" fg:x="503" fg:w="2"/><text x="41.2777%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.1093%" y="165" width="0.0816%" height="15" fill="rgb(231,104,20)" fg:x="504" fg:w="1"/><text x="41.3593%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.6803%" y="197" width="0.0816%" height="15" fill="rgb(254,36,13)" fg:x="511" fg:w="1"/><text x="41.9303%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (18 samples, 1.47%)</title><rect x="40.3752%" y="229" width="1.4682%" height="15" fill="rgb(248,14,50)" fg:x="495" fg:w="18"/><text x="40.6252%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.65%)</title><rect x="41.1909%" y="213" width="0.6525%" height="15" fill="rgb(217,107,29)" fg:x="505" fg:w="8"/><text x="41.4409%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.7618%" y="197" width="0.0816%" height="15" fill="rgb(251,169,33)" fg:x="512" fg:w="1"/><text x="42.0118%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.7618%" y="181" width="0.0816%" height="15" fill="rgb(217,108,32)" fg:x="512" fg:w="1"/><text x="42.0118%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.7618%" y="165" width="0.0816%" height="15" fill="rgb(219,66,42)" fg:x="512" fg:w="1"/><text x="42.0118%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="41.8434%" y="229" width="0.0816%" height="15" fill="rgb(206,180,7)" fg:x="513" fg:w="1"/><text x="42.0934%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="41.8434%" y="213" width="0.0816%" height="15" fill="rgb(208,226,31)" fg:x="513" fg:w="1"/><text x="42.0934%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (112 samples, 9.14%)</title><rect x="32.8711%" y="261" width="9.1354%" height="15" fill="rgb(218,26,49)" fg:x="403" fg:w="112"/><text x="33.1211%" y="271.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (92 samples, 7.50%)</title><rect x="34.5024%" y="245" width="7.5041%" height="15" fill="rgb(233,197,48)" fg:x="423" fg:w="92"/><text x="34.7524%" y="255.50">regex_auto..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="41.9250%" y="229" width="0.0816%" height="15" fill="rgb(252,181,51)" fg:x="514" fg:w="1"/><text x="42.1750%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="41.9250%" y="213" width="0.0816%" height="15" fill="rgb(253,90,19)" fg:x="514" fg:w="1"/><text x="42.1750%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.9250%" y="197" width="0.0816%" height="15" fill="rgb(215,171,30)" fg:x="514" fg:w="1"/><text x="42.1750%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="42.0881%" y="213" width="0.0816%" height="15" fill="rgb(214,222,9)" fg:x="516" fg:w="1"/><text x="42.3381%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="42.1697%" y="213" width="0.0816%" height="15" fill="rgb(223,3,22)" fg:x="517" fg:w="1"/><text x="42.4197%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek_space (1 samples, 0.08%)</title><rect x="42.1697%" y="197" width="0.0816%" height="15" fill="rgb(225,196,46)" fg:x="517" fg:w="1"/><text x="42.4197%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="42.2512%" y="213" width="0.0816%" height="15" fill="rgb(209,110,37)" fg:x="518" fg:w="1"/><text x="42.5012%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (3 samples, 0.24%)</title><rect x="42.3328%" y="213" width="0.2447%" height="15" fill="rgb(249,89,12)" fg:x="519" fg:w="3"/><text x="42.5828%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="42.3328%" y="197" width="0.2447%" height="15" fill="rgb(226,27,33)" fg:x="519" fg:w="3"/><text x="42.5828%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="42.4959%" y="181" width="0.0816%" height="15" fill="rgb(213,82,22)" fg:x="521" fg:w="1"/><text x="42.7459%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.82%)</title><rect x="42.0065%" y="261" width="0.8157%" height="15" fill="rgb(248,140,0)" fg:x="515" fg:w="10"/><text x="42.2565%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.82%)</title><rect x="42.0065%" y="245" width="0.8157%" height="15" fill="rgb(228,106,3)" fg:x="515" fg:w="10"/><text x="42.2565%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.73%)</title><rect x="42.0881%" y="229" width="0.7341%" height="15" fill="rgb(209,23,37)" fg:x="516" fg:w="9"/><text x="42.3381%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="42.5775%" y="213" width="0.2447%" height="15" fill="rgb(241,93,50)" fg:x="522" fg:w="3"/><text x="42.8275%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="42.5775%" y="197" width="0.2447%" height="15" fill="rgb(253,46,43)" fg:x="522" fg:w="3"/><text x="42.8275%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="42.5775%" y="181" width="0.2447%" height="15" fill="rgb(226,206,43)" fg:x="522" fg:w="3"/><text x="42.8275%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="42.5775%" y="165" width="0.2447%" height="15" fill="rgb(217,54,7)" fg:x="522" fg:w="3"/><text x="42.8275%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="43.0669%" y="213" width="0.0816%" height="15" fill="rgb(223,5,52)" fg:x="528" fg:w="1"/><text x="43.3169%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.0669%" y="197" width="0.0816%" height="15" fill="rgb(206,52,46)" fg:x="528" fg:w="1"/><text x="43.3169%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.0669%" y="181" width="0.0816%" height="15" fill="rgb(253,136,11)" fg:x="528" fg:w="1"/><text x="43.3169%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.0669%" y="165" width="0.0816%" height="15" fill="rgb(208,106,33)" fg:x="528" fg:w="1"/><text x="43.3169%" y="175.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="42.8222%" y="261" width="0.4078%" height="15" fill="rgb(206,54,4)" fg:x="525" fg:w="5"/><text x="43.0722%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="42.8222%" y="245" width="0.4078%" height="15" fill="rgb(213,3,15)" fg:x="525" fg:w="5"/><text x="43.0722%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="43.0669%" y="229" width="0.1631%" height="15" fill="rgb(252,211,39)" fg:x="528" fg:w="2"/><text x="43.3169%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="43.1485%" y="213" width="0.0816%" height="15" fill="rgb(223,6,36)" fg:x="529" fg:w="1"/><text x="43.3985%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="43.1485%" y="197" width="0.0816%" height="15" fill="rgb(252,169,45)" fg:x="529" fg:w="1"/><text x="43.3985%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (129 samples, 10.52%)</title><rect x="32.7896%" y="277" width="10.5220%" height="15" fill="rgb(212,48,26)" fg:x="402" fg:w="129"/><text x="33.0396%" y="287.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::build (1 samples, 0.08%)</title><rect x="43.2300%" y="261" width="0.0816%" height="15" fill="rgb(251,102,48)" fg:x="530" fg:w="1"/><text x="43.4800%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (132 samples, 10.77%)</title><rect x="32.6264%" y="309" width="10.7667%" height="15" fill="rgb(243,208,16)" fg:x="400" fg:w="132"/><text x="32.8764%" y="319.50">regex::regex::st..</text></g><g><title>regex::builders::Builder::build_one_string (131 samples, 10.69%)</title><rect x="32.7080%" y="293" width="10.6852%" height="15" fill="rgb(219,96,24)" fg:x="401" fg:w="131"/><text x="32.9580%" y="303.50">regex::builders:..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="43.3116%" y="277" width="0.0816%" height="15" fill="rgb(219,33,29)" fg:x="531" fg:w="1"/><text x="43.5616%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (146 samples, 11.91%)</title><rect x="32.0555%" y="325" width="11.9086%" height="15" fill="rgb(223,176,5)" fg:x="393" fg:w="146"/><text x="32.3055%" y="335.50">indefinite::helper..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.57%)</title><rect x="43.3931%" y="309" width="0.5710%" height="15" fill="rgb(228,140,14)" fg:x="532" fg:w="7"/><text x="43.6431%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.57%)</title><rect x="43.3931%" y="293" width="0.5710%" height="15" fill="rgb(217,179,31)" fg:x="532" fg:w="7"/><text x="43.6431%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.57%)</title><rect x="43.3931%" y="277" width="0.5710%" height="15" fill="rgb(230,9,30)" fg:x="532" fg:w="7"/><text x="43.6431%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="43.3931%" y="261" width="0.5710%" height="15" fill="rgb(230,136,20)" fg:x="532" fg:w="7"/><text x="43.6431%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="43.4747%" y="245" width="0.4894%" height="15" fill="rgb(215,210,22)" fg:x="533" fg:w="6"/><text x="43.7247%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="43.8825%" y="229" width="0.0816%" height="15" fill="rgb(218,43,5)" fg:x="538" fg:w="1"/><text x="44.1325%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.8825%" y="213" width="0.0816%" height="15" fill="rgb(216,11,5)" fg:x="538" fg:w="1"/><text x="44.1325%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.8825%" y="197" width="0.0816%" height="15" fill="rgb(209,82,29)" fg:x="538" fg:w="1"/><text x="44.1325%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="43.9641%" y="261" width="0.0816%" height="15" fill="rgb(244,115,12)" fg:x="539" fg:w="1"/><text x="44.2141%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="43.9641%" y="245" width="0.0816%" height="15" fill="rgb(222,82,18)" fg:x="539" fg:w="1"/><text x="44.2141%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.9641%" y="229" width="0.0816%" height="15" fill="rgb(249,227,8)" fg:x="539" fg:w="1"/><text x="44.2141%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="43.9641%" y="277" width="0.2447%" height="15" fill="rgb(253,141,45)" fg:x="539" fg:w="3"/><text x="44.2141%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="44.0457%" y="261" width="0.1631%" height="15" fill="rgb(234,184,4)" fg:x="540" fg:w="2"/><text x="44.2957%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="44.0457%" y="245" width="0.1631%" height="15" fill="rgb(218,194,23)" fg:x="540" fg:w="2"/><text x="44.2957%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="44.0457%" y="229" width="0.1631%" height="15" fill="rgb(235,66,41)" fg:x="540" fg:w="2"/><text x="44.2957%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.1272%" y="213" width="0.0816%" height="15" fill="rgb(245,217,1)" fg:x="541" fg:w="1"/><text x="44.3772%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="44.2088%" y="261" width="0.0816%" height="15" fill="rgb(229,91,1)" fg:x="542" fg:w="1"/><text x="44.4588%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.2088%" y="245" width="0.0816%" height="15" fill="rgb(207,101,30)" fg:x="542" fg:w="1"/><text x="44.4588%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.41%)</title><rect x="43.9641%" y="309" width="0.4078%" height="15" fill="rgb(223,82,49)" fg:x="539" fg:w="5"/><text x="44.2141%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (5 samples, 0.41%)</title><rect x="43.9641%" y="293" width="0.4078%" height="15" fill="rgb(218,167,17)" fg:x="539" fg:w="5"/><text x="44.2141%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="44.2088%" y="277" width="0.1631%" height="15" fill="rgb(208,103,14)" fg:x="542" fg:w="2"/><text x="44.4588%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="44.2904%" y="261" width="0.0816%" height="15" fill="rgb(238,20,8)" fg:x="543" fg:w="1"/><text x="44.5404%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="44.3719%" y="229" width="0.1631%" height="15" fill="rgb(218,80,54)" fg:x="544" fg:w="2"/><text x="44.6219%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (9 samples, 0.73%)</title><rect x="45.3507%" y="213" width="0.7341%" height="15" fill="rgb(240,144,17)" fg:x="556" fg:w="9"/><text x="45.6007%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.0848%" y="197" width="0.0816%" height="15" fill="rgb(245,27,50)" fg:x="565" fg:w="1"/><text x="46.3348%" y="207.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (23 samples, 1.88%)</title><rect x="44.3719%" y="309" width="1.8760%" height="15" fill="rgb(251,51,7)" fg:x="544" fg:w="23"/><text x="44.6219%" y="319.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (23 samples, 1.88%)</title><rect x="44.3719%" y="293" width="1.8760%" height="15" fill="rgb(245,217,29)" fg:x="544" fg:w="23"/><text x="44.6219%" y="303.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (23 samples, 1.88%)</title><rect x="44.3719%" y="277" width="1.8760%" height="15" fill="rgb(221,176,29)" fg:x="544" fg:w="23"/><text x="44.6219%" y="287.50">r..</text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (23 samples, 1.88%)</title><rect x="44.3719%" y="261" width="1.8760%" height="15" fill="rgb(212,180,24)" fg:x="544" fg:w="23"/><text x="44.6219%" y="271.50">&lt;..</text></g><g><title>regex_automata::hybrid::dfa::Cache::new (23 samples, 1.88%)</title><rect x="44.3719%" y="245" width="1.8760%" height="15" fill="rgb(254,24,2)" fg:x="544" fg:w="23"/><text x="44.6219%" y="255.50">r..</text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (21 samples, 1.71%)</title><rect x="44.5351%" y="229" width="1.7129%" height="15" fill="rgb(230,100,2)" fg:x="546" fg:w="21"/><text x="44.7851%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="46.0848%" y="213" width="0.1631%" height="15" fill="rgb(219,142,25)" fg:x="565" fg:w="2"/><text x="46.3348%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.1664%" y="197" width="0.0816%" height="15" fill="rgb(240,73,43)" fg:x="566" fg:w="1"/><text x="46.4164%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.1664%" y="181" width="0.0816%" height="15" fill="rgb(214,114,15)" fg:x="566" fg:w="1"/><text x="46.4164%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.1664%" y="165" width="0.0816%" height="15" fill="rgb(207,130,4)" fg:x="566" fg:w="1"/><text x="46.4164%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="46.2480%" y="293" width="0.0816%" height="15" fill="rgb(221,25,40)" fg:x="567" fg:w="1"/><text x="46.4980%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="46.2480%" y="277" width="0.0816%" height="15" fill="rgb(241,184,7)" fg:x="567" fg:w="1"/><text x="46.4980%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.4111%" y="213" width="0.0816%" height="15" fill="rgb(235,159,4)" fg:x="569" fg:w="1"/><text x="46.6611%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="46.4111%" y="261" width="0.1631%" height="15" fill="rgb(214,87,48)" fg:x="569" fg:w="2"/><text x="46.6611%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="46.4111%" y="245" width="0.1631%" height="15" fill="rgb(246,198,24)" fg:x="569" fg:w="2"/><text x="46.6611%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="46.4111%" y="229" width="0.1631%" height="15" fill="rgb(209,66,40)" fg:x="569" fg:w="2"/><text x="46.6611%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.4927%" y="213" width="0.0816%" height="15" fill="rgb(233,147,39)" fg:x="570" fg:w="1"/><text x="46.7427%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.4927%" y="197" width="0.0816%" height="15" fill="rgb(231,145,52)" fg:x="570" fg:w="1"/><text x="46.7427%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.4927%" y="181" width="0.0816%" height="15" fill="rgb(206,20,26)" fg:x="570" fg:w="1"/><text x="46.7427%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.5742%" y="261" width="0.0816%" height="15" fill="rgb(238,220,4)" fg:x="571" fg:w="1"/><text x="46.8242%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.6558%" y="261" width="0.0816%" height="15" fill="rgb(252,195,42)" fg:x="572" fg:w="1"/><text x="46.9058%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="46.7374%" y="261" width="0.0816%" height="15" fill="rgb(209,10,6)" fg:x="573" fg:w="1"/><text x="46.9874%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.7374%" y="245" width="0.0816%" height="15" fill="rgb(229,3,52)" fg:x="573" fg:w="1"/><text x="46.9874%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="46.7374%" y="229" width="0.0816%" height="15" fill="rgb(253,49,37)" fg:x="573" fg:w="1"/><text x="46.9874%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.7374%" y="213" width="0.0816%" height="15" fill="rgb(240,103,49)" fg:x="573" fg:w="1"/><text x="46.9874%" y="223.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="46.8189%" y="261" width="0.0816%" height="15" fill="rgb(250,182,30)" fg:x="574" fg:w="1"/><text x="47.0689%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.8189%" y="245" width="0.0816%" height="15" fill="rgb(248,8,30)" fg:x="574" fg:w="1"/><text x="47.0689%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.8189%" y="229" width="0.0816%" height="15" fill="rgb(237,120,30)" fg:x="574" fg:w="1"/><text x="47.0689%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.2268%" y="229" width="0.0816%" height="15" fill="rgb(221,146,34)" fg:x="579" fg:w="1"/><text x="47.4768%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (24 samples, 1.96%)</title><rect x="47.0636%" y="245" width="1.9576%" height="15" fill="rgb(242,55,13)" fg:x="577" fg:w="24"/><text x="47.3136%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (21 samples, 1.71%)</title><rect x="47.3083%" y="229" width="1.7129%" height="15" fill="rgb(242,112,31)" fg:x="580" fg:w="21"/><text x="47.5583%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="48.8581%" y="213" width="0.1631%" height="15" fill="rgb(249,192,27)" fg:x="599" fg:w="2"/><text x="49.1081%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="49.0212%" y="229" width="0.4078%" height="15" fill="rgb(208,204,44)" fg:x="601" fg:w="5"/><text x="49.2712%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="49.3475%" y="213" width="0.0816%" height="15" fill="rgb(208,93,54)" fg:x="605" fg:w="1"/><text x="49.5975%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.3475%" y="197" width="0.0816%" height="15" fill="rgb(242,1,31)" fg:x="605" fg:w="1"/><text x="49.5975%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.49%)</title><rect x="49.0212%" y="245" width="0.4894%" height="15" fill="rgb(241,83,25)" fg:x="601" fg:w="6"/><text x="49.2712%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="49.4290%" y="229" width="0.0816%" height="15" fill="rgb(205,169,50)" fg:x="606" fg:w="1"/><text x="49.6790%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="49.4290%" y="213" width="0.0816%" height="15" fill="rgb(239,186,37)" fg:x="606" fg:w="1"/><text x="49.6790%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="49.4290%" y="197" width="0.0816%" height="15" fill="rgb(205,221,10)" fg:x="606" fg:w="1"/><text x="49.6790%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.4290%" y="181" width="0.0816%" height="15" fill="rgb(218,196,15)" fg:x="606" fg:w="1"/><text x="49.6790%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.4290%" y="165" width="0.0816%" height="15" fill="rgb(218,196,35)" fg:x="606" fg:w="1"/><text x="49.6790%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.4290%" y="149" width="0.0816%" height="15" fill="rgb(233,63,24)" fg:x="606" fg:w="1"/><text x="49.6790%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.41%)</title><rect x="49.9184%" y="213" width="0.4078%" height="15" fill="rgb(225,8,4)" fg:x="612" fg:w="5"/><text x="50.1684%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.33%)</title><rect x="50.0000%" y="197" width="0.3263%" height="15" fill="rgb(234,105,35)" fg:x="613" fg:w="4"/><text x="50.2500%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.2447%" y="181" width="0.0816%" height="15" fill="rgb(236,21,32)" fg:x="616" fg:w="1"/><text x="50.4947%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.2447%" y="165" width="0.0816%" height="15" fill="rgb(228,109,6)" fg:x="616" fg:w="1"/><text x="50.4947%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.2447%" y="149" width="0.0816%" height="15" fill="rgb(229,215,31)" fg:x="616" fg:w="1"/><text x="50.4947%" y="159.50"></text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::automaton::Automaton&gt;::prefilter (1 samples, 0.08%)</title><rect x="50.3263%" y="197" width="0.0816%" height="15" fill="rgb(221,52,54)" fg:x="617" fg:w="1"/><text x="50.5763%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (20 samples, 1.63%)</title><rect x="49.5106%" y="245" width="1.6313%" height="15" fill="rgb(252,129,43)" fg:x="607" fg:w="20"/><text x="49.7606%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (20 samples, 1.63%)</title><rect x="49.5106%" y="229" width="1.6313%" height="15" fill="rgb(248,183,27)" fg:x="607" fg:w="20"/><text x="49.7606%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (10 samples, 0.82%)</title><rect x="50.3263%" y="213" width="0.8157%" height="15" fill="rgb(250,0,22)" fg:x="617" fg:w="10"/><text x="50.5763%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (9 samples, 0.73%)</title><rect x="50.4078%" y="197" width="0.7341%" height="15" fill="rgb(213,166,10)" fg:x="618" fg:w="9"/><text x="50.6578%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.65%)</title><rect x="50.4894%" y="181" width="0.6525%" height="15" fill="rgb(207,163,36)" fg:x="619" fg:w="8"/><text x="50.7394%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.1419%" y="213" width="0.0816%" height="15" fill="rgb(208,122,22)" fg:x="627" fg:w="1"/><text x="51.3919%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.1419%" y="197" width="0.0816%" height="15" fill="rgb(207,104,49)" fg:x="627" fg:w="1"/><text x="51.3919%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.1419%" y="181" width="0.0816%" height="15" fill="rgb(248,211,50)" fg:x="627" fg:w="1"/><text x="51.3919%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="51.2235%" y="213" width="0.0816%" height="15" fill="rgb(217,13,45)" fg:x="628" fg:w="1"/><text x="51.4735%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="51.3051%" y="197" width="0.0816%" height="15" fill="rgb(211,216,49)" fg:x="629" fg:w="1"/><text x="51.5551%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.3051%" y="181" width="0.0816%" height="15" fill="rgb(221,58,53)" fg:x="629" fg:w="1"/><text x="51.5551%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.3051%" y="165" width="0.0816%" height="15" fill="rgb(220,112,41)" fg:x="629" fg:w="1"/><text x="51.5551%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.3051%" y="149" width="0.0816%" height="15" fill="rgb(236,38,28)" fg:x="629" fg:w="1"/><text x="51.5551%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="51.4682%" y="181" width="0.0816%" height="15" fill="rgb(227,195,22)" fg:x="631" fg:w="1"/><text x="51.7182%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="52.2023%" y="133" width="0.5710%" height="15" fill="rgb(214,55,33)" fg:x="640" fg:w="7"/><text x="52.4523%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.7732%" y="133" width="0.0816%" height="15" fill="rgb(248,80,13)" fg:x="647" fg:w="1"/><text x="53.0232%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.41%)</title><rect x="52.8548%" y="133" width="0.4078%" height="15" fill="rgb(238,52,6)" fg:x="648" fg:w="5"/><text x="53.1048%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="53.0995%" y="117" width="0.1631%" height="15" fill="rgb(224,198,47)" fg:x="651" fg:w="2"/><text x="53.3495%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="53.0995%" y="101" width="0.1631%" height="15" fill="rgb(233,171,20)" fg:x="651" fg:w="2"/><text x="53.3495%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="53.0995%" y="85" width="0.1631%" height="15" fill="rgb(241,30,25)" fg:x="651" fg:w="2"/><text x="53.3495%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="53.2626%" y="133" width="0.1631%" height="15" fill="rgb(207,171,38)" fg:x="653" fg:w="2"/><text x="53.5126%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="53.7520%" y="101" width="0.1631%" height="15" fill="rgb(234,70,1)" fg:x="659" fg:w="2"/><text x="54.0020%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.2414%" y="69" width="0.0816%" height="15" fill="rgb(232,178,18)" fg:x="665" fg:w="1"/><text x="54.4914%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.49%)</title><rect x="53.9152%" y="101" width="0.4894%" height="15" fill="rgb(241,78,40)" fg:x="661" fg:w="6"/><text x="54.1652%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="54.1599%" y="85" width="0.2447%" height="15" fill="rgb(222,35,25)" fg:x="664" fg:w="3"/><text x="54.4099%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.3230%" y="69" width="0.0816%" height="15" fill="rgb(207,92,16)" fg:x="666" fg:w="1"/><text x="54.5730%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (22 samples, 1.79%)</title><rect x="53.4258%" y="133" width="1.7945%" height="15" fill="rgb(216,59,51)" fg:x="655" fg:w="22"/><text x="53.6758%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (21 samples, 1.71%)</title><rect x="53.5073%" y="117" width="1.7129%" height="15" fill="rgb(213,80,28)" fg:x="656" fg:w="21"/><text x="53.7573%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (10 samples, 0.82%)</title><rect x="54.4046%" y="101" width="0.8157%" height="15" fill="rgb(220,93,7)" fg:x="667" fg:w="10"/><text x="54.6546%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.41%)</title><rect x="54.8124%" y="85" width="0.4078%" height="15" fill="rgb(225,24,44)" fg:x="672" fg:w="5"/><text x="55.0624%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="54.8940%" y="69" width="0.3263%" height="15" fill="rgb(243,74,40)" fg:x="673" fg:w="4"/><text x="55.1440%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.0571%" y="53" width="0.1631%" height="15" fill="rgb(228,39,7)" fg:x="675" fg:w="2"/><text x="55.3071%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="55.0571%" y="37" width="0.1631%" height="15" fill="rgb(227,79,8)" fg:x="675" fg:w="2"/><text x="55.3071%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (39 samples, 3.18%)</title><rect x="55.2202%" y="133" width="3.1811%" height="15" fill="rgb(236,58,11)" fg:x="677" fg:w="39"/><text x="55.4702%" y="143.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (39 samples, 3.18%)</title><rect x="55.2202%" y="117" width="3.1811%" height="15" fill="rgb(249,63,35)" fg:x="677" fg:w="39"/><text x="55.4702%" y="127.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (39 samples, 3.18%)</title><rect x="55.2202%" y="101" width="3.1811%" height="15" fill="rgb(252,114,16)" fg:x="677" fg:w="39"/><text x="55.4702%" y="111.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (8 samples, 0.65%)</title><rect x="58.4013%" y="133" width="0.6525%" height="15" fill="rgb(254,151,24)" fg:x="716" fg:w="8"/><text x="58.6513%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.9723%" y="117" width="0.0816%" height="15" fill="rgb(253,54,39)" fg:x="723" fg:w="1"/><text x="59.2223%" y="127.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="59.0538%" y="133" width="0.1631%" height="15" fill="rgb(243,25,45)" fg:x="724" fg:w="2"/><text x="59.3038%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (106 samples, 8.65%)</title><rect x="51.1419%" y="229" width="8.6460%" height="15" fill="rgb(234,134,9)" fg:x="627" fg:w="106"/><text x="51.3919%" y="239.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (104 samples, 8.48%)</title><rect x="51.3051%" y="213" width="8.4829%" height="15" fill="rgb(227,166,31)" fg:x="629" fg:w="104"/><text x="51.5551%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (103 samples, 8.40%)</title><rect x="51.3866%" y="197" width="8.4013%" height="15" fill="rgb(245,143,41)" fg:x="630" fg:w="103"/><text x="51.6366%" y="207.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (101 samples, 8.24%)</title><rect x="51.5498%" y="181" width="8.2382%" height="15" fill="rgb(238,181,32)" fg:x="632" fg:w="101"/><text x="51.7998%" y="191.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (101 samples, 8.24%)</title><rect x="51.5498%" y="165" width="8.2382%" height="15" fill="rgb(224,113,18)" fg:x="632" fg:w="101"/><text x="51.7998%" y="175.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (101 samples, 8.24%)</title><rect x="51.5498%" y="149" width="8.2382%" height="15" fill="rgb(240,229,28)" fg:x="632" fg:w="101"/><text x="51.7998%" y="159.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (7 samples, 0.57%)</title><rect x="59.2170%" y="133" width="0.5710%" height="15" fill="rgb(250,185,3)" fg:x="726" fg:w="7"/><text x="59.4670%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="59.4617%" y="117" width="0.3263%" height="15" fill="rgb(212,59,25)" fg:x="729" fg:w="4"/><text x="59.7117%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.6248%" y="101" width="0.1631%" height="15" fill="rgb(221,87,20)" fg:x="731" fg:w="2"/><text x="59.8748%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.41%)</title><rect x="60.0326%" y="213" width="0.4078%" height="15" fill="rgb(213,74,28)" fg:x="736" fg:w="5"/><text x="60.2826%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="60.2773%" y="197" width="0.1631%" height="15" fill="rgb(224,132,34)" fg:x="739" fg:w="2"/><text x="60.5273%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.2773%" y="181" width="0.1631%" height="15" fill="rgb(222,101,24)" fg:x="739" fg:w="2"/><text x="60.5273%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="60.2773%" y="165" width="0.1631%" height="15" fill="rgb(254,142,4)" fg:x="739" fg:w="2"/><text x="60.5273%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.9299%" y="197" width="0.0816%" height="15" fill="rgb(230,229,49)" fg:x="747" fg:w="1"/><text x="61.1799%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.65%)</title><rect x="60.4405%" y="213" width="0.6525%" height="15" fill="rgb(238,70,47)" fg:x="741" fg:w="8"/><text x="60.6905%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.0114%" y="197" width="0.0816%" height="15" fill="rgb(231,160,17)" fg:x="748" fg:w="1"/><text x="61.2614%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (176 samples, 14.36%)</title><rect x="46.9005%" y="261" width="14.3556%" height="15" fill="rgb(218,68,53)" fg:x="575" fg:w="176"/><text x="47.1505%" y="271.50">regex_automata::meta::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (124 samples, 10.11%)</title><rect x="51.1419%" y="245" width="10.1142%" height="15" fill="rgb(236,111,10)" fg:x="627" fg:w="124"/><text x="51.3919%" y="255.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (18 samples, 1.47%)</title><rect x="59.7879%" y="229" width="1.4682%" height="15" fill="rgb(224,34,41)" fg:x="733" fg:w="18"/><text x="60.0379%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="61.0930%" y="213" width="0.1631%" height="15" fill="rgb(241,118,19)" fg:x="749" fg:w="2"/><text x="61.3430%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="61.2561%" y="181" width="0.0816%" height="15" fill="rgb(238,129,25)" fg:x="751" fg:w="1"/><text x="61.5061%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="61.2561%" y="165" width="0.0816%" height="15" fill="rgb(238,22,31)" fg:x="751" fg:w="1"/><text x="61.5061%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="61.2561%" y="213" width="0.1631%" height="15" fill="rgb(222,174,48)" fg:x="751" fg:w="2"/><text x="61.5061%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (2 samples, 0.16%)</title><rect x="61.2561%" y="197" width="0.1631%" height="15" fill="rgb(206,152,40)" fg:x="751" fg:w="2"/><text x="61.5061%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="61.3377%" y="181" width="0.0816%" height="15" fill="rgb(218,99,54)" fg:x="752" fg:w="1"/><text x="61.5877%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="61.3377%" y="165" width="0.0816%" height="15" fill="rgb(220,174,26)" fg:x="752" fg:w="1"/><text x="61.5877%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="61.2561%" y="229" width="0.2447%" height="15" fill="rgb(245,116,9)" fg:x="751" fg:w="3"/><text x="61.5061%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="61.4192%" y="213" width="0.0816%" height="15" fill="rgb(209,72,35)" fg:x="753" fg:w="1"/><text x="61.6692%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.4192%" y="197" width="0.0816%" height="15" fill="rgb(226,126,21)" fg:x="753" fg:w="1"/><text x="61.6692%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.4192%" y="181" width="0.0816%" height="15" fill="rgb(227,192,1)" fg:x="753" fg:w="1"/><text x="61.6692%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4192%" y="165" width="0.0816%" height="15" fill="rgb(237,180,29)" fg:x="753" fg:w="1"/><text x="61.6692%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="61.5008%" y="229" width="0.0816%" height="15" fill="rgb(230,197,35)" fg:x="754" fg:w="1"/><text x="61.7508%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="61.5824%" y="229" width="0.0816%" height="15" fill="rgb(246,193,31)" fg:x="755" fg:w="1"/><text x="61.8324%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5824%" y="213" width="0.0816%" height="15" fill="rgb(241,36,4)" fg:x="755" fg:w="1"/><text x="61.8324%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.65%)</title><rect x="61.2561%" y="261" width="0.6525%" height="15" fill="rgb(241,130,17)" fg:x="751" fg:w="8"/><text x="61.5061%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.65%)</title><rect x="61.2561%" y="245" width="0.6525%" height="15" fill="rgb(206,137,32)" fg:x="751" fg:w="8"/><text x="61.5061%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (3 samples, 0.24%)</title><rect x="61.6639%" y="229" width="0.2447%" height="15" fill="rgb(237,228,51)" fg:x="756" fg:w="3"/><text x="61.9139%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (3 samples, 0.24%)</title><rect x="61.6639%" y="213" width="0.2447%" height="15" fill="rgb(243,6,42)" fg:x="756" fg:w="3"/><text x="61.9139%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8271%" y="197" width="0.0816%" height="15" fill="rgb(251,74,28)" fg:x="758" fg:w="1"/><text x="62.0771%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.9902%" y="197" width="0.0816%" height="15" fill="rgb(218,20,49)" fg:x="760" fg:w="1"/><text x="62.2402%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.9902%" y="181" width="0.0816%" height="15" fill="rgb(238,28,14)" fg:x="760" fg:w="1"/><text x="62.2402%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.9902%" y="165" width="0.0816%" height="15" fill="rgb(229,40,46)" fg:x="760" fg:w="1"/><text x="62.2402%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.33%)</title><rect x="61.9086%" y="229" width="0.3263%" height="15" fill="rgb(244,195,20)" fg:x="759" fg:w="4"/><text x="62.1586%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.33%)</title><rect x="61.9086%" y="213" width="0.3263%" height="15" fill="rgb(253,56,35)" fg:x="759" fg:w="4"/><text x="62.1586%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="62.0718%" y="197" width="0.1631%" height="15" fill="rgb(210,149,44)" fg:x="761" fg:w="2"/><text x="62.3218%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (198 samples, 16.15%)</title><rect x="46.4111%" y="277" width="16.1501%" height="15" fill="rgb(240,135,12)" fg:x="569" fg:w="198"/><text x="46.6611%" y="287.50">regex_automata::meta::reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.65%)</title><rect x="61.9086%" y="261" width="0.6525%" height="15" fill="rgb(251,24,50)" fg:x="759" fg:w="8"/><text x="62.1586%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.65%)</title><rect x="61.9086%" y="245" width="0.6525%" height="15" fill="rgb(243,200,47)" fg:x="759" fg:w="8"/><text x="62.1586%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.33%)</title><rect x="62.2349%" y="229" width="0.3263%" height="15" fill="rgb(224,166,26)" fg:x="763" fg:w="4"/><text x="62.4849%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="62.3980%" y="213" width="0.1631%" height="15" fill="rgb(233,0,47)" fg:x="765" fg:w="2"/><text x="62.6480%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.4796%" y="197" width="0.0816%" height="15" fill="rgb(253,80,5)" fg:x="766" fg:w="1"/><text x="62.7296%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (229 samples, 18.68%)</title><rect x="43.9641%" y="325" width="18.6786%" height="15" fill="rgb(214,133,25)" fg:x="539" fg:w="229"/><text x="44.2141%" y="335.50">indefinite::rules::number::Nu..</text></g><g><title>regex::regex::string::Regex::new (201 samples, 16.39%)</title><rect x="46.2480%" y="309" width="16.3948%" height="15" fill="rgb(209,27,14)" fg:x="567" fg:w="201"/><text x="46.4980%" y="319.50">regex::regex::string::Reg..</text></g><g><title>regex::builders::Builder::build_one_string (200 samples, 16.31%)</title><rect x="46.3295%" y="293" width="16.3132%" height="15" fill="rgb(219,102,51)" fg:x="568" fg:w="200"/><text x="46.5795%" y="303.50">regex::builders::Builder:..</text></g><g><title>regex_automata::meta::regex::Config::utf8_empty (1 samples, 0.08%)</title><rect x="62.5612%" y="277" width="0.0816%" height="15" fill="rgb(237,18,16)" fg:x="767" fg:w="1"/><text x="62.8112%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.6427%" y="245" width="0.0816%" height="15" fill="rgb(241,85,17)" fg:x="768" fg:w="1"/><text x="62.8927%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.6427%" y="229" width="0.0816%" height="15" fill="rgb(236,90,42)" fg:x="768" fg:w="1"/><text x="62.8927%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="62.6427%" y="213" width="0.0816%" height="15" fill="rgb(249,57,21)" fg:x="768" fg:w="1"/><text x="62.8927%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="62.6427%" y="293" width="0.1631%" height="15" fill="rgb(243,12,36)" fg:x="768" fg:w="2"/><text x="62.8927%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="62.6427%" y="277" width="0.1631%" height="15" fill="rgb(253,128,47)" fg:x="768" fg:w="2"/><text x="62.8927%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="62.6427%" y="261" width="0.1631%" height="15" fill="rgb(207,33,20)" fg:x="768" fg:w="2"/><text x="62.8927%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="62.7243%" y="245" width="0.0816%" height="15" fill="rgb(233,215,35)" fg:x="769" fg:w="1"/><text x="62.9743%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="62.7243%" y="229" width="0.0816%" height="15" fill="rgb(249,188,52)" fg:x="769" fg:w="1"/><text x="62.9743%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.8059%" y="261" width="0.0816%" height="15" fill="rgb(225,12,32)" fg:x="770" fg:w="1"/><text x="63.0559%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="62.8059%" y="245" width="0.0816%" height="15" fill="rgb(247,98,14)" fg:x="770" fg:w="1"/><text x="63.0559%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.8059%" y="229" width="0.0816%" height="15" fill="rgb(247,219,48)" fg:x="770" fg:w="1"/><text x="63.0559%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="62.8874%" y="245" width="0.1631%" height="15" fill="rgb(253,60,48)" fg:x="771" fg:w="2"/><text x="63.1374%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.9690%" y="229" width="0.0816%" height="15" fill="rgb(245,15,52)" fg:x="772" fg:w="1"/><text x="63.2190%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.1321%" y="229" width="0.0816%" height="15" fill="rgb(220,133,28)" fg:x="774" fg:w="1"/><text x="63.3821%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.1321%" y="213" width="0.0816%" height="15" fill="rgb(217,180,4)" fg:x="774" fg:w="1"/><text x="63.3821%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.49%)</title><rect x="62.8059%" y="293" width="0.4894%" height="15" fill="rgb(251,24,1)" fg:x="770" fg:w="6"/><text x="63.0559%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (6 samples, 0.49%)</title><rect x="62.8059%" y="277" width="0.4894%" height="15" fill="rgb(212,185,49)" fg:x="770" fg:w="6"/><text x="63.0559%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.41%)</title><rect x="62.8874%" y="261" width="0.4078%" height="15" fill="rgb(215,175,22)" fg:x="771" fg:w="5"/><text x="63.1374%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="63.0506%" y="245" width="0.2447%" height="15" fill="rgb(250,205,14)" fg:x="773" fg:w="3"/><text x="63.3006%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.2137%" y="229" width="0.0816%" height="15" fill="rgb(225,211,22)" fg:x="775" fg:w="1"/><text x="63.4637%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="63.3768%" y="245" width="0.0816%" height="15" fill="rgb(251,179,42)" fg:x="777" fg:w="1"/><text x="63.6268%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.3768%" y="229" width="0.0816%" height="15" fill="rgb(208,216,51)" fg:x="777" fg:w="1"/><text x="63.6268%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="63.3768%" y="213" width="0.0816%" height="15" fill="rgb(235,36,11)" fg:x="777" fg:w="1"/><text x="63.6268%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.3768%" y="197" width="0.0816%" height="15" fill="rgb(213,189,28)" fg:x="777" fg:w="1"/><text x="63.6268%" y="207.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="63.7031%" y="213" width="0.0816%" height="15" fill="rgb(227,203,42)" fg:x="781" fg:w="1"/><text x="63.9531%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.33%)</title><rect x="63.6215%" y="229" width="0.3263%" height="15" fill="rgb(244,72,36)" fg:x="780" fg:w="4"/><text x="63.8715%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="63.7847%" y="213" width="0.1631%" height="15" fill="rgb(213,53,17)" fg:x="782" fg:w="2"/><text x="64.0347%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="63.9478%" y="229" width="0.0816%" height="15" fill="rgb(207,167,3)" fg:x="784" fg:w="1"/><text x="64.1978%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="64.0294%" y="213" width="0.0816%" height="15" fill="rgb(216,98,30)" fg:x="785" fg:w="1"/><text x="64.2794%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="64.0294%" y="197" width="0.0816%" height="15" fill="rgb(236,123,15)" fg:x="785" fg:w="1"/><text x="64.2794%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.0294%" y="181" width="0.0816%" height="15" fill="rgb(248,81,50)" fg:x="785" fg:w="1"/><text x="64.2794%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.0294%" y="165" width="0.0816%" height="15" fill="rgb(214,120,4)" fg:x="785" fg:w="1"/><text x="64.2794%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.0294%" y="149" width="0.0816%" height="15" fill="rgb(208,179,34)" fg:x="785" fg:w="1"/><text x="64.2794%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="64.1925%" y="197" width="0.2447%" height="15" fill="rgb(227,140,7)" fg:x="787" fg:w="3"/><text x="64.4425%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (20 samples, 1.63%)</title><rect x="63.4584%" y="245" width="1.6313%" height="15" fill="rgb(214,22,6)" fg:x="778" fg:w="20"/><text x="63.7084%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (13 samples, 1.06%)</title><rect x="64.0294%" y="229" width="1.0604%" height="15" fill="rgb(207,137,27)" fg:x="785" fg:w="13"/><text x="64.2794%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.98%)</title><rect x="64.1109%" y="213" width="0.9788%" height="15" fill="rgb(210,8,46)" fg:x="786" fg:w="12"/><text x="64.3609%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.65%)</title><rect x="64.4372%" y="197" width="0.6525%" height="15" fill="rgb(240,16,54)" fg:x="790" fg:w="8"/><text x="64.6872%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (3 samples, 0.24%)</title><rect x="65.0897%" y="197" width="0.2447%" height="15" fill="rgb(211,209,29)" fg:x="798" fg:w="3"/><text x="65.3397%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.2529%" y="181" width="0.0816%" height="15" fill="rgb(226,228,24)" fg:x="800" fg:w="1"/><text x="65.5029%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.2529%" y="165" width="0.0816%" height="15" fill="rgb(222,84,9)" fg:x="800" fg:w="1"/><text x="65.5029%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.2529%" y="149" width="0.0816%" height="15" fill="rgb(234,203,30)" fg:x="800" fg:w="1"/><text x="65.5029%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="65.3344%" y="197" width="0.0816%" height="15" fill="rgb(238,109,14)" fg:x="801" fg:w="1"/><text x="65.5844%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="65.3344%" y="181" width="0.0816%" height="15" fill="rgb(233,206,34)" fg:x="801" fg:w="1"/><text x="65.5844%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="65.3344%" y="165" width="0.0816%" height="15" fill="rgb(220,167,47)" fg:x="801" fg:w="1"/><text x="65.5844%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.3344%" y="149" width="0.0816%" height="15" fill="rgb(238,105,10)" fg:x="801" fg:w="1"/><text x="65.5844%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.41%)</title><rect x="65.0897%" y="213" width="0.4078%" height="15" fill="rgb(213,227,17)" fg:x="798" fg:w="5"/><text x="65.3397%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="65.4160%" y="197" width="0.0816%" height="15" fill="rgb(217,132,38)" fg:x="802" fg:w="1"/><text x="65.6660%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="65.4160%" y="181" width="0.0816%" height="15" fill="rgb(242,146,4)" fg:x="802" fg:w="1"/><text x="65.6660%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="65.0897%" y="245" width="0.4894%" height="15" fill="rgb(212,61,9)" fg:x="798" fg:w="6"/><text x="65.3397%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="65.0897%" y="229" width="0.4894%" height="15" fill="rgb(247,126,22)" fg:x="798" fg:w="6"/><text x="65.3397%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="65.4976%" y="213" width="0.0816%" height="15" fill="rgb(220,196,2)" fg:x="803" fg:w="1"/><text x="65.7476%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="65.6607%" y="197" width="0.2447%" height="15" fill="rgb(208,46,4)" fg:x="805" fg:w="3"/><text x="65.9107%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="65.6607%" y="181" width="0.2447%" height="15" fill="rgb(252,104,46)" fg:x="805" fg:w="3"/><text x="65.9107%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="65.7423%" y="165" width="0.1631%" height="15" fill="rgb(237,152,48)" fg:x="806" fg:w="2"/><text x="65.9923%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.41%)</title><rect x="65.5791%" y="213" width="0.4078%" height="15" fill="rgb(221,59,37)" fg:x="804" fg:w="5"/><text x="65.8291%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="65.9054%" y="197" width="0.0816%" height="15" fill="rgb(209,202,51)" fg:x="808" fg:w="1"/><text x="66.1554%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="65.9869%" y="197" width="0.0816%" height="15" fill="rgb(228,81,30)" fg:x="809" fg:w="1"/><text x="66.2369%" y="207.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="65.9869%" y="181" width="0.0816%" height="15" fill="rgb(227,42,39)" fg:x="809" fg:w="1"/><text x="66.2369%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="65.9869%" y="213" width="0.1631%" height="15" fill="rgb(221,26,2)" fg:x="809" fg:w="2"/><text x="66.2369%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="66.0685%" y="197" width="0.0816%" height="15" fill="rgb(254,61,31)" fg:x="810" fg:w="1"/><text x="66.3185%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="66.0685%" y="181" width="0.0816%" height="15" fill="rgb(222,173,38)" fg:x="810" fg:w="1"/><text x="66.3185%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (36 samples, 2.94%)</title><rect x="63.2953%" y="293" width="2.9364%" height="15" fill="rgb(218,50,12)" fg:x="776" fg:w="36"/><text x="63.5453%" y="303.50">re..</text></g><g><title>regex::builders::Builder::build_one_string (36 samples, 2.94%)</title><rect x="63.2953%" y="277" width="2.9364%" height="15" fill="rgb(223,88,40)" fg:x="776" fg:w="36"/><text x="63.5453%" y="287.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (36 samples, 2.94%)</title><rect x="63.2953%" y="261" width="2.9364%" height="15" fill="rgb(237,54,19)" fg:x="776" fg:w="36"/><text x="63.5453%" y="271.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.65%)</title><rect x="65.5791%" y="245" width="0.6525%" height="15" fill="rgb(251,129,25)" fg:x="804" fg:w="8"/><text x="65.8291%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.65%)</title><rect x="65.5791%" y="229" width="0.6525%" height="15" fill="rgb(238,97,19)" fg:x="804" fg:w="8"/><text x="65.8291%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="66.1501%" y="213" width="0.0816%" height="15" fill="rgb(240,169,18)" fg:x="811" fg:w="1"/><text x="66.4001%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="66.2316%" y="229" width="0.4894%" height="15" fill="rgb(230,187,49)" fg:x="812" fg:w="6"/><text x="66.4816%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="66.5579%" y="213" width="0.1631%" height="15" fill="rgb(209,44,26)" fg:x="816" fg:w="2"/><text x="66.8079%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (53 samples, 4.32%)</title><rect x="62.6427%" y="309" width="4.3230%" height="15" fill="rgb(244,0,6)" fg:x="768" fg:w="53"/><text x="62.8927%" y="319.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.73%)</title><rect x="66.2316%" y="293" width="0.7341%" height="15" fill="rgb(248,18,21)" fg:x="812" fg:w="9"/><text x="66.4816%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.73%)</title><rect x="66.2316%" y="277" width="0.7341%" height="15" fill="rgb(245,180,19)" fg:x="812" fg:w="9"/><text x="66.4816%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.73%)</title><rect x="66.2316%" y="261" width="0.7341%" height="15" fill="rgb(252,118,36)" fg:x="812" fg:w="9"/><text x="66.4816%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="66.2316%" y="245" width="0.7341%" height="15" fill="rgb(210,224,19)" fg:x="812" fg:w="9"/><text x="66.4816%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="66.7210%" y="229" width="0.2447%" height="15" fill="rgb(218,30,24)" fg:x="818" fg:w="3"/><text x="66.9710%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="66.8026%" y="213" width="0.1631%" height="15" fill="rgb(219,75,50)" fg:x="819" fg:w="2"/><text x="67.0526%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.8842%" y="197" width="0.0816%" height="15" fill="rgb(234,72,50)" fg:x="820" fg:w="1"/><text x="67.1342%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8842%" y="181" width="0.0816%" height="15" fill="rgb(219,100,48)" fg:x="820" fg:w="1"/><text x="67.1342%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (448 samples, 36.54%)</title><rect x="30.5057%" y="405" width="36.5416%" height="15" fill="rgb(253,5,41)" fg:x="374" fg:w="448"/><text x="30.7557%" y="415.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::mod..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (432 samples, 35.24%)</title><rect x="31.8108%" y="389" width="35.2365%" height="15" fill="rgb(247,181,11)" fg:x="390" fg:w="432"/><text x="32.0608%" y="399.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (431 samples, 35.15%)</title><rect x="31.8923%" y="373" width="35.1550%" height="15" fill="rgb(222,223,25)" fg:x="391" fg:w="431"/><text x="32.1423%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (430 samples, 35.07%)</title><rect x="31.9739%" y="357" width="35.0734%" height="15" fill="rgb(214,198,28)" fg:x="392" fg:w="430"/><text x="32.2239%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (430 samples, 35.07%)</title><rect x="31.9739%" y="341" width="35.0734%" height="15" fill="rgb(230,46,43)" fg:x="392" fg:w="430"/><text x="32.2239%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (54 samples, 4.40%)</title><rect x="62.6427%" y="325" width="4.4046%" height="15" fill="rgb(233,65,53)" fg:x="768" fg:w="54"/><text x="62.8927%" y="335.50">indef..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="66.9657%" y="309" width="0.0816%" height="15" fill="rgb(221,121,27)" fg:x="821" fg:w="1"/><text x="67.2157%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.0473%" y="389" width="0.1631%" height="15" fill="rgb(247,70,47)" fg:x="822" fg:w="2"/><text x="67.2973%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.1289%" y="373" width="0.0816%" height="15" fill="rgb(228,85,35)" fg:x="823" fg:w="1"/><text x="67.3789%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.1289%" y="357" width="0.0816%" height="15" fill="rgb(209,50,18)" fg:x="823" fg:w="1"/><text x="67.3789%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1289%" y="341" width="0.0816%" height="15" fill="rgb(250,19,35)" fg:x="823" fg:w="1"/><text x="67.3789%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="67.2104%" y="389" width="0.0816%" height="15" fill="rgb(253,107,29)" fg:x="824" fg:w="1"/><text x="67.4604%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.2920%" y="389" width="0.0816%" height="15" fill="rgb(252,179,29)" fg:x="825" fg:w="1"/><text x="67.5420%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="67.5367%" y="357" width="0.0816%" height="15" fill="rgb(238,194,6)" fg:x="828" fg:w="1"/><text x="67.7867%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="67.5367%" y="341" width="0.0816%" height="15" fill="rgb(238,164,29)" fg:x="828" fg:w="1"/><text x="67.7867%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="67.5367%" y="325" width="0.0816%" height="15" fill="rgb(224,25,9)" fg:x="828" fg:w="1"/><text x="67.7867%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.5367%" y="309" width="0.0816%" height="15" fill="rgb(244,153,23)" fg:x="828" fg:w="1"/><text x="67.7867%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5367%" y="293" width="0.0816%" height="15" fill="rgb(212,203,14)" fg:x="828" fg:w="1"/><text x="67.7867%" y="303.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Occupyable&gt;::deserialize (4 samples, 0.33%)</title><rect x="67.3736%" y="389" width="0.3263%" height="15" fill="rgb(220,164,20)" fg:x="826" fg:w="4"/><text x="67.6236%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="67.3736%" y="373" width="0.3263%" height="15" fill="rgb(222,203,48)" fg:x="826" fg:w="4"/><text x="67.6236%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.6183%" y="357" width="0.0816%" height="15" fill="rgb(215,159,22)" fg:x="829" fg:w="1"/><text x="67.8683%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.6183%" y="341" width="0.0816%" height="15" fill="rgb(216,183,47)" fg:x="829" fg:w="1"/><text x="67.8683%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="67.6183%" y="325" width="0.0816%" height="15" fill="rgb(229,195,25)" fg:x="829" fg:w="1"/><text x="67.8683%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="67.6183%" y="309" width="0.0816%" height="15" fill="rgb(224,132,51)" fg:x="829" fg:w="1"/><text x="67.8683%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.6183%" y="293" width="0.0816%" height="15" fill="rgb(240,63,7)" fg:x="829" fg:w="1"/><text x="67.8683%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.6998%" y="357" width="0.0816%" height="15" fill="rgb(249,182,41)" fg:x="830" fg:w="1"/><text x="67.9498%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.6998%" y="341" width="0.0816%" height="15" fill="rgb(243,47,26)" fg:x="830" fg:w="1"/><text x="67.9498%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.6998%" y="325" width="0.0816%" height="15" fill="rgb(233,48,2)" fg:x="830" fg:w="1"/><text x="67.9498%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.6998%" y="309" width="0.0816%" height="15" fill="rgb(244,165,34)" fg:x="830" fg:w="1"/><text x="67.9498%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (11 samples, 0.90%)</title><rect x="67.0473%" y="405" width="0.8972%" height="15" fill="rgb(207,89,7)" fg:x="822" fg:w="11"/><text x="67.2973%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="67.6998%" y="389" width="0.2447%" height="15" fill="rgb(244,117,36)" fg:x="830" fg:w="3"/><text x="67.9498%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="67.6998%" y="373" width="0.2447%" height="15" fill="rgb(226,144,34)" fg:x="830" fg:w="3"/><text x="67.9498%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="67.7814%" y="357" width="0.1631%" height="15" fill="rgb(213,23,19)" fg:x="831" fg:w="2"/><text x="68.0314%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="67.7814%" y="341" width="0.1631%" height="15" fill="rgb(217,75,12)" fg:x="831" fg:w="2"/><text x="68.0314%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="67.7814%" y="325" width="0.1631%" height="15" fill="rgb(224,159,17)" fg:x="831" fg:w="2"/><text x="68.0314%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.8630%" y="309" width="0.0816%" height="15" fill="rgb(217,118,1)" fg:x="832" fg:w="1"/><text x="68.1130%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8630%" y="293" width="0.0816%" height="15" fill="rgb(232,180,48)" fg:x="832" fg:w="1"/><text x="68.1130%" y="303.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="67.9445%" y="341" width="0.0816%" height="15" fill="rgb(230,27,33)" fg:x="833" fg:w="1"/><text x="68.1945%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.0261%" y="277" width="0.0816%" height="15" fill="rgb(205,31,21)" fg:x="834" fg:w="1"/><text x="68.2761%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.0261%" y="309" width="0.1631%" height="15" fill="rgb(253,59,4)" fg:x="834" fg:w="2"/><text x="68.2761%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.0261%" y="293" width="0.1631%" height="15" fill="rgb(224,201,9)" fg:x="834" fg:w="2"/><text x="68.2761%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1077%" y="277" width="0.0816%" height="15" fill="rgb(229,206,30)" fg:x="835" fg:w="1"/><text x="68.3577%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.41%)</title><rect x="67.9445%" y="357" width="0.4078%" height="15" fill="rgb(212,67,47)" fg:x="833" fg:w="5"/><text x="68.1945%" y="367.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.33%)</title><rect x="68.0261%" y="341" width="0.3263%" height="15" fill="rgb(211,96,50)" fg:x="834" fg:w="4"/><text x="68.2761%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="68.0261%" y="325" width="0.3263%" height="15" fill="rgb(252,114,18)" fg:x="834" fg:w="4"/><text x="68.2761%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.1892%" y="309" width="0.1631%" height="15" fill="rgb(223,58,37)" fg:x="836" fg:w="2"/><text x="68.4392%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.1892%" y="293" width="0.1631%" height="15" fill="rgb(237,70,4)" fg:x="836" fg:w="2"/><text x="68.4392%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="68.1892%" y="277" width="0.1631%" height="15" fill="rgb(244,85,46)" fg:x="836" fg:w="2"/><text x="68.4392%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.1892%" y="261" width="0.1631%" height="15" fill="rgb(223,39,52)" fg:x="836" fg:w="2"/><text x="68.4392%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.1892%" y="245" width="0.1631%" height="15" fill="rgb(218,200,14)" fg:x="836" fg:w="2"/><text x="68.4392%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2708%" y="229" width="0.0816%" height="15" fill="rgb(208,171,16)" fg:x="837" fg:w="1"/><text x="68.5208%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.3524%" y="341" width="0.0816%" height="15" fill="rgb(234,200,18)" fg:x="838" fg:w="1"/><text x="68.6024%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.3524%" y="325" width="0.0816%" height="15" fill="rgb(228,45,11)" fg:x="838" fg:w="1"/><text x="68.6024%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.3524%" y="309" width="0.0816%" height="15" fill="rgb(237,182,11)" fg:x="838" fg:w="1"/><text x="68.6024%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.3524%" y="293" width="0.0816%" height="15" fill="rgb(241,175,49)" fg:x="838" fg:w="1"/><text x="68.6024%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.3524%" y="277" width="0.0816%" height="15" fill="rgb(247,38,35)" fg:x="838" fg:w="1"/><text x="68.6024%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.3524%" y="261" width="0.0816%" height="15" fill="rgb(228,39,49)" fg:x="838" fg:w="1"/><text x="68.6024%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.3524%" y="245" width="0.0816%" height="15" fill="rgb(226,101,26)" fg:x="838" fg:w="1"/><text x="68.6024%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.3524%" y="229" width="0.0816%" height="15" fill="rgb(206,141,19)" fg:x="838" fg:w="1"/><text x="68.6024%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.4339%" y="309" width="0.0816%" height="15" fill="rgb(211,200,13)" fg:x="839" fg:w="1"/><text x="68.6839%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.4339%" y="293" width="0.0816%" height="15" fill="rgb(241,121,6)" fg:x="839" fg:w="1"/><text x="68.6839%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.4339%" y="277" width="0.0816%" height="15" fill="rgb(234,221,29)" fg:x="839" fg:w="1"/><text x="68.6839%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.4339%" y="261" width="0.0816%" height="15" fill="rgb(229,136,5)" fg:x="839" fg:w="1"/><text x="68.6839%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.33%)</title><rect x="68.3524%" y="357" width="0.3263%" height="15" fill="rgb(238,36,11)" fg:x="838" fg:w="4"/><text x="68.6024%" y="367.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="68.4339%" y="341" width="0.2447%" height="15" fill="rgb(251,55,41)" fg:x="839" fg:w="3"/><text x="68.6839%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="68.4339%" y="325" width="0.2447%" height="15" fill="rgb(242,34,40)" fg:x="839" fg:w="3"/><text x="68.6839%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.5155%" y="309" width="0.1631%" height="15" fill="rgb(215,42,17)" fg:x="840" fg:w="2"/><text x="68.7655%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.5155%" y="293" width="0.1631%" height="15" fill="rgb(207,44,46)" fg:x="840" fg:w="2"/><text x="68.7655%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="68.5155%" y="277" width="0.1631%" height="15" fill="rgb(211,206,28)" fg:x="840" fg:w="2"/><text x="68.7655%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.5155%" y="261" width="0.1631%" height="15" fill="rgb(237,167,16)" fg:x="840" fg:w="2"/><text x="68.7655%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.5155%" y="245" width="0.1631%" height="15" fill="rgb(233,66,6)" fg:x="840" fg:w="2"/><text x="68.7655%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.5155%" y="229" width="0.1631%" height="15" fill="rgb(246,123,29)" fg:x="840" fg:w="2"/><text x="68.7655%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="68.5155%" y="213" width="0.1631%" height="15" fill="rgb(209,62,40)" fg:x="840" fg:w="2"/><text x="68.7655%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (480 samples, 39.15%)</title><rect x="29.6085%" y="613" width="39.1517%" height="15" fill="rgb(218,4,25)" fg:x="363" fg:w="480"/><text x="29.8585%" y="623.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (480 samples, 39.15%)</title><rect x="29.6085%" y="597" width="39.1517%" height="15" fill="rgb(253,91,49)" fg:x="363" fg:w="480"/><text x="29.8585%" y="607.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (480 samples, 39.15%)</title><rect x="29.6085%" y="581" width="39.1517%" height="15" fill="rgb(228,155,29)" fg:x="363" fg:w="480"/><text x="29.8585%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (480 samples, 39.15%)</title><rect x="29.6085%" y="565" width="39.1517%" height="15" fill="rgb(243,57,37)" fg:x="363" fg:w="480"/><text x="29.8585%" y="575.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugin..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (475 samples, 38.74%)</title><rect x="30.0163%" y="549" width="38.7439%" height="15" fill="rgb(244,167,17)" fg:x="368" fg:w="475"/><text x="30.2663%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (475 samples, 38.74%)</title><rect x="30.0163%" y="533" width="38.7439%" height="15" fill="rgb(207,181,38)" fg:x="368" fg:w="475"/><text x="30.2663%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Midd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (475 samples, 38.74%)</title><rect x="30.0163%" y="517" width="38.7439%" height="15" fill="rgb(211,8,23)" fg:x="368" fg:w="475"/><text x="30.2663%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (475 samples, 38.74%)</title><rect x="30.0163%" y="501" width="38.7439%" height="15" fill="rgb(235,11,44)" fg:x="368" fg:w="475"/><text x="30.2663%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (475 samples, 38.74%)</title><rect x="30.0163%" y="485" width="38.7439%" height="15" fill="rgb(248,18,52)" fg:x="368" fg:w="475"/><text x="30.2663%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (475 samples, 38.74%)</title><rect x="30.0163%" y="469" width="38.7439%" height="15" fill="rgb(208,4,7)" fg:x="368" fg:w="475"/><text x="30.2663%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (475 samples, 38.74%)</title><rect x="30.0163%" y="453" width="38.7439%" height="15" fill="rgb(240,17,39)" fg:x="368" fg:w="475"/><text x="30.2663%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (474 samples, 38.66%)</title><rect x="30.0979%" y="437" width="38.6623%" height="15" fill="rgb(207,170,3)" fg:x="369" fg:w="474"/><text x="30.3479%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions:..</text></g><g><title>plugins_core::looking::model::new_area_observation (471 samples, 38.42%)</title><rect x="30.3426%" y="421" width="38.4176%" height="15" fill="rgb(236,100,52)" fg:x="372" fg:w="471"/><text x="30.5926%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (10 samples, 0.82%)</title><rect x="67.9445%" y="405" width="0.8157%" height="15" fill="rgb(246,78,51)" fg:x="833" fg:w="10"/><text x="68.1945%" y="415.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (10 samples, 0.82%)</title><rect x="67.9445%" y="389" width="0.8157%" height="15" fill="rgb(211,17,15)" fg:x="833" fg:w="10"/><text x="68.1945%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::new (10 samples, 0.82%)</title><rect x="67.9445%" y="373" width="0.8157%" height="15" fill="rgb(209,59,46)" fg:x="833" fg:w="10"/><text x="68.1945%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="68.6786%" y="357" width="0.0816%" height="15" fill="rgb(210,92,25)" fg:x="842" fg:w="1"/><text x="68.9286%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="68.6786%" y="341" width="0.0816%" height="15" fill="rgb(238,174,52)" fg:x="842" fg:w="1"/><text x="68.9286%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.6786%" y="325" width="0.0816%" height="15" fill="rgb(230,73,7)" fg:x="842" fg:w="1"/><text x="68.9286%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.6786%" y="309" width="0.0816%" height="15" fill="rgb(243,124,40)" fg:x="842" fg:w="1"/><text x="68.9286%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.6786%" y="293" width="0.0816%" height="15" fill="rgb(244,170,11)" fg:x="842" fg:w="1"/><text x="68.9286%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="68.6786%" y="277" width="0.0816%" height="15" fill="rgb(207,114,54)" fg:x="842" fg:w="1"/><text x="68.9286%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="68.6786%" y="261" width="0.0816%" height="15" fill="rgb(205,42,20)" fg:x="842" fg:w="1"/><text x="68.9286%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="68.6786%" y="245" width="0.0816%" height="15" fill="rgb(230,30,28)" fg:x="842" fg:w="1"/><text x="68.9286%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="68.6786%" y="229" width="0.0816%" height="15" fill="rgb(205,73,54)" fg:x="842" fg:w="1"/><text x="68.9286%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.08%)</title><rect x="68.6786%" y="213" width="0.0816%" height="15" fill="rgb(254,227,23)" fg:x="842" fg:w="1"/><text x="68.9286%" y="223.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="68.7602%" y="613" width="0.0816%" height="15" fill="rgb(228,202,34)" fg:x="843" fg:w="1"/><text x="69.0102%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="68.7602%" y="597" width="0.0816%" height="15" fill="rgb(222,225,37)" fg:x="843" fg:w="1"/><text x="69.0102%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.8418%" y="501" width="0.1631%" height="15" fill="rgb(221,14,54)" fg:x="844" fg:w="2"/><text x="69.0918%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.8418%" y="485" width="0.1631%" height="15" fill="rgb(254,102,2)" fg:x="844" fg:w="2"/><text x="69.0918%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="68.8418%" y="533" width="0.2447%" height="15" fill="rgb(232,104,17)" fg:x="844" fg:w="3"/><text x="69.0918%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="68.8418%" y="517" width="0.2447%" height="15" fill="rgb(250,220,14)" fg:x="844" fg:w="3"/><text x="69.0918%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0049%" y="501" width="0.0816%" height="15" fill="rgb(241,158,9)" fg:x="846" fg:w="1"/><text x="69.2549%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.33%)</title><rect x="68.8418%" y="549" width="0.3263%" height="15" fill="rgb(246,9,43)" fg:x="844" fg:w="4"/><text x="69.0918%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.0865%" y="533" width="0.0816%" height="15" fill="rgb(206,73,33)" fg:x="847" fg:w="1"/><text x="69.3365%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.0865%" y="517" width="0.0816%" height="15" fill="rgb(222,79,8)" fg:x="847" fg:w="1"/><text x="69.3365%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.0865%" y="501" width="0.0816%" height="15" fill="rgb(234,8,54)" fg:x="847" fg:w="1"/><text x="69.3365%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.0865%" y="485" width="0.0816%" height="15" fill="rgb(209,134,38)" fg:x="847" fg:w="1"/><text x="69.3365%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.0865%" y="469" width="0.0816%" height="15" fill="rgb(230,127,29)" fg:x="847" fg:w="1"/><text x="69.3365%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.0865%" y="453" width="0.0816%" height="15" fill="rgb(242,44,41)" fg:x="847" fg:w="1"/><text x="69.3365%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.0865%" y="437" width="0.0816%" height="15" fill="rgb(222,56,43)" fg:x="847" fg:w="1"/><text x="69.3365%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.0865%" y="421" width="0.0816%" height="15" fill="rgb(238,39,47)" fg:x="847" fg:w="1"/><text x="69.3365%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.0865%" y="405" width="0.0816%" height="15" fill="rgb(226,79,43)" fg:x="847" fg:w="1"/><text x="69.3365%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.0865%" y="389" width="0.0816%" height="15" fill="rgb(242,105,53)" fg:x="847" fg:w="1"/><text x="69.3365%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.0865%" y="373" width="0.0816%" height="15" fill="rgb(251,132,46)" fg:x="847" fg:w="1"/><text x="69.3365%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0865%" y="357" width="0.0816%" height="15" fill="rgb(231,77,14)" fg:x="847" fg:w="1"/><text x="69.3365%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="69.1680%" y="533" width="0.0816%" height="15" fill="rgb(240,135,9)" fg:x="848" fg:w="1"/><text x="69.4180%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.2496%" y="437" width="0.0816%" height="15" fill="rgb(248,109,14)" fg:x="849" fg:w="1"/><text x="69.4996%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="69.1680%" y="549" width="0.2447%" height="15" fill="rgb(227,146,52)" fg:x="848" fg:w="3"/><text x="69.4180%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="69.2496%" y="533" width="0.1631%" height="15" fill="rgb(232,54,3)" fg:x="849" fg:w="2"/><text x="69.4996%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="69.2496%" y="517" width="0.1631%" height="15" fill="rgb(229,201,43)" fg:x="849" fg:w="2"/><text x="69.4996%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.2496%" y="501" width="0.1631%" height="15" fill="rgb(252,161,33)" fg:x="849" fg:w="2"/><text x="69.4996%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.2496%" y="485" width="0.1631%" height="15" fill="rgb(226,146,40)" fg:x="849" fg:w="2"/><text x="69.4996%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.2496%" y="469" width="0.1631%" height="15" fill="rgb(219,47,25)" fg:x="849" fg:w="2"/><text x="69.4996%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.2496%" y="453" width="0.1631%" height="15" fill="rgb(250,135,13)" fg:x="849" fg:w="2"/><text x="69.4996%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.3312%" y="437" width="0.0816%" height="15" fill="rgb(219,229,18)" fg:x="850" fg:w="1"/><text x="69.5812%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.3312%" y="421" width="0.0816%" height="15" fill="rgb(217,152,27)" fg:x="850" fg:w="1"/><text x="69.5812%" y="431.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="69.4127%" y="549" width="0.0816%" height="15" fill="rgb(225,71,47)" fg:x="851" fg:w="1"/><text x="69.6627%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4127%" y="533" width="0.0816%" height="15" fill="rgb(220,139,14)" fg:x="851" fg:w="1"/><text x="69.6627%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4127%" y="517" width="0.0816%" height="15" fill="rgb(247,54,32)" fg:x="851" fg:w="1"/><text x="69.6627%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.5759%" y="421" width="0.0816%" height="15" fill="rgb(252,131,39)" fg:x="853" fg:w="1"/><text x="69.8259%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="69.4943%" y="549" width="0.2447%" height="15" fill="rgb(210,108,39)" fg:x="852" fg:w="3"/><text x="69.7443%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="69.4943%" y="533" width="0.2447%" height="15" fill="rgb(205,23,29)" fg:x="852" fg:w="3"/><text x="69.7443%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.4943%" y="517" width="0.2447%" height="15" fill="rgb(246,139,46)" fg:x="852" fg:w="3"/><text x="69.7443%" y="527.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.5759%" y="501" width="0.1631%" height="15" fill="rgb(250,81,26)" fg:x="853" fg:w="2"/><text x="69.8259%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.5759%" y="485" width="0.1631%" height="15" fill="rgb(214,104,7)" fg:x="853" fg:w="2"/><text x="69.8259%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.5759%" y="469" width="0.1631%" height="15" fill="rgb(233,189,8)" fg:x="853" fg:w="2"/><text x="69.8259%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="69.5759%" y="453" width="0.1631%" height="15" fill="rgb(228,141,17)" fg:x="853" fg:w="2"/><text x="69.8259%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.5759%" y="437" width="0.1631%" height="15" fill="rgb(247,157,1)" fg:x="853" fg:w="2"/><text x="69.8259%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.6574%" y="421" width="0.0816%" height="15" fill="rgb(249,225,5)" fg:x="854" fg:w="1"/><text x="69.9074%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6574%" y="405" width="0.0816%" height="15" fill="rgb(242,55,13)" fg:x="854" fg:w="1"/><text x="69.9074%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="69.7390%" y="485" width="0.2447%" height="15" fill="rgb(230,49,50)" fg:x="855" fg:w="3"/><text x="69.9890%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.7390%" y="469" width="0.2447%" height="15" fill="rgb(241,111,38)" fg:x="855" fg:w="3"/><text x="69.9890%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.8206%" y="453" width="0.1631%" height="15" fill="rgb(252,155,4)" fg:x="856" fg:w="2"/><text x="70.0706%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.9021%" y="437" width="0.0816%" height="15" fill="rgb(212,69,32)" fg:x="857" fg:w="1"/><text x="70.1521%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.9021%" y="421" width="0.0816%" height="15" fill="rgb(243,107,47)" fg:x="857" fg:w="1"/><text x="70.1521%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.9021%" y="405" width="0.0816%" height="15" fill="rgb(247,130,12)" fg:x="857" fg:w="1"/><text x="70.1521%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9021%" y="389" width="0.0816%" height="15" fill="rgb(233,74,16)" fg:x="857" fg:w="1"/><text x="70.1521%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9021%" y="373" width="0.0816%" height="15" fill="rgb(208,58,18)" fg:x="857" fg:w="1"/><text x="70.1521%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9021%" y="357" width="0.0816%" height="15" fill="rgb(242,225,1)" fg:x="857" fg:w="1"/><text x="70.1521%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.22%)</title><rect x="68.8418%" y="581" width="1.2235%" height="15" fill="rgb(249,39,40)" fg:x="844" fg:w="15"/><text x="69.0918%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.22%)</title><rect x="68.8418%" y="565" width="1.2235%" height="15" fill="rgb(207,72,44)" fg:x="844" fg:w="15"/><text x="69.0918%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="69.7390%" y="549" width="0.3263%" height="15" fill="rgb(215,193,12)" fg:x="855" fg:w="4"/><text x="69.9890%" y="559.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="69.7390%" y="533" width="0.3263%" height="15" fill="rgb(248,41,39)" fg:x="855" fg:w="4"/><text x="69.9890%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="69.7390%" y="517" width="0.3263%" height="15" fill="rgb(253,85,4)" fg:x="855" fg:w="4"/><text x="69.9890%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="69.7390%" y="501" width="0.3263%" height="15" fill="rgb(243,70,31)" fg:x="855" fg:w="4"/><text x="69.9890%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9837%" y="485" width="0.0816%" height="15" fill="rgb(253,195,26)" fg:x="858" fg:w="1"/><text x="70.2337%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1468%" y="517" width="0.0816%" height="15" fill="rgb(243,42,11)" fg:x="860" fg:w="1"/><text x="70.3968%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1468%" y="501" width="0.0816%" height="15" fill="rgb(239,66,17)" fg:x="860" fg:w="1"/><text x="70.3968%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1468%" y="485" width="0.0816%" height="15" fill="rgb(217,132,21)" fg:x="860" fg:w="1"/><text x="70.3968%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1468%" y="469" width="0.0816%" height="15" fill="rgb(252,202,21)" fg:x="860" fg:w="1"/><text x="70.3968%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.1468%" y="453" width="0.0816%" height="15" fill="rgb(233,98,36)" fg:x="860" fg:w="1"/><text x="70.3968%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.1468%" y="437" width="0.0816%" height="15" fill="rgb(216,153,54)" fg:x="860" fg:w="1"/><text x="70.3968%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.1468%" y="421" width="0.0816%" height="15" fill="rgb(250,99,7)" fg:x="860" fg:w="1"/><text x="70.3968%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1468%" y="405" width="0.0816%" height="15" fill="rgb(207,56,50)" fg:x="860" fg:w="1"/><text x="70.3968%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1468%" y="389" width="0.0816%" height="15" fill="rgb(244,61,34)" fg:x="860" fg:w="1"/><text x="70.3968%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.1468%" y="373" width="0.0816%" height="15" fill="rgb(241,50,38)" fg:x="860" fg:w="1"/><text x="70.3968%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.1468%" y="357" width="0.0816%" height="15" fill="rgb(212,166,30)" fg:x="860" fg:w="1"/><text x="70.3968%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.1468%" y="341" width="0.0816%" height="15" fill="rgb(249,127,32)" fg:x="860" fg:w="1"/><text x="70.3968%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.1468%" y="325" width="0.0816%" height="15" fill="rgb(209,103,0)" fg:x="860" fg:w="1"/><text x="70.3968%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="70.1468%" y="309" width="0.0816%" height="15" fill="rgb(238,209,51)" fg:x="860" fg:w="1"/><text x="70.3968%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="70.1468%" y="293" width="0.0816%" height="15" fill="rgb(237,56,23)" fg:x="860" fg:w="1"/><text x="70.3968%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="70.2284%" y="517" width="0.2447%" height="15" fill="rgb(215,153,46)" fg:x="861" fg:w="3"/><text x="70.4784%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3915%" y="501" width="0.0816%" height="15" fill="rgb(224,49,31)" fg:x="863" fg:w="1"/><text x="70.6415%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.3915%" y="485" width="0.0816%" height="15" fill="rgb(250,18,42)" fg:x="863" fg:w="1"/><text x="70.6415%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.3915%" y="469" width="0.0816%" height="15" fill="rgb(215,176,39)" fg:x="863" fg:w="1"/><text x="70.6415%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.3915%" y="453" width="0.0816%" height="15" fill="rgb(223,77,29)" fg:x="863" fg:w="1"/><text x="70.6415%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.3915%" y="437" width="0.0816%" height="15" fill="rgb(234,94,52)" fg:x="863" fg:w="1"/><text x="70.6415%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.3915%" y="421" width="0.0816%" height="15" fill="rgb(220,154,50)" fg:x="863" fg:w="1"/><text x="70.6415%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.3915%" y="405" width="0.0816%" height="15" fill="rgb(212,11,10)" fg:x="863" fg:w="1"/><text x="70.6415%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.3915%" y="389" width="0.0816%" height="15" fill="rgb(205,166,19)" fg:x="863" fg:w="1"/><text x="70.6415%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.3915%" y="373" width="0.0816%" height="15" fill="rgb(244,198,16)" fg:x="863" fg:w="1"/><text x="70.6415%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.3915%" y="357" width="0.0816%" height="15" fill="rgb(219,69,12)" fg:x="863" fg:w="1"/><text x="70.6415%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3915%" y="341" width="0.0816%" height="15" fill="rgb(245,30,7)" fg:x="863" fg:w="1"/><text x="70.6415%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.49%)</title><rect x="70.0653%" y="549" width="0.4894%" height="15" fill="rgb(218,221,48)" fg:x="859" fg:w="6"/><text x="70.3153%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.49%)</title><rect x="70.0653%" y="533" width="0.4894%" height="15" fill="rgb(216,66,15)" fg:x="859" fg:w="6"/><text x="70.3153%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4731%" y="517" width="0.0816%" height="15" fill="rgb(226,122,50)" fg:x="864" fg:w="1"/><text x="70.7231%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.5546%" y="469" width="0.1631%" height="15" fill="rgb(239,156,16)" fg:x="865" fg:w="2"/><text x="70.8046%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="70.5546%" y="485" width="0.2447%" height="15" fill="rgb(224,27,38)" fg:x="865" fg:w="3"/><text x="70.8046%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7178%" y="469" width="0.0816%" height="15" fill="rgb(224,39,27)" fg:x="867" fg:w="1"/><text x="70.9678%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.33%)</title><rect x="70.5546%" y="501" width="0.3263%" height="15" fill="rgb(215,92,29)" fg:x="865" fg:w="4"/><text x="70.8046%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7993%" y="485" width="0.0816%" height="15" fill="rgb(207,159,16)" fg:x="868" fg:w="1"/><text x="71.0493%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8809%" y="453" width="0.0816%" height="15" fill="rgb(238,163,47)" fg:x="869" fg:w="1"/><text x="71.1309%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8809%" y="437" width="0.0816%" height="15" fill="rgb(219,91,49)" fg:x="869" fg:w="1"/><text x="71.1309%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8809%" y="421" width="0.0816%" height="15" fill="rgb(227,167,31)" fg:x="869" fg:w="1"/><text x="71.1309%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="70.9625%" y="389" width="0.3263%" height="15" fill="rgb(234,80,54)" fg:x="870" fg:w="4"/><text x="71.2125%" y="399.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="71.0440%" y="373" width="0.2447%" height="15" fill="rgb(212,114,2)" fg:x="871" fg:w="3"/><text x="71.2940%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="71.0440%" y="357" width="0.2447%" height="15" fill="rgb(234,50,24)" fg:x="871" fg:w="3"/><text x="71.2940%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="71.0440%" y="341" width="0.2447%" height="15" fill="rgb(221,68,8)" fg:x="871" fg:w="3"/><text x="71.2940%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.2072%" y="325" width="0.0816%" height="15" fill="rgb(254,180,31)" fg:x="873" fg:w="1"/><text x="71.4572%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="70.9625%" y="453" width="0.4078%" height="15" fill="rgb(247,130,50)" fg:x="870" fg:w="5"/><text x="71.2125%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="70.9625%" y="437" width="0.4078%" height="15" fill="rgb(211,109,4)" fg:x="870" fg:w="5"/><text x="71.2125%" y="447.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.41%)</title><rect x="70.9625%" y="421" width="0.4078%" height="15" fill="rgb(238,50,21)" fg:x="870" fg:w="5"/><text x="71.2125%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="70.9625%" y="405" width="0.4078%" height="15" fill="rgb(225,57,45)" fg:x="870" fg:w="5"/><text x="71.2125%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2887%" y="389" width="0.0816%" height="15" fill="rgb(209,196,50)" fg:x="874" fg:w="1"/><text x="71.5387%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="70.8809%" y="501" width="0.5710%" height="15" fill="rgb(242,140,13)" fg:x="869" fg:w="7"/><text x="71.1309%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="70.8809%" y="485" width="0.5710%" height="15" fill="rgb(217,111,7)" fg:x="869" fg:w="7"/><text x="71.1309%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.57%)</title><rect x="70.8809%" y="469" width="0.5710%" height="15" fill="rgb(253,193,51)" fg:x="869" fg:w="7"/><text x="71.1309%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.3703%" y="453" width="0.0816%" height="15" fill="rgb(252,70,29)" fg:x="875" fg:w="1"/><text x="71.6203%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3703%" y="437" width="0.0816%" height="15" fill="rgb(232,127,12)" fg:x="875" fg:w="1"/><text x="71.6203%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3703%" y="421" width="0.0816%" height="15" fill="rgb(211,180,21)" fg:x="875" fg:w="1"/><text x="71.6203%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.3703%" y="405" width="0.0816%" height="15" fill="rgb(229,72,13)" fg:x="875" fg:w="1"/><text x="71.6203%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3703%" y="389" width="0.0816%" height="15" fill="rgb(240,211,49)" fg:x="875" fg:w="1"/><text x="71.6203%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.06%)</title><rect x="70.5546%" y="549" width="1.0604%" height="15" fill="rgb(219,149,40)" fg:x="865" fg:w="13"/><text x="70.8046%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 1.06%)</title><rect x="70.5546%" y="533" width="1.0604%" height="15" fill="rgb(210,127,46)" fg:x="865" fg:w="13"/><text x="70.8046%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (13 samples, 1.06%)</title><rect x="70.5546%" y="517" width="1.0604%" height="15" fill="rgb(220,106,7)" fg:x="865" fg:w="13"/><text x="70.8046%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.4519%" y="501" width="0.1631%" height="15" fill="rgb(249,31,22)" fg:x="876" fg:w="2"/><text x="71.7019%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4519%" y="485" width="0.1631%" height="15" fill="rgb(253,1,49)" fg:x="876" fg:w="2"/><text x="71.7019%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.5334%" y="469" width="0.0816%" height="15" fill="rgb(227,144,33)" fg:x="877" fg:w="1"/><text x="71.7834%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.5334%" y="453" width="0.0816%" height="15" fill="rgb(249,163,44)" fg:x="877" fg:w="1"/><text x="71.7834%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.5334%" y="437" width="0.0816%" height="15" fill="rgb(234,15,39)" fg:x="877" fg:w="1"/><text x="71.7834%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="71.6966%" y="453" width="0.1631%" height="15" fill="rgb(207,66,16)" fg:x="879" fg:w="2"/><text x="71.9466%" y="463.50"></text></g><g><title>engine::session::internal::Added::find_refs (23 samples, 1.88%)</title><rect x="70.0653%" y="581" width="1.8760%" height="15" fill="rgb(233,112,24)" fg:x="859" fg:w="23"/><text x="70.3153%" y="591.50">e..</text></g><g><title>kernel::model::entity_ref::find_entity_refs (23 samples, 1.88%)</title><rect x="70.0653%" y="565" width="1.8760%" height="15" fill="rgb(230,90,22)" fg:x="859" fg:w="23"/><text x="70.3153%" y="575.50">k..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="71.6150%" y="549" width="0.3263%" height="15" fill="rgb(229,61,13)" fg:x="878" fg:w="4"/><text x="71.8650%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="71.6150%" y="533" width="0.3263%" height="15" fill="rgb(225,57,24)" fg:x="878" fg:w="4"/><text x="71.8650%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="71.6150%" y="517" width="0.3263%" height="15" fill="rgb(208,169,48)" fg:x="878" fg:w="4"/><text x="71.8650%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="71.6150%" y="501" width="0.3263%" height="15" fill="rgb(244,218,51)" fg:x="878" fg:w="4"/><text x="71.8650%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="71.6150%" y="485" width="0.3263%" height="15" fill="rgb(214,148,10)" fg:x="878" fg:w="4"/><text x="71.8650%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="71.6150%" y="469" width="0.3263%" height="15" fill="rgb(225,174,27)" fg:x="878" fg:w="4"/><text x="71.8650%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="71.8597%" y="453" width="0.0816%" height="15" fill="rgb(230,96,26)" fg:x="881" fg:w="1"/><text x="72.1097%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.8597%" y="437" width="0.0816%" height="15" fill="rgb(232,10,30)" fg:x="881" fg:w="1"/><text x="72.1097%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.8597%" y="421" width="0.0816%" height="15" fill="rgb(222,8,50)" fg:x="881" fg:w="1"/><text x="72.1097%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.1044%" y="485" width="0.0816%" height="15" fill="rgb(213,81,27)" fg:x="884" fg:w="1"/><text x="72.3544%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.1044%" y="469" width="0.0816%" height="15" fill="rgb(245,50,10)" fg:x="884" fg:w="1"/><text x="72.3544%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.1044%" y="453" width="0.0816%" height="15" fill="rgb(216,100,18)" fg:x="884" fg:w="1"/><text x="72.3544%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.1044%" y="437" width="0.0816%" height="15" fill="rgb(236,147,54)" fg:x="884" fg:w="1"/><text x="72.3544%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.1044%" y="421" width="0.0816%" height="15" fill="rgb(205,143,26)" fg:x="884" fg:w="1"/><text x="72.3544%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.1044%" y="405" width="0.0816%" height="15" fill="rgb(236,26,9)" fg:x="884" fg:w="1"/><text x="72.3544%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.1044%" y="389" width="0.0816%" height="15" fill="rgb(221,165,53)" fg:x="884" fg:w="1"/><text x="72.3544%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.1044%" y="373" width="0.0816%" height="15" fill="rgb(214,110,17)" fg:x="884" fg:w="1"/><text x="72.3544%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.1044%" y="357" width="0.0816%" height="15" fill="rgb(237,197,12)" fg:x="884" fg:w="1"/><text x="72.3544%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.1044%" y="341" width="0.0816%" height="15" fill="rgb(205,84,17)" fg:x="884" fg:w="1"/><text x="72.3544%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.1044%" y="325" width="0.0816%" height="15" fill="rgb(237,18,45)" fg:x="884" fg:w="1"/><text x="72.3544%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.1044%" y="309" width="0.0816%" height="15" fill="rgb(221,87,14)" fg:x="884" fg:w="1"/><text x="72.3544%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.1044%" y="517" width="0.1631%" height="15" fill="rgb(238,186,15)" fg:x="884" fg:w="2"/><text x="72.3544%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.1044%" y="501" width="0.1631%" height="15" fill="rgb(208,115,11)" fg:x="884" fg:w="2"/><text x="72.3544%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="72.1860%" y="485" width="0.0816%" height="15" fill="rgb(254,175,0)" fg:x="885" fg:w="1"/><text x="72.4360%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="72.1860%" y="469" width="0.0816%" height="15" fill="rgb(227,24,42)" fg:x="885" fg:w="1"/><text x="72.4360%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.2675%" y="517" width="0.0816%" height="15" fill="rgb(223,211,37)" fg:x="886" fg:w="1"/><text x="72.5175%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.2675%" y="501" width="0.0816%" height="15" fill="rgb(235,49,27)" fg:x="886" fg:w="1"/><text x="72.5175%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.2675%" y="485" width="0.0816%" height="15" fill="rgb(254,97,51)" fg:x="886" fg:w="1"/><text x="72.5175%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.2675%" y="469" width="0.0816%" height="15" fill="rgb(249,51,40)" fg:x="886" fg:w="1"/><text x="72.5175%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.2675%" y="453" width="0.0816%" height="15" fill="rgb(210,128,45)" fg:x="886" fg:w="1"/><text x="72.5175%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.2675%" y="437" width="0.0816%" height="15" fill="rgb(224,137,50)" fg:x="886" fg:w="1"/><text x="72.5175%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.2675%" y="421" width="0.0816%" height="15" fill="rgb(242,15,9)" fg:x="886" fg:w="1"/><text x="72.5175%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.2675%" y="405" width="0.0816%" height="15" fill="rgb(233,187,41)" fg:x="886" fg:w="1"/><text x="72.5175%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.2675%" y="389" width="0.0816%" height="15" fill="rgb(227,2,29)" fg:x="886" fg:w="1"/><text x="72.5175%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.2675%" y="373" width="0.0816%" height="15" fill="rgb(222,70,3)" fg:x="886" fg:w="1"/><text x="72.5175%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.2675%" y="357" width="0.0816%" height="15" fill="rgb(213,11,42)" fg:x="886" fg:w="1"/><text x="72.5175%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2675%" y="341" width="0.0816%" height="15" fill="rgb(225,150,9)" fg:x="886" fg:w="1"/><text x="72.5175%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.49%)</title><rect x="72.0228%" y="549" width="0.4894%" height="15" fill="rgb(230,162,45)" fg:x="883" fg:w="6"/><text x="72.2728%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.49%)</title><rect x="72.0228%" y="533" width="0.4894%" height="15" fill="rgb(222,14,52)" fg:x="883" fg:w="6"/><text x="72.2728%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="72.3491%" y="517" width="0.1631%" height="15" fill="rgb(254,198,14)" fg:x="887" fg:w="2"/><text x="72.5991%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (7 samples, 0.57%)</title><rect x="72.0228%" y="565" width="0.5710%" height="15" fill="rgb(220,217,30)" fg:x="883" fg:w="7"/><text x="72.2728%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.5122%" y="549" width="0.0816%" height="15" fill="rgb(215,146,41)" fg:x="889" fg:w="1"/><text x="72.7622%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.5122%" y="533" width="0.0816%" height="15" fill="rgb(217,27,36)" fg:x="889" fg:w="1"/><text x="72.7622%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.5122%" y="517" width="0.0816%" height="15" fill="rgb(219,218,39)" fg:x="889" fg:w="1"/><text x="72.7622%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.5122%" y="501" width="0.0816%" height="15" fill="rgb(219,4,42)" fg:x="889" fg:w="1"/><text x="72.7622%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.5122%" y="485" width="0.0816%" height="15" fill="rgb(249,119,36)" fg:x="889" fg:w="1"/><text x="72.7622%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.5122%" y="469" width="0.0816%" height="15" fill="rgb(209,23,33)" fg:x="889" fg:w="1"/><text x="72.7622%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.5122%" y="453" width="0.0816%" height="15" fill="rgb(211,10,0)" fg:x="889" fg:w="1"/><text x="72.7622%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.5122%" y="437" width="0.0816%" height="15" fill="rgb(208,99,37)" fg:x="889" fg:w="1"/><text x="72.7622%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.5122%" y="421" width="0.0816%" height="15" fill="rgb(213,132,31)" fg:x="889" fg:w="1"/><text x="72.7622%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.5122%" y="405" width="0.0816%" height="15" fill="rgb(243,129,40)" fg:x="889" fg:w="1"/><text x="72.7622%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.5122%" y="389" width="0.0816%" height="15" fill="rgb(210,66,33)" fg:x="889" fg:w="1"/><text x="72.7622%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5122%" y="373" width="0.0816%" height="15" fill="rgb(209,189,4)" fg:x="889" fg:w="1"/><text x="72.7622%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.5938%" y="565" width="0.0816%" height="15" fill="rgb(214,107,37)" fg:x="890" fg:w="1"/><text x="72.8438%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7569%" y="485" width="0.0816%" height="15" fill="rgb(245,88,54)" fg:x="892" fg:w="1"/><text x="73.0069%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.8385%" y="437" width="0.1631%" height="15" fill="rgb(205,146,20)" fg:x="893" fg:w="2"/><text x="73.0885%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.8385%" y="421" width="0.1631%" height="15" fill="rgb(220,161,25)" fg:x="893" fg:w="2"/><text x="73.0885%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9201%" y="405" width="0.0816%" height="15" fill="rgb(215,152,15)" fg:x="894" fg:w="1"/><text x="73.1701%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9201%" y="389" width="0.0816%" height="15" fill="rgb(233,192,44)" fg:x="894" fg:w="1"/><text x="73.1701%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="72.9201%" y="373" width="0.0816%" height="15" fill="rgb(240,170,46)" fg:x="894" fg:w="1"/><text x="73.1701%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.49%)</title><rect x="72.6754%" y="565" width="0.4894%" height="15" fill="rgb(207,104,33)" fg:x="891" fg:w="6"/><text x="72.9254%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="72.6754%" y="549" width="0.4894%" height="15" fill="rgb(219,21,39)" fg:x="891" fg:w="6"/><text x="72.9254%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="72.6754%" y="533" width="0.4894%" height="15" fill="rgb(214,133,29)" fg:x="891" fg:w="6"/><text x="72.9254%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (6 samples, 0.49%)</title><rect x="72.6754%" y="517" width="0.4894%" height="15" fill="rgb(226,93,6)" fg:x="891" fg:w="6"/><text x="72.9254%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="72.6754%" y="501" width="0.4894%" height="15" fill="rgb(252,222,34)" fg:x="891" fg:w="6"/><text x="72.9254%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.33%)</title><rect x="72.8385%" y="485" width="0.3263%" height="15" fill="rgb(252,92,48)" fg:x="893" fg:w="4"/><text x="73.0885%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="72.8385%" y="469" width="0.3263%" height="15" fill="rgb(245,223,24)" fg:x="893" fg:w="4"/><text x="73.0885%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="72.8385%" y="453" width="0.3263%" height="15" fill="rgb(205,176,3)" fg:x="893" fg:w="4"/><text x="73.0885%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="73.0016%" y="437" width="0.1631%" height="15" fill="rgb(235,151,15)" fg:x="895" fg:w="2"/><text x="73.2516%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.0016%" y="421" width="0.1631%" height="15" fill="rgb(237,209,11)" fg:x="895" fg:w="2"/><text x="73.2516%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.0016%" y="405" width="0.1631%" height="15" fill="rgb(243,227,24)" fg:x="895" fg:w="2"/><text x="73.2516%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.0832%" y="389" width="0.0816%" height="15" fill="rgb(239,193,16)" fg:x="896" fg:w="1"/><text x="73.3332%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="73.0832%" y="373" width="0.0816%" height="15" fill="rgb(231,27,9)" fg:x="896" fg:w="1"/><text x="73.3332%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2463%" y="421" width="0.0816%" height="15" fill="rgb(219,169,10)" fg:x="898" fg:w="1"/><text x="73.4963%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="73.1648%" y="469" width="0.2447%" height="15" fill="rgb(244,229,43)" fg:x="897" fg:w="3"/><text x="73.4148%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.2463%" y="453" width="0.1631%" height="15" fill="rgb(254,38,20)" fg:x="898" fg:w="2"/><text x="73.4963%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="73.2463%" y="437" width="0.1631%" height="15" fill="rgb(250,47,30)" fg:x="898" fg:w="2"/><text x="73.4963%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="73.3279%" y="421" width="0.0816%" height="15" fill="rgb(224,124,36)" fg:x="899" fg:w="1"/><text x="73.5779%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="73.3279%" y="405" width="0.0816%" height="15" fill="rgb(246,68,51)" fg:x="899" fg:w="1"/><text x="73.5779%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="73.1648%" y="501" width="0.3263%" height="15" fill="rgb(253,43,49)" fg:x="897" fg:w="4"/><text x="73.4148%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="73.1648%" y="485" width="0.3263%" height="15" fill="rgb(219,54,36)" fg:x="897" fg:w="4"/><text x="73.4148%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.4095%" y="469" width="0.0816%" height="15" fill="rgb(227,133,34)" fg:x="900" fg:w="1"/><text x="73.6595%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4095%" y="453" width="0.0816%" height="15" fill="rgb(247,227,15)" fg:x="900" fg:w="1"/><text x="73.6595%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="73.4910%" y="501" width="0.1631%" height="15" fill="rgb(229,96,14)" fg:x="901" fg:w="2"/><text x="73.7410%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="73.4910%" y="485" width="0.1631%" height="15" fill="rgb(220,79,17)" fg:x="901" fg:w="2"/><text x="73.7410%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (60 samples, 4.89%)</title><rect x="68.8418%" y="597" width="4.8940%" height="15" fill="rgb(205,131,53)" fg:x="844" fg:w="60"/><text x="69.0918%" y="607.50">engine..</text></g><g><title>engine::session::internal::Entities::add_persisted (22 samples, 1.79%)</title><rect x="71.9413%" y="581" width="1.7945%" height="15" fill="rgb(209,50,29)" fg:x="882" fg:w="22"/><text x="72.1913%" y="591.50">e..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.57%)</title><rect x="73.1648%" y="565" width="0.5710%" height="15" fill="rgb(245,86,46)" fg:x="897" fg:w="7"/><text x="73.4148%" y="575.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.57%)</title><rect x="73.1648%" y="549" width="0.5710%" height="15" fill="rgb(235,66,46)" fg:x="897" fg:w="7"/><text x="73.4148%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="73.1648%" y="533" width="0.5710%" height="15" fill="rgb(232,148,31)" fg:x="897" fg:w="7"/><text x="73.4148%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.57%)</title><rect x="73.1648%" y="517" width="0.5710%" height="15" fill="rgb(217,149,8)" fg:x="897" fg:w="7"/><text x="73.4148%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6542%" y="501" width="0.0816%" height="15" fill="rgb(209,183,11)" fg:x="903" fg:w="1"/><text x="73.9042%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.7357%" y="581" width="0.0816%" height="15" fill="rgb(208,55,20)" fg:x="904" fg:w="1"/><text x="73.9857%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.8173%" y="533" width="0.0816%" height="15" fill="rgb(218,39,14)" fg:x="905" fg:w="1"/><text x="74.0673%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8173%" y="517" width="0.0816%" height="15" fill="rgb(216,169,33)" fg:x="905" fg:w="1"/><text x="74.0673%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.8173%" y="565" width="0.1631%" height="15" fill="rgb(233,80,24)" fg:x="905" fg:w="2"/><text x="74.0673%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.8173%" y="549" width="0.1631%" height="15" fill="rgb(213,179,31)" fg:x="905" fg:w="2"/><text x="74.0673%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.8989%" y="533" width="0.0816%" height="15" fill="rgb(209,19,5)" fg:x="906" fg:w="1"/><text x="74.1489%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.8989%" y="517" width="0.0816%" height="15" fill="rgb(219,18,35)" fg:x="906" fg:w="1"/><text x="74.1489%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.8989%" y="501" width="0.0816%" height="15" fill="rgb(209,169,16)" fg:x="906" fg:w="1"/><text x="74.1489%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.8989%" y="485" width="0.0816%" height="15" fill="rgb(245,90,51)" fg:x="906" fg:w="1"/><text x="74.1489%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.8989%" y="469" width="0.0816%" height="15" fill="rgb(220,99,45)" fg:x="906" fg:w="1"/><text x="74.1489%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.8989%" y="453" width="0.0816%" height="15" fill="rgb(249,89,25)" fg:x="906" fg:w="1"/><text x="74.1489%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.8989%" y="437" width="0.0816%" height="15" fill="rgb(239,193,0)" fg:x="906" fg:w="1"/><text x="74.1489%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.8989%" y="421" width="0.0816%" height="15" fill="rgb(231,126,1)" fg:x="906" fg:w="1"/><text x="74.1489%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.8989%" y="405" width="0.0816%" height="15" fill="rgb(243,166,3)" fg:x="906" fg:w="1"/><text x="74.1489%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.8989%" y="389" width="0.0816%" height="15" fill="rgb(223,22,34)" fg:x="906" fg:w="1"/><text x="74.1489%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.8989%" y="373" width="0.0816%" height="15" fill="rgb(251,52,51)" fg:x="906" fg:w="1"/><text x="74.1489%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8989%" y="357" width="0.0816%" height="15" fill="rgb(221,165,28)" fg:x="906" fg:w="1"/><text x="74.1489%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0620%" y="485" width="0.0816%" height="15" fill="rgb(218,121,47)" fg:x="908" fg:w="1"/><text x="74.3120%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0620%" y="469" width="0.0816%" height="15" fill="rgb(209,120,9)" fg:x="908" fg:w="1"/><text x="74.3120%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0620%" y="453" width="0.0816%" height="15" fill="rgb(236,68,12)" fg:x="908" fg:w="1"/><text x="74.3120%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.0620%" y="437" width="0.0816%" height="15" fill="rgb(225,194,26)" fg:x="908" fg:w="1"/><text x="74.3120%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.0620%" y="421" width="0.0816%" height="15" fill="rgb(231,84,39)" fg:x="908" fg:w="1"/><text x="74.3120%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.0620%" y="405" width="0.0816%" height="15" fill="rgb(210,11,45)" fg:x="908" fg:w="1"/><text x="74.3120%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="74.0620%" y="389" width="0.0816%" height="15" fill="rgb(224,54,52)" fg:x="908" fg:w="1"/><text x="74.3120%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.0620%" y="373" width="0.0816%" height="15" fill="rgb(238,102,14)" fg:x="908" fg:w="1"/><text x="74.3120%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.0620%" y="501" width="0.1631%" height="15" fill="rgb(243,160,52)" fg:x="908" fg:w="2"/><text x="74.3120%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.1436%" y="485" width="0.0816%" height="15" fill="rgb(216,114,19)" fg:x="909" fg:w="1"/><text x="74.3936%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1436%" y="469" width="0.0816%" height="15" fill="rgb(244,166,37)" fg:x="909" fg:w="1"/><text x="74.3936%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="74.0620%" y="517" width="0.2447%" height="15" fill="rgb(246,29,44)" fg:x="908" fg:w="3"/><text x="74.3120%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2251%" y="501" width="0.0816%" height="15" fill="rgb(215,56,53)" fg:x="910" fg:w="1"/><text x="74.4751%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.3067%" y="469" width="0.1631%" height="15" fill="rgb(217,60,2)" fg:x="911" fg:w="2"/><text x="74.5567%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.3067%" y="453" width="0.1631%" height="15" fill="rgb(207,26,24)" fg:x="911" fg:w="2"/><text x="74.5567%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.3883%" y="437" width="0.0816%" height="15" fill="rgb(252,210,15)" fg:x="912" fg:w="1"/><text x="74.6383%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3883%" y="421" width="0.0816%" height="15" fill="rgb(253,209,26)" fg:x="912" fg:w="1"/><text x="74.6383%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3883%" y="405" width="0.0816%" height="15" fill="rgb(238,170,14)" fg:x="912" fg:w="1"/><text x="74.6383%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.3883%" y="389" width="0.0816%" height="15" fill="rgb(216,178,15)" fg:x="912" fg:w="1"/><text x="74.6383%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.3883%" y="373" width="0.0816%" height="15" fill="rgb(250,197,2)" fg:x="912" fg:w="1"/><text x="74.6383%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.3883%" y="357" width="0.0816%" height="15" fill="rgb(212,70,42)" fg:x="912" fg:w="1"/><text x="74.6383%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3883%" y="341" width="0.0816%" height="15" fill="rgb(227,213,9)" fg:x="912" fg:w="1"/><text x="74.6383%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3883%" y="325" width="0.0816%" height="15" fill="rgb(245,99,25)" fg:x="912" fg:w="1"/><text x="74.6383%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.3883%" y="309" width="0.0816%" height="15" fill="rgb(250,82,29)" fg:x="912" fg:w="1"/><text x="74.6383%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.3883%" y="293" width="0.0816%" height="15" fill="rgb(241,226,54)" fg:x="912" fg:w="1"/><text x="74.6383%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.3883%" y="277" width="0.0816%" height="15" fill="rgb(221,99,41)" fg:x="912" fg:w="1"/><text x="74.6383%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.3883%" y="261" width="0.0816%" height="15" fill="rgb(213,90,21)" fg:x="912" fg:w="1"/><text x="74.6383%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="74.4698%" y="469" width="0.1631%" height="15" fill="rgb(205,208,24)" fg:x="913" fg:w="2"/><text x="74.7198%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="74.4698%" y="453" width="0.1631%" height="15" fill="rgb(246,31,12)" fg:x="913" fg:w="2"/><text x="74.7198%" y="463.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="74.5514%" y="437" width="0.0816%" height="15" fill="rgb(213,154,6)" fg:x="914" fg:w="1"/><text x="74.8014%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.5514%" y="421" width="0.0816%" height="15" fill="rgb(222,163,29)" fg:x="914" fg:w="1"/><text x="74.8014%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5514%" y="405" width="0.0816%" height="15" fill="rgb(227,201,8)" fg:x="914" fg:w="1"/><text x="74.8014%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="74.5514%" y="389" width="0.0816%" height="15" fill="rgb(233,9,32)" fg:x="914" fg:w="1"/><text x="74.8014%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="74.3067%" y="517" width="0.4078%" height="15" fill="rgb(217,54,24)" fg:x="911" fg:w="5"/><text x="74.5567%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="74.3067%" y="501" width="0.4078%" height="15" fill="rgb(235,192,0)" fg:x="911" fg:w="5"/><text x="74.5567%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.41%)</title><rect x="74.3067%" y="485" width="0.4078%" height="15" fill="rgb(235,45,9)" fg:x="911" fg:w="5"/><text x="74.5567%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.6330%" y="469" width="0.0816%" height="15" fill="rgb(246,42,40)" fg:x="915" fg:w="1"/><text x="74.8830%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6330%" y="453" width="0.0816%" height="15" fill="rgb(248,111,24)" fg:x="915" fg:w="1"/><text x="74.8830%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6330%" y="437" width="0.0816%" height="15" fill="rgb(249,65,22)" fg:x="915" fg:w="1"/><text x="74.8830%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="74.6330%" y="421" width="0.0816%" height="15" fill="rgb(238,111,51)" fg:x="915" fg:w="1"/><text x="74.8830%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.6330%" y="405" width="0.0816%" height="15" fill="rgb(250,118,22)" fg:x="915" fg:w="1"/><text x="74.8830%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.6330%" y="389" width="0.0816%" height="15" fill="rgb(234,84,26)" fg:x="915" fg:w="1"/><text x="74.8830%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.6330%" y="373" width="0.0816%" height="15" fill="rgb(243,172,12)" fg:x="915" fg:w="1"/><text x="74.8830%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.82%)</title><rect x="73.9804%" y="565" width="0.8157%" height="15" fill="rgb(236,150,49)" fg:x="907" fg:w="10"/><text x="74.2304%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.73%)</title><rect x="74.0620%" y="549" width="0.7341%" height="15" fill="rgb(225,197,26)" fg:x="908" fg:w="9"/><text x="74.3120%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.73%)</title><rect x="74.0620%" y="533" width="0.7341%" height="15" fill="rgb(214,17,42)" fg:x="908" fg:w="9"/><text x="74.3120%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.7145%" y="517" width="0.0816%" height="15" fill="rgb(224,165,40)" fg:x="916" fg:w="1"/><text x="74.9645%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7145%" y="501" width="0.0816%" height="15" fill="rgb(246,100,4)" fg:x="916" fg:w="1"/><text x="74.9645%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.7145%" y="485" width="0.0816%" height="15" fill="rgb(222,103,0)" fg:x="916" fg:w="1"/><text x="74.9645%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.7145%" y="469" width="0.0816%" height="15" fill="rgb(227,189,26)" fg:x="916" fg:w="1"/><text x="74.9645%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.7145%" y="453" width="0.0816%" height="15" fill="rgb(214,202,17)" fg:x="916" fg:w="1"/><text x="74.9645%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.7145%" y="437" width="0.0816%" height="15" fill="rgb(229,111,3)" fg:x="916" fg:w="1"/><text x="74.9645%" y="447.50"></text></g><g><title>engine::session::internal::Added::find_refs (14 samples, 1.14%)</title><rect x="73.7357%" y="597" width="1.1419%" height="15" fill="rgb(229,172,15)" fg:x="904" fg:w="14"/><text x="73.9857%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (13 samples, 1.06%)</title><rect x="73.8173%" y="581" width="1.0604%" height="15" fill="rgb(230,224,35)" fg:x="905" fg:w="13"/><text x="74.0673%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.7961%" y="565" width="0.0816%" height="15" fill="rgb(251,141,6)" fg:x="917" fg:w="1"/><text x="75.0461%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7961%" y="549" width="0.0816%" height="15" fill="rgb(225,208,6)" fg:x="917" fg:w="1"/><text x="75.0461%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="74.7961%" y="533" width="0.0816%" height="15" fill="rgb(246,181,16)" fg:x="917" fg:w="1"/><text x="75.0461%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="74.7961%" y="517" width="0.0816%" height="15" fill="rgb(227,129,36)" fg:x="917" fg:w="1"/><text x="75.0461%" y="527.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="74.7961%" y="501" width="0.0816%" height="15" fill="rgb(248,117,24)" fg:x="917" fg:w="1"/><text x="75.0461%" y="511.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="74.7961%" y="485" width="0.0816%" height="15" fill="rgb(214,185,35)" fg:x="917" fg:w="1"/><text x="75.0461%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="74.7961%" y="469" width="0.0816%" height="15" fill="rgb(236,150,34)" fg:x="917" fg:w="1"/><text x="75.0461%" y="479.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="74.7961%" y="453" width="0.0816%" height="15" fill="rgb(243,228,27)" fg:x="917" fg:w="1"/><text x="75.0461%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="74.7961%" y="437" width="0.0816%" height="15" fill="rgb(245,77,44)" fg:x="917" fg:w="1"/><text x="75.0461%" y="447.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="74.7961%" y="421" width="0.0816%" height="15" fill="rgb(235,214,42)" fg:x="917" fg:w="1"/><text x="75.0461%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="74.7961%" y="405" width="0.0816%" height="15" fill="rgb(221,74,3)" fg:x="917" fg:w="1"/><text x="75.0461%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="74.7961%" y="389" width="0.0816%" height="15" fill="rgb(206,121,29)" fg:x="917" fg:w="1"/><text x="75.0461%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="74.7961%" y="373" width="0.0816%" height="15" fill="rgb(249,131,53)" fg:x="917" fg:w="1"/><text x="75.0461%" y="383.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="74.7961%" y="357" width="0.0816%" height="15" fill="rgb(236,170,29)" fg:x="917" fg:w="1"/><text x="75.0461%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8777%" y="549" width="0.0816%" height="15" fill="rgb(247,96,15)" fg:x="918" fg:w="1"/><text x="75.1277%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8777%" y="533" width="0.0816%" height="15" fill="rgb(211,210,7)" fg:x="918" fg:w="1"/><text x="75.1277%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8777%" y="517" width="0.0816%" height="15" fill="rgb(240,88,50)" fg:x="918" fg:w="1"/><text x="75.1277%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8777%" y="501" width="0.0816%" height="15" fill="rgb(209,229,26)" fg:x="918" fg:w="1"/><text x="75.1277%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.8777%" y="485" width="0.0816%" height="15" fill="rgb(210,68,23)" fg:x="918" fg:w="1"/><text x="75.1277%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.8777%" y="469" width="0.0816%" height="15" fill="rgb(229,180,13)" fg:x="918" fg:w="1"/><text x="75.1277%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.8777%" y="453" width="0.0816%" height="15" fill="rgb(236,53,44)" fg:x="918" fg:w="1"/><text x="75.1277%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8777%" y="437" width="0.0816%" height="15" fill="rgb(244,214,29)" fg:x="918" fg:w="1"/><text x="75.1277%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8777%" y="421" width="0.0816%" height="15" fill="rgb(220,75,29)" fg:x="918" fg:w="1"/><text x="75.1277%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.8777%" y="405" width="0.0816%" height="15" fill="rgb(214,183,37)" fg:x="918" fg:w="1"/><text x="75.1277%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.8777%" y="389" width="0.0816%" height="15" fill="rgb(239,117,29)" fg:x="918" fg:w="1"/><text x="75.1277%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.8777%" y="373" width="0.0816%" height="15" fill="rgb(237,171,35)" fg:x="918" fg:w="1"/><text x="75.1277%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.8777%" y="357" width="0.0816%" height="15" fill="rgb(229,178,53)" fg:x="918" fg:w="1"/><text x="75.1277%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8777%" y="341" width="0.0816%" height="15" fill="rgb(210,102,19)" fg:x="918" fg:w="1"/><text x="75.1277%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.8777%" y="581" width="0.1631%" height="15" fill="rgb(235,127,22)" fg:x="918" fg:w="2"/><text x="75.1277%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.8777%" y="565" width="0.1631%" height="15" fill="rgb(244,31,31)" fg:x="918" fg:w="2"/><text x="75.1277%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.9592%" y="549" width="0.0816%" height="15" fill="rgb(231,43,21)" fg:x="919" fg:w="1"/><text x="75.2092%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.9592%" y="533" width="0.0816%" height="15" fill="rgb(217,131,35)" fg:x="919" fg:w="1"/><text x="75.2092%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.9592%" y="517" width="0.0816%" height="15" fill="rgb(221,149,4)" fg:x="919" fg:w="1"/><text x="75.2092%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.9592%" y="501" width="0.0816%" height="15" fill="rgb(232,170,28)" fg:x="919" fg:w="1"/><text x="75.2092%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.9592%" y="485" width="0.0816%" height="15" fill="rgb(238,56,10)" fg:x="919" fg:w="1"/><text x="75.2092%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="74.9592%" y="469" width="0.0816%" height="15" fill="rgb(235,196,14)" fg:x="919" fg:w="1"/><text x="75.2092%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.9592%" y="453" width="0.0816%" height="15" fill="rgb(216,45,48)" fg:x="919" fg:w="1"/><text x="75.2092%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.0408%" y="581" width="0.0816%" height="15" fill="rgb(238,213,17)" fg:x="920" fg:w="1"/><text x="75.2908%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.0408%" y="565" width="0.0816%" height="15" fill="rgb(212,13,2)" fg:x="920" fg:w="1"/><text x="75.2908%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.0408%" y="549" width="0.0816%" height="15" fill="rgb(240,114,20)" fg:x="920" fg:w="1"/><text x="75.2908%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0408%" y="533" width="0.0816%" height="15" fill="rgb(228,41,40)" fg:x="920" fg:w="1"/><text x="75.2908%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0408%" y="517" width="0.0816%" height="15" fill="rgb(244,132,35)" fg:x="920" fg:w="1"/><text x="75.2908%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0408%" y="501" width="0.0816%" height="15" fill="rgb(253,189,4)" fg:x="920" fg:w="1"/><text x="75.2908%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.0408%" y="485" width="0.0816%" height="15" fill="rgb(224,37,19)" fg:x="920" fg:w="1"/><text x="75.2908%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.0408%" y="469" width="0.0816%" height="15" fill="rgb(235,223,18)" fg:x="920" fg:w="1"/><text x="75.2908%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.0408%" y="453" width="0.0816%" height="15" fill="rgb(235,163,25)" fg:x="920" fg:w="1"/><text x="75.2908%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.0408%" y="437" width="0.0816%" height="15" fill="rgb(217,145,28)" fg:x="920" fg:w="1"/><text x="75.2908%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.0408%" y="421" width="0.0816%" height="15" fill="rgb(223,223,32)" fg:x="920" fg:w="1"/><text x="75.2908%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.0408%" y="405" width="0.0816%" height="15" fill="rgb(227,189,39)" fg:x="920" fg:w="1"/><text x="75.2908%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.0408%" y="389" width="0.0816%" height="15" fill="rgb(248,10,22)" fg:x="920" fg:w="1"/><text x="75.2908%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.0408%" y="373" width="0.0816%" height="15" fill="rgb(248,46,39)" fg:x="920" fg:w="1"/><text x="75.2908%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.0408%" y="357" width="0.0816%" height="15" fill="rgb(248,113,48)" fg:x="920" fg:w="1"/><text x="75.2908%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.0408%" y="341" width="0.0816%" height="15" fill="rgb(245,16,25)" fg:x="920" fg:w="1"/><text x="75.2908%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.0408%" y="325" width="0.0816%" height="15" fill="rgb(249,152,16)" fg:x="920" fg:w="1"/><text x="75.2908%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.0408%" y="309" width="0.0816%" height="15" fill="rgb(250,16,1)" fg:x="920" fg:w="1"/><text x="75.2908%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.2039%" y="501" width="0.0816%" height="15" fill="rgb(249,138,3)" fg:x="922" fg:w="1"/><text x="75.4539%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.2855%" y="485" width="0.0816%" height="15" fill="rgb(227,71,41)" fg:x="923" fg:w="1"/><text x="75.5355%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.3670%" y="453" width="0.0816%" height="15" fill="rgb(209,184,23)" fg:x="924" fg:w="1"/><text x="75.6170%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="75.3670%" y="485" width="0.1631%" height="15" fill="rgb(223,215,31)" fg:x="924" fg:w="2"/><text x="75.6170%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="75.3670%" y="469" width="0.1631%" height="15" fill="rgb(210,146,28)" fg:x="924" fg:w="2"/><text x="75.6170%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.4486%" y="453" width="0.0816%" height="15" fill="rgb(209,183,41)" fg:x="925" fg:w="1"/><text x="75.6986%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.4486%" y="437" width="0.0816%" height="15" fill="rgb(209,224,45)" fg:x="925" fg:w="1"/><text x="75.6986%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.49%)</title><rect x="75.1223%" y="581" width="0.4894%" height="15" fill="rgb(224,209,51)" fg:x="921" fg:w="6"/><text x="75.3723%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="75.1223%" y="565" width="0.4894%" height="15" fill="rgb(223,17,39)" fg:x="921" fg:w="6"/><text x="75.3723%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="75.1223%" y="549" width="0.4894%" height="15" fill="rgb(234,204,37)" fg:x="921" fg:w="6"/><text x="75.3723%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (6 samples, 0.49%)</title><rect x="75.1223%" y="533" width="0.4894%" height="15" fill="rgb(236,120,5)" fg:x="921" fg:w="6"/><text x="75.3723%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="75.1223%" y="517" width="0.4894%" height="15" fill="rgb(248,97,27)" fg:x="921" fg:w="6"/><text x="75.3723%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.33%)</title><rect x="75.2855%" y="501" width="0.3263%" height="15" fill="rgb(240,66,17)" fg:x="923" fg:w="4"/><text x="75.5355%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.5302%" y="485" width="0.0816%" height="15" fill="rgb(210,79,3)" fg:x="926" fg:w="1"/><text x="75.7802%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.5302%" y="469" width="0.0816%" height="15" fill="rgb(214,176,27)" fg:x="926" fg:w="1"/><text x="75.7802%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.5302%" y="453" width="0.0816%" height="15" fill="rgb(235,185,3)" fg:x="926" fg:w="1"/><text x="75.7802%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.5302%" y="437" width="0.0816%" height="15" fill="rgb(227,24,12)" fg:x="926" fg:w="1"/><text x="75.7802%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.5302%" y="421" width="0.0816%" height="15" fill="rgb(252,169,48)" fg:x="926" fg:w="1"/><text x="75.7802%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.6117%" y="437" width="0.0816%" height="15" fill="rgb(212,65,1)" fg:x="927" fg:w="1"/><text x="75.8617%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.6117%" y="421" width="0.0816%" height="15" fill="rgb(242,39,24)" fg:x="927" fg:w="1"/><text x="75.8617%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.6117%" y="405" width="0.0816%" height="15" fill="rgb(249,32,23)" fg:x="927" fg:w="1"/><text x="75.8617%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.6117%" y="389" width="0.0816%" height="15" fill="rgb(251,195,23)" fg:x="927" fg:w="1"/><text x="75.8617%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.6933%" y="405" width="0.0816%" height="15" fill="rgb(236,174,8)" fg:x="928" fg:w="1"/><text x="75.9433%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.6933%" y="421" width="0.1631%" height="15" fill="rgb(220,197,8)" fg:x="928" fg:w="2"/><text x="75.9433%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.7749%" y="405" width="0.0816%" height="15" fill="rgb(240,108,37)" fg:x="929" fg:w="1"/><text x="76.0249%" y="415.50"></text></g><g><title>engine::session::Session::load_entity (87 samples, 7.10%)</title><rect x="68.8418%" y="613" width="7.0962%" height="15" fill="rgb(232,176,24)" fg:x="844" fg:w="87"/><text x="69.0918%" y="623.50">engine::se..</text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.06%)</title><rect x="74.8777%" y="597" width="1.0604%" height="15" fill="rgb(243,35,29)" fg:x="918" fg:w="13"/><text x="75.1277%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="75.6117%" y="581" width="0.3263%" height="15" fill="rgb(210,37,18)" fg:x="927" fg:w="4"/><text x="75.8617%" y="591.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="75.6117%" y="565" width="0.3263%" height="15" fill="rgb(224,184,40)" fg:x="927" fg:w="4"/><text x="75.8617%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="75.6117%" y="549" width="0.3263%" height="15" fill="rgb(236,39,29)" fg:x="927" fg:w="4"/><text x="75.8617%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="75.6117%" y="533" width="0.3263%" height="15" fill="rgb(232,48,39)" fg:x="927" fg:w="4"/><text x="75.8617%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="75.6117%" y="517" width="0.3263%" height="15" fill="rgb(236,34,42)" fg:x="927" fg:w="4"/><text x="75.8617%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="75.6117%" y="501" width="0.3263%" height="15" fill="rgb(243,106,37)" fg:x="927" fg:w="4"/><text x="75.8617%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="75.6117%" y="485" width="0.3263%" height="15" fill="rgb(218,96,6)" fg:x="927" fg:w="4"/><text x="75.8617%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="75.6117%" y="469" width="0.3263%" height="15" fill="rgb(235,130,12)" fg:x="927" fg:w="4"/><text x="75.8617%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="75.6117%" y="453" width="0.3263%" height="15" fill="rgb(231,95,0)" fg:x="927" fg:w="4"/><text x="75.8617%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.6933%" y="437" width="0.2447%" height="15" fill="rgb(228,12,23)" fg:x="928" fg:w="3"/><text x="75.9433%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.8564%" y="421" width="0.0816%" height="15" fill="rgb(216,12,1)" fg:x="930" fg:w="1"/><text x="76.1064%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.9380%" y="581" width="0.1631%" height="15" fill="rgb(219,59,3)" fg:x="931" fg:w="2"/><text x="76.1880%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.0196%" y="565" width="0.0816%" height="15" fill="rgb(215,208,46)" fg:x="932" fg:w="1"/><text x="76.2696%" y="575.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="76.0196%" y="549" width="0.0816%" height="15" fill="rgb(254,224,29)" fg:x="932" fg:w="1"/><text x="76.2696%" y="559.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.0196%" y="533" width="0.0816%" height="15" fill="rgb(232,14,29)" fg:x="932" fg:w="1"/><text x="76.2696%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="75.9380%" y="597" width="0.2447%" height="15" fill="rgb(208,45,52)" fg:x="931" fg:w="3"/><text x="76.1880%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.1011%" y="581" width="0.0816%" height="15" fill="rgb(234,191,28)" fg:x="933" fg:w="1"/><text x="76.3511%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1011%" y="565" width="0.0816%" height="15" fill="rgb(244,67,43)" fg:x="933" fg:w="1"/><text x="76.3511%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.1011%" y="549" width="0.0816%" height="15" fill="rgb(236,189,24)" fg:x="933" fg:w="1"/><text x="76.3511%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1011%" y="533" width="0.0816%" height="15" fill="rgb(239,214,33)" fg:x="933" fg:w="1"/><text x="76.3511%" y="543.50"></text></g><g><title>engine::users::model::username_to_key (4 samples, 0.33%)</title><rect x="75.9380%" y="613" width="0.3263%" height="15" fill="rgb(226,176,41)" fg:x="931" fg:w="4"/><text x="76.1880%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.1827%" y="597" width="0.0816%" height="15" fill="rgb(248,47,8)" fg:x="934" fg:w="1"/><text x="76.4327%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.1827%" y="581" width="0.0816%" height="15" fill="rgb(218,81,44)" fg:x="934" fg:w="1"/><text x="76.4327%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.2643%" y="597" width="0.0816%" height="15" fill="rgb(213,98,6)" fg:x="935" fg:w="1"/><text x="76.5143%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.2643%" y="581" width="0.0816%" height="15" fill="rgb(222,85,22)" fg:x="935" fg:w="1"/><text x="76.5143%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="76.2643%" y="565" width="0.0816%" height="15" fill="rgb(239,46,39)" fg:x="935" fg:w="1"/><text x="76.5143%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.2643%" y="549" width="0.0816%" height="15" fill="rgb(237,12,29)" fg:x="935" fg:w="1"/><text x="76.5143%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.2643%" y="533" width="0.0816%" height="15" fill="rgb(214,77,8)" fg:x="935" fg:w="1"/><text x="76.5143%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2643%" y="517" width="0.0816%" height="15" fill="rgb(217,168,37)" fg:x="935" fg:w="1"/><text x="76.5143%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2643%" y="501" width="0.0816%" height="15" fill="rgb(221,217,23)" fg:x="935" fg:w="1"/><text x="76.5143%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.2643%" y="485" width="0.0816%" height="15" fill="rgb(243,229,36)" fg:x="935" fg:w="1"/><text x="76.5143%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.2643%" y="469" width="0.0816%" height="15" fill="rgb(251,163,40)" fg:x="935" fg:w="1"/><text x="76.5143%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.2643%" y="453" width="0.0816%" height="15" fill="rgb(237,222,12)" fg:x="935" fg:w="1"/><text x="76.5143%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.2643%" y="437" width="0.0816%" height="15" fill="rgb(248,132,6)" fg:x="935" fg:w="1"/><text x="76.5143%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.2643%" y="421" width="0.0816%" height="15" fill="rgb(227,167,50)" fg:x="935" fg:w="1"/><text x="76.5143%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.2643%" y="405" width="0.0816%" height="15" fill="rgb(242,84,37)" fg:x="935" fg:w="1"/><text x="76.5143%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.2643%" y="389" width="0.0816%" height="15" fill="rgb(212,4,50)" fg:x="935" fg:w="1"/><text x="76.5143%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.2643%" y="373" width="0.0816%" height="15" fill="rgb(230,228,32)" fg:x="935" fg:w="1"/><text x="76.5143%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.2643%" y="357" width="0.0816%" height="15" fill="rgb(248,217,23)" fg:x="935" fg:w="1"/><text x="76.5143%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2643%" y="341" width="0.0816%" height="15" fill="rgb(238,197,32)" fg:x="935" fg:w="1"/><text x="76.5143%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="76.2643%" y="613" width="0.1631%" height="15" fill="rgb(236,106,1)" fg:x="935" fg:w="2"/><text x="76.5143%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.3458%" y="597" width="0.0816%" height="15" fill="rgb(219,228,13)" fg:x="936" fg:w="1"/><text x="76.5958%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.3458%" y="581" width="0.0816%" height="15" fill="rgb(238,30,35)" fg:x="936" fg:w="1"/><text x="76.5958%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="76.3458%" y="565" width="0.0816%" height="15" fill="rgb(236,70,23)" fg:x="936" fg:w="1"/><text x="76.5958%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3458%" y="549" width="0.0816%" height="15" fill="rgb(249,104,48)" fg:x="936" fg:w="1"/><text x="76.5958%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3458%" y="533" width="0.0816%" height="15" fill="rgb(254,117,50)" fg:x="936" fg:w="1"/><text x="76.5958%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3458%" y="517" width="0.0816%" height="15" fill="rgb(223,152,4)" fg:x="936" fg:w="1"/><text x="76.5958%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.3458%" y="501" width="0.0816%" height="15" fill="rgb(245,6,2)" fg:x="936" fg:w="1"/><text x="76.5958%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.3458%" y="485" width="0.0816%" height="15" fill="rgb(249,150,24)" fg:x="936" fg:w="1"/><text x="76.5958%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.3458%" y="469" width="0.0816%" height="15" fill="rgb(228,185,42)" fg:x="936" fg:w="1"/><text x="76.5958%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.3458%" y="453" width="0.0816%" height="15" fill="rgb(226,39,33)" fg:x="936" fg:w="1"/><text x="76.5958%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.3458%" y="437" width="0.0816%" height="15" fill="rgb(221,166,19)" fg:x="936" fg:w="1"/><text x="76.5958%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.3458%" y="421" width="0.0816%" height="15" fill="rgb(209,109,2)" fg:x="936" fg:w="1"/><text x="76.5958%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.3458%" y="405" width="0.0816%" height="15" fill="rgb(252,216,26)" fg:x="936" fg:w="1"/><text x="76.5958%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.3458%" y="389" width="0.0816%" height="15" fill="rgb(227,173,36)" fg:x="936" fg:w="1"/><text x="76.5958%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.3458%" y="373" width="0.0816%" height="15" fill="rgb(209,90,7)" fg:x="936" fg:w="1"/><text x="76.5958%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.3458%" y="357" width="0.0816%" height="15" fill="rgb(250,194,11)" fg:x="936" fg:w="1"/><text x="76.5958%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.3458%" y="341" width="0.0816%" height="15" fill="rgb(220,72,50)" fg:x="936" fg:w="1"/><text x="76.5958%" y="351.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="76.3458%" y="325" width="0.0816%" height="15" fill="rgb(222,106,48)" fg:x="936" fg:w="1"/><text x="76.5958%" y="335.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.3458%" y="309" width="0.0816%" height="15" fill="rgb(216,220,45)" fg:x="936" fg:w="1"/><text x="76.5958%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.5090%" y="565" width="0.0816%" height="15" fill="rgb(234,112,18)" fg:x="938" fg:w="1"/><text x="76.7590%" y="575.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="76.5090%" y="549" width="0.0816%" height="15" fill="rgb(206,179,9)" fg:x="938" fg:w="1"/><text x="76.7590%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.6721%" y="469" width="0.0816%" height="15" fill="rgb(215,115,40)" fg:x="940" fg:w="1"/><text x="76.9221%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.6721%" y="453" width="0.0816%" height="15" fill="rgb(222,69,34)" fg:x="940" fg:w="1"/><text x="76.9221%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.6721%" y="437" width="0.0816%" height="15" fill="rgb(209,161,10)" fg:x="940" fg:w="1"/><text x="76.9221%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.6721%" y="421" width="0.0816%" height="15" fill="rgb(217,6,38)" fg:x="940" fg:w="1"/><text x="76.9221%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="76.6721%" y="405" width="0.0816%" height="15" fill="rgb(229,229,48)" fg:x="940" fg:w="1"/><text x="76.9221%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6721%" y="389" width="0.0816%" height="15" fill="rgb(225,21,28)" fg:x="940" fg:w="1"/><text x="76.9221%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7537%" y="437" width="0.0816%" height="15" fill="rgb(206,33,13)" fg:x="941" fg:w="1"/><text x="77.0037%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="76.7537%" y="469" width="0.1631%" height="15" fill="rgb(242,178,17)" fg:x="941" fg:w="2"/><text x="77.0037%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.7537%" y="453" width="0.1631%" height="15" fill="rgb(220,162,5)" fg:x="941" fg:w="2"/><text x="77.0037%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.8352%" y="437" width="0.0816%" height="15" fill="rgb(210,33,43)" fg:x="942" fg:w="1"/><text x="77.0852%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.8352%" y="421" width="0.0816%" height="15" fill="rgb(216,116,54)" fg:x="942" fg:w="1"/><text x="77.0852%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.9168%" y="437" width="0.0816%" height="15" fill="rgb(249,92,24)" fg:x="943" fg:w="1"/><text x="77.1668%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="76.9984%" y="437" width="0.0816%" height="15" fill="rgb(231,189,14)" fg:x="944" fg:w="1"/><text x="77.2484%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9984%" y="421" width="0.0816%" height="15" fill="rgb(230,8,41)" fg:x="944" fg:w="1"/><text x="77.2484%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.9984%" y="405" width="0.0816%" height="15" fill="rgb(249,7,27)" fg:x="944" fg:w="1"/><text x="77.2484%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="76.9984%" y="389" width="0.0816%" height="15" fill="rgb(232,86,5)" fg:x="944" fg:w="1"/><text x="77.2484%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9984%" y="373" width="0.0816%" height="15" fill="rgb(224,175,18)" fg:x="944" fg:w="1"/><text x="77.2484%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.9984%" y="357" width="0.0816%" height="15" fill="rgb(220,129,12)" fg:x="944" fg:w="1"/><text x="77.2484%" y="367.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (7 samples, 0.57%)</title><rect x="76.5905%" y="517" width="0.5710%" height="15" fill="rgb(210,19,36)" fg:x="939" fg:w="7"/><text x="76.8405%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.57%)</title><rect x="76.5905%" y="501" width="0.5710%" height="15" fill="rgb(219,96,14)" fg:x="939" fg:w="7"/><text x="76.8405%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (7 samples, 0.57%)</title><rect x="76.5905%" y="485" width="0.5710%" height="15" fill="rgb(249,106,1)" fg:x="939" fg:w="7"/><text x="76.8405%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="76.9168%" y="469" width="0.2447%" height="15" fill="rgb(249,155,20)" fg:x="943" fg:w="3"/><text x="77.1668%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="76.9168%" y="453" width="0.2447%" height="15" fill="rgb(244,168,9)" fg:x="943" fg:w="3"/><text x="77.1668%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.0799%" y="437" width="0.0816%" height="15" fill="rgb(216,23,50)" fg:x="945" fg:w="1"/><text x="77.3299%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.65%)</title><rect x="76.5905%" y="565" width="0.6525%" height="15" fill="rgb(224,219,20)" fg:x="939" fg:w="8"/><text x="76.8405%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.65%)</title><rect x="76.5905%" y="549" width="0.6525%" height="15" fill="rgb(222,156,15)" fg:x="939" fg:w="8"/><text x="76.8405%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="76.5905%" y="533" width="0.6525%" height="15" fill="rgb(231,97,17)" fg:x="939" fg:w="8"/><text x="76.8405%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.1615%" y="517" width="0.0816%" height="15" fill="rgb(218,70,48)" fg:x="946" fg:w="1"/><text x="77.4115%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1615%" y="501" width="0.0816%" height="15" fill="rgb(212,196,52)" fg:x="946" fg:w="1"/><text x="77.4115%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="77.2431%" y="485" width="0.0816%" height="15" fill="rgb(243,203,18)" fg:x="947" fg:w="1"/><text x="77.4931%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.3246%" y="453" width="0.0816%" height="15" fill="rgb(252,125,41)" fg:x="948" fg:w="1"/><text x="77.5746%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3246%" y="437" width="0.0816%" height="15" fill="rgb(223,180,33)" fg:x="948" fg:w="1"/><text x="77.5746%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.3246%" y="469" width="0.1631%" height="15" fill="rgb(254,159,46)" fg:x="948" fg:w="2"/><text x="77.5746%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4062%" y="453" width="0.0816%" height="15" fill="rgb(254,38,10)" fg:x="949" fg:w="1"/><text x="77.6562%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="77.2431%" y="501" width="0.3263%" height="15" fill="rgb(208,217,32)" fg:x="947" fg:w="4"/><text x="77.4931%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.3246%" y="485" width="0.2447%" height="15" fill="rgb(221,120,13)" fg:x="948" fg:w="3"/><text x="77.5746%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.4878%" y="469" width="0.0816%" height="15" fill="rgb(246,54,52)" fg:x="950" fg:w="1"/><text x="77.7378%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="77.4878%" y="453" width="0.0816%" height="15" fill="rgb(242,34,25)" fg:x="950" fg:w="1"/><text x="77.7378%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.14%)</title><rect x="76.5090%" y="597" width="1.1419%" height="15" fill="rgb(247,209,9)" fg:x="938" fg:w="14"/><text x="76.7590%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.14%)</title><rect x="76.5090%" y="581" width="1.1419%" height="15" fill="rgb(228,71,26)" fg:x="938" fg:w="14"/><text x="76.7590%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.41%)</title><rect x="77.2431%" y="565" width="0.4078%" height="15" fill="rgb(222,145,49)" fg:x="947" fg:w="5"/><text x="77.4931%" y="575.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.41%)</title><rect x="77.2431%" y="549" width="0.4078%" height="15" fill="rgb(218,121,17)" fg:x="947" fg:w="5"/><text x="77.4931%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="77.2431%" y="533" width="0.4078%" height="15" fill="rgb(244,50,7)" fg:x="947" fg:w="5"/><text x="77.4931%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="77.2431%" y="517" width="0.4078%" height="15" fill="rgb(246,229,37)" fg:x="947" fg:w="5"/><text x="77.4931%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.5693%" y="501" width="0.0816%" height="15" fill="rgb(225,18,5)" fg:x="951" fg:w="1"/><text x="77.8193%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5693%" y="485" width="0.0816%" height="15" fill="rgb(213,204,8)" fg:x="951" fg:w="1"/><text x="77.8193%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6509%" y="581" width="0.0816%" height="15" fill="rgb(238,103,6)" fg:x="952" fg:w="1"/><text x="77.9009%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.7325%" y="581" width="0.0816%" height="15" fill="rgb(222,25,35)" fg:x="953" fg:w="1"/><text x="77.9825%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.7325%" y="565" width="0.0816%" height="15" fill="rgb(213,203,35)" fg:x="953" fg:w="1"/><text x="77.9825%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.7325%" y="549" width="0.0816%" height="15" fill="rgb(221,79,53)" fg:x="953" fg:w="1"/><text x="77.9825%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.7325%" y="533" width="0.0816%" height="15" fill="rgb(243,200,35)" fg:x="953" fg:w="1"/><text x="77.9825%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.7325%" y="517" width="0.0816%" height="15" fill="rgb(248,60,25)" fg:x="953" fg:w="1"/><text x="77.9825%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.7325%" y="501" width="0.0816%" height="15" fill="rgb(227,53,46)" fg:x="953" fg:w="1"/><text x="77.9825%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.7325%" y="485" width="0.0816%" height="15" fill="rgb(216,120,32)" fg:x="953" fg:w="1"/><text x="77.9825%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.7325%" y="469" width="0.0816%" height="15" fill="rgb(220,134,1)" fg:x="953" fg:w="1"/><text x="77.9825%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.7325%" y="453" width="0.0816%" height="15" fill="rgb(237,168,5)" fg:x="953" fg:w="1"/><text x="77.9825%" y="463.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (594 samples, 48.45%)</title><rect x="29.5269%" y="645" width="48.4502%" height="15" fill="rgb(231,100,33)" fg:x="362" fg:w="594"/><text x="29.7769%" y="655.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (594 samples, 48.45%)</title><rect x="29.5269%" y="629" width="48.4502%" height="15" fill="rgb(236,177,47)" fg:x="362" fg:w="594"/><text x="29.7769%" y="639.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::entry::EntryResolver::world (19 samples, 1.55%)</title><rect x="76.4274%" y="613" width="1.5498%" height="15" fill="rgb(235,7,49)" fg:x="937" fg:w="19"/><text x="76.6774%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (4 samples, 0.33%)</title><rect x="77.6509%" y="597" width="0.3263%" height="15" fill="rgb(232,119,22)" fg:x="952" fg:w="4"/><text x="77.9009%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="77.8140%" y="581" width="0.1631%" height="15" fill="rgb(254,73,53)" fg:x="954" fg:w="2"/><text x="78.0640%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="77.8140%" y="565" width="0.1631%" height="15" fill="rgb(251,35,20)" fg:x="954" fg:w="2"/><text x="78.0640%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="77.8140%" y="549" width="0.1631%" height="15" fill="rgb(241,119,20)" fg:x="954" fg:w="2"/><text x="78.0640%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="77.8140%" y="533" width="0.1631%" height="15" fill="rgb(207,102,14)" fg:x="954" fg:w="2"/><text x="78.0640%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.8140%" y="517" width="0.1631%" height="15" fill="rgb(248,201,50)" fg:x="954" fg:w="2"/><text x="78.0640%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.8956%" y="501" width="0.0816%" height="15" fill="rgb(222,185,44)" fg:x="955" fg:w="1"/><text x="78.1456%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8956%" y="485" width="0.0816%" height="15" fill="rgb(218,107,18)" fg:x="955" fg:w="1"/><text x="78.1456%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.8956%" y="469" width="0.0816%" height="15" fill="rgb(237,177,39)" fg:x="955" fg:w="1"/><text x="78.1456%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (957 samples, 78.06%)</title><rect x="0.0000%" y="693" width="78.0587%" height="15" fill="rgb(246,69,6)" fg:x="0" fg:w="957"/><text x="0.2500%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (957 samples, 78.06%)</title><rect x="0.0000%" y="677" width="78.0587%" height="15" fill="rgb(234,208,37)" fg:x="0" fg:w="957"/><text x="0.2500%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (957 samples, 78.06%)</title><rect x="0.0000%" y="661" width="78.0587%" height="15" fill="rgb(225,4,6)" fg:x="0" fg:w="957"/><text x="0.2500%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="77.9772%" y="645" width="0.0816%" height="15" fill="rgb(233,45,0)" fg:x="956" fg:w="1"/><text x="78.2272%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.9772%" y="629" width="0.0816%" height="15" fill="rgb(226,136,5)" fg:x="956" fg:w="1"/><text x="78.2272%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.9772%" y="613" width="0.0816%" height="15" fill="rgb(211,91,47)" fg:x="956" fg:w="1"/><text x="78.2272%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.9772%" y="597" width="0.0816%" height="15" fill="rgb(242,88,51)" fg:x="956" fg:w="1"/><text x="78.2272%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.1403%" y="597" width="0.0816%" height="15" fill="rgb(230,91,28)" fg:x="958" fg:w="1"/><text x="78.3903%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.2219%" y="533" width="0.0816%" height="15" fill="rgb(254,186,29)" fg:x="959" fg:w="1"/><text x="78.4719%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.2219%" y="549" width="0.1631%" height="15" fill="rgb(238,6,4)" fg:x="959" fg:w="2"/><text x="78.4719%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.3034%" y="533" width="0.0816%" height="15" fill="rgb(221,151,16)" fg:x="960" fg:w="1"/><text x="78.5534%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="78.2219%" y="565" width="0.2447%" height="15" fill="rgb(251,143,52)" fg:x="959" fg:w="3"/><text x="78.4719%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.3850%" y="549" width="0.0816%" height="15" fill="rgb(206,90,15)" fg:x="961" fg:w="1"/><text x="78.6350%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="78.1403%" y="645" width="0.4078%" height="15" fill="rgb(218,35,8)" fg:x="958" fg:w="5"/><text x="78.3903%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.41%)</title><rect x="78.1403%" y="629" width="0.4078%" height="15" fill="rgb(239,215,6)" fg:x="958" fg:w="5"/><text x="78.3903%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="78.1403%" y="613" width="0.4078%" height="15" fill="rgb(245,116,39)" fg:x="958" fg:w="5"/><text x="78.3903%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (4 samples, 0.33%)</title><rect x="78.2219%" y="597" width="0.3263%" height="15" fill="rgb(242,65,28)" fg:x="959" fg:w="4"/><text x="78.4719%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="78.2219%" y="581" width="0.3263%" height="15" fill="rgb(252,132,53)" fg:x="959" fg:w="4"/><text x="78.4719%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.4666%" y="565" width="0.0816%" height="15" fill="rgb(224,159,50)" fg:x="962" fg:w="1"/><text x="78.7166%" y="575.50"></text></g><g><title>__pthread_mutex_lock (1 samples, 0.08%)</title><rect x="78.7928%" y="485" width="0.0816%" height="15" fill="rgb(224,93,4)" fg:x="966" fg:w="1"/><text x="79.0428%" y="495.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (5 samples, 0.41%)</title><rect x="78.6297%" y="581" width="0.4078%" height="15" fill="rgb(208,81,34)" fg:x="964" fg:w="5"/><text x="78.8797%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.33%)</title><rect x="78.7113%" y="565" width="0.3263%" height="15" fill="rgb(233,92,54)" fg:x="965" fg:w="4"/><text x="78.9613%" y="575.50"></text></g><g><title>libloading::safe::Library::new (4 samples, 0.33%)</title><rect x="78.7113%" y="549" width="0.3263%" height="15" fill="rgb(237,21,14)" fg:x="965" fg:w="4"/><text x="78.9613%" y="559.50"></text></g><g><title>dlopen (4 samples, 0.33%)</title><rect x="78.7113%" y="533" width="0.3263%" height="15" fill="rgb(249,128,51)" fg:x="965" fg:w="4"/><text x="78.9613%" y="543.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="78.7928%" y="517" width="0.2447%" height="15" fill="rgb(223,129,24)" fg:x="966" fg:w="3"/><text x="79.0428%" y="527.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="78.7928%" y="501" width="0.2447%" height="15" fill="rgb(231,168,25)" fg:x="966" fg:w="3"/><text x="79.0428%" y="511.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="78.8744%" y="485" width="0.1631%" height="15" fill="rgb(224,39,20)" fg:x="967" fg:w="2"/><text x="79.1244%" y="495.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="78.8744%" y="469" width="0.1631%" height="15" fill="rgb(225,152,53)" fg:x="967" fg:w="2"/><text x="79.1244%" y="479.50"></text></g><g><title>engine::session::Session::initialize (6 samples, 0.49%)</title><rect x="78.6297%" y="597" width="0.4894%" height="15" fill="rgb(252,17,24)" fg:x="964" fg:w="6"/><text x="78.8797%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.0375%" y="581" width="0.0816%" height="15" fill="rgb(250,114,30)" fg:x="969" fg:w="1"/><text x="79.2875%" y="591.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (8 samples, 0.65%)</title><rect x="78.5481%" y="645" width="0.6525%" height="15" fill="rgb(229,5,4)" fg:x="963" fg:w="8"/><text x="78.7981%" y="655.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (8 samples, 0.65%)</title><rect x="78.5481%" y="629" width="0.6525%" height="15" fill="rgb(225,176,49)" fg:x="963" fg:w="8"/><text x="78.7981%" y="639.50"></text></g><g><title>engine::session::Session::new (8 samples, 0.65%)</title><rect x="78.5481%" y="613" width="0.6525%" height="15" fill="rgb(224,221,49)" fg:x="963" fg:w="8"/><text x="78.7981%" y="623.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="79.1191%" y="597" width="0.0816%" height="15" fill="rgb(253,169,27)" fg:x="970" fg:w="1"/><text x="79.3691%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="79.1191%" y="581" width="0.0816%" height="15" fill="rgb(211,206,16)" fg:x="970" fg:w="1"/><text x="79.3691%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.1191%" y="565" width="0.0816%" height="15" fill="rgb(244,87,35)" fg:x="970" fg:w="1"/><text x="79.3691%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.1191%" y="549" width="0.0816%" height="15" fill="rgb(246,28,10)" fg:x="970" fg:w="1"/><text x="79.3691%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.1191%" y="533" width="0.0816%" height="15" fill="rgb(229,12,44)" fg:x="970" fg:w="1"/><text x="79.3691%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.1191%" y="517" width="0.0816%" height="15" fill="rgb(210,145,37)" fg:x="970" fg:w="1"/><text x="79.3691%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.2007%" y="581" width="0.0816%" height="15" fill="rgb(227,112,52)" fg:x="971" fg:w="1"/><text x="79.4507%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="79.2007%" y="565" width="0.0816%" height="15" fill="rgb(238,155,34)" fg:x="971" fg:w="1"/><text x="79.4507%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="79.2007%" y="549" width="0.0816%" height="15" fill="rgb(239,226,36)" fg:x="971" fg:w="1"/><text x="79.4507%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.2822%" y="485" width="0.0816%" height="15" fill="rgb(230,16,23)" fg:x="972" fg:w="1"/><text x="79.5322%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.2822%" y="469" width="0.0816%" height="15" fill="rgb(236,171,36)" fg:x="972" fg:w="1"/><text x="79.5322%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.2822%" y="453" width="0.0816%" height="15" fill="rgb(221,22,14)" fg:x="972" fg:w="1"/><text x="79.5322%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.2822%" y="437" width="0.0816%" height="15" fill="rgb(242,43,11)" fg:x="972" fg:w="1"/><text x="79.5322%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="79.2822%" y="533" width="0.2447%" height="15" fill="rgb(232,69,23)" fg:x="972" fg:w="3"/><text x="79.5322%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.2822%" y="517" width="0.2447%" height="15" fill="rgb(216,180,54)" fg:x="972" fg:w="3"/><text x="79.5322%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.2822%" y="501" width="0.2447%" height="15" fill="rgb(216,5,24)" fg:x="972" fg:w="3"/><text x="79.5322%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.3638%" y="485" width="0.1631%" height="15" fill="rgb(225,89,9)" fg:x="973" fg:w="2"/><text x="79.6138%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="79.3638%" y="469" width="0.1631%" height="15" fill="rgb(243,75,33)" fg:x="973" fg:w="2"/><text x="79.6138%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.4454%" y="453" width="0.0816%" height="15" fill="rgb(247,141,45)" fg:x="974" fg:w="1"/><text x="79.6954%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="79.4454%" y="437" width="0.0816%" height="15" fill="rgb(232,177,36)" fg:x="974" fg:w="1"/><text x="79.6954%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="79.5269%" y="485" width="0.1631%" height="15" fill="rgb(219,125,36)" fg:x="975" fg:w="2"/><text x="79.7769%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.6085%" y="469" width="0.0816%" height="15" fill="rgb(227,94,9)" fg:x="976" fg:w="1"/><text x="79.8585%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.6085%" y="453" width="0.0816%" height="15" fill="rgb(240,34,52)" fg:x="976" fg:w="1"/><text x="79.8585%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.6900%" y="421" width="0.0816%" height="15" fill="rgb(216,45,12)" fg:x="977" fg:w="1"/><text x="79.9400%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.6900%" y="405" width="0.0816%" height="15" fill="rgb(246,21,19)" fg:x="977" fg:w="1"/><text x="79.9400%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.6900%" y="389" width="0.0816%" height="15" fill="rgb(213,98,42)" fg:x="977" fg:w="1"/><text x="79.9400%" y="399.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.65%)</title><rect x="79.2007%" y="629" width="0.6525%" height="15" fill="rgb(250,136,47)" fg:x="971" fg:w="8"/><text x="79.4507%" y="639.50"></text></g><g><title>engine::session::state::State::close (8 samples, 0.65%)</title><rect x="79.2007%" y="613" width="0.6525%" height="15" fill="rgb(251,124,27)" fg:x="971" fg:w="8"/><text x="79.4507%" y="623.50"></text></g><g><title>engine::session::state::State::flush_entities (8 samples, 0.65%)</title><rect x="79.2007%" y="597" width="0.6525%" height="15" fill="rgb(229,180,14)" fg:x="971" fg:w="8"/><text x="79.4507%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.57%)</title><rect x="79.2822%" y="581" width="0.5710%" height="15" fill="rgb(245,216,25)" fg:x="972" fg:w="7"/><text x="79.5322%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="79.2822%" y="565" width="0.5710%" height="15" fill="rgb(251,43,5)" fg:x="972" fg:w="7"/><text x="79.5322%" y="575.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (7 samples, 0.57%)</title><rect x="79.2822%" y="549" width="0.5710%" height="15" fill="rgb(250,128,24)" fg:x="972" fg:w="7"/><text x="79.5322%" y="559.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.33%)</title><rect x="79.5269%" y="533" width="0.3263%" height="15" fill="rgb(217,117,27)" fg:x="975" fg:w="4"/><text x="79.7769%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="79.5269%" y="517" width="0.3263%" height="15" fill="rgb(245,147,4)" fg:x="975" fg:w="4"/><text x="79.7769%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="79.5269%" y="501" width="0.3263%" height="15" fill="rgb(242,201,35)" fg:x="975" fg:w="4"/><text x="79.7769%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="79.6900%" y="485" width="0.1631%" height="15" fill="rgb(218,181,1)" fg:x="977" fg:w="2"/><text x="79.9400%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="79.6900%" y="469" width="0.1631%" height="15" fill="rgb(222,6,29)" fg:x="977" fg:w="2"/><text x="79.9400%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="79.6900%" y="453" width="0.1631%" height="15" fill="rgb(208,186,3)" fg:x="977" fg:w="2"/><text x="79.9400%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="79.6900%" y="437" width="0.1631%" height="15" fill="rgb(216,36,26)" fg:x="977" fg:w="2"/><text x="79.9400%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.7716%" y="421" width="0.0816%" height="15" fill="rgb(248,201,23)" fg:x="978" fg:w="1"/><text x="80.0216%" y="431.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="79.8532%" y="581" width="0.0816%" height="15" fill="rgb(251,170,31)" fg:x="979" fg:w="1"/><text x="80.1032%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="79.8532%" y="565" width="0.0816%" height="15" fill="rgb(207,110,25)" fg:x="979" fg:w="1"/><text x="80.1032%" y="575.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="79.8532%" y="549" width="0.0816%" height="15" fill="rgb(250,54,15)" fg:x="979" fg:w="1"/><text x="80.1032%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.8532%" y="533" width="0.0816%" height="15" fill="rgb(227,68,33)" fg:x="979" fg:w="1"/><text x="80.1032%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8532%" y="517" width="0.0816%" height="15" fill="rgb(238,34,41)" fg:x="979" fg:w="1"/><text x="80.1032%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="79.8532%" y="597" width="0.1631%" height="15" fill="rgb(220,11,15)" fg:x="979" fg:w="2"/><text x="80.1032%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="79.9347%" y="581" width="0.0816%" height="15" fill="rgb(246,111,35)" fg:x="980" fg:w="1"/><text x="80.1847%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.9347%" y="565" width="0.0816%" height="15" fill="rgb(209,88,53)" fg:x="980" fg:w="1"/><text x="80.1847%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.9347%" y="549" width="0.0816%" height="15" fill="rgb(231,185,47)" fg:x="980" fg:w="1"/><text x="80.1847%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="79.9347%" y="533" width="0.0816%" height="15" fill="rgb(233,154,1)" fg:x="980" fg:w="1"/><text x="80.1847%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="79.9347%" y="517" width="0.0816%" height="15" fill="rgb(225,15,46)" fg:x="980" fg:w="1"/><text x="80.1847%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.9347%" y="501" width="0.0816%" height="15" fill="rgb(211,135,41)" fg:x="980" fg:w="1"/><text x="80.1847%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.9347%" y="485" width="0.0816%" height="15" fill="rgb(208,54,0)" fg:x="980" fg:w="1"/><text x="80.1847%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.9347%" y="469" width="0.0816%" height="15" fill="rgb(244,136,14)" fg:x="980" fg:w="1"/><text x="80.1847%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.9347%" y="453" width="0.0816%" height="15" fill="rgb(241,56,14)" fg:x="980" fg:w="1"/><text x="80.1847%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.9347%" y="437" width="0.0816%" height="15" fill="rgb(205,80,24)" fg:x="980" fg:w="1"/><text x="80.1847%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.9347%" y="421" width="0.0816%" height="15" fill="rgb(220,57,4)" fg:x="980" fg:w="1"/><text x="80.1847%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.9347%" y="405" width="0.0816%" height="15" fill="rgb(226,193,50)" fg:x="980" fg:w="1"/><text x="80.1847%" y="415.50"></text></g><g><title>plugins_core::build::Build::carryable (3 samples, 0.24%)</title><rect x="79.8532%" y="629" width="0.2447%" height="15" fill="rgb(231,168,22)" fg:x="979" fg:w="3"/><text x="80.1032%" y="639.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="79.8532%" y="613" width="0.2447%" height="15" fill="rgb(254,215,14)" fg:x="979" fg:w="3"/><text x="80.1032%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.0163%" y="597" width="0.0816%" height="15" fill="rgb(211,115,16)" fg:x="981" fg:w="1"/><text x="80.2663%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.0163%" y="581" width="0.0816%" height="15" fill="rgb(236,210,16)" fg:x="981" fg:w="1"/><text x="80.2663%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.0163%" y="565" width="0.0816%" height="15" fill="rgb(221,94,12)" fg:x="981" fg:w="1"/><text x="80.2663%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.0163%" y="549" width="0.0816%" height="15" fill="rgb(235,218,49)" fg:x="981" fg:w="1"/><text x="80.2663%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0163%" y="533" width="0.0816%" height="15" fill="rgb(217,114,14)" fg:x="981" fg:w="1"/><text x="80.2663%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.0163%" y="517" width="0.0816%" height="15" fill="rgb(216,145,22)" fg:x="981" fg:w="1"/><text x="80.2663%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0163%" y="501" width="0.0816%" height="15" fill="rgb(217,112,39)" fg:x="981" fg:w="1"/><text x="80.2663%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.0163%" y="485" width="0.0816%" height="15" fill="rgb(225,85,32)" fg:x="981" fg:w="1"/><text x="80.2663%" y="495.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="80.1794%" y="597" width="0.0816%" height="15" fill="rgb(245,209,47)" fg:x="983" fg:w="1"/><text x="80.4294%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="80.1794%" y="581" width="0.0816%" height="15" fill="rgb(218,220,15)" fg:x="983" fg:w="1"/><text x="80.4294%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.1794%" y="565" width="0.0816%" height="15" fill="rgb(222,202,31)" fg:x="983" fg:w="1"/><text x="80.4294%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.1794%" y="549" width="0.0816%" height="15" fill="rgb(243,203,4)" fg:x="983" fg:w="1"/><text x="80.4294%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.1794%" y="533" width="0.0816%" height="15" fill="rgb(237,92,17)" fg:x="983" fg:w="1"/><text x="80.4294%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.1794%" y="517" width="0.0816%" height="15" fill="rgb(231,119,7)" fg:x="983" fg:w="1"/><text x="80.4294%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.1794%" y="501" width="0.0816%" height="15" fill="rgb(237,82,41)" fg:x="983" fg:w="1"/><text x="80.4294%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.1794%" y="485" width="0.0816%" height="15" fill="rgb(226,81,48)" fg:x="983" fg:w="1"/><text x="80.4294%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.1794%" y="469" width="0.0816%" height="15" fill="rgb(234,70,51)" fg:x="983" fg:w="1"/><text x="80.4294%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.1794%" y="453" width="0.0816%" height="15" fill="rgb(251,86,4)" fg:x="983" fg:w="1"/><text x="80.4294%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.1794%" y="437" width="0.0816%" height="15" fill="rgb(244,144,28)" fg:x="983" fg:w="1"/><text x="80.4294%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.1794%" y="421" width="0.0816%" height="15" fill="rgb(232,161,39)" fg:x="983" fg:w="1"/><text x="80.4294%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.1794%" y="405" width="0.0816%" height="15" fill="rgb(247,34,51)" fg:x="983" fg:w="1"/><text x="80.4294%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.1794%" y="389" width="0.0816%" height="15" fill="rgb(225,132,2)" fg:x="983" fg:w="1"/><text x="80.4294%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1794%" y="373" width="0.0816%" height="15" fill="rgb(209,159,44)" fg:x="983" fg:w="1"/><text x="80.4294%" y="383.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="80.0979%" y="629" width="0.2447%" height="15" fill="rgb(251,214,1)" fg:x="982" fg:w="3"/><text x="80.3479%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="80.0979%" y="613" width="0.2447%" height="15" fill="rgb(247,84,47)" fg:x="982" fg:w="3"/><text x="80.3479%" y="623.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="80.2610%" y="597" width="0.0816%" height="15" fill="rgb(240,111,43)" fg:x="984" fg:w="1"/><text x="80.5110%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.2610%" y="581" width="0.0816%" height="15" fill="rgb(215,214,35)" fg:x="984" fg:w="1"/><text x="80.5110%" y="591.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="80.2610%" y="565" width="0.0816%" height="15" fill="rgb(248,207,23)" fg:x="984" fg:w="1"/><text x="80.5110%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.2610%" y="549" width="0.0816%" height="15" fill="rgb(214,186,4)" fg:x="984" fg:w="1"/><text x="80.5110%" y="559.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2610%" y="533" width="0.0816%" height="15" fill="rgb(220,133,22)" fg:x="984" fg:w="1"/><text x="80.5110%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.2610%" y="517" width="0.0816%" height="15" fill="rgb(239,134,19)" fg:x="984" fg:w="1"/><text x="80.5110%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.3426%" y="533" width="0.0816%" height="15" fill="rgb(250,140,9)" fg:x="985" fg:w="1"/><text x="80.5926%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="80.3426%" y="517" width="0.0816%" height="15" fill="rgb(225,59,14)" fg:x="985" fg:w="1"/><text x="80.5926%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="80.3426%" y="501" width="0.0816%" height="15" fill="rgb(214,152,51)" fg:x="985" fg:w="1"/><text x="80.5926%" y="511.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="80.3426%" y="485" width="0.0816%" height="15" fill="rgb(251,227,43)" fg:x="985" fg:w="1"/><text x="80.5926%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3426%" y="469" width="0.0816%" height="15" fill="rgb(241,96,17)" fg:x="985" fg:w="1"/><text x="80.5926%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.3426%" y="453" width="0.0816%" height="15" fill="rgb(234,198,43)" fg:x="985" fg:w="1"/><text x="80.5926%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3426%" y="437" width="0.0816%" height="15" fill="rgb(220,108,29)" fg:x="985" fg:w="1"/><text x="80.5926%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="80.3426%" y="613" width="0.1631%" height="15" fill="rgb(226,163,33)" fg:x="985" fg:w="2"/><text x="80.5926%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="80.3426%" y="597" width="0.1631%" height="15" fill="rgb(205,194,45)" fg:x="985" fg:w="2"/><text x="80.5926%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="80.3426%" y="581" width="0.1631%" height="15" fill="rgb(206,143,44)" fg:x="985" fg:w="2"/><text x="80.5926%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="80.3426%" y="565" width="0.1631%" height="15" fill="rgb(236,136,36)" fg:x="985" fg:w="2"/><text x="80.5926%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="80.3426%" y="549" width="0.1631%" height="15" fill="rgb(249,172,42)" fg:x="985" fg:w="2"/><text x="80.5926%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="80.4241%" y="533" width="0.0816%" height="15" fill="rgb(216,139,23)" fg:x="986" fg:w="1"/><text x="80.6741%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="80.4241%" y="517" width="0.0816%" height="15" fill="rgb(207,166,20)" fg:x="986" fg:w="1"/><text x="80.6741%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.4241%" y="501" width="0.0816%" height="15" fill="rgb(210,209,22)" fg:x="986" fg:w="1"/><text x="80.6741%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.4241%" y="485" width="0.0816%" height="15" fill="rgb(232,118,20)" fg:x="986" fg:w="1"/><text x="80.6741%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.4241%" y="469" width="0.0816%" height="15" fill="rgb(238,113,42)" fg:x="986" fg:w="1"/><text x="80.6741%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4241%" y="453" width="0.0816%" height="15" fill="rgb(231,42,5)" fg:x="986" fg:w="1"/><text x="80.6741%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.4241%" y="437" width="0.0816%" height="15" fill="rgb(243,166,24)" fg:x="986" fg:w="1"/><text x="80.6741%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4241%" y="421" width="0.0816%" height="15" fill="rgb(237,226,12)" fg:x="986" fg:w="1"/><text x="80.6741%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.4241%" y="405" width="0.0816%" height="15" fill="rgb(229,133,24)" fg:x="986" fg:w="1"/><text x="80.6741%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4241%" y="389" width="0.0816%" height="15" fill="rgb(238,33,43)" fg:x="986" fg:w="1"/><text x="80.6741%" y="399.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="80.5057%" y="597" width="0.0816%" height="15" fill="rgb(227,59,38)" fg:x="987" fg:w="1"/><text x="80.7557%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.5057%" y="581" width="0.0816%" height="15" fill="rgb(230,97,0)" fg:x="987" fg:w="1"/><text x="80.7557%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.5057%" y="565" width="0.0816%" height="15" fill="rgb(250,173,50)" fg:x="987" fg:w="1"/><text x="80.7557%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.5057%" y="549" width="0.0816%" height="15" fill="rgb(240,15,50)" fg:x="987" fg:w="1"/><text x="80.7557%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.5057%" y="533" width="0.0816%" height="15" fill="rgb(221,93,22)" fg:x="987" fg:w="1"/><text x="80.7557%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.5057%" y="517" width="0.0816%" height="15" fill="rgb(245,180,53)" fg:x="987" fg:w="1"/><text x="80.7557%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.5057%" y="501" width="0.0816%" height="15" fill="rgb(231,88,51)" fg:x="987" fg:w="1"/><text x="80.7557%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.5057%" y="485" width="0.0816%" height="15" fill="rgb(240,58,21)" fg:x="987" fg:w="1"/><text x="80.7557%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.5057%" y="469" width="0.0816%" height="15" fill="rgb(237,21,10)" fg:x="987" fg:w="1"/><text x="80.7557%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.5057%" y="453" width="0.0816%" height="15" fill="rgb(218,43,11)" fg:x="987" fg:w="1"/><text x="80.7557%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.5057%" y="437" width="0.0816%" height="15" fill="rgb(218,221,29)" fg:x="987" fg:w="1"/><text x="80.7557%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.5057%" y="421" width="0.0816%" height="15" fill="rgb(214,118,42)" fg:x="987" fg:w="1"/><text x="80.7557%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5057%" y="405" width="0.0816%" height="15" fill="rgb(251,200,26)" fg:x="987" fg:w="1"/><text x="80.7557%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.5873%" y="469" width="0.0816%" height="15" fill="rgb(237,101,39)" fg:x="988" fg:w="1"/><text x="80.8373%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="80.5873%" y="485" width="0.1631%" height="15" fill="rgb(251,117,11)" fg:x="988" fg:w="2"/><text x="80.8373%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.6688%" y="469" width="0.0816%" height="15" fill="rgb(216,223,23)" fg:x="989" fg:w="1"/><text x="80.9188%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.6688%" y="453" width="0.0816%" height="15" fill="rgb(251,54,12)" fg:x="989" fg:w="1"/><text x="80.9188%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.9135%" y="469" width="0.0816%" height="15" fill="rgb(254,176,54)" fg:x="992" fg:w="1"/><text x="81.1635%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.9135%" y="453" width="0.0816%" height="15" fill="rgb(210,32,8)" fg:x="992" fg:w="1"/><text x="81.1635%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.9135%" y="437" width="0.0816%" height="15" fill="rgb(235,52,38)" fg:x="992" fg:w="1"/><text x="81.1635%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.9135%" y="421" width="0.0816%" height="15" fill="rgb(231,4,44)" fg:x="992" fg:w="1"/><text x="81.1635%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.9135%" y="405" width="0.0816%" height="15" fill="rgb(249,2,32)" fg:x="992" fg:w="1"/><text x="81.1635%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.9135%" y="389" width="0.0816%" height="15" fill="rgb(224,65,26)" fg:x="992" fg:w="1"/><text x="81.1635%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.9135%" y="373" width="0.0816%" height="15" fill="rgb(250,73,40)" fg:x="992" fg:w="1"/><text x="81.1635%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="80.5873%" y="501" width="0.5710%" height="15" fill="rgb(253,177,16)" fg:x="988" fg:w="7"/><text x="80.8373%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="80.7504%" y="485" width="0.4078%" height="15" fill="rgb(217,32,34)" fg:x="990" fg:w="5"/><text x="81.0004%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="80.9951%" y="469" width="0.1631%" height="15" fill="rgb(212,7,10)" fg:x="993" fg:w="2"/><text x="81.2451%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="80.9951%" y="453" width="0.1631%" height="15" fill="rgb(245,89,8)" fg:x="993" fg:w="2"/><text x="81.2451%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="80.9951%" y="437" width="0.1631%" height="15" fill="rgb(237,16,53)" fg:x="993" fg:w="2"/><text x="81.2451%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="80.9951%" y="421" width="0.1631%" height="15" fill="rgb(250,204,30)" fg:x="993" fg:w="2"/><text x="81.2451%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.0767%" y="405" width="0.0816%" height="15" fill="rgb(208,77,27)" fg:x="994" fg:w="1"/><text x="81.3267%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.0767%" y="389" width="0.0816%" height="15" fill="rgb(250,204,28)" fg:x="994" fg:w="1"/><text x="81.3267%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.1582%" y="453" width="0.0816%" height="15" fill="rgb(244,63,21)" fg:x="995" fg:w="1"/><text x="81.4082%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="81.1582%" y="501" width="0.1631%" height="15" fill="rgb(236,85,44)" fg:x="995" fg:w="2"/><text x="81.4082%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="81.1582%" y="485" width="0.1631%" height="15" fill="rgb(215,98,4)" fg:x="995" fg:w="2"/><text x="81.4082%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="81.1582%" y="469" width="0.1631%" height="15" fill="rgb(235,38,11)" fg:x="995" fg:w="2"/><text x="81.4082%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.2398%" y="453" width="0.0816%" height="15" fill="rgb(254,186,25)" fg:x="996" fg:w="1"/><text x="81.4898%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.2398%" y="437" width="0.0816%" height="15" fill="rgb(225,55,31)" fg:x="996" fg:w="1"/><text x="81.4898%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.2398%" y="421" width="0.0816%" height="15" fill="rgb(211,15,21)" fg:x="996" fg:w="1"/><text x="81.4898%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.2398%" y="405" width="0.0816%" height="15" fill="rgb(215,187,41)" fg:x="996" fg:w="1"/><text x="81.4898%" y="415.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="81.3214%" y="485" width="0.0816%" height="15" fill="rgb(248,69,32)" fg:x="997" fg:w="1"/><text x="81.5714%" y="495.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="81.3214%" y="469" width="0.0816%" height="15" fill="rgb(252,102,52)" fg:x="997" fg:w="1"/><text x="81.5714%" y="479.50"></text></g><g><title>treediff::tools::record::mk (1 samples, 0.08%)</title><rect x="81.3214%" y="453" width="0.0816%" height="15" fill="rgb(253,140,32)" fg:x="997" fg:w="1"/><text x="81.5714%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4029%" y="453" width="0.0816%" height="15" fill="rgb(216,56,42)" fg:x="998" fg:w="1"/><text x="81.6529%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4845%" y="453" width="0.0816%" height="15" fill="rgb(216,184,14)" fg:x="999" fg:w="1"/><text x="81.7345%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.4845%" y="437" width="0.0816%" height="15" fill="rgb(237,187,27)" fg:x="999" fg:w="1"/><text x="81.7345%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4845%" y="421" width="0.0816%" height="15" fill="rgb(219,65,3)" fg:x="999" fg:w="1"/><text x="81.7345%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4845%" y="405" width="0.0816%" height="15" fill="rgb(245,83,25)" fg:x="999" fg:w="1"/><text x="81.7345%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="81.4845%" y="389" width="0.0816%" height="15" fill="rgb(214,205,45)" fg:x="999" fg:w="1"/><text x="81.7345%" y="399.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.14%)</title><rect x="80.5057%" y="613" width="1.1419%" height="15" fill="rgb(241,20,18)" fg:x="987" fg:w="14"/><text x="80.7557%" y="623.50"></text></g><g><title>engine::session::Session::save_changes (13 samples, 1.06%)</title><rect x="80.5873%" y="597" width="1.0604%" height="15" fill="rgb(232,163,23)" fg:x="988" fg:w="13"/><text x="80.8373%" y="607.50"></text></g><g><title>engine::session::state::State::close (13 samples, 1.06%)</title><rect x="80.5873%" y="581" width="1.0604%" height="15" fill="rgb(214,5,46)" fg:x="988" fg:w="13"/><text x="80.8373%" y="591.50"></text></g><g><title>engine::session::state::State::flush_entities (13 samples, 1.06%)</title><rect x="80.5873%" y="565" width="1.0604%" height="15" fill="rgb(229,78,17)" fg:x="988" fg:w="13"/><text x="80.8373%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (13 samples, 1.06%)</title><rect x="80.5873%" y="549" width="1.0604%" height="15" fill="rgb(248,89,10)" fg:x="988" fg:w="13"/><text x="80.8373%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.06%)</title><rect x="80.5873%" y="533" width="1.0604%" height="15" fill="rgb(248,54,15)" fg:x="988" fg:w="13"/><text x="80.8373%" y="543.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (13 samples, 1.06%)</title><rect x="80.5873%" y="517" width="1.0604%" height="15" fill="rgb(223,116,6)" fg:x="988" fg:w="13"/><text x="80.8373%" y="527.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.33%)</title><rect x="81.3214%" y="501" width="0.3263%" height="15" fill="rgb(205,125,38)" fg:x="997" fg:w="4"/><text x="81.5714%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="81.4029%" y="485" width="0.2447%" height="15" fill="rgb(251,78,38)" fg:x="998" fg:w="3"/><text x="81.6529%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="81.4029%" y="469" width="0.2447%" height="15" fill="rgb(253,78,28)" fg:x="998" fg:w="3"/><text x="81.6529%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="81.5661%" y="453" width="0.0816%" height="15" fill="rgb(209,120,3)" fg:x="1000" fg:w="1"/><text x="81.8161%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="81.5661%" y="437" width="0.0816%" height="15" fill="rgb(238,229,9)" fg:x="1000" fg:w="1"/><text x="81.8161%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.5661%" y="421" width="0.0816%" height="15" fill="rgb(253,159,18)" fg:x="1000" fg:w="1"/><text x="81.8161%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.5661%" y="405" width="0.0816%" height="15" fill="rgb(244,42,34)" fg:x="1000" fg:w="1"/><text x="81.8161%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.5661%" y="389" width="0.0816%" height="15" fill="rgb(224,8,7)" fg:x="1000" fg:w="1"/><text x="81.8161%" y="399.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="81.6476%" y="613" width="0.0816%" height="15" fill="rgb(210,201,45)" fg:x="1001" fg:w="1"/><text x="81.8976%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="81.6476%" y="597" width="0.0816%" height="15" fill="rgb(252,185,21)" fg:x="1001" fg:w="1"/><text x="81.8976%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="81.6476%" y="581" width="0.0816%" height="15" fill="rgb(223,131,1)" fg:x="1001" fg:w="1"/><text x="81.8976%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="81.6476%" y="565" width="0.0816%" height="15" fill="rgb(245,141,16)" fg:x="1001" fg:w="1"/><text x="81.8976%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.6476%" y="549" width="0.0816%" height="15" fill="rgb(229,55,45)" fg:x="1001" fg:w="1"/><text x="81.8976%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.6476%" y="533" width="0.0816%" height="15" fill="rgb(208,92,15)" fg:x="1001" fg:w="1"/><text x="81.8976%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="81.6476%" y="517" width="0.0816%" height="15" fill="rgb(234,185,47)" fg:x="1001" fg:w="1"/><text x="81.8976%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.6476%" y="501" width="0.0816%" height="15" fill="rgb(253,104,50)" fg:x="1001" fg:w="1"/><text x="81.8976%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6476%" y="485" width="0.0816%" height="15" fill="rgb(205,70,7)" fg:x="1001" fg:w="1"/><text x="81.8976%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6476%" y="469" width="0.0816%" height="15" fill="rgb(240,178,43)" fg:x="1001" fg:w="1"/><text x="81.8976%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.6476%" y="453" width="0.0816%" height="15" fill="rgb(214,112,2)" fg:x="1001" fg:w="1"/><text x="81.8976%" y="463.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="81.7292%" y="597" width="0.0816%" height="15" fill="rgb(206,46,17)" fg:x="1002" fg:w="1"/><text x="81.9792%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="81.7292%" y="581" width="0.0816%" height="15" fill="rgb(225,220,16)" fg:x="1002" fg:w="1"/><text x="81.9792%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.7292%" y="565" width="0.0816%" height="15" fill="rgb(238,65,40)" fg:x="1002" fg:w="1"/><text x="81.9792%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="81.7292%" y="549" width="0.0816%" height="15" fill="rgb(230,151,21)" fg:x="1002" fg:w="1"/><text x="81.9792%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.7292%" y="533" width="0.0816%" height="15" fill="rgb(218,58,49)" fg:x="1002" fg:w="1"/><text x="81.9792%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.7292%" y="517" width="0.0816%" height="15" fill="rgb(219,179,14)" fg:x="1002" fg:w="1"/><text x="81.9792%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.7292%" y="501" width="0.0816%" height="15" fill="rgb(223,72,1)" fg:x="1002" fg:w="1"/><text x="81.9792%" y="511.50"></text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="81.7292%" y="613" width="0.2447%" height="15" fill="rgb(238,126,10)" fg:x="1002" fg:w="3"/><text x="81.9792%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="81.8108%" y="597" width="0.1631%" height="15" fill="rgb(224,206,38)" fg:x="1003" fg:w="2"/><text x="82.0608%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="81.8923%" y="581" width="0.0816%" height="15" fill="rgb(212,201,54)" fg:x="1004" fg:w="1"/><text x="82.1423%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.8923%" y="565" width="0.0816%" height="15" fill="rgb(218,154,48)" fg:x="1004" fg:w="1"/><text x="82.1423%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.8923%" y="549" width="0.0816%" height="15" fill="rgb(232,93,24)" fg:x="1004" fg:w="1"/><text x="82.1423%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="81.8923%" y="533" width="0.0816%" height="15" fill="rgb(245,30,21)" fg:x="1004" fg:w="1"/><text x="82.1423%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.8923%" y="517" width="0.0816%" height="15" fill="rgb(242,148,29)" fg:x="1004" fg:w="1"/><text x="82.1423%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.8923%" y="501" width="0.0816%" height="15" fill="rgb(244,153,54)" fg:x="1004" fg:w="1"/><text x="82.1423%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.8923%" y="485" width="0.0816%" height="15" fill="rgb(252,87,22)" fg:x="1004" fg:w="1"/><text x="82.1423%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.8923%" y="469" width="0.0816%" height="15" fill="rgb(210,51,29)" fg:x="1004" fg:w="1"/><text x="82.1423%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.8923%" y="453" width="0.0816%" height="15" fill="rgb(242,136,47)" fg:x="1004" fg:w="1"/><text x="82.1423%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.8923%" y="437" width="0.0816%" height="15" fill="rgb(238,68,4)" fg:x="1004" fg:w="1"/><text x="82.1423%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.8923%" y="421" width="0.0816%" height="15" fill="rgb(242,161,30)" fg:x="1004" fg:w="1"/><text x="82.1423%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.8923%" y="405" width="0.0816%" height="15" fill="rgb(218,58,44)" fg:x="1004" fg:w="1"/><text x="82.1423%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.8923%" y="389" width="0.0816%" height="15" fill="rgb(252,125,32)" fg:x="1004" fg:w="1"/><text x="82.1423%" y="399.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (22 samples, 1.79%)</title><rect x="80.3426%" y="629" width="1.7945%" height="15" fill="rgb(219,178,0)" fg:x="985" fg:w="22"/><text x="80.5926%" y="639.50">p..</text></g><g><title>plugins_core::build::Build::wearing (2 samples, 0.16%)</title><rect x="81.9739%" y="613" width="0.1631%" height="15" fill="rgb(213,152,7)" fg:x="1005" fg:w="2"/><text x="82.2239%" y="623.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="81.9739%" y="597" width="0.1631%" height="15" fill="rgb(249,109,34)" fg:x="1005" fg:w="2"/><text x="82.2239%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="82.0555%" y="581" width="0.0816%" height="15" fill="rgb(232,96,21)" fg:x="1006" fg:w="1"/><text x="82.3055%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="82.0555%" y="565" width="0.0816%" height="15" fill="rgb(228,27,39)" fg:x="1006" fg:w="1"/><text x="82.3055%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="82.0555%" y="549" width="0.0816%" height="15" fill="rgb(211,182,52)" fg:x="1006" fg:w="1"/><text x="82.3055%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.0555%" y="533" width="0.0816%" height="15" fill="rgb(234,178,38)" fg:x="1006" fg:w="1"/><text x="82.3055%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.0555%" y="517" width="0.0816%" height="15" fill="rgb(221,111,3)" fg:x="1006" fg:w="1"/><text x="82.3055%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.0555%" y="501" width="0.0816%" height="15" fill="rgb(228,175,21)" fg:x="1006" fg:w="1"/><text x="82.3055%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.0555%" y="485" width="0.0816%" height="15" fill="rgb(228,174,43)" fg:x="1006" fg:w="1"/><text x="82.3055%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="82.1370%" y="629" width="0.0816%" height="15" fill="rgb(211,191,0)" fg:x="1007" fg:w="1"/><text x="82.3870%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="82.1370%" y="613" width="0.0816%" height="15" fill="rgb(253,117,3)" fg:x="1007" fg:w="1"/><text x="82.3870%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="82.1370%" y="597" width="0.0816%" height="15" fill="rgb(241,127,19)" fg:x="1007" fg:w="1"/><text x="82.3870%" y="607.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="82.1370%" y="581" width="0.0816%" height="15" fill="rgb(218,103,12)" fg:x="1007" fg:w="1"/><text x="82.3870%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="82.2186%" y="597" width="0.0816%" height="15" fill="rgb(236,214,43)" fg:x="1008" fg:w="1"/><text x="82.4686%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="82.2186%" y="581" width="0.0816%" height="15" fill="rgb(244,144,19)" fg:x="1008" fg:w="1"/><text x="82.4686%" y="591.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="82.2186%" y="565" width="0.0816%" height="15" fill="rgb(246,188,10)" fg:x="1008" fg:w="1"/><text x="82.4686%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="82.2186%" y="549" width="0.0816%" height="15" fill="rgb(212,193,33)" fg:x="1008" fg:w="1"/><text x="82.4686%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="82.2186%" y="533" width="0.0816%" height="15" fill="rgb(241,51,29)" fg:x="1008" fg:w="1"/><text x="82.4686%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="82.2186%" y="517" width="0.0816%" height="15" fill="rgb(211,58,19)" fg:x="1008" fg:w="1"/><text x="82.4686%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="82.2186%" y="501" width="0.0816%" height="15" fill="rgb(229,111,26)" fg:x="1008" fg:w="1"/><text x="82.4686%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.2186%" y="485" width="0.0816%" height="15" fill="rgb(213,115,40)" fg:x="1008" fg:w="1"/><text x="82.4686%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.2186%" y="469" width="0.0816%" height="15" fill="rgb(209,56,44)" fg:x="1008" fg:w="1"/><text x="82.4686%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.2186%" y="453" width="0.0816%" height="15" fill="rgb(230,108,32)" fg:x="1008" fg:w="1"/><text x="82.4686%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.2186%" y="437" width="0.0816%" height="15" fill="rgb(216,165,31)" fg:x="1008" fg:w="1"/><text x="82.4686%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.2186%" y="421" width="0.0816%" height="15" fill="rgb(218,122,21)" fg:x="1008" fg:w="1"/><text x="82.4686%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.2186%" y="405" width="0.0816%" height="15" fill="rgb(223,224,47)" fg:x="1008" fg:w="1"/><text x="82.4686%" y="415.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="82.2186%" y="629" width="0.1631%" height="15" fill="rgb(238,102,44)" fg:x="1008" fg:w="2"/><text x="82.4686%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="82.2186%" y="613" width="0.1631%" height="15" fill="rgb(236,46,40)" fg:x="1008" fg:w="2"/><text x="82.4686%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="82.3002%" y="597" width="0.0816%" height="15" fill="rgb(247,202,50)" fg:x="1009" fg:w="1"/><text x="82.5502%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="82.3002%" y="581" width="0.0816%" height="15" fill="rgb(209,99,20)" fg:x="1009" fg:w="1"/><text x="82.5502%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="82.4633%" y="565" width="0.2447%" height="15" fill="rgb(252,27,34)" fg:x="1011" fg:w="3"/><text x="82.7133%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="82.4633%" y="549" width="0.2447%" height="15" fill="rgb(215,206,23)" fg:x="1011" fg:w="3"/><text x="82.7133%" y="559.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.24%)</title><rect x="82.4633%" y="533" width="0.2447%" height="15" fill="rgb(212,135,36)" fg:x="1011" fg:w="3"/><text x="82.7133%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (3 samples, 0.24%)</title><rect x="82.4633%" y="517" width="0.2447%" height="15" fill="rgb(240,189,1)" fg:x="1011" fg:w="3"/><text x="82.7133%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.4633%" y="501" width="0.2447%" height="15" fill="rgb(242,56,20)" fg:x="1011" fg:w="3"/><text x="82.7133%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="82.4633%" y="485" width="0.2447%" height="15" fill="rgb(247,132,33)" fg:x="1011" fg:w="3"/><text x="82.7133%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="82.4633%" y="469" width="0.2447%" height="15" fill="rgb(208,149,11)" fg:x="1011" fg:w="3"/><text x="82.7133%" y="479.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="82.4633%" y="453" width="0.2447%" height="15" fill="rgb(211,33,11)" fg:x="1011" fg:w="3"/><text x="82.7133%" y="463.50"></text></g><g><title>plugins_core::build::Build::into_entry (4 samples, 0.33%)</title><rect x="82.4633%" y="613" width="0.3263%" height="15" fill="rgb(221,29,38)" fg:x="1011" fg:w="4"/><text x="82.7133%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.33%)</title><rect x="82.4633%" y="597" width="0.3263%" height="15" fill="rgb(206,182,49)" fg:x="1011" fg:w="4"/><text x="82.7133%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.33%)</title><rect x="82.4633%" y="581" width="0.3263%" height="15" fill="rgb(216,140,1)" fg:x="1011" fg:w="4"/><text x="82.7133%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.7080%" y="565" width="0.0816%" height="15" fill="rgb(232,57,40)" fg:x="1014" fg:w="1"/><text x="82.9580%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.7080%" y="549" width="0.0816%" height="15" fill="rgb(224,186,18)" fg:x="1014" fg:w="1"/><text x="82.9580%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.7080%" y="533" width="0.0816%" height="15" fill="rgb(215,121,11)" fg:x="1014" fg:w="1"/><text x="82.9580%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.7080%" y="517" width="0.0816%" height="15" fill="rgb(245,147,10)" fg:x="1014" fg:w="1"/><text x="82.9580%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.7080%" y="501" width="0.0816%" height="15" fill="rgb(238,153,13)" fg:x="1014" fg:w="1"/><text x="82.9580%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (45 samples, 3.67%)</title><rect x="79.2007%" y="645" width="3.6705%" height="15" fill="rgb(233,108,0)" fg:x="971" fg:w="45"/><text x="79.4507%" y="655.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (6 samples, 0.49%)</title><rect x="82.3817%" y="629" width="0.4894%" height="15" fill="rgb(212,157,17)" fg:x="1010" fg:w="6"/><text x="82.6317%" y="639.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="82.7896%" y="613" width="0.0816%" height="15" fill="rgb(225,213,38)" fg:x="1015" fg:w="1"/><text x="83.0396%" y="623.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="82.7896%" y="597" width="0.0816%" height="15" fill="rgb(248,16,11)" fg:x="1015" fg:w="1"/><text x="83.0396%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7896%" y="581" width="0.0816%" height="15" fill="rgb(241,33,4)" fg:x="1015" fg:w="1"/><text x="83.0396%" y="591.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="83.0343%" y="485" width="0.0816%" height="15" fill="rgb(222,26,43)" fg:x="1018" fg:w="1"/><text x="83.2843%" y="495.50"></text></g><g><title>ryu::d2s::d2d (1 samples, 0.08%)</title><rect x="83.0343%" y="469" width="0.0816%" height="15" fill="rgb(243,29,36)" fg:x="1018" fg:w="1"/><text x="83.2843%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.1158%" y="485" width="0.0816%" height="15" fill="rgb(241,9,27)" fg:x="1019" fg:w="1"/><text x="83.3658%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.1158%" y="469" width="0.0816%" height="15" fill="rgb(205,117,26)" fg:x="1019" fg:w="1"/><text x="83.3658%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.1158%" y="453" width="0.0816%" height="15" fill="rgb(209,80,39)" fg:x="1019" fg:w="1"/><text x="83.3658%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.1974%" y="485" width="0.0816%" height="15" fill="rgb(239,155,6)" fg:x="1020" fg:w="1"/><text x="83.4474%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.1974%" y="469" width="0.0816%" height="15" fill="rgb(212,104,12)" fg:x="1020" fg:w="1"/><text x="83.4474%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.1974%" y="453" width="0.0816%" height="15" fill="rgb(234,204,3)" fg:x="1020" fg:w="1"/><text x="83.4474%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.1974%" y="437" width="0.0816%" height="15" fill="rgb(251,218,7)" fg:x="1020" fg:w="1"/><text x="83.4474%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.1974%" y="421" width="0.0816%" height="15" fill="rgb(221,81,32)" fg:x="1020" fg:w="1"/><text x="83.4474%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.1974%" y="405" width="0.0816%" height="15" fill="rgb(214,152,26)" fg:x="1020" fg:w="1"/><text x="83.4474%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.1974%" y="389" width="0.0816%" height="15" fill="rgb(223,22,3)" fg:x="1020" fg:w="1"/><text x="83.4474%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.1974%" y="373" width="0.0816%" height="15" fill="rgb(207,174,7)" fg:x="1020" fg:w="1"/><text x="83.4474%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.41%)</title><rect x="82.9527%" y="549" width="0.4078%" height="15" fill="rgb(224,19,52)" fg:x="1017" fg:w="5"/><text x="83.2027%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="82.9527%" y="533" width="0.4078%" height="15" fill="rgb(228,24,14)" fg:x="1017" fg:w="5"/><text x="83.2027%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="82.9527%" y="517" width="0.4078%" height="15" fill="rgb(230,153,43)" fg:x="1017" fg:w="5"/><text x="83.2027%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="83.0343%" y="501" width="0.3263%" height="15" fill="rgb(231,106,12)" fg:x="1018" fg:w="4"/><text x="83.2843%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.2790%" y="485" width="0.0816%" height="15" fill="rgb(215,92,2)" fg:x="1021" fg:w="1"/><text x="83.5290%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.2790%" y="469" width="0.0816%" height="15" fill="rgb(249,143,25)" fg:x="1021" fg:w="1"/><text x="83.5290%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.2790%" y="453" width="0.0816%" height="15" fill="rgb(252,7,35)" fg:x="1021" fg:w="1"/><text x="83.5290%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.2790%" y="437" width="0.0816%" height="15" fill="rgb(216,69,40)" fg:x="1021" fg:w="1"/><text x="83.5290%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.2790%" y="421" width="0.0816%" height="15" fill="rgb(240,36,33)" fg:x="1021" fg:w="1"/><text x="83.5290%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.2790%" y="405" width="0.0816%" height="15" fill="rgb(231,128,14)" fg:x="1021" fg:w="1"/><text x="83.5290%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.3605%" y="549" width="0.1631%" height="15" fill="rgb(245,143,14)" fg:x="1022" fg:w="2"/><text x="83.6105%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="83.3605%" y="533" width="0.1631%" height="15" fill="rgb(222,130,28)" fg:x="1022" fg:w="2"/><text x="83.6105%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.3605%" y="517" width="0.1631%" height="15" fill="rgb(212,10,48)" fg:x="1022" fg:w="2"/><text x="83.6105%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.3605%" y="501" width="0.1631%" height="15" fill="rgb(254,118,45)" fg:x="1022" fg:w="2"/><text x="83.6105%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.3605%" y="485" width="0.1631%" height="15" fill="rgb(228,6,45)" fg:x="1022" fg:w="2"/><text x="83.6105%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="83.3605%" y="469" width="0.1631%" height="15" fill="rgb(241,18,35)" fg:x="1022" fg:w="2"/><text x="83.6105%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.6052%" y="485" width="0.0816%" height="15" fill="rgb(227,214,53)" fg:x="1025" fg:w="1"/><text x="83.8552%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.6868%" y="469" width="0.0816%" height="15" fill="rgb(224,107,51)" fg:x="1026" fg:w="1"/><text x="83.9368%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.7684%" y="469" width="0.0816%" height="15" fill="rgb(248,60,28)" fg:x="1027" fg:w="1"/><text x="84.0184%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="83.5237%" y="517" width="0.4078%" height="15" fill="rgb(249,101,23)" fg:x="1024" fg:w="5"/><text x="83.7737%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="83.5237%" y="501" width="0.4078%" height="15" fill="rgb(228,51,19)" fg:x="1024" fg:w="5"/><text x="83.7737%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="83.6868%" y="485" width="0.2447%" height="15" fill="rgb(213,20,6)" fg:x="1026" fg:w="3"/><text x="83.9368%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.8499%" y="469" width="0.0816%" height="15" fill="rgb(212,124,10)" fg:x="1028" fg:w="1"/><text x="84.0999%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.8499%" y="453" width="0.0816%" height="15" fill="rgb(248,3,40)" fg:x="1028" fg:w="1"/><text x="84.0999%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.8499%" y="437" width="0.0816%" height="15" fill="rgb(223,178,23)" fg:x="1028" fg:w="1"/><text x="84.0999%" y="447.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.57%)</title><rect x="83.5237%" y="533" width="0.5710%" height="15" fill="rgb(240,132,45)" fg:x="1024" fg:w="7"/><text x="83.7737%" y="543.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="83.9315%" y="517" width="0.1631%" height="15" fill="rgb(245,164,36)" fg:x="1029" fg:w="2"/><text x="84.1815%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="84.0131%" y="501" width="0.0816%" height="15" fill="rgb(231,188,53)" fg:x="1030" fg:w="1"/><text x="84.2631%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="84.0131%" y="485" width="0.0816%" height="15" fill="rgb(237,198,39)" fg:x="1030" fg:w="1"/><text x="84.2631%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="84.0131%" y="469" width="0.0816%" height="15" fill="rgb(223,120,35)" fg:x="1030" fg:w="1"/><text x="84.2631%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.0946%" y="501" width="0.0816%" height="15" fill="rgb(253,107,49)" fg:x="1031" fg:w="1"/><text x="84.3446%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.0946%" y="485" width="0.0816%" height="15" fill="rgb(216,44,31)" fg:x="1031" fg:w="1"/><text x="84.3446%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="84.1762%" y="501" width="0.0816%" height="15" fill="rgb(253,87,21)" fg:x="1032" fg:w="1"/><text x="84.4262%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.1762%" y="485" width="0.0816%" height="15" fill="rgb(226,18,2)" fg:x="1032" fg:w="1"/><text x="84.4262%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="84.1762%" y="469" width="0.0816%" height="15" fill="rgb(216,8,46)" fg:x="1032" fg:w="1"/><text x="84.4262%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="84.2577%" y="501" width="0.0816%" height="15" fill="rgb(226,140,39)" fg:x="1033" fg:w="1"/><text x="84.5077%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.2577%" y="485" width="0.0816%" height="15" fill="rgb(221,194,54)" fg:x="1033" fg:w="1"/><text x="84.5077%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.2577%" y="469" width="0.0816%" height="15" fill="rgb(213,92,11)" fg:x="1033" fg:w="1"/><text x="84.5077%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.3393%" y="453" width="0.0816%" height="15" fill="rgb(229,162,46)" fg:x="1034" fg:w="1"/><text x="84.5893%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="84.0946%" y="533" width="0.4078%" height="15" fill="rgb(214,111,36)" fg:x="1031" fg:w="5"/><text x="84.3446%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="84.0946%" y="517" width="0.4078%" height="15" fill="rgb(207,6,21)" fg:x="1031" fg:w="5"/><text x="84.3446%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="84.3393%" y="501" width="0.1631%" height="15" fill="rgb(213,127,38)" fg:x="1034" fg:w="2"/><text x="84.5893%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="84.3393%" y="485" width="0.1631%" height="15" fill="rgb(238,118,32)" fg:x="1034" fg:w="2"/><text x="84.5893%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="84.3393%" y="469" width="0.1631%" height="15" fill="rgb(240,139,39)" fg:x="1034" fg:w="2"/><text x="84.5893%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="84.4209%" y="453" width="0.0816%" height="15" fill="rgb(235,10,37)" fg:x="1035" fg:w="1"/><text x="84.6709%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="84.4209%" y="437" width="0.0816%" height="15" fill="rgb(249,171,38)" fg:x="1035" fg:w="1"/><text x="84.6709%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="84.5024%" y="469" width="0.1631%" height="15" fill="rgb(242,144,32)" fg:x="1036" fg:w="2"/><text x="84.7524%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.5024%" y="453" width="0.1631%" height="15" fill="rgb(217,117,21)" fg:x="1036" fg:w="2"/><text x="84.7524%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.5840%" y="437" width="0.0816%" height="15" fill="rgb(249,87,1)" fg:x="1037" fg:w="1"/><text x="84.8340%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.5840%" y="421" width="0.0816%" height="15" fill="rgb(248,196,48)" fg:x="1037" fg:w="1"/><text x="84.8340%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.5840%" y="405" width="0.0816%" height="15" fill="rgb(251,206,33)" fg:x="1037" fg:w="1"/><text x="84.8340%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.5840%" y="389" width="0.0816%" height="15" fill="rgb(232,141,28)" fg:x="1037" fg:w="1"/><text x="84.8340%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.6656%" y="469" width="0.0816%" height="15" fill="rgb(209,167,14)" fg:x="1038" fg:w="1"/><text x="84.9156%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="84.6656%" y="453" width="0.0816%" height="15" fill="rgb(225,11,50)" fg:x="1038" fg:w="1"/><text x="84.9156%" y="463.50"></text></g><g><title>engine::session::state::State::close (23 samples, 1.88%)</title><rect x="82.9527%" y="629" width="1.8760%" height="15" fill="rgb(209,50,20)" fg:x="1017" fg:w="23"/><text x="83.2027%" y="639.50">e..</text></g><g><title>engine::session::state::State::flush_entities (23 samples, 1.88%)</title><rect x="82.9527%" y="613" width="1.8760%" height="15" fill="rgb(212,17,46)" fg:x="1017" fg:w="23"/><text x="83.2027%" y="623.50">e..</text></g><g><title>core::iter::adapters::try_process (23 samples, 1.88%)</title><rect x="82.9527%" y="597" width="1.8760%" height="15" fill="rgb(216,101,39)" fg:x="1017" fg:w="23"/><text x="83.2027%" y="607.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23 samples, 1.88%)</title><rect x="82.9527%" y="581" width="1.8760%" height="15" fill="rgb(212,228,48)" fg:x="1017" fg:w="23"/><text x="83.2027%" y="591.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (23 samples, 1.88%)</title><rect x="82.9527%" y="565" width="1.8760%" height="15" fill="rgb(250,6,50)" fg:x="1017" fg:w="23"/><text x="83.2027%" y="575.50">e..</text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.31%)</title><rect x="83.5237%" y="549" width="1.3051%" height="15" fill="rgb(250,160,48)" fg:x="1024" fg:w="16"/><text x="83.7737%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="84.5024%" y="533" width="0.3263%" height="15" fill="rgb(244,216,33)" fg:x="1036" fg:w="4"/><text x="84.7524%" y="543.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="84.5024%" y="517" width="0.3263%" height="15" fill="rgb(207,157,5)" fg:x="1036" fg:w="4"/><text x="84.7524%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="84.5024%" y="501" width="0.3263%" height="15" fill="rgb(228,199,8)" fg:x="1036" fg:w="4"/><text x="84.7524%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="84.5024%" y="485" width="0.3263%" height="15" fill="rgb(227,80,20)" fg:x="1036" fg:w="4"/><text x="84.7524%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.7471%" y="469" width="0.0816%" height="15" fill="rgb(222,9,33)" fg:x="1039" fg:w="1"/><text x="84.9971%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.7471%" y="453" width="0.0816%" height="15" fill="rgb(239,44,28)" fg:x="1039" fg:w="1"/><text x="84.9971%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.7471%" y="437" width="0.0816%" height="15" fill="rgb(249,187,43)" fg:x="1039" fg:w="1"/><text x="84.9971%" y="447.50"></text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="84.8287%" y="629" width="0.0816%" height="15" fill="rgb(216,141,28)" fg:x="1040" fg:w="1"/><text x="85.0787%" y="639.50"></text></g><g><title>engine::session::Session::close (26 samples, 2.12%)</title><rect x="82.8711%" y="645" width="2.1207%" height="15" fill="rgb(230,154,53)" fg:x="1016" fg:w="26"/><text x="83.1211%" y="655.50">e..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="84.9103%" y="629" width="0.0816%" height="15" fill="rgb(227,82,4)" fg:x="1041" fg:w="1"/><text x="85.1603%" y="639.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="84.9103%" y="613" width="0.0816%" height="15" fill="rgb(220,107,16)" fg:x="1041" fg:w="1"/><text x="85.1603%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="84.9103%" y="597" width="0.0816%" height="15" fill="rgb(207,187,2)" fg:x="1041" fg:w="1"/><text x="85.1603%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="84.9103%" y="581" width="0.0816%" height="15" fill="rgb(210,162,52)" fg:x="1041" fg:w="1"/><text x="85.1603%" y="591.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="84.9103%" y="565" width="0.0816%" height="15" fill="rgb(217,216,49)" fg:x="1041" fg:w="1"/><text x="85.1603%" y="575.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="84.9918%" y="501" width="0.0816%" height="15" fill="rgb(218,146,49)" fg:x="1042" fg:w="1"/><text x="85.2418%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9918%" y="485" width="0.0816%" height="15" fill="rgb(216,55,40)" fg:x="1042" fg:w="1"/><text x="85.2418%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.0734%" y="437" width="0.0816%" height="15" fill="rgb(208,196,21)" fg:x="1043" fg:w="1"/><text x="85.3234%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.0734%" y="421" width="0.0816%" height="15" fill="rgb(242,117,42)" fg:x="1043" fg:w="1"/><text x="85.3234%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.0734%" y="405" width="0.0816%" height="15" fill="rgb(210,11,23)" fg:x="1043" fg:w="1"/><text x="85.3234%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (3 samples, 0.24%)</title><rect x="84.9918%" y="533" width="0.2447%" height="15" fill="rgb(217,110,2)" fg:x="1042" fg:w="3"/><text x="85.2418%" y="543.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (3 samples, 0.24%)</title><rect x="84.9918%" y="517" width="0.2447%" height="15" fill="rgb(229,77,54)" fg:x="1042" fg:w="3"/><text x="85.2418%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="85.0734%" y="501" width="0.1631%" height="15" fill="rgb(218,53,16)" fg:x="1043" fg:w="2"/><text x="85.3234%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="85.0734%" y="485" width="0.1631%" height="15" fill="rgb(215,38,13)" fg:x="1043" fg:w="2"/><text x="85.3234%" y="495.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="85.0734%" y="469" width="0.1631%" height="15" fill="rgb(235,42,18)" fg:x="1043" fg:w="2"/><text x="85.3234%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="85.0734%" y="453" width="0.1631%" height="15" fill="rgb(219,66,54)" fg:x="1043" fg:w="2"/><text x="85.3234%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.1550%" y="437" width="0.0816%" height="15" fill="rgb(222,205,4)" fg:x="1044" fg:w="1"/><text x="85.4050%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.1550%" y="421" width="0.0816%" height="15" fill="rgb(227,213,46)" fg:x="1044" fg:w="1"/><text x="85.4050%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="85.1550%" y="405" width="0.0816%" height="15" fill="rgb(250,145,42)" fg:x="1044" fg:w="1"/><text x="85.4050%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.1550%" y="389" width="0.0816%" height="15" fill="rgb(219,15,2)" fg:x="1044" fg:w="1"/><text x="85.4050%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.1550%" y="373" width="0.0816%" height="15" fill="rgb(231,181,52)" fg:x="1044" fg:w="1"/><text x="85.4050%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.1550%" y="357" width="0.0816%" height="15" fill="rgb(235,1,42)" fg:x="1044" fg:w="1"/><text x="85.4050%" y="367.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (4 samples, 0.33%)</title><rect x="84.9918%" y="549" width="0.3263%" height="15" fill="rgb(249,88,27)" fg:x="1042" fg:w="4"/><text x="85.2418%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.2365%" y="533" width="0.0816%" height="15" fill="rgb(235,145,16)" fg:x="1045" fg:w="1"/><text x="85.4865%" y="543.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (1 samples, 0.08%)</title><rect x="85.3181%" y="421" width="0.0816%" height="15" fill="rgb(237,114,19)" fg:x="1046" fg:w="1"/><text x="85.5681%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="85.3181%" y="405" width="0.0816%" height="15" fill="rgb(238,51,50)" fg:x="1046" fg:w="1"/><text x="85.5681%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (1 samples, 0.08%)</title><rect x="85.3181%" y="389" width="0.0816%" height="15" fill="rgb(205,194,25)" fg:x="1046" fg:w="1"/><text x="85.5681%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.3181%" y="373" width="0.0816%" height="15" fill="rgb(215,203,17)" fg:x="1046" fg:w="1"/><text x="85.5681%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="85.3181%" y="357" width="0.0816%" height="15" fill="rgb(233,112,49)" fg:x="1046" fg:w="1"/><text x="85.5681%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="85.3181%" y="341" width="0.0816%" height="15" fill="rgb(241,130,26)" fg:x="1046" fg:w="1"/><text x="85.5681%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.3181%" y="325" width="0.0816%" height="15" fill="rgb(252,223,19)" fg:x="1046" fg:w="1"/><text x="85.5681%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.3997%" y="389" width="0.0816%" height="15" fill="rgb(211,95,25)" fg:x="1047" fg:w="1"/><text x="85.6497%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.3997%" y="373" width="0.0816%" height="15" fill="rgb(251,182,27)" fg:x="1047" fg:w="1"/><text x="85.6497%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="85.4812%" y="389" width="0.1631%" height="15" fill="rgb(238,24,4)" fg:x="1048" fg:w="2"/><text x="85.7312%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="85.5628%" y="373" width="0.0816%" height="15" fill="rgb(224,220,25)" fg:x="1049" fg:w="1"/><text x="85.8128%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.5628%" y="357" width="0.0816%" height="15" fill="rgb(239,133,26)" fg:x="1049" fg:w="1"/><text x="85.8128%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.5628%" y="341" width="0.0816%" height="15" fill="rgb(211,94,48)" fg:x="1049" fg:w="1"/><text x="85.8128%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.5628%" y="325" width="0.0816%" height="15" fill="rgb(239,87,6)" fg:x="1049" fg:w="1"/><text x="85.8128%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.5628%" y="309" width="0.0816%" height="15" fill="rgb(227,62,0)" fg:x="1049" fg:w="1"/><text x="85.8128%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="85.6444%" y="389" width="0.0816%" height="15" fill="rgb(211,226,4)" fg:x="1050" fg:w="1"/><text x="85.8944%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="85.6444%" y="373" width="0.0816%" height="15" fill="rgb(253,38,52)" fg:x="1050" fg:w="1"/><text x="85.8944%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.6444%" y="357" width="0.0816%" height="15" fill="rgb(229,126,40)" fg:x="1050" fg:w="1"/><text x="85.8944%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.6444%" y="341" width="0.0816%" height="15" fill="rgb(229,165,44)" fg:x="1050" fg:w="1"/><text x="85.8944%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.6444%" y="325" width="0.0816%" height="15" fill="rgb(247,95,47)" fg:x="1050" fg:w="1"/><text x="85.8944%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="85.6444%" y="309" width="0.0816%" height="15" fill="rgb(216,140,30)" fg:x="1050" fg:w="1"/><text x="85.8944%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.6444%" y="293" width="0.0816%" height="15" fill="rgb(246,214,8)" fg:x="1050" fg:w="1"/><text x="85.8944%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.6444%" y="277" width="0.0816%" height="15" fill="rgb(227,224,15)" fg:x="1050" fg:w="1"/><text x="85.8944%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.6444%" y="261" width="0.0816%" height="15" fill="rgb(233,175,4)" fg:x="1050" fg:w="1"/><text x="85.8944%" y="271.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="85.8075%" y="325" width="0.0816%" height="15" fill="rgb(221,66,45)" fg:x="1052" fg:w="1"/><text x="86.0575%" y="335.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="85.8075%" y="309" width="0.0816%" height="15" fill="rgb(221,178,18)" fg:x="1052" fg:w="1"/><text x="86.0575%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="85.8075%" y="293" width="0.0816%" height="15" fill="rgb(213,81,29)" fg:x="1052" fg:w="1"/><text x="86.0575%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.8075%" y="277" width="0.0816%" height="15" fill="rgb(220,89,49)" fg:x="1052" fg:w="1"/><text x="86.0575%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.8075%" y="261" width="0.0816%" height="15" fill="rgb(227,60,33)" fg:x="1052" fg:w="1"/><text x="86.0575%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="85.8075%" y="245" width="0.0816%" height="15" fill="rgb(205,113,12)" fg:x="1052" fg:w="1"/><text x="86.0575%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="85.8075%" y="229" width="0.0816%" height="15" fill="rgb(211,32,1)" fg:x="1052" fg:w="1"/><text x="86.0575%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="85.8075%" y="213" width="0.0816%" height="15" fill="rgb(246,2,12)" fg:x="1052" fg:w="1"/><text x="86.0575%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="85.8075%" y="197" width="0.0816%" height="15" fill="rgb(243,37,27)" fg:x="1052" fg:w="1"/><text x="86.0575%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.8075%" y="181" width="0.0816%" height="15" fill="rgb(248,211,31)" fg:x="1052" fg:w="1"/><text x="86.0575%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="85.8891%" y="309" width="0.0816%" height="15" fill="rgb(242,146,47)" fg:x="1053" fg:w="1"/><text x="86.1391%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="85.8891%" y="293" width="0.0816%" height="15" fill="rgb(206,70,20)" fg:x="1053" fg:w="1"/><text x="86.1391%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="85.8891%" y="277" width="0.0816%" height="15" fill="rgb(215,10,51)" fg:x="1053" fg:w="1"/><text x="86.1391%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="85.8891%" y="261" width="0.0816%" height="15" fill="rgb(243,178,53)" fg:x="1053" fg:w="1"/><text x="86.1391%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="85.8891%" y="245" width="0.0816%" height="15" fill="rgb(233,221,20)" fg:x="1053" fg:w="1"/><text x="86.1391%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="85.8891%" y="229" width="0.0816%" height="15" fill="rgb(218,95,35)" fg:x="1053" fg:w="1"/><text x="86.1391%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.8891%" y="213" width="0.0816%" height="15" fill="rgb(229,13,5)" fg:x="1053" fg:w="1"/><text x="86.1391%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.8891%" y="197" width="0.0816%" height="15" fill="rgb(252,164,30)" fg:x="1053" fg:w="1"/><text x="86.1391%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="85.9706%" y="309" width="0.0816%" height="15" fill="rgb(232,68,36)" fg:x="1054" fg:w="1"/><text x="86.2206%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="85.9706%" y="293" width="0.0816%" height="15" fill="rgb(219,59,54)" fg:x="1054" fg:w="1"/><text x="86.2206%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.9706%" y="277" width="0.0816%" height="15" fill="rgb(250,92,33)" fg:x="1054" fg:w="1"/><text x="86.2206%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="85.9706%" y="261" width="0.0816%" height="15" fill="rgb(229,162,54)" fg:x="1054" fg:w="1"/><text x="86.2206%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.9706%" y="245" width="0.0816%" height="15" fill="rgb(244,114,52)" fg:x="1054" fg:w="1"/><text x="86.2206%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.1338%" y="245" width="0.0816%" height="15" fill="rgb(212,211,43)" fg:x="1056" fg:w="1"/><text x="86.3838%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.65%)</title><rect x="86.2153%" y="245" width="0.6525%" height="15" fill="rgb(226,147,8)" fg:x="1057" fg:w="8"/><text x="86.4653%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.65%)</title><rect x="86.2153%" y="229" width="0.6525%" height="15" fill="rgb(226,23,13)" fg:x="1057" fg:w="8"/><text x="86.4653%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.7863%" y="213" width="0.0816%" height="15" fill="rgb(240,63,4)" fg:x="1064" fg:w="1"/><text x="87.0363%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="86.9494%" y="181" width="0.0816%" height="15" fill="rgb(221,1,32)" fg:x="1066" fg:w="1"/><text x="87.1994%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="87.0310%" y="181" width="0.0816%" height="15" fill="rgb(242,117,10)" fg:x="1067" fg:w="1"/><text x="87.2810%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.0310%" y="165" width="0.0816%" height="15" fill="rgb(249,172,44)" fg:x="1067" fg:w="1"/><text x="87.2810%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (10 samples, 0.82%)</title><rect x="87.1126%" y="181" width="0.8157%" height="15" fill="rgb(244,46,45)" fg:x="1068" fg:w="10"/><text x="87.3626%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (10 samples, 0.82%)</title><rect x="87.1126%" y="165" width="0.8157%" height="15" fill="rgb(206,43,17)" fg:x="1068" fg:w="10"/><text x="87.3626%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 0.82%)</title><rect x="87.1126%" y="149" width="0.8157%" height="15" fill="rgb(239,218,39)" fg:x="1068" fg:w="10"/><text x="87.3626%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 1.14%)</title><rect x="86.8679%" y="229" width="1.1419%" height="15" fill="rgb(208,169,54)" fg:x="1065" fg:w="14"/><text x="87.1179%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (14 samples, 1.14%)</title><rect x="86.8679%" y="213" width="1.1419%" height="15" fill="rgb(247,25,42)" fg:x="1065" fg:w="14"/><text x="87.1179%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (14 samples, 1.14%)</title><rect x="86.8679%" y="197" width="1.1419%" height="15" fill="rgb(226,23,31)" fg:x="1065" fg:w="14"/><text x="87.1179%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="87.9282%" y="181" width="0.0816%" height="15" fill="rgb(247,16,28)" fg:x="1078" fg:w="1"/><text x="88.1782%" y="191.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.08%)</title><rect x="88.0098%" y="213" width="0.0816%" height="15" fill="rgb(231,147,38)" fg:x="1079" fg:w="1"/><text x="88.2598%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="88.0098%" y="229" width="0.2447%" height="15" fill="rgb(253,81,48)" fg:x="1079" fg:w="3"/><text x="88.2598%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="88.0914%" y="213" width="0.1631%" height="15" fill="rgb(249,222,43)" fg:x="1080" fg:w="2"/><text x="88.3414%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.1729%" y="197" width="0.0816%" height="15" fill="rgb(221,3,27)" fg:x="1081" fg:w="1"/><text x="88.4229%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.1729%" y="181" width="0.0816%" height="15" fill="rgb(228,180,5)" fg:x="1081" fg:w="1"/><text x="88.4229%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.1729%" y="165" width="0.0816%" height="15" fill="rgb(227,131,42)" fg:x="1081" fg:w="1"/><text x="88.4229%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (28 samples, 2.28%)</title><rect x="86.0522%" y="261" width="2.2838%" height="15" fill="rgb(212,3,39)" fg:x="1055" fg:w="28"/><text x="86.3022%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (18 samples, 1.47%)</title><rect x="86.8679%" y="245" width="1.4682%" height="15" fill="rgb(226,45,5)" fg:x="1065" fg:w="18"/><text x="87.1179%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="88.2545%" y="229" width="0.0816%" height="15" fill="rgb(215,167,45)" fg:x="1082" fg:w="1"/><text x="88.5045%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="88.2545%" y="213" width="0.0816%" height="15" fill="rgb(250,218,53)" fg:x="1082" fg:w="1"/><text x="88.5045%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (29 samples, 2.37%)</title><rect x="86.0522%" y="309" width="2.3654%" height="15" fill="rgb(207,140,0)" fg:x="1055" fg:w="29"/><text x="86.3022%" y="319.50">re..</text></g><g><title>regex::builders::Builder::build_one_string (29 samples, 2.37%)</title><rect x="86.0522%" y="293" width="2.3654%" height="15" fill="rgb(238,133,51)" fg:x="1055" fg:w="29"/><text x="86.3022%" y="303.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (29 samples, 2.37%)</title><rect x="86.0522%" y="277" width="2.3654%" height="15" fill="rgb(218,203,53)" fg:x="1055" fg:w="29"/><text x="86.3022%" y="287.50">re..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="88.3361%" y="261" width="0.0816%" height="15" fill="rgb(226,184,25)" fg:x="1083" fg:w="1"/><text x="88.5861%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="88.3361%" y="245" width="0.0816%" height="15" fill="rgb(231,121,21)" fg:x="1083" fg:w="1"/><text x="88.5861%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="88.3361%" y="229" width="0.0816%" height="15" fill="rgb(251,14,34)" fg:x="1083" fg:w="1"/><text x="88.5861%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.3361%" y="213" width="0.0816%" height="15" fill="rgb(249,193,11)" fg:x="1083" fg:w="1"/><text x="88.5861%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.6623%" y="229" width="0.0816%" height="15" fill="rgb(220,172,37)" fg:x="1087" fg:w="1"/><text x="88.9123%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.6623%" y="213" width="0.0816%" height="15" fill="rgb(231,229,43)" fg:x="1087" fg:w="1"/><text x="88.9123%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.33%)</title><rect x="88.4992%" y="245" width="0.3263%" height="15" fill="rgb(250,161,5)" fg:x="1085" fg:w="4"/><text x="88.7492%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="88.7439%" y="229" width="0.0816%" height="15" fill="rgb(218,225,18)" fg:x="1088" fg:w="1"/><text x="88.9939%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (38 samples, 3.10%)</title><rect x="85.8891%" y="325" width="3.0995%" height="15" fill="rgb(245,45,42)" fg:x="1053" fg:w="38"/><text x="86.1391%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.57%)</title><rect x="88.4176%" y="309" width="0.5710%" height="15" fill="rgb(211,115,1)" fg:x="1084" fg:w="7"/><text x="88.6676%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.57%)</title><rect x="88.4176%" y="293" width="0.5710%" height="15" fill="rgb(248,133,52)" fg:x="1084" fg:w="7"/><text x="88.6676%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.57%)</title><rect x="88.4176%" y="277" width="0.5710%" height="15" fill="rgb(238,100,21)" fg:x="1084" fg:w="7"/><text x="88.6676%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="88.4992%" y="261" width="0.4894%" height="15" fill="rgb(247,144,11)" fg:x="1085" fg:w="6"/><text x="88.7492%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="88.8254%" y="245" width="0.1631%" height="15" fill="rgb(206,164,16)" fg:x="1089" fg:w="2"/><text x="89.0754%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.9070%" y="229" width="0.0816%" height="15" fill="rgb(222,34,3)" fg:x="1090" fg:w="1"/><text x="89.1570%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.9886%" y="277" width="0.0816%" height="15" fill="rgb(248,82,4)" fg:x="1091" fg:w="1"/><text x="89.2386%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.9886%" y="261" width="0.0816%" height="15" fill="rgb(228,81,46)" fg:x="1091" fg:w="1"/><text x="89.2386%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.9886%" y="245" width="0.0816%" height="15" fill="rgb(227,67,47)" fg:x="1091" fg:w="1"/><text x="89.2386%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.0701%" y="245" width="0.0816%" height="15" fill="rgb(215,93,53)" fg:x="1092" fg:w="1"/><text x="89.3201%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.0701%" y="229" width="0.0816%" height="15" fill="rgb(248,194,39)" fg:x="1092" fg:w="1"/><text x="89.3201%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="88.9886%" y="309" width="0.3263%" height="15" fill="rgb(215,5,19)" fg:x="1091" fg:w="4"/><text x="89.2386%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (4 samples, 0.33%)</title><rect x="88.9886%" y="293" width="0.3263%" height="15" fill="rgb(226,215,51)" fg:x="1091" fg:w="4"/><text x="89.2386%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="89.0701%" y="277" width="0.2447%" height="15" fill="rgb(225,56,26)" fg:x="1092" fg:w="3"/><text x="89.3201%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="89.0701%" y="261" width="0.2447%" height="15" fill="rgb(222,75,29)" fg:x="1092" fg:w="3"/><text x="89.3201%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="89.1517%" y="245" width="0.1631%" height="15" fill="rgb(236,139,6)" fg:x="1093" fg:w="2"/><text x="89.4017%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="89.5595%" y="213" width="0.1631%" height="15" fill="rgb(223,137,36)" fg:x="1098" fg:w="2"/><text x="89.8095%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.5595%" y="197" width="0.1631%" height="15" fill="rgb(226,99,2)" fg:x="1098" fg:w="2"/><text x="89.8095%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.5595%" y="181" width="0.1631%" height="15" fill="rgb(206,133,23)" fg:x="1098" fg:w="2"/><text x="89.8095%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.49%)</title><rect x="89.3148%" y="309" width="0.4894%" height="15" fill="rgb(243,173,15)" fg:x="1095" fg:w="6"/><text x="89.5648%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="89.3148%" y="293" width="0.4894%" height="15" fill="rgb(228,69,28)" fg:x="1095" fg:w="6"/><text x="89.5648%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="89.3148%" y="277" width="0.4894%" height="15" fill="rgb(212,51,22)" fg:x="1095" fg:w="6"/><text x="89.5648%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="89.3148%" y="261" width="0.4894%" height="15" fill="rgb(227,113,0)" fg:x="1095" fg:w="6"/><text x="89.5648%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="89.3964%" y="245" width="0.4078%" height="15" fill="rgb(252,84,27)" fg:x="1096" fg:w="5"/><text x="89.6464%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="89.3964%" y="229" width="0.4078%" height="15" fill="rgb(223,145,39)" fg:x="1096" fg:w="5"/><text x="89.6464%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="89.7227%" y="213" width="0.0816%" height="15" fill="rgb(239,219,30)" fg:x="1100" fg:w="1"/><text x="89.9727%" y="223.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="89.8042%" y="261" width="0.0816%" height="15" fill="rgb(224,196,39)" fg:x="1101" fg:w="1"/><text x="90.0542%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.41%)</title><rect x="89.8858%" y="245" width="0.4078%" height="15" fill="rgb(205,35,43)" fg:x="1102" fg:w="5"/><text x="90.1358%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.33%)</title><rect x="89.9674%" y="229" width="0.3263%" height="15" fill="rgb(228,201,21)" fg:x="1103" fg:w="4"/><text x="90.2174%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.2121%" y="213" width="0.0816%" height="15" fill="rgb(237,118,16)" fg:x="1106" fg:w="1"/><text x="90.4621%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="90.2936%" y="245" width="0.0816%" height="15" fill="rgb(241,17,19)" fg:x="1107" fg:w="1"/><text x="90.5436%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="90.2936%" y="229" width="0.0816%" height="15" fill="rgb(214,10,25)" fg:x="1107" fg:w="1"/><text x="90.5436%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="90.2936%" y="213" width="0.0816%" height="15" fill="rgb(238,37,29)" fg:x="1107" fg:w="1"/><text x="90.5436%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="90.2936%" y="197" width="0.0816%" height="15" fill="rgb(253,83,25)" fg:x="1107" fg:w="1"/><text x="90.5436%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="90.5383%" y="213" width="0.0816%" height="15" fill="rgb(234,192,12)" fg:x="1110" fg:w="1"/><text x="90.7883%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.5383%" y="197" width="0.0816%" height="15" fill="rgb(241,216,45)" fg:x="1110" fg:w="1"/><text x="90.7883%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.5383%" y="181" width="0.0816%" height="15" fill="rgb(242,22,33)" fg:x="1110" fg:w="1"/><text x="90.7883%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.5383%" y="165" width="0.0816%" height="15" fill="rgb(231,105,49)" fg:x="1110" fg:w="1"/><text x="90.7883%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="90.6199%" y="213" width="0.1631%" height="15" fill="rgb(218,204,15)" fg:x="1111" fg:w="2"/><text x="90.8699%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="90.6199%" y="197" width="0.1631%" height="15" fill="rgb(235,138,41)" fg:x="1111" fg:w="2"/><text x="90.8699%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.65%)</title><rect x="90.3752%" y="245" width="0.6525%" height="15" fill="rgb(246,0,9)" fg:x="1108" fg:w="8"/><text x="90.6252%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.57%)</title><rect x="90.4568%" y="229" width="0.5710%" height="15" fill="rgb(210,74,4)" fg:x="1109" fg:w="7"/><text x="90.7068%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="90.7830%" y="213" width="0.2447%" height="15" fill="rgb(250,60,41)" fg:x="1113" fg:w="3"/><text x="91.0330%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="90.7830%" y="197" width="0.2447%" height="15" fill="rgb(220,115,12)" fg:x="1113" fg:w="3"/><text x="91.0330%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="90.8646%" y="181" width="0.1631%" height="15" fill="rgb(237,100,13)" fg:x="1114" fg:w="2"/><text x="91.1146%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="91.0277%" y="245" width="0.0816%" height="15" fill="rgb(213,55,26)" fg:x="1116" fg:w="1"/><text x="91.2777%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="91.1093%" y="197" width="0.0816%" height="15" fill="rgb(216,17,4)" fg:x="1117" fg:w="1"/><text x="91.3593%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.1093%" y="181" width="0.0816%" height="15" fill="rgb(220,153,47)" fg:x="1117" fg:w="1"/><text x="91.3593%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.1093%" y="165" width="0.0816%" height="15" fill="rgb(215,131,9)" fg:x="1117" fg:w="1"/><text x="91.3593%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.1093%" y="149" width="0.0816%" height="15" fill="rgb(233,46,42)" fg:x="1117" fg:w="1"/><text x="91.3593%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="91.1909%" y="149" width="0.0816%" height="15" fill="rgb(226,86,7)" fg:x="1118" fg:w="1"/><text x="91.4409%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="91.7618%" y="133" width="0.1631%" height="15" fill="rgb(239,226,21)" fg:x="1125" fg:w="2"/><text x="92.0118%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="91.9250%" y="133" width="0.1631%" height="15" fill="rgb(244,137,22)" fg:x="1127" fg:w="2"/><text x="92.1750%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="92.1697%" y="101" width="0.1631%" height="15" fill="rgb(211,139,35)" fg:x="1130" fg:w="2"/><text x="92.4197%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="92.1697%" y="85" width="0.1631%" height="15" fill="rgb(214,62,50)" fg:x="1130" fg:w="2"/><text x="92.4197%" y="95.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="92.1697%" y="69" width="0.1631%" height="15" fill="rgb(212,113,44)" fg:x="1130" fg:w="2"/><text x="92.4197%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.33%)</title><rect x="92.0881%" y="133" width="0.3263%" height="15" fill="rgb(226,150,43)" fg:x="1129" fg:w="4"/><text x="92.3381%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.33%)</title><rect x="92.0881%" y="117" width="0.3263%" height="15" fill="rgb(250,71,37)" fg:x="1129" fg:w="4"/><text x="92.3381%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="92.3328%" y="101" width="0.0816%" height="15" fill="rgb(219,76,19)" fg:x="1132" fg:w="1"/><text x="92.5828%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="92.4144%" y="133" width="0.0816%" height="15" fill="rgb(250,39,11)" fg:x="1133" fg:w="1"/><text x="92.6644%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="92.4144%" y="117" width="0.0816%" height="15" fill="rgb(230,64,31)" fg:x="1133" fg:w="1"/><text x="92.6644%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (15 samples, 1.22%)</title><rect x="92.4959%" y="133" width="1.2235%" height="15" fill="rgb(208,222,23)" fg:x="1134" fg:w="15"/><text x="92.7459%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (15 samples, 1.22%)</title><rect x="92.4959%" y="117" width="1.2235%" height="15" fill="rgb(227,125,18)" fg:x="1134" fg:w="15"/><text x="92.7459%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (15 samples, 1.22%)</title><rect x="92.4959%" y="101" width="1.2235%" height="15" fill="rgb(234,210,9)" fg:x="1134" fg:w="15"/><text x="92.7459%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="93.7194%" y="133" width="0.0816%" height="15" fill="rgb(217,127,24)" fg:x="1149" fg:w="1"/><text x="93.9694%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 2.77%)</title><rect x="91.1093%" y="229" width="2.7732%" height="15" fill="rgb(239,141,48)" fg:x="1117" fg:w="34"/><text x="91.3593%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (34 samples, 2.77%)</title><rect x="91.1093%" y="213" width="2.7732%" height="15" fill="rgb(227,109,8)" fg:x="1117" fg:w="34"/><text x="91.3593%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (33 samples, 2.69%)</title><rect x="91.1909%" y="197" width="2.6917%" height="15" fill="rgb(235,184,23)" fg:x="1118" fg:w="33"/><text x="91.4409%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (33 samples, 2.69%)</title><rect x="91.1909%" y="181" width="2.6917%" height="15" fill="rgb(227,226,48)" fg:x="1118" fg:w="33"/><text x="91.4409%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (33 samples, 2.69%)</title><rect x="91.1909%" y="165" width="2.6917%" height="15" fill="rgb(206,150,11)" fg:x="1118" fg:w="33"/><text x="91.4409%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (32 samples, 2.61%)</title><rect x="91.2724%" y="149" width="2.6101%" height="15" fill="rgb(254,2,33)" fg:x="1119" fg:w="32"/><text x="91.5224%" y="159.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="93.8010%" y="133" width="0.0816%" height="15" fill="rgb(243,160,20)" fg:x="1150" fg:w="1"/><text x="94.0510%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.33%)</title><rect x="94.1272%" y="213" width="0.3263%" height="15" fill="rgb(218,208,30)" fg:x="1154" fg:w="4"/><text x="94.3772%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="94.2088%" y="197" width="0.2447%" height="15" fill="rgb(224,120,49)" fg:x="1155" fg:w="3"/><text x="94.4588%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="94.2088%" y="181" width="0.2447%" height="15" fill="rgb(246,12,2)" fg:x="1155" fg:w="3"/><text x="94.4588%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="94.2088%" y="165" width="0.2447%" height="15" fill="rgb(236,117,3)" fg:x="1155" fg:w="3"/><text x="94.4588%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.41%)</title><rect x="94.4535%" y="213" width="0.4078%" height="15" fill="rgb(216,128,52)" fg:x="1158" fg:w="5"/><text x="94.7035%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.7798%" y="197" width="0.0816%" height="15" fill="rgb(246,145,19)" fg:x="1162" fg:w="1"/><text x="95.0298%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7798%" y="181" width="0.0816%" height="15" fill="rgb(222,11,46)" fg:x="1162" fg:w="1"/><text x="95.0298%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7798%" y="165" width="0.0816%" height="15" fill="rgb(245,82,36)" fg:x="1162" fg:w="1"/><text x="95.0298%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (62 samples, 5.06%)</title><rect x="89.8858%" y="261" width="5.0571%" height="15" fill="rgb(250,73,51)" fg:x="1102" fg:w="62"/><text x="90.1358%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (47 samples, 3.83%)</title><rect x="91.1093%" y="245" width="3.8336%" height="15" fill="rgb(221,189,23)" fg:x="1117" fg:w="47"/><text x="91.3593%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.06%)</title><rect x="93.8825%" y="229" width="1.0604%" height="15" fill="rgb(210,33,7)" fg:x="1151" fg:w="13"/><text x="94.1325%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="94.8613%" y="213" width="0.0816%" height="15" fill="rgb(210,107,22)" fg:x="1163" fg:w="1"/><text x="95.1113%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="94.9429%" y="261" width="0.0816%" height="15" fill="rgb(222,116,37)" fg:x="1164" fg:w="1"/><text x="95.1929%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="94.9429%" y="245" width="0.0816%" height="15" fill="rgb(254,17,48)" fg:x="1164" fg:w="1"/><text x="95.1929%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="94.9429%" y="229" width="0.0816%" height="15" fill="rgb(224,36,32)" fg:x="1164" fg:w="1"/><text x="95.1929%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="94.9429%" y="213" width="0.0816%" height="15" fill="rgb(232,90,46)" fg:x="1164" fg:w="1"/><text x="95.1929%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.9429%" y="197" width="0.0816%" height="15" fill="rgb(241,66,40)" fg:x="1164" fg:w="1"/><text x="95.1929%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.9429%" y="181" width="0.0816%" height="15" fill="rgb(249,184,29)" fg:x="1164" fg:w="1"/><text x="95.1929%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.9429%" y="165" width="0.0816%" height="15" fill="rgb(231,181,1)" fg:x="1164" fg:w="1"/><text x="95.1929%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.0245%" y="229" width="0.0816%" height="15" fill="rgb(224,94,2)" fg:x="1165" fg:w="1"/><text x="95.2745%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (76 samples, 6.20%)</title><rect x="88.9886%" y="325" width="6.1990%" height="15" fill="rgb(229,170,15)" fg:x="1091" fg:w="76"/><text x="89.2386%" y="335.50">indefini..</text></g><g><title>regex::regex::string::Regex::new (66 samples, 5.38%)</title><rect x="89.8042%" y="309" width="5.3834%" height="15" fill="rgb(240,127,35)" fg:x="1101" fg:w="66"/><text x="90.0542%" y="319.50">regex::..</text></g><g><title>regex::builders::Builder::build_one_string (66 samples, 5.38%)</title><rect x="89.8042%" y="293" width="5.3834%" height="15" fill="rgb(248,196,34)" fg:x="1101" fg:w="66"/><text x="90.0542%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (66 samples, 5.38%)</title><rect x="89.8042%" y="277" width="5.3834%" height="15" fill="rgb(236,137,7)" fg:x="1101" fg:w="66"/><text x="90.0542%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="95.0245%" y="261" width="0.1631%" height="15" fill="rgb(235,127,16)" fg:x="1165" fg:w="2"/><text x="95.2745%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="95.0245%" y="245" width="0.1631%" height="15" fill="rgb(250,192,54)" fg:x="1165" fg:w="2"/><text x="95.2745%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="95.1060%" y="229" width="0.0816%" height="15" fill="rgb(218,98,20)" fg:x="1166" fg:w="1"/><text x="95.3560%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="95.1060%" y="213" width="0.0816%" height="15" fill="rgb(230,176,47)" fg:x="1166" fg:w="1"/><text x="95.3560%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1060%" y="197" width="0.0816%" height="15" fill="rgb(244,2,33)" fg:x="1166" fg:w="1"/><text x="95.3560%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1060%" y="181" width="0.0816%" height="15" fill="rgb(231,100,17)" fg:x="1166" fg:w="1"/><text x="95.3560%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.1060%" y="165" width="0.0816%" height="15" fill="rgb(245,23,12)" fg:x="1166" fg:w="1"/><text x="95.3560%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.1876%" y="293" width="0.0816%" height="15" fill="rgb(249,55,22)" fg:x="1167" fg:w="1"/><text x="95.4376%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.1876%" y="277" width="0.0816%" height="15" fill="rgb(207,134,9)" fg:x="1167" fg:w="1"/><text x="95.4376%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="95.1876%" y="261" width="0.0816%" height="15" fill="rgb(218,134,0)" fg:x="1167" fg:w="1"/><text x="95.4376%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.1876%" y="245" width="0.0816%" height="15" fill="rgb(213,212,33)" fg:x="1167" fg:w="1"/><text x="95.4376%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.1876%" y="229" width="0.0816%" height="15" fill="rgb(252,106,18)" fg:x="1167" fg:w="1"/><text x="95.4376%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="95.1876%" y="213" width="0.0816%" height="15" fill="rgb(208,126,42)" fg:x="1167" fg:w="1"/><text x="95.4376%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.2692%" y="293" width="0.0816%" height="15" fill="rgb(246,175,29)" fg:x="1168" fg:w="1"/><text x="95.5192%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.2692%" y="277" width="0.0816%" height="15" fill="rgb(215,13,50)" fg:x="1168" fg:w="1"/><text x="95.5192%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.2692%" y="261" width="0.0816%" height="15" fill="rgb(216,172,15)" fg:x="1168" fg:w="1"/><text x="95.5192%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.2692%" y="245" width="0.0816%" height="15" fill="rgb(212,103,13)" fg:x="1168" fg:w="1"/><text x="95.5192%" y="255.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="95.3507%" y="277" width="0.0816%" height="15" fill="rgb(231,171,36)" fg:x="1169" fg:w="1"/><text x="95.6007%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Config::new (1 samples, 0.08%)</title><rect x="95.3507%" y="261" width="0.0816%" height="15" fill="rgb(250,123,20)" fg:x="1169" fg:w="1"/><text x="95.6007%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.5954%" y="213" width="0.0816%" height="15" fill="rgb(212,53,50)" fg:x="1172" fg:w="1"/><text x="95.8454%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.5954%" y="197" width="0.0816%" height="15" fill="rgb(243,54,12)" fg:x="1172" fg:w="1"/><text x="95.8454%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5954%" y="181" width="0.0816%" height="15" fill="rgb(234,101,34)" fg:x="1172" fg:w="1"/><text x="95.8454%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.5954%" y="165" width="0.0816%" height="15" fill="rgb(254,67,22)" fg:x="1172" fg:w="1"/><text x="95.8454%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="95.5139%" y="245" width="0.2447%" height="15" fill="rgb(250,35,47)" fg:x="1171" fg:w="3"/><text x="95.7639%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="95.5139%" y="229" width="0.2447%" height="15" fill="rgb(226,126,38)" fg:x="1171" fg:w="3"/><text x="95.7639%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="95.6770%" y="213" width="0.0816%" height="15" fill="rgb(216,138,53)" fg:x="1173" fg:w="1"/><text x="95.9270%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.6770%" y="197" width="0.0816%" height="15" fill="rgb(246,199,43)" fg:x="1173" fg:w="1"/><text x="95.9270%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="95.7586%" y="149" width="0.0816%" height="15" fill="rgb(232,125,11)" fg:x="1174" fg:w="1"/><text x="96.0086%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="95.7586%" y="213" width="0.1631%" height="15" fill="rgb(218,219,45)" fg:x="1174" fg:w="2"/><text x="96.0086%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="95.7586%" y="197" width="0.1631%" height="15" fill="rgb(216,102,54)" fg:x="1174" fg:w="2"/><text x="96.0086%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="95.7586%" y="181" width="0.1631%" height="15" fill="rgb(250,228,7)" fg:x="1174" fg:w="2"/><text x="96.0086%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="95.7586%" y="165" width="0.1631%" height="15" fill="rgb(226,125,25)" fg:x="1174" fg:w="2"/><text x="96.0086%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="95.8401%" y="149" width="0.0816%" height="15" fill="rgb(224,165,27)" fg:x="1175" fg:w="1"/><text x="96.0901%" y="159.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="96.0033%" y="197" width="0.0816%" height="15" fill="rgb(233,86,3)" fg:x="1177" fg:w="1"/><text x="96.2533%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.49%)</title><rect x="95.7586%" y="229" width="0.4894%" height="15" fill="rgb(228,116,20)" fg:x="1174" fg:w="6"/><text x="96.0086%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.33%)</title><rect x="95.9217%" y="213" width="0.3263%" height="15" fill="rgb(209,192,17)" fg:x="1176" fg:w="4"/><text x="96.1717%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.0848%" y="197" width="0.1631%" height="15" fill="rgb(224,88,34)" fg:x="1178" fg:w="2"/><text x="96.3348%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.57%)</title><rect x="95.7586%" y="245" width="0.5710%" height="15" fill="rgb(233,38,6)" fg:x="1174" fg:w="7"/><text x="96.0086%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="96.2480%" y="229" width="0.0816%" height="15" fill="rgb(212,59,30)" fg:x="1180" fg:w="1"/><text x="96.4980%" y="239.50"></text></g><g><title>regex_automata::meta::reverse_inner::flatten (1 samples, 0.08%)</title><rect x="96.2480%" y="213" width="0.0816%" height="15" fill="rgb(213,80,3)" fg:x="1180" fg:w="1"/><text x="96.4980%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="96.3295%" y="245" width="0.0816%" height="15" fill="rgb(251,178,7)" fg:x="1181" fg:w="1"/><text x="96.5795%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="96.3295%" y="229" width="0.0816%" height="15" fill="rgb(213,154,26)" fg:x="1181" fg:w="1"/><text x="96.5795%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.3295%" y="213" width="0.0816%" height="15" fill="rgb(238,165,49)" fg:x="1181" fg:w="1"/><text x="96.5795%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.3295%" y="197" width="0.0816%" height="15" fill="rgb(248,91,46)" fg:x="1181" fg:w="1"/><text x="96.5795%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.3295%" y="181" width="0.0816%" height="15" fill="rgb(244,21,52)" fg:x="1181" fg:w="1"/><text x="96.5795%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.3295%" y="165" width="0.0816%" height="15" fill="rgb(247,122,20)" fg:x="1181" fg:w="1"/><text x="96.5795%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.3295%" y="149" width="0.0816%" height="15" fill="rgb(218,27,9)" fg:x="1181" fg:w="1"/><text x="96.5795%" y="159.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (12 samples, 0.98%)</title><rect x="95.5139%" y="261" width="0.9788%" height="15" fill="rgb(246,7,6)" fg:x="1171" fg:w="12"/><text x="95.7639%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.4111%" y="245" width="0.0816%" height="15" fill="rgb(227,135,54)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.4111%" y="229" width="0.0816%" height="15" fill="rgb(247,14,11)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.4111%" y="213" width="0.0816%" height="15" fill="rgb(206,149,34)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="96.4111%" y="197" width="0.0816%" height="15" fill="rgb(227,228,4)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="207.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="96.4111%" y="181" width="0.0816%" height="15" fill="rgb(238,218,28)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (15 samples, 1.22%)</title><rect x="95.3507%" y="293" width="1.2235%" height="15" fill="rgb(252,86,40)" fg:x="1169" fg:w="15"/><text x="95.6007%" y="303.50"></text></g><g><title>regex::builders::Builder::build_one_string (14 samples, 1.14%)</title><rect x="95.4323%" y="277" width="1.1419%" height="15" fill="rgb(251,225,11)" fg:x="1170" fg:w="14"/><text x="95.6823%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="96.4927%" y="261" width="0.0816%" height="15" fill="rgb(206,46,49)" fg:x="1183" fg:w="1"/><text x="96.7427%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (142 samples, 11.58%)</title><rect x="85.3997%" y="405" width="11.5824%" height="15" fill="rgb(245,128,24)" fg:x="1047" fg:w="142"/><text x="85.6497%" y="415.50">&lt;&amp;kernel::model::..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (138 samples, 11.26%)</title><rect x="85.7259%" y="389" width="11.2561%" height="15" fill="rgb(219,177,34)" fg:x="1051" fg:w="138"/><text x="85.9759%" y="399.50">plugins_core::loo..</text></g><g><title>indefinite::indefinite (138 samples, 11.26%)</title><rect x="85.7259%" y="373" width="11.2561%" height="15" fill="rgb(218,60,48)" fg:x="1051" fg:w="138"/><text x="85.9759%" y="383.50">indefinite::indef..</text></g><g><title>indefinite::methods::indefinite (138 samples, 11.26%)</title><rect x="85.7259%" y="357" width="11.2561%" height="15" fill="rgb(221,11,5)" fg:x="1051" fg:w="138"/><text x="85.9759%" y="367.50">indefinite::metho..</text></g><g><title>indefinite::methods::apply_rules (138 samples, 11.26%)</title><rect x="85.7259%" y="341" width="11.2561%" height="15" fill="rgb(220,148,13)" fg:x="1051" fg:w="138"/><text x="85.9759%" y="351.50">indefinite::metho..</text></g><g><title>indefinite::rules::other::Other::run (22 samples, 1.79%)</title><rect x="95.1876%" y="325" width="1.7945%" height="15" fill="rgb(210,16,3)" fg:x="1167" fg:w="22"/><text x="95.4376%" y="335.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (22 samples, 1.79%)</title><rect x="95.1876%" y="309" width="1.7945%" height="15" fill="rgb(236,80,2)" fg:x="1167" fg:w="22"/><text x="95.4376%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="96.5742%" y="293" width="0.4078%" height="15" fill="rgb(239,129,19)" fg:x="1184" fg:w="5"/><text x="96.8242%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="96.5742%" y="277" width="0.4078%" height="15" fill="rgb(220,106,35)" fg:x="1184" fg:w="5"/><text x="96.8242%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="96.5742%" y="261" width="0.4078%" height="15" fill="rgb(252,139,45)" fg:x="1184" fg:w="5"/><text x="96.8242%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="96.5742%" y="245" width="0.4078%" height="15" fill="rgb(229,8,36)" fg:x="1184" fg:w="5"/><text x="96.8242%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="96.5742%" y="229" width="0.4078%" height="15" fill="rgb(230,126,33)" fg:x="1184" fg:w="5"/><text x="96.8242%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="96.9821%" y="373" width="0.1631%" height="15" fill="rgb(239,140,21)" fg:x="1189" fg:w="2"/><text x="97.2321%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0636%" y="357" width="0.0816%" height="15" fill="rgb(254,104,9)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.0636%" y="341" width="0.0816%" height="15" fill="rgb(239,52,14)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.0636%" y="325" width="0.0816%" height="15" fill="rgb(208,227,44)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.0636%" y="309" width="0.0816%" height="15" fill="rgb(246,18,19)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0636%" y="293" width="0.0816%" height="15" fill="rgb(235,228,25)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0636%" y="277" width="0.0816%" height="15" fill="rgb(240,156,20)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.0636%" y="261" width="0.0816%" height="15" fill="rgb(224,8,20)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.0636%" y="245" width="0.0816%" height="15" fill="rgb(214,12,52)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.0636%" y="229" width="0.0816%" height="15" fill="rgb(211,220,47)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.0636%" y="213" width="0.0816%" height="15" fill="rgb(250,173,5)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0636%" y="197" width="0.0816%" height="15" fill="rgb(250,125,52)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="207.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="96.9821%" y="405" width="0.2447%" height="15" fill="rgb(209,133,18)" fg:x="1189" fg:w="3"/><text x="97.2321%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="96.9821%" y="389" width="0.2447%" height="15" fill="rgb(216,173,22)" fg:x="1189" fg:w="3"/><text x="97.2321%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1452%" y="373" width="0.0816%" height="15" fill="rgb(205,3,22)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.1452%" y="357" width="0.0816%" height="15" fill="rgb(248,22,20)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1452%" y="341" width="0.0816%" height="15" fill="rgb(233,6,29)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1452%" y="325" width="0.0816%" height="15" fill="rgb(240,22,54)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.1452%" y="309" width="0.0816%" height="15" fill="rgb(231,133,32)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.1452%" y="293" width="0.0816%" height="15" fill="rgb(248,193,4)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.1452%" y="277" width="0.0816%" height="15" fill="rgb(211,178,46)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.1452%" y="261" width="0.0816%" height="15" fill="rgb(224,5,42)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.1452%" y="245" width="0.0816%" height="15" fill="rgb(239,176,25)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.1452%" y="229" width="0.0816%" height="15" fill="rgb(245,187,50)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.1452%" y="213" width="0.0816%" height="15" fill="rgb(248,24,15)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.1452%" y="197" width="0.0816%" height="15" fill="rgb(205,166,13)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.1452%" y="181" width="0.0816%" height="15" fill="rgb(208,114,23)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1452%" y="165" width="0.0816%" height="15" fill="rgb(239,127,18)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="97.2268%" y="357" width="0.0816%" height="15" fill="rgb(219,154,28)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="97.2268%" y="341" width="0.0816%" height="15" fill="rgb(225,157,23)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.2268%" y="325" width="0.0816%" height="15" fill="rgb(219,8,6)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.2268%" y="309" width="0.0816%" height="15" fill="rgb(212,47,6)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2268%" y="293" width="0.0816%" height="15" fill="rgb(224,190,4)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.2268%" y="277" width="0.0816%" height="15" fill="rgb(239,183,29)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2268%" y="261" width="0.0816%" height="15" fill="rgb(213,57,7)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.2268%" y="245" width="0.0816%" height="15" fill="rgb(216,148,1)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2268%" y="229" width="0.0816%" height="15" fill="rgb(236,182,29)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="97.3083%" y="357" width="0.0816%" height="15" fill="rgb(244,120,48)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="97.3083%" y="341" width="0.0816%" height="15" fill="rgb(206,71,34)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (153 samples, 12.48%)</title><rect x="84.9918%" y="613" width="12.4796%" height="15" fill="rgb(242,32,6)" fg:x="1042" fg:w="153"/><text x="85.2418%" y="623.50">&lt;engine::session::S..</text></g><g><title>kernel::plugins::mw::apply_middleware (153 samples, 12.48%)</title><rect x="84.9918%" y="597" width="12.4796%" height="15" fill="rgb(241,35,3)" fg:x="1042" fg:w="153"/><text x="85.2418%" y="607.50">kernel::plugins::mw..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (153 samples, 12.48%)</title><rect x="84.9918%" y="581" width="12.4796%" height="15" fill="rgb(222,62,19)" fg:x="1042" fg:w="153"/><text x="85.2418%" y="591.50">kernel::plugins::mw..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (153 samples, 12.48%)</title><rect x="84.9918%" y="565" width="12.4796%" height="15" fill="rgb(223,110,41)" fg:x="1042" fg:w="153"/><text x="85.2418%" y="575.50">&lt;engine::session::E..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (149 samples, 12.15%)</title><rect x="85.3181%" y="549" width="12.1533%" height="15" fill="rgb(208,224,4)" fg:x="1046" fg:w="149"/><text x="85.5681%" y="559.50">kernel::plugins::m..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (149 samples, 12.15%)</title><rect x="85.3181%" y="533" width="12.1533%" height="15" fill="rgb(241,137,19)" fg:x="1046" fg:w="149"/><text x="85.5681%" y="543.50">&lt;plugins_dynlib::D..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (149 samples, 12.15%)</title><rect x="85.3181%" y="517" width="12.1533%" height="15" fill="rgb(244,24,17)" fg:x="1046" fg:w="149"/><text x="85.5681%" y="527.50">kernel::plugins::m..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (149 samples, 12.15%)</title><rect x="85.3181%" y="501" width="12.1533%" height="15" fill="rgb(245,178,49)" fg:x="1046" fg:w="149"/><text x="85.5681%" y="511.50">core::ops::functio..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (149 samples, 12.15%)</title><rect x="85.3181%" y="485" width="12.1533%" height="15" fill="rgb(219,160,38)" fg:x="1046" fg:w="149"/><text x="85.5681%" y="495.50">kernel::plugins::m..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (149 samples, 12.15%)</title><rect x="85.3181%" y="469" width="12.1533%" height="15" fill="rgb(228,137,14)" fg:x="1046" fg:w="149"/><text x="85.5681%" y="479.50">core::ops::functio..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (149 samples, 12.15%)</title><rect x="85.3181%" y="453" width="12.1533%" height="15" fill="rgb(237,134,11)" fg:x="1046" fg:w="149"/><text x="85.5681%" y="463.50">&lt;engine::session::..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (149 samples, 12.15%)</title><rect x="85.3181%" y="437" width="12.1533%" height="15" fill="rgb(211,126,44)" fg:x="1046" fg:w="149"/><text x="85.5681%" y="447.50">&lt;plugins_core::loo..</text></g><g><title>plugins_core::looking::model::new_area_observation (148 samples, 12.07%)</title><rect x="85.3997%" y="421" width="12.0718%" height="15" fill="rgb(226,171,33)" fg:x="1047" fg:w="148"/><text x="85.6497%" y="431.50">plugins_core::look..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (3 samples, 0.24%)</title><rect x="97.2268%" y="405" width="0.2447%" height="15" fill="rgb(253,99,13)" fg:x="1192" fg:w="3"/><text x="97.4768%" y="415.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (3 samples, 0.24%)</title><rect x="97.2268%" y="389" width="0.2447%" height="15" fill="rgb(244,48,7)" fg:x="1192" fg:w="3"/><text x="97.4768%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="97.2268%" y="373" width="0.2447%" height="15" fill="rgb(244,217,54)" fg:x="1192" fg:w="3"/><text x="97.4768%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="97.3899%" y="357" width="0.0816%" height="15" fill="rgb(224,15,18)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="97.3899%" y="341" width="0.0816%" height="15" fill="rgb(244,99,12)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="97.3899%" y="325" width="0.0816%" height="15" fill="rgb(233,226,8)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.3899%" y="309" width="0.0816%" height="15" fill="rgb(229,211,3)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.3899%" y="293" width="0.0816%" height="15" fill="rgb(216,140,21)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="97.3899%" y="277" width="0.0816%" height="15" fill="rgb(234,122,30)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="97.3899%" y="261" width="0.0816%" height="15" fill="rgb(236,25,46)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.3899%" y="245" width="0.0816%" height="15" fill="rgb(217,52,54)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="97.3899%" y="229" width="0.0816%" height="15" fill="rgb(222,29,26)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="97.3899%" y="213" width="0.0816%" height="15" fill="rgb(216,177,29)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.4715%" y="549" width="0.1631%" height="15" fill="rgb(247,136,51)" fg:x="1195" fg:w="2"/><text x="97.7215%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.4715%" y="533" width="0.1631%" height="15" fill="rgb(231,47,47)" fg:x="1195" fg:w="2"/><text x="97.7215%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.4715%" y="517" width="0.1631%" height="15" fill="rgb(211,192,36)" fg:x="1195" fg:w="2"/><text x="97.7215%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5530%" y="501" width="0.0816%" height="15" fill="rgb(229,156,32)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5530%" y="485" width="0.0816%" height="15" fill="rgb(248,213,20)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5530%" y="469" width="0.0816%" height="15" fill="rgb(217,64,7)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.5530%" y="453" width="0.0816%" height="15" fill="rgb(232,142,8)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.5530%" y="437" width="0.0816%" height="15" fill="rgb(224,92,44)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.5530%" y="421" width="0.0816%" height="15" fill="rgb(214,169,17)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.5530%" y="405" width="0.0816%" height="15" fill="rgb(210,59,37)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.5530%" y="389" width="0.0816%" height="15" fill="rgb(214,116,48)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.5530%" y="373" width="0.0816%" height="15" fill="rgb(244,191,6)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.5530%" y="357" width="0.0816%" height="15" fill="rgb(241,50,52)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.5530%" y="341" width="0.0816%" height="15" fill="rgb(236,75,39)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.5530%" y="325" width="0.0816%" height="15" fill="rgb(236,99,0)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5530%" y="309" width="0.0816%" height="15" fill="rgb(207,202,15)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.6346%" y="453" width="0.0816%" height="15" fill="rgb(233,207,14)" fg:x="1197" fg:w="1"/><text x="97.8846%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.6346%" y="437" width="0.0816%" height="15" fill="rgb(226,27,51)" fg:x="1197" fg:w="1"/><text x="97.8846%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.6346%" y="421" width="0.0816%" height="15" fill="rgb(206,104,42)" fg:x="1197" fg:w="1"/><text x="97.8846%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6346%" y="405" width="0.0816%" height="15" fill="rgb(212,225,4)" fg:x="1197" fg:w="1"/><text x="97.8846%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="97.6346%" y="549" width="0.1631%" height="15" fill="rgb(233,96,42)" fg:x="1197" fg:w="2"/><text x="97.8846%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.6346%" y="533" width="0.1631%" height="15" fill="rgb(229,21,32)" fg:x="1197" fg:w="2"/><text x="97.8846%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.6346%" y="517" width="0.1631%" height="15" fill="rgb(226,216,24)" fg:x="1197" fg:w="2"/><text x="97.8846%" y="527.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.6346%" y="501" width="0.1631%" height="15" fill="rgb(221,163,17)" fg:x="1197" fg:w="2"/><text x="97.8846%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.6346%" y="485" width="0.1631%" height="15" fill="rgb(216,216,42)" fg:x="1197" fg:w="2"/><text x="97.8846%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.6346%" y="469" width="0.1631%" height="15" fill="rgb(240,118,7)" fg:x="1197" fg:w="2"/><text x="97.8846%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7162%" y="453" width="0.0816%" height="15" fill="rgb(221,67,37)" fg:x="1198" fg:w="1"/><text x="97.9662%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7162%" y="437" width="0.0816%" height="15" fill="rgb(241,32,44)" fg:x="1198" fg:w="1"/><text x="97.9662%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.7162%" y="421" width="0.0816%" height="15" fill="rgb(235,204,43)" fg:x="1198" fg:w="1"/><text x="97.9662%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7162%" y="405" width="0.0816%" height="15" fill="rgb(213,116,10)" fg:x="1198" fg:w="1"/><text x="97.9662%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7162%" y="389" width="0.0816%" height="15" fill="rgb(239,15,48)" fg:x="1198" fg:w="1"/><text x="97.9662%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.7162%" y="373" width="0.0816%" height="15" fill="rgb(207,123,36)" fg:x="1198" fg:w="1"/><text x="97.9662%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7162%" y="357" width="0.0816%" height="15" fill="rgb(209,103,30)" fg:x="1198" fg:w="1"/><text x="97.9662%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7162%" y="341" width="0.0816%" height="15" fill="rgb(238,100,19)" fg:x="1198" fg:w="1"/><text x="97.9662%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.7162%" y="325" width="0.0816%" height="15" fill="rgb(244,30,14)" fg:x="1198" fg:w="1"/><text x="97.9662%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.7977%" y="389" width="0.0816%" height="15" fill="rgb(249,174,6)" fg:x="1199" fg:w="1"/><text x="98.0477%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.49%)</title><rect x="97.4715%" y="581" width="0.4894%" height="15" fill="rgb(235,213,41)" fg:x="1195" fg:w="6"/><text x="97.7215%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="97.4715%" y="565" width="0.4894%" height="15" fill="rgb(213,118,6)" fg:x="1195" fg:w="6"/><text x="97.7215%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="97.7977%" y="549" width="0.1631%" height="15" fill="rgb(235,44,51)" fg:x="1199" fg:w="2"/><text x="98.0477%" y="559.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="97.7977%" y="533" width="0.1631%" height="15" fill="rgb(217,9,53)" fg:x="1199" fg:w="2"/><text x="98.0477%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.7977%" y="517" width="0.1631%" height="15" fill="rgb(237,172,34)" fg:x="1199" fg:w="2"/><text x="98.0477%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.7977%" y="501" width="0.1631%" height="15" fill="rgb(206,206,11)" fg:x="1199" fg:w="2"/><text x="98.0477%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.7977%" y="485" width="0.1631%" height="15" fill="rgb(214,149,29)" fg:x="1199" fg:w="2"/><text x="98.0477%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.7977%" y="469" width="0.1631%" height="15" fill="rgb(208,123,3)" fg:x="1199" fg:w="2"/><text x="98.0477%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.7977%" y="453" width="0.1631%" height="15" fill="rgb(229,126,4)" fg:x="1199" fg:w="2"/><text x="98.0477%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.7977%" y="437" width="0.1631%" height="15" fill="rgb(222,92,36)" fg:x="1199" fg:w="2"/><text x="98.0477%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.7977%" y="421" width="0.1631%" height="15" fill="rgb(216,39,41)" fg:x="1199" fg:w="2"/><text x="98.0477%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.7977%" y="405" width="0.1631%" height="15" fill="rgb(253,127,28)" fg:x="1199" fg:w="2"/><text x="98.0477%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.8793%" y="389" width="0.0816%" height="15" fill="rgb(249,152,51)" fg:x="1200" fg:w="1"/><text x="98.1293%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="97.8793%" y="373" width="0.0816%" height="15" fill="rgb(209,123,42)" fg:x="1200" fg:w="1"/><text x="98.1293%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.9608%" y="549" width="0.1631%" height="15" fill="rgb(241,118,22)" fg:x="1201" fg:w="2"/><text x="98.2108%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.9608%" y="533" width="0.1631%" height="15" fill="rgb(208,25,7)" fg:x="1201" fg:w="2"/><text x="98.2108%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.9608%" y="517" width="0.1631%" height="15" fill="rgb(243,144,39)" fg:x="1201" fg:w="2"/><text x="98.2108%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0424%" y="501" width="0.0816%" height="15" fill="rgb(250,50,5)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0424%" y="485" width="0.0816%" height="15" fill="rgb(207,67,11)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0424%" y="469" width="0.0816%" height="15" fill="rgb(245,204,40)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0424%" y="453" width="0.0816%" height="15" fill="rgb(238,228,24)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.0424%" y="437" width="0.0816%" height="15" fill="rgb(217,116,22)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.0424%" y="421" width="0.0816%" height="15" fill="rgb(234,98,12)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.0424%" y="405" width="0.0816%" height="15" fill="rgb(242,170,50)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0424%" y="389" width="0.0816%" height="15" fill="rgb(235,7,5)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0424%" y="373" width="0.0816%" height="15" fill="rgb(241,114,28)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.0424%" y="357" width="0.0816%" height="15" fill="rgb(246,112,42)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.0424%" y="341" width="0.0816%" height="15" fill="rgb(248,228,14)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.0424%" y="325" width="0.0816%" height="15" fill="rgb(208,133,18)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.0424%" y="309" width="0.0816%" height="15" fill="rgb(207,35,49)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0424%" y="293" width="0.0816%" height="15" fill="rgb(205,68,36)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1240%" y="501" width="0.0816%" height="15" fill="rgb(245,62,40)" fg:x="1203" fg:w="1"/><text x="98.3740%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1240%" y="485" width="0.0816%" height="15" fill="rgb(228,27,24)" fg:x="1203" fg:w="1"/><text x="98.3740%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1240%" y="469" width="0.0816%" height="15" fill="rgb(253,19,12)" fg:x="1203" fg:w="1"/><text x="98.3740%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1240%" y="453" width="0.0816%" height="15" fill="rgb(232,28,20)" fg:x="1203" fg:w="1"/><text x="98.3740%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1240%" y="437" width="0.0816%" height="15" fill="rgb(218,35,51)" fg:x="1203" fg:w="1"/><text x="98.3740%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.2055%" y="501" width="0.0816%" height="15" fill="rgb(212,90,40)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.2055%" y="485" width="0.0816%" height="15" fill="rgb(220,172,12)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.2055%" y="469" width="0.0816%" height="15" fill="rgb(226,159,20)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.2055%" y="453" width="0.0816%" height="15" fill="rgb(234,205,16)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.2055%" y="437" width="0.0816%" height="15" fill="rgb(207,9,39)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="447.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.2055%" y="421" width="0.0816%" height="15" fill="rgb(249,143,15)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2055%" y="405" width="0.0816%" height="15" fill="rgb(253,133,29)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2055%" y="389" width="0.0816%" height="15" fill="rgb(221,187,0)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.1240%" y="549" width="0.2447%" height="15" fill="rgb(205,204,26)" fg:x="1203" fg:w="3"/><text x="98.3740%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.1240%" y="533" width="0.2447%" height="15" fill="rgb(224,68,54)" fg:x="1203" fg:w="3"/><text x="98.3740%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.1240%" y="517" width="0.2447%" height="15" fill="rgb(209,67,4)" fg:x="1203" fg:w="3"/><text x="98.3740%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2871%" y="501" width="0.0816%" height="15" fill="rgb(228,229,18)" fg:x="1205" fg:w="1"/><text x="98.5371%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2871%" y="485" width="0.0816%" height="15" fill="rgb(231,89,13)" fg:x="1205" fg:w="1"/><text x="98.5371%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.2871%" y="469" width="0.0816%" height="15" fill="rgb(210,182,18)" fg:x="1205" fg:w="1"/><text x="98.5371%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.2871%" y="453" width="0.0816%" height="15" fill="rgb(240,105,2)" fg:x="1205" fg:w="1"/><text x="98.5371%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.2871%" y="437" width="0.0816%" height="15" fill="rgb(207,170,50)" fg:x="1205" fg:w="1"/><text x="98.5371%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="98.2871%" y="421" width="0.0816%" height="15" fill="rgb(232,133,24)" fg:x="1205" fg:w="1"/><text x="98.5371%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.2871%" y="405" width="0.0816%" height="15" fill="rgb(235,166,27)" fg:x="1205" fg:w="1"/><text x="98.5371%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2871%" y="389" width="0.0816%" height="15" fill="rgb(209,19,13)" fg:x="1205" fg:w="1"/><text x="98.5371%" y="399.50"></text></g><g><title>engine::session::internal::Added::find_refs (6 samples, 0.49%)</title><rect x="97.9608%" y="581" width="0.4894%" height="15" fill="rgb(226,79,39)" fg:x="1201" fg:w="6"/><text x="98.2108%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.49%)</title><rect x="97.9608%" y="565" width="0.4894%" height="15" fill="rgb(222,163,10)" fg:x="1201" fg:w="6"/><text x="98.2108%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3687%" y="549" width="0.0816%" height="15" fill="rgb(214,44,19)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3687%" y="533" width="0.0816%" height="15" fill="rgb(210,217,13)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.3687%" y="517" width="0.0816%" height="15" fill="rgb(237,61,54)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.3687%" y="501" width="0.0816%" height="15" fill="rgb(226,184,24)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3687%" y="485" width="0.0816%" height="15" fill="rgb(223,226,4)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.4502%" y="517" width="0.0816%" height="15" fill="rgb(210,26,41)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.4502%" y="565" width="0.1631%" height="15" fill="rgb(220,221,6)" fg:x="1207" fg:w="2"/><text x="98.7002%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.4502%" y="549" width="0.1631%" height="15" fill="rgb(225,89,49)" fg:x="1207" fg:w="2"/><text x="98.7002%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.4502%" y="533" width="0.1631%" height="15" fill="rgb(218,70,45)" fg:x="1207" fg:w="2"/><text x="98.7002%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.5318%" y="517" width="0.0816%" height="15" fill="rgb(238,166,21)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5318%" y="501" width="0.0816%" height="15" fill="rgb(224,141,44)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.5318%" y="485" width="0.0816%" height="15" fill="rgb(230,12,49)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.5318%" y="469" width="0.0816%" height="15" fill="rgb(212,174,12)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.5318%" y="453" width="0.0816%" height="15" fill="rgb(246,67,9)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.5318%" y="437" width="0.0816%" height="15" fill="rgb(239,35,23)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.5318%" y="421" width="0.0816%" height="15" fill="rgb(211,167,0)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.5318%" y="405" width="0.0816%" height="15" fill="rgb(225,119,45)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6134%" y="501" width="0.0816%" height="15" fill="rgb(210,162,6)" fg:x="1209" fg:w="1"/><text x="98.8634%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6134%" y="485" width="0.0816%" height="15" fill="rgb(208,118,35)" fg:x="1209" fg:w="1"/><text x="98.8634%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6134%" y="469" width="0.0816%" height="15" fill="rgb(239,4,53)" fg:x="1209" fg:w="1"/><text x="98.8634%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6134%" y="453" width="0.0816%" height="15" fill="rgb(213,130,21)" fg:x="1209" fg:w="1"/><text x="98.8634%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6134%" y="437" width="0.0816%" height="15" fill="rgb(235,148,0)" fg:x="1209" fg:w="1"/><text x="98.8634%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6134%" y="421" width="0.0816%" height="15" fill="rgb(244,224,18)" fg:x="1209" fg:w="1"/><text x="98.8634%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="98.6134%" y="405" width="0.0816%" height="15" fill="rgb(211,214,4)" fg:x="1209" fg:w="1"/><text x="98.8634%" y="415.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.31%)</title><rect x="97.4715%" y="597" width="1.3051%" height="15" fill="rgb(206,119,25)" fg:x="1195" fg:w="16"/><text x="97.7215%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.33%)</title><rect x="98.4502%" y="581" width="0.3263%" height="15" fill="rgb(243,93,47)" fg:x="1207" fg:w="4"/><text x="98.7002%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="98.6134%" y="565" width="0.1631%" height="15" fill="rgb(224,194,6)" fg:x="1209" fg:w="2"/><text x="98.8634%" y="575.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="98.6134%" y="549" width="0.1631%" height="15" fill="rgb(243,229,6)" fg:x="1209" fg:w="2"/><text x="98.8634%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.6134%" y="533" width="0.1631%" height="15" fill="rgb(207,23,50)" fg:x="1209" fg:w="2"/><text x="98.8634%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.6134%" y="517" width="0.1631%" height="15" fill="rgb(253,192,32)" fg:x="1209" fg:w="2"/><text x="98.8634%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.6949%" y="501" width="0.0816%" height="15" fill="rgb(213,21,6)" fg:x="1210" fg:w="1"/><text x="98.9449%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7765%" y="517" width="0.0816%" height="15" fill="rgb(243,151,13)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7765%" y="501" width="0.0816%" height="15" fill="rgb(233,165,41)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7765%" y="485" width="0.0816%" height="15" fill="rgb(246,176,45)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7765%" y="469" width="0.0816%" height="15" fill="rgb(217,170,52)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7765%" y="453" width="0.0816%" height="15" fill="rgb(214,203,54)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7765%" y="437" width="0.0816%" height="15" fill="rgb(248,215,49)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.7765%" y="421" width="0.0816%" height="15" fill="rgb(208,46,10)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.7765%" y="405" width="0.0816%" height="15" fill="rgb(254,5,31)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.7765%" y="389" width="0.0816%" height="15" fill="rgb(222,104,33)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.7765%" y="373" width="0.0816%" height="15" fill="rgb(248,49,16)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.7765%" y="357" width="0.0816%" height="15" fill="rgb(232,198,41)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8581%" y="517" width="0.0816%" height="15" fill="rgb(214,125,3)" fg:x="1212" fg:w="1"/><text x="99.1081%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.8581%" y="501" width="0.0816%" height="15" fill="rgb(229,220,28)" fg:x="1212" fg:w="1"/><text x="99.1081%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.8581%" y="485" width="0.0816%" height="15" fill="rgb(222,64,37)" fg:x="1212" fg:w="1"/><text x="99.1081%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8581%" y="469" width="0.0816%" height="15" fill="rgb(249,184,13)" fg:x="1212" fg:w="1"/><text x="99.1081%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.8581%" y="453" width="0.0816%" height="15" fill="rgb(252,176,6)" fg:x="1212" fg:w="1"/><text x="99.1081%" y="463.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.8581%" y="437" width="0.0816%" height="15" fill="rgb(228,153,7)" fg:x="1212" fg:w="1"/><text x="99.1081%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8581%" y="421" width="0.0816%" height="15" fill="rgb(242,193,5)" fg:x="1212" fg:w="1"/><text x="99.1081%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.8581%" y="405" width="0.0816%" height="15" fill="rgb(232,140,9)" fg:x="1212" fg:w="1"/><text x="99.1081%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.7765%" y="565" width="0.2447%" height="15" fill="rgb(213,222,16)" fg:x="1211" fg:w="3"/><text x="99.0265%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.7765%" y="549" width="0.2447%" height="15" fill="rgb(222,75,50)" fg:x="1211" fg:w="3"/><text x="99.0265%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.7765%" y="533" width="0.2447%" height="15" fill="rgb(205,180,2)" fg:x="1211" fg:w="3"/><text x="99.0265%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9396%" y="517" width="0.0816%" height="15" fill="rgb(216,34,7)" fg:x="1213" fg:w="1"/><text x="99.1896%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9396%" y="501" width="0.0816%" height="15" fill="rgb(253,16,32)" fg:x="1213" fg:w="1"/><text x="99.1896%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.0212%" y="533" width="0.0816%" height="15" fill="rgb(208,97,28)" fg:x="1214" fg:w="1"/><text x="99.2712%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.0212%" y="517" width="0.0816%" height="15" fill="rgb(225,92,11)" fg:x="1214" fg:w="1"/><text x="99.2712%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.0212%" y="501" width="0.0816%" height="15" fill="rgb(243,38,12)" fg:x="1214" fg:w="1"/><text x="99.2712%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.0212%" y="485" width="0.0816%" height="15" fill="rgb(208,139,16)" fg:x="1214" fg:w="1"/><text x="99.2712%" y="495.50"></text></g><g><title>engine::session::internal::Added::find_refs (5 samples, 0.41%)</title><rect x="98.7765%" y="597" width="0.4078%" height="15" fill="rgb(227,24,9)" fg:x="1211" fg:w="5"/><text x="99.0265%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.41%)</title><rect x="98.7765%" y="581" width="0.4078%" height="15" fill="rgb(206,62,11)" fg:x="1211" fg:w="5"/><text x="99.0265%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.0212%" y="565" width="0.1631%" height="15" fill="rgb(228,134,27)" fg:x="1214" fg:w="2"/><text x="99.2712%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.0212%" y="549" width="0.1631%" height="15" fill="rgb(205,55,33)" fg:x="1214" fg:w="2"/><text x="99.2712%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="99.1028%" y="533" width="0.0816%" height="15" fill="rgb(243,75,43)" fg:x="1215" fg:w="1"/><text x="99.3528%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="99.1028%" y="517" width="0.0816%" height="15" fill="rgb(223,27,42)" fg:x="1215" fg:w="1"/><text x="99.3528%" y="527.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="99.1028%" y="501" width="0.0816%" height="15" fill="rgb(232,189,33)" fg:x="1215" fg:w="1"/><text x="99.3528%" y="511.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="99.1028%" y="485" width="0.0816%" height="15" fill="rgb(210,9,39)" fg:x="1215" fg:w="1"/><text x="99.3528%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.1028%" y="469" width="0.0816%" height="15" fill="rgb(242,85,26)" fg:x="1215" fg:w="1"/><text x="99.3528%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.1028%" y="453" width="0.0816%" height="15" fill="rgb(248,44,4)" fg:x="1215" fg:w="1"/><text x="99.3528%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.1028%" y="437" width="0.0816%" height="15" fill="rgb(250,96,46)" fg:x="1215" fg:w="1"/><text x="99.3528%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.1028%" y="421" width="0.0816%" height="15" fill="rgb(229,116,26)" fg:x="1215" fg:w="1"/><text x="99.3528%" y="431.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::expecting (1 samples, 0.08%)</title><rect x="99.1028%" y="405" width="0.0816%" height="15" fill="rgb(246,94,34)" fg:x="1215" fg:w="1"/><text x="99.3528%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.1843%" y="581" width="0.0816%" height="15" fill="rgb(251,73,21)" fg:x="1216" fg:w="1"/><text x="99.4343%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1843%" y="565" width="0.0816%" height="15" fill="rgb(254,121,25)" fg:x="1216" fg:w="1"/><text x="99.4343%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1843%" y="549" width="0.0816%" height="15" fill="rgb(215,161,49)" fg:x="1216" fg:w="1"/><text x="99.4343%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1843%" y="533" width="0.0816%" height="15" fill="rgb(221,43,13)" fg:x="1216" fg:w="1"/><text x="99.4343%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1843%" y="517" width="0.0816%" height="15" fill="rgb(249,5,37)" fg:x="1216" fg:w="1"/><text x="99.4343%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1843%" y="501" width="0.0816%" height="15" fill="rgb(226,25,44)" fg:x="1216" fg:w="1"/><text x="99.4343%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1843%" y="485" width="0.0816%" height="15" fill="rgb(238,189,16)" fg:x="1216" fg:w="1"/><text x="99.4343%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1843%" y="469" width="0.0816%" height="15" fill="rgb(251,186,8)" fg:x="1216" fg:w="1"/><text x="99.4343%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1843%" y="453" width="0.0816%" height="15" fill="rgb(254,34,31)" fg:x="1216" fg:w="1"/><text x="99.4343%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1843%" y="437" width="0.0816%" height="15" fill="rgb(225,215,27)" fg:x="1216" fg:w="1"/><text x="99.4343%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="99.1843%" y="421" width="0.0816%" height="15" fill="rgb(221,192,48)" fg:x="1216" fg:w="1"/><text x="99.4343%" y="431.50"></text></g><g><title>engine::session::Session::load_entity (23 samples, 1.88%)</title><rect x="97.4715%" y="613" width="1.8760%" height="15" fill="rgb(219,137,20)" fg:x="1195" fg:w="23"/><text x="97.7215%" y="623.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.1843%" y="597" width="0.1631%" height="15" fill="rgb(219,84,11)" fg:x="1216" fg:w="2"/><text x="99.4343%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.2659%" y="581" width="0.0816%" height="15" fill="rgb(224,10,23)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.2659%" y="565" width="0.0816%" height="15" fill="rgb(248,22,39)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2659%" y="549" width="0.0816%" height="15" fill="rgb(212,154,20)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2659%" y="533" width="0.0816%" height="15" fill="rgb(236,199,50)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2659%" y="517" width="0.0816%" height="15" fill="rgb(211,9,17)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2659%" y="501" width="0.0816%" height="15" fill="rgb(243,216,36)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2659%" y="485" width="0.0816%" height="15" fill="rgb(250,2,10)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2659%" y="469" width="0.0816%" height="15" fill="rgb(226,50,48)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2659%" y="453" width="0.0816%" height="15" fill="rgb(243,81,16)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2659%" y="437" width="0.0816%" height="15" fill="rgb(250,14,2)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2659%" y="421" width="0.0816%" height="15" fill="rgb(233,135,29)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.3475%" y="613" width="0.0816%" height="15" fill="rgb(224,64,43)" fg:x="1218" fg:w="1"/><text x="99.5975%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.3475%" y="597" width="0.0816%" height="15" fill="rgb(238,84,13)" fg:x="1218" fg:w="1"/><text x="99.5975%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.3475%" y="581" width="0.0816%" height="15" fill="rgb(253,48,26)" fg:x="1218" fg:w="1"/><text x="99.5975%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.3475%" y="565" width="0.0816%" height="15" fill="rgb(205,223,31)" fg:x="1218" fg:w="1"/><text x="99.5975%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3475%" y="549" width="0.0816%" height="15" fill="rgb(221,41,32)" fg:x="1218" fg:w="1"/><text x="99.5975%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3475%" y="533" width="0.0816%" height="15" fill="rgb(213,158,31)" fg:x="1218" fg:w="1"/><text x="99.5975%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3475%" y="517" width="0.0816%" height="15" fill="rgb(245,126,43)" fg:x="1218" fg:w="1"/><text x="99.5975%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3475%" y="501" width="0.0816%" height="15" fill="rgb(227,7,22)" fg:x="1218" fg:w="1"/><text x="99.5975%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.4290%" y="565" width="0.0816%" height="15" fill="rgb(252,90,44)" fg:x="1219" fg:w="1"/><text x="99.6790%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.4290%" y="549" width="0.0816%" height="15" fill="rgb(253,91,0)" fg:x="1219" fg:w="1"/><text x="99.6790%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.4290%" y="533" width="0.0816%" height="15" fill="rgb(252,175,49)" fg:x="1219" fg:w="1"/><text x="99.6790%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4290%" y="517" width="0.0816%" height="15" fill="rgb(246,150,1)" fg:x="1219" fg:w="1"/><text x="99.6790%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4290%" y="501" width="0.0816%" height="15" fill="rgb(241,192,25)" fg:x="1219" fg:w="1"/><text x="99.6790%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4290%" y="485" width="0.0816%" height="15" fill="rgb(239,187,11)" fg:x="1219" fg:w="1"/><text x="99.6790%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.5106%" y="565" width="0.0816%" height="15" fill="rgb(218,202,51)" fg:x="1220" fg:w="1"/><text x="99.7606%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5106%" y="549" width="0.0816%" height="15" fill="rgb(225,176,8)" fg:x="1220" fg:w="1"/><text x="99.7606%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5106%" y="533" width="0.0816%" height="15" fill="rgb(219,122,41)" fg:x="1220" fg:w="1"/><text x="99.7606%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5106%" y="517" width="0.0816%" height="15" fill="rgb(248,140,20)" fg:x="1220" fg:w="1"/><text x="99.7606%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5106%" y="501" width="0.0816%" height="15" fill="rgb(245,41,37)" fg:x="1220" fg:w="1"/><text x="99.7606%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5106%" y="485" width="0.0816%" height="15" fill="rgb(235,82,39)" fg:x="1220" fg:w="1"/><text x="99.7606%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5106%" y="469" width="0.0816%" height="15" fill="rgb(230,108,42)" fg:x="1220" fg:w="1"/><text x="99.7606%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5106%" y="453" width="0.0816%" height="15" fill="rgb(215,150,50)" fg:x="1220" fg:w="1"/><text x="99.7606%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.5106%" y="437" width="0.0816%" height="15" fill="rgb(233,212,5)" fg:x="1220" fg:w="1"/><text x="99.7606%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5922%" y="501" width="0.0816%" height="15" fill="rgb(245,80,22)" fg:x="1221" fg:w="1"/><text x="99.8422%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5922%" y="485" width="0.0816%" height="15" fill="rgb(238,129,16)" fg:x="1221" fg:w="1"/><text x="99.8422%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5922%" y="469" width="0.0816%" height="15" fill="rgb(240,19,0)" fg:x="1221" fg:w="1"/><text x="99.8422%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.33%)</title><rect x="99.4290%" y="597" width="0.3263%" height="15" fill="rgb(232,42,35)" fg:x="1219" fg:w="4"/><text x="99.6790%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.33%)</title><rect x="99.4290%" y="581" width="0.3263%" height="15" fill="rgb(223,130,24)" fg:x="1219" fg:w="4"/><text x="99.6790%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.5922%" y="565" width="0.1631%" height="15" fill="rgb(237,16,22)" fg:x="1221" fg:w="2"/><text x="99.8422%" y="575.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.5922%" y="549" width="0.1631%" height="15" fill="rgb(248,192,20)" fg:x="1221" fg:w="2"/><text x="99.8422%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.5922%" y="533" width="0.1631%" height="15" fill="rgb(233,167,2)" fg:x="1221" fg:w="2"/><text x="99.8422%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.5922%" y="517" width="0.1631%" height="15" fill="rgb(252,71,44)" fg:x="1221" fg:w="2"/><text x="99.8422%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6737%" y="501" width="0.0816%" height="15" fill="rgb(238,37,47)" fg:x="1222" fg:w="1"/><text x="99.9237%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6737%" y="485" width="0.0816%" height="15" fill="rgb(214,202,54)" fg:x="1222" fg:w="1"/><text x="99.9237%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6737%" y="469" width="0.0816%" height="15" fill="rgb(254,165,40)" fg:x="1222" fg:w="1"/><text x="99.9237%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="99.7553%" y="581" width="0.1631%" height="15" fill="rgb(246,173,38)" fg:x="1223" fg:w="2"/><text x="100.0053%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="99.7553%" y="565" width="0.1631%" height="15" fill="rgb(215,3,27)" fg:x="1223" fg:w="2"/><text x="100.0053%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="99.7553%" y="549" width="0.1631%" height="15" fill="rgb(239,169,51)" fg:x="1223" fg:w="2"/><text x="100.0053%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="99.7553%" y="533" width="0.1631%" height="15" fill="rgb(212,5,25)" fg:x="1223" fg:w="2"/><text x="100.0053%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="99.7553%" y="517" width="0.1631%" height="15" fill="rgb(243,45,17)" fg:x="1223" fg:w="2"/><text x="100.0053%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.16%)</title><rect x="99.7553%" y="501" width="0.1631%" height="15" fill="rgb(242,97,9)" fg:x="1223" fg:w="2"/><text x="100.0053%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="99.7553%" y="485" width="0.1631%" height="15" fill="rgb(228,71,31)" fg:x="1223" fg:w="2"/><text x="100.0053%" y="495.50"></text></g><g><title>all (1,226 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(252,184,16)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="1007.50"></text></g><g><title>simple-92a9904a (1,226 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(236,169,46)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="991.50">simple-92a9904a</text></g><g><title>_start (1,226 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(207,17,47)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="975.50">_start</text></g><g><title>__libc_start_main (1,226 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(206,201,28)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="959.50">__libc_start_main</text></g><g><title>main (1,226 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(224,184,23)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="943.50">main</text></g><g><title>std::rt::lang_start_internal (1,226 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(208,139,48)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,226 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(208,130,10)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,226 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(211,213,45)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,226 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(235,100,30)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,226 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(206,144,31)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="863.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,226 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(224,200,26)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,226 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(247,104,53)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,226 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(220,14,17)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="815.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,226 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(230,140,40)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="799.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,226 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(229,2,41)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="783.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,226 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(232,89,16)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,226 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(247,59,52)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="751.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,226 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(226,110,21)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="735.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,226 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(224,176,43)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="719.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (269 samples, 21.94%)</title><rect x="78.0587%" y="693" width="21.9413%" height="15" fill="rgb(221,73,6)" fg:x="957" fg:w="269"/><text x="78.3087%" y="703.50">&lt;criterion::routine::Function&lt;M,F,T..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (269 samples, 21.94%)</title><rect x="78.0587%" y="677" width="21.9413%" height="15" fill="rgb(232,78,19)" fg:x="957" fg:w="269"/><text x="78.3087%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (269 samples, 21.94%)</title><rect x="78.0587%" y="661" width="21.9413%" height="15" fill="rgb(233,112,48)" fg:x="957" fg:w="269"/><text x="78.3087%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (184 samples, 15.01%)</title><rect x="84.9918%" y="645" width="15.0082%" height="15" fill="rgb(243,131,47)" fg:x="1042" fg:w="184"/><text x="85.2418%" y="655.50">engine::session::Sessio..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (184 samples, 15.01%)</title><rect x="84.9918%" y="629" width="15.0082%" height="15" fill="rgb(226,51,1)" fg:x="1042" fg:w="184"/><text x="85.2418%" y="639.50">engine::session::Sessio..</text></g><g><title>kernel::model::entry::EntryResolver::world (7 samples, 0.57%)</title><rect x="99.4290%" y="613" width="0.5710%" height="15" fill="rgb(247,58,7)" fg:x="1219" fg:w="7"/><text x="99.6790%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="99.7553%" y="597" width="0.2447%" height="15" fill="rgb(209,7,32)" fg:x="1223" fg:w="3"/><text x="100.0053%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.9184%" y="581" width="0.0816%" height="15" fill="rgb(209,39,41)" fg:x="1225" fg:w="1"/><text x="100.1684%" y="591.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="99.9184%" y="565" width="0.0816%" height="15" fill="rgb(226,182,46)" fg:x="1225" fg:w="1"/><text x="100.1684%" y="575.50"></text></g></svg></svg>