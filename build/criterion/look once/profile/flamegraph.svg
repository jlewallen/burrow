<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1233"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="693" width="0.0811%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0811%" y="581" width="0.0811%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3311%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0811%" y="565" width="0.0811%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3311%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.1622%" y="549" width="0.0811%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.4122%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1622%" y="533" width="0.0811%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.4122%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2433%" y="533" width="0.0811%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.4933%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0811%" y="677" width="0.3244%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="4"/><text x="0.3311%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="0.0811%" y="661" width="0.3244%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="4"/><text x="0.3311%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0811%" y="645" width="0.3244%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="4"/><text x="0.3311%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0811%" y="629" width="0.3244%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="4"/><text x="0.3311%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (4 samples, 0.32%)</title><rect x="0.0811%" y="613" width="0.3244%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="4"/><text x="0.3311%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="0.0811%" y="597" width="0.3244%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="4"/><text x="0.3311%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.1622%" y="581" width="0.2433%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="3"/><text x="0.4122%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.1622%" y="565" width="0.2433%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="3"/><text x="0.4122%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.2433%" y="549" width="0.1622%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="2"/><text x="0.4933%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3244%" y="533" width="0.0811%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="1"/><text x="0.5744%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3244%" y="517" width="0.0811%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="0.5744%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="0.0000%" y="709" width="0.4866%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="6"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (5 samples, 0.41%)</title><rect x="0.0811%" y="693" width="0.4055%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="5"/><text x="0.3311%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4055%" y="677" width="0.0811%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="0.6555%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.4866%" y="597" width="0.0811%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="0.7366%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.4866%" y="581" width="0.0811%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="1"/><text x="0.7366%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.4866%" y="565" width="0.0811%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="1"/><text x="0.7366%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.4866%" y="549" width="0.0811%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="0.7366%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4866%" y="533" width="0.0811%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="0.7366%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.4866%" y="517" width="0.0811%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="0.7366%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4866%" y="501" width="0.0811%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="0.7366%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.4866%" y="485" width="0.0811%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="1"/><text x="0.7366%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4866%" y="469" width="0.0811%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="1"/><text x="0.7366%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.4866%" y="453" width="0.0811%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="1"/><text x="0.7366%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4866%" y="437" width="0.0811%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="1"/><text x="0.7366%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4866%" y="421" width="0.0811%" height="15" fill="rgb(229,88,8)" fg:x="6" fg:w="1"/><text x="0.7366%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="0.4866%" y="629" width="0.1622%" height="15" fill="rgb(213,181,19)" fg:x="6" fg:w="2"/><text x="0.7366%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="0.4866%" y="613" width="0.1622%" height="15" fill="rgb(254,191,54)" fg:x="6" fg:w="2"/><text x="0.7366%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="0.5677%" y="597" width="0.0811%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="1"/><text x="0.8177%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.5677%" y="581" width="0.0811%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="1"/><text x="0.8177%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.5677%" y="565" width="0.0811%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="1"/><text x="0.8177%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.5677%" y="549" width="0.0811%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="1"/><text x="0.8177%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.5677%" y="533" width="0.0811%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="1"/><text x="0.8177%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.6488%" y="629" width="0.0811%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="0.8988%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.6488%" y="613" width="0.0811%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="0.8988%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.6488%" y="597" width="0.0811%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="0.8988%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.6488%" y="581" width="0.0811%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="1"/><text x="0.8988%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="0.7299%" y="501" width="0.0811%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="1"/><text x="0.9799%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7299%" y="485" width="0.0811%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="1"/><text x="0.9799%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="0.7299%" y="469" width="0.0811%" height="15" fill="rgb(206,96,30)" fg:x="9" fg:w="1"/><text x="0.9799%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7299%" y="453" width="0.0811%" height="15" fill="rgb(218,138,4)" fg:x="9" fg:w="1"/><text x="0.9799%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="0.7299%" y="437" width="0.0811%" height="15" fill="rgb(250,191,14)" fg:x="9" fg:w="1"/><text x="0.9799%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7299%" y="421" width="0.0811%" height="15" fill="rgb(239,60,40)" fg:x="9" fg:w="1"/><text x="0.9799%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="0.7299%" y="405" width="0.0811%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="1"/><text x="0.9799%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="0.7299%" y="389" width="0.0811%" height="15" fill="rgb(225,35,8)" fg:x="9" fg:w="1"/><text x="0.9799%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7299%" y="373" width="0.0811%" height="15" fill="rgb(250,213,24)" fg:x="9" fg:w="1"/><text x="0.9799%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.7299%" y="357" width="0.0811%" height="15" fill="rgb(247,123,22)" fg:x="9" fg:w="1"/><text x="0.9799%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="0.8110%" y="501" width="0.0811%" height="15" fill="rgb(231,138,38)" fg:x="10" fg:w="1"/><text x="1.0610%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.8110%" y="485" width="0.0811%" height="15" fill="rgb(231,145,46)" fg:x="10" fg:w="1"/><text x="1.0610%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="0.8110%" y="469" width="0.0811%" height="15" fill="rgb(251,118,11)" fg:x="10" fg:w="1"/><text x="1.0610%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (6 samples, 0.49%)</title><rect x="0.4866%" y="677" width="0.4866%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="6"/><text x="0.7366%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.49%)</title><rect x="0.4866%" y="661" width="0.4866%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="6"/><text x="0.7366%" y="671.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="0.4866%" y="645" width="0.4866%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="6"/><text x="0.7366%" y="655.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="0.7299%" y="629" width="0.2433%" height="15" fill="rgb(227,1,9)" fg:x="9" fg:w="3"/><text x="0.9799%" y="639.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="0.7299%" y="613" width="0.2433%" height="15" fill="rgb(248,47,43)" fg:x="9" fg:w="3"/><text x="0.9799%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="0.7299%" y="597" width="0.2433%" height="15" fill="rgb(221,10,30)" fg:x="9" fg:w="3"/><text x="0.9799%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="0.7299%" y="581" width="0.2433%" height="15" fill="rgb(210,229,1)" fg:x="9" fg:w="3"/><text x="0.9799%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="0.7299%" y="565" width="0.2433%" height="15" fill="rgb(222,148,37)" fg:x="9" fg:w="3"/><text x="0.9799%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="0.7299%" y="549" width="0.2433%" height="15" fill="rgb(234,67,33)" fg:x="9" fg:w="3"/><text x="0.9799%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="0.7299%" y="533" width="0.2433%" height="15" fill="rgb(247,98,35)" fg:x="9" fg:w="3"/><text x="0.9799%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="0.7299%" y="517" width="0.2433%" height="15" fill="rgb(247,138,52)" fg:x="9" fg:w="3"/><text x="0.9799%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8921%" y="501" width="0.0811%" height="15" fill="rgb(213,79,30)" fg:x="11" fg:w="1"/><text x="1.1421%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.8921%" y="485" width="0.0811%" height="15" fill="rgb(246,177,23)" fg:x="11" fg:w="1"/><text x="1.1421%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="0.8921%" y="469" width="0.0811%" height="15" fill="rgb(230,62,27)" fg:x="11" fg:w="1"/><text x="1.1421%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8921%" y="453" width="0.0811%" height="15" fill="rgb(216,154,8)" fg:x="11" fg:w="1"/><text x="1.1421%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.8921%" y="437" width="0.0811%" height="15" fill="rgb(244,35,45)" fg:x="11" fg:w="1"/><text x="1.1421%" y="447.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="0.9732%" y="677" width="0.0811%" height="15" fill="rgb(251,115,12)" fg:x="12" fg:w="1"/><text x="1.2232%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="0.9732%" y="661" width="0.0811%" height="15" fill="rgb(240,54,50)" fg:x="12" fg:w="1"/><text x="1.2232%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="0.9732%" y="645" width="0.0811%" height="15" fill="rgb(233,84,52)" fg:x="12" fg:w="1"/><text x="1.2232%" y="655.50"></text></g><g><title>dlerror (4 samples, 0.32%)</title><rect x="1.0543%" y="629" width="0.3244%" height="15" fill="rgb(207,117,47)" fg:x="13" fg:w="4"/><text x="1.3043%" y="639.50"></text></g><g><title>__asprintf (3 samples, 0.24%)</title><rect x="1.1354%" y="613" width="0.2433%" height="15" fill="rgb(249,43,39)" fg:x="14" fg:w="3"/><text x="1.3854%" y="623.50"></text></g><g><title>_IO_default_uflow (1 samples, 0.08%)</title><rect x="1.2976%" y="597" width="0.0811%" height="15" fill="rgb(209,38,44)" fg:x="16" fg:w="1"/><text x="1.5476%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (17 samples, 1.38%)</title><rect x="0.4866%" y="709" width="1.3788%" height="15" fill="rgb(236,212,23)" fg:x="6" fg:w="17"/><text x="0.7366%" y="719.50"></text></g><g><title>engine::session::Session::new (17 samples, 1.38%)</title><rect x="0.4866%" y="693" width="1.3788%" height="15" fill="rgb(242,79,21)" fg:x="6" fg:w="17"/><text x="0.7366%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (10 samples, 0.81%)</title><rect x="1.0543%" y="677" width="0.8110%" height="15" fill="rgb(211,96,35)" fg:x="13" fg:w="10"/><text x="1.3043%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (10 samples, 0.81%)</title><rect x="1.0543%" y="661" width="0.8110%" height="15" fill="rgb(253,215,40)" fg:x="13" fg:w="10"/><text x="1.3043%" y="671.50"></text></g><g><title>libloading::os::unix::Library::open (10 samples, 0.81%)</title><rect x="1.0543%" y="645" width="0.8110%" height="15" fill="rgb(211,81,21)" fg:x="13" fg:w="10"/><text x="1.3043%" y="655.50"></text></g><g><title>dlopen (6 samples, 0.49%)</title><rect x="1.3788%" y="629" width="0.4866%" height="15" fill="rgb(208,190,38)" fg:x="17" fg:w="6"/><text x="1.6288%" y="639.50"></text></g><g><title>_dl_catch_error (6 samples, 0.49%)</title><rect x="1.3788%" y="613" width="0.4866%" height="15" fill="rgb(235,213,38)" fg:x="17" fg:w="6"/><text x="1.6288%" y="623.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.49%)</title><rect x="1.3788%" y="597" width="0.4866%" height="15" fill="rgb(237,122,38)" fg:x="17" fg:w="6"/><text x="1.6288%" y="607.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.49%)</title><rect x="1.3788%" y="581" width="0.4866%" height="15" fill="rgb(244,218,35)" fg:x="17" fg:w="6"/><text x="1.6288%" y="591.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.49%)</title><rect x="1.3788%" y="565" width="0.4866%" height="15" fill="rgb(240,68,47)" fg:x="17" fg:w="6"/><text x="1.6288%" y="575.50"></text></g><g><title>_dl_signal_error (1 samples, 0.08%)</title><rect x="1.7843%" y="549" width="0.0811%" height="15" fill="rgb(210,16,53)" fg:x="22" fg:w="1"/><text x="2.0343%" y="559.50"></text></g><g><title>_dl_exception_create (1 samples, 0.08%)</title><rect x="1.7843%" y="533" width="0.0811%" height="15" fill="rgb(235,124,12)" fg:x="22" fg:w="1"/><text x="2.0343%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="1.8654%" y="693" width="0.0811%" height="15" fill="rgb(224,169,11)" fg:x="23" fg:w="1"/><text x="2.1154%" y="703.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.9465%" y="613" width="0.0811%" height="15" fill="rgb(250,166,2)" fg:x="24" fg:w="1"/><text x="2.1965%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.9465%" y="597" width="0.0811%" height="15" fill="rgb(242,216,29)" fg:x="24" fg:w="1"/><text x="2.1965%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.9465%" y="581" width="0.0811%" height="15" fill="rgb(230,116,27)" fg:x="24" fg:w="1"/><text x="2.1965%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.9465%" y="565" width="0.0811%" height="15" fill="rgb(228,99,48)" fg:x="24" fg:w="1"/><text x="2.1965%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.0276%" y="597" width="0.1622%" height="15" fill="rgb(253,11,6)" fg:x="25" fg:w="2"/><text x="2.2776%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.0276%" y="581" width="0.1622%" height="15" fill="rgb(247,143,39)" fg:x="25" fg:w="2"/><text x="2.2776%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="2.0276%" y="565" width="0.1622%" height="15" fill="rgb(236,97,10)" fg:x="25" fg:w="2"/><text x="2.2776%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.0276%" y="549" width="0.1622%" height="15" fill="rgb(233,208,19)" fg:x="25" fg:w="2"/><text x="2.2776%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.1087%" y="533" width="0.0811%" height="15" fill="rgb(216,164,2)" fg:x="26" fg:w="1"/><text x="2.3587%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.1087%" y="517" width="0.0811%" height="15" fill="rgb(220,129,5)" fg:x="26" fg:w="1"/><text x="2.3587%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.1087%" y="501" width="0.0811%" height="15" fill="rgb(242,17,10)" fg:x="26" fg:w="1"/><text x="2.3587%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.1898%" y="581" width="0.0811%" height="15" fill="rgb(242,107,0)" fg:x="27" fg:w="1"/><text x="2.4398%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.1898%" y="565" width="0.0811%" height="15" fill="rgb(251,28,31)" fg:x="27" fg:w="1"/><text x="2.4398%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.1898%" y="549" width="0.0811%" height="15" fill="rgb(233,223,10)" fg:x="27" fg:w="1"/><text x="2.4398%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.2709%" y="565" width="0.0811%" height="15" fill="rgb(215,21,27)" fg:x="28" fg:w="1"/><text x="2.5209%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2709%" y="549" width="0.0811%" height="15" fill="rgb(232,23,21)" fg:x="28" fg:w="1"/><text x="2.5209%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.3520%" y="549" width="0.0811%" height="15" fill="rgb(244,5,23)" fg:x="29" fg:w="1"/><text x="2.6020%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.3520%" y="533" width="0.0811%" height="15" fill="rgb(226,81,46)" fg:x="29" fg:w="1"/><text x="2.6020%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.3520%" y="517" width="0.0811%" height="15" fill="rgb(247,70,30)" fg:x="29" fg:w="1"/><text x="2.6020%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.3520%" y="565" width="0.1622%" height="15" fill="rgb(212,68,19)" fg:x="29" fg:w="2"/><text x="2.6020%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4331%" y="549" width="0.0811%" height="15" fill="rgb(240,187,13)" fg:x="30" fg:w="1"/><text x="2.6831%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4331%" y="533" width="0.0811%" height="15" fill="rgb(223,113,26)" fg:x="30" fg:w="1"/><text x="2.6831%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.4331%" y="517" width="0.0811%" height="15" fill="rgb(206,192,2)" fg:x="30" fg:w="1"/><text x="2.6831%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.4331%" y="501" width="0.0811%" height="15" fill="rgb(241,108,4)" fg:x="30" fg:w="1"/><text x="2.6831%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="2.2709%" y="581" width="0.3244%" height="15" fill="rgb(247,173,49)" fg:x="28" fg:w="4"/><text x="2.5209%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.5142%" y="565" width="0.0811%" height="15" fill="rgb(224,114,35)" fg:x="31" fg:w="1"/><text x="2.7642%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.5142%" y="549" width="0.0811%" height="15" fill="rgb(245,159,27)" fg:x="31" fg:w="1"/><text x="2.7642%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.73%)</title><rect x="1.9465%" y="629" width="0.7299%" height="15" fill="rgb(245,172,44)" fg:x="24" fg:w="9"/><text x="2.1965%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="2.0276%" y="613" width="0.6488%" height="15" fill="rgb(236,23,11)" fg:x="25" fg:w="8"/><text x="2.2776%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="2.1898%" y="597" width="0.4866%" height="15" fill="rgb(205,117,38)" fg:x="27" fg:w="6"/><text x="2.4398%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.5953%" y="581" width="0.0811%" height="15" fill="rgb(237,72,25)" fg:x="32" fg:w="1"/><text x="2.8453%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.6764%" y="597" width="0.0811%" height="15" fill="rgb(244,70,9)" fg:x="33" fg:w="1"/><text x="2.9264%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.6764%" y="629" width="0.1622%" height="15" fill="rgb(217,125,39)" fg:x="33" fg:w="2"/><text x="2.9264%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="2.6764%" y="613" width="0.1622%" height="15" fill="rgb(235,36,10)" fg:x="33" fg:w="2"/><text x="2.9264%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.7575%" y="597" width="0.0811%" height="15" fill="rgb(251,123,47)" fg:x="34" fg:w="1"/><text x="3.0075%" y="607.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (12 samples, 0.97%)</title><rect x="1.9465%" y="661" width="0.9732%" height="15" fill="rgb(221,13,13)" fg:x="24" fg:w="12"/><text x="2.1965%" y="671.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (12 samples, 0.97%)</title><rect x="1.9465%" y="645" width="0.9732%" height="15" fill="rgb(238,131,9)" fg:x="24" fg:w="12"/><text x="2.1965%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="2.8386%" y="629" width="0.0811%" height="15" fill="rgb(211,50,8)" fg:x="35" fg:w="1"/><text x="3.0886%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8386%" y="613" width="0.0811%" height="15" fill="rgb(245,182,24)" fg:x="35" fg:w="1"/><text x="3.0886%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.8386%" y="597" width="0.0811%" height="15" fill="rgb(242,14,37)" fg:x="35" fg:w="1"/><text x="3.0886%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="2.8386%" y="581" width="0.0811%" height="15" fill="rgb(246,228,12)" fg:x="35" fg:w="1"/><text x="3.0886%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="2.8386%" y="565" width="0.0811%" height="15" fill="rgb(213,55,15)" fg:x="35" fg:w="1"/><text x="3.0886%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.8386%" y="549" width="0.0811%" height="15" fill="rgb(209,9,3)" fg:x="35" fg:w="1"/><text x="3.0886%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8386%" y="533" width="0.0811%" height="15" fill="rgb(230,59,30)" fg:x="35" fg:w="1"/><text x="3.0886%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.8386%" y="517" width="0.0811%" height="15" fill="rgb(209,121,21)" fg:x="35" fg:w="1"/><text x="3.0886%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8386%" y="501" width="0.0811%" height="15" fill="rgb(220,109,13)" fg:x="35" fg:w="1"/><text x="3.0886%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8386%" y="485" width="0.0811%" height="15" fill="rgb(232,18,1)" fg:x="35" fg:w="1"/><text x="3.0886%" y="495.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.05%)</title><rect x="1.9465%" y="693" width="1.0543%" height="15" fill="rgb(215,41,42)" fg:x="24" fg:w="13"/><text x="2.1965%" y="703.50"></text></g><g><title>engine::session::Session::save_entity_changes (13 samples, 1.05%)</title><rect x="1.9465%" y="677" width="1.0543%" height="15" fill="rgb(224,123,36)" fg:x="24" fg:w="13"/><text x="2.1965%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="2.9197%" y="661" width="0.0811%" height="15" fill="rgb(240,125,3)" fg:x="36" fg:w="1"/><text x="3.1697%" y="671.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="2.9197%" y="645" width="0.0811%" height="15" fill="rgb(205,98,50)" fg:x="36" fg:w="1"/><text x="3.1697%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="2.9197%" y="629" width="0.0811%" height="15" fill="rgb(205,185,37)" fg:x="36" fg:w="1"/><text x="3.1697%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="2.9197%" y="613" width="0.0811%" height="15" fill="rgb(238,207,15)" fg:x="36" fg:w="1"/><text x="3.1697%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="2.9197%" y="597" width="0.0811%" height="15" fill="rgb(213,199,42)" fg:x="36" fg:w="1"/><text x="3.1697%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="2.9197%" y="581" width="0.0811%" height="15" fill="rgb(235,201,11)" fg:x="36" fg:w="1"/><text x="3.1697%" y="591.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="2.9197%" y="565" width="0.0811%" height="15" fill="rgb(207,46,11)" fg:x="36" fg:w="1"/><text x="3.1697%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.0008%" y="677" width="0.0811%" height="15" fill="rgb(241,35,35)" fg:x="37" fg:w="1"/><text x="3.2508%" y="687.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.0008%" y="661" width="0.0811%" height="15" fill="rgb(243,32,47)" fg:x="37" fg:w="1"/><text x="3.2508%" y="671.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.0008%" y="645" width="0.0811%" height="15" fill="rgb(247,202,23)" fg:x="37" fg:w="1"/><text x="3.2508%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.0008%" y="629" width="0.0811%" height="15" fill="rgb(219,102,11)" fg:x="37" fg:w="1"/><text x="3.2508%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.0008%" y="613" width="0.0811%" height="15" fill="rgb(243,110,44)" fg:x="37" fg:w="1"/><text x="3.2508%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.0008%" y="597" width="0.0811%" height="15" fill="rgb(222,74,54)" fg:x="37" fg:w="1"/><text x="3.2508%" y="607.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0008%" y="581" width="0.0811%" height="15" fill="rgb(216,99,12)" fg:x="37" fg:w="1"/><text x="3.2508%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.0008%" y="565" width="0.0811%" height="15" fill="rgb(226,22,26)" fg:x="37" fg:w="1"/><text x="3.2508%" y="575.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="3.0008%" y="549" width="0.0811%" height="15" fill="rgb(217,163,10)" fg:x="37" fg:w="1"/><text x="3.2508%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.0008%" y="533" width="0.0811%" height="15" fill="rgb(213,25,53)" fg:x="37" fg:w="1"/><text x="3.2508%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.0008%" y="517" width="0.0811%" height="15" fill="rgb(252,105,26)" fg:x="37" fg:w="1"/><text x="3.2508%" y="527.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="3.0008%" y="501" width="0.0811%" height="15" fill="rgb(220,39,43)" fg:x="37" fg:w="1"/><text x="3.2508%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.0008%" y="485" width="0.0811%" height="15" fill="rgb(229,68,48)" fg:x="37" fg:w="1"/><text x="3.2508%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.0008%" y="469" width="0.0811%" height="15" fill="rgb(252,8,32)" fg:x="37" fg:w="1"/><text x="3.2508%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.0819%" y="661" width="0.0811%" height="15" fill="rgb(223,20,43)" fg:x="38" fg:w="1"/><text x="3.3319%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.0819%" y="645" width="0.0811%" height="15" fill="rgb(229,81,49)" fg:x="38" fg:w="1"/><text x="3.3319%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.0819%" y="629" width="0.0811%" height="15" fill="rgb(236,28,36)" fg:x="38" fg:w="1"/><text x="3.3319%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.1630%" y="661" width="0.0811%" height="15" fill="rgb(249,185,26)" fg:x="39" fg:w="1"/><text x="3.4130%" y="671.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.41%)</title><rect x="3.0008%" y="693" width="0.4055%" height="15" fill="rgb(249,174,33)" fg:x="37" fg:w="5"/><text x="3.2508%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="3.0819%" y="677" width="0.3244%" height="15" fill="rgb(233,201,37)" fg:x="38" fg:w="4"/><text x="3.3319%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="3.2441%" y="661" width="0.1622%" height="15" fill="rgb(221,78,26)" fg:x="40" fg:w="2"/><text x="3.4941%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.2441%" y="645" width="0.1622%" height="15" fill="rgb(250,127,30)" fg:x="40" fg:w="2"/><text x="3.4941%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="3.2441%" y="629" width="0.1622%" height="15" fill="rgb(230,49,44)" fg:x="40" fg:w="2"/><text x="3.4941%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.2441%" y="613" width="0.1622%" height="15" fill="rgb(229,67,23)" fg:x="40" fg:w="2"/><text x="3.4941%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.2441%" y="597" width="0.1622%" height="15" fill="rgb(249,83,47)" fg:x="40" fg:w="2"/><text x="3.4941%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.2441%" y="581" width="0.1622%" height="15" fill="rgb(215,43,3)" fg:x="40" fg:w="2"/><text x="3.4941%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.2441%" y="565" width="0.1622%" height="15" fill="rgb(238,154,13)" fg:x="40" fg:w="2"/><text x="3.4941%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.2441%" y="549" width="0.1622%" height="15" fill="rgb(219,56,2)" fg:x="40" fg:w="2"/><text x="3.4941%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.2441%" y="533" width="0.1622%" height="15" fill="rgb(233,0,4)" fg:x="40" fg:w="2"/><text x="3.4941%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3252%" y="517" width="0.0811%" height="15" fill="rgb(235,30,7)" fg:x="41" fg:w="1"/><text x="3.5752%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3252%" y="501" width="0.0811%" height="15" fill="rgb(250,79,13)" fg:x="41" fg:w="1"/><text x="3.5752%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3252%" y="485" width="0.0811%" height="15" fill="rgb(211,146,34)" fg:x="41" fg:w="1"/><text x="3.5752%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.4063%" y="693" width="0.0811%" height="15" fill="rgb(228,22,38)" fg:x="42" fg:w="1"/><text x="3.6563%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.4063%" y="677" width="0.0811%" height="15" fill="rgb(235,168,5)" fg:x="42" fg:w="1"/><text x="3.6563%" y="687.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.4063%" y="661" width="0.0811%" height="15" fill="rgb(221,155,16)" fg:x="42" fg:w="1"/><text x="3.6563%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4063%" y="645" width="0.0811%" height="15" fill="rgb(215,215,53)" fg:x="42" fg:w="1"/><text x="3.6563%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4063%" y="629" width="0.0811%" height="15" fill="rgb(223,4,10)" fg:x="42" fg:w="1"/><text x="3.6563%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4063%" y="613" width="0.0811%" height="15" fill="rgb(234,103,6)" fg:x="42" fg:w="1"/><text x="3.6563%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.4063%" y="597" width="0.0811%" height="15" fill="rgb(227,97,0)" fg:x="42" fg:w="1"/><text x="3.6563%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.4063%" y="581" width="0.0811%" height="15" fill="rgb(234,150,53)" fg:x="42" fg:w="1"/><text x="3.6563%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.4063%" y="565" width="0.0811%" height="15" fill="rgb(228,201,54)" fg:x="42" fg:w="1"/><text x="3.6563%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.4063%" y="549" width="0.0811%" height="15" fill="rgb(222,22,37)" fg:x="42" fg:w="1"/><text x="3.6563%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.4063%" y="533" width="0.0811%" height="15" fill="rgb(237,53,32)" fg:x="42" fg:w="1"/><text x="3.6563%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.4874%" y="677" width="0.0811%" height="15" fill="rgb(233,25,53)" fg:x="43" fg:w="1"/><text x="3.7374%" y="687.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.4874%" y="661" width="0.0811%" height="15" fill="rgb(210,40,34)" fg:x="43" fg:w="1"/><text x="3.7374%" y="671.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.4874%" y="645" width="0.0811%" height="15" fill="rgb(241,220,44)" fg:x="43" fg:w="1"/><text x="3.7374%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.4874%" y="629" width="0.0811%" height="15" fill="rgb(235,28,35)" fg:x="43" fg:w="1"/><text x="3.7374%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.4874%" y="613" width="0.0811%" height="15" fill="rgb(210,56,17)" fg:x="43" fg:w="1"/><text x="3.7374%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.4874%" y="597" width="0.0811%" height="15" fill="rgb(224,130,29)" fg:x="43" fg:w="1"/><text x="3.7374%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4874%" y="581" width="0.0811%" height="15" fill="rgb(235,212,8)" fg:x="43" fg:w="1"/><text x="3.7374%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4874%" y="565" width="0.0811%" height="15" fill="rgb(223,33,50)" fg:x="43" fg:w="1"/><text x="3.7374%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4874%" y="549" width="0.0811%" height="15" fill="rgb(219,149,13)" fg:x="43" fg:w="1"/><text x="3.7374%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4874%" y="533" width="0.0811%" height="15" fill="rgb(250,156,29)" fg:x="43" fg:w="1"/><text x="3.7374%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4874%" y="517" width="0.0811%" height="15" fill="rgb(216,193,19)" fg:x="43" fg:w="1"/><text x="3.7374%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4874%" y="501" width="0.0811%" height="15" fill="rgb(216,135,14)" fg:x="43" fg:w="1"/><text x="3.7374%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.4874%" y="485" width="0.0811%" height="15" fill="rgb(241,47,5)" fg:x="43" fg:w="1"/><text x="3.7374%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.4874%" y="469" width="0.0811%" height="15" fill="rgb(233,42,35)" fg:x="43" fg:w="1"/><text x="3.7374%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.4874%" y="453" width="0.0811%" height="15" fill="rgb(231,13,6)" fg:x="43" fg:w="1"/><text x="3.7374%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.4874%" y="437" width="0.0811%" height="15" fill="rgb(207,181,40)" fg:x="43" fg:w="1"/><text x="3.7374%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.4874%" y="421" width="0.0811%" height="15" fill="rgb(254,173,49)" fg:x="43" fg:w="1"/><text x="3.7374%" y="431.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.5685%" y="629" width="0.0811%" height="15" fill="rgb(221,1,38)" fg:x="44" fg:w="1"/><text x="3.8185%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.5685%" y="613" width="0.0811%" height="15" fill="rgb(206,124,46)" fg:x="44" fg:w="1"/><text x="3.8185%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.5685%" y="597" width="0.0811%" height="15" fill="rgb(249,21,11)" fg:x="44" fg:w="1"/><text x="3.8185%" y="607.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.5685%" y="581" width="0.0811%" height="15" fill="rgb(222,201,40)" fg:x="44" fg:w="1"/><text x="3.8185%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.5685%" y="565" width="0.0811%" height="15" fill="rgb(235,61,29)" fg:x="44" fg:w="1"/><text x="3.8185%" y="575.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="3.5685%" y="549" width="0.0811%" height="15" fill="rgb(219,207,3)" fg:x="44" fg:w="1"/><text x="3.8185%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.5685%" y="533" width="0.0811%" height="15" fill="rgb(222,56,46)" fg:x="44" fg:w="1"/><text x="3.8185%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="3.6496%" y="597" width="0.0811%" height="15" fill="rgb(239,76,54)" fg:x="45" fg:w="1"/><text x="3.8996%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="3.6496%" y="581" width="0.0811%" height="15" fill="rgb(231,124,27)" fg:x="45" fg:w="1"/><text x="3.8996%" y="591.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="3.6496%" y="565" width="0.0811%" height="15" fill="rgb(249,195,6)" fg:x="45" fg:w="1"/><text x="3.8996%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.6496%" y="549" width="0.0811%" height="15" fill="rgb(237,174,47)" fg:x="45" fg:w="1"/><text x="3.8996%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.6496%" y="533" width="0.0811%" height="15" fill="rgb(206,201,31)" fg:x="45" fg:w="1"/><text x="3.8996%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.6496%" y="613" width="0.1622%" height="15" fill="rgb(231,57,52)" fg:x="45" fg:w="2"/><text x="3.8996%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.7307%" y="597" width="0.0811%" height="15" fill="rgb(248,177,22)" fg:x="46" fg:w="1"/><text x="3.9807%" y="607.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.7307%" y="581" width="0.0811%" height="15" fill="rgb(215,211,37)" fg:x="46" fg:w="1"/><text x="3.9807%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.7307%" y="565" width="0.0811%" height="15" fill="rgb(241,128,51)" fg:x="46" fg:w="1"/><text x="3.9807%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.7307%" y="549" width="0.0811%" height="15" fill="rgb(227,165,31)" fg:x="46" fg:w="1"/><text x="3.9807%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7307%" y="533" width="0.0811%" height="15" fill="rgb(228,167,24)" fg:x="46" fg:w="1"/><text x="3.9807%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7307%" y="517" width="0.0811%" height="15" fill="rgb(228,143,12)" fg:x="46" fg:w="1"/><text x="3.9807%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7307%" y="501" width="0.0811%" height="15" fill="rgb(249,149,8)" fg:x="46" fg:w="1"/><text x="3.9807%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7307%" y="485" width="0.0811%" height="15" fill="rgb(243,35,44)" fg:x="46" fg:w="1"/><text x="3.9807%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="3.5685%" y="677" width="0.3244%" height="15" fill="rgb(246,89,9)" fg:x="44" fg:w="4"/><text x="3.8185%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="3.5685%" y="661" width="0.3244%" height="15" fill="rgb(233,213,13)" fg:x="44" fg:w="4"/><text x="3.8185%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="3.5685%" y="645" width="0.3244%" height="15" fill="rgb(233,141,41)" fg:x="44" fg:w="4"/><text x="3.8185%" y="655.50"></text></g><g><title>plugins_core::build::Build::leads_to (3 samples, 0.24%)</title><rect x="3.6496%" y="629" width="0.2433%" height="15" fill="rgb(239,167,4)" fg:x="45" fg:w="3"/><text x="3.8996%" y="639.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="3.8118%" y="613" width="0.0811%" height="15" fill="rgb(209,217,16)" fg:x="47" fg:w="1"/><text x="4.0618%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.8118%" y="597" width="0.0811%" height="15" fill="rgb(219,88,35)" fg:x="47" fg:w="1"/><text x="4.0618%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.8118%" y="581" width="0.0811%" height="15" fill="rgb(220,193,23)" fg:x="47" fg:w="1"/><text x="4.0618%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.8118%" y="565" width="0.0811%" height="15" fill="rgb(230,90,52)" fg:x="47" fg:w="1"/><text x="4.0618%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.8118%" y="549" width="0.0811%" height="15" fill="rgb(252,106,19)" fg:x="47" fg:w="1"/><text x="4.0618%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.8118%" y="533" width="0.0811%" height="15" fill="rgb(206,74,20)" fg:x="47" fg:w="1"/><text x="4.0618%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.8118%" y="517" width="0.0811%" height="15" fill="rgb(230,138,44)" fg:x="47" fg:w="1"/><text x="4.0618%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8118%" y="501" width="0.0811%" height="15" fill="rgb(235,182,43)" fg:x="47" fg:w="1"/><text x="4.0618%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.8118%" y="485" width="0.0811%" height="15" fill="rgb(242,16,51)" fg:x="47" fg:w="1"/><text x="4.0618%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8118%" y="469" width="0.0811%" height="15" fill="rgb(248,9,4)" fg:x="47" fg:w="1"/><text x="4.0618%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.8118%" y="453" width="0.0811%" height="15" fill="rgb(210,31,22)" fg:x="47" fg:w="1"/><text x="4.0618%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8118%" y="437" width="0.0811%" height="15" fill="rgb(239,54,39)" fg:x="47" fg:w="1"/><text x="4.0618%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.8118%" y="421" width="0.0811%" height="15" fill="rgb(230,99,41)" fg:x="47" fg:w="1"/><text x="4.0618%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8118%" y="405" width="0.0811%" height="15" fill="rgb(253,106,12)" fg:x="47" fg:w="1"/><text x="4.0618%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.8118%" y="389" width="0.0811%" height="15" fill="rgb(213,46,41)" fg:x="47" fg:w="1"/><text x="4.0618%" y="399.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="3.8929%" y="645" width="0.0811%" height="15" fill="rgb(215,133,35)" fg:x="48" fg:w="1"/><text x="4.1429%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.8929%" y="629" width="0.0811%" height="15" fill="rgb(213,28,5)" fg:x="48" fg:w="1"/><text x="4.1429%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="4.0552%" y="613" width="0.0811%" height="15" fill="rgb(215,77,49)" fg:x="50" fg:w="1"/><text x="4.3052%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.0552%" y="597" width="0.0811%" height="15" fill="rgb(248,100,22)" fg:x="50" fg:w="1"/><text x="4.3052%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.0552%" y="581" width="0.0811%" height="15" fill="rgb(208,67,9)" fg:x="50" fg:w="1"/><text x="4.3052%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.0552%" y="565" width="0.0811%" height="15" fill="rgb(219,133,21)" fg:x="50" fg:w="1"/><text x="4.3052%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.0552%" y="549" width="0.0811%" height="15" fill="rgb(246,46,29)" fg:x="50" fg:w="1"/><text x="4.3052%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.0552%" y="533" width="0.0811%" height="15" fill="rgb(246,185,52)" fg:x="50" fg:w="1"/><text x="4.3052%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.0552%" y="517" width="0.0811%" height="15" fill="rgb(252,136,11)" fg:x="50" fg:w="1"/><text x="4.3052%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0552%" y="501" width="0.0811%" height="15" fill="rgb(219,138,53)" fg:x="50" fg:w="1"/><text x="4.3052%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="4.1363%" y="597" width="0.1622%" height="15" fill="rgb(211,51,23)" fg:x="51" fg:w="2"/><text x="4.3863%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.1363%" y="581" width="0.1622%" height="15" fill="rgb(247,221,28)" fg:x="51" fg:w="2"/><text x="4.3863%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.2174%" y="565" width="0.0811%" height="15" fill="rgb(251,222,45)" fg:x="52" fg:w="1"/><text x="4.4674%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.2985%" y="581" width="0.0811%" height="15" fill="rgb(217,162,53)" fg:x="53" fg:w="1"/><text x="4.5485%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.2985%" y="565" width="0.0811%" height="15" fill="rgb(229,93,14)" fg:x="53" fg:w="1"/><text x="4.5485%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="4.3796%" y="565" width="0.1622%" height="15" fill="rgb(209,67,49)" fg:x="54" fg:w="2"/><text x="4.6296%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.3796%" y="549" width="0.1622%" height="15" fill="rgb(213,87,29)" fg:x="54" fg:w="2"/><text x="4.6296%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.3796%" y="533" width="0.1622%" height="15" fill="rgb(205,151,52)" fg:x="54" fg:w="2"/><text x="4.6296%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.3796%" y="517" width="0.1622%" height="15" fill="rgb(253,215,39)" fg:x="54" fg:w="2"/><text x="4.6296%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4607%" y="501" width="0.0811%" height="15" fill="rgb(221,220,41)" fg:x="55" fg:w="1"/><text x="4.7107%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4607%" y="485" width="0.0811%" height="15" fill="rgb(218,133,21)" fg:x="55" fg:w="1"/><text x="4.7107%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.6229%" y="533" width="0.0811%" height="15" fill="rgb(221,193,43)" fg:x="57" fg:w="1"/><text x="4.8729%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6229%" y="517" width="0.0811%" height="15" fill="rgb(240,128,52)" fg:x="57" fg:w="1"/><text x="4.8729%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.6229%" y="501" width="0.0811%" height="15" fill="rgb(253,114,12)" fg:x="57" fg:w="1"/><text x="4.8729%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.6229%" y="485" width="0.0811%" height="15" fill="rgb(215,223,47)" fg:x="57" fg:w="1"/><text x="4.8729%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.7040%" y="533" width="0.1622%" height="15" fill="rgb(248,225,23)" fg:x="58" fg:w="2"/><text x="4.9540%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.7040%" y="517" width="0.1622%" height="15" fill="rgb(250,108,0)" fg:x="58" fg:w="2"/><text x="4.9540%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.7040%" y="501" width="0.1622%" height="15" fill="rgb(228,208,7)" fg:x="58" fg:w="2"/><text x="4.9540%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.7851%" y="485" width="0.0811%" height="15" fill="rgb(244,45,10)" fg:x="59" fg:w="1"/><text x="5.0351%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.7851%" y="469" width="0.0811%" height="15" fill="rgb(207,125,25)" fg:x="59" fg:w="1"/><text x="5.0351%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="4.1363%" y="613" width="0.8110%" height="15" fill="rgb(210,195,18)" fg:x="51" fg:w="10"/><text x="4.3863%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="4.2985%" y="597" width="0.6488%" height="15" fill="rgb(249,80,12)" fg:x="53" fg:w="8"/><text x="4.5485%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="4.3796%" y="581" width="0.5677%" height="15" fill="rgb(221,65,9)" fg:x="54" fg:w="7"/><text x="4.6296%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="4.5418%" y="565" width="0.4055%" height="15" fill="rgb(235,49,36)" fg:x="56" fg:w="5"/><text x="4.7918%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="4.6229%" y="549" width="0.3244%" height="15" fill="rgb(225,32,20)" fg:x="57" fg:w="4"/><text x="4.8729%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8662%" y="533" width="0.0811%" height="15" fill="rgb(215,141,46)" fg:x="60" fg:w="1"/><text x="5.1162%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.8662%" y="517" width="0.0811%" height="15" fill="rgb(250,160,47)" fg:x="60" fg:w="1"/><text x="5.1162%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="4.8662%" y="501" width="0.0811%" height="15" fill="rgb(216,222,40)" fg:x="60" fg:w="1"/><text x="5.1162%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9473%" y="581" width="0.0811%" height="15" fill="rgb(234,217,39)" fg:x="61" fg:w="1"/><text x="5.1973%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.1095%" y="517" width="0.0811%" height="15" fill="rgb(207,178,40)" fg:x="63" fg:w="1"/><text x="5.3595%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1095%" y="501" width="0.0811%" height="15" fill="rgb(221,136,13)" fg:x="63" fg:w="1"/><text x="5.3595%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="4.9473%" y="613" width="0.3244%" height="15" fill="rgb(249,199,10)" fg:x="61" fg:w="4"/><text x="5.1973%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="4.9473%" y="597" width="0.3244%" height="15" fill="rgb(249,222,13)" fg:x="61" fg:w="4"/><text x="5.1973%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="5.0284%" y="581" width="0.2433%" height="15" fill="rgb(244,185,38)" fg:x="62" fg:w="3"/><text x="5.2784%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="5.0284%" y="565" width="0.2433%" height="15" fill="rgb(236,202,9)" fg:x="62" fg:w="3"/><text x="5.2784%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.1095%" y="549" width="0.1622%" height="15" fill="rgb(250,229,37)" fg:x="63" fg:w="2"/><text x="5.3595%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.1095%" y="533" width="0.1622%" height="15" fill="rgb(206,174,23)" fg:x="63" fg:w="2"/><text x="5.3595%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.1906%" y="517" width="0.0811%" height="15" fill="rgb(211,33,43)" fg:x="64" fg:w="1"/><text x="5.4406%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.1906%" y="501" width="0.0811%" height="15" fill="rgb(245,58,50)" fg:x="64" fg:w="1"/><text x="5.4406%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1906%" y="485" width="0.0811%" height="15" fill="rgb(244,68,36)" fg:x="64" fg:w="1"/><text x="5.4406%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2717%" y="565" width="0.0811%" height="15" fill="rgb(232,229,15)" fg:x="65" fg:w="1"/><text x="5.5217%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.2717%" y="549" width="0.0811%" height="15" fill="rgb(254,30,23)" fg:x="65" fg:w="1"/><text x="5.5217%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2717%" y="533" width="0.0811%" height="15" fill="rgb(235,160,14)" fg:x="65" fg:w="1"/><text x="5.5217%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4339%" y="517" width="0.0811%" height="15" fill="rgb(212,155,44)" fg:x="67" fg:w="1"/><text x="5.6839%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.5150%" y="517" width="0.0811%" height="15" fill="rgb(226,2,50)" fg:x="68" fg:w="1"/><text x="5.7650%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5150%" y="501" width="0.0811%" height="15" fill="rgb(234,177,6)" fg:x="68" fg:w="1"/><text x="5.7650%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5150%" y="485" width="0.0811%" height="15" fill="rgb(217,24,9)" fg:x="68" fg:w="1"/><text x="5.7650%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.5961%" y="501" width="0.0811%" height="15" fill="rgb(220,13,46)" fg:x="69" fg:w="1"/><text x="5.8461%" y="511.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="5.5961%" y="485" width="0.0811%" height="15" fill="rgb(239,221,27)" fg:x="69" fg:w="1"/><text x="5.8461%" y="495.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (22 samples, 1.78%)</title><rect x="3.9740%" y="645" width="1.7843%" height="15" fill="rgb(222,198,25)" fg:x="49" fg:w="22"/><text x="4.2240%" y="655.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (22 samples, 1.78%)</title><rect x="3.9740%" y="629" width="1.7843%" height="15" fill="rgb(211,99,13)" fg:x="49" fg:w="22"/><text x="4.2240%" y="639.50">e..</text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.49%)</title><rect x="5.2717%" y="613" width="0.4866%" height="15" fill="rgb(232,111,31)" fg:x="65" fg:w="6"/><text x="5.5217%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="5.2717%" y="597" width="0.4866%" height="15" fill="rgb(245,82,37)" fg:x="65" fg:w="6"/><text x="5.5217%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="5.2717%" y="581" width="0.4866%" height="15" fill="rgb(227,149,46)" fg:x="65" fg:w="6"/><text x="5.5217%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.41%)</title><rect x="5.3528%" y="565" width="0.4055%" height="15" fill="rgb(218,36,50)" fg:x="66" fg:w="5"/><text x="5.6028%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.41%)</title><rect x="5.3528%" y="549" width="0.4055%" height="15" fill="rgb(226,80,48)" fg:x="66" fg:w="5"/><text x="5.6028%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="5.3528%" y="533" width="0.4055%" height="15" fill="rgb(238,224,15)" fg:x="66" fg:w="5"/><text x="5.6028%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.5961%" y="517" width="0.1622%" height="15" fill="rgb(241,136,10)" fg:x="69" fg:w="2"/><text x="5.8461%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.6772%" y="501" width="0.0811%" height="15" fill="rgb(208,32,45)" fg:x="70" fg:w="1"/><text x="5.9272%" y="511.50"></text></g><g><title>engine::session::Session::flush (24 samples, 1.95%)</title><rect x="3.8929%" y="677" width="1.9465%" height="15" fill="rgb(207,135,9)" fg:x="48" fg:w="24"/><text x="4.1429%" y="687.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (24 samples, 1.95%)</title><rect x="3.8929%" y="661" width="1.9465%" height="15" fill="rgb(206,86,44)" fg:x="48" fg:w="24"/><text x="4.1429%" y="671.50">e..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="5.7583%" y="645" width="0.0811%" height="15" fill="rgb(245,177,15)" fg:x="71" fg:w="1"/><text x="6.0083%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="5.7583%" y="629" width="0.0811%" height="15" fill="rgb(206,64,50)" fg:x="71" fg:w="1"/><text x="6.0083%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="5.7583%" y="613" width="0.0811%" height="15" fill="rgb(234,36,40)" fg:x="71" fg:w="1"/><text x="6.0083%" y="623.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="5.7583%" y="597" width="0.0811%" height="15" fill="rgb(213,64,8)" fg:x="71" fg:w="1"/><text x="6.0083%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8394%" y="533" width="0.0811%" height="15" fill="rgb(210,75,36)" fg:x="72" fg:w="1"/><text x="6.0894%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8394%" y="517" width="0.0811%" height="15" fill="rgb(229,88,21)" fg:x="72" fg:w="1"/><text x="6.0894%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.8394%" y="661" width="0.1622%" height="15" fill="rgb(252,204,47)" fg:x="72" fg:w="2"/><text x="6.0894%" y="671.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="5.8394%" y="645" width="0.1622%" height="15" fill="rgb(208,77,27)" fg:x="72" fg:w="2"/><text x="6.0894%" y="655.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="5.8394%" y="629" width="0.1622%" height="15" fill="rgb(221,76,26)" fg:x="72" fg:w="2"/><text x="6.0894%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="5.8394%" y="613" width="0.1622%" height="15" fill="rgb(225,139,18)" fg:x="72" fg:w="2"/><text x="6.0894%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="5.8394%" y="597" width="0.1622%" height="15" fill="rgb(230,137,11)" fg:x="72" fg:w="2"/><text x="6.0894%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="5.8394%" y="581" width="0.1622%" height="15" fill="rgb(212,28,1)" fg:x="72" fg:w="2"/><text x="6.0894%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.8394%" y="565" width="0.1622%" height="15" fill="rgb(248,164,17)" fg:x="72" fg:w="2"/><text x="6.0894%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.8394%" y="549" width="0.1622%" height="15" fill="rgb(222,171,42)" fg:x="72" fg:w="2"/><text x="6.0894%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9205%" y="533" width="0.0811%" height="15" fill="rgb(243,84,45)" fg:x="73" fg:w="1"/><text x="6.1705%" y="543.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.0016%" y="645" width="0.0811%" height="15" fill="rgb(252,49,23)" fg:x="74" fg:w="1"/><text x="6.2516%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.0016%" y="629" width="0.0811%" height="15" fill="rgb(215,19,7)" fg:x="74" fg:w="1"/><text x="6.2516%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.0016%" y="613" width="0.0811%" height="15" fill="rgb(238,81,41)" fg:x="74" fg:w="1"/><text x="6.2516%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.0016%" y="597" width="0.0811%" height="15" fill="rgb(210,199,37)" fg:x="74" fg:w="1"/><text x="6.2516%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.0016%" y="581" width="0.0811%" height="15" fill="rgb(244,192,49)" fg:x="74" fg:w="1"/><text x="6.2516%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.0016%" y="565" width="0.0811%" height="15" fill="rgb(226,211,11)" fg:x="74" fg:w="1"/><text x="6.2516%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.0016%" y="549" width="0.0811%" height="15" fill="rgb(236,162,54)" fg:x="74" fg:w="1"/><text x="6.2516%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.0016%" y="533" width="0.0811%" height="15" fill="rgb(220,229,9)" fg:x="74" fg:w="1"/><text x="6.2516%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.0016%" y="517" width="0.0811%" height="15" fill="rgb(250,87,22)" fg:x="74" fg:w="1"/><text x="6.2516%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.0016%" y="501" width="0.0811%" height="15" fill="rgb(239,43,17)" fg:x="74" fg:w="1"/><text x="6.2516%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.0016%" y="485" width="0.0811%" height="15" fill="rgb(231,177,25)" fg:x="74" fg:w="1"/><text x="6.2516%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.0016%" y="469" width="0.0811%" height="15" fill="rgb(219,179,1)" fg:x="74" fg:w="1"/><text x="6.2516%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.0827%" y="629" width="0.0811%" height="15" fill="rgb(238,219,53)" fg:x="75" fg:w="1"/><text x="6.3327%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="6.0827%" y="645" width="0.1622%" height="15" fill="rgb(232,167,36)" fg:x="75" fg:w="2"/><text x="6.3327%" y="655.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1638%" y="629" width="0.0811%" height="15" fill="rgb(244,19,51)" fg:x="76" fg:w="1"/><text x="6.4138%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1638%" y="613" width="0.0811%" height="15" fill="rgb(224,6,22)" fg:x="76" fg:w="1"/><text x="6.4138%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1638%" y="597" width="0.0811%" height="15" fill="rgb(224,145,5)" fg:x="76" fg:w="1"/><text x="6.4138%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1638%" y="581" width="0.0811%" height="15" fill="rgb(234,130,49)" fg:x="76" fg:w="1"/><text x="6.4138%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.2449%" y="597" width="0.0811%" height="15" fill="rgb(254,6,2)" fg:x="77" fg:w="1"/><text x="6.4949%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.2449%" y="581" width="0.0811%" height="15" fill="rgb(208,96,46)" fg:x="77" fg:w="1"/><text x="6.4949%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.2449%" y="565" width="0.0811%" height="15" fill="rgb(239,3,39)" fg:x="77" fg:w="1"/><text x="6.4949%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.2449%" y="549" width="0.0811%" height="15" fill="rgb(233,210,1)" fg:x="77" fg:w="1"/><text x="6.4949%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2449%" y="533" width="0.0811%" height="15" fill="rgb(244,137,37)" fg:x="77" fg:w="1"/><text x="6.4949%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.2449%" y="517" width="0.0811%" height="15" fill="rgb(240,136,2)" fg:x="77" fg:w="1"/><text x="6.4949%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2449%" y="501" width="0.0811%" height="15" fill="rgb(239,18,37)" fg:x="77" fg:w="1"/><text x="6.4949%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.2449%" y="485" width="0.0811%" height="15" fill="rgb(218,185,22)" fg:x="77" fg:w="1"/><text x="6.4949%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2449%" y="469" width="0.0811%" height="15" fill="rgb(225,218,4)" fg:x="77" fg:w="1"/><text x="6.4949%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.2449%" y="453" width="0.0811%" height="15" fill="rgb(230,182,32)" fg:x="77" fg:w="1"/><text x="6.4949%" y="463.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.57%)</title><rect x="5.8394%" y="677" width="0.5677%" height="15" fill="rgb(242,56,43)" fg:x="72" fg:w="7"/><text x="6.0894%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.41%)</title><rect x="6.0016%" y="661" width="0.4055%" height="15" fill="rgb(233,99,24)" fg:x="74" fg:w="5"/><text x="6.2516%" y="671.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="6.2449%" y="645" width="0.1622%" height="15" fill="rgb(234,209,42)" fg:x="77" fg:w="2"/><text x="6.4949%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="6.2449%" y="629" width="0.1622%" height="15" fill="rgb(227,7,12)" fg:x="77" fg:w="2"/><text x="6.4949%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="6.2449%" y="613" width="0.1622%" height="15" fill="rgb(245,203,43)" fg:x="77" fg:w="2"/><text x="6.4949%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.3260%" y="597" width="0.0811%" height="15" fill="rgb(238,205,33)" fg:x="78" fg:w="1"/><text x="6.5760%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.3260%" y="581" width="0.0811%" height="15" fill="rgb(231,56,7)" fg:x="78" fg:w="1"/><text x="6.5760%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.3260%" y="565" width="0.0811%" height="15" fill="rgb(244,186,29)" fg:x="78" fg:w="1"/><text x="6.5760%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3260%" y="549" width="0.0811%" height="15" fill="rgb(234,111,31)" fg:x="78" fg:w="1"/><text x="6.5760%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3260%" y="533" width="0.0811%" height="15" fill="rgb(241,149,10)" fg:x="78" fg:w="1"/><text x="6.5760%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3260%" y="517" width="0.0811%" height="15" fill="rgb(249,206,44)" fg:x="78" fg:w="1"/><text x="6.5760%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3260%" y="501" width="0.0811%" height="15" fill="rgb(251,153,30)" fg:x="78" fg:w="1"/><text x="6.5760%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3260%" y="485" width="0.0811%" height="15" fill="rgb(239,152,38)" fg:x="78" fg:w="1"/><text x="6.5760%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.3260%" y="469" width="0.0811%" height="15" fill="rgb(249,139,47)" fg:x="78" fg:w="1"/><text x="6.5760%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.3260%" y="453" width="0.0811%" height="15" fill="rgb(244,64,35)" fg:x="78" fg:w="1"/><text x="6.5760%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.3260%" y="437" width="0.0811%" height="15" fill="rgb(216,46,15)" fg:x="78" fg:w="1"/><text x="6.5760%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3260%" y="421" width="0.0811%" height="15" fill="rgb(250,74,19)" fg:x="78" fg:w="1"/><text x="6.5760%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3260%" y="405" width="0.0811%" height="15" fill="rgb(249,42,33)" fg:x="78" fg:w="1"/><text x="6.5760%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.3260%" y="389" width="0.0811%" height="15" fill="rgb(242,149,17)" fg:x="78" fg:w="1"/><text x="6.5760%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.3260%" y="373" width="0.0811%" height="15" fill="rgb(244,29,21)" fg:x="78" fg:w="1"/><text x="6.5760%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.3260%" y="357" width="0.0811%" height="15" fill="rgb(220,130,37)" fg:x="78" fg:w="1"/><text x="6.5760%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.3260%" y="341" width="0.0811%" height="15" fill="rgb(211,67,2)" fg:x="78" fg:w="1"/><text x="6.5760%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3260%" y="325" width="0.0811%" height="15" fill="rgb(235,68,52)" fg:x="78" fg:w="1"/><text x="6.5760%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4071%" y="565" width="0.0811%" height="15" fill="rgb(246,142,3)" fg:x="79" fg:w="1"/><text x="6.6571%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4071%" y="549" width="0.0811%" height="15" fill="rgb(241,25,7)" fg:x="79" fg:w="1"/><text x="6.6571%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4071%" y="533" width="0.0811%" height="15" fill="rgb(242,119,39)" fg:x="79" fg:w="1"/><text x="6.6571%" y="543.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="6.4071%" y="677" width="0.1622%" height="15" fill="rgb(241,98,45)" fg:x="79" fg:w="2"/><text x="6.6571%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.4071%" y="661" width="0.1622%" height="15" fill="rgb(254,28,30)" fg:x="79" fg:w="2"/><text x="6.6571%" y="671.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="6.4071%" y="645" width="0.1622%" height="15" fill="rgb(241,142,54)" fg:x="79" fg:w="2"/><text x="6.6571%" y="655.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="6.4071%" y="629" width="0.1622%" height="15" fill="rgb(222,85,15)" fg:x="79" fg:w="2"/><text x="6.6571%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.4071%" y="613" width="0.1622%" height="15" fill="rgb(210,85,47)" fg:x="79" fg:w="2"/><text x="6.6571%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.4071%" y="597" width="0.1622%" height="15" fill="rgb(224,206,25)" fg:x="79" fg:w="2"/><text x="6.6571%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.4071%" y="581" width="0.1622%" height="15" fill="rgb(243,201,19)" fg:x="79" fg:w="2"/><text x="6.6571%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4882%" y="565" width="0.0811%" height="15" fill="rgb(236,59,4)" fg:x="80" fg:w="1"/><text x="6.7382%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.4882%" y="549" width="0.0811%" height="15" fill="rgb(254,179,45)" fg:x="80" fg:w="1"/><text x="6.7382%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4882%" y="533" width="0.0811%" height="15" fill="rgb(226,14,10)" fg:x="80" fg:w="1"/><text x="6.7382%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4882%" y="517" width="0.0811%" height="15" fill="rgb(244,27,41)" fg:x="80" fg:w="1"/><text x="6.7382%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.4882%" y="501" width="0.0811%" height="15" fill="rgb(235,35,32)" fg:x="80" fg:w="1"/><text x="6.7382%" y="511.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="6.5693%" y="677" width="0.0811%" height="15" fill="rgb(218,68,31)" fg:x="81" fg:w="1"/><text x="6.8193%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="6.5693%" y="661" width="0.0811%" height="15" fill="rgb(207,120,37)" fg:x="81" fg:w="1"/><text x="6.8193%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.5693%" y="645" width="0.0811%" height="15" fill="rgb(227,98,0)" fg:x="81" fg:w="1"/><text x="6.8193%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.5693%" y="629" width="0.0811%" height="15" fill="rgb(207,7,3)" fg:x="81" fg:w="1"/><text x="6.8193%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.5693%" y="613" width="0.0811%" height="15" fill="rgb(206,98,19)" fg:x="81" fg:w="1"/><text x="6.8193%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.5693%" y="597" width="0.0811%" height="15" fill="rgb(217,5,26)" fg:x="81" fg:w="1"/><text x="6.8193%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.6504%" y="661" width="0.0811%" height="15" fill="rgb(235,190,38)" fg:x="82" fg:w="1"/><text x="6.9004%" y="671.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.6504%" y="645" width="0.0811%" height="15" fill="rgb(247,86,24)" fg:x="82" fg:w="1"/><text x="6.9004%" y="655.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.6504%" y="629" width="0.0811%" height="15" fill="rgb(205,101,16)" fg:x="82" fg:w="1"/><text x="6.9004%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.6504%" y="613" width="0.0811%" height="15" fill="rgb(246,168,33)" fg:x="82" fg:w="1"/><text x="6.9004%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.6504%" y="597" width="0.0811%" height="15" fill="rgb(231,114,1)" fg:x="82" fg:w="1"/><text x="6.9004%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.6504%" y="581" width="0.0811%" height="15" fill="rgb(207,184,53)" fg:x="82" fg:w="1"/><text x="6.9004%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.6504%" y="565" width="0.0811%" height="15" fill="rgb(224,95,51)" fg:x="82" fg:w="1"/><text x="6.9004%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6504%" y="549" width="0.0811%" height="15" fill="rgb(212,188,45)" fg:x="82" fg:w="1"/><text x="6.9004%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.7315%" y="597" width="0.0811%" height="15" fill="rgb(223,154,38)" fg:x="83" fg:w="1"/><text x="6.9815%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.7315%" y="581" width="0.0811%" height="15" fill="rgb(251,22,52)" fg:x="83" fg:w="1"/><text x="6.9815%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.7315%" y="565" width="0.0811%" height="15" fill="rgb(229,209,22)" fg:x="83" fg:w="1"/><text x="6.9815%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7315%" y="549" width="0.0811%" height="15" fill="rgb(234,138,34)" fg:x="83" fg:w="1"/><text x="6.9815%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7315%" y="533" width="0.0811%" height="15" fill="rgb(212,95,11)" fg:x="83" fg:w="1"/><text x="6.9815%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.7315%" y="517" width="0.0811%" height="15" fill="rgb(240,179,47)" fg:x="83" fg:w="1"/><text x="6.9815%" y="527.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="6.8127%" y="581" width="0.0811%" height="15" fill="rgb(240,163,11)" fg:x="84" fg:w="1"/><text x="7.0627%" y="591.50"></text></g><g><title>plugins_core::build::Build::occupying (4 samples, 0.32%)</title><rect x="6.6504%" y="677" width="0.3244%" height="15" fill="rgb(236,37,12)" fg:x="82" fg:w="4"/><text x="6.9004%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="6.7315%" y="661" width="0.2433%" height="15" fill="rgb(232,164,16)" fg:x="83" fg:w="3"/><text x="6.9815%" y="671.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (3 samples, 0.24%)</title><rect x="6.7315%" y="645" width="0.2433%" height="15" fill="rgb(244,205,15)" fg:x="83" fg:w="3"/><text x="6.9815%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="6.7315%" y="629" width="0.2433%" height="15" fill="rgb(223,117,47)" fg:x="83" fg:w="3"/><text x="6.9815%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="6.7315%" y="613" width="0.2433%" height="15" fill="rgb(244,107,35)" fg:x="83" fg:w="3"/><text x="6.9815%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="6.8127%" y="597" width="0.1622%" height="15" fill="rgb(205,140,8)" fg:x="84" fg:w="2"/><text x="7.0627%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.8938%" y="581" width="0.0811%" height="15" fill="rgb(228,84,46)" fg:x="85" fg:w="1"/><text x="7.1438%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.8938%" y="565" width="0.0811%" height="15" fill="rgb(254,188,9)" fg:x="85" fg:w="1"/><text x="7.1438%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.8938%" y="549" width="0.0811%" height="15" fill="rgb(206,112,54)" fg:x="85" fg:w="1"/><text x="7.1438%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8938%" y="533" width="0.0811%" height="15" fill="rgb(216,84,49)" fg:x="85" fg:w="1"/><text x="7.1438%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.8938%" y="517" width="0.0811%" height="15" fill="rgb(214,194,35)" fg:x="85" fg:w="1"/><text x="7.1438%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8938%" y="501" width="0.0811%" height="15" fill="rgb(249,28,3)" fg:x="85" fg:w="1"/><text x="7.1438%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.8938%" y="485" width="0.0811%" height="15" fill="rgb(222,56,52)" fg:x="85" fg:w="1"/><text x="7.1438%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8938%" y="469" width="0.0811%" height="15" fill="rgb(245,217,50)" fg:x="85" fg:w="1"/><text x="7.1438%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.8938%" y="453" width="0.0811%" height="15" fill="rgb(213,201,24)" fg:x="85" fg:w="1"/><text x="7.1438%" y="463.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (44 samples, 3.57%)</title><rect x="3.4874%" y="693" width="3.5685%" height="15" fill="rgb(248,116,28)" fg:x="43" fg:w="44"/><text x="3.7374%" y="703.50">plug..</text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="6.9749%" y="677" width="0.0811%" height="15" fill="rgb(219,72,43)" fg:x="86" fg:w="1"/><text x="7.2249%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.9749%" y="661" width="0.0811%" height="15" fill="rgb(209,138,14)" fg:x="86" fg:w="1"/><text x="7.2249%" y="671.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.9749%" y="645" width="0.0811%" height="15" fill="rgb(222,18,33)" fg:x="86" fg:w="1"/><text x="7.2249%" y="655.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.9749%" y="629" width="0.0811%" height="15" fill="rgb(213,199,7)" fg:x="86" fg:w="1"/><text x="7.2249%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.9749%" y="613" width="0.0811%" height="15" fill="rgb(250,110,10)" fg:x="86" fg:w="1"/><text x="7.2249%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.9749%" y="597" width="0.0811%" height="15" fill="rgb(248,123,6)" fg:x="86" fg:w="1"/><text x="7.2249%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.9749%" y="581" width="0.0811%" height="15" fill="rgb(206,91,31)" fg:x="86" fg:w="1"/><text x="7.2249%" y="591.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9749%" y="565" width="0.0811%" height="15" fill="rgb(211,154,13)" fg:x="86" fg:w="1"/><text x="7.2249%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.9749%" y="549" width="0.0811%" height="15" fill="rgb(225,148,7)" fg:x="86" fg:w="1"/><text x="7.2249%" y="559.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="6.9749%" y="533" width="0.0811%" height="15" fill="rgb(220,160,43)" fg:x="86" fg:w="1"/><text x="7.2249%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.9749%" y="517" width="0.0811%" height="15" fill="rgb(213,52,39)" fg:x="86" fg:w="1"/><text x="7.2249%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.9749%" y="501" width="0.0811%" height="15" fill="rgb(243,137,7)" fg:x="86" fg:w="1"/><text x="7.2249%" y="511.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="6.9749%" y="485" width="0.0811%" height="15" fill="rgb(230,79,13)" fg:x="86" fg:w="1"/><text x="7.2249%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.9749%" y="469" width="0.0811%" height="15" fill="rgb(247,105,23)" fg:x="86" fg:w="1"/><text x="7.2249%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9749%" y="453" width="0.0811%" height="15" fill="rgb(223,179,41)" fg:x="86" fg:w="1"/><text x="7.2249%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.9749%" y="437" width="0.0811%" height="15" fill="rgb(218,9,34)" fg:x="86" fg:w="1"/><text x="7.2249%" y="447.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="7.0560%" y="693" width="0.0811%" height="15" fill="rgb(222,106,8)" fg:x="87" fg:w="1"/><text x="7.3060%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="7.0560%" y="677" width="0.0811%" height="15" fill="rgb(211,220,0)" fg:x="87" fg:w="1"/><text x="7.3060%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0560%" y="661" width="0.0811%" height="15" fill="rgb(229,52,16)" fg:x="87" fg:w="1"/><text x="7.3060%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.1371%" y="661" width="0.0811%" height="15" fill="rgb(212,155,18)" fg:x="88" fg:w="1"/><text x="7.3871%" y="671.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.1371%" y="645" width="0.0811%" height="15" fill="rgb(242,21,14)" fg:x="88" fg:w="1"/><text x="7.3871%" y="655.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.1371%" y="629" width="0.0811%" height="15" fill="rgb(222,19,48)" fg:x="88" fg:w="1"/><text x="7.3871%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.1371%" y="613" width="0.0811%" height="15" fill="rgb(232,45,27)" fg:x="88" fg:w="1"/><text x="7.3871%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.1371%" y="597" width="0.0811%" height="15" fill="rgb(249,103,42)" fg:x="88" fg:w="1"/><text x="7.3871%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.1371%" y="581" width="0.0811%" height="15" fill="rgb(246,81,33)" fg:x="88" fg:w="1"/><text x="7.3871%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (67 samples, 5.43%)</title><rect x="1.8654%" y="709" width="5.4339%" height="15" fill="rgb(252,33,42)" fg:x="23" fg:w="67"/><text x="2.1154%" y="719.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="7.1371%" y="693" width="0.1622%" height="15" fill="rgb(209,212,41)" fg:x="88" fg:w="2"/><text x="7.3871%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="7.1371%" y="677" width="0.1622%" height="15" fill="rgb(207,154,6)" fg:x="88" fg:w="2"/><text x="7.3871%" y="687.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="7.2182%" y="661" width="0.0811%" height="15" fill="rgb(223,64,47)" fg:x="89" fg:w="1"/><text x="7.4682%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="7.2182%" y="645" width="0.0811%" height="15" fill="rgb(211,161,38)" fg:x="89" fg:w="1"/><text x="7.4682%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.2182%" y="629" width="0.0811%" height="15" fill="rgb(219,138,40)" fg:x="89" fg:w="1"/><text x="7.4682%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.2182%" y="613" width="0.0811%" height="15" fill="rgb(241,228,46)" fg:x="89" fg:w="1"/><text x="7.4682%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2182%" y="597" width="0.0811%" height="15" fill="rgb(223,209,38)" fg:x="89" fg:w="1"/><text x="7.4682%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2182%" y="581" width="0.0811%" height="15" fill="rgb(236,164,45)" fg:x="89" fg:w="1"/><text x="7.4682%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="7.2182%" y="565" width="0.0811%" height="15" fill="rgb(231,15,5)" fg:x="89" fg:w="1"/><text x="7.4682%" y="575.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="7.3804%" y="629" width="0.1622%" height="15" fill="rgb(252,35,15)" fg:x="91" fg:w="2"/><text x="7.6304%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="7.3804%" y="613" width="0.1622%" height="15" fill="rgb(248,181,18)" fg:x="91" fg:w="2"/><text x="7.6304%" y="623.50"></text></g><g><title>engine::identifiers::model::get_gid (3 samples, 0.24%)</title><rect x="7.3804%" y="677" width="0.2433%" height="15" fill="rgb(233,39,42)" fg:x="91" fg:w="3"/><text x="7.6304%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="7.3804%" y="661" width="0.2433%" height="15" fill="rgb(238,110,33)" fg:x="91" fg:w="3"/><text x="7.6304%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="7.3804%" y="645" width="0.2433%" height="15" fill="rgb(233,195,10)" fg:x="91" fg:w="3"/><text x="7.6304%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.5426%" y="629" width="0.0811%" height="15" fill="rgb(254,105,3)" fg:x="93" fg:w="1"/><text x="7.7926%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.5426%" y="613" width="0.0811%" height="15" fill="rgb(221,225,9)" fg:x="93" fg:w="1"/><text x="7.7926%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.5426%" y="597" width="0.0811%" height="15" fill="rgb(224,227,45)" fg:x="93" fg:w="1"/><text x="7.7926%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.5426%" y="581" width="0.0811%" height="15" fill="rgb(229,198,43)" fg:x="93" fg:w="1"/><text x="7.7926%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="7.6237%" y="645" width="0.1622%" height="15" fill="rgb(206,209,35)" fg:x="94" fg:w="2"/><text x="7.8737%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7048%" y="629" width="0.0811%" height="15" fill="rgb(245,195,53)" fg:x="95" fg:w="1"/><text x="7.9548%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.7048%" y="613" width="0.0811%" height="15" fill="rgb(240,92,26)" fg:x="95" fg:w="1"/><text x="7.9548%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.7048%" y="597" width="0.0811%" height="15" fill="rgb(207,40,23)" fg:x="95" fg:w="1"/><text x="7.9548%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.7048%" y="581" width="0.0811%" height="15" fill="rgb(223,111,35)" fg:x="95" fg:w="1"/><text x="7.9548%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.7048%" y="565" width="0.0811%" height="15" fill="rgb(229,147,28)" fg:x="95" fg:w="1"/><text x="7.9548%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.7048%" y="549" width="0.0811%" height="15" fill="rgb(211,29,28)" fg:x="95" fg:w="1"/><text x="7.9548%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.7048%" y="533" width="0.0811%" height="15" fill="rgb(228,72,33)" fg:x="95" fg:w="1"/><text x="7.9548%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.7048%" y="517" width="0.0811%" height="15" fill="rgb(205,214,31)" fg:x="95" fg:w="1"/><text x="7.9548%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.7048%" y="501" width="0.0811%" height="15" fill="rgb(224,111,15)" fg:x="95" fg:w="1"/><text x="7.9548%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.7048%" y="485" width="0.0811%" height="15" fill="rgb(253,21,26)" fg:x="95" fg:w="1"/><text x="7.9548%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.7048%" y="469" width="0.0811%" height="15" fill="rgb(245,139,43)" fg:x="95" fg:w="1"/><text x="7.9548%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.7859%" y="629" width="0.0811%" height="15" fill="rgb(252,170,7)" fg:x="96" fg:w="1"/><text x="8.0359%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.7859%" y="613" width="0.0811%" height="15" fill="rgb(231,118,14)" fg:x="96" fg:w="1"/><text x="8.0359%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7859%" y="597" width="0.0811%" height="15" fill="rgb(238,83,0)" fg:x="96" fg:w="1"/><text x="8.0359%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7859%" y="581" width="0.0811%" height="15" fill="rgb(221,39,39)" fg:x="96" fg:w="1"/><text x="8.0359%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.8670%" y="597" width="0.0811%" height="15" fill="rgb(222,119,46)" fg:x="97" fg:w="1"/><text x="8.1170%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8670%" y="581" width="0.0811%" height="15" fill="rgb(222,165,49)" fg:x="97" fg:w="1"/><text x="8.1170%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8670%" y="565" width="0.0811%" height="15" fill="rgb(219,113,52)" fg:x="97" fg:w="1"/><text x="8.1170%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.0292%" y="549" width="0.0811%" height="15" fill="rgb(214,7,15)" fg:x="99" fg:w="1"/><text x="8.2792%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0292%" y="533" width="0.0811%" height="15" fill="rgb(235,32,4)" fg:x="99" fg:w="1"/><text x="8.2792%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0292%" y="517" width="0.0811%" height="15" fill="rgb(238,90,54)" fg:x="99" fg:w="1"/><text x="8.2792%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.0292%" y="501" width="0.0811%" height="15" fill="rgb(213,208,19)" fg:x="99" fg:w="1"/><text x="8.2792%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.9481%" y="581" width="0.2433%" height="15" fill="rgb(233,156,4)" fg:x="98" fg:w="3"/><text x="8.1981%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.9481%" y="565" width="0.2433%" height="15" fill="rgb(207,194,5)" fg:x="98" fg:w="3"/><text x="8.1981%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1103%" y="549" width="0.0811%" height="15" fill="rgb(206,111,30)" fg:x="100" fg:w="1"/><text x="8.3603%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.1103%" y="533" width="0.0811%" height="15" fill="rgb(243,70,54)" fg:x="100" fg:w="1"/><text x="8.3603%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1103%" y="517" width="0.0811%" height="15" fill="rgb(242,28,8)" fg:x="100" fg:w="1"/><text x="8.3603%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="7.8670%" y="613" width="0.4055%" height="15" fill="rgb(219,106,18)" fg:x="97" fg:w="5"/><text x="8.1170%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="7.9481%" y="597" width="0.3244%" height="15" fill="rgb(244,222,10)" fg:x="98" fg:w="4"/><text x="8.1981%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1914%" y="581" width="0.0811%" height="15" fill="rgb(236,179,52)" fg:x="101" fg:w="1"/><text x="8.4414%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.1914%" y="565" width="0.0811%" height="15" fill="rgb(213,23,39)" fg:x="101" fg:w="1"/><text x="8.4414%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1914%" y="549" width="0.0811%" height="15" fill="rgb(238,48,10)" fg:x="101" fg:w="1"/><text x="8.4414%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.65%)</title><rect x="7.7859%" y="645" width="0.6488%" height="15" fill="rgb(251,196,23)" fg:x="96" fg:w="8"/><text x="8.0359%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="7.8670%" y="629" width="0.5677%" height="15" fill="rgb(250,152,24)" fg:x="97" fg:w="7"/><text x="8.1170%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.2725%" y="613" width="0.1622%" height="15" fill="rgb(209,150,17)" fg:x="102" fg:w="2"/><text x="8.5225%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.2725%" y="597" width="0.1622%" height="15" fill="rgb(234,202,34)" fg:x="102" fg:w="2"/><text x="8.5225%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.2725%" y="581" width="0.1622%" height="15" fill="rgb(253,148,53)" fg:x="102" fg:w="2"/><text x="8.5225%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.3536%" y="565" width="0.0811%" height="15" fill="rgb(218,129,16)" fg:x="103" fg:w="1"/><text x="8.6036%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.3536%" y="549" width="0.0811%" height="15" fill="rgb(216,85,19)" fg:x="103" fg:w="1"/><text x="8.6036%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.3536%" y="533" width="0.0811%" height="15" fill="rgb(235,228,7)" fg:x="103" fg:w="1"/><text x="8.6036%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="8.4347%" y="597" width="0.1622%" height="15" fill="rgb(245,175,0)" fg:x="104" fg:w="2"/><text x="8.6847%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.4347%" y="645" width="0.2433%" height="15" fill="rgb(208,168,36)" fg:x="104" fg:w="3"/><text x="8.6847%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="8.4347%" y="629" width="0.2433%" height="15" fill="rgb(246,171,24)" fg:x="104" fg:w="3"/><text x="8.6847%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.4347%" y="613" width="0.2433%" height="15" fill="rgb(215,142,24)" fg:x="104" fg:w="3"/><text x="8.6847%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5969%" y="597" width="0.0811%" height="15" fill="rgb(250,187,7)" fg:x="106" fg:w="1"/><text x="8.8469%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5969%" y="581" width="0.0811%" height="15" fill="rgb(228,66,33)" fg:x="106" fg:w="1"/><text x="8.8469%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5969%" y="565" width="0.0811%" height="15" fill="rgb(234,215,21)" fg:x="106" fg:w="1"/><text x="8.8469%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6780%" y="581" width="0.0811%" height="15" fill="rgb(222,191,20)" fg:x="107" fg:w="1"/><text x="8.9280%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7591%" y="565" width="0.0811%" height="15" fill="rgb(245,79,54)" fg:x="108" fg:w="1"/><text x="9.0091%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.6780%" y="613" width="0.2433%" height="15" fill="rgb(240,10,37)" fg:x="107" fg:w="3"/><text x="8.9280%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="8.6780%" y="597" width="0.2433%" height="15" fill="rgb(214,192,32)" fg:x="107" fg:w="3"/><text x="8.9280%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.7591%" y="581" width="0.1622%" height="15" fill="rgb(209,36,54)" fg:x="108" fg:w="2"/><text x="9.0091%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.8402%" y="565" width="0.0811%" height="15" fill="rgb(220,10,11)" fg:x="109" fg:w="1"/><text x="9.0902%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.0024%" y="597" width="0.0811%" height="15" fill="rgb(221,106,17)" fg:x="111" fg:w="1"/><text x="9.2524%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.0024%" y="581" width="0.0811%" height="15" fill="rgb(251,142,44)" fg:x="111" fg:w="1"/><text x="9.2524%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.0024%" y="565" width="0.0811%" height="15" fill="rgb(238,13,15)" fg:x="111" fg:w="1"/><text x="9.2524%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.0024%" y="549" width="0.0811%" height="15" fill="rgb(208,107,27)" fg:x="111" fg:w="1"/><text x="9.2524%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.49%)</title><rect x="8.6780%" y="629" width="0.4866%" height="15" fill="rgb(205,136,37)" fg:x="107" fg:w="6"/><text x="8.9280%" y="639.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="8.9213%" y="613" width="0.2433%" height="15" fill="rgb(250,205,27)" fg:x="110" fg:w="3"/><text x="9.1713%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="9.0835%" y="597" width="0.0811%" height="15" fill="rgb(210,80,43)" fg:x="112" fg:w="1"/><text x="9.3335%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.0835%" y="581" width="0.0811%" height="15" fill="rgb(247,160,36)" fg:x="112" fg:w="1"/><text x="9.3335%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.0835%" y="565" width="0.0811%" height="15" fill="rgb(234,13,49)" fg:x="112" fg:w="1"/><text x="9.3335%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.4079%" y="533" width="0.0811%" height="15" fill="rgb(234,122,0)" fg:x="116" fg:w="1"/><text x="9.6579%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="9.3268%" y="565" width="0.2433%" height="15" fill="rgb(207,146,38)" fg:x="115" fg:w="3"/><text x="9.5768%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="9.3268%" y="549" width="0.2433%" height="15" fill="rgb(207,177,25)" fg:x="115" fg:w="3"/><text x="9.5768%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.4891%" y="533" width="0.0811%" height="15" fill="rgb(211,178,42)" fg:x="117" fg:w="1"/><text x="9.7391%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4891%" y="517" width="0.0811%" height="15" fill="rgb(230,69,54)" fg:x="117" fg:w="1"/><text x="9.7391%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.4891%" y="501" width="0.0811%" height="15" fill="rgb(214,135,41)" fg:x="117" fg:w="1"/><text x="9.7391%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4891%" y="485" width="0.0811%" height="15" fill="rgb(237,67,25)" fg:x="117" fg:w="1"/><text x="9.7391%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.4891%" y="469" width="0.0811%" height="15" fill="rgb(222,189,50)" fg:x="117" fg:w="1"/><text x="9.7391%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4891%" y="453" width="0.0811%" height="15" fill="rgb(245,148,34)" fg:x="117" fg:w="1"/><text x="9.7391%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.4891%" y="437" width="0.0811%" height="15" fill="rgb(222,29,6)" fg:x="117" fg:w="1"/><text x="9.7391%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4891%" y="421" width="0.0811%" height="15" fill="rgb(221,189,43)" fg:x="117" fg:w="1"/><text x="9.7391%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4891%" y="405" width="0.0811%" height="15" fill="rgb(207,36,27)" fg:x="117" fg:w="1"/><text x="9.7391%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4891%" y="389" width="0.0811%" height="15" fill="rgb(217,90,24)" fg:x="117" fg:w="1"/><text x="9.7391%" y="399.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="9.1646%" y="629" width="0.4866%" height="15" fill="rgb(224,66,35)" fg:x="113" fg:w="6"/><text x="9.4146%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="9.1646%" y="613" width="0.4866%" height="15" fill="rgb(221,13,50)" fg:x="113" fg:w="6"/><text x="9.4146%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.41%)</title><rect x="9.2457%" y="597" width="0.4055%" height="15" fill="rgb(236,68,49)" fg:x="114" fg:w="5"/><text x="9.4957%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="9.3268%" y="581" width="0.3244%" height="15" fill="rgb(229,146,28)" fg:x="115" fg:w="4"/><text x="9.5768%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.5702%" y="565" width="0.0811%" height="15" fill="rgb(225,31,38)" fg:x="118" fg:w="1"/><text x="9.8202%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="9.6513%" y="485" width="0.0811%" height="15" fill="rgb(250,208,3)" fg:x="119" fg:w="1"/><text x="9.9013%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="9.6513%" y="469" width="0.0811%" height="15" fill="rgb(246,54,23)" fg:x="119" fg:w="1"/><text x="9.9013%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="9.6513%" y="453" width="0.0811%" height="15" fill="rgb(243,76,11)" fg:x="119" fg:w="1"/><text x="9.9013%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6513%" y="437" width="0.0811%" height="15" fill="rgb(245,21,50)" fg:x="119" fg:w="1"/><text x="9.9013%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="9.8946%" y="437" width="0.1622%" height="15" fill="rgb(228,9,43)" fg:x="122" fg:w="2"/><text x="10.1446%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="9.8946%" y="421" width="0.1622%" height="15" fill="rgb(208,100,47)" fg:x="122" fg:w="2"/><text x="10.1446%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="9.9757%" y="405" width="0.0811%" height="15" fill="rgb(232,26,8)" fg:x="123" fg:w="1"/><text x="10.2257%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="9.9757%" y="389" width="0.0811%" height="15" fill="rgb(216,166,38)" fg:x="123" fg:w="1"/><text x="10.2257%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.9757%" y="373" width="0.0811%" height="15" fill="rgb(251,202,51)" fg:x="123" fg:w="1"/><text x="10.2257%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="9.9757%" y="357" width="0.0811%" height="15" fill="rgb(254,216,34)" fg:x="123" fg:w="1"/><text x="10.2257%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="9.7324%" y="469" width="0.4055%" height="15" fill="rgb(251,32,27)" fg:x="120" fg:w="5"/><text x="9.9824%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="9.8946%" y="453" width="0.2433%" height="15" fill="rgb(208,127,28)" fg:x="122" fg:w="3"/><text x="10.1446%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0568%" y="437" width="0.0811%" height="15" fill="rgb(224,137,22)" fg:x="124" fg:w="1"/><text x="10.3068%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0568%" y="421" width="0.0811%" height="15" fill="rgb(254,70,32)" fg:x="124" fg:w="1"/><text x="10.3068%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0568%" y="405" width="0.0811%" height="15" fill="rgb(229,75,37)" fg:x="124" fg:w="1"/><text x="10.3068%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="9.7324%" y="485" width="0.4866%" height="15" fill="rgb(252,64,23)" fg:x="120" fg:w="6"/><text x="9.9824%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1379%" y="469" width="0.0811%" height="15" fill="rgb(232,162,48)" fg:x="125" fg:w="1"/><text x="10.3879%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1379%" y="453" width="0.0811%" height="15" fill="rgb(246,160,12)" fg:x="125" fg:w="1"/><text x="10.3879%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1379%" y="437" width="0.0811%" height="15" fill="rgb(247,166,0)" fg:x="125" fg:w="1"/><text x="10.3879%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.65%)</title><rect x="9.6513%" y="501" width="0.6488%" height="15" fill="rgb(249,219,21)" fg:x="119" fg:w="8"/><text x="9.9013%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="10.2190%" y="485" width="0.0811%" height="15" fill="rgb(205,209,3)" fg:x="126" fg:w="1"/><text x="10.4690%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.73%)</title><rect x="9.6513%" y="533" width="0.7299%" height="15" fill="rgb(243,44,1)" fg:x="119" fg:w="9"/><text x="9.9013%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.73%)</title><rect x="9.6513%" y="517" width="0.7299%" height="15" fill="rgb(206,159,16)" fg:x="119" fg:w="9"/><text x="9.9013%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3001%" y="501" width="0.0811%" height="15" fill="rgb(244,77,30)" fg:x="127" fg:w="1"/><text x="10.5501%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.81%)</title><rect x="9.6513%" y="565" width="0.8110%" height="15" fill="rgb(218,69,12)" fg:x="119" fg:w="10"/><text x="9.9013%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.81%)</title><rect x="9.6513%" y="549" width="0.8110%" height="15" fill="rgb(212,87,7)" fg:x="119" fg:w="10"/><text x="9.9013%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3812%" y="533" width="0.0811%" height="15" fill="rgb(245,114,25)" fg:x="128" fg:w="1"/><text x="10.6312%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3812%" y="517" width="0.0811%" height="15" fill="rgb(210,61,42)" fg:x="128" fg:w="1"/><text x="10.6312%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.3812%" y="501" width="0.0811%" height="15" fill="rgb(211,52,33)" fg:x="128" fg:w="1"/><text x="10.6312%" y="511.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (36 samples, 2.92%)</title><rect x="7.6237%" y="677" width="2.9197%" height="15" fill="rgb(234,58,33)" fg:x="94" fg:w="36"/><text x="7.8737%" y="687.50">en..</text></g><g><title>engine::session::SavesEntities::check_for_changes (36 samples, 2.92%)</title><rect x="7.6237%" y="661" width="2.9197%" height="15" fill="rgb(220,115,36)" fg:x="94" fg:w="36"/><text x="7.8737%" y="671.50">en..</text></g><g><title>kernel::model::any_entity_changes (23 samples, 1.87%)</title><rect x="8.6780%" y="645" width="1.8654%" height="15" fill="rgb(243,153,54)" fg:x="107" fg:w="23"/><text x="8.9280%" y="655.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (11 samples, 0.89%)</title><rect x="9.6513%" y="629" width="0.8921%" height="15" fill="rgb(251,47,18)" fg:x="119" fg:w="11"/><text x="9.9013%" y="639.50"></text></g><g><title>serde_json::de::from_trait (11 samples, 0.89%)</title><rect x="9.6513%" y="613" width="0.8921%" height="15" fill="rgb(242,102,42)" fg:x="119" fg:w="11"/><text x="9.9013%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.89%)</title><rect x="9.6513%" y="597" width="0.8921%" height="15" fill="rgb(234,31,38)" fg:x="119" fg:w="11"/><text x="9.9013%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.89%)</title><rect x="9.6513%" y="581" width="0.8921%" height="15" fill="rgb(221,117,51)" fg:x="119" fg:w="11"/><text x="9.9013%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.4623%" y="565" width="0.0811%" height="15" fill="rgb(212,20,18)" fg:x="129" fg:w="1"/><text x="10.7123%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4623%" y="549" width="0.0811%" height="15" fill="rgb(245,133,36)" fg:x="129" fg:w="1"/><text x="10.7123%" y="559.50"></text></g><g><title>engine::session::Session::close (41 samples, 3.33%)</title><rect x="7.2993%" y="709" width="3.3252%" height="15" fill="rgb(212,6,19)" fg:x="90" fg:w="41"/><text x="7.5493%" y="719.50">eng..</text></g><g><title>engine::session::Session::save_entity_changes (40 samples, 3.24%)</title><rect x="7.3804%" y="693" width="3.2441%" height="15" fill="rgb(218,1,36)" fg:x="91" fg:w="40"/><text x="7.6304%" y="703.50">eng..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="10.5434%" y="677" width="0.0811%" height="15" fill="rgb(246,84,54)" fg:x="130" fg:w="1"/><text x="10.7934%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="10.5434%" y="661" width="0.0811%" height="15" fill="rgb(242,110,6)" fg:x="130" fg:w="1"/><text x="10.7934%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="10.5434%" y="645" width="0.0811%" height="15" fill="rgb(214,47,5)" fg:x="130" fg:w="1"/><text x="10.7934%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="10.5434%" y="629" width="0.0811%" height="15" fill="rgb(218,159,25)" fg:x="130" fg:w="1"/><text x="10.7934%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="10.5434%" y="613" width="0.0811%" height="15" fill="rgb(215,211,28)" fg:x="130" fg:w="1"/><text x="10.7934%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.5434%" y="597" width="0.0811%" height="15" fill="rgb(238,59,32)" fg:x="130" fg:w="1"/><text x="10.7934%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.5434%" y="581" width="0.0811%" height="15" fill="rgb(226,82,3)" fg:x="130" fg:w="1"/><text x="10.7934%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="10.5434%" y="565" width="0.0811%" height="15" fill="rgb(240,164,32)" fg:x="130" fg:w="1"/><text x="10.7934%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="10.5434%" y="549" width="0.0811%" height="15" fill="rgb(232,46,7)" fg:x="130" fg:w="1"/><text x="10.7934%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.5434%" y="533" width="0.0811%" height="15" fill="rgb(229,129,53)" fg:x="130" fg:w="1"/><text x="10.7934%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="10.7056%" y="549" width="0.0811%" height="15" fill="rgb(234,188,29)" fg:x="132" fg:w="1"/><text x="10.9556%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.7056%" y="533" width="0.0811%" height="15" fill="rgb(246,141,4)" fg:x="132" fg:w="1"/><text x="10.9556%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.7056%" y="517" width="0.0811%" height="15" fill="rgb(229,23,39)" fg:x="132" fg:w="1"/><text x="10.9556%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.7056%" y="501" width="0.0811%" height="15" fill="rgb(206,12,3)" fg:x="132" fg:w="1"/><text x="10.9556%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.7056%" y="485" width="0.0811%" height="15" fill="rgb(252,226,20)" fg:x="132" fg:w="1"/><text x="10.9556%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.7056%" y="469" width="0.0811%" height="15" fill="rgb(216,123,35)" fg:x="132" fg:w="1"/><text x="10.9556%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.7056%" y="453" width="0.0811%" height="15" fill="rgb(212,68,40)" fg:x="132" fg:w="1"/><text x="10.9556%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="10.7867%" y="533" width="0.0811%" height="15" fill="rgb(254,125,32)" fg:x="133" fg:w="1"/><text x="11.0367%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="10.7867%" y="517" width="0.0811%" height="15" fill="rgb(253,97,22)" fg:x="133" fg:w="1"/><text x="11.0367%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.7867%" y="501" width="0.0811%" height="15" fill="rgb(241,101,14)" fg:x="133" fg:w="1"/><text x="11.0367%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.7867%" y="485" width="0.0811%" height="15" fill="rgb(238,103,29)" fg:x="133" fg:w="1"/><text x="11.0367%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.8678%" y="501" width="0.0811%" height="15" fill="rgb(233,195,47)" fg:x="134" fg:w="1"/><text x="11.1178%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.8678%" y="485" width="0.0811%" height="15" fill="rgb(246,218,30)" fg:x="134" fg:w="1"/><text x="11.1178%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="10.7056%" y="565" width="0.3244%" height="15" fill="rgb(219,145,47)" fg:x="132" fg:w="4"/><text x="10.9556%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="10.7867%" y="549" width="0.2433%" height="15" fill="rgb(243,12,26)" fg:x="133" fg:w="3"/><text x="11.0367%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.8678%" y="533" width="0.1622%" height="15" fill="rgb(214,87,16)" fg:x="134" fg:w="2"/><text x="11.1178%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.8678%" y="517" width="0.1622%" height="15" fill="rgb(208,99,42)" fg:x="134" fg:w="2"/><text x="11.1178%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.9489%" y="501" width="0.0811%" height="15" fill="rgb(253,99,2)" fg:x="135" fg:w="1"/><text x="11.1989%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.9489%" y="485" width="0.0811%" height="15" fill="rgb(220,168,23)" fg:x="135" fg:w="1"/><text x="11.1989%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.1111%" y="485" width="0.1622%" height="15" fill="rgb(242,38,24)" fg:x="137" fg:w="2"/><text x="11.3611%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.1922%" y="469" width="0.0811%" height="15" fill="rgb(225,182,9)" fg:x="138" fg:w="1"/><text x="11.4422%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.1922%" y="453" width="0.0811%" height="15" fill="rgb(243,178,37)" fg:x="138" fg:w="1"/><text x="11.4422%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.1922%" y="437" width="0.0811%" height="15" fill="rgb(232,139,19)" fg:x="138" fg:w="1"/><text x="11.4422%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.1922%" y="421" width="0.0811%" height="15" fill="rgb(225,201,24)" fg:x="138" fg:w="1"/><text x="11.4422%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.1922%" y="405" width="0.0811%" height="15" fill="rgb(221,47,46)" fg:x="138" fg:w="1"/><text x="11.4422%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.1922%" y="389" width="0.0811%" height="15" fill="rgb(249,23,13)" fg:x="138" fg:w="1"/><text x="11.4422%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.1922%" y="373" width="0.0811%" height="15" fill="rgb(219,9,5)" fg:x="138" fg:w="1"/><text x="11.4422%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.1922%" y="357" width="0.0811%" height="15" fill="rgb(254,171,16)" fg:x="138" fg:w="1"/><text x="11.4422%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.1922%" y="341" width="0.0811%" height="15" fill="rgb(230,171,20)" fg:x="138" fg:w="1"/><text x="11.4422%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.1922%" y="325" width="0.0811%" height="15" fill="rgb(210,71,41)" fg:x="138" fg:w="1"/><text x="11.4422%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.1922%" y="309" width="0.0811%" height="15" fill="rgb(206,173,20)" fg:x="138" fg:w="1"/><text x="11.4422%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.1922%" y="293" width="0.0811%" height="15" fill="rgb(233,88,34)" fg:x="138" fg:w="1"/><text x="11.4422%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.1111%" y="517" width="0.2433%" height="15" fill="rgb(223,209,46)" fg:x="137" fg:w="3"/><text x="11.3611%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.1111%" y="501" width="0.2433%" height="15" fill="rgb(250,43,18)" fg:x="137" fg:w="3"/><text x="11.3611%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.2733%" y="485" width="0.0811%" height="15" fill="rgb(208,13,10)" fg:x="139" fg:w="1"/><text x="11.5233%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.2733%" y="469" width="0.0811%" height="15" fill="rgb(212,200,36)" fg:x="139" fg:w="1"/><text x="11.5233%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.2733%" y="453" width="0.0811%" height="15" fill="rgb(225,90,30)" fg:x="139" fg:w="1"/><text x="11.5233%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.2733%" y="437" width="0.0811%" height="15" fill="rgb(236,182,39)" fg:x="139" fg:w="1"/><text x="11.5233%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.2733%" y="421" width="0.0811%" height="15" fill="rgb(212,144,35)" fg:x="139" fg:w="1"/><text x="11.5233%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.2733%" y="405" width="0.0811%" height="15" fill="rgb(228,63,44)" fg:x="139" fg:w="1"/><text x="11.5233%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.2733%" y="389" width="0.0811%" height="15" fill="rgb(228,109,6)" fg:x="139" fg:w="1"/><text x="11.5233%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.3544%" y="517" width="0.0811%" height="15" fill="rgb(238,117,24)" fg:x="140" fg:w="1"/><text x="11.6044%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (6 samples, 0.49%)</title><rect x="11.0300%" y="565" width="0.4866%" height="15" fill="rgb(242,26,26)" fg:x="136" fg:w="6"/><text x="11.2800%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (6 samples, 0.49%)</title><rect x="11.0300%" y="549" width="0.4866%" height="15" fill="rgb(221,92,48)" fg:x="136" fg:w="6"/><text x="11.2800%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="11.1111%" y="533" width="0.4055%" height="15" fill="rgb(209,209,32)" fg:x="137" fg:w="5"/><text x="11.3611%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4355%" y="517" width="0.0811%" height="15" fill="rgb(221,70,22)" fg:x="141" fg:w="1"/><text x="11.6855%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="11.5166%" y="533" width="0.0811%" height="15" fill="rgb(248,145,5)" fg:x="142" fg:w="1"/><text x="11.7666%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="11.5166%" y="517" width="0.0811%" height="15" fill="rgb(226,116,26)" fg:x="142" fg:w="1"/><text x="11.7666%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="11.5166%" y="501" width="0.0811%" height="15" fill="rgb(244,5,17)" fg:x="142" fg:w="1"/><text x="11.7666%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="11.5166%" y="485" width="0.0811%" height="15" fill="rgb(252,159,33)" fg:x="142" fg:w="1"/><text x="11.7666%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="11.5166%" y="469" width="0.0811%" height="15" fill="rgb(206,71,0)" fg:x="142" fg:w="1"/><text x="11.7666%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="11.5166%" y="453" width="0.0811%" height="15" fill="rgb(233,118,54)" fg:x="142" fg:w="1"/><text x="11.7666%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="11.5166%" y="437" width="0.0811%" height="15" fill="rgb(234,83,48)" fg:x="142" fg:w="1"/><text x="11.7666%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="11.5166%" y="421" width="0.0811%" height="15" fill="rgb(228,3,54)" fg:x="142" fg:w="1"/><text x="11.7666%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="11.5977%" y="533" width="0.0811%" height="15" fill="rgb(226,155,13)" fg:x="143" fg:w="1"/><text x="11.8477%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="11.6788%" y="453" width="0.0811%" height="15" fill="rgb(241,28,37)" fg:x="144" fg:w="1"/><text x="11.9288%" y="463.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="11.6788%" y="437" width="0.0811%" height="15" fill="rgb(233,93,10)" fg:x="144" fg:w="1"/><text x="11.9288%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.6788%" y="421" width="0.0811%" height="15" fill="rgb(225,113,19)" fg:x="144" fg:w="1"/><text x="11.9288%" y="431.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.6788%" y="405" width="0.0811%" height="15" fill="rgb(241,2,18)" fg:x="144" fg:w="1"/><text x="11.9288%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="11.6788%" y="389" width="0.0811%" height="15" fill="rgb(228,207,21)" fg:x="144" fg:w="1"/><text x="11.9288%" y="399.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.6788%" y="373" width="0.0811%" height="15" fill="rgb(213,211,35)" fg:x="144" fg:w="1"/><text x="11.9288%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.6788%" y="357" width="0.0811%" height="15" fill="rgb(209,83,10)" fg:x="144" fg:w="1"/><text x="11.9288%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.7599%" y="325" width="0.0811%" height="15" fill="rgb(209,164,1)" fg:x="145" fg:w="1"/><text x="12.0099%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.7599%" y="309" width="0.0811%" height="15" fill="rgb(213,184,43)" fg:x="145" fg:w="1"/><text x="12.0099%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.7599%" y="293" width="0.0811%" height="15" fill="rgb(231,61,34)" fg:x="145" fg:w="1"/><text x="12.0099%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="11.7599%" y="437" width="0.2433%" height="15" fill="rgb(235,75,3)" fg:x="145" fg:w="3"/><text x="12.0099%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="11.7599%" y="421" width="0.2433%" height="15" fill="rgb(220,106,47)" fg:x="145" fg:w="3"/><text x="12.0099%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="11.7599%" y="405" width="0.2433%" height="15" fill="rgb(210,196,33)" fg:x="145" fg:w="3"/><text x="12.0099%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="11.7599%" y="389" width="0.2433%" height="15" fill="rgb(229,154,42)" fg:x="145" fg:w="3"/><text x="12.0099%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="11.7599%" y="373" width="0.2433%" height="15" fill="rgb(228,114,26)" fg:x="145" fg:w="3"/><text x="12.0099%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="11.7599%" y="357" width="0.2433%" height="15" fill="rgb(208,144,1)" fg:x="145" fg:w="3"/><text x="12.0099%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="11.7599%" y="341" width="0.2433%" height="15" fill="rgb(239,112,37)" fg:x="145" fg:w="3"/><text x="12.0099%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.8410%" y="325" width="0.1622%" height="15" fill="rgb(210,96,50)" fg:x="146" fg:w="2"/><text x="12.0910%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.8410%" y="309" width="0.1622%" height="15" fill="rgb(222,178,2)" fg:x="146" fg:w="2"/><text x="12.0910%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="11.8410%" y="293" width="0.1622%" height="15" fill="rgb(226,74,18)" fg:x="146" fg:w="2"/><text x="12.0910%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.8410%" y="277" width="0.1622%" height="15" fill="rgb(225,67,54)" fg:x="146" fg:w="2"/><text x="12.0910%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.8410%" y="261" width="0.1622%" height="15" fill="rgb(251,92,32)" fg:x="146" fg:w="2"/><text x="12.0910%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="11.9221%" y="245" width="0.0811%" height="15" fill="rgb(228,149,22)" fg:x="147" fg:w="1"/><text x="12.1721%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9221%" y="229" width="0.0811%" height="15" fill="rgb(243,54,13)" fg:x="147" fg:w="1"/><text x="12.1721%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.41%)</title><rect x="11.6788%" y="501" width="0.4055%" height="15" fill="rgb(243,180,28)" fg:x="144" fg:w="5"/><text x="11.9288%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.41%)</title><rect x="11.6788%" y="485" width="0.4055%" height="15" fill="rgb(208,167,24)" fg:x="144" fg:w="5"/><text x="11.9288%" y="495.50"></text></g><g><title>engine::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="11.6788%" y="469" width="0.4055%" height="15" fill="rgb(245,73,45)" fg:x="144" fg:w="5"/><text x="11.9288%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="11.7599%" y="453" width="0.3244%" height="15" fill="rgb(237,203,48)" fg:x="145" fg:w="4"/><text x="12.0099%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="12.0032%" y="437" width="0.0811%" height="15" fill="rgb(211,197,16)" fg:x="148" fg:w="1"/><text x="12.2532%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.0032%" y="421" width="0.0811%" height="15" fill="rgb(243,99,51)" fg:x="148" fg:w="1"/><text x="12.2532%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.0032%" y="405" width="0.0811%" height="15" fill="rgb(215,123,29)" fg:x="148" fg:w="1"/><text x="12.2532%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.0032%" y="389" width="0.0811%" height="15" fill="rgb(239,186,37)" fg:x="148" fg:w="1"/><text x="12.2532%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.0032%" y="373" width="0.0811%" height="15" fill="rgb(252,136,39)" fg:x="148" fg:w="1"/><text x="12.2532%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.0032%" y="357" width="0.0811%" height="15" fill="rgb(223,213,32)" fg:x="148" fg:w="1"/><text x="12.2532%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.0032%" y="341" width="0.0811%" height="15" fill="rgb(233,115,5)" fg:x="148" fg:w="1"/><text x="12.2532%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.0032%" y="325" width="0.0811%" height="15" fill="rgb(207,226,44)" fg:x="148" fg:w="1"/><text x="12.2532%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.0032%" y="309" width="0.0811%" height="15" fill="rgb(208,126,0)" fg:x="148" fg:w="1"/><text x="12.2532%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.0032%" y="293" width="0.0811%" height="15" fill="rgb(244,66,21)" fg:x="148" fg:w="1"/><text x="12.2532%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.0032%" y="277" width="0.0811%" height="15" fill="rgb(222,97,12)" fg:x="148" fg:w="1"/><text x="12.2532%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.0032%" y="261" width="0.0811%" height="15" fill="rgb(219,213,19)" fg:x="148" fg:w="1"/><text x="12.2532%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.0032%" y="245" width="0.0811%" height="15" fill="rgb(252,169,30)" fg:x="148" fg:w="1"/><text x="12.2532%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.0032%" y="229" width="0.0811%" height="15" fill="rgb(206,32,51)" fg:x="148" fg:w="1"/><text x="12.2532%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="12.0032%" y="213" width="0.0811%" height="15" fill="rgb(250,172,42)" fg:x="148" fg:w="1"/><text x="12.2532%" y="223.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (8 samples, 0.65%)</title><rect x="11.5166%" y="565" width="0.6488%" height="15" fill="rgb(209,34,43)" fg:x="142" fg:w="8"/><text x="11.7666%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (8 samples, 0.65%)</title><rect x="11.5166%" y="549" width="0.6488%" height="15" fill="rgb(223,11,35)" fg:x="142" fg:w="8"/><text x="11.7666%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.49%)</title><rect x="11.6788%" y="533" width="0.4866%" height="15" fill="rgb(251,219,26)" fg:x="144" fg:w="6"/><text x="11.9288%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="11.6788%" y="517" width="0.4866%" height="15" fill="rgb(231,119,3)" fg:x="144" fg:w="6"/><text x="11.9288%" y="527.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0843%" y="501" width="0.0811%" height="15" fill="rgb(216,97,11)" fg:x="149" fg:w="1"/><text x="12.3343%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.0843%" y="485" width="0.0811%" height="15" fill="rgb(223,59,9)" fg:x="149" fg:w="1"/><text x="12.3343%" y="495.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="12.1655%" y="437" width="0.0811%" height="15" fill="rgb(233,93,31)" fg:x="150" fg:w="1"/><text x="12.4155%" y="447.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1655%" y="421" width="0.0811%" height="15" fill="rgb(239,81,33)" fg:x="150" fg:w="1"/><text x="12.4155%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1655%" y="405" width="0.0811%" height="15" fill="rgb(213,120,34)" fg:x="150" fg:w="1"/><text x="12.4155%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1655%" y="389" width="0.0811%" height="15" fill="rgb(243,49,53)" fg:x="150" fg:w="1"/><text x="12.4155%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.1655%" y="373" width="0.0811%" height="15" fill="rgb(247,216,33)" fg:x="150" fg:w="1"/><text x="12.4155%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.1655%" y="357" width="0.0811%" height="15" fill="rgb(226,26,14)" fg:x="150" fg:w="1"/><text x="12.4155%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.1655%" y="341" width="0.0811%" height="15" fill="rgb(215,49,53)" fg:x="150" fg:w="1"/><text x="12.4155%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.1655%" y="325" width="0.0811%" height="15" fill="rgb(245,162,40)" fg:x="150" fg:w="1"/><text x="12.4155%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.1655%" y="309" width="0.0811%" height="15" fill="rgb(229,68,17)" fg:x="150" fg:w="1"/><text x="12.4155%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.1655%" y="293" width="0.0811%" height="15" fill="rgb(213,182,10)" fg:x="150" fg:w="1"/><text x="12.4155%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.1655%" y="277" width="0.0811%" height="15" fill="rgb(245,125,30)" fg:x="150" fg:w="1"/><text x="12.4155%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.1655%" y="261" width="0.0811%" height="15" fill="rgb(232,202,2)" fg:x="150" fg:w="1"/><text x="12.4155%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.1655%" y="245" width="0.0811%" height="15" fill="rgb(237,140,51)" fg:x="150" fg:w="1"/><text x="12.4155%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1655%" y="229" width="0.0811%" height="15" fill="rgb(236,157,25)" fg:x="150" fg:w="1"/><text x="12.4155%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3277%" y="357" width="0.0811%" height="15" fill="rgb(219,209,0)" fg:x="152" fg:w="1"/><text x="12.5777%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3277%" y="341" width="0.0811%" height="15" fill="rgb(240,116,54)" fg:x="152" fg:w="1"/><text x="12.5777%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3277%" y="325" width="0.0811%" height="15" fill="rgb(216,10,36)" fg:x="152" fg:w="1"/><text x="12.5777%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3277%" y="309" width="0.0811%" height="15" fill="rgb(222,72,44)" fg:x="152" fg:w="1"/><text x="12.5777%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3277%" y="293" width="0.0811%" height="15" fill="rgb(232,159,9)" fg:x="152" fg:w="1"/><text x="12.5777%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.3277%" y="277" width="0.0811%" height="15" fill="rgb(210,39,32)" fg:x="152" fg:w="1"/><text x="12.5777%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.3277%" y="261" width="0.0811%" height="15" fill="rgb(216,194,45)" fg:x="152" fg:w="1"/><text x="12.5777%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.3277%" y="245" width="0.0811%" height="15" fill="rgb(218,18,35)" fg:x="152" fg:w="1"/><text x="12.5777%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.3277%" y="229" width="0.0811%" height="15" fill="rgb(207,83,51)" fg:x="152" fg:w="1"/><text x="12.5777%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.3277%" y="213" width="0.0811%" height="15" fill="rgb(225,63,43)" fg:x="152" fg:w="1"/><text x="12.5777%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="12.3277%" y="197" width="0.0811%" height="15" fill="rgb(207,57,36)" fg:x="152" fg:w="1"/><text x="12.5777%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.3277%" y="181" width="0.0811%" height="15" fill="rgb(216,99,33)" fg:x="152" fg:w="1"/><text x="12.5777%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.4899%" y="261" width="0.0811%" height="15" fill="rgb(225,42,16)" fg:x="154" fg:w="1"/><text x="12.7399%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.5710%" y="229" width="0.0811%" height="15" fill="rgb(220,201,45)" fg:x="155" fg:w="1"/><text x="12.8210%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.41%)</title><rect x="12.3277%" y="405" width="0.4055%" height="15" fill="rgb(225,33,4)" fg:x="152" fg:w="5"/><text x="12.5777%" y="415.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.41%)</title><rect x="12.3277%" y="389" width="0.4055%" height="15" fill="rgb(224,33,50)" fg:x="152" fg:w="5"/><text x="12.5777%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.41%)</title><rect x="12.3277%" y="373" width="0.4055%" height="15" fill="rgb(246,198,51)" fg:x="152" fg:w="5"/><text x="12.5777%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.32%)</title><rect x="12.4088%" y="357" width="0.3244%" height="15" fill="rgb(205,22,4)" fg:x="153" fg:w="4"/><text x="12.6588%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="12.4088%" y="341" width="0.3244%" height="15" fill="rgb(206,3,8)" fg:x="153" fg:w="4"/><text x="12.6588%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.32%)</title><rect x="12.4088%" y="325" width="0.3244%" height="15" fill="rgb(251,23,15)" fg:x="153" fg:w="4"/><text x="12.6588%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="12.4088%" y="309" width="0.3244%" height="15" fill="rgb(252,88,28)" fg:x="153" fg:w="4"/><text x="12.6588%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="12.4088%" y="293" width="0.3244%" height="15" fill="rgb(212,127,14)" fg:x="153" fg:w="4"/><text x="12.6588%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="12.4899%" y="277" width="0.2433%" height="15" fill="rgb(247,145,37)" fg:x="154" fg:w="3"/><text x="12.7399%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.5710%" y="261" width="0.1622%" height="15" fill="rgb(209,117,53)" fg:x="155" fg:w="2"/><text x="12.8210%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.5710%" y="245" width="0.1622%" height="15" fill="rgb(212,90,42)" fg:x="155" fg:w="2"/><text x="12.8210%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.6521%" y="229" width="0.0811%" height="15" fill="rgb(218,164,37)" fg:x="156" fg:w="1"/><text x="12.9021%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6521%" y="213" width="0.0811%" height="15" fill="rgb(246,65,34)" fg:x="156" fg:w="1"/><text x="12.9021%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.6521%" y="197" width="0.0811%" height="15" fill="rgb(231,100,33)" fg:x="156" fg:w="1"/><text x="12.9021%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="12.7332%" y="389" width="0.0811%" height="15" fill="rgb(228,126,14)" fg:x="157" fg:w="1"/><text x="12.9832%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.7332%" y="373" width="0.0811%" height="15" fill="rgb(215,173,21)" fg:x="157" fg:w="1"/><text x="12.9832%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8954%" y="357" width="0.0811%" height="15" fill="rgb(210,6,40)" fg:x="159" fg:w="1"/><text x="13.1454%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8954%" y="341" width="0.0811%" height="15" fill="rgb(212,48,18)" fg:x="159" fg:w="1"/><text x="13.1454%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8954%" y="325" width="0.0811%" height="15" fill="rgb(230,214,11)" fg:x="159" fg:w="1"/><text x="13.1454%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8954%" y="309" width="0.0811%" height="15" fill="rgb(254,105,39)" fg:x="159" fg:w="1"/><text x="13.1454%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8954%" y="293" width="0.0811%" height="15" fill="rgb(245,158,5)" fg:x="159" fg:w="1"/><text x="13.1454%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8954%" y="277" width="0.0811%" height="15" fill="rgb(249,208,11)" fg:x="159" fg:w="1"/><text x="13.1454%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.8954%" y="261" width="0.0811%" height="15" fill="rgb(210,39,28)" fg:x="159" fg:w="1"/><text x="13.1454%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.8954%" y="245" width="0.0811%" height="15" fill="rgb(211,56,53)" fg:x="159" fg:w="1"/><text x="13.1454%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.8954%" y="229" width="0.0811%" height="15" fill="rgb(226,201,30)" fg:x="159" fg:w="1"/><text x="13.1454%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8954%" y="213" width="0.0811%" height="15" fill="rgb(239,101,34)" fg:x="159" fg:w="1"/><text x="13.1454%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8954%" y="197" width="0.0811%" height="15" fill="rgb(226,209,5)" fg:x="159" fg:w="1"/><text x="13.1454%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.8954%" y="181" width="0.0811%" height="15" fill="rgb(250,105,47)" fg:x="159" fg:w="1"/><text x="13.1454%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.8954%" y="165" width="0.0811%" height="15" fill="rgb(230,72,3)" fg:x="159" fg:w="1"/><text x="13.1454%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.8954%" y="149" width="0.0811%" height="15" fill="rgb(232,218,39)" fg:x="159" fg:w="1"/><text x="13.1454%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.8954%" y="133" width="0.0811%" height="15" fill="rgb(248,166,6)" fg:x="159" fg:w="1"/><text x="13.1454%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8954%" y="117" width="0.0811%" height="15" fill="rgb(247,89,20)" fg:x="159" fg:w="1"/><text x="13.1454%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="12.9765%" y="357" width="0.1622%" height="15" fill="rgb(248,130,54)" fg:x="160" fg:w="2"/><text x="13.2265%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.0576%" y="341" width="0.0811%" height="15" fill="rgb(234,196,4)" fg:x="161" fg:w="1"/><text x="13.3076%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="13.1387%" y="357" width="0.1622%" height="15" fill="rgb(250,143,31)" fg:x="162" fg:w="2"/><text x="13.3887%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="13.1387%" y="341" width="0.1622%" height="15" fill="rgb(211,110,34)" fg:x="162" fg:w="2"/><text x="13.3887%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.2198%" y="325" width="0.0811%" height="15" fill="rgb(215,124,48)" fg:x="163" fg:w="1"/><text x="13.4698%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.2198%" y="309" width="0.0811%" height="15" fill="rgb(216,46,13)" fg:x="163" fg:w="1"/><text x="13.4698%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.2198%" y="293" width="0.0811%" height="15" fill="rgb(205,184,25)" fg:x="163" fg:w="1"/><text x="13.4698%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.65%)</title><rect x="12.7332%" y="405" width="0.6488%" height="15" fill="rgb(228,1,10)" fg:x="157" fg:w="8"/><text x="12.9832%" y="415.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.57%)</title><rect x="12.8143%" y="389" width="0.5677%" height="15" fill="rgb(213,116,27)" fg:x="158" fg:w="7"/><text x="13.0643%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.57%)</title><rect x="12.8143%" y="373" width="0.5677%" height="15" fill="rgb(241,95,50)" fg:x="158" fg:w="7"/><text x="13.0643%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.3009%" y="357" width="0.0811%" height="15" fill="rgb(238,48,32)" fg:x="164" fg:w="1"/><text x="13.5509%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3009%" y="341" width="0.0811%" height="15" fill="rgb(235,113,49)" fg:x="164" fg:w="1"/><text x="13.5509%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.3009%" y="325" width="0.0811%" height="15" fill="rgb(205,127,43)" fg:x="164" fg:w="1"/><text x="13.5509%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3009%" y="309" width="0.0811%" height="15" fill="rgb(250,162,2)" fg:x="164" fg:w="1"/><text x="13.5509%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.3009%" y="293" width="0.0811%" height="15" fill="rgb(220,13,41)" fg:x="164" fg:w="1"/><text x="13.5509%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3009%" y="277" width="0.0811%" height="15" fill="rgb(249,221,25)" fg:x="164" fg:w="1"/><text x="13.5509%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.3009%" y="261" width="0.0811%" height="15" fill="rgb(215,208,19)" fg:x="164" fg:w="1"/><text x="13.5509%" y="271.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="13.3009%" y="245" width="0.0811%" height="15" fill="rgb(236,175,2)" fg:x="164" fg:w="1"/><text x="13.5509%" y="255.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="13.3009%" y="229" width="0.0811%" height="15" fill="rgb(241,52,2)" fg:x="164" fg:w="1"/><text x="13.5509%" y="239.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.5442%" y="277" width="0.0811%" height="15" fill="rgb(248,140,14)" fg:x="167" fg:w="1"/><text x="13.7942%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.5442%" y="261" width="0.0811%" height="15" fill="rgb(253,22,42)" fg:x="167" fg:w="1"/><text x="13.7942%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="13.5442%" y="245" width="0.0811%" height="15" fill="rgb(234,61,47)" fg:x="167" fg:w="1"/><text x="13.7942%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="13.5442%" y="229" width="0.0811%" height="15" fill="rgb(208,226,15)" fg:x="167" fg:w="1"/><text x="13.7942%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="13.5442%" y="213" width="0.0811%" height="15" fill="rgb(217,221,4)" fg:x="167" fg:w="1"/><text x="13.7942%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="13.5442%" y="197" width="0.0811%" height="15" fill="rgb(212,174,34)" fg:x="167" fg:w="1"/><text x="13.7942%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.5442%" y="181" width="0.0811%" height="15" fill="rgb(253,83,4)" fg:x="167" fg:w="1"/><text x="13.7942%" y="191.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (3 samples, 0.24%)</title><rect x="13.4631%" y="357" width="0.2433%" height="15" fill="rgb(250,195,49)" fg:x="166" fg:w="3"/><text x="13.7131%" y="367.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="13.5442%" y="341" width="0.1622%" height="15" fill="rgb(241,192,25)" fg:x="167" fg:w="2"/><text x="13.7942%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="13.5442%" y="325" width="0.1622%" height="15" fill="rgb(208,124,10)" fg:x="167" fg:w="2"/><text x="13.7942%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="13.5442%" y="309" width="0.1622%" height="15" fill="rgb(222,33,0)" fg:x="167" fg:w="2"/><text x="13.7942%" y="319.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="13.5442%" y="293" width="0.1622%" height="15" fill="rgb(234,209,28)" fg:x="167" fg:w="2"/><text x="13.7942%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.6253%" y="277" width="0.0811%" height="15" fill="rgb(224,11,23)" fg:x="168" fg:w="1"/><text x="13.8753%" y="287.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="13.6253%" y="261" width="0.0811%" height="15" fill="rgb(232,99,1)" fg:x="168" fg:w="1"/><text x="13.8753%" y="271.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="13.6253%" y="245" width="0.0811%" height="15" fill="rgb(237,95,45)" fg:x="168" fg:w="1"/><text x="13.8753%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.6253%" y="229" width="0.0811%" height="15" fill="rgb(208,109,11)" fg:x="168" fg:w="1"/><text x="13.8753%" y="239.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (4 samples, 0.32%)</title><rect x="13.4631%" y="373" width="0.3244%" height="15" fill="rgb(216,190,48)" fg:x="166" fg:w="4"/><text x="13.7131%" y="383.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="13.7064%" y="357" width="0.0811%" height="15" fill="rgb(251,171,36)" fg:x="169" fg:w="1"/><text x="13.9564%" y="367.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.49%)</title><rect x="13.3820%" y="405" width="0.4866%" height="15" fill="rgb(230,62,22)" fg:x="165" fg:w="6"/><text x="13.6320%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="13.3820%" y="389" width="0.4866%" height="15" fill="rgb(225,114,35)" fg:x="165" fg:w="6"/><text x="13.6320%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.7875%" y="373" width="0.0811%" height="15" fill="rgb(215,118,42)" fg:x="170" fg:w="1"/><text x="14.0375%" y="383.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.16%)</title><rect x="13.8686%" y="341" width="0.1622%" height="15" fill="rgb(243,119,21)" fg:x="171" fg:w="2"/><text x="14.1186%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="14.1930%" y="261" width="0.0811%" height="15" fill="rgb(252,177,53)" fg:x="175" fg:w="1"/><text x="14.4430%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="14.1930%" y="245" width="0.0811%" height="15" fill="rgb(237,209,29)" fg:x="175" fg:w="1"/><text x="14.4430%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="14.1930%" y="229" width="0.0811%" height="15" fill="rgb(212,65,23)" fg:x="175" fg:w="1"/><text x="14.4430%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="14.1930%" y="325" width="0.1622%" height="15" fill="rgb(230,222,46)" fg:x="175" fg:w="2"/><text x="14.4430%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="14.1930%" y="309" width="0.1622%" height="15" fill="rgb(215,135,32)" fg:x="175" fg:w="2"/><text x="14.4430%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="14.1930%" y="293" width="0.1622%" height="15" fill="rgb(246,101,22)" fg:x="175" fg:w="2"/><text x="14.4430%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="14.1930%" y="277" width="0.1622%" height="15" fill="rgb(206,107,13)" fg:x="175" fg:w="2"/><text x="14.4430%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="14.2741%" y="261" width="0.0811%" height="15" fill="rgb(250,100,44)" fg:x="176" fg:w="1"/><text x="14.5241%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="14.2741%" y="245" width="0.0811%" height="15" fill="rgb(231,147,38)" fg:x="176" fg:w="1"/><text x="14.5241%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.2741%" y="229" width="0.0811%" height="15" fill="rgb(229,8,40)" fg:x="176" fg:w="1"/><text x="14.5241%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.2741%" y="213" width="0.0811%" height="15" fill="rgb(221,135,30)" fg:x="176" fg:w="1"/><text x="14.5241%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.3552%" y="277" width="0.0811%" height="15" fill="rgb(249,193,18)" fg:x="177" fg:w="1"/><text x="14.6052%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="14.3552%" y="261" width="0.0811%" height="15" fill="rgb(209,133,39)" fg:x="177" fg:w="1"/><text x="14.6052%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="14.4363%" y="277" width="0.0811%" height="15" fill="rgb(232,100,14)" fg:x="178" fg:w="1"/><text x="14.6863%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.4363%" y="261" width="0.0811%" height="15" fill="rgb(224,185,1)" fg:x="178" fg:w="1"/><text x="14.6863%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.5985%" y="245" width="0.0811%" height="15" fill="rgb(223,139,8)" fg:x="180" fg:w="1"/><text x="14.8485%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="14.5174%" y="277" width="0.2433%" height="15" fill="rgb(232,213,38)" fg:x="179" fg:w="3"/><text x="14.7674%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="14.5174%" y="261" width="0.2433%" height="15" fill="rgb(207,94,22)" fg:x="179" fg:w="3"/><text x="14.7674%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.6796%" y="245" width="0.0811%" height="15" fill="rgb(219,183,54)" fg:x="181" fg:w="1"/><text x="14.9296%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="15.0852%" y="245" width="0.1622%" height="15" fill="rgb(216,185,54)" fg:x="186" fg:w="2"/><text x="15.3352%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (27 samples, 2.19%)</title><rect x="15.0852%" y="261" width="2.1898%" height="15" fill="rgb(254,217,39)" fg:x="186" fg:w="27"/><text x="15.3352%" y="271.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (25 samples, 2.03%)</title><rect x="15.2474%" y="245" width="2.0276%" height="15" fill="rgb(240,178,23)" fg:x="188" fg:w="25"/><text x="15.4974%" y="255.50">c..</text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="17.0316%" y="229" width="0.2433%" height="15" fill="rgb(218,11,47)" fg:x="210" fg:w="3"/><text x="17.2816%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="17.2749%" y="261" width="0.0811%" height="15" fill="rgb(218,51,51)" fg:x="213" fg:w="1"/><text x="17.5249%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="17.2749%" y="245" width="0.0811%" height="15" fill="rgb(238,126,27)" fg:x="213" fg:w="1"/><text x="17.5249%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.57%)</title><rect x="17.5182%" y="245" width="0.5677%" height="15" fill="rgb(249,202,22)" fg:x="216" fg:w="7"/><text x="17.7682%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (10 samples, 0.81%)</title><rect x="17.3560%" y="261" width="0.8110%" height="15" fill="rgb(254,195,49)" fg:x="214" fg:w="10"/><text x="17.6060%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="18.0860%" y="245" width="0.0811%" height="15" fill="rgb(208,123,14)" fg:x="223" fg:w="1"/><text x="18.3360%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="18.0860%" y="229" width="0.0811%" height="15" fill="rgb(224,200,8)" fg:x="223" fg:w="1"/><text x="18.3360%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="18.0860%" y="213" width="0.0811%" height="15" fill="rgb(217,61,36)" fg:x="223" fg:w="1"/><text x="18.3360%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="18.3293%" y="213" width="0.0811%" height="15" fill="rgb(206,35,45)" fg:x="226" fg:w="1"/><text x="18.5793%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="18.3293%" y="197" width="0.0811%" height="15" fill="rgb(217,65,33)" fg:x="226" fg:w="1"/><text x="18.5793%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="18.4915%" y="197" width="0.1622%" height="15" fill="rgb(222,158,48)" fg:x="228" fg:w="2"/><text x="18.7415%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="18.6537%" y="197" width="0.1622%" height="15" fill="rgb(254,2,54)" fg:x="230" fg:w="2"/><text x="18.9037%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.7348%" y="181" width="0.0811%" height="15" fill="rgb(250,143,38)" fg:x="231" fg:w="1"/><text x="18.9848%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.7348%" y="165" width="0.0811%" height="15" fill="rgb(248,25,0)" fg:x="231" fg:w="1"/><text x="18.9848%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.7348%" y="149" width="0.0811%" height="15" fill="rgb(206,152,27)" fg:x="231" fg:w="1"/><text x="18.9848%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.8159%" y="165" width="0.0811%" height="15" fill="rgb(240,77,30)" fg:x="232" fg:w="1"/><text x="19.0659%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.8159%" y="149" width="0.0811%" height="15" fill="rgb(231,5,3)" fg:x="232" fg:w="1"/><text x="19.0659%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.8159%" y="133" width="0.0811%" height="15" fill="rgb(207,226,32)" fg:x="232" fg:w="1"/><text x="19.0659%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="18.8159%" y="197" width="0.1622%" height="15" fill="rgb(222,207,47)" fg:x="232" fg:w="2"/><text x="19.0659%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="18.8159%" y="181" width="0.1622%" height="15" fill="rgb(229,115,45)" fg:x="232" fg:w="2"/><text x="19.0659%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="18.8970%" y="165" width="0.0811%" height="15" fill="rgb(224,191,6)" fg:x="233" fg:w="1"/><text x="19.1470%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="18.9781%" y="197" width="0.0811%" height="15" fill="rgb(230,227,24)" fg:x="234" fg:w="1"/><text x="19.2281%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="18.9781%" y="181" width="0.0811%" height="15" fill="rgb(228,80,19)" fg:x="234" fg:w="1"/><text x="19.2281%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0592%" y="165" width="0.0811%" height="15" fill="rgb(247,229,0)" fg:x="235" fg:w="1"/><text x="19.3092%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (84 samples, 6.81%)</title><rect x="19.0592%" y="197" width="6.8127%" height="15" fill="rgb(237,194,15)" fg:x="235" fg:w="84"/><text x="19.3092%" y="207.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (84 samples, 6.81%)</title><rect x="19.0592%" y="181" width="6.8127%" height="15" fill="rgb(219,203,20)" fg:x="235" fg:w="84"/><text x="19.3092%" y="191.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (83 samples, 6.73%)</title><rect x="19.1403%" y="165" width="6.7315%" height="15" fill="rgb(234,128,8)" fg:x="236" fg:w="83"/><text x="19.3903%" y="175.50">alloc::ve..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 8.11%)</title><rect x="18.1671%" y="245" width="8.1103%" height="15" fill="rgb(248,202,8)" fg:x="224" fg:w="100"/><text x="18.4171%" y="255.50">&lt;core::iter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (99 samples, 8.03%)</title><rect x="18.2482%" y="229" width="8.0292%" height="15" fill="rgb(206,104,37)" fg:x="225" fg:w="99"/><text x="18.4982%" y="239.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (97 samples, 7.87%)</title><rect x="18.4104%" y="213" width="7.8670%" height="15" fill="rgb(223,8,27)" fg:x="227" fg:w="97"/><text x="18.6604%" y="223.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.41%)</title><rect x="25.8719%" y="197" width="0.4055%" height="15" fill="rgb(216,217,28)" fg:x="319" fg:w="5"/><text x="26.1219%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.1963%" y="181" width="0.0811%" height="15" fill="rgb(249,199,1)" fg:x="323" fg:w="1"/><text x="26.4463%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.2774%" y="245" width="0.0811%" height="15" fill="rgb(240,85,17)" fg:x="324" fg:w="1"/><text x="26.5274%" y="255.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="26.6018%" y="229" width="0.0811%" height="15" fill="rgb(206,108,45)" fg:x="328" fg:w="1"/><text x="26.8518%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.57%)</title><rect x="26.6829%" y="229" width="0.5677%" height="15" fill="rgb(245,210,41)" fg:x="329" fg:w="7"/><text x="26.9329%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="26.9262%" y="213" width="0.3244%" height="15" fill="rgb(206,13,37)" fg:x="332" fg:w="4"/><text x="27.1762%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="26.9262%" y="197" width="0.3244%" height="15" fill="rgb(250,61,18)" fg:x="332" fg:w="4"/><text x="27.1762%" y="207.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="26.9262%" y="181" width="0.3244%" height="15" fill="rgb(235,172,48)" fg:x="332" fg:w="4"/><text x="27.1762%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (19 samples, 1.54%)</title><rect x="26.3585%" y="245" width="1.5410%" height="15" fill="rgb(249,201,17)" fg:x="325" fg:w="19"/><text x="26.6085%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.65%)</title><rect x="27.2506%" y="229" width="0.6488%" height="15" fill="rgb(219,208,6)" fg:x="336" fg:w="8"/><text x="27.5006%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.8183%" y="213" width="0.0811%" height="15" fill="rgb(248,31,23)" fg:x="343" fg:w="1"/><text x="28.0683%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.8183%" y="197" width="0.0811%" height="15" fill="rgb(245,15,42)" fg:x="343" fg:w="1"/><text x="28.0683%" y="207.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="27.8183%" y="181" width="0.0811%" height="15" fill="rgb(222,217,39)" fg:x="343" fg:w="1"/><text x="28.0683%" y="191.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="27.8183%" y="165" width="0.0811%" height="15" fill="rgb(210,219,27)" fg:x="343" fg:w="1"/><text x="28.0683%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (121 samples, 9.81%)</title><rect x="18.1671%" y="261" width="9.8135%" height="15" fill="rgb(252,166,36)" fg:x="224" fg:w="121"/><text x="18.4171%" y="271.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="27.8994%" y="245" width="0.0811%" height="15" fill="rgb(245,132,34)" fg:x="344" fg:w="1"/><text x="28.1494%" y="255.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="27.9805%" y="261" width="0.0811%" height="15" fill="rgb(236,54,3)" fg:x="345" fg:w="1"/><text x="28.2305%" y="271.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="27.9805%" y="245" width="0.0811%" height="15" fill="rgb(241,173,43)" fg:x="345" fg:w="1"/><text x="28.2305%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (165 samples, 13.38%)</title><rect x="14.7607%" y="277" width="13.3820%" height="15" fill="rgb(215,190,9)" fg:x="182" fg:w="165"/><text x="15.0107%" y="287.50">regex_automata::meta..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="28.0616%" y="261" width="0.0811%" height="15" fill="rgb(242,101,16)" fg:x="346" fg:w="1"/><text x="28.3116%" y="271.50"></text></g><g><title>regex_syntax::hir::literal::Seq::union (1 samples, 0.08%)</title><rect x="28.0616%" y="245" width="0.0811%" height="15" fill="rgb(223,190,21)" fg:x="346" fg:w="1"/><text x="28.3116%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="28.2238%" y="229" width="0.1622%" height="15" fill="rgb(215,228,25)" fg:x="348" fg:w="2"/><text x="28.4738%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="28.3049%" y="213" width="0.0811%" height="15" fill="rgb(225,36,22)" fg:x="349" fg:w="1"/><text x="28.5549%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="28.3049%" y="197" width="0.0811%" height="15" fill="rgb(251,106,46)" fg:x="349" fg:w="1"/><text x="28.5549%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="28.3861%" y="229" width="0.0811%" height="15" fill="rgb(208,90,1)" fg:x="350" fg:w="1"/><text x="28.6361%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.4672%" y="213" width="0.0811%" height="15" fill="rgb(243,10,4)" fg:x="351" fg:w="1"/><text x="28.7172%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.4672%" y="197" width="0.0811%" height="15" fill="rgb(212,137,27)" fg:x="351" fg:w="1"/><text x="28.7172%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4672%" y="181" width="0.0811%" height="15" fill="rgb(231,220,49)" fg:x="351" fg:w="1"/><text x="28.7172%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="28.1427%" y="245" width="0.4866%" height="15" fill="rgb(237,96,20)" fg:x="347" fg:w="6"/><text x="28.3927%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="28.4672%" y="229" width="0.1622%" height="15" fill="rgb(239,229,30)" fg:x="351" fg:w="2"/><text x="28.7172%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="28.5483%" y="213" width="0.0811%" height="15" fill="rgb(219,65,33)" fg:x="352" fg:w="1"/><text x="28.7983%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="28.5483%" y="197" width="0.0811%" height="15" fill="rgb(243,134,7)" fg:x="352" fg:w="1"/><text x="28.7983%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="28.6294%" y="245" width="0.0811%" height="15" fill="rgb(216,177,54)" fg:x="353" fg:w="1"/><text x="28.8794%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.73%)</title><rect x="28.1427%" y="277" width="0.7299%" height="15" fill="rgb(211,160,20)" fg:x="347" fg:w="9"/><text x="28.3927%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.73%)</title><rect x="28.1427%" y="261" width="0.7299%" height="15" fill="rgb(239,85,39)" fg:x="347" fg:w="9"/><text x="28.3927%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="28.7105%" y="245" width="0.1622%" height="15" fill="rgb(232,125,22)" fg:x="354" fg:w="2"/><text x="28.9605%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.9538%" y="229" width="0.0811%" height="15" fill="rgb(244,57,34)" fg:x="357" fg:w="1"/><text x="29.2038%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.9538%" y="213" width="0.0811%" height="15" fill="rgb(214,203,32)" fg:x="357" fg:w="1"/><text x="29.2038%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="28.9538%" y="197" width="0.0811%" height="15" fill="rgb(207,58,43)" fg:x="357" fg:w="1"/><text x="29.2038%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="28.8727%" y="245" width="0.2433%" height="15" fill="rgb(215,193,15)" fg:x="356" fg:w="3"/><text x="29.1227%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="29.0349%" y="229" width="0.0811%" height="15" fill="rgb(232,15,44)" fg:x="358" fg:w="1"/><text x="29.2849%" y="239.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="29.0349%" y="213" width="0.0811%" height="15" fill="rgb(212,3,48)" fg:x="358" fg:w="1"/><text x="29.2849%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (184 samples, 14.92%)</title><rect x="14.3552%" y="293" width="14.9230%" height="15" fill="rgb(218,128,7)" fg:x="177" fg:w="184"/><text x="14.6052%" y="303.50">regex_automata::meta::r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="28.8727%" y="277" width="0.4055%" height="15" fill="rgb(226,216,39)" fg:x="356" fg:w="5"/><text x="29.1227%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="28.8727%" y="261" width="0.4055%" height="15" fill="rgb(243,47,51)" fg:x="356" fg:w="5"/><text x="29.1227%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="29.1160%" y="245" width="0.1622%" height="15" fill="rgb(241,183,40)" fg:x="359" fg:w="2"/><text x="29.3660%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="29.1971%" y="229" width="0.0811%" height="15" fill="rgb(231,217,32)" fg:x="360" fg:w="1"/><text x="29.4471%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.1971%" y="213" width="0.0811%" height="15" fill="rgb(229,61,38)" fg:x="360" fg:w="1"/><text x="29.4471%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.1971%" y="197" width="0.0811%" height="15" fill="rgb(225,210,5)" fg:x="360" fg:w="1"/><text x="29.4471%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="29.2782%" y="293" width="0.0811%" height="15" fill="rgb(231,79,45)" fg:x="361" fg:w="1"/><text x="29.5282%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (186 samples, 15.09%)</title><rect x="14.3552%" y="325" width="15.0852%" height="15" fill="rgb(224,100,7)" fg:x="177" fg:w="186"/><text x="14.6052%" y="335.50">&lt;regex::regex::string::..</text></g><g><title>regex::builders::Builder::build_one_string (186 samples, 15.09%)</title><rect x="14.3552%" y="309" width="15.0852%" height="15" fill="rgb(241,198,18)" fg:x="177" fg:w="186"/><text x="14.6052%" y="319.50">regex::builders::Builde..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="29.3593%" y="293" width="0.0811%" height="15" fill="rgb(252,97,53)" fg:x="362" fg:w="1"/><text x="29.6093%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.4404%" y="277" width="0.0811%" height="15" fill="rgb(220,88,7)" fg:x="363" fg:w="1"/><text x="29.6904%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.4404%" y="261" width="0.0811%" height="15" fill="rgb(213,176,14)" fg:x="363" fg:w="1"/><text x="29.6904%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="29.4404%" y="293" width="0.1622%" height="15" fill="rgb(246,73,7)" fg:x="363" fg:w="2"/><text x="29.6904%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="29.5215%" y="277" width="0.0811%" height="15" fill="rgb(245,64,36)" fg:x="364" fg:w="1"/><text x="29.7715%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.5215%" y="261" width="0.0811%" height="15" fill="rgb(245,80,10)" fg:x="364" fg:w="1"/><text x="29.7715%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.5215%" y="245" width="0.0811%" height="15" fill="rgb(232,107,50)" fg:x="364" fg:w="1"/><text x="29.7715%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.6837%" y="277" width="0.0811%" height="15" fill="rgb(253,3,0)" fg:x="366" fg:w="1"/><text x="29.9337%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.6837%" y="261" width="0.0811%" height="15" fill="rgb(212,99,53)" fg:x="366" fg:w="1"/><text x="29.9337%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.49%)</title><rect x="29.4404%" y="325" width="0.4866%" height="15" fill="rgb(249,111,54)" fg:x="363" fg:w="6"/><text x="29.6904%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.49%)</title><rect x="29.4404%" y="309" width="0.4866%" height="15" fill="rgb(249,55,30)" fg:x="363" fg:w="6"/><text x="29.6904%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="29.6026%" y="293" width="0.3244%" height="15" fill="rgb(237,47,42)" fg:x="365" fg:w="4"/><text x="29.8526%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="29.7648%" y="277" width="0.1622%" height="15" fill="rgb(211,20,18)" fg:x="367" fg:w="2"/><text x="30.0148%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.8459%" y="261" width="0.0811%" height="15" fill="rgb(231,203,46)" fg:x="368" fg:w="1"/><text x="30.0959%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.4947%" y="245" width="0.0811%" height="15" fill="rgb(237,142,3)" fg:x="376" fg:w="1"/><text x="30.7447%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.4947%" y="229" width="0.0811%" height="15" fill="rgb(241,107,1)" fg:x="376" fg:w="1"/><text x="30.7447%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.4947%" y="213" width="0.0811%" height="15" fill="rgb(229,83,13)" fg:x="376" fg:w="1"/><text x="30.7447%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="30.5758%" y="245" width="0.3244%" height="15" fill="rgb(241,91,40)" fg:x="377" fg:w="4"/><text x="30.8258%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.9002%" y="229" width="0.0811%" height="15" fill="rgb(225,3,45)" fg:x="381" fg:w="1"/><text x="31.1502%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.14%)</title><rect x="29.9270%" y="261" width="1.1354%" height="15" fill="rgb(244,223,14)" fg:x="369" fg:w="14"/><text x="30.1770%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="30.9002%" y="245" width="0.1622%" height="15" fill="rgb(224,124,37)" fg:x="381" fg:w="2"/><text x="31.1502%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="30.9813%" y="229" width="0.0811%" height="15" fill="rgb(251,171,30)" fg:x="382" fg:w="1"/><text x="31.2313%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (211 samples, 17.11%)</title><rect x="14.0308%" y="341" width="17.1127%" height="15" fill="rgb(236,46,54)" fg:x="173" fg:w="211"/><text x="14.2808%" y="351.50">indefinite::helper::Helper:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.22%)</title><rect x="29.9270%" y="325" width="1.2165%" height="15" fill="rgb(245,213,5)" fg:x="369" fg:w="15"/><text x="30.1770%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.22%)</title><rect x="29.9270%" y="309" width="1.2165%" height="15" fill="rgb(230,144,27)" fg:x="369" fg:w="15"/><text x="30.1770%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.22%)</title><rect x="29.9270%" y="293" width="1.2165%" height="15" fill="rgb(220,86,6)" fg:x="369" fg:w="15"/><text x="30.1770%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (15 samples, 1.22%)</title><rect x="29.9270%" y="277" width="1.2165%" height="15" fill="rgb(240,20,13)" fg:x="369" fg:w="15"/><text x="30.1770%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="31.0624%" y="261" width="0.0811%" height="15" fill="rgb(217,89,34)" fg:x="383" fg:w="1"/><text x="31.3124%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.0624%" y="245" width="0.0811%" height="15" fill="rgb(229,13,5)" fg:x="383" fg:w="1"/><text x="31.3124%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.0624%" y="229" width="0.0811%" height="15" fill="rgb(244,67,35)" fg:x="383" fg:w="1"/><text x="31.3124%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.0624%" y="213" width="0.0811%" height="15" fill="rgb(221,40,2)" fg:x="383" fg:w="1"/><text x="31.3124%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.2247%" y="277" width="0.1622%" height="15" fill="rgb(237,157,21)" fg:x="385" fg:w="2"/><text x="31.4747%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.2247%" y="261" width="0.1622%" height="15" fill="rgb(222,94,11)" fg:x="385" fg:w="2"/><text x="31.4747%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.3058%" y="245" width="0.0811%" height="15" fill="rgb(249,113,6)" fg:x="386" fg:w="1"/><text x="31.5558%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.3869%" y="277" width="0.0811%" height="15" fill="rgb(238,137,36)" fg:x="387" fg:w="1"/><text x="31.6369%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="31.4680%" y="245" width="0.1622%" height="15" fill="rgb(210,102,26)" fg:x="388" fg:w="2"/><text x="31.7180%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.5491%" y="229" width="0.0811%" height="15" fill="rgb(218,30,30)" fg:x="389" fg:w="1"/><text x="31.7991%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.5491%" y="213" width="0.0811%" height="15" fill="rgb(214,67,26)" fg:x="389" fg:w="1"/><text x="31.7991%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.5491%" y="197" width="0.0811%" height="15" fill="rgb(251,9,53)" fg:x="389" fg:w="1"/><text x="31.7991%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="31.4680%" y="277" width="0.2433%" height="15" fill="rgb(228,204,25)" fg:x="388" fg:w="3"/><text x="31.7180%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="31.4680%" y="261" width="0.2433%" height="15" fill="rgb(207,153,8)" fg:x="388" fg:w="3"/><text x="31.7180%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="31.6302%" y="245" width="0.0811%" height="15" fill="rgb(242,9,16)" fg:x="390" fg:w="1"/><text x="31.8802%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.6302%" y="229" width="0.0811%" height="15" fill="rgb(217,211,10)" fg:x="390" fg:w="1"/><text x="31.8802%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.8735%" y="261" width="0.0811%" height="15" fill="rgb(219,228,52)" fg:x="393" fg:w="1"/><text x="32.1235%" y="271.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="31.9546%" y="245" width="0.2433%" height="15" fill="rgb(231,92,29)" fg:x="394" fg:w="3"/><text x="32.2046%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (20 samples, 1.62%)</title><rect x="31.9546%" y="261" width="1.6221%" height="15" fill="rgb(232,8,23)" fg:x="394" fg:w="20"/><text x="32.2046%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (17 samples, 1.38%)</title><rect x="32.1979%" y="245" width="1.3788%" height="15" fill="rgb(216,211,34)" fg:x="397" fg:w="17"/><text x="32.4479%" y="255.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="33.3333%" y="229" width="0.2433%" height="15" fill="rgb(236,151,0)" fg:x="411" fg:w="3"/><text x="33.5833%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="33.5766%" y="245" width="0.2433%" height="15" fill="rgb(209,168,3)" fg:x="414" fg:w="3"/><text x="33.8266%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="33.8200%" y="229" width="0.0811%" height="15" fill="rgb(208,129,28)" fg:x="417" fg:w="1"/><text x="34.0700%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="33.8200%" y="213" width="0.0811%" height="15" fill="rgb(229,78,22)" fg:x="417" fg:w="1"/><text x="34.0700%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="33.5766%" y="261" width="0.4055%" height="15" fill="rgb(228,187,13)" fg:x="414" fg:w="5"/><text x="33.8266%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="33.8200%" y="245" width="0.1622%" height="15" fill="rgb(240,119,24)" fg:x="417" fg:w="2"/><text x="34.0700%" y="255.50"></text></g><g><title>regex_syntax::parser::ParserBuilder::new (1 samples, 0.08%)</title><rect x="33.9011%" y="229" width="0.0811%" height="15" fill="rgb(209,194,42)" fg:x="418" fg:w="1"/><text x="34.1511%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="33.9822%" y="245" width="0.0811%" height="15" fill="rgb(247,200,46)" fg:x="419" fg:w="1"/><text x="34.2322%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="33.9822%" y="229" width="0.0811%" height="15" fill="rgb(218,76,16)" fg:x="419" fg:w="1"/><text x="34.2322%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="34.3066%" y="229" width="0.0811%" height="15" fill="rgb(225,21,48)" fg:x="423" fg:w="1"/><text x="34.5566%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.3066%" y="213" width="0.0811%" height="15" fill="rgb(239,223,50)" fg:x="423" fg:w="1"/><text x="34.5566%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.3066%" y="197" width="0.0811%" height="15" fill="rgb(244,45,21)" fg:x="423" fg:w="1"/><text x="34.5566%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.3066%" y="181" width="0.0811%" height="15" fill="rgb(232,33,43)" fg:x="423" fg:w="1"/><text x="34.5566%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (9 samples, 0.73%)</title><rect x="34.3877%" y="229" width="0.7299%" height="15" fill="rgb(209,8,3)" fg:x="424" fg:w="9"/><text x="34.6377%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="34.8743%" y="213" width="0.2433%" height="15" fill="rgb(214,25,53)" fg:x="430" fg:w="3"/><text x="35.1243%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.0365%" y="197" width="0.0811%" height="15" fill="rgb(254,186,54)" fg:x="432" fg:w="1"/><text x="35.2865%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.0365%" y="181" width="0.0811%" height="15" fill="rgb(208,174,49)" fg:x="432" fg:w="1"/><text x="35.2865%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.0365%" y="165" width="0.0811%" height="15" fill="rgb(233,191,51)" fg:x="432" fg:w="1"/><text x="35.2865%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.1987%" y="197" width="0.0811%" height="15" fill="rgb(222,134,10)" fg:x="434" fg:w="1"/><text x="35.4487%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (15 samples, 1.22%)</title><rect x="35.1176%" y="213" width="1.2165%" height="15" fill="rgb(230,226,20)" fg:x="433" fg:w="15"/><text x="35.3676%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (13 samples, 1.05%)</title><rect x="35.2798%" y="197" width="1.0543%" height="15" fill="rgb(251,111,25)" fg:x="435" fg:w="13"/><text x="35.5298%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (16 samples, 1.30%)</title><rect x="35.1176%" y="229" width="1.2976%" height="15" fill="rgb(224,40,46)" fg:x="433" fg:w="16"/><text x="35.3676%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="36.3341%" y="213" width="0.0811%" height="15" fill="rgb(236,108,47)" fg:x="448" fg:w="1"/><text x="36.5841%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (32 samples, 2.60%)</title><rect x="33.9822%" y="261" width="2.5953%" height="15" fill="rgb(234,93,0)" fg:x="419" fg:w="32"/><text x="34.2322%" y="271.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (31 samples, 2.51%)</title><rect x="34.0633%" y="245" width="2.5142%" height="15" fill="rgb(224,213,32)" fg:x="420" fg:w="31"/><text x="34.3133%" y="255.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (2 samples, 0.16%)</title><rect x="36.4152%" y="229" width="0.1622%" height="15" fill="rgb(251,11,48)" fg:x="449" fg:w="2"/><text x="36.6652%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.6586%" y="229" width="0.0811%" height="15" fill="rgb(236,173,5)" fg:x="452" fg:w="1"/><text x="36.9086%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.6586%" y="213" width="0.0811%" height="15" fill="rgb(230,95,12)" fg:x="452" fg:w="1"/><text x="36.9086%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="36.6586%" y="197" width="0.0811%" height="15" fill="rgb(232,209,1)" fg:x="452" fg:w="1"/><text x="36.9086%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="36.6586%" y="181" width="0.0811%" height="15" fill="rgb(232,6,1)" fg:x="452" fg:w="1"/><text x="36.9086%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="36.7397%" y="213" width="0.0811%" height="15" fill="rgb(210,224,50)" fg:x="453" fg:w="1"/><text x="36.9897%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.7397%" y="197" width="0.0811%" height="15" fill="rgb(228,127,35)" fg:x="453" fg:w="1"/><text x="36.9897%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.7397%" y="181" width="0.0811%" height="15" fill="rgb(245,102,45)" fg:x="453" fg:w="1"/><text x="36.9897%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.7397%" y="165" width="0.0811%" height="15" fill="rgb(214,1,49)" fg:x="453" fg:w="1"/><text x="36.9897%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="36.8208%" y="197" width="0.0811%" height="15" fill="rgb(226,163,40)" fg:x="454" fg:w="1"/><text x="37.0708%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="36.9019%" y="197" width="0.0811%" height="15" fill="rgb(239,212,28)" fg:x="455" fg:w="1"/><text x="37.1519%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="36.9019%" y="181" width="0.0811%" height="15" fill="rgb(220,20,13)" fg:x="455" fg:w="1"/><text x="37.1519%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="36.9830%" y="181" width="0.0811%" height="15" fill="rgb(210,164,35)" fg:x="456" fg:w="1"/><text x="37.2330%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="37.8751%" y="149" width="0.4055%" height="15" fill="rgb(248,109,41)" fg:x="467" fg:w="5"/><text x="38.1251%" y="159.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="38.2806%" y="149" width="0.1622%" height="15" fill="rgb(238,23,50)" fg:x="472" fg:w="2"/><text x="38.5306%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.49%)</title><rect x="38.4428%" y="149" width="0.4866%" height="15" fill="rgb(211,48,49)" fg:x="474" fg:w="6"/><text x="38.6928%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="38.6861%" y="133" width="0.2433%" height="15" fill="rgb(223,36,21)" fg:x="477" fg:w="3"/><text x="38.9361%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.7672%" y="117" width="0.1622%" height="15" fill="rgb(207,123,46)" fg:x="478" fg:w="2"/><text x="39.0172%" y="127.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="38.7672%" y="101" width="0.1622%" height="15" fill="rgb(240,218,32)" fg:x="478" fg:w="2"/><text x="39.0172%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="38.9294%" y="149" width="0.2433%" height="15" fill="rgb(252,5,43)" fg:x="480" fg:w="3"/><text x="39.1794%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.0916%" y="133" width="0.0811%" height="15" fill="rgb(252,84,19)" fg:x="482" fg:w="1"/><text x="39.3416%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.0916%" y="117" width="0.0811%" height="15" fill="rgb(243,152,39)" fg:x="482" fg:w="1"/><text x="39.3416%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.0916%" y="101" width="0.0811%" height="15" fill="rgb(234,160,15)" fg:x="482" fg:w="1"/><text x="39.3416%" y="111.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="39.6594%" y="117" width="0.1622%" height="15" fill="rgb(237,34,20)" fg:x="489" fg:w="2"/><text x="39.9094%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.8216%" y="85" width="0.0811%" height="15" fill="rgb(229,97,13)" fg:x="491" fg:w="1"/><text x="40.0716%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.9027%" y="85" width="0.0811%" height="15" fill="rgb(234,71,50)" fg:x="492" fg:w="1"/><text x="40.1527%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="39.8216%" y="117" width="0.2433%" height="15" fill="rgb(253,155,4)" fg:x="491" fg:w="3"/><text x="40.0716%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="39.8216%" y="101" width="0.2433%" height="15" fill="rgb(222,185,37)" fg:x="491" fg:w="3"/><text x="40.0716%" y="111.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="39.9838%" y="85" width="0.0811%" height="15" fill="rgb(251,177,13)" fg:x="493" fg:w="1"/><text x="40.2338%" y="95.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="39.9838%" y="69" width="0.0811%" height="15" fill="rgb(250,179,40)" fg:x="493" fg:w="1"/><text x="40.2338%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.4704%" y="101" width="0.0811%" height="15" fill="rgb(242,44,2)" fg:x="499" fg:w="1"/><text x="40.7204%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (18 samples, 1.46%)</title><rect x="39.1727%" y="149" width="1.4599%" height="15" fill="rgb(216,177,13)" fg:x="483" fg:w="18"/><text x="39.4227%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (15 samples, 1.22%)</title><rect x="39.4161%" y="133" width="1.2165%" height="15" fill="rgb(216,106,43)" fg:x="486" fg:w="15"/><text x="39.6661%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.57%)</title><rect x="40.0649%" y="117" width="0.5677%" height="15" fill="rgb(216,183,2)" fg:x="494" fg:w="7"/><text x="40.3149%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.5515%" y="101" width="0.0811%" height="15" fill="rgb(249,75,3)" fg:x="500" fg:w="1"/><text x="40.8015%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.5515%" y="85" width="0.0811%" height="15" fill="rgb(219,67,39)" fg:x="500" fg:w="1"/><text x="40.8015%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.5515%" y="69" width="0.0811%" height="15" fill="rgb(253,228,2)" fg:x="500" fg:w="1"/><text x="40.8015%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.5515%" y="53" width="0.0811%" height="15" fill="rgb(235,138,27)" fg:x="500" fg:w="1"/><text x="40.8015%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="40.6326%" y="149" width="0.0811%" height="15" fill="rgb(236,97,51)" fg:x="501" fg:w="1"/><text x="40.8826%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="40.6326%" y="133" width="0.0811%" height="15" fill="rgb(240,80,30)" fg:x="501" fg:w="1"/><text x="40.8826%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.7137%" y="133" width="0.0811%" height="15" fill="rgb(230,178,19)" fg:x="502" fg:w="1"/><text x="40.9637%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.7137%" y="117" width="0.0811%" height="15" fill="rgb(210,190,27)" fg:x="502" fg:w="1"/><text x="40.9637%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.7948%" y="117" width="0.0811%" height="15" fill="rgb(222,107,31)" fg:x="503" fg:w="1"/><text x="41.0448%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (81 samples, 6.57%)</title><rect x="40.7137%" y="149" width="6.5693%" height="15" fill="rgb(216,127,34)" fg:x="502" fg:w="81"/><text x="40.9637%" y="159.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (80 samples, 6.49%)</title><rect x="40.7948%" y="133" width="6.4882%" height="15" fill="rgb(234,116,52)" fg:x="503" fg:w="80"/><text x="41.0448%" y="143.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (79 samples, 6.41%)</title><rect x="40.8759%" y="117" width="6.4071%" height="15" fill="rgb(222,124,15)" fg:x="504" fg:w="79"/><text x="41.1259%" y="127.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.41%)</title><rect x="47.2830%" y="149" width="0.4055%" height="15" fill="rgb(231,179,28)" fg:x="583" fg:w="5"/><text x="47.5330%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.1752%" y="101" width="0.0811%" height="15" fill="rgb(226,93,45)" fg:x="594" fg:w="1"/><text x="48.4252%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (144 samples, 11.68%)</title><rect x="36.6586%" y="245" width="11.6788%" height="15" fill="rgb(215,8,51)" fg:x="452" fg:w="144"/><text x="36.9086%" y="255.50">&lt;core::iter::adap..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (143 samples, 11.60%)</title><rect x="36.7397%" y="229" width="11.5977%" height="15" fill="rgb(223,106,5)" fg:x="453" fg:w="143"/><text x="36.9897%" y="239.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (142 samples, 11.52%)</title><rect x="36.8208%" y="213" width="11.5166%" height="15" fill="rgb(250,191,5)" fg:x="454" fg:w="142"/><text x="37.0708%" y="223.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (140 samples, 11.35%)</title><rect x="36.9830%" y="197" width="11.3544%" height="15" fill="rgb(242,132,44)" fg:x="456" fg:w="140"/><text x="37.2330%" y="207.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (139 samples, 11.27%)</title><rect x="37.0641%" y="181" width="11.2733%" height="15" fill="rgb(251,152,29)" fg:x="457" fg:w="139"/><text x="37.3141%" y="191.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (139 samples, 11.27%)</title><rect x="37.0641%" y="165" width="11.2733%" height="15" fill="rgb(218,179,5)" fg:x="457" fg:w="139"/><text x="37.3141%" y="175.50">regex_automata::n..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (8 samples, 0.65%)</title><rect x="47.6886%" y="149" width="0.6488%" height="15" fill="rgb(227,67,19)" fg:x="588" fg:w="8"/><text x="47.9386%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="48.0130%" y="133" width="0.3244%" height="15" fill="rgb(233,119,31)" fg:x="592" fg:w="4"/><text x="48.2630%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="48.0941%" y="117" width="0.2433%" height="15" fill="rgb(241,120,22)" fg:x="593" fg:w="3"/><text x="48.3441%" y="127.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="48.2563%" y="101" width="0.0811%" height="15" fill="rgb(224,102,30)" fg:x="595" fg:w="1"/><text x="48.5063%" y="111.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="48.2563%" y="85" width="0.0811%" height="15" fill="rgb(210,164,37)" fg:x="595" fg:w="1"/><text x="48.5063%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.6618%" y="229" width="0.0811%" height="15" fill="rgb(226,191,16)" fg:x="600" fg:w="1"/><text x="48.9118%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.41%)</title><rect x="48.7429%" y="229" width="0.4055%" height="15" fill="rgb(214,40,45)" fg:x="601" fg:w="5"/><text x="48.9929%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.0673%" y="213" width="0.0811%" height="15" fill="rgb(244,29,26)" fg:x="605" fg:w="1"/><text x="49.3173%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.0673%" y="197" width="0.0811%" height="15" fill="rgb(216,16,5)" fg:x="605" fg:w="1"/><text x="49.3173%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.0673%" y="181" width="0.0811%" height="15" fill="rgb(249,76,35)" fg:x="605" fg:w="1"/><text x="49.3173%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.5539%" y="213" width="0.0811%" height="15" fill="rgb(207,11,44)" fg:x="611" fg:w="1"/><text x="49.8039%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (222 samples, 18.00%)</title><rect x="31.7113%" y="277" width="18.0049%" height="15" fill="rgb(228,190,49)" fg:x="391" fg:w="222"/><text x="31.9613%" y="287.50">regex_automata::meta::strate..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (162 samples, 13.14%)</title><rect x="36.5775%" y="261" width="13.1387%" height="15" fill="rgb(214,173,12)" fg:x="451" fg:w="162"/><text x="36.8275%" y="271.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (17 samples, 1.38%)</title><rect x="48.3374%" y="245" width="1.3788%" height="15" fill="rgb(218,26,35)" fg:x="596" fg:w="17"/><text x="48.5874%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.57%)</title><rect x="49.1484%" y="229" width="0.5677%" height="15" fill="rgb(220,200,19)" fg:x="606" fg:w="7"/><text x="49.3984%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.6350%" y="213" width="0.0811%" height="15" fill="rgb(239,95,49)" fg:x="612" fg:w="1"/><text x="49.8850%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.6350%" y="197" width="0.0811%" height="15" fill="rgb(235,85,53)" fg:x="612" fg:w="1"/><text x="49.8850%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="49.7161%" y="245" width="0.0811%" height="15" fill="rgb(233,133,31)" fg:x="613" fg:w="1"/><text x="49.9661%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="49.7972%" y="245" width="0.0811%" height="15" fill="rgb(218,25,20)" fg:x="614" fg:w="1"/><text x="50.0472%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="49.7972%" y="229" width="0.0811%" height="15" fill="rgb(252,210,38)" fg:x="614" fg:w="1"/><text x="50.0472%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.7972%" y="213" width="0.0811%" height="15" fill="rgb(242,134,21)" fg:x="614" fg:w="1"/><text x="50.0472%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.7972%" y="197" width="0.0811%" height="15" fill="rgb(213,28,48)" fg:x="614" fg:w="1"/><text x="50.0472%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.7972%" y="181" width="0.0811%" height="15" fill="rgb(250,196,2)" fg:x="614" fg:w="1"/><text x="50.0472%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (2 samples, 0.16%)</title><rect x="49.8783%" y="245" width="0.1622%" height="15" fill="rgb(227,5,17)" fg:x="615" fg:w="2"/><text x="50.1283%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.9594%" y="229" width="0.0811%" height="15" fill="rgb(221,226,24)" fg:x="616" fg:w="1"/><text x="50.2094%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="50.0406%" y="245" width="0.0811%" height="15" fill="rgb(211,5,48)" fg:x="617" fg:w="1"/><text x="50.2906%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="50.1217%" y="245" width="0.0811%" height="15" fill="rgb(219,150,6)" fg:x="618" fg:w="1"/><text x="50.3717%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.1217%" y="229" width="0.0811%" height="15" fill="rgb(251,46,16)" fg:x="618" fg:w="1"/><text x="50.3717%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.1217%" y="213" width="0.0811%" height="15" fill="rgb(220,204,40)" fg:x="618" fg:w="1"/><text x="50.3717%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.57%)</title><rect x="49.7161%" y="277" width="0.5677%" height="15" fill="rgb(211,85,2)" fg:x="613" fg:w="7"/><text x="49.9661%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.57%)</title><rect x="49.7161%" y="261" width="0.5677%" height="15" fill="rgb(229,17,7)" fg:x="613" fg:w="7"/><text x="49.9661%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="50.2028%" y="245" width="0.0811%" height="15" fill="rgb(239,72,28)" fg:x="619" fg:w="1"/><text x="50.4528%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="50.2028%" y="229" width="0.0811%" height="15" fill="rgb(230,47,54)" fg:x="619" fg:w="1"/><text x="50.4528%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="50.3650%" y="245" width="0.0811%" height="15" fill="rgb(214,50,8)" fg:x="621" fg:w="1"/><text x="50.6150%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.57%)</title><rect x="50.4461%" y="245" width="0.5677%" height="15" fill="rgb(216,198,43)" fg:x="622" fg:w="7"/><text x="50.6961%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (7 samples, 0.57%)</title><rect x="50.4461%" y="229" width="0.5677%" height="15" fill="rgb(234,20,35)" fg:x="622" fg:w="7"/><text x="50.6961%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="50.8516%" y="213" width="0.1622%" height="15" fill="rgb(254,45,19)" fg:x="627" fg:w="2"/><text x="51.1016%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="51.0949%" y="229" width="0.0811%" height="15" fill="rgb(219,14,44)" fg:x="630" fg:w="1"/><text x="51.3449%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="51.0949%" y="213" width="0.0811%" height="15" fill="rgb(217,220,26)" fg:x="630" fg:w="1"/><text x="51.3449%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="51.0949%" y="197" width="0.0811%" height="15" fill="rgb(213,158,28)" fg:x="630" fg:w="1"/><text x="51.3449%" y="207.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="51.1760%" y="229" width="0.0811%" height="15" fill="rgb(252,51,52)" fg:x="631" fg:w="1"/><text x="51.4260%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.1760%" y="213" width="0.0811%" height="15" fill="rgb(246,89,16)" fg:x="631" fg:w="1"/><text x="51.4260%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (249 samples, 20.19%)</title><rect x="31.1436%" y="325" width="20.1946%" height="15" fill="rgb(216,158,49)" fg:x="384" fg:w="249"/><text x="31.3936%" y="335.50">&lt;regex::regex::string::Regex as ..</text></g><g><title>regex::builders::Builder::build_one_string (249 samples, 20.19%)</title><rect x="31.1436%" y="309" width="20.1946%" height="15" fill="rgb(236,107,19)" fg:x="384" fg:w="249"/><text x="31.3936%" y="319.50">regex::builders::Builder::build_..</text></g><g><title>regex_automata::meta::regex::Builder::build (248 samples, 20.11%)</title><rect x="31.2247%" y="293" width="20.1135%" height="15" fill="rgb(228,185,30)" fg:x="385" fg:w="248"/><text x="31.4747%" y="303.50">regex_automata::meta::regex::Bui..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (13 samples, 1.05%)</title><rect x="50.2839%" y="277" width="1.0543%" height="15" fill="rgb(246,134,8)" fg:x="620" fg:w="13"/><text x="50.5339%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (13 samples, 1.05%)</title><rect x="50.2839%" y="261" width="1.0543%" height="15" fill="rgb(214,143,50)" fg:x="620" fg:w="13"/><text x="50.5339%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.32%)</title><rect x="51.0138%" y="245" width="0.3244%" height="15" fill="rgb(228,75,8)" fg:x="629" fg:w="4"/><text x="51.2638%" y="255.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="51.2571%" y="229" width="0.0811%" height="15" fill="rgb(207,175,4)" fg:x="632" fg:w="1"/><text x="51.5071%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.3382%" y="309" width="0.0811%" height="15" fill="rgb(205,108,24)" fg:x="633" fg:w="1"/><text x="51.5882%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="51.4193%" y="277" width="0.0811%" height="15" fill="rgb(244,120,49)" fg:x="634" fg:w="1"/><text x="51.6693%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.4193%" y="261" width="0.0811%" height="15" fill="rgb(223,47,38)" fg:x="634" fg:w="1"/><text x="51.6693%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="51.4193%" y="293" width="0.1622%" height="15" fill="rgb(229,179,11)" fg:x="634" fg:w="2"/><text x="51.6693%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="51.5004%" y="277" width="0.0811%" height="15" fill="rgb(231,122,1)" fg:x="635" fg:w="1"/><text x="51.7504%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="51.5004%" y="261" width="0.0811%" height="15" fill="rgb(245,119,9)" fg:x="635" fg:w="1"/><text x="51.7504%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.32%)</title><rect x="51.5815%" y="277" width="0.3244%" height="15" fill="rgb(241,163,25)" fg:x="636" fg:w="4"/><text x="51.8315%" y="287.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="51.6626%" y="261" width="0.2433%" height="15" fill="rgb(217,214,3)" fg:x="637" fg:w="3"/><text x="51.9126%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.65%)</title><rect x="51.3382%" y="325" width="0.6488%" height="15" fill="rgb(240,86,28)" fg:x="633" fg:w="8"/><text x="51.5882%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (7 samples, 0.57%)</title><rect x="51.4193%" y="309" width="0.5677%" height="15" fill="rgb(215,47,9)" fg:x="634" fg:w="7"/><text x="51.6693%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.41%)</title><rect x="51.5815%" y="293" width="0.4055%" height="15" fill="rgb(252,25,45)" fg:x="636" fg:w="5"/><text x="51.8315%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="51.9059%" y="277" width="0.0811%" height="15" fill="rgb(251,164,9)" fg:x="640" fg:w="1"/><text x="52.1559%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.9059%" y="261" width="0.0811%" height="15" fill="rgb(233,194,0)" fg:x="640" fg:w="1"/><text x="52.1559%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="51.9870%" y="309" width="0.0811%" height="15" fill="rgb(249,111,24)" fg:x="641" fg:w="1"/><text x="52.2370%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="51.9870%" y="293" width="0.0811%" height="15" fill="rgb(250,223,3)" fg:x="641" fg:w="1"/><text x="52.2370%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="51.9870%" y="277" width="0.0811%" height="15" fill="rgb(236,178,37)" fg:x="641" fg:w="1"/><text x="52.2370%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (2 samples, 0.16%)</title><rect x="52.1492%" y="261" width="0.1622%" height="15" fill="rgb(241,158,50)" fg:x="643" fg:w="2"/><text x="52.3992%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.2303%" y="245" width="0.0811%" height="15" fill="rgb(213,121,41)" fg:x="644" fg:w="1"/><text x="52.4803%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="52.7981%" y="229" width="0.3244%" height="15" fill="rgb(240,92,3)" fg:x="651" fg:w="4"/><text x="53.0481%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="52.7981%" y="213" width="0.3244%" height="15" fill="rgb(205,123,3)" fg:x="651" fg:w="4"/><text x="53.0481%" y="223.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="52.7981%" y="197" width="0.3244%" height="15" fill="rgb(205,97,47)" fg:x="651" fg:w="4"/><text x="53.0481%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="53.1225%" y="229" width="0.0811%" height="15" fill="rgb(247,152,14)" fg:x="655" fg:w="1"/><text x="53.3725%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="53.1225%" y="213" width="0.0811%" height="15" fill="rgb(248,195,53)" fg:x="655" fg:w="1"/><text x="53.3725%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="53.1225%" y="197" width="0.0811%" height="15" fill="rgb(226,201,16)" fg:x="655" fg:w="1"/><text x="53.3725%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.1225%" y="181" width="0.0811%" height="15" fill="rgb(205,98,0)" fg:x="655" fg:w="1"/><text x="53.3725%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (17 samples, 1.38%)</title><rect x="52.3114%" y="245" width="1.3788%" height="15" fill="rgb(214,191,48)" fg:x="645" fg:w="17"/><text x="52.5614%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.49%)</title><rect x="53.2036%" y="229" width="0.4866%" height="15" fill="rgb(237,112,39)" fg:x="656" fg:w="6"/><text x="53.4536%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (279 samples, 22.63%)</title><rect x="31.1436%" y="341" width="22.6277%" height="15" fill="rgb(247,203,27)" fg:x="384" fg:w="279"/><text x="31.3936%" y="351.50">indefinite::rules::number::Number::c..</text></g><g><title>regex::regex::string::Regex::is_match_at (22 samples, 1.78%)</title><rect x="51.9870%" y="325" width="1.7843%" height="15" fill="rgb(235,124,28)" fg:x="641" fg:w="22"/><text x="52.2370%" y="335.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.70%)</title><rect x="52.0681%" y="309" width="1.7032%" height="15" fill="rgb(208,207,46)" fg:x="642" fg:w="21"/><text x="52.3181%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.70%)</title><rect x="52.0681%" y="293" width="1.7032%" height="15" fill="rgb(234,176,4)" fg:x="642" fg:w="21"/><text x="52.3181%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.70%)</title><rect x="52.0681%" y="277" width="1.7032%" height="15" fill="rgb(230,133,28)" fg:x="642" fg:w="21"/><text x="52.3181%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (18 samples, 1.46%)</title><rect x="52.3114%" y="261" width="1.4599%" height="15" fill="rgb(211,137,40)" fg:x="645" fg:w="18"/><text x="52.5614%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="53.6902%" y="245" width="0.0811%" height="15" fill="rgb(254,35,13)" fg:x="662" fg:w="1"/><text x="53.9402%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.6902%" y="229" width="0.0811%" height="15" fill="rgb(225,49,51)" fg:x="662" fg:w="1"/><text x="53.9402%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.6902%" y="213" width="0.0811%" height="15" fill="rgb(251,10,15)" fg:x="662" fg:w="1"/><text x="53.9402%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.6902%" y="197" width="0.0811%" height="15" fill="rgb(228,207,15)" fg:x="662" fg:w="1"/><text x="53.9402%" y="207.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="53.7713%" y="325" width="0.0811%" height="15" fill="rgb(241,99,19)" fg:x="663" fg:w="1"/><text x="54.0213%" y="335.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="53.7713%" y="309" width="0.0811%" height="15" fill="rgb(207,104,49)" fg:x="663" fg:w="1"/><text x="54.0213%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="53.7713%" y="293" width="0.0811%" height="15" fill="rgb(234,99,18)" fg:x="663" fg:w="1"/><text x="54.0213%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="53.7713%" y="277" width="0.0811%" height="15" fill="rgb(213,191,49)" fg:x="663" fg:w="1"/><text x="54.0213%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="53.7713%" y="261" width="0.0811%" height="15" fill="rgb(210,226,19)" fg:x="663" fg:w="1"/><text x="54.0213%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="53.7713%" y="245" width="0.0811%" height="15" fill="rgb(229,97,18)" fg:x="663" fg:w="1"/><text x="54.0213%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="53.7713%" y="229" width="0.0811%" height="15" fill="rgb(211,167,15)" fg:x="663" fg:w="1"/><text x="54.0213%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="53.7713%" y="213" width="0.0811%" height="15" fill="rgb(210,169,34)" fg:x="663" fg:w="1"/><text x="54.0213%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="53.7713%" y="197" width="0.0811%" height="15" fill="rgb(241,121,31)" fg:x="663" fg:w="1"/><text x="54.0213%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.7713%" y="181" width="0.0811%" height="15" fill="rgb(232,40,11)" fg:x="663" fg:w="1"/><text x="54.0213%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.9335%" y="229" width="0.0811%" height="15" fill="rgb(205,86,26)" fg:x="665" fg:w="1"/><text x="54.1835%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="53.8524%" y="261" width="0.2433%" height="15" fill="rgb(231,126,28)" fg:x="664" fg:w="3"/><text x="54.1024%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="53.8524%" y="245" width="0.2433%" height="15" fill="rgb(219,221,18)" fg:x="664" fg:w="3"/><text x="54.1024%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="54.0146%" y="229" width="0.0811%" height="15" fill="rgb(211,40,0)" fg:x="666" fg:w="1"/><text x="54.2646%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="54.0957%" y="261" width="0.2433%" height="15" fill="rgb(239,85,43)" fg:x="667" fg:w="3"/><text x="54.3457%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="54.0957%" y="245" width="0.2433%" height="15" fill="rgb(231,55,21)" fg:x="667" fg:w="3"/><text x="54.3457%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="54.0957%" y="229" width="0.2433%" height="15" fill="rgb(225,184,43)" fg:x="667" fg:w="3"/><text x="54.3457%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="54.0957%" y="213" width="0.2433%" height="15" fill="rgb(251,158,41)" fg:x="667" fg:w="3"/><text x="54.3457%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="54.1768%" y="197" width="0.1622%" height="15" fill="rgb(234,159,37)" fg:x="668" fg:w="2"/><text x="54.4268%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="54.1768%" y="181" width="0.1622%" height="15" fill="rgb(216,204,22)" fg:x="668" fg:w="2"/><text x="54.4268%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="54.1768%" y="165" width="0.1622%" height="15" fill="rgb(214,17,3)" fg:x="668" fg:w="2"/><text x="54.4268%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="54.1768%" y="149" width="0.1622%" height="15" fill="rgb(212,111,17)" fg:x="668" fg:w="2"/><text x="54.4268%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (9 samples, 0.73%)</title><rect x="54.5012%" y="229" width="0.7299%" height="15" fill="rgb(221,157,24)" fg:x="672" fg:w="9"/><text x="54.7512%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="55.1500%" y="213" width="0.0811%" height="15" fill="rgb(252,16,13)" fg:x="680" fg:w="1"/><text x="55.4000%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (10 samples, 0.81%)</title><rect x="54.5012%" y="245" width="0.8110%" height="15" fill="rgb(221,62,2)" fg:x="672" fg:w="10"/><text x="54.7512%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="55.2311%" y="229" width="0.0811%" height="15" fill="rgb(247,87,22)" fg:x="681" fg:w="1"/><text x="55.4811%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="55.2311%" y="213" width="0.0811%" height="15" fill="rgb(215,73,9)" fg:x="681" fg:w="1"/><text x="55.4811%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="55.2311%" y="197" width="0.0811%" height="15" fill="rgb(207,175,33)" fg:x="681" fg:w="1"/><text x="55.4811%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.2311%" y="181" width="0.0811%" height="15" fill="rgb(243,129,54)" fg:x="681" fg:w="1"/><text x="55.4811%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.2311%" y="165" width="0.0811%" height="15" fill="rgb(227,119,45)" fg:x="681" fg:w="1"/><text x="55.4811%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.2311%" y="149" width="0.0811%" height="15" fill="rgb(205,109,36)" fg:x="681" fg:w="1"/><text x="55.4811%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.3933%" y="213" width="0.0811%" height="15" fill="rgb(205,6,39)" fg:x="683" fg:w="1"/><text x="55.6433%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.3933%" y="197" width="0.0811%" height="15" fill="rgb(221,32,16)" fg:x="683" fg:w="1"/><text x="55.6433%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.3933%" y="181" width="0.0811%" height="15" fill="rgb(228,144,50)" fg:x="683" fg:w="1"/><text x="55.6433%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="55.4745%" y="213" width="0.0811%" height="15" fill="rgb(229,201,53)" fg:x="684" fg:w="1"/><text x="55.7245%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.4745%" y="197" width="0.0811%" height="15" fill="rgb(249,153,27)" fg:x="684" fg:w="1"/><text x="55.7245%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.4745%" y="181" width="0.0811%" height="15" fill="rgb(227,106,25)" fg:x="684" fg:w="1"/><text x="55.7245%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.4745%" y="165" width="0.0811%" height="15" fill="rgb(230,65,29)" fg:x="684" fg:w="1"/><text x="55.7245%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="55.3122%" y="229" width="0.3244%" height="15" fill="rgb(221,57,46)" fg:x="682" fg:w="4"/><text x="55.5622%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="55.5556%" y="213" width="0.0811%" height="15" fill="rgb(229,161,17)" fg:x="685" fg:w="1"/><text x="55.8056%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="55.5556%" y="197" width="0.0811%" height="15" fill="rgb(222,213,11)" fg:x="685" fg:w="1"/><text x="55.8056%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="55.5556%" y="181" width="0.0811%" height="15" fill="rgb(235,35,13)" fg:x="685" fg:w="1"/><text x="55.8056%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.7178%" y="213" width="0.0811%" height="15" fill="rgb(233,158,34)" fg:x="687" fg:w="1"/><text x="55.9678%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (25 samples, 2.03%)</title><rect x="54.3390%" y="261" width="2.0276%" height="15" fill="rgb(215,151,48)" fg:x="670" fg:w="25"/><text x="54.5890%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (13 samples, 1.05%)</title><rect x="55.3122%" y="245" width="1.0543%" height="15" fill="rgb(229,84,14)" fg:x="682" fg:w="13"/><text x="55.5622%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.73%)</title><rect x="55.6367%" y="229" width="0.7299%" height="15" fill="rgb(229,68,14)" fg:x="686" fg:w="9"/><text x="55.8867%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.57%)</title><rect x="55.7989%" y="213" width="0.5677%" height="15" fill="rgb(243,106,26)" fg:x="688" fg:w="7"/><text x="56.0489%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.2855%" y="197" width="0.0811%" height="15" fill="rgb(206,45,38)" fg:x="694" fg:w="1"/><text x="56.5355%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.2855%" y="181" width="0.0811%" height="15" fill="rgb(226,6,15)" fg:x="694" fg:w="1"/><text x="56.5355%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.2855%" y="165" width="0.0811%" height="15" fill="rgb(232,22,54)" fg:x="694" fg:w="1"/><text x="56.5355%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="56.3666%" y="213" width="0.0811%" height="15" fill="rgb(229,222,32)" fg:x="695" fg:w="1"/><text x="56.6166%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="56.4477%" y="181" width="0.0811%" height="15" fill="rgb(228,62,29)" fg:x="696" fg:w="1"/><text x="56.6977%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="56.4477%" y="213" width="0.1622%" height="15" fill="rgb(251,103,34)" fg:x="696" fg:w="2"/><text x="56.6977%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="56.4477%" y="197" width="0.1622%" height="15" fill="rgb(233,12,30)" fg:x="696" fg:w="2"/><text x="56.6977%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="56.5288%" y="181" width="0.0811%" height="15" fill="rgb(238,52,0)" fg:x="697" fg:w="1"/><text x="56.7788%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="56.3666%" y="229" width="0.3244%" height="15" fill="rgb(223,98,5)" fg:x="695" fg:w="4"/><text x="56.6166%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="56.6099%" y="213" width="0.0811%" height="15" fill="rgb(228,75,37)" fg:x="698" fg:w="1"/><text x="56.8599%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.6099%" y="197" width="0.0811%" height="15" fill="rgb(205,115,49)" fg:x="698" fg:w="1"/><text x="56.8599%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.6099%" y="181" width="0.0811%" height="15" fill="rgb(250,154,43)" fg:x="698" fg:w="1"/><text x="56.8599%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.6099%" y="165" width="0.0811%" height="15" fill="rgb(226,43,29)" fg:x="698" fg:w="1"/><text x="56.8599%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.57%)</title><rect x="56.3666%" y="261" width="0.5677%" height="15" fill="rgb(249,228,39)" fg:x="695" fg:w="7"/><text x="56.6166%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.57%)</title><rect x="56.3666%" y="245" width="0.5677%" height="15" fill="rgb(216,79,43)" fg:x="695" fg:w="7"/><text x="56.6166%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="56.6910%" y="229" width="0.2433%" height="15" fill="rgb(228,95,12)" fg:x="699" fg:w="3"/><text x="56.9410%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.8532%" y="213" width="0.0811%" height="15" fill="rgb(249,221,15)" fg:x="701" fg:w="1"/><text x="57.1032%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.8532%" y="197" width="0.0811%" height="15" fill="rgb(233,34,13)" fg:x="701" fg:w="1"/><text x="57.1032%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.8532%" y="181" width="0.0811%" height="15" fill="rgb(214,103,39)" fg:x="701" fg:w="1"/><text x="57.1032%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.0154%" y="213" width="0.0811%" height="15" fill="rgb(251,126,39)" fg:x="703" fg:w="1"/><text x="57.2654%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.0154%" y="197" width="0.0811%" height="15" fill="rgb(214,216,36)" fg:x="703" fg:w="1"/><text x="57.2654%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.0154%" y="181" width="0.0811%" height="15" fill="rgb(220,221,8)" fg:x="703" fg:w="1"/><text x="57.2654%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="57.0965%" y="213" width="0.0811%" height="15" fill="rgb(240,216,3)" fg:x="704" fg:w="1"/><text x="57.3465%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="57.0965%" y="197" width="0.0811%" height="15" fill="rgb(232,218,17)" fg:x="704" fg:w="1"/><text x="57.3465%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="56.9343%" y="229" width="0.3244%" height="15" fill="rgb(229,163,45)" fg:x="702" fg:w="4"/><text x="57.1843%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="57.1776%" y="213" width="0.0811%" height="15" fill="rgb(231,110,42)" fg:x="705" fg:w="1"/><text x="57.4276%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (43 samples, 3.49%)</title><rect x="53.8524%" y="309" width="3.4874%" height="15" fill="rgb(208,170,48)" fg:x="664" fg:w="43"/><text x="54.1024%" y="319.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (43 samples, 3.49%)</title><rect x="53.8524%" y="293" width="3.4874%" height="15" fill="rgb(239,116,25)" fg:x="664" fg:w="43"/><text x="54.1024%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (43 samples, 3.49%)</title><rect x="53.8524%" y="277" width="3.4874%" height="15" fill="rgb(219,200,50)" fg:x="664" fg:w="43"/><text x="54.1024%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="56.9343%" y="261" width="0.4055%" height="15" fill="rgb(245,200,0)" fg:x="702" fg:w="5"/><text x="57.1843%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="56.9343%" y="245" width="0.4055%" height="15" fill="rgb(245,119,33)" fg:x="702" fg:w="5"/><text x="57.1843%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="57.2587%" y="229" width="0.0811%" height="15" fill="rgb(231,125,12)" fg:x="706" fg:w="1"/><text x="57.5087%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="57.3398%" y="277" width="0.0811%" height="15" fill="rgb(216,96,41)" fg:x="707" fg:w="1"/><text x="57.5898%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.3398%" y="261" width="0.0811%" height="15" fill="rgb(248,43,45)" fg:x="707" fg:w="1"/><text x="57.5898%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.3398%" y="245" width="0.0811%" height="15" fill="rgb(217,222,7)" fg:x="707" fg:w="1"/><text x="57.5898%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="57.3398%" y="229" width="0.0811%" height="15" fill="rgb(233,28,6)" fg:x="707" fg:w="1"/><text x="57.5898%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="57.3398%" y="213" width="0.0811%" height="15" fill="rgb(231,218,15)" fg:x="707" fg:w="1"/><text x="57.5898%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="57.3398%" y="197" width="0.0811%" height="15" fill="rgb(226,171,48)" fg:x="707" fg:w="1"/><text x="57.5898%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="57.3398%" y="309" width="0.1622%" height="15" fill="rgb(235,201,9)" fg:x="707" fg:w="2"/><text x="57.5898%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="57.3398%" y="293" width="0.1622%" height="15" fill="rgb(217,80,15)" fg:x="707" fg:w="2"/><text x="57.5898%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="57.4209%" y="277" width="0.0811%" height="15" fill="rgb(219,152,8)" fg:x="708" fg:w="1"/><text x="57.6709%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="57.5020%" y="277" width="0.0811%" height="15" fill="rgb(243,107,38)" fg:x="709" fg:w="1"/><text x="57.7520%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="57.5020%" y="261" width="0.0811%" height="15" fill="rgb(231,17,5)" fg:x="709" fg:w="1"/><text x="57.7520%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="57.5020%" y="245" width="0.0811%" height="15" fill="rgb(209,25,54)" fg:x="709" fg:w="1"/><text x="57.7520%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.5831%" y="261" width="0.0811%" height="15" fill="rgb(219,0,2)" fg:x="710" fg:w="1"/><text x="57.8331%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="57.5020%" y="309" width="0.3244%" height="15" fill="rgb(246,9,5)" fg:x="709" fg:w="4"/><text x="57.7520%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="57.5020%" y="293" width="0.3244%" height="15" fill="rgb(226,159,4)" fg:x="709" fg:w="4"/><text x="57.7520%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="57.5831%" y="277" width="0.2433%" height="15" fill="rgb(219,175,34)" fg:x="710" fg:w="3"/><text x="57.8331%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="57.6642%" y="261" width="0.1622%" height="15" fill="rgb(236,10,46)" fg:x="711" fg:w="2"/><text x="57.9142%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="57.6642%" y="245" width="0.1622%" height="15" fill="rgb(240,211,16)" fg:x="711" fg:w="2"/><text x="57.9142%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="57.7453%" y="229" width="0.0811%" height="15" fill="rgb(205,3,43)" fg:x="712" fg:w="1"/><text x="57.9953%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="57.9075%" y="261" width="0.5677%" height="15" fill="rgb(245,7,22)" fg:x="714" fg:w="7"/><text x="58.1575%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.57%)</title><rect x="57.9075%" y="245" width="0.5677%" height="15" fill="rgb(239,132,32)" fg:x="714" fg:w="7"/><text x="58.1575%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="58.3942%" y="229" width="0.0811%" height="15" fill="rgb(228,202,34)" fg:x="720" fg:w="1"/><text x="58.6442%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="58.3942%" y="213" width="0.0811%" height="15" fill="rgb(254,200,22)" fg:x="720" fg:w="1"/><text x="58.6442%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (58 samples, 4.70%)</title><rect x="53.8524%" y="325" width="4.7040%" height="15" fill="rgb(219,10,39)" fg:x="664" fg:w="58"/><text x="54.1024%" y="335.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.73%)</title><rect x="57.8264%" y="309" width="0.7299%" height="15" fill="rgb(226,210,39)" fg:x="713" fg:w="9"/><text x="58.0764%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.73%)</title><rect x="57.8264%" y="293" width="0.7299%" height="15" fill="rgb(208,219,16)" fg:x="713" fg:w="9"/><text x="58.0764%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.73%)</title><rect x="57.8264%" y="277" width="0.7299%" height="15" fill="rgb(216,158,51)" fg:x="713" fg:w="9"/><text x="58.0764%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="58.4753%" y="261" width="0.0811%" height="15" fill="rgb(233,14,44)" fg:x="721" fg:w="1"/><text x="58.7253%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="58.4753%" y="245" width="0.0811%" height="15" fill="rgb(237,97,39)" fg:x="721" fg:w="1"/><text x="58.7253%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.4753%" y="229" width="0.0811%" height="15" fill="rgb(218,198,43)" fg:x="721" fg:w="1"/><text x="58.7253%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.4753%" y="213" width="0.0811%" height="15" fill="rgb(231,104,20)" fg:x="721" fg:w="1"/><text x="58.7253%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.4753%" y="197" width="0.0811%" height="15" fill="rgb(254,36,13)" fg:x="721" fg:w="1"/><text x="58.7253%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (573 samples, 46.47%)</title><rect x="12.2466%" y="421" width="46.4720%" height="15" fill="rgb(248,14,50)" fg:x="151" fg:w="573"/><text x="12.4966%" y="431.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;repli..</text></g><g><title>plugins_core::looking::model::qualify_name (553 samples, 44.85%)</title><rect x="13.8686%" y="405" width="44.8500%" height="15" fill="rgb(217,107,29)" fg:x="171" fg:w="553"/><text x="14.1186%" y="415.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (553 samples, 44.85%)</title><rect x="13.8686%" y="389" width="44.8500%" height="15" fill="rgb(251,169,33)" fg:x="171" fg:w="553"/><text x="14.1186%" y="399.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (553 samples, 44.85%)</title><rect x="13.8686%" y="373" width="44.8500%" height="15" fill="rgb(217,108,32)" fg:x="171" fg:w="553"/><text x="14.1186%" y="383.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (553 samples, 44.85%)</title><rect x="13.8686%" y="357" width="44.8500%" height="15" fill="rgb(219,66,42)" fg:x="171" fg:w="553"/><text x="14.1186%" y="367.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (61 samples, 4.95%)</title><rect x="53.7713%" y="341" width="4.9473%" height="15" fill="rgb(206,180,7)" fg:x="663" fg:w="61"/><text x="54.0213%" y="351.50">indefi..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="58.5564%" y="325" width="0.1622%" height="15" fill="rgb(208,226,31)" fg:x="722" fg:w="2"/><text x="58.8064%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.7186%" y="421" width="0.0811%" height="15" fill="rgb(218,26,49)" fg:x="724" fg:w="1"/><text x="58.9686%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="58.7997%" y="245" width="0.0811%" height="15" fill="rgb(233,197,48)" fg:x="725" fg:w="1"/><text x="59.0497%" y="255.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="58.7997%" y="229" width="0.0811%" height="15" fill="rgb(252,181,51)" fg:x="725" fg:w="1"/><text x="59.0497%" y="239.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="58.7997%" y="213" width="0.0811%" height="15" fill="rgb(253,90,19)" fg:x="725" fg:w="1"/><text x="59.0497%" y="223.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.7997%" y="197" width="0.0811%" height="15" fill="rgb(215,171,30)" fg:x="725" fg:w="1"/><text x="59.0497%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.7997%" y="181" width="0.0811%" height="15" fill="rgb(214,222,9)" fg:x="725" fg:w="1"/><text x="59.0497%" y="191.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.7997%" y="165" width="0.0811%" height="15" fill="rgb(223,3,22)" fg:x="725" fg:w="1"/><text x="59.0497%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.7997%" y="149" width="0.0811%" height="15" fill="rgb(225,196,46)" fg:x="725" fg:w="1"/><text x="59.0497%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="58.7997%" y="133" width="0.0811%" height="15" fill="rgb(209,110,37)" fg:x="725" fg:w="1"/><text x="59.0497%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.7997%" y="117" width="0.0811%" height="15" fill="rgb(249,89,12)" fg:x="725" fg:w="1"/><text x="59.0497%" y="127.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.7997%" y="101" width="0.0811%" height="15" fill="rgb(226,27,33)" fg:x="725" fg:w="1"/><text x="59.0497%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.7997%" y="85" width="0.0811%" height="15" fill="rgb(213,82,22)" fg:x="725" fg:w="1"/><text x="59.0497%" y="95.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="58.7997%" y="69" width="0.0811%" height="15" fill="rgb(248,140,0)" fg:x="725" fg:w="1"/><text x="59.0497%" y="79.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="58.7997%" y="277" width="0.1622%" height="15" fill="rgb(228,106,3)" fg:x="725" fg:w="2"/><text x="59.0497%" y="287.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="58.7997%" y="261" width="0.1622%" height="15" fill="rgb(209,23,37)" fg:x="725" fg:w="2"/><text x="59.0497%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="58.8808%" y="245" width="0.0811%" height="15" fill="rgb(241,93,50)" fg:x="726" fg:w="1"/><text x="59.1308%" y="255.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="58.8808%" y="229" width="0.0811%" height="15" fill="rgb(253,46,43)" fg:x="726" fg:w="1"/><text x="59.1308%" y="239.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="58.8808%" y="213" width="0.0811%" height="15" fill="rgb(226,206,43)" fg:x="726" fg:w="1"/><text x="59.1308%" y="223.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.8808%" y="197" width="0.0811%" height="15" fill="rgb(217,54,7)" fg:x="726" fg:w="1"/><text x="59.1308%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.8808%" y="181" width="0.0811%" height="15" fill="rgb(223,5,52)" fg:x="726" fg:w="1"/><text x="59.1308%" y="191.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.8808%" y="165" width="0.0811%" height="15" fill="rgb(206,52,46)" fg:x="726" fg:w="1"/><text x="59.1308%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.8808%" y="149" width="0.0811%" height="15" fill="rgb(253,136,11)" fg:x="726" fg:w="1"/><text x="59.1308%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="58.8808%" y="133" width="0.0811%" height="15" fill="rgb(208,106,33)" fg:x="726" fg:w="1"/><text x="59.1308%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.8808%" y="117" width="0.0811%" height="15" fill="rgb(206,54,4)" fg:x="726" fg:w="1"/><text x="59.1308%" y="127.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.8808%" y="101" width="0.0811%" height="15" fill="rgb(213,3,15)" fg:x="726" fg:w="1"/><text x="59.1308%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.0430%" y="133" width="0.0811%" height="15" fill="rgb(252,211,39)" fg:x="728" fg:w="1"/><text x="59.2930%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="59.1241%" y="101" width="0.0811%" height="15" fill="rgb(223,6,36)" fg:x="729" fg:w="1"/><text x="59.3741%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.1241%" y="85" width="0.0811%" height="15" fill="rgb(252,169,45)" fg:x="729" fg:w="1"/><text x="59.3741%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="58.9619%" y="277" width="0.3244%" height="15" fill="rgb(212,48,26)" fg:x="727" fg:w="4"/><text x="59.2119%" y="287.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="59.0430%" y="261" width="0.2433%" height="15" fill="rgb(251,102,48)" fg:x="728" fg:w="3"/><text x="59.2930%" y="271.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="59.0430%" y="245" width="0.2433%" height="15" fill="rgb(243,208,16)" fg:x="728" fg:w="3"/><text x="59.2930%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="59.0430%" y="229" width="0.2433%" height="15" fill="rgb(219,96,24)" fg:x="728" fg:w="3"/><text x="59.2930%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="59.0430%" y="213" width="0.2433%" height="15" fill="rgb(219,33,29)" fg:x="728" fg:w="3"/><text x="59.2930%" y="223.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="59.0430%" y="197" width="0.2433%" height="15" fill="rgb(223,176,5)" fg:x="728" fg:w="3"/><text x="59.2930%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="59.0430%" y="181" width="0.2433%" height="15" fill="rgb(228,140,14)" fg:x="728" fg:w="3"/><text x="59.2930%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="59.0430%" y="165" width="0.2433%" height="15" fill="rgb(217,179,31)" fg:x="728" fg:w="3"/><text x="59.2930%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="59.0430%" y="149" width="0.2433%" height="15" fill="rgb(230,9,30)" fg:x="728" fg:w="3"/><text x="59.2930%" y="159.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="59.1241%" y="133" width="0.1622%" height="15" fill="rgb(230,136,20)" fg:x="729" fg:w="2"/><text x="59.3741%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.1241%" y="117" width="0.1622%" height="15" fill="rgb(215,210,22)" fg:x="729" fg:w="2"/><text x="59.3741%" y="127.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.2052%" y="101" width="0.0811%" height="15" fill="rgb(218,43,5)" fg:x="730" fg:w="1"/><text x="59.4552%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.2052%" y="85" width="0.0811%" height="15" fill="rgb(216,11,5)" fg:x="730" fg:w="1"/><text x="59.4552%" y="95.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="59.2052%" y="69" width="0.0811%" height="15" fill="rgb(209,82,29)" fg:x="730" fg:w="1"/><text x="59.4552%" y="79.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.2052%" y="53" width="0.0811%" height="15" fill="rgb(244,115,12)" fg:x="730" fg:w="1"/><text x="59.4552%" y="63.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.2863%" y="277" width="0.0811%" height="15" fill="rgb(222,82,18)" fg:x="731" fg:w="1"/><text x="59.5363%" y="287.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="59.3674%" y="277" width="0.0811%" height="15" fill="rgb(249,227,8)" fg:x="732" fg:w="1"/><text x="59.6174%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.3674%" y="261" width="0.0811%" height="15" fill="rgb(253,141,45)" fg:x="732" fg:w="1"/><text x="59.6174%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.3674%" y="245" width="0.0811%" height="15" fill="rgb(234,184,4)" fg:x="732" fg:w="1"/><text x="59.6174%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="59.3674%" y="229" width="0.0811%" height="15" fill="rgb(218,194,23)" fg:x="732" fg:w="1"/><text x="59.6174%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="59.3674%" y="213" width="0.0811%" height="15" fill="rgb(235,66,41)" fg:x="732" fg:w="1"/><text x="59.6174%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.5296%" y="165" width="0.0811%" height="15" fill="rgb(245,217,1)" fg:x="734" fg:w="1"/><text x="59.7796%" y="175.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="59.4485%" y="261" width="0.2433%" height="15" fill="rgb(229,91,1)" fg:x="733" fg:w="3"/><text x="59.6985%" y="271.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="59.4485%" y="245" width="0.2433%" height="15" fill="rgb(207,101,30)" fg:x="733" fg:w="3"/><text x="59.6985%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="59.4485%" y="229" width="0.2433%" height="15" fill="rgb(223,82,49)" fg:x="733" fg:w="3"/><text x="59.6985%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="59.4485%" y="213" width="0.2433%" height="15" fill="rgb(218,167,17)" fg:x="733" fg:w="3"/><text x="59.6985%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="59.4485%" y="197" width="0.2433%" height="15" fill="rgb(208,103,14)" fg:x="733" fg:w="3"/><text x="59.6985%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.5296%" y="181" width="0.1622%" height="15" fill="rgb(238,20,8)" fg:x="734" fg:w="2"/><text x="59.7796%" y="191.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.6107%" y="165" width="0.0811%" height="15" fill="rgb(218,80,54)" fg:x="735" fg:w="1"/><text x="59.8607%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.6107%" y="149" width="0.0811%" height="15" fill="rgb(240,144,17)" fg:x="735" fg:w="1"/><text x="59.8607%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.6107%" y="133" width="0.0811%" height="15" fill="rgb(245,27,50)" fg:x="735" fg:w="1"/><text x="59.8607%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.6107%" y="117" width="0.0811%" height="15" fill="rgb(251,51,7)" fg:x="735" fg:w="1"/><text x="59.8607%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.6107%" y="101" width="0.0811%" height="15" fill="rgb(245,217,29)" fg:x="735" fg:w="1"/><text x="59.8607%" y="111.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (12 samples, 0.97%)</title><rect x="58.7997%" y="389" width="0.9732%" height="15" fill="rgb(221,176,29)" fg:x="725" fg:w="12"/><text x="59.0497%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (12 samples, 0.97%)</title><rect x="58.7997%" y="373" width="0.9732%" height="15" fill="rgb(212,180,24)" fg:x="725" fg:w="12"/><text x="59.0497%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.97%)</title><rect x="58.7997%" y="357" width="0.9732%" height="15" fill="rgb(254,24,2)" fg:x="725" fg:w="12"/><text x="59.0497%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.97%)</title><rect x="58.7997%" y="341" width="0.9732%" height="15" fill="rgb(230,100,2)" fg:x="725" fg:w="12"/><text x="59.0497%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (12 samples, 0.97%)</title><rect x="58.7997%" y="325" width="0.9732%" height="15" fill="rgb(219,142,25)" fg:x="725" fg:w="12"/><text x="59.0497%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (12 samples, 0.97%)</title><rect x="58.7997%" y="309" width="0.9732%" height="15" fill="rgb(240,73,43)" fg:x="725" fg:w="12"/><text x="59.0497%" y="319.50"></text></g><g><title>engine::internal::Entities::add_persisted (12 samples, 0.97%)</title><rect x="58.7997%" y="293" width="0.9732%" height="15" fill="rgb(214,114,15)" fg:x="725" fg:w="12"/><text x="59.0497%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="59.4485%" y="277" width="0.3244%" height="15" fill="rgb(207,130,4)" fg:x="733" fg:w="4"/><text x="59.6985%" y="287.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="59.6918%" y="261" width="0.0811%" height="15" fill="rgb(221,25,40)" fg:x="736" fg:w="1"/><text x="59.9418%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.6918%" y="245" width="0.0811%" height="15" fill="rgb(241,184,7)" fg:x="736" fg:w="1"/><text x="59.9418%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.6918%" y="229" width="0.0811%" height="15" fill="rgb(235,159,4)" fg:x="736" fg:w="1"/><text x="59.9418%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.6918%" y="213" width="0.0811%" height="15" fill="rgb(214,87,48)" fg:x="736" fg:w="1"/><text x="59.9418%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.6918%" y="197" width="0.0811%" height="15" fill="rgb(246,198,24)" fg:x="736" fg:w="1"/><text x="59.9418%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.6918%" y="181" width="0.0811%" height="15" fill="rgb(209,66,40)" fg:x="736" fg:w="1"/><text x="59.9418%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.6918%" y="165" width="0.0811%" height="15" fill="rgb(233,147,39)" fg:x="736" fg:w="1"/><text x="59.9418%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.6918%" y="149" width="0.0811%" height="15" fill="rgb(231,145,52)" fg:x="736" fg:w="1"/><text x="59.9418%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.6918%" y="133" width="0.0811%" height="15" fill="rgb(206,20,26)" fg:x="736" fg:w="1"/><text x="59.9418%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.6918%" y="117" width="0.0811%" height="15" fill="rgb(238,220,4)" fg:x="736" fg:w="1"/><text x="59.9418%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.6918%" y="101" width="0.0811%" height="15" fill="rgb(252,195,42)" fg:x="736" fg:w="1"/><text x="59.9418%" y="111.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.6918%" y="85" width="0.0811%" height="15" fill="rgb(209,10,6)" fg:x="736" fg:w="1"/><text x="59.9418%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.6918%" y="69" width="0.0811%" height="15" fill="rgb(229,3,52)" fg:x="736" fg:w="1"/><text x="59.9418%" y="79.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.6918%" y="53" width="0.0811%" height="15" fill="rgb(253,49,37)" fg:x="736" fg:w="1"/><text x="59.9418%" y="63.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.6918%" y="37" width="0.0811%" height="15" fill="rgb(240,103,49)" fg:x="736" fg:w="1"/><text x="59.9418%" y="47.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (588 samples, 47.69%)</title><rect x="12.1655%" y="453" width="47.6886%" height="15" fill="rgb(250,182,30)" fg:x="150" fg:w="588"/><text x="12.4155%" y="463.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perfo..</text></g><g><title>plugins_core::looking::model::new_area_observation (587 samples, 47.61%)</title><rect x="12.2466%" y="437" width="47.6075%" height="15" fill="rgb(248,8,30)" fg:x="151" fg:w="587"/><text x="12.4966%" y="447.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (13 samples, 1.05%)</title><rect x="58.7997%" y="421" width="1.0543%" height="15" fill="rgb(237,120,30)" fg:x="725" fg:w="13"/><text x="59.0497%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (13 samples, 1.05%)</title><rect x="58.7997%" y="405" width="1.0543%" height="15" fill="rgb(221,146,34)" fg:x="725" fg:w="13"/><text x="59.0497%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.7729%" y="389" width="0.0811%" height="15" fill="rgb(242,55,13)" fg:x="737" fg:w="1"/><text x="60.0229%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.7729%" y="373" width="0.0811%" height="15" fill="rgb(242,112,31)" fg:x="737" fg:w="1"/><text x="60.0229%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="59.7729%" y="357" width="0.0811%" height="15" fill="rgb(249,192,27)" fg:x="737" fg:w="1"/><text x="60.0229%" y="367.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (607 samples, 49.23%)</title><rect x="10.7056%" y="581" width="49.2295%" height="15" fill="rgb(208,204,44)" fg:x="132" fg:w="607"/><text x="10.9556%" y="591.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (589 samples, 47.77%)</title><rect x="12.1655%" y="565" width="47.7697%" height="15" fill="rgb(208,93,54)" fg:x="150" fg:w="589"/><text x="12.4155%" y="575.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (589 samples, 47.77%)</title><rect x="12.1655%" y="549" width="47.7697%" height="15" fill="rgb(242,1,31)" fg:x="150" fg:w="589"/><text x="12.4155%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (589 samples, 47.77%)</title><rect x="12.1655%" y="533" width="47.7697%" height="15" fill="rgb(241,83,25)" fg:x="150" fg:w="589"/><text x="12.4155%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (589 samples, 47.77%)</title><rect x="12.1655%" y="517" width="47.7697%" height="15" fill="rgb(205,169,50)" fg:x="150" fg:w="589"/><text x="12.4155%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (589 samples, 47.77%)</title><rect x="12.1655%" y="501" width="47.7697%" height="15" fill="rgb(239,186,37)" fg:x="150" fg:w="589"/><text x="12.4155%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (589 samples, 47.77%)</title><rect x="12.1655%" y="485" width="47.7697%" height="15" fill="rgb(205,221,10)" fg:x="150" fg:w="589"/><text x="12.4155%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (589 samples, 47.77%)</title><rect x="12.1655%" y="469" width="47.7697%" height="15" fill="rgb(218,196,15)" fg:x="150" fg:w="589"/><text x="12.4155%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.8540%" y="453" width="0.0811%" height="15" fill="rgb(218,196,35)" fg:x="738" fg:w="1"/><text x="60.1040%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.0162%" y="437" width="0.0811%" height="15" fill="rgb(233,63,24)" fg:x="740" fg:w="1"/><text x="60.2662%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="59.9351%" y="565" width="0.2433%" height="15" fill="rgb(225,8,4)" fg:x="739" fg:w="3"/><text x="60.1851%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="59.9351%" y="549" width="0.2433%" height="15" fill="rgb(234,105,35)" fg:x="739" fg:w="3"/><text x="60.1851%" y="559.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="59.9351%" y="533" width="0.2433%" height="15" fill="rgb(236,21,32)" fg:x="739" fg:w="3"/><text x="60.1851%" y="543.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="59.9351%" y="517" width="0.2433%" height="15" fill="rgb(228,109,6)" fg:x="739" fg:w="3"/><text x="60.1851%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="59.9351%" y="501" width="0.2433%" height="15" fill="rgb(229,215,31)" fg:x="739" fg:w="3"/><text x="60.1851%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="59.9351%" y="485" width="0.2433%" height="15" fill="rgb(221,52,54)" fg:x="739" fg:w="3"/><text x="60.1851%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="59.9351%" y="469" width="0.2433%" height="15" fill="rgb(252,129,43)" fg:x="739" fg:w="3"/><text x="60.1851%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="59.9351%" y="453" width="0.2433%" height="15" fill="rgb(248,183,27)" fg:x="739" fg:w="3"/><text x="60.1851%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="60.0973%" y="437" width="0.0811%" height="15" fill="rgb(250,0,22)" fg:x="741" fg:w="1"/><text x="60.3473%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.0973%" y="421" width="0.0811%" height="15" fill="rgb(213,166,10)" fg:x="741" fg:w="1"/><text x="60.3473%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.0973%" y="405" width="0.0811%" height="15" fill="rgb(207,163,36)" fg:x="741" fg:w="1"/><text x="60.3473%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.0973%" y="389" width="0.0811%" height="15" fill="rgb(208,122,22)" fg:x="741" fg:w="1"/><text x="60.3473%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.0973%" y="373" width="0.0811%" height="15" fill="rgb(207,104,49)" fg:x="741" fg:w="1"/><text x="60.3473%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.0973%" y="357" width="0.0811%" height="15" fill="rgb(248,211,50)" fg:x="741" fg:w="1"/><text x="60.3473%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.0973%" y="341" width="0.0811%" height="15" fill="rgb(217,13,45)" fg:x="741" fg:w="1"/><text x="60.3473%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.0973%" y="325" width="0.0811%" height="15" fill="rgb(211,216,49)" fg:x="741" fg:w="1"/><text x="60.3473%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.0973%" y="309" width="0.0811%" height="15" fill="rgb(221,58,53)" fg:x="741" fg:w="1"/><text x="60.3473%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.0973%" y="293" width="0.0811%" height="15" fill="rgb(220,112,41)" fg:x="741" fg:w="1"/><text x="60.3473%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (743 samples, 60.26%)</title><rect x="0.0000%" y="757" width="60.2595%" height="15" fill="rgb(236,38,28)" fg:x="0" fg:w="743"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (743 samples, 60.26%)</title><rect x="0.0000%" y="741" width="60.2595%" height="15" fill="rgb(227,195,22)" fg:x="0" fg:w="743"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (743 samples, 60.26%)</title><rect x="0.0000%" y="725" width="60.2595%" height="15" fill="rgb(214,55,33)" fg:x="0" fg:w="743"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (612 samples, 49.64%)</title><rect x="10.6245%" y="709" width="49.6350%" height="15" fill="rgb(248,80,13)" fg:x="131" fg:w="612"/><text x="10.8745%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (612 samples, 49.64%)</title><rect x="10.6245%" y="693" width="49.6350%" height="15" fill="rgb(238,52,6)" fg:x="131" fg:w="612"/><text x="10.8745%" y="703.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (611 samples, 49.55%)</title><rect x="10.7056%" y="677" width="49.5539%" height="15" fill="rgb(224,198,47)" fg:x="132" fg:w="611"/><text x="10.9556%" y="687.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (611 samples, 49.55%)</title><rect x="10.7056%" y="661" width="49.5539%" height="15" fill="rgb(233,171,20)" fg:x="132" fg:w="611"/><text x="10.9556%" y="671.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (611 samples, 49.55%)</title><rect x="10.7056%" y="645" width="49.5539%" height="15" fill="rgb(241,30,25)" fg:x="132" fg:w="611"/><text x="10.9556%" y="655.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (611 samples, 49.55%)</title><rect x="10.7056%" y="629" width="49.5539%" height="15" fill="rgb(207,171,38)" fg:x="132" fg:w="611"/><text x="10.9556%" y="639.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (611 samples, 49.55%)</title><rect x="10.7056%" y="613" width="49.5539%" height="15" fill="rgb(234,70,1)" fg:x="132" fg:w="611"/><text x="10.9556%" y="623.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (611 samples, 49.55%)</title><rect x="10.7056%" y="597" width="49.5539%" height="15" fill="rgb(232,178,18)" fg:x="132" fg:w="611"/><text x="10.9556%" y="607.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (4 samples, 0.32%)</title><rect x="59.9351%" y="581" width="0.3244%" height="15" fill="rgb(241,78,40)" fg:x="739" fg:w="4"/><text x="60.1851%" y="591.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="60.1784%" y="565" width="0.0811%" height="15" fill="rgb(222,35,25)" fg:x="742" fg:w="1"/><text x="60.4284%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.2595%" y="661" width="0.0811%" height="15" fill="rgb(207,92,16)" fg:x="743" fg:w="1"/><text x="60.5095%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.3406%" y="565" width="0.0811%" height="15" fill="rgb(216,59,51)" fg:x="744" fg:w="1"/><text x="60.5906%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="60.3406%" y="549" width="0.0811%" height="15" fill="rgb(213,80,28)" fg:x="744" fg:w="1"/><text x="60.5906%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.3406%" y="533" width="0.0811%" height="15" fill="rgb(220,93,7)" fg:x="744" fg:w="1"/><text x="60.5906%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.4217%" y="565" width="0.0811%" height="15" fill="rgb(225,24,44)" fg:x="745" fg:w="1"/><text x="60.6717%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="60.2595%" y="709" width="0.3244%" height="15" fill="rgb(243,74,40)" fg:x="743" fg:w="4"/><text x="60.5095%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (4 samples, 0.32%)</title><rect x="60.2595%" y="693" width="0.3244%" height="15" fill="rgb(228,39,7)" fg:x="743" fg:w="4"/><text x="60.5095%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="60.2595%" y="677" width="0.3244%" height="15" fill="rgb(227,79,8)" fg:x="743" fg:w="4"/><text x="60.5095%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="60.3406%" y="661" width="0.2433%" height="15" fill="rgb(236,58,11)" fg:x="744" fg:w="3"/><text x="60.5906%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="60.3406%" y="645" width="0.2433%" height="15" fill="rgb(249,63,35)" fg:x="744" fg:w="3"/><text x="60.5906%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="60.3406%" y="629" width="0.2433%" height="15" fill="rgb(252,114,16)" fg:x="744" fg:w="3"/><text x="60.5906%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (3 samples, 0.24%)</title><rect x="60.3406%" y="613" width="0.2433%" height="15" fill="rgb(254,151,24)" fg:x="744" fg:w="3"/><text x="60.5906%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="60.3406%" y="597" width="0.2433%" height="15" fill="rgb(253,54,39)" fg:x="744" fg:w="3"/><text x="60.5906%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="60.3406%" y="581" width="0.2433%" height="15" fill="rgb(243,25,45)" fg:x="744" fg:w="3"/><text x="60.5906%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="60.5028%" y="565" width="0.0811%" height="15" fill="rgb(234,134,9)" fg:x="746" fg:w="1"/><text x="60.7528%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="60.5028%" y="549" width="0.0811%" height="15" fill="rgb(227,166,31)" fg:x="746" fg:w="1"/><text x="60.7528%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.5028%" y="533" width="0.0811%" height="15" fill="rgb(245,143,41)" fg:x="746" fg:w="1"/><text x="60.7528%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="60.6650%" y="629" width="0.0811%" height="15" fill="rgb(238,181,32)" fg:x="748" fg:w="1"/><text x="60.9150%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="60.6650%" y="613" width="0.0811%" height="15" fill="rgb(224,113,18)" fg:x="748" fg:w="1"/><text x="60.9150%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="60.6650%" y="597" width="0.0811%" height="15" fill="rgb(240,229,28)" fg:x="748" fg:w="1"/><text x="60.9150%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.6650%" y="581" width="0.0811%" height="15" fill="rgb(250,185,3)" fg:x="748" fg:w="1"/><text x="60.9150%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.6650%" y="565" width="0.0811%" height="15" fill="rgb(212,59,25)" fg:x="748" fg:w="1"/><text x="60.9150%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.6650%" y="549" width="0.0811%" height="15" fill="rgb(221,87,20)" fg:x="748" fg:w="1"/><text x="60.9150%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.6650%" y="533" width="0.0811%" height="15" fill="rgb(213,74,28)" fg:x="748" fg:w="1"/><text x="60.9150%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="60.6650%" y="517" width="0.0811%" height="15" fill="rgb(224,132,34)" fg:x="748" fg:w="1"/><text x="60.9150%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.6650%" y="501" width="0.0811%" height="15" fill="rgb(222,101,24)" fg:x="748" fg:w="1"/><text x="60.9150%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.6650%" y="485" width="0.0811%" height="15" fill="rgb(254,142,4)" fg:x="748" fg:w="1"/><text x="60.9150%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.6650%" y="469" width="0.0811%" height="15" fill="rgb(230,229,49)" fg:x="748" fg:w="1"/><text x="60.9150%" y="479.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="60.7461%" y="629" width="0.0811%" height="15" fill="rgb(238,70,47)" fg:x="749" fg:w="1"/><text x="60.9961%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.7461%" y="613" width="0.0811%" height="15" fill="rgb(231,160,17)" fg:x="749" fg:w="1"/><text x="60.9961%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.7461%" y="597" width="0.0811%" height="15" fill="rgb(218,68,53)" fg:x="749" fg:w="1"/><text x="60.9961%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.7461%" y="581" width="0.0811%" height="15" fill="rgb(236,111,10)" fg:x="749" fg:w="1"/><text x="60.9961%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.7461%" y="565" width="0.0811%" height="15" fill="rgb(224,34,41)" fg:x="749" fg:w="1"/><text x="60.9961%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.7461%" y="549" width="0.0811%" height="15" fill="rgb(241,118,19)" fg:x="749" fg:w="1"/><text x="60.9961%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.7461%" y="533" width="0.0811%" height="15" fill="rgb(238,129,25)" fg:x="749" fg:w="1"/><text x="60.9961%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.7461%" y="517" width="0.0811%" height="15" fill="rgb(238,22,31)" fg:x="749" fg:w="1"/><text x="60.9961%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.7461%" y="501" width="0.0811%" height="15" fill="rgb(222,174,48)" fg:x="749" fg:w="1"/><text x="60.9961%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.7461%" y="485" width="0.0811%" height="15" fill="rgb(206,152,40)" fg:x="749" fg:w="1"/><text x="60.9961%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.7461%" y="469" width="0.0811%" height="15" fill="rgb(218,99,54)" fg:x="749" fg:w="1"/><text x="60.9961%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.7461%" y="453" width="0.0811%" height="15" fill="rgb(220,174,26)" fg:x="749" fg:w="1"/><text x="60.9961%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7461%" y="437" width="0.0811%" height="15" fill="rgb(245,116,9)" fg:x="749" fg:w="1"/><text x="60.9961%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.32%)</title><rect x="60.6650%" y="677" width="0.3244%" height="15" fill="rgb(209,72,35)" fg:x="748" fg:w="4"/><text x="60.9150%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="60.6650%" y="661" width="0.3244%" height="15" fill="rgb(226,126,21)" fg:x="748" fg:w="4"/><text x="60.9150%" y="671.50"></text></g><g><title>engine::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="60.6650%" y="645" width="0.3244%" height="15" fill="rgb(227,192,1)" fg:x="748" fg:w="4"/><text x="60.9150%" y="655.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="60.8273%" y="629" width="0.1622%" height="15" fill="rgb(237,180,29)" fg:x="750" fg:w="2"/><text x="61.0773%" y="639.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="60.8273%" y="613" width="0.1622%" height="15" fill="rgb(230,197,35)" fg:x="750" fg:w="2"/><text x="61.0773%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.8273%" y="597" width="0.1622%" height="15" fill="rgb(246,193,31)" fg:x="750" fg:w="2"/><text x="61.0773%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.8273%" y="581" width="0.1622%" height="15" fill="rgb(241,36,4)" fg:x="750" fg:w="2"/><text x="61.0773%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.8273%" y="565" width="0.1622%" height="15" fill="rgb(241,130,17)" fg:x="750" fg:w="2"/><text x="61.0773%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.8273%" y="549" width="0.1622%" height="15" fill="rgb(206,137,32)" fg:x="750" fg:w="2"/><text x="61.0773%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.9084%" y="533" width="0.0811%" height="15" fill="rgb(237,228,51)" fg:x="751" fg:w="1"/><text x="61.1584%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.9084%" y="517" width="0.0811%" height="15" fill="rgb(243,6,42)" fg:x="751" fg:w="1"/><text x="61.1584%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.9084%" y="501" width="0.0811%" height="15" fill="rgb(251,74,28)" fg:x="751" fg:w="1"/><text x="61.1584%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.9084%" y="485" width="0.0811%" height="15" fill="rgb(218,20,49)" fg:x="751" fg:w="1"/><text x="61.1584%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.9084%" y="469" width="0.0811%" height="15" fill="rgb(238,28,14)" fg:x="751" fg:w="1"/><text x="61.1584%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.9084%" y="453" width="0.0811%" height="15" fill="rgb(229,40,46)" fg:x="751" fg:w="1"/><text x="61.1584%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.9084%" y="437" width="0.0811%" height="15" fill="rgb(244,195,20)" fg:x="751" fg:w="1"/><text x="61.1584%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.9084%" y="421" width="0.0811%" height="15" fill="rgb(253,56,35)" fg:x="751" fg:w="1"/><text x="61.1584%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="60.9084%" y="405" width="0.0811%" height="15" fill="rgb(210,149,44)" fg:x="751" fg:w="1"/><text x="61.1584%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.9084%" y="389" width="0.0811%" height="15" fill="rgb(240,135,12)" fg:x="751" fg:w="1"/><text x="61.1584%" y="399.50"></text></g><g><title>libloading::library_filename (2 samples, 0.16%)</title><rect x="60.9895%" y="645" width="0.1622%" height="15" fill="rgb(251,24,50)" fg:x="752" fg:w="2"/><text x="61.2395%" y="655.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="61.0706%" y="629" width="0.0811%" height="15" fill="rgb(243,200,47)" fg:x="753" fg:w="1"/><text x="61.3206%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="61.0706%" y="613" width="0.0811%" height="15" fill="rgb(224,166,26)" fg:x="753" fg:w="1"/><text x="61.3206%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="61.0706%" y="597" width="0.0811%" height="15" fill="rgb(233,0,47)" fg:x="753" fg:w="1"/><text x="61.3206%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="61.0706%" y="581" width="0.0811%" height="15" fill="rgb(253,80,5)" fg:x="753" fg:w="1"/><text x="61.3206%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="61.0706%" y="565" width="0.0811%" height="15" fill="rgb(214,133,25)" fg:x="753" fg:w="1"/><text x="61.3206%" y="575.50"></text></g><g><title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="61.2328%" y="581" width="0.0811%" height="15" fill="rgb(209,27,14)" fg:x="755" fg:w="1"/><text x="61.4828%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (5 samples, 0.41%)</title><rect x="60.9895%" y="677" width="0.4055%" height="15" fill="rgb(219,102,51)" fg:x="752" fg:w="5"/><text x="61.2395%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.41%)</title><rect x="60.9895%" y="661" width="0.4055%" height="15" fill="rgb(237,18,16)" fg:x="752" fg:w="5"/><text x="61.2395%" y="671.50"></text></g><g><title>libloading::os::unix::Library::open (3 samples, 0.24%)</title><rect x="61.1517%" y="645" width="0.2433%" height="15" fill="rgb(241,85,17)" fg:x="754" fg:w="3"/><text x="61.4017%" y="655.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="61.1517%" y="629" width="0.2433%" height="15" fill="rgb(236,90,42)" fg:x="754" fg:w="3"/><text x="61.4017%" y="639.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="61.1517%" y="613" width="0.2433%" height="15" fill="rgb(249,57,21)" fg:x="754" fg:w="3"/><text x="61.4017%" y="623.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="61.1517%" y="597" width="0.2433%" height="15" fill="rgb(243,12,36)" fg:x="754" fg:w="3"/><text x="61.4017%" y="607.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="61.3139%" y="581" width="0.0811%" height="15" fill="rgb(253,128,47)" fg:x="756" fg:w="1"/><text x="61.5639%" y="591.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="61.3139%" y="565" width="0.0811%" height="15" fill="rgb(207,33,20)" fg:x="756" fg:w="1"/><text x="61.5639%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (11 samples, 0.89%)</title><rect x="60.5839%" y="709" width="0.8921%" height="15" fill="rgb(233,215,35)" fg:x="747" fg:w="11"/><text x="60.8339%" y="719.50"></text></g><g><title>engine::session::Session::new (11 samples, 0.89%)</title><rect x="60.5839%" y="693" width="0.8921%" height="15" fill="rgb(249,188,52)" fg:x="747" fg:w="11"/><text x="60.8339%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="61.3950%" y="677" width="0.0811%" height="15" fill="rgb(225,12,32)" fg:x="757" fg:w="1"/><text x="61.6450%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="61.3950%" y="661" width="0.0811%" height="15" fill="rgb(247,98,14)" fg:x="757" fg:w="1"/><text x="61.6450%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="61.3950%" y="645" width="0.0811%" height="15" fill="rgb(247,219,48)" fg:x="757" fg:w="1"/><text x="61.6450%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.3950%" y="629" width="0.0811%" height="15" fill="rgb(253,60,48)" fg:x="757" fg:w="1"/><text x="61.6450%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.3950%" y="613" width="0.0811%" height="15" fill="rgb(245,15,52)" fg:x="757" fg:w="1"/><text x="61.6450%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.3950%" y="597" width="0.0811%" height="15" fill="rgb(220,133,28)" fg:x="757" fg:w="1"/><text x="61.6450%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="61.5572%" y="597" width="0.0811%" height="15" fill="rgb(217,180,4)" fg:x="759" fg:w="1"/><text x="61.8072%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="61.5572%" y="581" width="0.0811%" height="15" fill="rgb(251,24,1)" fg:x="759" fg:w="1"/><text x="61.8072%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="61.7194%" y="581" width="0.0811%" height="15" fill="rgb(212,185,49)" fg:x="761" fg:w="1"/><text x="61.9694%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="61.7194%" y="565" width="0.0811%" height="15" fill="rgb(215,175,22)" fg:x="761" fg:w="1"/><text x="61.9694%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="61.7194%" y="549" width="0.0811%" height="15" fill="rgb(250,205,14)" fg:x="761" fg:w="1"/><text x="61.9694%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="61.7194%" y="533" width="0.0811%" height="15" fill="rgb(225,211,22)" fg:x="761" fg:w="1"/><text x="61.9694%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="61.7194%" y="517" width="0.0811%" height="15" fill="rgb(251,179,42)" fg:x="761" fg:w="1"/><text x="61.9694%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.41%)</title><rect x="61.4761%" y="629" width="0.4055%" height="15" fill="rgb(208,216,51)" fg:x="758" fg:w="5"/><text x="61.7261%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="61.5572%" y="613" width="0.3244%" height="15" fill="rgb(235,36,11)" fg:x="759" fg:w="4"/><text x="61.8072%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="61.6383%" y="597" width="0.2433%" height="15" fill="rgb(213,189,28)" fg:x="760" fg:w="3"/><text x="61.8883%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="61.8005%" y="581" width="0.0811%" height="15" fill="rgb(227,203,42)" fg:x="762" fg:w="1"/><text x="62.0505%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.8816%" y="581" width="0.0811%" height="15" fill="rgb(244,72,36)" fg:x="763" fg:w="1"/><text x="62.1316%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.8816%" y="565" width="0.0811%" height="15" fill="rgb(213,53,17)" fg:x="763" fg:w="1"/><text x="62.1316%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="61.8816%" y="549" width="0.0811%" height="15" fill="rgb(207,167,3)" fg:x="763" fg:w="1"/><text x="62.1316%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="61.9627%" y="581" width="0.0811%" height="15" fill="rgb(216,98,30)" fg:x="764" fg:w="1"/><text x="62.2127%" y="591.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (9 samples, 0.73%)</title><rect x="61.4761%" y="661" width="0.7299%" height="15" fill="rgb(236,123,15)" fg:x="758" fg:w="9"/><text x="61.7261%" y="671.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (9 samples, 0.73%)</title><rect x="61.4761%" y="645" width="0.7299%" height="15" fill="rgb(248,81,50)" fg:x="758" fg:w="9"/><text x="61.7261%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="61.8816%" y="629" width="0.3244%" height="15" fill="rgb(214,120,4)" fg:x="763" fg:w="4"/><text x="62.1316%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="61.8816%" y="613" width="0.3244%" height="15" fill="rgb(208,179,34)" fg:x="763" fg:w="4"/><text x="62.1316%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="61.8816%" y="597" width="0.3244%" height="15" fill="rgb(227,140,7)" fg:x="763" fg:w="4"/><text x="62.1316%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="62.0438%" y="581" width="0.1622%" height="15" fill="rgb(214,22,6)" fg:x="765" fg:w="2"/><text x="62.2938%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="62.1249%" y="565" width="0.0811%" height="15" fill="rgb(207,137,27)" fg:x="766" fg:w="1"/><text x="62.3749%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="62.1249%" y="549" width="0.0811%" height="15" fill="rgb(210,8,46)" fg:x="766" fg:w="1"/><text x="62.3749%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="62.1249%" y="533" width="0.0811%" height="15" fill="rgb(240,16,54)" fg:x="766" fg:w="1"/><text x="62.3749%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="62.1249%" y="517" width="0.0811%" height="15" fill="rgb(211,209,29)" fg:x="766" fg:w="1"/><text x="62.3749%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="62.1249%" y="501" width="0.0811%" height="15" fill="rgb(226,228,24)" fg:x="766" fg:w="1"/><text x="62.3749%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="62.1249%" y="485" width="0.0811%" height="15" fill="rgb(222,84,9)" fg:x="766" fg:w="1"/><text x="62.3749%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="62.1249%" y="469" width="0.0811%" height="15" fill="rgb(234,203,30)" fg:x="766" fg:w="1"/><text x="62.3749%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="62.1249%" y="453" width="0.0811%" height="15" fill="rgb(238,109,14)" fg:x="766" fg:w="1"/><text x="62.3749%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="62.1249%" y="437" width="0.0811%" height="15" fill="rgb(233,206,34)" fg:x="766" fg:w="1"/><text x="62.3749%" y="447.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.81%)</title><rect x="61.4761%" y="693" width="0.8110%" height="15" fill="rgb(220,167,47)" fg:x="758" fg:w="10"/><text x="61.7261%" y="703.50"></text></g><g><title>engine::session::Session::save_entity_changes (10 samples, 0.81%)</title><rect x="61.4761%" y="677" width="0.8110%" height="15" fill="rgb(238,105,10)" fg:x="758" fg:w="10"/><text x="61.7261%" y="687.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="62.2060%" y="661" width="0.0811%" height="15" fill="rgb(213,227,17)" fg:x="767" fg:w="1"/><text x="62.4560%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="62.2060%" y="645" width="0.0811%" height="15" fill="rgb(217,132,38)" fg:x="767" fg:w="1"/><text x="62.4560%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="62.2060%" y="629" width="0.0811%" height="15" fill="rgb(242,146,4)" fg:x="767" fg:w="1"/><text x="62.4560%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="62.2060%" y="613" width="0.0811%" height="15" fill="rgb(212,61,9)" fg:x="767" fg:w="1"/><text x="62.4560%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="62.2060%" y="597" width="0.0811%" height="15" fill="rgb(247,126,22)" fg:x="767" fg:w="1"/><text x="62.4560%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.2060%" y="581" width="0.0811%" height="15" fill="rgb(220,196,2)" fg:x="767" fg:w="1"/><text x="62.4560%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="62.2060%" y="565" width="0.0811%" height="15" fill="rgb(208,46,4)" fg:x="767" fg:w="1"/><text x="62.4560%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="62.2060%" y="549" width="0.0811%" height="15" fill="rgb(252,104,46)" fg:x="767" fg:w="1"/><text x="62.4560%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="62.2060%" y="533" width="0.0811%" height="15" fill="rgb(237,152,48)" fg:x="767" fg:w="1"/><text x="62.4560%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.2060%" y="517" width="0.0811%" height="15" fill="rgb(221,59,37)" fg:x="767" fg:w="1"/><text x="62.4560%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.2060%" y="501" width="0.0811%" height="15" fill="rgb(209,202,51)" fg:x="767" fg:w="1"/><text x="62.4560%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.2060%" y="485" width="0.0811%" height="15" fill="rgb(228,81,30)" fg:x="767" fg:w="1"/><text x="62.4560%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="62.2060%" y="469" width="0.0811%" height="15" fill="rgb(227,42,39)" fg:x="767" fg:w="1"/><text x="62.4560%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="62.2060%" y="453" width="0.0811%" height="15" fill="rgb(221,26,2)" fg:x="767" fg:w="1"/><text x="62.4560%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.2060%" y="437" width="0.0811%" height="15" fill="rgb(254,61,31)" fg:x="767" fg:w="1"/><text x="62.4560%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="62.2060%" y="421" width="0.0811%" height="15" fill="rgb(222,173,38)" fg:x="767" fg:w="1"/><text x="62.4560%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="62.2060%" y="405" width="0.0811%" height="15" fill="rgb(218,50,12)" fg:x="767" fg:w="1"/><text x="62.4560%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="62.2060%" y="389" width="0.0811%" height="15" fill="rgb(223,88,40)" fg:x="767" fg:w="1"/><text x="62.4560%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.2060%" y="373" width="0.0811%" height="15" fill="rgb(237,54,19)" fg:x="767" fg:w="1"/><text x="62.4560%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="62.2060%" y="357" width="0.0811%" height="15" fill="rgb(251,129,25)" fg:x="767" fg:w="1"/><text x="62.4560%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.2060%" y="341" width="0.0811%" height="15" fill="rgb(238,97,19)" fg:x="767" fg:w="1"/><text x="62.4560%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2060%" y="325" width="0.0811%" height="15" fill="rgb(240,169,18)" fg:x="767" fg:w="1"/><text x="62.4560%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.2871%" y="629" width="0.0811%" height="15" fill="rgb(230,187,49)" fg:x="768" fg:w="1"/><text x="62.5371%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.2871%" y="613" width="0.0811%" height="15" fill="rgb(209,44,26)" fg:x="768" fg:w="1"/><text x="62.5371%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.2871%" y="597" width="0.0811%" height="15" fill="rgb(244,0,6)" fg:x="768" fg:w="1"/><text x="62.5371%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.2871%" y="581" width="0.0811%" height="15" fill="rgb(248,18,21)" fg:x="768" fg:w="1"/><text x="62.5371%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.2871%" y="565" width="0.0811%" height="15" fill="rgb(245,180,19)" fg:x="768" fg:w="1"/><text x="62.5371%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.2871%" y="549" width="0.0811%" height="15" fill="rgb(252,118,36)" fg:x="768" fg:w="1"/><text x="62.5371%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.2871%" y="533" width="0.0811%" height="15" fill="rgb(210,224,19)" fg:x="768" fg:w="1"/><text x="62.5371%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.2871%" y="517" width="0.0811%" height="15" fill="rgb(218,30,24)" fg:x="768" fg:w="1"/><text x="62.5371%" y="527.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="62.2871%" y="661" width="0.1622%" height="15" fill="rgb(219,75,50)" fg:x="768" fg:w="2"/><text x="62.5371%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="62.2871%" y="645" width="0.1622%" height="15" fill="rgb(234,72,50)" fg:x="768" fg:w="2"/><text x="62.5371%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="62.3682%" y="629" width="0.0811%" height="15" fill="rgb(219,100,48)" fg:x="769" fg:w="1"/><text x="62.6182%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.3682%" y="613" width="0.0811%" height="15" fill="rgb(253,5,41)" fg:x="769" fg:w="1"/><text x="62.6182%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.3682%" y="597" width="0.0811%" height="15" fill="rgb(247,181,11)" fg:x="769" fg:w="1"/><text x="62.6182%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.3682%" y="581" width="0.0811%" height="15" fill="rgb(222,223,25)" fg:x="769" fg:w="1"/><text x="62.6182%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.3682%" y="565" width="0.0811%" height="15" fill="rgb(214,198,28)" fg:x="769" fg:w="1"/><text x="62.6182%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.3682%" y="549" width="0.0811%" height="15" fill="rgb(230,46,43)" fg:x="769" fg:w="1"/><text x="62.6182%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.3682%" y="533" width="0.0811%" height="15" fill="rgb(233,65,53)" fg:x="769" fg:w="1"/><text x="62.6182%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.3682%" y="517" width="0.0811%" height="15" fill="rgb(221,121,27)" fg:x="769" fg:w="1"/><text x="62.6182%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.3682%" y="501" width="0.0811%" height="15" fill="rgb(247,70,47)" fg:x="769" fg:w="1"/><text x="62.6182%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.3682%" y="485" width="0.0811%" height="15" fill="rgb(228,85,35)" fg:x="769" fg:w="1"/><text x="62.6182%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.3682%" y="469" width="0.0811%" height="15" fill="rgb(209,50,18)" fg:x="769" fg:w="1"/><text x="62.6182%" y="479.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="62.4493%" y="661" width="0.0811%" height="15" fill="rgb(250,19,35)" fg:x="770" fg:w="1"/><text x="62.6993%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="62.4493%" y="645" width="0.0811%" height="15" fill="rgb(253,107,29)" fg:x="770" fg:w="1"/><text x="62.6993%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="62.4493%" y="629" width="0.0811%" height="15" fill="rgb(252,179,29)" fg:x="770" fg:w="1"/><text x="62.6993%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="62.4493%" y="613" width="0.0811%" height="15" fill="rgb(238,194,6)" fg:x="770" fg:w="1"/><text x="62.6993%" y="623.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="62.2871%" y="693" width="0.3244%" height="15" fill="rgb(238,164,29)" fg:x="768" fg:w="4"/><text x="62.5371%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="62.2871%" y="677" width="0.3244%" height="15" fill="rgb(224,25,9)" fg:x="768" fg:w="4"/><text x="62.5371%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="62.5304%" y="661" width="0.0811%" height="15" fill="rgb(244,153,23)" fg:x="771" fg:w="1"/><text x="62.7804%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="62.5304%" y="645" width="0.0811%" height="15" fill="rgb(212,203,14)" fg:x="771" fg:w="1"/><text x="62.7804%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="62.5304%" y="629" width="0.0811%" height="15" fill="rgb(220,164,20)" fg:x="771" fg:w="1"/><text x="62.7804%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5304%" y="613" width="0.0811%" height="15" fill="rgb(222,203,48)" fg:x="771" fg:w="1"/><text x="62.7804%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5304%" y="597" width="0.0811%" height="15" fill="rgb(215,159,22)" fg:x="771" fg:w="1"/><text x="62.7804%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.5304%" y="581" width="0.0811%" height="15" fill="rgb(216,183,47)" fg:x="771" fg:w="1"/><text x="62.7804%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.5304%" y="565" width="0.0811%" height="15" fill="rgb(229,195,25)" fg:x="771" fg:w="1"/><text x="62.7804%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.5304%" y="549" width="0.0811%" height="15" fill="rgb(224,132,51)" fg:x="771" fg:w="1"/><text x="62.7804%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="62.5304%" y="533" width="0.0811%" height="15" fill="rgb(240,63,7)" fg:x="771" fg:w="1"/><text x="62.7804%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="62.5304%" y="517" width="0.0811%" height="15" fill="rgb(249,182,41)" fg:x="771" fg:w="1"/><text x="62.7804%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="62.6115%" y="613" width="0.0811%" height="15" fill="rgb(243,47,26)" fg:x="772" fg:w="1"/><text x="62.8615%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.6115%" y="597" width="0.0811%" height="15" fill="rgb(233,48,2)" fg:x="772" fg:w="1"/><text x="62.8615%" y="607.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="62.6115%" y="693" width="0.1622%" height="15" fill="rgb(244,165,34)" fg:x="772" fg:w="2"/><text x="62.8615%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="62.6115%" y="677" width="0.1622%" height="15" fill="rgb(207,89,7)" fg:x="772" fg:w="2"/><text x="62.8615%" y="687.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="62.6115%" y="661" width="0.1622%" height="15" fill="rgb(244,117,36)" fg:x="772" fg:w="2"/><text x="62.8615%" y="671.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="62.6115%" y="645" width="0.1622%" height="15" fill="rgb(226,144,34)" fg:x="772" fg:w="2"/><text x="62.8615%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="62.6115%" y="629" width="0.1622%" height="15" fill="rgb(213,23,19)" fg:x="772" fg:w="2"/><text x="62.8615%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.6926%" y="613" width="0.0811%" height="15" fill="rgb(217,75,12)" fg:x="773" fg:w="1"/><text x="62.9426%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.6926%" y="597" width="0.0811%" height="15" fill="rgb(224,159,17)" fg:x="773" fg:w="1"/><text x="62.9426%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6926%" y="581" width="0.0811%" height="15" fill="rgb(217,118,1)" fg:x="773" fg:w="1"/><text x="62.9426%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6926%" y="565" width="0.0811%" height="15" fill="rgb(232,180,48)" fg:x="773" fg:w="1"/><text x="62.9426%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6926%" y="549" width="0.0811%" height="15" fill="rgb(230,27,33)" fg:x="773" fg:w="1"/><text x="62.9426%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6926%" y="533" width="0.0811%" height="15" fill="rgb(205,31,21)" fg:x="773" fg:w="1"/><text x="62.9426%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6926%" y="517" width="0.0811%" height="15" fill="rgb(253,59,4)" fg:x="773" fg:w="1"/><text x="62.9426%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="62.7737%" y="677" width="0.0811%" height="15" fill="rgb(224,201,9)" fg:x="774" fg:w="1"/><text x="63.0237%" y="687.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="62.7737%" y="661" width="0.0811%" height="15" fill="rgb(229,206,30)" fg:x="774" fg:w="1"/><text x="63.0237%" y="671.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="62.7737%" y="645" width="0.0811%" height="15" fill="rgb(212,67,47)" fg:x="774" fg:w="1"/><text x="63.0237%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.7737%" y="629" width="0.0811%" height="15" fill="rgb(211,96,50)" fg:x="774" fg:w="1"/><text x="63.0237%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.7737%" y="613" width="0.0811%" height="15" fill="rgb(252,114,18)" fg:x="774" fg:w="1"/><text x="63.0237%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.7737%" y="597" width="0.0811%" height="15" fill="rgb(223,58,37)" fg:x="774" fg:w="1"/><text x="63.0237%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7737%" y="581" width="0.0811%" height="15" fill="rgb(237,70,4)" fg:x="774" fg:w="1"/><text x="63.0237%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7737%" y="565" width="0.0811%" height="15" fill="rgb(244,85,46)" fg:x="774" fg:w="1"/><text x="63.0237%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7737%" y="549" width="0.0811%" height="15" fill="rgb(223,39,52)" fg:x="774" fg:w="1"/><text x="63.0237%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7737%" y="533" width="0.0811%" height="15" fill="rgb(218,200,14)" fg:x="774" fg:w="1"/><text x="63.0237%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7737%" y="517" width="0.0811%" height="15" fill="rgb(208,171,16)" fg:x="774" fg:w="1"/><text x="63.0237%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.8548%" y="565" width="0.0811%" height="15" fill="rgb(234,200,18)" fg:x="775" fg:w="1"/><text x="63.1048%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.8548%" y="549" width="0.0811%" height="15" fill="rgb(228,45,11)" fg:x="775" fg:w="1"/><text x="63.1048%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.8548%" y="533" width="0.0811%" height="15" fill="rgb(237,182,11)" fg:x="775" fg:w="1"/><text x="63.1048%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.8548%" y="517" width="0.0811%" height="15" fill="rgb(241,175,49)" fg:x="775" fg:w="1"/><text x="63.1048%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.8548%" y="501" width="0.0811%" height="15" fill="rgb(247,38,35)" fg:x="775" fg:w="1"/><text x="63.1048%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.8548%" y="485" width="0.0811%" height="15" fill="rgb(228,39,49)" fg:x="775" fg:w="1"/><text x="63.1048%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.8548%" y="469" width="0.0811%" height="15" fill="rgb(226,101,26)" fg:x="775" fg:w="1"/><text x="63.1048%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.8548%" y="453" width="0.0811%" height="15" fill="rgb(206,141,19)" fg:x="775" fg:w="1"/><text x="63.1048%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.9359%" y="469" width="0.0811%" height="15" fill="rgb(211,200,13)" fg:x="776" fg:w="1"/><text x="63.1859%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.9359%" y="453" width="0.0811%" height="15" fill="rgb(241,121,6)" fg:x="776" fg:w="1"/><text x="63.1859%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.9359%" y="437" width="0.0811%" height="15" fill="rgb(234,221,29)" fg:x="776" fg:w="1"/><text x="63.1859%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.9359%" y="421" width="0.0811%" height="15" fill="rgb(229,136,5)" fg:x="776" fg:w="1"/><text x="63.1859%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.9359%" y="405" width="0.0811%" height="15" fill="rgb(238,36,11)" fg:x="776" fg:w="1"/><text x="63.1859%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.9359%" y="389" width="0.0811%" height="15" fill="rgb(251,55,41)" fg:x="776" fg:w="1"/><text x="63.1859%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.9359%" y="373" width="0.0811%" height="15" fill="rgb(242,34,40)" fg:x="776" fg:w="1"/><text x="63.1859%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.9359%" y="357" width="0.0811%" height="15" fill="rgb(215,42,17)" fg:x="776" fg:w="1"/><text x="63.1859%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.9359%" y="341" width="0.0811%" height="15" fill="rgb(207,44,46)" fg:x="776" fg:w="1"/><text x="63.1859%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.9359%" y="325" width="0.0811%" height="15" fill="rgb(211,206,28)" fg:x="776" fg:w="1"/><text x="63.1859%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.9359%" y="309" width="0.0811%" height="15" fill="rgb(237,167,16)" fg:x="776" fg:w="1"/><text x="63.1859%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.9359%" y="293" width="0.0811%" height="15" fill="rgb(233,66,6)" fg:x="776" fg:w="1"/><text x="63.1859%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.9359%" y="277" width="0.0811%" height="15" fill="rgb(246,123,29)" fg:x="776" fg:w="1"/><text x="63.1859%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.9359%" y="261" width="0.0811%" height="15" fill="rgb(209,62,40)" fg:x="776" fg:w="1"/><text x="63.1859%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.9359%" y="501" width="0.1622%" height="15" fill="rgb(218,4,25)" fg:x="776" fg:w="2"/><text x="63.1859%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.9359%" y="485" width="0.1622%" height="15" fill="rgb(253,91,49)" fg:x="776" fg:w="2"/><text x="63.1859%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.0170%" y="469" width="0.0811%" height="15" fill="rgb(228,155,29)" fg:x="777" fg:w="1"/><text x="63.2670%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="62.9359%" y="517" width="0.2433%" height="15" fill="rgb(243,57,37)" fg:x="776" fg:w="3"/><text x="63.1859%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.0981%" y="501" width="0.0811%" height="15" fill="rgb(244,167,17)" fg:x="778" fg:w="1"/><text x="63.3481%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.41%)</title><rect x="62.8548%" y="677" width="0.4055%" height="15" fill="rgb(207,181,38)" fg:x="775" fg:w="5"/><text x="63.1048%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="62.8548%" y="661" width="0.4055%" height="15" fill="rgb(211,8,23)" fg:x="775" fg:w="5"/><text x="63.1048%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.41%)</title><rect x="62.8548%" y="645" width="0.4055%" height="15" fill="rgb(235,11,44)" fg:x="775" fg:w="5"/><text x="63.1048%" y="655.50"></text></g><g><title>plugins_core::build::Build::leads_to (5 samples, 0.41%)</title><rect x="62.8548%" y="629" width="0.4055%" height="15" fill="rgb(248,18,52)" fg:x="775" fg:w="5"/><text x="63.1048%" y="639.50"></text></g><g><title>plugins_core::tools::leads_to (5 samples, 0.41%)</title><rect x="62.8548%" y="613" width="0.4055%" height="15" fill="rgb(208,4,7)" fg:x="775" fg:w="5"/><text x="63.1048%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (5 samples, 0.41%)</title><rect x="62.8548%" y="597" width="0.4055%" height="15" fill="rgb(240,17,39)" fg:x="775" fg:w="5"/><text x="63.1048%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (5 samples, 0.41%)</title><rect x="62.8548%" y="581" width="0.4055%" height="15" fill="rgb(207,170,3)" fg:x="775" fg:w="5"/><text x="63.1048%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="62.9359%" y="565" width="0.3244%" height="15" fill="rgb(236,100,52)" fg:x="776" fg:w="4"/><text x="63.1859%" y="575.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="62.9359%" y="549" width="0.3244%" height="15" fill="rgb(246,78,51)" fg:x="776" fg:w="4"/><text x="63.1859%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="62.9359%" y="533" width="0.3244%" height="15" fill="rgb(211,17,15)" fg:x="776" fg:w="4"/><text x="63.1859%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.1792%" y="517" width="0.0811%" height="15" fill="rgb(209,59,46)" fg:x="779" fg:w="1"/><text x="63.4292%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.1792%" y="501" width="0.0811%" height="15" fill="rgb(210,92,25)" fg:x="779" fg:w="1"/><text x="63.4292%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.1792%" y="485" width="0.0811%" height="15" fill="rgb(238,174,52)" fg:x="779" fg:w="1"/><text x="63.4292%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.1792%" y="469" width="0.0811%" height="15" fill="rgb(230,73,7)" fg:x="779" fg:w="1"/><text x="63.4292%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="63.1792%" y="453" width="0.0811%" height="15" fill="rgb(243,124,40)" fg:x="779" fg:w="1"/><text x="63.4292%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.1792%" y="437" width="0.0811%" height="15" fill="rgb(244,170,11)" fg:x="779" fg:w="1"/><text x="63.4292%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.1792%" y="421" width="0.0811%" height="15" fill="rgb(207,114,54)" fg:x="779" fg:w="1"/><text x="63.4292%" y="431.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="63.2603%" y="645" width="0.0811%" height="15" fill="rgb(205,42,20)" fg:x="780" fg:w="1"/><text x="63.5103%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.2603%" y="629" width="0.0811%" height="15" fill="rgb(230,30,28)" fg:x="780" fg:w="1"/><text x="63.5103%" y="639.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="63.3414%" y="645" width="0.0811%" height="15" fill="rgb(205,73,54)" fg:x="781" fg:w="1"/><text x="63.5914%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="63.3414%" y="629" width="0.0811%" height="15" fill="rgb(254,227,23)" fg:x="781" fg:w="1"/><text x="63.5914%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.3414%" y="613" width="0.0811%" height="15" fill="rgb(228,202,34)" fg:x="781" fg:w="1"/><text x="63.5914%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.3414%" y="597" width="0.0811%" height="15" fill="rgb(222,225,37)" fg:x="781" fg:w="1"/><text x="63.5914%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.3414%" y="581" width="0.0811%" height="15" fill="rgb(221,14,54)" fg:x="781" fg:w="1"/><text x="63.5914%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.3414%" y="565" width="0.0811%" height="15" fill="rgb(254,102,2)" fg:x="781" fg:w="1"/><text x="63.5914%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.3414%" y="549" width="0.0811%" height="15" fill="rgb(232,104,17)" fg:x="781" fg:w="1"/><text x="63.5914%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.3414%" y="533" width="0.0811%" height="15" fill="rgb(250,220,14)" fg:x="781" fg:w="1"/><text x="63.5914%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="63.5848%" y="565" width="0.0811%" height="15" fill="rgb(241,158,9)" fg:x="784" fg:w="1"/><text x="63.8348%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.5848%" y="549" width="0.0811%" height="15" fill="rgb(246,9,43)" fg:x="784" fg:w="1"/><text x="63.8348%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.5848%" y="533" width="0.0811%" height="15" fill="rgb(206,73,33)" fg:x="784" fg:w="1"/><text x="63.8348%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.5848%" y="517" width="0.0811%" height="15" fill="rgb(222,79,8)" fg:x="784" fg:w="1"/><text x="63.8348%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.5848%" y="501" width="0.0811%" height="15" fill="rgb(234,8,54)" fg:x="784" fg:w="1"/><text x="63.8348%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.6659%" y="517" width="0.0811%" height="15" fill="rgb(209,134,38)" fg:x="785" fg:w="1"/><text x="63.9159%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="63.6659%" y="533" width="0.1622%" height="15" fill="rgb(230,127,29)" fg:x="785" fg:w="2"/><text x="63.9159%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.7470%" y="517" width="0.0811%" height="15" fill="rgb(242,44,41)" fg:x="786" fg:w="1"/><text x="63.9970%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.7470%" y="501" width="0.0811%" height="15" fill="rgb(222,56,43)" fg:x="786" fg:w="1"/><text x="63.9970%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="63.6659%" y="565" width="0.2433%" height="15" fill="rgb(238,39,47)" fg:x="785" fg:w="3"/><text x="63.9159%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="63.6659%" y="549" width="0.2433%" height="15" fill="rgb(226,79,43)" fg:x="785" fg:w="3"/><text x="63.9159%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.8281%" y="533" width="0.0811%" height="15" fill="rgb(242,105,53)" fg:x="787" fg:w="1"/><text x="64.0781%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="63.8281%" y="517" width="0.0811%" height="15" fill="rgb(251,132,46)" fg:x="787" fg:w="1"/><text x="64.0781%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="63.5036%" y="581" width="0.4866%" height="15" fill="rgb(231,77,14)" fg:x="783" fg:w="6"/><text x="63.7536%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.9092%" y="565" width="0.0811%" height="15" fill="rgb(240,135,9)" fg:x="788" fg:w="1"/><text x="64.1592%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.73%)</title><rect x="63.4225%" y="613" width="0.7299%" height="15" fill="rgb(248,109,14)" fg:x="782" fg:w="9"/><text x="63.6725%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="63.4225%" y="597" width="0.7299%" height="15" fill="rgb(227,146,52)" fg:x="782" fg:w="9"/><text x="63.6725%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="63.9903%" y="581" width="0.1622%" height="15" fill="rgb(232,54,3)" fg:x="789" fg:w="2"/><text x="64.2403%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="64.0714%" y="565" width="0.0811%" height="15" fill="rgb(229,201,43)" fg:x="790" fg:w="1"/><text x="64.3214%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="64.0714%" y="549" width="0.0811%" height="15" fill="rgb(252,161,33)" fg:x="790" fg:w="1"/><text x="64.3214%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="64.1525%" y="565" width="0.0811%" height="15" fill="rgb(226,146,40)" fg:x="791" fg:w="1"/><text x="64.4025%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.1525%" y="549" width="0.0811%" height="15" fill="rgb(219,47,25)" fg:x="791" fg:w="1"/><text x="64.4025%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.1525%" y="533" width="0.0811%" height="15" fill="rgb(250,135,13)" fg:x="791" fg:w="1"/><text x="64.4025%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2336%" y="485" width="0.0811%" height="15" fill="rgb(219,229,18)" fg:x="792" fg:w="1"/><text x="64.4836%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2336%" y="469" width="0.0811%" height="15" fill="rgb(217,152,27)" fg:x="792" fg:w="1"/><text x="64.4836%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2336%" y="453" width="0.0811%" height="15" fill="rgb(225,71,47)" fg:x="792" fg:w="1"/><text x="64.4836%" y="463.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.14%)</title><rect x="63.2603%" y="677" width="1.1354%" height="15" fill="rgb(220,139,14)" fg:x="780" fg:w="14"/><text x="63.5103%" y="687.50"></text></g><g><title>engine::session::Session::save_entity_changes (14 samples, 1.14%)</title><rect x="63.2603%" y="661" width="1.1354%" height="15" fill="rgb(247,54,32)" fg:x="780" fg:w="14"/><text x="63.5103%" y="671.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (12 samples, 0.97%)</title><rect x="63.4225%" y="645" width="0.9732%" height="15" fill="rgb(252,131,39)" fg:x="782" fg:w="12"/><text x="63.6725%" y="655.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (12 samples, 0.97%)</title><rect x="63.4225%" y="629" width="0.9732%" height="15" fill="rgb(210,108,39)" fg:x="782" fg:w="12"/><text x="63.6725%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="64.1525%" y="613" width="0.2433%" height="15" fill="rgb(205,23,29)" fg:x="791" fg:w="3"/><text x="64.4025%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="64.1525%" y="597" width="0.2433%" height="15" fill="rgb(246,139,46)" fg:x="791" fg:w="3"/><text x="64.4025%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="64.1525%" y="581" width="0.2433%" height="15" fill="rgb(250,81,26)" fg:x="791" fg:w="3"/><text x="64.4025%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="64.2336%" y="565" width="0.1622%" height="15" fill="rgb(214,104,7)" fg:x="792" fg:w="2"/><text x="64.4836%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="64.2336%" y="549" width="0.1622%" height="15" fill="rgb(233,189,8)" fg:x="792" fg:w="2"/><text x="64.4836%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="64.2336%" y="533" width="0.1622%" height="15" fill="rgb(228,141,17)" fg:x="792" fg:w="2"/><text x="64.4836%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="64.2336%" y="517" width="0.1622%" height="15" fill="rgb(247,157,1)" fg:x="792" fg:w="2"/><text x="64.4836%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="64.2336%" y="501" width="0.1622%" height="15" fill="rgb(249,225,5)" fg:x="792" fg:w="2"/><text x="64.4836%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="64.3147%" y="485" width="0.0811%" height="15" fill="rgb(242,55,13)" fg:x="793" fg:w="1"/><text x="64.5647%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="64.3147%" y="469" width="0.0811%" height="15" fill="rgb(230,49,50)" fg:x="793" fg:w="1"/><text x="64.5647%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="64.3147%" y="453" width="0.0811%" height="15" fill="rgb(241,111,38)" fg:x="793" fg:w="1"/><text x="64.5647%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.3147%" y="437" width="0.0811%" height="15" fill="rgb(252,155,4)" fg:x="793" fg:w="1"/><text x="64.5647%" y="447.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="64.3958%" y="677" width="0.0811%" height="15" fill="rgb(212,69,32)" fg:x="794" fg:w="1"/><text x="64.6458%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.4769%" y="565" width="0.0811%" height="15" fill="rgb(243,107,47)" fg:x="795" fg:w="1"/><text x="64.7269%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="64.4769%" y="549" width="0.0811%" height="15" fill="rgb(247,130,12)" fg:x="795" fg:w="1"/><text x="64.7269%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.4769%" y="533" width="0.0811%" height="15" fill="rgb(233,74,16)" fg:x="795" fg:w="1"/><text x="64.7269%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.4769%" y="517" width="0.0811%" height="15" fill="rgb(208,58,18)" fg:x="795" fg:w="1"/><text x="64.7269%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.4769%" y="501" width="0.0811%" height="15" fill="rgb(242,225,1)" fg:x="795" fg:w="1"/><text x="64.7269%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.4769%" y="485" width="0.0811%" height="15" fill="rgb(249,39,40)" fg:x="795" fg:w="1"/><text x="64.7269%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.4769%" y="469" width="0.0811%" height="15" fill="rgb(207,72,44)" fg:x="795" fg:w="1"/><text x="64.7269%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="64.4769%" y="453" width="0.0811%" height="15" fill="rgb(215,193,12)" fg:x="795" fg:w="1"/><text x="64.7269%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="64.4769%" y="661" width="0.1622%" height="15" fill="rgb(248,41,39)" fg:x="795" fg:w="2"/><text x="64.7269%" y="671.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="64.4769%" y="645" width="0.1622%" height="15" fill="rgb(253,85,4)" fg:x="795" fg:w="2"/><text x="64.7269%" y="655.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="64.4769%" y="629" width="0.1622%" height="15" fill="rgb(243,70,31)" fg:x="795" fg:w="2"/><text x="64.7269%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="64.4769%" y="613" width="0.1622%" height="15" fill="rgb(253,195,26)" fg:x="795" fg:w="2"/><text x="64.7269%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="64.4769%" y="597" width="0.1622%" height="15" fill="rgb(243,42,11)" fg:x="795" fg:w="2"/><text x="64.7269%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="64.4769%" y="581" width="0.1622%" height="15" fill="rgb(239,66,17)" fg:x="795" fg:w="2"/><text x="64.7269%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.5580%" y="565" width="0.0811%" height="15" fill="rgb(217,132,21)" fg:x="796" fg:w="1"/><text x="64.8080%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.5580%" y="549" width="0.0811%" height="15" fill="rgb(252,202,21)" fg:x="796" fg:w="1"/><text x="64.8080%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.5580%" y="533" width="0.0811%" height="15" fill="rgb(233,98,36)" fg:x="796" fg:w="1"/><text x="64.8080%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.5580%" y="517" width="0.0811%" height="15" fill="rgb(216,153,54)" fg:x="796" fg:w="1"/><text x="64.8080%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.5580%" y="501" width="0.0811%" height="15" fill="rgb(250,99,7)" fg:x="796" fg:w="1"/><text x="64.8080%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.5580%" y="485" width="0.0811%" height="15" fill="rgb(207,56,50)" fg:x="796" fg:w="1"/><text x="64.8080%" y="495.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="64.6391%" y="645" width="0.0811%" height="15" fill="rgb(244,61,34)" fg:x="797" fg:w="1"/><text x="64.8891%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="64.6391%" y="629" width="0.0811%" height="15" fill="rgb(241,50,38)" fg:x="797" fg:w="1"/><text x="64.8891%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="64.6391%" y="613" width="0.0811%" height="15" fill="rgb(212,166,30)" fg:x="797" fg:w="1"/><text x="64.8891%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.6391%" y="597" width="0.0811%" height="15" fill="rgb(249,127,32)" fg:x="797" fg:w="1"/><text x="64.8891%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.6391%" y="581" width="0.0811%" height="15" fill="rgb(209,103,0)" fg:x="797" fg:w="1"/><text x="64.8891%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6391%" y="565" width="0.0811%" height="15" fill="rgb(238,209,51)" fg:x="797" fg:w="1"/><text x="64.8891%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6391%" y="549" width="0.0811%" height="15" fill="rgb(237,56,23)" fg:x="797" fg:w="1"/><text x="64.8891%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6391%" y="533" width="0.0811%" height="15" fill="rgb(215,153,46)" fg:x="797" fg:w="1"/><text x="64.8891%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6391%" y="517" width="0.0811%" height="15" fill="rgb(224,49,31)" fg:x="797" fg:w="1"/><text x="64.8891%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6391%" y="501" width="0.0811%" height="15" fill="rgb(250,18,42)" fg:x="797" fg:w="1"/><text x="64.8891%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.6391%" y="485" width="0.0811%" height="15" fill="rgb(215,176,39)" fg:x="797" fg:w="1"/><text x="64.8891%" y="495.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="64.4769%" y="677" width="0.3244%" height="15" fill="rgb(223,77,29)" fg:x="795" fg:w="4"/><text x="64.7269%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="64.6391%" y="661" width="0.1622%" height="15" fill="rgb(234,94,52)" fg:x="797" fg:w="2"/><text x="64.8891%" y="671.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="64.7202%" y="645" width="0.0811%" height="15" fill="rgb(220,154,50)" fg:x="798" fg:w="1"/><text x="64.9702%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="64.7202%" y="629" width="0.0811%" height="15" fill="rgb(212,11,10)" fg:x="798" fg:w="1"/><text x="64.9702%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="64.7202%" y="613" width="0.0811%" height="15" fill="rgb(205,166,19)" fg:x="798" fg:w="1"/><text x="64.9702%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.7202%" y="597" width="0.0811%" height="15" fill="rgb(244,198,16)" fg:x="798" fg:w="1"/><text x="64.9702%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.7202%" y="581" width="0.0811%" height="15" fill="rgb(219,69,12)" fg:x="798" fg:w="1"/><text x="64.9702%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.7202%" y="565" width="0.0811%" height="15" fill="rgb(245,30,7)" fg:x="798" fg:w="1"/><text x="64.9702%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7202%" y="549" width="0.0811%" height="15" fill="rgb(218,221,48)" fg:x="798" fg:w="1"/><text x="64.9702%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.7202%" y="533" width="0.0811%" height="15" fill="rgb(216,66,15)" fg:x="798" fg:w="1"/><text x="64.9702%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.7202%" y="517" width="0.0811%" height="15" fill="rgb(226,122,50)" fg:x="798" fg:w="1"/><text x="64.9702%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.7202%" y="501" width="0.0811%" height="15" fill="rgb(239,156,16)" fg:x="798" fg:w="1"/><text x="64.9702%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.7202%" y="485" width="0.0811%" height="15" fill="rgb(224,27,38)" fg:x="798" fg:w="1"/><text x="64.9702%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.7202%" y="469" width="0.0811%" height="15" fill="rgb(224,39,27)" fg:x="798" fg:w="1"/><text x="64.9702%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.7202%" y="453" width="0.0811%" height="15" fill="rgb(215,92,29)" fg:x="798" fg:w="1"/><text x="64.9702%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.7202%" y="437" width="0.0811%" height="15" fill="rgb(207,159,16)" fg:x="798" fg:w="1"/><text x="64.9702%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.7202%" y="421" width="0.0811%" height="15" fill="rgb(238,163,47)" fg:x="798" fg:w="1"/><text x="64.9702%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.7202%" y="405" width="0.0811%" height="15" fill="rgb(219,91,49)" fg:x="798" fg:w="1"/><text x="64.9702%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.7202%" y="389" width="0.0811%" height="15" fill="rgb(227,167,31)" fg:x="798" fg:w="1"/><text x="64.9702%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.7202%" y="373" width="0.0811%" height="15" fill="rgb(234,80,54)" fg:x="798" fg:w="1"/><text x="64.9702%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7202%" y="357" width="0.0811%" height="15" fill="rgb(212,114,2)" fg:x="798" fg:w="1"/><text x="64.9702%" y="367.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="64.8013%" y="629" width="0.0811%" height="15" fill="rgb(234,50,24)" fg:x="799" fg:w="1"/><text x="65.0513%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="64.8013%" y="613" width="0.0811%" height="15" fill="rgb(221,68,8)" fg:x="799" fg:w="1"/><text x="65.0513%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="64.8013%" y="597" width="0.0811%" height="15" fill="rgb(254,180,31)" fg:x="799" fg:w="1"/><text x="65.0513%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="64.8013%" y="581" width="0.0811%" height="15" fill="rgb(247,130,50)" fg:x="799" fg:w="1"/><text x="65.0513%" y="591.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="64.8013%" y="565" width="0.0811%" height="15" fill="rgb(211,109,4)" fg:x="799" fg:w="1"/><text x="65.0513%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.8013%" y="549" width="0.0811%" height="15" fill="rgb(238,50,21)" fg:x="799" fg:w="1"/><text x="65.0513%" y="559.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="64.8013%" y="533" width="0.0811%" height="15" fill="rgb(225,57,45)" fg:x="799" fg:w="1"/><text x="65.0513%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.8013%" y="517" width="0.0811%" height="15" fill="rgb(209,196,50)" fg:x="799" fg:w="1"/><text x="65.0513%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="64.8013%" y="501" width="0.0811%" height="15" fill="rgb(242,140,13)" fg:x="799" fg:w="1"/><text x="65.0513%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="64.8013%" y="661" width="0.1622%" height="15" fill="rgb(217,111,7)" fg:x="799" fg:w="2"/><text x="65.0513%" y="671.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="64.8013%" y="645" width="0.1622%" height="15" fill="rgb(253,193,51)" fg:x="799" fg:w="2"/><text x="65.0513%" y="655.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="64.8824%" y="629" width="0.0811%" height="15" fill="rgb(252,70,29)" fg:x="800" fg:w="1"/><text x="65.1324%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.8824%" y="613" width="0.0811%" height="15" fill="rgb(232,127,12)" fg:x="800" fg:w="1"/><text x="65.1324%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.9635%" y="613" width="0.0811%" height="15" fill="rgb(211,180,21)" fg:x="801" fg:w="1"/><text x="65.2135%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.9635%" y="597" width="0.0811%" height="15" fill="rgb(229,72,13)" fg:x="801" fg:w="1"/><text x="65.2135%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.9635%" y="581" width="0.0811%" height="15" fill="rgb(240,211,49)" fg:x="801" fg:w="1"/><text x="65.2135%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9635%" y="565" width="0.0811%" height="15" fill="rgb(219,149,40)" fg:x="801" fg:w="1"/><text x="65.2135%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9635%" y="549" width="0.0811%" height="15" fill="rgb(210,127,46)" fg:x="801" fg:w="1"/><text x="65.2135%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9635%" y="533" width="0.0811%" height="15" fill="rgb(220,106,7)" fg:x="801" fg:w="1"/><text x="65.2135%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9635%" y="517" width="0.0811%" height="15" fill="rgb(249,31,22)" fg:x="801" fg:w="1"/><text x="65.2135%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.9635%" y="501" width="0.0811%" height="15" fill="rgb(253,1,49)" fg:x="801" fg:w="1"/><text x="65.2135%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.9635%" y="485" width="0.0811%" height="15" fill="rgb(227,144,33)" fg:x="801" fg:w="1"/><text x="65.2135%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.9635%" y="469" width="0.0811%" height="15" fill="rgb(249,163,44)" fg:x="801" fg:w="1"/><text x="65.2135%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.9635%" y="453" width="0.0811%" height="15" fill="rgb(234,15,39)" fg:x="801" fg:w="1"/><text x="65.2135%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.9635%" y="437" width="0.0811%" height="15" fill="rgb(207,66,16)" fg:x="801" fg:w="1"/><text x="65.2135%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.9635%" y="421" width="0.0811%" height="15" fill="rgb(233,112,24)" fg:x="801" fg:w="1"/><text x="65.2135%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.9635%" y="405" width="0.0811%" height="15" fill="rgb(230,90,22)" fg:x="801" fg:w="1"/><text x="65.2135%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.9635%" y="389" width="0.0811%" height="15" fill="rgb(229,61,13)" fg:x="801" fg:w="1"/><text x="65.2135%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.9635%" y="373" width="0.0811%" height="15" fill="rgb(225,57,24)" fg:x="801" fg:w="1"/><text x="65.2135%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.9635%" y="357" width="0.0811%" height="15" fill="rgb(208,169,48)" fg:x="801" fg:w="1"/><text x="65.2135%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.9635%" y="341" width="0.0811%" height="15" fill="rgb(244,218,51)" fg:x="801" fg:w="1"/><text x="65.2135%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.9635%" y="325" width="0.0811%" height="15" fill="rgb(214,148,10)" fg:x="801" fg:w="1"/><text x="65.2135%" y="335.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="65.0446%" y="597" width="0.0811%" height="15" fill="rgb(225,174,27)" fg:x="802" fg:w="1"/><text x="65.2946%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="64.9635%" y="645" width="0.2433%" height="15" fill="rgb(230,96,26)" fg:x="801" fg:w="3"/><text x="65.2135%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="64.9635%" y="629" width="0.2433%" height="15" fill="rgb(232,10,30)" fg:x="801" fg:w="3"/><text x="65.2135%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="65.0446%" y="613" width="0.1622%" height="15" fill="rgb(222,8,50)" fg:x="802" fg:w="2"/><text x="65.2946%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.1257%" y="597" width="0.0811%" height="15" fill="rgb(213,81,27)" fg:x="803" fg:w="1"/><text x="65.3757%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.1257%" y="581" width="0.0811%" height="15" fill="rgb(245,50,10)" fg:x="803" fg:w="1"/><text x="65.3757%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.1257%" y="565" width="0.0811%" height="15" fill="rgb(216,100,18)" fg:x="803" fg:w="1"/><text x="65.3757%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.1257%" y="549" width="0.0811%" height="15" fill="rgb(236,147,54)" fg:x="803" fg:w="1"/><text x="65.3757%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.1257%" y="533" width="0.0811%" height="15" fill="rgb(205,143,26)" fg:x="803" fg:w="1"/><text x="65.3757%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.1257%" y="517" width="0.0811%" height="15" fill="rgb(236,26,9)" fg:x="803" fg:w="1"/><text x="65.3757%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.1257%" y="501" width="0.0811%" height="15" fill="rgb(221,165,53)" fg:x="803" fg:w="1"/><text x="65.3757%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="65.2068%" y="597" width="0.0811%" height="15" fill="rgb(214,110,17)" fg:x="804" fg:w="1"/><text x="65.4568%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.2068%" y="581" width="0.0811%" height="15" fill="rgb(237,197,12)" fg:x="804" fg:w="1"/><text x="65.4568%" y="591.50"></text></g><g><title>plugins_core::build::Build::occupying (7 samples, 0.57%)</title><rect x="64.8013%" y="677" width="0.5677%" height="15" fill="rgb(205,84,17)" fg:x="799" fg:w="7"/><text x="65.0513%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.41%)</title><rect x="64.9635%" y="661" width="0.4055%" height="15" fill="rgb(237,18,45)" fg:x="801" fg:w="5"/><text x="65.2135%" y="671.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="65.2068%" y="645" width="0.1622%" height="15" fill="rgb(221,87,14)" fg:x="804" fg:w="2"/><text x="65.4568%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="65.2068%" y="629" width="0.1622%" height="15" fill="rgb(238,186,15)" fg:x="804" fg:w="2"/><text x="65.4568%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="65.2068%" y="613" width="0.1622%" height="15" fill="rgb(208,115,11)" fg:x="804" fg:w="2"/><text x="65.4568%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="65.2879%" y="597" width="0.0811%" height="15" fill="rgb(254,175,0)" fg:x="805" fg:w="1"/><text x="65.5379%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.2879%" y="581" width="0.0811%" height="15" fill="rgb(227,24,42)" fg:x="805" fg:w="1"/><text x="65.5379%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.2879%" y="565" width="0.0811%" height="15" fill="rgb(223,211,37)" fg:x="805" fg:w="1"/><text x="65.5379%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.2879%" y="549" width="0.0811%" height="15" fill="rgb(235,49,27)" fg:x="805" fg:w="1"/><text x="65.5379%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="65.2879%" y="533" width="0.0811%" height="15" fill="rgb(254,97,51)" fg:x="805" fg:w="1"/><text x="65.5379%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.2879%" y="517" width="0.0811%" height="15" fill="rgb(249,51,40)" fg:x="805" fg:w="1"/><text x="65.5379%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.2879%" y="501" width="0.0811%" height="15" fill="rgb(210,128,45)" fg:x="805" fg:w="1"/><text x="65.5379%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (33 samples, 2.68%)</title><rect x="62.7737%" y="693" width="2.6764%" height="15" fill="rgb(224,137,50)" fg:x="774" fg:w="33"/><text x="63.0237%" y="703.50">pl..</text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="65.3690%" y="677" width="0.0811%" height="15" fill="rgb(242,15,9)" fg:x="806" fg:w="1"/><text x="65.6190%" y="687.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="65.3690%" y="661" width="0.0811%" height="15" fill="rgb(233,187,41)" fg:x="806" fg:w="1"/><text x="65.6190%" y="671.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="65.3690%" y="645" width="0.0811%" height="15" fill="rgb(227,2,29)" fg:x="806" fg:w="1"/><text x="65.6190%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.3690%" y="629" width="0.0811%" height="15" fill="rgb(222,70,3)" fg:x="806" fg:w="1"/><text x="65.6190%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.3690%" y="613" width="0.0811%" height="15" fill="rgb(213,11,42)" fg:x="806" fg:w="1"/><text x="65.6190%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="65.3690%" y="597" width="0.0811%" height="15" fill="rgb(225,150,9)" fg:x="806" fg:w="1"/><text x="65.6190%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3690%" y="581" width="0.0811%" height="15" fill="rgb(230,162,45)" fg:x="806" fg:w="1"/><text x="65.6190%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="65.4501%" y="645" width="0.0811%" height="15" fill="rgb(222,14,52)" fg:x="807" fg:w="1"/><text x="65.7001%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="65.4501%" y="629" width="0.0811%" height="15" fill="rgb(254,198,14)" fg:x="807" fg:w="1"/><text x="65.7001%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="65.4501%" y="613" width="0.0811%" height="15" fill="rgb(220,217,30)" fg:x="807" fg:w="1"/><text x="65.7001%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="65.4501%" y="597" width="0.0811%" height="15" fill="rgb(215,146,41)" fg:x="807" fg:w="1"/><text x="65.7001%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="65.4501%" y="581" width="0.0811%" height="15" fill="rgb(217,27,36)" fg:x="807" fg:w="1"/><text x="65.7001%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="65.4501%" y="565" width="0.0811%" height="15" fill="rgb(219,218,39)" fg:x="807" fg:w="1"/><text x="65.7001%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="65.4501%" y="549" width="0.0811%" height="15" fill="rgb(219,4,42)" fg:x="807" fg:w="1"/><text x="65.7001%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="65.4501%" y="533" width="0.0811%" height="15" fill="rgb(249,119,36)" fg:x="807" fg:w="1"/><text x="65.7001%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="65.4501%" y="517" width="0.0811%" height="15" fill="rgb(209,23,33)" fg:x="807" fg:w="1"/><text x="65.7001%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="65.4501%" y="501" width="0.0811%" height="15" fill="rgb(211,10,0)" fg:x="807" fg:w="1"/><text x="65.7001%" y="511.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="65.4501%" y="485" width="0.0811%" height="15" fill="rgb(208,99,37)" fg:x="807" fg:w="1"/><text x="65.7001%" y="495.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.5312%" y="597" width="0.0811%" height="15" fill="rgb(213,132,31)" fg:x="808" fg:w="1"/><text x="65.7812%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.5312%" y="581" width="0.0811%" height="15" fill="rgb(243,129,40)" fg:x="808" fg:w="1"/><text x="65.7812%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.5312%" y="565" width="0.0811%" height="15" fill="rgb(210,66,33)" fg:x="808" fg:w="1"/><text x="65.7812%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.5312%" y="549" width="0.0811%" height="15" fill="rgb(209,189,4)" fg:x="808" fg:w="1"/><text x="65.7812%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.5312%" y="533" width="0.0811%" height="15" fill="rgb(214,107,37)" fg:x="808" fg:w="1"/><text x="65.7812%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.5312%" y="517" width="0.0811%" height="15" fill="rgb(245,88,54)" fg:x="808" fg:w="1"/><text x="65.7812%" y="527.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="65.5312%" y="629" width="0.1622%" height="15" fill="rgb(205,146,20)" fg:x="808" fg:w="2"/><text x="65.7812%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="65.5312%" y="613" width="0.1622%" height="15" fill="rgb(220,161,25)" fg:x="808" fg:w="2"/><text x="65.7812%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="65.6123%" y="597" width="0.0811%" height="15" fill="rgb(215,152,15)" fg:x="809" fg:w="1"/><text x="65.8623%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="65.6123%" y="581" width="0.0811%" height="15" fill="rgb(233,192,44)" fg:x="809" fg:w="1"/><text x="65.8623%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.6123%" y="565" width="0.0811%" height="15" fill="rgb(240,170,46)" fg:x="809" fg:w="1"/><text x="65.8623%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="65.6123%" y="549" width="0.0811%" height="15" fill="rgb(207,104,33)" fg:x="809" fg:w="1"/><text x="65.8623%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.6123%" y="533" width="0.0811%" height="15" fill="rgb(219,21,39)" fg:x="809" fg:w="1"/><text x="65.8623%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.6123%" y="517" width="0.0811%" height="15" fill="rgb(214,133,29)" fg:x="809" fg:w="1"/><text x="65.8623%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.6123%" y="501" width="0.0811%" height="15" fill="rgb(226,93,6)" fg:x="809" fg:w="1"/><text x="65.8623%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.6123%" y="485" width="0.0811%" height="15" fill="rgb(252,222,34)" fg:x="809" fg:w="1"/><text x="65.8623%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="65.4501%" y="661" width="0.3244%" height="15" fill="rgb(252,92,48)" fg:x="807" fg:w="4"/><text x="65.7001%" y="671.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="65.5312%" y="645" width="0.2433%" height="15" fill="rgb(245,223,24)" fg:x="808" fg:w="3"/><text x="65.7812%" y="655.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="65.6934%" y="629" width="0.0811%" height="15" fill="rgb(205,176,3)" fg:x="810" fg:w="1"/><text x="65.9434%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.6934%" y="613" width="0.0811%" height="15" fill="rgb(235,151,15)" fg:x="810" fg:w="1"/><text x="65.9434%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="65.7745%" y="629" width="0.0811%" height="15" fill="rgb(237,209,11)" fg:x="811" fg:w="1"/><text x="66.0245%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="65.7745%" y="613" width="0.0811%" height="15" fill="rgb(243,227,24)" fg:x="811" fg:w="1"/><text x="66.0245%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.7745%" y="597" width="0.0811%" height="15" fill="rgb(239,193,16)" fg:x="811" fg:w="1"/><text x="66.0245%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.7745%" y="581" width="0.0811%" height="15" fill="rgb(231,27,9)" fg:x="811" fg:w="1"/><text x="66.0245%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="65.7745%" y="565" width="0.0811%" height="15" fill="rgb(219,169,10)" fg:x="811" fg:w="1"/><text x="66.0245%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (55 samples, 4.46%)</title><rect x="61.4761%" y="709" width="4.4607%" height="15" fill="rgb(244,229,43)" fg:x="758" fg:w="55"/><text x="61.7261%" y="719.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::make (6 samples, 0.49%)</title><rect x="65.4501%" y="693" width="0.4866%" height="15" fill="rgb(254,38,20)" fg:x="807" fg:w="6"/><text x="65.7001%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.49%)</title><rect x="65.4501%" y="677" width="0.4866%" height="15" fill="rgb(250,47,30)" fg:x="807" fg:w="6"/><text x="65.7001%" y="687.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="65.7745%" y="661" width="0.1622%" height="15" fill="rgb(224,124,36)" fg:x="811" fg:w="2"/><text x="66.0245%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="65.7745%" y="645" width="0.1622%" height="15" fill="rgb(246,68,51)" fg:x="811" fg:w="2"/><text x="66.0245%" y="655.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="65.8556%" y="629" width="0.0811%" height="15" fill="rgb(253,43,49)" fg:x="812" fg:w="1"/><text x="66.1056%" y="639.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="66.0178%" y="645" width="0.0811%" height="15" fill="rgb(219,54,36)" fg:x="814" fg:w="1"/><text x="66.2678%" y="655.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="66.0178%" y="677" width="0.1622%" height="15" fill="rgb(227,133,34)" fg:x="814" fg:w="2"/><text x="66.2678%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="66.0178%" y="661" width="0.1622%" height="15" fill="rgb(247,227,15)" fg:x="814" fg:w="2"/><text x="66.2678%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.0989%" y="645" width="0.0811%" height="15" fill="rgb(229,96,14)" fg:x="815" fg:w="1"/><text x="66.3489%" y="655.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.0989%" y="629" width="0.0811%" height="15" fill="rgb(220,79,17)" fg:x="815" fg:w="1"/><text x="66.3489%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0989%" y="613" width="0.0811%" height="15" fill="rgb(205,131,53)" fg:x="815" fg:w="1"/><text x="66.3489%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.0989%" y="597" width="0.0811%" height="15" fill="rgb(209,50,29)" fg:x="815" fg:w="1"/><text x="66.3489%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.0989%" y="581" width="0.0811%" height="15" fill="rgb(245,86,46)" fg:x="815" fg:w="1"/><text x="66.3489%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.0989%" y="565" width="0.0811%" height="15" fill="rgb(235,66,46)" fg:x="815" fg:w="1"/><text x="66.3489%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.0989%" y="549" width="0.0811%" height="15" fill="rgb(232,148,31)" fg:x="815" fg:w="1"/><text x="66.3489%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.0989%" y="533" width="0.0811%" height="15" fill="rgb(217,149,8)" fg:x="815" fg:w="1"/><text x="66.3489%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="66.0989%" y="517" width="0.0811%" height="15" fill="rgb(209,183,11)" fg:x="815" fg:w="1"/><text x="66.3489%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="66.0989%" y="501" width="0.0811%" height="15" fill="rgb(208,55,20)" fg:x="815" fg:w="1"/><text x="66.3489%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="66.1800%" y="629" width="0.0811%" height="15" fill="rgb(218,39,14)" fg:x="816" fg:w="1"/><text x="66.4300%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.1800%" y="613" width="0.0811%" height="15" fill="rgb(216,169,33)" fg:x="816" fg:w="1"/><text x="66.4300%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="66.2612%" y="613" width="0.2433%" height="15" fill="rgb(233,80,24)" fg:x="817" fg:w="3"/><text x="66.5112%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="66.2612%" y="597" width="0.2433%" height="15" fill="rgb(213,179,31)" fg:x="817" fg:w="3"/><text x="66.5112%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="66.2612%" y="581" width="0.2433%" height="15" fill="rgb(209,19,5)" fg:x="817" fg:w="3"/><text x="66.5112%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="66.2612%" y="565" width="0.2433%" height="15" fill="rgb(219,18,35)" fg:x="817" fg:w="3"/><text x="66.5112%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="66.3423%" y="549" width="0.1622%" height="15" fill="rgb(209,169,16)" fg:x="818" fg:w="2"/><text x="66.5923%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="66.3423%" y="533" width="0.1622%" height="15" fill="rgb(245,90,51)" fg:x="818" fg:w="2"/><text x="66.5923%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="66.3423%" y="517" width="0.1622%" height="15" fill="rgb(220,99,45)" fg:x="818" fg:w="2"/><text x="66.5923%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.4234%" y="501" width="0.0811%" height="15" fill="rgb(249,89,25)" fg:x="819" fg:w="1"/><text x="66.6734%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.4234%" y="485" width="0.0811%" height="15" fill="rgb(239,193,0)" fg:x="819" fg:w="1"/><text x="66.6734%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.4234%" y="469" width="0.0811%" height="15" fill="rgb(231,126,1)" fg:x="819" fg:w="1"/><text x="66.6734%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.41%)</title><rect x="66.1800%" y="645" width="0.4055%" height="15" fill="rgb(243,166,3)" fg:x="816" fg:w="5"/><text x="66.4300%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="66.2612%" y="629" width="0.3244%" height="15" fill="rgb(223,22,34)" fg:x="817" fg:w="4"/><text x="66.5112%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.5045%" y="613" width="0.0811%" height="15" fill="rgb(251,52,51)" fg:x="820" fg:w="1"/><text x="66.7545%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.5045%" y="597" width="0.0811%" height="15" fill="rgb(221,165,28)" fg:x="820" fg:w="1"/><text x="66.7545%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.5856%" y="645" width="0.0811%" height="15" fill="rgb(218,121,47)" fg:x="821" fg:w="1"/><text x="66.8356%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.5856%" y="629" width="0.0811%" height="15" fill="rgb(209,120,9)" fg:x="821" fg:w="1"/><text x="66.8356%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.5856%" y="613" width="0.0811%" height="15" fill="rgb(236,68,12)" fg:x="821" fg:w="1"/><text x="66.8356%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6667%" y="581" width="0.0811%" height="15" fill="rgb(225,194,26)" fg:x="822" fg:w="1"/><text x="66.9167%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="66.6667%" y="629" width="0.1622%" height="15" fill="rgb(231,84,39)" fg:x="822" fg:w="2"/><text x="66.9167%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.6667%" y="613" width="0.1622%" height="15" fill="rgb(210,11,45)" fg:x="822" fg:w="2"/><text x="66.9167%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="66.6667%" y="597" width="0.1622%" height="15" fill="rgb(224,54,52)" fg:x="822" fg:w="2"/><text x="66.9167%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.7478%" y="581" width="0.0811%" height="15" fill="rgb(238,102,14)" fg:x="823" fg:w="1"/><text x="66.9978%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.7478%" y="565" width="0.0811%" height="15" fill="rgb(243,160,52)" fg:x="823" fg:w="1"/><text x="66.9978%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.7478%" y="549" width="0.0811%" height="15" fill="rgb(216,114,19)" fg:x="823" fg:w="1"/><text x="66.9978%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.8289%" y="517" width="0.0811%" height="15" fill="rgb(244,166,37)" fg:x="824" fg:w="1"/><text x="67.0789%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="66.9100%" y="517" width="0.0811%" height="15" fill="rgb(246,29,44)" fg:x="825" fg:w="1"/><text x="67.1600%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="66.9100%" y="501" width="0.0811%" height="15" fill="rgb(215,56,53)" fg:x="825" fg:w="1"/><text x="67.1600%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="66.8289%" y="549" width="0.2433%" height="15" fill="rgb(217,60,2)" fg:x="824" fg:w="3"/><text x="67.0789%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="66.8289%" y="533" width="0.2433%" height="15" fill="rgb(207,26,24)" fg:x="824" fg:w="3"/><text x="67.0789%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.9911%" y="517" width="0.0811%" height="15" fill="rgb(252,210,15)" fg:x="826" fg:w="1"/><text x="67.2411%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.0722%" y="517" width="0.0811%" height="15" fill="rgb(253,209,26)" fg:x="827" fg:w="1"/><text x="67.3222%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1533%" y="453" width="0.0811%" height="15" fill="rgb(238,170,14)" fg:x="828" fg:w="1"/><text x="67.4033%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="67.1533%" y="485" width="0.1622%" height="15" fill="rgb(216,178,15)" fg:x="828" fg:w="2"/><text x="67.4033%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="67.1533%" y="469" width="0.1622%" height="15" fill="rgb(250,197,2)" fg:x="828" fg:w="2"/><text x="67.4033%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="67.2344%" y="453" width="0.0811%" height="15" fill="rgb(212,70,42)" fg:x="829" fg:w="1"/><text x="67.4844%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.3155%" y="437" width="0.0811%" height="15" fill="rgb(227,213,9)" fg:x="830" fg:w="1"/><text x="67.5655%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.3155%" y="421" width="0.0811%" height="15" fill="rgb(245,99,25)" fg:x="830" fg:w="1"/><text x="67.5655%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.3155%" y="405" width="0.0811%" height="15" fill="rgb(250,82,29)" fg:x="830" fg:w="1"/><text x="67.5655%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3155%" y="389" width="0.0811%" height="15" fill="rgb(241,226,54)" fg:x="830" fg:w="1"/><text x="67.5655%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="67.0722%" y="533" width="0.4055%" height="15" fill="rgb(221,99,41)" fg:x="827" fg:w="5"/><text x="67.3222%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="67.1533%" y="517" width="0.3244%" height="15" fill="rgb(213,90,21)" fg:x="828" fg:w="4"/><text x="67.4033%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="67.1533%" y="501" width="0.3244%" height="15" fill="rgb(205,208,24)" fg:x="828" fg:w="4"/><text x="67.4033%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="67.3155%" y="485" width="0.1622%" height="15" fill="rgb(246,31,12)" fg:x="830" fg:w="2"/><text x="67.5655%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="67.3155%" y="469" width="0.1622%" height="15" fill="rgb(213,154,6)" fg:x="830" fg:w="2"/><text x="67.5655%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="67.3155%" y="453" width="0.1622%" height="15" fill="rgb(222,163,29)" fg:x="830" fg:w="2"/><text x="67.5655%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3966%" y="437" width="0.0811%" height="15" fill="rgb(227,201,8)" fg:x="831" fg:w="1"/><text x="67.6466%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.73%)</title><rect x="66.8289%" y="565" width="0.7299%" height="15" fill="rgb(233,9,32)" fg:x="824" fg:w="9"/><text x="67.0789%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="67.0722%" y="549" width="0.4866%" height="15" fill="rgb(217,54,24)" fg:x="827" fg:w="6"/><text x="67.3222%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4777%" y="533" width="0.0811%" height="15" fill="rgb(235,192,0)" fg:x="832" fg:w="1"/><text x="67.7277%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.81%)</title><rect x="66.8289%" y="581" width="0.8110%" height="15" fill="rgb(235,45,9)" fg:x="824" fg:w="10"/><text x="67.0789%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="67.5588%" y="565" width="0.0811%" height="15" fill="rgb(246,42,40)" fg:x="833" fg:w="1"/><text x="67.8088%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.5588%" y="549" width="0.0811%" height="15" fill="rgb(248,111,24)" fg:x="833" fg:w="1"/><text x="67.8088%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.89%)</title><rect x="66.8289%" y="629" width="0.8921%" height="15" fill="rgb(249,65,22)" fg:x="824" fg:w="11"/><text x="67.0789%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.89%)</title><rect x="66.8289%" y="613" width="0.8921%" height="15" fill="rgb(238,111,51)" fg:x="824" fg:w="11"/><text x="67.0789%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.89%)</title><rect x="66.8289%" y="597" width="0.8921%" height="15" fill="rgb(250,118,22)" fg:x="824" fg:w="11"/><text x="67.0789%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6399%" y="581" width="0.0811%" height="15" fill="rgb(234,84,26)" fg:x="834" fg:w="1"/><text x="67.8899%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.7210%" y="565" width="0.0811%" height="15" fill="rgb(243,172,12)" fg:x="835" fg:w="1"/><text x="67.9710%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.7210%" y="549" width="0.0811%" height="15" fill="rgb(236,150,49)" fg:x="835" fg:w="1"/><text x="67.9710%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.7210%" y="533" width="0.0811%" height="15" fill="rgb(225,197,26)" fg:x="835" fg:w="1"/><text x="67.9710%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.7210%" y="517" width="0.0811%" height="15" fill="rgb(214,17,42)" fg:x="835" fg:w="1"/><text x="67.9710%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.7210%" y="501" width="0.0811%" height="15" fill="rgb(224,165,40)" fg:x="835" fg:w="1"/><text x="67.9710%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.8021%" y="565" width="0.0811%" height="15" fill="rgb(246,100,4)" fg:x="836" fg:w="1"/><text x="68.0521%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.8021%" y="549" width="0.0811%" height="15" fill="rgb(222,103,0)" fg:x="836" fg:w="1"/><text x="68.0521%" y="559.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (22 samples, 1.78%)</title><rect x="66.1800%" y="677" width="1.7843%" height="15" fill="rgb(227,189,26)" fg:x="816" fg:w="22"/><text x="66.4300%" y="687.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (22 samples, 1.78%)</title><rect x="66.1800%" y="661" width="1.7843%" height="15" fill="rgb(214,202,17)" fg:x="816" fg:w="22"/><text x="66.4300%" y="671.50">e..</text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.30%)</title><rect x="66.6667%" y="645" width="1.2976%" height="15" fill="rgb(229,111,3)" fg:x="822" fg:w="16"/><text x="66.9167%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="67.7210%" y="629" width="0.2433%" height="15" fill="rgb(229,172,15)" fg:x="835" fg:w="3"/><text x="67.9710%" y="639.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="67.7210%" y="613" width="0.2433%" height="15" fill="rgb(230,224,35)" fg:x="835" fg:w="3"/><text x="67.9710%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="67.7210%" y="597" width="0.2433%" height="15" fill="rgb(251,141,6)" fg:x="835" fg:w="3"/><text x="67.9710%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="67.7210%" y="581" width="0.2433%" height="15" fill="rgb(225,208,6)" fg:x="835" fg:w="3"/><text x="67.9710%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.8832%" y="565" width="0.0811%" height="15" fill="rgb(246,181,16)" fg:x="837" fg:w="1"/><text x="68.1332%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="67.9643%" y="645" width="0.0811%" height="15" fill="rgb(227,129,36)" fg:x="838" fg:w="1"/><text x="68.2143%" y="655.50"></text></g><g><title>engine::session::Session::close (27 samples, 2.19%)</title><rect x="65.9367%" y="709" width="2.1898%" height="15" fill="rgb(248,117,24)" fg:x="813" fg:w="27"/><text x="66.1867%" y="719.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (26 samples, 2.11%)</title><rect x="66.0178%" y="693" width="2.1087%" height="15" fill="rgb(214,185,35)" fg:x="814" fg:w="26"/><text x="66.2678%" y="703.50">e..</text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="67.9643%" y="677" width="0.1622%" height="15" fill="rgb(236,150,34)" fg:x="838" fg:w="2"/><text x="68.2143%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="67.9643%" y="661" width="0.1622%" height="15" fill="rgb(243,228,27)" fg:x="838" fg:w="2"/><text x="68.2143%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="68.0454%" y="645" width="0.0811%" height="15" fill="rgb(245,77,44)" fg:x="839" fg:w="1"/><text x="68.2954%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="68.0454%" y="629" width="0.0811%" height="15" fill="rgb(235,214,42)" fg:x="839" fg:w="1"/><text x="68.2954%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="68.0454%" y="613" width="0.0811%" height="15" fill="rgb(221,74,3)" fg:x="839" fg:w="1"/><text x="68.2954%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.0454%" y="597" width="0.0811%" height="15" fill="rgb(206,121,29)" fg:x="839" fg:w="1"/><text x="68.2954%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="68.0454%" y="581" width="0.0811%" height="15" fill="rgb(249,131,53)" fg:x="839" fg:w="1"/><text x="68.2954%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="68.0454%" y="565" width="0.0811%" height="15" fill="rgb(236,170,29)" fg:x="839" fg:w="1"/><text x="68.2954%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="68.0454%" y="549" width="0.0811%" height="15" fill="rgb(247,96,15)" fg:x="839" fg:w="1"/><text x="68.2954%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.0454%" y="533" width="0.0811%" height="15" fill="rgb(211,210,7)" fg:x="839" fg:w="1"/><text x="68.2954%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="68.0454%" y="517" width="0.0811%" height="15" fill="rgb(240,88,50)" fg:x="839" fg:w="1"/><text x="68.2954%" y="527.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="68.0454%" y="501" width="0.0811%" height="15" fill="rgb(209,229,26)" fg:x="839" fg:w="1"/><text x="68.2954%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="68.0454%" y="485" width="0.0811%" height="15" fill="rgb(210,68,23)" fg:x="839" fg:w="1"/><text x="68.2954%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.0454%" y="469" width="0.0811%" height="15" fill="rgb(229,180,13)" fg:x="839" fg:w="1"/><text x="68.2954%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.1265%" y="565" width="0.1622%" height="15" fill="rgb(236,53,44)" fg:x="840" fg:w="2"/><text x="68.3765%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.2076%" y="549" width="0.0811%" height="15" fill="rgb(244,214,29)" fg:x="841" fg:w="1"/><text x="68.4576%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.2076%" y="533" width="0.0811%" height="15" fill="rgb(220,75,29)" fg:x="841" fg:w="1"/><text x="68.4576%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.2076%" y="517" width="0.0811%" height="15" fill="rgb(214,183,37)" fg:x="841" fg:w="1"/><text x="68.4576%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (1 samples, 0.08%)</title><rect x="68.2887%" y="565" width="0.0811%" height="15" fill="rgb(239,117,29)" fg:x="842" fg:w="1"/><text x="68.5387%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (1 samples, 0.08%)</title><rect x="68.2887%" y="549" width="0.0811%" height="15" fill="rgb(237,171,35)" fg:x="842" fg:w="1"/><text x="68.5387%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2887%" y="533" width="0.0811%" height="15" fill="rgb(229,178,53)" fg:x="842" fg:w="1"/><text x="68.5387%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2887%" y="517" width="0.0811%" height="15" fill="rgb(210,102,19)" fg:x="842" fg:w="1"/><text x="68.5387%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2887%" y="501" width="0.0811%" height="15" fill="rgb(235,127,22)" fg:x="842" fg:w="1"/><text x="68.5387%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.2887%" y="485" width="0.0811%" height="15" fill="rgb(244,31,31)" fg:x="842" fg:w="1"/><text x="68.5387%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.2887%" y="469" width="0.0811%" height="15" fill="rgb(231,43,21)" fg:x="842" fg:w="1"/><text x="68.5387%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.2887%" y="453" width="0.0811%" height="15" fill="rgb(217,131,35)" fg:x="842" fg:w="1"/><text x="68.5387%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.2887%" y="437" width="0.0811%" height="15" fill="rgb(221,149,4)" fg:x="842" fg:w="1"/><text x="68.5387%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.2887%" y="421" width="0.0811%" height="15" fill="rgb(232,170,28)" fg:x="842" fg:w="1"/><text x="68.5387%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="68.2887%" y="405" width="0.0811%" height="15" fill="rgb(238,56,10)" fg:x="842" fg:w="1"/><text x="68.5387%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.2887%" y="389" width="0.0811%" height="15" fill="rgb(235,196,14)" fg:x="842" fg:w="1"/><text x="68.5387%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="68.3698%" y="453" width="0.0811%" height="15" fill="rgb(216,45,48)" fg:x="843" fg:w="1"/><text x="68.6198%" y="463.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="68.3698%" y="437" width="0.0811%" height="15" fill="rgb(238,213,17)" fg:x="843" fg:w="1"/><text x="68.6198%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="68.3698%" y="421" width="0.0811%" height="15" fill="rgb(212,13,2)" fg:x="843" fg:w="1"/><text x="68.6198%" y="431.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.3698%" y="405" width="0.0811%" height="15" fill="rgb(240,114,20)" fg:x="843" fg:w="1"/><text x="68.6198%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.3698%" y="389" width="0.0811%" height="15" fill="rgb(228,41,40)" fg:x="843" fg:w="1"/><text x="68.6198%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.3698%" y="373" width="0.0811%" height="15" fill="rgb(244,132,35)" fg:x="843" fg:w="1"/><text x="68.6198%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.3698%" y="357" width="0.0811%" height="15" fill="rgb(253,189,4)" fg:x="843" fg:w="1"/><text x="68.6198%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.4509%" y="453" width="0.0811%" height="15" fill="rgb(224,37,19)" fg:x="844" fg:w="1"/><text x="68.7009%" y="463.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.4509%" y="437" width="0.0811%" height="15" fill="rgb(235,223,18)" fg:x="844" fg:w="1"/><text x="68.7009%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.4509%" y="421" width="0.0811%" height="15" fill="rgb(235,163,25)" fg:x="844" fg:w="1"/><text x="68.7009%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.4509%" y="405" width="0.0811%" height="15" fill="rgb(217,145,28)" fg:x="844" fg:w="1"/><text x="68.7009%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4509%" y="389" width="0.0811%" height="15" fill="rgb(223,223,32)" fg:x="844" fg:w="1"/><text x="68.7009%" y="399.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.4509%" y="373" width="0.0811%" height="15" fill="rgb(227,189,39)" fg:x="844" fg:w="1"/><text x="68.7009%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4509%" y="357" width="0.0811%" height="15" fill="rgb(248,10,22)" fg:x="844" fg:w="1"/><text x="68.7009%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.4509%" y="341" width="0.0811%" height="15" fill="rgb(248,46,39)" fg:x="844" fg:w="1"/><text x="68.7009%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4509%" y="325" width="0.0811%" height="15" fill="rgb(248,113,48)" fg:x="844" fg:w="1"/><text x="68.7009%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.4509%" y="309" width="0.0811%" height="15" fill="rgb(245,16,25)" fg:x="844" fg:w="1"/><text x="68.7009%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4509%" y="293" width="0.0811%" height="15" fill="rgb(249,152,16)" fg:x="844" fg:w="1"/><text x="68.7009%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.4509%" y="277" width="0.0811%" height="15" fill="rgb(250,16,1)" fg:x="844" fg:w="1"/><text x="68.7009%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5320%" y="325" width="0.0811%" height="15" fill="rgb(249,138,3)" fg:x="845" fg:w="1"/><text x="68.7820%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5320%" y="309" width="0.0811%" height="15" fill="rgb(227,71,41)" fg:x="845" fg:w="1"/><text x="68.7820%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5320%" y="293" width="0.0811%" height="15" fill="rgb(209,184,23)" fg:x="845" fg:w="1"/><text x="68.7820%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="68.5320%" y="437" width="0.2433%" height="15" fill="rgb(223,215,31)" fg:x="845" fg:w="3"/><text x="68.7820%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="68.5320%" y="421" width="0.2433%" height="15" fill="rgb(210,146,28)" fg:x="845" fg:w="3"/><text x="68.7820%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.5320%" y="405" width="0.2433%" height="15" fill="rgb(209,183,41)" fg:x="845" fg:w="3"/><text x="68.7820%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.5320%" y="389" width="0.2433%" height="15" fill="rgb(209,224,45)" fg:x="845" fg:w="3"/><text x="68.7820%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="68.5320%" y="373" width="0.2433%" height="15" fill="rgb(224,209,51)" fg:x="845" fg:w="3"/><text x="68.7820%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.5320%" y="357" width="0.2433%" height="15" fill="rgb(223,17,39)" fg:x="845" fg:w="3"/><text x="68.7820%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="68.5320%" y="341" width="0.2433%" height="15" fill="rgb(234,204,37)" fg:x="845" fg:w="3"/><text x="68.7820%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="68.6131%" y="325" width="0.1622%" height="15" fill="rgb(236,120,5)" fg:x="846" fg:w="2"/><text x="68.8631%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.6131%" y="309" width="0.1622%" height="15" fill="rgb(248,97,27)" fg:x="846" fg:w="2"/><text x="68.8631%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="68.6131%" y="293" width="0.1622%" height="15" fill="rgb(240,66,17)" fg:x="846" fg:w="2"/><text x="68.8631%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.6942%" y="277" width="0.0811%" height="15" fill="rgb(210,79,3)" fg:x="847" fg:w="1"/><text x="68.9442%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.6942%" y="261" width="0.0811%" height="15" fill="rgb(214,176,27)" fg:x="847" fg:w="1"/><text x="68.9442%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6942%" y="245" width="0.0811%" height="15" fill="rgb(235,185,3)" fg:x="847" fg:w="1"/><text x="68.9442%" y="255.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (6 samples, 0.49%)</title><rect x="68.3698%" y="549" width="0.4866%" height="15" fill="rgb(227,24,12)" fg:x="843" fg:w="6"/><text x="68.6198%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.49%)</title><rect x="68.3698%" y="533" width="0.4866%" height="15" fill="rgb(252,169,48)" fg:x="843" fg:w="6"/><text x="68.6198%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="68.3698%" y="517" width="0.4866%" height="15" fill="rgb(212,65,1)" fg:x="843" fg:w="6"/><text x="68.6198%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (6 samples, 0.49%)</title><rect x="68.3698%" y="501" width="0.4866%" height="15" fill="rgb(242,39,24)" fg:x="843" fg:w="6"/><text x="68.6198%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.49%)</title><rect x="68.3698%" y="485" width="0.4866%" height="15" fill="rgb(249,32,23)" fg:x="843" fg:w="6"/><text x="68.6198%" y="495.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="68.3698%" y="469" width="0.4866%" height="15" fill="rgb(251,195,23)" fg:x="843" fg:w="6"/><text x="68.6198%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="68.5320%" y="453" width="0.3244%" height="15" fill="rgb(236,174,8)" fg:x="845" fg:w="4"/><text x="68.7820%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="68.7753%" y="437" width="0.0811%" height="15" fill="rgb(220,197,8)" fg:x="848" fg:w="1"/><text x="69.0253%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7753%" y="421" width="0.0811%" height="15" fill="rgb(240,108,37)" fg:x="848" fg:w="1"/><text x="69.0253%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.7753%" y="405" width="0.0811%" height="15" fill="rgb(232,176,24)" fg:x="848" fg:w="1"/><text x="69.0253%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7753%" y="389" width="0.0811%" height="15" fill="rgb(243,35,29)" fg:x="848" fg:w="1"/><text x="69.0253%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.7753%" y="373" width="0.0811%" height="15" fill="rgb(210,37,18)" fg:x="848" fg:w="1"/><text x="69.0253%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7753%" y="357" width="0.0811%" height="15" fill="rgb(224,184,40)" fg:x="848" fg:w="1"/><text x="69.0253%" y="367.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (7 samples, 0.57%)</title><rect x="68.3698%" y="565" width="0.5677%" height="15" fill="rgb(236,39,29)" fg:x="843" fg:w="7"/><text x="68.6198%" y="575.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="68.8564%" y="549" width="0.0811%" height="15" fill="rgb(232,48,39)" fg:x="849" fg:w="1"/><text x="69.1064%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="68.8564%" y="533" width="0.0811%" height="15" fill="rgb(236,34,42)" fg:x="849" fg:w="1"/><text x="69.1064%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="68.8564%" y="517" width="0.0811%" height="15" fill="rgb(243,106,37)" fg:x="849" fg:w="1"/><text x="69.1064%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.8564%" y="501" width="0.0811%" height="15" fill="rgb(218,96,6)" fg:x="849" fg:w="1"/><text x="69.1064%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.8564%" y="485" width="0.0811%" height="15" fill="rgb(235,130,12)" fg:x="849" fg:w="1"/><text x="69.1064%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.8564%" y="469" width="0.0811%" height="15" fill="rgb(231,95,0)" fg:x="849" fg:w="1"/><text x="69.1064%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.8564%" y="453" width="0.0811%" height="15" fill="rgb(228,12,23)" fg:x="849" fg:w="1"/><text x="69.1064%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.8564%" y="437" width="0.0811%" height="15" fill="rgb(216,12,1)" fg:x="849" fg:w="1"/><text x="69.1064%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.8564%" y="421" width="0.0811%" height="15" fill="rgb(219,59,3)" fg:x="849" fg:w="1"/><text x="69.1064%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.8564%" y="405" width="0.0811%" height="15" fill="rgb(215,208,46)" fg:x="849" fg:w="1"/><text x="69.1064%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.8564%" y="389" width="0.0811%" height="15" fill="rgb(254,224,29)" fg:x="849" fg:w="1"/><text x="69.1064%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.8564%" y="373" width="0.0811%" height="15" fill="rgb(232,14,29)" fg:x="849" fg:w="1"/><text x="69.1064%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.8564%" y="357" width="0.0811%" height="15" fill="rgb(208,45,52)" fg:x="849" fg:w="1"/><text x="69.1064%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.8564%" y="341" width="0.0811%" height="15" fill="rgb(234,191,28)" fg:x="849" fg:w="1"/><text x="69.1064%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8564%" y="325" width="0.0811%" height="15" fill="rgb(244,67,43)" fg:x="849" fg:w="1"/><text x="69.1064%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="69.0187%" y="437" width="0.0811%" height="15" fill="rgb(236,189,24)" fg:x="851" fg:w="1"/><text x="69.2687%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.0187%" y="421" width="0.0811%" height="15" fill="rgb(239,214,33)" fg:x="851" fg:w="1"/><text x="69.2687%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="69.0998%" y="389" width="0.0811%" height="15" fill="rgb(226,176,41)" fg:x="852" fg:w="1"/><text x="69.3498%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.0998%" y="373" width="0.0811%" height="15" fill="rgb(248,47,8)" fg:x="852" fg:w="1"/><text x="69.3498%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="69.0998%" y="405" width="0.1622%" height="15" fill="rgb(218,81,44)" fg:x="852" fg:w="2"/><text x="69.3498%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.1809%" y="389" width="0.0811%" height="15" fill="rgb(213,98,6)" fg:x="853" fg:w="1"/><text x="69.4309%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.1809%" y="373" width="0.0811%" height="15" fill="rgb(222,85,22)" fg:x="853" fg:w="1"/><text x="69.4309%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.1809%" y="357" width="0.0811%" height="15" fill="rgb(239,46,39)" fg:x="853" fg:w="1"/><text x="69.4309%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1809%" y="341" width="0.0811%" height="15" fill="rgb(237,12,29)" fg:x="853" fg:w="1"/><text x="69.4309%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.1809%" y="325" width="0.0811%" height="15" fill="rgb(214,77,8)" fg:x="853" fg:w="1"/><text x="69.4309%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1809%" y="309" width="0.0811%" height="15" fill="rgb(217,168,37)" fg:x="853" fg:w="1"/><text x="69.4309%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.1809%" y="293" width="0.0811%" height="15" fill="rgb(221,217,23)" fg:x="853" fg:w="1"/><text x="69.4309%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1809%" y="277" width="0.0811%" height="15" fill="rgb(243,229,36)" fg:x="853" fg:w="1"/><text x="69.4309%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.1809%" y="261" width="0.0811%" height="15" fill="rgb(251,163,40)" fg:x="853" fg:w="1"/><text x="69.4309%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.1809%" y="245" width="0.0811%" height="15" fill="rgb(237,222,12)" fg:x="853" fg:w="1"/><text x="69.4309%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.1809%" y="229" width="0.0811%" height="15" fill="rgb(248,132,6)" fg:x="853" fg:w="1"/><text x="69.4309%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="69.2620%" y="389" width="0.0811%" height="15" fill="rgb(227,167,50)" fg:x="854" fg:w="1"/><text x="69.5120%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2620%" y="373" width="0.0811%" height="15" fill="rgb(242,84,37)" fg:x="854" fg:w="1"/><text x="69.5120%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="69.2620%" y="405" width="0.3244%" height="15" fill="rgb(212,4,50)" fg:x="854" fg:w="4"/><text x="69.5120%" y="415.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="69.3431%" y="389" width="0.2433%" height="15" fill="rgb(230,228,32)" fg:x="855" fg:w="3"/><text x="69.5931%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="69.3431%" y="373" width="0.2433%" height="15" fill="rgb(248,217,23)" fg:x="855" fg:w="3"/><text x="69.5931%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.4242%" y="357" width="0.1622%" height="15" fill="rgb(238,197,32)" fg:x="856" fg:w="2"/><text x="69.6742%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.4242%" y="341" width="0.1622%" height="15" fill="rgb(236,106,1)" fg:x="856" fg:w="2"/><text x="69.6742%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.5053%" y="325" width="0.0811%" height="15" fill="rgb(219,228,13)" fg:x="857" fg:w="1"/><text x="69.7553%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.5053%" y="309" width="0.0811%" height="15" fill="rgb(238,30,35)" fg:x="857" fg:w="1"/><text x="69.7553%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.5053%" y="293" width="0.0811%" height="15" fill="rgb(236,70,23)" fg:x="857" fg:w="1"/><text x="69.7553%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.5053%" y="277" width="0.0811%" height="15" fill="rgb(249,104,48)" fg:x="857" fg:w="1"/><text x="69.7553%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.5053%" y="261" width="0.0811%" height="15" fill="rgb(254,117,50)" fg:x="857" fg:w="1"/><text x="69.7553%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.5053%" y="245" width="0.0811%" height="15" fill="rgb(223,152,4)" fg:x="857" fg:w="1"/><text x="69.7553%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.5053%" y="229" width="0.0811%" height="15" fill="rgb(245,6,2)" fg:x="857" fg:w="1"/><text x="69.7553%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.5053%" y="213" width="0.0811%" height="15" fill="rgb(249,150,24)" fg:x="857" fg:w="1"/><text x="69.7553%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.5864%" y="373" width="0.0811%" height="15" fill="rgb(228,185,42)" fg:x="858" fg:w="1"/><text x="69.8364%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="69.5864%" y="405" width="0.1622%" height="15" fill="rgb(226,39,33)" fg:x="858" fg:w="2"/><text x="69.8364%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="69.5864%" y="389" width="0.1622%" height="15" fill="rgb(221,166,19)" fg:x="858" fg:w="2"/><text x="69.8364%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.6675%" y="373" width="0.0811%" height="15" fill="rgb(209,109,2)" fg:x="859" fg:w="1"/><text x="69.9175%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.7486%" y="357" width="0.0811%" height="15" fill="rgb(252,216,26)" fg:x="860" fg:w="1"/><text x="69.9986%" y="367.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="69.8297%" y="357" width="0.0811%" height="15" fill="rgb(227,173,36)" fg:x="861" fg:w="1"/><text x="70.0797%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="69.8297%" y="341" width="0.0811%" height="15" fill="rgb(209,90,7)" fg:x="861" fg:w="1"/><text x="70.0797%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.8297%" y="325" width="0.0811%" height="15" fill="rgb(250,194,11)" fg:x="861" fg:w="1"/><text x="70.0797%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.8297%" y="309" width="0.0811%" height="15" fill="rgb(220,72,50)" fg:x="861" fg:w="1"/><text x="70.0797%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.9919%" y="325" width="0.0811%" height="15" fill="rgb(222,106,48)" fg:x="863" fg:w="1"/><text x="70.2419%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="70.0730%" y="245" width="0.0811%" height="15" fill="rgb(216,220,45)" fg:x="864" fg:w="1"/><text x="70.3230%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="70.0730%" y="229" width="0.0811%" height="15" fill="rgb(234,112,18)" fg:x="864" fg:w="1"/><text x="70.3230%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="70.0730%" y="325" width="0.1622%" height="15" fill="rgb(206,179,9)" fg:x="864" fg:w="2"/><text x="70.3230%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="70.0730%" y="309" width="0.1622%" height="15" fill="rgb(215,115,40)" fg:x="864" fg:w="2"/><text x="70.3230%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="70.0730%" y="293" width="0.1622%" height="15" fill="rgb(222,69,34)" fg:x="864" fg:w="2"/><text x="70.3230%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="70.0730%" y="277" width="0.1622%" height="15" fill="rgb(209,161,10)" fg:x="864" fg:w="2"/><text x="70.3230%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="70.0730%" y="261" width="0.1622%" height="15" fill="rgb(217,6,38)" fg:x="864" fg:w="2"/><text x="70.3230%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="70.1541%" y="245" width="0.0811%" height="15" fill="rgb(229,229,48)" fg:x="865" fg:w="1"/><text x="70.4041%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1541%" y="229" width="0.0811%" height="15" fill="rgb(225,21,28)" fg:x="865" fg:w="1"/><text x="70.4041%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1541%" y="213" width="0.0811%" height="15" fill="rgb(206,33,13)" fg:x="865" fg:w="1"/><text x="70.4041%" y="223.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="70.2352%" y="309" width="0.0811%" height="15" fill="rgb(242,178,17)" fg:x="866" fg:w="1"/><text x="70.4852%" y="319.50"></text></g><g><title>regex_automata::util::syntax::Config::new (1 samples, 0.08%)</title><rect x="70.2352%" y="293" width="0.0811%" height="15" fill="rgb(220,162,5)" fg:x="866" fg:w="1"/><text x="70.4852%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3163%" y="261" width="0.0811%" height="15" fill="rgb(210,33,43)" fg:x="867" fg:w="1"/><text x="70.5663%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.22%)</title><rect x="70.3974%" y="261" width="1.2165%" height="15" fill="rgb(216,116,54)" fg:x="868" fg:w="15"/><text x="70.6474%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.97%)</title><rect x="70.6407%" y="245" width="0.9732%" height="15" fill="rgb(249,92,24)" fg:x="871" fg:w="12"/><text x="70.8907%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="71.6139%" y="261" width="0.4055%" height="15" fill="rgb(231,189,14)" fg:x="883" fg:w="5"/><text x="71.8639%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="71.6139%" y="245" width="0.4055%" height="15" fill="rgb(230,8,41)" fg:x="883" fg:w="5"/><text x="71.8639%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="72.0195%" y="261" width="0.0811%" height="15" fill="rgb(249,7,27)" fg:x="888" fg:w="1"/><text x="72.2695%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="72.0195%" y="245" width="0.0811%" height="15" fill="rgb(232,86,5)" fg:x="888" fg:w="1"/><text x="72.2695%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="72.0195%" y="229" width="0.0811%" height="15" fill="rgb(224,175,18)" fg:x="888" fg:w="1"/><text x="72.2695%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="72.3439%" y="197" width="0.1622%" height="15" fill="rgb(220,129,12)" fg:x="892" fg:w="2"/><text x="72.5939%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.4250%" y="181" width="0.0811%" height="15" fill="rgb(210,19,36)" fg:x="893" fg:w="1"/><text x="72.6750%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.4250%" y="165" width="0.0811%" height="15" fill="rgb(219,96,14)" fg:x="893" fg:w="1"/><text x="72.6750%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.4250%" y="149" width="0.0811%" height="15" fill="rgb(249,106,1)" fg:x="893" fg:w="1"/><text x="72.6750%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.5061%" y="165" width="0.0811%" height="15" fill="rgb(249,155,20)" fg:x="894" fg:w="1"/><text x="72.7561%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="72.5061%" y="197" width="0.3244%" height="15" fill="rgb(244,168,9)" fg:x="894" fg:w="4"/><text x="72.7561%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="72.5061%" y="181" width="0.3244%" height="15" fill="rgb(216,23,50)" fg:x="894" fg:w="4"/><text x="72.7561%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="72.5872%" y="165" width="0.2433%" height="15" fill="rgb(224,219,20)" fg:x="895" fg:w="3"/><text x="72.8372%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="72.6683%" y="149" width="0.1622%" height="15" fill="rgb(222,156,15)" fg:x="896" fg:w="2"/><text x="72.9183%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.7494%" y="133" width="0.0811%" height="15" fill="rgb(231,97,17)" fg:x="897" fg:w="1"/><text x="72.9994%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.7494%" y="117" width="0.0811%" height="15" fill="rgb(218,70,48)" fg:x="897" fg:w="1"/><text x="72.9994%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.7494%" y="101" width="0.0811%" height="15" fill="rgb(212,196,52)" fg:x="897" fg:w="1"/><text x="72.9994%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.8305%" y="181" width="0.0811%" height="15" fill="rgb(243,203,18)" fg:x="898" fg:w="1"/><text x="73.0805%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (41 samples, 3.33%)</title><rect x="72.8305%" y="197" width="3.3252%" height="15" fill="rgb(252,125,41)" fg:x="898" fg:w="41"/><text x="73.0805%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (40 samples, 3.24%)</title><rect x="72.9116%" y="181" width="3.2441%" height="15" fill="rgb(223,180,33)" fg:x="899" fg:w="40"/><text x="73.1616%" y="191.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (40 samples, 3.24%)</title><rect x="72.9116%" y="165" width="3.2441%" height="15" fill="rgb(254,159,46)" fg:x="899" fg:w="40"/><text x="73.1616%" y="175.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="76.1557%" y="197" width="0.2433%" height="15" fill="rgb(254,38,10)" fg:x="939" fg:w="3"/><text x="76.4057%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 4.30%)</title><rect x="72.1817%" y="245" width="4.2985%" height="15" fill="rgb(208,217,32)" fg:x="890" fg:w="53"/><text x="72.4317%" y="255.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (52 samples, 4.22%)</title><rect x="72.2628%" y="229" width="4.2174%" height="15" fill="rgb(221,120,13)" fg:x="891" fg:w="52"/><text x="72.5128%" y="239.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (52 samples, 4.22%)</title><rect x="72.2628%" y="213" width="4.2174%" height="15" fill="rgb(246,54,52)" fg:x="891" fg:w="52"/><text x="72.5128%" y="223.50">regex..</text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="76.3990%" y="197" width="0.0811%" height="15" fill="rgb(242,34,25)" fg:x="942" fg:w="1"/><text x="76.6490%" y="207.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="76.6423%" y="229" width="0.0811%" height="15" fill="rgb(247,209,9)" fg:x="945" fg:w="1"/><text x="76.8923%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7234%" y="229" width="0.0811%" height="15" fill="rgb(228,71,26)" fg:x="946" fg:w="1"/><text x="76.9734%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.8045%" y="229" width="0.0811%" height="15" fill="rgb(222,145,49)" fg:x="947" fg:w="1"/><text x="77.0545%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.8045%" y="213" width="0.0811%" height="15" fill="rgb(218,121,17)" fg:x="947" fg:w="1"/><text x="77.0545%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8045%" y="197" width="0.0811%" height="15" fill="rgb(244,50,7)" fg:x="947" fg:w="1"/><text x="77.0545%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="76.8856%" y="229" width="0.1622%" height="15" fill="rgb(246,229,37)" fg:x="948" fg:w="2"/><text x="77.1356%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.9667%" y="213" width="0.0811%" height="15" fill="rgb(225,18,5)" fg:x="949" fg:w="1"/><text x="77.2167%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (64 samples, 5.19%)</title><rect x="72.1006%" y="261" width="5.1906%" height="15" fill="rgb(213,204,8)" fg:x="889" fg:w="64"/><text x="72.3506%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.81%)</title><rect x="76.4801%" y="245" width="0.8110%" height="15" fill="rgb(238,103,6)" fg:x="943" fg:w="10"/><text x="76.7301%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="77.0479%" y="229" width="0.2433%" height="15" fill="rgb(222,25,35)" fg:x="950" fg:w="3"/><text x="77.2979%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.2101%" y="213" width="0.0811%" height="15" fill="rgb(213,203,35)" fg:x="952" fg:w="1"/><text x="77.4601%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.2101%" y="197" width="0.0811%" height="15" fill="rgb(221,79,53)" fg:x="952" fg:w="1"/><text x="77.4601%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2101%" y="181" width="0.0811%" height="15" fill="rgb(243,200,35)" fg:x="952" fg:w="1"/><text x="77.4601%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (88 samples, 7.14%)</title><rect x="70.3163%" y="277" width="7.1371%" height="15" fill="rgb(248,60,25)" fg:x="867" fg:w="88"/><text x="70.5663%" y="287.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="77.2912%" y="261" width="0.1622%" height="15" fill="rgb(227,53,46)" fg:x="953" fg:w="2"/><text x="77.5412%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="77.3723%" y="245" width="0.0811%" height="15" fill="rgb(216,120,32)" fg:x="954" fg:w="1"/><text x="77.6223%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="77.3723%" y="229" width="0.0811%" height="15" fill="rgb(220,134,1)" fg:x="954" fg:w="1"/><text x="77.6223%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.3723%" y="213" width="0.0811%" height="15" fill="rgb(237,168,5)" fg:x="954" fg:w="1"/><text x="77.6223%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="77.4534%" y="277" width="0.2433%" height="15" fill="rgb(231,100,33)" fg:x="955" fg:w="3"/><text x="77.7034%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="77.4534%" y="261" width="0.2433%" height="15" fill="rgb(236,177,47)" fg:x="955" fg:w="3"/><text x="77.7034%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="77.4534%" y="245" width="0.2433%" height="15" fill="rgb(235,7,49)" fg:x="955" fg:w="3"/><text x="77.7034%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="77.4534%" y="229" width="0.2433%" height="15" fill="rgb(232,119,22)" fg:x="955" fg:w="3"/><text x="77.7034%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="77.5345%" y="213" width="0.1622%" height="15" fill="rgb(254,73,53)" fg:x="956" fg:w="2"/><text x="77.7845%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="77.5345%" y="197" width="0.1622%" height="15" fill="rgb(251,35,20)" fg:x="956" fg:w="2"/><text x="77.7845%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="77.5345%" y="181" width="0.1622%" height="15" fill="rgb(241,119,20)" fg:x="956" fg:w="2"/><text x="77.7845%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="77.6967%" y="245" width="0.0811%" height="15" fill="rgb(207,102,14)" fg:x="958" fg:w="1"/><text x="77.9467%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="77.6967%" y="229" width="0.0811%" height="15" fill="rgb(248,201,50)" fg:x="958" fg:w="1"/><text x="77.9467%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.6967%" y="213" width="0.0811%" height="15" fill="rgb(222,185,44)" fg:x="958" fg:w="1"/><text x="77.9467%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.6967%" y="197" width="0.0811%" height="15" fill="rgb(218,107,18)" fg:x="958" fg:w="1"/><text x="77.9467%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.6967%" y="181" width="0.0811%" height="15" fill="rgb(237,177,39)" fg:x="958" fg:w="1"/><text x="77.9467%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (94 samples, 7.62%)</title><rect x="70.2352%" y="325" width="7.6237%" height="15" fill="rgb(246,69,6)" fg:x="866" fg:w="94"/><text x="70.4852%" y="335.50">&lt;regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (93 samples, 7.54%)</title><rect x="70.3163%" y="309" width="7.5426%" height="15" fill="rgb(234,208,37)" fg:x="867" fg:w="93"/><text x="70.5663%" y="319.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (93 samples, 7.54%)</title><rect x="70.3163%" y="293" width="7.5426%" height="15" fill="rgb(225,4,6)" fg:x="867" fg:w="93"/><text x="70.5663%" y="303.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="77.6967%" y="277" width="0.1622%" height="15" fill="rgb(233,45,0)" fg:x="958" fg:w="2"/><text x="77.9467%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="77.6967%" y="261" width="0.1622%" height="15" fill="rgb(226,136,5)" fg:x="958" fg:w="2"/><text x="77.9467%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="77.7778%" y="245" width="0.0811%" height="15" fill="rgb(211,91,47)" fg:x="959" fg:w="1"/><text x="78.0278%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="77.8589%" y="277" width="0.0811%" height="15" fill="rgb(242,88,51)" fg:x="960" fg:w="1"/><text x="78.1089%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="77.8589%" y="293" width="0.1622%" height="15" fill="rgb(230,91,28)" fg:x="960" fg:w="2"/><text x="78.1089%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="77.9400%" y="277" width="0.0811%" height="15" fill="rgb(254,186,29)" fg:x="961" fg:w="1"/><text x="78.1900%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="77.9400%" y="261" width="0.0811%" height="15" fill="rgb(238,6,4)" fg:x="961" fg:w="1"/><text x="78.1900%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9400%" y="245" width="0.0811%" height="15" fill="rgb(221,151,16)" fg:x="961" fg:w="1"/><text x="78.1900%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.0211%" y="261" width="0.0811%" height="15" fill="rgb(251,143,52)" fg:x="962" fg:w="1"/><text x="78.2711%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="77.8589%" y="325" width="0.3244%" height="15" fill="rgb(206,90,15)" fg:x="960" fg:w="4"/><text x="78.1089%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="77.8589%" y="309" width="0.3244%" height="15" fill="rgb(218,35,8)" fg:x="960" fg:w="4"/><text x="78.1089%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="78.0211%" y="293" width="0.1622%" height="15" fill="rgb(239,215,6)" fg:x="962" fg:w="2"/><text x="78.2711%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="78.0211%" y="277" width="0.1622%" height="15" fill="rgb(245,116,39)" fg:x="962" fg:w="2"/><text x="78.2711%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.1022%" y="261" width="0.0811%" height="15" fill="rgb(242,65,28)" fg:x="963" fg:w="1"/><text x="78.3522%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="78.5077%" y="245" width="0.1622%" height="15" fill="rgb(252,132,53)" fg:x="968" fg:w="2"/><text x="78.7577%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="78.6699%" y="245" width="0.1622%" height="15" fill="rgb(224,159,50)" fg:x="970" fg:w="2"/><text x="78.9199%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.65%)</title><rect x="78.2644%" y="261" width="0.6488%" height="15" fill="rgb(224,93,4)" fg:x="965" fg:w="8"/><text x="78.5144%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="78.8321%" y="245" width="0.0811%" height="15" fill="rgb(208,81,34)" fg:x="972" fg:w="1"/><text x="79.0821%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.8321%" y="229" width="0.0811%" height="15" fill="rgb(233,92,54)" fg:x="972" fg:w="1"/><text x="79.0821%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="78.2644%" y="277" width="0.7299%" height="15" fill="rgb(237,21,14)" fg:x="965" fg:w="9"/><text x="78.5144%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="78.9132%" y="261" width="0.0811%" height="15" fill="rgb(249,128,51)" fg:x="973" fg:w="1"/><text x="79.1632%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.9132%" y="245" width="0.0811%" height="15" fill="rgb(223,129,24)" fg:x="973" fg:w="1"/><text x="79.1632%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.9132%" y="229" width="0.0811%" height="15" fill="rgb(231,168,25)" fg:x="973" fg:w="1"/><text x="79.1632%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.9132%" y="213" width="0.0811%" height="15" fill="rgb(224,39,20)" fg:x="973" fg:w="1"/><text x="79.1632%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (112 samples, 9.08%)</title><rect x="69.9919%" y="341" width="9.0835%" height="15" fill="rgb(225,152,53)" fg:x="863" fg:w="112"/><text x="70.2419%" y="351.50">indefinite::h..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.89%)</title><rect x="78.1833%" y="325" width="0.8921%" height="15" fill="rgb(252,17,24)" fg:x="964" fg:w="11"/><text x="78.4333%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.89%)</title><rect x="78.1833%" y="309" width="0.8921%" height="15" fill="rgb(250,114,30)" fg:x="964" fg:w="11"/><text x="78.4333%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.81%)</title><rect x="78.2644%" y="293" width="0.8110%" height="15" fill="rgb(229,5,4)" fg:x="965" fg:w="10"/><text x="78.5144%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="78.9943%" y="277" width="0.0811%" height="15" fill="rgb(225,176,49)" fg:x="974" fg:w="1"/><text x="79.2443%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="78.9943%" y="261" width="0.0811%" height="15" fill="rgb(224,221,49)" fg:x="974" fg:w="1"/><text x="79.2443%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.9943%" y="245" width="0.0811%" height="15" fill="rgb(253,169,27)" fg:x="974" fg:w="1"/><text x="79.2443%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.9943%" y="229" width="0.0811%" height="15" fill="rgb(211,206,16)" fg:x="974" fg:w="1"/><text x="79.2443%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.9943%" y="213" width="0.0811%" height="15" fill="rgb(244,87,35)" fg:x="974" fg:w="1"/><text x="79.2443%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="79.2376%" y="245" width="0.0811%" height="15" fill="rgb(246,28,10)" fg:x="977" fg:w="1"/><text x="79.4876%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.2376%" y="229" width="0.0811%" height="15" fill="rgb(229,12,44)" fg:x="977" fg:w="1"/><text x="79.4876%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.2376%" y="213" width="0.0811%" height="15" fill="rgb(210,145,37)" fg:x="977" fg:w="1"/><text x="79.4876%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.2376%" y="197" width="0.0811%" height="15" fill="rgb(227,112,52)" fg:x="977" fg:w="1"/><text x="79.4876%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="79.0754%" y="261" width="0.3244%" height="15" fill="rgb(238,155,34)" fg:x="975" fg:w="4"/><text x="79.3254%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.3187%" y="245" width="0.0811%" height="15" fill="rgb(239,226,36)" fg:x="978" fg:w="1"/><text x="79.5687%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="79.0754%" y="277" width="0.4055%" height="15" fill="rgb(230,16,23)" fg:x="975" fg:w="5"/><text x="79.3254%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.3998%" y="261" width="0.0811%" height="15" fill="rgb(236,171,36)" fg:x="979" fg:w="1"/><text x="79.6498%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.4809%" y="277" width="0.0811%" height="15" fill="rgb(221,22,14)" fg:x="980" fg:w="1"/><text x="79.7309%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="79.5620%" y="277" width="0.0811%" height="15" fill="rgb(242,43,11)" fg:x="981" fg:w="1"/><text x="79.8120%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.5620%" y="261" width="0.0811%" height="15" fill="rgb(232,69,23)" fg:x="981" fg:w="1"/><text x="79.8120%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (18 samples, 1.46%)</title><rect x="79.8865%" y="261" width="1.4599%" height="15" fill="rgb(216,180,54)" fg:x="985" fg:w="18"/><text x="80.1365%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (18 samples, 1.46%)</title><rect x="79.8865%" y="245" width="1.4599%" height="15" fill="rgb(216,5,24)" fg:x="985" fg:w="18"/><text x="80.1365%" y="255.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="81.0219%" y="229" width="0.3244%" height="15" fill="rgb(225,89,9)" fg:x="999" fg:w="4"/><text x="81.2719%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="81.3463%" y="261" width="0.4055%" height="15" fill="rgb(243,75,33)" fg:x="1003" fg:w="5"/><text x="81.5963%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="81.4274%" y="245" width="0.3244%" height="15" fill="rgb(247,141,45)" fg:x="1004" fg:w="4"/><text x="81.6774%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="81.6707%" y="229" width="0.0811%" height="15" fill="rgb(232,177,36)" fg:x="1007" fg:w="1"/><text x="81.9207%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.6707%" y="213" width="0.0811%" height="15" fill="rgb(219,125,36)" fg:x="1007" fg:w="1"/><text x="81.9207%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.6707%" y="197" width="0.0811%" height="15" fill="rgb(227,94,9)" fg:x="1007" fg:w="1"/><text x="81.9207%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="81.6707%" y="181" width="0.0811%" height="15" fill="rgb(240,34,52)" fg:x="1007" fg:w="1"/><text x="81.9207%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="81.6707%" y="165" width="0.0811%" height="15" fill="rgb(216,45,12)" fg:x="1007" fg:w="1"/><text x="81.9207%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="82.1573%" y="229" width="0.2433%" height="15" fill="rgb(246,21,19)" fg:x="1013" fg:w="3"/><text x="82.4073%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="82.2384%" y="213" width="0.1622%" height="15" fill="rgb(213,98,42)" fg:x="1014" fg:w="2"/><text x="82.4884%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="82.2384%" y="197" width="0.1622%" height="15" fill="rgb(250,136,47)" fg:x="1014" fg:w="2"/><text x="82.4884%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="82.2384%" y="181" width="0.1622%" height="15" fill="rgb(251,124,27)" fg:x="1014" fg:w="2"/><text x="82.4884%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="82.4006%" y="229" width="0.3244%" height="15" fill="rgb(229,180,14)" fg:x="1016" fg:w="4"/><text x="82.6506%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="82.5629%" y="213" width="0.1622%" height="15" fill="rgb(245,216,25)" fg:x="1018" fg:w="2"/><text x="82.8129%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (16 samples, 1.30%)</title><rect x="81.7518%" y="261" width="1.2976%" height="15" fill="rgb(251,43,5)" fg:x="1008" fg:w="16"/><text x="82.0018%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.22%)</title><rect x="81.8329%" y="245" width="1.2165%" height="15" fill="rgb(250,128,24)" fg:x="1009" fg:w="15"/><text x="82.0829%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="82.7251%" y="229" width="0.3244%" height="15" fill="rgb(217,117,27)" fg:x="1020" fg:w="4"/><text x="82.9751%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="82.7251%" y="213" width="0.3244%" height="15" fill="rgb(245,147,4)" fg:x="1020" fg:w="4"/><text x="82.9751%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="82.7251%" y="197" width="0.3244%" height="15" fill="rgb(242,201,35)" fg:x="1020" fg:w="4"/><text x="82.9751%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="83.0495%" y="261" width="0.1622%" height="15" fill="rgb(218,181,1)" fg:x="1024" fg:w="2"/><text x="83.2995%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="83.0495%" y="245" width="0.1622%" height="15" fill="rgb(222,6,29)" fg:x="1024" fg:w="2"/><text x="83.2995%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="83.1306%" y="229" width="0.0811%" height="15" fill="rgb(208,186,3)" fg:x="1025" fg:w="1"/><text x="83.3806%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.1306%" y="213" width="0.0811%" height="15" fill="rgb(216,36,26)" fg:x="1025" fg:w="1"/><text x="83.3806%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="83.2117%" y="213" width="0.0811%" height="15" fill="rgb(248,201,23)" fg:x="1026" fg:w="1"/><text x="83.4617%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.2117%" y="197" width="0.0811%" height="15" fill="rgb(251,170,31)" fg:x="1026" fg:w="1"/><text x="83.4617%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.2117%" y="181" width="0.0811%" height="15" fill="rgb(207,110,25)" fg:x="1026" fg:w="1"/><text x="83.4617%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.2117%" y="165" width="0.0811%" height="15" fill="rgb(250,54,15)" fg:x="1026" fg:w="1"/><text x="83.4617%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="83.2928%" y="181" width="0.0811%" height="15" fill="rgb(227,68,33)" fg:x="1027" fg:w="1"/><text x="83.5428%" y="191.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="84.5093%" y="149" width="0.2433%" height="15" fill="rgb(238,34,41)" fg:x="1042" fg:w="3"/><text x="84.7593%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="84.7526%" y="149" width="0.3244%" height="15" fill="rgb(220,11,15)" fg:x="1045" fg:w="4"/><text x="85.0026%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.9959%" y="133" width="0.0811%" height="15" fill="rgb(246,111,35)" fg:x="1048" fg:w="1"/><text x="85.2459%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.9959%" y="117" width="0.0811%" height="15" fill="rgb(209,88,53)" fg:x="1048" fg:w="1"/><text x="85.2459%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.9959%" y="101" width="0.0811%" height="15" fill="rgb(231,185,47)" fg:x="1048" fg:w="1"/><text x="85.2459%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="85.4015%" y="85" width="0.1622%" height="15" fill="rgb(233,154,1)" fg:x="1053" fg:w="2"/><text x="85.6515%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="85.3204%" y="117" width="0.3244%" height="15" fill="rgb(225,15,46)" fg:x="1052" fg:w="4"/><text x="85.5704%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="85.4015%" y="101" width="0.2433%" height="15" fill="rgb(211,135,41)" fg:x="1053" fg:w="3"/><text x="85.6515%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.5637%" y="85" width="0.0811%" height="15" fill="rgb(208,54,0)" fg:x="1055" fg:w="1"/><text x="85.8137%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (14 samples, 1.14%)</title><rect x="85.0770%" y="149" width="1.1354%" height="15" fill="rgb(244,136,14)" fg:x="1049" fg:w="14"/><text x="85.3270%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (12 samples, 0.97%)</title><rect x="85.2393%" y="133" width="0.9732%" height="15" fill="rgb(241,56,14)" fg:x="1051" fg:w="12"/><text x="85.4893%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.57%)</title><rect x="85.6448%" y="117" width="0.5677%" height="15" fill="rgb(205,80,24)" fg:x="1056" fg:w="7"/><text x="85.8948%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="86.1314%" y="101" width="0.0811%" height="15" fill="rgb(220,57,4)" fg:x="1062" fg:w="1"/><text x="86.3814%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.1314%" y="85" width="0.0811%" height="15" fill="rgb(226,193,50)" fg:x="1062" fg:w="1"/><text x="86.3814%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.1314%" y="69" width="0.0811%" height="15" fill="rgb(231,168,22)" fg:x="1062" fg:w="1"/><text x="86.3814%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.1314%" y="53" width="0.0811%" height="15" fill="rgb(254,215,14)" fg:x="1062" fg:w="1"/><text x="86.3814%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (61 samples, 4.95%)</title><rect x="86.2125%" y="149" width="4.9473%" height="15" fill="rgb(211,115,16)" fg:x="1063" fg:w="61"/><text x="86.4625%" y="159.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (61 samples, 4.95%)</title><rect x="86.2125%" y="133" width="4.9473%" height="15" fill="rgb(236,210,16)" fg:x="1063" fg:w="61"/><text x="86.4625%" y="143.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (61 samples, 4.95%)</title><rect x="86.2125%" y="117" width="4.9473%" height="15" fill="rgb(221,94,12)" fg:x="1063" fg:w="61"/><text x="86.4625%" y="127.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="91.1598%" y="149" width="0.1622%" height="15" fill="rgb(235,218,49)" fg:x="1124" fg:w="2"/><text x="91.4098%" y="159.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="91.3220%" y="149" width="0.0811%" height="15" fill="rgb(217,114,14)" fg:x="1126" fg:w="1"/><text x="91.5720%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="91.4842%" y="101" width="0.1622%" height="15" fill="rgb(216,145,22)" fg:x="1128" fg:w="2"/><text x="91.7342%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (105 samples, 8.52%)</title><rect x="83.2117%" y="245" width="8.5158%" height="15" fill="rgb(217,112,39)" fg:x="1026" fg:w="105"/><text x="83.4617%" y="255.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (105 samples, 8.52%)</title><rect x="83.2117%" y="229" width="8.5158%" height="15" fill="rgb(225,85,32)" fg:x="1026" fg:w="105"/><text x="83.4617%" y="239.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (104 samples, 8.43%)</title><rect x="83.2928%" y="213" width="8.4347%" height="15" fill="rgb(245,209,47)" fg:x="1027" fg:w="104"/><text x="83.5428%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (104 samples, 8.43%)</title><rect x="83.2928%" y="197" width="8.4347%" height="15" fill="rgb(218,220,15)" fg:x="1027" fg:w="104"/><text x="83.5428%" y="207.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (103 samples, 8.35%)</title><rect x="83.3739%" y="181" width="8.3536%" height="15" fill="rgb(222,202,31)" fg:x="1028" fg:w="103"/><text x="83.6239%" y="191.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (103 samples, 8.35%)</title><rect x="83.3739%" y="165" width="8.3536%" height="15" fill="rgb(243,203,4)" fg:x="1028" fg:w="103"/><text x="83.6239%" y="175.50">regex_automa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="91.4031%" y="149" width="0.3244%" height="15" fill="rgb(237,92,17)" fg:x="1127" fg:w="4"/><text x="91.6531%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="91.4842%" y="133" width="0.2433%" height="15" fill="rgb(231,119,7)" fg:x="1128" fg:w="3"/><text x="91.7342%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="91.4842%" y="117" width="0.2433%" height="15" fill="rgb(237,82,41)" fg:x="1128" fg:w="3"/><text x="91.7342%" y="127.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="91.6464%" y="101" width="0.0811%" height="15" fill="rgb(226,81,48)" fg:x="1130" fg:w="1"/><text x="91.8964%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="91.6464%" y="85" width="0.0811%" height="15" fill="rgb(234,70,51)" fg:x="1130" fg:w="1"/><text x="91.8964%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (10 samples, 0.81%)</title><rect x="91.9708%" y="229" width="0.8110%" height="15" fill="rgb(251,86,4)" fg:x="1134" fg:w="10"/><text x="92.2208%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="92.4574%" y="213" width="0.3244%" height="15" fill="rgb(244,144,28)" fg:x="1140" fg:w="4"/><text x="92.7074%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="92.4574%" y="197" width="0.3244%" height="15" fill="rgb(232,161,39)" fg:x="1140" fg:w="4"/><text x="92.7074%" y="207.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="92.4574%" y="181" width="0.3244%" height="15" fill="rgb(247,34,51)" fg:x="1140" fg:w="4"/><text x="92.7074%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="92.7818%" y="229" width="0.1622%" height="15" fill="rgb(225,132,2)" fg:x="1144" fg:w="2"/><text x="93.0318%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.8629%" y="213" width="0.0811%" height="15" fill="rgb(209,159,44)" fg:x="1145" fg:w="1"/><text x="93.1129%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (165 samples, 13.38%)</title><rect x="79.6431%" y="277" width="13.3820%" height="15" fill="rgb(251,214,1)" fg:x="982" fg:w="165"/><text x="79.8931%" y="287.50">regex_automata::meta..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (121 samples, 9.81%)</title><rect x="83.2117%" y="261" width="9.8135%" height="15" fill="rgb(247,84,47)" fg:x="1026" fg:w="121"/><text x="83.4617%" y="271.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.30%)</title><rect x="91.7275%" y="245" width="1.2976%" height="15" fill="rgb(240,111,43)" fg:x="1131" fg:w="16"/><text x="91.9775%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="92.9440%" y="229" width="0.0811%" height="15" fill="rgb(215,214,35)" fg:x="1146" fg:w="1"/><text x="93.1940%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="93.0251%" y="245" width="0.0811%" height="15" fill="rgb(248,207,23)" fg:x="1147" fg:w="1"/><text x="93.2751%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="93.1062%" y="245" width="0.0811%" height="15" fill="rgb(214,186,4)" fg:x="1148" fg:w="1"/><text x="93.3562%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="93.1873%" y="245" width="0.0811%" height="15" fill="rgb(220,133,22)" fg:x="1149" fg:w="1"/><text x="93.4373%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="93.2685%" y="245" width="0.0811%" height="15" fill="rgb(239,134,19)" fg:x="1150" fg:w="1"/><text x="93.5185%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="93.0251%" y="277" width="0.4055%" height="15" fill="rgb(250,140,9)" fg:x="1147" fg:w="5"/><text x="93.2751%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="93.0251%" y="261" width="0.4055%" height="15" fill="rgb(225,59,14)" fg:x="1147" fg:w="5"/><text x="93.2751%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="93.3496%" y="245" width="0.0811%" height="15" fill="rgb(214,152,51)" fg:x="1151" fg:w="1"/><text x="93.5996%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.3496%" y="229" width="0.0811%" height="15" fill="rgb(251,227,43)" fg:x="1151" fg:w="1"/><text x="93.5996%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.3496%" y="213" width="0.0811%" height="15" fill="rgb(241,96,17)" fg:x="1151" fg:w="1"/><text x="93.5996%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.3496%" y="197" width="0.0811%" height="15" fill="rgb(234,198,43)" fg:x="1151" fg:w="1"/><text x="93.5996%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge_sort::RunVec&lt;alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}},alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}}&gt;&gt; (1 samples, 0.08%)</title><rect x="93.5929%" y="213" width="0.0811%" height="15" fill="rgb(220,108,29)" fg:x="1154" fg:w="1"/><text x="93.8429%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="93.4307%" y="245" width="0.3244%" height="15" fill="rgb(226,163,33)" fg:x="1152" fg:w="4"/><text x="93.6807%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="93.4307%" y="229" width="0.3244%" height="15" fill="rgb(205,194,45)" fg:x="1152" fg:w="4"/><text x="93.6807%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="93.6740%" y="213" width="0.0811%" height="15" fill="rgb(206,143,44)" fg:x="1155" fg:w="1"/><text x="93.9240%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.7551%" y="213" width="0.0811%" height="15" fill="rgb(236,136,36)" fg:x="1156" fg:w="1"/><text x="94.0051%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="93.7551%" y="245" width="0.2433%" height="15" fill="rgb(249,172,42)" fg:x="1156" fg:w="3"/><text x="94.0051%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::concat (3 samples, 0.24%)</title><rect x="93.7551%" y="229" width="0.2433%" height="15" fill="rgb(216,139,23)" fg:x="1156" fg:w="3"/><text x="94.0051%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (2 samples, 0.16%)</title><rect x="93.8362%" y="213" width="0.1622%" height="15" fill="rgb(207,166,20)" fg:x="1157" fg:w="2"/><text x="94.0862%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.9173%" y="197" width="0.0811%" height="15" fill="rgb(210,209,22)" fg:x="1158" fg:w="1"/><text x="94.1673%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (185 samples, 15.00%)</title><rect x="79.0754%" y="325" width="15.0041%" height="15" fill="rgb(232,118,20)" fg:x="975" fg:w="185"/><text x="79.3254%" y="335.50">&lt;regex::regex::string::..</text></g><g><title>regex::builders::Builder::build_one_string (185 samples, 15.00%)</title><rect x="79.0754%" y="309" width="15.0041%" height="15" fill="rgb(238,113,42)" fg:x="975" fg:w="185"/><text x="79.3254%" y="319.50">regex::builders::Builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (185 samples, 15.00%)</title><rect x="79.0754%" y="293" width="15.0041%" height="15" fill="rgb(231,42,5)" fg:x="975" fg:w="185"/><text x="79.3254%" y="303.50">regex_automata::meta::r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.65%)</title><rect x="93.4307%" y="277" width="0.6488%" height="15" fill="rgb(243,166,24)" fg:x="1152" fg:w="8"/><text x="93.6807%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.65%)</title><rect x="93.4307%" y="261" width="0.6488%" height="15" fill="rgb(237,226,12)" fg:x="1152" fg:w="8"/><text x="93.6807%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="93.9984%" y="245" width="0.0811%" height="15" fill="rgb(229,133,24)" fg:x="1159" fg:w="1"/><text x="94.2484%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.1606%" y="293" width="0.0811%" height="15" fill="rgb(238,33,43)" fg:x="1161" fg:w="1"/><text x="94.4106%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="94.1606%" y="277" width="0.0811%" height="15" fill="rgb(227,59,38)" fg:x="1161" fg:w="1"/><text x="94.4106%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.1606%" y="261" width="0.0811%" height="15" fill="rgb(230,97,0)" fg:x="1161" fg:w="1"/><text x="94.4106%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="94.1606%" y="245" width="0.0811%" height="15" fill="rgb(250,173,50)" fg:x="1161" fg:w="1"/><text x="94.4106%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.1606%" y="229" width="0.0811%" height="15" fill="rgb(240,15,50)" fg:x="1161" fg:w="1"/><text x="94.4106%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="94.0795%" y="325" width="0.2433%" height="15" fill="rgb(221,93,22)" fg:x="1160" fg:w="3"/><text x="94.3295%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="94.1606%" y="309" width="0.1622%" height="15" fill="rgb(245,180,53)" fg:x="1161" fg:w="2"/><text x="94.4106%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="94.2417%" y="293" width="0.0811%" height="15" fill="rgb(231,88,51)" fg:x="1162" fg:w="1"/><text x="94.4917%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="94.2417%" y="277" width="0.0811%" height="15" fill="rgb(240,58,21)" fg:x="1162" fg:w="1"/><text x="94.4917%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.2417%" y="261" width="0.0811%" height="15" fill="rgb(237,21,10)" fg:x="1162" fg:w="1"/><text x="94.4917%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.4039%" y="261" width="0.0811%" height="15" fill="rgb(218,43,11)" fg:x="1164" fg:w="1"/><text x="94.6539%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="94.4039%" y="309" width="0.1622%" height="15" fill="rgb(218,221,29)" fg:x="1164" fg:w="2"/><text x="94.6539%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="94.4039%" y="293" width="0.1622%" height="15" fill="rgb(214,118,42)" fg:x="1164" fg:w="2"/><text x="94.6539%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="94.4039%" y="277" width="0.1622%" height="15" fill="rgb(251,200,26)" fg:x="1164" fg:w="2"/><text x="94.6539%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="94.4850%" y="261" width="0.0811%" height="15" fill="rgb(237,101,39)" fg:x="1165" fg:w="1"/><text x="94.7350%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.9716%" y="229" width="0.0811%" height="15" fill="rgb(251,117,11)" fg:x="1171" fg:w="1"/><text x="95.2216%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.9716%" y="213" width="0.0811%" height="15" fill="rgb(216,223,23)" fg:x="1171" fg:w="1"/><text x="95.2216%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.9716%" y="197" width="0.0811%" height="15" fill="rgb(251,54,12)" fg:x="1171" fg:w="1"/><text x="95.2216%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.0527%" y="229" width="0.0811%" height="15" fill="rgb(254,176,54)" fg:x="1172" fg:w="1"/><text x="95.3027%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (202 samples, 16.38%)</title><rect x="79.0754%" y="341" width="16.3828%" height="15" fill="rgb(210,32,8)" fg:x="975" fg:w="202"/><text x="79.3254%" y="351.50">indefinite::rules::number..</text></g><g><title>regex::regex::string::Regex::is_match_at (14 samples, 1.14%)</title><rect x="94.3228%" y="325" width="1.1354%" height="15" fill="rgb(235,52,38)" fg:x="1163" fg:w="14"/><text x="94.5728%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.89%)</title><rect x="94.5661%" y="309" width="0.8921%" height="15" fill="rgb(231,4,44)" fg:x="1166" fg:w="11"/><text x="94.8161%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.89%)</title><rect x="94.5661%" y="293" width="0.8921%" height="15" fill="rgb(249,2,32)" fg:x="1166" fg:w="11"/><text x="94.8161%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.89%)</title><rect x="94.5661%" y="277" width="0.8921%" height="15" fill="rgb(224,65,26)" fg:x="1166" fg:w="11"/><text x="94.8161%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.89%)</title><rect x="94.5661%" y="261" width="0.8921%" height="15" fill="rgb(250,73,40)" fg:x="1166" fg:w="11"/><text x="94.8161%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (11 samples, 0.89%)</title><rect x="94.5661%" y="245" width="0.8921%" height="15" fill="rgb(253,177,16)" fg:x="1166" fg:w="11"/><text x="94.8161%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="95.1338%" y="229" width="0.3244%" height="15" fill="rgb(217,32,34)" fg:x="1173" fg:w="4"/><text x="95.3838%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.4582%" y="325" width="0.0811%" height="15" fill="rgb(212,7,10)" fg:x="1177" fg:w="1"/><text x="95.7082%" y="335.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="95.5393%" y="325" width="0.0811%" height="15" fill="rgb(245,89,8)" fg:x="1178" fg:w="1"/><text x="95.7893%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.6204%" y="261" width="0.0811%" height="15" fill="rgb(237,16,53)" fg:x="1179" fg:w="1"/><text x="95.8704%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.6204%" y="245" width="0.0811%" height="15" fill="rgb(250,204,30)" fg:x="1179" fg:w="1"/><text x="95.8704%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.7015%" y="261" width="0.0811%" height="15" fill="rgb(208,77,27)" fg:x="1180" fg:w="1"/><text x="95.9515%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7015%" y="245" width="0.0811%" height="15" fill="rgb(250,204,28)" fg:x="1180" fg:w="1"/><text x="95.9515%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="95.7015%" y="229" width="0.0811%" height="15" fill="rgb(244,63,21)" fg:x="1180" fg:w="1"/><text x="95.9515%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="95.7015%" y="213" width="0.0811%" height="15" fill="rgb(236,85,44)" fg:x="1180" fg:w="1"/><text x="95.9515%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="95.7826%" y="261" width="0.2433%" height="15" fill="rgb(215,98,4)" fg:x="1181" fg:w="3"/><text x="96.0326%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="95.7826%" y="245" width="0.2433%" height="15" fill="rgb(235,38,11)" fg:x="1181" fg:w="3"/><text x="96.0326%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="95.7826%" y="229" width="0.2433%" height="15" fill="rgb(254,186,25)" fg:x="1181" fg:w="3"/><text x="96.0326%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="95.7826%" y="213" width="0.2433%" height="15" fill="rgb(225,55,31)" fg:x="1181" fg:w="3"/><text x="96.0326%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="96.1071%" y="245" width="0.2433%" height="15" fill="rgb(211,15,21)" fg:x="1185" fg:w="3"/><text x="96.3571%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="96.1071%" y="229" width="0.2433%" height="15" fill="rgb(215,187,41)" fg:x="1185" fg:w="3"/><text x="96.3571%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="96.3504%" y="229" width="0.1622%" height="15" fill="rgb(248,69,32)" fg:x="1188" fg:w="2"/><text x="96.6004%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="96.3504%" y="213" width="0.1622%" height="15" fill="rgb(252,102,52)" fg:x="1188" fg:w="2"/><text x="96.6004%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="96.3504%" y="197" width="0.1622%" height="15" fill="rgb(253,140,32)" fg:x="1188" fg:w="2"/><text x="96.6004%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.4315%" y="181" width="0.0811%" height="15" fill="rgb(216,56,42)" fg:x="1189" fg:w="1"/><text x="96.6815%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.4315%" y="165" width="0.0811%" height="15" fill="rgb(216,184,14)" fg:x="1189" fg:w="1"/><text x="96.6815%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.4315%" y="149" width="0.0811%" height="15" fill="rgb(237,187,27)" fg:x="1189" fg:w="1"/><text x="96.6815%" y="159.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.08%)</title><rect x="96.5126%" y="213" width="0.0811%" height="15" fill="rgb(219,65,3)" fg:x="1190" fg:w="1"/><text x="96.7626%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.5937%" y="213" width="0.0811%" height="15" fill="rgb(245,83,25)" fg:x="1191" fg:w="1"/><text x="96.8437%" y="223.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="96.5937%" y="197" width="0.0811%" height="15" fill="rgb(214,205,45)" fg:x="1191" fg:w="1"/><text x="96.8437%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.89%)</title><rect x="96.0260%" y="261" width="0.8921%" height="15" fill="rgb(241,20,18)" fg:x="1184" fg:w="11"/><text x="96.2760%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.57%)</title><rect x="96.3504%" y="245" width="0.5677%" height="15" fill="rgb(232,163,23)" fg:x="1188" fg:w="7"/><text x="96.6004%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="96.5126%" y="229" width="0.4055%" height="15" fill="rgb(214,5,46)" fg:x="1190" fg:w="5"/><text x="96.7626%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="96.6748%" y="213" width="0.2433%" height="15" fill="rgb(229,78,17)" fg:x="1192" fg:w="3"/><text x="96.9248%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="97.0803%" y="213" width="0.1622%" height="15" fill="rgb(248,89,10)" fg:x="1197" fg:w="2"/><text x="97.3303%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1614%" y="197" width="0.0811%" height="15" fill="rgb(248,54,15)" fg:x="1198" fg:w="1"/><text x="97.4114%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1614%" y="181" width="0.0811%" height="15" fill="rgb(223,116,6)" fg:x="1198" fg:w="1"/><text x="97.4114%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.1614%" y="165" width="0.0811%" height="15" fill="rgb(205,125,38)" fg:x="1198" fg:w="1"/><text x="97.4114%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="97.0803%" y="229" width="0.2433%" height="15" fill="rgb(251,78,38)" fg:x="1197" fg:w="3"/><text x="97.3303%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="97.2425%" y="213" width="0.0811%" height="15" fill="rgb(253,78,28)" fg:x="1199" fg:w="1"/><text x="97.4925%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="97.2425%" y="197" width="0.0811%" height="15" fill="rgb(209,120,3)" fg:x="1199" fg:w="1"/><text x="97.4925%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="96.9181%" y="261" width="0.4866%" height="15" fill="rgb(238,229,9)" fg:x="1195" fg:w="6"/><text x="97.1681%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="96.9181%" y="245" width="0.4866%" height="15" fill="rgb(253,159,18)" fg:x="1195" fg:w="6"/><text x="97.1681%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="97.3236%" y="229" width="0.0811%" height="15" fill="rgb(244,42,34)" fg:x="1200" fg:w="1"/><text x="97.5736%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="97.5669%" y="229" width="0.1622%" height="15" fill="rgb(224,8,7)" fg:x="1203" fg:w="2"/><text x="97.8169%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="97.5669%" y="213" width="0.1622%" height="15" fill="rgb(210,201,45)" fg:x="1203" fg:w="2"/><text x="97.8169%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="97.6480%" y="197" width="0.0811%" height="15" fill="rgb(252,185,21)" fg:x="1204" fg:w="1"/><text x="97.8980%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (27 samples, 2.19%)</title><rect x="95.6204%" y="309" width="2.1898%" height="15" fill="rgb(223,131,1)" fg:x="1179" fg:w="27"/><text x="95.8704%" y="319.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (27 samples, 2.19%)</title><rect x="95.6204%" y="293" width="2.1898%" height="15" fill="rgb(245,141,16)" fg:x="1179" fg:w="27"/><text x="95.8704%" y="303.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (27 samples, 2.19%)</title><rect x="95.6204%" y="277" width="2.1898%" height="15" fill="rgb(229,55,45)" fg:x="1179" fg:w="27"/><text x="95.8704%" y="287.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="97.4047%" y="261" width="0.4055%" height="15" fill="rgb(208,92,15)" fg:x="1201" fg:w="5"/><text x="97.6547%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="97.4047%" y="245" width="0.4055%" height="15" fill="rgb(234,185,47)" fg:x="1201" fg:w="5"/><text x="97.6547%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="97.7291%" y="229" width="0.0811%" height="15" fill="rgb(253,104,50)" fg:x="1205" fg:w="1"/><text x="97.9791%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="97.7291%" y="213" width="0.0811%" height="15" fill="rgb(205,70,7)" fg:x="1205" fg:w="1"/><text x="97.9791%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="97.8102%" y="309" width="0.1622%" height="15" fill="rgb(240,178,43)" fg:x="1206" fg:w="2"/><text x="98.0602%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="97.8913%" y="293" width="0.0811%" height="15" fill="rgb(214,112,2)" fg:x="1207" fg:w="1"/><text x="98.1413%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="97.8913%" y="277" width="0.0811%" height="15" fill="rgb(206,46,17)" fg:x="1207" fg:w="1"/><text x="98.1413%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="97.8913%" y="261" width="0.0811%" height="15" fill="rgb(225,220,16)" fg:x="1207" fg:w="1"/><text x="98.1413%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9724%" y="277" width="0.0811%" height="15" fill="rgb(238,65,40)" fg:x="1208" fg:w="1"/><text x="98.2224%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="98.0535%" y="277" width="0.0811%" height="15" fill="rgb(230,151,21)" fg:x="1209" fg:w="1"/><text x="98.3035%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="98.0535%" y="261" width="0.0811%" height="15" fill="rgb(218,58,49)" fg:x="1209" fg:w="1"/><text x="98.3035%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="98.0535%" y="245" width="0.0811%" height="15" fill="rgb(219,179,14)" fg:x="1209" fg:w="1"/><text x="98.3035%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.0535%" y="229" width="0.0811%" height="15" fill="rgb(223,72,1)" fg:x="1209" fg:w="1"/><text x="98.3035%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="98.1346%" y="261" width="0.1622%" height="15" fill="rgb(238,126,10)" fg:x="1210" fg:w="2"/><text x="98.3846%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2157%" y="245" width="0.0811%" height="15" fill="rgb(224,206,38)" fg:x="1211" fg:w="1"/><text x="98.4657%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.41%)</title><rect x="97.9724%" y="309" width="0.4055%" height="15" fill="rgb(212,201,54)" fg:x="1208" fg:w="5"/><text x="98.2224%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.41%)</title><rect x="97.9724%" y="293" width="0.4055%" height="15" fill="rgb(218,154,48)" fg:x="1208" fg:w="5"/><text x="98.2224%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="98.1346%" y="277" width="0.2433%" height="15" fill="rgb(232,93,24)" fg:x="1210" fg:w="3"/><text x="98.3846%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="98.2968%" y="261" width="0.0811%" height="15" fill="rgb(245,30,21)" fg:x="1212" fg:w="1"/><text x="98.5468%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.4590%" y="229" width="0.0811%" height="15" fill="rgb(242,148,29)" fg:x="1214" fg:w="1"/><text x="98.7090%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.4590%" y="213" width="0.0811%" height="15" fill="rgb(244,153,54)" fg:x="1214" fg:w="1"/><text x="98.7090%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="98.3779%" y="261" width="0.4055%" height="15" fill="rgb(252,87,22)" fg:x="1213" fg:w="5"/><text x="98.6279%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="98.3779%" y="245" width="0.4055%" height="15" fill="rgb(210,51,29)" fg:x="1213" fg:w="5"/><text x="98.6279%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="98.5401%" y="229" width="0.2433%" height="15" fill="rgb(242,136,47)" fg:x="1215" fg:w="3"/><text x="98.7901%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (367 samples, 29.76%)</title><rect x="69.0998%" y="421" width="29.7648%" height="15" fill="rgb(238,68,4)" fg:x="852" fg:w="367"/><text x="69.3498%" y="431.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::l..</text></g><g><title>plugins_core::looking::model::qualify_name (359 samples, 29.12%)</title><rect x="69.7486%" y="405" width="29.1160%" height="15" fill="rgb(242,161,30)" fg:x="860" fg:w="359"/><text x="69.9986%" y="415.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (359 samples, 29.12%)</title><rect x="69.7486%" y="389" width="29.1160%" height="15" fill="rgb(218,58,44)" fg:x="860" fg:w="359"/><text x="69.9986%" y="399.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (359 samples, 29.12%)</title><rect x="69.7486%" y="373" width="29.1160%" height="15" fill="rgb(252,125,32)" fg:x="860" fg:w="359"/><text x="69.9986%" y="383.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (357 samples, 28.95%)</title><rect x="69.9108%" y="357" width="28.9538%" height="15" fill="rgb(219,178,0)" fg:x="862" fg:w="357"/><text x="70.1608%" y="367.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (42 samples, 3.41%)</title><rect x="95.4582%" y="341" width="3.4063%" height="15" fill="rgb(213,152,7)" fg:x="1177" fg:w="42"/><text x="95.7082%" y="351.50">ind..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (40 samples, 3.24%)</title><rect x="95.6204%" y="325" width="3.2441%" height="15" fill="rgb(249,109,34)" fg:x="1179" fg:w="40"/><text x="95.8704%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="98.3779%" y="309" width="0.4866%" height="15" fill="rgb(232,96,21)" fg:x="1213" fg:w="6"/><text x="98.6279%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="98.3779%" y="293" width="0.4866%" height="15" fill="rgb(228,27,39)" fg:x="1213" fg:w="6"/><text x="98.6279%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="98.3779%" y="277" width="0.4866%" height="15" fill="rgb(211,182,52)" fg:x="1213" fg:w="6"/><text x="98.6279%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="98.7835%" y="261" width="0.0811%" height="15" fill="rgb(234,178,38)" fg:x="1218" fg:w="1"/><text x="99.0335%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="98.7835%" y="245" width="0.0811%" height="15" fill="rgb(221,111,3)" fg:x="1218" fg:w="1"/><text x="99.0335%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="98.8646%" y="421" width="0.0811%" height="15" fill="rgb(228,175,21)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="98.8646%" y="405" width="0.0811%" height="15" fill="rgb(228,174,43)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="98.8646%" y="389" width="0.0811%" height="15" fill="rgb(211,191,0)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.8646%" y="373" width="0.0811%" height="15" fill="rgb(253,117,3)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.8646%" y="357" width="0.0811%" height="15" fill="rgb(241,127,19)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.8646%" y="341" width="0.0811%" height="15" fill="rgb(218,103,12)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.8646%" y="325" width="0.0811%" height="15" fill="rgb(236,214,43)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="98.8646%" y="309" width="0.0811%" height="15" fill="rgb(244,144,19)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="319.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.8646%" y="293" width="0.0811%" height="15" fill="rgb(246,188,10)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.8646%" y="277" width="0.0811%" height="15" fill="rgb(212,193,33)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.8646%" y="261" width="0.0811%" height="15" fill="rgb(241,51,29)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.8646%" y="245" width="0.0811%" height="15" fill="rgb(211,58,19)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="98.8646%" y="229" width="0.0811%" height="15" fill="rgb(229,111,26)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="98.8646%" y="213" width="0.0811%" height="15" fill="rgb(213,115,40)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="98.8646%" y="197" width="0.0811%" height="15" fill="rgb(209,56,44)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="98.8646%" y="181" width="0.0811%" height="15" fill="rgb(230,108,32)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="98.8646%" y="165" width="0.0811%" height="15" fill="rgb(216,165,31)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="98.8646%" y="149" width="0.0811%" height="15" fill="rgb(218,122,21)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.8646%" y="133" width="0.0811%" height="15" fill="rgb(223,224,47)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="98.8646%" y="117" width="0.0811%" height="15" fill="rgb(238,102,44)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.8646%" y="101" width="0.0811%" height="15" fill="rgb(236,46,40)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="98.8646%" y="85" width="0.0811%" height="15" fill="rgb(247,202,50)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="98.8646%" y="69" width="0.0811%" height="15" fill="rgb(209,99,20)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="98.8646%" y="53" width="0.0811%" height="15" fill="rgb(252,27,34)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.8646%" y="37" width="0.0811%" height="15" fill="rgb(215,206,23)" fg:x="1219" fg:w="1"/><text x="99.1146%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="98.9457%" y="421" width="0.0811%" height="15" fill="rgb(212,135,36)" fg:x="1220" fg:w="1"/><text x="99.1957%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="99.3512%" y="261" width="0.0811%" height="15" fill="rgb(240,189,1)" fg:x="1225" fg:w="1"/><text x="99.6012%" y="271.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="99.3512%" y="245" width="0.0811%" height="15" fill="rgb(242,56,20)" fg:x="1225" fg:w="1"/><text x="99.6012%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3512%" y="229" width="0.0811%" height="15" fill="rgb(247,132,33)" fg:x="1225" fg:w="1"/><text x="99.6012%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3512%" y="213" width="0.0811%" height="15" fill="rgb(208,149,11)" fg:x="1225" fg:w="1"/><text x="99.6012%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3512%" y="197" width="0.0811%" height="15" fill="rgb(211,33,11)" fg:x="1225" fg:w="1"/><text x="99.6012%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3512%" y="181" width="0.0811%" height="15" fill="rgb(221,29,38)" fg:x="1225" fg:w="1"/><text x="99.6012%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4323%" y="117" width="0.0811%" height="15" fill="rgb(206,182,49)" fg:x="1226" fg:w="1"/><text x="99.6823%" y="127.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4323%" y="101" width="0.0811%" height="15" fill="rgb(216,140,1)" fg:x="1226" fg:w="1"/><text x="99.6823%" y="111.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (4 samples, 0.32%)</title><rect x="99.2701%" y="389" width="0.3244%" height="15" fill="rgb(232,57,40)" fg:x="1224" fg:w="4"/><text x="99.5201%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="99.2701%" y="373" width="0.3244%" height="15" fill="rgb(224,186,18)" fg:x="1224" fg:w="4"/><text x="99.5201%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="99.2701%" y="357" width="0.3244%" height="15" fill="rgb(215,121,11)" fg:x="1224" fg:w="4"/><text x="99.5201%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="99.2701%" y="341" width="0.3244%" height="15" fill="rgb(245,147,10)" fg:x="1224" fg:w="4"/><text x="99.5201%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="99.2701%" y="325" width="0.3244%" height="15" fill="rgb(238,153,13)" fg:x="1224" fg:w="4"/><text x="99.5201%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="99.2701%" y="309" width="0.3244%" height="15" fill="rgb(233,108,0)" fg:x="1224" fg:w="4"/><text x="99.5201%" y="319.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.3512%" y="293" width="0.2433%" height="15" fill="rgb(212,157,17)" fg:x="1225" fg:w="3"/><text x="99.6012%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="99.3512%" y="277" width="0.2433%" height="15" fill="rgb(225,213,38)" fg:x="1225" fg:w="3"/><text x="99.6012%" y="287.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.4323%" y="261" width="0.1622%" height="15" fill="rgb(248,16,11)" fg:x="1226" fg:w="2"/><text x="99.6823%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.4323%" y="245" width="0.1622%" height="15" fill="rgb(241,33,4)" fg:x="1226" fg:w="2"/><text x="99.6823%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.4323%" y="229" width="0.1622%" height="15" fill="rgb(222,26,43)" fg:x="1226" fg:w="2"/><text x="99.6823%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.4323%" y="213" width="0.1622%" height="15" fill="rgb(243,29,36)" fg:x="1226" fg:w="2"/><text x="99.6823%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.4323%" y="197" width="0.1622%" height="15" fill="rgb(241,9,27)" fg:x="1226" fg:w="2"/><text x="99.6823%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.4323%" y="181" width="0.1622%" height="15" fill="rgb(205,117,26)" fg:x="1226" fg:w="2"/><text x="99.6823%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.4323%" y="165" width="0.1622%" height="15" fill="rgb(209,80,39)" fg:x="1226" fg:w="2"/><text x="99.6823%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.4323%" y="149" width="0.1622%" height="15" fill="rgb(239,155,6)" fg:x="1226" fg:w="2"/><text x="99.6823%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.4323%" y="133" width="0.1622%" height="15" fill="rgb(212,104,12)" fg:x="1226" fg:w="2"/><text x="99.6823%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5134%" y="117" width="0.0811%" height="15" fill="rgb(234,204,3)" fg:x="1227" fg:w="1"/><text x="99.7634%" y="127.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.5134%" y="101" width="0.0811%" height="15" fill="rgb(251,218,7)" fg:x="1227" fg:w="1"/><text x="99.7634%" y="111.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (389 samples, 31.55%)</title><rect x="68.1265%" y="581" width="31.5491%" height="15" fill="rgb(221,81,32)" fg:x="840" fg:w="389"/><text x="68.3765%" y="591.50">&lt;engine::perform::StandardPerformer as kernel::acti..</text></g><g><title>kernel::plugins::mw::apply_middleware (379 samples, 30.74%)</title><rect x="68.9376%" y="565" width="30.7380%" height="15" fill="rgb(214,152,26)" fg:x="850" fg:w="379"/><text x="69.1876%" y="575.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (379 samples, 30.74%)</title><rect x="68.9376%" y="549" width="30.7380%" height="15" fill="rgb(223,22,3)" fg:x="850" fg:w="379"/><text x="69.1876%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (379 samples, 30.74%)</title><rect x="68.9376%" y="533" width="30.7380%" height="15" fill="rgb(207,174,7)" fg:x="850" fg:w="379"/><text x="69.1876%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plug..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (379 samples, 30.74%)</title><rect x="68.9376%" y="517" width="30.7380%" height="15" fill="rgb(224,19,52)" fg:x="850" fg:w="379"/><text x="69.1876%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (378 samples, 30.66%)</title><rect x="69.0187%" y="501" width="30.6569%" height="15" fill="rgb(228,24,14)" fg:x="851" fg:w="378"/><text x="69.2687%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.sh..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (378 samples, 30.66%)</title><rect x="69.0187%" y="485" width="30.6569%" height="15" fill="rgb(230,153,43)" fg:x="851" fg:w="378"/><text x="69.2687%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (378 samples, 30.66%)</title><rect x="69.0187%" y="469" width="30.6569%" height="15" fill="rgb(231,106,12)" fg:x="851" fg:w="378"/><text x="69.2687%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.sh..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (378 samples, 30.66%)</title><rect x="69.0187%" y="453" width="30.6569%" height="15" fill="rgb(215,92,2)" fg:x="851" fg:w="378"/><text x="69.2687%" y="463.50">&lt;plugins_core::looking::actions::LookAction as ke..</text></g><g><title>plugins_core::looking::model::new_area_observation (377 samples, 30.58%)</title><rect x="69.0998%" y="437" width="30.5758%" height="15" fill="rgb(249,143,25)" fg:x="852" fg:w="377"/><text x="69.3498%" y="447.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (8 samples, 0.65%)</title><rect x="99.0268%" y="421" width="0.6488%" height="15" fill="rgb(252,7,35)" fg:x="1221" fg:w="8"/><text x="99.2768%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.65%)</title><rect x="99.0268%" y="405" width="0.6488%" height="15" fill="rgb(216,69,40)" fg:x="1221" fg:w="8"/><text x="99.2768%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5945%" y="389" width="0.0811%" height="15" fill="rgb(240,36,33)" fg:x="1228" fg:w="1"/><text x="99.8445%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5945%" y="373" width="0.0811%" height="15" fill="rgb(231,128,14)" fg:x="1228" fg:w="1"/><text x="99.8445%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5945%" y="357" width="0.0811%" height="15" fill="rgb(245,143,14)" fg:x="1228" fg:w="1"/><text x="99.8445%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="99.6756%" y="501" width="0.0811%" height="15" fill="rgb(222,130,28)" fg:x="1229" fg:w="1"/><text x="99.9256%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="99.6756%" y="485" width="0.0811%" height="15" fill="rgb(212,10,48)" fg:x="1229" fg:w="1"/><text x="99.9256%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6756%" y="469" width="0.0811%" height="15" fill="rgb(254,118,45)" fg:x="1229" fg:w="1"/><text x="99.9256%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6756%" y="453" width="0.0811%" height="15" fill="rgb(228,6,45)" fg:x="1229" fg:w="1"/><text x="99.9256%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6756%" y="437" width="0.0811%" height="15" fill="rgb(241,18,35)" fg:x="1229" fg:w="1"/><text x="99.9256%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6756%" y="421" width="0.0811%" height="15" fill="rgb(227,214,53)" fg:x="1229" fg:w="1"/><text x="99.9256%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6756%" y="405" width="0.0811%" height="15" fill="rgb(224,107,51)" fg:x="1229" fg:w="1"/><text x="99.9256%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6756%" y="389" width="0.0811%" height="15" fill="rgb(248,60,28)" fg:x="1229" fg:w="1"/><text x="99.9256%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.6756%" y="373" width="0.0811%" height="15" fill="rgb(249,101,23)" fg:x="1229" fg:w="1"/><text x="99.9256%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6756%" y="357" width="0.0811%" height="15" fill="rgb(228,51,19)" fg:x="1229" fg:w="1"/><text x="99.9256%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6756%" y="341" width="0.0811%" height="15" fill="rgb(213,20,6)" fg:x="1229" fg:w="1"/><text x="99.9256%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6756%" y="325" width="0.0811%" height="15" fill="rgb(212,124,10)" fg:x="1229" fg:w="1"/><text x="99.9256%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.6756%" y="309" width="0.0811%" height="15" fill="rgb(248,3,40)" fg:x="1229" fg:w="1"/><text x="99.9256%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="99.6756%" y="565" width="0.1622%" height="15" fill="rgb(223,178,23)" fg:x="1229" fg:w="2"/><text x="99.9256%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.6756%" y="549" width="0.1622%" height="15" fill="rgb(240,132,45)" fg:x="1229" fg:w="2"/><text x="99.9256%" y="559.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.6756%" y="533" width="0.1622%" height="15" fill="rgb(245,164,36)" fg:x="1229" fg:w="2"/><text x="99.9256%" y="543.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="99.6756%" y="517" width="0.1622%" height="15" fill="rgb(231,188,53)" fg:x="1229" fg:w="2"/><text x="99.9256%" y="527.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.7567%" y="501" width="0.0811%" height="15" fill="rgb(237,198,39)" fg:x="1230" fg:w="1"/><text x="100.0067%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7567%" y="485" width="0.0811%" height="15" fill="rgb(223,120,35)" fg:x="1230" fg:w="1"/><text x="100.0067%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7567%" y="469" width="0.0811%" height="15" fill="rgb(253,107,49)" fg:x="1230" fg:w="1"/><text x="100.0067%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7567%" y="453" width="0.0811%" height="15" fill="rgb(216,44,31)" fg:x="1230" fg:w="1"/><text x="100.0067%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7567%" y="437" width="0.0811%" height="15" fill="rgb(253,87,21)" fg:x="1230" fg:w="1"/><text x="100.0067%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7567%" y="421" width="0.0811%" height="15" fill="rgb(226,18,2)" fg:x="1230" fg:w="1"/><text x="100.0067%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7567%" y="405" width="0.0811%" height="15" fill="rgb(216,8,46)" fg:x="1230" fg:w="1"/><text x="100.0067%" y="415.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (392 samples, 31.79%)</title><rect x="68.1265%" y="677" width="31.7924%" height="15" fill="rgb(226,140,39)" fg:x="840" fg:w="392"/><text x="68.3765%" y="687.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins..</text></g><g><title>core::iter::adapters::try_process (392 samples, 31.79%)</title><rect x="68.1265%" y="661" width="31.7924%" height="15" fill="rgb(221,194,54)" fg:x="840" fg:w="392"/><text x="68.3765%" y="671.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (392 samples, 31.79%)</title><rect x="68.1265%" y="645" width="31.7924%" height="15" fill="rgb(213,92,11)" fg:x="840" fg:w="392"/><text x="68.3765%" y="655.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (392 samples, 31.79%)</title><rect x="68.1265%" y="629" width="31.7924%" height="15" fill="rgb(229,162,46)" fg:x="840" fg:w="392"/><text x="68.3765%" y="639.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter:..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (392 samples, 31.79%)</title><rect x="68.1265%" y="613" width="31.7924%" height="15" fill="rgb(214,111,36)" fg:x="840" fg:w="392"/><text x="68.3765%" y="623.50">&lt;plugins_core::looking::LookingPlugin as kernel::pl..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (392 samples, 31.79%)</title><rect x="68.1265%" y="597" width="31.7924%" height="15" fill="rgb(207,6,21)" fg:x="840" fg:w="392"/><text x="68.3765%" y="607.50">&lt;engine::perform::StandardPerformer as kernel::acti..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (3 samples, 0.24%)</title><rect x="99.6756%" y="581" width="0.2433%" height="15" fill="rgb(213,127,38)" fg:x="1229" fg:w="3"/><text x="99.9256%" y="591.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="99.8378%" y="565" width="0.0811%" height="15" fill="rgb(238,118,32)" fg:x="1231" fg:w="1"/><text x="100.0878%" y="575.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.8378%" y="549" width="0.0811%" height="15" fill="rgb(240,139,39)" fg:x="1231" fg:w="1"/><text x="100.0878%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.8378%" y="533" width="0.0811%" height="15" fill="rgb(235,10,37)" fg:x="1231" fg:w="1"/><text x="100.0878%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.8378%" y="517" width="0.0811%" height="15" fill="rgb(249,171,38)" fg:x="1231" fg:w="1"/><text x="100.0878%" y="527.50"></text></g><g><title>all (1,233 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(242,144,32)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-7c3643c3 (1,233 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(217,117,21)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="1055.50">simple-7c3643c3</text></g><g><title>_start (1,233 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(249,87,1)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,233 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(248,196,48)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,233 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(251,206,33)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,233 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(232,141,28)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,233 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(209,167,14)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,233 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(225,11,50)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,233 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(209,50,20)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,233 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(212,17,46)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,233 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(216,101,39)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,233 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(212,228,48)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,233 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(250,6,50)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,233 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(250,160,48)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,233 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(244,216,33)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,233 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(207,157,5)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,233 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(228,199,8)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,233 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(227,80,20)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,233 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(222,9,33)" fg:x="0" fg:w="1233"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (490 samples, 39.74%)</title><rect x="60.2595%" y="757" width="39.7405%" height="15" fill="rgb(239,44,28)" fg:x="743" fg:w="490"/><text x="60.5095%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routi..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (490 samples, 39.74%)</title><rect x="60.2595%" y="741" width="39.7405%" height="15" fill="rgb(249,187,43)" fg:x="743" fg:w="490"/><text x="60.5095%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (490 samples, 39.74%)</title><rect x="60.2595%" y="725" width="39.7405%" height="15" fill="rgb(216,141,28)" fg:x="743" fg:w="490"/><text x="60.5095%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (393 samples, 31.87%)</title><rect x="68.1265%" y="709" width="31.8735%" height="15" fill="rgb(230,154,53)" fg:x="840" fg:w="393"/><text x="68.3765%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (393 samples, 31.87%)</title><rect x="68.1265%" y="693" width="31.8735%" height="15" fill="rgb(227,82,4)" fg:x="840" fg:w="393"/><text x="68.3765%" y="703.50">engine::perform::StandardPerformer::evaluate_and_per..</text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.9189%" y="677" width="0.0811%" height="15" fill="rgb(220,107,16)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.9189%" y="661" width="0.0811%" height="15" fill="rgb(207,187,2)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="671.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.9189%" y="645" width="0.0811%" height="15" fill="rgb(210,162,52)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.9189%" y="629" width="0.0811%" height="15" fill="rgb(217,216,49)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.9189%" y="613" width="0.0811%" height="15" fill="rgb(218,146,49)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="99.9189%" y="597" width="0.0811%" height="15" fill="rgb(216,55,40)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="99.9189%" y="581" width="0.0811%" height="15" fill="rgb(208,196,21)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.9189%" y="565" width="0.0811%" height="15" fill="rgb(242,117,42)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.9189%" y="549" width="0.0811%" height="15" fill="rgb(210,11,23)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="559.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="99.9189%" y="533" width="0.0811%" height="15" fill="rgb(217,110,2)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="543.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="99.9189%" y="517" width="0.0811%" height="15" fill="rgb(229,77,54)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.9189%" y="501" width="0.0811%" height="15" fill="rgb(218,53,16)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.9189%" y="485" width="0.0811%" height="15" fill="rgb(215,38,13)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="99.9189%" y="469" width="0.0811%" height="15" fill="rgb(235,42,18)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="99.9189%" y="453" width="0.0811%" height="15" fill="rgb(219,66,54)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="99.9189%" y="437" width="0.0811%" height="15" fill="rgb(222,205,4)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="99.9189%" y="421" width="0.0811%" height="15" fill="rgb(227,213,46)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="99.9189%" y="405" width="0.0811%" height="15" fill="rgb(250,145,42)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="99.9189%" y="389" width="0.0811%" height="15" fill="rgb(219,15,2)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.9189%" y="373" width="0.0811%" height="15" fill="rgb(231,181,52)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="99.9189%" y="357" width="0.0811%" height="15" fill="rgb(235,1,42)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.9189%" y="341" width="0.0811%" height="15" fill="rgb(249,88,27)" fg:x="1232" fg:w="1"/><text x="100.1689%" y="351.50"></text></g></svg></svg>