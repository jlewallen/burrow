<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1190" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1173.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1173.00"> </text><svg id="frames" x="10" width="1180" total_samples="1249"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="661" width="0.0801%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0000%" y="709" width="0.2402%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.0000%" y="693" width="0.2402%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="0.0000%" y="677" width="0.2402%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.0801%" y="661" width="0.1601%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="2"/><text x="0.3301%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.0801%" y="645" width="0.1601%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="2"/><text x="0.3301%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.0801%" y="629" width="0.1601%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="2"/><text x="0.3301%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.0801%" y="613" width="0.1601%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="2"/><text x="0.3301%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0000%" y="789" width="0.3203%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (4 samples, 0.32%)</title><rect x="0.0000%" y="773" width="0.3203%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0000%" y="757" width="0.3203%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="0.0000%" y="741" width="0.3203%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0000%" y="725" width="0.3203%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="4"/><text x="0.2500%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2402%" y="709" width="0.0801%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.4902%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="0.3203%" y="725" width="0.0801%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="1"/><text x="0.5703%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.3203%" y="709" width="0.0801%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="1"/><text x="0.5703%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.3203%" y="693" width="0.0801%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="0.5703%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="0.3203%" y="677" width="0.0801%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="0.5703%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="0.3203%" y="661" width="0.0801%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="0.5703%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="0.3203%" y="645" width="0.0801%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="0.5703%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="0.3203%" y="629" width="0.0801%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="1"/><text x="0.5703%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="0.3203%" y="613" width="0.0801%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="1"/><text x="0.5703%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="0.3203%" y="597" width="0.0801%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="1"/><text x="0.5703%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="0.3203%" y="581" width="0.0801%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="1"/><text x="0.5703%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="0.3203%" y="565" width="0.0801%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="1"/><text x="0.5703%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="0.3203%" y="549" width="0.0801%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="1"/><text x="0.5703%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.3203%" y="533" width="0.0801%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="1"/><text x="0.5703%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="0.4003%" y="709" width="0.0801%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="1"/><text x="0.6503%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="0.4003%" y="693" width="0.0801%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="1"/><text x="0.6503%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.4003%" y="677" width="0.0801%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="1"/><text x="0.6503%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="0.4003%" y="661" width="0.0801%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="1"/><text x="0.6503%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="0.4003%" y="645" width="0.0801%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="1"/><text x="0.6503%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.4003%" y="629" width="0.0801%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="1"/><text x="0.6503%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.4003%" y="613" width="0.0801%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="1"/><text x="0.6503%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.4003%" y="597" width="0.0801%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="0.6503%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.4003%" y="581" width="0.0801%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="1"/><text x="0.6503%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.4003%" y="565" width="0.0801%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="1"/><text x="0.6503%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.4003%" y="549" width="0.0801%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="1"/><text x="0.6503%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.4003%" y="533" width="0.0801%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="1"/><text x="0.6503%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="0.4003%" y="517" width="0.0801%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="1"/><text x="0.6503%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="0.4003%" y="501" width="0.0801%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="0.6503%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="0.4003%" y="485" width="0.0801%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="1"/><text x="0.6503%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="0.4003%" y="469" width="0.0801%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="0.6503%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="0.4003%" y="453" width="0.0801%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="0.6503%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="0.4003%" y="437" width="0.0801%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="0.6503%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="0.4003%" y="421" width="0.0801%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="0.6503%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="0.4003%" y="405" width="0.0801%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="1"/><text x="0.6503%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="0.4003%" y="389" width="0.0801%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="1"/><text x="0.6503%" y="399.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="0.4003%" y="373" width="0.0801%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="1"/><text x="0.6503%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="0.4003%" y="357" width="0.0801%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="1"/><text x="0.6503%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.4804%" y="709" width="0.0801%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="1"/><text x="0.7304%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="0.4804%" y="693" width="0.0801%" height="15" fill="rgb(250,213,24)" fg:x="6" fg:w="1"/><text x="0.7304%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="0.4804%" y="677" width="0.0801%" height="15" fill="rgb(247,123,22)" fg:x="6" fg:w="1"/><text x="0.7304%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.4804%" y="661" width="0.0801%" height="15" fill="rgb(231,138,38)" fg:x="6" fg:w="1"/><text x="0.7304%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4804%" y="645" width="0.0801%" height="15" fill="rgb(231,145,46)" fg:x="6" fg:w="1"/><text x="0.7304%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.4804%" y="629" width="0.0801%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="1"/><text x="0.7304%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4804%" y="613" width="0.0801%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="1"/><text x="0.7304%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.4804%" y="597" width="0.0801%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="1"/><text x="0.7304%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4804%" y="581" width="0.0801%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="1"/><text x="0.7304%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="0.4804%" y="565" width="0.0801%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="1"/><text x="0.7304%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.32%)</title><rect x="0.3203%" y="757" width="0.3203%" height="15" fill="rgb(248,47,43)" fg:x="4" fg:w="4"/><text x="0.5703%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="0.3203%" y="741" width="0.3203%" height="15" fill="rgb(221,10,30)" fg:x="4" fg:w="4"/><text x="0.5703%" y="751.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="0.4003%" y="725" width="0.2402%" height="15" fill="rgb(210,229,1)" fg:x="5" fg:w="3"/><text x="0.6503%" y="735.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="0.5604%" y="709" width="0.0801%" height="15" fill="rgb(222,148,37)" fg:x="7" fg:w="1"/><text x="0.8104%" y="719.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="0.5604%" y="693" width="0.0801%" height="15" fill="rgb(234,67,33)" fg:x="7" fg:w="1"/><text x="0.8104%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="0.5604%" y="677" width="0.0801%" height="15" fill="rgb(247,98,35)" fg:x="7" fg:w="1"/><text x="0.8104%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.5604%" y="661" width="0.0801%" height="15" fill="rgb(247,138,52)" fg:x="7" fg:w="1"/><text x="0.8104%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5604%" y="645" width="0.0801%" height="15" fill="rgb(213,79,30)" fg:x="7" fg:w="1"/><text x="0.8104%" y="655.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5604%" y="629" width="0.0801%" height="15" fill="rgb(246,177,23)" fg:x="7" fg:w="1"/><text x="0.8104%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5604%" y="613" width="0.0801%" height="15" fill="rgb(230,62,27)" fg:x="7" fg:w="1"/><text x="0.8104%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5604%" y="597" width="0.0801%" height="15" fill="rgb(216,154,8)" fg:x="7" fg:w="1"/><text x="0.8104%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="0.5604%" y="581" width="0.0801%" height="15" fill="rgb(244,35,45)" fg:x="7" fg:w="1"/><text x="0.8104%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.5604%" y="565" width="0.0801%" height="15" fill="rgb(251,115,12)" fg:x="7" fg:w="1"/><text x="0.8104%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="0.5604%" y="549" width="0.0801%" height="15" fill="rgb(240,54,50)" fg:x="7" fg:w="1"/><text x="0.8104%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.5604%" y="533" width="0.0801%" height="15" fill="rgb(233,84,52)" fg:x="7" fg:w="1"/><text x="0.8104%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="0.5604%" y="517" width="0.0801%" height="15" fill="rgb(207,117,47)" fg:x="7" fg:w="1"/><text x="0.8104%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.5604%" y="501" width="0.0801%" height="15" fill="rgb(249,43,39)" fg:x="7" fg:w="1"/><text x="0.8104%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="0.5604%" y="485" width="0.0801%" height="15" fill="rgb(209,38,44)" fg:x="7" fg:w="1"/><text x="0.8104%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="0.5604%" y="469" width="0.0801%" height="15" fill="rgb(236,212,23)" fg:x="7" fg:w="1"/><text x="0.8104%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.5604%" y="453" width="0.0801%" height="15" fill="rgb(242,79,21)" fg:x="7" fg:w="1"/><text x="0.8104%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="0.5604%" y="437" width="0.0801%" height="15" fill="rgb(211,96,35)" fg:x="7" fg:w="1"/><text x="0.8104%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="0.5604%" y="421" width="0.0801%" height="15" fill="rgb(253,215,40)" fg:x="7" fg:w="1"/><text x="0.8104%" y="431.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="0.6405%" y="757" width="0.0801%" height="15" fill="rgb(211,81,21)" fg:x="8" fg:w="1"/><text x="0.8905%" y="767.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="0.6405%" y="741" width="0.0801%" height="15" fill="rgb(208,190,38)" fg:x="8" fg:w="1"/><text x="0.8905%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="0.6405%" y="725" width="0.0801%" height="15" fill="rgb(235,213,38)" fg:x="8" fg:w="1"/><text x="0.8905%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="0.6405%" y="709" width="0.0801%" height="15" fill="rgb(237,122,38)" fg:x="8" fg:w="1"/><text x="0.8905%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="0.6405%" y="693" width="0.0801%" height="15" fill="rgb(244,218,35)" fg:x="8" fg:w="1"/><text x="0.8905%" y="703.50"></text></g><g><title>anyhow::error::object_drop (1 samples, 0.08%)</title><rect x="0.7206%" y="725" width="0.0801%" height="15" fill="rgb(240,68,47)" fg:x="9" fg:w="1"/><text x="0.9706%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;libloading::error::Error&gt; (1 samples, 0.08%)</title><rect x="0.7206%" y="709" width="0.0801%" height="15" fill="rgb(210,16,53)" fg:x="9" fg:w="1"/><text x="0.9706%" y="719.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.72%)</title><rect x="0.3203%" y="789" width="0.7206%" height="15" fill="rgb(235,124,12)" fg:x="4" fg:w="9"/><text x="0.5703%" y="799.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.72%)</title><rect x="0.3203%" y="773" width="0.7206%" height="15" fill="rgb(224,169,11)" fg:x="4" fg:w="9"/><text x="0.5703%" y="783.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.32%)</title><rect x="0.7206%" y="757" width="0.3203%" height="15" fill="rgb(250,166,2)" fg:x="9" fg:w="4"/><text x="0.9706%" y="767.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="0.7206%" y="741" width="0.3203%" height="15" fill="rgb(242,216,29)" fg:x="9" fg:w="4"/><text x="0.9706%" y="751.50"></text></g><g><title>libloading::os::unix::Library::open (3 samples, 0.24%)</title><rect x="0.8006%" y="725" width="0.2402%" height="15" fill="rgb(230,116,27)" fg:x="10" fg:w="3"/><text x="1.0506%" y="735.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="0.8006%" y="709" width="0.2402%" height="15" fill="rgb(228,99,48)" fg:x="10" fg:w="3"/><text x="1.0506%" y="719.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="0.8006%" y="693" width="0.2402%" height="15" fill="rgb(253,11,6)" fg:x="10" fg:w="3"/><text x="1.0506%" y="703.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="0.8006%" y="677" width="0.2402%" height="15" fill="rgb(247,143,39)" fg:x="10" fg:w="3"/><text x="1.0506%" y="687.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="0.8006%" y="661" width="0.2402%" height="15" fill="rgb(236,97,10)" fg:x="10" fg:w="3"/><text x="1.0506%" y="671.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="0.8006%" y="645" width="0.2402%" height="15" fill="rgb(233,208,19)" fg:x="10" fg:w="3"/><text x="1.0506%" y="655.50"></text></g><g><title>_dl_signal_error (1 samples, 0.08%)</title><rect x="0.9608%" y="629" width="0.0801%" height="15" fill="rgb(216,164,2)" fg:x="12" fg:w="1"/><text x="1.2108%" y="639.50"></text></g><g><title>_dl_exception_create (1 samples, 0.08%)</title><rect x="0.9608%" y="613" width="0.0801%" height="15" fill="rgb(220,129,5)" fg:x="12" fg:w="1"/><text x="1.2108%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="1.1209%" y="677" width="0.2402%" height="15" fill="rgb(242,17,10)" fg:x="14" fg:w="3"/><text x="1.3709%" y="687.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="1.1209%" y="661" width="0.2402%" height="15" fill="rgb(242,107,0)" fg:x="14" fg:w="3"/><text x="1.3709%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="1.1209%" y="645" width="0.2402%" height="15" fill="rgb(251,28,31)" fg:x="14" fg:w="3"/><text x="1.3709%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="1.1209%" y="629" width="0.2402%" height="15" fill="rgb(233,223,10)" fg:x="14" fg:w="3"/><text x="1.3709%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="1.2010%" y="613" width="0.1601%" height="15" fill="rgb(215,21,27)" fg:x="15" fg:w="2"/><text x="1.4510%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="1.2010%" y="597" width="0.1601%" height="15" fill="rgb(232,23,21)" fg:x="15" fg:w="2"/><text x="1.4510%" y="607.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="1.2010%" y="581" width="0.1601%" height="15" fill="rgb(244,5,23)" fg:x="15" fg:w="2"/><text x="1.4510%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="1.1209%" y="693" width="0.3203%" height="15" fill="rgb(226,81,46)" fg:x="14" fg:w="4"/><text x="1.3709%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.3611%" y="677" width="0.0801%" height="15" fill="rgb(247,70,30)" fg:x="17" fg:w="1"/><text x="1.6111%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.3611%" y="661" width="0.0801%" height="15" fill="rgb(212,68,19)" fg:x="17" fg:w="1"/><text x="1.6111%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.3611%" y="645" width="0.0801%" height="15" fill="rgb(240,187,13)" fg:x="17" fg:w="1"/><text x="1.6111%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.4412%" y="661" width="0.0801%" height="15" fill="rgb(223,113,26)" fg:x="18" fg:w="1"/><text x="1.6912%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.5212%" y="645" width="0.0801%" height="15" fill="rgb(206,192,2)" fg:x="19" fg:w="1"/><text x="1.7712%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.5212%" y="629" width="0.0801%" height="15" fill="rgb(241,108,4)" fg:x="19" fg:w="1"/><text x="1.7712%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.5212%" y="613" width="0.0801%" height="15" fill="rgb(247,173,49)" fg:x="19" fg:w="1"/><text x="1.7712%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.5212%" y="597" width="0.0801%" height="15" fill="rgb(224,114,35)" fg:x="19" fg:w="1"/><text x="1.7712%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.6013%" y="613" width="0.0801%" height="15" fill="rgb(245,159,27)" fg:x="20" fg:w="1"/><text x="1.8513%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.6013%" y="597" width="0.0801%" height="15" fill="rgb(245,172,44)" fg:x="20" fg:w="1"/><text x="1.8513%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.6013%" y="581" width="0.0801%" height="15" fill="rgb(236,23,11)" fg:x="20" fg:w="1"/><text x="1.8513%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="1.1209%" y="709" width="0.6405%" height="15" fill="rgb(205,117,38)" fg:x="14" fg:w="8"/><text x="1.3709%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.4412%" y="693" width="0.3203%" height="15" fill="rgb(237,72,25)" fg:x="18" fg:w="4"/><text x="1.6912%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.4412%" y="677" width="0.3203%" height="15" fill="rgb(244,70,9)" fg:x="18" fg:w="4"/><text x="1.6912%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="1.5212%" y="661" width="0.2402%" height="15" fill="rgb(217,125,39)" fg:x="19" fg:w="3"/><text x="1.7712%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.6013%" y="645" width="0.1601%" height="15" fill="rgb(235,36,10)" fg:x="20" fg:w="2"/><text x="1.8513%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.6013%" y="629" width="0.1601%" height="15" fill="rgb(251,123,47)" fg:x="20" fg:w="2"/><text x="1.8513%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.6813%" y="613" width="0.0801%" height="15" fill="rgb(221,13,13)" fg:x="21" fg:w="1"/><text x="1.9313%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.6813%" y="597" width="0.0801%" height="15" fill="rgb(238,131,9)" fg:x="21" fg:w="1"/><text x="1.9313%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.6813%" y="581" width="0.0801%" height="15" fill="rgb(211,50,8)" fg:x="21" fg:w="1"/><text x="1.9313%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.7614%" y="677" width="0.0801%" height="15" fill="rgb(245,182,24)" fg:x="22" fg:w="1"/><text x="2.0114%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8415%" y="661" width="0.0801%" height="15" fill="rgb(242,14,37)" fg:x="23" fg:w="1"/><text x="2.0915%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.9215%" y="661" width="0.0801%" height="15" fill="rgb(246,228,12)" fg:x="24" fg:w="1"/><text x="2.1715%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.0016%" y="645" width="0.0801%" height="15" fill="rgb(213,55,15)" fg:x="25" fg:w="1"/><text x="2.2516%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0817%" y="597" width="0.0801%" height="15" fill="rgb(209,9,3)" fg:x="26" fg:w="1"/><text x="2.3317%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="1.7614%" y="709" width="0.4804%" height="15" fill="rgb(230,59,30)" fg:x="22" fg:w="6"/><text x="2.0114%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="1.7614%" y="693" width="0.4804%" height="15" fill="rgb(209,121,21)" fg:x="22" fg:w="6"/><text x="2.0114%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.8415%" y="677" width="0.4003%" height="15" fill="rgb(220,109,13)" fg:x="23" fg:w="5"/><text x="2.0915%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.0016%" y="661" width="0.2402%" height="15" fill="rgb(232,18,1)" fg:x="25" fg:w="3"/><text x="2.2516%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.0817%" y="645" width="0.1601%" height="15" fill="rgb(215,41,42)" fg:x="26" fg:w="2"/><text x="2.3317%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="2.0817%" y="629" width="0.1601%" height="15" fill="rgb(224,123,36)" fg:x="26" fg:w="2"/><text x="2.3317%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="2.0817%" y="613" width="0.1601%" height="15" fill="rgb(240,125,3)" fg:x="26" fg:w="2"/><text x="2.3317%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.1617%" y="597" width="0.0801%" height="15" fill="rgb(205,98,50)" fg:x="27" fg:w="1"/><text x="2.4117%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.2418%" y="613" width="0.0801%" height="15" fill="rgb(205,185,37)" fg:x="28" fg:w="1"/><text x="2.4918%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.2418%" y="597" width="0.0801%" height="15" fill="rgb(238,207,15)" fg:x="28" fg:w="1"/><text x="2.4918%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.2418%" y="581" width="0.0801%" height="15" fill="rgb(213,199,42)" fg:x="28" fg:w="1"/><text x="2.4918%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.2418%" y="565" width="0.0801%" height="15" fill="rgb(235,201,11)" fg:x="28" fg:w="1"/><text x="2.4918%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.2418%" y="549" width="0.0801%" height="15" fill="rgb(207,46,11)" fg:x="28" fg:w="1"/><text x="2.4918%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.4019%" y="597" width="0.1601%" height="15" fill="rgb(241,35,35)" fg:x="30" fg:w="2"/><text x="2.6519%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4820%" y="581" width="0.0801%" height="15" fill="rgb(243,32,47)" fg:x="31" fg:w="1"/><text x="2.7320%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4820%" y="565" width="0.0801%" height="15" fill="rgb(247,202,23)" fg:x="31" fg:w="1"/><text x="2.7320%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4820%" y="549" width="0.0801%" height="15" fill="rgb(219,102,11)" fg:x="31" fg:w="1"/><text x="2.7320%" y="559.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.52%)</title><rect x="1.1209%" y="773" width="1.5212%" height="15" fill="rgb(243,110,44)" fg:x="14" fg:w="19"/><text x="1.3709%" y="783.50"></text></g><g><title>engine::session::Session::save_entity_changes (19 samples, 1.52%)</title><rect x="1.1209%" y="757" width="1.5212%" height="15" fill="rgb(222,74,54)" fg:x="14" fg:w="19"/><text x="1.3709%" y="767.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (19 samples, 1.52%)</title><rect x="1.1209%" y="741" width="1.5212%" height="15" fill="rgb(216,99,12)" fg:x="14" fg:w="19"/><text x="1.3709%" y="751.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (19 samples, 1.52%)</title><rect x="1.1209%" y="725" width="1.5212%" height="15" fill="rgb(226,22,26)" fg:x="14" fg:w="19"/><text x="1.3709%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="2.2418%" y="709" width="0.4003%" height="15" fill="rgb(217,163,10)" fg:x="28" fg:w="5"/><text x="2.4918%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="2.2418%" y="693" width="0.4003%" height="15" fill="rgb(213,25,53)" fg:x="28" fg:w="5"/><text x="2.4918%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="2.2418%" y="677" width="0.4003%" height="15" fill="rgb(252,105,26)" fg:x="28" fg:w="5"/><text x="2.4918%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="2.2418%" y="661" width="0.4003%" height="15" fill="rgb(220,39,43)" fg:x="28" fg:w="5"/><text x="2.4918%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="2.2418%" y="645" width="0.4003%" height="15" fill="rgb(229,68,48)" fg:x="28" fg:w="5"/><text x="2.4918%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="2.2418%" y="629" width="0.4003%" height="15" fill="rgb(252,8,32)" fg:x="28" fg:w="5"/><text x="2.4918%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="2.3219%" y="613" width="0.3203%" height="15" fill="rgb(223,20,43)" fg:x="29" fg:w="4"/><text x="2.5719%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5620%" y="597" width="0.0801%" height="15" fill="rgb(229,81,49)" fg:x="32" fg:w="1"/><text x="2.8120%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="2.6421%" y="757" width="0.0801%" height="15" fill="rgb(236,28,36)" fg:x="33" fg:w="1"/><text x="2.8921%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="2.6421%" y="741" width="0.0801%" height="15" fill="rgb(249,185,26)" fg:x="33" fg:w="1"/><text x="2.8921%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="2.6421%" y="725" width="0.0801%" height="15" fill="rgb(249,174,33)" fg:x="33" fg:w="1"/><text x="2.8921%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="2.6421%" y="709" width="0.0801%" height="15" fill="rgb(233,201,37)" fg:x="33" fg:w="1"/><text x="2.8921%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="2.6421%" y="693" width="0.0801%" height="15" fill="rgb(221,78,26)" fg:x="33" fg:w="1"/><text x="2.8921%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.6421%" y="677" width="0.0801%" height="15" fill="rgb(250,127,30)" fg:x="33" fg:w="1"/><text x="2.8921%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="2.6421%" y="661" width="0.0801%" height="15" fill="rgb(230,49,44)" fg:x="33" fg:w="1"/><text x="2.8921%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="2.6421%" y="645" width="0.0801%" height="15" fill="rgb(229,67,23)" fg:x="33" fg:w="1"/><text x="2.8921%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="2.6421%" y="629" width="0.0801%" height="15" fill="rgb(249,83,47)" fg:x="33" fg:w="1"/><text x="2.8921%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="2.7222%" y="741" width="0.0801%" height="15" fill="rgb(215,43,3)" fg:x="34" fg:w="1"/><text x="2.9722%" y="751.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7222%" y="725" width="0.0801%" height="15" fill="rgb(238,154,13)" fg:x="34" fg:w="1"/><text x="2.9722%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.7222%" y="709" width="0.0801%" height="15" fill="rgb(219,56,2)" fg:x="34" fg:w="1"/><text x="2.9722%" y="719.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="2.6421%" y="773" width="0.2402%" height="15" fill="rgb(233,0,4)" fg:x="33" fg:w="3"/><text x="2.8921%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="2.7222%" y="757" width="0.1601%" height="15" fill="rgb(235,30,7)" fg:x="34" fg:w="2"/><text x="2.9722%" y="767.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="2.8022%" y="741" width="0.0801%" height="15" fill="rgb(250,79,13)" fg:x="35" fg:w="1"/><text x="3.0522%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="2.8022%" y="725" width="0.0801%" height="15" fill="rgb(211,146,34)" fg:x="35" fg:w="1"/><text x="3.0522%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="2.8022%" y="709" width="0.0801%" height="15" fill="rgb(228,22,38)" fg:x="35" fg:w="1"/><text x="3.0522%" y="719.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="2.8022%" y="693" width="0.0801%" height="15" fill="rgb(235,168,5)" fg:x="35" fg:w="1"/><text x="3.0522%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="2.8022%" y="677" width="0.0801%" height="15" fill="rgb(221,155,16)" fg:x="35" fg:w="1"/><text x="3.0522%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.8823%" y="709" width="0.0801%" height="15" fill="rgb(215,215,53)" fg:x="36" fg:w="1"/><text x="3.1323%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="2.8823%" y="693" width="0.0801%" height="15" fill="rgb(223,4,10)" fg:x="36" fg:w="1"/><text x="3.1323%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="2.8823%" y="677" width="0.0801%" height="15" fill="rgb(234,103,6)" fg:x="36" fg:w="1"/><text x="3.1323%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.8823%" y="661" width="0.0801%" height="15" fill="rgb(227,97,0)" fg:x="36" fg:w="1"/><text x="3.1323%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8823%" y="645" width="0.0801%" height="15" fill="rgb(234,150,53)" fg:x="36" fg:w="1"/><text x="3.1323%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.8823%" y="629" width="0.0801%" height="15" fill="rgb(228,201,54)" fg:x="36" fg:w="1"/><text x="3.1323%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8823%" y="613" width="0.0801%" height="15" fill="rgb(222,22,37)" fg:x="36" fg:w="1"/><text x="3.1323%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="2.8823%" y="597" width="0.0801%" height="15" fill="rgb(237,53,32)" fg:x="36" fg:w="1"/><text x="3.1323%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8823%" y="581" width="0.0801%" height="15" fill="rgb(233,25,53)" fg:x="36" fg:w="1"/><text x="3.1323%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="2.8823%" y="565" width="0.0801%" height="15" fill="rgb(210,40,34)" fg:x="36" fg:w="1"/><text x="3.1323%" y="575.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="2.8823%" y="773" width="0.1601%" height="15" fill="rgb(241,220,44)" fg:x="36" fg:w="2"/><text x="3.1323%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="2.8823%" y="757" width="0.1601%" height="15" fill="rgb(235,28,35)" fg:x="36" fg:w="2"/><text x="3.1323%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="2.8823%" y="741" width="0.1601%" height="15" fill="rgb(210,56,17)" fg:x="36" fg:w="2"/><text x="3.1323%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="2.8823%" y="725" width="0.1601%" height="15" fill="rgb(224,130,29)" fg:x="36" fg:w="2"/><text x="3.1323%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="2.9624%" y="709" width="0.0801%" height="15" fill="rgb(235,212,8)" fg:x="37" fg:w="1"/><text x="3.2124%" y="719.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="2.9624%" y="693" width="0.0801%" height="15" fill="rgb(223,33,50)" fg:x="37" fg:w="1"/><text x="3.2124%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.2026%" y="757" width="0.0801%" height="15" fill="rgb(219,149,13)" fg:x="40" fg:w="1"/><text x="3.4526%" y="767.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.2826%" y="709" width="0.0801%" height="15" fill="rgb(250,156,29)" fg:x="41" fg:w="1"/><text x="3.5326%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.2826%" y="693" width="0.0801%" height="15" fill="rgb(216,193,19)" fg:x="41" fg:w="1"/><text x="3.5326%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.2826%" y="677" width="0.0801%" height="15" fill="rgb(216,135,14)" fg:x="41" fg:w="1"/><text x="3.5326%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.2826%" y="661" width="0.0801%" height="15" fill="rgb(241,47,5)" fg:x="41" fg:w="1"/><text x="3.5326%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.2826%" y="645" width="0.0801%" height="15" fill="rgb(233,42,35)" fg:x="41" fg:w="1"/><text x="3.5326%" y="655.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="3.2826%" y="629" width="0.0801%" height="15" fill="rgb(231,13,6)" fg:x="41" fg:w="1"/><text x="3.5326%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="3.2826%" y="613" width="0.0801%" height="15" fill="rgb(207,181,40)" fg:x="41" fg:w="1"/><text x="3.5326%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.2826%" y="597" width="0.0801%" height="15" fill="rgb(254,173,49)" fg:x="41" fg:w="1"/><text x="3.5326%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.2826%" y="581" width="0.0801%" height="15" fill="rgb(221,1,38)" fg:x="41" fg:w="1"/><text x="3.5326%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.2826%" y="565" width="0.0801%" height="15" fill="rgb(206,124,46)" fg:x="41" fg:w="1"/><text x="3.5326%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.2826%" y="549" width="0.0801%" height="15" fill="rgb(249,21,11)" fg:x="41" fg:w="1"/><text x="3.5326%" y="559.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="3.3627%" y="629" width="0.0801%" height="15" fill="rgb(222,201,40)" fg:x="42" fg:w="1"/><text x="3.6127%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="3.3627%" y="613" width="0.0801%" height="15" fill="rgb(235,61,29)" fg:x="42" fg:w="1"/><text x="3.6127%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.3627%" y="597" width="0.0801%" height="15" fill="rgb(219,207,3)" fg:x="42" fg:w="1"/><text x="3.6127%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3627%" y="581" width="0.0801%" height="15" fill="rgb(222,56,46)" fg:x="42" fg:w="1"/><text x="3.6127%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3627%" y="565" width="0.0801%" height="15" fill="rgb(239,76,54)" fg:x="42" fg:w="1"/><text x="3.6127%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3627%" y="549" width="0.0801%" height="15" fill="rgb(231,124,27)" fg:x="42" fg:w="1"/><text x="3.6127%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3627%" y="533" width="0.0801%" height="15" fill="rgb(249,195,6)" fg:x="42" fg:w="1"/><text x="3.6127%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3627%" y="517" width="0.0801%" height="15" fill="rgb(237,174,47)" fg:x="42" fg:w="1"/><text x="3.6127%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4428%" y="597" width="0.0801%" height="15" fill="rgb(206,201,31)" fg:x="43" fg:w="1"/><text x="3.6928%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4428%" y="581" width="0.0801%" height="15" fill="rgb(231,57,52)" fg:x="43" fg:w="1"/><text x="3.6928%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4428%" y="565" width="0.0801%" height="15" fill="rgb(248,177,22)" fg:x="43" fg:w="1"/><text x="3.6928%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4428%" y="549" width="0.0801%" height="15" fill="rgb(215,211,37)" fg:x="43" fg:w="1"/><text x="3.6928%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4428%" y="533" width="0.0801%" height="15" fill="rgb(241,128,51)" fg:x="43" fg:w="1"/><text x="3.6928%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4428%" y="517" width="0.0801%" height="15" fill="rgb(227,165,31)" fg:x="43" fg:w="1"/><text x="3.6928%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="3.2826%" y="757" width="0.3203%" height="15" fill="rgb(228,167,24)" fg:x="41" fg:w="4"/><text x="3.5326%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="3.2826%" y="741" width="0.3203%" height="15" fill="rgb(228,143,12)" fg:x="41" fg:w="4"/><text x="3.5326%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="3.2826%" y="725" width="0.3203%" height="15" fill="rgb(249,149,8)" fg:x="41" fg:w="4"/><text x="3.5326%" y="735.50"></text></g><g><title>plugins_core::build::Build::leads_to (3 samples, 0.24%)</title><rect x="3.3627%" y="709" width="0.2402%" height="15" fill="rgb(243,35,44)" fg:x="42" fg:w="3"/><text x="3.6127%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="3.3627%" y="693" width="0.2402%" height="15" fill="rgb(246,89,9)" fg:x="42" fg:w="3"/><text x="3.6127%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="3.3627%" y="677" width="0.2402%" height="15" fill="rgb(233,213,13)" fg:x="42" fg:w="3"/><text x="3.6127%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="3.3627%" y="661" width="0.2402%" height="15" fill="rgb(233,141,41)" fg:x="42" fg:w="3"/><text x="3.6127%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="3.3627%" y="645" width="0.2402%" height="15" fill="rgb(239,167,4)" fg:x="42" fg:w="3"/><text x="3.6127%" y="655.50"></text></g><g><title>kernel::model::scopes::save_props (2 samples, 0.16%)</title><rect x="3.4428%" y="629" width="0.1601%" height="15" fill="rgb(209,217,16)" fg:x="43" fg:w="2"/><text x="3.6928%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (2 samples, 0.16%)</title><rect x="3.4428%" y="613" width="0.1601%" height="15" fill="rgb(219,88,35)" fg:x="43" fg:w="2"/><text x="3.6928%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="3.5228%" y="597" width="0.0801%" height="15" fill="rgb(220,193,23)" fg:x="44" fg:w="1"/><text x="3.7728%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.5228%" y="581" width="0.0801%" height="15" fill="rgb(230,90,52)" fg:x="44" fg:w="1"/><text x="3.7728%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.5228%" y="565" width="0.0801%" height="15" fill="rgb(252,106,19)" fg:x="44" fg:w="1"/><text x="3.7728%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.5228%" y="549" width="0.0801%" height="15" fill="rgb(206,74,20)" fg:x="44" fg:w="1"/><text x="3.7728%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.5228%" y="533" width="0.0801%" height="15" fill="rgb(230,138,44)" fg:x="44" fg:w="1"/><text x="3.7728%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.5228%" y="517" width="0.0801%" height="15" fill="rgb(235,182,43)" fg:x="44" fg:w="1"/><text x="3.7728%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.5228%" y="501" width="0.0801%" height="15" fill="rgb(242,16,51)" fg:x="44" fg:w="1"/><text x="3.7728%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.6029%" y="725" width="0.0801%" height="15" fill="rgb(248,9,4)" fg:x="45" fg:w="1"/><text x="3.8529%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="3.6029%" y="709" width="0.0801%" height="15" fill="rgb(210,31,22)" fg:x="45" fg:w="1"/><text x="3.8529%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="3.6029%" y="693" width="0.0801%" height="15" fill="rgb(239,54,39)" fg:x="45" fg:w="1"/><text x="3.8529%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.6829%" y="645" width="0.0801%" height="15" fill="rgb(230,99,41)" fg:x="46" fg:w="1"/><text x="3.9329%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.6829%" y="629" width="0.0801%" height="15" fill="rgb(253,106,12)" fg:x="46" fg:w="1"/><text x="3.9329%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.6829%" y="613" width="0.0801%" height="15" fill="rgb(213,46,41)" fg:x="46" fg:w="1"/><text x="3.9329%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.6829%" y="597" width="0.0801%" height="15" fill="rgb(215,133,35)" fg:x="46" fg:w="1"/><text x="3.9329%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.7630%" y="581" width="0.0801%" height="15" fill="rgb(213,28,5)" fg:x="47" fg:w="1"/><text x="4.0130%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.7630%" y="565" width="0.0801%" height="15" fill="rgb(215,77,49)" fg:x="47" fg:w="1"/><text x="4.0130%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.8431%" y="581" width="0.0801%" height="15" fill="rgb(248,100,22)" fg:x="48" fg:w="1"/><text x="4.0931%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="3.6829%" y="677" width="0.3203%" height="15" fill="rgb(208,67,9)" fg:x="46" fg:w="4"/><text x="3.9329%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="3.6829%" y="661" width="0.3203%" height="15" fill="rgb(219,133,21)" fg:x="46" fg:w="4"/><text x="3.9329%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="3.7630%" y="645" width="0.2402%" height="15" fill="rgb(246,46,29)" fg:x="47" fg:w="3"/><text x="4.0130%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="3.7630%" y="629" width="0.2402%" height="15" fill="rgb(246,185,52)" fg:x="47" fg:w="3"/><text x="4.0130%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="3.7630%" y="613" width="0.2402%" height="15" fill="rgb(252,136,11)" fg:x="47" fg:w="3"/><text x="4.0130%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="3.7630%" y="597" width="0.2402%" height="15" fill="rgb(219,138,53)" fg:x="47" fg:w="3"/><text x="4.0130%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.9231%" y="581" width="0.0801%" height="15" fill="rgb(211,51,23)" fg:x="49" fg:w="1"/><text x="4.1731%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.9231%" y="565" width="0.0801%" height="15" fill="rgb(247,221,28)" fg:x="49" fg:w="1"/><text x="4.1731%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.9231%" y="549" width="0.0801%" height="15" fill="rgb(251,222,45)" fg:x="49" fg:w="1"/><text x="4.1731%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="3.6829%" y="693" width="0.4003%" height="15" fill="rgb(217,162,53)" fg:x="46" fg:w="5"/><text x="3.9329%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.0032%" y="677" width="0.0801%" height="15" fill="rgb(229,93,14)" fg:x="50" fg:w="1"/><text x="4.2532%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.0032%" y="661" width="0.0801%" height="15" fill="rgb(209,67,49)" fg:x="50" fg:w="1"/><text x="4.2532%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.0032%" y="645" width="0.0801%" height="15" fill="rgb(213,87,29)" fg:x="50" fg:w="1"/><text x="4.2532%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.0032%" y="629" width="0.0801%" height="15" fill="rgb(205,151,52)" fg:x="50" fg:w="1"/><text x="4.2532%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.0032%" y="613" width="0.0801%" height="15" fill="rgb(253,215,39)" fg:x="50" fg:w="1"/><text x="4.2532%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.0833%" y="645" width="0.0801%" height="15" fill="rgb(221,220,41)" fg:x="51" fg:w="1"/><text x="4.3333%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.1633%" y="629" width="0.0801%" height="15" fill="rgb(218,133,21)" fg:x="52" fg:w="1"/><text x="4.4133%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.2434%" y="613" width="0.0801%" height="15" fill="rgb(221,193,43)" fg:x="53" fg:w="1"/><text x="4.4934%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="4.0833%" y="693" width="0.3203%" height="15" fill="rgb(240,128,52)" fg:x="51" fg:w="4"/><text x="4.3333%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="4.0833%" y="677" width="0.3203%" height="15" fill="rgb(253,114,12)" fg:x="51" fg:w="4"/><text x="4.3333%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="4.0833%" y="661" width="0.3203%" height="15" fill="rgb(215,223,47)" fg:x="51" fg:w="4"/><text x="4.3333%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.1633%" y="645" width="0.2402%" height="15" fill="rgb(248,225,23)" fg:x="52" fg:w="3"/><text x="4.4133%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.2434%" y="629" width="0.1601%" height="15" fill="rgb(250,108,0)" fg:x="53" fg:w="2"/><text x="4.4934%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.3235%" y="613" width="0.0801%" height="15" fill="rgb(228,208,7)" fg:x="54" fg:w="1"/><text x="4.5735%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.3235%" y="597" width="0.0801%" height="15" fill="rgb(244,45,10)" fg:x="54" fg:w="1"/><text x="4.5735%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.3235%" y="581" width="0.0801%" height="15" fill="rgb(207,125,25)" fg:x="54" fg:w="1"/><text x="4.5735%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.4035%" y="613" width="0.1601%" height="15" fill="rgb(210,195,18)" fg:x="55" fg:w="2"/><text x="4.6535%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="4.4035%" y="645" width="0.2402%" height="15" fill="rgb(249,80,12)" fg:x="55" fg:w="3"/><text x="4.6535%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="4.4035%" y="629" width="0.2402%" height="15" fill="rgb(221,65,9)" fg:x="55" fg:w="3"/><text x="4.6535%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.5637%" y="613" width="0.0801%" height="15" fill="rgb(235,49,36)" fg:x="57" fg:w="1"/><text x="4.8137%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.5637%" y="597" width="0.0801%" height="15" fill="rgb(225,32,20)" fg:x="57" fg:w="1"/><text x="4.8137%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="4.5637%" y="581" width="0.0801%" height="15" fill="rgb(215,141,46)" fg:x="57" fg:w="1"/><text x="4.8137%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.6437%" y="629" width="0.0801%" height="15" fill="rgb(250,160,47)" fg:x="58" fg:w="1"/><text x="4.8937%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.7238%" y="597" width="0.0801%" height="15" fill="rgb(216,222,40)" fg:x="59" fg:w="1"/><text x="4.9738%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.7238%" y="581" width="0.0801%" height="15" fill="rgb(234,217,39)" fg:x="59" fg:w="1"/><text x="4.9738%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.7238%" y="565" width="0.0801%" height="15" fill="rgb(207,178,40)" fg:x="59" fg:w="1"/><text x="4.9738%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8839%" y="565" width="0.0801%" height="15" fill="rgb(221,136,13)" fg:x="61" fg:w="1"/><text x="5.1339%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8839%" y="549" width="0.0801%" height="15" fill="rgb(249,199,10)" fg:x="61" fg:w="1"/><text x="5.1339%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8839%" y="533" width="0.0801%" height="15" fill="rgb(249,222,13)" fg:x="61" fg:w="1"/><text x="5.1339%" y="543.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.60%)</title><rect x="3.6029%" y="757" width="1.6013%" height="15" fill="rgb(244,185,38)" fg:x="45" fg:w="20"/><text x="3.8529%" y="767.50"></text></g><g><title>engine::session::Session::save_entity_changes (20 samples, 1.60%)</title><rect x="3.6029%" y="741" width="1.6013%" height="15" fill="rgb(236,202,9)" fg:x="45" fg:w="20"/><text x="3.8529%" y="751.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (19 samples, 1.52%)</title><rect x="3.6829%" y="725" width="1.5212%" height="15" fill="rgb(250,229,37)" fg:x="46" fg:w="19"/><text x="3.9329%" y="735.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (19 samples, 1.52%)</title><rect x="3.6829%" y="709" width="1.5212%" height="15" fill="rgb(206,174,23)" fg:x="46" fg:w="19"/><text x="3.9329%" y="719.50"></text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.80%)</title><rect x="4.4035%" y="693" width="0.8006%" height="15" fill="rgb(211,33,43)" fg:x="55" fg:w="10"/><text x="4.6535%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.80%)</title><rect x="4.4035%" y="677" width="0.8006%" height="15" fill="rgb(245,58,50)" fg:x="55" fg:w="10"/><text x="4.6535%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="4.4035%" y="661" width="0.8006%" height="15" fill="rgb(244,68,36)" fg:x="55" fg:w="10"/><text x="4.6535%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="4.6437%" y="645" width="0.5604%" height="15" fill="rgb(232,229,15)" fg:x="58" fg:w="7"/><text x="4.8937%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="4.7238%" y="629" width="0.4804%" height="15" fill="rgb(254,30,23)" fg:x="59" fg:w="6"/><text x="4.9738%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="4.7238%" y="613" width="0.4804%" height="15" fill="rgb(235,160,14)" fg:x="59" fg:w="6"/><text x="4.9738%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="4.8038%" y="597" width="0.4003%" height="15" fill="rgb(212,155,44)" fg:x="60" fg:w="5"/><text x="5.0538%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="4.8839%" y="581" width="0.3203%" height="15" fill="rgb(226,2,50)" fg:x="61" fg:w="4"/><text x="5.1339%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="4.9640%" y="565" width="0.2402%" height="15" fill="rgb(234,177,6)" fg:x="62" fg:w="3"/><text x="5.2140%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="4.9640%" y="549" width="0.2402%" height="15" fill="rgb(217,24,9)" fg:x="62" fg:w="3"/><text x="5.2140%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="4.9640%" y="533" width="0.2402%" height="15" fill="rgb(220,13,46)" fg:x="62" fg:w="3"/><text x="5.2140%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="4.9640%" y="517" width="0.2402%" height="15" fill="rgb(239,221,27)" fg:x="62" fg:w="3"/><text x="5.2140%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.0440%" y="501" width="0.1601%" height="15" fill="rgb(222,198,25)" fg:x="63" fg:w="2"/><text x="5.2940%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.0440%" y="485" width="0.1601%" height="15" fill="rgb(211,99,13)" fg:x="63" fg:w="2"/><text x="5.2940%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1241%" y="469" width="0.0801%" height="15" fill="rgb(232,111,31)" fg:x="64" fg:w="1"/><text x="5.3741%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.2042%" y="693" width="0.0801%" height="15" fill="rgb(245,82,37)" fg:x="65" fg:w="1"/><text x="5.4542%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="5.2042%" y="677" width="0.0801%" height="15" fill="rgb(227,149,46)" fg:x="65" fg:w="1"/><text x="5.4542%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.2042%" y="661" width="0.0801%" height="15" fill="rgb(218,36,50)" fg:x="65" fg:w="1"/><text x="5.4542%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="5.2042%" y="645" width="0.0801%" height="15" fill="rgb(226,80,48)" fg:x="65" fg:w="1"/><text x="5.4542%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.2042%" y="629" width="0.0801%" height="15" fill="rgb(238,224,15)" fg:x="65" fg:w="1"/><text x="5.4542%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.2042%" y="613" width="0.0801%" height="15" fill="rgb(241,136,10)" fg:x="65" fg:w="1"/><text x="5.4542%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.2042%" y="597" width="0.0801%" height="15" fill="rgb(208,32,45)" fg:x="65" fg:w="1"/><text x="5.4542%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.2042%" y="581" width="0.0801%" height="15" fill="rgb(207,135,9)" fg:x="65" fg:w="1"/><text x="5.4542%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.2042%" y="565" width="0.0801%" height="15" fill="rgb(206,86,44)" fg:x="65" fg:w="1"/><text x="5.4542%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.2042%" y="549" width="0.0801%" height="15" fill="rgb(245,177,15)" fg:x="65" fg:w="1"/><text x="5.4542%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.2042%" y="533" width="0.0801%" height="15" fill="rgb(206,64,50)" fg:x="65" fg:w="1"/><text x="5.4542%" y="543.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="5.2042%" y="709" width="0.1601%" height="15" fill="rgb(234,36,40)" fg:x="65" fg:w="2"/><text x="5.4542%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="5.2842%" y="693" width="0.0801%" height="15" fill="rgb(213,64,8)" fg:x="66" fg:w="1"/><text x="5.5342%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="5.2842%" y="677" width="0.0801%" height="15" fill="rgb(210,75,36)" fg:x="66" fg:w="1"/><text x="5.5342%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.2842%" y="661" width="0.0801%" height="15" fill="rgb(229,88,21)" fg:x="66" fg:w="1"/><text x="5.5342%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.2842%" y="645" width="0.0801%" height="15" fill="rgb(252,204,47)" fg:x="66" fg:w="1"/><text x="5.5342%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.2842%" y="629" width="0.0801%" height="15" fill="rgb(208,77,27)" fg:x="66" fg:w="1"/><text x="5.5342%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.2842%" y="613" width="0.0801%" height="15" fill="rgb(221,76,26)" fg:x="66" fg:w="1"/><text x="5.5342%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.2842%" y="597" width="0.0801%" height="15" fill="rgb(225,139,18)" fg:x="66" fg:w="1"/><text x="5.5342%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="5.2842%" y="581" width="0.0801%" height="15" fill="rgb(230,137,11)" fg:x="66" fg:w="1"/><text x="5.5342%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.2842%" y="565" width="0.0801%" height="15" fill="rgb(212,28,1)" fg:x="66" fg:w="1"/><text x="5.5342%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.2842%" y="549" width="0.0801%" height="15" fill="rgb(248,164,17)" fg:x="66" fg:w="1"/><text x="5.5342%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.2842%" y="533" width="0.0801%" height="15" fill="rgb(222,171,42)" fg:x="66" fg:w="1"/><text x="5.5342%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.2842%" y="517" width="0.0801%" height="15" fill="rgb(243,84,45)" fg:x="66" fg:w="1"/><text x="5.5342%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.2842%" y="501" width="0.0801%" height="15" fill="rgb(252,49,23)" fg:x="66" fg:w="1"/><text x="5.5342%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="5.2042%" y="741" width="0.2402%" height="15" fill="rgb(215,19,7)" fg:x="65" fg:w="3"/><text x="5.4542%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="5.2042%" y="725" width="0.2402%" height="15" fill="rgb(238,81,41)" fg:x="65" fg:w="3"/><text x="5.4542%" y="735.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.3643%" y="709" width="0.0801%" height="15" fill="rgb(210,199,37)" fg:x="67" fg:w="1"/><text x="5.6143%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3643%" y="693" width="0.0801%" height="15" fill="rgb(244,192,49)" fg:x="67" fg:w="1"/><text x="5.6143%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3643%" y="677" width="0.0801%" height="15" fill="rgb(226,211,11)" fg:x="67" fg:w="1"/><text x="5.6143%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="5.3643%" y="661" width="0.0801%" height="15" fill="rgb(236,162,54)" fg:x="67" fg:w="1"/><text x="5.6143%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3643%" y="645" width="0.0801%" height="15" fill="rgb(220,229,9)" fg:x="67" fg:w="1"/><text x="5.6143%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="5.4444%" y="725" width="0.0801%" height="15" fill="rgb(250,87,22)" fg:x="68" fg:w="1"/><text x="5.6944%" y="735.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4444%" y="709" width="0.0801%" height="15" fill="rgb(239,43,17)" fg:x="68" fg:w="1"/><text x="5.6944%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.4444%" y="693" width="0.0801%" height="15" fill="rgb(231,177,25)" fg:x="68" fg:w="1"/><text x="5.6944%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.4444%" y="677" width="0.0801%" height="15" fill="rgb(219,179,1)" fg:x="68" fg:w="1"/><text x="5.6944%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4444%" y="661" width="0.0801%" height="15" fill="rgb(238,219,53)" fg:x="68" fg:w="1"/><text x="5.6944%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.4444%" y="645" width="0.0801%" height="15" fill="rgb(232,167,36)" fg:x="68" fg:w="1"/><text x="5.6944%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4444%" y="629" width="0.0801%" height="15" fill="rgb(244,19,51)" fg:x="68" fg:w="1"/><text x="5.6944%" y="639.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="5.5244%" y="677" width="0.0801%" height="15" fill="rgb(224,6,22)" fg:x="69" fg:w="1"/><text x="5.7744%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.6045%" y="645" width="0.0801%" height="15" fill="rgb(224,145,5)" fg:x="70" fg:w="1"/><text x="5.8545%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.6045%" y="629" width="0.0801%" height="15" fill="rgb(234,130,49)" fg:x="70" fg:w="1"/><text x="5.8545%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6045%" y="613" width="0.0801%" height="15" fill="rgb(254,6,2)" fg:x="70" fg:w="1"/><text x="5.8545%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6045%" y="597" width="0.0801%" height="15" fill="rgb(208,96,46)" fg:x="70" fg:w="1"/><text x="5.8545%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6045%" y="581" width="0.0801%" height="15" fill="rgb(239,3,39)" fg:x="70" fg:w="1"/><text x="5.8545%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6045%" y="565" width="0.0801%" height="15" fill="rgb(233,210,1)" fg:x="70" fg:w="1"/><text x="5.8545%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.6045%" y="549" width="0.0801%" height="15" fill="rgb(244,137,37)" fg:x="70" fg:w="1"/><text x="5.8545%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.6045%" y="533" width="0.0801%" height="15" fill="rgb(240,136,2)" fg:x="70" fg:w="1"/><text x="5.8545%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.6045%" y="517" width="0.0801%" height="15" fill="rgb(239,18,37)" fg:x="70" fg:w="1"/><text x="5.8545%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.6045%" y="501" width="0.0801%" height="15" fill="rgb(218,185,22)" fg:x="70" fg:w="1"/><text x="5.8545%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.6045%" y="485" width="0.0801%" height="15" fill="rgb(225,218,4)" fg:x="70" fg:w="1"/><text x="5.8545%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.6045%" y="469" width="0.0801%" height="15" fill="rgb(230,182,32)" fg:x="70" fg:w="1"/><text x="5.8545%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.6045%" y="453" width="0.0801%" height="15" fill="rgb(242,56,43)" fg:x="70" fg:w="1"/><text x="5.8545%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.6045%" y="437" width="0.0801%" height="15" fill="rgb(233,99,24)" fg:x="70" fg:w="1"/><text x="5.8545%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.6045%" y="421" width="0.0801%" height="15" fill="rgb(234,209,42)" fg:x="70" fg:w="1"/><text x="5.8545%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.6045%" y="405" width="0.0801%" height="15" fill="rgb(227,7,12)" fg:x="70" fg:w="1"/><text x="5.8545%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.6045%" y="389" width="0.0801%" height="15" fill="rgb(245,203,43)" fg:x="70" fg:w="1"/><text x="5.8545%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.6045%" y="373" width="0.0801%" height="15" fill="rgb(238,205,33)" fg:x="70" fg:w="1"/><text x="5.8545%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="5.5244%" y="693" width="0.2402%" height="15" fill="rgb(231,56,7)" fg:x="69" fg:w="3"/><text x="5.7744%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="5.6045%" y="677" width="0.1601%" height="15" fill="rgb(244,186,29)" fg:x="70" fg:w="2"/><text x="5.8545%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="5.6045%" y="661" width="0.1601%" height="15" fill="rgb(234,111,31)" fg:x="70" fg:w="2"/><text x="5.8545%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.6845%" y="645" width="0.0801%" height="15" fill="rgb(241,149,10)" fg:x="71" fg:w="1"/><text x="5.9345%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.6845%" y="629" width="0.0801%" height="15" fill="rgb(249,206,44)" fg:x="71" fg:w="1"/><text x="5.9345%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.6845%" y="613" width="0.0801%" height="15" fill="rgb(251,153,30)" fg:x="71" fg:w="1"/><text x="5.9345%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.6845%" y="597" width="0.0801%" height="15" fill="rgb(239,152,38)" fg:x="71" fg:w="1"/><text x="5.9345%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="5.6845%" y="581" width="0.0801%" height="15" fill="rgb(249,139,47)" fg:x="71" fg:w="1"/><text x="5.9345%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.6845%" y="565" width="0.0801%" height="15" fill="rgb(244,64,35)" fg:x="71" fg:w="1"/><text x="5.9345%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="5.6845%" y="549" width="0.0801%" height="15" fill="rgb(216,46,15)" fg:x="71" fg:w="1"/><text x="5.9345%" y="559.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="5.5244%" y="725" width="0.3203%" height="15" fill="rgb(250,74,19)" fg:x="69" fg:w="4"/><text x="5.7744%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="5.5244%" y="709" width="0.3203%" height="15" fill="rgb(249,42,33)" fg:x="69" fg:w="4"/><text x="5.7744%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.7646%" y="693" width="0.0801%" height="15" fill="rgb(242,149,17)" fg:x="72" fg:w="1"/><text x="6.0146%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="5.7646%" y="677" width="0.0801%" height="15" fill="rgb(244,29,21)" fg:x="72" fg:w="1"/><text x="6.0146%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.7646%" y="661" width="0.0801%" height="15" fill="rgb(220,130,37)" fg:x="72" fg:w="1"/><text x="6.0146%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.7646%" y="645" width="0.0801%" height="15" fill="rgb(211,67,2)" fg:x="72" fg:w="1"/><text x="6.0146%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7646%" y="629" width="0.0801%" height="15" fill="rgb(235,68,52)" fg:x="72" fg:w="1"/><text x="6.0146%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.7646%" y="613" width="0.0801%" height="15" fill="rgb(246,142,3)" fg:x="72" fg:w="1"/><text x="6.0146%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7646%" y="597" width="0.0801%" height="15" fill="rgb(241,25,7)" fg:x="72" fg:w="1"/><text x="6.0146%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="5.7646%" y="581" width="0.0801%" height="15" fill="rgb(242,119,39)" fg:x="72" fg:w="1"/><text x="6.0146%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7646%" y="565" width="0.0801%" height="15" fill="rgb(241,98,45)" fg:x="72" fg:w="1"/><text x="6.0146%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (2 samples, 0.16%)</title><rect x="5.8447%" y="725" width="0.1601%" height="15" fill="rgb(254,28,30)" fg:x="73" fg:w="2"/><text x="6.0947%" y="735.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9247%" y="709" width="0.0801%" height="15" fill="rgb(241,142,54)" fg:x="74" fg:w="1"/><text x="6.1747%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9247%" y="693" width="0.0801%" height="15" fill="rgb(222,85,15)" fg:x="74" fg:w="1"/><text x="6.1747%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9247%" y="677" width="0.0801%" height="15" fill="rgb(210,85,47)" fg:x="74" fg:w="1"/><text x="6.1747%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.9247%" y="661" width="0.0801%" height="15" fill="rgb(224,206,25)" fg:x="74" fg:w="1"/><text x="6.1747%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.9247%" y="645" width="0.0801%" height="15" fill="rgb(243,201,19)" fg:x="74" fg:w="1"/><text x="6.1747%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.9247%" y="629" width="0.0801%" height="15" fill="rgb(236,59,4)" fg:x="74" fg:w="1"/><text x="6.1747%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9247%" y="613" width="0.0801%" height="15" fill="rgb(254,179,45)" fg:x="74" fg:w="1"/><text x="6.1747%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9247%" y="597" width="0.0801%" height="15" fill="rgb(226,14,10)" fg:x="74" fg:w="1"/><text x="6.1747%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.9247%" y="581" width="0.0801%" height="15" fill="rgb(244,27,41)" fg:x="74" fg:w="1"/><text x="6.1747%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.9247%" y="565" width="0.0801%" height="15" fill="rgb(235,35,32)" fg:x="74" fg:w="1"/><text x="6.1747%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.9247%" y="549" width="0.0801%" height="15" fill="rgb(218,68,31)" fg:x="74" fg:w="1"/><text x="6.1747%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.9247%" y="533" width="0.0801%" height="15" fill="rgb(207,120,37)" fg:x="74" fg:w="1"/><text x="6.1747%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9247%" y="517" width="0.0801%" height="15" fill="rgb(227,98,0)" fg:x="74" fg:w="1"/><text x="6.1747%" y="527.50"></text></g><g><title>plugins_core::build::Build::holding (11 samples, 0.88%)</title><rect x="5.2042%" y="757" width="0.8807%" height="15" fill="rgb(207,7,3)" fg:x="65" fg:w="11"/><text x="5.4542%" y="767.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.64%)</title><rect x="5.4444%" y="741" width="0.6405%" height="15" fill="rgb(206,98,19)" fg:x="68" fg:w="8"/><text x="5.6944%" y="751.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="6.0048%" y="725" width="0.0801%" height="15" fill="rgb(217,5,26)" fg:x="75" fg:w="1"/><text x="6.2548%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.0048%" y="709" width="0.0801%" height="15" fill="rgb(235,190,38)" fg:x="75" fg:w="1"/><text x="6.2548%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.0048%" y="693" width="0.0801%" height="15" fill="rgb(247,86,24)" fg:x="75" fg:w="1"/><text x="6.2548%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.0048%" y="677" width="0.0801%" height="15" fill="rgb(205,101,16)" fg:x="75" fg:w="1"/><text x="6.2548%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0048%" y="661" width="0.0801%" height="15" fill="rgb(246,168,33)" fg:x="75" fg:w="1"/><text x="6.2548%" y="671.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="6.0849%" y="757" width="0.0801%" height="15" fill="rgb(231,114,1)" fg:x="76" fg:w="1"/><text x="6.3349%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.0849%" y="741" width="0.0801%" height="15" fill="rgb(207,184,53)" fg:x="76" fg:w="1"/><text x="6.3349%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.0849%" y="725" width="0.0801%" height="15" fill="rgb(224,95,51)" fg:x="76" fg:w="1"/><text x="6.3349%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.0849%" y="709" width="0.0801%" height="15" fill="rgb(212,188,45)" fg:x="76" fg:w="1"/><text x="6.3349%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.0849%" y="693" width="0.0801%" height="15" fill="rgb(223,154,38)" fg:x="76" fg:w="1"/><text x="6.3349%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="6.0849%" y="677" width="0.0801%" height="15" fill="rgb(251,22,52)" fg:x="76" fg:w="1"/><text x="6.3349%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.0849%" y="661" width="0.0801%" height="15" fill="rgb(229,209,22)" fg:x="76" fg:w="1"/><text x="6.3349%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0849%" y="645" width="0.0801%" height="15" fill="rgb(234,138,34)" fg:x="76" fg:w="1"/><text x="6.3349%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0849%" y="629" width="0.0801%" height="15" fill="rgb(212,95,11)" fg:x="76" fg:w="1"/><text x="6.3349%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0849%" y="613" width="0.0801%" height="15" fill="rgb(240,179,47)" fg:x="76" fg:w="1"/><text x="6.3349%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="6.1649%" y="725" width="0.0801%" height="15" fill="rgb(240,163,11)" fg:x="77" fg:w="1"/><text x="6.4149%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="6.1649%" y="709" width="0.0801%" height="15" fill="rgb(236,37,12)" fg:x="77" fg:w="1"/><text x="6.4149%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="6.1649%" y="693" width="0.0801%" height="15" fill="rgb(232,164,16)" fg:x="77" fg:w="1"/><text x="6.4149%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="6.1649%" y="677" width="0.0801%" height="15" fill="rgb(244,205,15)" fg:x="77" fg:w="1"/><text x="6.4149%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.1649%" y="661" width="0.0801%" height="15" fill="rgb(223,117,47)" fg:x="77" fg:w="1"/><text x="6.4149%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.1649%" y="645" width="0.0801%" height="15" fill="rgb(244,107,35)" fg:x="77" fg:w="1"/><text x="6.4149%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="6.1649%" y="629" width="0.0801%" height="15" fill="rgb(205,140,8)" fg:x="77" fg:w="1"/><text x="6.4149%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="6.1649%" y="613" width="0.0801%" height="15" fill="rgb(228,84,46)" fg:x="77" fg:w="1"/><text x="6.4149%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.1649%" y="597" width="0.0801%" height="15" fill="rgb(254,188,9)" fg:x="77" fg:w="1"/><text x="6.4149%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.1649%" y="581" width="0.0801%" height="15" fill="rgb(206,112,54)" fg:x="77" fg:w="1"/><text x="6.4149%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.1649%" y="565" width="0.0801%" height="15" fill="rgb(216,84,49)" fg:x="77" fg:w="1"/><text x="6.4149%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="6.1649%" y="549" width="0.0801%" height="15" fill="rgb(214,194,35)" fg:x="77" fg:w="1"/><text x="6.4149%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="6.1649%" y="533" width="0.0801%" height="15" fill="rgb(249,28,3)" fg:x="77" fg:w="1"/><text x="6.4149%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="6.1649%" y="517" width="0.0801%" height="15" fill="rgb(222,56,52)" fg:x="77" fg:w="1"/><text x="6.4149%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="6.1649%" y="501" width="0.0801%" height="15" fill="rgb(245,217,50)" fg:x="77" fg:w="1"/><text x="6.4149%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="6.1649%" y="485" width="0.0801%" height="15" fill="rgb(213,201,24)" fg:x="77" fg:w="1"/><text x="6.4149%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="6.1649%" y="469" width="0.0801%" height="15" fill="rgb(248,116,28)" fg:x="77" fg:w="1"/><text x="6.4149%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.1649%" y="453" width="0.0801%" height="15" fill="rgb(219,72,43)" fg:x="77" fg:w="1"/><text x="6.4149%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="6.1649%" y="437" width="0.0801%" height="15" fill="rgb(209,138,14)" fg:x="77" fg:w="1"/><text x="6.4149%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.1649%" y="421" width="0.0801%" height="15" fill="rgb(222,18,33)" fg:x="77" fg:w="1"/><text x="6.4149%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="6.1649%" y="405" width="0.0801%" height="15" fill="rgb(213,199,7)" fg:x="77" fg:w="1"/><text x="6.4149%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="6.1649%" y="389" width="0.0801%" height="15" fill="rgb(250,110,10)" fg:x="77" fg:w="1"/><text x="6.4149%" y="399.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="6.1649%" y="373" width="0.0801%" height="15" fill="rgb(248,123,6)" fg:x="77" fg:w="1"/><text x="6.4149%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.1649%" y="357" width="0.0801%" height="15" fill="rgb(206,91,31)" fg:x="77" fg:w="1"/><text x="6.4149%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.1649%" y="741" width="0.1601%" height="15" fill="rgb(211,154,13)" fg:x="77" fg:w="2"/><text x="6.4149%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.2450%" y="725" width="0.0801%" height="15" fill="rgb(225,148,7)" fg:x="78" fg:w="1"/><text x="6.4950%" y="735.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="6.2450%" y="709" width="0.0801%" height="15" fill="rgb(220,160,43)" fg:x="78" fg:w="1"/><text x="6.4950%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2450%" y="693" width="0.0801%" height="15" fill="rgb(213,52,39)" fg:x="78" fg:w="1"/><text x="6.4950%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.3251%" y="741" width="0.0801%" height="15" fill="rgb(243,137,7)" fg:x="79" fg:w="1"/><text x="6.5751%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="6.4051%" y="725" width="0.0801%" height="15" fill="rgb(230,79,13)" fg:x="80" fg:w="1"/><text x="6.6551%" y="735.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4051%" y="709" width="0.0801%" height="15" fill="rgb(247,105,23)" fg:x="80" fg:w="1"/><text x="6.6551%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.4051%" y="693" width="0.0801%" height="15" fill="rgb(223,179,41)" fg:x="80" fg:w="1"/><text x="6.6551%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4051%" y="677" width="0.0801%" height="15" fill="rgb(218,9,34)" fg:x="80" fg:w="1"/><text x="6.6551%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.4051%" y="661" width="0.0801%" height="15" fill="rgb(222,106,8)" fg:x="80" fg:w="1"/><text x="6.6551%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4051%" y="645" width="0.0801%" height="15" fill="rgb(211,220,0)" fg:x="80" fg:w="1"/><text x="6.6551%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.5653%" y="693" width="0.0801%" height="15" fill="rgb(229,52,16)" fg:x="82" fg:w="1"/><text x="6.8153%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="6.5653%" y="677" width="0.0801%" height="15" fill="rgb(212,155,18)" fg:x="82" fg:w="1"/><text x="6.8153%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.5653%" y="661" width="0.0801%" height="15" fill="rgb(242,21,14)" fg:x="82" fg:w="1"/><text x="6.8153%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5653%" y="645" width="0.0801%" height="15" fill="rgb(222,19,48)" fg:x="82" fg:w="1"/><text x="6.8153%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5653%" y="629" width="0.0801%" height="15" fill="rgb(232,45,27)" fg:x="82" fg:w="1"/><text x="6.8153%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5653%" y="613" width="0.0801%" height="15" fill="rgb(249,103,42)" fg:x="82" fg:w="1"/><text x="6.8153%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5653%" y="597" width="0.0801%" height="15" fill="rgb(246,81,33)" fg:x="82" fg:w="1"/><text x="6.8153%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5653%" y="581" width="0.0801%" height="15" fill="rgb(252,33,42)" fg:x="82" fg:w="1"/><text x="6.8153%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="6.4852%" y="725" width="0.2402%" height="15" fill="rgb(209,212,41)" fg:x="81" fg:w="3"/><text x="6.7352%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="6.5653%" y="709" width="0.1601%" height="15" fill="rgb(207,154,6)" fg:x="82" fg:w="2"/><text x="6.8153%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.6453%" y="693" width="0.0801%" height="15" fill="rgb(223,64,47)" fg:x="83" fg:w="1"/><text x="6.8953%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="6.6453%" y="677" width="0.0801%" height="15" fill="rgb(211,161,38)" fg:x="83" fg:w="1"/><text x="6.8953%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.6453%" y="661" width="0.0801%" height="15" fill="rgb(219,138,40)" fg:x="83" fg:w="1"/><text x="6.8953%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="6.6453%" y="645" width="0.0801%" height="15" fill="rgb(241,228,46)" fg:x="83" fg:w="1"/><text x="6.8953%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.6453%" y="629" width="0.0801%" height="15" fill="rgb(223,209,38)" fg:x="83" fg:w="1"/><text x="6.8953%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.6453%" y="613" width="0.0801%" height="15" fill="rgb(236,164,45)" fg:x="83" fg:w="1"/><text x="6.8953%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.6453%" y="597" width="0.0801%" height="15" fill="rgb(231,15,5)" fg:x="83" fg:w="1"/><text x="6.8953%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.6453%" y="581" width="0.0801%" height="15" fill="rgb(252,35,15)" fg:x="83" fg:w="1"/><text x="6.8953%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6453%" y="565" width="0.0801%" height="15" fill="rgb(248,181,18)" fg:x="83" fg:w="1"/><text x="6.8953%" y="575.50"></text></g><g><title>plugins_core::build::Build::occupying (8 samples, 0.64%)</title><rect x="6.1649%" y="757" width="0.6405%" height="15" fill="rgb(233,39,42)" fg:x="77" fg:w="8"/><text x="6.4149%" y="767.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.40%)</title><rect x="6.4051%" y="741" width="0.4003%" height="15" fill="rgb(238,110,33)" fg:x="80" fg:w="5"/><text x="6.6551%" y="751.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="6.7254%" y="725" width="0.0801%" height="15" fill="rgb(233,195,10)" fg:x="84" fg:w="1"/><text x="6.9754%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.7254%" y="709" width="0.0801%" height="15" fill="rgb(254,105,3)" fg:x="84" fg:w="1"/><text x="6.9754%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.7254%" y="693" width="0.0801%" height="15" fill="rgb(221,225,9)" fg:x="84" fg:w="1"/><text x="6.9754%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.7254%" y="677" width="0.0801%" height="15" fill="rgb(224,227,45)" fg:x="84" fg:w="1"/><text x="6.9754%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="6.7254%" y="661" width="0.0801%" height="15" fill="rgb(229,198,43)" fg:x="84" fg:w="1"/><text x="6.9754%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.7254%" y="645" width="0.0801%" height="15" fill="rgb(206,209,35)" fg:x="84" fg:w="1"/><text x="6.9754%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.7254%" y="629" width="0.0801%" height="15" fill="rgb(245,195,53)" fg:x="84" fg:w="1"/><text x="6.9754%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7254%" y="613" width="0.0801%" height="15" fill="rgb(240,92,26)" fg:x="84" fg:w="1"/><text x="6.9754%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7254%" y="597" width="0.0801%" height="15" fill="rgb(207,40,23)" fg:x="84" fg:w="1"/><text x="6.9754%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7254%" y="581" width="0.0801%" height="15" fill="rgb(223,111,35)" fg:x="84" fg:w="1"/><text x="6.9754%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7254%" y="565" width="0.0801%" height="15" fill="rgb(229,147,28)" fg:x="84" fg:w="1"/><text x="6.9754%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7254%" y="549" width="0.0801%" height="15" fill="rgb(211,29,28)" fg:x="84" fg:w="1"/><text x="6.9754%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.8054%" y="741" width="0.1601%" height="15" fill="rgb(228,72,33)" fg:x="85" fg:w="2"/><text x="7.0554%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="6.8054%" y="725" width="0.1601%" height="15" fill="rgb(205,214,31)" fg:x="85" fg:w="2"/><text x="7.0554%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="6.8054%" y="709" width="0.1601%" height="15" fill="rgb(224,111,15)" fg:x="85" fg:w="2"/><text x="7.0554%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.8054%" y="693" width="0.1601%" height="15" fill="rgb(253,21,26)" fg:x="85" fg:w="2"/><text x="7.0554%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="6.8054%" y="677" width="0.1601%" height="15" fill="rgb(245,139,43)" fg:x="85" fg:w="2"/><text x="7.0554%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="6.8054%" y="661" width="0.1601%" height="15" fill="rgb(252,170,7)" fg:x="85" fg:w="2"/><text x="7.0554%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="6.8054%" y="645" width="0.1601%" height="15" fill="rgb(231,118,14)" fg:x="85" fg:w="2"/><text x="7.0554%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="6.8054%" y="629" width="0.1601%" height="15" fill="rgb(238,83,0)" fg:x="85" fg:w="2"/><text x="7.0554%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.8855%" y="613" width="0.0801%" height="15" fill="rgb(221,39,39)" fg:x="86" fg:w="1"/><text x="7.1355%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8855%" y="597" width="0.0801%" height="15" fill="rgb(222,119,46)" fg:x="86" fg:w="1"/><text x="7.1355%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.8855%" y="581" width="0.0801%" height="15" fill="rgb(222,165,49)" fg:x="86" fg:w="1"/><text x="7.1355%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8855%" y="565" width="0.0801%" height="15" fill="rgb(219,113,52)" fg:x="86" fg:w="1"/><text x="7.1355%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.8855%" y="549" width="0.0801%" height="15" fill="rgb(214,7,15)" fg:x="86" fg:w="1"/><text x="7.1355%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="6.9656%" y="709" width="0.0801%" height="15" fill="rgb(235,32,4)" fg:x="87" fg:w="1"/><text x="7.2156%" y="719.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9656%" y="693" width="0.0801%" height="15" fill="rgb(238,90,54)" fg:x="87" fg:w="1"/><text x="7.2156%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.9656%" y="677" width="0.0801%" height="15" fill="rgb(213,208,19)" fg:x="87" fg:w="1"/><text x="7.2156%" y="687.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (51 samples, 4.08%)</title><rect x="3.0424%" y="773" width="4.0833%" height="15" fill="rgb(233,156,4)" fg:x="38" fg:w="51"/><text x="3.2924%" y="783.50">plug..</text></g><g><title>plugins_core::build::Build::with_username (4 samples, 0.32%)</title><rect x="6.8054%" y="757" width="0.3203%" height="15" fill="rgb(207,194,5)" fg:x="85" fg:w="4"/><text x="7.0554%" y="767.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="6.9656%" y="741" width="0.1601%" height="15" fill="rgb(206,111,30)" fg:x="87" fg:w="2"/><text x="7.2156%" y="751.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="6.9656%" y="725" width="0.1601%" height="15" fill="rgb(243,70,54)" fg:x="87" fg:w="2"/><text x="7.2156%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="7.0456%" y="709" width="0.0801%" height="15" fill="rgb(242,28,8)" fg:x="88" fg:w="1"/><text x="7.2956%" y="719.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.0456%" y="693" width="0.0801%" height="15" fill="rgb(219,106,18)" fg:x="88" fg:w="1"/><text x="7.2956%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.0456%" y="677" width="0.0801%" height="15" fill="rgb(244,222,10)" fg:x="88" fg:w="1"/><text x="7.2956%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.0456%" y="661" width="0.0801%" height="15" fill="rgb(236,179,52)" fg:x="88" fg:w="1"/><text x="7.2956%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.0456%" y="645" width="0.0801%" height="15" fill="rgb(213,23,39)" fg:x="88" fg:w="1"/><text x="7.2956%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.0456%" y="629" width="0.0801%" height="15" fill="rgb(238,48,10)" fg:x="88" fg:w="1"/><text x="7.2956%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.0456%" y="613" width="0.0801%" height="15" fill="rgb(251,196,23)" fg:x="88" fg:w="1"/><text x="7.2956%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.0456%" y="597" width="0.0801%" height="15" fill="rgb(250,152,24)" fg:x="88" fg:w="1"/><text x="7.2956%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.0456%" y="581" width="0.0801%" height="15" fill="rgb(209,150,17)" fg:x="88" fg:w="1"/><text x="7.2956%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.0456%" y="565" width="0.0801%" height="15" fill="rgb(234,202,34)" fg:x="88" fg:w="1"/><text x="7.2956%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.0456%" y="549" width="0.0801%" height="15" fill="rgb(253,148,53)" fg:x="88" fg:w="1"/><text x="7.2956%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.0456%" y="533" width="0.0801%" height="15" fill="rgb(218,129,16)" fg:x="88" fg:w="1"/><text x="7.2956%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.0456%" y="517" width="0.0801%" height="15" fill="rgb(216,85,19)" fg:x="88" fg:w="1"/><text x="7.2956%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0456%" y="501" width="0.0801%" height="15" fill="rgb(235,228,7)" fg:x="88" fg:w="1"/><text x="7.2956%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (78 samples, 6.24%)</title><rect x="1.0408%" y="789" width="6.2450%" height="15" fill="rgb(245,175,0)" fg:x="13" fg:w="78"/><text x="1.2908%" y="799.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="7.1257%" y="773" width="0.1601%" height="15" fill="rgb(208,168,36)" fg:x="89" fg:w="2"/><text x="7.3757%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="7.2058%" y="757" width="0.0801%" height="15" fill="rgb(246,171,24)" fg:x="90" fg:w="1"/><text x="7.4558%" y="767.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="7.2058%" y="741" width="0.0801%" height="15" fill="rgb(215,142,24)" fg:x="90" fg:w="1"/><text x="7.4558%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.2058%" y="725" width="0.0801%" height="15" fill="rgb(250,187,7)" fg:x="90" fg:w="1"/><text x="7.4558%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.2058%" y="709" width="0.0801%" height="15" fill="rgb(228,66,33)" fg:x="90" fg:w="1"/><text x="7.4558%" y="719.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="7.2058%" y="693" width="0.0801%" height="15" fill="rgb(234,215,21)" fg:x="90" fg:w="1"/><text x="7.4558%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.2858%" y="757" width="0.0801%" height="15" fill="rgb(222,191,20)" fg:x="91" fg:w="1"/><text x="7.5358%" y="767.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.3659%" y="757" width="0.0801%" height="15" fill="rgb(245,79,54)" fg:x="92" fg:w="1"/><text x="7.6159%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.3659%" y="741" width="0.0801%" height="15" fill="rgb(240,10,37)" fg:x="92" fg:w="1"/><text x="7.6159%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="7.4460%" y="757" width="0.0801%" height="15" fill="rgb(214,192,32)" fg:x="93" fg:w="1"/><text x="7.6960%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="7.4460%" y="741" width="0.0801%" height="15" fill="rgb(209,36,54)" fg:x="93" fg:w="1"/><text x="7.6960%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6061%" y="725" width="0.0801%" height="15" fill="rgb(220,10,11)" fg:x="95" fg:w="1"/><text x="7.8561%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6061%" y="709" width="0.0801%" height="15" fill="rgb(221,106,17)" fg:x="95" fg:w="1"/><text x="7.8561%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.6061%" y="693" width="0.0801%" height="15" fill="rgb(251,142,44)" fg:x="95" fg:w="1"/><text x="7.8561%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.6061%" y="677" width="0.0801%" height="15" fill="rgb(238,13,15)" fg:x="95" fg:w="1"/><text x="7.8561%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.6061%" y="661" width="0.0801%" height="15" fill="rgb(208,107,27)" fg:x="95" fg:w="1"/><text x="7.8561%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.6061%" y="645" width="0.0801%" height="15" fill="rgb(205,136,37)" fg:x="95" fg:w="1"/><text x="7.8561%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.6061%" y="629" width="0.0801%" height="15" fill="rgb(250,205,27)" fg:x="95" fg:w="1"/><text x="7.8561%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.6061%" y="613" width="0.0801%" height="15" fill="rgb(210,80,43)" fg:x="95" fg:w="1"/><text x="7.8561%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.6061%" y="597" width="0.0801%" height="15" fill="rgb(247,160,36)" fg:x="95" fg:w="1"/><text x="7.8561%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.6061%" y="581" width="0.0801%" height="15" fill="rgb(234,13,49)" fg:x="95" fg:w="1"/><text x="7.8561%" y="591.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.6061%" y="565" width="0.0801%" height="15" fill="rgb(234,122,0)" fg:x="95" fg:w="1"/><text x="7.8561%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6061%" y="549" width="0.0801%" height="15" fill="rgb(207,146,38)" fg:x="95" fg:w="1"/><text x="7.8561%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="7.6861%" y="725" width="0.0801%" height="15" fill="rgb(207,177,25)" fg:x="96" fg:w="1"/><text x="7.9361%" y="735.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.6861%" y="709" width="0.0801%" height="15" fill="rgb(211,178,42)" fg:x="96" fg:w="1"/><text x="7.9361%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.6861%" y="693" width="0.0801%" height="15" fill="rgb(230,69,54)" fg:x="96" fg:w="1"/><text x="7.9361%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.6861%" y="677" width="0.0801%" height="15" fill="rgb(214,135,41)" fg:x="96" fg:w="1"/><text x="7.9361%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.6861%" y="661" width="0.0801%" height="15" fill="rgb(237,67,25)" fg:x="96" fg:w="1"/><text x="7.9361%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.0064%" y="693" width="0.1601%" height="15" fill="rgb(222,189,50)" fg:x="100" fg:w="2"/><text x="8.2564%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0865%" y="677" width="0.0801%" height="15" fill="rgb(245,148,34)" fg:x="101" fg:w="1"/><text x="8.3365%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0865%" y="661" width="0.0801%" height="15" fill="rgb(222,29,6)" fg:x="101" fg:w="1"/><text x="8.3365%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.2466%" y="677" width="0.0801%" height="15" fill="rgb(221,189,43)" fg:x="103" fg:w="1"/><text x="8.4966%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2466%" y="661" width="0.0801%" height="15" fill="rgb(207,36,27)" fg:x="103" fg:w="1"/><text x="8.4966%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.2466%" y="645" width="0.0801%" height="15" fill="rgb(217,90,24)" fg:x="103" fg:w="1"/><text x="8.4966%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.3267%" y="661" width="0.1601%" height="15" fill="rgb(224,66,35)" fg:x="104" fg:w="2"/><text x="8.5767%" y="671.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.3267%" y="645" width="0.1601%" height="15" fill="rgb(221,13,50)" fg:x="104" fg:w="2"/><text x="8.5767%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="8.1665%" y="693" width="0.4003%" height="15" fill="rgb(236,68,49)" fg:x="102" fg:w="5"/><text x="8.4165%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.3267%" y="677" width="0.2402%" height="15" fill="rgb(229,146,28)" fg:x="104" fg:w="3"/><text x="8.5767%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4868%" y="661" width="0.0801%" height="15" fill="rgb(225,31,38)" fg:x="106" fg:w="1"/><text x="8.7368%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4868%" y="645" width="0.0801%" height="15" fill="rgb(250,208,3)" fg:x="106" fg:w="1"/><text x="8.7368%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4868%" y="629" width="0.0801%" height="15" fill="rgb(246,54,23)" fg:x="106" fg:w="1"/><text x="8.7368%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.4868%" y="613" width="0.0801%" height="15" fill="rgb(243,76,11)" fg:x="106" fg:w="1"/><text x="8.7368%" y="623.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.04%)</title><rect x="7.7662%" y="725" width="1.0408%" height="15" fill="rgb(245,21,50)" fg:x="97" fg:w="13"/><text x="8.0162%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="8.0064%" y="709" width="0.8006%" height="15" fill="rgb(228,9,43)" fg:x="100" fg:w="10"/><text x="8.2564%" y="719.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="8.5669%" y="693" width="0.2402%" height="15" fill="rgb(208,100,47)" fg:x="107" fg:w="3"/><text x="8.8169%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="8.5669%" y="677" width="0.2402%" height="15" fill="rgb(232,26,8)" fg:x="107" fg:w="3"/><text x="8.8169%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="8.5669%" y="661" width="0.2402%" height="15" fill="rgb(216,166,38)" fg:x="107" fg:w="3"/><text x="8.8169%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.6469%" y="645" width="0.1601%" height="15" fill="rgb(251,202,51)" fg:x="108" fg:w="2"/><text x="8.8969%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="8.6469%" y="629" width="0.1601%" height="15" fill="rgb(254,216,34)" fg:x="108" fg:w="2"/><text x="8.8969%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.7270%" y="613" width="0.0801%" height="15" fill="rgb(251,32,27)" fg:x="109" fg:w="1"/><text x="8.9770%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="8.8070%" y="677" width="0.1601%" height="15" fill="rgb(208,127,28)" fg:x="110" fg:w="2"/><text x="9.0570%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.8070%" y="725" width="0.2402%" height="15" fill="rgb(224,137,22)" fg:x="110" fg:w="3"/><text x="9.0570%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="8.8070%" y="709" width="0.2402%" height="15" fill="rgb(254,70,32)" fg:x="110" fg:w="3"/><text x="9.0570%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.8070%" y="693" width="0.2402%" height="15" fill="rgb(229,75,37)" fg:x="110" fg:w="3"/><text x="9.0570%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.9672%" y="677" width="0.0801%" height="15" fill="rgb(252,64,23)" fg:x="112" fg:w="1"/><text x="9.2172%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.9672%" y="661" width="0.0801%" height="15" fill="rgb(232,162,48)" fg:x="112" fg:w="1"/><text x="9.2172%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.9672%" y="645" width="0.0801%" height="15" fill="rgb(246,160,12)" fg:x="112" fg:w="1"/><text x="9.2172%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.9672%" y="629" width="0.0801%" height="15" fill="rgb(247,166,0)" fg:x="112" fg:w="1"/><text x="9.2172%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.1273%" y="661" width="0.0801%" height="15" fill="rgb(249,219,21)" fg:x="114" fg:w="1"/><text x="9.3773%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2874%" y="645" width="0.0801%" height="15" fill="rgb(205,209,3)" fg:x="116" fg:w="1"/><text x="9.5374%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.1273%" y="693" width="0.3203%" height="15" fill="rgb(243,44,1)" fg:x="114" fg:w="4"/><text x="9.3773%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="9.1273%" y="677" width="0.3203%" height="15" fill="rgb(206,159,16)" fg:x="114" fg:w="4"/><text x="9.3773%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.2074%" y="661" width="0.2402%" height="15" fill="rgb(244,77,30)" fg:x="115" fg:w="3"/><text x="9.4574%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3675%" y="645" width="0.0801%" height="15" fill="rgb(218,69,12)" fg:x="117" fg:w="1"/><text x="9.6175%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3675%" y="629" width="0.0801%" height="15" fill="rgb(212,87,7)" fg:x="117" fg:w="1"/><text x="9.6175%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.3675%" y="613" width="0.0801%" height="15" fill="rgb(245,114,25)" fg:x="117" fg:w="1"/><text x="9.6175%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3675%" y="597" width="0.0801%" height="15" fill="rgb(210,61,42)" fg:x="117" fg:w="1"/><text x="9.6175%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.4476%" y="645" width="0.1601%" height="15" fill="rgb(211,52,33)" fg:x="118" fg:w="2"/><text x="9.6976%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.4476%" y="629" width="0.1601%" height="15" fill="rgb(234,58,33)" fg:x="118" fg:w="2"/><text x="9.6976%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.4476%" y="613" width="0.1601%" height="15" fill="rgb(220,115,36)" fg:x="118" fg:w="2"/><text x="9.6976%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.4476%" y="597" width="0.1601%" height="15" fill="rgb(243,153,54)" fg:x="118" fg:w="2"/><text x="9.6976%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.4476%" y="581" width="0.1601%" height="15" fill="rgb(251,47,18)" fg:x="118" fg:w="2"/><text x="9.6976%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.56%)</title><rect x="9.1273%" y="709" width="0.5604%" height="15" fill="rgb(242,102,42)" fg:x="114" fg:w="7"/><text x="9.3773%" y="719.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="9.4476%" y="693" width="0.2402%" height="15" fill="rgb(234,31,38)" fg:x="118" fg:w="3"/><text x="9.6976%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="9.4476%" y="677" width="0.2402%" height="15" fill="rgb(221,117,51)" fg:x="118" fg:w="3"/><text x="9.6976%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="9.4476%" y="661" width="0.2402%" height="15" fill="rgb(212,20,18)" fg:x="118" fg:w="3"/><text x="9.6976%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.6077%" y="645" width="0.0801%" height="15" fill="rgb(245,133,36)" fg:x="120" fg:w="1"/><text x="9.8577%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="9.6878%" y="709" width="0.0801%" height="15" fill="rgb(212,6,19)" fg:x="121" fg:w="1"/><text x="9.9378%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.6878%" y="693" width="0.0801%" height="15" fill="rgb(218,1,36)" fg:x="121" fg:w="1"/><text x="9.9378%" y="703.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8479%" y="677" width="0.0801%" height="15" fill="rgb(246,84,54)" fg:x="123" fg:w="1"/><text x="10.0979%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="9.8479%" y="661" width="0.0801%" height="15" fill="rgb(242,110,6)" fg:x="123" fg:w="1"/><text x="10.0979%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9279%" y="661" width="0.0801%" height="15" fill="rgb(214,47,5)" fg:x="124" fg:w="1"/><text x="10.1779%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="10.0881%" y="629" width="0.2402%" height="15" fill="rgb(218,159,25)" fg:x="126" fg:w="3"/><text x="10.3381%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="10.0881%" y="613" width="0.2402%" height="15" fill="rgb(215,211,28)" fg:x="126" fg:w="3"/><text x="10.3381%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.2482%" y="597" width="0.0801%" height="15" fill="rgb(238,59,32)" fg:x="128" fg:w="1"/><text x="10.4982%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2482%" y="581" width="0.0801%" height="15" fill="rgb(226,82,3)" fg:x="128" fg:w="1"/><text x="10.4982%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="10.4083%" y="597" width="0.2402%" height="15" fill="rgb(240,164,32)" fg:x="130" fg:w="3"/><text x="10.6583%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="10.4083%" y="581" width="0.2402%" height="15" fill="rgb(232,46,7)" fg:x="130" fg:w="3"/><text x="10.6583%" y="591.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="10.4083%" y="565" width="0.2402%" height="15" fill="rgb(229,129,53)" fg:x="130" fg:w="3"/><text x="10.6583%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="10.6485%" y="549" width="0.2402%" height="15" fill="rgb(234,188,29)" fg:x="133" fg:w="3"/><text x="10.8985%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.7286%" y="533" width="0.1601%" height="15" fill="rgb(246,141,4)" fg:x="134" fg:w="2"/><text x="10.9786%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.7286%" y="517" width="0.1601%" height="15" fill="rgb(229,23,39)" fg:x="134" fg:w="2"/><text x="10.9786%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8086%" y="501" width="0.0801%" height="15" fill="rgb(206,12,3)" fg:x="135" fg:w="1"/><text x="11.0586%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8086%" y="485" width="0.0801%" height="15" fill="rgb(252,226,20)" fg:x="135" fg:w="1"/><text x="11.0586%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8086%" y="469" width="0.0801%" height="15" fill="rgb(216,123,35)" fg:x="135" fg:w="1"/><text x="11.0586%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.88%)</title><rect x="10.0881%" y="645" width="0.8807%" height="15" fill="rgb(212,68,40)" fg:x="126" fg:w="11"/><text x="10.3381%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.64%)</title><rect x="10.3283%" y="629" width="0.6405%" height="15" fill="rgb(254,125,32)" fg:x="129" fg:w="8"/><text x="10.5783%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="10.4083%" y="613" width="0.5604%" height="15" fill="rgb(253,97,22)" fg:x="130" fg:w="7"/><text x="10.6583%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="10.6485%" y="597" width="0.3203%" height="15" fill="rgb(241,101,14)" fg:x="133" fg:w="4"/><text x="10.8985%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="10.6485%" y="581" width="0.3203%" height="15" fill="rgb(238,103,29)" fg:x="133" fg:w="4"/><text x="10.8985%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="10.6485%" y="565" width="0.3203%" height="15" fill="rgb(233,195,47)" fg:x="133" fg:w="4"/><text x="10.8985%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8887%" y="549" width="0.0801%" height="15" fill="rgb(246,218,30)" fg:x="136" fg:w="1"/><text x="11.1387%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.36%)</title><rect x="9.7678%" y="709" width="1.3611%" height="15" fill="rgb(219,145,47)" fg:x="122" fg:w="17"/><text x="10.0178%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.36%)</title><rect x="9.7678%" y="693" width="1.3611%" height="15" fill="rgb(243,12,26)" fg:x="122" fg:w="17"/><text x="10.0178%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.20%)</title><rect x="9.9279%" y="677" width="1.2010%" height="15" fill="rgb(214,87,16)" fg:x="124" fg:w="15"/><text x="10.1779%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.12%)</title><rect x="10.0080%" y="661" width="1.1209%" height="15" fill="rgb(208,99,42)" fg:x="125" fg:w="14"/><text x="10.2580%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="10.9688%" y="645" width="0.1601%" height="15" fill="rgb(253,99,2)" fg:x="137" fg:w="2"/><text x="11.2188%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.0488%" y="629" width="0.0801%" height="15" fill="rgb(220,168,23)" fg:x="138" fg:w="1"/><text x="11.2988%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.2090%" y="565" width="0.0801%" height="15" fill="rgb(242,38,24)" fg:x="140" fg:w="1"/><text x="11.4590%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.2090%" y="549" width="0.0801%" height="15" fill="rgb(225,182,9)" fg:x="140" fg:w="1"/><text x="11.4590%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.2090%" y="533" width="0.0801%" height="15" fill="rgb(243,178,37)" fg:x="140" fg:w="1"/><text x="11.4590%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="11.2090%" y="517" width="0.0801%" height="15" fill="rgb(232,139,19)" fg:x="140" fg:w="1"/><text x="11.4590%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.2890%" y="549" width="0.0801%" height="15" fill="rgb(225,201,24)" fg:x="141" fg:w="1"/><text x="11.5390%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.2890%" y="533" width="0.0801%" height="15" fill="rgb(221,47,46)" fg:x="141" fg:w="1"/><text x="11.5390%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.2890%" y="517" width="0.0801%" height="15" fill="rgb(249,23,13)" fg:x="141" fg:w="1"/><text x="11.5390%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.2890%" y="501" width="0.0801%" height="15" fill="rgb(219,9,5)" fg:x="141" fg:w="1"/><text x="11.5390%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.2890%" y="485" width="0.0801%" height="15" fill="rgb(254,171,16)" fg:x="141" fg:w="1"/><text x="11.5390%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.2890%" y="469" width="0.0801%" height="15" fill="rgb(230,171,20)" fg:x="141" fg:w="1"/><text x="11.5390%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.2890%" y="453" width="0.0801%" height="15" fill="rgb(210,71,41)" fg:x="141" fg:w="1"/><text x="11.5390%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="11.1289%" y="581" width="0.3203%" height="15" fill="rgb(206,173,20)" fg:x="139" fg:w="4"/><text x="11.3789%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.2890%" y="565" width="0.1601%" height="15" fill="rgb(233,88,34)" fg:x="141" fg:w="2"/><text x="11.5390%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.3691%" y="549" width="0.0801%" height="15" fill="rgb(223,209,46)" fg:x="142" fg:w="1"/><text x="11.6191%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3691%" y="533" width="0.0801%" height="15" fill="rgb(250,43,18)" fg:x="142" fg:w="1"/><text x="11.6191%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.4492%" y="581" width="0.0801%" height="15" fill="rgb(208,13,10)" fg:x="143" fg:w="1"/><text x="11.6992%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4492%" y="565" width="0.0801%" height="15" fill="rgb(212,200,36)" fg:x="143" fg:w="1"/><text x="11.6992%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="11.1289%" y="613" width="0.5604%" height="15" fill="rgb(225,90,30)" fg:x="139" fg:w="7"/><text x="11.3789%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="11.1289%" y="597" width="0.5604%" height="15" fill="rgb(236,182,39)" fg:x="139" fg:w="7"/><text x="11.3789%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.5292%" y="581" width="0.1601%" height="15" fill="rgb(212,144,35)" fg:x="144" fg:w="2"/><text x="11.7792%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.6894%" y="613" width="0.0801%" height="15" fill="rgb(228,63,44)" fg:x="146" fg:w="1"/><text x="11.9394%" y="623.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="11.6894%" y="597" width="0.0801%" height="15" fill="rgb(228,109,6)" fg:x="146" fg:w="1"/><text x="11.9394%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="11.1289%" y="645" width="0.7206%" height="15" fill="rgb(238,117,24)" fg:x="139" fg:w="9"/><text x="11.3789%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="11.1289%" y="629" width="0.7206%" height="15" fill="rgb(242,26,26)" fg:x="139" fg:w="9"/><text x="11.3789%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.7694%" y="613" width="0.0801%" height="15" fill="rgb(221,92,48)" fg:x="147" fg:w="1"/><text x="12.0194%" y="623.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="11.9295%" y="629" width="0.0801%" height="15" fill="rgb(209,209,32)" fg:x="149" fg:w="1"/><text x="12.1795%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="11.8495%" y="645" width="0.2402%" height="15" fill="rgb(221,70,22)" fg:x="148" fg:w="3"/><text x="12.0995%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.0096%" y="629" width="0.0801%" height="15" fill="rgb(248,145,5)" fg:x="150" fg:w="1"/><text x="12.2596%" y="639.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (58 samples, 4.64%)</title><rect x="7.5260%" y="757" width="4.6437%" height="15" fill="rgb(226,116,26)" fg:x="94" fg:w="58"/><text x="7.7760%" y="767.50">engin..</text></g><g><title>engine::session::SavesEntities::check_for_changes (58 samples, 4.64%)</title><rect x="7.5260%" y="741" width="4.6437%" height="15" fill="rgb(244,5,17)" fg:x="94" fg:w="58"/><text x="7.7760%" y="751.50">engin..</text></g><g><title>kernel::model::any_entity_changes (39 samples, 3.12%)</title><rect x="9.0472%" y="725" width="3.1225%" height="15" fill="rgb(252,159,33)" fg:x="113" fg:w="39"/><text x="9.2972%" y="735.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (13 samples, 1.04%)</title><rect x="11.1289%" y="709" width="1.0408%" height="15" fill="rgb(206,71,0)" fg:x="139" fg:w="13"/><text x="11.3789%" y="719.50"></text></g><g><title>serde_json::de::from_trait (13 samples, 1.04%)</title><rect x="11.1289%" y="693" width="1.0408%" height="15" fill="rgb(233,118,54)" fg:x="139" fg:w="13"/><text x="11.3789%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.04%)</title><rect x="11.1289%" y="677" width="1.0408%" height="15" fill="rgb(234,83,48)" fg:x="139" fg:w="13"/><text x="11.3789%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.04%)</title><rect x="11.1289%" y="661" width="1.0408%" height="15" fill="rgb(228,3,54)" fg:x="139" fg:w="13"/><text x="11.3789%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.0897%" y="645" width="0.0801%" height="15" fill="rgb(226,155,13)" fg:x="151" fg:w="1"/><text x="12.3397%" y="655.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="12.1697%" y="677" width="0.0801%" height="15" fill="rgb(241,28,37)" fg:x="152" fg:w="1"/><text x="12.4197%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.2498%" y="677" width="0.0801%" height="15" fill="rgb(233,93,10)" fg:x="153" fg:w="1"/><text x="12.4998%" y="687.50"></text></g><g><title>engine::session::Session::close (64 samples, 5.12%)</title><rect x="7.2858%" y="789" width="5.1241%" height="15" fill="rgb(225,113,19)" fg:x="91" fg:w="64"/><text x="7.5358%" y="799.50">engine..</text></g><g><title>engine::session::Session::save_entity_changes (64 samples, 5.12%)</title><rect x="7.2858%" y="773" width="5.1241%" height="15" fill="rgb(241,2,18)" fg:x="91" fg:w="64"/><text x="7.5358%" y="783.50">engine..</text></g><g><title>std::env::_var (3 samples, 0.24%)</title><rect x="12.1697%" y="757" width="0.2402%" height="15" fill="rgb(228,207,21)" fg:x="152" fg:w="3"/><text x="12.4197%" y="767.50"></text></g><g><title>std::env::var_os (3 samples, 0.24%)</title><rect x="12.1697%" y="741" width="0.2402%" height="15" fill="rgb(213,211,35)" fg:x="152" fg:w="3"/><text x="12.4197%" y="751.50"></text></g><g><title>std::env::_var_os (3 samples, 0.24%)</title><rect x="12.1697%" y="725" width="0.2402%" height="15" fill="rgb(209,83,10)" fg:x="152" fg:w="3"/><text x="12.4197%" y="735.50"></text></g><g><title>std::sys::unix::os::getenv (3 samples, 0.24%)</title><rect x="12.1697%" y="709" width="0.2402%" height="15" fill="rgb(209,164,1)" fg:x="152" fg:w="3"/><text x="12.4197%" y="719.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="12.1697%" y="693" width="0.2402%" height="15" fill="rgb(213,184,43)" fg:x="152" fg:w="3"/><text x="12.4197%" y="703.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="12.3299%" y="677" width="0.0801%" height="15" fill="rgb(231,61,34)" fg:x="154" fg:w="1"/><text x="12.5799%" y="687.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="12.3299%" y="661" width="0.0801%" height="15" fill="rgb(235,75,3)" fg:x="154" fg:w="1"/><text x="12.5799%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.4900%" y="501" width="0.0801%" height="15" fill="rgb(220,106,47)" fg:x="156" fg:w="1"/><text x="12.7400%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.4900%" y="485" width="0.0801%" height="15" fill="rgb(210,196,33)" fg:x="156" fg:w="1"/><text x="12.7400%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.4900%" y="469" width="0.0801%" height="15" fill="rgb(229,154,42)" fg:x="156" fg:w="1"/><text x="12.7400%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.4900%" y="453" width="0.0801%" height="15" fill="rgb(228,114,26)" fg:x="156" fg:w="1"/><text x="12.7400%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5701%" y="501" width="0.0801%" height="15" fill="rgb(208,144,1)" fg:x="157" fg:w="1"/><text x="12.8201%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5701%" y="485" width="0.0801%" height="15" fill="rgb(239,112,37)" fg:x="157" fg:w="1"/><text x="12.8201%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.5701%" y="469" width="0.0801%" height="15" fill="rgb(210,96,50)" fg:x="157" fg:w="1"/><text x="12.8201%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.5701%" y="453" width="0.0801%" height="15" fill="rgb(222,178,2)" fg:x="157" fg:w="1"/><text x="12.8201%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.5701%" y="437" width="0.0801%" height="15" fill="rgb(226,74,18)" fg:x="157" fg:w="1"/><text x="12.8201%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="12.5701%" y="421" width="0.0801%" height="15" fill="rgb(225,67,54)" fg:x="157" fg:w="1"/><text x="12.8201%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.5701%" y="405" width="0.0801%" height="15" fill="rgb(251,92,32)" fg:x="157" fg:w="1"/><text x="12.8201%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="12.4099%" y="549" width="0.3203%" height="15" fill="rgb(228,149,22)" fg:x="155" fg:w="4"/><text x="12.6599%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="12.4900%" y="533" width="0.2402%" height="15" fill="rgb(243,54,13)" fg:x="156" fg:w="3"/><text x="12.7400%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="12.4900%" y="517" width="0.2402%" height="15" fill="rgb(243,180,28)" fg:x="156" fg:w="3"/><text x="12.7400%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.6501%" y="501" width="0.0801%" height="15" fill="rgb(208,167,24)" fg:x="158" fg:w="1"/><text x="12.9001%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::desc (5 samples, 0.40%)</title><rect x="12.4099%" y="597" width="0.4003%" height="15" fill="rgb(245,73,45)" fg:x="155" fg:w="5"/><text x="12.6599%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (5 samples, 0.40%)</title><rect x="12.4099%" y="581" width="0.4003%" height="15" fill="rgb(237,203,48)" fg:x="155" fg:w="5"/><text x="12.6599%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (5 samples, 0.40%)</title><rect x="12.4099%" y="565" width="0.4003%" height="15" fill="rgb(211,197,16)" fg:x="155" fg:w="5"/><text x="12.6599%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7302%" y="549" width="0.0801%" height="15" fill="rgb(243,99,51)" fg:x="159" fg:w="1"/><text x="12.9802%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7302%" y="533" width="0.0801%" height="15" fill="rgb(215,123,29)" fg:x="159" fg:w="1"/><text x="12.9802%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7302%" y="517" width="0.0801%" height="15" fill="rgb(239,186,37)" fg:x="159" fg:w="1"/><text x="12.9802%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7302%" y="501" width="0.0801%" height="15" fill="rgb(252,136,39)" fg:x="159" fg:w="1"/><text x="12.9802%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.7302%" y="485" width="0.0801%" height="15" fill="rgb(223,213,32)" fg:x="159" fg:w="1"/><text x="12.9802%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7302%" y="469" width="0.0801%" height="15" fill="rgb(233,115,5)" fg:x="159" fg:w="1"/><text x="12.9802%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7302%" y="453" width="0.0801%" height="15" fill="rgb(207,226,44)" fg:x="159" fg:w="1"/><text x="12.9802%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7302%" y="437" width="0.0801%" height="15" fill="rgb(208,126,0)" fg:x="159" fg:w="1"/><text x="12.9802%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7302%" y="421" width="0.0801%" height="15" fill="rgb(244,66,21)" fg:x="159" fg:w="1"/><text x="12.9802%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7302%" y="405" width="0.0801%" height="15" fill="rgb(222,97,12)" fg:x="159" fg:w="1"/><text x="12.9802%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.7302%" y="389" width="0.0801%" height="15" fill="rgb(219,213,19)" fg:x="159" fg:w="1"/><text x="12.9802%" y="399.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="12.8102%" y="581" width="0.0801%" height="15" fill="rgb(252,169,30)" fg:x="160" fg:w="1"/><text x="13.0602%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.8102%" y="565" width="0.0801%" height="15" fill="rgb(206,32,51)" fg:x="160" fg:w="1"/><text x="13.0602%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.9704%" y="485" width="0.0801%" height="15" fill="rgb(250,172,42)" fg:x="162" fg:w="1"/><text x="13.2204%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.9704%" y="469" width="0.0801%" height="15" fill="rgb(209,34,43)" fg:x="162" fg:w="1"/><text x="13.2204%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9704%" y="453" width="0.0801%" height="15" fill="rgb(223,11,35)" fg:x="162" fg:w="1"/><text x="13.2204%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="12.8903%" y="549" width="0.2402%" height="15" fill="rgb(251,219,26)" fg:x="161" fg:w="3"/><text x="13.1403%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.9704%" y="533" width="0.1601%" height="15" fill="rgb(231,119,3)" fg:x="162" fg:w="2"/><text x="13.2204%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.9704%" y="517" width="0.1601%" height="15" fill="rgb(216,97,11)" fg:x="162" fg:w="2"/><text x="13.2204%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.9704%" y="501" width="0.1601%" height="15" fill="rgb(223,59,9)" fg:x="162" fg:w="2"/><text x="13.2204%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.0504%" y="485" width="0.0801%" height="15" fill="rgb(233,93,31)" fg:x="163" fg:w="1"/><text x="13.3004%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.0504%" y="469" width="0.0801%" height="15" fill="rgb(239,81,33)" fg:x="163" fg:w="1"/><text x="13.3004%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.0504%" y="453" width="0.0801%" height="15" fill="rgb(213,120,34)" fg:x="163" fg:w="1"/><text x="13.3004%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.0504%" y="437" width="0.0801%" height="15" fill="rgb(243,49,53)" fg:x="163" fg:w="1"/><text x="13.3004%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.0504%" y="421" width="0.0801%" height="15" fill="rgb(247,216,33)" fg:x="163" fg:w="1"/><text x="13.3004%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.0504%" y="405" width="0.0801%" height="15" fill="rgb(226,26,14)" fg:x="163" fg:w="1"/><text x="13.3004%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.0504%" y="389" width="0.0801%" height="15" fill="rgb(215,49,53)" fg:x="163" fg:w="1"/><text x="13.3004%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.0504%" y="373" width="0.0801%" height="15" fill="rgb(245,162,40)" fg:x="163" fg:w="1"/><text x="13.3004%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.1305%" y="549" width="0.0801%" height="15" fill="rgb(229,68,17)" fg:x="164" fg:w="1"/><text x="13.3805%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.2106%" y="485" width="0.0801%" height="15" fill="rgb(213,182,10)" fg:x="165" fg:w="1"/><text x="13.4606%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.4508%" y="389" width="0.0801%" height="15" fill="rgb(245,125,30)" fg:x="168" fg:w="1"/><text x="13.7008%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (10 samples, 0.80%)</title><rect x="12.8102%" y="597" width="0.8006%" height="15" fill="rgb(232,202,2)" fg:x="160" fg:w="10"/><text x="13.0602%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (9 samples, 0.72%)</title><rect x="12.8903%" y="581" width="0.7206%" height="15" fill="rgb(237,140,51)" fg:x="161" fg:w="9"/><text x="13.1403%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (9 samples, 0.72%)</title><rect x="12.8903%" y="565" width="0.7206%" height="15" fill="rgb(236,157,25)" fg:x="161" fg:w="9"/><text x="13.1403%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="13.2106%" y="549" width="0.4003%" height="15" fill="rgb(219,209,0)" fg:x="165" fg:w="5"/><text x="13.4606%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="13.2106%" y="533" width="0.4003%" height="15" fill="rgb(240,116,54)" fg:x="165" fg:w="5"/><text x="13.4606%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="13.2106%" y="517" width="0.4003%" height="15" fill="rgb(216,10,36)" fg:x="165" fg:w="5"/><text x="13.4606%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="13.2106%" y="501" width="0.4003%" height="15" fill="rgb(222,72,44)" fg:x="165" fg:w="5"/><text x="13.4606%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (4 samples, 0.32%)</title><rect x="13.2906%" y="485" width="0.3203%" height="15" fill="rgb(232,159,9)" fg:x="166" fg:w="4"/><text x="13.5406%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="13.2906%" y="469" width="0.3203%" height="15" fill="rgb(210,39,32)" fg:x="166" fg:w="4"/><text x="13.5406%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="13.2906%" y="453" width="0.3203%" height="15" fill="rgb(216,194,45)" fg:x="166" fg:w="4"/><text x="13.5406%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="13.2906%" y="437" width="0.3203%" height="15" fill="rgb(218,18,35)" fg:x="166" fg:w="4"/><text x="13.5406%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.4508%" y="421" width="0.1601%" height="15" fill="rgb(207,83,51)" fg:x="168" fg:w="2"/><text x="13.7008%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.4508%" y="405" width="0.1601%" height="15" fill="rgb(225,63,43)" fg:x="168" fg:w="2"/><text x="13.7008%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="13.5308%" y="389" width="0.0801%" height="15" fill="rgb(207,57,36)" fg:x="169" fg:w="1"/><text x="13.7808%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="13.5308%" y="373" width="0.0801%" height="15" fill="rgb(216,99,33)" fg:x="169" fg:w="1"/><text x="13.7808%" y="383.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="13.5308%" y="357" width="0.0801%" height="15" fill="rgb(225,42,16)" fg:x="169" fg:w="1"/><text x="13.7808%" y="367.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="13.6109%" y="597" width="0.0801%" height="15" fill="rgb(220,201,45)" fg:x="170" fg:w="1"/><text x="13.8609%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="13.6109%" y="581" width="0.0801%" height="15" fill="rgb(225,33,4)" fg:x="170" fg:w="1"/><text x="13.8609%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="13.6109%" y="565" width="0.0801%" height="15" fill="rgb(224,33,50)" fg:x="170" fg:w="1"/><text x="13.8609%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="13.6109%" y="549" width="0.0801%" height="15" fill="rgb(246,198,51)" fg:x="170" fg:w="1"/><text x="13.8609%" y="559.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="13.6109%" y="533" width="0.0801%" height="15" fill="rgb(205,22,4)" fg:x="170" fg:w="1"/><text x="13.8609%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="13.6109%" y="517" width="0.0801%" height="15" fill="rgb(206,3,8)" fg:x="170" fg:w="1"/><text x="13.8609%" y="527.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="13.6109%" y="501" width="0.0801%" height="15" fill="rgb(251,23,15)" fg:x="170" fg:w="1"/><text x="13.8609%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="13.6109%" y="485" width="0.0801%" height="15" fill="rgb(252,88,28)" fg:x="170" fg:w="1"/><text x="13.8609%" y="495.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="13.6109%" y="469" width="0.0801%" height="15" fill="rgb(212,127,14)" fg:x="170" fg:w="1"/><text x="13.8609%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="13.6109%" y="453" width="0.0801%" height="15" fill="rgb(247,145,37)" fg:x="170" fg:w="1"/><text x="13.8609%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="13.6109%" y="437" width="0.0801%" height="15" fill="rgb(209,117,53)" fg:x="170" fg:w="1"/><text x="13.8609%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="13.6109%" y="421" width="0.0801%" height="15" fill="rgb(212,90,42)" fg:x="170" fg:w="1"/><text x="13.8609%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.7710%" y="485" width="0.0801%" height="15" fill="rgb(218,164,37)" fg:x="172" fg:w="1"/><text x="14.0210%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.7710%" y="469" width="0.0801%" height="15" fill="rgb(246,65,34)" fg:x="172" fg:w="1"/><text x="14.0210%" y="479.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="13.7710%" y="453" width="0.0801%" height="15" fill="rgb(231,100,33)" fg:x="172" fg:w="1"/><text x="14.0210%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="13.7710%" y="437" width="0.0801%" height="15" fill="rgb(228,126,14)" fg:x="172" fg:w="1"/><text x="14.0210%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="13.7710%" y="421" width="0.0801%" height="15" fill="rgb(215,173,21)" fg:x="172" fg:w="1"/><text x="14.0210%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="13.7710%" y="405" width="0.0801%" height="15" fill="rgb(210,6,40)" fg:x="172" fg:w="1"/><text x="14.0210%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.7710%" y="389" width="0.0801%" height="15" fill="rgb(212,48,18)" fg:x="172" fg:w="1"/><text x="14.0210%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="13.7710%" y="549" width="0.1601%" height="15" fill="rgb(230,214,11)" fg:x="172" fg:w="2"/><text x="14.0210%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="13.7710%" y="533" width="0.1601%" height="15" fill="rgb(254,105,39)" fg:x="172" fg:w="2"/><text x="14.0210%" y="543.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="13.7710%" y="517" width="0.1601%" height="15" fill="rgb(245,158,5)" fg:x="172" fg:w="2"/><text x="14.0210%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="13.7710%" y="501" width="0.1601%" height="15" fill="rgb(249,208,11)" fg:x="172" fg:w="2"/><text x="14.0210%" y="511.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="13.8511%" y="485" width="0.0801%" height="15" fill="rgb(210,39,28)" fg:x="173" fg:w="1"/><text x="14.1011%" y="495.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="14.0913%" y="405" width="0.1601%" height="15" fill="rgb(211,56,53)" fg:x="176" fg:w="2"/><text x="14.3413%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (4 samples, 0.32%)</title><rect x="14.0112%" y="437" width="0.3203%" height="15" fill="rgb(226,201,30)" fg:x="175" fg:w="4"/><text x="14.2612%" y="447.50"></text></g><g><title>regex_automata::util::determinize::next (3 samples, 0.24%)</title><rect x="14.0913%" y="421" width="0.2402%" height="15" fill="rgb(239,101,34)" fg:x="176" fg:w="3"/><text x="14.3413%" y="431.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="14.2514%" y="405" width="0.0801%" height="15" fill="rgb(226,209,5)" fg:x="178" fg:w="1"/><text x="14.5014%" y="415.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="14.3315%" y="421" width="0.0801%" height="15" fill="rgb(250,105,47)" fg:x="179" fg:w="1"/><text x="14.5815%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.48%)</title><rect x="14.0112%" y="453" width="0.4804%" height="15" fill="rgb(230,72,3)" fg:x="175" fg:w="6"/><text x="14.2612%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="14.3315%" y="437" width="0.1601%" height="15" fill="rgb(232,218,39)" fg:x="179" fg:w="2"/><text x="14.5815%" y="447.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="14.4115%" y="421" width="0.0801%" height="15" fill="rgb(248,166,6)" fg:x="180" fg:w="1"/><text x="14.6615%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="14.0112%" y="517" width="0.5604%" height="15" fill="rgb(247,89,20)" fg:x="175" fg:w="7"/><text x="14.2612%" y="527.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="14.0112%" y="501" width="0.5604%" height="15" fill="rgb(248,130,54)" fg:x="175" fg:w="7"/><text x="14.2612%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (7 samples, 0.56%)</title><rect x="14.0112%" y="485" width="0.5604%" height="15" fill="rgb(234,196,4)" fg:x="175" fg:w="7"/><text x="14.2612%" y="495.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (7 samples, 0.56%)</title><rect x="14.0112%" y="469" width="0.5604%" height="15" fill="rgb(250,143,31)" fg:x="175" fg:w="7"/><text x="14.2612%" y="479.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="14.4916%" y="453" width="0.0801%" height="15" fill="rgb(211,110,34)" fg:x="181" fg:w="1"/><text x="14.7416%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6517%" y="469" width="0.0801%" height="15" fill="rgb(215,124,48)" fg:x="183" fg:w="1"/><text x="14.9017%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="14.7318%" y="469" width="0.1601%" height="15" fill="rgb(216,46,13)" fg:x="184" fg:w="2"/><text x="14.9818%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.8118%" y="453" width="0.0801%" height="15" fill="rgb(205,184,25)" fg:x="185" fg:w="1"/><text x="15.0618%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.8118%" y="437" width="0.0801%" height="15" fill="rgb(228,1,10)" fg:x="185" fg:w="1"/><text x="15.0618%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.8118%" y="421" width="0.0801%" height="15" fill="rgb(213,116,27)" fg:x="185" fg:w="1"/><text x="15.0618%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.8118%" y="405" width="0.0801%" height="15" fill="rgb(241,95,50)" fg:x="185" fg:w="1"/><text x="15.0618%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.8118%" y="389" width="0.0801%" height="15" fill="rgb(238,48,32)" fg:x="185" fg:w="1"/><text x="15.0618%" y="399.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="14.9720%" y="437" width="0.2402%" height="15" fill="rgb(235,113,49)" fg:x="187" fg:w="3"/><text x="15.2220%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (32 samples, 2.56%)</title><rect x="14.9720%" y="453" width="2.5620%" height="15" fill="rgb(205,127,43)" fg:x="187" fg:w="32"/><text x="15.2220%" y="463.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (29 samples, 2.32%)</title><rect x="15.2122%" y="437" width="2.3219%" height="15" fill="rgb(250,162,2)" fg:x="190" fg:w="29"/><text x="15.4622%" y="447.50">c..</text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="17.6942%" y="437" width="0.2402%" height="15" fill="rgb(220,13,41)" fg:x="221" fg:w="3"/><text x="17.9442%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="17.5340%" y="453" width="0.4804%" height="15" fill="rgb(249,221,25)" fg:x="219" fg:w="6"/><text x="17.7840%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="17.9343%" y="437" width="0.0801%" height="15" fill="rgb(215,208,19)" fg:x="224" fg:w="1"/><text x="18.1843%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="17.9343%" y="421" width="0.0801%" height="15" fill="rgb(236,175,2)" fg:x="224" fg:w="1"/><text x="18.1843%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="17.9343%" y="405" width="0.0801%" height="15" fill="rgb(241,52,2)" fg:x="224" fg:w="1"/><text x="18.1843%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.9343%" y="389" width="0.0801%" height="15" fill="rgb(248,140,14)" fg:x="224" fg:w="1"/><text x="18.1843%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.9343%" y="373" width="0.0801%" height="15" fill="rgb(253,22,42)" fg:x="224" fg:w="1"/><text x="18.1843%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="17.9343%" y="357" width="0.0801%" height="15" fill="rgb(234,61,47)" fg:x="224" fg:w="1"/><text x="18.1843%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="17.9343%" y="341" width="0.0801%" height="15" fill="rgb(208,226,15)" fg:x="224" fg:w="1"/><text x="18.1843%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="18.0144%" y="453" width="0.0801%" height="15" fill="rgb(217,221,4)" fg:x="225" fg:w="1"/><text x="18.2644%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="18.0144%" y="437" width="0.0801%" height="15" fill="rgb(212,174,34)" fg:x="225" fg:w="1"/><text x="18.2644%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="18.0144%" y="421" width="0.0801%" height="15" fill="rgb(253,83,4)" fg:x="225" fg:w="1"/><text x="18.2644%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="18.0144%" y="405" width="0.0801%" height="15" fill="rgb(250,195,49)" fg:x="225" fg:w="1"/><text x="18.2644%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.0144%" y="389" width="0.0801%" height="15" fill="rgb(241,192,25)" fg:x="225" fg:w="1"/><text x="18.2644%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.0144%" y="373" width="0.0801%" height="15" fill="rgb(208,124,10)" fg:x="225" fg:w="1"/><text x="18.2644%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0144%" y="357" width="0.0801%" height="15" fill="rgb(222,33,0)" fg:x="225" fg:w="1"/><text x="18.2644%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="18.1745%" y="405" width="0.0801%" height="15" fill="rgb(234,209,28)" fg:x="227" fg:w="1"/><text x="18.4245%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.1745%" y="389" width="0.0801%" height="15" fill="rgb(224,11,23)" fg:x="227" fg:w="1"/><text x="18.4245%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.1745%" y="373" width="0.0801%" height="15" fill="rgb(232,99,1)" fg:x="227" fg:w="1"/><text x="18.4245%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1745%" y="357" width="0.0801%" height="15" fill="rgb(237,95,45)" fg:x="227" fg:w="1"/><text x="18.4245%" y="367.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="18.4147%" y="389" width="0.4804%" height="15" fill="rgb(208,109,11)" fg:x="230" fg:w="6"/><text x="18.6647%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="18.8951%" y="389" width="0.4003%" height="15" fill="rgb(216,190,48)" fg:x="236" fg:w="5"/><text x="19.1451%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="18.9752%" y="373" width="0.3203%" height="15" fill="rgb(251,171,36)" fg:x="237" fg:w="4"/><text x="19.2252%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="18.9752%" y="357" width="0.3203%" height="15" fill="rgb(230,62,22)" fg:x="237" fg:w="4"/><text x="19.2252%" y="367.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="18.9752%" y="341" width="0.3203%" height="15" fill="rgb(225,114,35)" fg:x="237" fg:w="4"/><text x="19.2252%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="19.2954%" y="389" width="0.2402%" height="15" fill="rgb(215,118,42)" fg:x="241" fg:w="3"/><text x="19.5454%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.4556%" y="373" width="0.0801%" height="15" fill="rgb(243,119,21)" fg:x="243" fg:w="1"/><text x="19.7056%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.4556%" y="357" width="0.0801%" height="15" fill="rgb(252,177,53)" fg:x="243" fg:w="1"/><text x="19.7056%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.4556%" y="341" width="0.0801%" height="15" fill="rgb(237,209,29)" fg:x="243" fg:w="1"/><text x="19.7056%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="19.6157%" y="357" width="0.1601%" height="15" fill="rgb(212,65,23)" fg:x="245" fg:w="2"/><text x="19.8657%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.6958%" y="341" width="0.0801%" height="15" fill="rgb(230,222,46)" fg:x="246" fg:w="1"/><text x="19.9458%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.6958%" y="325" width="0.0801%" height="15" fill="rgb(215,135,32)" fg:x="246" fg:w="1"/><text x="19.9458%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="19.5356%" y="389" width="0.4003%" height="15" fill="rgb(246,101,22)" fg:x="244" fg:w="5"/><text x="19.7856%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="19.6157%" y="373" width="0.3203%" height="15" fill="rgb(206,107,13)" fg:x="245" fg:w="4"/><text x="19.8657%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="19.7758%" y="357" width="0.1601%" height="15" fill="rgb(250,100,44)" fg:x="247" fg:w="2"/><text x="20.0258%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0160%" y="357" width="0.0801%" height="15" fill="rgb(231,147,38)" fg:x="250" fg:w="1"/><text x="20.2660%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (110 samples, 8.81%)</title><rect x="19.9359%" y="389" width="8.8070%" height="15" fill="rgb(229,8,40)" fg:x="249" fg:w="110"/><text x="20.1859%" y="399.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (110 samples, 8.81%)</title><rect x="19.9359%" y="373" width="8.8070%" height="15" fill="rgb(221,135,30)" fg:x="249" fg:w="110"/><text x="20.1859%" y="383.50">regex_automa..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (108 samples, 8.65%)</title><rect x="20.0961%" y="357" width="8.6469%" height="15" fill="rgb(249,193,18)" fg:x="251" fg:w="108"/><text x="20.3461%" y="367.50">alloc::vec::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="28.7430%" y="389" width="0.3203%" height="15" fill="rgb(209,133,39)" fg:x="359" fg:w="4"/><text x="28.9930%" y="399.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="29.0633%" y="389" width="0.0801%" height="15" fill="rgb(232,100,14)" fg:x="363" fg:w="1"/><text x="29.3133%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (140 samples, 11.21%)</title><rect x="18.0945%" y="437" width="11.2090%" height="15" fill="rgb(224,185,1)" fg:x="226" fg:w="140"/><text x="18.3445%" y="447.50">&lt;core::iter::ada..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (140 samples, 11.21%)</title><rect x="18.0945%" y="421" width="11.2090%" height="15" fill="rgb(223,139,8)" fg:x="226" fg:w="140"/><text x="18.3445%" y="431.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (138 samples, 11.05%)</title><rect x="18.2546%" y="405" width="11.0488%" height="15" fill="rgb(232,213,38)" fg:x="228" fg:w="138"/><text x="18.5046%" y="415.50">regex_automata::..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="29.1433%" y="389" width="0.1601%" height="15" fill="rgb(207,94,22)" fg:x="364" fg:w="2"/><text x="29.3933%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.2234%" y="373" width="0.0801%" height="15" fill="rgb(219,183,54)" fg:x="365" fg:w="1"/><text x="29.4734%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.3835%" y="421" width="0.0801%" height="15" fill="rgb(216,185,54)" fg:x="367" fg:w="1"/><text x="29.6335%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (11 samples, 0.88%)</title><rect x="29.4636%" y="421" width="0.8807%" height="15" fill="rgb(254,217,39)" fg:x="368" fg:w="11"/><text x="29.7136%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="29.8639%" y="405" width="0.4804%" height="15" fill="rgb(240,178,23)" fg:x="373" fg:w="6"/><text x="30.1139%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="29.8639%" y="389" width="0.4804%" height="15" fill="rgb(218,11,47)" fg:x="373" fg:w="6"/><text x="30.1139%" y="399.50"></text></g><g><title>realloc (6 samples, 0.48%)</title><rect x="29.8639%" y="373" width="0.4804%" height="15" fill="rgb(218,51,51)" fg:x="373" fg:w="6"/><text x="30.1139%" y="383.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="30.7446%" y="373" width="0.0801%" height="15" fill="rgb(238,126,27)" fg:x="384" fg:w="1"/><text x="30.9946%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="30.7446%" y="357" width="0.0801%" height="15" fill="rgb(249,202,22)" fg:x="384" fg:w="1"/><text x="30.9946%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="30.3443%" y="421" width="0.5604%" height="15" fill="rgb(254,195,49)" fg:x="379" fg:w="7"/><text x="30.5943%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="30.7446%" y="405" width="0.1601%" height="15" fill="rgb(208,123,14)" fg:x="384" fg:w="2"/><text x="30.9946%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="30.7446%" y="389" width="0.1601%" height="15" fill="rgb(224,200,8)" fg:x="384" fg:w="2"/><text x="30.9946%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.8247%" y="373" width="0.0801%" height="15" fill="rgb(217,61,36)" fg:x="385" fg:w="1"/><text x="31.0747%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (21 samples, 1.68%)</title><rect x="29.3034%" y="437" width="1.6813%" height="15" fill="rgb(206,35,45)" fg:x="366" fg:w="21"/><text x="29.5534%" y="447.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="30.9047%" y="421" width="0.0801%" height="15" fill="rgb(217,65,33)" fg:x="386" fg:w="1"/><text x="31.1547%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="30.9848%" y="437" width="0.0801%" height="15" fill="rgb(222,158,48)" fg:x="387" fg:w="1"/><text x="31.2348%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (163 samples, 13.05%)</title><rect x="18.0945%" y="453" width="13.0504%" height="15" fill="rgb(254,2,54)" fg:x="226" fg:w="163"/><text x="18.3445%" y="463.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="31.0649%" y="437" width="0.0801%" height="15" fill="rgb(250,143,38)" fg:x="388" fg:w="1"/><text x="31.3149%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="31.0649%" y="421" width="0.0801%" height="15" fill="rgb(248,25,0)" fg:x="388" fg:w="1"/><text x="31.3149%" y="431.50"></text></g><g><title>regex_automata::meta::strategy::new (205 samples, 16.41%)</title><rect x="14.8919%" y="469" width="16.4131%" height="15" fill="rgb(206,152,27)" fg:x="186" fg:w="205"/><text x="15.1419%" y="479.50">regex_automata::meta::str..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="31.1449%" y="453" width="0.1601%" height="15" fill="rgb(240,77,30)" fg:x="389" fg:w="2"/><text x="31.3949%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="31.1449%" y="437" width="0.1601%" height="15" fill="rgb(231,5,3)" fg:x="389" fg:w="2"/><text x="31.3949%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="31.2250%" y="421" width="0.0801%" height="15" fill="rgb(207,226,32)" fg:x="390" fg:w="1"/><text x="31.4750%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="31.3050%" y="421" width="0.1601%" height="15" fill="rgb(222,207,47)" fg:x="391" fg:w="2"/><text x="31.5550%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="31.3851%" y="405" width="0.0801%" height="15" fill="rgb(229,115,45)" fg:x="392" fg:w="1"/><text x="31.6351%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="31.3851%" y="389" width="0.0801%" height="15" fill="rgb(224,191,6)" fg:x="392" fg:w="1"/><text x="31.6351%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="31.3851%" y="373" width="0.0801%" height="15" fill="rgb(230,227,24)" fg:x="392" fg:w="1"/><text x="31.6351%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="31.3851%" y="357" width="0.0801%" height="15" fill="rgb(228,80,19)" fg:x="392" fg:w="1"/><text x="31.6351%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="31.4652%" y="405" width="0.4804%" height="15" fill="rgb(247,229,0)" fg:x="393" fg:w="6"/><text x="31.7152%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="31.4652%" y="389" width="0.4804%" height="15" fill="rgb(237,194,15)" fg:x="393" fg:w="6"/><text x="31.7152%" y="399.50"></text></g><g><title>__libc_malloc (6 samples, 0.48%)</title><rect x="31.4652%" y="373" width="0.4804%" height="15" fill="rgb(219,203,20)" fg:x="393" fg:w="6"/><text x="31.7152%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="31.3050%" y="469" width="0.7206%" height="15" fill="rgb(234,128,8)" fg:x="391" fg:w="9"/><text x="31.5550%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="31.3050%" y="453" width="0.7206%" height="15" fill="rgb(248,202,8)" fg:x="391" fg:w="9"/><text x="31.5550%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.72%)</title><rect x="31.3050%" y="437" width="0.7206%" height="15" fill="rgb(206,104,37)" fg:x="391" fg:w="9"/><text x="31.5550%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (7 samples, 0.56%)</title><rect x="31.4652%" y="421" width="0.5604%" height="15" fill="rgb(223,8,27)" fg:x="393" fg:w="7"/><text x="31.7152%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="31.9456%" y="405" width="0.0801%" height="15" fill="rgb(216,217,28)" fg:x="399" fg:w="1"/><text x="32.1956%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="32.2658%" y="437" width="0.0801%" height="15" fill="rgb(249,199,1)" fg:x="403" fg:w="1"/><text x="32.5158%" y="447.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="32.2658%" y="421" width="0.0801%" height="15" fill="rgb(240,85,17)" fg:x="403" fg:w="1"/><text x="32.5158%" y="431.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="32.2658%" y="405" width="0.0801%" height="15" fill="rgb(206,108,45)" fg:x="403" fg:w="1"/><text x="32.5158%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="32.3459%" y="437" width="0.0801%" height="15" fill="rgb(245,210,41)" fg:x="404" fg:w="1"/><text x="32.5959%" y="447.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="32.3459%" y="421" width="0.0801%" height="15" fill="rgb(206,13,37)" fg:x="404" fg:w="1"/><text x="32.5959%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (224 samples, 17.93%)</title><rect x="14.5717%" y="485" width="17.9343%" height="15" fill="rgb(250,61,18)" fg:x="182" fg:w="224"/><text x="14.8217%" y="495.50">regex_automata::meta::regex:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="32.0256%" y="469" width="0.4804%" height="15" fill="rgb(235,172,48)" fg:x="400" fg:w="6"/><text x="32.2756%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="32.0256%" y="453" width="0.4804%" height="15" fill="rgb(249,201,17)" fg:x="400" fg:w="6"/><text x="32.2756%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="32.4259%" y="437" width="0.0801%" height="15" fill="rgb(219,208,6)" fg:x="405" fg:w="1"/><text x="32.6759%" y="447.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="32.4259%" y="421" width="0.0801%" height="15" fill="rgb(248,31,23)" fg:x="405" fg:w="1"/><text x="32.6759%" y="431.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (225 samples, 18.01%)</title><rect x="14.5717%" y="517" width="18.0144%" height="15" fill="rgb(245,15,42)" fg:x="182" fg:w="225"/><text x="14.8217%" y="527.50">&lt;regex::regex::string::Regex..</text></g><g><title>regex::builders::Builder::build_one_string (225 samples, 18.01%)</title><rect x="14.5717%" y="501" width="18.0144%" height="15" fill="rgb(222,217,39)" fg:x="182" fg:w="225"/><text x="14.8217%" y="511.50">regex::builders::Builder::bu..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="32.5060%" y="485" width="0.0801%" height="15" fill="rgb(210,219,27)" fg:x="406" fg:w="1"/><text x="32.7560%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.5861%" y="517" width="0.0801%" height="15" fill="rgb(252,166,36)" fg:x="407" fg:w="1"/><text x="32.8361%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="32.6661%" y="485" width="0.0801%" height="15" fill="rgb(245,132,34)" fg:x="408" fg:w="1"/><text x="32.9161%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="32.6661%" y="469" width="0.0801%" height="15" fill="rgb(236,54,3)" fg:x="408" fg:w="1"/><text x="32.9161%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.6661%" y="453" width="0.0801%" height="15" fill="rgb(241,173,43)" fg:x="408" fg:w="1"/><text x="32.9161%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="32.6661%" y="517" width="0.3203%" height="15" fill="rgb(215,190,9)" fg:x="408" fg:w="4"/><text x="32.9161%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="32.6661%" y="501" width="0.3203%" height="15" fill="rgb(242,101,16)" fg:x="408" fg:w="4"/><text x="32.9161%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="32.7462%" y="485" width="0.2402%" height="15" fill="rgb(223,190,21)" fg:x="409" fg:w="3"/><text x="32.9962%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="32.7462%" y="469" width="0.2402%" height="15" fill="rgb(215,228,25)" fg:x="409" fg:w="3"/><text x="32.9962%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="32.8263%" y="453" width="0.1601%" height="15" fill="rgb(225,36,22)" fg:x="410" fg:w="2"/><text x="33.0763%" y="463.50"></text></g><g><title>regex_automata::util::iter::Searcher::new (1 samples, 0.08%)</title><rect x="32.9864%" y="517" width="0.0801%" height="15" fill="rgb(251,106,46)" fg:x="412" fg:w="1"/><text x="33.2364%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.2266%" y="437" width="0.0801%" height="15" fill="rgb(208,90,1)" fg:x="415" fg:w="1"/><text x="33.4766%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.2266%" y="421" width="0.0801%" height="15" fill="rgb(243,10,4)" fg:x="415" fg:w="1"/><text x="33.4766%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.2266%" y="405" width="0.0801%" height="15" fill="rgb(212,137,27)" fg:x="415" fg:w="1"/><text x="33.4766%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.3066%" y="437" width="0.0801%" height="15" fill="rgb(231,220,49)" fg:x="416" fg:w="1"/><text x="33.5566%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="33.1465%" y="453" width="0.4003%" height="15" fill="rgb(237,96,20)" fg:x="414" fg:w="5"/><text x="33.3965%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="33.3867%" y="437" width="0.1601%" height="15" fill="rgb(239,229,30)" fg:x="417" fg:w="2"/><text x="33.6367%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.5468%" y="405" width="0.0801%" height="15" fill="rgb(219,65,33)" fg:x="419" fg:w="1"/><text x="33.7968%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="33.0665%" y="469" width="0.6405%" height="15" fill="rgb(243,134,7)" fg:x="413" fg:w="8"/><text x="33.3165%" y="479.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="33.5468%" y="453" width="0.1601%" height="15" fill="rgb(216,177,54)" fg:x="419" fg:w="2"/><text x="33.7968%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="33.5468%" y="437" width="0.1601%" height="15" fill="rgb(211,160,20)" fg:x="419" fg:w="2"/><text x="33.7968%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="33.5468%" y="421" width="0.1601%" height="15" fill="rgb(239,85,39)" fg:x="419" fg:w="2"/><text x="33.7968%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="33.6269%" y="405" width="0.0801%" height="15" fill="rgb(232,125,22)" fg:x="420" fg:w="1"/><text x="33.8769%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="33.6269%" y="389" width="0.0801%" height="15" fill="rgb(244,57,34)" fg:x="420" fg:w="1"/><text x="33.8769%" y="399.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (249 samples, 19.94%)</title><rect x="13.9311%" y="533" width="19.9359%" height="15" fill="rgb(214,203,32)" fg:x="174" fg:w="249"/><text x="14.1811%" y="543.50">indefinite::helper::Helper::get..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.80%)</title><rect x="33.0665%" y="517" width="0.8006%" height="15" fill="rgb(207,58,43)" fg:x="413" fg:w="10"/><text x="33.3165%" y="527.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.80%)</title><rect x="33.0665%" y="501" width="0.8006%" height="15" fill="rgb(215,193,15)" fg:x="413" fg:w="10"/><text x="33.3165%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.80%)</title><rect x="33.0665%" y="485" width="0.8006%" height="15" fill="rgb(232,15,44)" fg:x="413" fg:w="10"/><text x="33.3165%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="33.7070%" y="469" width="0.1601%" height="15" fill="rgb(212,3,48)" fg:x="421" fg:w="2"/><text x="33.9570%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="33.7870%" y="453" width="0.0801%" height="15" fill="rgb(218,128,7)" fg:x="422" fg:w="1"/><text x="34.0370%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="33.9472%" y="469" width="0.1601%" height="15" fill="rgb(226,216,39)" fg:x="424" fg:w="2"/><text x="34.1972%" y="479.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="33.9472%" y="453" width="0.1601%" height="15" fill="rgb(243,47,51)" fg:x="424" fg:w="2"/><text x="34.1972%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.0272%" y="437" width="0.0801%" height="15" fill="rgb(241,183,40)" fg:x="425" fg:w="1"/><text x="34.2772%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="34.1073%" y="469" width="0.1601%" height="15" fill="rgb(231,217,32)" fg:x="426" fg:w="2"/><text x="34.3573%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="34.4275%" y="437" width="0.1601%" height="15" fill="rgb(229,61,38)" fg:x="430" fg:w="2"/><text x="34.6775%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="34.2674%" y="469" width="0.4003%" height="15" fill="rgb(225,210,5)" fg:x="428" fg:w="5"/><text x="34.5174%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="34.2674%" y="453" width="0.4003%" height="15" fill="rgb(231,79,45)" fg:x="428" fg:w="5"/><text x="34.5174%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="34.5877%" y="437" width="0.0801%" height="15" fill="rgb(224,100,7)" fg:x="432" fg:w="1"/><text x="34.8377%" y="447.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.5877%" y="421" width="0.0801%" height="15" fill="rgb(241,198,18)" fg:x="432" fg:w="1"/><text x="34.8377%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.5877%" y="405" width="0.0801%" height="15" fill="rgb(252,97,53)" fg:x="432" fg:w="1"/><text x="34.8377%" y="415.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="34.9079%" y="437" width="0.2402%" height="15" fill="rgb(220,88,7)" fg:x="436" fg:w="3"/><text x="35.1579%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.20%)</title><rect x="34.7478%" y="453" width="1.2010%" height="15" fill="rgb(213,176,14)" fg:x="434" fg:w="15"/><text x="34.9978%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.80%)</title><rect x="35.1481%" y="437" width="0.8006%" height="15" fill="rgb(246,73,7)" fg:x="439" fg:w="10"/><text x="35.3981%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="35.7886%" y="421" width="0.1601%" height="15" fill="rgb(245,64,36)" fg:x="447" fg:w="2"/><text x="36.0386%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="35.9488%" y="453" width="0.0801%" height="15" fill="rgb(245,80,10)" fg:x="449" fg:w="1"/><text x="36.1988%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="35.9488%" y="437" width="0.0801%" height="15" fill="rgb(232,107,50)" fg:x="449" fg:w="1"/><text x="36.1988%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="35.9488%" y="421" width="0.0801%" height="15" fill="rgb(253,3,0)" fg:x="449" fg:w="1"/><text x="36.1988%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.1890%" y="421" width="0.0801%" height="15" fill="rgb(212,99,53)" fg:x="452" fg:w="1"/><text x="36.4390%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="36.2690%" y="421" width="0.3203%" height="15" fill="rgb(249,111,54)" fg:x="453" fg:w="4"/><text x="36.5190%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="36.3491%" y="405" width="0.2402%" height="15" fill="rgb(249,55,30)" fg:x="454" fg:w="3"/><text x="36.5991%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.5092%" y="389" width="0.0801%" height="15" fill="rgb(237,47,42)" fg:x="456" fg:w="1"/><text x="36.7592%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.5092%" y="373" width="0.0801%" height="15" fill="rgb(211,20,18)" fg:x="456" fg:w="1"/><text x="36.7592%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="36.5092%" y="357" width="0.0801%" height="15" fill="rgb(231,203,46)" fg:x="456" fg:w="1"/><text x="36.7592%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="36.5893%" y="421" width="0.3203%" height="15" fill="rgb(237,142,3)" fg:x="457" fg:w="4"/><text x="36.8393%" y="431.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="36.5893%" y="405" width="0.3203%" height="15" fill="rgb(241,107,1)" fg:x="457" fg:w="4"/><text x="36.8393%" y="415.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="36.6693%" y="389" width="0.2402%" height="15" fill="rgb(229,83,13)" fg:x="458" fg:w="3"/><text x="36.9193%" y="399.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (13 samples, 1.04%)</title><rect x="36.0288%" y="437" width="1.0408%" height="15" fill="rgb(241,91,40)" fg:x="450" fg:w="13"/><text x="36.2788%" y="447.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (2 samples, 0.16%)</title><rect x="36.9095%" y="421" width="0.1601%" height="15" fill="rgb(225,3,45)" fg:x="461" fg:w="2"/><text x="37.1595%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.9896%" y="405" width="0.0801%" height="15" fill="rgb(244,223,14)" fg:x="462" fg:w="1"/><text x="37.2396%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.9896%" y="389" width="0.0801%" height="15" fill="rgb(224,124,37)" fg:x="462" fg:w="1"/><text x="37.2396%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.9896%" y="373" width="0.0801%" height="15" fill="rgb(251,171,30)" fg:x="462" fg:w="1"/><text x="37.2396%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (14 samples, 1.12%)</title><rect x="36.0288%" y="453" width="1.1209%" height="15" fill="rgb(236,46,54)" fg:x="450" fg:w="14"/><text x="36.2788%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="37.0697%" y="437" width="0.0801%" height="15" fill="rgb(245,213,5)" fg:x="463" fg:w="1"/><text x="37.3197%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="37.0697%" y="421" width="0.0801%" height="15" fill="rgb(230,144,27)" fg:x="463" fg:w="1"/><text x="37.3197%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="37.2298%" y="389" width="0.1601%" height="15" fill="rgb(220,86,6)" fg:x="465" fg:w="2"/><text x="37.4798%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="37.3899%" y="373" width="0.0801%" height="15" fill="rgb(240,20,13)" fg:x="467" fg:w="1"/><text x="37.6399%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="37.3899%" y="357" width="0.0801%" height="15" fill="rgb(217,89,34)" fg:x="467" fg:w="1"/><text x="37.6399%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="37.4700%" y="357" width="0.0801%" height="15" fill="rgb(229,13,5)" fg:x="468" fg:w="1"/><text x="37.7200%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.4700%" y="341" width="0.0801%" height="15" fill="rgb(244,67,35)" fg:x="468" fg:w="1"/><text x="37.7200%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.4700%" y="325" width="0.0801%" height="15" fill="rgb(221,40,2)" fg:x="468" fg:w="1"/><text x="37.7200%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.4700%" y="309" width="0.0801%" height="15" fill="rgb(237,157,21)" fg:x="468" fg:w="1"/><text x="37.7200%" y="319.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="38.2706%" y="341" width="0.3203%" height="15" fill="rgb(222,94,11)" fg:x="478" fg:w="4"/><text x="38.5206%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="38.5909%" y="341" width="0.1601%" height="15" fill="rgb(249,113,6)" fg:x="482" fg:w="2"/><text x="38.8409%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="38.7510%" y="341" width="0.1601%" height="15" fill="rgb(238,137,36)" fg:x="484" fg:w="2"/><text x="39.0010%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.8311%" y="325" width="0.0801%" height="15" fill="rgb(210,102,26)" fg:x="485" fg:w="1"/><text x="39.0811%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.8311%" y="309" width="0.0801%" height="15" fill="rgb(218,30,30)" fg:x="485" fg:w="1"/><text x="39.0811%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.8311%" y="293" width="0.0801%" height="15" fill="rgb(214,67,26)" fg:x="485" fg:w="1"/><text x="39.0811%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="38.9111%" y="341" width="0.0801%" height="15" fill="rgb(251,9,53)" fg:x="486" fg:w="1"/><text x="39.1611%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.7118%" y="309" width="0.0801%" height="15" fill="rgb(228,204,25)" fg:x="496" fg:w="1"/><text x="39.9618%" y="319.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="39.7918%" y="277" width="0.2402%" height="15" fill="rgb(207,153,8)" fg:x="497" fg:w="3"/><text x="40.0418%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="39.7918%" y="309" width="0.4804%" height="15" fill="rgb(242,9,16)" fg:x="497" fg:w="6"/><text x="40.0418%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="39.7918%" y="293" width="0.4804%" height="15" fill="rgb(217,211,10)" fg:x="497" fg:w="6"/><text x="40.0418%" y="303.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="40.0320%" y="277" width="0.2402%" height="15" fill="rgb(219,228,52)" fg:x="500" fg:w="3"/><text x="40.2820%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (25 samples, 2.00%)</title><rect x="38.9912%" y="341" width="2.0016%" height="15" fill="rgb(231,92,29)" fg:x="487" fg:w="25"/><text x="39.2412%" y="351.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (21 samples, 1.68%)</title><rect x="39.3114%" y="325" width="1.6813%" height="15" fill="rgb(232,8,23)" fg:x="491" fg:w="21"/><text x="39.5614%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (9 samples, 0.72%)</title><rect x="40.2722%" y="309" width="0.7206%" height="15" fill="rgb(216,211,34)" fg:x="503" fg:w="9"/><text x="40.5222%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.9127%" y="293" width="0.0801%" height="15" fill="rgb(236,151,0)" fg:x="511" fg:w="1"/><text x="41.1627%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.9127%" y="277" width="0.0801%" height="15" fill="rgb(209,168,3)" fg:x="511" fg:w="1"/><text x="41.1627%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.9127%" y="261" width="0.0801%" height="15" fill="rgb(208,129,28)" fg:x="511" fg:w="1"/><text x="41.1627%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.9127%" y="245" width="0.0801%" height="15" fill="rgb(229,78,22)" fg:x="511" fg:w="1"/><text x="41.1627%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.9928%" y="325" width="0.0801%" height="15" fill="rgb(228,187,13)" fg:x="512" fg:w="1"/><text x="41.2428%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.9928%" y="309" width="0.0801%" height="15" fill="rgb(240,119,24)" fg:x="512" fg:w="1"/><text x="41.2428%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.9928%" y="293" width="0.0801%" height="15" fill="rgb(209,194,42)" fg:x="512" fg:w="1"/><text x="41.2428%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.9928%" y="277" width="0.0801%" height="15" fill="rgb(247,200,46)" fg:x="512" fg:w="1"/><text x="41.2428%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (76 samples, 6.08%)</title><rect x="40.9928%" y="341" width="6.0849%" height="15" fill="rgb(218,76,16)" fg:x="512" fg:w="76"/><text x="41.2428%" y="351.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (75 samples, 6.00%)</title><rect x="41.0729%" y="325" width="6.0048%" height="15" fill="rgb(225,21,48)" fg:x="513" fg:w="75"/><text x="41.3229%" y="335.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (75 samples, 6.00%)</title><rect x="41.0729%" y="309" width="6.0048%" height="15" fill="rgb(239,223,50)" fg:x="513" fg:w="75"/><text x="41.3229%" y="319.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="47.0777%" y="341" width="0.0801%" height="15" fill="rgb(244,45,21)" fg:x="588" fg:w="1"/><text x="47.3277%" y="351.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="47.1577%" y="341" width="0.0801%" height="15" fill="rgb(232,33,43)" fg:x="589" fg:w="1"/><text x="47.4077%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.7182%" y="293" width="0.0801%" height="15" fill="rgb(209,8,3)" fg:x="596" fg:w="1"/><text x="47.9682%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (133 samples, 10.65%)</title><rect x="37.2298%" y="437" width="10.6485%" height="15" fill="rgb(214,25,53)" fg:x="465" fg:w="133"/><text x="37.4798%" y="447.50">&lt;core::iter::ada..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (133 samples, 10.65%)</title><rect x="37.2298%" y="421" width="10.6485%" height="15" fill="rgb(254,186,54)" fg:x="465" fg:w="133"/><text x="37.4798%" y="431.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (133 samples, 10.65%)</title><rect x="37.2298%" y="405" width="10.6485%" height="15" fill="rgb(208,174,49)" fg:x="465" fg:w="133"/><text x="37.4798%" y="415.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (131 samples, 10.49%)</title><rect x="37.3899%" y="389" width="10.4884%" height="15" fill="rgb(233,191,51)" fg:x="467" fg:w="131"/><text x="37.6399%" y="399.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (130 samples, 10.41%)</title><rect x="37.4700%" y="373" width="10.4083%" height="15" fill="rgb(222,134,10)" fg:x="468" fg:w="130"/><text x="37.7200%" y="383.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (129 samples, 10.33%)</title><rect x="37.5500%" y="357" width="10.3283%" height="15" fill="rgb(230,226,20)" fg:x="469" fg:w="129"/><text x="37.8000%" y="367.50">regex_automata:..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (8 samples, 0.64%)</title><rect x="47.2378%" y="341" width="0.6405%" height="15" fill="rgb(251,111,25)" fg:x="590" fg:w="8"/><text x="47.4878%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="47.5580%" y="325" width="0.3203%" height="15" fill="rgb(224,40,46)" fg:x="594" fg:w="4"/><text x="47.8080%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="47.6381%" y="309" width="0.2402%" height="15" fill="rgb(236,108,47)" fg:x="595" fg:w="3"/><text x="47.8881%" y="319.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="47.7982%" y="293" width="0.0801%" height="15" fill="rgb(234,93,0)" fg:x="597" fg:w="1"/><text x="48.0482%" y="303.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="47.9584%" y="421" width="0.0801%" height="15" fill="rgb(224,213,32)" fg:x="599" fg:w="1"/><text x="48.2084%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.0384%" y="421" width="0.0801%" height="15" fill="rgb(251,11,48)" fg:x="600" fg:w="1"/><text x="48.2884%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="48.1185%" y="421" width="0.1601%" height="15" fill="rgb(236,173,5)" fg:x="601" fg:w="2"/><text x="48.3685%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (12 samples, 0.96%)</title><rect x="48.2786%" y="421" width="0.9608%" height="15" fill="rgb(230,95,12)" fg:x="603" fg:w="12"/><text x="48.5286%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="49.0793%" y="405" width="0.1601%" height="15" fill="rgb(232,209,1)" fg:x="613" fg:w="2"/><text x="49.3293%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="49.0793%" y="389" width="0.1601%" height="15" fill="rgb(232,6,1)" fg:x="613" fg:w="2"/><text x="49.3293%" y="399.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="49.0793%" y="373" width="0.1601%" height="15" fill="rgb(210,224,50)" fg:x="613" fg:w="2"/><text x="49.3293%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="49.2394%" y="421" width="0.4804%" height="15" fill="rgb(228,127,35)" fg:x="615" fg:w="6"/><text x="49.4894%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.6397%" y="405" width="0.0801%" height="15" fill="rgb(245,102,45)" fg:x="620" fg:w="1"/><text x="49.8897%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="49.7198%" y="421" width="0.2402%" height="15" fill="rgb(214,1,49)" fg:x="621" fg:w="3"/><text x="49.9698%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (161 samples, 12.89%)</title><rect x="37.1497%" y="453" width="12.8903%" height="15" fill="rgb(226,163,40)" fg:x="464" fg:w="161"/><text x="37.3997%" y="463.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (27 samples, 2.16%)</title><rect x="47.8783%" y="437" width="2.1617%" height="15" fill="rgb(239,212,28)" fg:x="598" fg:w="27"/><text x="48.1283%" y="447.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="49.9600%" y="421" width="0.0801%" height="15" fill="rgb(220,20,13)" fg:x="624" fg:w="1"/><text x="50.2100%" y="431.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="49.9600%" y="405" width="0.0801%" height="15" fill="rgb(210,164,35)" fg:x="624" fg:w="1"/><text x="50.2100%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.9600%" y="389" width="0.0801%" height="15" fill="rgb(248,109,41)" fg:x="624" fg:w="1"/><text x="50.2100%" y="399.50"></text></g><g><title>regex_automata::meta::strategy::new (193 samples, 15.45%)</title><rect x="34.6677%" y="469" width="15.4524%" height="15" fill="rgb(238,23,50)" fg:x="433" fg:w="193"/><text x="34.9177%" y="479.50">regex_automata::meta::st..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="50.0400%" y="453" width="0.0801%" height="15" fill="rgb(211,48,49)" fg:x="625" fg:w="1"/><text x="50.2900%" y="463.50"></text></g><g><title>regex_automata::meta::reverse_inner::flatten (1 samples, 0.08%)</title><rect x="50.0400%" y="437" width="0.0801%" height="15" fill="rgb(223,36,21)" fg:x="625" fg:w="1"/><text x="50.2900%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.1201%" y="437" width="0.0801%" height="15" fill="rgb(207,123,46)" fg:x="626" fg:w="1"/><text x="50.3701%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.1201%" y="421" width="0.0801%" height="15" fill="rgb(240,218,32)" fg:x="626" fg:w="1"/><text x="50.3701%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.1201%" y="405" width="0.0801%" height="15" fill="rgb(252,5,43)" fg:x="626" fg:w="1"/><text x="50.3701%" y="415.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="50.2002%" y="421" width="0.0801%" height="15" fill="rgb(252,84,19)" fg:x="627" fg:w="1"/><text x="50.4502%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.2802%" y="405" width="0.0801%" height="15" fill="rgb(243,152,39)" fg:x="628" fg:w="1"/><text x="50.5302%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.2802%" y="389" width="0.0801%" height="15" fill="rgb(234,160,15)" fg:x="628" fg:w="1"/><text x="50.5302%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.2802%" y="373" width="0.0801%" height="15" fill="rgb(237,34,20)" fg:x="628" fg:w="1"/><text x="50.5302%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="50.2002%" y="437" width="0.2402%" height="15" fill="rgb(229,97,13)" fg:x="627" fg:w="3"/><text x="50.4502%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="50.2802%" y="421" width="0.1601%" height="15" fill="rgb(234,71,50)" fg:x="628" fg:w="2"/><text x="50.5302%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="50.3603%" y="405" width="0.0801%" height="15" fill="rgb(253,155,4)" fg:x="629" fg:w="1"/><text x="50.6103%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="50.3603%" y="389" width="0.0801%" height="15" fill="rgb(222,185,37)" fg:x="629" fg:w="1"/><text x="50.6103%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="50.4404%" y="437" width="0.0801%" height="15" fill="rgb(251,177,13)" fg:x="630" fg:w="1"/><text x="50.6904%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.4404%" y="421" width="0.0801%" height="15" fill="rgb(250,179,40)" fg:x="630" fg:w="1"/><text x="50.6904%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="50.5204%" y="437" width="0.0801%" height="15" fill="rgb(242,44,2)" fg:x="631" fg:w="1"/><text x="50.7704%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="50.6005%" y="437" width="0.0801%" height="15" fill="rgb(216,177,13)" fg:x="632" fg:w="1"/><text x="50.8505%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="50.6805%" y="437" width="0.0801%" height="15" fill="rgb(216,106,43)" fg:x="633" fg:w="1"/><text x="50.9305%" y="447.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="50.7606%" y="421" width="0.0801%" height="15" fill="rgb(216,183,2)" fg:x="634" fg:w="1"/><text x="51.0106%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.80%)</title><rect x="50.1201%" y="469" width="0.8006%" height="15" fill="rgb(249,75,3)" fg:x="626" fg:w="10"/><text x="50.3701%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.80%)</title><rect x="50.1201%" y="453" width="0.8006%" height="15" fill="rgb(219,67,39)" fg:x="626" fg:w="10"/><text x="50.3701%" y="463.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="50.7606%" y="437" width="0.1601%" height="15" fill="rgb(253,228,2)" fg:x="634" fg:w="2"/><text x="51.0106%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.8407%" y="421" width="0.0801%" height="15" fill="rgb(235,138,27)" fg:x="635" fg:w="1"/><text x="51.0907%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.8407%" y="405" width="0.0801%" height="15" fill="rgb(236,97,51)" fg:x="635" fg:w="1"/><text x="51.0907%" y="415.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="50.8407%" y="389" width="0.0801%" height="15" fill="rgb(240,80,30)" fg:x="635" fg:w="1"/><text x="51.0907%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="51.0008%" y="437" width="0.0801%" height="15" fill="rgb(230,178,19)" fg:x="637" fg:w="1"/><text x="51.2508%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.0809%" y="405" width="0.0801%" height="15" fill="rgb(210,190,27)" fg:x="638" fg:w="1"/><text x="51.3309%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.0809%" y="389" width="0.0801%" height="15" fill="rgb(222,107,31)" fg:x="638" fg:w="1"/><text x="51.3309%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.0809%" y="373" width="0.0801%" height="15" fill="rgb(216,127,34)" fg:x="638" fg:w="1"/><text x="51.3309%" y="383.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="51.0809%" y="421" width="0.1601%" height="15" fill="rgb(234,116,52)" fg:x="638" fg:w="2"/><text x="51.3309%" y="431.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="51.1609%" y="405" width="0.0801%" height="15" fill="rgb(222,124,15)" fg:x="639" fg:w="1"/><text x="51.4109%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="51.0809%" y="437" width="0.2402%" height="15" fill="rgb(231,179,28)" fg:x="638" fg:w="3"/><text x="51.3309%" y="447.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="51.2410%" y="421" width="0.0801%" height="15" fill="rgb(226,93,45)" fg:x="640" fg:w="1"/><text x="51.4910%" y="431.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="51.2410%" y="405" width="0.0801%" height="15" fill="rgb(215,8,51)" fg:x="640" fg:w="1"/><text x="51.4910%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.3211%" y="421" width="0.0801%" height="15" fill="rgb(223,106,5)" fg:x="641" fg:w="1"/><text x="51.5711%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.3211%" y="405" width="0.0801%" height="15" fill="rgb(250,191,5)" fg:x="641" fg:w="1"/><text x="51.5711%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.3211%" y="389" width="0.0801%" height="15" fill="rgb(242,132,44)" fg:x="641" fg:w="1"/><text x="51.5711%" y="399.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="51.4011%" y="421" width="0.0801%" height="15" fill="rgb(251,152,29)" fg:x="642" fg:w="1"/><text x="51.6511%" y="431.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::literal (1 samples, 0.08%)</title><rect x="51.4011%" y="405" width="0.0801%" height="15" fill="rgb(218,179,5)" fg:x="642" fg:w="1"/><text x="51.6511%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="51.3211%" y="437" width="0.2402%" height="15" fill="rgb(227,67,19)" fg:x="641" fg:w="3"/><text x="51.5711%" y="447.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="51.4812%" y="421" width="0.0801%" height="15" fill="rgb(233,119,31)" fg:x="643" fg:w="1"/><text x="51.7312%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (221 samples, 17.69%)</title><rect x="33.9472%" y="485" width="17.6942%" height="15" fill="rgb(241,120,22)" fg:x="424" fg:w="221"/><text x="34.1972%" y="495.50">regex_automata::meta::regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.72%)</title><rect x="50.9207%" y="469" width="0.7206%" height="15" fill="rgb(224,102,30)" fg:x="636" fg:w="9"/><text x="51.1707%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.72%)</title><rect x="50.9207%" y="453" width="0.7206%" height="15" fill="rgb(210,164,37)" fg:x="636" fg:w="9"/><text x="51.1707%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="51.5612%" y="437" width="0.0801%" height="15" fill="rgb(226,191,16)" fg:x="644" fg:w="1"/><text x="51.8112%" y="447.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="51.5612%" y="421" width="0.0801%" height="15" fill="rgb(214,40,45)" fg:x="644" fg:w="1"/><text x="51.8112%" y="431.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (223 samples, 17.85%)</title><rect x="33.8671%" y="517" width="17.8543%" height="15" fill="rgb(244,29,26)" fg:x="423" fg:w="223"/><text x="34.1171%" y="527.50">&lt;regex::regex::string::Regex..</text></g><g><title>regex::builders::Builder::build_one_string (223 samples, 17.85%)</title><rect x="33.8671%" y="501" width="17.8543%" height="15" fill="rgb(216,16,5)" fg:x="423" fg:w="223"/><text x="34.1171%" y="511.50">regex::builders::Builder::bu..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="51.6413%" y="485" width="0.0801%" height="15" fill="rgb(249,76,35)" fg:x="645" fg:w="1"/><text x="51.8913%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.7214%" y="501" width="0.0801%" height="15" fill="rgb(207,11,44)" fg:x="646" fg:w="1"/><text x="51.9714%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="51.8014%" y="469" width="0.0801%" height="15" fill="rgb(228,190,49)" fg:x="647" fg:w="1"/><text x="52.0514%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.8014%" y="453" width="0.0801%" height="15" fill="rgb(214,173,12)" fg:x="647" fg:w="1"/><text x="52.0514%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="51.8815%" y="453" width="0.0801%" height="15" fill="rgb(218,26,35)" fg:x="648" fg:w="1"/><text x="52.1315%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.8815%" y="437" width="0.0801%" height="15" fill="rgb(220,200,19)" fg:x="648" fg:w="1"/><text x="52.1315%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="51.8815%" y="469" width="0.1601%" height="15" fill="rgb(239,95,49)" fg:x="648" fg:w="2"/><text x="52.1315%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="51.9616%" y="453" width="0.0801%" height="15" fill="rgb(235,85,53)" fg:x="649" fg:w="1"/><text x="52.2116%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.9616%" y="437" width="0.0801%" height="15" fill="rgb(233,133,31)" fg:x="649" fg:w="1"/><text x="52.2116%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="52.0416%" y="437" width="0.0801%" height="15" fill="rgb(218,25,20)" fg:x="650" fg:w="1"/><text x="52.2916%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="51.8014%" y="485" width="0.4003%" height="15" fill="rgb(252,210,38)" fg:x="647" fg:w="5"/><text x="52.0514%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="52.0416%" y="469" width="0.1601%" height="15" fill="rgb(242,134,21)" fg:x="650" fg:w="2"/><text x="52.2916%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="52.0416%" y="453" width="0.1601%" height="15" fill="rgb(213,28,48)" fg:x="650" fg:w="2"/><text x="52.2916%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.1217%" y="437" width="0.0801%" height="15" fill="rgb(250,196,2)" fg:x="651" fg:w="1"/><text x="52.3717%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="52.2018%" y="469" width="0.1601%" height="15" fill="rgb(227,5,17)" fg:x="652" fg:w="2"/><text x="52.4518%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="52.2018%" y="453" width="0.1601%" height="15" fill="rgb(221,226,24)" fg:x="652" fg:w="2"/><text x="52.4518%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (11 samples, 0.88%)</title><rect x="51.7214%" y="517" width="0.8807%" height="15" fill="rgb(211,5,48)" fg:x="646" fg:w="11"/><text x="51.9714%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (10 samples, 0.80%)</title><rect x="51.8014%" y="501" width="0.8006%" height="15" fill="rgb(219,150,6)" fg:x="647" fg:w="10"/><text x="52.0514%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.40%)</title><rect x="52.2018%" y="485" width="0.4003%" height="15" fill="rgb(251,46,16)" fg:x="652" fg:w="5"/><text x="52.4518%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="52.3619%" y="469" width="0.2402%" height="15" fill="rgb(220,204,40)" fg:x="654" fg:w="3"/><text x="52.6119%" y="479.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="52.3619%" y="453" width="0.2402%" height="15" fill="rgb(211,85,2)" fg:x="654" fg:w="3"/><text x="52.6119%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="52.6821%" y="469" width="0.0801%" height="15" fill="rgb(229,17,7)" fg:x="658" fg:w="1"/><text x="52.9321%" y="479.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="52.6821%" y="453" width="0.0801%" height="15" fill="rgb(239,72,28)" fg:x="658" fg:w="1"/><text x="52.9321%" y="463.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="52.6821%" y="437" width="0.0801%" height="15" fill="rgb(230,47,54)" fg:x="658" fg:w="1"/><text x="52.9321%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="52.6021%" y="501" width="0.2402%" height="15" fill="rgb(214,50,8)" fg:x="657" fg:w="3"/><text x="52.8521%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="52.6021%" y="485" width="0.2402%" height="15" fill="rgb(216,198,43)" fg:x="657" fg:w="3"/><text x="52.8521%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="52.7622%" y="469" width="0.0801%" height="15" fill="rgb(234,20,35)" fg:x="659" fg:w="1"/><text x="53.0122%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.2426%" y="389" width="0.0801%" height="15" fill="rgb(254,45,19)" fg:x="665" fg:w="1"/><text x="53.4926%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="53.2426%" y="421" width="0.4003%" height="15" fill="rgb(219,14,44)" fg:x="665" fg:w="5"/><text x="53.4926%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="53.2426%" y="405" width="0.4003%" height="15" fill="rgb(217,220,26)" fg:x="665" fg:w="5"/><text x="53.4926%" y="415.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="53.3227%" y="389" width="0.3203%" height="15" fill="rgb(213,158,28)" fg:x="666" fg:w="4"/><text x="53.5727%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="53.6429%" y="421" width="0.0801%" height="15" fill="rgb(252,51,52)" fg:x="670" fg:w="1"/><text x="53.8929%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="53.6429%" y="405" width="0.0801%" height="15" fill="rgb(246,89,16)" fg:x="670" fg:w="1"/><text x="53.8929%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="53.6429%" y="389" width="0.0801%" height="15" fill="rgb(216,158,49)" fg:x="670" fg:w="1"/><text x="53.8929%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.96%)</title><rect x="52.9223%" y="437" width="0.9608%" height="15" fill="rgb(236,107,19)" fg:x="661" fg:w="12"/><text x="53.1723%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="53.7230%" y="421" width="0.1601%" height="15" fill="rgb(228,185,30)" fg:x="671" fg:w="2"/><text x="53.9730%" y="431.50"></text></g><g><title>indefinite::rules::number::Number::check (252 samples, 20.18%)</title><rect x="33.8671%" y="533" width="20.1761%" height="15" fill="rgb(246,134,8)" fg:x="423" fg:w="252"/><text x="34.1171%" y="543.50">indefinite::rules::number::Numbe..</text></g><g><title>regex::regex::string::Regex::is_match_at (18 samples, 1.44%)</title><rect x="52.6021%" y="517" width="1.4412%" height="15" fill="rgb(214,143,50)" fg:x="657" fg:w="18"/><text x="52.8521%" y="527.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.20%)</title><rect x="52.8423%" y="501" width="1.2010%" height="15" fill="rgb(228,75,8)" fg:x="660" fg:w="15"/><text x="53.0923%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.20%)</title><rect x="52.8423%" y="485" width="1.2010%" height="15" fill="rgb(207,175,4)" fg:x="660" fg:w="15"/><text x="53.0923%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.20%)</title><rect x="52.8423%" y="469" width="1.2010%" height="15" fill="rgb(205,108,24)" fg:x="660" fg:w="15"/><text x="53.0923%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.12%)</title><rect x="52.9223%" y="453" width="1.1209%" height="15" fill="rgb(244,120,49)" fg:x="661" fg:w="14"/><text x="53.1723%" y="463.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="53.8831%" y="437" width="0.1601%" height="15" fill="rgb(223,47,38)" fg:x="673" fg:w="2"/><text x="54.1331%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="53.8831%" y="421" width="0.1601%" height="15" fill="rgb(229,179,11)" fg:x="673" fg:w="2"/><text x="54.1331%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="53.8831%" y="405" width="0.1601%" height="15" fill="rgb(231,122,1)" fg:x="673" fg:w="2"/><text x="54.1331%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="53.8831%" y="389" width="0.1601%" height="15" fill="rgb(245,119,9)" fg:x="673" fg:w="2"/><text x="54.1331%" y="399.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="54.0432%" y="517" width="0.0801%" height="15" fill="rgb(241,163,25)" fg:x="675" fg:w="1"/><text x="54.2932%" y="527.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="54.0432%" y="501" width="0.0801%" height="15" fill="rgb(217,214,3)" fg:x="675" fg:w="1"/><text x="54.2932%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="54.0432%" y="485" width="0.0801%" height="15" fill="rgb(240,86,28)" fg:x="675" fg:w="1"/><text x="54.2932%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="54.0432%" y="469" width="0.0801%" height="15" fill="rgb(215,47,9)" fg:x="675" fg:w="1"/><text x="54.2932%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="54.0432%" y="453" width="0.0801%" height="15" fill="rgb(252,25,45)" fg:x="675" fg:w="1"/><text x="54.2932%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="54.0432%" y="437" width="0.0801%" height="15" fill="rgb(251,164,9)" fg:x="675" fg:w="1"/><text x="54.2932%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="54.0432%" y="421" width="0.0801%" height="15" fill="rgb(233,194,0)" fg:x="675" fg:w="1"/><text x="54.2932%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="54.0432%" y="405" width="0.0801%" height="15" fill="rgb(249,111,24)" fg:x="675" fg:w="1"/><text x="54.2932%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="54.0432%" y="389" width="0.0801%" height="15" fill="rgb(250,223,3)" fg:x="675" fg:w="1"/><text x="54.2932%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.0432%" y="373" width="0.0801%" height="15" fill="rgb(236,178,37)" fg:x="675" fg:w="1"/><text x="54.2932%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.2034%" y="421" width="0.0801%" height="15" fill="rgb(241,158,50)" fg:x="677" fg:w="1"/><text x="54.4534%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="54.2034%" y="453" width="0.2402%" height="15" fill="rgb(213,121,41)" fg:x="677" fg:w="3"/><text x="54.4534%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="54.2034%" y="437" width="0.2402%" height="15" fill="rgb(240,92,3)" fg:x="677" fg:w="3"/><text x="54.4534%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="54.2834%" y="421" width="0.1601%" height="15" fill="rgb(205,123,3)" fg:x="678" fg:w="2"/><text x="54.5334%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.4436%" y="453" width="0.0801%" height="15" fill="rgb(205,97,47)" fg:x="680" fg:w="1"/><text x="54.6936%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="54.5236%" y="453" width="0.0801%" height="15" fill="rgb(247,152,14)" fg:x="681" fg:w="1"/><text x="54.7736%" y="463.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.5236%" y="437" width="0.0801%" height="15" fill="rgb(248,195,53)" fg:x="681" fg:w="1"/><text x="54.7736%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="54.5236%" y="421" width="0.0801%" height="15" fill="rgb(226,201,16)" fg:x="681" fg:w="1"/><text x="54.7736%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.5236%" y="405" width="0.0801%" height="15" fill="rgb(205,98,0)" fg:x="681" fg:w="1"/><text x="54.7736%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.5236%" y="389" width="0.0801%" height="15" fill="rgb(214,191,48)" fg:x="681" fg:w="1"/><text x="54.7736%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="54.6837%" y="437" width="0.0801%" height="15" fill="rgb(237,112,39)" fg:x="683" fg:w="1"/><text x="54.9337%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="54.6837%" y="421" width="0.0801%" height="15" fill="rgb(247,203,27)" fg:x="683" fg:w="1"/><text x="54.9337%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="54.7638%" y="421" width="0.0801%" height="15" fill="rgb(235,124,28)" fg:x="684" fg:w="1"/><text x="55.0138%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="54.7638%" y="437" width="0.1601%" height="15" fill="rgb(208,207,46)" fg:x="684" fg:w="2"/><text x="55.0138%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="54.8439%" y="421" width="0.0801%" height="15" fill="rgb(234,176,4)" fg:x="685" fg:w="1"/><text x="55.0939%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="54.8439%" y="405" width="0.0801%" height="15" fill="rgb(230,133,28)" fg:x="685" fg:w="1"/><text x="55.0939%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="54.8439%" y="389" width="0.0801%" height="15" fill="rgb(211,137,40)" fg:x="685" fg:w="1"/><text x="55.0939%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="54.9239%" y="437" width="0.6405%" height="15" fill="rgb(254,35,13)" fg:x="686" fg:w="8"/><text x="55.1739%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="55.1641%" y="421" width="0.4003%" height="15" fill="rgb(225,49,51)" fg:x="689" fg:w="5"/><text x="55.4141%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="55.5645%" y="437" width="0.1601%" height="15" fill="rgb(251,10,15)" fg:x="694" fg:w="2"/><text x="55.8145%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="55.6445%" y="421" width="0.0801%" height="15" fill="rgb(228,207,15)" fg:x="695" fg:w="1"/><text x="55.8945%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="55.8046%" y="357" width="0.0801%" height="15" fill="rgb(241,99,19)" fg:x="697" fg:w="1"/><text x="56.0546%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.8046%" y="341" width="0.0801%" height="15" fill="rgb(207,104,49)" fg:x="697" fg:w="1"/><text x="56.0546%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="55.7246%" y="421" width="0.2402%" height="15" fill="rgb(234,99,18)" fg:x="696" fg:w="3"/><text x="55.9746%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="55.7246%" y="405" width="0.2402%" height="15" fill="rgb(213,191,49)" fg:x="696" fg:w="3"/><text x="55.9746%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="55.7246%" y="389" width="0.2402%" height="15" fill="rgb(210,226,19)" fg:x="696" fg:w="3"/><text x="55.9746%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="55.7246%" y="373" width="0.2402%" height="15" fill="rgb(229,97,18)" fg:x="696" fg:w="3"/><text x="55.9746%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="55.8847%" y="357" width="0.0801%" height="15" fill="rgb(211,167,15)" fg:x="698" fg:w="1"/><text x="56.1347%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.8847%" y="341" width="0.0801%" height="15" fill="rgb(210,169,34)" fg:x="698" fg:w="1"/><text x="56.1347%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="55.9648%" y="421" width="0.0801%" height="15" fill="rgb(241,121,31)" fg:x="699" fg:w="1"/><text x="56.2148%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.1249%" y="405" width="0.0801%" height="15" fill="rgb(232,40,11)" fg:x="701" fg:w="1"/><text x="56.3749%" y="415.50"></text></g><g><title>regex_automata::meta::strategy::new (24 samples, 1.92%)</title><rect x="54.6037%" y="453" width="1.9215%" height="15" fill="rgb(205,86,26)" fg:x="682" fg:w="24"/><text x="54.8537%" y="463.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (10 samples, 0.80%)</title><rect x="55.7246%" y="437" width="0.8006%" height="15" fill="rgb(231,126,28)" fg:x="696" fg:w="10"/><text x="55.9746%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="56.0448%" y="421" width="0.4804%" height="15" fill="rgb(219,221,18)" fg:x="700" fg:w="6"/><text x="56.2948%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="56.2050%" y="405" width="0.3203%" height="15" fill="rgb(211,40,0)" fg:x="702" fg:w="4"/><text x="56.4550%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.4452%" y="389" width="0.0801%" height="15" fill="rgb(239,85,43)" fg:x="705" fg:w="1"/><text x="56.6952%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.4452%" y="373" width="0.0801%" height="15" fill="rgb(231,55,21)" fg:x="705" fg:w="1"/><text x="56.6952%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.4452%" y="357" width="0.0801%" height="15" fill="rgb(225,184,43)" fg:x="705" fg:w="1"/><text x="56.6952%" y="367.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="56.6853%" y="405" width="0.0801%" height="15" fill="rgb(251,158,41)" fg:x="708" fg:w="1"/><text x="56.9353%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="56.7654%" y="405" width="0.0801%" height="15" fill="rgb(234,159,37)" fg:x="709" fg:w="1"/><text x="57.0154%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="56.7654%" y="389" width="0.0801%" height="15" fill="rgb(216,204,22)" fg:x="709" fg:w="1"/><text x="57.0154%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="56.7654%" y="373" width="0.0801%" height="15" fill="rgb(214,17,3)" fg:x="709" fg:w="1"/><text x="57.0154%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="56.8455%" y="405" width="0.0801%" height="15" fill="rgb(212,111,17)" fg:x="710" fg:w="1"/><text x="57.0955%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="56.6853%" y="421" width="0.4003%" height="15" fill="rgb(221,157,24)" fg:x="708" fg:w="5"/><text x="56.9353%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="56.9255%" y="405" width="0.1601%" height="15" fill="rgb(252,16,13)" fg:x="711" fg:w="2"/><text x="57.1755%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.0056%" y="389" width="0.0801%" height="15" fill="rgb(221,62,2)" fg:x="712" fg:w="1"/><text x="57.2556%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.0056%" y="373" width="0.0801%" height="15" fill="rgb(247,87,22)" fg:x="712" fg:w="1"/><text x="57.2556%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.0056%" y="357" width="0.0801%" height="15" fill="rgb(215,73,9)" fg:x="712" fg:w="1"/><text x="57.2556%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="56.5252%" y="453" width="0.6405%" height="15" fill="rgb(207,175,33)" fg:x="706" fg:w="8"/><text x="56.7752%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="56.5252%" y="437" width="0.6405%" height="15" fill="rgb(243,129,54)" fg:x="706" fg:w="8"/><text x="56.7752%" y="447.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="57.0857%" y="421" width="0.0801%" height="15" fill="rgb(227,119,45)" fg:x="713" fg:w="1"/><text x="57.3357%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="57.0857%" y="405" width="0.0801%" height="15" fill="rgb(205,109,36)" fg:x="713" fg:w="1"/><text x="57.3357%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="57.3259%" y="421" width="0.1601%" height="15" fill="rgb(205,6,39)" fg:x="716" fg:w="2"/><text x="57.5759%" y="431.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="57.3259%" y="405" width="0.1601%" height="15" fill="rgb(221,32,16)" fg:x="716" fg:w="2"/><text x="57.5759%" y="415.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="57.4059%" y="389" width="0.0801%" height="15" fill="rgb(228,144,50)" fg:x="717" fg:w="1"/><text x="57.6559%" y="399.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (43 samples, 3.44%)</title><rect x="54.1233%" y="501" width="3.4428%" height="15" fill="rgb(229,201,53)" fg:x="676" fg:w="43"/><text x="54.3733%" y="511.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (42 samples, 3.36%)</title><rect x="54.2034%" y="485" width="3.3627%" height="15" fill="rgb(249,153,27)" fg:x="677" fg:w="42"/><text x="54.4534%" y="495.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (42 samples, 3.36%)</title><rect x="54.2034%" y="469" width="3.3627%" height="15" fill="rgb(227,106,25)" fg:x="677" fg:w="42"/><text x="54.4534%" y="479.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="57.1657%" y="453" width="0.4003%" height="15" fill="rgb(230,65,29)" fg:x="714" fg:w="5"/><text x="57.4157%" y="463.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="57.1657%" y="437" width="0.4003%" height="15" fill="rgb(221,57,46)" fg:x="714" fg:w="5"/><text x="57.4157%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="57.4860%" y="421" width="0.0801%" height="15" fill="rgb(229,161,17)" fg:x="718" fg:w="1"/><text x="57.7360%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.5661%" y="453" width="0.0801%" height="15" fill="rgb(222,213,11)" fg:x="719" fg:w="1"/><text x="57.8161%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.6461%" y="453" width="0.0801%" height="15" fill="rgb(235,35,13)" fg:x="720" fg:w="1"/><text x="57.8961%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.6461%" y="437" width="0.0801%" height="15" fill="rgb(233,158,34)" fg:x="720" fg:w="1"/><text x="57.8961%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.6461%" y="421" width="0.0801%" height="15" fill="rgb(215,151,48)" fg:x="720" fg:w="1"/><text x="57.8961%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.32%)</title><rect x="57.5661%" y="501" width="0.3203%" height="15" fill="rgb(229,84,14)" fg:x="719" fg:w="4"/><text x="57.8161%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="57.5661%" y="485" width="0.3203%" height="15" fill="rgb(229,68,14)" fg:x="719" fg:w="4"/><text x="57.8161%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (4 samples, 0.32%)</title><rect x="57.5661%" y="469" width="0.3203%" height="15" fill="rgb(243,106,26)" fg:x="719" fg:w="4"/><text x="57.8161%" y="479.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="57.7262%" y="453" width="0.1601%" height="15" fill="rgb(206,45,38)" fg:x="721" fg:w="2"/><text x="57.9762%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.8863%" y="453" width="0.0801%" height="15" fill="rgb(226,6,15)" fg:x="723" fg:w="1"/><text x="58.1363%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="57.9664%" y="453" width="0.0801%" height="15" fill="rgb(232,22,54)" fg:x="724" fg:w="1"/><text x="58.2164%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.9664%" y="437" width="0.0801%" height="15" fill="rgb(229,222,32)" fg:x="724" fg:w="1"/><text x="58.2164%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="57.8863%" y="501" width="0.2402%" height="15" fill="rgb(228,62,29)" fg:x="723" fg:w="3"/><text x="58.1363%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="57.8863%" y="485" width="0.2402%" height="15" fill="rgb(251,103,34)" fg:x="723" fg:w="3"/><text x="58.1363%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="57.8863%" y="469" width="0.2402%" height="15" fill="rgb(233,12,30)" fg:x="723" fg:w="3"/><text x="58.1363%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="58.0464%" y="453" width="0.0801%" height="15" fill="rgb(238,52,0)" fg:x="725" fg:w="1"/><text x="58.2964%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.7670%" y="421" width="0.0801%" height="15" fill="rgb(223,98,5)" fg:x="734" fg:w="1"/><text x="59.0170%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.80%)</title><rect x="58.2066%" y="453" width="0.8006%" height="15" fill="rgb(228,75,37)" fg:x="727" fg:w="10"/><text x="58.4566%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.80%)</title><rect x="58.2066%" y="437" width="0.8006%" height="15" fill="rgb(205,115,49)" fg:x="727" fg:w="10"/><text x="58.4566%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="58.8471%" y="421" width="0.1601%" height="15" fill="rgb(250,154,43)" fg:x="735" fg:w="2"/><text x="59.0971%" y="431.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (62 samples, 4.96%)</title><rect x="54.1233%" y="517" width="4.9640%" height="15" fill="rgb(226,43,29)" fg:x="676" fg:w="62"/><text x="54.3733%" y="527.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.96%)</title><rect x="58.1265%" y="501" width="0.9608%" height="15" fill="rgb(249,228,39)" fg:x="726" fg:w="12"/><text x="58.3765%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.96%)</title><rect x="58.1265%" y="485" width="0.9608%" height="15" fill="rgb(216,79,43)" fg:x="726" fg:w="12"/><text x="58.3765%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.96%)</title><rect x="58.1265%" y="469" width="0.9608%" height="15" fill="rgb(228,95,12)" fg:x="726" fg:w="12"/><text x="58.3765%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="59.0072%" y="453" width="0.0801%" height="15" fill="rgb(249,221,15)" fg:x="737" fg:w="1"/><text x="59.2572%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="59.0072%" y="437" width="0.0801%" height="15" fill="rgb(233,34,13)" fg:x="737" fg:w="1"/><text x="59.2572%" y="447.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (586 samples, 46.92%)</title><rect x="12.4099%" y="613" width="46.9175%" height="15" fill="rgb(214,103,39)" fg:x="155" fg:w="586"/><text x="12.6599%" y="623.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replie..</text></g><g><title>plugins_core::looking::model::qualify_name (570 samples, 45.64%)</title><rect x="13.6910%" y="597" width="45.6365%" height="15" fill="rgb(251,126,39)" fg:x="171" fg:w="570"/><text x="13.9410%" y="607.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (570 samples, 45.64%)</title><rect x="13.6910%" y="581" width="45.6365%" height="15" fill="rgb(214,216,36)" fg:x="171" fg:w="570"/><text x="13.9410%" y="591.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (570 samples, 45.64%)</title><rect x="13.6910%" y="565" width="45.6365%" height="15" fill="rgb(220,221,8)" fg:x="171" fg:w="570"/><text x="13.9410%" y="575.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (567 samples, 45.40%)</title><rect x="13.9311%" y="549" width="45.3963%" height="15" fill="rgb(240,216,3)" fg:x="174" fg:w="567"/><text x="14.1811%" y="559.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (66 samples, 5.28%)</title><rect x="54.0432%" y="533" width="5.2842%" height="15" fill="rgb(232,218,17)" fg:x="675" fg:w="66"/><text x="54.2932%" y="543.50">indefi..</text></g><g><title>indefinite::irregular::Irregular::check (3 samples, 0.24%)</title><rect x="59.0873%" y="517" width="0.2402%" height="15" fill="rgb(229,163,45)" fg:x="738" fg:w="3"/><text x="59.3373%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.4075%" y="581" width="0.0801%" height="15" fill="rgb(231,110,42)" fg:x="742" fg:w="1"/><text x="59.6575%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.4075%" y="565" width="0.0801%" height="15" fill="rgb(208,170,48)" fg:x="742" fg:w="1"/><text x="59.6575%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.4075%" y="549" width="0.0801%" height="15" fill="rgb(239,116,25)" fg:x="742" fg:w="1"/><text x="59.6575%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.4075%" y="533" width="0.0801%" height="15" fill="rgb(219,200,50)" fg:x="742" fg:w="1"/><text x="59.6575%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.4075%" y="517" width="0.0801%" height="15" fill="rgb(245,200,0)" fg:x="742" fg:w="1"/><text x="59.6575%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="59.4876%" y="565" width="0.0801%" height="15" fill="rgb(245,119,33)" fg:x="743" fg:w="1"/><text x="59.7376%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="59.4876%" y="549" width="0.0801%" height="15" fill="rgb(231,125,12)" fg:x="743" fg:w="1"/><text x="59.7376%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="59.4876%" y="533" width="0.0801%" height="15" fill="rgb(216,96,41)" fg:x="743" fg:w="1"/><text x="59.7376%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.4876%" y="517" width="0.0801%" height="15" fill="rgb(248,43,45)" fg:x="743" fg:w="1"/><text x="59.7376%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="59.4876%" y="581" width="0.1601%" height="15" fill="rgb(217,222,7)" fg:x="743" fg:w="2"/><text x="59.7376%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="59.5677%" y="565" width="0.0801%" height="15" fill="rgb(233,28,6)" fg:x="744" fg:w="1"/><text x="59.8177%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="59.6477%" y="549" width="0.0801%" height="15" fill="rgb(231,218,15)" fg:x="745" fg:w="1"/><text x="59.8977%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="59.7278%" y="549" width="0.0801%" height="15" fill="rgb(226,171,48)" fg:x="746" fg:w="1"/><text x="59.9778%" y="559.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="59.7278%" y="533" width="0.0801%" height="15" fill="rgb(235,201,9)" fg:x="746" fg:w="1"/><text x="59.9778%" y="543.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="59.7278%" y="517" width="0.0801%" height="15" fill="rgb(217,80,15)" fg:x="746" fg:w="1"/><text x="59.9778%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.7278%" y="501" width="0.0801%" height="15" fill="rgb(219,152,8)" fg:x="746" fg:w="1"/><text x="59.9778%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.7278%" y="485" width="0.0801%" height="15" fill="rgb(243,107,38)" fg:x="746" fg:w="1"/><text x="59.9778%" y="495.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (593 samples, 47.48%)</title><rect x="12.4099%" y="645" width="47.4780%" height="15" fill="rgb(231,17,5)" fg:x="155" fg:w="593"/><text x="12.6599%" y="655.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (593 samples, 47.48%)</title><rect x="12.4099%" y="629" width="47.4780%" height="15" fill="rgb(209,25,54)" fg:x="155" fg:w="593"/><text x="12.6599%" y="639.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (7 samples, 0.56%)</title><rect x="59.3275%" y="613" width="0.5604%" height="15" fill="rgb(219,0,2)" fg:x="741" fg:w="7"/><text x="59.5775%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (7 samples, 0.56%)</title><rect x="59.3275%" y="597" width="0.5604%" height="15" fill="rgb(246,9,5)" fg:x="741" fg:w="7"/><text x="59.5775%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="59.6477%" y="581" width="0.2402%" height="15" fill="rgb(226,159,4)" fg:x="745" fg:w="3"/><text x="59.8977%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="59.6477%" y="565" width="0.2402%" height="15" fill="rgb(219,175,34)" fg:x="745" fg:w="3"/><text x="59.8977%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.8078%" y="549" width="0.0801%" height="15" fill="rgb(236,10,46)" fg:x="747" fg:w="1"/><text x="60.0578%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.8078%" y="533" width="0.0801%" height="15" fill="rgb(240,211,16)" fg:x="747" fg:w="1"/><text x="60.0578%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="59.8879%" y="645" width="0.0801%" height="15" fill="rgb(205,3,43)" fg:x="748" fg:w="1"/><text x="60.1379%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.8879%" y="629" width="0.0801%" height="15" fill="rgb(245,7,22)" fg:x="748" fg:w="1"/><text x="60.1379%" y="639.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as core::convert::Into&lt;kernel::model::entity::EntityRef&gt;&gt;::into (1 samples, 0.08%)</title><rect x="60.0480%" y="565" width="0.0801%" height="15" fill="rgb(239,132,32)" fg:x="750" fg:w="1"/><text x="60.2980%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.0480%" y="549" width="0.0801%" height="15" fill="rgb(228,202,34)" fg:x="750" fg:w="1"/><text x="60.2980%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.0480%" y="533" width="0.0801%" height="15" fill="rgb(254,200,22)" fg:x="750" fg:w="1"/><text x="60.2980%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.0480%" y="517" width="0.0801%" height="15" fill="rgb(219,10,39)" fg:x="750" fg:w="1"/><text x="60.2980%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.0480%" y="501" width="0.0801%" height="15" fill="rgb(226,210,39)" fg:x="750" fg:w="1"/><text x="60.2980%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.0480%" y="485" width="0.0801%" height="15" fill="rgb(208,219,16)" fg:x="750" fg:w="1"/><text x="60.2980%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.0480%" y="469" width="0.0801%" height="15" fill="rgb(216,158,51)" fg:x="750" fg:w="1"/><text x="60.2980%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.0480%" y="453" width="0.0801%" height="15" fill="rgb(233,14,44)" fg:x="750" fg:w="1"/><text x="60.2980%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.0480%" y="437" width="0.0801%" height="15" fill="rgb(237,97,39)" fg:x="750" fg:w="1"/><text x="60.2980%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.0480%" y="421" width="0.0801%" height="15" fill="rgb(218,198,43)" fg:x="750" fg:w="1"/><text x="60.2980%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.0480%" y="405" width="0.0801%" height="15" fill="rgb(231,104,20)" fg:x="750" fg:w="1"/><text x="60.2980%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.0480%" y="389" width="0.0801%" height="15" fill="rgb(254,36,13)" fg:x="750" fg:w="1"/><text x="60.2980%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.0480%" y="373" width="0.0801%" height="15" fill="rgb(248,14,50)" fg:x="750" fg:w="1"/><text x="60.2980%" y="383.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="60.1281%" y="533" width="0.0801%" height="15" fill="rgb(217,107,29)" fg:x="751" fg:w="1"/><text x="60.3781%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="60.1281%" y="517" width="0.0801%" height="15" fill="rgb(251,169,33)" fg:x="751" fg:w="1"/><text x="60.3781%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="60.1281%" y="501" width="0.0801%" height="15" fill="rgb(217,108,32)" fg:x="751" fg:w="1"/><text x="60.3781%" y="511.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="60.1281%" y="485" width="0.0801%" height="15" fill="rgb(219,66,42)" fg:x="751" fg:w="1"/><text x="60.3781%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="60.1281%" y="469" width="0.0801%" height="15" fill="rgb(206,180,7)" fg:x="751" fg:w="1"/><text x="60.3781%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.1281%" y="453" width="0.0801%" height="15" fill="rgb(208,226,31)" fg:x="751" fg:w="1"/><text x="60.3781%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.1281%" y="437" width="0.0801%" height="15" fill="rgb(218,26,49)" fg:x="751" fg:w="1"/><text x="60.3781%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.1281%" y="421" width="0.0801%" height="15" fill="rgb(233,197,48)" fg:x="751" fg:w="1"/><text x="60.3781%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.1281%" y="405" width="0.0801%" height="15" fill="rgb(252,181,51)" fg:x="751" fg:w="1"/><text x="60.3781%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.1281%" y="389" width="0.0801%" height="15" fill="rgb(253,90,19)" fg:x="751" fg:w="1"/><text x="60.3781%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.1281%" y="373" width="0.0801%" height="15" fill="rgb(215,171,30)" fg:x="751" fg:w="1"/><text x="60.3781%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.1281%" y="357" width="0.0801%" height="15" fill="rgb(214,222,9)" fg:x="751" fg:w="1"/><text x="60.3781%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.1281%" y="341" width="0.0801%" height="15" fill="rgb(223,3,22)" fg:x="751" fg:w="1"/><text x="60.3781%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.1281%" y="325" width="0.0801%" height="15" fill="rgb(225,196,46)" fg:x="751" fg:w="1"/><text x="60.3781%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.1281%" y="309" width="0.0801%" height="15" fill="rgb(209,110,37)" fg:x="751" fg:w="1"/><text x="60.3781%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.1281%" y="293" width="0.0801%" height="15" fill="rgb(249,89,12)" fg:x="751" fg:w="1"/><text x="60.3781%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.1281%" y="277" width="0.0801%" height="15" fill="rgb(226,27,33)" fg:x="751" fg:w="1"/><text x="60.3781%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.1281%" y="261" width="0.0801%" height="15" fill="rgb(213,82,22)" fg:x="751" fg:w="1"/><text x="60.3781%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.1281%" y="245" width="0.0801%" height="15" fill="rgb(248,140,0)" fg:x="751" fg:w="1"/><text x="60.3781%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.1281%" y="229" width="0.0801%" height="15" fill="rgb(228,106,3)" fg:x="751" fg:w="1"/><text x="60.3781%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.1281%" y="213" width="0.0801%" height="15" fill="rgb(209,23,37)" fg:x="751" fg:w="1"/><text x="60.3781%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.1281%" y="197" width="0.0801%" height="15" fill="rgb(241,93,50)" fg:x="751" fg:w="1"/><text x="60.3781%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2082%" y="405" width="0.0801%" height="15" fill="rgb(253,46,43)" fg:x="752" fg:w="1"/><text x="60.4582%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2082%" y="389" width="0.0801%" height="15" fill="rgb(226,206,43)" fg:x="752" fg:w="1"/><text x="60.4582%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2082%" y="373" width="0.0801%" height="15" fill="rgb(217,54,7)" fg:x="752" fg:w="1"/><text x="60.4582%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2082%" y="357" width="0.0801%" height="15" fill="rgb(223,5,52)" fg:x="752" fg:w="1"/><text x="60.4582%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2082%" y="341" width="0.0801%" height="15" fill="rgb(206,52,46)" fg:x="752" fg:w="1"/><text x="60.4582%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2082%" y="325" width="0.0801%" height="15" fill="rgb(253,136,11)" fg:x="752" fg:w="1"/><text x="60.4582%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="60.2082%" y="309" width="0.0801%" height="15" fill="rgb(208,106,33)" fg:x="752" fg:w="1"/><text x="60.4582%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2082%" y="293" width="0.0801%" height="15" fill="rgb(206,54,4)" fg:x="752" fg:w="1"/><text x="60.4582%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2082%" y="277" width="0.0801%" height="15" fill="rgb(213,3,15)" fg:x="752" fg:w="1"/><text x="60.4582%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.2082%" y="261" width="0.0801%" height="15" fill="rgb(252,211,39)" fg:x="752" fg:w="1"/><text x="60.4582%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.2082%" y="245" width="0.0801%" height="15" fill="rgb(223,6,36)" fg:x="752" fg:w="1"/><text x="60.4582%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="60.2082%" y="517" width="0.1601%" height="15" fill="rgb(252,169,45)" fg:x="752" fg:w="2"/><text x="60.4582%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="60.2082%" y="501" width="0.1601%" height="15" fill="rgb(212,48,26)" fg:x="752" fg:w="2"/><text x="60.4582%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.2082%" y="485" width="0.1601%" height="15" fill="rgb(251,102,48)" fg:x="752" fg:w="2"/><text x="60.4582%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.2082%" y="469" width="0.1601%" height="15" fill="rgb(243,208,16)" fg:x="752" fg:w="2"/><text x="60.4582%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.2082%" y="453" width="0.1601%" height="15" fill="rgb(219,96,24)" fg:x="752" fg:w="2"/><text x="60.4582%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.2082%" y="437" width="0.1601%" height="15" fill="rgb(219,33,29)" fg:x="752" fg:w="2"/><text x="60.4582%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.2082%" y="421" width="0.1601%" height="15" fill="rgb(223,176,5)" fg:x="752" fg:w="2"/><text x="60.4582%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.2882%" y="405" width="0.0801%" height="15" fill="rgb(228,140,14)" fg:x="753" fg:w="1"/><text x="60.5382%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.2882%" y="389" width="0.0801%" height="15" fill="rgb(217,179,31)" fg:x="753" fg:w="1"/><text x="60.5382%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.2882%" y="373" width="0.0801%" height="15" fill="rgb(230,9,30)" fg:x="753" fg:w="1"/><text x="60.5382%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="60.3683%" y="405" width="0.0801%" height="15" fill="rgb(230,136,20)" fg:x="754" fg:w="1"/><text x="60.6183%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3683%" y="389" width="0.0801%" height="15" fill="rgb(215,210,22)" fg:x="754" fg:w="1"/><text x="60.6183%" y="399.50"></text></g><g><title>engine::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="60.1281%" y="549" width="0.4003%" height="15" fill="rgb(218,43,5)" fg:x="751" fg:w="5"/><text x="60.3781%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="60.2082%" y="533" width="0.3203%" height="15" fill="rgb(216,11,5)" fg:x="752" fg:w="4"/><text x="60.4582%" y="543.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="60.3683%" y="517" width="0.1601%" height="15" fill="rgb(209,82,29)" fg:x="754" fg:w="2"/><text x="60.6183%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.3683%" y="501" width="0.1601%" height="15" fill="rgb(244,115,12)" fg:x="754" fg:w="2"/><text x="60.6183%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.3683%" y="485" width="0.1601%" height="15" fill="rgb(222,82,18)" fg:x="754" fg:w="2"/><text x="60.6183%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.3683%" y="469" width="0.1601%" height="15" fill="rgb(249,227,8)" fg:x="754" fg:w="2"/><text x="60.6183%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.3683%" y="453" width="0.1601%" height="15" fill="rgb(253,141,45)" fg:x="754" fg:w="2"/><text x="60.6183%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.3683%" y="437" width="0.1601%" height="15" fill="rgb(234,184,4)" fg:x="754" fg:w="2"/><text x="60.6183%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.3683%" y="421" width="0.1601%" height="15" fill="rgb(218,194,23)" fg:x="754" fg:w="2"/><text x="60.6183%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.4484%" y="405" width="0.0801%" height="15" fill="rgb(235,66,41)" fg:x="755" fg:w="1"/><text x="60.6984%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.4484%" y="389" width="0.0801%" height="15" fill="rgb(245,217,1)" fg:x="755" fg:w="1"/><text x="60.6984%" y="399.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (8 samples, 0.64%)</title><rect x="59.9680%" y="645" width="0.6405%" height="15" fill="rgb(229,91,1)" fg:x="749" fg:w="8"/><text x="60.2180%" y="655.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (8 samples, 0.64%)</title><rect x="59.9680%" y="629" width="0.6405%" height="15" fill="rgb(207,101,30)" fg:x="749" fg:w="8"/><text x="60.2180%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (8 samples, 0.64%)</title><rect x="59.9680%" y="613" width="0.6405%" height="15" fill="rgb(223,82,49)" fg:x="749" fg:w="8"/><text x="60.2180%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (8 samples, 0.64%)</title><rect x="59.9680%" y="597" width="0.6405%" height="15" fill="rgb(218,167,17)" fg:x="749" fg:w="8"/><text x="60.2180%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (8 samples, 0.64%)</title><rect x="59.9680%" y="581" width="0.6405%" height="15" fill="rgb(208,103,14)" fg:x="749" fg:w="8"/><text x="60.2180%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="60.1281%" y="565" width="0.4804%" height="15" fill="rgb(238,20,8)" fg:x="751" fg:w="6"/><text x="60.3781%" y="575.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="60.5284%" y="549" width="0.0801%" height="15" fill="rgb(218,80,54)" fg:x="756" fg:w="1"/><text x="60.7784%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.5284%" y="533" width="0.0801%" height="15" fill="rgb(240,144,17)" fg:x="756" fg:w="1"/><text x="60.7784%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.6085%" y="613" width="0.0801%" height="15" fill="rgb(245,27,50)" fg:x="757" fg:w="1"/><text x="60.8585%" y="623.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="60.6085%" y="597" width="0.0801%" height="15" fill="rgb(251,51,7)" fg:x="757" fg:w="1"/><text x="60.8585%" y="607.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="60.6085%" y="581" width="0.0801%" height="15" fill="rgb(245,217,29)" fg:x="757" fg:w="1"/><text x="60.8585%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.7686%" y="533" width="0.0801%" height="15" fill="rgb(221,176,29)" fg:x="759" fg:w="1"/><text x="61.0186%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.7686%" y="517" width="0.0801%" height="15" fill="rgb(212,180,24)" fg:x="759" fg:w="1"/><text x="61.0186%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="60.7686%" y="549" width="0.1601%" height="15" fill="rgb(254,24,2)" fg:x="759" fg:w="2"/><text x="61.0186%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.8487%" y="533" width="0.0801%" height="15" fill="rgb(230,100,2)" fg:x="760" fg:w="1"/><text x="61.0987%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="60.7686%" y="565" width="0.2402%" height="15" fill="rgb(219,142,25)" fg:x="759" fg:w="3"/><text x="61.0186%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.9287%" y="549" width="0.0801%" height="15" fill="rgb(240,73,43)" fg:x="761" fg:w="1"/><text x="61.1787%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="60.6886%" y="581" width="0.4003%" height="15" fill="rgb(214,114,15)" fg:x="758" fg:w="5"/><text x="60.9386%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.0088%" y="565" width="0.0801%" height="15" fill="rgb(207,130,4)" fg:x="762" fg:w="1"/><text x="61.2588%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="60.6886%" y="597" width="0.4804%" height="15" fill="rgb(221,25,40)" fg:x="758" fg:w="6"/><text x="60.9386%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.0889%" y="581" width="0.0801%" height="15" fill="rgb(241,184,7)" fg:x="763" fg:w="1"/><text x="61.3389%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (7 samples, 0.56%)</title><rect x="60.6886%" y="613" width="0.5604%" height="15" fill="rgb(235,159,4)" fg:x="758" fg:w="7"/><text x="60.9386%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.1689%" y="597" width="0.0801%" height="15" fill="rgb(214,87,48)" fg:x="764" fg:w="1"/><text x="61.4189%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.2490%" y="597" width="0.0801%" height="15" fill="rgb(246,198,24)" fg:x="765" fg:w="1"/><text x="61.4990%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.2490%" y="581" width="0.0801%" height="15" fill="rgb(209,66,40)" fg:x="765" fg:w="1"/><text x="61.4990%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.2490%" y="565" width="0.0801%" height="15" fill="rgb(233,147,39)" fg:x="765" fg:w="1"/><text x="61.4990%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.2490%" y="549" width="0.0801%" height="15" fill="rgb(231,145,52)" fg:x="765" fg:w="1"/><text x="61.4990%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.2490%" y="533" width="0.0801%" height="15" fill="rgb(206,20,26)" fg:x="765" fg:w="1"/><text x="61.4990%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.2490%" y="517" width="0.0801%" height="15" fill="rgb(238,220,4)" fg:x="765" fg:w="1"/><text x="61.4990%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.2490%" y="501" width="0.0801%" height="15" fill="rgb(252,195,42)" fg:x="765" fg:w="1"/><text x="61.4990%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.2490%" y="485" width="0.0801%" height="15" fill="rgb(209,10,6)" fg:x="765" fg:w="1"/><text x="61.4990%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.2490%" y="469" width="0.0801%" height="15" fill="rgb(229,3,52)" fg:x="765" fg:w="1"/><text x="61.4990%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.2490%" y="453" width="0.0801%" height="15" fill="rgb(253,49,37)" fg:x="765" fg:w="1"/><text x="61.4990%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.2490%" y="437" width="0.0801%" height="15" fill="rgb(240,103,49)" fg:x="765" fg:w="1"/><text x="61.4990%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.2490%" y="421" width="0.0801%" height="15" fill="rgb(250,182,30)" fg:x="765" fg:w="1"/><text x="61.4990%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="61.3291%" y="581" width="0.0801%" height="15" fill="rgb(248,8,30)" fg:x="766" fg:w="1"/><text x="61.5791%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="61.3291%" y="565" width="0.0801%" height="15" fill="rgb(237,120,30)" fg:x="766" fg:w="1"/><text x="61.5791%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.4091%" y="549" width="0.0801%" height="15" fill="rgb(221,146,34)" fg:x="767" fg:w="1"/><text x="61.6591%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="61.4091%" y="581" width="0.1601%" height="15" fill="rgb(242,55,13)" fg:x="767" fg:w="2"/><text x="61.6591%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="61.4091%" y="565" width="0.1601%" height="15" fill="rgb(242,112,31)" fg:x="767" fg:w="2"/><text x="61.6591%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="61.4892%" y="549" width="0.0801%" height="15" fill="rgb(249,192,27)" fg:x="768" fg:w="1"/><text x="61.7392%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.4892%" y="533" width="0.0801%" height="15" fill="rgb(208,204,44)" fg:x="768" fg:w="1"/><text x="61.7392%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="61.6493%" y="405" width="0.0801%" height="15" fill="rgb(208,93,54)" fg:x="770" fg:w="1"/><text x="61.8993%" y="415.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="61.6493%" y="389" width="0.0801%" height="15" fill="rgb(242,1,31)" fg:x="770" fg:w="1"/><text x="61.8993%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="61.6493%" y="373" width="0.0801%" height="15" fill="rgb(241,83,25)" fg:x="770" fg:w="1"/><text x="61.8993%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.6493%" y="357" width="0.0801%" height="15" fill="rgb(205,169,50)" fg:x="770" fg:w="1"/><text x="61.8993%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.6493%" y="341" width="0.0801%" height="15" fill="rgb(239,186,37)" fg:x="770" fg:w="1"/><text x="61.8993%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.6493%" y="325" width="0.0801%" height="15" fill="rgb(205,221,10)" fg:x="770" fg:w="1"/><text x="61.8993%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.6493%" y="309" width="0.0801%" height="15" fill="rgb(218,196,15)" fg:x="770" fg:w="1"/><text x="61.8993%" y="319.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="61.6493%" y="293" width="0.0801%" height="15" fill="rgb(218,196,35)" fg:x="770" fg:w="1"/><text x="61.8993%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.6493%" y="277" width="0.0801%" height="15" fill="rgb(233,63,24)" fg:x="770" fg:w="1"/><text x="61.8993%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.6493%" y="261" width="0.0801%" height="15" fill="rgb(225,8,4)" fg:x="770" fg:w="1"/><text x="61.8993%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.6493%" y="245" width="0.0801%" height="15" fill="rgb(234,105,35)" fg:x="770" fg:w="1"/><text x="61.8993%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.6493%" y="229" width="0.0801%" height="15" fill="rgb(236,21,32)" fg:x="770" fg:w="1"/><text x="61.8993%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.7294%" y="325" width="0.0801%" height="15" fill="rgb(228,109,6)" fg:x="771" fg:w="1"/><text x="61.9794%" y="335.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="61.7294%" y="389" width="0.1601%" height="15" fill="rgb(229,215,31)" fg:x="771" fg:w="2"/><text x="61.9794%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="61.7294%" y="373" width="0.1601%" height="15" fill="rgb(221,52,54)" fg:x="771" fg:w="2"/><text x="61.9794%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="61.7294%" y="357" width="0.1601%" height="15" fill="rgb(252,129,43)" fg:x="771" fg:w="2"/><text x="61.9794%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.7294%" y="341" width="0.1601%" height="15" fill="rgb(248,183,27)" fg:x="771" fg:w="2"/><text x="61.9794%" y="351.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="61.8094%" y="325" width="0.0801%" height="15" fill="rgb(250,0,22)" fg:x="772" fg:w="1"/><text x="62.0594%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.8094%" y="309" width="0.0801%" height="15" fill="rgb(213,166,10)" fg:x="772" fg:w="1"/><text x="62.0594%" y="319.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="61.8094%" y="293" width="0.0801%" height="15" fill="rgb(207,163,36)" fg:x="772" fg:w="1"/><text x="62.0594%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.8094%" y="277" width="0.0801%" height="15" fill="rgb(208,122,22)" fg:x="772" fg:w="1"/><text x="62.0594%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.8094%" y="261" width="0.0801%" height="15" fill="rgb(207,104,49)" fg:x="772" fg:w="1"/><text x="62.0594%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="61.8094%" y="245" width="0.0801%" height="15" fill="rgb(248,211,50)" fg:x="772" fg:w="1"/><text x="62.0594%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.8094%" y="229" width="0.0801%" height="15" fill="rgb(217,13,45)" fg:x="772" fg:w="1"/><text x="62.0594%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.8094%" y="213" width="0.0801%" height="15" fill="rgb(211,216,49)" fg:x="772" fg:w="1"/><text x="62.0594%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="61.8094%" y="197" width="0.0801%" height="15" fill="rgb(221,58,53)" fg:x="772" fg:w="1"/><text x="62.0594%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.8094%" y="181" width="0.0801%" height="15" fill="rgb(220,112,41)" fg:x="772" fg:w="1"/><text x="62.0594%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.8094%" y="165" width="0.0801%" height="15" fill="rgb(236,38,28)" fg:x="772" fg:w="1"/><text x="62.0594%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="61.8094%" y="149" width="0.0801%" height="15" fill="rgb(227,195,22)" fg:x="772" fg:w="1"/><text x="62.0594%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.8094%" y="133" width="0.0801%" height="15" fill="rgb(214,55,33)" fg:x="772" fg:w="1"/><text x="62.0594%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.8094%" y="117" width="0.0801%" height="15" fill="rgb(248,80,13)" fg:x="772" fg:w="1"/><text x="62.0594%" y="127.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.9696%" y="181" width="0.0801%" height="15" fill="rgb(238,52,6)" fg:x="774" fg:w="1"/><text x="62.2196%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.9696%" y="165" width="0.0801%" height="15" fill="rgb(224,198,47)" fg:x="774" fg:w="1"/><text x="62.2196%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.9696%" y="149" width="0.0801%" height="15" fill="rgb(233,171,20)" fg:x="774" fg:w="1"/><text x="62.2196%" y="159.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="61.6493%" y="517" width="0.4804%" height="15" fill="rgb(241,30,25)" fg:x="770" fg:w="6"/><text x="61.8993%" y="527.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (6 samples, 0.48%)</title><rect x="61.6493%" y="501" width="0.4804%" height="15" fill="rgb(207,171,38)" fg:x="770" fg:w="6"/><text x="61.8993%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (6 samples, 0.48%)</title><rect x="61.6493%" y="485" width="0.4804%" height="15" fill="rgb(234,70,1)" fg:x="770" fg:w="6"/><text x="61.8993%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (6 samples, 0.48%)</title><rect x="61.6493%" y="469" width="0.4804%" height="15" fill="rgb(232,178,18)" fg:x="770" fg:w="6"/><text x="61.8993%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (6 samples, 0.48%)</title><rect x="61.6493%" y="453" width="0.4804%" height="15" fill="rgb(241,78,40)" fg:x="770" fg:w="6"/><text x="61.8993%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="61.6493%" y="437" width="0.4804%" height="15" fill="rgb(222,35,25)" fg:x="770" fg:w="6"/><text x="61.8993%" y="447.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="61.6493%" y="421" width="0.4804%" height="15" fill="rgb(207,92,16)" fg:x="770" fg:w="6"/><text x="61.8993%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="61.7294%" y="405" width="0.4003%" height="15" fill="rgb(216,59,51)" fg:x="771" fg:w="5"/><text x="61.9794%" y="415.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="61.8895%" y="389" width="0.2402%" height="15" fill="rgb(213,80,28)" fg:x="773" fg:w="3"/><text x="62.1395%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="61.8895%" y="373" width="0.2402%" height="15" fill="rgb(220,93,7)" fg:x="773" fg:w="3"/><text x="62.1395%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="61.8895%" y="357" width="0.2402%" height="15" fill="rgb(225,24,44)" fg:x="773" fg:w="3"/><text x="62.1395%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="61.8895%" y="341" width="0.2402%" height="15" fill="rgb(243,74,40)" fg:x="773" fg:w="3"/><text x="62.1395%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="61.8895%" y="325" width="0.2402%" height="15" fill="rgb(228,39,7)" fg:x="773" fg:w="3"/><text x="62.1395%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="61.9696%" y="309" width="0.1601%" height="15" fill="rgb(227,79,8)" fg:x="774" fg:w="2"/><text x="62.2196%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.9696%" y="293" width="0.1601%" height="15" fill="rgb(236,58,11)" fg:x="774" fg:w="2"/><text x="62.2196%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="61.9696%" y="277" width="0.1601%" height="15" fill="rgb(249,63,35)" fg:x="774" fg:w="2"/><text x="62.2196%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.9696%" y="261" width="0.1601%" height="15" fill="rgb(252,114,16)" fg:x="774" fg:w="2"/><text x="62.2196%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="61.9696%" y="245" width="0.1601%" height="15" fill="rgb(254,151,24)" fg:x="774" fg:w="2"/><text x="62.2196%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.9696%" y="229" width="0.1601%" height="15" fill="rgb(253,54,39)" fg:x="774" fg:w="2"/><text x="62.2196%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="61.9696%" y="213" width="0.1601%" height="15" fill="rgb(243,25,45)" fg:x="774" fg:w="2"/><text x="62.2196%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.9696%" y="197" width="0.1601%" height="15" fill="rgb(234,134,9)" fg:x="774" fg:w="2"/><text x="62.2196%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.0496%" y="181" width="0.0801%" height="15" fill="rgb(227,166,31)" fg:x="775" fg:w="1"/><text x="62.2996%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.0496%" y="165" width="0.0801%" height="15" fill="rgb(245,143,41)" fg:x="775" fg:w="1"/><text x="62.2996%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.0496%" y="149" width="0.0801%" height="15" fill="rgb(238,181,32)" fg:x="775" fg:w="1"/><text x="62.2996%" y="159.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.0496%" y="133" width="0.0801%" height="15" fill="rgb(224,113,18)" fg:x="775" fg:w="1"/><text x="62.2996%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.0496%" y="117" width="0.0801%" height="15" fill="rgb(240,229,28)" fg:x="775" fg:w="1"/><text x="62.2996%" y="127.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.1297%" y="389" width="0.0801%" height="15" fill="rgb(250,185,3)" fg:x="776" fg:w="1"/><text x="62.3797%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.1297%" y="373" width="0.0801%" height="15" fill="rgb(212,59,25)" fg:x="776" fg:w="1"/><text x="62.3797%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.1297%" y="357" width="0.0801%" height="15" fill="rgb(221,87,20)" fg:x="776" fg:w="1"/><text x="62.3797%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.1297%" y="341" width="0.0801%" height="15" fill="rgb(213,74,28)" fg:x="776" fg:w="1"/><text x="62.3797%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.1297%" y="325" width="0.0801%" height="15" fill="rgb(224,132,34)" fg:x="776" fg:w="1"/><text x="62.3797%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.1297%" y="309" width="0.0801%" height="15" fill="rgb(222,101,24)" fg:x="776" fg:w="1"/><text x="62.3797%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.1297%" y="293" width="0.0801%" height="15" fill="rgb(254,142,4)" fg:x="776" fg:w="1"/><text x="62.3797%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.1297%" y="277" width="0.0801%" height="15" fill="rgb(230,229,49)" fg:x="776" fg:w="1"/><text x="62.3797%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.1297%" y="261" width="0.0801%" height="15" fill="rgb(238,70,47)" fg:x="776" fg:w="1"/><text x="62.3797%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.1297%" y="245" width="0.0801%" height="15" fill="rgb(231,160,17)" fg:x="776" fg:w="1"/><text x="62.3797%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.1297%" y="229" width="0.0801%" height="15" fill="rgb(218,68,53)" fg:x="776" fg:w="1"/><text x="62.3797%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.1297%" y="213" width="0.0801%" height="15" fill="rgb(236,111,10)" fg:x="776" fg:w="1"/><text x="62.3797%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.1297%" y="197" width="0.0801%" height="15" fill="rgb(224,34,41)" fg:x="776" fg:w="1"/><text x="62.3797%" y="207.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="62.1297%" y="485" width="0.1601%" height="15" fill="rgb(241,118,19)" fg:x="776" fg:w="2"/><text x="62.3797%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="62.1297%" y="469" width="0.1601%" height="15" fill="rgb(238,129,25)" fg:x="776" fg:w="2"/><text x="62.3797%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="62.1297%" y="453" width="0.1601%" height="15" fill="rgb(238,22,31)" fg:x="776" fg:w="2"/><text x="62.3797%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="62.1297%" y="437" width="0.1601%" height="15" fill="rgb(222,174,48)" fg:x="776" fg:w="2"/><text x="62.3797%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="62.1297%" y="421" width="0.1601%" height="15" fill="rgb(206,152,40)" fg:x="776" fg:w="2"/><text x="62.3797%" y="431.50"></text></g><g><title>engine::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="62.1297%" y="405" width="0.1601%" height="15" fill="rgb(218,99,54)" fg:x="776" fg:w="2"/><text x="62.3797%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.2098%" y="389" width="0.0801%" height="15" fill="rgb(220,174,26)" fg:x="777" fg:w="1"/><text x="62.4598%" y="399.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (9 samples, 0.72%)</title><rect x="61.6493%" y="533" width="0.7206%" height="15" fill="rgb(245,116,9)" fg:x="770" fg:w="9"/><text x="61.8993%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="62.1297%" y="517" width="0.2402%" height="15" fill="rgb(209,72,35)" fg:x="776" fg:w="3"/><text x="62.3797%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="62.1297%" y="501" width="0.2402%" height="15" fill="rgb(226,126,21)" fg:x="776" fg:w="3"/><text x="62.3797%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2898%" y="485" width="0.0801%" height="15" fill="rgb(227,192,1)" fg:x="778" fg:w="1"/><text x="62.5398%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="62.3699%" y="485" width="0.1601%" height="15" fill="rgb(237,180,29)" fg:x="779" fg:w="2"/><text x="62.6199%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.3699%" y="469" width="0.1601%" height="15" fill="rgb(230,197,35)" fg:x="779" fg:w="2"/><text x="62.6199%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.4500%" y="453" width="0.0801%" height="15" fill="rgb(246,193,31)" fg:x="780" fg:w="1"/><text x="62.7000%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.4500%" y="437" width="0.0801%" height="15" fill="rgb(241,36,4)" fg:x="780" fg:w="1"/><text x="62.7000%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.4500%" y="421" width="0.0801%" height="15" fill="rgb(241,130,17)" fg:x="780" fg:w="1"/><text x="62.7000%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.4500%" y="405" width="0.0801%" height="15" fill="rgb(206,137,32)" fg:x="780" fg:w="1"/><text x="62.7000%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.4500%" y="389" width="0.0801%" height="15" fill="rgb(237,228,51)" fg:x="780" fg:w="1"/><text x="62.7000%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.4500%" y="373" width="0.0801%" height="15" fill="rgb(243,6,42)" fg:x="780" fg:w="1"/><text x="62.7000%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.4500%" y="357" width="0.0801%" height="15" fill="rgb(251,74,28)" fg:x="780" fg:w="1"/><text x="62.7000%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.4500%" y="341" width="0.0801%" height="15" fill="rgb(218,20,49)" fg:x="780" fg:w="1"/><text x="62.7000%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.4500%" y="325" width="0.0801%" height="15" fill="rgb(238,28,14)" fg:x="780" fg:w="1"/><text x="62.7000%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.4500%" y="309" width="0.0801%" height="15" fill="rgb(229,40,46)" fg:x="780" fg:w="1"/><text x="62.7000%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.4500%" y="293" width="0.0801%" height="15" fill="rgb(244,195,20)" fg:x="780" fg:w="1"/><text x="62.7000%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.4500%" y="277" width="0.0801%" height="15" fill="rgb(253,56,35)" fg:x="780" fg:w="1"/><text x="62.7000%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.4500%" y="261" width="0.0801%" height="15" fill="rgb(210,149,44)" fg:x="780" fg:w="1"/><text x="62.7000%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="62.4500%" y="245" width="0.0801%" height="15" fill="rgb(240,135,12)" fg:x="780" fg:w="1"/><text x="62.7000%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="62.4500%" y="229" width="0.0801%" height="15" fill="rgb(251,24,50)" fg:x="780" fg:w="1"/><text x="62.7000%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5300%" y="309" width="0.0801%" height="15" fill="rgb(243,200,47)" fg:x="781" fg:w="1"/><text x="62.7800%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5300%" y="293" width="0.0801%" height="15" fill="rgb(224,166,26)" fg:x="781" fg:w="1"/><text x="62.7800%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5300%" y="277" width="0.0801%" height="15" fill="rgb(233,0,47)" fg:x="781" fg:w="1"/><text x="62.7800%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5300%" y="261" width="0.0801%" height="15" fill="rgb(253,80,5)" fg:x="781" fg:w="1"/><text x="62.7800%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5300%" y="245" width="0.0801%" height="15" fill="rgb(214,133,25)" fg:x="781" fg:w="1"/><text x="62.7800%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5300%" y="229" width="0.0801%" height="15" fill="rgb(209,27,14)" fg:x="781" fg:w="1"/><text x="62.7800%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5300%" y="213" width="0.0801%" height="15" fill="rgb(219,102,51)" fg:x="781" fg:w="1"/><text x="62.7800%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.5300%" y="197" width="0.0801%" height="15" fill="rgb(237,18,16)" fg:x="781" fg:w="1"/><text x="62.7800%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.5300%" y="181" width="0.0801%" height="15" fill="rgb(241,85,17)" fg:x="781" fg:w="1"/><text x="62.7800%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.5300%" y="165" width="0.0801%" height="15" fill="rgb(236,90,42)" fg:x="781" fg:w="1"/><text x="62.7800%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.5300%" y="149" width="0.0801%" height="15" fill="rgb(249,57,21)" fg:x="781" fg:w="1"/><text x="62.7800%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.5300%" y="133" width="0.0801%" height="15" fill="rgb(243,12,36)" fg:x="781" fg:w="1"/><text x="62.7800%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.5300%" y="117" width="0.0801%" height="15" fill="rgb(253,128,47)" fg:x="781" fg:w="1"/><text x="62.7800%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.5300%" y="101" width="0.0801%" height="15" fill="rgb(207,33,20)" fg:x="781" fg:w="1"/><text x="62.7800%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.5300%" y="85" width="0.0801%" height="15" fill="rgb(233,215,35)" fg:x="781" fg:w="1"/><text x="62.7800%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.5300%" y="69" width="0.0801%" height="15" fill="rgb(249,188,52)" fg:x="781" fg:w="1"/><text x="62.7800%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.5300%" y="53" width="0.0801%" height="15" fill="rgb(225,12,32)" fg:x="781" fg:w="1"/><text x="62.7800%" y="63.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="62.5300%" y="357" width="0.1601%" height="15" fill="rgb(247,98,14)" fg:x="781" fg:w="2"/><text x="62.7800%" y="367.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="62.5300%" y="341" width="0.1601%" height="15" fill="rgb(247,219,48)" fg:x="781" fg:w="2"/><text x="62.7800%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="62.5300%" y="325" width="0.1601%" height="15" fill="rgb(253,60,48)" fg:x="781" fg:w="2"/><text x="62.7800%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.6101%" y="309" width="0.0801%" height="15" fill="rgb(245,15,52)" fg:x="782" fg:w="1"/><text x="62.8601%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.6101%" y="293" width="0.0801%" height="15" fill="rgb(220,133,28)" fg:x="782" fg:w="1"/><text x="62.8601%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.6101%" y="277" width="0.0801%" height="15" fill="rgb(217,180,4)" fg:x="782" fg:w="1"/><text x="62.8601%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.6101%" y="261" width="0.0801%" height="15" fill="rgb(251,24,1)" fg:x="782" fg:w="1"/><text x="62.8601%" y="271.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.6101%" y="245" width="0.0801%" height="15" fill="rgb(212,185,49)" fg:x="782" fg:w="1"/><text x="62.8601%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.6101%" y="229" width="0.0801%" height="15" fill="rgb(215,175,22)" fg:x="782" fg:w="1"/><text x="62.8601%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.6101%" y="213" width="0.0801%" height="15" fill="rgb(250,205,14)" fg:x="782" fg:w="1"/><text x="62.8601%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.6101%" y="197" width="0.0801%" height="15" fill="rgb(225,211,22)" fg:x="782" fg:w="1"/><text x="62.8601%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.6101%" y="181" width="0.0801%" height="15" fill="rgb(251,179,42)" fg:x="782" fg:w="1"/><text x="62.8601%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.6902%" y="341" width="0.0801%" height="15" fill="rgb(208,216,51)" fg:x="783" fg:w="1"/><text x="62.9402%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.6902%" y="325" width="0.0801%" height="15" fill="rgb(235,36,11)" fg:x="783" fg:w="1"/><text x="62.9402%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.6902%" y="309" width="0.0801%" height="15" fill="rgb(213,189,28)" fg:x="783" fg:w="1"/><text x="62.9402%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.6902%" y="293" width="0.0801%" height="15" fill="rgb(227,203,42)" fg:x="783" fg:w="1"/><text x="62.9402%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.6902%" y="277" width="0.0801%" height="15" fill="rgb(244,72,36)" fg:x="783" fg:w="1"/><text x="62.9402%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="62.6902%" y="261" width="0.0801%" height="15" fill="rgb(213,53,17)" fg:x="783" fg:w="1"/><text x="62.9402%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="62.6902%" y="245" width="0.0801%" height="15" fill="rgb(207,167,3)" fg:x="783" fg:w="1"/><text x="62.9402%" y="255.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (4 samples, 0.32%)</title><rect x="62.5300%" y="389" width="0.3203%" height="15" fill="rgb(216,98,30)" fg:x="781" fg:w="4"/><text x="62.7800%" y="399.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="62.5300%" y="373" width="0.3203%" height="15" fill="rgb(236,123,15)" fg:x="781" fg:w="4"/><text x="62.7800%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="62.6902%" y="357" width="0.1601%" height="15" fill="rgb(248,81,50)" fg:x="783" fg:w="2"/><text x="62.9402%" y="367.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="62.7702%" y="341" width="0.0801%" height="15" fill="rgb(214,120,4)" fg:x="784" fg:w="1"/><text x="63.0202%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="62.7702%" y="325" width="0.0801%" height="15" fill="rgb(208,179,34)" fg:x="784" fg:w="1"/><text x="63.0202%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7702%" y="309" width="0.0801%" height="15" fill="rgb(227,140,7)" fg:x="784" fg:w="1"/><text x="63.0202%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7702%" y="293" width="0.0801%" height="15" fill="rgb(214,22,6)" fg:x="784" fg:w="1"/><text x="63.0202%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7702%" y="277" width="0.0801%" height="15" fill="rgb(207,137,27)" fg:x="784" fg:w="1"/><text x="63.0202%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7702%" y="261" width="0.0801%" height="15" fill="rgb(210,8,46)" fg:x="784" fg:w="1"/><text x="63.0202%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7702%" y="245" width="0.0801%" height="15" fill="rgb(240,16,54)" fg:x="784" fg:w="1"/><text x="63.0202%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7702%" y="229" width="0.0801%" height="15" fill="rgb(211,209,29)" fg:x="784" fg:w="1"/><text x="63.0202%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.7702%" y="213" width="0.0801%" height="15" fill="rgb(226,228,24)" fg:x="784" fg:w="1"/><text x="63.0202%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.7702%" y="197" width="0.0801%" height="15" fill="rgb(222,84,9)" fg:x="784" fg:w="1"/><text x="63.0202%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.7702%" y="181" width="0.0801%" height="15" fill="rgb(234,203,30)" fg:x="784" fg:w="1"/><text x="63.0202%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.7702%" y="165" width="0.0801%" height="15" fill="rgb(238,109,14)" fg:x="784" fg:w="1"/><text x="63.0202%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.7702%" y="149" width="0.0801%" height="15" fill="rgb(233,206,34)" fg:x="784" fg:w="1"/><text x="63.0202%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.7702%" y="133" width="0.0801%" height="15" fill="rgb(220,167,47)" fg:x="784" fg:w="1"/><text x="63.0202%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.7702%" y="117" width="0.0801%" height="15" fill="rgb(238,105,10)" fg:x="784" fg:w="1"/><text x="63.0202%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.7702%" y="101" width="0.0801%" height="15" fill="rgb(213,227,17)" fg:x="784" fg:w="1"/><text x="63.0202%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.7702%" y="85" width="0.0801%" height="15" fill="rgb(217,132,38)" fg:x="784" fg:w="1"/><text x="63.0202%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.7702%" y="69" width="0.0801%" height="15" fill="rgb(242,146,4)" fg:x="784" fg:w="1"/><text x="63.0202%" y="79.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.8503%" y="389" width="0.0801%" height="15" fill="rgb(212,61,9)" fg:x="785" fg:w="1"/><text x="63.1003%" y="399.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="62.8503%" y="373" width="0.0801%" height="15" fill="rgb(247,126,22)" fg:x="785" fg:w="1"/><text x="63.1003%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="62.8503%" y="357" width="0.0801%" height="15" fill="rgb(220,196,2)" fg:x="785" fg:w="1"/><text x="63.1003%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.8503%" y="341" width="0.0801%" height="15" fill="rgb(208,46,4)" fg:x="785" fg:w="1"/><text x="63.1003%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.8503%" y="325" width="0.0801%" height="15" fill="rgb(252,104,46)" fg:x="785" fg:w="1"/><text x="63.1003%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.8503%" y="309" width="0.0801%" height="15" fill="rgb(237,152,48)" fg:x="785" fg:w="1"/><text x="63.1003%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.8503%" y="293" width="0.0801%" height="15" fill="rgb(221,59,37)" fg:x="785" fg:w="1"/><text x="63.1003%" y="303.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.8503%" y="277" width="0.0801%" height="15" fill="rgb(209,202,51)" fg:x="785" fg:w="1"/><text x="63.1003%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.8503%" y="261" width="0.0801%" height="15" fill="rgb(228,81,30)" fg:x="785" fg:w="1"/><text x="63.1003%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.8503%" y="245" width="0.0801%" height="15" fill="rgb(227,42,39)" fg:x="785" fg:w="1"/><text x="63.1003%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.8503%" y="229" width="0.0801%" height="15" fill="rgb(221,26,2)" fg:x="785" fg:w="1"/><text x="63.1003%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.9303%" y="261" width="0.0801%" height="15" fill="rgb(254,61,31)" fg:x="786" fg:w="1"/><text x="63.1803%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.9303%" y="245" width="0.0801%" height="15" fill="rgb(222,173,38)" fg:x="786" fg:w="1"/><text x="63.1803%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.9303%" y="229" width="0.0801%" height="15" fill="rgb(218,50,12)" fg:x="786" fg:w="1"/><text x="63.1803%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.9303%" y="213" width="0.0801%" height="15" fill="rgb(223,88,40)" fg:x="786" fg:w="1"/><text x="63.1803%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.9303%" y="197" width="0.0801%" height="15" fill="rgb(237,54,19)" fg:x="786" fg:w="1"/><text x="63.1803%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.9303%" y="181" width="0.0801%" height="15" fill="rgb(251,129,25)" fg:x="786" fg:w="1"/><text x="63.1803%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.9303%" y="165" width="0.0801%" height="15" fill="rgb(238,97,19)" fg:x="786" fg:w="1"/><text x="63.1803%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.9303%" y="149" width="0.0801%" height="15" fill="rgb(240,169,18)" fg:x="786" fg:w="1"/><text x="63.1803%" y="159.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="62.9303%" y="373" width="0.1601%" height="15" fill="rgb(230,187,49)" fg:x="786" fg:w="2"/><text x="63.1803%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="62.9303%" y="357" width="0.1601%" height="15" fill="rgb(209,44,26)" fg:x="786" fg:w="2"/><text x="63.1803%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.9303%" y="341" width="0.1601%" height="15" fill="rgb(244,0,6)" fg:x="786" fg:w="2"/><text x="63.1803%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.9303%" y="325" width="0.1601%" height="15" fill="rgb(248,18,21)" fg:x="786" fg:w="2"/><text x="63.1803%" y="335.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.9303%" y="309" width="0.1601%" height="15" fill="rgb(245,180,19)" fg:x="786" fg:w="2"/><text x="63.1803%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.9303%" y="293" width="0.1601%" height="15" fill="rgb(252,118,36)" fg:x="786" fg:w="2"/><text x="63.1803%" y="303.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.9303%" y="277" width="0.1601%" height="15" fill="rgb(210,224,19)" fg:x="786" fg:w="2"/><text x="63.1803%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="63.0104%" y="261" width="0.0801%" height="15" fill="rgb(218,30,24)" fg:x="787" fg:w="1"/><text x="63.2604%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.0104%" y="245" width="0.0801%" height="15" fill="rgb(219,75,50)" fg:x="787" fg:w="1"/><text x="63.2604%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.0104%" y="229" width="0.0801%" height="15" fill="rgb(234,72,50)" fg:x="787" fg:w="1"/><text x="63.2604%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.0905%" y="325" width="0.0801%" height="15" fill="rgb(219,100,48)" fg:x="788" fg:w="1"/><text x="63.3405%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="63.1705%" y="325" width="0.1601%" height="15" fill="rgb(253,5,41)" fg:x="789" fg:w="2"/><text x="63.4205%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.4107%" y="229" width="0.0801%" height="15" fill="rgb(247,181,11)" fg:x="792" fg:w="1"/><text x="63.6607%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="63.4107%" y="213" width="0.0801%" height="15" fill="rgb(222,223,25)" fg:x="792" fg:w="1"/><text x="63.6607%" y="223.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (13 samples, 1.04%)</title><rect x="62.5300%" y="485" width="1.0408%" height="15" fill="rgb(214,198,28)" fg:x="781" fg:w="13"/><text x="62.7800%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.04%)</title><rect x="62.5300%" y="469" width="1.0408%" height="15" fill="rgb(230,46,43)" fg:x="781" fg:w="13"/><text x="62.7800%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 1.04%)</title><rect x="62.5300%" y="453" width="1.0408%" height="15" fill="rgb(233,65,53)" fg:x="781" fg:w="13"/><text x="62.7800%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (13 samples, 1.04%)</title><rect x="62.5300%" y="437" width="1.0408%" height="15" fill="rgb(221,121,27)" fg:x="781" fg:w="13"/><text x="62.7800%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (13 samples, 1.04%)</title><rect x="62.5300%" y="421" width="1.0408%" height="15" fill="rgb(247,70,47)" fg:x="781" fg:w="13"/><text x="62.7800%" y="431.50"></text></g><g><title>engine::internal::Entities::add_persisted (13 samples, 1.04%)</title><rect x="62.5300%" y="405" width="1.0408%" height="15" fill="rgb(228,85,35)" fg:x="781" fg:w="13"/><text x="62.7800%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity (8 samples, 0.64%)</title><rect x="62.9303%" y="389" width="0.6405%" height="15" fill="rgb(209,50,18)" fg:x="786" fg:w="8"/><text x="63.1803%" y="399.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="63.0905%" y="373" width="0.4804%" height="15" fill="rgb(250,19,35)" fg:x="788" fg:w="6"/><text x="63.3405%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.48%)</title><rect x="63.0905%" y="357" width="0.4804%" height="15" fill="rgb(253,107,29)" fg:x="788" fg:w="6"/><text x="63.3405%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="63.0905%" y="341" width="0.4804%" height="15" fill="rgb(252,179,29)" fg:x="788" fg:w="6"/><text x="63.3405%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="63.3307%" y="325" width="0.2402%" height="15" fill="rgb(238,194,6)" fg:x="791" fg:w="3"/><text x="63.5807%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="63.3307%" y="309" width="0.2402%" height="15" fill="rgb(238,164,29)" fg:x="791" fg:w="3"/><text x="63.5807%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="63.4107%" y="293" width="0.1601%" height="15" fill="rgb(224,25,9)" fg:x="792" fg:w="2"/><text x="63.6607%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.4107%" y="277" width="0.1601%" height="15" fill="rgb(244,153,23)" fg:x="792" fg:w="2"/><text x="63.6607%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="63.4107%" y="261" width="0.1601%" height="15" fill="rgb(212,203,14)" fg:x="792" fg:w="2"/><text x="63.6607%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.4107%" y="245" width="0.1601%" height="15" fill="rgb(220,164,20)" fg:x="792" fg:w="2"/><text x="63.6607%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.4908%" y="229" width="0.0801%" height="15" fill="rgb(222,203,48)" fg:x="793" fg:w="1"/><text x="63.7408%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.4908%" y="213" width="0.0801%" height="15" fill="rgb(215,159,22)" fg:x="793" fg:w="1"/><text x="63.7408%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.4908%" y="197" width="0.0801%" height="15" fill="rgb(216,183,47)" fg:x="793" fg:w="1"/><text x="63.7408%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.4908%" y="181" width="0.0801%" height="15" fill="rgb(229,195,25)" fg:x="793" fg:w="1"/><text x="63.7408%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.4908%" y="165" width="0.0801%" height="15" fill="rgb(224,132,51)" fg:x="793" fg:w="1"/><text x="63.7408%" y="175.50"></text></g><g><title>plugins_core::tools::get_contained_keys (18 samples, 1.44%)</title><rect x="62.3699%" y="533" width="1.4412%" height="15" fill="rgb(240,63,7)" fg:x="779" fg:w="18"/><text x="62.6199%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (18 samples, 1.44%)</title><rect x="62.3699%" y="517" width="1.4412%" height="15" fill="rgb(249,182,41)" fg:x="779" fg:w="18"/><text x="62.6199%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (18 samples, 1.44%)</title><rect x="62.3699%" y="501" width="1.4412%" height="15" fill="rgb(243,47,26)" fg:x="779" fg:w="18"/><text x="62.6199%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="63.5709%" y="485" width="0.2402%" height="15" fill="rgb(233,48,2)" fg:x="794" fg:w="3"/><text x="63.8209%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="63.5709%" y="469" width="0.2402%" height="15" fill="rgb(244,165,34)" fg:x="794" fg:w="3"/><text x="63.8209%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.7310%" y="453" width="0.0801%" height="15" fill="rgb(207,89,7)" fg:x="796" fg:w="1"/><text x="63.9810%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 2.32%)</title><rect x="61.5693%" y="565" width="2.3219%" height="15" fill="rgb(244,117,36)" fg:x="769" fg:w="29"/><text x="61.8193%" y="575.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (29 samples, 2.32%)</title><rect x="61.5693%" y="549" width="2.3219%" height="15" fill="rgb(226,144,34)" fg:x="769" fg:w="29"/><text x="61.8193%" y="559.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="63.8110%" y="533" width="0.0801%" height="15" fill="rgb(213,23,19)" fg:x="797" fg:w="1"/><text x="64.0610%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="63.8110%" y="517" width="0.0801%" height="15" fill="rgb(217,75,12)" fg:x="797" fg:w="1"/><text x="64.0610%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="63.8110%" y="501" width="0.0801%" height="15" fill="rgb(224,159,17)" fg:x="797" fg:w="1"/><text x="64.0610%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.8110%" y="485" width="0.0801%" height="15" fill="rgb(217,118,1)" fg:x="797" fg:w="1"/><text x="64.0610%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.8110%" y="469" width="0.0801%" height="15" fill="rgb(232,180,48)" fg:x="797" fg:w="1"/><text x="64.0610%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="63.8110%" y="453" width="0.0801%" height="15" fill="rgb(230,27,33)" fg:x="797" fg:w="1"/><text x="64.0610%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="63.8110%" y="437" width="0.0801%" height="15" fill="rgb(205,31,21)" fg:x="797" fg:w="1"/><text x="64.0610%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="63.8110%" y="421" width="0.0801%" height="15" fill="rgb(253,59,4)" fg:x="797" fg:w="1"/><text x="64.0610%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.8110%" y="405" width="0.0801%" height="15" fill="rgb(224,201,9)" fg:x="797" fg:w="1"/><text x="64.0610%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.8110%" y="389" width="0.0801%" height="15" fill="rgb(229,206,30)" fg:x="797" fg:w="1"/><text x="64.0610%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="63.8911%" y="517" width="0.0801%" height="15" fill="rgb(212,67,47)" fg:x="798" fg:w="1"/><text x="64.1411%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="63.8911%" y="501" width="0.0801%" height="15" fill="rgb(211,96,50)" fg:x="798" fg:w="1"/><text x="64.1411%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="63.8911%" y="485" width="0.0801%" height="15" fill="rgb(252,114,18)" fg:x="798" fg:w="1"/><text x="64.1411%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="63.8911%" y="469" width="0.0801%" height="15" fill="rgb(223,58,37)" fg:x="798" fg:w="1"/><text x="64.1411%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="63.8911%" y="453" width="0.0801%" height="15" fill="rgb(237,70,4)" fg:x="798" fg:w="1"/><text x="64.1411%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="63.8911%" y="437" width="0.0801%" height="15" fill="rgb(244,85,46)" fg:x="798" fg:w="1"/><text x="64.1411%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="63.8911%" y="421" width="0.0801%" height="15" fill="rgb(223,39,52)" fg:x="798" fg:w="1"/><text x="64.1411%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="63.8911%" y="405" width="0.0801%" height="15" fill="rgb(218,200,14)" fg:x="798" fg:w="1"/><text x="64.1411%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="63.8911%" y="389" width="0.0801%" height="15" fill="rgb(208,171,16)" fg:x="798" fg:w="1"/><text x="64.1411%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.8911%" y="373" width="0.0801%" height="15" fill="rgb(234,200,18)" fg:x="798" fg:w="1"/><text x="64.1411%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.8911%" y="357" width="0.0801%" height="15" fill="rgb(228,45,11)" fg:x="798" fg:w="1"/><text x="64.1411%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="63.8911%" y="341" width="0.0801%" height="15" fill="rgb(237,182,11)" fg:x="798" fg:w="1"/><text x="64.1411%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="63.8911%" y="325" width="0.0801%" height="15" fill="rgb(241,175,49)" fg:x="798" fg:w="1"/><text x="64.1411%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.8911%" y="309" width="0.0801%" height="15" fill="rgb(247,38,35)" fg:x="798" fg:w="1"/><text x="64.1411%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="63.8911%" y="293" width="0.0801%" height="15" fill="rgb(228,39,49)" fg:x="798" fg:w="1"/><text x="64.1411%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="63.8911%" y="277" width="0.0801%" height="15" fill="rgb(226,101,26)" fg:x="798" fg:w="1"/><text x="64.1411%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="63.8911%" y="261" width="0.0801%" height="15" fill="rgb(206,141,19)" fg:x="798" fg:w="1"/><text x="64.1411%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.8911%" y="245" width="0.0801%" height="15" fill="rgb(211,200,13)" fg:x="798" fg:w="1"/><text x="64.1411%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="63.8911%" y="229" width="0.0801%" height="15" fill="rgb(241,121,6)" fg:x="798" fg:w="1"/><text x="64.1411%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.08%)</title><rect x="63.8911%" y="213" width="0.0801%" height="15" fill="rgb(234,221,29)" fg:x="798" fg:w="1"/><text x="64.1411%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="64.3715%" y="181" width="0.1601%" height="15" fill="rgb(229,136,5)" fg:x="804" fg:w="2"/><text x="64.6215%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="64.3715%" y="165" width="0.1601%" height="15" fill="rgb(238,36,11)" fg:x="804" fg:w="2"/><text x="64.6215%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="64.3715%" y="149" width="0.1601%" height="15" fill="rgb(251,55,41)" fg:x="804" fg:w="2"/><text x="64.6215%" y="159.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="64.3715%" y="213" width="0.3203%" height="15" fill="rgb(242,34,40)" fg:x="804" fg:w="4"/><text x="64.6215%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="64.3715%" y="197" width="0.3203%" height="15" fill="rgb(215,42,17)" fg:x="804" fg:w="4"/><text x="64.6215%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="64.5316%" y="181" width="0.1601%" height="15" fill="rgb(207,44,46)" fg:x="806" fg:w="2"/><text x="64.7816%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="64.5316%" y="165" width="0.1601%" height="15" fill="rgb(211,206,28)" fg:x="806" fg:w="2"/><text x="64.7816%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.48%)</title><rect x="64.2914%" y="229" width="0.4804%" height="15" fill="rgb(237,167,16)" fg:x="803" fg:w="6"/><text x="64.5414%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.6918%" y="213" width="0.0801%" height="15" fill="rgb(233,66,6)" fg:x="808" fg:w="1"/><text x="64.9418%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7718%" y="213" width="0.0801%" height="15" fill="rgb(246,123,29)" fg:x="809" fg:w="1"/><text x="65.0218%" y="223.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (9 samples, 0.72%)</title><rect x="64.2114%" y="261" width="0.7206%" height="15" fill="rgb(209,62,40)" fg:x="802" fg:w="9"/><text x="64.4614%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="64.2914%" y="245" width="0.6405%" height="15" fill="rgb(218,4,25)" fg:x="803" fg:w="8"/><text x="64.5414%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="64.7718%" y="229" width="0.1601%" height="15" fill="rgb(253,91,49)" fg:x="809" fg:w="2"/><text x="65.0218%" y="239.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="64.8519%" y="213" width="0.0801%" height="15" fill="rgb(228,155,29)" fg:x="810" fg:w="1"/><text x="65.1019%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="64.2114%" y="341" width="0.8006%" height="15" fill="rgb(243,57,37)" fg:x="802" fg:w="10"/><text x="64.4614%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.80%)</title><rect x="64.2114%" y="325" width="0.8006%" height="15" fill="rgb(244,167,17)" fg:x="802" fg:w="10"/><text x="64.4614%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.80%)</title><rect x="64.2114%" y="309" width="0.8006%" height="15" fill="rgb(207,181,38)" fg:x="802" fg:w="10"/><text x="64.4614%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="64.2114%" y="293" width="0.8006%" height="15" fill="rgb(211,8,23)" fg:x="802" fg:w="10"/><text x="64.4614%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.80%)</title><rect x="64.2114%" y="277" width="0.8006%" height="15" fill="rgb(235,11,44)" fg:x="802" fg:w="10"/><text x="64.4614%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.9319%" y="261" width="0.0801%" height="15" fill="rgb(248,18,52)" fg:x="811" fg:w="1"/><text x="65.1819%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.96%)</title><rect x="64.1313%" y="373" width="0.9608%" height="15" fill="rgb(208,4,7)" fg:x="801" fg:w="12"/><text x="64.3813%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (12 samples, 0.96%)</title><rect x="64.1313%" y="357" width="0.9608%" height="15" fill="rgb(240,17,39)" fg:x="801" fg:w="12"/><text x="64.3813%" y="367.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.0120%" y="341" width="0.0801%" height="15" fill="rgb(207,170,3)" fg:x="812" fg:w="1"/><text x="65.2620%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="65.0120%" y="325" width="0.0801%" height="15" fill="rgb(236,100,52)" fg:x="812" fg:w="1"/><text x="65.2620%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="65.0120%" y="309" width="0.0801%" height="15" fill="rgb(246,78,51)" fg:x="812" fg:w="1"/><text x="65.2620%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.0120%" y="293" width="0.0801%" height="15" fill="rgb(211,17,15)" fg:x="812" fg:w="1"/><text x="65.2620%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="65.0120%" y="277" width="0.0801%" height="15" fill="rgb(209,59,46)" fg:x="812" fg:w="1"/><text x="65.2620%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (15 samples, 1.20%)</title><rect x="63.9712%" y="405" width="1.2010%" height="15" fill="rgb(210,92,25)" fg:x="799" fg:w="15"/><text x="64.2212%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (14 samples, 1.12%)</title><rect x="64.0512%" y="389" width="1.1209%" height="15" fill="rgb(238,174,52)" fg:x="800" fg:w="14"/><text x="64.3012%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="65.0921%" y="373" width="0.0801%" height="15" fill="rgb(230,73,7)" fg:x="813" fg:w="1"/><text x="65.3421%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0921%" y="357" width="0.0801%" height="15" fill="rgb(243,124,40)" fg:x="813" fg:w="1"/><text x="65.3421%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.1721%" y="405" width="0.0801%" height="15" fill="rgb(244,170,11)" fg:x="814" fg:w="1"/><text x="65.4221%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.2522%" y="389" width="0.0801%" height="15" fill="rgb(207,114,54)" fg:x="815" fg:w="1"/><text x="65.5022%" y="399.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (18 samples, 1.44%)</title><rect x="63.9712%" y="453" width="1.4412%" height="15" fill="rgb(205,42,20)" fg:x="799" fg:w="18"/><text x="64.2212%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 1.44%)</title><rect x="63.9712%" y="437" width="1.4412%" height="15" fill="rgb(230,30,28)" fg:x="799" fg:w="18"/><text x="64.2212%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 1.44%)</title><rect x="63.9712%" y="421" width="1.4412%" height="15" fill="rgb(205,73,54)" fg:x="799" fg:w="18"/><text x="64.2212%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="65.2522%" y="405" width="0.1601%" height="15" fill="rgb(254,227,23)" fg:x="815" fg:w="2"/><text x="65.5022%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.3323%" y="389" width="0.0801%" height="15" fill="rgb(228,202,34)" fg:x="816" fg:w="1"/><text x="65.5823%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.4123%" y="437" width="0.0801%" height="15" fill="rgb(222,225,37)" fg:x="817" fg:w="1"/><text x="65.6623%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="65.4123%" y="421" width="0.0801%" height="15" fill="rgb(221,14,54)" fg:x="817" fg:w="1"/><text x="65.6623%" y="431.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (20 samples, 1.60%)</title><rect x="63.9712%" y="501" width="1.6013%" height="15" fill="rgb(254,102,2)" fg:x="799" fg:w="20"/><text x="64.2212%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (20 samples, 1.60%)</title><rect x="63.9712%" y="485" width="1.6013%" height="15" fill="rgb(232,104,17)" fg:x="799" fg:w="20"/><text x="64.2212%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 1.60%)</title><rect x="63.9712%" y="469" width="1.6013%" height="15" fill="rgb(250,220,14)" fg:x="799" fg:w="20"/><text x="64.2212%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="65.4123%" y="453" width="0.1601%" height="15" fill="rgb(241,158,9)" fg:x="817" fg:w="2"/><text x="65.6623%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.4924%" y="437" width="0.0801%" height="15" fill="rgb(246,9,43)" fg:x="818" fg:w="1"/><text x="65.7424%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.5725%" y="453" width="0.0801%" height="15" fill="rgb(206,73,33)" fg:x="819" fg:w="1"/><text x="65.8225%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.6525%" y="453" width="0.0801%" height="15" fill="rgb(222,79,8)" fg:x="820" fg:w="1"/><text x="65.9025%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="65.7326%" y="453" width="0.0801%" height="15" fill="rgb(234,8,54)" fg:x="821" fg:w="1"/><text x="65.9826%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="65.7326%" y="437" width="0.0801%" height="15" fill="rgb(209,134,38)" fg:x="821" fg:w="1"/><text x="65.9826%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.7326%" y="421" width="0.0801%" height="15" fill="rgb(230,127,29)" fg:x="821" fg:w="1"/><text x="65.9826%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="65.8127%" y="453" width="0.0801%" height="15" fill="rgb(242,44,41)" fg:x="822" fg:w="1"/><text x="66.0627%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="65.8127%" y="437" width="0.0801%" height="15" fill="rgb(222,56,43)" fg:x="822" fg:w="1"/><text x="66.0627%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9728%" y="437" width="0.0801%" height="15" fill="rgb(238,39,47)" fg:x="824" fg:w="1"/><text x="66.2228%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.0528%" y="437" width="0.0801%" height="15" fill="rgb(226,79,43)" fg:x="825" fg:w="1"/><text x="66.3028%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.0528%" y="421" width="0.0801%" height="15" fill="rgb(242,105,53)" fg:x="825" fg:w="1"/><text x="66.3028%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="66.0528%" y="405" width="0.0801%" height="15" fill="rgb(251,132,46)" fg:x="825" fg:w="1"/><text x="66.3028%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.1329%" y="421" width="0.0801%" height="15" fill="rgb(231,77,14)" fg:x="826" fg:w="1"/><text x="66.3829%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="66.2130%" y="405" width="0.0801%" height="15" fill="rgb(240,135,9)" fg:x="827" fg:w="1"/><text x="66.4630%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="66.2130%" y="389" width="0.0801%" height="15" fill="rgb(248,109,14)" fg:x="827" fg:w="1"/><text x="66.4630%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="66.2130%" y="373" width="0.0801%" height="15" fill="rgb(227,146,52)" fg:x="827" fg:w="1"/><text x="66.4630%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="66.2130%" y="357" width="0.0801%" height="15" fill="rgb(232,54,3)" fg:x="827" fg:w="1"/><text x="66.4630%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.2930%" y="389" width="0.0801%" height="15" fill="rgb(229,201,43)" fg:x="828" fg:w="1"/><text x="66.5430%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.3731%" y="373" width="0.0801%" height="15" fill="rgb(252,161,33)" fg:x="829" fg:w="1"/><text x="66.6231%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.4532%" y="325" width="0.0801%" height="15" fill="rgb(226,146,40)" fg:x="830" fg:w="1"/><text x="66.7032%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="66.5332%" y="309" width="0.1601%" height="15" fill="rgb(219,47,25)" fg:x="831" fg:w="2"/><text x="66.7832%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="66.3731%" y="389" width="0.4003%" height="15" fill="rgb(250,135,13)" fg:x="829" fg:w="5"/><text x="66.6231%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="66.4532%" y="373" width="0.3203%" height="15" fill="rgb(219,229,18)" fg:x="830" fg:w="4"/><text x="66.7032%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="66.4532%" y="357" width="0.3203%" height="15" fill="rgb(217,152,27)" fg:x="830" fg:w="4"/><text x="66.7032%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="66.4532%" y="341" width="0.3203%" height="15" fill="rgb(225,71,47)" fg:x="830" fg:w="4"/><text x="66.7032%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="66.5332%" y="325" width="0.2402%" height="15" fill="rgb(220,139,14)" fg:x="831" fg:w="3"/><text x="66.7832%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="66.6934%" y="309" width="0.0801%" height="15" fill="rgb(247,54,32)" fg:x="833" fg:w="1"/><text x="66.9434%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.6934%" y="293" width="0.0801%" height="15" fill="rgb(252,131,39)" fg:x="833" fg:w="1"/><text x="66.9434%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="66.2130%" y="421" width="0.6405%" height="15" fill="rgb(210,108,39)" fg:x="827" fg:w="8"/><text x="66.4630%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="66.2930%" y="405" width="0.5604%" height="15" fill="rgb(205,23,29)" fg:x="828" fg:w="7"/><text x="66.5430%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.7734%" y="389" width="0.0801%" height="15" fill="rgb(246,139,46)" fg:x="834" fg:w="1"/><text x="67.0234%" y="399.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (39 samples, 3.12%)</title><rect x="63.9712%" y="517" width="3.1225%" height="15" fill="rgb(250,81,26)" fg:x="799" fg:w="39"/><text x="64.2212%" y="527.50">&lt;rp..</text></g><g><title>kernel::model::EntityPtr::to_json_value (19 samples, 1.52%)</title><rect x="65.5725%" y="501" width="1.5212%" height="15" fill="rgb(214,104,7)" fg:x="819" fg:w="19"/><text x="65.8225%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (19 samples, 1.52%)</title><rect x="65.5725%" y="485" width="1.5212%" height="15" fill="rgb(233,189,8)" fg:x="819" fg:w="19"/><text x="65.8225%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (19 samples, 1.52%)</title><rect x="65.5725%" y="469" width="1.5212%" height="15" fill="rgb(228,141,17)" fg:x="819" fg:w="19"/><text x="65.8225%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.20%)</title><rect x="65.8927%" y="453" width="1.2010%" height="15" fill="rgb(247,157,1)" fg:x="823" fg:w="15"/><text x="66.1427%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="66.1329%" y="437" width="0.9608%" height="15" fill="rgb(249,225,5)" fg:x="826" fg:w="12"/><text x="66.3829%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="66.8535%" y="421" width="0.2402%" height="15" fill="rgb(242,55,13)" fg:x="835" fg:w="3"/><text x="67.1035%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="66.9335%" y="405" width="0.1601%" height="15" fill="rgb(230,49,50)" fg:x="836" fg:w="2"/><text x="67.1835%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (70 samples, 5.60%)</title><rect x="61.5693%" y="581" width="5.6045%" height="15" fill="rgb(241,111,38)" fg:x="769" fg:w="70"/><text x="61.8193%" y="591.50">core::i..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (41 samples, 3.28%)</title><rect x="63.8911%" y="565" width="3.2826%" height="15" fill="rgb(252,155,4)" fg:x="798" fg:w="41"/><text x="64.1411%" y="575.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (41 samples, 3.28%)</title><rect x="63.8911%" y="549" width="3.2826%" height="15" fill="rgb(212,69,32)" fg:x="798" fg:w="41"/><text x="64.1411%" y="559.50">&lt;co..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (41 samples, 3.28%)</title><rect x="63.8911%" y="533" width="3.2826%" height="15" fill="rgb(243,107,47)" fg:x="798" fg:w="41"/><text x="64.1411%" y="543.50">plu..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="67.0937%" y="517" width="0.0801%" height="15" fill="rgb(247,130,12)" fg:x="838" fg:w="1"/><text x="67.3437%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="67.0937%" y="501" width="0.0801%" height="15" fill="rgb(233,74,16)" fg:x="838" fg:w="1"/><text x="67.3437%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.0937%" y="485" width="0.0801%" height="15" fill="rgb(208,58,18)" fg:x="838" fg:w="1"/><text x="67.3437%" y="495.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (74 samples, 5.92%)</title><rect x="61.3291%" y="597" width="5.9247%" height="15" fill="rgb(242,225,1)" fg:x="766" fg:w="74"/><text x="61.5791%" y="607.50">&lt;plugins..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.1737%" y="581" width="0.0801%" height="15" fill="rgb(249,39,40)" fg:x="839" fg:w="1"/><text x="67.4237%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.1737%" y="565" width="0.0801%" height="15" fill="rgb(207,72,44)" fg:x="839" fg:w="1"/><text x="67.4237%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="67.1737%" y="549" width="0.0801%" height="15" fill="rgb(215,193,12)" fg:x="839" fg:w="1"/><text x="67.4237%" y="559.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (686 samples, 54.92%)</title><rect x="12.4099%" y="661" width="54.9239%" height="15" fill="rgb(248,41,39)" fg:x="155" fg:w="686"/><text x="12.6599%" y="671.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (84 samples, 6.73%)</title><rect x="60.6085%" y="645" width="6.7254%" height="15" fill="rgb(253,85,4)" fg:x="757" fg:w="84"/><text x="60.8585%" y="655.50">kernel::p..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (84 samples, 6.73%)</title><rect x="60.6085%" y="629" width="6.7254%" height="15" fill="rgb(243,70,31)" fg:x="757" fg:w="84"/><text x="60.8585%" y="639.50">&lt;plugins_..</text></g><g><title>plugins_rpc::querying::have_surroundings (76 samples, 6.08%)</title><rect x="61.2490%" y="613" width="6.0849%" height="15" fill="rgb(253,195,26)" fg:x="765" fg:w="76"/><text x="61.4990%" y="623.50">plugins_..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2538%" y="597" width="0.0801%" height="15" fill="rgb(243,42,11)" fg:x="840" fg:w="1"/><text x="67.5038%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="67.4139%" y="597" width="0.0801%" height="15" fill="rgb(239,66,17)" fg:x="842" fg:w="1"/><text x="67.6639%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="67.4139%" y="581" width="0.0801%" height="15" fill="rgb(217,132,21)" fg:x="842" fg:w="1"/><text x="67.6639%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="67.4139%" y="565" width="0.0801%" height="15" fill="rgb(252,202,21)" fg:x="842" fg:w="1"/><text x="67.6639%" y="575.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="67.4139%" y="549" width="0.0801%" height="15" fill="rgb(233,98,36)" fg:x="842" fg:w="1"/><text x="67.6639%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="67.4139%" y="533" width="0.0801%" height="15" fill="rgb(216,153,54)" fg:x="842" fg:w="1"/><text x="67.6639%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4139%" y="517" width="0.0801%" height="15" fill="rgb(250,99,7)" fg:x="842" fg:w="1"/><text x="67.6639%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4139%" y="501" width="0.0801%" height="15" fill="rgb(207,56,50)" fg:x="842" fg:w="1"/><text x="67.6639%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4139%" y="485" width="0.0801%" height="15" fill="rgb(244,61,34)" fg:x="842" fg:w="1"/><text x="67.6639%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4139%" y="469" width="0.0801%" height="15" fill="rgb(241,50,38)" fg:x="842" fg:w="1"/><text x="67.6639%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4139%" y="453" width="0.0801%" height="15" fill="rgb(212,166,30)" fg:x="842" fg:w="1"/><text x="67.6639%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4139%" y="437" width="0.0801%" height="15" fill="rgb(249,127,32)" fg:x="842" fg:w="1"/><text x="67.6639%" y="447.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (689 samples, 55.16%)</title><rect x="12.4099%" y="757" width="55.1641%" height="15" fill="rgb(209,103,0)" fg:x="155" fg:w="689"/><text x="12.6599%" y="767.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (689 samples, 55.16%)</title><rect x="12.4099%" y="741" width="55.1641%" height="15" fill="rgb(238,209,51)" fg:x="155" fg:w="689"/><text x="12.6599%" y="751.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (689 samples, 55.16%)</title><rect x="12.4099%" y="725" width="55.1641%" height="15" fill="rgb(237,56,23)" fg:x="155" fg:w="689"/><text x="12.6599%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (689 samples, 55.16%)</title><rect x="12.4099%" y="709" width="55.1641%" height="15" fill="rgb(215,153,46)" fg:x="155" fg:w="689"/><text x="12.6599%" y="719.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (689 samples, 55.16%)</title><rect x="12.4099%" y="693" width="55.1641%" height="15" fill="rgb(224,49,31)" fg:x="155" fg:w="689"/><text x="12.6599%" y="703.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (689 samples, 55.16%)</title><rect x="12.4099%" y="677" width="55.1641%" height="15" fill="rgb(250,18,42)" fg:x="155" fg:w="689"/><text x="12.6599%" y="687.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (3 samples, 0.24%)</title><rect x="67.3339%" y="661" width="0.2402%" height="15" fill="rgb(215,176,39)" fg:x="841" fg:w="3"/><text x="67.5839%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="67.4139%" y="645" width="0.1601%" height="15" fill="rgb(223,77,29)" fg:x="842" fg:w="2"/><text x="67.6639%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="67.4139%" y="629" width="0.1601%" height="15" fill="rgb(234,94,52)" fg:x="842" fg:w="2"/><text x="67.6639%" y="639.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="67.4139%" y="613" width="0.1601%" height="15" fill="rgb(220,154,50)" fg:x="842" fg:w="2"/><text x="67.6639%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="67.4940%" y="597" width="0.0801%" height="15" fill="rgb(212,11,10)" fg:x="843" fg:w="1"/><text x="67.7440%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="67.4940%" y="581" width="0.0801%" height="15" fill="rgb(205,166,19)" fg:x="843" fg:w="1"/><text x="67.7440%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.4940%" y="565" width="0.0801%" height="15" fill="rgb(244,198,16)" fg:x="843" fg:w="1"/><text x="67.7440%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4940%" y="549" width="0.0801%" height="15" fill="rgb(219,69,12)" fg:x="843" fg:w="1"/><text x="67.7440%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.4940%" y="533" width="0.0801%" height="15" fill="rgb(245,30,7)" fg:x="843" fg:w="1"/><text x="67.7440%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4940%" y="517" width="0.0801%" height="15" fill="rgb(218,221,48)" fg:x="843" fg:w="1"/><text x="67.7440%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.4940%" y="501" width="0.0801%" height="15" fill="rgb(216,66,15)" fg:x="843" fg:w="1"/><text x="67.7440%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.4940%" y="485" width="0.0801%" height="15" fill="rgb(226,122,50)" fg:x="843" fg:w="1"/><text x="67.7440%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.4940%" y="469" width="0.0801%" height="15" fill="rgb(239,156,16)" fg:x="843" fg:w="1"/><text x="67.7440%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (846 samples, 67.73%)</title><rect x="0.0000%" y="837" width="67.7342%" height="15" fill="rgb(224,27,38)" fg:x="0" fg:w="846"/><text x="0.2500%" y="847.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (846 samples, 67.73%)</title><rect x="0.0000%" y="821" width="67.7342%" height="15" fill="rgb(224,39,27)" fg:x="0" fg:w="846"/><text x="0.2500%" y="831.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (846 samples, 67.73%)</title><rect x="0.0000%" y="805" width="67.7342%" height="15" fill="rgb(215,92,29)" fg:x="0" fg:w="846"/><text x="0.2500%" y="815.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (691 samples, 55.32%)</title><rect x="12.4099%" y="789" width="55.3243%" height="15" fill="rgb(207,159,16)" fg:x="155" fg:w="691"/><text x="12.6599%" y="799.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (691 samples, 55.32%)</title><rect x="12.4099%" y="773" width="55.3243%" height="15" fill="rgb(238,163,47)" fg:x="155" fg:w="691"/><text x="12.6599%" y="783.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>std::time::Instant::elapsed (2 samples, 0.16%)</title><rect x="67.5741%" y="757" width="0.1601%" height="15" fill="rgb(219,91,49)" fg:x="844" fg:w="2"/><text x="67.8241%" y="767.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.16%)</title><rect x="67.5741%" y="741" width="0.1601%" height="15" fill="rgb(227,167,31)" fg:x="844" fg:w="2"/><text x="67.8241%" y="751.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.16%)</title><rect x="67.5741%" y="725" width="0.1601%" height="15" fill="rgb(234,80,54)" fg:x="844" fg:w="2"/><text x="67.8241%" y="735.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="67.5741%" y="709" width="0.1601%" height="15" fill="rgb(212,114,2)" fg:x="844" fg:w="2"/><text x="67.8241%" y="719.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="67.5741%" y="693" width="0.1601%" height="15" fill="rgb(234,50,24)" fg:x="844" fg:w="2"/><text x="67.8241%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.7342%" y="693" width="0.0801%" height="15" fill="rgb(221,68,8)" fg:x="846" fg:w="1"/><text x="67.9842%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.7342%" y="725" width="0.2402%" height="15" fill="rgb(254,180,31)" fg:x="846" fg:w="3"/><text x="67.9842%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.7342%" y="709" width="0.2402%" height="15" fill="rgb(247,130,50)" fg:x="846" fg:w="3"/><text x="67.9842%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.8143%" y="693" width="0.1601%" height="15" fill="rgb(211,109,4)" fg:x="847" fg:w="2"/><text x="68.0643%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="67.8143%" y="677" width="0.1601%" height="15" fill="rgb(238,50,21)" fg:x="847" fg:w="2"/><text x="68.0643%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.8143%" y="661" width="0.1601%" height="15" fill="rgb(225,57,45)" fg:x="847" fg:w="2"/><text x="68.0643%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.8943%" y="645" width="0.0801%" height="15" fill="rgb(209,196,50)" fg:x="848" fg:w="1"/><text x="68.1443%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.8943%" y="629" width="0.0801%" height="15" fill="rgb(242,140,13)" fg:x="848" fg:w="1"/><text x="68.1443%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (4 samples, 0.32%)</title><rect x="67.7342%" y="773" width="0.3203%" height="15" fill="rgb(217,111,7)" fg:x="846" fg:w="4"/><text x="67.9842%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="67.7342%" y="757" width="0.3203%" height="15" fill="rgb(253,193,51)" fg:x="846" fg:w="4"/><text x="67.9842%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="67.7342%" y="741" width="0.3203%" height="15" fill="rgb(252,70,29)" fg:x="846" fg:w="4"/><text x="67.9842%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.9744%" y="725" width="0.0801%" height="15" fill="rgb(232,127,12)" fg:x="849" fg:w="1"/><text x="68.2244%" y="735.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="67.7342%" y="789" width="0.4003%" height="15" fill="rgb(211,180,21)" fg:x="846" fg:w="5"/><text x="67.9842%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::perform::StandardPerformer&gt;&gt; (1 samples, 0.08%)</title><rect x="68.0544%" y="773" width="0.0801%" height="15" fill="rgb(229,72,13)" fg:x="850" fg:w="1"/><text x="68.3044%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="68.1345%" y="757" width="0.0801%" height="15" fill="rgb(240,211,49)" fg:x="851" fg:w="1"/><text x="68.3845%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="68.1345%" y="741" width="0.0801%" height="15" fill="rgb(219,149,40)" fg:x="851" fg:w="1"/><text x="68.3845%" y="751.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="68.1345%" y="725" width="0.0801%" height="15" fill="rgb(210,127,46)" fg:x="851" fg:w="1"/><text x="68.3845%" y="735.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="68.1345%" y="709" width="0.0801%" height="15" fill="rgb(220,106,7)" fg:x="851" fg:w="1"/><text x="68.3845%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="68.1345%" y="693" width="0.0801%" height="15" fill="rgb(249,31,22)" fg:x="851" fg:w="1"/><text x="68.3845%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="68.1345%" y="677" width="0.0801%" height="15" fill="rgb(253,1,49)" fg:x="851" fg:w="1"/><text x="68.3845%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="68.1345%" y="661" width="0.0801%" height="15" fill="rgb(227,144,33)" fg:x="851" fg:w="1"/><text x="68.3845%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="68.1345%" y="645" width="0.0801%" height="15" fill="rgb(249,163,44)" fg:x="851" fg:w="1"/><text x="68.3845%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="68.2946%" y="741" width="0.1601%" height="15" fill="rgb(234,15,39)" fg:x="853" fg:w="2"/><text x="68.5446%" y="751.50"></text></g><g><title>libloading::os::unix::Library::open (1 samples, 0.08%)</title><rect x="68.3747%" y="725" width="0.0801%" height="15" fill="rgb(207,66,16)" fg:x="854" fg:w="1"/><text x="68.6247%" y="735.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="68.3747%" y="709" width="0.0801%" height="15" fill="rgb(233,112,24)" fg:x="854" fg:w="1"/><text x="68.6247%" y="719.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="68.3747%" y="693" width="0.0801%" height="15" fill="rgb(230,90,22)" fg:x="854" fg:w="1"/><text x="68.6247%" y="703.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="68.3747%" y="677" width="0.0801%" height="15" fill="rgb(229,61,13)" fg:x="854" fg:w="1"/><text x="68.6247%" y="687.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="68.3747%" y="661" width="0.0801%" height="15" fill="rgb(225,57,24)" fg:x="854" fg:w="1"/><text x="68.6247%" y="671.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="68.3747%" y="645" width="0.0801%" height="15" fill="rgb(208,169,48)" fg:x="854" fg:w="1"/><text x="68.6247%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (5 samples, 0.40%)</title><rect x="68.1345%" y="789" width="0.4003%" height="15" fill="rgb(244,218,51)" fg:x="851" fg:w="5"/><text x="68.3845%" y="799.50"></text></g><g><title>engine::session::Session::new (5 samples, 0.40%)</title><rect x="68.1345%" y="773" width="0.4003%" height="15" fill="rgb(214,148,10)" fg:x="851" fg:w="5"/><text x="68.3845%" y="783.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.32%)</title><rect x="68.2146%" y="757" width="0.3203%" height="15" fill="rgb(225,174,27)" fg:x="852" fg:w="4"/><text x="68.4646%" y="767.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="68.4548%" y="741" width="0.0801%" height="15" fill="rgb(230,96,26)" fg:x="855" fg:w="1"/><text x="68.7048%" y="751.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="68.4548%" y="725" width="0.0801%" height="15" fill="rgb(232,10,30)" fg:x="855" fg:w="1"/><text x="68.7048%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.5348%" y="677" width="0.0801%" height="15" fill="rgb(222,8,50)" fg:x="856" fg:w="1"/><text x="68.7848%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.5348%" y="661" width="0.0801%" height="15" fill="rgb(213,81,27)" fg:x="856" fg:w="1"/><text x="68.7848%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.5348%" y="645" width="0.0801%" height="15" fill="rgb(245,50,10)" fg:x="856" fg:w="1"/><text x="68.7848%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.5348%" y="629" width="0.0801%" height="15" fill="rgb(216,100,18)" fg:x="856" fg:w="1"/><text x="68.7848%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="68.6950%" y="661" width="0.0801%" height="15" fill="rgb(236,147,54)" fg:x="858" fg:w="1"/><text x="68.9450%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.6950%" y="645" width="0.0801%" height="15" fill="rgb(205,143,26)" fg:x="858" fg:w="1"/><text x="68.9450%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.6950%" y="629" width="0.0801%" height="15" fill="rgb(236,26,9)" fg:x="858" fg:w="1"/><text x="68.9450%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.6950%" y="613" width="0.0801%" height="15" fill="rgb(221,165,53)" fg:x="858" fg:w="1"/><text x="68.9450%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.7750%" y="645" width="0.0801%" height="15" fill="rgb(214,110,17)" fg:x="859" fg:w="1"/><text x="69.0250%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.7750%" y="629" width="0.0801%" height="15" fill="rgb(237,197,12)" fg:x="859" fg:w="1"/><text x="69.0250%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="68.5348%" y="709" width="0.4003%" height="15" fill="rgb(205,84,17)" fg:x="856" fg:w="5"/><text x="68.7848%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="68.5348%" y="693" width="0.4003%" height="15" fill="rgb(237,18,45)" fg:x="856" fg:w="5"/><text x="68.7848%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="68.6149%" y="677" width="0.3203%" height="15" fill="rgb(221,87,14)" fg:x="857" fg:w="4"/><text x="68.8649%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="68.7750%" y="661" width="0.1601%" height="15" fill="rgb(238,186,15)" fg:x="859" fg:w="2"/><text x="69.0250%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.8551%" y="645" width="0.0801%" height="15" fill="rgb(208,115,11)" fg:x="860" fg:w="1"/><text x="69.1051%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.8551%" y="629" width="0.0801%" height="15" fill="rgb(254,175,0)" fg:x="860" fg:w="1"/><text x="69.1051%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.8551%" y="613" width="0.0801%" height="15" fill="rgb(227,24,42)" fg:x="860" fg:w="1"/><text x="69.1051%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.8551%" y="597" width="0.0801%" height="15" fill="rgb(223,211,37)" fg:x="860" fg:w="1"/><text x="69.1051%" y="607.50"></text></g><g><title>engine::session::Session::flush (6 samples, 0.48%)</title><rect x="68.5348%" y="773" width="0.4804%" height="15" fill="rgb(235,49,27)" fg:x="856" fg:w="6"/><text x="68.7848%" y="783.50"></text></g><g><title>engine::session::Session::save_entity_changes (6 samples, 0.48%)</title><rect x="68.5348%" y="757" width="0.4804%" height="15" fill="rgb(254,97,51)" fg:x="856" fg:w="6"/><text x="68.7848%" y="767.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (6 samples, 0.48%)</title><rect x="68.5348%" y="741" width="0.4804%" height="15" fill="rgb(249,51,40)" fg:x="856" fg:w="6"/><text x="68.7848%" y="751.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (6 samples, 0.48%)</title><rect x="68.5348%" y="725" width="0.4804%" height="15" fill="rgb(210,128,45)" fg:x="856" fg:w="6"/><text x="68.7848%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="68.9351%" y="709" width="0.0801%" height="15" fill="rgb(224,137,50)" fg:x="861" fg:w="1"/><text x="69.1851%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="68.9351%" y="693" width="0.0801%" height="15" fill="rgb(242,15,9)" fg:x="861" fg:w="1"/><text x="69.1851%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.9351%" y="677" width="0.0801%" height="15" fill="rgb(233,187,41)" fg:x="861" fg:w="1"/><text x="69.1851%" y="687.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="68.9351%" y="661" width="0.0801%" height="15" fill="rgb(227,2,29)" fg:x="861" fg:w="1"/><text x="69.1851%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.9351%" y="645" width="0.0801%" height="15" fill="rgb(222,70,3)" fg:x="861" fg:w="1"/><text x="69.1851%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9351%" y="629" width="0.0801%" height="15" fill="rgb(213,11,42)" fg:x="861" fg:w="1"/><text x="69.1851%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9351%" y="613" width="0.0801%" height="15" fill="rgb(225,150,9)" fg:x="861" fg:w="1"/><text x="69.1851%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="68.9351%" y="597" width="0.0801%" height="15" fill="rgb(230,162,45)" fg:x="861" fg:w="1"/><text x="69.1851%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.0152%" y="709" width="0.0801%" height="15" fill="rgb(222,14,52)" fg:x="862" fg:w="1"/><text x="69.2652%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="69.0152%" y="693" width="0.0801%" height="15" fill="rgb(254,198,14)" fg:x="862" fg:w="1"/><text x="69.2652%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="69.0152%" y="677" width="0.0801%" height="15" fill="rgb(220,217,30)" fg:x="862" fg:w="1"/><text x="69.2652%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.0152%" y="661" width="0.0801%" height="15" fill="rgb(215,146,41)" fg:x="862" fg:w="1"/><text x="69.2652%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.0152%" y="645" width="0.0801%" height="15" fill="rgb(217,27,36)" fg:x="862" fg:w="1"/><text x="69.2652%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="69.0152%" y="757" width="0.1601%" height="15" fill="rgb(219,218,39)" fg:x="862" fg:w="2"/><text x="69.2652%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="69.0152%" y="741" width="0.1601%" height="15" fill="rgb(219,4,42)" fg:x="862" fg:w="2"/><text x="69.2652%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="69.0152%" y="725" width="0.1601%" height="15" fill="rgb(249,119,36)" fg:x="862" fg:w="2"/><text x="69.2652%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="69.0953%" y="709" width="0.0801%" height="15" fill="rgb(209,23,33)" fg:x="863" fg:w="1"/><text x="69.3453%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="69.0953%" y="693" width="0.0801%" height="15" fill="rgb(211,10,0)" fg:x="863" fg:w="1"/><text x="69.3453%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="69.0953%" y="677" width="0.0801%" height="15" fill="rgb(208,99,37)" fg:x="863" fg:w="1"/><text x="69.3453%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="69.1753%" y="741" width="0.0801%" height="15" fill="rgb(213,132,31)" fg:x="864" fg:w="1"/><text x="69.4253%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="69.1753%" y="725" width="0.0801%" height="15" fill="rgb(243,129,40)" fg:x="864" fg:w="1"/><text x="69.4253%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="69.1753%" y="709" width="0.0801%" height="15" fill="rgb(210,66,33)" fg:x="864" fg:w="1"/><text x="69.4253%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="69.1753%" y="693" width="0.0801%" height="15" fill="rgb(209,189,4)" fg:x="864" fg:w="1"/><text x="69.4253%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="69.1753%" y="677" width="0.0801%" height="15" fill="rgb(214,107,37)" fg:x="864" fg:w="1"/><text x="69.4253%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1753%" y="661" width="0.0801%" height="15" fill="rgb(245,88,54)" fg:x="864" fg:w="1"/><text x="69.4253%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.1753%" y="645" width="0.0801%" height="15" fill="rgb(205,146,20)" fg:x="864" fg:w="1"/><text x="69.4253%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.1753%" y="629" width="0.0801%" height="15" fill="rgb(220,161,25)" fg:x="864" fg:w="1"/><text x="69.4253%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.1753%" y="613" width="0.0801%" height="15" fill="rgb(215,152,15)" fg:x="864" fg:w="1"/><text x="69.4253%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.1753%" y="597" width="0.0801%" height="15" fill="rgb(233,192,44)" fg:x="864" fg:w="1"/><text x="69.4253%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.1753%" y="581" width="0.0801%" height="15" fill="rgb(240,170,46)" fg:x="864" fg:w="1"/><text x="69.4253%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.1753%" y="565" width="0.0801%" height="15" fill="rgb(207,104,33)" fg:x="864" fg:w="1"/><text x="69.4253%" y="575.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="69.0152%" y="773" width="0.3203%" height="15" fill="rgb(219,21,39)" fg:x="862" fg:w="4"/><text x="69.2652%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="69.1753%" y="757" width="0.1601%" height="15" fill="rgb(214,133,29)" fg:x="864" fg:w="2"/><text x="69.4253%" y="767.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="69.2554%" y="741" width="0.0801%" height="15" fill="rgb(226,93,6)" fg:x="865" fg:w="1"/><text x="69.5054%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="69.2554%" y="725" width="0.0801%" height="15" fill="rgb(252,222,34)" fg:x="865" fg:w="1"/><text x="69.5054%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="69.2554%" y="709" width="0.0801%" height="15" fill="rgb(252,92,48)" fg:x="865" fg:w="1"/><text x="69.5054%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.2554%" y="693" width="0.0801%" height="15" fill="rgb(245,223,24)" fg:x="865" fg:w="1"/><text x="69.5054%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="69.2554%" y="677" width="0.0801%" height="15" fill="rgb(205,176,3)" fg:x="865" fg:w="1"/><text x="69.5054%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="69.2554%" y="661" width="0.0801%" height="15" fill="rgb(235,151,15)" fg:x="865" fg:w="1"/><text x="69.5054%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.2554%" y="645" width="0.0801%" height="15" fill="rgb(237,209,11)" fg:x="865" fg:w="1"/><text x="69.5054%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2554%" y="629" width="0.0801%" height="15" fill="rgb(243,227,24)" fg:x="865" fg:w="1"/><text x="69.5054%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2554%" y="613" width="0.0801%" height="15" fill="rgb(239,193,16)" fg:x="865" fg:w="1"/><text x="69.5054%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2554%" y="597" width="0.0801%" height="15" fill="rgb(231,27,9)" fg:x="865" fg:w="1"/><text x="69.5054%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.2554%" y="581" width="0.0801%" height="15" fill="rgb(219,169,10)" fg:x="865" fg:w="1"/><text x="69.5054%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="69.3355%" y="757" width="0.0801%" height="15" fill="rgb(244,229,43)" fg:x="866" fg:w="1"/><text x="69.5855%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="69.3355%" y="741" width="0.0801%" height="15" fill="rgb(254,38,20)" fg:x="866" fg:w="1"/><text x="69.5855%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="69.3355%" y="725" width="0.0801%" height="15" fill="rgb(250,47,30)" fg:x="866" fg:w="1"/><text x="69.5855%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.3355%" y="709" width="0.0801%" height="15" fill="rgb(224,124,36)" fg:x="866" fg:w="1"/><text x="69.5855%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::scopes::Property)&gt; (1 samples, 0.08%)</title><rect x="69.3355%" y="693" width="0.0801%" height="15" fill="rgb(246,68,51)" fg:x="866" fg:w="1"/><text x="69.5855%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.3355%" y="677" width="0.0801%" height="15" fill="rgb(253,43,49)" fg:x="866" fg:w="1"/><text x="69.5855%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="69.4155%" y="677" width="0.0801%" height="15" fill="rgb(219,54,36)" fg:x="867" fg:w="1"/><text x="69.6655%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.4155%" y="661" width="0.0801%" height="15" fill="rgb(227,133,34)" fg:x="867" fg:w="1"/><text x="69.6655%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.4155%" y="645" width="0.0801%" height="15" fill="rgb(247,227,15)" fg:x="867" fg:w="1"/><text x="69.6655%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.4155%" y="629" width="0.0801%" height="15" fill="rgb(229,96,14)" fg:x="867" fg:w="1"/><text x="69.6655%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="69.4956%" y="661" width="0.1601%" height="15" fill="rgb(220,79,17)" fg:x="868" fg:w="2"/><text x="69.7456%" y="671.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="69.4956%" y="645" width="0.1601%" height="15" fill="rgb(205,131,53)" fg:x="868" fg:w="2"/><text x="69.7456%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="69.4956%" y="629" width="0.1601%" height="15" fill="rgb(209,50,29)" fg:x="868" fg:w="2"/><text x="69.7456%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.5757%" y="613" width="0.0801%" height="15" fill="rgb(245,86,46)" fg:x="869" fg:w="1"/><text x="69.8257%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6557%" y="629" width="0.0801%" height="15" fill="rgb(235,66,46)" fg:x="870" fg:w="1"/><text x="69.9057%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6557%" y="613" width="0.0801%" height="15" fill="rgb(232,148,31)" fg:x="870" fg:w="1"/><text x="69.9057%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6557%" y="597" width="0.0801%" height="15" fill="rgb(217,149,8)" fg:x="870" fg:w="1"/><text x="69.9057%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.6557%" y="581" width="0.0801%" height="15" fill="rgb(209,183,11)" fg:x="870" fg:w="1"/><text x="69.9057%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.6557%" y="565" width="0.0801%" height="15" fill="rgb(208,55,20)" fg:x="870" fg:w="1"/><text x="69.9057%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="69.6557%" y="549" width="0.0801%" height="15" fill="rgb(218,39,14)" fg:x="870" fg:w="1"/><text x="69.9057%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.6557%" y="661" width="0.1601%" height="15" fill="rgb(216,169,33)" fg:x="870" fg:w="2"/><text x="69.9057%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.6557%" y="645" width="0.1601%" height="15" fill="rgb(233,80,24)" fg:x="870" fg:w="2"/><text x="69.9057%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.7358%" y="629" width="0.0801%" height="15" fill="rgb(213,179,31)" fg:x="871" fg:w="1"/><text x="69.9858%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="69.4155%" y="693" width="0.4804%" height="15" fill="rgb(209,19,5)" fg:x="867" fg:w="6"/><text x="69.6655%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="69.4956%" y="677" width="0.4003%" height="15" fill="rgb(219,18,35)" fg:x="868" fg:w="5"/><text x="69.7456%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.8159%" y="661" width="0.0801%" height="15" fill="rgb(209,169,16)" fg:x="872" fg:w="1"/><text x="70.0659%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.8159%" y="645" width="0.0801%" height="15" fill="rgb(245,90,51)" fg:x="872" fg:w="1"/><text x="70.0659%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.8159%" y="629" width="0.0801%" height="15" fill="rgb(220,99,45)" fg:x="872" fg:w="1"/><text x="70.0659%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.9760%" y="613" width="0.0801%" height="15" fill="rgb(249,89,25)" fg:x="874" fg:w="1"/><text x="70.2260%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="69.8959%" y="693" width="0.2402%" height="15" fill="rgb(239,193,0)" fg:x="873" fg:w="3"/><text x="70.1459%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="69.8959%" y="677" width="0.2402%" height="15" fill="rgb(231,126,1)" fg:x="873" fg:w="3"/><text x="70.1459%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="69.8959%" y="661" width="0.2402%" height="15" fill="rgb(243,166,3)" fg:x="873" fg:w="3"/><text x="70.1459%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="69.8959%" y="645" width="0.2402%" height="15" fill="rgb(223,22,34)" fg:x="873" fg:w="3"/><text x="70.1459%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.9760%" y="629" width="0.1601%" height="15" fill="rgb(251,52,51)" fg:x="874" fg:w="2"/><text x="70.2260%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.0560%" y="613" width="0.0801%" height="15" fill="rgb(221,165,28)" fg:x="875" fg:w="1"/><text x="70.3060%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.0560%" y="597" width="0.0801%" height="15" fill="rgb(218,121,47)" fg:x="875" fg:w="1"/><text x="70.3060%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.0560%" y="581" width="0.0801%" height="15" fill="rgb(209,120,9)" fg:x="875" fg:w="1"/><text x="70.3060%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0560%" y="565" width="0.0801%" height="15" fill="rgb(236,68,12)" fg:x="875" fg:w="1"/><text x="70.3060%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="70.1361%" y="677" width="0.0801%" height="15" fill="rgb(225,194,26)" fg:x="876" fg:w="1"/><text x="70.3861%" y="687.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="70.1361%" y="661" width="0.0801%" height="15" fill="rgb(231,84,39)" fg:x="876" fg:w="1"/><text x="70.3861%" y="671.50"></text></g><g><title>treediff::tools::record::mk (1 samples, 0.08%)</title><rect x="70.1361%" y="645" width="0.0801%" height="15" fill="rgb(210,11,45)" fg:x="876" fg:w="1"/><text x="70.3861%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="70.2162%" y="645" width="0.0801%" height="15" fill="rgb(224,54,52)" fg:x="877" fg:w="1"/><text x="70.4662%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.2162%" y="629" width="0.0801%" height="15" fill="rgb(238,102,14)" fg:x="877" fg:w="1"/><text x="70.4662%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2162%" y="613" width="0.0801%" height="15" fill="rgb(243,160,52)" fg:x="877" fg:w="1"/><text x="70.4662%" y="623.50"></text></g><g><title>engine::session::Session::flush (12 samples, 0.96%)</title><rect x="69.4155%" y="757" width="0.9608%" height="15" fill="rgb(216,114,19)" fg:x="867" fg:w="12"/><text x="69.6655%" y="767.50"></text></g><g><title>engine::session::Session::save_entity_changes (12 samples, 0.96%)</title><rect x="69.4155%" y="741" width="0.9608%" height="15" fill="rgb(244,166,37)" fg:x="867" fg:w="12"/><text x="69.6655%" y="751.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (12 samples, 0.96%)</title><rect x="69.4155%" y="725" width="0.9608%" height="15" fill="rgb(246,29,44)" fg:x="867" fg:w="12"/><text x="69.6655%" y="735.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (12 samples, 0.96%)</title><rect x="69.4155%" y="709" width="0.9608%" height="15" fill="rgb(215,56,53)" fg:x="867" fg:w="12"/><text x="69.6655%" y="719.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="70.1361%" y="693" width="0.2402%" height="15" fill="rgb(217,60,2)" fg:x="876" fg:w="3"/><text x="70.3861%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="70.2162%" y="677" width="0.1601%" height="15" fill="rgb(207,26,24)" fg:x="877" fg:w="2"/><text x="70.4662%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="70.2162%" y="661" width="0.1601%" height="15" fill="rgb(252,210,15)" fg:x="877" fg:w="2"/><text x="70.4662%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="70.2962%" y="645" width="0.0801%" height="15" fill="rgb(253,209,26)" fg:x="878" fg:w="1"/><text x="70.5462%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.2962%" y="629" width="0.0801%" height="15" fill="rgb(238,170,14)" fg:x="878" fg:w="1"/><text x="70.5462%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.2962%" y="613" width="0.0801%" height="15" fill="rgb(216,178,15)" fg:x="878" fg:w="1"/><text x="70.5462%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.2962%" y="597" width="0.0801%" height="15" fill="rgb(250,197,2)" fg:x="878" fg:w="1"/><text x="70.5462%" y="607.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="70.2962%" y="581" width="0.0801%" height="15" fill="rgb(212,70,42)" fg:x="878" fg:w="1"/><text x="70.5462%" y="591.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="70.2962%" y="565" width="0.0801%" height="15" fill="rgb(227,213,9)" fg:x="878" fg:w="1"/><text x="70.5462%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.3763%" y="741" width="0.0801%" height="15" fill="rgb(245,99,25)" fg:x="879" fg:w="1"/><text x="70.6263%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.3763%" y="725" width="0.0801%" height="15" fill="rgb(250,82,29)" fg:x="879" fg:w="1"/><text x="70.6263%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.3763%" y="709" width="0.0801%" height="15" fill="rgb(241,226,54)" fg:x="879" fg:w="1"/><text x="70.6263%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.3763%" y="693" width="0.0801%" height="15" fill="rgb(221,99,41)" fg:x="879" fg:w="1"/><text x="70.6263%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="70.3763%" y="677" width="0.0801%" height="15" fill="rgb(213,90,21)" fg:x="879" fg:w="1"/><text x="70.6263%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.3763%" y="661" width="0.0801%" height="15" fill="rgb(205,208,24)" fg:x="879" fg:w="1"/><text x="70.6263%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.3763%" y="645" width="0.0801%" height="15" fill="rgb(246,31,12)" fg:x="879" fg:w="1"/><text x="70.6263%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="70.4564%" y="725" width="0.0801%" height="15" fill="rgb(213,154,6)" fg:x="880" fg:w="1"/><text x="70.7064%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.4564%" y="709" width="0.0801%" height="15" fill="rgb(222,163,29)" fg:x="880" fg:w="1"/><text x="70.7064%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.4564%" y="693" width="0.0801%" height="15" fill="rgb(227,201,8)" fg:x="880" fg:w="1"/><text x="70.7064%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.4564%" y="677" width="0.0801%" height="15" fill="rgb(233,9,32)" fg:x="880" fg:w="1"/><text x="70.7064%" y="687.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="70.3763%" y="757" width="0.3203%" height="15" fill="rgb(217,54,24)" fg:x="879" fg:w="4"/><text x="70.6263%" y="767.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="70.4564%" y="741" width="0.2402%" height="15" fill="rgb(235,192,0)" fg:x="880" fg:w="3"/><text x="70.7064%" y="751.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="70.5364%" y="725" width="0.1601%" height="15" fill="rgb(235,45,9)" fg:x="881" fg:w="2"/><text x="70.7864%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="70.6165%" y="709" width="0.0801%" height="15" fill="rgb(246,42,40)" fg:x="882" fg:w="1"/><text x="70.8665%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.6165%" y="693" width="0.0801%" height="15" fill="rgb(248,111,24)" fg:x="882" fg:w="1"/><text x="70.8665%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.6165%" y="677" width="0.0801%" height="15" fill="rgb(249,65,22)" fg:x="882" fg:w="1"/><text x="70.8665%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="70.6165%" y="661" width="0.0801%" height="15" fill="rgb(238,111,51)" fg:x="882" fg:w="1"/><text x="70.8665%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.6165%" y="645" width="0.0801%" height="15" fill="rgb(250,118,22)" fg:x="882" fg:w="1"/><text x="70.8665%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.6165%" y="629" width="0.0801%" height="15" fill="rgb(234,84,26)" fg:x="882" fg:w="1"/><text x="70.8665%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6165%" y="613" width="0.0801%" height="15" fill="rgb(243,172,12)" fg:x="882" fg:w="1"/><text x="70.8665%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6165%" y="597" width="0.0801%" height="15" fill="rgb(236,150,49)" fg:x="882" fg:w="1"/><text x="70.8665%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6165%" y="581" width="0.0801%" height="15" fill="rgb(225,197,26)" fg:x="882" fg:w="1"/><text x="70.8665%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6165%" y="565" width="0.0801%" height="15" fill="rgb(214,17,42)" fg:x="882" fg:w="1"/><text x="70.8665%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6165%" y="549" width="0.0801%" height="15" fill="rgb(224,165,40)" fg:x="882" fg:w="1"/><text x="70.8665%" y="559.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="70.6966%" y="757" width="0.0801%" height="15" fill="rgb(246,100,4)" fg:x="883" fg:w="1"/><text x="70.9466%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.6966%" y="741" width="0.0801%" height="15" fill="rgb(222,103,0)" fg:x="883" fg:w="1"/><text x="70.9466%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.6966%" y="725" width="0.0801%" height="15" fill="rgb(227,189,26)" fg:x="883" fg:w="1"/><text x="70.9466%" y="735.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="70.6966%" y="709" width="0.0801%" height="15" fill="rgb(214,202,17)" fg:x="883" fg:w="1"/><text x="70.9466%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="70.6966%" y="693" width="0.0801%" height="15" fill="rgb(229,111,3)" fg:x="883" fg:w="1"/><text x="70.9466%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.6966%" y="677" width="0.0801%" height="15" fill="rgb(229,172,15)" fg:x="883" fg:w="1"/><text x="70.9466%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="70.7766%" y="725" width="0.0801%" height="15" fill="rgb(230,224,35)" fg:x="884" fg:w="1"/><text x="71.0266%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.7766%" y="709" width="0.0801%" height="15" fill="rgb(251,141,6)" fg:x="884" fg:w="1"/><text x="71.0266%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.7766%" y="693" width="0.0801%" height="15" fill="rgb(225,208,6)" fg:x="884" fg:w="1"/><text x="71.0266%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="70.7766%" y="677" width="0.0801%" height="15" fill="rgb(246,181,16)" fg:x="884" fg:w="1"/><text x="71.0266%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.7766%" y="661" width="0.0801%" height="15" fill="rgb(227,129,36)" fg:x="884" fg:w="1"/><text x="71.0266%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.7766%" y="645" width="0.0801%" height="15" fill="rgb(248,117,24)" fg:x="884" fg:w="1"/><text x="71.0266%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7766%" y="629" width="0.0801%" height="15" fill="rgb(214,185,35)" fg:x="884" fg:w="1"/><text x="71.0266%" y="639.50"></text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="70.7766%" y="757" width="0.1601%" height="15" fill="rgb(236,150,34)" fg:x="884" fg:w="2"/><text x="71.0266%" y="767.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="70.7766%" y="741" width="0.1601%" height="15" fill="rgb(243,228,27)" fg:x="884" fg:w="2"/><text x="71.0266%" y="751.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="70.8567%" y="725" width="0.0801%" height="15" fill="rgb(245,77,44)" fg:x="885" fg:w="1"/><text x="71.1067%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="70.8567%" y="709" width="0.0801%" height="15" fill="rgb(235,214,42)" fg:x="885" fg:w="1"/><text x="71.1067%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.8567%" y="693" width="0.0801%" height="15" fill="rgb(221,74,3)" fg:x="885" fg:w="1"/><text x="71.1067%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.8567%" y="677" width="0.0801%" height="15" fill="rgb(206,121,29)" fg:x="885" fg:w="1"/><text x="71.1067%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="70.8567%" y="661" width="0.0801%" height="15" fill="rgb(249,131,53)" fg:x="885" fg:w="1"/><text x="71.1067%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.8567%" y="645" width="0.0801%" height="15" fill="rgb(236,170,29)" fg:x="885" fg:w="1"/><text x="71.1067%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.8567%" y="629" width="0.0801%" height="15" fill="rgb(247,96,15)" fg:x="885" fg:w="1"/><text x="71.1067%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8567%" y="613" width="0.0801%" height="15" fill="rgb(211,210,7)" fg:x="885" fg:w="1"/><text x="71.1067%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.8567%" y="597" width="0.0801%" height="15" fill="rgb(240,88,50)" fg:x="885" fg:w="1"/><text x="71.1067%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8567%" y="581" width="0.0801%" height="15" fill="rgb(209,229,26)" fg:x="885" fg:w="1"/><text x="71.1067%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.8567%" y="565" width="0.0801%" height="15" fill="rgb(210,68,23)" fg:x="885" fg:w="1"/><text x="71.1067%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8567%" y="549" width="0.0801%" height="15" fill="rgb(229,180,13)" fg:x="885" fg:w="1"/><text x="71.1067%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.8567%" y="533" width="0.0801%" height="15" fill="rgb(236,53,44)" fg:x="885" fg:w="1"/><text x="71.1067%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.9367%" y="741" width="0.0801%" height="15" fill="rgb(244,214,29)" fg:x="886" fg:w="1"/><text x="71.1867%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.9367%" y="725" width="0.0801%" height="15" fill="rgb(220,75,29)" fg:x="886" fg:w="1"/><text x="71.1867%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.9367%" y="709" width="0.0801%" height="15" fill="rgb(214,183,37)" fg:x="886" fg:w="1"/><text x="71.1867%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.9367%" y="693" width="0.0801%" height="15" fill="rgb(239,117,29)" fg:x="886" fg:w="1"/><text x="71.1867%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="70.9367%" y="677" width="0.0801%" height="15" fill="rgb(237,171,35)" fg:x="886" fg:w="1"/><text x="71.1867%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.9367%" y="661" width="0.0801%" height="15" fill="rgb(229,178,53)" fg:x="886" fg:w="1"/><text x="71.1867%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.9367%" y="645" width="0.0801%" height="15" fill="rgb(210,102,19)" fg:x="886" fg:w="1"/><text x="71.1867%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.9367%" y="629" width="0.0801%" height="15" fill="rgb(235,127,22)" fg:x="886" fg:w="1"/><text x="71.1867%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.9367%" y="613" width="0.0801%" height="15" fill="rgb(244,31,31)" fg:x="886" fg:w="1"/><text x="71.1867%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.9367%" y="597" width="0.0801%" height="15" fill="rgb(231,43,21)" fg:x="886" fg:w="1"/><text x="71.1867%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9367%" y="581" width="0.0801%" height="15" fill="rgb(217,131,35)" fg:x="886" fg:w="1"/><text x="71.1867%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (22 samples, 1.76%)</title><rect x="69.3355%" y="773" width="1.7614%" height="15" fill="rgb(221,149,4)" fg:x="866" fg:w="22"/><text x="69.5855%" y="783.50"></text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="70.9367%" y="757" width="0.1601%" height="15" fill="rgb(232,170,28)" fg:x="886" fg:w="2"/><text x="71.1867%" y="767.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="71.0168%" y="741" width="0.0801%" height="15" fill="rgb(238,56,10)" fg:x="887" fg:w="1"/><text x="71.2668%" y="751.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="71.0168%" y="725" width="0.0801%" height="15" fill="rgb(235,196,14)" fg:x="887" fg:w="1"/><text x="71.2668%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="71.0168%" y="709" width="0.0801%" height="15" fill="rgb(216,45,48)" fg:x="887" fg:w="1"/><text x="71.2668%" y="719.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0168%" y="693" width="0.0801%" height="15" fill="rgb(238,213,17)" fg:x="887" fg:w="1"/><text x="71.2668%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0168%" y="677" width="0.0801%" height="15" fill="rgb(212,13,2)" fg:x="887" fg:w="1"/><text x="71.2668%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0168%" y="661" width="0.0801%" height="15" fill="rgb(240,114,20)" fg:x="887" fg:w="1"/><text x="71.2668%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.0168%" y="645" width="0.0801%" height="15" fill="rgb(228,41,40)" fg:x="887" fg:w="1"/><text x="71.2668%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.0168%" y="629" width="0.0801%" height="15" fill="rgb(244,132,35)" fg:x="887" fg:w="1"/><text x="71.2668%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.0168%" y="613" width="0.0801%" height="15" fill="rgb(253,189,4)" fg:x="887" fg:w="1"/><text x="71.2668%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0168%" y="597" width="0.0801%" height="15" fill="rgb(224,37,19)" fg:x="887" fg:w="1"/><text x="71.2668%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0168%" y="581" width="0.0801%" height="15" fill="rgb(235,223,18)" fg:x="887" fg:w="1"/><text x="71.2668%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.0168%" y="565" width="0.0801%" height="15" fill="rgb(235,163,25)" fg:x="887" fg:w="1"/><text x="71.2668%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.0168%" y="549" width="0.0801%" height="15" fill="rgb(217,145,28)" fg:x="887" fg:w="1"/><text x="71.2668%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.0168%" y="533" width="0.0801%" height="15" fill="rgb(223,223,32)" fg:x="887" fg:w="1"/><text x="71.2668%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.0168%" y="517" width="0.0801%" height="15" fill="rgb(227,189,39)" fg:x="887" fg:w="1"/><text x="71.2668%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0168%" y="501" width="0.0801%" height="15" fill="rgb(248,10,22)" fg:x="887" fg:w="1"/><text x="71.2668%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0969%" y="645" width="0.0801%" height="15" fill="rgb(248,46,39)" fg:x="888" fg:w="1"/><text x="71.3469%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.0969%" y="629" width="0.0801%" height="15" fill="rgb(248,113,48)" fg:x="888" fg:w="1"/><text x="71.3469%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.0969%" y="613" width="0.0801%" height="15" fill="rgb(245,16,25)" fg:x="888" fg:w="1"/><text x="71.3469%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.0969%" y="597" width="0.0801%" height="15" fill="rgb(249,152,16)" fg:x="888" fg:w="1"/><text x="71.3469%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0969%" y="581" width="0.0801%" height="15" fill="rgb(250,16,1)" fg:x="888" fg:w="1"/><text x="71.3469%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="71.0969%" y="741" width="0.1601%" height="15" fill="rgb(249,138,3)" fg:x="888" fg:w="2"/><text x="71.3469%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="71.0969%" y="725" width="0.1601%" height="15" fill="rgb(227,71,41)" fg:x="888" fg:w="2"/><text x="71.3469%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="71.0969%" y="709" width="0.1601%" height="15" fill="rgb(209,184,23)" fg:x="888" fg:w="2"/><text x="71.3469%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="71.0969%" y="693" width="0.1601%" height="15" fill="rgb(223,215,31)" fg:x="888" fg:w="2"/><text x="71.3469%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="71.0969%" y="677" width="0.1601%" height="15" fill="rgb(210,146,28)" fg:x="888" fg:w="2"/><text x="71.3469%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="71.0969%" y="661" width="0.1601%" height="15" fill="rgb(209,183,41)" fg:x="888" fg:w="2"/><text x="71.3469%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1769%" y="645" width="0.0801%" height="15" fill="rgb(209,224,45)" fg:x="889" fg:w="1"/><text x="71.4269%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1769%" y="629" width="0.0801%" height="15" fill="rgb(224,209,51)" fg:x="889" fg:w="1"/><text x="71.4269%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1769%" y="613" width="0.0801%" height="15" fill="rgb(223,17,39)" fg:x="889" fg:w="1"/><text x="71.4269%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1769%" y="597" width="0.0801%" height="15" fill="rgb(234,204,37)" fg:x="889" fg:w="1"/><text x="71.4269%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.1769%" y="581" width="0.0801%" height="15" fill="rgb(236,120,5)" fg:x="889" fg:w="1"/><text x="71.4269%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1769%" y="565" width="0.0801%" height="15" fill="rgb(248,97,27)" fg:x="889" fg:w="1"/><text x="71.4269%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1769%" y="549" width="0.0801%" height="15" fill="rgb(240,66,17)" fg:x="889" fg:w="1"/><text x="71.4269%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1769%" y="533" width="0.0801%" height="15" fill="rgb(210,79,3)" fg:x="889" fg:w="1"/><text x="71.4269%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1769%" y="517" width="0.0801%" height="15" fill="rgb(214,176,27)" fg:x="889" fg:w="1"/><text x="71.4269%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1769%" y="501" width="0.0801%" height="15" fill="rgb(235,185,3)" fg:x="889" fg:w="1"/><text x="71.4269%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.1769%" y="485" width="0.0801%" height="15" fill="rgb(227,24,12)" fg:x="889" fg:w="1"/><text x="71.4269%" y="495.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (35 samples, 2.80%)</title><rect x="68.5348%" y="789" width="2.8022%" height="15" fill="rgb(252,169,48)" fg:x="856" fg:w="35"/><text x="68.7848%" y="799.50">&lt;t..</text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="71.0969%" y="773" width="0.2402%" height="15" fill="rgb(212,65,1)" fg:x="888" fg:w="3"/><text x="71.3469%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="71.0969%" y="757" width="0.2402%" height="15" fill="rgb(242,39,24)" fg:x="888" fg:w="3"/><text x="71.3469%" y="767.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="71.2570%" y="741" width="0.0801%" height="15" fill="rgb(249,32,23)" fg:x="890" fg:w="1"/><text x="71.5070%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="71.2570%" y="725" width="0.0801%" height="15" fill="rgb(251,195,23)" fg:x="890" fg:w="1"/><text x="71.5070%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.2570%" y="709" width="0.0801%" height="15" fill="rgb(236,174,8)" fg:x="890" fg:w="1"/><text x="71.5070%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="71.2570%" y="693" width="0.0801%" height="15" fill="rgb(220,197,8)" fg:x="890" fg:w="1"/><text x="71.5070%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="71.2570%" y="677" width="0.0801%" height="15" fill="rgb(240,108,37)" fg:x="890" fg:w="1"/><text x="71.5070%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::Acls&gt; (1 samples, 0.08%)</title><rect x="71.2570%" y="661" width="0.0801%" height="15" fill="rgb(232,176,24)" fg:x="890" fg:w="1"/><text x="71.5070%" y="671.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="71.3371%" y="757" width="0.0801%" height="15" fill="rgb(243,35,29)" fg:x="891" fg:w="1"/><text x="71.5871%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="71.3371%" y="741" width="0.0801%" height="15" fill="rgb(210,37,18)" fg:x="891" fg:w="1"/><text x="71.5871%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="71.3371%" y="725" width="0.0801%" height="15" fill="rgb(224,184,40)" fg:x="891" fg:w="1"/><text x="71.5871%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3371%" y="709" width="0.0801%" height="15" fill="rgb(236,39,29)" fg:x="891" fg:w="1"/><text x="71.5871%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3371%" y="693" width="0.0801%" height="15" fill="rgb(232,48,39)" fg:x="891" fg:w="1"/><text x="71.5871%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.4171%" y="709" width="0.0801%" height="15" fill="rgb(236,34,42)" fg:x="892" fg:w="1"/><text x="71.6671%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.4972%" y="709" width="0.0801%" height="15" fill="rgb(243,106,37)" fg:x="893" fg:w="1"/><text x="71.7472%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.4972%" y="693" width="0.0801%" height="15" fill="rgb(218,96,6)" fg:x="893" fg:w="1"/><text x="71.7472%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.4972%" y="677" width="0.0801%" height="15" fill="rgb(235,130,12)" fg:x="893" fg:w="1"/><text x="71.7472%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.4972%" y="661" width="0.0801%" height="15" fill="rgb(231,95,0)" fg:x="893" fg:w="1"/><text x="71.7472%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.4972%" y="645" width="0.0801%" height="15" fill="rgb(228,12,23)" fg:x="893" fg:w="1"/><text x="71.7472%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.4972%" y="629" width="0.0801%" height="15" fill="rgb(216,12,1)" fg:x="893" fg:w="1"/><text x="71.7472%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.4972%" y="613" width="0.0801%" height="15" fill="rgb(219,59,3)" fg:x="893" fg:w="1"/><text x="71.7472%" y="623.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="71.4972%" y="597" width="0.0801%" height="15" fill="rgb(215,208,46)" fg:x="893" fg:w="1"/><text x="71.7472%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="71.4972%" y="581" width="0.0801%" height="15" fill="rgb(254,224,29)" fg:x="893" fg:w="1"/><text x="71.7472%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.7374%" y="629" width="0.0801%" height="15" fill="rgb(232,14,29)" fg:x="896" fg:w="1"/><text x="71.9874%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="71.4171%" y="725" width="0.4804%" height="15" fill="rgb(208,45,52)" fg:x="892" fg:w="6"/><text x="71.6671%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="71.5773%" y="709" width="0.3203%" height="15" fill="rgb(234,191,28)" fg:x="894" fg:w="4"/><text x="71.8273%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.7374%" y="693" width="0.1601%" height="15" fill="rgb(244,67,43)" fg:x="896" fg:w="2"/><text x="71.9874%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="71.7374%" y="677" width="0.1601%" height="15" fill="rgb(236,189,24)" fg:x="896" fg:w="2"/><text x="71.9874%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="71.7374%" y="661" width="0.1601%" height="15" fill="rgb(239,214,33)" fg:x="896" fg:w="2"/><text x="71.9874%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="71.7374%" y="645" width="0.1601%" height="15" fill="rgb(226,176,41)" fg:x="896" fg:w="2"/><text x="71.9874%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="71.8175%" y="629" width="0.0801%" height="15" fill="rgb(248,47,8)" fg:x="897" fg:w="1"/><text x="72.0675%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.8975%" y="661" width="0.0801%" height="15" fill="rgb(218,81,44)" fg:x="898" fg:w="1"/><text x="72.1475%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.8975%" y="693" width="0.1601%" height="15" fill="rgb(213,98,6)" fg:x="898" fg:w="2"/><text x="72.1475%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="71.8975%" y="677" width="0.1601%" height="15" fill="rgb(222,85,22)" fg:x="898" fg:w="2"/><text x="72.1475%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.9776%" y="661" width="0.0801%" height="15" fill="rgb(239,46,39)" fg:x="899" fg:w="1"/><text x="72.2276%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.9776%" y="645" width="0.0801%" height="15" fill="rgb(237,12,29)" fg:x="899" fg:w="1"/><text x="72.2276%" y="655.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="71.8975%" y="709" width="0.3203%" height="15" fill="rgb(214,77,8)" fg:x="898" fg:w="4"/><text x="72.1475%" y="719.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="72.0576%" y="693" width="0.1601%" height="15" fill="rgb(217,168,37)" fg:x="900" fg:w="2"/><text x="72.3076%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="72.0576%" y="677" width="0.1601%" height="15" fill="rgb(221,217,23)" fg:x="900" fg:w="2"/><text x="72.3076%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="72.0576%" y="661" width="0.1601%" height="15" fill="rgb(243,229,36)" fg:x="900" fg:w="2"/><text x="72.3076%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="72.1377%" y="645" width="0.0801%" height="15" fill="rgb(251,163,40)" fg:x="901" fg:w="1"/><text x="72.3877%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="72.1377%" y="629" width="0.0801%" height="15" fill="rgb(237,222,12)" fg:x="901" fg:w="1"/><text x="72.3877%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="72.1377%" y="613" width="0.0801%" height="15" fill="rgb(248,132,6)" fg:x="901" fg:w="1"/><text x="72.3877%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="72.1377%" y="597" width="0.0801%" height="15" fill="rgb(227,167,50)" fg:x="901" fg:w="1"/><text x="72.3877%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="72.1377%" y="581" width="0.0801%" height="15" fill="rgb(242,84,37)" fg:x="901" fg:w="1"/><text x="72.3877%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.1377%" y="565" width="0.0801%" height="15" fill="rgb(212,4,50)" fg:x="901" fg:w="1"/><text x="72.3877%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2178%" y="677" width="0.0801%" height="15" fill="rgb(230,228,32)" fg:x="902" fg:w="1"/><text x="72.4678%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="72.2178%" y="709" width="0.1601%" height="15" fill="rgb(248,217,23)" fg:x="902" fg:w="2"/><text x="72.4678%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="72.2178%" y="693" width="0.1601%" height="15" fill="rgb(238,197,32)" fg:x="902" fg:w="2"/><text x="72.4678%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="72.2978%" y="677" width="0.0801%" height="15" fill="rgb(236,106,1)" fg:x="903" fg:w="1"/><text x="72.5478%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2978%" y="661" width="0.0801%" height="15" fill="rgb(219,228,13)" fg:x="903" fg:w="1"/><text x="72.5478%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.3779%" y="565" width="0.0801%" height="15" fill="rgb(238,30,35)" fg:x="904" fg:w="1"/><text x="72.6279%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.3779%" y="549" width="0.0801%" height="15" fill="rgb(236,70,23)" fg:x="904" fg:w="1"/><text x="72.6279%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.4580%" y="485" width="0.0801%" height="15" fill="rgb(249,104,48)" fg:x="905" fg:w="1"/><text x="72.7080%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.4580%" y="469" width="0.0801%" height="15" fill="rgb(254,117,50)" fg:x="905" fg:w="1"/><text x="72.7080%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.4580%" y="549" width="0.1601%" height="15" fill="rgb(223,152,4)" fg:x="905" fg:w="2"/><text x="72.7080%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.4580%" y="533" width="0.1601%" height="15" fill="rgb(245,6,2)" fg:x="905" fg:w="2"/><text x="72.7080%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.4580%" y="517" width="0.1601%" height="15" fill="rgb(249,150,24)" fg:x="905" fg:w="2"/><text x="72.7080%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.4580%" y="501" width="0.1601%" height="15" fill="rgb(228,185,42)" fg:x="905" fg:w="2"/><text x="72.7080%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.5380%" y="485" width="0.0801%" height="15" fill="rgb(226,39,33)" fg:x="906" fg:w="1"/><text x="72.7880%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="72.3779%" y="613" width="0.3203%" height="15" fill="rgb(221,166,19)" fg:x="904" fg:w="4"/><text x="72.6279%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="72.3779%" y="597" width="0.3203%" height="15" fill="rgb(209,109,2)" fg:x="904" fg:w="4"/><text x="72.6279%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="72.3779%" y="581" width="0.3203%" height="15" fill="rgb(252,216,26)" fg:x="904" fg:w="4"/><text x="72.6279%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.4580%" y="565" width="0.2402%" height="15" fill="rgb(227,173,36)" fg:x="905" fg:w="3"/><text x="72.7080%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.6181%" y="549" width="0.0801%" height="15" fill="rgb(209,90,7)" fg:x="907" fg:w="1"/><text x="72.8681%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.6181%" y="533" width="0.0801%" height="15" fill="rgb(250,194,11)" fg:x="907" fg:w="1"/><text x="72.8681%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="72.3779%" y="645" width="0.4804%" height="15" fill="rgb(220,72,50)" fg:x="904" fg:w="6"/><text x="72.6279%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="72.3779%" y="629" width="0.4804%" height="15" fill="rgb(222,106,48)" fg:x="904" fg:w="6"/><text x="72.6279%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="72.6982%" y="613" width="0.1601%" height="15" fill="rgb(216,220,45)" fg:x="908" fg:w="2"/><text x="72.9482%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="72.6982%" y="597" width="0.1601%" height="15" fill="rgb(234,112,18)" fg:x="908" fg:w="2"/><text x="72.9482%" y="607.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="72.6982%" y="581" width="0.1601%" height="15" fill="rgb(206,179,9)" fg:x="908" fg:w="2"/><text x="72.9482%" y="591.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (19 samples, 1.52%)</title><rect x="71.4171%" y="757" width="1.5212%" height="15" fill="rgb(215,115,40)" fg:x="892" fg:w="19"/><text x="71.6671%" y="767.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (19 samples, 1.52%)</title><rect x="71.4171%" y="741" width="1.5212%" height="15" fill="rgb(222,69,34)" fg:x="892" fg:w="19"/><text x="71.6671%" y="751.50"></text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.04%)</title><rect x="71.8975%" y="725" width="1.0408%" height="15" fill="rgb(209,161,10)" fg:x="898" fg:w="13"/><text x="72.1475%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.56%)</title><rect x="72.3779%" y="709" width="0.5604%" height="15" fill="rgb(217,6,38)" fg:x="904" fg:w="7"/><text x="72.6279%" y="719.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.56%)</title><rect x="72.3779%" y="693" width="0.5604%" height="15" fill="rgb(229,229,48)" fg:x="904" fg:w="7"/><text x="72.6279%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="72.3779%" y="677" width="0.5604%" height="15" fill="rgb(225,21,28)" fg:x="904" fg:w="7"/><text x="72.6279%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="72.3779%" y="661" width="0.5604%" height="15" fill="rgb(206,33,13)" fg:x="904" fg:w="7"/><text x="72.6279%" y="671.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.8583%" y="645" width="0.0801%" height="15" fill="rgb(242,178,17)" fg:x="910" fg:w="1"/><text x="73.1083%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8583%" y="629" width="0.0801%" height="15" fill="rgb(220,162,5)" fg:x="910" fg:w="1"/><text x="73.1083%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="72.9384%" y="741" width="0.0801%" height="15" fill="rgb(210,33,43)" fg:x="911" fg:w="1"/><text x="73.1884%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="72.9384%" y="725" width="0.0801%" height="15" fill="rgb(216,116,54)" fg:x="911" fg:w="1"/><text x="73.1884%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.9384%" y="709" width="0.0801%" height="15" fill="rgb(249,92,24)" fg:x="911" fg:w="1"/><text x="73.1884%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.9384%" y="693" width="0.0801%" height="15" fill="rgb(231,189,14)" fg:x="911" fg:w="1"/><text x="73.1884%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.9384%" y="677" width="0.0801%" height="15" fill="rgb(230,8,41)" fg:x="911" fg:w="1"/><text x="73.1884%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.9384%" y="661" width="0.0801%" height="15" fill="rgb(249,7,27)" fg:x="911" fg:w="1"/><text x="73.1884%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.9384%" y="645" width="0.0801%" height="15" fill="rgb(232,86,5)" fg:x="911" fg:w="1"/><text x="73.1884%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="72.9384%" y="629" width="0.0801%" height="15" fill="rgb(224,175,18)" fg:x="911" fg:w="1"/><text x="73.1884%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.9384%" y="613" width="0.0801%" height="15" fill="rgb(220,129,12)" fg:x="911" fg:w="1"/><text x="73.1884%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.9384%" y="597" width="0.0801%" height="15" fill="rgb(210,19,36)" fg:x="911" fg:w="1"/><text x="73.1884%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.9384%" y="581" width="0.0801%" height="15" fill="rgb(219,96,14)" fg:x="911" fg:w="1"/><text x="73.1884%" y="591.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="72.9384%" y="565" width="0.0801%" height="15" fill="rgb(249,106,1)" fg:x="911" fg:w="1"/><text x="73.1884%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="72.9384%" y="549" width="0.0801%" height="15" fill="rgb(249,155,20)" fg:x="911" fg:w="1"/><text x="73.1884%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="72.9384%" y="533" width="0.0801%" height="15" fill="rgb(244,168,9)" fg:x="911" fg:w="1"/><text x="73.1884%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="72.9384%" y="517" width="0.0801%" height="15" fill="rgb(216,23,50)" fg:x="911" fg:w="1"/><text x="73.1884%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="72.9384%" y="501" width="0.0801%" height="15" fill="rgb(224,219,20)" fg:x="911" fg:w="1"/><text x="73.1884%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="72.9384%" y="485" width="0.0801%" height="15" fill="rgb(222,156,15)" fg:x="911" fg:w="1"/><text x="73.1884%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.9384%" y="469" width="0.0801%" height="15" fill="rgb(231,97,17)" fg:x="911" fg:w="1"/><text x="73.1884%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="72.9384%" y="453" width="0.0801%" height="15" fill="rgb(218,70,48)" fg:x="911" fg:w="1"/><text x="73.1884%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.08%)</title><rect x="72.9384%" y="437" width="0.0801%" height="15" fill="rgb(212,196,52)" fg:x="911" fg:w="1"/><text x="73.1884%" y="447.50"></text></g><g><title>engine::session::Session::close (22 samples, 1.76%)</title><rect x="71.3371%" y="789" width="1.7614%" height="15" fill="rgb(243,203,18)" fg:x="891" fg:w="22"/><text x="71.5871%" y="799.50"></text></g><g><title>engine::session::Session::save_entity_changes (22 samples, 1.76%)</title><rect x="71.3371%" y="773" width="1.7614%" height="15" fill="rgb(252,125,41)" fg:x="891" fg:w="22"/><text x="71.5871%" y="783.50"></text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="72.9384%" y="757" width="0.1601%" height="15" fill="rgb(223,180,33)" fg:x="911" fg:w="2"/><text x="73.1884%" y="767.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.08%)</title><rect x="73.0184%" y="741" width="0.0801%" height="15" fill="rgb(254,159,46)" fg:x="912" fg:w="1"/><text x="73.2684%" y="751.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="73.0184%" y="725" width="0.0801%" height="15" fill="rgb(254,38,10)" fg:x="912" fg:w="1"/><text x="73.2684%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="73.1785%" y="597" width="0.1601%" height="15" fill="rgb(208,217,32)" fg:x="914" fg:w="2"/><text x="73.4285%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="73.1785%" y="581" width="0.1601%" height="15" fill="rgb(221,120,13)" fg:x="914" fg:w="2"/><text x="73.4285%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="73.1785%" y="565" width="0.1601%" height="15" fill="rgb(246,54,52)" fg:x="914" fg:w="2"/><text x="73.4285%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2586%" y="549" width="0.0801%" height="15" fill="rgb(242,34,25)" fg:x="915" fg:w="1"/><text x="73.5086%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2586%" y="533" width="0.0801%" height="15" fill="rgb(247,209,9)" fg:x="915" fg:w="1"/><text x="73.5086%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2586%" y="517" width="0.0801%" height="15" fill="rgb(228,71,26)" fg:x="915" fg:w="1"/><text x="73.5086%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2586%" y="501" width="0.0801%" height="15" fill="rgb(222,145,49)" fg:x="915" fg:w="1"/><text x="73.5086%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2586%" y="485" width="0.0801%" height="15" fill="rgb(218,121,17)" fg:x="915" fg:w="1"/><text x="73.5086%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2586%" y="469" width="0.0801%" height="15" fill="rgb(244,50,7)" fg:x="915" fg:w="1"/><text x="73.5086%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2586%" y="453" width="0.0801%" height="15" fill="rgb(246,229,37)" fg:x="915" fg:w="1"/><text x="73.5086%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2586%" y="437" width="0.0801%" height="15" fill="rgb(225,18,5)" fg:x="915" fg:w="1"/><text x="73.5086%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2586%" y="421" width="0.0801%" height="15" fill="rgb(213,204,8)" fg:x="915" fg:w="1"/><text x="73.5086%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.3387%" y="549" width="0.0801%" height="15" fill="rgb(238,103,6)" fg:x="916" fg:w="1"/><text x="73.5887%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.3387%" y="533" width="0.0801%" height="15" fill="rgb(222,25,35)" fg:x="916" fg:w="1"/><text x="73.5887%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3387%" y="517" width="0.0801%" height="15" fill="rgb(213,203,35)" fg:x="916" fg:w="1"/><text x="73.5887%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3387%" y="501" width="0.0801%" height="15" fill="rgb(221,79,53)" fg:x="916" fg:w="1"/><text x="73.5887%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3387%" y="485" width="0.0801%" height="15" fill="rgb(243,200,35)" fg:x="916" fg:w="1"/><text x="73.5887%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="73.3387%" y="597" width="0.3203%" height="15" fill="rgb(248,60,25)" fg:x="916" fg:w="4"/><text x="73.5887%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (4 samples, 0.32%)</title><rect x="73.3387%" y="581" width="0.3203%" height="15" fill="rgb(227,53,46)" fg:x="916" fg:w="4"/><text x="73.5887%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (4 samples, 0.32%)</title><rect x="73.3387%" y="565" width="0.3203%" height="15" fill="rgb(216,120,32)" fg:x="916" fg:w="4"/><text x="73.5887%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="73.4187%" y="549" width="0.2402%" height="15" fill="rgb(220,134,1)" fg:x="917" fg:w="3"/><text x="73.6687%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.4988%" y="533" width="0.1601%" height="15" fill="rgb(237,168,5)" fg:x="918" fg:w="2"/><text x="73.7488%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.4988%" y="517" width="0.1601%" height="15" fill="rgb(231,100,33)" fg:x="918" fg:w="2"/><text x="73.7488%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.4988%" y="501" width="0.1601%" height="15" fill="rgb(236,177,47)" fg:x="918" fg:w="2"/><text x="73.7488%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.6589%" y="469" width="0.0801%" height="15" fill="rgb(235,7,49)" fg:x="920" fg:w="1"/><text x="73.9089%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.6589%" y="453" width="0.0801%" height="15" fill="rgb(232,119,22)" fg:x="920" fg:w="1"/><text x="73.9089%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="73.6589%" y="437" width="0.0801%" height="15" fill="rgb(254,73,53)" fg:x="920" fg:w="1"/><text x="73.9089%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="73.6589%" y="421" width="0.0801%" height="15" fill="rgb(251,35,20)" fg:x="920" fg:w="1"/><text x="73.9089%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="73.6589%" y="405" width="0.0801%" height="15" fill="rgb(241,119,20)" fg:x="920" fg:w="1"/><text x="73.9089%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="73.6589%" y="389" width="0.0801%" height="15" fill="rgb(207,102,14)" fg:x="920" fg:w="1"/><text x="73.9089%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="73.6589%" y="373" width="0.0801%" height="15" fill="rgb(248,201,50)" fg:x="920" fg:w="1"/><text x="73.9089%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="73.6589%" y="597" width="0.1601%" height="15" fill="rgb(222,185,44)" fg:x="920" fg:w="2"/><text x="73.9089%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="73.6589%" y="581" width="0.1601%" height="15" fill="rgb(218,107,18)" fg:x="920" fg:w="2"/><text x="73.9089%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (2 samples, 0.16%)</title><rect x="73.6589%" y="565" width="0.1601%" height="15" fill="rgb(237,177,39)" fg:x="920" fg:w="2"/><text x="73.9089%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="73.6589%" y="549" width="0.1601%" height="15" fill="rgb(246,69,6)" fg:x="920" fg:w="2"/><text x="73.9089%" y="559.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="73.6589%" y="533" width="0.1601%" height="15" fill="rgb(234,208,37)" fg:x="920" fg:w="2"/><text x="73.9089%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="73.6589%" y="517" width="0.1601%" height="15" fill="rgb(225,4,6)" fg:x="920" fg:w="2"/><text x="73.9089%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="73.6589%" y="501" width="0.1601%" height="15" fill="rgb(233,45,0)" fg:x="920" fg:w="2"/><text x="73.9089%" y="511.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="73.6589%" y="485" width="0.1601%" height="15" fill="rgb(226,136,5)" fg:x="920" fg:w="2"/><text x="73.9089%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.7390%" y="469" width="0.0801%" height="15" fill="rgb(211,91,47)" fg:x="921" fg:w="1"/><text x="73.9890%" y="479.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="73.7390%" y="453" width="0.0801%" height="15" fill="rgb(242,88,51)" fg:x="921" fg:w="1"/><text x="73.9890%" y="463.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="73.7390%" y="437" width="0.0801%" height="15" fill="rgb(230,91,28)" fg:x="921" fg:w="1"/><text x="73.9890%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.7390%" y="421" width="0.0801%" height="15" fill="rgb(254,186,29)" fg:x="921" fg:w="1"/><text x="73.9890%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.7390%" y="405" width="0.0801%" height="15" fill="rgb(238,6,4)" fg:x="921" fg:w="1"/><text x="73.9890%" y="415.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="73.7390%" y="389" width="0.0801%" height="15" fill="rgb(221,151,16)" fg:x="921" fg:w="1"/><text x="73.9890%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="73.7390%" y="373" width="0.0801%" height="15" fill="rgb(251,143,52)" fg:x="921" fg:w="1"/><text x="73.9890%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="73.7390%" y="357" width="0.0801%" height="15" fill="rgb(206,90,15)" fg:x="921" fg:w="1"/><text x="73.9890%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="73.7390%" y="341" width="0.0801%" height="15" fill="rgb(218,35,8)" fg:x="921" fg:w="1"/><text x="73.9890%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.08%)</title><rect x="73.7390%" y="325" width="0.0801%" height="15" fill="rgb(239,215,6)" fg:x="921" fg:w="1"/><text x="73.9890%" y="335.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.16%)</title><rect x="73.8191%" y="533" width="0.1601%" height="15" fill="rgb(245,116,39)" fg:x="922" fg:w="2"/><text x="74.0691%" y="543.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="73.9792%" y="453" width="0.0801%" height="15" fill="rgb(242,65,28)" fg:x="924" fg:w="1"/><text x="74.2292%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="74.0592%" y="437" width="0.0801%" height="15" fill="rgb(252,132,53)" fg:x="925" fg:w="1"/><text x="74.3092%" y="447.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="74.0592%" y="421" width="0.0801%" height="15" fill="rgb(224,159,50)" fg:x="925" fg:w="1"/><text x="74.3092%" y="431.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="74.0592%" y="405" width="0.0801%" height="15" fill="rgb(224,93,4)" fg:x="925" fg:w="1"/><text x="74.3092%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="73.9792%" y="501" width="0.2402%" height="15" fill="rgb(208,81,34)" fg:x="924" fg:w="3"/><text x="74.2292%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="73.9792%" y="485" width="0.2402%" height="15" fill="rgb(233,92,54)" fg:x="924" fg:w="3"/><text x="74.2292%" y="495.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="73.9792%" y="469" width="0.2402%" height="15" fill="rgb(237,21,14)" fg:x="924" fg:w="3"/><text x="74.2292%" y="479.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="74.0592%" y="453" width="0.1601%" height="15" fill="rgb(249,128,51)" fg:x="925" fg:w="2"/><text x="74.3092%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="74.1393%" y="437" width="0.0801%" height="15" fill="rgb(223,129,24)" fg:x="926" fg:w="1"/><text x="74.3893%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1393%" y="421" width="0.0801%" height="15" fill="rgb(231,168,25)" fg:x="926" fg:w="1"/><text x="74.3893%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.1393%" y="405" width="0.0801%" height="15" fill="rgb(224,39,20)" fg:x="926" fg:w="1"/><text x="74.3893%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="74.1393%" y="389" width="0.0801%" height="15" fill="rgb(225,152,53)" fg:x="926" fg:w="1"/><text x="74.3893%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="73.9792%" y="517" width="0.3203%" height="15" fill="rgb(252,17,24)" fg:x="924" fg:w="4"/><text x="74.2292%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2194%" y="501" width="0.0801%" height="15" fill="rgb(250,114,30)" fg:x="927" fg:w="1"/><text x="74.4694%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.96%)</title><rect x="74.4596%" y="453" width="0.9608%" height="15" fill="rgb(229,5,4)" fg:x="930" fg:w="12"/><text x="74.7096%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.96%)</title><rect x="74.4596%" y="437" width="0.9608%" height="15" fill="rgb(225,176,49)" fg:x="930" fg:w="12"/><text x="74.7096%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="75.2602%" y="421" width="0.1601%" height="15" fill="rgb(224,221,49)" fg:x="940" fg:w="2"/><text x="75.5102%" y="431.50"></text></g><g><title>regex_automata::meta::reverse_inner::extract (1 samples, 0.08%)</title><rect x="75.4203%" y="453" width="0.0801%" height="15" fill="rgb(253,169,27)" fg:x="942" fg:w="1"/><text x="75.6703%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="75.5004%" y="453" width="0.1601%" height="15" fill="rgb(211,206,16)" fg:x="943" fg:w="2"/><text x="75.7504%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="75.5004%" y="437" width="0.1601%" height="15" fill="rgb(244,87,35)" fg:x="943" fg:w="2"/><text x="75.7504%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="75.6605%" y="421" width="0.0801%" height="15" fill="rgb(246,28,10)" fg:x="945" fg:w="1"/><text x="75.9105%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.6605%" y="405" width="0.0801%" height="15" fill="rgb(229,12,44)" fg:x="945" fg:w="1"/><text x="75.9105%" y="415.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="75.9007%" y="389" width="0.1601%" height="15" fill="rgb(210,145,37)" fg:x="948" fg:w="2"/><text x="76.1507%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="76.0608%" y="389" width="0.1601%" height="15" fill="rgb(227,112,52)" fg:x="950" fg:w="2"/><text x="76.3108%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="76.2210%" y="389" width="0.1601%" height="15" fill="rgb(238,155,34)" fg:x="952" fg:w="2"/><text x="76.4710%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.3010%" y="373" width="0.0801%" height="15" fill="rgb(239,226,36)" fg:x="953" fg:w="1"/><text x="76.5510%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.3010%" y="357" width="0.0801%" height="15" fill="rgb(230,16,23)" fg:x="953" fg:w="1"/><text x="76.5510%" y="367.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="76.3010%" y="341" width="0.0801%" height="15" fill="rgb(236,171,36)" fg:x="953" fg:w="1"/><text x="76.5510%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="76.3010%" y="325" width="0.0801%" height="15" fill="rgb(221,22,14)" fg:x="953" fg:w="1"/><text x="76.5510%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="76.3811%" y="389" width="0.0801%" height="15" fill="rgb(242,43,11)" fg:x="954" fg:w="1"/><text x="76.6311%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="76.4612%" y="389" width="0.0801%" height="15" fill="rgb(232,69,23)" fg:x="955" fg:w="1"/><text x="76.7112%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="76.4612%" y="373" width="0.0801%" height="15" fill="rgb(216,180,54)" fg:x="955" fg:w="1"/><text x="76.7112%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.4612%" y="357" width="0.0801%" height="15" fill="rgb(216,5,24)" fg:x="955" fg:w="1"/><text x="76.7112%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.4612%" y="341" width="0.0801%" height="15" fill="rgb(225,89,9)" fg:x="955" fg:w="1"/><text x="76.7112%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.4612%" y="325" width="0.0801%" height="15" fill="rgb(243,75,33)" fg:x="955" fg:w="1"/><text x="76.7112%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (48 samples, 3.84%)</title><rect x="76.5412%" y="389" width="3.8431%" height="15" fill="rgb(247,141,45)" fg:x="956" fg:w="48"/><text x="76.7912%" y="399.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (48 samples, 3.84%)</title><rect x="76.5412%" y="373" width="3.8431%" height="15" fill="rgb(232,177,36)" fg:x="956" fg:w="48"/><text x="76.7912%" y="383.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (48 samples, 3.84%)</title><rect x="76.5412%" y="357" width="3.8431%" height="15" fill="rgb(219,125,36)" fg:x="956" fg:w="48"/><text x="76.7912%" y="367.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="80.3843%" y="389" width="0.4003%" height="15" fill="rgb(227,94,9)" fg:x="1004" fg:w="5"/><text x="80.6343%" y="399.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="80.7846%" y="389" width="0.0801%" height="15" fill="rgb(240,34,52)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 5.36%)</title><rect x="75.6605%" y="437" width="5.3643%" height="15" fill="rgb(216,45,12)" fg:x="945" fg:w="67"/><text x="75.9105%" y="447.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (66 samples, 5.28%)</title><rect x="75.7406%" y="421" width="5.2842%" height="15" fill="rgb(246,21,19)" fg:x="946" fg:w="66"/><text x="75.9906%" y="431.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (66 samples, 5.28%)</title><rect x="75.7406%" y="405" width="5.2842%" height="15" fill="rgb(213,98,42)" fg:x="946" fg:w="66"/><text x="75.9906%" y="415.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="80.8647%" y="389" width="0.1601%" height="15" fill="rgb(250,136,47)" fg:x="1010" fg:w="2"/><text x="81.1147%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.9448%" y="373" width="0.0801%" height="15" fill="rgb(251,124,27)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="81.1049%" y="421" width="0.0801%" height="15" fill="rgb(229,180,14)" fg:x="1013" fg:w="1"/><text x="81.3549%" y="431.50"></text></g><g><title>regex_automata::meta::strategy::new (88 samples, 7.05%)</title><rect x="74.2994%" y="469" width="7.0456%" height="15" fill="rgb(245,216,25)" fg:x="928" fg:w="88"/><text x="74.5494%" y="479.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (71 samples, 5.68%)</title><rect x="75.6605%" y="453" width="5.6845%" height="15" fill="rgb(251,43,5)" fg:x="945" fg:w="71"/><text x="75.9105%" y="463.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="81.0248%" y="437" width="0.3203%" height="15" fill="rgb(250,128,24)" fg:x="1012" fg:w="4"/><text x="81.2748%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="81.1849%" y="421" width="0.1601%" height="15" fill="rgb(217,117,27)" fg:x="1014" fg:w="2"/><text x="81.4349%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="81.4251%" y="421" width="0.0801%" height="15" fill="rgb(245,147,4)" fg:x="1017" fg:w="1"/><text x="81.6751%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="81.3451%" y="469" width="0.2402%" height="15" fill="rgb(242,201,35)" fg:x="1016" fg:w="3"/><text x="81.5951%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="81.3451%" y="453" width="0.2402%" height="15" fill="rgb(218,181,1)" fg:x="1016" fg:w="3"/><text x="81.5951%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="81.4251%" y="437" width="0.1601%" height="15" fill="rgb(222,6,29)" fg:x="1017" fg:w="2"/><text x="81.6751%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="81.5052%" y="421" width="0.0801%" height="15" fill="rgb(208,186,3)" fg:x="1018" fg:w="1"/><text x="81.7552%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.5052%" y="405" width="0.0801%" height="15" fill="rgb(216,36,26)" fg:x="1018" fg:w="1"/><text x="81.7552%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.5052%" y="389" width="0.0801%" height="15" fill="rgb(248,201,23)" fg:x="1018" fg:w="1"/><text x="81.7552%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5052%" y="373" width="0.0801%" height="15" fill="rgb(251,170,31)" fg:x="1018" fg:w="1"/><text x="81.7552%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="81.6653%" y="437" width="0.0801%" height="15" fill="rgb(207,110,25)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="447.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="81.6653%" y="421" width="0.0801%" height="15" fill="rgb(250,54,15)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="431.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="81.6653%" y="405" width="0.0801%" height="15" fill="rgb(227,68,33)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="415.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="81.6653%" y="389" width="0.0801%" height="15" fill="rgb(238,34,41)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="399.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (94 samples, 7.53%)</title><rect x="74.2994%" y="517" width="7.5260%" height="15" fill="rgb(220,11,15)" fg:x="928" fg:w="94"/><text x="74.5494%" y="527.50">&lt;regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (94 samples, 7.53%)</title><rect x="74.2994%" y="501" width="7.5260%" height="15" fill="rgb(246,111,35)" fg:x="928" fg:w="94"/><text x="74.5494%" y="511.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (94 samples, 7.53%)</title><rect x="74.2994%" y="485" width="7.5260%" height="15" fill="rgb(209,88,53)" fg:x="928" fg:w="94"/><text x="74.5494%" y="495.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="81.5853%" y="469" width="0.2402%" height="15" fill="rgb(231,185,47)" fg:x="1019" fg:w="3"/><text x="81.8353%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="81.5853%" y="453" width="0.2402%" height="15" fill="rgb(233,154,1)" fg:x="1019" fg:w="3"/><text x="81.8353%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="81.7454%" y="437" width="0.0801%" height="15" fill="rgb(225,15,46)" fg:x="1021" fg:w="1"/><text x="81.9954%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="81.8255%" y="517" width="0.1601%" height="15" fill="rgb(211,135,41)" fg:x="1022" fg:w="2"/><text x="82.0755%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="81.8255%" y="501" width="0.1601%" height="15" fill="rgb(208,54,0)" fg:x="1022" fg:w="2"/><text x="82.0755%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="81.8255%" y="485" width="0.1601%" height="15" fill="rgb(244,136,14)" fg:x="1022" fg:w="2"/><text x="82.0755%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="81.8255%" y="469" width="0.1601%" height="15" fill="rgb(241,56,14)" fg:x="1022" fg:w="2"/><text x="82.0755%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.9055%" y="453" width="0.0801%" height="15" fill="rgb(205,80,24)" fg:x="1023" fg:w="1"/><text x="82.1555%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.9856%" y="453" width="0.0801%" height="15" fill="rgb(220,57,4)" fg:x="1024" fg:w="1"/><text x="82.2356%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="81.9856%" y="469" width="0.4003%" height="15" fill="rgb(226,193,50)" fg:x="1024" fg:w="5"/><text x="82.2356%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="82.0657%" y="453" width="0.3203%" height="15" fill="rgb(231,168,22)" fg:x="1025" fg:w="4"/><text x="82.3157%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="82.2258%" y="437" width="0.1601%" height="15" fill="rgb(254,215,14)" fg:x="1027" fg:w="2"/><text x="82.4758%" y="447.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (106 samples, 8.49%)</title><rect x="73.9792%" y="533" width="8.4868%" height="15" fill="rgb(211,115,16)" fg:x="924" fg:w="106"/><text x="74.2292%" y="543.50">indefinite::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="81.9856%" y="517" width="0.4804%" height="15" fill="rgb(236,210,16)" fg:x="1024" fg:w="6"/><text x="82.2356%" y="527.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="81.9856%" y="501" width="0.4804%" height="15" fill="rgb(221,94,12)" fg:x="1024" fg:w="6"/><text x="82.2356%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="81.9856%" y="485" width="0.4804%" height="15" fill="rgb(235,218,49)" fg:x="1024" fg:w="6"/><text x="82.2356%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="82.3859%" y="469" width="0.0801%" height="15" fill="rgb(217,114,14)" fg:x="1029" fg:w="1"/><text x="82.6359%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="82.5460%" y="437" width="0.0801%" height="15" fill="rgb(216,145,22)" fg:x="1031" fg:w="1"/><text x="82.7960%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="82.5460%" y="453" width="0.1601%" height="15" fill="rgb(217,112,39)" fg:x="1031" fg:w="2"/><text x="82.7960%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.6261%" y="437" width="0.0801%" height="15" fill="rgb(225,85,32)" fg:x="1032" fg:w="1"/><text x="82.8761%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="82.5460%" y="469" width="0.2402%" height="15" fill="rgb(245,209,47)" fg:x="1031" fg:w="3"/><text x="82.7960%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.7062%" y="453" width="0.0801%" height="15" fill="rgb(218,220,15)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="82.7862%" y="437" width="0.0801%" height="15" fill="rgb(222,202,31)" fg:x="1034" fg:w="1"/><text x="83.0362%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.7862%" y="421" width="0.0801%" height="15" fill="rgb(243,203,4)" fg:x="1034" fg:w="1"/><text x="83.0362%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.7862%" y="405" width="0.0801%" height="15" fill="rgb(237,92,17)" fg:x="1034" fg:w="1"/><text x="83.0362%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.7862%" y="389" width="0.0801%" height="15" fill="rgb(231,119,7)" fg:x="1034" fg:w="1"/><text x="83.0362%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="82.7862%" y="469" width="0.1601%" height="15" fill="rgb(237,82,41)" fg:x="1034" fg:w="2"/><text x="83.0362%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="82.7862%" y="453" width="0.1601%" height="15" fill="rgb(226,81,48)" fg:x="1034" fg:w="2"/><text x="83.0362%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="82.8663%" y="437" width="0.0801%" height="15" fill="rgb(234,70,51)" fg:x="1035" fg:w="1"/><text x="83.1163%" y="447.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.8663%" y="421" width="0.0801%" height="15" fill="rgb(251,86,4)" fg:x="1035" fg:w="1"/><text x="83.1163%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="82.8663%" y="405" width="0.0801%" height="15" fill="rgb(244,144,28)" fg:x="1035" fg:w="1"/><text x="83.1163%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.8663%" y="389" width="0.0801%" height="15" fill="rgb(232,161,39)" fg:x="1035" fg:w="1"/><text x="83.1163%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.8663%" y="373" width="0.0801%" height="15" fill="rgb(247,34,51)" fg:x="1035" fg:w="1"/><text x="83.1163%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.8663%" y="357" width="0.0801%" height="15" fill="rgb(225,132,2)" fg:x="1035" fg:w="1"/><text x="83.1163%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.0264%" y="453" width="0.0801%" height="15" fill="rgb(209,159,44)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.1065%" y="437" width="0.0801%" height="15" fill="rgb(251,214,1)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="83.1065%" y="453" width="0.4804%" height="15" fill="rgb(247,84,47)" fg:x="1038" fg:w="6"/><text x="83.3565%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="83.1865%" y="437" width="0.4003%" height="15" fill="rgb(240,111,43)" fg:x="1039" fg:w="5"/><text x="83.4365%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.5068%" y="421" width="0.0801%" height="15" fill="rgb(215,214,35)" fg:x="1043" fg:w="1"/><text x="83.7568%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="83.5869%" y="437" width="0.0801%" height="15" fill="rgb(248,207,23)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="83.5869%" y="421" width="0.0801%" height="15" fill="rgb(214,186,4)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.5869%" y="405" width="0.0801%" height="15" fill="rgb(220,133,22)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="83.5869%" y="453" width="0.4003%" height="15" fill="rgb(239,134,19)" fg:x="1044" fg:w="5"/><text x="83.8369%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="83.6669%" y="437" width="0.3203%" height="15" fill="rgb(250,140,9)" fg:x="1045" fg:w="4"/><text x="83.9169%" y="447.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="84.0673%" y="421" width="0.0801%" height="15" fill="rgb(225,59,14)" fg:x="1050" fg:w="1"/><text x="84.3173%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.0673%" y="405" width="0.0801%" height="15" fill="rgb(214,152,51)" fg:x="1050" fg:w="1"/><text x="84.3173%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.0673%" y="389" width="0.0801%" height="15" fill="rgb(251,227,43)" fg:x="1050" fg:w="1"/><text x="84.3173%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.0673%" y="373" width="0.0801%" height="15" fill="rgb(241,96,17)" fg:x="1050" fg:w="1"/><text x="84.3173%" y="383.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="84.1473%" y="421" width="0.2402%" height="15" fill="rgb(234,198,43)" fg:x="1051" fg:w="3"/><text x="84.3973%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="84.3074%" y="405" width="0.0801%" height="15" fill="rgb(220,108,29)" fg:x="1053" fg:w="1"/><text x="84.5574%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.3074%" y="389" width="0.0801%" height="15" fill="rgb(226,163,33)" fg:x="1053" fg:w="1"/><text x="84.5574%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.3074%" y="373" width="0.0801%" height="15" fill="rgb(205,194,45)" fg:x="1053" fg:w="1"/><text x="84.5574%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.3074%" y="357" width="0.0801%" height="15" fill="rgb(206,143,44)" fg:x="1053" fg:w="1"/><text x="84.5574%" y="367.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="84.4676%" y="405" width="0.2402%" height="15" fill="rgb(236,136,36)" fg:x="1055" fg:w="3"/><text x="84.7176%" y="415.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="84.4676%" y="389" width="0.2402%" height="15" fill="rgb(249,172,42)" fg:x="1055" fg:w="3"/><text x="84.7176%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (10 samples, 0.80%)</title><rect x="83.9872%" y="453" width="0.8006%" height="15" fill="rgb(216,139,23)" fg:x="1049" fg:w="10"/><text x="84.2372%" y="463.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (9 samples, 0.72%)</title><rect x="84.0673%" y="437" width="0.7206%" height="15" fill="rgb(207,166,20)" fg:x="1050" fg:w="9"/><text x="84.3173%" y="447.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="84.3875%" y="421" width="0.4003%" height="15" fill="rgb(210,209,22)" fg:x="1054" fg:w="5"/><text x="84.6375%" y="431.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="84.7078%" y="405" width="0.0801%" height="15" fill="rgb(232,118,20)" fg:x="1058" fg:w="1"/><text x="84.9578%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="84.7878%" y="389" width="0.1601%" height="15" fill="rgb(238,113,42)" fg:x="1059" fg:w="2"/><text x="85.0378%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="84.9480%" y="357" width="0.0801%" height="15" fill="rgb(231,42,5)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="367.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="85.6685%" y="341" width="0.0801%" height="15" fill="rgb(243,166,24)" fg:x="1070" fg:w="1"/><text x="85.9185%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="85.7486%" y="341" width="0.1601%" height="15" fill="rgb(237,226,12)" fg:x="1071" fg:w="2"/><text x="85.9986%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="85.9087%" y="341" width="0.3203%" height="15" fill="rgb(229,133,24)" fg:x="1073" fg:w="4"/><text x="86.1587%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="86.2290%" y="341" width="0.1601%" height="15" fill="rgb(238,33,43)" fg:x="1077" fg:w="2"/><text x="86.4790%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.3090%" y="325" width="0.0801%" height="15" fill="rgb(227,59,38)" fg:x="1078" fg:w="1"/><text x="86.5590%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.3090%" y="309" width="0.0801%" height="15" fill="rgb(230,97,0)" fg:x="1078" fg:w="1"/><text x="86.5590%" y="319.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="86.5492%" y="309" width="0.2402%" height="15" fill="rgb(250,173,50)" fg:x="1081" fg:w="3"/><text x="86.7992%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (12 samples, 0.96%)</title><rect x="86.3891%" y="341" width="0.9608%" height="15" fill="rgb(240,15,50)" fg:x="1079" fg:w="12"/><text x="86.6391%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (10 samples, 0.80%)</title><rect x="86.5492%" y="325" width="0.8006%" height="15" fill="rgb(221,93,22)" fg:x="1081" fg:w="10"/><text x="86.7992%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.56%)</title><rect x="86.7894%" y="309" width="0.5604%" height="15" fill="rgb(245,180,53)" fg:x="1084" fg:w="7"/><text x="87.0394%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="87.2698%" y="293" width="0.0801%" height="15" fill="rgb(231,88,51)" fg:x="1090" fg:w="1"/><text x="87.5198%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (45 samples, 3.60%)</title><rect x="87.3499%" y="341" width="3.6029%" height="15" fill="rgb(240,58,21)" fg:x="1091" fg:w="45"/><text x="87.5999%" y="351.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (45 samples, 3.60%)</title><rect x="87.3499%" y="325" width="3.6029%" height="15" fill="rgb(237,21,10)" fg:x="1091" fg:w="45"/><text x="87.5999%" y="335.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (45 samples, 3.60%)</title><rect x="87.3499%" y="309" width="3.6029%" height="15" fill="rgb(218,43,11)" fg:x="1091" fg:w="45"/><text x="87.5999%" y="319.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="90.9528%" y="341" width="0.1601%" height="15" fill="rgb(218,221,29)" fg:x="1136" fg:w="2"/><text x="91.2028%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.0328%" y="325" width="0.0801%" height="15" fill="rgb(214,118,42)" fg:x="1137" fg:w="1"/><text x="91.2828%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="91.3531%" y="293" width="0.1601%" height="15" fill="rgb(251,200,26)" fg:x="1141" fg:w="2"/><text x="91.6031%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 6.81%)</title><rect x="84.7878%" y="437" width="6.8054%" height="15" fill="rgb(237,101,39)" fg:x="1059" fg:w="85"/><text x="85.0378%" y="447.50">&lt;core::it..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (85 samples, 6.81%)</title><rect x="84.7878%" y="421" width="6.8054%" height="15" fill="rgb(251,117,11)" fg:x="1059" fg:w="85"/><text x="85.0378%" y="431.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (85 samples, 6.81%)</title><rect x="84.7878%" y="405" width="6.8054%" height="15" fill="rgb(216,223,23)" fg:x="1059" fg:w="85"/><text x="85.0378%" y="415.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (83 samples, 6.65%)</title><rect x="84.9480%" y="389" width="6.6453%" height="15" fill="rgb(251,54,12)" fg:x="1061" fg:w="83"/><text x="85.1980%" y="399.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (83 samples, 6.65%)</title><rect x="84.9480%" y="373" width="6.6453%" height="15" fill="rgb(254,176,54)" fg:x="1061" fg:w="83"/><text x="85.1980%" y="383.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (82 samples, 6.57%)</title><rect x="85.0280%" y="357" width="6.5653%" height="15" fill="rgb(210,32,8)" fg:x="1062" fg:w="82"/><text x="85.2780%" y="367.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.48%)</title><rect x="91.1129%" y="341" width="0.4804%" height="15" fill="rgb(235,52,38)" fg:x="1138" fg:w="6"/><text x="91.3629%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="91.1930%" y="325" width="0.4003%" height="15" fill="rgb(231,4,44)" fg:x="1139" fg:w="5"/><text x="91.4430%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="91.1930%" y="309" width="0.4003%" height="15" fill="rgb(249,2,32)" fg:x="1139" fg:w="5"/><text x="91.4430%" y="319.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="91.5132%" y="293" width="0.0801%" height="15" fill="rgb(224,65,26)" fg:x="1143" fg:w="1"/><text x="91.7632%" y="303.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="91.6733%" y="421" width="0.0801%" height="15" fill="rgb(250,73,40)" fg:x="1145" fg:w="1"/><text x="91.9233%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="91.7534%" y="421" width="0.0801%" height="15" fill="rgb(253,177,16)" fg:x="1146" fg:w="1"/><text x="92.0034%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="91.7534%" y="405" width="0.0801%" height="15" fill="rgb(217,32,34)" fg:x="1146" fg:w="1"/><text x="92.0034%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="91.8335%" y="421" width="0.1601%" height="15" fill="rgb(212,7,10)" fg:x="1147" fg:w="2"/><text x="92.0835%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="91.9936%" y="421" width="0.4003%" height="15" fill="rgb(245,89,8)" fg:x="1149" fg:w="5"/><text x="92.2436%" y="431.50"></text></g><g><title>regex_automata::meta::strategy::new (119 samples, 9.53%)</title><rect x="82.9464%" y="469" width="9.5276%" height="15" fill="rgb(237,16,53)" fg:x="1036" fg:w="119"/><text x="83.1964%" y="479.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (96 samples, 7.69%)</title><rect x="84.7878%" y="453" width="7.6861%" height="15" fill="rgb(250,204,30)" fg:x="1059" fg:w="96"/><text x="85.0378%" y="463.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="91.5933%" y="437" width="0.8807%" height="15" fill="rgb(208,77,27)" fg:x="1144" fg:w="11"/><text x="91.8433%" y="447.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="92.3939%" y="421" width="0.0801%" height="15" fill="rgb(250,204,28)" fg:x="1154" fg:w="1"/><text x="92.6439%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="92.5540%" y="437" width="0.1601%" height="15" fill="rgb(244,63,21)" fg:x="1156" fg:w="2"/><text x="92.8040%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="92.6341%" y="421" width="0.0801%" height="15" fill="rgb(236,85,44)" fg:x="1157" fg:w="1"/><text x="92.8841%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.6341%" y="405" width="0.0801%" height="15" fill="rgb(215,98,4)" fg:x="1157" fg:w="1"/><text x="92.8841%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.6341%" y="389" width="0.0801%" height="15" fill="rgb(235,38,11)" fg:x="1157" fg:w="1"/><text x="92.8841%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.6341%" y="373" width="0.0801%" height="15" fill="rgb(254,186,25)" fg:x="1157" fg:w="1"/><text x="92.8841%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="92.7142%" y="437" width="0.0801%" height="15" fill="rgb(225,55,31)" fg:x="1158" fg:w="1"/><text x="92.9642%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="92.4740%" y="469" width="0.4003%" height="15" fill="rgb(211,15,21)" fg:x="1155" fg:w="5"/><text x="92.7240%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="92.4740%" y="453" width="0.4003%" height="15" fill="rgb(215,187,41)" fg:x="1155" fg:w="5"/><text x="92.7240%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="92.7942%" y="437" width="0.0801%" height="15" fill="rgb(248,69,32)" fg:x="1159" fg:w="1"/><text x="93.0442%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="92.7942%" y="421" width="0.0801%" height="15" fill="rgb(252,102,52)" fg:x="1159" fg:w="1"/><text x="93.0442%" y="431.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="92.8743%" y="421" width="0.2402%" height="15" fill="rgb(253,140,32)" fg:x="1160" fg:w="3"/><text x="93.1243%" y="431.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="93.0344%" y="405" width="0.0801%" height="15" fill="rgb(216,56,42)" fg:x="1162" fg:w="1"/><text x="93.2844%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="92.8743%" y="437" width="0.4003%" height="15" fill="rgb(216,184,14)" fg:x="1160" fg:w="5"/><text x="93.1243%" y="447.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="93.1145%" y="421" width="0.1601%" height="15" fill="rgb(237,187,27)" fg:x="1163" fg:w="2"/><text x="93.3645%" y="431.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="93.1145%" y="405" width="0.1601%" height="15" fill="rgb(219,65,3)" fg:x="1163" fg:w="2"/><text x="93.3645%" y="415.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="93.1145%" y="389" width="0.1601%" height="15" fill="rgb(245,83,25)" fg:x="1163" fg:w="2"/><text x="93.3645%" y="399.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (137 samples, 10.97%)</title><rect x="82.4660%" y="517" width="10.9688%" height="15" fill="rgb(214,205,45)" fg:x="1030" fg:w="137"/><text x="82.7160%" y="527.50">&lt;regex::regex::s..</text></g><g><title>regex::builders::Builder::build_one_string (137 samples, 10.97%)</title><rect x="82.4660%" y="501" width="10.9688%" height="15" fill="rgb(241,20,18)" fg:x="1030" fg:w="137"/><text x="82.7160%" y="511.50">regex::builders:..</text></g><g><title>regex_automata::meta::regex::Builder::build (137 samples, 10.97%)</title><rect x="82.4660%" y="485" width="10.9688%" height="15" fill="rgb(232,163,23)" fg:x="1030" fg:w="137"/><text x="82.7160%" y="495.50">regex_automata::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="92.8743%" y="469" width="0.5604%" height="15" fill="rgb(214,5,46)" fg:x="1160" fg:w="7"/><text x="93.1243%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="92.8743%" y="453" width="0.5604%" height="15" fill="rgb(229,78,17)" fg:x="1160" fg:w="7"/><text x="93.1243%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="93.2746%" y="437" width="0.1601%" height="15" fill="rgb(248,89,10)" fg:x="1165" fg:w="2"/><text x="93.5246%" y="447.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="93.3547%" y="421" width="0.0801%" height="15" fill="rgb(248,54,15)" fg:x="1166" fg:w="1"/><text x="93.6047%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.4347%" y="469" width="0.0801%" height="15" fill="rgb(223,116,6)" fg:x="1167" fg:w="1"/><text x="93.6847%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="93.4347%" y="517" width="0.1601%" height="15" fill="rgb(205,125,38)" fg:x="1167" fg:w="2"/><text x="93.6847%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="93.4347%" y="501" width="0.1601%" height="15" fill="rgb(251,78,38)" fg:x="1167" fg:w="2"/><text x="93.6847%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="93.4347%" y="485" width="0.1601%" height="15" fill="rgb(253,78,28)" fg:x="1167" fg:w="2"/><text x="93.6847%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="93.5148%" y="469" width="0.0801%" height="15" fill="rgb(209,120,3)" fg:x="1168" fg:w="1"/><text x="93.7648%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.5148%" y="453" width="0.0801%" height="15" fill="rgb(238,229,9)" fg:x="1168" fg:w="1"/><text x="93.7648%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.8351%" y="421" width="0.0801%" height="15" fill="rgb(253,159,18)" fg:x="1172" fg:w="1"/><text x="94.0851%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.8351%" y="405" width="0.0801%" height="15" fill="rgb(244,42,34)" fg:x="1172" fg:w="1"/><text x="94.0851%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.8351%" y="389" width="0.0801%" height="15" fill="rgb(224,8,7)" fg:x="1172" fg:w="1"/><text x="94.0851%" y="399.50"></text></g><g><title>indefinite::rules::number::Number::check (144 samples, 11.53%)</title><rect x="82.4660%" y="533" width="11.5292%" height="15" fill="rgb(210,201,45)" fg:x="1030" fg:w="144"/><text x="82.7160%" y="543.50">indefinite::rules..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="93.5949%" y="517" width="0.4003%" height="15" fill="rgb(252,185,21)" fg:x="1169" fg:w="5"/><text x="93.8449%" y="527.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="93.5949%" y="501" width="0.4003%" height="15" fill="rgb(223,131,1)" fg:x="1169" fg:w="5"/><text x="93.8449%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="93.5949%" y="485" width="0.4003%" height="15" fill="rgb(245,141,16)" fg:x="1169" fg:w="5"/><text x="93.8449%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="93.5949%" y="469" width="0.4003%" height="15" fill="rgb(229,55,45)" fg:x="1169" fg:w="5"/><text x="93.8449%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="93.7550%" y="453" width="0.2402%" height="15" fill="rgb(208,92,15)" fg:x="1171" fg:w="3"/><text x="94.0050%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="93.7550%" y="437" width="0.2402%" height="15" fill="rgb(234,185,47)" fg:x="1171" fg:w="3"/><text x="94.0050%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="93.9151%" y="421" width="0.0801%" height="15" fill="rgb(253,104,50)" fg:x="1173" fg:w="1"/><text x="94.1651%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="94.0753%" y="453" width="0.0801%" height="15" fill="rgb(205,70,7)" fg:x="1175" fg:w="1"/><text x="94.3253%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="94.0753%" y="437" width="0.0801%" height="15" fill="rgb(240,178,43)" fg:x="1175" fg:w="1"/><text x="94.3253%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.0753%" y="421" width="0.0801%" height="15" fill="rgb(214,112,2)" fg:x="1175" fg:w="1"/><text x="94.3253%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="94.2354%" y="421" width="0.1601%" height="15" fill="rgb(206,46,17)" fg:x="1177" fg:w="2"/><text x="94.4854%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="94.2354%" y="437" width="0.2402%" height="15" fill="rgb(225,220,16)" fg:x="1177" fg:w="3"/><text x="94.4854%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="94.3955%" y="421" width="0.0801%" height="15" fill="rgb(238,65,40)" fg:x="1179" fg:w="1"/><text x="94.6455%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="94.4756%" y="421" width="0.1601%" height="15" fill="rgb(230,151,21)" fg:x="1180" fg:w="2"/><text x="94.7256%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="94.4756%" y="405" width="0.1601%" height="15" fill="rgb(218,58,49)" fg:x="1180" fg:w="2"/><text x="94.7256%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="94.4756%" y="389" width="0.1601%" height="15" fill="rgb(219,179,14)" fg:x="1180" fg:w="2"/><text x="94.7256%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.5556%" y="373" width="0.0801%" height="15" fill="rgb(223,72,1)" fg:x="1181" fg:w="1"/><text x="94.8056%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="94.6357%" y="405" width="0.0801%" height="15" fill="rgb(238,126,10)" fg:x="1182" fg:w="1"/><text x="94.8857%" y="415.50"></text></g><g><title>regex_automata::meta::strategy::new (8 samples, 0.64%)</title><rect x="94.1553%" y="453" width="0.6405%" height="15" fill="rgb(224,206,38)" fg:x="1176" fg:w="8"/><text x="94.4053%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="94.4756%" y="437" width="0.3203%" height="15" fill="rgb(212,201,54)" fg:x="1180" fg:w="4"/><text x="94.7256%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="94.6357%" y="421" width="0.1601%" height="15" fill="rgb(218,154,48)" fg:x="1182" fg:w="2"/><text x="94.8857%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="94.7158%" y="405" width="0.0801%" height="15" fill="rgb(232,93,24)" fg:x="1183" fg:w="1"/><text x="94.9658%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="94.9560%" y="405" width="0.0801%" height="15" fill="rgb(245,30,21)" fg:x="1186" fg:w="1"/><text x="95.2060%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="94.7958%" y="453" width="0.3203%" height="15" fill="rgb(242,148,29)" fg:x="1184" fg:w="4"/><text x="95.0458%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="94.9560%" y="437" width="0.1601%" height="15" fill="rgb(244,153,54)" fg:x="1186" fg:w="2"/><text x="95.2060%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="94.9560%" y="421" width="0.1601%" height="15" fill="rgb(252,87,22)" fg:x="1186" fg:w="2"/><text x="95.2060%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.0360%" y="405" width="0.0801%" height="15" fill="rgb(210,51,29)" fg:x="1187" fg:w="1"/><text x="95.2860%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1161%" y="405" width="0.0801%" height="15" fill="rgb(242,136,47)" fg:x="1188" fg:w="1"/><text x="95.3661%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1161%" y="389" width="0.0801%" height="15" fill="rgb(238,68,4)" fg:x="1188" fg:w="1"/><text x="95.3661%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.1161%" y="373" width="0.0801%" height="15" fill="rgb(242,161,30)" fg:x="1188" fg:w="1"/><text x="95.3661%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="95.1161%" y="421" width="0.1601%" height="15" fill="rgb(218,58,44)" fg:x="1188" fg:w="2"/><text x="95.3661%" y="431.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.1962%" y="405" width="0.0801%" height="15" fill="rgb(252,125,32)" fg:x="1189" fg:w="1"/><text x="95.4462%" y="415.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (17 samples, 1.36%)</title><rect x="93.9952%" y="501" width="1.3611%" height="15" fill="rgb(219,178,0)" fg:x="1174" fg:w="17"/><text x="94.2452%" y="511.50"></text></g><g><title>regex::builders::Builder::build_one_string (17 samples, 1.36%)</title><rect x="93.9952%" y="485" width="1.3611%" height="15" fill="rgb(213,152,7)" fg:x="1174" fg:w="17"/><text x="94.2452%" y="495.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (17 samples, 1.36%)</title><rect x="93.9952%" y="469" width="1.3611%" height="15" fill="rgb(249,109,34)" fg:x="1174" fg:w="17"/><text x="94.2452%" y="479.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.1161%" y="453" width="0.2402%" height="15" fill="rgb(232,96,21)" fg:x="1188" fg:w="3"/><text x="95.3661%" y="463.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.1161%" y="437" width="0.2402%" height="15" fill="rgb(228,27,39)" fg:x="1188" fg:w="3"/><text x="95.3661%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.2762%" y="421" width="0.0801%" height="15" fill="rgb(211,182,52)" fg:x="1190" fg:w="1"/><text x="95.5262%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.2762%" y="405" width="0.0801%" height="15" fill="rgb(234,178,38)" fg:x="1190" fg:w="1"/><text x="95.5262%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.3563%" y="501" width="0.0801%" height="15" fill="rgb(221,111,3)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.3563%" y="485" width="0.0801%" height="15" fill="rgb(228,175,21)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="95.3563%" y="469" width="0.0801%" height="15" fill="rgb(228,174,43)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.3563%" y="453" width="0.0801%" height="15" fill="rgb(211,191,0)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3563%" y="437" width="0.0801%" height="15" fill="rgb(253,117,3)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.3563%" y="421" width="0.0801%" height="15" fill="rgb(241,127,19)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.4363%" y="469" width="0.0801%" height="15" fill="rgb(218,103,12)" fg:x="1192" fg:w="1"/><text x="95.6863%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="95.5164%" y="453" width="0.0801%" height="15" fill="rgb(236,214,43)" fg:x="1193" fg:w="1"/><text x="95.7664%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.5164%" y="437" width="0.0801%" height="15" fill="rgb(244,144,19)" fg:x="1193" fg:w="1"/><text x="95.7664%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="95.4363%" y="501" width="0.2402%" height="15" fill="rgb(246,188,10)" fg:x="1192" fg:w="3"/><text x="95.6863%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="95.4363%" y="485" width="0.2402%" height="15" fill="rgb(212,193,33)" fg:x="1192" fg:w="3"/><text x="95.6863%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="95.5164%" y="469" width="0.1601%" height="15" fill="rgb(241,51,29)" fg:x="1193" fg:w="2"/><text x="95.7664%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="95.5965%" y="453" width="0.0801%" height="15" fill="rgb(211,58,19)" fg:x="1194" fg:w="1"/><text x="95.8465%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.5965%" y="437" width="0.0801%" height="15" fill="rgb(229,111,26)" fg:x="1194" fg:w="1"/><text x="95.8465%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="95.6765%" y="437" width="0.2402%" height="15" fill="rgb(213,115,40)" fg:x="1195" fg:w="3"/><text x="95.9265%" y="447.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (26 samples, 2.08%)</title><rect x="93.9952%" y="517" width="2.0817%" height="15" fill="rgb(209,56,44)" fg:x="1174" fg:w="26"/><text x="94.2452%" y="527.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="95.6765%" y="501" width="0.4003%" height="15" fill="rgb(230,108,32)" fg:x="1195" fg:w="5"/><text x="95.9265%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="95.6765%" y="485" width="0.4003%" height="15" fill="rgb(216,165,31)" fg:x="1195" fg:w="5"/><text x="95.9265%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="95.6765%" y="469" width="0.4003%" height="15" fill="rgb(218,122,21)" fg:x="1195" fg:w="5"/><text x="95.9265%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="95.6765%" y="453" width="0.4003%" height="15" fill="rgb(223,224,47)" fg:x="1195" fg:w="5"/><text x="95.9265%" y="463.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="95.9167%" y="437" width="0.1601%" height="15" fill="rgb(238,102,44)" fg:x="1198" fg:w="2"/><text x="96.1667%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.9968%" y="421" width="0.0801%" height="15" fill="rgb(236,46,40)" fg:x="1199" fg:w="1"/><text x="96.2468%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9968%" y="405" width="0.0801%" height="15" fill="rgb(247,202,50)" fg:x="1199" fg:w="1"/><text x="96.2468%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.9968%" y="389" width="0.0801%" height="15" fill="rgb(209,99,20)" fg:x="1199" fg:w="1"/><text x="96.2468%" y="399.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (287 samples, 22.98%)</title><rect x="73.1785%" y="613" width="22.9784%" height="15" fill="rgb(252,27,34)" fg:x="914" fg:w="287"/><text x="73.4285%" y="623.50">&lt;&amp;kernel::model::entry::Entry as plu..</text></g><g><title>plugins_core::looking::model::qualify_name (279 samples, 22.34%)</title><rect x="73.8191%" y="597" width="22.3379%" height="15" fill="rgb(215,206,23)" fg:x="922" fg:w="279"/><text x="74.0691%" y="607.50">plugins_core::looking::model::quali..</text></g><g><title>indefinite::indefinite (279 samples, 22.34%)</title><rect x="73.8191%" y="581" width="22.3379%" height="15" fill="rgb(212,135,36)" fg:x="922" fg:w="279"/><text x="74.0691%" y="591.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (279 samples, 22.34%)</title><rect x="73.8191%" y="565" width="22.3379%" height="15" fill="rgb(240,189,1)" fg:x="922" fg:w="279"/><text x="74.0691%" y="575.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (279 samples, 22.34%)</title><rect x="73.8191%" y="549" width="22.3379%" height="15" fill="rgb(242,56,20)" fg:x="922" fg:w="279"/><text x="74.0691%" y="559.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (27 samples, 2.16%)</title><rect x="93.9952%" y="533" width="2.1617%" height="15" fill="rgb(247,132,33)" fg:x="1174" fg:w="27"/><text x="94.2452%" y="543.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="96.0769%" y="517" width="0.0801%" height="15" fill="rgb(208,149,11)" fg:x="1200" fg:w="1"/><text x="96.3269%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="96.1569%" y="581" width="0.1601%" height="15" fill="rgb(211,33,11)" fg:x="1201" fg:w="2"/><text x="96.4069%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="96.1569%" y="565" width="0.1601%" height="15" fill="rgb(221,29,38)" fg:x="1201" fg:w="2"/><text x="96.4069%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.2370%" y="549" width="0.0801%" height="15" fill="rgb(206,182,49)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.2370%" y="533" width="0.0801%" height="15" fill="rgb(216,140,1)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.2370%" y="517" width="0.0801%" height="15" fill="rgb(232,57,40)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.2370%" y="501" width="0.0801%" height="15" fill="rgb(224,186,18)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.2370%" y="485" width="0.0801%" height="15" fill="rgb(215,121,11)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.2370%" y="469" width="0.0801%" height="15" fill="rgb(245,147,10)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.2370%" y="453" width="0.0801%" height="15" fill="rgb(238,153,13)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="96.2370%" y="437" width="0.0801%" height="15" fill="rgb(233,108,0)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="96.2370%" y="421" width="0.0801%" height="15" fill="rgb(212,157,17)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="431.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="96.3171%" y="581" width="0.0801%" height="15" fill="rgb(225,213,38)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.3171%" y="565" width="0.0801%" height="15" fill="rgb(248,16,11)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="96.3171%" y="549" width="0.0801%" height="15" fill="rgb(241,33,4)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="96.3171%" y="533" width="0.0801%" height="15" fill="rgb(222,26,43)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="96.3171%" y="517" width="0.0801%" height="15" fill="rgb(243,29,36)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="527.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="96.3171%" y="501" width="0.0801%" height="15" fill="rgb(241,9,27)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="96.3171%" y="485" width="0.0801%" height="15" fill="rgb(205,117,26)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="96.3171%" y="469" width="0.0801%" height="15" fill="rgb(209,80,39)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="479.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (292 samples, 23.38%)</title><rect x="73.1785%" y="645" width="23.3787%" height="15" fill="rgb(239,155,6)" fg:x="914" fg:w="292"/><text x="73.4285%" y="655.50">&lt;plugins_core::looking::actions::Look..</text></g><g><title>plugins_core::looking::model::new_area_observation (292 samples, 23.38%)</title><rect x="73.1785%" y="629" width="23.3787%" height="15" fill="rgb(212,104,12)" fg:x="914" fg:w="292"/><text x="73.4285%" y="639.50">plugins_core::looking::model::new_are..</text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="96.1569%" y="613" width="0.4003%" height="15" fill="rgb(234,204,3)" fg:x="1201" fg:w="5"/><text x="96.4069%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (5 samples, 0.40%)</title><rect x="96.1569%" y="597" width="0.4003%" height="15" fill="rgb(251,218,7)" fg:x="1201" fg:w="5"/><text x="96.4069%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="96.3971%" y="581" width="0.1601%" height="15" fill="rgb(221,81,32)" fg:x="1204" fg:w="2"/><text x="96.6471%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.3971%" y="565" width="0.1601%" height="15" fill="rgb(214,152,26)" fg:x="1204" fg:w="2"/><text x="96.6471%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="96.4772%" y="549" width="0.0801%" height="15" fill="rgb(223,22,3)" fg:x="1205" fg:w="1"/><text x="96.7272%" y="559.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="96.4772%" y="533" width="0.0801%" height="15" fill="rgb(207,174,7)" fg:x="1205" fg:w="1"/><text x="96.7272%" y="543.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="96.4772%" y="517" width="0.0801%" height="15" fill="rgb(224,19,52)" fg:x="1205" fg:w="1"/><text x="96.7272%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.4772%" y="501" width="0.0801%" height="15" fill="rgb(228,24,14)" fg:x="1205" fg:w="1"/><text x="96.7272%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.4772%" y="485" width="0.0801%" height="15" fill="rgb(230,153,43)" fg:x="1205" fg:w="1"/><text x="96.7272%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="96.5572%" y="613" width="0.0801%" height="15" fill="rgb(231,106,12)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="96.5572%" y="597" width="0.0801%" height="15" fill="rgb(215,92,2)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="96.5572%" y="581" width="0.0801%" height="15" fill="rgb(249,143,25)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="96.5572%" y="565" width="0.0801%" height="15" fill="rgb(252,7,35)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="96.5572%" y="549" width="0.0801%" height="15" fill="rgb(216,69,40)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="96.5572%" y="533" width="0.0801%" height="15" fill="rgb(240,36,33)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="96.5572%" y="517" width="0.0801%" height="15" fill="rgb(231,128,14)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="96.5572%" y="501" width="0.0801%" height="15" fill="rgb(245,143,14)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="96.5572%" y="485" width="0.0801%" height="15" fill="rgb(222,130,28)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="96.5572%" y="469" width="0.0801%" height="15" fill="rgb(212,10,48)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="96.6373%" y="421" width="0.0801%" height="15" fill="rgb(254,118,45)" fg:x="1207" fg:w="1"/><text x="96.8873%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="96.6373%" y="517" width="0.1601%" height="15" fill="rgb(228,6,45)" fg:x="1207" fg:w="2"/><text x="96.8873%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="96.6373%" y="501" width="0.1601%" height="15" fill="rgb(241,18,35)" fg:x="1207" fg:w="2"/><text x="96.8873%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="96.6373%" y="485" width="0.1601%" height="15" fill="rgb(227,214,53)" fg:x="1207" fg:w="2"/><text x="96.8873%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.6373%" y="469" width="0.1601%" height="15" fill="rgb(224,107,51)" fg:x="1207" fg:w="2"/><text x="96.8873%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="96.6373%" y="453" width="0.1601%" height="15" fill="rgb(248,60,28)" fg:x="1207" fg:w="2"/><text x="96.8873%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.6373%" y="437" width="0.1601%" height="15" fill="rgb(249,101,23)" fg:x="1207" fg:w="2"/><text x="96.8873%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7174%" y="421" width="0.0801%" height="15" fill="rgb(228,51,19)" fg:x="1208" fg:w="1"/><text x="96.9674%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.7174%" y="405" width="0.0801%" height="15" fill="rgb(213,20,6)" fg:x="1208" fg:w="1"/><text x="96.9674%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.7174%" y="389" width="0.0801%" height="15" fill="rgb(212,124,10)" fg:x="1208" fg:w="1"/><text x="96.9674%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.7174%" y="373" width="0.0801%" height="15" fill="rgb(248,3,40)" fg:x="1208" fg:w="1"/><text x="96.9674%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.7174%" y="357" width="0.0801%" height="15" fill="rgb(223,178,23)" fg:x="1208" fg:w="1"/><text x="96.9674%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="96.7174%" y="341" width="0.0801%" height="15" fill="rgb(240,132,45)" fg:x="1208" fg:w="1"/><text x="96.9674%" y="351.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (4 samples, 0.32%)</title><rect x="96.5572%" y="645" width="0.3203%" height="15" fill="rgb(245,164,36)" fg:x="1206" fg:w="4"/><text x="96.8072%" y="655.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="96.5572%" y="629" width="0.3203%" height="15" fill="rgb(231,188,53)" fg:x="1206" fg:w="4"/><text x="96.8072%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="96.6373%" y="613" width="0.2402%" height="15" fill="rgb(237,198,39)" fg:x="1207" fg:w="3"/><text x="96.8873%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="96.6373%" y="597" width="0.2402%" height="15" fill="rgb(223,120,35)" fg:x="1207" fg:w="3"/><text x="96.8873%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="96.6373%" y="581" width="0.2402%" height="15" fill="rgb(253,107,49)" fg:x="1207" fg:w="3"/><text x="96.8873%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="96.6373%" y="565" width="0.2402%" height="15" fill="rgb(216,44,31)" fg:x="1207" fg:w="3"/><text x="96.8873%" y="575.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="96.6373%" y="549" width="0.2402%" height="15" fill="rgb(253,87,21)" fg:x="1207" fg:w="3"/><text x="96.8873%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="96.6373%" y="533" width="0.2402%" height="15" fill="rgb(226,18,2)" fg:x="1207" fg:w="3"/><text x="96.8873%" y="543.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="96.7974%" y="517" width="0.0801%" height="15" fill="rgb(216,8,46)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7974%" y="501" width="0.0801%" height="15" fill="rgb(226,140,39)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.7974%" y="485" width="0.0801%" height="15" fill="rgb(221,194,54)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7974%" y="469" width="0.0801%" height="15" fill="rgb(213,92,11)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.7974%" y="453" width="0.0801%" height="15" fill="rgb(229,162,46)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7974%" y="437" width="0.0801%" height="15" fill="rgb(214,111,36)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.7974%" y="421" width="0.0801%" height="15" fill="rgb(207,6,21)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7974%" y="405" width="0.0801%" height="15" fill="rgb(213,127,38)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.7974%" y="389" width="0.0801%" height="15" fill="rgb(238,118,32)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7974%" y="373" width="0.0801%" height="15" fill="rgb(240,139,39)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.7974%" y="357" width="0.0801%" height="15" fill="rgb(235,10,37)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="96.7974%" y="341" width="0.0801%" height="15" fill="rgb(249,171,38)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="96.7974%" y="325" width="0.0801%" height="15" fill="rgb(242,144,32)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8775%" y="501" width="0.0801%" height="15" fill="rgb(217,117,21)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.8775%" y="581" width="0.1601%" height="15" fill="rgb(249,87,1)" fg:x="1210" fg:w="2"/><text x="97.1275%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.8775%" y="565" width="0.1601%" height="15" fill="rgb(248,196,48)" fg:x="1210" fg:w="2"/><text x="97.1275%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.8775%" y="549" width="0.1601%" height="15" fill="rgb(251,206,33)" fg:x="1210" fg:w="2"/><text x="97.1275%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.8775%" y="533" width="0.1601%" height="15" fill="rgb(232,141,28)" fg:x="1210" fg:w="2"/><text x="97.1275%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.8775%" y="517" width="0.1601%" height="15" fill="rgb(209,167,14)" fg:x="1210" fg:w="2"/><text x="97.1275%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="96.9576%" y="501" width="0.0801%" height="15" fill="rgb(225,11,50)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (3 samples, 0.24%)</title><rect x="96.8775%" y="613" width="0.2402%" height="15" fill="rgb(209,50,20)" fg:x="1210" fg:w="3"/><text x="97.1275%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="96.8775%" y="597" width="0.2402%" height="15" fill="rgb(212,17,46)" fg:x="1210" fg:w="3"/><text x="97.1275%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.0376%" y="581" width="0.0801%" height="15" fill="rgb(216,101,39)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="97.1177%" y="565" width="0.0801%" height="15" fill="rgb(212,228,48)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="97.1177%" y="581" width="0.1601%" height="15" fill="rgb(250,6,50)" fg:x="1213" fg:w="2"/><text x="97.3677%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1978%" y="565" width="0.0801%" height="15" fill="rgb(250,160,48)" fg:x="1214" fg:w="1"/><text x="97.4478%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="97.2778%" y="581" width="0.0801%" height="15" fill="rgb(244,216,33)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="97.2778%" y="565" width="0.0801%" height="15" fill="rgb(207,157,5)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.2778%" y="549" width="0.0801%" height="15" fill="rgb(228,199,8)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.3579%" y="517" width="0.0801%" height="15" fill="rgb(227,80,20)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="97.3579%" y="501" width="0.0801%" height="15" fill="rgb(222,9,33)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="97.3579%" y="485" width="0.0801%" height="15" fill="rgb(239,44,28)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="97.3579%" y="469" width="0.0801%" height="15" fill="rgb(249,187,43)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="97.3579%" y="453" width="0.0801%" height="15" fill="rgb(216,141,28)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.3579%" y="437" width="0.0801%" height="15" fill="rgb(230,154,53)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.3579%" y="421" width="0.0801%" height="15" fill="rgb(227,82,4)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.3579%" y="405" width="0.0801%" height="15" fill="rgb(220,107,16)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.3579%" y="389" width="0.0801%" height="15" fill="rgb(207,187,2)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.3579%" y="373" width="0.0801%" height="15" fill="rgb(210,162,52)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.3579%" y="357" width="0.0801%" height="15" fill="rgb(217,216,49)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.3579%" y="341" width="0.0801%" height="15" fill="rgb(218,146,49)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.3579%" y="325" width="0.0801%" height="15" fill="rgb(216,55,40)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.3579%" y="309" width="0.0801%" height="15" fill="rgb(208,196,21)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.3579%" y="293" width="0.0801%" height="15" fill="rgb(242,117,42)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.3579%" y="277" width="0.0801%" height="15" fill="rgb(210,11,23)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3579%" y="261" width="0.0801%" height="15" fill="rgb(217,110,2)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="97.4380%" y="405" width="0.0801%" height="15" fill="rgb(229,77,54)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="415.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="97.4380%" y="389" width="0.0801%" height="15" fill="rgb(218,53,16)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.4380%" y="373" width="0.0801%" height="15" fill="rgb(215,38,13)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.4380%" y="357" width="0.0801%" height="15" fill="rgb(235,42,18)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4380%" y="341" width="0.0801%" height="15" fill="rgb(219,66,54)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.4380%" y="325" width="0.0801%" height="15" fill="rgb(222,205,4)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4380%" y="309" width="0.0801%" height="15" fill="rgb(227,213,46)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="319.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.4380%" y="293" width="0.0801%" height="15" fill="rgb(250,145,42)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4380%" y="277" width="0.0801%" height="15" fill="rgb(219,15,2)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.4380%" y="261" width="0.0801%" height="15" fill="rgb(231,181,52)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4380%" y="245" width="0.0801%" height="15" fill="rgb(235,1,42)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.4380%" y="229" width="0.0801%" height="15" fill="rgb(249,88,27)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="97.4380%" y="453" width="0.1601%" height="15" fill="rgb(235,145,16)" fg:x="1217" fg:w="2"/><text x="97.6880%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="97.4380%" y="437" width="0.1601%" height="15" fill="rgb(237,114,19)" fg:x="1217" fg:w="2"/><text x="97.6880%" y="447.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="97.4380%" y="421" width="0.1601%" height="15" fill="rgb(238,51,50)" fg:x="1217" fg:w="2"/><text x="97.6880%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="97.5180%" y="405" width="0.0801%" height="15" fill="rgb(205,194,25)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="97.5180%" y="389" width="0.0801%" height="15" fill="rgb(215,203,17)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="97.5180%" y="373" width="0.0801%" height="15" fill="rgb(233,112,49)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.5180%" y="357" width="0.0801%" height="15" fill="rgb(241,130,26)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5180%" y="341" width="0.0801%" height="15" fill="rgb(252,223,19)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="351.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="97.4380%" y="517" width="0.2402%" height="15" fill="rgb(211,95,25)" fg:x="1217" fg:w="3"/><text x="97.6880%" y="527.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (3 samples, 0.24%)</title><rect x="97.4380%" y="501" width="0.2402%" height="15" fill="rgb(251,182,27)" fg:x="1217" fg:w="3"/><text x="97.6880%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (3 samples, 0.24%)</title><rect x="97.4380%" y="485" width="0.2402%" height="15" fill="rgb(238,24,4)" fg:x="1217" fg:w="3"/><text x="97.6880%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="97.4380%" y="469" width="0.2402%" height="15" fill="rgb(224,220,25)" fg:x="1217" fg:w="3"/><text x="97.6880%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5981%" y="453" width="0.0801%" height="15" fill="rgb(239,133,26)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5981%" y="437" width="0.0801%" height="15" fill="rgb(211,94,48)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5981%" y="421" width="0.0801%" height="15" fill="rgb(239,87,6)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5981%" y="405" width="0.0801%" height="15" fill="rgb(227,62,0)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5981%" y="389" width="0.0801%" height="15" fill="rgb(211,226,4)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.5981%" y="373" width="0.0801%" height="15" fill="rgb(253,38,52)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.5981%" y="357" width="0.0801%" height="15" fill="rgb(229,126,40)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.5981%" y="341" width="0.0801%" height="15" fill="rgb(229,165,44)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.5981%" y="325" width="0.0801%" height="15" fill="rgb(247,95,47)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.5981%" y="309" width="0.0801%" height="15" fill="rgb(216,140,30)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.5981%" y="293" width="0.0801%" height="15" fill="rgb(246,214,8)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.5981%" y="277" width="0.0801%" height="15" fill="rgb(227,224,15)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.5981%" y="261" width="0.0801%" height="15" fill="rgb(233,175,4)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.5981%" y="245" width="0.0801%" height="15" fill="rgb(221,66,45)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5981%" y="229" width="0.0801%" height="15" fill="rgb(221,178,18)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="239.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (5 samples, 0.40%)</title><rect x="97.3579%" y="533" width="0.4003%" height="15" fill="rgb(213,81,29)" fg:x="1216" fg:w="5"/><text x="97.6079%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.6781%" y="517" width="0.0801%" height="15" fill="rgb(220,89,49)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.6781%" y="501" width="0.0801%" height="15" fill="rgb(227,60,33)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6781%" y="485" width="0.0801%" height="15" fill="rgb(205,113,12)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6781%" y="469" width="0.0801%" height="15" fill="rgb(211,32,1)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.6781%" y="453" width="0.0801%" height="15" fill="rgb(246,2,12)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.6781%" y="437" width="0.0801%" height="15" fill="rgb(243,37,27)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.6781%" y="421" width="0.0801%" height="15" fill="rgb(248,211,31)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6781%" y="405" width="0.0801%" height="15" fill="rgb(242,146,47)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6781%" y="389" width="0.0801%" height="15" fill="rgb(206,70,20)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="97.7582%" y="485" width="0.1601%" height="15" fill="rgb(215,10,51)" fg:x="1221" fg:w="2"/><text x="98.0082%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.7582%" y="469" width="0.1601%" height="15" fill="rgb(243,178,53)" fg:x="1221" fg:w="2"/><text x="98.0082%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8383%" y="453" width="0.0801%" height="15" fill="rgb(233,221,20)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8383%" y="437" width="0.0801%" height="15" fill="rgb(218,95,35)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.8383%" y="421" width="0.0801%" height="15" fill="rgb(229,13,5)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.8383%" y="405" width="0.0801%" height="15" fill="rgb(252,164,30)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.8383%" y="389" width="0.0801%" height="15" fill="rgb(232,68,36)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8383%" y="373" width="0.0801%" height="15" fill="rgb(219,59,54)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8383%" y="357" width="0.0801%" height="15" fill="rgb(250,92,33)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.8383%" y="341" width="0.0801%" height="15" fill="rgb(229,162,54)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.8383%" y="325" width="0.0801%" height="15" fill="rgb(244,114,52)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.8383%" y="309" width="0.0801%" height="15" fill="rgb(212,211,43)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.8383%" y="293" width="0.0801%" height="15" fill="rgb(226,147,8)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8383%" y="277" width="0.0801%" height="15" fill="rgb(226,23,13)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="97.9183%" y="389" width="0.0801%" height="15" fill="rgb(240,63,4)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="399.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="97.9183%" y="373" width="0.0801%" height="15" fill="rgb(221,1,32)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.9183%" y="357" width="0.0801%" height="15" fill="rgb(242,117,10)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9183%" y="341" width="0.0801%" height="15" fill="rgb(249,172,44)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.9183%" y="325" width="0.0801%" height="15" fill="rgb(244,46,45)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.9183%" y="309" width="0.0801%" height="15" fill="rgb(206,43,17)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.9183%" y="293" width="0.0801%" height="15" fill="rgb(239,218,39)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9984%" y="229" width="0.0801%" height="15" fill="rgb(208,169,54)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9984%" y="213" width="0.0801%" height="15" fill="rgb(247,25,42)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.9984%" y="197" width="0.0801%" height="15" fill="rgb(226,23,31)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.9984%" y="181" width="0.0801%" height="15" fill="rgb(247,16,28)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.9984%" y="261" width="0.1601%" height="15" fill="rgb(231,147,38)" fg:x="1224" fg:w="2"/><text x="98.2484%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.9984%" y="245" width="0.1601%" height="15" fill="rgb(253,81,48)" fg:x="1224" fg:w="2"/><text x="98.2484%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="98.0785%" y="229" width="0.0801%" height="15" fill="rgb(249,222,43)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0785%" y="213" width="0.0801%" height="15" fill="rgb(221,3,27)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.1585%" y="261" width="0.0801%" height="15" fill="rgb(228,180,5)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.1585%" y="245" width="0.0801%" height="15" fill="rgb(227,131,42)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.1585%" y="229" width="0.0801%" height="15" fill="rgb(212,3,39)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.1585%" y="213" width="0.0801%" height="15" fill="rgb(226,45,5)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="223.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (4 samples, 0.32%)</title><rect x="97.9984%" y="373" width="0.3203%" height="15" fill="rgb(215,167,45)" fg:x="1224" fg:w="4"/><text x="98.2484%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (4 samples, 0.32%)</title><rect x="97.9984%" y="357" width="0.3203%" height="15" fill="rgb(250,218,53)" fg:x="1224" fg:w="4"/><text x="98.2484%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="97.9984%" y="341" width="0.3203%" height="15" fill="rgb(207,140,0)" fg:x="1224" fg:w="4"/><text x="98.2484%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="97.9984%" y="325" width="0.3203%" height="15" fill="rgb(238,133,51)" fg:x="1224" fg:w="4"/><text x="98.2484%" y="335.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (4 samples, 0.32%)</title><rect x="97.9984%" y="309" width="0.3203%" height="15" fill="rgb(218,203,53)" fg:x="1224" fg:w="4"/><text x="98.2484%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="97.9984%" y="293" width="0.3203%" height="15" fill="rgb(226,184,25)" fg:x="1224" fg:w="4"/><text x="98.2484%" y="303.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="97.9984%" y="277" width="0.3203%" height="15" fill="rgb(231,121,21)" fg:x="1224" fg:w="4"/><text x="98.2484%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2386%" y="261" width="0.0801%" height="15" fill="rgb(251,14,34)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2386%" y="245" width="0.0801%" height="15" fill="rgb(249,193,11)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.2386%" y="229" width="0.0801%" height="15" fill="rgb(220,172,37)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2386%" y="213" width="0.0801%" height="15" fill="rgb(231,229,43)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2386%" y="197" width="0.0801%" height="15" fill="rgb(250,161,5)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.2386%" y="181" width="0.0801%" height="15" fill="rgb(218,225,18)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2386%" y="165" width="0.0801%" height="15" fill="rgb(245,45,42)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2386%" y="149" width="0.0801%" height="15" fill="rgb(211,115,1)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.2386%" y="133" width="0.0801%" height="15" fill="rgb(248,133,52)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2386%" y="117" width="0.0801%" height="15" fill="rgb(238,100,21)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2386%" y="101" width="0.0801%" height="15" fill="rgb(247,144,11)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.2386%" y="85" width="0.0801%" height="15" fill="rgb(206,164,16)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="95.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2386%" y="69" width="0.0801%" height="15" fill="rgb(222,34,3)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="79.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2386%" y="53" width="0.0801%" height="15" fill="rgb(248,82,4)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="63.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.2386%" y="37" width="0.0801%" height="15" fill="rgb(228,81,46)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="47.50"></text></g><g><title>plugins_core::tools::get_contained_keys (8 samples, 0.64%)</title><rect x="97.7582%" y="533" width="0.6405%" height="15" fill="rgb(227,67,47)" fg:x="1221" fg:w="8"/><text x="98.0082%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (8 samples, 0.64%)</title><rect x="97.7582%" y="517" width="0.6405%" height="15" fill="rgb(215,93,53)" fg:x="1221" fg:w="8"/><text x="98.0082%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (8 samples, 0.64%)</title><rect x="97.7582%" y="501" width="0.6405%" height="15" fill="rgb(248,194,39)" fg:x="1221" fg:w="8"/><text x="98.0082%" y="511.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (6 samples, 0.48%)</title><rect x="97.9183%" y="485" width="0.4804%" height="15" fill="rgb(215,5,19)" fg:x="1223" fg:w="6"/><text x="98.1683%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="97.9183%" y="469" width="0.4804%" height="15" fill="rgb(226,215,51)" fg:x="1223" fg:w="6"/><text x="98.1683%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 0.48%)</title><rect x="97.9183%" y="453" width="0.4804%" height="15" fill="rgb(225,56,26)" fg:x="1223" fg:w="6"/><text x="98.1683%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (6 samples, 0.48%)</title><rect x="97.9183%" y="437" width="0.4804%" height="15" fill="rgb(222,75,29)" fg:x="1223" fg:w="6"/><text x="98.1683%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="97.9183%" y="421" width="0.4804%" height="15" fill="rgb(236,139,6)" fg:x="1223" fg:w="6"/><text x="98.1683%" y="431.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="97.9183%" y="405" width="0.4804%" height="15" fill="rgb(223,137,36)" fg:x="1223" fg:w="6"/><text x="98.1683%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="97.9984%" y="389" width="0.4003%" height="15" fill="rgb(226,99,2)" fg:x="1224" fg:w="5"/><text x="98.2484%" y="399.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.3187%" y="373" width="0.0801%" height="15" fill="rgb(206,133,23)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3187%" y="357" width="0.0801%" height="15" fill="rgb(243,173,15)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3187%" y="341" width="0.0801%" height="15" fill="rgb(228,69,28)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3187%" y="325" width="0.0801%" height="15" fill="rgb(212,51,22)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3187%" y="309" width="0.0801%" height="15" fill="rgb(227,113,0)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3187%" y="293" width="0.0801%" height="15" fill="rgb(252,84,27)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3187%" y="277" width="0.0801%" height="15" fill="rgb(223,145,39)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="98.3987%" y="517" width="0.0801%" height="15" fill="rgb(239,219,30)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="98.3987%" y="501" width="0.0801%" height="15" fill="rgb(224,196,39)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3987%" y="485" width="0.0801%" height="15" fill="rgb(205,35,43)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="97.3579%" y="565" width="1.2010%" height="15" fill="rgb(228,201,21)" fg:x="1216" fg:w="15"/><text x="97.6079%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 1.20%)</title><rect x="97.3579%" y="549" width="1.2010%" height="15" fill="rgb(237,118,16)" fg:x="1216" fg:w="15"/><text x="97.6079%" y="559.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="98.3987%" y="533" width="0.1601%" height="15" fill="rgb(241,17,19)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="98.4788%" y="517" width="0.0801%" height="15" fill="rgb(214,10,25)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="98.4788%" y="501" width="0.0801%" height="15" fill="rgb(238,37,29)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="98.5588%" y="517" width="0.0801%" height="15" fill="rgb(253,83,25)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="98.5588%" y="501" width="0.0801%" height="15" fill="rgb(234,192,12)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="511.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="98.5588%" y="485" width="0.0801%" height="15" fill="rgb(241,216,45)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.5588%" y="469" width="0.0801%" height="15" fill="rgb(242,22,33)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.5588%" y="453" width="0.0801%" height="15" fill="rgb(231,105,49)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="463.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.7190%" y="357" width="0.0801%" height="15" fill="rgb(218,204,15)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7190%" y="341" width="0.0801%" height="15" fill="rgb(235,138,41)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.7190%" y="325" width="0.0801%" height="15" fill="rgb(246,0,9)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.7190%" y="309" width="0.0801%" height="15" fill="rgb(210,74,4)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7190%" y="293" width="0.0801%" height="15" fill="rgb(250,60,41)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.7190%" y="277" width="0.0801%" height="15" fill="rgb(220,115,12)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.7190%" y="261" width="0.0801%" height="15" fill="rgb(237,100,13)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7190%" y="245" width="0.0801%" height="15" fill="rgb(213,55,26)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.7190%" y="229" width="0.0801%" height="15" fill="rgb(216,17,4)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.7190%" y="213" width="0.0801%" height="15" fill="rgb(220,153,47)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7190%" y="197" width="0.0801%" height="15" fill="rgb(215,131,9)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.7190%" y="181" width="0.0801%" height="15" fill="rgb(233,46,42)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="191.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.7190%" y="405" width="0.1601%" height="15" fill="rgb(226,86,7)" fg:x="1233" fg:w="2"/><text x="98.9690%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.7190%" y="389" width="0.1601%" height="15" fill="rgb(239,226,21)" fg:x="1233" fg:w="2"/><text x="98.9690%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="98.7190%" y="373" width="0.1601%" height="15" fill="rgb(244,137,22)" fg:x="1233" fg:w="2"/><text x="98.9690%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7990%" y="357" width="0.0801%" height="15" fill="rgb(211,139,35)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.7990%" y="341" width="0.0801%" height="15" fill="rgb(214,62,50)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.7190%" y="469" width="0.2402%" height="15" fill="rgb(212,113,44)" fg:x="1233" fg:w="3"/><text x="98.9690%" y="479.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="98.7190%" y="453" width="0.2402%" height="15" fill="rgb(226,150,43)" fg:x="1233" fg:w="3"/><text x="98.9690%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.7190%" y="437" width="0.2402%" height="15" fill="rgb(250,71,37)" fg:x="1233" fg:w="3"/><text x="98.9690%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.7190%" y="421" width="0.2402%" height="15" fill="rgb(219,76,19)" fg:x="1233" fg:w="3"/><text x="98.9690%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.8791%" y="405" width="0.0801%" height="15" fill="rgb(250,39,11)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.8791%" y="389" width="0.0801%" height="15" fill="rgb(230,64,31)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="399.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.40%)</title><rect x="98.6389%" y="501" width="0.4003%" height="15" fill="rgb(208,222,23)" fg:x="1232" fg:w="5"/><text x="98.8889%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="98.6389%" y="485" width="0.4003%" height="15" fill="rgb(227,125,18)" fg:x="1232" fg:w="5"/><text x="98.8889%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.9592%" y="469" width="0.0801%" height="15" fill="rgb(234,210,9)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9592%" y="453" width="0.0801%" height="15" fill="rgb(217,127,24)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="99.1193%" y="405" width="0.0801%" height="15" fill="rgb(239,141,48)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.1193%" y="389" width="0.0801%" height="15" fill="rgb(227,109,8)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1193%" y="373" width="0.0801%" height="15" fill="rgb(235,184,23)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.1994%" y="325" width="0.0801%" height="15" fill="rgb(227,226,48)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.1994%" y="309" width="0.0801%" height="15" fill="rgb(206,150,11)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1994%" y="293" width="0.0801%" height="15" fill="rgb(254,2,33)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="99.0392%" y="421" width="0.3203%" height="15" fill="rgb(243,160,20)" fg:x="1237" fg:w="4"/><text x="99.2892%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="99.1994%" y="405" width="0.1601%" height="15" fill="rgb(218,208,30)" fg:x="1239" fg:w="2"/><text x="99.4494%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="99.1994%" y="389" width="0.1601%" height="15" fill="rgb(224,120,49)" fg:x="1239" fg:w="2"/><text x="99.4494%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="99.1994%" y="373" width="0.1601%" height="15" fill="rgb(246,12,2)" fg:x="1239" fg:w="2"/><text x="99.4494%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="99.1994%" y="357" width="0.1601%" height="15" fill="rgb(236,117,3)" fg:x="1239" fg:w="2"/><text x="99.4494%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="99.1994%" y="341" width="0.1601%" height="15" fill="rgb(216,128,52)" fg:x="1239" fg:w="2"/><text x="99.4494%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2794%" y="325" width="0.0801%" height="15" fill="rgb(246,145,19)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="335.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (330 samples, 26.42%)</title><rect x="73.0985%" y="661" width="26.4211%" height="15" fill="rgb(222,11,46)" fg:x="913" fg:w="330"/><text x="73.3485%" y="671.50">&lt;engine::perform::StandardPerformer as ker..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (33 samples, 2.64%)</title><rect x="96.8775%" y="645" width="2.6421%" height="15" fill="rgb(245,82,36)" fg:x="1210" fg:w="33"/><text x="97.1275%" y="655.50">ke..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (33 samples, 2.64%)</title><rect x="96.8775%" y="629" width="2.6421%" height="15" fill="rgb(250,73,51)" fg:x="1210" fg:w="33"/><text x="97.1275%" y="639.50">&lt;p..</text></g><g><title>plugins_rpc::querying::have_surroundings (30 samples, 2.40%)</title><rect x="97.1177%" y="613" width="2.4019%" height="15" fill="rgb(221,189,23)" fg:x="1213" fg:w="30"/><text x="97.3677%" y="623.50">pl..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (30 samples, 2.40%)</title><rect x="97.1177%" y="597" width="2.4019%" height="15" fill="rgb(210,33,7)" fg:x="1213" fg:w="30"/><text x="97.3677%" y="607.50">&lt;p..</text></g><g><title>core::iter::adapters::try_process (27 samples, 2.16%)</title><rect x="97.3579%" y="581" width="2.1617%" height="15" fill="rgb(210,107,22)" fg:x="1216" fg:w="27"/><text x="97.6079%" y="591.50">c..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (12 samples, 0.96%)</title><rect x="98.5588%" y="565" width="0.9608%" height="15" fill="rgb(222,116,37)" fg:x="1231" fg:w="12"/><text x="98.8088%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.96%)</title><rect x="98.5588%" y="549" width="0.9608%" height="15" fill="rgb(254,17,48)" fg:x="1231" fg:w="12"/><text x="98.8088%" y="559.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (12 samples, 0.96%)</title><rect x="98.5588%" y="533" width="0.9608%" height="15" fill="rgb(224,36,32)" fg:x="1231" fg:w="12"/><text x="98.8088%" y="543.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (11 samples, 0.88%)</title><rect x="98.6389%" y="517" width="0.8807%" height="15" fill="rgb(232,90,46)" fg:x="1232" fg:w="11"/><text x="98.8889%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (6 samples, 0.48%)</title><rect x="99.0392%" y="501" width="0.4804%" height="15" fill="rgb(241,66,40)" fg:x="1237" fg:w="6"/><text x="99.2892%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="99.0392%" y="485" width="0.4804%" height="15" fill="rgb(249,184,29)" fg:x="1237" fg:w="6"/><text x="99.2892%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="99.0392%" y="469" width="0.4804%" height="15" fill="rgb(231,181,1)" fg:x="1237" fg:w="6"/><text x="99.2892%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="99.0392%" y="453" width="0.4804%" height="15" fill="rgb(224,94,2)" fg:x="1237" fg:w="6"/><text x="99.2892%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="99.0392%" y="437" width="0.4804%" height="15" fill="rgb(229,170,15)" fg:x="1237" fg:w="6"/><text x="99.2892%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="99.3595%" y="421" width="0.1601%" height="15" fill="rgb(240,127,35)" fg:x="1241" fg:w="2"/><text x="99.6095%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4396%" y="405" width="0.0801%" height="15" fill="rgb(248,196,34)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="415.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="99.5196%" y="613" width="0.0801%" height="15" fill="rgb(236,137,7)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5997%" y="597" width="0.0801%" height="15" fill="rgb(235,127,16)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5997%" y="581" width="0.0801%" height="15" fill="rgb(250,192,54)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.6797%" y="597" width="0.0801%" height="15" fill="rgb(218,98,20)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="99.6797%" y="581" width="0.0801%" height="15" fill="rgb(230,176,47)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.6797%" y="565" width="0.0801%" height="15" fill="rgb(244,2,33)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="575.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="99.6797%" y="549" width="0.0801%" height="15" fill="rgb(231,100,17)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="99.6797%" y="533" width="0.0801%" height="15" fill="rgb(245,23,12)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6797%" y="517" width="0.0801%" height="15" fill="rgb(249,55,22)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6797%" y="501" width="0.0801%" height="15" fill="rgb(207,134,9)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6797%" y="485" width="0.0801%" height="15" fill="rgb(218,134,0)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6797%" y="469" width="0.0801%" height="15" fill="rgb(213,212,33)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6797%" y="453" width="0.0801%" height="15" fill="rgb(252,106,18)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6797%" y="437" width="0.0801%" height="15" fill="rgb(208,126,42)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.6797%" y="421" width="0.0801%" height="15" fill="rgb(246,175,29)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.32%)</title><rect x="99.5196%" y="645" width="0.3203%" height="15" fill="rgb(215,13,50)" fg:x="1243" fg:w="4"/><text x="99.7696%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="99.5196%" y="629" width="0.3203%" height="15" fill="rgb(216,172,15)" fg:x="1243" fg:w="4"/><text x="99.7696%" y="639.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.5997%" y="613" width="0.2402%" height="15" fill="rgb(212,103,13)" fg:x="1244" fg:w="3"/><text x="99.8497%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.7598%" y="597" width="0.0801%" height="15" fill="rgb(231,171,36)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="99.7598%" y="581" width="0.0801%" height="15" fill="rgb(250,123,20)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="99.7598%" y="565" width="0.0801%" height="15" fill="rgb(212,53,50)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7598%" y="549" width="0.0801%" height="15" fill="rgb(243,54,12)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="559.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (335 samples, 26.82%)</title><rect x="73.0985%" y="757" width="26.8215%" height="15" fill="rgb(234,101,34)" fg:x="913" fg:w="335"/><text x="73.3485%" y="767.50">&lt;kernel::plugins::SessionPlugins as kernel:..</text></g><g><title>core::iter::adapters::try_process (335 samples, 26.82%)</title><rect x="73.0985%" y="741" width="26.8215%" height="15" fill="rgb(254,67,22)" fg:x="913" fg:w="335"/><text x="73.3485%" y="751.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (335 samples, 26.82%)</title><rect x="73.0985%" y="725" width="26.8215%" height="15" fill="rgb(250,35,47)" fg:x="913" fg:w="335"/><text x="73.3485%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_fro..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (335 samples, 26.82%)</title><rect x="73.0985%" y="709" width="26.8215%" height="15" fill="rgb(226,126,38)" fg:x="913" fg:w="335"/><text x="73.3485%" y="719.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as cor..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (335 samples, 26.82%)</title><rect x="73.0985%" y="693" width="26.8215%" height="15" fill="rgb(216,138,53)" fg:x="913" fg:w="335"/><text x="73.3485%" y="703.50">&lt;plugins_core::looking::LookingPlugin as ke..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (335 samples, 26.82%)</title><rect x="73.0985%" y="677" width="26.8215%" height="15" fill="rgb(246,199,43)" fg:x="913" fg:w="335"/><text x="73.3485%" y="687.50">&lt;engine::perform::StandardPerformer as kern..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (5 samples, 0.40%)</title><rect x="99.5196%" y="661" width="0.4003%" height="15" fill="rgb(232,125,11)" fg:x="1243" fg:w="5"/><text x="99.7696%" y="671.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="99.8399%" y="645" width="0.0801%" height="15" fill="rgb(218,219,45)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="655.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.8399%" y="629" width="0.0801%" height="15" fill="rgb(216,102,54)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="99.8399%" y="613" width="0.0801%" height="15" fill="rgb(250,228,7)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="99.8399%" y="597" width="0.0801%" height="15" fill="rgb(226,125,25)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8399%" y="581" width="0.0801%" height="15" fill="rgb(224,165,27)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="591.50"></text></g><g><title>all (1,249 samples, 100%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(233,86,3)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1151.50"></text></g><g><title>simple-5e588292 (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(228,116,20)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1135.50">simple-5e588292</text></g><g><title>_start (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(209,192,17)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1119.50">_start</text></g><g><title>__libc_start_main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(224,88,34)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1103.50">__libc_start_main</text></g><g><title>main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(233,38,6)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1087.50">main</text></g><g><title>std::rt::lang_start_internal (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(212,59,30)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1071.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(213,80,3)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1055.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(251,178,7)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1039.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(213,154,26)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1023.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(238,165,49)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(248,91,46)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(244,21,52)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(247,122,20)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,249 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(218,27,9)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="943.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(246,7,6)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="927.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,249 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(227,135,54)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="911.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(247,14,11)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="895.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,249 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(206,149,34)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="879.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,249 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(227,228,4)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="863.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (403 samples, 32.27%)</title><rect x="67.7342%" y="837" width="32.2658%" height="15" fill="rgb(238,218,28)" fg:x="846" fg:w="403"/><text x="67.9842%" y="847.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::r..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (403 samples, 32.27%)</title><rect x="67.7342%" y="821" width="32.2658%" height="15" fill="rgb(252,86,40)" fg:x="846" fg:w="403"/><text x="67.9842%" y="831.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (403 samples, 32.27%)</title><rect x="67.7342%" y="805" width="32.2658%" height="15" fill="rgb(251,225,11)" fg:x="846" fg:w="403"/><text x="67.9842%" y="815.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (336 samples, 26.90%)</title><rect x="73.0985%" y="789" width="26.9015%" height="15" fill="rgb(206,46,49)" fg:x="913" fg:w="336"/><text x="73.3485%" y="799.50">engine::session::Session::evaluate_and_perf..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (336 samples, 26.90%)</title><rect x="73.0985%" y="773" width="26.9015%" height="15" fill="rgb(245,128,24)" fg:x="913" fg:w="336"/><text x="73.3485%" y="783.50">engine::perform::StandardPerformer::evaluat..</text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.9199%" y="757" width="0.0801%" height="15" fill="rgb(219,177,34)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="767.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.9199%" y="741" width="0.0801%" height="15" fill="rgb(218,60,48)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="751.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.9199%" y="725" width="0.0801%" height="15" fill="rgb(221,11,5)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="735.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.9199%" y="709" width="0.0801%" height="15" fill="rgb(220,148,13)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="719.50"></text></g><g><title>&lt;core::time::Duration as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.08%)</title><rect x="99.9199%" y="693" width="0.0801%" height="15" fill="rgb(210,16,3)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="703.50"></text></g></svg></svg>