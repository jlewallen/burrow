<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1267"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0789%" y="725" width="0.0789%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3289%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.0789%" y="709" width="0.0789%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3289%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3157%" y="613" width="0.0789%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.5657%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.2368%" y="661" width="0.3157%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="4"/><text x="0.4868%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.2368%" y="645" width="0.3157%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="4"/><text x="0.4868%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.3157%" y="629" width="0.2368%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="3"/><text x="0.5657%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.3946%" y="613" width="0.1579%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="2"/><text x="0.6446%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4736%" y="597" width="0.0789%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="1"/><text x="0.7236%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4736%" y="581" width="0.0789%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="1"/><text x="0.7236%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.55%)</title><rect x="0.0789%" y="741" width="0.5525%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="7"/><text x="0.3289%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (6 samples, 0.47%)</title><rect x="0.1579%" y="725" width="0.4736%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="6"/><text x="0.4079%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="0.2368%" y="709" width="0.3946%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="5"/><text x="0.4868%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (5 samples, 0.39%)</title><rect x="0.2368%" y="693" width="0.3946%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="5"/><text x="0.4868%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="0.2368%" y="677" width="0.3946%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="5"/><text x="0.4868%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5525%" y="661" width="0.0789%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="1"/><text x="0.8025%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorageFactory as engine::storage::StorageFactory&gt;::create_storage (1 samples, 0.08%)</title><rect x="0.6314%" y="709" width="0.0789%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="0.8814%" y="719.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="0.7103%" y="693" width="0.0789%" height="15" fill="rgb(225,20,46)" fg:x="9" fg:w="1"/><text x="0.9603%" y="703.50"></text></g><g><title>&lt;alloc::ffi::c_str::CString as core::convert::From&lt;&amp;core::ffi::c_str::CStr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="1.0260%" y="629" width="0.0789%" height="15" fill="rgb(210,31,41)" fg:x="13" fg:w="1"/><text x="1.2760%" y="639.50"></text></g><g><title>alloc::ffi::c_str::&lt;impl alloc::borrow::ToOwned for core::ffi::c_str::CStr&gt;::to_owned (1 samples, 0.08%)</title><rect x="1.0260%" y="613" width="0.0789%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="1"/><text x="1.2760%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.08%)</title><rect x="1.0260%" y="597" width="0.0789%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="1"/><text x="1.2760%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (1 samples, 0.08%)</title><rect x="1.0260%" y="581" width="0.0789%" height="15" fill="rgb(249,33,26)" fg:x="13" fg:w="1"/><text x="1.2760%" y="591.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as alloc::boxed::BoxFromSlice&lt;T&gt;&gt;::from_slice (1 samples, 0.08%)</title><rect x="1.0260%" y="565" width="0.0789%" height="15" fill="rgb(235,183,28)" fg:x="13" fg:w="1"/><text x="1.2760%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="1.0260%" y="549" width="0.0789%" height="15" fill="rgb(221,5,38)" fg:x="13" fg:w="1"/><text x="1.2760%" y="559.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="1.1050%" y="629" width="0.0789%" height="15" fill="rgb(247,18,42)" fg:x="14" fg:w="1"/><text x="1.3550%" y="639.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.1050%" y="613" width="0.0789%" height="15" fill="rgb(241,131,45)" fg:x="14" fg:w="1"/><text x="1.3550%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.1050%" y="597" width="0.0789%" height="15" fill="rgb(249,31,29)" fg:x="14" fg:w="1"/><text x="1.3550%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.47%)</title><rect x="0.7893%" y="677" width="0.4736%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="6"/><text x="1.0393%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="0.9471%" y="661" width="0.3157%" height="15" fill="rgb(238,160,17)" fg:x="12" fg:w="4"/><text x="1.1971%" y="671.50"></text></g><g><title>libloading::safe::Library::new (3 samples, 0.24%)</title><rect x="1.0260%" y="645" width="0.2368%" height="15" fill="rgb(214,148,48)" fg:x="13" fg:w="3"/><text x="1.2760%" y="655.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="1.1839%" y="629" width="0.0789%" height="15" fill="rgb(232,36,49)" fg:x="15" fg:w="1"/><text x="1.4339%" y="639.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="1.1839%" y="613" width="0.0789%" height="15" fill="rgb(209,103,24)" fg:x="15" fg:w="1"/><text x="1.4339%" y="623.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="1.1839%" y="597" width="0.0789%" height="15" fill="rgb(229,88,8)" fg:x="15" fg:w="1"/><text x="1.4339%" y="607.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="1.1839%" y="581" width="0.0789%" height="15" fill="rgb(213,181,19)" fg:x="15" fg:w="1"/><text x="1.4339%" y="591.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="1.1839%" y="565" width="0.0789%" height="15" fill="rgb(254,191,54)" fg:x="15" fg:w="1"/><text x="1.4339%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.71%)</title><rect x="0.6314%" y="741" width="0.7103%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="9"/><text x="0.8814%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (9 samples, 0.71%)</title><rect x="0.6314%" y="725" width="0.7103%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="9"/><text x="0.8814%" y="735.50"></text></g><g><title>engine::session::Session::new (8 samples, 0.63%)</title><rect x="0.7103%" y="709" width="0.6314%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="8"/><text x="0.9603%" y="719.50"></text></g><g><title>engine::session::Session::initialize (7 samples, 0.55%)</title><rect x="0.7893%" y="693" width="0.5525%" height="15" fill="rgb(245,192,40)" fg:x="10" fg:w="7"/><text x="1.0393%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="1.2628%" y="677" width="0.0789%" height="15" fill="rgb(238,167,29)" fg:x="16" fg:w="1"/><text x="1.5128%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.2628%" y="661" width="0.0789%" height="15" fill="rgb(232,182,51)" fg:x="16" fg:w="1"/><text x="1.5128%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="1.3418%" y="725" width="0.0789%" height="15" fill="rgb(231,60,39)" fg:x="17" fg:w="1"/><text x="1.5918%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.3418%" y="709" width="0.0789%" height="15" fill="rgb(208,69,12)" fg:x="17" fg:w="1"/><text x="1.5918%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3418%" y="693" width="0.0789%" height="15" fill="rgb(235,93,37)" fg:x="17" fg:w="1"/><text x="1.5918%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::Build&gt; (1 samples, 0.08%)</title><rect x="1.4207%" y="725" width="0.0789%" height="15" fill="rgb(213,116,39)" fg:x="18" fg:w="1"/><text x="1.6707%" y="735.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.4996%" y="709" width="0.0789%" height="15" fill="rgb(222,207,29)" fg:x="19" fg:w="1"/><text x="1.7496%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.4996%" y="693" width="0.0789%" height="15" fill="rgb(206,96,30)" fg:x="19" fg:w="1"/><text x="1.7496%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.4996%" y="677" width="0.0789%" height="15" fill="rgb(218,138,4)" fg:x="19" fg:w="1"/><text x="1.7496%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.4996%" y="661" width="0.0789%" height="15" fill="rgb(250,191,14)" fg:x="19" fg:w="1"/><text x="1.7496%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.4996%" y="645" width="0.0789%" height="15" fill="rgb(239,60,40)" fg:x="19" fg:w="1"/><text x="1.7496%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.4996%" y="629" width="0.0789%" height="15" fill="rgb(206,27,48)" fg:x="19" fg:w="1"/><text x="1.7496%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="1.4996%" y="613" width="0.0789%" height="15" fill="rgb(225,35,8)" fg:x="19" fg:w="1"/><text x="1.7496%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="1.4996%" y="597" width="0.0789%" height="15" fill="rgb(250,213,24)" fg:x="19" fg:w="1"/><text x="1.7496%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.5785%" y="629" width="0.0789%" height="15" fill="rgb(247,123,22)" fg:x="20" fg:w="1"/><text x="1.8285%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.5785%" y="613" width="0.0789%" height="15" fill="rgb(231,138,38)" fg:x="20" fg:w="1"/><text x="1.8285%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.5785%" y="597" width="0.0789%" height="15" fill="rgb(231,145,46)" fg:x="20" fg:w="1"/><text x="1.8285%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.5785%" y="581" width="0.0789%" height="15" fill="rgb(251,118,11)" fg:x="20" fg:w="1"/><text x="1.8285%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.6575%" y="613" width="0.0789%" height="15" fill="rgb(217,147,25)" fg:x="21" fg:w="1"/><text x="1.9075%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.6575%" y="597" width="0.0789%" height="15" fill="rgb(247,81,37)" fg:x="21" fg:w="1"/><text x="1.9075%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.7364%" y="565" width="0.0789%" height="15" fill="rgb(209,12,38)" fg:x="22" fg:w="1"/><text x="1.9864%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.7364%" y="613" width="0.1579%" height="15" fill="rgb(227,1,9)" fg:x="22" fg:w="2"/><text x="1.9864%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.7364%" y="597" width="0.1579%" height="15" fill="rgb(248,47,43)" fg:x="22" fg:w="2"/><text x="1.9864%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.7364%" y="581" width="0.1579%" height="15" fill="rgb(221,10,30)" fg:x="22" fg:w="2"/><text x="1.9864%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.8153%" y="565" width="0.0789%" height="15" fill="rgb(210,229,1)" fg:x="23" fg:w="1"/><text x="2.0653%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.8153%" y="549" width="0.0789%" height="15" fill="rgb(222,148,37)" fg:x="23" fg:w="1"/><text x="2.0653%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.8153%" y="533" width="0.0789%" height="15" fill="rgb(234,67,33)" fg:x="23" fg:w="1"/><text x="2.0653%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.8153%" y="517" width="0.0789%" height="15" fill="rgb(247,98,35)" fg:x="23" fg:w="1"/><text x="2.0653%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.8153%" y="501" width="0.0789%" height="15" fill="rgb(247,138,52)" fg:x="23" fg:w="1"/><text x="2.0653%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.8153%" y="485" width="0.0789%" height="15" fill="rgb(213,79,30)" fg:x="23" fg:w="1"/><text x="2.0653%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.8153%" y="469" width="0.0789%" height="15" fill="rgb(246,177,23)" fg:x="23" fg:w="1"/><text x="2.0653%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.8153%" y="453" width="0.0789%" height="15" fill="rgb(230,62,27)" fg:x="23" fg:w="1"/><text x="2.0653%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.8153%" y="437" width="0.0789%" height="15" fill="rgb(216,154,8)" fg:x="23" fg:w="1"/><text x="2.0653%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.39%)</title><rect x="1.5785%" y="645" width="0.3946%" height="15" fill="rgb(244,35,45)" fg:x="20" fg:w="5"/><text x="1.8285%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.6575%" y="629" width="0.3157%" height="15" fill="rgb(251,115,12)" fg:x="21" fg:w="4"/><text x="1.9075%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.8942%" y="613" width="0.0789%" height="15" fill="rgb(240,54,50)" fg:x="24" fg:w="1"/><text x="2.1442%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.8942%" y="597" width="0.0789%" height="15" fill="rgb(233,84,52)" fg:x="24" fg:w="1"/><text x="2.1442%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9732%" y="549" width="0.0789%" height="15" fill="rgb(207,117,47)" fg:x="25" fg:w="1"/><text x="2.2232%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.9732%" y="645" width="0.1579%" height="15" fill="rgb(249,43,39)" fg:x="25" fg:w="2"/><text x="2.2232%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="1.9732%" y="629" width="0.1579%" height="15" fill="rgb(209,38,44)" fg:x="25" fg:w="2"/><text x="2.2232%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.9732%" y="613" width="0.1579%" height="15" fill="rgb(236,212,23)" fg:x="25" fg:w="2"/><text x="2.2232%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.9732%" y="597" width="0.1579%" height="15" fill="rgb(242,79,21)" fg:x="25" fg:w="2"/><text x="2.2232%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.9732%" y="581" width="0.1579%" height="15" fill="rgb(211,96,35)" fg:x="25" fg:w="2"/><text x="2.2232%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.9732%" y="565" width="0.1579%" height="15" fill="rgb(253,215,40)" fg:x="25" fg:w="2"/><text x="2.2232%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0521%" y="549" width="0.0789%" height="15" fill="rgb(211,81,21)" fg:x="26" fg:w="1"/><text x="2.3021%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0521%" y="533" width="0.0789%" height="15" fill="rgb(208,190,38)" fg:x="26" fg:w="1"/><text x="2.3021%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0521%" y="517" width="0.0789%" height="15" fill="rgb(235,213,38)" fg:x="26" fg:w="1"/><text x="2.3021%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="2.1310%" y="629" width="0.0789%" height="15" fill="rgb(237,122,38)" fg:x="27" fg:w="1"/><text x="2.3810%" y="639.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="2.1310%" y="613" width="0.0789%" height="15" fill="rgb(244,218,35)" fg:x="27" fg:w="1"/><text x="2.3810%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="2.3678%" y="501" width="0.0789%" height="15" fill="rgb(240,68,47)" fg:x="30" fg:w="1"/><text x="2.6178%" y="511.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.03%)</title><rect x="1.4996%" y="725" width="1.0260%" height="15" fill="rgb(210,16,53)" fg:x="19" fg:w="13"/><text x="1.7496%" y="735.50"></text></g><g><title>engine::session::state::State::close (12 samples, 0.95%)</title><rect x="1.5785%" y="709" width="0.9471%" height="15" fill="rgb(235,124,12)" fg:x="20" fg:w="12"/><text x="1.8285%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (12 samples, 0.95%)</title><rect x="1.5785%" y="693" width="0.9471%" height="15" fill="rgb(224,169,11)" fg:x="20" fg:w="12"/><text x="1.8285%" y="703.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (12 samples, 0.95%)</title><rect x="1.5785%" y="677" width="0.9471%" height="15" fill="rgb(250,166,2)" fg:x="20" fg:w="12"/><text x="1.8285%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (12 samples, 0.95%)</title><rect x="1.5785%" y="661" width="0.9471%" height="15" fill="rgb(242,216,29)" fg:x="20" fg:w="12"/><text x="1.8285%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.39%)</title><rect x="2.1310%" y="645" width="0.3946%" height="15" fill="rgb(230,116,27)" fg:x="27" fg:w="5"/><text x="2.3810%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="2.2099%" y="629" width="0.3157%" height="15" fill="rgb(228,99,48)" fg:x="28" fg:w="4"/><text x="2.4599%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="2.2889%" y="613" width="0.2368%" height="15" fill="rgb(253,11,6)" fg:x="29" fg:w="3"/><text x="2.5389%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="2.3678%" y="597" width="0.1579%" height="15" fill="rgb(247,143,39)" fg:x="30" fg:w="2"/><text x="2.6178%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="2.3678%" y="581" width="0.1579%" height="15" fill="rgb(236,97,10)" fg:x="30" fg:w="2"/><text x="2.6178%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.3678%" y="565" width="0.1579%" height="15" fill="rgb(233,208,19)" fg:x="30" fg:w="2"/><text x="2.6178%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.3678%" y="549" width="0.1579%" height="15" fill="rgb(216,164,2)" fg:x="30" fg:w="2"/><text x="2.6178%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.3678%" y="533" width="0.1579%" height="15" fill="rgb(220,129,5)" fg:x="30" fg:w="2"/><text x="2.6178%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.3678%" y="517" width="0.1579%" height="15" fill="rgb(242,17,10)" fg:x="30" fg:w="2"/><text x="2.6178%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4467%" y="501" width="0.0789%" height="15" fill="rgb(242,107,0)" fg:x="31" fg:w="1"/><text x="2.6967%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4467%" y="485" width="0.0789%" height="15" fill="rgb(251,28,31)" fg:x="31" fg:w="1"/><text x="2.6967%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4467%" y="469" width="0.0789%" height="15" fill="rgb(233,223,10)" fg:x="31" fg:w="1"/><text x="2.6967%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4467%" y="453" width="0.0789%" height="15" fill="rgb(215,21,27)" fg:x="31" fg:w="1"/><text x="2.6967%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4467%" y="437" width="0.0789%" height="15" fill="rgb(232,23,21)" fg:x="31" fg:w="1"/><text x="2.6967%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4467%" y="421" width="0.0789%" height="15" fill="rgb(244,5,23)" fg:x="31" fg:w="1"/><text x="2.6967%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4467%" y="405" width="0.0789%" height="15" fill="rgb(226,81,46)" fg:x="31" fg:w="1"/><text x="2.6967%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4467%" y="389" width="0.0789%" height="15" fill="rgb(247,70,30)" fg:x="31" fg:w="1"/><text x="2.6967%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="2.5257%" y="693" width="0.0789%" height="15" fill="rgb(212,68,19)" fg:x="32" fg:w="1"/><text x="2.7757%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="2.5257%" y="677" width="0.0789%" height="15" fill="rgb(240,187,13)" fg:x="32" fg:w="1"/><text x="2.7757%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="2.5257%" y="661" width="0.0789%" height="15" fill="rgb(223,113,26)" fg:x="32" fg:w="1"/><text x="2.7757%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="2.5257%" y="645" width="0.0789%" height="15" fill="rgb(206,192,2)" fg:x="32" fg:w="1"/><text x="2.7757%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.5257%" y="629" width="0.0789%" height="15" fill="rgb(241,108,4)" fg:x="32" fg:w="1"/><text x="2.7757%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="2.5257%" y="613" width="0.0789%" height="15" fill="rgb(247,173,49)" fg:x="32" fg:w="1"/><text x="2.7757%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="2.5257%" y="597" width="0.0789%" height="15" fill="rgb(224,114,35)" fg:x="32" fg:w="1"/><text x="2.7757%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="2.5257%" y="581" width="0.0789%" height="15" fill="rgb(245,159,27)" fg:x="32" fg:w="1"/><text x="2.7757%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.5257%" y="565" width="0.0789%" height="15" fill="rgb(245,172,44)" fg:x="32" fg:w="1"/><text x="2.7757%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="2.5257%" y="549" width="0.0789%" height="15" fill="rgb(236,23,11)" fg:x="32" fg:w="1"/><text x="2.7757%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="2.5257%" y="533" width="0.0789%" height="15" fill="rgb(205,117,38)" fg:x="32" fg:w="1"/><text x="2.7757%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="2.5257%" y="517" width="0.0789%" height="15" fill="rgb(237,72,25)" fg:x="32" fg:w="1"/><text x="2.7757%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="2.5257%" y="709" width="0.1579%" height="15" fill="rgb(244,70,9)" fg:x="32" fg:w="2"/><text x="2.7757%" y="719.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="2.6046%" y="693" width="0.0789%" height="15" fill="rgb(217,125,39)" fg:x="33" fg:w="1"/><text x="2.8546%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="2.6046%" y="677" width="0.0789%" height="15" fill="rgb(235,36,10)" fg:x="33" fg:w="1"/><text x="2.8546%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.6046%" y="661" width="0.0789%" height="15" fill="rgb(251,123,47)" fg:x="33" fg:w="1"/><text x="2.8546%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="2.6046%" y="645" width="0.0789%" height="15" fill="rgb(221,13,13)" fg:x="33" fg:w="1"/><text x="2.8546%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="2.6835%" y="693" width="0.0789%" height="15" fill="rgb(238,131,9)" fg:x="34" fg:w="1"/><text x="2.9335%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="2.6835%" y="677" width="0.0789%" height="15" fill="rgb(211,50,8)" fg:x="34" fg:w="1"/><text x="2.9335%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="2.6835%" y="661" width="0.0789%" height="15" fill="rgb(245,182,24)" fg:x="34" fg:w="1"/><text x="2.9335%" y="671.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="2.6835%" y="645" width="0.0789%" height="15" fill="rgb(242,14,37)" fg:x="34" fg:w="1"/><text x="2.9335%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.6835%" y="629" width="0.0789%" height="15" fill="rgb(246,228,12)" fg:x="34" fg:w="1"/><text x="2.9335%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="2.7624%" y="693" width="0.0789%" height="15" fill="rgb(213,55,15)" fg:x="35" fg:w="1"/><text x="3.0124%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.7624%" y="677" width="0.0789%" height="15" fill="rgb(209,9,3)" fg:x="35" fg:w="1"/><text x="3.0124%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.7624%" y="661" width="0.0789%" height="15" fill="rgb(230,59,30)" fg:x="35" fg:w="1"/><text x="3.0124%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8414%" y="677" width="0.0789%" height="15" fill="rgb(209,121,21)" fg:x="36" fg:w="1"/><text x="3.0914%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.8414%" y="661" width="0.0789%" height="15" fill="rgb(220,109,13)" fg:x="36" fg:w="1"/><text x="3.0914%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.8414%" y="645" width="0.0789%" height="15" fill="rgb(232,18,1)" fg:x="36" fg:w="1"/><text x="3.0914%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8414%" y="629" width="0.0789%" height="15" fill="rgb(215,41,42)" fg:x="36" fg:w="1"/><text x="3.0914%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (3 samples, 0.24%)</title><rect x="2.8414%" y="693" width="0.2368%" height="15" fill="rgb(224,123,36)" fg:x="36" fg:w="3"/><text x="3.0914%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="2.9203%" y="677" width="0.1579%" height="15" fill="rgb(240,125,3)" fg:x="37" fg:w="2"/><text x="3.1703%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="2.9203%" y="661" width="0.1579%" height="15" fill="rgb(205,98,50)" fg:x="37" fg:w="2"/><text x="3.1703%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9992%" y="645" width="0.0789%" height="15" fill="rgb(205,185,37)" fg:x="38" fg:w="1"/><text x="3.2492%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.9992%" y="629" width="0.0789%" height="15" fill="rgb(238,207,15)" fg:x="38" fg:w="1"/><text x="3.2492%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9992%" y="613" width="0.0789%" height="15" fill="rgb(213,199,42)" fg:x="38" fg:w="1"/><text x="3.2492%" y="623.50"></text></g><g><title>plugins_core::build::Build::holding (8 samples, 0.63%)</title><rect x="2.5257%" y="725" width="0.6314%" height="15" fill="rgb(235,201,11)" fg:x="32" fg:w="8"/><text x="2.7757%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.47%)</title><rect x="2.6835%" y="709" width="0.4736%" height="15" fill="rgb(207,46,11)" fg:x="34" fg:w="6"/><text x="2.9335%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="3.0781%" y="693" width="0.0789%" height="15" fill="rgb(241,35,35)" fg:x="39" fg:w="1"/><text x="3.3281%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.0781%" y="677" width="0.0789%" height="15" fill="rgb(243,32,47)" fg:x="39" fg:w="1"/><text x="3.3281%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="3.0781%" y="661" width="0.0789%" height="15" fill="rgb(247,202,23)" fg:x="39" fg:w="1"/><text x="3.3281%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.0781%" y="645" width="0.0789%" height="15" fill="rgb(219,102,11)" fg:x="39" fg:w="1"/><text x="3.3281%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.0781%" y="629" width="0.0789%" height="15" fill="rgb(243,110,44)" fg:x="39" fg:w="1"/><text x="3.3281%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.0781%" y="613" width="0.0789%" height="15" fill="rgb(222,74,54)" fg:x="39" fg:w="1"/><text x="3.3281%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.0781%" y="597" width="0.0789%" height="15" fill="rgb(216,99,12)" fg:x="39" fg:w="1"/><text x="3.3281%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.0781%" y="581" width="0.0789%" height="15" fill="rgb(226,22,26)" fg:x="39" fg:w="1"/><text x="3.3281%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.0781%" y="565" width="0.0789%" height="15" fill="rgb(217,163,10)" fg:x="39" fg:w="1"/><text x="3.3281%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (2 samples, 0.16%)</title><rect x="3.1571%" y="677" width="0.1579%" height="15" fill="rgb(213,25,53)" fg:x="40" fg:w="2"/><text x="3.4071%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.1571%" y="661" width="0.1579%" height="15" fill="rgb(252,105,26)" fg:x="40" fg:w="2"/><text x="3.4071%" y="671.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2360%" y="645" width="0.0789%" height="15" fill="rgb(220,39,43)" fg:x="41" fg:w="1"/><text x="3.4860%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="3.1571%" y="693" width="0.2368%" height="15" fill="rgb(229,68,48)" fg:x="40" fg:w="3"/><text x="3.4071%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.3149%" y="677" width="0.0789%" height="15" fill="rgb(252,8,32)" fg:x="42" fg:w="1"/><text x="3.5649%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.3149%" y="661" width="0.0789%" height="15" fill="rgb(223,20,43)" fg:x="42" fg:w="1"/><text x="3.5649%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.3149%" y="645" width="0.0789%" height="15" fill="rgb(229,81,49)" fg:x="42" fg:w="1"/><text x="3.5649%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.3149%" y="629" width="0.0789%" height="15" fill="rgb(236,28,36)" fg:x="42" fg:w="1"/><text x="3.5649%" y="639.50"></text></g><g><title>plugins_core::build::Build::into_entry (4 samples, 0.32%)</title><rect x="3.1571%" y="725" width="0.3157%" height="15" fill="rgb(249,185,26)" fg:x="40" fg:w="4"/><text x="3.4071%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="3.1571%" y="709" width="0.3157%" height="15" fill="rgb(249,174,33)" fg:x="40" fg:w="4"/><text x="3.4071%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.3938%" y="693" width="0.0789%" height="15" fill="rgb(233,201,37)" fg:x="43" fg:w="1"/><text x="3.6438%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.3938%" y="677" width="0.0789%" height="15" fill="rgb(221,78,26)" fg:x="43" fg:w="1"/><text x="3.6438%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.3938%" y="661" width="0.0789%" height="15" fill="rgb(250,127,30)" fg:x="43" fg:w="1"/><text x="3.6438%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.3938%" y="645" width="0.0789%" height="15" fill="rgb(230,49,44)" fg:x="43" fg:w="1"/><text x="3.6438%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.3938%" y="629" width="0.0789%" height="15" fill="rgb(229,67,23)" fg:x="43" fg:w="1"/><text x="3.6438%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3938%" y="613" width="0.0789%" height="15" fill="rgb(249,83,47)" fg:x="43" fg:w="1"/><text x="3.6438%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3938%" y="597" width="0.0789%" height="15" fill="rgb(215,43,3)" fg:x="43" fg:w="1"/><text x="3.6438%" y="607.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="3.4728%" y="725" width="0.1579%" height="15" fill="rgb(238,154,13)" fg:x="44" fg:w="2"/><text x="3.7228%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="3.4728%" y="709" width="0.1579%" height="15" fill="rgb(219,56,2)" fg:x="44" fg:w="2"/><text x="3.7228%" y="719.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="3.4728%" y="693" width="0.1579%" height="15" fill="rgb(233,0,4)" fg:x="44" fg:w="2"/><text x="3.7228%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="3.4728%" y="677" width="0.1579%" height="15" fill="rgb(235,30,7)" fg:x="44" fg:w="2"/><text x="3.7228%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="3.4728%" y="661" width="0.1579%" height="15" fill="rgb(250,79,13)" fg:x="44" fg:w="2"/><text x="3.7228%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.4728%" y="645" width="0.1579%" height="15" fill="rgb(211,146,34)" fg:x="44" fg:w="2"/><text x="3.7228%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="3.4728%" y="629" width="0.1579%" height="15" fill="rgb(228,22,38)" fg:x="44" fg:w="2"/><text x="3.7228%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.4728%" y="613" width="0.1579%" height="15" fill="rgb(235,168,5)" fg:x="44" fg:w="2"/><text x="3.7228%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="3.4728%" y="597" width="0.1579%" height="15" fill="rgb(221,155,16)" fg:x="44" fg:w="2"/><text x="3.7228%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5517%" y="581" width="0.0789%" height="15" fill="rgb(215,215,53)" fg:x="45" fg:w="1"/><text x="3.8017%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.5517%" y="565" width="0.0789%" height="15" fill="rgb(223,4,10)" fg:x="45" fg:w="1"/><text x="3.8017%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5517%" y="549" width="0.0789%" height="15" fill="rgb(234,103,6)" fg:x="45" fg:w="1"/><text x="3.8017%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5517%" y="533" width="0.0789%" height="15" fill="rgb(227,97,0)" fg:x="45" fg:w="1"/><text x="3.8017%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.7096%" y="597" width="0.0789%" height="15" fill="rgb(234,150,53)" fg:x="47" fg:w="1"/><text x="3.9596%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.7096%" y="709" width="0.1579%" height="15" fill="rgb(228,201,54)" fg:x="47" fg:w="2"/><text x="3.9596%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.7096%" y="693" width="0.1579%" height="15" fill="rgb(222,22,37)" fg:x="47" fg:w="2"/><text x="3.9596%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.7096%" y="677" width="0.1579%" height="15" fill="rgb(237,53,32)" fg:x="47" fg:w="2"/><text x="3.9596%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.7096%" y="661" width="0.1579%" height="15" fill="rgb(233,25,53)" fg:x="47" fg:w="2"/><text x="3.9596%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.7096%" y="645" width="0.1579%" height="15" fill="rgb(210,40,34)" fg:x="47" fg:w="2"/><text x="3.9596%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="3.7096%" y="629" width="0.1579%" height="15" fill="rgb(241,220,44)" fg:x="47" fg:w="2"/><text x="3.9596%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.7096%" y="613" width="0.1579%" height="15" fill="rgb(235,28,35)" fg:x="47" fg:w="2"/><text x="3.9596%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.7885%" y="597" width="0.0789%" height="15" fill="rgb(210,56,17)" fg:x="48" fg:w="1"/><text x="4.0385%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.7885%" y="581" width="0.0789%" height="15" fill="rgb(224,130,29)" fg:x="48" fg:w="1"/><text x="4.0385%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.7885%" y="565" width="0.0789%" height="15" fill="rgb(235,212,8)" fg:x="48" fg:w="1"/><text x="4.0385%" y="575.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="3.8674%" y="709" width="0.1579%" height="15" fill="rgb(223,33,50)" fg:x="49" fg:w="2"/><text x="4.1174%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="3.8674%" y="693" width="0.1579%" height="15" fill="rgb(219,149,13)" fg:x="49" fg:w="2"/><text x="4.1174%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;engine::users::model::Usernames&gt;&gt; (1 samples, 0.08%)</title><rect x="3.9463%" y="677" width="0.0789%" height="15" fill="rgb(250,156,29)" fg:x="50" fg:w="1"/><text x="4.1963%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="3.9463%" y="661" width="0.0789%" height="15" fill="rgb(216,193,19)" fg:x="50" fg:w="1"/><text x="4.1963%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.9463%" y="645" width="0.0789%" height="15" fill="rgb(216,135,14)" fg:x="50" fg:w="1"/><text x="4.1963%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0253%" y="677" width="0.0789%" height="15" fill="rgb(241,47,5)" fg:x="51" fg:w="1"/><text x="4.2753%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="4.1831%" y="661" width="0.0789%" height="15" fill="rgb(233,42,35)" fg:x="53" fg:w="1"/><text x="4.4331%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="4.1831%" y="645" width="0.0789%" height="15" fill="rgb(231,13,6)" fg:x="53" fg:w="1"/><text x="4.4331%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="4.1831%" y="629" width="0.0789%" height="15" fill="rgb(207,181,40)" fg:x="53" fg:w="1"/><text x="4.4331%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.1831%" y="613" width="0.0789%" height="15" fill="rgb(254,173,49)" fg:x="53" fg:w="1"/><text x="4.4331%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.1831%" y="597" width="0.0789%" height="15" fill="rgb(221,1,38)" fg:x="53" fg:w="1"/><text x="4.4331%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1831%" y="581" width="0.0789%" height="15" fill="rgb(206,124,46)" fg:x="53" fg:w="1"/><text x="4.4331%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1831%" y="565" width="0.0789%" height="15" fill="rgb(249,21,11)" fg:x="53" fg:w="1"/><text x="4.4331%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1831%" y="549" width="0.0789%" height="15" fill="rgb(222,201,40)" fg:x="53" fg:w="1"/><text x="4.4331%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1831%" y="533" width="0.0789%" height="15" fill="rgb(235,61,29)" fg:x="53" fg:w="1"/><text x="4.4331%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.1831%" y="517" width="0.0789%" height="15" fill="rgb(219,207,3)" fg:x="53" fg:w="1"/><text x="4.4331%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.1831%" y="501" width="0.0789%" height="15" fill="rgb(222,56,46)" fg:x="53" fg:w="1"/><text x="4.4331%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.1831%" y="485" width="0.0789%" height="15" fill="rgb(239,76,54)" fg:x="53" fg:w="1"/><text x="4.4331%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1831%" y="469" width="0.0789%" height="15" fill="rgb(231,124,27)" fg:x="53" fg:w="1"/><text x="4.4331%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1831%" y="453" width="0.0789%" height="15" fill="rgb(249,195,6)" fg:x="53" fg:w="1"/><text x="4.4331%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.1831%" y="437" width="0.0789%" height="15" fill="rgb(237,174,47)" fg:x="53" fg:w="1"/><text x="4.4331%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.1831%" y="421" width="0.0789%" height="15" fill="rgb(206,201,31)" fg:x="53" fg:w="1"/><text x="4.4331%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.1831%" y="405" width="0.0789%" height="15" fill="rgb(231,57,52)" fg:x="53" fg:w="1"/><text x="4.4331%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.1831%" y="389" width="0.0789%" height="15" fill="rgb(248,177,22)" fg:x="53" fg:w="1"/><text x="4.4331%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1831%" y="373" width="0.0789%" height="15" fill="rgb(215,211,37)" fg:x="53" fg:w="1"/><text x="4.4331%" y="383.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="4.2620%" y="661" width="0.0789%" height="15" fill="rgb(241,128,51)" fg:x="54" fg:w="1"/><text x="4.5120%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.2620%" y="645" width="0.0789%" height="15" fill="rgb(227,165,31)" fg:x="54" fg:w="1"/><text x="4.5120%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.2620%" y="629" width="0.0789%" height="15" fill="rgb(228,167,24)" fg:x="54" fg:w="1"/><text x="4.5120%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.2620%" y="613" width="0.0789%" height="15" fill="rgb(228,143,12)" fg:x="54" fg:w="1"/><text x="4.5120%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.2620%" y="597" width="0.0789%" height="15" fill="rgb(249,149,8)" fg:x="54" fg:w="1"/><text x="4.5120%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2620%" y="581" width="0.0789%" height="15" fill="rgb(243,35,44)" fg:x="54" fg:w="1"/><text x="4.5120%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.2620%" y="565" width="0.0789%" height="15" fill="rgb(246,89,9)" fg:x="54" fg:w="1"/><text x="4.5120%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.2620%" y="549" width="0.0789%" height="15" fill="rgb(233,213,13)" fg:x="54" fg:w="1"/><text x="4.5120%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.2620%" y="533" width="0.0789%" height="15" fill="rgb(233,141,41)" fg:x="54" fg:w="1"/><text x="4.5120%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.2620%" y="517" width="0.0789%" height="15" fill="rgb(239,167,4)" fg:x="54" fg:w="1"/><text x="4.5120%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.2620%" y="501" width="0.0789%" height="15" fill="rgb(209,217,16)" fg:x="54" fg:w="1"/><text x="4.5120%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.2620%" y="485" width="0.0789%" height="15" fill="rgb(219,88,35)" fg:x="54" fg:w="1"/><text x="4.5120%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.2620%" y="469" width="0.0789%" height="15" fill="rgb(220,193,23)" fg:x="54" fg:w="1"/><text x="4.5120%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.2620%" y="453" width="0.0789%" height="15" fill="rgb(230,90,52)" fg:x="54" fg:w="1"/><text x="4.5120%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.2620%" y="437" width="0.0789%" height="15" fill="rgb(252,106,19)" fg:x="54" fg:w="1"/><text x="4.5120%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.2620%" y="421" width="0.0789%" height="15" fill="rgb(206,74,20)" fg:x="54" fg:w="1"/><text x="4.5120%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.2620%" y="405" width="0.0789%" height="15" fill="rgb(230,138,44)" fg:x="54" fg:w="1"/><text x="4.5120%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2620%" y="389" width="0.0789%" height="15" fill="rgb(235,182,43)" fg:x="54" fg:w="1"/><text x="4.5120%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="4.3410%" y="629" width="0.0789%" height="15" fill="rgb(242,16,51)" fg:x="55" fg:w="1"/><text x="4.5910%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="4.3410%" y="613" width="0.0789%" height="15" fill="rgb(248,9,4)" fg:x="55" fg:w="1"/><text x="4.5910%" y="623.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="4.3410%" y="597" width="0.0789%" height="15" fill="rgb(210,31,22)" fg:x="55" fg:w="1"/><text x="4.5910%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.3410%" y="645" width="0.1579%" height="15" fill="rgb(239,54,39)" fg:x="55" fg:w="2"/><text x="4.5910%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="4.4199%" y="629" width="0.0789%" height="15" fill="rgb(230,99,41)" fg:x="56" fg:w="1"/><text x="4.6699%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="4.4199%" y="613" width="0.0789%" height="15" fill="rgb(253,106,12)" fg:x="56" fg:w="1"/><text x="4.6699%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.4199%" y="597" width="0.0789%" height="15" fill="rgb(213,46,41)" fg:x="56" fg:w="1"/><text x="4.6699%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.4199%" y="581" width="0.0789%" height="15" fill="rgb(215,133,35)" fg:x="56" fg:w="1"/><text x="4.6699%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.4199%" y="565" width="0.0789%" height="15" fill="rgb(213,28,5)" fg:x="56" fg:w="1"/><text x="4.6699%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.55%)</title><rect x="4.0253%" y="709" width="0.5525%" height="15" fill="rgb(215,77,49)" fg:x="51" fg:w="7"/><text x="4.2753%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.55%)</title><rect x="4.0253%" y="693" width="0.5525%" height="15" fill="rgb(248,100,22)" fg:x="51" fg:w="7"/><text x="4.2753%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.47%)</title><rect x="4.1042%" y="677" width="0.4736%" height="15" fill="rgb(208,67,9)" fg:x="52" fg:w="6"/><text x="4.3542%" y="687.50"></text></g><g><title>plugins_core::build::Build::leads_to (3 samples, 0.24%)</title><rect x="4.3410%" y="661" width="0.2368%" height="15" fill="rgb(219,133,21)" fg:x="55" fg:w="3"/><text x="4.5910%" y="671.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="4.4988%" y="645" width="0.0789%" height="15" fill="rgb(246,46,29)" fg:x="57" fg:w="1"/><text x="4.7488%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.4988%" y="629" width="0.0789%" height="15" fill="rgb(246,185,52)" fg:x="57" fg:w="1"/><text x="4.7488%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Exit&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4988%" y="613" width="0.0789%" height="15" fill="rgb(252,136,11)" fg:x="57" fg:w="1"/><text x="4.7488%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.4988%" y="597" width="0.0789%" height="15" fill="rgb(219,138,53)" fg:x="57" fg:w="1"/><text x="4.7488%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4988%" y="581" width="0.0789%" height="15" fill="rgb(211,51,23)" fg:x="57" fg:w="1"/><text x="4.7488%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.4988%" y="565" width="0.0789%" height="15" fill="rgb(247,221,28)" fg:x="57" fg:w="1"/><text x="4.7488%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.4988%" y="549" width="0.0789%" height="15" fill="rgb(251,222,45)" fg:x="57" fg:w="1"/><text x="4.7488%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.4988%" y="533" width="0.0789%" height="15" fill="rgb(217,162,53)" fg:x="57" fg:w="1"/><text x="4.7488%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="4.4988%" y="517" width="0.0789%" height="15" fill="rgb(229,93,14)" fg:x="57" fg:w="1"/><text x="4.7488%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="4.5777%" y="597" width="0.0789%" height="15" fill="rgb(209,67,49)" fg:x="58" fg:w="1"/><text x="4.8277%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5777%" y="581" width="0.0789%" height="15" fill="rgb(213,87,29)" fg:x="58" fg:w="1"/><text x="4.8277%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.5777%" y="565" width="0.0789%" height="15" fill="rgb(205,151,52)" fg:x="58" fg:w="1"/><text x="4.8277%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.6567%" y="565" width="0.0789%" height="15" fill="rgb(253,215,39)" fg:x="59" fg:w="1"/><text x="4.9067%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.6567%" y="549" width="0.0789%" height="15" fill="rgb(221,220,41)" fg:x="59" fg:w="1"/><text x="4.9067%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.6567%" y="533" width="0.0789%" height="15" fill="rgb(218,133,21)" fg:x="59" fg:w="1"/><text x="4.9067%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6567%" y="517" width="0.0789%" height="15" fill="rgb(221,193,43)" fg:x="59" fg:w="1"/><text x="4.9067%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.6567%" y="501" width="0.0789%" height="15" fill="rgb(240,128,52)" fg:x="59" fg:w="1"/><text x="4.9067%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.6567%" y="485" width="0.0789%" height="15" fill="rgb(253,114,12)" fg:x="59" fg:w="1"/><text x="4.9067%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.6567%" y="469" width="0.0789%" height="15" fill="rgb(215,223,47)" fg:x="59" fg:w="1"/><text x="4.9067%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.6567%" y="453" width="0.0789%" height="15" fill="rgb(248,225,23)" fg:x="59" fg:w="1"/><text x="4.9067%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.6567%" y="437" width="0.0789%" height="15" fill="rgb(250,108,0)" fg:x="59" fg:w="1"/><text x="4.9067%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="4.5777%" y="613" width="0.2368%" height="15" fill="rgb(228,208,7)" fg:x="58" fg:w="3"/><text x="4.8277%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.6567%" y="597" width="0.1579%" height="15" fill="rgb(244,45,10)" fg:x="59" fg:w="2"/><text x="4.9067%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.6567%" y="581" width="0.1579%" height="15" fill="rgb(207,125,25)" fg:x="59" fg:w="2"/><text x="4.9067%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7356%" y="565" width="0.0789%" height="15" fill="rgb(210,195,18)" fg:x="60" fg:w="1"/><text x="4.9856%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7356%" y="549" width="0.0789%" height="15" fill="rgb(249,80,12)" fg:x="60" fg:w="1"/><text x="4.9856%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7356%" y="533" width="0.0789%" height="15" fill="rgb(221,65,9)" fg:x="60" fg:w="1"/><text x="4.9856%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.7356%" y="517" width="0.0789%" height="15" fill="rgb(235,49,36)" fg:x="60" fg:w="1"/><text x="4.9856%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.7356%" y="501" width="0.0789%" height="15" fill="rgb(225,32,20)" fg:x="60" fg:w="1"/><text x="4.9856%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.8145%" y="613" width="0.0789%" height="15" fill="rgb(215,141,46)" fg:x="61" fg:w="1"/><text x="5.0645%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.8145%" y="597" width="0.0789%" height="15" fill="rgb(250,160,47)" fg:x="61" fg:w="1"/><text x="5.0645%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.8145%" y="581" width="0.0789%" height="15" fill="rgb(216,222,40)" fg:x="61" fg:w="1"/><text x="5.0645%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.8145%" y="565" width="0.0789%" height="15" fill="rgb(234,217,39)" fg:x="61" fg:w="1"/><text x="5.0645%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.8145%" y="549" width="0.0789%" height="15" fill="rgb(207,178,40)" fg:x="61" fg:w="1"/><text x="5.0645%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="4.8145%" y="533" width="0.0789%" height="15" fill="rgb(221,136,13)" fg:x="61" fg:w="1"/><text x="5.0645%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.8145%" y="517" width="0.0789%" height="15" fill="rgb(249,199,10)" fg:x="61" fg:w="1"/><text x="5.0645%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.8145%" y="501" width="0.0789%" height="15" fill="rgb(249,222,13)" fg:x="61" fg:w="1"/><text x="5.0645%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8934%" y="565" width="0.0789%" height="15" fill="rgb(244,185,38)" fg:x="62" fg:w="1"/><text x="5.1434%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8934%" y="549" width="0.0789%" height="15" fill="rgb(236,202,9)" fg:x="62" fg:w="1"/><text x="5.1434%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="4.9724%" y="565" width="0.0789%" height="15" fill="rgb(250,229,37)" fg:x="63" fg:w="1"/><text x="5.2224%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.9724%" y="549" width="0.0789%" height="15" fill="rgb(206,174,23)" fg:x="63" fg:w="1"/><text x="5.2224%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.9724%" y="533" width="0.0789%" height="15" fill="rgb(211,33,43)" fg:x="63" fg:w="1"/><text x="5.2224%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.9724%" y="517" width="0.0789%" height="15" fill="rgb(245,58,50)" fg:x="63" fg:w="1"/><text x="5.2224%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9724%" y="501" width="0.0789%" height="15" fill="rgb(244,68,36)" fg:x="63" fg:w="1"/><text x="5.2224%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1302%" y="517" width="0.0789%" height="15" fill="rgb(232,229,15)" fg:x="65" fg:w="1"/><text x="5.3802%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="5.2092%" y="501" width="0.0789%" height="15" fill="rgb(254,30,23)" fg:x="66" fg:w="1"/><text x="5.4592%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2092%" y="485" width="0.0789%" height="15" fill="rgb(235,160,14)" fg:x="66" fg:w="1"/><text x="5.4592%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="5.2092%" y="517" width="0.1579%" height="15" fill="rgb(212,155,44)" fg:x="66" fg:w="2"/><text x="5.4592%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2881%" y="501" width="0.0789%" height="15" fill="rgb(226,2,50)" fg:x="67" fg:w="1"/><text x="5.5381%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2881%" y="485" width="0.0789%" height="15" fill="rgb(234,177,6)" fg:x="67" fg:w="1"/><text x="5.5381%" y="495.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.10%)</title><rect x="4.5777%" y="709" width="1.1050%" height="15" fill="rgb(217,24,9)" fg:x="58" fg:w="14"/><text x="4.8277%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (14 samples, 1.10%)</title><rect x="4.5777%" y="693" width="1.1050%" height="15" fill="rgb(220,13,46)" fg:x="58" fg:w="14"/><text x="4.8277%" y="703.50"></text></g><g><title>engine::session::state::State::close (14 samples, 1.10%)</title><rect x="4.5777%" y="677" width="1.1050%" height="15" fill="rgb(239,221,27)" fg:x="58" fg:w="14"/><text x="4.8277%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (14 samples, 1.10%)</title><rect x="4.5777%" y="661" width="1.1050%" height="15" fill="rgb(222,198,25)" fg:x="58" fg:w="14"/><text x="4.8277%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (14 samples, 1.10%)</title><rect x="4.5777%" y="645" width="1.1050%" height="15" fill="rgb(211,99,13)" fg:x="58" fg:w="14"/><text x="4.8277%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (14 samples, 1.10%)</title><rect x="4.5777%" y="629" width="1.1050%" height="15" fill="rgb(232,111,31)" fg:x="58" fg:w="14"/><text x="4.8277%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.79%)</title><rect x="4.8934%" y="613" width="0.7893%" height="15" fill="rgb(245,82,37)" fg:x="62" fg:w="10"/><text x="5.1434%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.79%)</title><rect x="4.8934%" y="597" width="0.7893%" height="15" fill="rgb(227,149,46)" fg:x="62" fg:w="10"/><text x="5.1434%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.79%)</title><rect x="4.8934%" y="581" width="0.7893%" height="15" fill="rgb(218,36,50)" fg:x="62" fg:w="10"/><text x="5.1434%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.63%)</title><rect x="5.0513%" y="565" width="0.6314%" height="15" fill="rgb(226,80,48)" fg:x="64" fg:w="8"/><text x="5.3013%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.55%)</title><rect x="5.1302%" y="549" width="0.5525%" height="15" fill="rgb(238,224,15)" fg:x="65" fg:w="7"/><text x="5.3802%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.55%)</title><rect x="5.1302%" y="533" width="0.5525%" height="15" fill="rgb(241,136,10)" fg:x="65" fg:w="7"/><text x="5.3802%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="5.3670%" y="517" width="0.3157%" height="15" fill="rgb(208,32,45)" fg:x="68" fg:w="4"/><text x="5.6170%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.4459%" y="501" width="0.2368%" height="15" fill="rgb(207,135,9)" fg:x="69" fg:w="3"/><text x="5.6959%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="5.4459%" y="485" width="0.2368%" height="15" fill="rgb(206,86,44)" fg:x="69" fg:w="3"/><text x="5.6959%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.6038%" y="469" width="0.0789%" height="15" fill="rgb(245,177,15)" fg:x="71" fg:w="1"/><text x="5.8538%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6038%" y="453" width="0.0789%" height="15" fill="rgb(206,64,50)" fg:x="71" fg:w="1"/><text x="5.8538%" y="463.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="5.6827%" y="677" width="0.0789%" height="15" fill="rgb(234,36,40)" fg:x="72" fg:w="1"/><text x="5.9327%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.6827%" y="661" width="0.0789%" height="15" fill="rgb(213,64,8)" fg:x="72" fg:w="1"/><text x="5.9327%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6827%" y="645" width="0.0789%" height="15" fill="rgb(210,75,36)" fg:x="72" fg:w="1"/><text x="5.9327%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.6827%" y="629" width="0.0789%" height="15" fill="rgb(229,88,21)" fg:x="72" fg:w="1"/><text x="5.9327%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.6827%" y="693" width="0.1579%" height="15" fill="rgb(252,204,47)" fg:x="72" fg:w="2"/><text x="5.9327%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.7616%" y="677" width="0.0789%" height="15" fill="rgb(208,77,27)" fg:x="73" fg:w="1"/><text x="6.0116%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="5.7616%" y="661" width="0.0789%" height="15" fill="rgb(221,76,26)" fg:x="73" fg:w="1"/><text x="6.0116%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="5.7616%" y="645" width="0.0789%" height="15" fill="rgb(225,139,18)" fg:x="73" fg:w="1"/><text x="6.0116%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="5.7616%" y="629" width="0.0789%" height="15" fill="rgb(230,137,11)" fg:x="73" fg:w="1"/><text x="6.0116%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.7616%" y="613" width="0.0789%" height="15" fill="rgb(212,28,1)" fg:x="73" fg:w="1"/><text x="6.0116%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.7616%" y="597" width="0.0789%" height="15" fill="rgb(248,164,17)" fg:x="73" fg:w="1"/><text x="6.0116%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.7616%" y="581" width="0.0789%" height="15" fill="rgb(222,171,42)" fg:x="73" fg:w="1"/><text x="6.0116%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.7616%" y="565" width="0.0789%" height="15" fill="rgb(243,84,45)" fg:x="73" fg:w="1"/><text x="6.0116%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.7616%" y="549" width="0.0789%" height="15" fill="rgb(252,49,23)" fg:x="73" fg:w="1"/><text x="6.0116%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7616%" y="533" width="0.0789%" height="15" fill="rgb(215,19,7)" fg:x="73" fg:w="1"/><text x="6.0116%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8406%" y="597" width="0.0789%" height="15" fill="rgb(238,81,41)" fg:x="74" fg:w="1"/><text x="6.0906%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8406%" y="581" width="0.0789%" height="15" fill="rgb(210,199,37)" fg:x="74" fg:w="1"/><text x="6.0906%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8406%" y="565" width="0.0789%" height="15" fill="rgb(244,192,49)" fg:x="74" fg:w="1"/><text x="6.0906%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8406%" y="549" width="0.0789%" height="15" fill="rgb(226,211,11)" fg:x="74" fg:w="1"/><text x="6.0906%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="5.8406%" y="645" width="0.1579%" height="15" fill="rgb(236,162,54)" fg:x="74" fg:w="2"/><text x="6.0906%" y="655.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="5.8406%" y="629" width="0.1579%" height="15" fill="rgb(220,229,9)" fg:x="74" fg:w="2"/><text x="6.0906%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="5.8406%" y="613" width="0.1579%" height="15" fill="rgb(250,87,22)" fg:x="74" fg:w="2"/><text x="6.0906%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9195%" y="597" width="0.0789%" height="15" fill="rgb(239,43,17)" fg:x="75" fg:w="1"/><text x="6.1695%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9195%" y="581" width="0.0789%" height="15" fill="rgb(231,177,25)" fg:x="75" fg:w="1"/><text x="6.1695%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9195%" y="565" width="0.0789%" height="15" fill="rgb(219,179,1)" fg:x="75" fg:w="1"/><text x="6.1695%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9195%" y="549" width="0.0789%" height="15" fill="rgb(238,219,53)" fg:x="75" fg:w="1"/><text x="6.1695%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.9195%" y="533" width="0.0789%" height="15" fill="rgb(232,167,36)" fg:x="75" fg:w="1"/><text x="6.1695%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9195%" y="517" width="0.0789%" height="15" fill="rgb(244,19,51)" fg:x="75" fg:w="1"/><text x="6.1695%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9195%" y="501" width="0.0789%" height="15" fill="rgb(224,6,22)" fg:x="75" fg:w="1"/><text x="6.1695%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9195%" y="485" width="0.0789%" height="15" fill="rgb(224,145,5)" fg:x="75" fg:w="1"/><text x="6.1695%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9195%" y="469" width="0.0789%" height="15" fill="rgb(234,130,49)" fg:x="75" fg:w="1"/><text x="6.1695%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9195%" y="453" width="0.0789%" height="15" fill="rgb(254,6,2)" fg:x="75" fg:w="1"/><text x="6.1695%" y="463.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="5.8406%" y="677" width="0.2368%" height="15" fill="rgb(208,96,46)" fg:x="74" fg:w="3"/><text x="6.0906%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="5.8406%" y="661" width="0.2368%" height="15" fill="rgb(239,3,39)" fg:x="74" fg:w="3"/><text x="6.0906%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.9984%" y="645" width="0.0789%" height="15" fill="rgb(233,210,1)" fg:x="76" fg:w="1"/><text x="6.2484%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.9984%" y="629" width="0.0789%" height="15" fill="rgb(244,137,37)" fg:x="76" fg:w="1"/><text x="6.2484%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.9984%" y="613" width="0.0789%" height="15" fill="rgb(240,136,2)" fg:x="76" fg:w="1"/><text x="6.2484%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9984%" y="597" width="0.0789%" height="15" fill="rgb(239,18,37)" fg:x="76" fg:w="1"/><text x="6.2484%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9984%" y="581" width="0.0789%" height="15" fill="rgb(218,185,22)" fg:x="76" fg:w="1"/><text x="6.2484%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9984%" y="565" width="0.0789%" height="15" fill="rgb(225,218,4)" fg:x="76" fg:w="1"/><text x="6.2484%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9984%" y="549" width="0.0789%" height="15" fill="rgb(230,182,32)" fg:x="76" fg:w="1"/><text x="6.2484%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9984%" y="533" width="0.0789%" height="15" fill="rgb(242,56,43)" fg:x="76" fg:w="1"/><text x="6.2484%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9984%" y="517" width="0.0789%" height="15" fill="rgb(233,99,24)" fg:x="76" fg:w="1"/><text x="6.2484%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.9984%" y="501" width="0.0789%" height="15" fill="rgb(234,209,42)" fg:x="76" fg:w="1"/><text x="6.2484%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.9984%" y="485" width="0.0789%" height="15" fill="rgb(227,7,12)" fg:x="76" fg:w="1"/><text x="6.2484%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.9984%" y="469" width="0.0789%" height="15" fill="rgb(245,203,43)" fg:x="76" fg:w="1"/><text x="6.2484%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9984%" y="453" width="0.0789%" height="15" fill="rgb(238,205,33)" fg:x="76" fg:w="1"/><text x="6.2484%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9984%" y="437" width="0.0789%" height="15" fill="rgb(231,56,7)" fg:x="76" fg:w="1"/><text x="6.2484%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.9984%" y="421" width="0.0789%" height="15" fill="rgb(244,186,29)" fg:x="76" fg:w="1"/><text x="6.2484%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.9984%" y="405" width="0.0789%" height="15" fill="rgb(234,111,31)" fg:x="76" fg:w="1"/><text x="6.2484%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.9984%" y="389" width="0.0789%" height="15" fill="rgb(241,149,10)" fg:x="76" fg:w="1"/><text x="6.2484%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.9984%" y="373" width="0.0789%" height="15" fill="rgb(249,206,44)" fg:x="76" fg:w="1"/><text x="6.2484%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9984%" y="357" width="0.0789%" height="15" fill="rgb(251,153,30)" fg:x="76" fg:w="1"/><text x="6.2484%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0773%" y="581" width="0.0789%" height="15" fill="rgb(239,152,38)" fg:x="77" fg:w="1"/><text x="6.3273%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.0773%" y="565" width="0.0789%" height="15" fill="rgb(249,139,47)" fg:x="77" fg:w="1"/><text x="6.3273%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0773%" y="549" width="0.0789%" height="15" fill="rgb(244,64,35)" fg:x="77" fg:w="1"/><text x="6.3273%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.0773%" y="533" width="0.0789%" height="15" fill="rgb(216,46,15)" fg:x="77" fg:w="1"/><text x="6.3273%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0773%" y="517" width="0.0789%" height="15" fill="rgb(250,74,19)" fg:x="77" fg:w="1"/><text x="6.3273%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.0773%" y="629" width="0.1579%" height="15" fill="rgb(249,42,33)" fg:x="77" fg:w="2"/><text x="6.3273%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.0773%" y="613" width="0.1579%" height="15" fill="rgb(242,149,17)" fg:x="77" fg:w="2"/><text x="6.3273%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.0773%" y="597" width="0.1579%" height="15" fill="rgb(244,29,21)" fg:x="77" fg:w="2"/><text x="6.3273%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.1563%" y="581" width="0.0789%" height="15" fill="rgb(220,130,37)" fg:x="78" fg:w="1"/><text x="6.4063%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.1563%" y="565" width="0.0789%" height="15" fill="rgb(211,67,2)" fg:x="78" fg:w="1"/><text x="6.4063%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.1563%" y="549" width="0.0789%" height="15" fill="rgb(235,68,52)" fg:x="78" fg:w="1"/><text x="6.4063%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.1563%" y="533" width="0.0789%" height="15" fill="rgb(246,142,3)" fg:x="78" fg:w="1"/><text x="6.4063%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.1563%" y="517" width="0.0789%" height="15" fill="rgb(241,25,7)" fg:x="78" fg:w="1"/><text x="6.4063%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.1563%" y="501" width="0.0789%" height="15" fill="rgb(242,119,39)" fg:x="78" fg:w="1"/><text x="6.4063%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.1563%" y="485" width="0.0789%" height="15" fill="rgb(241,98,45)" fg:x="78" fg:w="1"/><text x="6.4063%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.1563%" y="469" width="0.0789%" height="15" fill="rgb(254,28,30)" fg:x="78" fg:w="1"/><text x="6.4063%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.1563%" y="453" width="0.0789%" height="15" fill="rgb(241,142,54)" fg:x="78" fg:w="1"/><text x="6.4063%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.2352%" y="581" width="0.0789%" height="15" fill="rgb(222,85,15)" fg:x="79" fg:w="1"/><text x="6.4852%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.2352%" y="565" width="0.0789%" height="15" fill="rgb(210,85,47)" fg:x="79" fg:w="1"/><text x="6.4852%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.2352%" y="549" width="0.0789%" height="15" fill="rgb(224,206,25)" fg:x="79" fg:w="1"/><text x="6.4852%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.2352%" y="533" width="0.0789%" height="15" fill="rgb(243,201,19)" fg:x="79" fg:w="1"/><text x="6.4852%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.2352%" y="517" width="0.0789%" height="15" fill="rgb(236,59,4)" fg:x="79" fg:w="1"/><text x="6.4852%" y="527.50"></text></g><g><title>plugins_core::build::Build::holding (9 samples, 0.71%)</title><rect x="5.6827%" y="709" width="0.7103%" height="15" fill="rgb(254,179,45)" fg:x="72" fg:w="9"/><text x="5.9327%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.55%)</title><rect x="5.8406%" y="693" width="0.5525%" height="15" fill="rgb(226,14,10)" fg:x="74" fg:w="7"/><text x="6.0906%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="6.0773%" y="677" width="0.3157%" height="15" fill="rgb(244,27,41)" fg:x="77" fg:w="4"/><text x="6.3273%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="6.0773%" y="661" width="0.3157%" height="15" fill="rgb(235,35,32)" fg:x="77" fg:w="4"/><text x="6.3273%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="6.0773%" y="645" width="0.3157%" height="15" fill="rgb(218,68,31)" fg:x="77" fg:w="4"/><text x="6.3273%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="6.2352%" y="629" width="0.1579%" height="15" fill="rgb(207,120,37)" fg:x="79" fg:w="2"/><text x="6.4852%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.2352%" y="613" width="0.1579%" height="15" fill="rgb(227,98,0)" fg:x="79" fg:w="2"/><text x="6.4852%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.2352%" y="597" width="0.1579%" height="15" fill="rgb(207,7,3)" fg:x="79" fg:w="2"/><text x="6.4852%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.3141%" y="581" width="0.0789%" height="15" fill="rgb(206,98,19)" fg:x="80" fg:w="1"/><text x="6.5641%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3141%" y="565" width="0.0789%" height="15" fill="rgb(217,5,26)" fg:x="80" fg:w="1"/><text x="6.5641%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.3141%" y="549" width="0.0789%" height="15" fill="rgb(235,190,38)" fg:x="80" fg:w="1"/><text x="6.5641%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3141%" y="533" width="0.0789%" height="15" fill="rgb(247,86,24)" fg:x="80" fg:w="1"/><text x="6.5641%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3931%" y="581" width="0.0789%" height="15" fill="rgb(205,101,16)" fg:x="81" fg:w="1"/><text x="6.6431%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3931%" y="565" width="0.0789%" height="15" fill="rgb(246,168,33)" fg:x="81" fg:w="1"/><text x="6.6431%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3931%" y="549" width="0.0789%" height="15" fill="rgb(231,114,1)" fg:x="81" fg:w="1"/><text x="6.6431%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.3931%" y="533" width="0.0789%" height="15" fill="rgb(207,184,53)" fg:x="81" fg:w="1"/><text x="6.6431%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.3931%" y="517" width="0.0789%" height="15" fill="rgb(224,95,51)" fg:x="81" fg:w="1"/><text x="6.6431%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.3931%" y="501" width="0.0789%" height="15" fill="rgb(212,188,45)" fg:x="81" fg:w="1"/><text x="6.6431%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3931%" y="485" width="0.0789%" height="15" fill="rgb(223,154,38)" fg:x="81" fg:w="1"/><text x="6.6431%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3931%" y="469" width="0.0789%" height="15" fill="rgb(251,22,52)" fg:x="81" fg:w="1"/><text x="6.6431%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.3931%" y="453" width="0.0789%" height="15" fill="rgb(229,209,22)" fg:x="81" fg:w="1"/><text x="6.6431%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.3931%" y="437" width="0.0789%" height="15" fill="rgb(234,138,34)" fg:x="81" fg:w="1"/><text x="6.6431%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.3931%" y="421" width="0.0789%" height="15" fill="rgb(212,95,11)" fg:x="81" fg:w="1"/><text x="6.6431%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.3931%" y="405" width="0.0789%" height="15" fill="rgb(240,179,47)" fg:x="81" fg:w="1"/><text x="6.6431%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3931%" y="389" width="0.0789%" height="15" fill="rgb(240,163,11)" fg:x="81" fg:w="1"/><text x="6.6431%" y="399.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="6.3931%" y="709" width="0.1579%" height="15" fill="rgb(236,37,12)" fg:x="81" fg:w="2"/><text x="6.6431%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.3931%" y="693" width="0.1579%" height="15" fill="rgb(232,164,16)" fg:x="81" fg:w="2"/><text x="6.6431%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.3931%" y="677" width="0.1579%" height="15" fill="rgb(244,205,15)" fg:x="81" fg:w="2"/><text x="6.6431%" y="687.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.3931%" y="661" width="0.1579%" height="15" fill="rgb(223,117,47)" fg:x="81" fg:w="2"/><text x="6.6431%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.3931%" y="645" width="0.1579%" height="15" fill="rgb(244,107,35)" fg:x="81" fg:w="2"/><text x="6.6431%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.3931%" y="629" width="0.1579%" height="15" fill="rgb(205,140,8)" fg:x="81" fg:w="2"/><text x="6.6431%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.3931%" y="613" width="0.1579%" height="15" fill="rgb(228,84,46)" fg:x="81" fg:w="2"/><text x="6.6431%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.3931%" y="597" width="0.1579%" height="15" fill="rgb(254,188,9)" fg:x="81" fg:w="2"/><text x="6.6431%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4720%" y="581" width="0.0789%" height="15" fill="rgb(206,112,54)" fg:x="82" fg:w="1"/><text x="6.7220%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4720%" y="565" width="0.0789%" height="15" fill="rgb(216,84,49)" fg:x="82" fg:w="1"/><text x="6.7220%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.4720%" y="549" width="0.0789%" height="15" fill="rgb(214,194,35)" fg:x="82" fg:w="1"/><text x="6.7220%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.4720%" y="533" width="0.0789%" height="15" fill="rgb(249,28,3)" fg:x="82" fg:w="1"/><text x="6.7220%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.4720%" y="517" width="0.0789%" height="15" fill="rgb(222,56,52)" fg:x="82" fg:w="1"/><text x="6.7220%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.4720%" y="501" width="0.0789%" height="15" fill="rgb(245,217,50)" fg:x="82" fg:w="1"/><text x="6.7220%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.4720%" y="485" width="0.0789%" height="15" fill="rgb(213,201,24)" fg:x="82" fg:w="1"/><text x="6.7220%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.4720%" y="469" width="0.0789%" height="15" fill="rgb(248,116,28)" fg:x="82" fg:w="1"/><text x="6.7220%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.4720%" y="453" width="0.0789%" height="15" fill="rgb(219,72,43)" fg:x="82" fg:w="1"/><text x="6.7220%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.4720%" y="437" width="0.0789%" height="15" fill="rgb(209,138,14)" fg:x="82" fg:w="1"/><text x="6.7220%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.4720%" y="421" width="0.0789%" height="15" fill="rgb(222,18,33)" fg:x="82" fg:w="1"/><text x="6.7220%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4720%" y="405" width="0.0789%" height="15" fill="rgb(213,199,7)" fg:x="82" fg:w="1"/><text x="6.7220%" y="415.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.5509%" y="709" width="0.0789%" height="15" fill="rgb(250,110,10)" fg:x="83" fg:w="1"/><text x="6.8009%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.5509%" y="693" width="0.0789%" height="15" fill="rgb(248,123,6)" fg:x="83" fg:w="1"/><text x="6.8009%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.5509%" y="677" width="0.0789%" height="15" fill="rgb(206,91,31)" fg:x="83" fg:w="1"/><text x="6.8009%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.5509%" y="661" width="0.0789%" height="15" fill="rgb(211,154,13)" fg:x="83" fg:w="1"/><text x="6.8009%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.5509%" y="645" width="0.0789%" height="15" fill="rgb(225,148,7)" fg:x="83" fg:w="1"/><text x="6.8009%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.5509%" y="629" width="0.0789%" height="15" fill="rgb(220,160,43)" fg:x="83" fg:w="1"/><text x="6.8009%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.5509%" y="613" width="0.0789%" height="15" fill="rgb(213,52,39)" fg:x="83" fg:w="1"/><text x="6.8009%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.5509%" y="597" width="0.0789%" height="15" fill="rgb(243,137,7)" fg:x="83" fg:w="1"/><text x="6.8009%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.5509%" y="581" width="0.0789%" height="15" fill="rgb(230,79,13)" fg:x="83" fg:w="1"/><text x="6.8009%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.5509%" y="565" width="0.0789%" height="15" fill="rgb(247,105,23)" fg:x="83" fg:w="1"/><text x="6.8009%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.6298%" y="693" width="0.0789%" height="15" fill="rgb(223,179,41)" fg:x="84" fg:w="1"/><text x="6.8798%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.6298%" y="677" width="0.0789%" height="15" fill="rgb(218,9,34)" fg:x="84" fg:w="1"/><text x="6.8798%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.6298%" y="661" width="0.0789%" height="15" fill="rgb(222,106,8)" fg:x="84" fg:w="1"/><text x="6.8798%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.6298%" y="645" width="0.0789%" height="15" fill="rgb(211,220,0)" fg:x="84" fg:w="1"/><text x="6.8798%" y="655.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.6298%" y="629" width="0.0789%" height="15" fill="rgb(229,52,16)" fg:x="84" fg:w="1"/><text x="6.8798%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.6298%" y="613" width="0.0789%" height="15" fill="rgb(212,155,18)" fg:x="84" fg:w="1"/><text x="6.8798%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.6298%" y="597" width="0.0789%" height="15" fill="rgb(242,21,14)" fg:x="84" fg:w="1"/><text x="6.8798%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.7088%" y="645" width="0.0789%" height="15" fill="rgb(222,19,48)" fg:x="85" fg:w="1"/><text x="6.9588%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.7088%" y="629" width="0.0789%" height="15" fill="rgb(232,45,27)" fg:x="85" fg:w="1"/><text x="6.9588%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.7088%" y="613" width="0.0789%" height="15" fill="rgb(249,103,42)" fg:x="85" fg:w="1"/><text x="6.9588%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7088%" y="597" width="0.0789%" height="15" fill="rgb(246,81,33)" fg:x="85" fg:w="1"/><text x="6.9588%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7088%" y="581" width="0.0789%" height="15" fill="rgb(252,33,42)" fg:x="85" fg:w="1"/><text x="6.9588%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7088%" y="565" width="0.0789%" height="15" fill="rgb(209,212,41)" fg:x="85" fg:w="1"/><text x="6.9588%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7088%" y="549" width="0.0789%" height="15" fill="rgb(207,154,6)" fg:x="85" fg:w="1"/><text x="6.9588%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7088%" y="533" width="0.0789%" height="15" fill="rgb(223,64,47)" fg:x="85" fg:w="1"/><text x="6.9588%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (41 samples, 3.24%)</title><rect x="3.6306%" y="725" width="3.2360%" height="15" fill="rgb(211,161,38)" fg:x="46" fg:w="41"/><text x="3.8806%" y="735.50">plu..</text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="6.6298%" y="709" width="0.2368%" height="15" fill="rgb(219,138,40)" fg:x="84" fg:w="3"/><text x="6.8798%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="6.7088%" y="693" width="0.1579%" height="15" fill="rgb(241,228,46)" fg:x="85" fg:w="2"/><text x="6.9588%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="6.7088%" y="677" width="0.1579%" height="15" fill="rgb(223,209,38)" fg:x="85" fg:w="2"/><text x="6.9588%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="6.7088%" y="661" width="0.1579%" height="15" fill="rgb(236,164,45)" fg:x="85" fg:w="2"/><text x="6.9588%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.7877%" y="645" width="0.0789%" height="15" fill="rgb(231,15,5)" fg:x="86" fg:w="1"/><text x="7.0377%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.7877%" y="629" width="0.0789%" height="15" fill="rgb(252,35,15)" fg:x="86" fg:w="1"/><text x="7.0377%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.7877%" y="613" width="0.0789%" height="15" fill="rgb(248,181,18)" fg:x="86" fg:w="1"/><text x="7.0377%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7877%" y="597" width="0.0789%" height="15" fill="rgb(233,39,42)" fg:x="86" fg:w="1"/><text x="7.0377%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7877%" y="581" width="0.0789%" height="15" fill="rgb(238,110,33)" fg:x="86" fg:w="1"/><text x="7.0377%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7877%" y="565" width="0.0789%" height="15" fill="rgb(233,195,10)" fg:x="86" fg:w="1"/><text x="7.0377%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7877%" y="549" width="0.0789%" height="15" fill="rgb(254,105,3)" fg:x="86" fg:w="1"/><text x="7.0377%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.7877%" y="533" width="0.0789%" height="15" fill="rgb(221,225,9)" fg:x="86" fg:w="1"/><text x="7.0377%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.7877%" y="517" width="0.0789%" height="15" fill="rgb(224,227,45)" fg:x="86" fg:w="1"/><text x="7.0377%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.7877%" y="501" width="0.0789%" height="15" fill="rgb(229,198,43)" fg:x="86" fg:w="1"/><text x="7.0377%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.7877%" y="485" width="0.0789%" height="15" fill="rgb(206,209,35)" fg:x="86" fg:w="1"/><text x="7.0377%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.7877%" y="469" width="0.0789%" height="15" fill="rgb(245,195,53)" fg:x="86" fg:w="1"/><text x="7.0377%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.7877%" y="453" width="0.0789%" height="15" fill="rgb(240,92,26)" fg:x="86" fg:w="1"/><text x="7.0377%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.7877%" y="437" width="0.0789%" height="15" fill="rgb(207,40,23)" fg:x="86" fg:w="1"/><text x="7.0377%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.7877%" y="421" width="0.0789%" height="15" fill="rgb(223,111,35)" fg:x="86" fg:w="1"/><text x="7.0377%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.7877%" y="405" width="0.0789%" height="15" fill="rgb(229,147,28)" fg:x="86" fg:w="1"/><text x="7.0377%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.7877%" y="389" width="0.0789%" height="15" fill="rgb(211,29,28)" fg:x="86" fg:w="1"/><text x="7.0377%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.7877%" y="373" width="0.0789%" height="15" fill="rgb(228,72,33)" fg:x="86" fg:w="1"/><text x="7.0377%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.7877%" y="357" width="0.0789%" height="15" fill="rgb(205,214,31)" fg:x="86" fg:w="1"/><text x="7.0377%" y="367.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="6.8666%" y="725" width="0.0789%" height="15" fill="rgb(224,111,15)" fg:x="87" fg:w="1"/><text x="7.1166%" y="735.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="6.8666%" y="709" width="0.0789%" height="15" fill="rgb(253,21,26)" fg:x="87" fg:w="1"/><text x="7.1166%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="6.8666%" y="693" width="0.0789%" height="15" fill="rgb(245,139,43)" fg:x="87" fg:w="1"/><text x="7.1166%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="6.8666%" y="677" width="0.0789%" height="15" fill="rgb(252,170,7)" fg:x="87" fg:w="1"/><text x="7.1166%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="6.8666%" y="661" width="0.0789%" height="15" fill="rgb(231,118,14)" fg:x="87" fg:w="1"/><text x="7.1166%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="6.8666%" y="645" width="0.0789%" height="15" fill="rgb(238,83,0)" fg:x="87" fg:w="1"/><text x="7.1166%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.8666%" y="629" width="0.0789%" height="15" fill="rgb(221,39,39)" fg:x="87" fg:w="1"/><text x="7.1166%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.8666%" y="613" width="0.0789%" height="15" fill="rgb(222,119,46)" fg:x="87" fg:w="1"/><text x="7.1166%" y="623.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="6.8666%" y="597" width="0.0789%" height="15" fill="rgb(222,165,49)" fg:x="87" fg:w="1"/><text x="7.1166%" y="607.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="6.8666%" y="581" width="0.0789%" height="15" fill="rgb(219,113,52)" fg:x="87" fg:w="1"/><text x="7.1166%" y="591.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="6.8666%" y="565" width="0.0789%" height="15" fill="rgb(214,7,15)" fg:x="87" fg:w="1"/><text x="7.1166%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.9455%" y="677" width="0.0789%" height="15" fill="rgb(235,32,4)" fg:x="88" fg:w="1"/><text x="7.1955%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.9455%" y="661" width="0.0789%" height="15" fill="rgb(238,90,54)" fg:x="88" fg:w="1"/><text x="7.1955%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.9455%" y="645" width="0.0789%" height="15" fill="rgb(213,208,19)" fg:x="88" fg:w="1"/><text x="7.1955%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9455%" y="629" width="0.0789%" height="15" fill="rgb(233,156,4)" fg:x="88" fg:w="1"/><text x="7.1955%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9455%" y="613" width="0.0789%" height="15" fill="rgb(207,194,5)" fg:x="88" fg:w="1"/><text x="7.1955%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9455%" y="597" width="0.0789%" height="15" fill="rgb(206,111,30)" fg:x="88" fg:w="1"/><text x="7.1955%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.9455%" y="581" width="0.0789%" height="15" fill="rgb(243,70,54)" fg:x="88" fg:w="1"/><text x="7.1955%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.9455%" y="565" width="0.0789%" height="15" fill="rgb(242,28,8)" fg:x="88" fg:w="1"/><text x="7.1955%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.9455%" y="549" width="0.0789%" height="15" fill="rgb(219,106,18)" fg:x="88" fg:w="1"/><text x="7.1955%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.9455%" y="533" width="0.0789%" height="15" fill="rgb(244,222,10)" fg:x="88" fg:w="1"/><text x="7.1955%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.9455%" y="517" width="0.0789%" height="15" fill="rgb(236,179,52)" fg:x="88" fg:w="1"/><text x="7.1955%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.9455%" y="501" width="0.0789%" height="15" fill="rgb(213,23,39)" fg:x="88" fg:w="1"/><text x="7.1955%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.9455%" y="485" width="0.0789%" height="15" fill="rgb(238,48,10)" fg:x="88" fg:w="1"/><text x="7.1955%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.9455%" y="469" width="0.0789%" height="15" fill="rgb(251,196,23)" fg:x="88" fg:w="1"/><text x="7.1955%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.9455%" y="453" width="0.0789%" height="15" fill="rgb(250,152,24)" fg:x="88" fg:w="1"/><text x="7.1955%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9455%" y="437" width="0.0789%" height="15" fill="rgb(209,150,17)" fg:x="88" fg:w="1"/><text x="7.1955%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.9455%" y="693" width="0.1579%" height="15" fill="rgb(234,202,34)" fg:x="88" fg:w="2"/><text x="7.1955%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.0245%" y="677" width="0.0789%" height="15" fill="rgb(253,148,53)" fg:x="89" fg:w="1"/><text x="7.2745%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.0245%" y="661" width="0.0789%" height="15" fill="rgb(218,129,16)" fg:x="89" fg:w="1"/><text x="7.2745%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.0245%" y="645" width="0.0789%" height="15" fill="rgb(216,85,19)" fg:x="89" fg:w="1"/><text x="7.2745%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.0245%" y="629" width="0.0789%" height="15" fill="rgb(235,228,7)" fg:x="89" fg:w="1"/><text x="7.2745%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.0245%" y="613" width="0.0789%" height="15" fill="rgb(245,175,0)" fg:x="89" fg:w="1"/><text x="7.2745%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0245%" y="597" width="0.0789%" height="15" fill="rgb(208,168,36)" fg:x="89" fg:w="1"/><text x="7.2745%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.0245%" y="581" width="0.0789%" height="15" fill="rgb(246,171,24)" fg:x="89" fg:w="1"/><text x="7.2745%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0245%" y="565" width="0.0789%" height="15" fill="rgb(215,142,24)" fg:x="89" fg:w="1"/><text x="7.2745%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.0245%" y="549" width="0.0789%" height="15" fill="rgb(250,187,7)" fg:x="89" fg:w="1"/><text x="7.2745%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.0245%" y="533" width="0.0789%" height="15" fill="rgb(228,66,33)" fg:x="89" fg:w="1"/><text x="7.2745%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0245%" y="517" width="0.0789%" height="15" fill="rgb(234,215,21)" fg:x="89" fg:w="1"/><text x="7.2745%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.0245%" y="501" width="0.0789%" height="15" fill="rgb(222,191,20)" fg:x="89" fg:w="1"/><text x="7.2745%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0245%" y="485" width="0.0789%" height="15" fill="rgb(245,79,54)" fg:x="89" fg:w="1"/><text x="7.2745%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0245%" y="469" width="0.0789%" height="15" fill="rgb(240,10,37)" fg:x="89" fg:w="1"/><text x="7.2745%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.0245%" y="453" width="0.0789%" height="15" fill="rgb(214,192,32)" fg:x="89" fg:w="1"/><text x="7.2745%" y="463.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="6.9455%" y="725" width="0.2368%" height="15" fill="rgb(209,36,54)" fg:x="88" fg:w="3"/><text x="7.1955%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="6.9455%" y="709" width="0.2368%" height="15" fill="rgb(220,10,11)" fg:x="88" fg:w="3"/><text x="7.1955%" y="719.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="7.1034%" y="693" width="0.0789%" height="15" fill="rgb(221,106,17)" fg:x="90" fg:w="1"/><text x="7.3534%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="7.1034%" y="677" width="0.0789%" height="15" fill="rgb(251,142,44)" fg:x="90" fg:w="1"/><text x="7.3534%" y="687.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.1034%" y="661" width="0.0789%" height="15" fill="rgb(238,13,15)" fg:x="90" fg:w="1"/><text x="7.3534%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.1034%" y="645" width="0.0789%" height="15" fill="rgb(208,107,27)" fg:x="90" fg:w="1"/><text x="7.3534%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1034%" y="629" width="0.0789%" height="15" fill="rgb(205,136,37)" fg:x="90" fg:w="1"/><text x="7.3534%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.1034%" y="613" width="0.0789%" height="15" fill="rgb(250,205,27)" fg:x="90" fg:w="1"/><text x="7.3534%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1034%" y="597" width="0.0789%" height="15" fill="rgb(210,80,43)" fg:x="90" fg:w="1"/><text x="7.3534%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.1034%" y="581" width="0.0789%" height="15" fill="rgb(247,160,36)" fg:x="90" fg:w="1"/><text x="7.3534%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.1034%" y="565" width="0.0789%" height="15" fill="rgb(234,13,49)" fg:x="90" fg:w="1"/><text x="7.3534%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1034%" y="549" width="0.0789%" height="15" fill="rgb(234,122,0)" fg:x="90" fg:w="1"/><text x="7.3534%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.1034%" y="533" width="0.0789%" height="15" fill="rgb(207,146,38)" fg:x="90" fg:w="1"/><text x="7.3534%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (77 samples, 6.08%)</title><rect x="1.3418%" y="741" width="6.0773%" height="15" fill="rgb(207,177,25)" fg:x="17" fg:w="77"/><text x="1.5918%" y="751.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="7.1823%" y="725" width="0.2368%" height="15" fill="rgb(211,178,42)" fg:x="91" fg:w="3"/><text x="7.4323%" y="735.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="7.2612%" y="709" width="0.1579%" height="15" fill="rgb(230,69,54)" fg:x="92" fg:w="2"/><text x="7.5112%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="7.3402%" y="693" width="0.0789%" height="15" fill="rgb(214,135,41)" fg:x="93" fg:w="1"/><text x="7.5902%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="7.3402%" y="677" width="0.0789%" height="15" fill="rgb(237,67,25)" fg:x="93" fg:w="1"/><text x="7.5902%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.3402%" y="661" width="0.0789%" height="15" fill="rgb(222,189,50)" fg:x="93" fg:w="1"/><text x="7.5902%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.3402%" y="645" width="0.0789%" height="15" fill="rgb(245,148,34)" fg:x="93" fg:w="1"/><text x="7.5902%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.3402%" y="629" width="0.0789%" height="15" fill="rgb(222,29,6)" fg:x="93" fg:w="1"/><text x="7.5902%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.3402%" y="613" width="0.0789%" height="15" fill="rgb(221,189,43)" fg:x="93" fg:w="1"/><text x="7.5902%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3402%" y="597" width="0.0789%" height="15" fill="rgb(207,36,27)" fg:x="93" fg:w="1"/><text x="7.5902%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.3402%" y="581" width="0.0789%" height="15" fill="rgb(217,90,24)" fg:x="93" fg:w="1"/><text x="7.5902%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3402%" y="565" width="0.0789%" height="15" fill="rgb(224,66,35)" fg:x="93" fg:w="1"/><text x="7.5902%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.3402%" y="549" width="0.0789%" height="15" fill="rgb(221,13,50)" fg:x="93" fg:w="1"/><text x="7.5902%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3402%" y="533" width="0.0789%" height="15" fill="rgb(236,68,49)" fg:x="93" fg:w="1"/><text x="7.5902%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="7.4191%" y="741" width="0.0789%" height="15" fill="rgb(229,146,28)" fg:x="94" fg:w="1"/><text x="7.6691%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="7.4191%" y="725" width="0.0789%" height="15" fill="rgb(225,31,38)" fg:x="94" fg:w="1"/><text x="7.6691%" y="735.50"></text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="7.4980%" y="725" width="0.0789%" height="15" fill="rgb(250,208,3)" fg:x="95" fg:w="1"/><text x="7.7480%" y="735.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="7.5770%" y="661" width="0.0789%" height="15" fill="rgb(246,54,23)" fg:x="96" fg:w="1"/><text x="7.8270%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="7.5770%" y="693" width="0.1579%" height="15" fill="rgb(243,76,11)" fg:x="96" fg:w="2"/><text x="7.8270%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="7.5770%" y="677" width="0.1579%" height="15" fill="rgb(245,21,50)" fg:x="96" fg:w="2"/><text x="7.8270%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="7.6559%" y="661" width="0.0789%" height="15" fill="rgb(228,9,43)" fg:x="97" fg:w="1"/><text x="7.9059%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.7348%" y="645" width="0.0789%" height="15" fill="rgb(208,100,47)" fg:x="98" fg:w="1"/><text x="7.9848%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.7348%" y="629" width="0.0789%" height="15" fill="rgb(232,26,8)" fg:x="98" fg:w="1"/><text x="7.9848%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7348%" y="613" width="0.0789%" height="15" fill="rgb(216,166,38)" fg:x="98" fg:w="1"/><text x="7.9848%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7348%" y="597" width="0.0789%" height="15" fill="rgb(251,202,51)" fg:x="98" fg:w="1"/><text x="7.9848%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8137%" y="629" width="0.0789%" height="15" fill="rgb(254,216,34)" fg:x="99" fg:w="1"/><text x="8.0637%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8137%" y="613" width="0.0789%" height="15" fill="rgb(251,32,27)" fg:x="99" fg:w="1"/><text x="8.0637%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.8137%" y="597" width="0.0789%" height="15" fill="rgb(208,127,28)" fg:x="99" fg:w="1"/><text x="8.0637%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.8137%" y="581" width="0.0789%" height="15" fill="rgb(224,137,22)" fg:x="99" fg:w="1"/><text x="8.0637%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.8137%" y="565" width="0.0789%" height="15" fill="rgb(254,70,32)" fg:x="99" fg:w="1"/><text x="8.0637%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.8137%" y="549" width="0.0789%" height="15" fill="rgb(229,75,37)" fg:x="99" fg:w="1"/><text x="8.0637%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.8137%" y="533" width="0.0789%" height="15" fill="rgb(252,64,23)" fg:x="99" fg:w="1"/><text x="8.0637%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8927%" y="581" width="0.0789%" height="15" fill="rgb(232,162,48)" fg:x="100" fg:w="1"/><text x="8.1427%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8927%" y="565" width="0.0789%" height="15" fill="rgb(246,160,12)" fg:x="100" fg:w="1"/><text x="8.1427%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.8927%" y="549" width="0.0789%" height="15" fill="rgb(247,166,0)" fg:x="100" fg:w="1"/><text x="8.1427%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.8927%" y="533" width="0.0789%" height="15" fill="rgb(249,219,21)" fg:x="100" fg:w="1"/><text x="8.1427%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="7.8927%" y="613" width="0.2368%" height="15" fill="rgb(205,209,3)" fg:x="100" fg:w="3"/><text x="8.1427%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.8927%" y="597" width="0.2368%" height="15" fill="rgb(243,44,1)" fg:x="100" fg:w="3"/><text x="8.1427%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.9716%" y="581" width="0.1579%" height="15" fill="rgb(206,159,16)" fg:x="101" fg:w="2"/><text x="8.2216%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.0505%" y="565" width="0.0789%" height="15" fill="rgb(244,77,30)" fg:x="102" fg:w="1"/><text x="8.3005%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.1294%" y="613" width="0.0789%" height="15" fill="rgb(218,69,12)" fg:x="103" fg:w="1"/><text x="8.3794%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.2084%" y="581" width="0.0789%" height="15" fill="rgb(212,87,7)" fg:x="104" fg:w="1"/><text x="8.4584%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2084%" y="565" width="0.0789%" height="15" fill="rgb(245,114,25)" fg:x="104" fg:w="1"/><text x="8.4584%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.2084%" y="549" width="0.0789%" height="15" fill="rgb(210,61,42)" fg:x="104" fg:w="1"/><text x="8.4584%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="8.2084%" y="533" width="0.0789%" height="15" fill="rgb(211,52,33)" fg:x="104" fg:w="1"/><text x="8.4584%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2873%" y="581" width="0.0789%" height="15" fill="rgb(234,58,33)" fg:x="105" fg:w="1"/><text x="8.5373%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2873%" y="565" width="0.0789%" height="15" fill="rgb(220,115,36)" fg:x="105" fg:w="1"/><text x="8.5373%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.2873%" y="549" width="0.0789%" height="15" fill="rgb(243,153,54)" fg:x="105" fg:w="1"/><text x="8.5373%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2873%" y="533" width="0.0789%" height="15" fill="rgb(251,47,18)" fg:x="105" fg:w="1"/><text x="8.5373%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.2873%" y="517" width="0.0789%" height="15" fill="rgb(242,102,42)" fg:x="105" fg:w="1"/><text x="8.5373%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.2873%" y="501" width="0.0789%" height="15" fill="rgb(234,31,38)" fg:x="105" fg:w="1"/><text x="8.5373%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.2873%" y="485" width="0.0789%" height="15" fill="rgb(221,117,51)" fg:x="105" fg:w="1"/><text x="8.5373%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.2873%" y="469" width="0.0789%" height="15" fill="rgb(212,20,18)" fg:x="105" fg:w="1"/><text x="8.5373%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.2873%" y="453" width="0.0789%" height="15" fill="rgb(245,133,36)" fg:x="105" fg:w="1"/><text x="8.5373%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="7.8927%" y="629" width="0.5525%" height="15" fill="rgb(212,6,19)" fg:x="100" fg:w="7"/><text x="8.1427%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.2084%" y="613" width="0.2368%" height="15" fill="rgb(218,1,36)" fg:x="104" fg:w="3"/><text x="8.4584%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.2084%" y="597" width="0.2368%" height="15" fill="rgb(246,84,54)" fg:x="104" fg:w="3"/><text x="8.4584%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.3662%" y="581" width="0.0789%" height="15" fill="rgb(242,110,6)" fg:x="106" fg:w="1"/><text x="8.6162%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.3662%" y="565" width="0.0789%" height="15" fill="rgb(214,47,5)" fg:x="106" fg:w="1"/><text x="8.6162%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.3662%" y="549" width="0.0789%" height="15" fill="rgb(218,159,25)" fg:x="106" fg:w="1"/><text x="8.6162%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.79%)</title><rect x="7.7348%" y="661" width="0.7893%" height="15" fill="rgb(215,211,28)" fg:x="98" fg:w="10"/><text x="7.9848%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="7.8137%" y="645" width="0.7103%" height="15" fill="rgb(238,59,32)" fg:x="99" fg:w="9"/><text x="8.0637%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4451%" y="629" width="0.0789%" height="15" fill="rgb(226,82,3)" fg:x="107" fg:w="1"/><text x="8.6951%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.4451%" y="613" width="0.0789%" height="15" fill="rgb(240,164,32)" fg:x="107" fg:w="1"/><text x="8.6951%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.4451%" y="597" width="0.0789%" height="15" fill="rgb(232,46,7)" fg:x="107" fg:w="1"/><text x="8.6951%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5241%" y="661" width="0.0789%" height="15" fill="rgb(229,129,53)" fg:x="108" fg:w="1"/><text x="8.7741%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.5241%" y="645" width="0.0789%" height="15" fill="rgb(234,188,29)" fg:x="108" fg:w="1"/><text x="8.7741%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5241%" y="629" width="0.0789%" height="15" fill="rgb(246,141,4)" fg:x="108" fg:w="1"/><text x="8.7741%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5241%" y="613" width="0.0789%" height="15" fill="rgb(229,23,39)" fg:x="108" fg:w="1"/><text x="8.7741%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5241%" y="597" width="0.0789%" height="15" fill="rgb(206,12,3)" fg:x="108" fg:w="1"/><text x="8.7741%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5241%" y="581" width="0.0789%" height="15" fill="rgb(252,226,20)" fg:x="108" fg:w="1"/><text x="8.7741%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5241%" y="565" width="0.0789%" height="15" fill="rgb(216,123,35)" fg:x="108" fg:w="1"/><text x="8.7741%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5241%" y="549" width="0.0789%" height="15" fill="rgb(212,68,40)" fg:x="108" fg:w="1"/><text x="8.7741%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6030%" y="581" width="0.0789%" height="15" fill="rgb(254,125,32)" fg:x="109" fg:w="1"/><text x="8.8530%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.6819%" y="581" width="0.0789%" height="15" fill="rgb(253,97,22)" fg:x="110" fg:w="1"/><text x="8.9319%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7609%" y="565" width="0.0789%" height="15" fill="rgb(241,101,14)" fg:x="111" fg:w="1"/><text x="9.0109%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.8398%" y="549" width="0.0789%" height="15" fill="rgb(238,103,29)" fg:x="112" fg:w="1"/><text x="9.0898%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.8398%" y="533" width="0.0789%" height="15" fill="rgb(233,195,47)" fg:x="112" fg:w="1"/><text x="9.0898%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.9187%" y="517" width="0.1579%" height="15" fill="rgb(246,218,30)" fg:x="113" fg:w="2"/><text x="9.1687%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.55%)</title><rect x="8.6030%" y="629" width="0.5525%" height="15" fill="rgb(219,145,47)" fg:x="109" fg:w="7"/><text x="8.8530%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.55%)</title><rect x="8.6030%" y="613" width="0.5525%" height="15" fill="rgb(243,12,26)" fg:x="109" fg:w="7"/><text x="8.8530%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.55%)</title><rect x="8.6030%" y="597" width="0.5525%" height="15" fill="rgb(214,87,16)" fg:x="109" fg:w="7"/><text x="8.8530%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="8.7609%" y="581" width="0.3946%" height="15" fill="rgb(208,99,42)" fg:x="111" fg:w="5"/><text x="9.0109%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.8398%" y="565" width="0.3157%" height="15" fill="rgb(253,99,2)" fg:x="112" fg:w="4"/><text x="9.0898%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.9187%" y="549" width="0.2368%" height="15" fill="rgb(220,168,23)" fg:x="113" fg:w="3"/><text x="9.1687%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.9187%" y="533" width="0.2368%" height="15" fill="rgb(242,38,24)" fg:x="113" fg:w="3"/><text x="9.1687%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.0766%" y="517" width="0.0789%" height="15" fill="rgb(225,182,9)" fg:x="115" fg:w="1"/><text x="9.3266%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.63%)</title><rect x="8.6030%" y="645" width="0.6314%" height="15" fill="rgb(243,178,37)" fg:x="109" fg:w="8"/><text x="8.8530%" y="655.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="9.1555%" y="629" width="0.0789%" height="15" fill="rgb(232,139,19)" fg:x="116" fg:w="1"/><text x="9.4055%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.1555%" y="613" width="0.0789%" height="15" fill="rgb(225,201,24)" fg:x="116" fg:w="1"/><text x="9.4055%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.1555%" y="597" width="0.0789%" height="15" fill="rgb(221,47,46)" fg:x="116" fg:w="1"/><text x="9.4055%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.1555%" y="581" width="0.0789%" height="15" fill="rgb(249,23,13)" fg:x="116" fg:w="1"/><text x="9.4055%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="9.1555%" y="565" width="0.0789%" height="15" fill="rgb(219,9,5)" fg:x="116" fg:w="1"/><text x="9.4055%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.1555%" y="549" width="0.0789%" height="15" fill="rgb(254,171,16)" fg:x="116" fg:w="1"/><text x="9.4055%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.2344%" y="613" width="0.0789%" height="15" fill="rgb(230,171,20)" fg:x="117" fg:w="1"/><text x="9.4844%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.2344%" y="597" width="0.0789%" height="15" fill="rgb(210,71,41)" fg:x="117" fg:w="1"/><text x="9.4844%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.3923%" y="581" width="0.0789%" height="15" fill="rgb(206,173,20)" fg:x="119" fg:w="1"/><text x="9.6423%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="9.4712%" y="581" width="0.0789%" height="15" fill="rgb(233,88,34)" fg:x="120" fg:w="1"/><text x="9.7212%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.5501%" y="533" width="0.0789%" height="15" fill="rgb(223,209,46)" fg:x="121" fg:w="1"/><text x="9.8001%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5501%" y="517" width="0.0789%" height="15" fill="rgb(250,43,18)" fg:x="121" fg:w="1"/><text x="9.8001%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="9.5501%" y="565" width="0.1579%" height="15" fill="rgb(208,13,10)" fg:x="121" fg:w="2"/><text x="9.8001%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.5501%" y="549" width="0.1579%" height="15" fill="rgb(212,200,36)" fg:x="121" fg:w="2"/><text x="9.8001%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6290%" y="533" width="0.0789%" height="15" fill="rgb(225,90,30)" fg:x="122" fg:w="1"/><text x="9.8790%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.63%)</title><rect x="9.2344%" y="645" width="0.6314%" height="15" fill="rgb(236,182,39)" fg:x="117" fg:w="8"/><text x="9.4844%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.63%)</title><rect x="9.2344%" y="629" width="0.6314%" height="15" fill="rgb(212,144,35)" fg:x="117" fg:w="8"/><text x="9.4844%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.55%)</title><rect x="9.3133%" y="613" width="0.5525%" height="15" fill="rgb(228,63,44)" fg:x="118" fg:w="7"/><text x="9.5633%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.47%)</title><rect x="9.3923%" y="597" width="0.4736%" height="15" fill="rgb(228,109,6)" fg:x="119" fg:w="6"/><text x="9.6423%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="9.5501%" y="581" width="0.3157%" height="15" fill="rgb(238,117,24)" fg:x="121" fg:w="4"/><text x="9.8001%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.7080%" y="565" width="0.1579%" height="15" fill="rgb(242,26,26)" fg:x="123" fg:w="2"/><text x="9.9580%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.7869%" y="549" width="0.0789%" height="15" fill="rgb(221,92,48)" fg:x="124" fg:w="1"/><text x="10.0369%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7869%" y="533" width="0.0789%" height="15" fill="rgb(209,209,32)" fg:x="124" fg:w="1"/><text x="10.0369%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.7869%" y="517" width="0.0789%" height="15" fill="rgb(221,70,22)" fg:x="124" fg:w="1"/><text x="10.0369%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7869%" y="501" width="0.0789%" height="15" fill="rgb(248,145,5)" fg:x="124" fg:w="1"/><text x="10.0369%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.7869%" y="485" width="0.0789%" height="15" fill="rgb(226,116,26)" fg:x="124" fg:w="1"/><text x="10.0369%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7869%" y="469" width="0.0789%" height="15" fill="rgb(244,5,17)" fg:x="124" fg:w="1"/><text x="10.0369%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="9.8658%" y="501" width="0.0789%" height="15" fill="rgb(252,159,33)" fg:x="125" fg:w="1"/><text x="10.1158%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="9.8658%" y="485" width="0.0789%" height="15" fill="rgb(206,71,0)" fg:x="125" fg:w="1"/><text x="10.1158%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.0237%" y="453" width="0.0789%" height="15" fill="rgb(233,118,54)" fg:x="127" fg:w="1"/><text x="10.2737%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.0237%" y="437" width="0.0789%" height="15" fill="rgb(234,83,48)" fg:x="127" fg:w="1"/><text x="10.2737%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.0237%" y="421" width="0.0789%" height="15" fill="rgb(228,3,54)" fg:x="127" fg:w="1"/><text x="10.2737%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="9.8658%" y="517" width="0.3157%" height="15" fill="rgb(226,155,13)" fg:x="125" fg:w="4"/><text x="10.1158%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="9.9448%" y="501" width="0.2368%" height="15" fill="rgb(241,28,37)" fg:x="126" fg:w="3"/><text x="10.1948%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="9.9448%" y="485" width="0.2368%" height="15" fill="rgb(233,93,10)" fg:x="126" fg:w="3"/><text x="10.1948%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="9.9448%" y="469" width="0.2368%" height="15" fill="rgb(225,113,19)" fg:x="126" fg:w="3"/><text x="10.1948%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1026%" y="453" width="0.0789%" height="15" fill="rgb(241,2,18)" fg:x="128" fg:w="1"/><text x="10.3526%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1026%" y="437" width="0.0789%" height="15" fill="rgb(228,207,21)" fg:x="128" fg:w="1"/><text x="10.3526%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1026%" y="421" width="0.0789%" height="15" fill="rgb(213,211,35)" fg:x="128" fg:w="1"/><text x="10.3526%" y="431.50"></text></g><g><title>engine::session::state::State::flush_entities (34 samples, 2.68%)</title><rect x="7.5770%" y="709" width="2.6835%" height="15" fill="rgb(209,83,10)" fg:x="96" fg:w="34"/><text x="7.8270%" y="719.50">en..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (32 samples, 2.53%)</title><rect x="7.7348%" y="693" width="2.5257%" height="15" fill="rgb(209,164,1)" fg:x="98" fg:w="32"/><text x="7.9848%" y="703.50">en..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (32 samples, 2.53%)</title><rect x="7.7348%" y="677" width="2.5257%" height="15" fill="rgb(213,184,43)" fg:x="98" fg:w="32"/><text x="7.9848%" y="687.50">en..</text></g><g><title>kernel::model::any_entity_changes (21 samples, 1.66%)</title><rect x="8.6030%" y="661" width="1.6575%" height="15" fill="rgb(231,61,34)" fg:x="109" fg:w="21"/><text x="8.8530%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.39%)</title><rect x="9.8658%" y="645" width="0.3946%" height="15" fill="rgb(235,75,3)" fg:x="125" fg:w="5"/><text x="10.1158%" y="655.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.39%)</title><rect x="9.8658%" y="629" width="0.3946%" height="15" fill="rgb(220,106,47)" fg:x="125" fg:w="5"/><text x="10.1158%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.39%)</title><rect x="9.8658%" y="613" width="0.3946%" height="15" fill="rgb(210,196,33)" fg:x="125" fg:w="5"/><text x="10.1158%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="9.8658%" y="597" width="0.3946%" height="15" fill="rgb(229,154,42)" fg:x="125" fg:w="5"/><text x="10.1158%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.39%)</title><rect x="9.8658%" y="581" width="0.3946%" height="15" fill="rgb(228,114,26)" fg:x="125" fg:w="5"/><text x="10.1158%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="9.8658%" y="565" width="0.3946%" height="15" fill="rgb(208,144,1)" fg:x="125" fg:w="5"/><text x="10.1158%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.39%)</title><rect x="9.8658%" y="549" width="0.3946%" height="15" fill="rgb(239,112,37)" fg:x="125" fg:w="5"/><text x="10.1158%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="9.8658%" y="533" width="0.3946%" height="15" fill="rgb(210,96,50)" fg:x="125" fg:w="5"/><text x="10.1158%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.1815%" y="517" width="0.0789%" height="15" fill="rgb(222,178,2)" fg:x="129" fg:w="1"/><text x="10.4315%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="10.1815%" y="501" width="0.0789%" height="15" fill="rgb(226,74,18)" fg:x="129" fg:w="1"/><text x="10.4315%" y="511.50"></text></g><g><title>engine::session::Session::close (36 samples, 2.84%)</title><rect x="7.4980%" y="741" width="2.8414%" height="15" fill="rgb(225,67,54)" fg:x="95" fg:w="36"/><text x="7.7480%" y="751.50">en..</text></g><g><title>engine::session::state::State::close (35 samples, 2.76%)</title><rect x="7.5770%" y="725" width="2.7624%" height="15" fill="rgb(251,92,32)" fg:x="96" fg:w="35"/><text x="7.8270%" y="735.50">en..</text></g><g><title>engine::session::state::State::flush_futures (1 samples, 0.08%)</title><rect x="10.2605%" y="709" width="0.0789%" height="15" fill="rgb(228,149,22)" fg:x="130" fg:w="1"/><text x="10.5105%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="10.3394%" y="629" width="0.0789%" height="15" fill="rgb(243,54,13)" fg:x="131" fg:w="1"/><text x="10.5894%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="10.3394%" y="613" width="0.0789%" height="15" fill="rgb(243,180,28)" fg:x="131" fg:w="1"/><text x="10.5894%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="10.3394%" y="597" width="0.0789%" height="15" fill="rgb(208,167,24)" fg:x="131" fg:w="1"/><text x="10.5894%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="10.3394%" y="581" width="0.0789%" height="15" fill="rgb(245,73,45)" fg:x="131" fg:w="1"/><text x="10.5894%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="10.3394%" y="565" width="0.0789%" height="15" fill="rgb(237,203,48)" fg:x="131" fg:w="1"/><text x="10.5894%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.3394%" y="549" width="0.0789%" height="15" fill="rgb(211,197,16)" fg:x="131" fg:w="1"/><text x="10.5894%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.3394%" y="533" width="0.0789%" height="15" fill="rgb(243,99,51)" fg:x="131" fg:w="1"/><text x="10.5894%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="10.3394%" y="517" width="0.0789%" height="15" fill="rgb(215,123,29)" fg:x="131" fg:w="1"/><text x="10.5894%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="10.3394%" y="501" width="0.0789%" height="15" fill="rgb(239,186,37)" fg:x="131" fg:w="1"/><text x="10.5894%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.3394%" y="485" width="0.0789%" height="15" fill="rgb(252,136,39)" fg:x="131" fg:w="1"/><text x="10.5894%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="10.4183%" y="549" width="0.0789%" height="15" fill="rgb(223,213,32)" fg:x="132" fg:w="1"/><text x="10.6683%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="10.4183%" y="533" width="0.0789%" height="15" fill="rgb(233,115,5)" fg:x="132" fg:w="1"/><text x="10.6683%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="10.4183%" y="517" width="0.0789%" height="15" fill="rgb(207,226,44)" fg:x="132" fg:w="1"/><text x="10.6683%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.4183%" y="501" width="0.0789%" height="15" fill="rgb(208,126,0)" fg:x="132" fg:w="1"/><text x="10.6683%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="10.4183%" y="485" width="0.0789%" height="15" fill="rgb(244,66,21)" fg:x="132" fg:w="1"/><text x="10.6683%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4183%" y="469" width="0.0789%" height="15" fill="rgb(222,97,12)" fg:x="132" fg:w="1"/><text x="10.6683%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4183%" y="453" width="0.0789%" height="15" fill="rgb(219,213,19)" fg:x="132" fg:w="1"/><text x="10.6683%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4183%" y="437" width="0.0789%" height="15" fill="rgb(252,169,30)" fg:x="132" fg:w="1"/><text x="10.6683%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4183%" y="421" width="0.0789%" height="15" fill="rgb(206,32,51)" fg:x="132" fg:w="1"/><text x="10.6683%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4183%" y="405" width="0.0789%" height="15" fill="rgb(250,172,42)" fg:x="132" fg:w="1"/><text x="10.6683%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4183%" y="389" width="0.0789%" height="15" fill="rgb(209,34,43)" fg:x="132" fg:w="1"/><text x="10.6683%" y="399.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="10.4972%" y="533" width="0.0789%" height="15" fill="rgb(223,11,35)" fg:x="133" fg:w="1"/><text x="10.7472%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.4972%" y="517" width="0.0789%" height="15" fill="rgb(251,219,26)" fg:x="133" fg:w="1"/><text x="10.7472%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.4972%" y="501" width="0.0789%" height="15" fill="rgb(231,119,3)" fg:x="133" fg:w="1"/><text x="10.7472%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.4972%" y="485" width="0.0789%" height="15" fill="rgb(216,97,11)" fg:x="133" fg:w="1"/><text x="10.7472%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.4972%" y="469" width="0.0789%" height="15" fill="rgb(223,59,9)" fg:x="133" fg:w="1"/><text x="10.7472%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.4972%" y="453" width="0.0789%" height="15" fill="rgb(233,93,31)" fg:x="133" fg:w="1"/><text x="10.7472%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.4972%" y="437" width="0.0789%" height="15" fill="rgb(239,81,33)" fg:x="133" fg:w="1"/><text x="10.7472%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.4972%" y="421" width="0.0789%" height="15" fill="rgb(213,120,34)" fg:x="133" fg:w="1"/><text x="10.7472%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4972%" y="405" width="0.0789%" height="15" fill="rgb(243,49,53)" fg:x="133" fg:w="1"/><text x="10.7472%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5762%" y="469" width="0.0789%" height="15" fill="rgb(247,216,33)" fg:x="134" fg:w="1"/><text x="10.8262%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5762%" y="453" width="0.0789%" height="15" fill="rgb(226,26,14)" fg:x="134" fg:w="1"/><text x="10.8262%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.6551%" y="453" width="0.0789%" height="15" fill="rgb(215,49,53)" fg:x="135" fg:w="1"/><text x="10.9051%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.6551%" y="437" width="0.0789%" height="15" fill="rgb(245,162,40)" fg:x="135" fg:w="1"/><text x="10.9051%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="10.6551%" y="421" width="0.0789%" height="15" fill="rgb(229,68,17)" fg:x="135" fg:w="1"/><text x="10.9051%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.6551%" y="405" width="0.0789%" height="15" fill="rgb(213,182,10)" fg:x="135" fg:w="1"/><text x="10.9051%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.6551%" y="389" width="0.0789%" height="15" fill="rgb(245,125,30)" fg:x="135" fg:w="1"/><text x="10.9051%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.6551%" y="373" width="0.0789%" height="15" fill="rgb(232,202,2)" fg:x="135" fg:w="1"/><text x="10.9051%" y="383.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="10.6551%" y="357" width="0.0789%" height="15" fill="rgb(237,140,51)" fg:x="135" fg:w="1"/><text x="10.9051%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.6551%" y="341" width="0.0789%" height="15" fill="rgb(236,157,25)" fg:x="135" fg:w="1"/><text x="10.9051%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.39%)</title><rect x="10.4183%" y="597" width="0.3946%" height="15" fill="rgb(219,209,0)" fg:x="132" fg:w="5"/><text x="10.6683%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.39%)</title><rect x="10.4183%" y="581" width="0.3946%" height="15" fill="rgb(240,116,54)" fg:x="132" fg:w="5"/><text x="10.6683%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.39%)</title><rect x="10.4183%" y="565" width="0.3946%" height="15" fill="rgb(216,10,36)" fg:x="132" fg:w="5"/><text x="10.6683%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (4 samples, 0.32%)</title><rect x="10.4972%" y="549" width="0.3157%" height="15" fill="rgb(222,72,44)" fg:x="133" fg:w="4"/><text x="10.7472%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="10.5762%" y="533" width="0.2368%" height="15" fill="rgb(232,159,9)" fg:x="134" fg:w="3"/><text x="10.8262%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="10.5762%" y="517" width="0.2368%" height="15" fill="rgb(210,39,32)" fg:x="134" fg:w="3"/><text x="10.8262%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="10.5762%" y="501" width="0.2368%" height="15" fill="rgb(216,194,45)" fg:x="134" fg:w="3"/><text x="10.8262%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="10.5762%" y="485" width="0.2368%" height="15" fill="rgb(218,18,35)" fg:x="134" fg:w="3"/><text x="10.8262%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="10.6551%" y="469" width="0.1579%" height="15" fill="rgb(207,83,51)" fg:x="135" fg:w="2"/><text x="10.9051%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="10.7340%" y="453" width="0.0789%" height="15" fill="rgb(225,63,43)" fg:x="136" fg:w="1"/><text x="10.9840%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.7340%" y="437" width="0.0789%" height="15" fill="rgb(207,57,36)" fg:x="136" fg:w="1"/><text x="10.9840%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="10.7340%" y="421" width="0.0789%" height="15" fill="rgb(216,99,33)" fg:x="136" fg:w="1"/><text x="10.9840%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="10.7340%" y="405" width="0.0789%" height="15" fill="rgb(225,42,16)" fg:x="136" fg:w="1"/><text x="10.9840%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (7 samples, 0.55%)</title><rect x="10.3394%" y="645" width="0.5525%" height="15" fill="rgb(220,201,45)" fg:x="131" fg:w="7"/><text x="10.5894%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.47%)</title><rect x="10.4183%" y="629" width="0.4736%" height="15" fill="rgb(225,33,4)" fg:x="132" fg:w="6"/><text x="10.6683%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.47%)</title><rect x="10.4183%" y="613" width="0.4736%" height="15" fill="rgb(224,33,50)" fg:x="132" fg:w="6"/><text x="10.6683%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.8129%" y="597" width="0.0789%" height="15" fill="rgb(246,198,51)" fg:x="137" fg:w="1"/><text x="11.0629%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8129%" y="581" width="0.0789%" height="15" fill="rgb(205,22,4)" fg:x="137" fg:w="1"/><text x="11.0629%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.8129%" y="565" width="0.0789%" height="15" fill="rgb(206,3,8)" fg:x="137" fg:w="1"/><text x="11.0629%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8129%" y="549" width="0.0789%" height="15" fill="rgb(251,23,15)" fg:x="137" fg:w="1"/><text x="11.0629%" y="559.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (8 samples, 0.63%)</title><rect x="10.3394%" y="661" width="0.6314%" height="15" fill="rgb(252,88,28)" fg:x="131" fg:w="8"/><text x="10.5894%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="10.8919%" y="645" width="0.0789%" height="15" fill="rgb(212,127,14)" fg:x="138" fg:w="1"/><text x="11.1419%" y="655.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="10.8919%" y="629" width="0.0789%" height="15" fill="rgb(247,145,37)" fg:x="138" fg:w="1"/><text x="11.1419%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="10.8919%" y="613" width="0.0789%" height="15" fill="rgb(209,117,53)" fg:x="138" fg:w="1"/><text x="11.1419%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="10.8919%" y="597" width="0.0789%" height="15" fill="rgb(212,90,42)" fg:x="138" fg:w="1"/><text x="11.1419%" y="607.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="10.8919%" y="581" width="0.0789%" height="15" fill="rgb(218,164,37)" fg:x="138" fg:w="1"/><text x="11.1419%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.8919%" y="565" width="0.0789%" height="15" fill="rgb(246,65,34)" fg:x="138" fg:w="1"/><text x="11.1419%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.8919%" y="549" width="0.0789%" height="15" fill="rgb(231,100,33)" fg:x="138" fg:w="1"/><text x="11.1419%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.8919%" y="533" width="0.0789%" height="15" fill="rgb(228,126,14)" fg:x="138" fg:w="1"/><text x="11.1419%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.8919%" y="517" width="0.0789%" height="15" fill="rgb(215,173,21)" fg:x="138" fg:w="1"/><text x="11.1419%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.8919%" y="501" width="0.0789%" height="15" fill="rgb(210,6,40)" fg:x="138" fg:w="1"/><text x="11.1419%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.8919%" y="485" width="0.0789%" height="15" fill="rgb(212,48,18)" fg:x="138" fg:w="1"/><text x="11.1419%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.8919%" y="469" width="0.0789%" height="15" fill="rgb(230,214,11)" fg:x="138" fg:w="1"/><text x="11.1419%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.8919%" y="453" width="0.0789%" height="15" fill="rgb(254,105,39)" fg:x="138" fg:w="1"/><text x="11.1419%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.8919%" y="437" width="0.0789%" height="15" fill="rgb(245,158,5)" fg:x="138" fg:w="1"/><text x="11.1419%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.8919%" y="421" width="0.0789%" height="15" fill="rgb(249,208,11)" fg:x="138" fg:w="1"/><text x="11.1419%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.8919%" y="405" width="0.0789%" height="15" fill="rgb(210,39,28)" fg:x="138" fg:w="1"/><text x="11.1419%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.8919%" y="389" width="0.0789%" height="15" fill="rgb(211,56,53)" fg:x="138" fg:w="1"/><text x="11.1419%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8919%" y="373" width="0.0789%" height="15" fill="rgb(226,201,30)" fg:x="138" fg:w="1"/><text x="11.1419%" y="383.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="11.2076%" y="469" width="0.0789%" height="15" fill="rgb(239,101,34)" fg:x="142" fg:w="1"/><text x="11.4576%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.2076%" y="453" width="0.0789%" height="15" fill="rgb(226,209,5)" fg:x="142" fg:w="1"/><text x="11.4576%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="11.2076%" y="437" width="0.0789%" height="15" fill="rgb(250,105,47)" fg:x="142" fg:w="1"/><text x="11.4576%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2865%" y="373" width="0.0789%" height="15" fill="rgb(230,72,3)" fg:x="143" fg:w="1"/><text x="11.5365%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3654%" y="197" width="0.0789%" height="15" fill="rgb(232,218,39)" fg:x="144" fg:w="1"/><text x="11.6154%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.2865%" y="437" width="0.2368%" height="15" fill="rgb(248,166,6)" fg:x="143" fg:w="3"/><text x="11.5365%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.2865%" y="421" width="0.2368%" height="15" fill="rgb(247,89,20)" fg:x="143" fg:w="3"/><text x="11.5365%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.2865%" y="405" width="0.2368%" height="15" fill="rgb(248,130,54)" fg:x="143" fg:w="3"/><text x="11.5365%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.2865%" y="389" width="0.2368%" height="15" fill="rgb(234,196,4)" fg:x="143" fg:w="3"/><text x="11.5365%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.3654%" y="373" width="0.1579%" height="15" fill="rgb(250,143,31)" fg:x="144" fg:w="2"/><text x="11.6154%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.3654%" y="357" width="0.1579%" height="15" fill="rgb(211,110,34)" fg:x="144" fg:w="2"/><text x="11.6154%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="11.3654%" y="341" width="0.1579%" height="15" fill="rgb(215,124,48)" fg:x="144" fg:w="2"/><text x="11.6154%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="11.3654%" y="325" width="0.1579%" height="15" fill="rgb(216,46,13)" fg:x="144" fg:w="2"/><text x="11.6154%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="11.3654%" y="309" width="0.1579%" height="15" fill="rgb(205,184,25)" fg:x="144" fg:w="2"/><text x="11.6154%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="11.3654%" y="293" width="0.1579%" height="15" fill="rgb(228,1,10)" fg:x="144" fg:w="2"/><text x="11.6154%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="11.3654%" y="277" width="0.1579%" height="15" fill="rgb(213,116,27)" fg:x="144" fg:w="2"/><text x="11.6154%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="11.3654%" y="261" width="0.1579%" height="15" fill="rgb(241,95,50)" fg:x="144" fg:w="2"/><text x="11.6154%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="11.3654%" y="245" width="0.1579%" height="15" fill="rgb(238,48,32)" fg:x="144" fg:w="2"/><text x="11.6154%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="11.3654%" y="229" width="0.1579%" height="15" fill="rgb(235,113,49)" fg:x="144" fg:w="2"/><text x="11.6154%" y="239.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="11.3654%" y="213" width="0.1579%" height="15" fill="rgb(205,127,43)" fg:x="144" fg:w="2"/><text x="11.6154%" y="223.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="11.4444%" y="197" width="0.0789%" height="15" fill="rgb(250,162,2)" fg:x="145" fg:w="1"/><text x="11.6944%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.39%)</title><rect x="11.2076%" y="485" width="0.3946%" height="15" fill="rgb(220,13,41)" fg:x="142" fg:w="5"/><text x="11.4576%" y="495.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="11.2865%" y="469" width="0.3157%" height="15" fill="rgb(249,221,25)" fg:x="143" fg:w="4"/><text x="11.5365%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="11.2865%" y="453" width="0.3157%" height="15" fill="rgb(215,208,19)" fg:x="143" fg:w="4"/><text x="11.5365%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.5233%" y="437" width="0.0789%" height="15" fill="rgb(236,175,2)" fg:x="146" fg:w="1"/><text x="11.7733%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5233%" y="421" width="0.0789%" height="15" fill="rgb(241,52,2)" fg:x="146" fg:w="1"/><text x="11.7733%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.5233%" y="405" width="0.0789%" height="15" fill="rgb(248,140,14)" fg:x="146" fg:w="1"/><text x="11.7733%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5233%" y="389" width="0.0789%" height="15" fill="rgb(253,22,42)" fg:x="146" fg:w="1"/><text x="11.7733%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.5233%" y="373" width="0.0789%" height="15" fill="rgb(234,61,47)" fg:x="146" fg:w="1"/><text x="11.7733%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="11.6022%" y="469" width="0.0789%" height="15" fill="rgb(208,226,15)" fg:x="147" fg:w="1"/><text x="11.8522%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.6022%" y="453" width="0.0789%" height="15" fill="rgb(217,221,4)" fg:x="147" fg:w="1"/><text x="11.8522%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.6811%" y="421" width="0.1579%" height="15" fill="rgb(212,174,34)" fg:x="148" fg:w="2"/><text x="11.9311%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.6811%" y="405" width="0.1579%" height="15" fill="rgb(253,83,4)" fg:x="148" fg:w="2"/><text x="11.9311%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7601%" y="389" width="0.0789%" height="15" fill="rgb(250,195,49)" fg:x="149" fg:w="1"/><text x="12.0101%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7601%" y="373" width="0.0789%" height="15" fill="rgb(241,192,25)" fg:x="149" fg:w="1"/><text x="12.0101%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7601%" y="357" width="0.0789%" height="15" fill="rgb(208,124,10)" fg:x="149" fg:w="1"/><text x="12.0101%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.7601%" y="341" width="0.0789%" height="15" fill="rgb(222,33,0)" fg:x="149" fg:w="1"/><text x="12.0101%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.7601%" y="325" width="0.0789%" height="15" fill="rgb(234,209,28)" fg:x="149" fg:w="1"/><text x="12.0101%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.7601%" y="309" width="0.0789%" height="15" fill="rgb(224,11,23)" fg:x="149" fg:w="1"/><text x="12.0101%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.7601%" y="293" width="0.0789%" height="15" fill="rgb(232,99,1)" fg:x="149" fg:w="1"/><text x="12.0101%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.7601%" y="277" width="0.0789%" height="15" fill="rgb(237,95,45)" fg:x="149" fg:w="1"/><text x="12.0101%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.6811%" y="437" width="0.2368%" height="15" fill="rgb(208,109,11)" fg:x="148" fg:w="3"/><text x="11.9311%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8390%" y="421" width="0.0789%" height="15" fill="rgb(216,190,48)" fg:x="150" fg:w="1"/><text x="12.0890%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8390%" y="405" width="0.0789%" height="15" fill="rgb(251,171,36)" fg:x="150" fg:w="1"/><text x="12.0890%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.8390%" y="389" width="0.0789%" height="15" fill="rgb(230,62,22)" fg:x="150" fg:w="1"/><text x="12.0890%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.8390%" y="373" width="0.0789%" height="15" fill="rgb(225,114,35)" fg:x="150" fg:w="1"/><text x="12.0890%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.8390%" y="357" width="0.0789%" height="15" fill="rgb(215,118,42)" fg:x="150" fg:w="1"/><text x="12.0890%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.8390%" y="341" width="0.0789%" height="15" fill="rgb(243,119,21)" fg:x="150" fg:w="1"/><text x="12.0890%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.8390%" y="325" width="0.0789%" height="15" fill="rgb(252,177,53)" fg:x="150" fg:w="1"/><text x="12.0890%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (5 samples, 0.39%)</title><rect x="11.6022%" y="485" width="0.3946%" height="15" fill="rgb(237,209,29)" fg:x="147" fg:w="5"/><text x="11.8522%" y="495.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="11.6811%" y="469" width="0.3157%" height="15" fill="rgb(212,65,23)" fg:x="148" fg:w="4"/><text x="11.9311%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="11.6811%" y="453" width="0.3157%" height="15" fill="rgb(230,222,46)" fg:x="148" fg:w="4"/><text x="11.9311%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9179%" y="437" width="0.0789%" height="15" fill="rgb(215,135,32)" fg:x="151" fg:w="1"/><text x="12.1679%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9179%" y="421" width="0.0789%" height="15" fill="rgb(246,101,22)" fg:x="151" fg:w="1"/><text x="12.1679%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9179%" y="405" width="0.0789%" height="15" fill="rgb(206,107,13)" fg:x="151" fg:w="1"/><text x="12.1679%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9179%" y="389" width="0.0789%" height="15" fill="rgb(250,100,44)" fg:x="151" fg:w="1"/><text x="12.1679%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.9179%" y="373" width="0.0789%" height="15" fill="rgb(231,147,38)" fg:x="151" fg:w="1"/><text x="12.1679%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9179%" y="357" width="0.0789%" height="15" fill="rgb(229,8,40)" fg:x="151" fg:w="1"/><text x="12.1679%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9179%" y="341" width="0.0789%" height="15" fill="rgb(221,135,30)" fg:x="151" fg:w="1"/><text x="12.1679%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9179%" y="325" width="0.0789%" height="15" fill="rgb(249,193,18)" fg:x="151" fg:w="1"/><text x="12.1679%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.9968%" y="485" width="0.0789%" height="15" fill="rgb(209,133,39)" fg:x="152" fg:w="1"/><text x="12.2468%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="12.0758%" y="485" width="0.2368%" height="15" fill="rgb(232,100,14)" fg:x="153" fg:w="3"/><text x="12.3258%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="12.0758%" y="469" width="0.2368%" height="15" fill="rgb(224,185,1)" fg:x="153" fg:w="3"/><text x="12.3258%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="12.2336%" y="453" width="0.0789%" height="15" fill="rgb(223,139,8)" fg:x="155" fg:w="1"/><text x="12.4836%" y="463.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="12.2336%" y="437" width="0.0789%" height="15" fill="rgb(232,213,38)" fg:x="155" fg:w="1"/><text x="12.4836%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="12.2336%" y="421" width="0.0789%" height="15" fill="rgb(207,94,22)" fg:x="155" fg:w="1"/><text x="12.4836%" y="431.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="12.2336%" y="405" width="0.0789%" height="15" fill="rgb(219,183,54)" fg:x="155" fg:w="1"/><text x="12.4836%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="12.2336%" y="389" width="0.0789%" height="15" fill="rgb(216,185,54)" fg:x="155" fg:w="1"/><text x="12.4836%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.2336%" y="373" width="0.0789%" height="15" fill="rgb(254,217,39)" fg:x="155" fg:w="1"/><text x="12.4836%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.2336%" y="357" width="0.0789%" height="15" fill="rgb(240,178,23)" fg:x="155" fg:w="1"/><text x="12.4836%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.2336%" y="341" width="0.0789%" height="15" fill="rgb(218,11,47)" fg:x="155" fg:w="1"/><text x="12.4836%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.2336%" y="325" width="0.0789%" height="15" fill="rgb(218,51,51)" fg:x="155" fg:w="1"/><text x="12.4836%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.2336%" y="309" width="0.0789%" height="15" fill="rgb(238,126,27)" fg:x="155" fg:w="1"/><text x="12.4836%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.2336%" y="293" width="0.0789%" height="15" fill="rgb(249,202,22)" fg:x="155" fg:w="1"/><text x="12.4836%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.2336%" y="277" width="0.0789%" height="15" fill="rgb(254,195,49)" fg:x="155" fg:w="1"/><text x="12.4836%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="12.3915%" y="293" width="0.0789%" height="15" fill="rgb(208,123,14)" fg:x="157" fg:w="1"/><text x="12.6415%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="12.3915%" y="325" width="0.1579%" height="15" fill="rgb(224,200,8)" fg:x="157" fg:w="2"/><text x="12.6415%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="12.3915%" y="309" width="0.1579%" height="15" fill="rgb(217,61,36)" fg:x="157" fg:w="2"/><text x="12.6415%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="12.4704%" y="293" width="0.0789%" height="15" fill="rgb(206,35,45)" fg:x="158" fg:w="1"/><text x="12.7204%" y="303.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="12.7072%" y="309" width="0.0789%" height="15" fill="rgb(217,65,33)" fg:x="161" fg:w="1"/><text x="12.9572%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.47%)</title><rect x="12.3915%" y="341" width="0.4736%" height="15" fill="rgb(222,158,48)" fg:x="157" fg:w="6"/><text x="12.6415%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (4 samples, 0.32%)</title><rect x="12.5493%" y="325" width="0.3157%" height="15" fill="rgb(254,2,54)" fg:x="159" fg:w="4"/><text x="12.7993%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="12.7861%" y="309" width="0.0789%" height="15" fill="rgb(250,143,38)" fg:x="162" fg:w="1"/><text x="13.0361%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="12.8650%" y="325" width="0.0789%" height="15" fill="rgb(248,25,0)" fg:x="163" fg:w="1"/><text x="13.1150%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="12.8650%" y="309" width="0.0789%" height="15" fill="rgb(206,152,27)" fg:x="163" fg:w="1"/><text x="13.1150%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9440%" y="309" width="0.0789%" height="15" fill="rgb(240,77,30)" fg:x="164" fg:w="1"/><text x="13.1940%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.79%)</title><rect x="12.3125%" y="405" width="0.7893%" height="15" fill="rgb(231,5,3)" fg:x="156" fg:w="10"/><text x="12.5625%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.71%)</title><rect x="12.3915%" y="389" width="0.7103%" height="15" fill="rgb(207,226,32)" fg:x="157" fg:w="9"/><text x="12.6415%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (9 samples, 0.71%)</title><rect x="12.3915%" y="373" width="0.7103%" height="15" fill="rgb(222,207,47)" fg:x="157" fg:w="9"/><text x="12.6415%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (9 samples, 0.71%)</title><rect x="12.3915%" y="357" width="0.7103%" height="15" fill="rgb(229,115,45)" fg:x="157" fg:w="9"/><text x="12.6415%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (3 samples, 0.24%)</title><rect x="12.8650%" y="341" width="0.2368%" height="15" fill="rgb(224,191,6)" fg:x="163" fg:w="3"/><text x="13.1150%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="12.9440%" y="325" width="0.1579%" height="15" fill="rgb(230,227,24)" fg:x="164" fg:w="2"/><text x="13.1940%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="13.0229%" y="309" width="0.0789%" height="15" fill="rgb(228,80,19)" fg:x="165" fg:w="1"/><text x="13.2729%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="13.0229%" y="293" width="0.0789%" height="15" fill="rgb(247,229,0)" fg:x="165" fg:w="1"/><text x="13.2729%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.0229%" y="277" width="0.0789%" height="15" fill="rgb(237,194,15)" fg:x="165" fg:w="1"/><text x="13.2729%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.0229%" y="261" width="0.0789%" height="15" fill="rgb(219,203,20)" fg:x="165" fg:w="1"/><text x="13.2729%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.2597%" y="357" width="0.0789%" height="15" fill="rgb(234,128,8)" fg:x="168" fg:w="1"/><text x="13.5097%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="13.3386%" y="325" width="0.0789%" height="15" fill="rgb(248,202,8)" fg:x="169" fg:w="1"/><text x="13.5886%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.3386%" y="309" width="0.0789%" height="15" fill="rgb(206,104,37)" fg:x="169" fg:w="1"/><text x="13.5886%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="13.3386%" y="357" width="0.1579%" height="15" fill="rgb(223,8,27)" fg:x="169" fg:w="2"/><text x="13.5886%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="13.3386%" y="341" width="0.1579%" height="15" fill="rgb(216,217,28)" fg:x="169" fg:w="2"/><text x="13.5886%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="13.4175%" y="325" width="0.0789%" height="15" fill="rgb(249,199,1)" fg:x="170" fg:w="1"/><text x="13.6675%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6543%" y="341" width="0.0789%" height="15" fill="rgb(240,85,17)" fg:x="173" fg:w="1"/><text x="13.9043%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (26 samples, 2.05%)</title><rect x="13.7332%" y="341" width="2.0521%" height="15" fill="rgb(206,108,45)" fg:x="174" fg:w="26"/><text x="13.9832%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (26 samples, 2.05%)</title><rect x="13.7332%" y="325" width="2.0521%" height="15" fill="rgb(245,210,41)" fg:x="174" fg:w="26"/><text x="13.9832%" y="335.50">c..</text></g><g><title>regex_automata::meta::reverse_inner::extract (1 samples, 0.08%)</title><rect x="15.7853%" y="341" width="0.0789%" height="15" fill="rgb(206,13,37)" fg:x="200" fg:w="1"/><text x="16.0353%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.39%)</title><rect x="16.0221%" y="325" width="0.3946%" height="15" fill="rgb(250,61,18)" fg:x="203" fg:w="5"/><text x="16.2721%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.63%)</title><rect x="15.8642%" y="341" width="0.6314%" height="15" fill="rgb(235,172,48)" fg:x="201" fg:w="8"/><text x="16.1142%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="16.4167%" y="325" width="0.0789%" height="15" fill="rgb(249,201,17)" fg:x="208" fg:w="1"/><text x="16.6667%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="16.4167%" y="309" width="0.0789%" height="15" fill="rgb(219,208,6)" fg:x="208" fg:w="1"/><text x="16.6667%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="16.5746%" y="293" width="0.0789%" height="15" fill="rgb(248,31,23)" fg:x="210" fg:w="1"/><text x="16.8246%" y="303.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="16.8903%" y="277" width="0.1579%" height="15" fill="rgb(245,15,42)" fg:x="214" fg:w="2"/><text x="17.1403%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="17.0481%" y="277" width="0.1579%" height="15" fill="rgb(222,217,39)" fg:x="216" fg:w="2"/><text x="17.2981%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="17.0481%" y="261" width="0.1579%" height="15" fill="rgb(210,219,27)" fg:x="216" fg:w="2"/><text x="17.2981%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="17.0481%" y="245" width="0.1579%" height="15" fill="rgb(252,166,36)" fg:x="216" fg:w="2"/><text x="17.2981%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="17.0481%" y="229" width="0.1579%" height="15" fill="rgb(245,132,34)" fg:x="216" fg:w="2"/><text x="17.2981%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.2060%" y="245" width="0.0789%" height="15" fill="rgb(236,54,3)" fg:x="218" fg:w="1"/><text x="17.4560%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.2060%" y="229" width="0.0789%" height="15" fill="rgb(241,173,43)" fg:x="218" fg:w="1"/><text x="17.4560%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.2060%" y="213" width="0.0789%" height="15" fill="rgb(215,190,9)" fg:x="218" fg:w="1"/><text x="17.4560%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="17.2060%" y="277" width="0.2368%" height="15" fill="rgb(242,101,16)" fg:x="218" fg:w="3"/><text x="17.4560%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="17.2060%" y="261" width="0.2368%" height="15" fill="rgb(223,190,21)" fg:x="218" fg:w="3"/><text x="17.4560%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="17.2849%" y="245" width="0.1579%" height="15" fill="rgb(215,228,25)" fg:x="219" fg:w="2"/><text x="17.5349%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="17.3639%" y="229" width="0.0789%" height="15" fill="rgb(225,36,22)" fg:x="220" fg:w="1"/><text x="17.6139%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.3639%" y="213" width="0.0789%" height="15" fill="rgb(251,106,46)" fg:x="220" fg:w="1"/><text x="17.6139%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.3639%" y="197" width="0.0789%" height="15" fill="rgb(208,90,1)" fg:x="220" fg:w="1"/><text x="17.6139%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.3639%" y="181" width="0.0789%" height="15" fill="rgb(243,10,4)" fg:x="220" fg:w="1"/><text x="17.6139%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="17.4428%" y="277" width="0.0789%" height="15" fill="rgb(212,137,27)" fg:x="221" fg:w="1"/><text x="17.6928%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (113 samples, 8.92%)</title><rect x="17.5217%" y="277" width="8.9187%" height="15" fill="rgb(231,220,49)" fg:x="222" fg:w="113"/><text x="17.7717%" y="287.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (113 samples, 8.92%)</title><rect x="17.5217%" y="261" width="8.9187%" height="15" fill="rgb(237,96,20)" fg:x="222" fg:w="113"/><text x="17.7717%" y="271.50">regex_automat..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (113 samples, 8.92%)</title><rect x="17.5217%" y="245" width="8.9187%" height="15" fill="rgb(239,229,30)" fg:x="222" fg:w="113"/><text x="17.7717%" y="255.50">alloc::vec::V..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.39%)</title><rect x="26.4404%" y="277" width="0.3946%" height="15" fill="rgb(219,65,33)" fg:x="335" fg:w="5"/><text x="26.6904%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="26.6772%" y="261" width="0.1579%" height="15" fill="rgb(243,134,7)" fg:x="338" fg:w="2"/><text x="26.9272%" y="271.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="26.8350%" y="277" width="0.0789%" height="15" fill="rgb(216,177,54)" fg:x="340" fg:w="1"/><text x="27.0850%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 10.81%)</title><rect x="16.4957%" y="325" width="10.8129%" height="15" fill="rgb(211,160,20)" fg:x="209" fg:w="137"/><text x="16.7457%" y="335.50">&lt;core::iter::ada..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (137 samples, 10.81%)</title><rect x="16.4957%" y="309" width="10.8129%" height="15" fill="rgb(239,85,39)" fg:x="209" fg:w="137"/><text x="16.7457%" y="319.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (135 samples, 10.66%)</title><rect x="16.6535%" y="293" width="10.6551%" height="15" fill="rgb(232,125,22)" fg:x="211" fg:w="135"/><text x="16.9035%" y="303.50">regex_automata::..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.39%)</title><rect x="26.9140%" y="277" width="0.3946%" height="15" fill="rgb(244,57,34)" fg:x="341" fg:w="5"/><text x="27.1640%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="27.0718%" y="261" width="0.2368%" height="15" fill="rgb(214,203,32)" fg:x="343" fg:w="3"/><text x="27.3218%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.2297%" y="245" width="0.0789%" height="15" fill="rgb(207,58,43)" fg:x="345" fg:w="1"/><text x="27.4797%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.2297%" y="229" width="0.0789%" height="15" fill="rgb(215,193,15)" fg:x="345" fg:w="1"/><text x="27.4797%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="27.3086%" y="309" width="0.0789%" height="15" fill="rgb(232,15,44)" fg:x="346" fg:w="1"/><text x="27.5586%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.3086%" y="293" width="0.0789%" height="15" fill="rgb(212,3,48)" fg:x="346" fg:w="1"/><text x="27.5586%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.39%)</title><rect x="27.3875%" y="309" width="0.3946%" height="15" fill="rgb(218,128,7)" fg:x="347" fg:w="5"/><text x="27.6375%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="27.5454%" y="293" width="0.2368%" height="15" fill="rgb(226,216,39)" fg:x="349" fg:w="3"/><text x="27.7954%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="27.5454%" y="277" width="0.2368%" height="15" fill="rgb(243,47,51)" fg:x="349" fg:w="3"/><text x="27.7954%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="27.5454%" y="261" width="0.2368%" height="15" fill="rgb(241,183,40)" fg:x="349" fg:w="3"/><text x="27.7954%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.9400%" y="293" width="0.0789%" height="15" fill="rgb(231,217,32)" fg:x="354" fg:w="1"/><text x="28.1900%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.39%)</title><rect x="27.7822%" y="309" width="0.3946%" height="15" fill="rgb(229,61,38)" fg:x="352" fg:w="5"/><text x="28.0322%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="28.0189%" y="293" width="0.1579%" height="15" fill="rgb(225,210,5)" fg:x="355" fg:w="2"/><text x="28.2689%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.0979%" y="277" width="0.0789%" height="15" fill="rgb(231,79,45)" fg:x="356" fg:w="1"/><text x="28.3479%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="28.0979%" y="261" width="0.0789%" height="15" fill="rgb(224,100,7)" fg:x="356" fg:w="1"/><text x="28.3479%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.03%)</title><rect x="27.3086%" y="325" width="1.0260%" height="15" fill="rgb(241,198,18)" fg:x="346" fg:w="13"/><text x="27.5586%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="28.1768%" y="309" width="0.1579%" height="15" fill="rgb(252,97,53)" fg:x="357" fg:w="2"/><text x="28.4268%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="28.3346%" y="309" width="0.1579%" height="15" fill="rgb(220,88,7)" fg:x="359" fg:w="2"/><text x="28.5846%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.4136%" y="293" width="0.0789%" height="15" fill="rgb(213,176,14)" fg:x="360" fg:w="1"/><text x="28.6636%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.4136%" y="277" width="0.0789%" height="15" fill="rgb(246,73,7)" fg:x="360" fg:w="1"/><text x="28.6636%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4136%" y="261" width="0.0789%" height="15" fill="rgb(245,64,36)" fg:x="360" fg:w="1"/><text x="28.6636%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="28.3346%" y="325" width="0.2368%" height="15" fill="rgb(245,80,10)" fg:x="359" fg:w="3"/><text x="28.5846%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="28.4925%" y="309" width="0.0789%" height="15" fill="rgb(232,107,50)" fg:x="361" fg:w="1"/><text x="28.7425%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4925%" y="293" width="0.0789%" height="15" fill="rgb(253,3,0)" fg:x="361" fg:w="1"/><text x="28.7425%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (154 samples, 12.15%)</title><rect x="16.4957%" y="341" width="12.1547%" height="15" fill="rgb(212,99,53)" fg:x="209" fg:w="154"/><text x="16.7457%" y="351.50">regex_automata::nf..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="28.5714%" y="325" width="0.0789%" height="15" fill="rgb(249,111,54)" fg:x="362" fg:w="1"/><text x="28.8214%" y="335.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="28.5714%" y="309" width="0.0789%" height="15" fill="rgb(249,55,30)" fg:x="362" fg:w="1"/><text x="28.8214%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.5714%" y="293" width="0.0789%" height="15" fill="rgb(237,47,42)" fg:x="362" fg:w="1"/><text x="28.8214%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (193 samples, 15.23%)</title><rect x="13.4964%" y="357" width="15.2328%" height="15" fill="rgb(211,20,18)" fg:x="171" fg:w="193"/><text x="13.7464%" y="367.50">regex_automata::meta::s..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="28.6504%" y="341" width="0.0789%" height="15" fill="rgb(231,203,46)" fg:x="363" fg:w="1"/><text x="28.9004%" y="351.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="28.6504%" y="325" width="0.0789%" height="15" fill="rgb(237,142,3)" fg:x="363" fg:w="1"/><text x="28.9004%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="28.8871%" y="309" width="0.0789%" height="15" fill="rgb(241,107,1)" fg:x="366" fg:w="1"/><text x="29.1371%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="28.8871%" y="293" width="0.0789%" height="15" fill="rgb(229,83,13)" fg:x="366" fg:w="1"/><text x="29.1371%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.47%)</title><rect x="28.7293%" y="325" width="0.4736%" height="15" fill="rgb(241,91,40)" fg:x="364" fg:w="6"/><text x="28.9793%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="28.9661%" y="309" width="0.2368%" height="15" fill="rgb(225,3,45)" fg:x="367" fg:w="3"/><text x="29.2161%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="29.0450%" y="293" width="0.1579%" height="15" fill="rgb(244,223,14)" fg:x="368" fg:w="2"/><text x="29.2950%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="29.0450%" y="277" width="0.1579%" height="15" fill="rgb(224,124,37)" fg:x="368" fg:w="2"/><text x="29.2950%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.0450%" y="261" width="0.1579%" height="15" fill="rgb(251,171,30)" fg:x="368" fg:w="2"/><text x="29.2950%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.55%)</title><rect x="28.7293%" y="357" width="0.5525%" height="15" fill="rgb(236,46,54)" fg:x="364" fg:w="7"/><text x="28.9793%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.55%)</title><rect x="28.7293%" y="341" width="0.5525%" height="15" fill="rgb(245,213,5)" fg:x="364" fg:w="7"/><text x="28.9793%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="29.2028%" y="325" width="0.0789%" height="15" fill="rgb(230,144,27)" fg:x="370" fg:w="1"/><text x="29.4528%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="29.2028%" y="309" width="0.0789%" height="15" fill="rgb(220,86,6)" fg:x="370" fg:w="1"/><text x="29.4528%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="29.3607%" y="325" width="0.1579%" height="15" fill="rgb(240,20,13)" fg:x="372" fg:w="2"/><text x="29.6107%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="29.4396%" y="309" width="0.0789%" height="15" fill="rgb(217,89,34)" fg:x="373" fg:w="1"/><text x="29.6896%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (209 samples, 16.50%)</title><rect x="13.1018%" y="405" width="16.4957%" height="15" fill="rgb(229,13,5)" fg:x="166" fg:w="209"/><text x="13.3518%" y="415.50">&lt;regex::regex::string::Re..</text></g><g><title>regex::builders::Builder::build_one_string (209 samples, 16.50%)</title><rect x="13.1018%" y="389" width="16.4957%" height="15" fill="rgb(244,67,35)" fg:x="166" fg:w="209"/><text x="13.3518%" y="399.50">regex::builders::Builder:..</text></g><g><title>regex_automata::meta::regex::Builder::build (209 samples, 16.50%)</title><rect x="13.1018%" y="373" width="16.4957%" height="15" fill="rgb(221,40,2)" fg:x="166" fg:w="209"/><text x="13.3518%" y="383.50">regex_automata::meta::reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="29.2818%" y="357" width="0.3157%" height="15" fill="rgb(237,157,21)" fg:x="371" fg:w="4"/><text x="29.5318%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="29.2818%" y="341" width="0.3157%" height="15" fill="rgb(222,94,11)" fg:x="371" fg:w="4"/><text x="29.5318%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="29.5185%" y="325" width="0.0789%" height="15" fill="rgb(249,113,6)" fg:x="374" fg:w="1"/><text x="29.7685%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="29.5185%" y="309" width="0.0789%" height="15" fill="rgb(238,137,36)" fg:x="374" fg:w="1"/><text x="29.7685%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="29.5975%" y="405" width="0.0789%" height="15" fill="rgb(210,102,26)" fg:x="375" fg:w="1"/><text x="29.8475%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="29.5975%" y="389" width="0.0789%" height="15" fill="rgb(218,30,30)" fg:x="375" fg:w="1"/><text x="29.8475%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="29.5975%" y="373" width="0.0789%" height="15" fill="rgb(214,67,26)" fg:x="375" fg:w="1"/><text x="29.8475%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="29.5975%" y="357" width="0.0789%" height="15" fill="rgb(251,9,53)" fg:x="375" fg:w="1"/><text x="29.8475%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.5975%" y="341" width="0.0789%" height="15" fill="rgb(228,204,25)" fg:x="375" fg:w="1"/><text x="29.8475%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.5975%" y="325" width="0.0789%" height="15" fill="rgb(207,153,8)" fg:x="375" fg:w="1"/><text x="29.8475%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.9921%" y="325" width="0.0789%" height="15" fill="rgb(242,9,16)" fg:x="380" fg:w="1"/><text x="30.2421%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.9921%" y="309" width="0.0789%" height="15" fill="rgb(217,211,10)" fg:x="380" fg:w="1"/><text x="30.2421%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.9921%" y="293" width="0.0789%" height="15" fill="rgb(219,228,52)" fg:x="380" fg:w="1"/><text x="30.2421%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.0710%" y="325" width="0.0789%" height="15" fill="rgb(231,92,29)" fg:x="381" fg:w="1"/><text x="30.3210%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.0710%" y="309" width="0.0789%" height="15" fill="rgb(232,8,23)" fg:x="381" fg:w="1"/><text x="30.3210%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="30.0710%" y="293" width="0.0789%" height="15" fill="rgb(216,211,34)" fg:x="381" fg:w="1"/><text x="30.3210%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="30.0710%" y="277" width="0.0789%" height="15" fill="rgb(236,151,0)" fg:x="381" fg:w="1"/><text x="30.3210%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.1500%" y="325" width="0.0789%" height="15" fill="rgb(209,168,3)" fg:x="382" fg:w="1"/><text x="30.4000%" y="335.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (230 samples, 18.15%)</title><rect x="12.3125%" y="421" width="18.1531%" height="15" fill="rgb(208,129,28)" fg:x="156" fg:w="230"/><text x="12.5625%" y="431.50">indefinite::helper::Helper::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.79%)</title><rect x="29.6764%" y="405" width="0.7893%" height="15" fill="rgb(229,78,22)" fg:x="376" fg:w="10"/><text x="29.9264%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.79%)</title><rect x="29.6764%" y="389" width="0.7893%" height="15" fill="rgb(228,187,13)" fg:x="376" fg:w="10"/><text x="29.9264%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.79%)</title><rect x="29.6764%" y="373" width="0.7893%" height="15" fill="rgb(240,119,24)" fg:x="376" fg:w="10"/><text x="29.9264%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.79%)</title><rect x="29.6764%" y="357" width="0.7893%" height="15" fill="rgb(209,194,42)" fg:x="376" fg:w="10"/><text x="29.9264%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.79%)</title><rect x="29.6764%" y="341" width="0.7893%" height="15" fill="rgb(247,200,46)" fg:x="376" fg:w="10"/><text x="29.9264%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="30.2289%" y="325" width="0.2368%" height="15" fill="rgb(218,76,16)" fg:x="383" fg:w="3"/><text x="30.4789%" y="335.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.7024%" y="309" width="0.0789%" height="15" fill="rgb(225,21,48)" fg:x="389" fg:w="1"/><text x="30.9524%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="30.5446%" y="357" width="0.3157%" height="15" fill="rgb(239,223,50)" fg:x="387" fg:w="4"/><text x="30.7946%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="30.5446%" y="341" width="0.3157%" height="15" fill="rgb(244,45,21)" fg:x="387" fg:w="4"/><text x="30.7946%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.24%)</title><rect x="30.6235%" y="325" width="0.2368%" height="15" fill="rgb(232,33,43)" fg:x="388" fg:w="3"/><text x="30.8735%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.7814%" y="309" width="0.0789%" height="15" fill="rgb(209,8,3)" fg:x="390" fg:w="1"/><text x="31.0314%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.8603%" y="357" width="0.0789%" height="15" fill="rgb(214,25,53)" fg:x="391" fg:w="1"/><text x="31.1103%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.8603%" y="341" width="0.0789%" height="15" fill="rgb(254,186,54)" fg:x="391" fg:w="1"/><text x="31.1103%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.8603%" y="325" width="0.0789%" height="15" fill="rgb(208,174,49)" fg:x="391" fg:w="1"/><text x="31.1103%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.9392%" y="325" width="0.0789%" height="15" fill="rgb(233,191,51)" fg:x="392" fg:w="1"/><text x="31.1892%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="31.0182%" y="325" width="0.0789%" height="15" fill="rgb(222,134,10)" fg:x="393" fg:w="1"/><text x="31.2682%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.0182%" y="309" width="0.0789%" height="15" fill="rgb(230,226,20)" fg:x="393" fg:w="1"/><text x="31.2682%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="31.0971%" y="293" width="0.0789%" height="15" fill="rgb(251,111,25)" fg:x="394" fg:w="1"/><text x="31.3471%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.0971%" y="277" width="0.0789%" height="15" fill="rgb(224,40,46)" fg:x="394" fg:w="1"/><text x="31.3471%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.0971%" y="261" width="0.0789%" height="15" fill="rgb(236,108,47)" fg:x="394" fg:w="1"/><text x="31.3471%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.0971%" y="245" width="0.0789%" height="15" fill="rgb(234,93,0)" fg:x="394" fg:w="1"/><text x="31.3471%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="30.9392%" y="357" width="0.3157%" height="15" fill="rgb(224,213,32)" fg:x="392" fg:w="4"/><text x="31.1892%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="30.9392%" y="341" width="0.3157%" height="15" fill="rgb(251,11,48)" fg:x="392" fg:w="4"/><text x="31.1892%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="31.0971%" y="325" width="0.1579%" height="15" fill="rgb(236,173,5)" fg:x="394" fg:w="2"/><text x="31.3471%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.0971%" y="309" width="0.1579%" height="15" fill="rgb(230,95,12)" fg:x="394" fg:w="2"/><text x="31.3471%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.1760%" y="293" width="0.0789%" height="15" fill="rgb(232,209,1)" fg:x="395" fg:w="1"/><text x="31.4260%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.2549%" y="341" width="0.0789%" height="15" fill="rgb(232,6,1)" fg:x="396" fg:w="1"/><text x="31.5049%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (23 samples, 1.82%)</title><rect x="31.4917%" y="325" width="1.8153%" height="15" fill="rgb(210,224,50)" fg:x="399" fg:w="23"/><text x="31.7417%" y="335.50">c..</text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="32.9913%" y="309" width="0.3157%" height="15" fill="rgb(228,127,35)" fg:x="418" fg:w="4"/><text x="33.2413%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (26 samples, 2.05%)</title><rect x="31.3339%" y="341" width="2.0521%" height="15" fill="rgb(245,102,45)" fg:x="397" fg:w="26"/><text x="31.5839%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="33.3070%" y="325" width="0.0789%" height="15" fill="rgb(214,1,49)" fg:x="422" fg:w="1"/><text x="33.5570%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::error::BuildError&gt; (1 samples, 0.08%)</title><rect x="33.3860%" y="341" width="0.0789%" height="15" fill="rgb(226,163,40)" fg:x="423" fg:w="1"/><text x="33.6360%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="33.5438%" y="325" width="0.3157%" height="15" fill="rgb(239,212,28)" fg:x="425" fg:w="4"/><text x="33.7938%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.47%)</title><rect x="33.4649%" y="341" width="0.4736%" height="15" fill="rgb(220,20,13)" fg:x="424" fg:w="6"/><text x="33.7149%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="33.8595%" y="325" width="0.0789%" height="15" fill="rgb(210,164,35)" fg:x="429" fg:w="1"/><text x="34.1095%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="34.4909%" y="309" width="0.0789%" height="15" fill="rgb(248,109,41)" fg:x="437" fg:w="1"/><text x="34.7409%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="34.5699%" y="309" width="0.0789%" height="15" fill="rgb(238,23,50)" fg:x="438" fg:w="1"/><text x="34.8199%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.5699%" y="293" width="0.0789%" height="15" fill="rgb(211,48,49)" fg:x="438" fg:w="1"/><text x="34.8199%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.5699%" y="277" width="0.0789%" height="15" fill="rgb(223,36,21)" fg:x="438" fg:w="1"/><text x="34.8199%" y="287.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="35.0434%" y="245" width="0.0789%" height="15" fill="rgb(207,123,46)" fg:x="444" fg:w="1"/><text x="35.2934%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.55%)</title><rect x="34.6488%" y="309" width="0.5525%" height="15" fill="rgb(240,218,32)" fg:x="439" fg:w="7"/><text x="34.8988%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.39%)</title><rect x="34.8066%" y="293" width="0.3946%" height="15" fill="rgb(252,5,43)" fg:x="441" fg:w="5"/><text x="35.0566%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="35.0434%" y="277" width="0.1579%" height="15" fill="rgb(252,84,19)" fg:x="444" fg:w="2"/><text x="35.2934%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="35.0434%" y="261" width="0.1579%" height="15" fill="rgb(243,152,39)" fg:x="444" fg:w="2"/><text x="35.2934%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.1223%" y="245" width="0.0789%" height="15" fill="rgb(234,160,15)" fg:x="445" fg:w="1"/><text x="35.3723%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.3591%" y="277" width="0.0789%" height="15" fill="rgb(237,34,20)" fg:x="448" fg:w="1"/><text x="35.6091%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (9 samples, 0.71%)</title><rect x="35.2013%" y="309" width="0.7103%" height="15" fill="rgb(229,97,13)" fg:x="446" fg:w="9"/><text x="35.4513%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (8 samples, 0.63%)</title><rect x="35.2802%" y="293" width="0.6314%" height="15" fill="rgb(234,71,50)" fg:x="447" fg:w="8"/><text x="35.5302%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.47%)</title><rect x="35.4380%" y="277" width="0.4736%" height="15" fill="rgb(253,155,4)" fg:x="449" fg:w="6"/><text x="35.6880%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="35.9116%" y="309" width="0.0789%" height="15" fill="rgb(222,185,37)" fg:x="455" fg:w="1"/><text x="36.1616%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (26 samples, 2.05%)</title><rect x="34.0174%" y="325" width="2.0521%" height="15" fill="rgb(251,177,13)" fg:x="431" fg:w="26"/><text x="34.2674%" y="335.50">r..</text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::patterns (1 samples, 0.08%)</title><rect x="35.9905%" y="309" width="0.0789%" height="15" fill="rgb(250,179,40)" fg:x="456" fg:w="1"/><text x="36.2405%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (28 samples, 2.21%)</title><rect x="33.9384%" y="341" width="2.2099%" height="15" fill="rgb(242,44,2)" fg:x="430" fg:w="28"/><text x="34.1884%" y="351.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="36.0695%" y="325" width="0.0789%" height="15" fill="rgb(216,177,13)" fg:x="457" fg:w="1"/><text x="36.3195%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="36.1484%" y="341" width="0.0789%" height="15" fill="rgb(216,106,43)" fg:x="458" fg:w="1"/><text x="36.3984%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="36.3062%" y="293" width="0.0789%" height="15" fill="rgb(216,183,2)" fg:x="460" fg:w="1"/><text x="36.5562%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.3062%" y="277" width="0.0789%" height="15" fill="rgb(249,75,3)" fg:x="460" fg:w="1"/><text x="36.5562%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.3062%" y="261" width="0.0789%" height="15" fill="rgb(219,67,39)" fg:x="460" fg:w="1"/><text x="36.5562%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.3062%" y="245" width="0.0789%" height="15" fill="rgb(253,228,2)" fg:x="460" fg:w="1"/><text x="36.5562%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="36.4641%" y="261" width="0.0789%" height="15" fill="rgb(235,138,27)" fg:x="462" fg:w="1"/><text x="36.7141%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="36.6219%" y="245" width="0.0789%" height="15" fill="rgb(236,97,51)" fg:x="464" fg:w="1"/><text x="36.8719%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.71%)</title><rect x="37.4112%" y="229" width="0.7103%" height="15" fill="rgb(240,80,30)" fg:x="474" fg:w="9"/><text x="37.6612%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (8 samples, 0.63%)</title><rect x="38.1215%" y="229" width="0.6314%" height="15" fill="rgb(230,178,19)" fg:x="483" fg:w="8"/><text x="38.3715%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.47%)</title><rect x="38.2794%" y="213" width="0.4736%" height="15" fill="rgb(210,190,27)" fg:x="485" fg:w="6"/><text x="38.5294%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.47%)</title><rect x="38.2794%" y="197" width="0.4736%" height="15" fill="rgb(222,107,31)" fg:x="485" fg:w="6"/><text x="38.5294%" y="207.50"></text></g><g><title>realloc (6 samples, 0.47%)</title><rect x="38.2794%" y="181" width="0.4736%" height="15" fill="rgb(216,127,34)" fg:x="485" fg:w="6"/><text x="38.5294%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.32%)</title><rect x="38.7530%" y="229" width="0.3157%" height="15" fill="rgb(234,116,52)" fg:x="491" fg:w="4"/><text x="39.0030%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="38.9108%" y="213" width="0.1579%" height="15" fill="rgb(222,124,15)" fg:x="493" fg:w="2"/><text x="39.1608%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.9108%" y="197" width="0.1579%" height="15" fill="rgb(231,179,28)" fg:x="493" fg:w="2"/><text x="39.1608%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="38.9108%" y="181" width="0.1579%" height="15" fill="rgb(226,93,45)" fg:x="493" fg:w="2"/><text x="39.1608%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.4633%" y="197" width="0.0789%" height="15" fill="rgb(215,8,51)" fg:x="500" fg:w="1"/><text x="39.7133%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.6212%" y="165" width="0.0789%" height="15" fill="rgb(223,106,5)" fg:x="502" fg:w="1"/><text x="39.8712%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="39.5422%" y="197" width="0.3157%" height="15" fill="rgb(250,191,5)" fg:x="501" fg:w="4"/><text x="39.7922%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="39.5422%" y="181" width="0.3157%" height="15" fill="rgb(242,132,44)" fg:x="501" fg:w="4"/><text x="39.7922%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="39.7001%" y="165" width="0.1579%" height="15" fill="rgb(251,152,29)" fg:x="503" fg:w="2"/><text x="39.9501%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.1736%" y="181" width="0.0789%" height="15" fill="rgb(218,179,5)" fg:x="509" fg:w="1"/><text x="40.4236%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (16 samples, 1.26%)</title><rect x="39.0687%" y="229" width="1.2628%" height="15" fill="rgb(227,67,19)" fg:x="495" fg:w="16"/><text x="39.3187%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (14 samples, 1.10%)</title><rect x="39.2265%" y="213" width="1.1050%" height="15" fill="rgb(233,119,31)" fg:x="497" fg:w="14"/><text x="39.4765%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.47%)</title><rect x="39.8579%" y="197" width="0.4736%" height="15" fill="rgb(241,120,22)" fg:x="505" fg:w="6"/><text x="40.1079%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.2526%" y="181" width="0.0789%" height="15" fill="rgb(224,102,30)" fg:x="510" fg:w="1"/><text x="40.5026%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.2526%" y="165" width="0.0789%" height="15" fill="rgb(210,164,37)" fg:x="510" fg:w="1"/><text x="40.5026%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.2526%" y="149" width="0.0789%" height="15" fill="rgb(226,191,16)" fg:x="510" fg:w="1"/><text x="40.5026%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.2526%" y="133" width="0.0789%" height="15" fill="rgb(214,40,45)" fg:x="510" fg:w="1"/><text x="40.5026%" y="143.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="40.3315%" y="197" width="0.2368%" height="15" fill="rgb(244,29,26)" fg:x="511" fg:w="3"/><text x="40.5815%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (113 samples, 8.92%)</title><rect x="40.3315%" y="229" width="8.9187%" height="15" fill="rgb(216,16,5)" fg:x="511" fg:w="113"/><text x="40.5815%" y="239.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (113 samples, 8.92%)</title><rect x="40.3315%" y="213" width="8.9187%" height="15" fill="rgb(249,76,35)" fg:x="511" fg:w="113"/><text x="40.5815%" y="223.50">regex_automat..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (110 samples, 8.68%)</title><rect x="40.5683%" y="197" width="8.6819%" height="15" fill="rgb(207,11,44)" fg:x="514" fg:w="110"/><text x="40.8183%" y="207.50">alloc::vec::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="49.2502%" y="229" width="0.2368%" height="15" fill="rgb(228,190,49)" fg:x="624" fg:w="3"/><text x="49.5002%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="49.4870%" y="229" width="0.0789%" height="15" fill="rgb(214,173,12)" fg:x="627" fg:w="1"/><text x="49.7370%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (180 samples, 14.21%)</title><rect x="36.2273%" y="325" width="14.2068%" height="15" fill="rgb(218,26,35)" fg:x="459" fg:w="180"/><text x="36.4773%" y="335.50">&lt;core::iter::adapters:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (180 samples, 14.21%)</title><rect x="36.2273%" y="309" width="14.2068%" height="15" fill="rgb(220,200,19)" fg:x="459" fg:w="180"/><text x="36.4773%" y="319.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (178 samples, 14.05%)</title><rect x="36.3852%" y="293" width="14.0489%" height="15" fill="rgb(239,95,49)" fg:x="461" fg:w="178"/><text x="36.6352%" y="303.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (177 samples, 13.97%)</title><rect x="36.4641%" y="277" width="13.9700%" height="15" fill="rgb(235,85,53)" fg:x="462" fg:w="177"/><text x="36.7141%" y="287.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (176 samples, 13.89%)</title><rect x="36.5430%" y="261" width="13.8911%" height="15" fill="rgb(233,133,31)" fg:x="463" fg:w="176"/><text x="36.7930%" y="271.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (174 samples, 13.73%)</title><rect x="36.7009%" y="245" width="13.7332%" height="15" fill="rgb(218,25,20)" fg:x="465" fg:w="174"/><text x="36.9509%" y="255.50">regex_automata::nfa::..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (11 samples, 0.87%)</title><rect x="49.5659%" y="229" width="0.8682%" height="15" fill="rgb(252,210,38)" fg:x="628" fg:w="11"/><text x="49.8159%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.55%)</title><rect x="49.8816%" y="213" width="0.5525%" height="15" fill="rgb(242,134,21)" fg:x="632" fg:w="7"/><text x="50.1316%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.47%)</title><rect x="49.9605%" y="197" width="0.4736%" height="15" fill="rgb(213,28,48)" fg:x="633" fg:w="6"/><text x="50.2105%" y="207.50"></text></g><g><title>__libc_malloc (5 samples, 0.39%)</title><rect x="50.0395%" y="181" width="0.3946%" height="15" fill="rgb(250,196,2)" fg:x="634" fg:w="5"/><text x="50.2895%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.55%)</title><rect x="50.6709%" y="309" width="0.5525%" height="15" fill="rgb(227,5,17)" fg:x="642" fg:w="7"/><text x="50.9209%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.1444%" y="293" width="0.0789%" height="15" fill="rgb(221,226,24)" fg:x="648" fg:w="1"/><text x="51.3944%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.1444%" y="277" width="0.0789%" height="15" fill="rgb(211,5,48)" fg:x="648" fg:w="1"/><text x="51.3944%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.1444%" y="261" width="0.0789%" height="15" fill="rgb(219,150,6)" fg:x="648" fg:w="1"/><text x="51.3944%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.47%)</title><rect x="51.2234%" y="309" width="0.4736%" height="15" fill="rgb(251,46,16)" fg:x="649" fg:w="6"/><text x="51.4734%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.6180%" y="293" width="0.0789%" height="15" fill="rgb(220,204,40)" fg:x="654" fg:w="1"/><text x="51.8680%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.6180%" y="277" width="0.0789%" height="15" fill="rgb(211,85,2)" fg:x="654" fg:w="1"/><text x="51.8680%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.6180%" y="261" width="0.0789%" height="15" fill="rgb(229,17,7)" fg:x="654" fg:w="1"/><text x="51.8680%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="51.6969%" y="309" width="0.0789%" height="15" fill="rgb(239,72,28)" fg:x="655" fg:w="1"/><text x="51.9469%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (199 samples, 15.71%)</title><rect x="36.2273%" y="341" width="15.7064%" height="15" fill="rgb(230,47,54)" fg:x="459" fg:w="199"/><text x="36.4773%" y="351.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (19 samples, 1.50%)</title><rect x="50.4341%" y="325" width="1.4996%" height="15" fill="rgb(214,50,8)" fg:x="639" fg:w="19"/><text x="50.6841%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="51.7758%" y="309" width="0.1579%" height="15" fill="rgb(216,198,43)" fg:x="656" fg:w="2"/><text x="52.0258%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.8548%" y="293" width="0.0789%" height="15" fill="rgb(234,20,35)" fg:x="657" fg:w="1"/><text x="52.1048%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.8548%" y="277" width="0.0789%" height="15" fill="rgb(254,45,19)" fg:x="657" fg:w="1"/><text x="52.1048%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.8548%" y="261" width="0.0789%" height="15" fill="rgb(219,14,44)" fg:x="657" fg:w="1"/><text x="52.1048%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (264 samples, 20.84%)</title><rect x="31.2549%" y="357" width="20.8366%" height="15" fill="rgb(217,220,26)" fg:x="396" fg:w="264"/><text x="31.5049%" y="367.50">regex_automata::meta::strategy::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="51.9337%" y="341" width="0.1579%" height="15" fill="rgb(213,158,28)" fg:x="658" fg:w="2"/><text x="52.1837%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="52.0126%" y="325" width="0.0789%" height="15" fill="rgb(252,51,52)" fg:x="659" fg:w="1"/><text x="52.2626%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="52.0126%" y="309" width="0.0789%" height="15" fill="rgb(246,89,16)" fg:x="659" fg:w="1"/><text x="52.2626%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="52.0916%" y="325" width="0.0789%" height="15" fill="rgb(216,158,49)" fg:x="660" fg:w="1"/><text x="52.3416%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="52.0916%" y="309" width="0.0789%" height="15" fill="rgb(236,107,19)" fg:x="660" fg:w="1"/><text x="52.3416%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="52.1705%" y="309" width="0.0789%" height="15" fill="rgb(228,185,30)" fg:x="661" fg:w="1"/><text x="52.4205%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="52.1705%" y="293" width="0.0789%" height="15" fill="rgb(246,134,8)" fg:x="661" fg:w="1"/><text x="52.4205%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="52.1705%" y="277" width="0.0789%" height="15" fill="rgb(214,143,50)" fg:x="661" fg:w="1"/><text x="52.4205%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="52.1705%" y="325" width="0.1579%" height="15" fill="rgb(228,75,8)" fg:x="661" fg:w="2"/><text x="52.4205%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="52.2494%" y="309" width="0.0789%" height="15" fill="rgb(207,175,4)" fg:x="662" fg:w="1"/><text x="52.4994%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.2494%" y="293" width="0.0789%" height="15" fill="rgb(205,108,24)" fg:x="662" fg:w="1"/><text x="52.4994%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.2494%" y="277" width="0.0789%" height="15" fill="rgb(244,120,49)" fg:x="662" fg:w="1"/><text x="52.4994%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.2494%" y="261" width="0.0789%" height="15" fill="rgb(223,47,38)" fg:x="662" fg:w="1"/><text x="52.4994%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="52.3283%" y="325" width="0.0789%" height="15" fill="rgb(229,179,11)" fg:x="663" fg:w="1"/><text x="52.5783%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="52.4073%" y="325" width="0.0789%" height="15" fill="rgb(231,122,1)" fg:x="664" fg:w="1"/><text x="52.6573%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.4073%" y="309" width="0.0789%" height="15" fill="rgb(245,119,9)" fg:x="664" fg:w="1"/><text x="52.6573%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.55%)</title><rect x="52.0916%" y="357" width="0.5525%" height="15" fill="rgb(241,163,25)" fg:x="660" fg:w="7"/><text x="52.3416%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.55%)</title><rect x="52.0916%" y="341" width="0.5525%" height="15" fill="rgb(217,214,3)" fg:x="660" fg:w="7"/><text x="52.3416%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="52.4862%" y="325" width="0.1579%" height="15" fill="rgb(240,86,28)" fg:x="665" fg:w="2"/><text x="52.7362%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.16%)</title><rect x="52.4862%" y="309" width="0.1579%" height="15" fill="rgb(215,47,9)" fg:x="665" fg:w="2"/><text x="52.7362%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.47%)</title><rect x="52.7230%" y="309" width="0.4736%" height="15" fill="rgb(252,25,45)" fg:x="668" fg:w="6"/><text x="52.9730%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="52.9597%" y="293" width="0.2368%" height="15" fill="rgb(251,164,9)" fg:x="671" fg:w="3"/><text x="53.2097%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (8 samples, 0.63%)</title><rect x="52.7230%" y="325" width="0.6314%" height="15" fill="rgb(233,194,0)" fg:x="668" fg:w="8"/><text x="52.9730%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="53.1965%" y="309" width="0.1579%" height="15" fill="rgb(249,111,24)" fg:x="674" fg:w="2"/><text x="53.4465%" y="319.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="53.1965%" y="293" width="0.1579%" height="15" fill="rgb(250,223,3)" fg:x="674" fg:w="2"/><text x="53.4465%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.2755%" y="277" width="0.0789%" height="15" fill="rgb(236,178,37)" fg:x="675" fg:w="1"/><text x="53.5255%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="53.3544%" y="325" width="0.1579%" height="15" fill="rgb(241,158,50)" fg:x="676" fg:w="2"/><text x="53.6044%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="53.4333%" y="309" width="0.0789%" height="15" fill="rgb(213,121,41)" fg:x="677" fg:w="1"/><text x="53.6833%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (293 samples, 23.13%)</title><rect x="30.5446%" y="373" width="23.1255%" height="15" fill="rgb(240,92,3)" fg:x="387" fg:w="293"/><text x="30.7946%" y="383.50">regex_automata::meta::regex::Builder:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (13 samples, 1.03%)</title><rect x="52.6440%" y="357" width="1.0260%" height="15" fill="rgb(205,123,3)" fg:x="667" fg:w="13"/><text x="52.8940%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (13 samples, 1.03%)</title><rect x="52.6440%" y="341" width="1.0260%" height="15" fill="rgb(205,97,47)" fg:x="667" fg:w="13"/><text x="52.8940%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="53.5122%" y="325" width="0.1579%" height="15" fill="rgb(247,152,14)" fg:x="678" fg:w="2"/><text x="53.7622%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="53.5912%" y="309" width="0.0789%" height="15" fill="rgb(248,195,53)" fg:x="679" fg:w="1"/><text x="53.8412%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.5912%" y="293" width="0.0789%" height="15" fill="rgb(226,201,16)" fg:x="679" fg:w="1"/><text x="53.8412%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.5912%" y="277" width="0.0789%" height="15" fill="rgb(205,98,0)" fg:x="679" fg:w="1"/><text x="53.8412%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.5912%" y="261" width="0.0789%" height="15" fill="rgb(214,191,48)" fg:x="679" fg:w="1"/><text x="53.8412%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (295 samples, 23.28%)</title><rect x="30.4657%" y="405" width="23.2833%" height="15" fill="rgb(237,112,39)" fg:x="386" fg:w="295"/><text x="30.7157%" y="415.50">&lt;regex::regex::string::Regex as core:..</text></g><g><title>regex::builders::Builder::build_one_string (295 samples, 23.28%)</title><rect x="30.4657%" y="389" width="23.2833%" height="15" fill="rgb(247,203,27)" fg:x="386" fg:w="295"/><text x="30.7157%" y="399.50">regex::builders::Builder::build_one_s..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="53.6701%" y="373" width="0.0789%" height="15" fill="rgb(235,124,28)" fg:x="680" fg:w="1"/><text x="53.9201%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="53.7490%" y="357" width="0.0789%" height="15" fill="rgb(208,207,46)" fg:x="681" fg:w="1"/><text x="53.9990%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="53.7490%" y="341" width="0.0789%" height="15" fill="rgb(234,176,4)" fg:x="681" fg:w="1"/><text x="53.9990%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="53.7490%" y="373" width="0.1579%" height="15" fill="rgb(230,133,28)" fg:x="681" fg:w="2"/><text x="53.9990%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="53.8279%" y="357" width="0.0789%" height="15" fill="rgb(211,137,40)" fg:x="682" fg:w="1"/><text x="54.0779%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="53.8279%" y="341" width="0.0789%" height="15" fill="rgb(254,35,13)" fg:x="682" fg:w="1"/><text x="54.0779%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="53.8279%" y="325" width="0.0789%" height="15" fill="rgb(225,49,51)" fg:x="682" fg:w="1"/><text x="54.0779%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.8279%" y="309" width="0.0789%" height="15" fill="rgb(251,10,15)" fg:x="682" fg:w="1"/><text x="54.0779%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.9069%" y="357" width="0.0789%" height="15" fill="rgb(228,207,15)" fg:x="683" fg:w="1"/><text x="54.1569%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="53.7490%" y="405" width="0.3157%" height="15" fill="rgb(241,99,19)" fg:x="681" fg:w="4"/><text x="53.9990%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="53.7490%" y="389" width="0.3157%" height="15" fill="rgb(207,104,49)" fg:x="681" fg:w="4"/><text x="53.9990%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="53.9069%" y="373" width="0.1579%" height="15" fill="rgb(234,99,18)" fg:x="683" fg:w="2"/><text x="54.1569%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="53.9858%" y="357" width="0.0789%" height="15" fill="rgb(213,191,49)" fg:x="684" fg:w="1"/><text x="54.2358%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.9858%" y="341" width="0.0789%" height="15" fill="rgb(210,226,19)" fg:x="684" fg:w="1"/><text x="54.2358%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="54.1436%" y="357" width="0.0789%" height="15" fill="rgb(229,97,18)" fg:x="686" fg:w="1"/><text x="54.3936%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="54.1436%" y="341" width="0.0789%" height="15" fill="rgb(211,167,15)" fg:x="686" fg:w="1"/><text x="54.3936%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="54.0647%" y="389" width="0.2368%" height="15" fill="rgb(210,169,34)" fg:x="685" fg:w="3"/><text x="54.3147%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="54.0647%" y="373" width="0.2368%" height="15" fill="rgb(241,121,31)" fg:x="685" fg:w="3"/><text x="54.3147%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="54.2226%" y="357" width="0.0789%" height="15" fill="rgb(232,40,11)" fg:x="687" fg:w="1"/><text x="54.4726%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="54.6961%" y="309" width="0.0789%" height="15" fill="rgb(205,86,26)" fg:x="693" fg:w="1"/><text x="54.9461%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="54.6961%" y="293" width="0.0789%" height="15" fill="rgb(231,126,28)" fg:x="693" fg:w="1"/><text x="54.9461%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.79%)</title><rect x="54.3015%" y="341" width="0.7893%" height="15" fill="rgb(219,221,18)" fg:x="688" fg:w="10"/><text x="54.5515%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.71%)</title><rect x="54.3804%" y="325" width="0.7103%" height="15" fill="rgb(211,40,0)" fg:x="689" fg:w="9"/><text x="54.6304%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="54.7751%" y="309" width="0.3157%" height="15" fill="rgb(239,85,43)" fg:x="694" fg:w="4"/><text x="55.0251%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (313 samples, 24.70%)</title><rect x="30.4657%" y="421" width="24.7040%" height="15" fill="rgb(231,55,21)" fg:x="386" fg:w="313"/><text x="30.7157%" y="431.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (14 samples, 1.10%)</title><rect x="54.0647%" y="405" width="1.1050%" height="15" fill="rgb(225,184,43)" fg:x="685" fg:w="14"/><text x="54.3147%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.87%)</title><rect x="54.3015%" y="389" width="0.8682%" height="15" fill="rgb(251,158,41)" fg:x="688" fg:w="11"/><text x="54.5515%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.87%)</title><rect x="54.3015%" y="373" width="0.8682%" height="15" fill="rgb(234,159,37)" fg:x="688" fg:w="11"/><text x="54.5515%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.87%)</title><rect x="54.3015%" y="357" width="0.8682%" height="15" fill="rgb(216,204,22)" fg:x="688" fg:w="11"/><text x="54.5515%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="55.0908%" y="341" width="0.0789%" height="15" fill="rgb(214,17,3)" fg:x="698" fg:w="1"/><text x="55.3408%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="55.0908%" y="325" width="0.0789%" height="15" fill="rgb(212,111,17)" fg:x="698" fg:w="1"/><text x="55.3408%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="55.3275%" y="341" width="0.1579%" height="15" fill="rgb(221,157,24)" fg:x="701" fg:w="2"/><text x="55.5775%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="55.3275%" y="325" width="0.1579%" height="15" fill="rgb(252,16,13)" fg:x="701" fg:w="2"/><text x="55.5775%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="55.3275%" y="309" width="0.1579%" height="15" fill="rgb(221,62,2)" fg:x="701" fg:w="2"/><text x="55.5775%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="55.3275%" y="293" width="0.1579%" height="15" fill="rgb(247,87,22)" fg:x="701" fg:w="2"/><text x="55.5775%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.4065%" y="277" width="0.0789%" height="15" fill="rgb(215,73,9)" fg:x="702" fg:w="1"/><text x="55.6565%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (1 samples, 0.08%)</title><rect x="55.4854%" y="341" width="0.0789%" height="15" fill="rgb(207,175,33)" fg:x="703" fg:w="1"/><text x="55.7354%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="55.7222%" y="325" width="0.0789%" height="15" fill="rgb(243,129,54)" fg:x="706" fg:w="1"/><text x="55.9722%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.7222%" y="309" width="0.0789%" height="15" fill="rgb(227,119,45)" fg:x="706" fg:w="1"/><text x="55.9722%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="55.8011%" y="325" width="0.0789%" height="15" fill="rgb(205,109,36)" fg:x="707" fg:w="1"/><text x="56.0511%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="55.8011%" y="309" width="0.0789%" height="15" fill="rgb(205,6,39)" fg:x="707" fg:w="1"/><text x="56.0511%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="55.8800%" y="325" width="0.0789%" height="15" fill="rgb(221,32,16)" fg:x="708" fg:w="1"/><text x="56.1300%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="55.8800%" y="309" width="0.0789%" height="15" fill="rgb(228,144,50)" fg:x="708" fg:w="1"/><text x="56.1300%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="55.9590%" y="309" width="0.0789%" height="15" fill="rgb(229,201,53)" fg:x="709" fg:w="1"/><text x="56.2090%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="55.9590%" y="293" width="0.0789%" height="15" fill="rgb(249,153,27)" fg:x="709" fg:w="1"/><text x="56.2090%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="55.9590%" y="277" width="0.0789%" height="15" fill="rgb(227,106,25)" fg:x="709" fg:w="1"/><text x="56.2090%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="55.9590%" y="261" width="0.0789%" height="15" fill="rgb(230,65,29)" fg:x="709" fg:w="1"/><text x="56.2090%" y="271.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="56.1168%" y="293" width="0.0789%" height="15" fill="rgb(221,57,46)" fg:x="711" fg:w="1"/><text x="56.3668%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.1957%" y="293" width="0.0789%" height="15" fill="rgb(229,161,17)" fg:x="712" fg:w="1"/><text x="56.4457%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.71%)</title><rect x="55.9590%" y="325" width="0.7103%" height="15" fill="rgb(222,213,11)" fg:x="709" fg:w="9"/><text x="56.2090%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.63%)</title><rect x="56.0379%" y="309" width="0.6314%" height="15" fill="rgb(235,35,13)" fg:x="710" fg:w="8"/><text x="56.2879%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.39%)</title><rect x="56.2747%" y="293" width="0.3946%" height="15" fill="rgb(233,158,34)" fg:x="713" fg:w="5"/><text x="56.5247%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (16 samples, 1.26%)</title><rect x="55.5643%" y="341" width="1.2628%" height="15" fill="rgb(215,151,48)" fg:x="704" fg:w="16"/><text x="55.8143%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="56.6693%" y="325" width="0.1579%" height="15" fill="rgb(229,84,14)" fg:x="718" fg:w="2"/><text x="56.9193%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="56.7482%" y="309" width="0.0789%" height="15" fill="rgb(229,68,14)" fg:x="719" fg:w="1"/><text x="56.9982%" y="319.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="56.9061%" y="293" width="0.1579%" height="15" fill="rgb(243,106,26)" fg:x="721" fg:w="2"/><text x="57.1561%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.9850%" y="277" width="0.0789%" height="15" fill="rgb(206,45,38)" fg:x="722" fg:w="1"/><text x="57.2350%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.9850%" y="261" width="0.0789%" height="15" fill="rgb(226,6,15)" fg:x="722" fg:w="1"/><text x="57.2350%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.9850%" y="245" width="0.0789%" height="15" fill="rgb(232,22,54)" fg:x="722" fg:w="1"/><text x="57.2350%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="57.0639%" y="293" width="0.0789%" height="15" fill="rgb(229,222,32)" fg:x="723" fg:w="1"/><text x="57.3139%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.39%)</title><rect x="56.8272%" y="341" width="0.3946%" height="15" fill="rgb(228,62,29)" fg:x="720" fg:w="5"/><text x="57.0772%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.39%)</title><rect x="56.8272%" y="325" width="0.3946%" height="15" fill="rgb(251,103,34)" fg:x="720" fg:w="5"/><text x="57.0772%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="56.9061%" y="309" width="0.3157%" height="15" fill="rgb(233,12,30)" fg:x="721" fg:w="4"/><text x="57.1561%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="57.1429%" y="293" width="0.0789%" height="15" fill="rgb(238,52,0)" fg:x="724" fg:w="1"/><text x="57.3929%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.1429%" y="277" width="0.0789%" height="15" fill="rgb(223,98,5)" fg:x="724" fg:w="1"/><text x="57.3929%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.1429%" y="261" width="0.0789%" height="15" fill="rgb(228,75,37)" fg:x="724" fg:w="1"/><text x="57.3929%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.1429%" y="245" width="0.0789%" height="15" fill="rgb(205,115,49)" fg:x="724" fg:w="1"/><text x="57.3929%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="57.2218%" y="293" width="0.0789%" height="15" fill="rgb(250,154,43)" fg:x="725" fg:w="1"/><text x="57.4718%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.2218%" y="277" width="0.0789%" height="15" fill="rgb(226,43,29)" fg:x="725" fg:w="1"/><text x="57.4718%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.2218%" y="261" width="0.0789%" height="15" fill="rgb(249,228,39)" fg:x="725" fg:w="1"/><text x="57.4718%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.2218%" y="245" width="0.0789%" height="15" fill="rgb(216,79,43)" fg:x="725" fg:w="1"/><text x="57.4718%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="57.2218%" y="309" width="0.1579%" height="15" fill="rgb(228,95,12)" fg:x="725" fg:w="2"/><text x="57.4718%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="57.3007%" y="293" width="0.0789%" height="15" fill="rgb(249,221,15)" fg:x="726" fg:w="1"/><text x="57.5507%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="57.3796%" y="309" width="0.0789%" height="15" fill="rgb(233,34,13)" fg:x="727" fg:w="1"/><text x="57.6296%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="57.3796%" y="293" width="0.0789%" height="15" fill="rgb(214,103,39)" fg:x="727" fg:w="1"/><text x="57.6296%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="57.3796%" y="277" width="0.0789%" height="15" fill="rgb(251,126,39)" fg:x="727" fg:w="1"/><text x="57.6296%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="57.4586%" y="309" width="0.0789%" height="15" fill="rgb(214,216,36)" fg:x="728" fg:w="1"/><text x="57.7086%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (30 samples, 2.37%)</title><rect x="55.2486%" y="357" width="2.3678%" height="15" fill="rgb(220,221,8)" fg:x="700" fg:w="30"/><text x="55.4986%" y="367.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.39%)</title><rect x="57.2218%" y="341" width="0.3946%" height="15" fill="rgb(240,216,3)" fg:x="725" fg:w="5"/><text x="57.4718%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.39%)</title><rect x="57.2218%" y="325" width="0.3946%" height="15" fill="rgb(232,218,17)" fg:x="725" fg:w="5"/><text x="57.4718%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.5375%" y="309" width="0.0789%" height="15" fill="rgb(229,163,45)" fg:x="729" fg:w="1"/><text x="57.7875%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (32 samples, 2.53%)</title><rect x="55.1697%" y="389" width="2.5257%" height="15" fill="rgb(231,110,42)" fg:x="699" fg:w="32"/><text x="55.4197%" y="399.50">&lt;r..</text></g><g><title>regex::builders::Builder::build_one_string (32 samples, 2.53%)</title><rect x="55.1697%" y="373" width="2.5257%" height="15" fill="rgb(208,170,48)" fg:x="699" fg:w="32"/><text x="55.4197%" y="383.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="57.6164%" y="357" width="0.0789%" height="15" fill="rgb(239,116,25)" fg:x="730" fg:w="1"/><text x="57.8664%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.6953%" y="341" width="0.0789%" height="15" fill="rgb(219,200,50)" fg:x="731" fg:w="1"/><text x="57.9453%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="57.6953%" y="357" width="0.1579%" height="15" fill="rgb(245,200,0)" fg:x="731" fg:w="2"/><text x="57.9453%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="57.7743%" y="341" width="0.0789%" height="15" fill="rgb(245,119,33)" fg:x="732" fg:w="1"/><text x="58.0243%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.32%)</title><rect x="57.6953%" y="389" width="0.3157%" height="15" fill="rgb(231,125,12)" fg:x="731" fg:w="4"/><text x="57.9453%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="57.6953%" y="373" width="0.3157%" height="15" fill="rgb(216,96,41)" fg:x="731" fg:w="4"/><text x="57.9453%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="57.8532%" y="357" width="0.1579%" height="15" fill="rgb(248,43,45)" fg:x="733" fg:w="2"/><text x="58.1032%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="57.9321%" y="341" width="0.0789%" height="15" fill="rgb(217,222,7)" fg:x="734" fg:w="1"/><text x="58.1821%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.0110%" y="357" width="0.0789%" height="15" fill="rgb(233,28,6)" fg:x="735" fg:w="1"/><text x="58.2610%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="58.0900%" y="357" width="0.0789%" height="15" fill="rgb(231,218,15)" fg:x="736" fg:w="1"/><text x="58.3400%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="58.0900%" y="341" width="0.0789%" height="15" fill="rgb(226,171,48)" fg:x="736" fg:w="1"/><text x="58.3400%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.2478%" y="325" width="0.0789%" height="15" fill="rgb(235,201,9)" fg:x="738" fg:w="1"/><text x="58.4978%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.39%)</title><rect x="58.0110%" y="389" width="0.3946%" height="15" fill="rgb(217,80,15)" fg:x="735" fg:w="5"/><text x="58.2610%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.39%)</title><rect x="58.0110%" y="373" width="0.3946%" height="15" fill="rgb(219,152,8)" fg:x="735" fg:w="5"/><text x="58.2610%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="58.1689%" y="357" width="0.2368%" height="15" fill="rgb(243,107,38)" fg:x="737" fg:w="3"/><text x="58.4189%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="58.1689%" y="341" width="0.2368%" height="15" fill="rgb(231,17,5)" fg:x="737" fg:w="3"/><text x="58.4189%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.3268%" y="325" width="0.0789%" height="15" fill="rgb(209,25,54)" fg:x="739" fg:w="1"/><text x="58.5768%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="58.5635%" y="309" width="0.0789%" height="15" fill="rgb(219,0,2)" fg:x="742" fg:w="1"/><text x="58.8135%" y="319.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (45 samples, 3.55%)</title><rect x="55.1697%" y="405" width="3.5517%" height="15" fill="rgb(246,9,5)" fg:x="699" fg:w="45"/><text x="55.4197%" y="415.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="58.4057%" y="389" width="0.3157%" height="15" fill="rgb(226,159,4)" fg:x="740" fg:w="4"/><text x="58.6557%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="58.4057%" y="373" width="0.3157%" height="15" fill="rgb(219,175,34)" fg:x="740" fg:w="4"/><text x="58.6557%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="58.4057%" y="357" width="0.3157%" height="15" fill="rgb(236,10,46)" fg:x="740" fg:w="4"/><text x="58.6557%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="58.4057%" y="341" width="0.3157%" height="15" fill="rgb(240,211,16)" fg:x="740" fg:w="4"/><text x="58.6557%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="58.4057%" y="325" width="0.3157%" height="15" fill="rgb(205,3,43)" fg:x="740" fg:w="4"/><text x="58.6557%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="58.6425%" y="309" width="0.0789%" height="15" fill="rgb(245,7,22)" fg:x="743" fg:w="1"/><text x="58.8925%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.6425%" y="293" width="0.0789%" height="15" fill="rgb(239,132,32)" fg:x="743" fg:w="1"/><text x="58.8925%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.6425%" y="277" width="0.0789%" height="15" fill="rgb(228,202,34)" fg:x="743" fg:w="1"/><text x="58.8925%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6425%" y="261" width="0.0789%" height="15" fill="rgb(254,200,22)" fg:x="743" fg:w="1"/><text x="58.8925%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (604 samples, 47.67%)</title><rect x="11.1287%" y="501" width="47.6717%" height="15" fill="rgb(219,10,39)" fg:x="141" fg:w="604"/><text x="11.3787%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies..</text></g><g><title>plugins_core::looking::model::qualify_name (589 samples, 46.49%)</title><rect x="12.3125%" y="485" width="46.4878%" height="15" fill="rgb(226,210,39)" fg:x="156" fg:w="589"/><text x="12.5625%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (589 samples, 46.49%)</title><rect x="12.3125%" y="469" width="46.4878%" height="15" fill="rgb(208,219,16)" fg:x="156" fg:w="589"/><text x="12.5625%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (589 samples, 46.49%)</title><rect x="12.3125%" y="453" width="46.4878%" height="15" fill="rgb(216,158,51)" fg:x="156" fg:w="589"/><text x="12.5625%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (589 samples, 46.49%)</title><rect x="12.3125%" y="437" width="46.4878%" height="15" fill="rgb(233,14,44)" fg:x="156" fg:w="589"/><text x="12.5625%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (46 samples, 3.63%)</title><rect x="55.1697%" y="421" width="3.6306%" height="15" fill="rgb(237,97,39)" fg:x="699" fg:w="46"/><text x="55.4197%" y="431.50">inde..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="58.7214%" y="405" width="0.0789%" height="15" fill="rgb(218,198,43)" fg:x="744" fg:w="1"/><text x="58.9714%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="58.8003%" y="501" width="0.0789%" height="15" fill="rgb(231,104,20)" fg:x="745" fg:w="1"/><text x="59.0503%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="58.8003%" y="485" width="0.0789%" height="15" fill="rgb(254,36,13)" fg:x="745" fg:w="1"/><text x="59.0503%" y="495.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="58.8003%" y="469" width="0.0789%" height="15" fill="rgb(248,14,50)" fg:x="745" fg:w="1"/><text x="59.0503%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.8003%" y="453" width="0.0789%" height="15" fill="rgb(217,107,29)" fg:x="745" fg:w="1"/><text x="59.0503%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.8003%" y="437" width="0.0789%" height="15" fill="rgb(251,169,33)" fg:x="745" fg:w="1"/><text x="59.0503%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.8003%" y="421" width="0.0789%" height="15" fill="rgb(217,108,32)" fg:x="745" fg:w="1"/><text x="59.0503%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.8003%" y="405" width="0.0789%" height="15" fill="rgb(219,66,42)" fg:x="745" fg:w="1"/><text x="59.0503%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.8003%" y="389" width="0.0789%" height="15" fill="rgb(206,180,7)" fg:x="745" fg:w="1"/><text x="59.0503%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.8003%" y="373" width="0.0789%" height="15" fill="rgb(208,226,31)" fg:x="745" fg:w="1"/><text x="59.0503%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.8003%" y="357" width="0.0789%" height="15" fill="rgb(218,26,49)" fg:x="745" fg:w="1"/><text x="59.0503%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="58.8003%" y="341" width="0.0789%" height="15" fill="rgb(233,197,48)" fg:x="745" fg:w="1"/><text x="59.0503%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="58.8003%" y="325" width="0.0789%" height="15" fill="rgb(252,181,51)" fg:x="745" fg:w="1"/><text x="59.0503%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="58.8003%" y="309" width="0.0789%" height="15" fill="rgb(253,90,19)" fg:x="745" fg:w="1"/><text x="59.0503%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="58.8003%" y="293" width="0.0789%" height="15" fill="rgb(215,171,30)" fg:x="745" fg:w="1"/><text x="59.0503%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.8003%" y="277" width="0.0789%" height="15" fill="rgb(214,222,9)" fg:x="745" fg:w="1"/><text x="59.0503%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="58.8792%" y="501" width="0.0789%" height="15" fill="rgb(223,3,22)" fg:x="746" fg:w="1"/><text x="59.1292%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.8792%" y="485" width="0.0789%" height="15" fill="rgb(225,196,46)" fg:x="746" fg:w="1"/><text x="59.1292%" y="495.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.9582%" y="469" width="0.0789%" height="15" fill="rgb(209,110,37)" fg:x="747" fg:w="1"/><text x="59.2082%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.9582%" y="453" width="0.0789%" height="15" fill="rgb(249,89,12)" fg:x="747" fg:w="1"/><text x="59.2082%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.9582%" y="437" width="0.0789%" height="15" fill="rgb(226,27,33)" fg:x="747" fg:w="1"/><text x="59.2082%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.9582%" y="421" width="0.0789%" height="15" fill="rgb(213,82,22)" fg:x="747" fg:w="1"/><text x="59.2082%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.9582%" y="405" width="0.0789%" height="15" fill="rgb(248,140,0)" fg:x="747" fg:w="1"/><text x="59.2082%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.9582%" y="389" width="0.0789%" height="15" fill="rgb(228,106,3)" fg:x="747" fg:w="1"/><text x="59.2082%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.9582%" y="373" width="0.0789%" height="15" fill="rgb(209,23,37)" fg:x="747" fg:w="1"/><text x="59.2082%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.9582%" y="357" width="0.0789%" height="15" fill="rgb(241,93,50)" fg:x="747" fg:w="1"/><text x="59.2082%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.9582%" y="341" width="0.0789%" height="15" fill="rgb(253,46,43)" fg:x="747" fg:w="1"/><text x="59.2082%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="58.9582%" y="325" width="0.0789%" height="15" fill="rgb(226,206,43)" fg:x="747" fg:w="1"/><text x="59.2082%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="58.9582%" y="309" width="0.0789%" height="15" fill="rgb(217,54,7)" fg:x="747" fg:w="1"/><text x="59.2082%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="58.9582%" y="293" width="0.0789%" height="15" fill="rgb(223,5,52)" fg:x="747" fg:w="1"/><text x="59.2082%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="58.9582%" y="277" width="0.0789%" height="15" fill="rgb(206,52,46)" fg:x="747" fg:w="1"/><text x="59.2082%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.9582%" y="261" width="0.0789%" height="15" fill="rgb(253,136,11)" fg:x="747" fg:w="1"/><text x="59.2082%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="59.0371%" y="325" width="0.0789%" height="15" fill="rgb(208,106,33)" fg:x="748" fg:w="1"/><text x="59.2871%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="59.0371%" y="309" width="0.0789%" height="15" fill="rgb(206,54,4)" fg:x="748" fg:w="1"/><text x="59.2871%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="59.0371%" y="293" width="0.0789%" height="15" fill="rgb(213,3,15)" fg:x="748" fg:w="1"/><text x="59.2871%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.0371%" y="277" width="0.0789%" height="15" fill="rgb(252,211,39)" fg:x="748" fg:w="1"/><text x="59.2871%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.0371%" y="261" width="0.0789%" height="15" fill="rgb(223,6,36)" fg:x="748" fg:w="1"/><text x="59.2871%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.0371%" y="245" width="0.0789%" height="15" fill="rgb(252,169,45)" fg:x="748" fg:w="1"/><text x="59.2871%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.0371%" y="229" width="0.0789%" height="15" fill="rgb(212,48,26)" fg:x="748" fg:w="1"/><text x="59.2871%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.1160%" y="277" width="0.0789%" height="15" fill="rgb(251,102,48)" fg:x="749" fg:w="1"/><text x="59.3660%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.1160%" y="261" width="0.0789%" height="15" fill="rgb(243,208,16)" fg:x="749" fg:w="1"/><text x="59.3660%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.1160%" y="245" width="0.0789%" height="15" fill="rgb(219,96,24)" fg:x="749" fg:w="1"/><text x="59.3660%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.1160%" y="229" width="0.0789%" height="15" fill="rgb(219,33,29)" fg:x="749" fg:w="1"/><text x="59.3660%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.1160%" y="213" width="0.0789%" height="15" fill="rgb(223,176,5)" fg:x="749" fg:w="1"/><text x="59.3660%" y="223.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="59.0371%" y="357" width="0.2368%" height="15" fill="rgb(228,140,14)" fg:x="748" fg:w="3"/><text x="59.2871%" y="367.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="59.0371%" y="341" width="0.2368%" height="15" fill="rgb(217,179,31)" fg:x="748" fg:w="3"/><text x="59.2871%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="59.1160%" y="325" width="0.1579%" height="15" fill="rgb(230,9,30)" fg:x="749" fg:w="2"/><text x="59.3660%" y="335.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="59.1160%" y="309" width="0.1579%" height="15" fill="rgb(230,136,20)" fg:x="749" fg:w="2"/><text x="59.3660%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="59.1160%" y="293" width="0.1579%" height="15" fill="rgb(215,210,22)" fg:x="749" fg:w="2"/><text x="59.3660%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.1949%" y="277" width="0.0789%" height="15" fill="rgb(218,43,5)" fg:x="750" fg:w="1"/><text x="59.4449%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.1949%" y="261" width="0.0789%" height="15" fill="rgb(216,11,5)" fg:x="750" fg:w="1"/><text x="59.4449%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.1949%" y="245" width="0.0789%" height="15" fill="rgb(209,82,29)" fg:x="750" fg:w="1"/><text x="59.4449%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.1949%" y="229" width="0.0789%" height="15" fill="rgb(244,115,12)" fg:x="750" fg:w="1"/><text x="59.4449%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="59.1949%" y="213" width="0.0789%" height="15" fill="rgb(222,82,18)" fg:x="750" fg:w="1"/><text x="59.4449%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.1949%" y="197" width="0.0789%" height="15" fill="rgb(249,227,8)" fg:x="750" fg:w="1"/><text x="59.4449%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.1949%" y="181" width="0.0789%" height="15" fill="rgb(253,141,45)" fg:x="750" fg:w="1"/><text x="59.4449%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.1949%" y="165" width="0.0789%" height="15" fill="rgb(234,184,4)" fg:x="750" fg:w="1"/><text x="59.4449%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.1949%" y="149" width="0.0789%" height="15" fill="rgb(218,194,23)" fg:x="750" fg:w="1"/><text x="59.4449%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.1949%" y="133" width="0.0789%" height="15" fill="rgb(235,66,41)" fg:x="750" fg:w="1"/><text x="59.4449%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="59.1949%" y="117" width="0.0789%" height="15" fill="rgb(245,217,1)" fg:x="750" fg:w="1"/><text x="59.4449%" y="127.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="59.1949%" y="101" width="0.0789%" height="15" fill="rgb(229,91,1)" fg:x="750" fg:w="1"/><text x="59.4449%" y="111.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.2739%" y="261" width="0.0789%" height="15" fill="rgb(207,101,30)" fg:x="751" fg:w="1"/><text x="59.5239%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="59.2739%" y="245" width="0.0789%" height="15" fill="rgb(223,82,49)" fg:x="751" fg:w="1"/><text x="59.5239%" y="255.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="59.5107%" y="85" width="0.0789%" height="15" fill="rgb(218,167,17)" fg:x="754" fg:w="1"/><text x="59.7607%" y="95.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.39%)</title><rect x="59.2739%" y="341" width="0.3946%" height="15" fill="rgb(208,103,14)" fg:x="751" fg:w="5"/><text x="59.5239%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.39%)</title><rect x="59.2739%" y="325" width="0.3946%" height="15" fill="rgb(238,20,8)" fg:x="751" fg:w="5"/><text x="59.5239%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="59.2739%" y="309" width="0.3946%" height="15" fill="rgb(218,80,54)" fg:x="751" fg:w="5"/><text x="59.5239%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.39%)</title><rect x="59.2739%" y="293" width="0.3946%" height="15" fill="rgb(240,144,17)" fg:x="751" fg:w="5"/><text x="59.5239%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="59.2739%" y="277" width="0.3946%" height="15" fill="rgb(245,27,50)" fg:x="751" fg:w="5"/><text x="59.5239%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="59.3528%" y="261" width="0.3157%" height="15" fill="rgb(251,51,7)" fg:x="752" fg:w="4"/><text x="59.6028%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="59.3528%" y="245" width="0.3157%" height="15" fill="rgb(245,217,29)" fg:x="752" fg:w="4"/><text x="59.6028%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="59.3528%" y="229" width="0.3157%" height="15" fill="rgb(221,176,29)" fg:x="752" fg:w="4"/><text x="59.6028%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="59.3528%" y="213" width="0.3157%" height="15" fill="rgb(212,180,24)" fg:x="752" fg:w="4"/><text x="59.6028%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="59.4317%" y="197" width="0.2368%" height="15" fill="rgb(254,24,2)" fg:x="753" fg:w="3"/><text x="59.6817%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="59.4317%" y="181" width="0.2368%" height="15" fill="rgb(230,100,2)" fg:x="753" fg:w="3"/><text x="59.6817%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="59.4317%" y="165" width="0.2368%" height="15" fill="rgb(219,142,25)" fg:x="753" fg:w="3"/><text x="59.6817%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="59.4317%" y="149" width="0.2368%" height="15" fill="rgb(240,73,43)" fg:x="753" fg:w="3"/><text x="59.6817%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="59.5107%" y="133" width="0.1579%" height="15" fill="rgb(214,114,15)" fg:x="754" fg:w="2"/><text x="59.7607%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.5107%" y="117" width="0.1579%" height="15" fill="rgb(207,130,4)" fg:x="754" fg:w="2"/><text x="59.7607%" y="127.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="59.5107%" y="101" width="0.1579%" height="15" fill="rgb(221,25,40)" fg:x="754" fg:w="2"/><text x="59.7607%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.5896%" y="85" width="0.0789%" height="15" fill="rgb(241,184,7)" fg:x="755" fg:w="1"/><text x="59.8396%" y="95.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="59.6685%" y="309" width="0.0789%" height="15" fill="rgb(235,159,4)" fg:x="756" fg:w="1"/><text x="59.9185%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (7 samples, 0.55%)</title><rect x="59.2739%" y="357" width="0.5525%" height="15" fill="rgb(214,87,48)" fg:x="751" fg:w="7"/><text x="59.5239%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.6685%" y="341" width="0.1579%" height="15" fill="rgb(246,198,24)" fg:x="756" fg:w="2"/><text x="59.9185%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.6685%" y="325" width="0.1579%" height="15" fill="rgb(209,66,40)" fg:x="756" fg:w="2"/><text x="59.9185%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="59.7474%" y="309" width="0.0789%" height="15" fill="rgb(233,147,39)" fg:x="757" fg:w="1"/><text x="59.9974%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.7474%" y="293" width="0.0789%" height="15" fill="rgb(231,145,52)" fg:x="757" fg:w="1"/><text x="59.9974%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.7474%" y="277" width="0.0789%" height="15" fill="rgb(206,20,26)" fg:x="757" fg:w="1"/><text x="59.9974%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.7474%" y="261" width="0.0789%" height="15" fill="rgb(238,220,4)" fg:x="757" fg:w="1"/><text x="59.9974%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.7474%" y="245" width="0.0789%" height="15" fill="rgb(252,195,42)" fg:x="757" fg:w="1"/><text x="59.9974%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.7474%" y="229" width="0.0789%" height="15" fill="rgb(209,10,6)" fg:x="757" fg:w="1"/><text x="59.9974%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.7474%" y="213" width="0.0789%" height="15" fill="rgb(229,3,52)" fg:x="757" fg:w="1"/><text x="59.9974%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.7474%" y="197" width="0.0789%" height="15" fill="rgb(253,49,37)" fg:x="757" fg:w="1"/><text x="59.9974%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.7474%" y="181" width="0.0789%" height="15" fill="rgb(240,103,49)" fg:x="757" fg:w="1"/><text x="59.9974%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.7474%" y="165" width="0.0789%" height="15" fill="rgb(250,182,30)" fg:x="757" fg:w="1"/><text x="59.9974%" y="175.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.87%)</title><rect x="59.0371%" y="453" width="0.8682%" height="15" fill="rgb(248,8,30)" fg:x="748" fg:w="11"/><text x="59.2871%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.87%)</title><rect x="59.0371%" y="437" width="0.8682%" height="15" fill="rgb(237,120,30)" fg:x="748" fg:w="11"/><text x="59.2871%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (11 samples, 0.87%)</title><rect x="59.0371%" y="421" width="0.8682%" height="15" fill="rgb(221,146,34)" fg:x="748" fg:w="11"/><text x="59.2871%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (11 samples, 0.87%)</title><rect x="59.0371%" y="405" width="0.8682%" height="15" fill="rgb(242,55,13)" fg:x="748" fg:w="11"/><text x="59.2871%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (11 samples, 0.87%)</title><rect x="59.0371%" y="389" width="0.8682%" height="15" fill="rgb(242,112,31)" fg:x="748" fg:w="11"/><text x="59.2871%" y="399.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.87%)</title><rect x="59.0371%" y="373" width="0.8682%" height="15" fill="rgb(249,192,27)" fg:x="748" fg:w="11"/><text x="59.2871%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="59.8264%" y="357" width="0.0789%" height="15" fill="rgb(208,204,44)" fg:x="758" fg:w="1"/><text x="60.0764%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="59.8264%" y="341" width="0.0789%" height="15" fill="rgb(208,93,54)" fg:x="758" fg:w="1"/><text x="60.0764%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="59.8264%" y="325" width="0.0789%" height="15" fill="rgb(242,1,31)" fg:x="758" fg:w="1"/><text x="60.0764%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.8264%" y="309" width="0.0789%" height="15" fill="rgb(241,83,25)" fg:x="758" fg:w="1"/><text x="60.0764%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.8264%" y="293" width="0.0789%" height="15" fill="rgb(205,169,50)" fg:x="758" fg:w="1"/><text x="60.0764%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.8264%" y="277" width="0.0789%" height="15" fill="rgb(239,186,37)" fg:x="758" fg:w="1"/><text x="60.0764%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.8264%" y="261" width="0.0789%" height="15" fill="rgb(205,221,10)" fg:x="758" fg:w="1"/><text x="60.0764%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="59.8264%" y="245" width="0.0789%" height="15" fill="rgb(218,196,15)" fg:x="758" fg:w="1"/><text x="60.0764%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.8264%" y="229" width="0.0789%" height="15" fill="rgb(218,196,35)" fg:x="758" fg:w="1"/><text x="60.0764%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.8264%" y="213" width="0.0789%" height="15" fill="rgb(233,63,24)" fg:x="758" fg:w="1"/><text x="60.0764%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.8264%" y="197" width="0.0789%" height="15" fill="rgb(225,8,4)" fg:x="758" fg:w="1"/><text x="60.0764%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.8264%" y="181" width="0.0789%" height="15" fill="rgb(234,105,35)" fg:x="758" fg:w="1"/><text x="60.0764%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.8264%" y="165" width="0.0789%" height="15" fill="rgb(236,21,32)" fg:x="758" fg:w="1"/><text x="60.0764%" y="175.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (12 samples, 0.95%)</title><rect x="59.0371%" y="469" width="0.9471%" height="15" fill="rgb(228,109,6)" fg:x="748" fg:w="12"/><text x="59.2871%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="59.9053%" y="453" width="0.0789%" height="15" fill="rgb(229,215,31)" fg:x="759" fg:w="1"/><text x="60.1553%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.9053%" y="437" width="0.0789%" height="15" fill="rgb(221,52,54)" fg:x="759" fg:w="1"/><text x="60.1553%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (631 samples, 49.80%)</title><rect x="10.3394%" y="725" width="49.8027%" height="15" fill="rgb(252,129,43)" fg:x="131" fg:w="631"/><text x="10.5894%" y="735.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (631 samples, 49.80%)</title><rect x="10.3394%" y="709" width="49.8027%" height="15" fill="rgb(248,183,27)" fg:x="131" fg:w="631"/><text x="10.5894%" y="719.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (631 samples, 49.80%)</title><rect x="10.3394%" y="693" width="49.8027%" height="15" fill="rgb(250,0,22)" fg:x="131" fg:w="631"/><text x="10.5894%" y="703.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (631 samples, 49.80%)</title><rect x="10.3394%" y="677" width="49.8027%" height="15" fill="rgb(213,166,10)" fg:x="131" fg:w="631"/><text x="10.5894%" y="687.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (623 samples, 49.17%)</title><rect x="10.9708%" y="661" width="49.1713%" height="15" fill="rgb(207,163,36)" fg:x="139" fg:w="623"/><text x="11.2208%" y="671.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (623 samples, 49.17%)</title><rect x="10.9708%" y="645" width="49.1713%" height="15" fill="rgb(208,122,22)" fg:x="139" fg:w="623"/><text x="11.2208%" y="655.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (623 samples, 49.17%)</title><rect x="10.9708%" y="629" width="49.1713%" height="15" fill="rgb(207,104,49)" fg:x="139" fg:w="623"/><text x="11.2208%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (623 samples, 49.17%)</title><rect x="10.9708%" y="613" width="49.1713%" height="15" fill="rgb(248,211,50)" fg:x="139" fg:w="623"/><text x="11.2208%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (622 samples, 49.09%)</title><rect x="11.0497%" y="597" width="49.0923%" height="15" fill="rgb(217,13,45)" fg:x="140" fg:w="622"/><text x="11.2997%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (622 samples, 49.09%)</title><rect x="11.0497%" y="581" width="49.0923%" height="15" fill="rgb(211,216,49)" fg:x="140" fg:w="622"/><text x="11.2997%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (622 samples, 49.09%)</title><rect x="11.0497%" y="565" width="49.0923%" height="15" fill="rgb(221,58,53)" fg:x="140" fg:w="622"/><text x="11.2997%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (621 samples, 49.01%)</title><rect x="11.1287%" y="549" width="49.0134%" height="15" fill="rgb(220,112,41)" fg:x="141" fg:w="621"/><text x="11.3787%" y="559.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (621 samples, 49.01%)</title><rect x="11.1287%" y="533" width="49.0134%" height="15" fill="rgb(236,38,28)" fg:x="141" fg:w="621"/><text x="11.3787%" y="543.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (621 samples, 49.01%)</title><rect x="11.1287%" y="517" width="49.0134%" height="15" fill="rgb(227,195,22)" fg:x="141" fg:w="621"/><text x="11.3787%" y="527.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (15 samples, 1.18%)</title><rect x="58.9582%" y="501" width="1.1839%" height="15" fill="rgb(214,55,33)" fg:x="747" fg:w="15"/><text x="59.2082%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (15 samples, 1.18%)</title><rect x="58.9582%" y="485" width="1.1839%" height="15" fill="rgb(248,80,13)" fg:x="747" fg:w="15"/><text x="59.2082%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.9842%" y="469" width="0.1579%" height="15" fill="rgb(238,52,6)" fg:x="760" fg:w="2"/><text x="60.2342%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.9842%" y="453" width="0.1579%" height="15" fill="rgb(224,198,47)" fg:x="760" fg:w="2"/><text x="60.2342%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="59.9842%" y="437" width="0.1579%" height="15" fill="rgb(233,171,20)" fg:x="760" fg:w="2"/><text x="60.2342%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="59.9842%" y="421" width="0.1579%" height="15" fill="rgb(241,30,25)" fg:x="760" fg:w="2"/><text x="60.2342%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="59.9842%" y="405" width="0.1579%" height="15" fill="rgb(207,171,38)" fg:x="760" fg:w="2"/><text x="60.2342%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.9842%" y="389" width="0.1579%" height="15" fill="rgb(234,70,1)" fg:x="760" fg:w="2"/><text x="60.2342%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.9842%" y="373" width="0.1579%" height="15" fill="rgb(232,178,18)" fg:x="760" fg:w="2"/><text x="60.2342%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.0631%" y="357" width="0.0789%" height="15" fill="rgb(241,78,40)" fg:x="761" fg:w="1"/><text x="60.3131%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="60.1421%" y="693" width="0.0789%" height="15" fill="rgb(222,35,25)" fg:x="762" fg:w="1"/><text x="60.3921%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="60.1421%" y="677" width="0.0789%" height="15" fill="rgb(207,92,16)" fg:x="762" fg:w="1"/><text x="60.3921%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="60.1421%" y="661" width="0.0789%" height="15" fill="rgb(216,59,51)" fg:x="762" fg:w="1"/><text x="60.3921%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="60.1421%" y="645" width="0.0789%" height="15" fill="rgb(213,80,28)" fg:x="762" fg:w="1"/><text x="60.3921%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="60.1421%" y="629" width="0.0789%" height="15" fill="rgb(220,93,7)" fg:x="762" fg:w="1"/><text x="60.3921%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.1421%" y="613" width="0.0789%" height="15" fill="rgb(225,24,44)" fg:x="762" fg:w="1"/><text x="60.3921%" y="623.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="60.2210%" y="677" width="0.1579%" height="15" fill="rgb(243,74,40)" fg:x="763" fg:w="2"/><text x="60.4710%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.2210%" y="661" width="0.1579%" height="15" fill="rgb(228,39,7)" fg:x="763" fg:w="2"/><text x="60.4710%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.2210%" y="645" width="0.1579%" height="15" fill="rgb(227,79,8)" fg:x="763" fg:w="2"/><text x="60.4710%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.2210%" y="629" width="0.1579%" height="15" fill="rgb(236,58,11)" fg:x="763" fg:w="2"/><text x="60.4710%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.2210%" y="613" width="0.1579%" height="15" fill="rgb(249,63,35)" fg:x="763" fg:w="2"/><text x="60.4710%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.2210%" y="597" width="0.1579%" height="15" fill="rgb(252,114,16)" fg:x="763" fg:w="2"/><text x="60.4710%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2999%" y="581" width="0.0789%" height="15" fill="rgb(254,151,24)" fg:x="764" fg:w="1"/><text x="60.5499%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.2999%" y="565" width="0.0789%" height="15" fill="rgb(253,54,39)" fg:x="764" fg:w="1"/><text x="60.5499%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2999%" y="549" width="0.0789%" height="15" fill="rgb(243,25,45)" fg:x="764" fg:w="1"/><text x="60.5499%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.2999%" y="533" width="0.0789%" height="15" fill="rgb(234,134,9)" fg:x="764" fg:w="1"/><text x="60.5499%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2999%" y="517" width="0.0789%" height="15" fill="rgb(227,166,31)" fg:x="764" fg:w="1"/><text x="60.5499%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.2999%" y="501" width="0.0789%" height="15" fill="rgb(245,143,41)" fg:x="764" fg:w="1"/><text x="60.5499%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2999%" y="485" width="0.0789%" height="15" fill="rgb(238,181,32)" fg:x="764" fg:w="1"/><text x="60.5499%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.3788%" y="613" width="0.0789%" height="15" fill="rgb(224,113,18)" fg:x="765" fg:w="1"/><text x="60.6288%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.3788%" y="597" width="0.0789%" height="15" fill="rgb(240,229,28)" fg:x="765" fg:w="1"/><text x="60.6288%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="60.3788%" y="645" width="0.1579%" height="15" fill="rgb(250,185,3)" fg:x="765" fg:w="2"/><text x="60.6288%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.3788%" y="629" width="0.1579%" height="15" fill="rgb(212,59,25)" fg:x="765" fg:w="2"/><text x="60.6288%" y="639.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.4578%" y="613" width="0.0789%" height="15" fill="rgb(221,87,20)" fg:x="766" fg:w="1"/><text x="60.7078%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.4578%" y="597" width="0.0789%" height="15" fill="rgb(213,74,28)" fg:x="766" fg:w="1"/><text x="60.7078%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.4578%" y="581" width="0.0789%" height="15" fill="rgb(224,132,34)" fg:x="766" fg:w="1"/><text x="60.7078%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.4578%" y="565" width="0.0789%" height="15" fill="rgb(222,101,24)" fg:x="766" fg:w="1"/><text x="60.7078%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.47%)</title><rect x="60.1421%" y="725" width="0.4736%" height="15" fill="rgb(254,142,4)" fg:x="762" fg:w="6"/><text x="60.3921%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.47%)</title><rect x="60.1421%" y="709" width="0.4736%" height="15" fill="rgb(230,229,49)" fg:x="762" fg:w="6"/><text x="60.3921%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (5 samples, 0.39%)</title><rect x="60.2210%" y="693" width="0.3946%" height="15" fill="rgb(238,70,47)" fg:x="763" fg:w="5"/><text x="60.4710%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="60.3788%" y="677" width="0.2368%" height="15" fill="rgb(231,160,17)" fg:x="765" fg:w="3"/><text x="60.6288%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="60.3788%" y="661" width="0.2368%" height="15" fill="rgb(218,68,53)" fg:x="765" fg:w="3"/><text x="60.6288%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.5367%" y="645" width="0.0789%" height="15" fill="rgb(236,111,10)" fg:x="767" fg:w="1"/><text x="60.7867%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.5367%" y="629" width="0.0789%" height="15" fill="rgb(224,34,41)" fg:x="767" fg:w="1"/><text x="60.7867%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="60.6156%" y="677" width="0.0789%" height="15" fill="rgb(241,118,19)" fg:x="768" fg:w="1"/><text x="60.8656%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.6156%" y="661" width="0.0789%" height="15" fill="rgb(238,129,25)" fg:x="768" fg:w="1"/><text x="60.8656%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.6156%" y="645" width="0.0789%" height="15" fill="rgb(238,22,31)" fg:x="768" fg:w="1"/><text x="60.8656%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="60.6156%" y="629" width="0.0789%" height="15" fill="rgb(222,174,48)" fg:x="768" fg:w="1"/><text x="60.8656%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.6156%" y="613" width="0.0789%" height="15" fill="rgb(206,152,40)" fg:x="768" fg:w="1"/><text x="60.8656%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.6156%" y="597" width="0.0789%" height="15" fill="rgb(218,99,54)" fg:x="768" fg:w="1"/><text x="60.8656%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.6156%" y="581" width="0.0789%" height="15" fill="rgb(220,174,26)" fg:x="768" fg:w="1"/><text x="60.8656%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.6156%" y="565" width="0.0789%" height="15" fill="rgb(245,116,9)" fg:x="768" fg:w="1"/><text x="60.8656%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.6156%" y="549" width="0.0789%" height="15" fill="rgb(209,72,35)" fg:x="768" fg:w="1"/><text x="60.8656%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.6156%" y="533" width="0.0789%" height="15" fill="rgb(226,126,21)" fg:x="768" fg:w="1"/><text x="60.8656%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.6156%" y="517" width="0.0789%" height="15" fill="rgb(227,192,1)" fg:x="768" fg:w="1"/><text x="60.8656%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.6156%" y="501" width="0.0789%" height="15" fill="rgb(237,180,29)" fg:x="768" fg:w="1"/><text x="60.8656%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.6156%" y="485" width="0.0789%" height="15" fill="rgb(230,197,35)" fg:x="768" fg:w="1"/><text x="60.8656%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.6156%" y="469" width="0.0789%" height="15" fill="rgb(246,193,31)" fg:x="768" fg:w="1"/><text x="60.8656%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="60.6156%" y="725" width="0.1579%" height="15" fill="rgb(241,36,4)" fg:x="768" fg:w="2"/><text x="60.8656%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="60.6156%" y="709" width="0.1579%" height="15" fill="rgb(241,130,17)" fg:x="768" fg:w="2"/><text x="60.8656%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="60.6156%" y="693" width="0.1579%" height="15" fill="rgb(206,137,32)" fg:x="768" fg:w="2"/><text x="60.8656%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="60.6946%" y="677" width="0.0789%" height="15" fill="rgb(237,228,51)" fg:x="769" fg:w="1"/><text x="60.9446%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.6946%" y="661" width="0.0789%" height="15" fill="rgb(243,6,42)" fg:x="769" fg:w="1"/><text x="60.9446%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="60.6946%" y="645" width="0.0789%" height="15" fill="rgb(251,74,28)" fg:x="769" fg:w="1"/><text x="60.9446%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (772 samples, 60.93%)</title><rect x="0.0000%" y="789" width="60.9313%" height="15" fill="rgb(218,20,49)" fg:x="0" fg:w="772"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (772 samples, 60.93%)</title><rect x="0.0000%" y="773" width="60.9313%" height="15" fill="rgb(238,28,14)" fg:x="0" fg:w="772"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (772 samples, 60.93%)</title><rect x="0.0000%" y="757" width="60.9313%" height="15" fill="rgb(229,40,46)" fg:x="0" fg:w="772"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (641 samples, 50.59%)</title><rect x="10.3394%" y="741" width="50.5919%" height="15" fill="rgb(244,195,20)" fg:x="131" fg:w="641"/><text x="10.5894%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="60.7735%" y="725" width="0.1579%" height="15" fill="rgb(253,56,35)" fg:x="770" fg:w="2"/><text x="61.0235%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="60.7735%" y="709" width="0.1579%" height="15" fill="rgb(210,149,44)" fg:x="770" fg:w="2"/><text x="61.0235%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="60.7735%" y="693" width="0.1579%" height="15" fill="rgb(240,135,12)" fg:x="770" fg:w="2"/><text x="61.0235%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.7735%" y="677" width="0.1579%" height="15" fill="rgb(251,24,50)" fg:x="770" fg:w="2"/><text x="61.0235%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.8524%" y="661" width="0.0789%" height="15" fill="rgb(243,200,47)" fg:x="771" fg:w="1"/><text x="61.1024%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="60.8524%" y="645" width="0.0789%" height="15" fill="rgb(224,166,26)" fg:x="771" fg:w="1"/><text x="61.1024%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.8524%" y="629" width="0.0789%" height="15" fill="rgb(233,0,47)" fg:x="771" fg:w="1"/><text x="61.1024%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.8524%" y="613" width="0.0789%" height="15" fill="rgb(253,80,5)" fg:x="771" fg:w="1"/><text x="61.1024%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.9313%" y="741" width="0.0789%" height="15" fill="rgb(214,133,25)" fg:x="772" fg:w="1"/><text x="61.1813%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.9313%" y="725" width="0.0789%" height="15" fill="rgb(209,27,14)" fg:x="772" fg:w="1"/><text x="61.1813%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.9313%" y="709" width="0.0789%" height="15" fill="rgb(219,102,51)" fg:x="772" fg:w="1"/><text x="61.1813%" y="719.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="61.0103%" y="693" width="0.0789%" height="15" fill="rgb(237,18,16)" fg:x="773" fg:w="1"/><text x="61.2603%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.0103%" y="677" width="0.0789%" height="15" fill="rgb(241,85,17)" fg:x="773" fg:w="1"/><text x="61.2603%" y="687.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (2 samples, 0.16%)</title><rect x="61.0103%" y="741" width="0.1579%" height="15" fill="rgb(236,90,42)" fg:x="773" fg:w="2"/><text x="61.2603%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (2 samples, 0.16%)</title><rect x="61.0103%" y="725" width="0.1579%" height="15" fill="rgb(249,57,21)" fg:x="773" fg:w="2"/><text x="61.2603%" y="735.50"></text></g><g><title>engine::session::Session::new (2 samples, 0.16%)</title><rect x="61.0103%" y="709" width="0.1579%" height="15" fill="rgb(243,12,36)" fg:x="773" fg:w="2"/><text x="61.2603%" y="719.50"></text></g><g><title>engine::session::Session::initialize (1 samples, 0.08%)</title><rect x="61.0892%" y="693" width="0.0789%" height="15" fill="rgb(253,128,47)" fg:x="774" fg:w="1"/><text x="61.3392%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (1 samples, 0.08%)</title><rect x="61.0892%" y="677" width="0.0789%" height="15" fill="rgb(207,33,20)" fg:x="774" fg:w="1"/><text x="61.3392%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="61.0892%" y="661" width="0.0789%" height="15" fill="rgb(233,215,35)" fg:x="774" fg:w="1"/><text x="61.3392%" y="671.50"></text></g><g><title>libloading::safe::Library::new (1 samples, 0.08%)</title><rect x="61.0892%" y="645" width="0.0789%" height="15" fill="rgb(249,188,52)" fg:x="774" fg:w="1"/><text x="61.3392%" y="655.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="61.0892%" y="629" width="0.0789%" height="15" fill="rgb(225,12,32)" fg:x="774" fg:w="1"/><text x="61.3392%" y="639.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="61.0892%" y="613" width="0.0789%" height="15" fill="rgb(247,98,14)" fg:x="774" fg:w="1"/><text x="61.3392%" y="623.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="61.0892%" y="597" width="0.0789%" height="15" fill="rgb(247,219,48)" fg:x="774" fg:w="1"/><text x="61.3392%" y="607.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="61.0892%" y="581" width="0.0789%" height="15" fill="rgb(253,60,48)" fg:x="774" fg:w="1"/><text x="61.3392%" y="591.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="61.0892%" y="565" width="0.0789%" height="15" fill="rgb(245,15,52)" fg:x="774" fg:w="1"/><text x="61.3392%" y="575.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.1681%" y="725" width="0.0789%" height="15" fill="rgb(220,133,28)" fg:x="775" fg:w="1"/><text x="61.4181%" y="735.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="61.2470%" y="709" width="0.0789%" height="15" fill="rgb(217,180,4)" fg:x="776" fg:w="1"/><text x="61.4970%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.2470%" y="693" width="0.0789%" height="15" fill="rgb(251,24,1)" fg:x="776" fg:w="1"/><text x="61.4970%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.2470%" y="677" width="0.0789%" height="15" fill="rgb(212,185,49)" fg:x="776" fg:w="1"/><text x="61.4970%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.2470%" y="661" width="0.0789%" height="15" fill="rgb(215,175,22)" fg:x="776" fg:w="1"/><text x="61.4970%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.2470%" y="645" width="0.0789%" height="15" fill="rgb(250,205,14)" fg:x="776" fg:w="1"/><text x="61.4970%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.2470%" y="629" width="0.0789%" height="15" fill="rgb(225,211,22)" fg:x="776" fg:w="1"/><text x="61.4970%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="61.2470%" y="613" width="0.0789%" height="15" fill="rgb(251,179,42)" fg:x="776" fg:w="1"/><text x="61.4970%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="61.2470%" y="597" width="0.0789%" height="15" fill="rgb(208,216,51)" fg:x="776" fg:w="1"/><text x="61.4970%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="61.3260%" y="613" width="0.0789%" height="15" fill="rgb(235,36,11)" fg:x="777" fg:w="1"/><text x="61.5760%" y="623.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="61.3260%" y="645" width="0.2368%" height="15" fill="rgb(213,189,28)" fg:x="777" fg:w="3"/><text x="61.5760%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="61.3260%" y="629" width="0.2368%" height="15" fill="rgb(227,203,42)" fg:x="777" fg:w="3"/><text x="61.5760%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="61.4049%" y="613" width="0.1579%" height="15" fill="rgb(244,72,36)" fg:x="778" fg:w="2"/><text x="61.6549%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="61.4838%" y="597" width="0.0789%" height="15" fill="rgb(213,53,17)" fg:x="779" fg:w="1"/><text x="61.7338%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.5627%" y="645" width="0.0789%" height="15" fill="rgb(207,167,3)" fg:x="780" fg:w="1"/><text x="61.8127%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="61.5627%" y="629" width="0.0789%" height="15" fill="rgb(216,98,30)" fg:x="780" fg:w="1"/><text x="61.8127%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.5627%" y="613" width="0.0789%" height="15" fill="rgb(236,123,15)" fg:x="780" fg:w="1"/><text x="61.8127%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.5627%" y="597" width="0.0789%" height="15" fill="rgb(248,81,50)" fg:x="780" fg:w="1"/><text x="61.8127%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.5627%" y="581" width="0.0789%" height="15" fill="rgb(214,120,4)" fg:x="780" fg:w="1"/><text x="61.8127%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.5627%" y="565" width="0.0789%" height="15" fill="rgb(208,179,34)" fg:x="780" fg:w="1"/><text x="61.8127%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.5627%" y="549" width="0.0789%" height="15" fill="rgb(227,140,7)" fg:x="780" fg:w="1"/><text x="61.8127%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="61.6417%" y="597" width="0.0789%" height="15" fill="rgb(214,22,6)" fg:x="781" fg:w="1"/><text x="61.8917%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="61.6417%" y="581" width="0.0789%" height="15" fill="rgb(207,137,27)" fg:x="781" fg:w="1"/><text x="61.8917%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.6417%" y="565" width="0.0789%" height="15" fill="rgb(210,8,46)" fg:x="781" fg:w="1"/><text x="61.8917%" y="575.50"></text></g><g><title>engine::session::Session::flush (7 samples, 0.55%)</title><rect x="61.2470%" y="725" width="0.5525%" height="15" fill="rgb(240,16,54)" fg:x="776" fg:w="7"/><text x="61.4970%" y="735.50"></text></g><g><title>engine::session::state::State::close (6 samples, 0.47%)</title><rect x="61.3260%" y="709" width="0.4736%" height="15" fill="rgb(211,209,29)" fg:x="777" fg:w="6"/><text x="61.5760%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (6 samples, 0.47%)</title><rect x="61.3260%" y="693" width="0.4736%" height="15" fill="rgb(226,228,24)" fg:x="777" fg:w="6"/><text x="61.5760%" y="703.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (6 samples, 0.47%)</title><rect x="61.3260%" y="677" width="0.4736%" height="15" fill="rgb(222,84,9)" fg:x="777" fg:w="6"/><text x="61.5760%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (6 samples, 0.47%)</title><rect x="61.3260%" y="661" width="0.4736%" height="15" fill="rgb(234,203,30)" fg:x="777" fg:w="6"/><text x="61.5760%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="61.6417%" y="645" width="0.1579%" height="15" fill="rgb(238,109,14)" fg:x="781" fg:w="2"/><text x="61.8917%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="61.6417%" y="629" width="0.1579%" height="15" fill="rgb(233,206,34)" fg:x="781" fg:w="2"/><text x="61.8917%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="61.6417%" y="613" width="0.1579%" height="15" fill="rgb(220,167,47)" fg:x="781" fg:w="2"/><text x="61.8917%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="61.7206%" y="597" width="0.0789%" height="15" fill="rgb(238,105,10)" fg:x="782" fg:w="1"/><text x="61.9706%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="61.7206%" y="581" width="0.0789%" height="15" fill="rgb(213,227,17)" fg:x="782" fg:w="1"/><text x="61.9706%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="61.7206%" y="565" width="0.0789%" height="15" fill="rgb(217,132,38)" fg:x="782" fg:w="1"/><text x="61.9706%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="61.7206%" y="549" width="0.0789%" height="15" fill="rgb(242,146,4)" fg:x="782" fg:w="1"/><text x="61.9706%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="61.7995%" y="677" width="0.0789%" height="15" fill="rgb(212,61,9)" fg:x="783" fg:w="1"/><text x="62.0495%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="61.7995%" y="661" width="0.0789%" height="15" fill="rgb(247,126,22)" fg:x="783" fg:w="1"/><text x="62.0495%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="61.7995%" y="645" width="0.0789%" height="15" fill="rgb(220,196,2)" fg:x="783" fg:w="1"/><text x="62.0495%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="61.7995%" y="629" width="0.0789%" height="15" fill="rgb(208,46,4)" fg:x="783" fg:w="1"/><text x="62.0495%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.7995%" y="613" width="0.0789%" height="15" fill="rgb(252,104,46)" fg:x="783" fg:w="1"/><text x="62.0495%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="61.7995%" y="709" width="0.1579%" height="15" fill="rgb(237,152,48)" fg:x="783" fg:w="2"/><text x="62.0495%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="61.7995%" y="693" width="0.1579%" height="15" fill="rgb(221,59,37)" fg:x="783" fg:w="2"/><text x="62.0495%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="61.8785%" y="677" width="0.0789%" height="15" fill="rgb(209,202,51)" fg:x="784" fg:w="1"/><text x="62.1285%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.8785%" y="661" width="0.0789%" height="15" fill="rgb(228,81,30)" fg:x="784" fg:w="1"/><text x="62.1285%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.8785%" y="645" width="0.0789%" height="15" fill="rgb(227,42,39)" fg:x="784" fg:w="1"/><text x="62.1285%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="61.8785%" y="629" width="0.0789%" height="15" fill="rgb(221,26,2)" fg:x="784" fg:w="1"/><text x="62.1285%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8785%" y="613" width="0.0789%" height="15" fill="rgb(254,61,31)" fg:x="784" fg:w="1"/><text x="62.1285%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="61.9574%" y="693" width="0.0789%" height="15" fill="rgb(222,173,38)" fg:x="785" fg:w="1"/><text x="62.2074%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="61.9574%" y="677" width="0.0789%" height="15" fill="rgb(218,50,12)" fg:x="785" fg:w="1"/><text x="62.2074%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="61.9574%" y="661" width="0.0789%" height="15" fill="rgb(223,88,40)" fg:x="785" fg:w="1"/><text x="62.2074%" y="671.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="61.9574%" y="645" width="0.0789%" height="15" fill="rgb(237,54,19)" fg:x="785" fg:w="1"/><text x="62.2074%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="61.9574%" y="629" width="0.0789%" height="15" fill="rgb(251,129,25)" fg:x="785" fg:w="1"/><text x="62.2074%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.0363%" y="565" width="0.0789%" height="15" fill="rgb(238,97,19)" fg:x="786" fg:w="1"/><text x="62.2863%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.0363%" y="549" width="0.0789%" height="15" fill="rgb(240,169,18)" fg:x="786" fg:w="1"/><text x="62.2863%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.0363%" y="533" width="0.0789%" height="15" fill="rgb(230,187,49)" fg:x="786" fg:w="1"/><text x="62.2863%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.1152%" y="565" width="0.0789%" height="15" fill="rgb(209,44,26)" fg:x="787" fg:w="1"/><text x="62.3652%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.1152%" y="549" width="0.0789%" height="15" fill="rgb(244,0,6)" fg:x="787" fg:w="1"/><text x="62.3652%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.1152%" y="533" width="0.0789%" height="15" fill="rgb(248,18,21)" fg:x="787" fg:w="1"/><text x="62.3652%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.1152%" y="517" width="0.0789%" height="15" fill="rgb(245,180,19)" fg:x="787" fg:w="1"/><text x="62.3652%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.1152%" y="501" width="0.0789%" height="15" fill="rgb(252,118,36)" fg:x="787" fg:w="1"/><text x="62.3652%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.1152%" y="485" width="0.0789%" height="15" fill="rgb(210,224,19)" fg:x="787" fg:w="1"/><text x="62.3652%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.1152%" y="469" width="0.0789%" height="15" fill="rgb(218,30,24)" fg:x="787" fg:w="1"/><text x="62.3652%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.1152%" y="453" width="0.0789%" height="15" fill="rgb(219,75,50)" fg:x="787" fg:w="1"/><text x="62.3652%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.1152%" y="437" width="0.0789%" height="15" fill="rgb(234,72,50)" fg:x="787" fg:w="1"/><text x="62.3652%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.1152%" y="421" width="0.0789%" height="15" fill="rgb(219,100,48)" fg:x="787" fg:w="1"/><text x="62.3652%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.1152%" y="405" width="0.0789%" height="15" fill="rgb(253,5,41)" fg:x="787" fg:w="1"/><text x="62.3652%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.1152%" y="389" width="0.0789%" height="15" fill="rgb(247,181,11)" fg:x="787" fg:w="1"/><text x="62.3652%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="62.0363%" y="597" width="0.2368%" height="15" fill="rgb(222,223,25)" fg:x="786" fg:w="3"/><text x="62.2863%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="62.0363%" y="581" width="0.2368%" height="15" fill="rgb(214,198,28)" fg:x="786" fg:w="3"/><text x="62.2863%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.1942%" y="565" width="0.0789%" height="15" fill="rgb(230,46,43)" fg:x="788" fg:w="1"/><text x="62.4442%" y="575.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.55%)</title><rect x="61.7995%" y="725" width="0.5525%" height="15" fill="rgb(233,65,53)" fg:x="783" fg:w="7"/><text x="62.0495%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.39%)</title><rect x="61.9574%" y="709" width="0.3946%" height="15" fill="rgb(221,121,27)" fg:x="785" fg:w="5"/><text x="62.2074%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="62.0363%" y="693" width="0.3157%" height="15" fill="rgb(247,70,47)" fg:x="786" fg:w="4"/><text x="62.2863%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="62.0363%" y="677" width="0.3157%" height="15" fill="rgb(228,85,35)" fg:x="786" fg:w="4"/><text x="62.2863%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="62.0363%" y="661" width="0.3157%" height="15" fill="rgb(209,50,18)" fg:x="786" fg:w="4"/><text x="62.2863%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="62.0363%" y="645" width="0.3157%" height="15" fill="rgb(250,19,35)" fg:x="786" fg:w="4"/><text x="62.2863%" y="655.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="62.0363%" y="629" width="0.3157%" height="15" fill="rgb(253,107,29)" fg:x="786" fg:w="4"/><text x="62.2863%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="62.0363%" y="613" width="0.3157%" height="15" fill="rgb(252,179,29)" fg:x="786" fg:w="4"/><text x="62.2863%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.2731%" y="597" width="0.0789%" height="15" fill="rgb(238,194,6)" fg:x="789" fg:w="1"/><text x="62.5231%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="62.2731%" y="581" width="0.0789%" height="15" fill="rgb(238,164,29)" fg:x="789" fg:w="1"/><text x="62.5231%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.3520%" y="693" width="0.0789%" height="15" fill="rgb(224,25,9)" fg:x="790" fg:w="1"/><text x="62.6020%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.3520%" y="677" width="0.0789%" height="15" fill="rgb(244,153,23)" fg:x="790" fg:w="1"/><text x="62.6020%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.3520%" y="661" width="0.0789%" height="15" fill="rgb(212,203,14)" fg:x="790" fg:w="1"/><text x="62.6020%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="62.3520%" y="645" width="0.0789%" height="15" fill="rgb(220,164,20)" fg:x="790" fg:w="1"/><text x="62.6020%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="62.3520%" y="629" width="0.0789%" height="15" fill="rgb(222,203,48)" fg:x="790" fg:w="1"/><text x="62.6020%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="62.3520%" y="613" width="0.0789%" height="15" fill="rgb(215,159,22)" fg:x="790" fg:w="1"/><text x="62.6020%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="62.3520%" y="597" width="0.0789%" height="15" fill="rgb(216,183,47)" fg:x="790" fg:w="1"/><text x="62.6020%" y="607.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="62.3520%" y="725" width="0.1579%" height="15" fill="rgb(229,195,25)" fg:x="790" fg:w="2"/><text x="62.6020%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="62.3520%" y="709" width="0.1579%" height="15" fill="rgb(224,132,51)" fg:x="790" fg:w="2"/><text x="62.6020%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="62.4309%" y="693" width="0.0789%" height="15" fill="rgb(240,63,7)" fg:x="791" fg:w="1"/><text x="62.6809%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="62.4309%" y="677" width="0.0789%" height="15" fill="rgb(249,182,41)" fg:x="791" fg:w="1"/><text x="62.6809%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="62.4309%" y="661" width="0.0789%" height="15" fill="rgb(243,47,26)" fg:x="791" fg:w="1"/><text x="62.6809%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.4309%" y="645" width="0.0789%" height="15" fill="rgb(233,48,2)" fg:x="791" fg:w="1"/><text x="62.6809%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.4309%" y="629" width="0.0789%" height="15" fill="rgb(244,165,34)" fg:x="791" fg:w="1"/><text x="62.6809%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.4309%" y="613" width="0.0789%" height="15" fill="rgb(207,89,7)" fg:x="791" fg:w="1"/><text x="62.6809%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4309%" y="597" width="0.0789%" height="15" fill="rgb(244,117,36)" fg:x="791" fg:w="1"/><text x="62.6809%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.4309%" y="581" width="0.0789%" height="15" fill="rgb(226,144,34)" fg:x="791" fg:w="1"/><text x="62.6809%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4309%" y="565" width="0.0789%" height="15" fill="rgb(213,23,19)" fg:x="791" fg:w="1"/><text x="62.6809%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.4309%" y="549" width="0.0789%" height="15" fill="rgb(217,75,12)" fg:x="791" fg:w="1"/><text x="62.6809%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4309%" y="533" width="0.0789%" height="15" fill="rgb(224,159,17)" fg:x="791" fg:w="1"/><text x="62.6809%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.4309%" y="517" width="0.0789%" height="15" fill="rgb(217,118,1)" fg:x="791" fg:w="1"/><text x="62.6809%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4309%" y="501" width="0.0789%" height="15" fill="rgb(232,180,48)" fg:x="791" fg:w="1"/><text x="62.6809%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.4309%" y="485" width="0.0789%" height="15" fill="rgb(230,27,33)" fg:x="791" fg:w="1"/><text x="62.6809%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4309%" y="469" width="0.0789%" height="15" fill="rgb(205,31,21)" fg:x="791" fg:w="1"/><text x="62.6809%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="62.5888%" y="709" width="0.0789%" height="15" fill="rgb(253,59,4)" fg:x="793" fg:w="1"/><text x="62.8388%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.5888%" y="693" width="0.0789%" height="15" fill="rgb(224,201,9)" fg:x="793" fg:w="1"/><text x="62.8388%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.5888%" y="677" width="0.0789%" height="15" fill="rgb(229,206,30)" fg:x="793" fg:w="1"/><text x="62.8388%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.5888%" y="661" width="0.0789%" height="15" fill="rgb(212,67,47)" fg:x="793" fg:w="1"/><text x="62.8388%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5888%" y="645" width="0.0789%" height="15" fill="rgb(211,96,50)" fg:x="793" fg:w="1"/><text x="62.8388%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5888%" y="629" width="0.0789%" height="15" fill="rgb(252,114,18)" fg:x="793" fg:w="1"/><text x="62.8388%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5888%" y="613" width="0.0789%" height="15" fill="rgb(223,58,37)" fg:x="793" fg:w="1"/><text x="62.8388%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5888%" y="597" width="0.0789%" height="15" fill="rgb(237,70,4)" fg:x="793" fg:w="1"/><text x="62.8388%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5888%" y="581" width="0.0789%" height="15" fill="rgb(244,85,46)" fg:x="793" fg:w="1"/><text x="62.8388%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.5888%" y="565" width="0.0789%" height="15" fill="rgb(223,39,52)" fg:x="793" fg:w="1"/><text x="62.8388%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="62.6677%" y="661" width="0.0789%" height="15" fill="rgb(218,200,14)" fg:x="794" fg:w="1"/><text x="62.9177%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.7466%" y="629" width="0.0789%" height="15" fill="rgb(208,171,16)" fg:x="795" fg:w="1"/><text x="62.9966%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.7466%" y="613" width="0.0789%" height="15" fill="rgb(234,200,18)" fg:x="795" fg:w="1"/><text x="62.9966%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.7466%" y="597" width="0.0789%" height="15" fill="rgb(228,45,11)" fg:x="795" fg:w="1"/><text x="62.9966%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7466%" y="581" width="0.0789%" height="15" fill="rgb(237,182,11)" fg:x="795" fg:w="1"/><text x="62.9966%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7466%" y="565" width="0.0789%" height="15" fill="rgb(241,175,49)" fg:x="795" fg:w="1"/><text x="62.9966%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7466%" y="549" width="0.0789%" height="15" fill="rgb(247,38,35)" fg:x="795" fg:w="1"/><text x="62.9966%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7466%" y="533" width="0.0789%" height="15" fill="rgb(228,39,49)" fg:x="795" fg:w="1"/><text x="62.9966%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7466%" y="517" width="0.0789%" height="15" fill="rgb(226,101,26)" fg:x="795" fg:w="1"/><text x="62.9966%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7466%" y="501" width="0.0789%" height="15" fill="rgb(206,141,19)" fg:x="795" fg:w="1"/><text x="62.9966%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.7466%" y="485" width="0.0789%" height="15" fill="rgb(211,200,13)" fg:x="795" fg:w="1"/><text x="62.9966%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.7466%" y="469" width="0.0789%" height="15" fill="rgb(241,121,6)" fg:x="795" fg:w="1"/><text x="62.9966%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.7466%" y="453" width="0.0789%" height="15" fill="rgb(234,221,29)" fg:x="795" fg:w="1"/><text x="62.9966%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.7466%" y="437" width="0.0789%" height="15" fill="rgb(229,136,5)" fg:x="795" fg:w="1"/><text x="62.9966%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.7466%" y="421" width="0.0789%" height="15" fill="rgb(238,36,11)" fg:x="795" fg:w="1"/><text x="62.9966%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.7466%" y="405" width="0.0789%" height="15" fill="rgb(251,55,41)" fg:x="795" fg:w="1"/><text x="62.9966%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.7466%" y="389" width="0.0789%" height="15" fill="rgb(242,34,40)" fg:x="795" fg:w="1"/><text x="62.9966%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.7466%" y="373" width="0.0789%" height="15" fill="rgb(215,42,17)" fg:x="795" fg:w="1"/><text x="62.9966%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.7466%" y="357" width="0.0789%" height="15" fill="rgb(207,44,46)" fg:x="795" fg:w="1"/><text x="62.9966%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.7466%" y="341" width="0.0789%" height="15" fill="rgb(211,206,28)" fg:x="795" fg:w="1"/><text x="62.9966%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.8256%" y="581" width="0.0789%" height="15" fill="rgb(237,167,16)" fg:x="796" fg:w="1"/><text x="63.0756%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.8256%" y="565" width="0.0789%" height="15" fill="rgb(233,66,6)" fg:x="796" fg:w="1"/><text x="63.0756%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="62.8256%" y="549" width="0.0789%" height="15" fill="rgb(246,123,29)" fg:x="796" fg:w="1"/><text x="63.0756%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="62.7466%" y="645" width="0.2368%" height="15" fill="rgb(209,62,40)" fg:x="795" fg:w="3"/><text x="62.9966%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="62.8256%" y="629" width="0.1579%" height="15" fill="rgb(218,4,25)" fg:x="796" fg:w="2"/><text x="63.0756%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="62.8256%" y="613" width="0.1579%" height="15" fill="rgb(253,91,49)" fg:x="796" fg:w="2"/><text x="63.0756%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="62.8256%" y="597" width="0.1579%" height="15" fill="rgb(228,155,29)" fg:x="796" fg:w="2"/><text x="63.0756%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="62.9045%" y="581" width="0.0789%" height="15" fill="rgb(243,57,37)" fg:x="797" fg:w="1"/><text x="63.1545%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="62.9045%" y="565" width="0.0789%" height="15" fill="rgb(244,167,17)" fg:x="797" fg:w="1"/><text x="63.1545%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="62.9045%" y="549" width="0.0789%" height="15" fill="rgb(207,181,38)" fg:x="797" fg:w="1"/><text x="63.1545%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="62.9045%" y="533" width="0.0789%" height="15" fill="rgb(211,8,23)" fg:x="797" fg:w="1"/><text x="63.1545%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="62.9045%" y="517" width="0.0789%" height="15" fill="rgb(235,11,44)" fg:x="797" fg:w="1"/><text x="63.1545%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="62.9045%" y="501" width="0.0789%" height="15" fill="rgb(248,18,52)" fg:x="797" fg:w="1"/><text x="63.1545%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="62.9045%" y="485" width="0.0789%" height="15" fill="rgb(208,4,7)" fg:x="797" fg:w="1"/><text x="63.1545%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="62.9045%" y="469" width="0.0789%" height="15" fill="rgb(240,17,39)" fg:x="797" fg:w="1"/><text x="63.1545%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="62.9045%" y="453" width="0.0789%" height="15" fill="rgb(207,170,3)" fg:x="797" fg:w="1"/><text x="63.1545%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="62.9045%" y="437" width="0.0789%" height="15" fill="rgb(236,100,52)" fg:x="797" fg:w="1"/><text x="63.1545%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="62.9045%" y="421" width="0.0789%" height="15" fill="rgb(246,78,51)" fg:x="797" fg:w="1"/><text x="63.1545%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="62.9045%" y="405" width="0.0789%" height="15" fill="rgb(211,17,15)" fg:x="797" fg:w="1"/><text x="63.1545%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="62.9045%" y="389" width="0.0789%" height="15" fill="rgb(209,59,46)" fg:x="797" fg:w="1"/><text x="63.1545%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.39%)</title><rect x="62.6677%" y="709" width="0.3946%" height="15" fill="rgb(210,92,25)" fg:x="794" fg:w="5"/><text x="62.9177%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="62.6677%" y="693" width="0.3946%" height="15" fill="rgb(238,174,52)" fg:x="794" fg:w="5"/><text x="62.9177%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.39%)</title><rect x="62.6677%" y="677" width="0.3946%" height="15" fill="rgb(230,73,7)" fg:x="794" fg:w="5"/><text x="62.9177%" y="687.50"></text></g><g><title>plugins_core::build::Build::leads_to (4 samples, 0.32%)</title><rect x="62.7466%" y="661" width="0.3157%" height="15" fill="rgb(243,124,40)" fg:x="795" fg:w="4"/><text x="62.9966%" y="671.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="62.9834%" y="645" width="0.0789%" height="15" fill="rgb(244,170,11)" fg:x="798" fg:w="1"/><text x="63.2334%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="62.9834%" y="629" width="0.0789%" height="15" fill="rgb(207,114,54)" fg:x="798" fg:w="1"/><text x="63.2334%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.9834%" y="613" width="0.0789%" height="15" fill="rgb(205,42,20)" fg:x="798" fg:w="1"/><text x="63.2334%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="63.0624%" y="693" width="0.0789%" height="15" fill="rgb(230,30,28)" fg:x="799" fg:w="1"/><text x="63.3124%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.0624%" y="677" width="0.0789%" height="15" fill="rgb(205,73,54)" fg:x="799" fg:w="1"/><text x="63.3124%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.0624%" y="661" width="0.0789%" height="15" fill="rgb(254,227,23)" fg:x="799" fg:w="1"/><text x="63.3124%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="63.0624%" y="645" width="0.0789%" height="15" fill="rgb(228,202,34)" fg:x="799" fg:w="1"/><text x="63.3124%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.0624%" y="629" width="0.0789%" height="15" fill="rgb(222,225,37)" fg:x="799" fg:w="1"/><text x="63.3124%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="63.1413%" y="597" width="0.0789%" height="15" fill="rgb(221,14,54)" fg:x="800" fg:w="1"/><text x="63.3913%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.1413%" y="581" width="0.0789%" height="15" fill="rgb(254,102,2)" fg:x="800" fg:w="1"/><text x="63.3913%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.1413%" y="565" width="0.0789%" height="15" fill="rgb(232,104,17)" fg:x="800" fg:w="1"/><text x="63.3913%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="63.1413%" y="549" width="0.0789%" height="15" fill="rgb(250,220,14)" fg:x="800" fg:w="1"/><text x="63.3913%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="63.2202%" y="565" width="0.0789%" height="15" fill="rgb(241,158,9)" fg:x="801" fg:w="1"/><text x="63.4702%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.2202%" y="549" width="0.0789%" height="15" fill="rgb(246,9,43)" fg:x="801" fg:w="1"/><text x="63.4702%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.2202%" y="533" width="0.0789%" height="15" fill="rgb(206,73,33)" fg:x="801" fg:w="1"/><text x="63.4702%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.2202%" y="517" width="0.0789%" height="15" fill="rgb(222,79,8)" fg:x="801" fg:w="1"/><text x="63.4702%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="63.2202%" y="501" width="0.0789%" height="15" fill="rgb(234,8,54)" fg:x="801" fg:w="1"/><text x="63.4702%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.2202%" y="485" width="0.0789%" height="15" fill="rgb(209,134,38)" fg:x="801" fg:w="1"/><text x="63.4702%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="63.2991%" y="565" width="0.1579%" height="15" fill="rgb(230,127,29)" fg:x="802" fg:w="2"/><text x="63.5491%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="63.2991%" y="549" width="0.1579%" height="15" fill="rgb(242,44,41)" fg:x="802" fg:w="2"/><text x="63.5491%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="63.3781%" y="533" width="0.0789%" height="15" fill="rgb(222,56,43)" fg:x="803" fg:w="1"/><text x="63.6281%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.3781%" y="517" width="0.0789%" height="15" fill="rgb(238,39,47)" fg:x="803" fg:w="1"/><text x="63.6281%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.3781%" y="501" width="0.0789%" height="15" fill="rgb(226,79,43)" fg:x="803" fg:w="1"/><text x="63.6281%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.3781%" y="485" width="0.0789%" height="15" fill="rgb(242,105,53)" fg:x="803" fg:w="1"/><text x="63.6281%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.3781%" y="469" width="0.0789%" height="15" fill="rgb(251,132,46)" fg:x="803" fg:w="1"/><text x="63.6281%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.39%)</title><rect x="63.1413%" y="613" width="0.3946%" height="15" fill="rgb(231,77,14)" fg:x="800" fg:w="5"/><text x="63.3913%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="63.2202%" y="597" width="0.3157%" height="15" fill="rgb(240,135,9)" fg:x="801" fg:w="4"/><text x="63.4702%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="63.2202%" y="581" width="0.3157%" height="15" fill="rgb(248,109,14)" fg:x="801" fg:w="4"/><text x="63.4702%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.4570%" y="565" width="0.0789%" height="15" fill="rgb(227,146,52)" fg:x="804" fg:w="1"/><text x="63.7070%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.4570%" y="549" width="0.0789%" height="15" fill="rgb(232,54,3)" fg:x="804" fg:w="1"/><text x="63.7070%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.4570%" y="533" width="0.0789%" height="15" fill="rgb(229,201,43)" fg:x="804" fg:w="1"/><text x="63.7070%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.5359%" y="613" width="0.0789%" height="15" fill="rgb(252,161,33)" fg:x="805" fg:w="1"/><text x="63.7859%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="63.5359%" y="597" width="0.0789%" height="15" fill="rgb(226,146,40)" fg:x="805" fg:w="1"/><text x="63.7859%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.5359%" y="581" width="0.0789%" height="15" fill="rgb(219,47,25)" fg:x="805" fg:w="1"/><text x="63.7859%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.5359%" y="565" width="0.0789%" height="15" fill="rgb(250,135,13)" fg:x="805" fg:w="1"/><text x="63.7859%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.5359%" y="549" width="0.0789%" height="15" fill="rgb(219,229,18)" fg:x="805" fg:w="1"/><text x="63.7859%" y="559.50"></text></g><g><title>engine::session::Session::flush (9 samples, 0.71%)</title><rect x="63.0624%" y="709" width="0.7103%" height="15" fill="rgb(217,152,27)" fg:x="799" fg:w="9"/><text x="63.3124%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (8 samples, 0.63%)</title><rect x="63.1413%" y="693" width="0.6314%" height="15" fill="rgb(225,71,47)" fg:x="800" fg:w="8"/><text x="63.3913%" y="703.50"></text></g><g><title>engine::session::state::State::close (8 samples, 0.63%)</title><rect x="63.1413%" y="677" width="0.6314%" height="15" fill="rgb(220,139,14)" fg:x="800" fg:w="8"/><text x="63.3913%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (8 samples, 0.63%)</title><rect x="63.1413%" y="661" width="0.6314%" height="15" fill="rgb(247,54,32)" fg:x="800" fg:w="8"/><text x="63.3913%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (8 samples, 0.63%)</title><rect x="63.1413%" y="645" width="0.6314%" height="15" fill="rgb(252,131,39)" fg:x="800" fg:w="8"/><text x="63.3913%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (8 samples, 0.63%)</title><rect x="63.1413%" y="629" width="0.6314%" height="15" fill="rgb(210,108,39)" fg:x="800" fg:w="8"/><text x="63.3913%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="63.6148%" y="613" width="0.1579%" height="15" fill="rgb(205,23,29)" fg:x="806" fg:w="2"/><text x="63.8648%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="63.6148%" y="597" width="0.1579%" height="15" fill="rgb(246,139,46)" fg:x="806" fg:w="2"/><text x="63.8648%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="63.6148%" y="581" width="0.1579%" height="15" fill="rgb(250,81,26)" fg:x="806" fg:w="2"/><text x="63.8648%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="63.6148%" y="565" width="0.1579%" height="15" fill="rgb(214,104,7)" fg:x="806" fg:w="2"/><text x="63.8648%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="63.6148%" y="549" width="0.1579%" height="15" fill="rgb(233,189,8)" fg:x="806" fg:w="2"/><text x="63.8648%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="63.6148%" y="533" width="0.1579%" height="15" fill="rgb(228,141,17)" fg:x="806" fg:w="2"/><text x="63.8648%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="63.6148%" y="517" width="0.1579%" height="15" fill="rgb(247,157,1)" fg:x="806" fg:w="2"/><text x="63.8648%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="63.6148%" y="501" width="0.1579%" height="15" fill="rgb(249,225,5)" fg:x="806" fg:w="2"/><text x="63.8648%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="63.6148%" y="485" width="0.1579%" height="15" fill="rgb(242,55,13)" fg:x="806" fg:w="2"/><text x="63.8648%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="63.6148%" y="469" width="0.1579%" height="15" fill="rgb(230,49,50)" fg:x="806" fg:w="2"/><text x="63.8648%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="63.6938%" y="453" width="0.0789%" height="15" fill="rgb(241,111,38)" fg:x="807" fg:w="1"/><text x="63.9438%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="63.6938%" y="437" width="0.0789%" height="15" fill="rgb(252,155,4)" fg:x="807" fg:w="1"/><text x="63.9438%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="63.6938%" y="421" width="0.0789%" height="15" fill="rgb(212,69,32)" fg:x="807" fg:w="1"/><text x="63.9438%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="63.6938%" y="405" width="0.0789%" height="15" fill="rgb(243,107,47)" fg:x="807" fg:w="1"/><text x="63.9438%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="63.6938%" y="389" width="0.0789%" height="15" fill="rgb(247,130,12)" fg:x="807" fg:w="1"/><text x="63.9438%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="63.6938%" y="373" width="0.0789%" height="15" fill="rgb(233,74,16)" fg:x="807" fg:w="1"/><text x="63.9438%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="63.7727%" y="693" width="0.0789%" height="15" fill="rgb(208,58,18)" fg:x="808" fg:w="1"/><text x="64.0227%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="63.7727%" y="677" width="0.0789%" height="15" fill="rgb(242,225,1)" fg:x="808" fg:w="1"/><text x="64.0227%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="63.7727%" y="661" width="0.0789%" height="15" fill="rgb(249,39,40)" fg:x="808" fg:w="1"/><text x="64.0227%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="63.7727%" y="645" width="0.0789%" height="15" fill="rgb(207,72,44)" fg:x="808" fg:w="1"/><text x="64.0227%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="63.7727%" y="629" width="0.0789%" height="15" fill="rgb(215,193,12)" fg:x="808" fg:w="1"/><text x="64.0227%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="63.7727%" y="613" width="0.0789%" height="15" fill="rgb(248,41,39)" fg:x="808" fg:w="1"/><text x="64.0227%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.7727%" y="597" width="0.0789%" height="15" fill="rgb(253,85,4)" fg:x="808" fg:w="1"/><text x="64.0227%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="63.7727%" y="581" width="0.0789%" height="15" fill="rgb(243,70,31)" fg:x="808" fg:w="1"/><text x="64.0227%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.7727%" y="565" width="0.0789%" height="15" fill="rgb(253,195,26)" fg:x="808" fg:w="1"/><text x="64.0227%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.7727%" y="549" width="0.0789%" height="15" fill="rgb(243,42,11)" fg:x="808" fg:w="1"/><text x="64.0227%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.7727%" y="533" width="0.0789%" height="15" fill="rgb(239,66,17)" fg:x="808" fg:w="1"/><text x="64.0227%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="63.8516%" y="677" width="0.0789%" height="15" fill="rgb(217,132,21)" fg:x="809" fg:w="1"/><text x="64.1016%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="63.8516%" y="661" width="0.0789%" height="15" fill="rgb(252,202,21)" fg:x="809" fg:w="1"/><text x="64.1016%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="63.8516%" y="645" width="0.0789%" height="15" fill="rgb(233,98,36)" fg:x="809" fg:w="1"/><text x="64.1016%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="63.8516%" y="629" width="0.0789%" height="15" fill="rgb(216,153,54)" fg:x="809" fg:w="1"/><text x="64.1016%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="63.8516%" y="613" width="0.0789%" height="15" fill="rgb(250,99,7)" fg:x="809" fg:w="1"/><text x="64.1016%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="63.8516%" y="597" width="0.0789%" height="15" fill="rgb(207,56,50)" fg:x="809" fg:w="1"/><text x="64.1016%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.8516%" y="581" width="0.0789%" height="15" fill="rgb(244,61,34)" fg:x="809" fg:w="1"/><text x="64.1016%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.8516%" y="565" width="0.0789%" height="15" fill="rgb(241,50,38)" fg:x="809" fg:w="1"/><text x="64.1016%" y="575.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="63.7727%" y="709" width="0.2368%" height="15" fill="rgb(212,166,30)" fg:x="808" fg:w="3"/><text x="64.0227%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="63.8516%" y="693" width="0.1579%" height="15" fill="rgb(249,127,32)" fg:x="809" fg:w="2"/><text x="64.1016%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="63.9305%" y="677" width="0.0789%" height="15" fill="rgb(209,103,0)" fg:x="810" fg:w="1"/><text x="64.1805%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="63.9305%" y="661" width="0.0789%" height="15" fill="rgb(238,209,51)" fg:x="810" fg:w="1"/><text x="64.1805%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="63.9305%" y="645" width="0.0789%" height="15" fill="rgb(237,56,23)" fg:x="810" fg:w="1"/><text x="64.1805%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="63.9305%" y="629" width="0.0789%" height="15" fill="rgb(215,153,46)" fg:x="810" fg:w="1"/><text x="64.1805%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="63.9305%" y="613" width="0.0789%" height="15" fill="rgb(224,49,31)" fg:x="810" fg:w="1"/><text x="64.1805%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="63.9305%" y="597" width="0.0789%" height="15" fill="rgb(250,18,42)" fg:x="810" fg:w="1"/><text x="64.1805%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9305%" y="581" width="0.0789%" height="15" fill="rgb(215,176,39)" fg:x="810" fg:w="1"/><text x="64.1805%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9305%" y="565" width="0.0789%" height="15" fill="rgb(223,77,29)" fg:x="810" fg:w="1"/><text x="64.1805%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9305%" y="549" width="0.0789%" height="15" fill="rgb(234,94,52)" fg:x="810" fg:w="1"/><text x="64.1805%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.9305%" y="533" width="0.0789%" height="15" fill="rgb(220,154,50)" fg:x="810" fg:w="1"/><text x="64.1805%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.9305%" y="517" width="0.0789%" height="15" fill="rgb(212,11,10)" fg:x="810" fg:w="1"/><text x="64.1805%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.9305%" y="501" width="0.0789%" height="15" fill="rgb(205,166,19)" fg:x="810" fg:w="1"/><text x="64.1805%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.9305%" y="485" width="0.0789%" height="15" fill="rgb(244,198,16)" fg:x="810" fg:w="1"/><text x="64.1805%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.9305%" y="469" width="0.0789%" height="15" fill="rgb(219,69,12)" fg:x="810" fg:w="1"/><text x="64.1805%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.9305%" y="453" width="0.0789%" height="15" fill="rgb(245,30,7)" fg:x="810" fg:w="1"/><text x="64.1805%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.9305%" y="437" width="0.0789%" height="15" fill="rgb(218,221,48)" fg:x="810" fg:w="1"/><text x="64.1805%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.9305%" y="421" width="0.0789%" height="15" fill="rgb(216,66,15)" fg:x="810" fg:w="1"/><text x="64.1805%" y="431.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="64.0095%" y="709" width="0.0789%" height="15" fill="rgb(226,122,50)" fg:x="811" fg:w="1"/><text x="64.2595%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="64.0095%" y="693" width="0.0789%" height="15" fill="rgb(239,156,16)" fg:x="811" fg:w="1"/><text x="64.2595%" y="703.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="64.0095%" y="677" width="0.0789%" height="15" fill="rgb(224,27,38)" fg:x="811" fg:w="1"/><text x="64.2595%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="64.0095%" y="661" width="0.0789%" height="15" fill="rgb(224,39,27)" fg:x="811" fg:w="1"/><text x="64.2595%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="64.0095%" y="645" width="0.0789%" height="15" fill="rgb(215,92,29)" fg:x="811" fg:w="1"/><text x="64.2595%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.0095%" y="629" width="0.0789%" height="15" fill="rgb(207,159,16)" fg:x="811" fg:w="1"/><text x="64.2595%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="64.0095%" y="613" width="0.0789%" height="15" fill="rgb(238,163,47)" fg:x="811" fg:w="1"/><text x="64.2595%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.0095%" y="597" width="0.0789%" height="15" fill="rgb(219,91,49)" fg:x="811" fg:w="1"/><text x="64.2595%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="64.0095%" y="581" width="0.0789%" height="15" fill="rgb(227,167,31)" fg:x="811" fg:w="1"/><text x="64.2595%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="64.0095%" y="565" width="0.0789%" height="15" fill="rgb(234,80,54)" fg:x="811" fg:w="1"/><text x="64.2595%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0095%" y="549" width="0.0789%" height="15" fill="rgb(212,114,2)" fg:x="811" fg:w="1"/><text x="64.2595%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.0884%" y="677" width="0.0789%" height="15" fill="rgb(234,50,24)" fg:x="812" fg:w="1"/><text x="64.3384%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.0884%" y="661" width="0.0789%" height="15" fill="rgb(221,68,8)" fg:x="812" fg:w="1"/><text x="64.3384%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.0884%" y="645" width="0.0789%" height="15" fill="rgb(254,180,31)" fg:x="812" fg:w="1"/><text x="64.3384%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0884%" y="629" width="0.0789%" height="15" fill="rgb(247,130,50)" fg:x="812" fg:w="1"/><text x="64.3384%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0884%" y="613" width="0.0789%" height="15" fill="rgb(211,109,4)" fg:x="812" fg:w="1"/><text x="64.3384%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.0884%" y="597" width="0.0789%" height="15" fill="rgb(238,50,21)" fg:x="812" fg:w="1"/><text x="64.3384%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="64.1673%" y="677" width="0.0789%" height="15" fill="rgb(225,57,45)" fg:x="813" fg:w="1"/><text x="64.4173%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="64.1673%" y="661" width="0.0789%" height="15" fill="rgb(209,196,50)" fg:x="813" fg:w="1"/><text x="64.4173%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.1673%" y="645" width="0.0789%" height="15" fill="rgb(242,140,13)" fg:x="813" fg:w="1"/><text x="64.4173%" y="655.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.1673%" y="629" width="0.0789%" height="15" fill="rgb(217,111,7)" fg:x="813" fg:w="1"/><text x="64.4173%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.1673%" y="613" width="0.0789%" height="15" fill="rgb(253,193,51)" fg:x="813" fg:w="1"/><text x="64.4173%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.1673%" y="597" width="0.0789%" height="15" fill="rgb(252,70,29)" fg:x="813" fg:w="1"/><text x="64.4173%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="64.0884%" y="693" width="0.2368%" height="15" fill="rgb(232,127,12)" fg:x="812" fg:w="3"/><text x="64.3384%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="64.2463%" y="677" width="0.0789%" height="15" fill="rgb(211,180,21)" fg:x="814" fg:w="1"/><text x="64.4963%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="64.2463%" y="661" width="0.0789%" height="15" fill="rgb(229,72,13)" fg:x="814" fg:w="1"/><text x="64.4963%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="64.2463%" y="645" width="0.0789%" height="15" fill="rgb(240,211,49)" fg:x="814" fg:w="1"/><text x="64.4963%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="64.2463%" y="629" width="0.0789%" height="15" fill="rgb(219,149,40)" fg:x="814" fg:w="1"/><text x="64.4963%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="64.2463%" y="613" width="0.0789%" height="15" fill="rgb(210,127,46)" fg:x="814" fg:w="1"/><text x="64.4963%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="64.2463%" y="597" width="0.0789%" height="15" fill="rgb(220,106,7)" fg:x="814" fg:w="1"/><text x="64.4963%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.2463%" y="581" width="0.0789%" height="15" fill="rgb(249,31,22)" fg:x="814" fg:w="1"/><text x="64.4963%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="64.2463%" y="565" width="0.0789%" height="15" fill="rgb(253,1,49)" fg:x="814" fg:w="1"/><text x="64.4963%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.2463%" y="549" width="0.0789%" height="15" fill="rgb(227,144,33)" fg:x="814" fg:w="1"/><text x="64.4963%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2463%" y="533" width="0.0789%" height="15" fill="rgb(249,163,44)" fg:x="814" fg:w="1"/><text x="64.4963%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2463%" y="517" width="0.0789%" height="15" fill="rgb(234,15,39)" fg:x="814" fg:w="1"/><text x="64.4963%" y="527.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="64.3252%" y="677" width="0.0789%" height="15" fill="rgb(207,66,16)" fg:x="815" fg:w="1"/><text x="64.5752%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="64.3252%" y="661" width="0.0789%" height="15" fill="rgb(233,112,24)" fg:x="815" fg:w="1"/><text x="64.5752%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="64.3252%" y="645" width="0.0789%" height="15" fill="rgb(230,90,22)" fg:x="815" fg:w="1"/><text x="64.5752%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.3252%" y="629" width="0.0789%" height="15" fill="rgb(229,61,13)" fg:x="815" fg:w="1"/><text x="64.5752%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.3252%" y="613" width="0.0789%" height="15" fill="rgb(225,57,24)" fg:x="815" fg:w="1"/><text x="64.5752%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.3252%" y="597" width="0.0789%" height="15" fill="rgb(208,169,48)" fg:x="815" fg:w="1"/><text x="64.5752%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.3252%" y="581" width="0.0789%" height="15" fill="rgb(244,218,51)" fg:x="815" fg:w="1"/><text x="64.5752%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.3252%" y="565" width="0.0789%" height="15" fill="rgb(214,148,10)" fg:x="815" fg:w="1"/><text x="64.5752%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.3252%" y="549" width="0.0789%" height="15" fill="rgb(225,174,27)" fg:x="815" fg:w="1"/><text x="64.5752%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.3252%" y="533" width="0.0789%" height="15" fill="rgb(230,96,26)" fg:x="815" fg:w="1"/><text x="64.5752%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.3252%" y="517" width="0.0789%" height="15" fill="rgb(232,10,30)" fg:x="815" fg:w="1"/><text x="64.5752%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.3252%" y="501" width="0.0789%" height="15" fill="rgb(222,8,50)" fg:x="815" fg:w="1"/><text x="64.5752%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.3252%" y="485" width="0.0789%" height="15" fill="rgb(213,81,27)" fg:x="815" fg:w="1"/><text x="64.5752%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.3252%" y="469" width="0.0789%" height="15" fill="rgb(245,50,10)" fg:x="815" fg:w="1"/><text x="64.5752%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.3252%" y="453" width="0.0789%" height="15" fill="rgb(216,100,18)" fg:x="815" fg:w="1"/><text x="64.5752%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.3252%" y="437" width="0.0789%" height="15" fill="rgb(236,147,54)" fg:x="815" fg:w="1"/><text x="64.5752%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.3252%" y="421" width="0.0789%" height="15" fill="rgb(205,143,26)" fg:x="815" fg:w="1"/><text x="64.5752%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.3252%" y="405" width="0.0789%" height="15" fill="rgb(236,26,9)" fg:x="815" fg:w="1"/><text x="64.5752%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.3252%" y="389" width="0.0789%" height="15" fill="rgb(221,165,53)" fg:x="815" fg:w="1"/><text x="64.5752%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.3252%" y="373" width="0.0789%" height="15" fill="rgb(214,110,17)" fg:x="815" fg:w="1"/><text x="64.5752%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.3252%" y="357" width="0.0789%" height="15" fill="rgb(237,197,12)" fg:x="815" fg:w="1"/><text x="64.5752%" y="367.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="64.4041%" y="677" width="0.0789%" height="15" fill="rgb(205,84,17)" fg:x="816" fg:w="1"/><text x="64.6541%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="64.4041%" y="661" width="0.0789%" height="15" fill="rgb(237,18,45)" fg:x="816" fg:w="1"/><text x="64.6541%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.4041%" y="645" width="0.0789%" height="15" fill="rgb(221,87,14)" fg:x="816" fg:w="1"/><text x="64.6541%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="64.4041%" y="629" width="0.0789%" height="15" fill="rgb(238,186,15)" fg:x="816" fg:w="1"/><text x="64.6541%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="64.4041%" y="613" width="0.0789%" height="15" fill="rgb(208,115,11)" fg:x="816" fg:w="1"/><text x="64.6541%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.4041%" y="597" width="0.0789%" height="15" fill="rgb(254,175,0)" fg:x="816" fg:w="1"/><text x="64.6541%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.4041%" y="581" width="0.0789%" height="15" fill="rgb(227,24,42)" fg:x="816" fg:w="1"/><text x="64.6541%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.4041%" y="565" width="0.0789%" height="15" fill="rgb(223,211,37)" fg:x="816" fg:w="1"/><text x="64.6541%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="64.4041%" y="549" width="0.0789%" height="15" fill="rgb(235,49,27)" fg:x="816" fg:w="1"/><text x="64.6541%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (26 samples, 2.05%)</title><rect x="62.5099%" y="725" width="2.0521%" height="15" fill="rgb(254,97,51)" fg:x="792" fg:w="26"/><text x="62.7599%" y="735.50">p..</text></g><g><title>plugins_core::build::Build::occupying (6 samples, 0.47%)</title><rect x="64.0884%" y="709" width="0.4736%" height="15" fill="rgb(249,51,40)" fg:x="812" fg:w="6"/><text x="64.3384%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="64.3252%" y="693" width="0.2368%" height="15" fill="rgb(210,128,45)" fg:x="815" fg:w="3"/><text x="64.5752%" y="703.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="64.4830%" y="677" width="0.0789%" height="15" fill="rgb(224,137,50)" fg:x="817" fg:w="1"/><text x="64.7330%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="64.4830%" y="661" width="0.0789%" height="15" fill="rgb(242,15,9)" fg:x="817" fg:w="1"/><text x="64.7330%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="64.4830%" y="645" width="0.0789%" height="15" fill="rgb(233,187,41)" fg:x="817" fg:w="1"/><text x="64.7330%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.4830%" y="629" width="0.0789%" height="15" fill="rgb(227,2,29)" fg:x="817" fg:w="1"/><text x="64.7330%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.4830%" y="613" width="0.0789%" height="15" fill="rgb(222,70,3)" fg:x="817" fg:w="1"/><text x="64.7330%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.4830%" y="597" width="0.0789%" height="15" fill="rgb(213,11,42)" fg:x="817" fg:w="1"/><text x="64.7330%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.4830%" y="581" width="0.0789%" height="15" fill="rgb(225,150,9)" fg:x="817" fg:w="1"/><text x="64.7330%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.4830%" y="565" width="0.0789%" height="15" fill="rgb(230,162,45)" fg:x="817" fg:w="1"/><text x="64.7330%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.4830%" y="549" width="0.0789%" height="15" fill="rgb(222,14,52)" fg:x="817" fg:w="1"/><text x="64.7330%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="64.5620%" y="725" width="0.1579%" height="15" fill="rgb(254,198,14)" fg:x="818" fg:w="2"/><text x="64.8120%" y="735.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (2 samples, 0.16%)</title><rect x="64.5620%" y="709" width="0.1579%" height="15" fill="rgb(220,217,30)" fg:x="818" fg:w="2"/><text x="64.8120%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="64.6409%" y="693" width="0.0789%" height="15" fill="rgb(215,146,41)" fg:x="819" fg:w="1"/><text x="64.8909%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.6409%" y="677" width="0.0789%" height="15" fill="rgb(217,27,36)" fg:x="819" fg:w="1"/><text x="64.8909%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.6409%" y="661" width="0.0789%" height="15" fill="rgb(219,218,39)" fg:x="819" fg:w="1"/><text x="64.8909%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.6409%" y="645" width="0.0789%" height="15" fill="rgb(219,4,42)" fg:x="819" fg:w="1"/><text x="64.8909%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.6409%" y="629" width="0.0789%" height="15" fill="rgb(249,119,36)" fg:x="819" fg:w="1"/><text x="64.8909%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.6409%" y="613" width="0.0789%" height="15" fill="rgb(209,23,33)" fg:x="819" fg:w="1"/><text x="64.8909%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.6409%" y="597" width="0.0789%" height="15" fill="rgb(211,10,0)" fg:x="819" fg:w="1"/><text x="64.8909%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.6409%" y="581" width="0.0789%" height="15" fill="rgb(208,99,37)" fg:x="819" fg:w="1"/><text x="64.8909%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.6409%" y="565" width="0.0789%" height="15" fill="rgb(213,132,31)" fg:x="819" fg:w="1"/><text x="64.8909%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.6409%" y="549" width="0.0789%" height="15" fill="rgb(243,129,40)" fg:x="819" fg:w="1"/><text x="64.8909%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="64.7198%" y="661" width="0.0789%" height="15" fill="rgb(210,66,33)" fg:x="820" fg:w="1"/><text x="64.9698%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="64.7198%" y="645" width="0.0789%" height="15" fill="rgb(209,189,4)" fg:x="820" fg:w="1"/><text x="64.9698%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="64.7198%" y="677" width="0.1579%" height="15" fill="rgb(214,107,37)" fg:x="820" fg:w="2"/><text x="64.9698%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="64.7987%" y="661" width="0.0789%" height="15" fill="rgb(245,88,54)" fg:x="821" fg:w="1"/><text x="65.0487%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="64.7987%" y="645" width="0.0789%" height="15" fill="rgb(205,146,20)" fg:x="821" fg:w="1"/><text x="65.0487%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="64.7987%" y="629" width="0.0789%" height="15" fill="rgb(220,161,25)" fg:x="821" fg:w="1"/><text x="65.0487%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.7987%" y="613" width="0.0789%" height="15" fill="rgb(215,152,15)" fg:x="821" fg:w="1"/><text x="65.0487%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.7987%" y="597" width="0.0789%" height="15" fill="rgb(233,192,44)" fg:x="821" fg:w="1"/><text x="65.0487%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="64.7987%" y="581" width="0.0789%" height="15" fill="rgb(240,170,46)" fg:x="821" fg:w="1"/><text x="65.0487%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="64.7987%" y="565" width="0.0789%" height="15" fill="rgb(207,104,33)" fg:x="821" fg:w="1"/><text x="65.0487%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.7987%" y="549" width="0.0789%" height="15" fill="rgb(219,21,39)" fg:x="821" fg:w="1"/><text x="65.0487%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.7987%" y="533" width="0.0789%" height="15" fill="rgb(214,133,29)" fg:x="821" fg:w="1"/><text x="65.0487%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="64.7987%" y="517" width="0.0789%" height="15" fill="rgb(226,93,6)" fg:x="821" fg:w="1"/><text x="65.0487%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="64.7987%" y="501" width="0.0789%" height="15" fill="rgb(252,222,34)" fg:x="821" fg:w="1"/><text x="65.0487%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.7987%" y="485" width="0.0789%" height="15" fill="rgb(252,92,48)" fg:x="821" fg:w="1"/><text x="65.0487%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.7987%" y="469" width="0.0789%" height="15" fill="rgb(245,223,24)" fg:x="821" fg:w="1"/><text x="65.0487%" y="479.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="64.7987%" y="453" width="0.0789%" height="15" fill="rgb(205,176,3)" fg:x="821" fg:w="1"/><text x="65.0487%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="64.7987%" y="437" width="0.0789%" height="15" fill="rgb(235,151,15)" fg:x="821" fg:w="1"/><text x="65.0487%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.7987%" y="421" width="0.0789%" height="15" fill="rgb(237,209,11)" fg:x="821" fg:w="1"/><text x="65.0487%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.7987%" y="405" width="0.0789%" height="15" fill="rgb(243,227,24)" fg:x="821" fg:w="1"/><text x="65.0487%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="64.7987%" y="389" width="0.0789%" height="15" fill="rgb(239,193,16)" fg:x="821" fg:w="1"/><text x="65.0487%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="64.7987%" y="373" width="0.0789%" height="15" fill="rgb(231,27,9)" fg:x="821" fg:w="1"/><text x="65.0487%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="64.7987%" y="357" width="0.0789%" height="15" fill="rgb(219,169,10)" fg:x="821" fg:w="1"/><text x="65.0487%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="64.7987%" y="341" width="0.0789%" height="15" fill="rgb(244,229,43)" fg:x="821" fg:w="1"/><text x="65.0487%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="64.7987%" y="325" width="0.0789%" height="15" fill="rgb(254,38,20)" fg:x="821" fg:w="1"/><text x="65.0487%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="64.7987%" y="309" width="0.0789%" height="15" fill="rgb(250,47,30)" fg:x="821" fg:w="1"/><text x="65.0487%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="64.7987%" y="293" width="0.0789%" height="15" fill="rgb(224,124,36)" fg:x="821" fg:w="1"/><text x="65.0487%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="64.7987%" y="277" width="0.0789%" height="15" fill="rgb(246,68,51)" fg:x="821" fg:w="1"/><text x="65.0487%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.7987%" y="261" width="0.0789%" height="15" fill="rgb(253,43,49)" fg:x="821" fg:w="1"/><text x="65.0487%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="64.7987%" y="245" width="0.0789%" height="15" fill="rgb(219,54,36)" fg:x="821" fg:w="1"/><text x="65.0487%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.7987%" y="229" width="0.0789%" height="15" fill="rgb(227,133,34)" fg:x="821" fg:w="1"/><text x="65.0487%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="64.7987%" y="213" width="0.0789%" height="15" fill="rgb(247,227,15)" fg:x="821" fg:w="1"/><text x="65.0487%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="64.7987%" y="197" width="0.0789%" height="15" fill="rgb(229,96,14)" fg:x="821" fg:w="1"/><text x="65.0487%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="64.7987%" y="181" width="0.0789%" height="15" fill="rgb(220,79,17)" fg:x="821" fg:w="1"/><text x="65.0487%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.7987%" y="165" width="0.0789%" height="15" fill="rgb(205,131,53)" fg:x="821" fg:w="1"/><text x="65.0487%" y="175.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="64.7198%" y="725" width="0.2368%" height="15" fill="rgb(209,50,29)" fg:x="820" fg:w="3"/><text x="64.9698%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="64.7198%" y="709" width="0.2368%" height="15" fill="rgb(245,86,46)" fg:x="820" fg:w="3"/><text x="64.9698%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="64.7198%" y="693" width="0.2368%" height="15" fill="rgb(235,66,46)" fg:x="820" fg:w="3"/><text x="64.9698%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="64.8777%" y="677" width="0.0789%" height="15" fill="rgb(232,148,31)" fg:x="822" fg:w="1"/><text x="65.1277%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="64.8777%" y="661" width="0.0789%" height="15" fill="rgb(217,149,8)" fg:x="822" fg:w="1"/><text x="65.1277%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="64.8777%" y="645" width="0.0789%" height="15" fill="rgb(209,183,11)" fg:x="822" fg:w="1"/><text x="65.1277%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="64.8777%" y="629" width="0.0789%" height="15" fill="rgb(208,55,20)" fg:x="822" fg:w="1"/><text x="65.1277%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="64.8777%" y="613" width="0.0789%" height="15" fill="rgb(218,39,14)" fg:x="822" fg:w="1"/><text x="65.1277%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="64.8777%" y="597" width="0.0789%" height="15" fill="rgb(216,169,33)" fg:x="822" fg:w="1"/><text x="65.1277%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.8777%" y="581" width="0.0789%" height="15" fill="rgb(233,80,24)" fg:x="822" fg:w="1"/><text x="65.1277%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="64.8777%" y="565" width="0.0789%" height="15" fill="rgb(213,179,31)" fg:x="822" fg:w="1"/><text x="65.1277%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.8777%" y="549" width="0.0789%" height="15" fill="rgb(209,19,5)" fg:x="822" fg:w="1"/><text x="65.1277%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="64.8777%" y="533" width="0.0789%" height="15" fill="rgb(219,18,35)" fg:x="822" fg:w="1"/><text x="65.1277%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.8777%" y="517" width="0.0789%" height="15" fill="rgb(209,169,16)" fg:x="822" fg:w="1"/><text x="65.1277%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="64.9566%" y="709" width="0.0789%" height="15" fill="rgb(245,90,51)" fg:x="823" fg:w="1"/><text x="65.2066%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="64.9566%" y="693" width="0.0789%" height="15" fill="rgb(220,99,45)" fg:x="823" fg:w="1"/><text x="65.2066%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="64.9566%" y="677" width="0.0789%" height="15" fill="rgb(249,89,25)" fg:x="823" fg:w="1"/><text x="65.2066%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="64.9566%" y="661" width="0.0789%" height="15" fill="rgb(239,193,0)" fg:x="823" fg:w="1"/><text x="65.2066%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.9566%" y="645" width="0.0789%" height="15" fill="rgb(231,126,1)" fg:x="823" fg:w="1"/><text x="65.2066%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.9566%" y="629" width="0.0789%" height="15" fill="rgb(243,166,3)" fg:x="823" fg:w="1"/><text x="65.2066%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9566%" y="613" width="0.0789%" height="15" fill="rgb(223,22,34)" fg:x="823" fg:w="1"/><text x="65.2066%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9566%" y="597" width="0.0789%" height="15" fill="rgb(251,52,51)" fg:x="823" fg:w="1"/><text x="65.2066%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9566%" y="581" width="0.0789%" height="15" fill="rgb(221,165,28)" fg:x="823" fg:w="1"/><text x="65.2066%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9566%" y="565" width="0.0789%" height="15" fill="rgb(218,121,47)" fg:x="823" fg:w="1"/><text x="65.2066%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9566%" y="549" width="0.0789%" height="15" fill="rgb(209,120,9)" fg:x="823" fg:w="1"/><text x="65.2066%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.9566%" y="533" width="0.0789%" height="15" fill="rgb(236,68,12)" fg:x="823" fg:w="1"/><text x="65.2066%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.9566%" y="517" width="0.0789%" height="15" fill="rgb(225,194,26)" fg:x="823" fg:w="1"/><text x="65.2066%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.9566%" y="501" width="0.0789%" height="15" fill="rgb(231,84,39)" fg:x="823" fg:w="1"/><text x="65.2066%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.9566%" y="485" width="0.0789%" height="15" fill="rgb(210,11,45)" fg:x="823" fg:w="1"/><text x="65.2066%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.9566%" y="469" width="0.0789%" height="15" fill="rgb(224,54,52)" fg:x="823" fg:w="1"/><text x="65.2066%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.9566%" y="453" width="0.0789%" height="15" fill="rgb(238,102,14)" fg:x="823" fg:w="1"/><text x="65.2066%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.9566%" y="437" width="0.0789%" height="15" fill="rgb(243,160,52)" fg:x="823" fg:w="1"/><text x="65.2066%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.9566%" y="421" width="0.0789%" height="15" fill="rgb(216,114,19)" fg:x="823" fg:w="1"/><text x="65.2066%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.9566%" y="405" width="0.0789%" height="15" fill="rgb(244,166,37)" fg:x="823" fg:w="1"/><text x="65.2066%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.9566%" y="389" width="0.0789%" height="15" fill="rgb(246,29,44)" fg:x="823" fg:w="1"/><text x="65.2066%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.9566%" y="373" width="0.0789%" height="15" fill="rgb(215,56,53)" fg:x="823" fg:w="1"/><text x="65.2066%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.9566%" y="357" width="0.0789%" height="15" fill="rgb(217,60,2)" fg:x="823" fg:w="1"/><text x="65.2066%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.0355%" y="645" width="0.0789%" height="15" fill="rgb(207,26,24)" fg:x="824" fg:w="1"/><text x="65.2855%" y="655.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (51 samples, 4.03%)</title><rect x="61.1681%" y="741" width="4.0253%" height="15" fill="rgb(252,210,15)" fg:x="775" fg:w="51"/><text x="61.4181%" y="751.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="64.9566%" y="725" width="0.2368%" height="15" fill="rgb(253,209,26)" fg:x="823" fg:w="3"/><text x="65.2066%" y="735.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="65.0355%" y="709" width="0.1579%" height="15" fill="rgb(238,170,14)" fg:x="824" fg:w="2"/><text x="65.2855%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::new (2 samples, 0.16%)</title><rect x="65.0355%" y="693" width="0.1579%" height="15" fill="rgb(216,178,15)" fg:x="824" fg:w="2"/><text x="65.2855%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="65.0355%" y="677" width="0.1579%" height="15" fill="rgb(250,197,2)" fg:x="824" fg:w="2"/><text x="65.2855%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="65.0355%" y="661" width="0.1579%" height="15" fill="rgb(212,70,42)" fg:x="824" fg:w="2"/><text x="65.2855%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.1144%" y="645" width="0.0789%" height="15" fill="rgb(227,213,9)" fg:x="825" fg:w="1"/><text x="65.3644%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.1144%" y="629" width="0.0789%" height="15" fill="rgb(245,99,25)" fg:x="825" fg:w="1"/><text x="65.3644%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.1144%" y="613" width="0.0789%" height="15" fill="rgb(250,82,29)" fg:x="825" fg:w="1"/><text x="65.3644%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.1144%" y="597" width="0.0789%" height="15" fill="rgb(241,226,54)" fg:x="825" fg:w="1"/><text x="65.3644%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.1144%" y="581" width="0.0789%" height="15" fill="rgb(221,99,41)" fg:x="825" fg:w="1"/><text x="65.3644%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="65.1934%" y="661" width="0.0789%" height="15" fill="rgb(213,90,21)" fg:x="826" fg:w="1"/><text x="65.4434%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.1934%" y="645" width="0.0789%" height="15" fill="rgb(205,208,24)" fg:x="826" fg:w="1"/><text x="65.4434%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.1934%" y="629" width="0.0789%" height="15" fill="rgb(246,31,12)" fg:x="826" fg:w="1"/><text x="65.4434%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.1934%" y="613" width="0.0789%" height="15" fill="rgb(213,154,6)" fg:x="826" fg:w="1"/><text x="65.4434%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.1934%" y="597" width="0.0789%" height="15" fill="rgb(222,163,29)" fg:x="826" fg:w="1"/><text x="65.4434%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.1934%" y="581" width="0.0789%" height="15" fill="rgb(227,201,8)" fg:x="826" fg:w="1"/><text x="65.4434%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.1934%" y="565" width="0.0789%" height="15" fill="rgb(233,9,32)" fg:x="826" fg:w="1"/><text x="65.4434%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.1934%" y="549" width="0.0789%" height="15" fill="rgb(217,54,24)" fg:x="826" fg:w="1"/><text x="65.4434%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.1934%" y="533" width="0.0789%" height="15" fill="rgb(235,192,0)" fg:x="826" fg:w="1"/><text x="65.4434%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.1934%" y="517" width="0.0789%" height="15" fill="rgb(235,45,9)" fg:x="826" fg:w="1"/><text x="65.4434%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.1934%" y="501" width="0.0789%" height="15" fill="rgb(246,42,40)" fg:x="826" fg:w="1"/><text x="65.4434%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.1934%" y="485" width="0.0789%" height="15" fill="rgb(248,111,24)" fg:x="826" fg:w="1"/><text x="65.4434%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.1934%" y="469" width="0.0789%" height="15" fill="rgb(249,65,22)" fg:x="826" fg:w="1"/><text x="65.4434%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="65.1934%" y="693" width="0.1579%" height="15" fill="rgb(238,111,51)" fg:x="826" fg:w="2"/><text x="65.4434%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="65.1934%" y="677" width="0.1579%" height="15" fill="rgb(250,118,22)" fg:x="826" fg:w="2"/><text x="65.4434%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.2723%" y="661" width="0.0789%" height="15" fill="rgb(234,84,26)" fg:x="827" fg:w="1"/><text x="65.5223%" y="671.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="65.5091%" y="661" width="0.1579%" height="15" fill="rgb(243,172,12)" fg:x="830" fg:w="2"/><text x="65.7591%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="65.5091%" y="645" width="0.1579%" height="15" fill="rgb(236,150,49)" fg:x="830" fg:w="2"/><text x="65.7591%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="65.5091%" y="629" width="0.1579%" height="15" fill="rgb(225,197,26)" fg:x="830" fg:w="2"/><text x="65.7591%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.5880%" y="613" width="0.0789%" height="15" fill="rgb(214,17,42)" fg:x="831" fg:w="1"/><text x="65.8380%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.6669%" y="629" width="0.0789%" height="15" fill="rgb(224,165,40)" fg:x="832" fg:w="1"/><text x="65.9169%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="65.6669%" y="661" width="0.1579%" height="15" fill="rgb(246,100,4)" fg:x="832" fg:w="2"/><text x="65.9169%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="65.6669%" y="645" width="0.1579%" height="15" fill="rgb(222,103,0)" fg:x="832" fg:w="2"/><text x="65.9169%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.7459%" y="629" width="0.0789%" height="15" fill="rgb(227,189,26)" fg:x="833" fg:w="1"/><text x="65.9959%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.7459%" y="613" width="0.0789%" height="15" fill="rgb(214,202,17)" fg:x="833" fg:w="1"/><text x="65.9959%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.7459%" y="597" width="0.0789%" height="15" fill="rgb(229,111,3)" fg:x="833" fg:w="1"/><text x="65.9959%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.8248%" y="629" width="0.0789%" height="15" fill="rgb(229,172,15)" fg:x="834" fg:w="1"/><text x="66.0748%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="65.8248%" y="613" width="0.0789%" height="15" fill="rgb(230,224,35)" fg:x="834" fg:w="1"/><text x="66.0748%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.8248%" y="597" width="0.0789%" height="15" fill="rgb(251,141,6)" fg:x="834" fg:w="1"/><text x="66.0748%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.8248%" y="581" width="0.0789%" height="15" fill="rgb(225,208,6)" fg:x="834" fg:w="1"/><text x="66.0748%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="65.8248%" y="645" width="0.2368%" height="15" fill="rgb(246,181,16)" fg:x="834" fg:w="3"/><text x="66.0748%" y="655.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="65.9037%" y="629" width="0.1579%" height="15" fill="rgb(227,129,36)" fg:x="835" fg:w="2"/><text x="66.1537%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="65.9037%" y="613" width="0.1579%" height="15" fill="rgb(248,117,24)" fg:x="835" fg:w="2"/><text x="66.1537%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="65.9826%" y="597" width="0.0789%" height="15" fill="rgb(214,185,35)" fg:x="836" fg:w="1"/><text x="66.2326%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.0616%" y="613" width="0.0789%" height="15" fill="rgb(236,150,34)" fg:x="837" fg:w="1"/><text x="66.3116%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.1405%" y="581" width="0.0789%" height="15" fill="rgb(243,228,27)" fg:x="838" fg:w="1"/><text x="66.3905%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="66.2194%" y="533" width="0.1579%" height="15" fill="rgb(245,77,44)" fg:x="839" fg:w="2"/><text x="66.4694%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="66.2983%" y="517" width="0.0789%" height="15" fill="rgb(235,214,42)" fg:x="840" fg:w="1"/><text x="66.5483%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2983%" y="501" width="0.0789%" height="15" fill="rgb(221,74,3)" fg:x="840" fg:w="1"/><text x="66.5483%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="66.2194%" y="565" width="0.2368%" height="15" fill="rgb(206,121,29)" fg:x="839" fg:w="3"/><text x="66.4694%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="66.2194%" y="549" width="0.2368%" height="15" fill="rgb(249,131,53)" fg:x="839" fg:w="3"/><text x="66.4694%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3773%" y="533" width="0.0789%" height="15" fill="rgb(236,170,29)" fg:x="841" fg:w="1"/><text x="66.6273%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.5351%" y="485" width="0.0789%" height="15" fill="rgb(247,96,15)" fg:x="843" fg:w="1"/><text x="66.7851%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.55%)</title><rect x="66.1405%" y="597" width="0.5525%" height="15" fill="rgb(211,210,7)" fg:x="838" fg:w="7"/><text x="66.3905%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.47%)</title><rect x="66.2194%" y="581" width="0.4736%" height="15" fill="rgb(240,88,50)" fg:x="839" fg:w="6"/><text x="66.4694%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="66.4562%" y="565" width="0.2368%" height="15" fill="rgb(209,229,26)" fg:x="842" fg:w="3"/><text x="66.7062%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="66.4562%" y="549" width="0.2368%" height="15" fill="rgb(210,68,23)" fg:x="842" fg:w="3"/><text x="66.7062%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="66.5351%" y="533" width="0.1579%" height="15" fill="rgb(229,180,13)" fg:x="843" fg:w="2"/><text x="66.7851%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="66.5351%" y="517" width="0.1579%" height="15" fill="rgb(236,53,44)" fg:x="843" fg:w="2"/><text x="66.7851%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="66.5351%" y="501" width="0.1579%" height="15" fill="rgb(244,214,29)" fg:x="843" fg:w="2"/><text x="66.7851%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="66.6140%" y="485" width="0.0789%" height="15" fill="rgb(220,75,29)" fg:x="844" fg:w="1"/><text x="66.8640%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.71%)</title><rect x="66.0616%" y="645" width="0.7103%" height="15" fill="rgb(214,183,37)" fg:x="837" fg:w="9"/><text x="66.3116%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.71%)</title><rect x="66.0616%" y="629" width="0.7103%" height="15" fill="rgb(239,117,29)" fg:x="837" fg:w="9"/><text x="66.3116%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.63%)</title><rect x="66.1405%" y="613" width="0.6314%" height="15" fill="rgb(237,171,35)" fg:x="838" fg:w="8"/><text x="66.3905%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6930%" y="597" width="0.0789%" height="15" fill="rgb(229,178,53)" fg:x="845" fg:w="1"/><text x="66.9430%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.7719%" y="517" width="0.0789%" height="15" fill="rgb(210,102,19)" fg:x="846" fg:w="1"/><text x="67.0219%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.7719%" y="501" width="0.0789%" height="15" fill="rgb(235,127,22)" fg:x="846" fg:w="1"/><text x="67.0219%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.7719%" y="485" width="0.0789%" height="15" fill="rgb(244,31,31)" fg:x="846" fg:w="1"/><text x="67.0219%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.7719%" y="469" width="0.0789%" height="15" fill="rgb(231,43,21)" fg:x="846" fg:w="1"/><text x="67.0219%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.7719%" y="453" width="0.0789%" height="15" fill="rgb(217,131,35)" fg:x="846" fg:w="1"/><text x="67.0219%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.7719%" y="437" width="0.0789%" height="15" fill="rgb(221,149,4)" fg:x="846" fg:w="1"/><text x="67.0219%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.7719%" y="421" width="0.0789%" height="15" fill="rgb(232,170,28)" fg:x="846" fg:w="1"/><text x="67.0219%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="66.7719%" y="549" width="0.2368%" height="15" fill="rgb(238,56,10)" fg:x="846" fg:w="3"/><text x="67.0219%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="66.7719%" y="533" width="0.2368%" height="15" fill="rgb(235,196,14)" fg:x="846" fg:w="3"/><text x="67.0219%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="66.8508%" y="517" width="0.1579%" height="15" fill="rgb(216,45,48)" fg:x="847" fg:w="2"/><text x="67.1008%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="66.8508%" y="501" width="0.1579%" height="15" fill="rgb(238,213,17)" fg:x="847" fg:w="2"/><text x="67.1008%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.0087%" y="549" width="0.0789%" height="15" fill="rgb(212,13,2)" fg:x="849" fg:w="1"/><text x="67.2587%" y="559.50"></text></g><g><title>engine::session::Session::close (25 samples, 1.97%)</title><rect x="65.1934%" y="741" width="1.9732%" height="15" fill="rgb(240,114,20)" fg:x="826" fg:w="25"/><text x="65.4434%" y="751.50">e..</text></g><g><title>engine::session::state::State::close (25 samples, 1.97%)</title><rect x="65.1934%" y="725" width="1.9732%" height="15" fill="rgb(228,41,40)" fg:x="826" fg:w="25"/><text x="65.4434%" y="735.50">e..</text></g><g><title>engine::session::state::State::flush_entities (25 samples, 1.97%)</title><rect x="65.1934%" y="709" width="1.9732%" height="15" fill="rgb(244,132,35)" fg:x="826" fg:w="25"/><text x="65.4434%" y="719.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (23 samples, 1.82%)</title><rect x="65.3512%" y="693" width="1.8153%" height="15" fill="rgb(253,189,4)" fg:x="828" fg:w="23"/><text x="65.6012%" y="703.50">e..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (23 samples, 1.82%)</title><rect x="65.3512%" y="677" width="1.8153%" height="15" fill="rgb(224,37,19)" fg:x="828" fg:w="23"/><text x="65.6012%" y="687.50">e..</text></g><g><title>kernel::model::any_entity_changes (17 samples, 1.34%)</title><rect x="65.8248%" y="661" width="1.3418%" height="15" fill="rgb(235,223,18)" fg:x="834" fg:w="17"/><text x="66.0748%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.39%)</title><rect x="66.7719%" y="645" width="0.3946%" height="15" fill="rgb(235,163,25)" fg:x="846" fg:w="5"/><text x="67.0219%" y="655.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.39%)</title><rect x="66.7719%" y="629" width="0.3946%" height="15" fill="rgb(217,145,28)" fg:x="846" fg:w="5"/><text x="67.0219%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.39%)</title><rect x="66.7719%" y="613" width="0.3946%" height="15" fill="rgb(223,223,32)" fg:x="846" fg:w="5"/><text x="67.0219%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="66.7719%" y="597" width="0.3946%" height="15" fill="rgb(227,189,39)" fg:x="846" fg:w="5"/><text x="67.0219%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.39%)</title><rect x="66.7719%" y="581" width="0.3946%" height="15" fill="rgb(248,10,22)" fg:x="846" fg:w="5"/><text x="67.0219%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="66.7719%" y="565" width="0.3946%" height="15" fill="rgb(248,46,39)" fg:x="846" fg:w="5"/><text x="67.0219%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.0876%" y="549" width="0.0789%" height="15" fill="rgb(248,113,48)" fg:x="850" fg:w="1"/><text x="67.3376%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="67.1665%" y="581" width="0.0789%" height="15" fill="rgb(245,16,25)" fg:x="851" fg:w="1"/><text x="67.4165%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="67.1665%" y="565" width="0.0789%" height="15" fill="rgb(249,152,16)" fg:x="851" fg:w="1"/><text x="67.4165%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="67.1665%" y="549" width="0.0789%" height="15" fill="rgb(250,16,1)" fg:x="851" fg:w="1"/><text x="67.4165%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.1665%" y="533" width="0.0789%" height="15" fill="rgb(249,138,3)" fg:x="851" fg:w="1"/><text x="67.4165%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.1665%" y="517" width="0.0789%" height="15" fill="rgb(227,71,41)" fg:x="851" fg:w="1"/><text x="67.4165%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.1665%" y="501" width="0.0789%" height="15" fill="rgb(209,184,23)" fg:x="851" fg:w="1"/><text x="67.4165%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.1665%" y="485" width="0.0789%" height="15" fill="rgb(223,215,31)" fg:x="851" fg:w="1"/><text x="67.4165%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.1665%" y="469" width="0.0789%" height="15" fill="rgb(210,146,28)" fg:x="851" fg:w="1"/><text x="67.4165%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.1665%" y="453" width="0.0789%" height="15" fill="rgb(209,183,41)" fg:x="851" fg:w="1"/><text x="67.4165%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.1665%" y="437" width="0.0789%" height="15" fill="rgb(209,224,45)" fg:x="851" fg:w="1"/><text x="67.4165%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.1665%" y="421" width="0.0789%" height="15" fill="rgb(224,209,51)" fg:x="851" fg:w="1"/><text x="67.4165%" y="431.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="67.1665%" y="661" width="0.1579%" height="15" fill="rgb(223,17,39)" fg:x="851" fg:w="2"/><text x="67.4165%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="67.1665%" y="645" width="0.1579%" height="15" fill="rgb(234,204,37)" fg:x="851" fg:w="2"/><text x="67.4165%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="67.1665%" y="629" width="0.1579%" height="15" fill="rgb(236,120,5)" fg:x="851" fg:w="2"/><text x="67.4165%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="67.1665%" y="613" width="0.1579%" height="15" fill="rgb(248,97,27)" fg:x="851" fg:w="2"/><text x="67.4165%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="67.1665%" y="597" width="0.1579%" height="15" fill="rgb(240,66,17)" fg:x="851" fg:w="2"/><text x="67.4165%" y="607.50"></text></g><g><title>kernel::model::&lt;impl core::convert::From&lt;&amp;kernel::model::EntityPtr&gt; for kernel::model::entity::EntityRef&gt;::from (1 samples, 0.08%)</title><rect x="67.2455%" y="581" width="0.0789%" height="15" fill="rgb(210,79,3)" fg:x="852" fg:w="1"/><text x="67.4955%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.2455%" y="565" width="0.0789%" height="15" fill="rgb(214,176,27)" fg:x="852" fg:w="1"/><text x="67.4955%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.2455%" y="549" width="0.0789%" height="15" fill="rgb(235,185,3)" fg:x="852" fg:w="1"/><text x="67.4955%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.2455%" y="533" width="0.0789%" height="15" fill="rgb(227,24,12)" fg:x="852" fg:w="1"/><text x="67.4955%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.2455%" y="517" width="0.0789%" height="15" fill="rgb(252,169,48)" fg:x="852" fg:w="1"/><text x="67.4955%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.2455%" y="501" width="0.0789%" height="15" fill="rgb(212,65,1)" fg:x="852" fg:w="1"/><text x="67.4955%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.2455%" y="485" width="0.0789%" height="15" fill="rgb(242,39,24)" fg:x="852" fg:w="1"/><text x="67.4955%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.2455%" y="469" width="0.0789%" height="15" fill="rgb(249,32,23)" fg:x="852" fg:w="1"/><text x="67.4955%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.2455%" y="453" width="0.0789%" height="15" fill="rgb(251,195,23)" fg:x="852" fg:w="1"/><text x="67.4955%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.2455%" y="437" width="0.0789%" height="15" fill="rgb(236,174,8)" fg:x="852" fg:w="1"/><text x="67.4955%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.2455%" y="421" width="0.0789%" height="15" fill="rgb(220,197,8)" fg:x="852" fg:w="1"/><text x="67.4955%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.2455%" y="405" width="0.0789%" height="15" fill="rgb(240,108,37)" fg:x="852" fg:w="1"/><text x="67.4955%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2455%" y="389" width="0.0789%" height="15" fill="rgb(232,176,24)" fg:x="852" fg:w="1"/><text x="67.4955%" y="399.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.3244%" y="661" width="0.0789%" height="15" fill="rgb(243,35,29)" fg:x="853" fg:w="1"/><text x="67.5744%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.3244%" y="645" width="0.0789%" height="15" fill="rgb(210,37,18)" fg:x="853" fg:w="1"/><text x="67.5744%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4822%" y="437" width="0.0789%" height="15" fill="rgb(224,184,40)" fg:x="855" fg:w="1"/><text x="67.7322%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4822%" y="421" width="0.0789%" height="15" fill="rgb(236,39,29)" fg:x="855" fg:w="1"/><text x="67.7322%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4822%" y="405" width="0.0789%" height="15" fill="rgb(232,48,39)" fg:x="855" fg:w="1"/><text x="67.7322%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4822%" y="389" width="0.0789%" height="15" fill="rgb(236,34,42)" fg:x="855" fg:w="1"/><text x="67.7322%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4822%" y="373" width="0.0789%" height="15" fill="rgb(243,106,37)" fg:x="855" fg:w="1"/><text x="67.7322%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4822%" y="357" width="0.0789%" height="15" fill="rgb(218,96,6)" fg:x="855" fg:w="1"/><text x="67.7322%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4822%" y="341" width="0.0789%" height="15" fill="rgb(235,130,12)" fg:x="855" fg:w="1"/><text x="67.7322%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.4822%" y="325" width="0.0789%" height="15" fill="rgb(231,95,0)" fg:x="855" fg:w="1"/><text x="67.7322%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.4822%" y="309" width="0.0789%" height="15" fill="rgb(228,12,23)" fg:x="855" fg:w="1"/><text x="67.7322%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.4822%" y="293" width="0.0789%" height="15" fill="rgb(216,12,1)" fg:x="855" fg:w="1"/><text x="67.7322%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.4822%" y="277" width="0.0789%" height="15" fill="rgb(219,59,3)" fg:x="855" fg:w="1"/><text x="67.7322%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.4822%" y="261" width="0.0789%" height="15" fill="rgb(215,208,46)" fg:x="855" fg:w="1"/><text x="67.7322%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.4822%" y="245" width="0.0789%" height="15" fill="rgb(254,224,29)" fg:x="855" fg:w="1"/><text x="67.7322%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.4822%" y="229" width="0.0789%" height="15" fill="rgb(232,14,29)" fg:x="855" fg:w="1"/><text x="67.7322%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.4822%" y="213" width="0.0789%" height="15" fill="rgb(208,45,52)" fg:x="855" fg:w="1"/><text x="67.7322%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.4822%" y="197" width="0.0789%" height="15" fill="rgb(234,191,28)" fg:x="855" fg:w="1"/><text x="67.7322%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4822%" y="181" width="0.0789%" height="15" fill="rgb(244,67,43)" fg:x="855" fg:w="1"/><text x="67.7322%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="67.4822%" y="485" width="0.1579%" height="15" fill="rgb(236,189,24)" fg:x="855" fg:w="2"/><text x="67.7322%" y="495.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="67.4822%" y="469" width="0.1579%" height="15" fill="rgb(239,214,33)" fg:x="855" fg:w="2"/><text x="67.7322%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="67.4822%" y="453" width="0.1579%" height="15" fill="rgb(226,176,41)" fg:x="855" fg:w="2"/><text x="67.7322%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.5612%" y="437" width="0.0789%" height="15" fill="rgb(248,47,8)" fg:x="856" fg:w="1"/><text x="67.8112%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5612%" y="421" width="0.0789%" height="15" fill="rgb(218,81,44)" fg:x="856" fg:w="1"/><text x="67.8112%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.5612%" y="405" width="0.0789%" height="15" fill="rgb(213,98,6)" fg:x="856" fg:w="1"/><text x="67.8112%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5612%" y="389" width="0.0789%" height="15" fill="rgb(222,85,22)" fg:x="856" fg:w="1"/><text x="67.8112%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.5612%" y="373" width="0.0789%" height="15" fill="rgb(239,46,39)" fg:x="856" fg:w="1"/><text x="67.8112%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5612%" y="357" width="0.0789%" height="15" fill="rgb(237,12,29)" fg:x="856" fg:w="1"/><text x="67.8112%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.5612%" y="341" width="0.0789%" height="15" fill="rgb(214,77,8)" fg:x="856" fg:w="1"/><text x="67.8112%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5612%" y="325" width="0.0789%" height="15" fill="rgb(217,168,37)" fg:x="856" fg:w="1"/><text x="67.8112%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.6401%" y="389" width="0.0789%" height="15" fill="rgb(221,217,23)" fg:x="857" fg:w="1"/><text x="67.8901%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6401%" y="373" width="0.0789%" height="15" fill="rgb(243,229,36)" fg:x="857" fg:w="1"/><text x="67.8901%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6401%" y="357" width="0.0789%" height="15" fill="rgb(251,163,40)" fg:x="857" fg:w="1"/><text x="67.8901%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.6401%" y="341" width="0.0789%" height="15" fill="rgb(237,222,12)" fg:x="857" fg:w="1"/><text x="67.8901%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.6401%" y="325" width="0.0789%" height="15" fill="rgb(248,132,6)" fg:x="857" fg:w="1"/><text x="67.8901%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.6401%" y="309" width="0.0789%" height="15" fill="rgb(227,167,50)" fg:x="857" fg:w="1"/><text x="67.8901%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="67.6401%" y="293" width="0.0789%" height="15" fill="rgb(242,84,37)" fg:x="857" fg:w="1"/><text x="67.8901%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.6401%" y="277" width="0.0789%" height="15" fill="rgb(212,4,50)" fg:x="857" fg:w="1"/><text x="67.8901%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.6401%" y="437" width="0.1579%" height="15" fill="rgb(230,228,32)" fg:x="857" fg:w="2"/><text x="67.8901%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.6401%" y="421" width="0.1579%" height="15" fill="rgb(248,217,23)" fg:x="857" fg:w="2"/><text x="67.8901%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.6401%" y="405" width="0.1579%" height="15" fill="rgb(238,197,32)" fg:x="857" fg:w="2"/><text x="67.8901%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7190%" y="389" width="0.0789%" height="15" fill="rgb(236,106,1)" fg:x="858" fg:w="1"/><text x="67.9690%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7190%" y="373" width="0.0789%" height="15" fill="rgb(219,228,13)" fg:x="858" fg:w="1"/><text x="67.9690%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.7190%" y="357" width="0.0789%" height="15" fill="rgb(238,30,35)" fg:x="858" fg:w="1"/><text x="67.9690%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.7190%" y="341" width="0.0789%" height="15" fill="rgb(236,70,23)" fg:x="858" fg:w="1"/><text x="67.9690%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.7190%" y="325" width="0.0789%" height="15" fill="rgb(249,104,48)" fg:x="858" fg:w="1"/><text x="67.9690%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.7190%" y="309" width="0.0789%" height="15" fill="rgb(254,117,50)" fg:x="858" fg:w="1"/><text x="67.9690%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.7190%" y="293" width="0.0789%" height="15" fill="rgb(223,152,4)" fg:x="858" fg:w="1"/><text x="67.9690%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.7190%" y="277" width="0.0789%" height="15" fill="rgb(245,6,2)" fg:x="858" fg:w="1"/><text x="67.9690%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.7190%" y="261" width="0.0789%" height="15" fill="rgb(249,150,24)" fg:x="858" fg:w="1"/><text x="67.9690%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.7190%" y="245" width="0.0789%" height="15" fill="rgb(228,185,42)" fg:x="858" fg:w="1"/><text x="67.9690%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.7190%" y="229" width="0.0789%" height="15" fill="rgb(226,39,33)" fg:x="858" fg:w="1"/><text x="67.9690%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7190%" y="213" width="0.0789%" height="15" fill="rgb(221,166,19)" fg:x="858" fg:w="1"/><text x="67.9690%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7979%" y="437" width="0.0789%" height="15" fill="rgb(209,109,2)" fg:x="859" fg:w="1"/><text x="68.0479%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="67.6401%" y="485" width="0.3157%" height="15" fill="rgb(252,216,26)" fg:x="857" fg:w="4"/><text x="67.8901%" y="495.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="67.6401%" y="469" width="0.3157%" height="15" fill="rgb(227,173,36)" fg:x="857" fg:w="4"/><text x="67.8901%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="67.6401%" y="453" width="0.3157%" height="15" fill="rgb(209,90,7)" fg:x="857" fg:w="4"/><text x="67.8901%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.8769%" y="437" width="0.0789%" height="15" fill="rgb(250,194,11)" fg:x="860" fg:w="1"/><text x="68.1269%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8769%" y="421" width="0.0789%" height="15" fill="rgb(220,72,50)" fg:x="860" fg:w="1"/><text x="68.1269%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.8769%" y="405" width="0.0789%" height="15" fill="rgb(222,106,48)" fg:x="860" fg:w="1"/><text x="68.1269%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.9558%" y="405" width="0.0789%" height="15" fill="rgb(216,220,45)" fg:x="861" fg:w="1"/><text x="68.2058%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="68.0347%" y="405" width="0.1579%" height="15" fill="rgb(234,112,18)" fg:x="862" fg:w="2"/><text x="68.2847%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="68.0347%" y="389" width="0.1579%" height="15" fill="rgb(206,179,9)" fg:x="862" fg:w="2"/><text x="68.2847%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="68.0347%" y="373" width="0.1579%" height="15" fill="rgb(215,115,40)" fg:x="862" fg:w="2"/><text x="68.2847%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="68.0347%" y="357" width="0.1579%" height="15" fill="rgb(222,69,34)" fg:x="862" fg:w="2"/><text x="68.2847%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="68.0347%" y="341" width="0.1579%" height="15" fill="rgb(209,161,10)" fg:x="862" fg:w="2"/><text x="68.2847%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.3504%" y="325" width="0.0789%" height="15" fill="rgb(217,6,38)" fg:x="866" fg:w="1"/><text x="68.6004%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (22 samples, 1.74%)</title><rect x="68.3504%" y="341" width="1.7364%" height="15" fill="rgb(229,229,48)" fg:x="866" fg:w="22"/><text x="68.6004%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (21 samples, 1.66%)</title><rect x="68.4294%" y="325" width="1.6575%" height="15" fill="rgb(225,21,28)" fg:x="867" fg:w="21"/><text x="68.6794%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0079%" y="309" width="0.0789%" height="15" fill="rgb(206,33,13)" fg:x="887" fg:w="1"/><text x="70.2579%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="70.0868%" y="341" width="0.3157%" height="15" fill="rgb(242,178,17)" fg:x="888" fg:w="4"/><text x="70.3368%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="70.1657%" y="325" width="0.2368%" height="15" fill="rgb(220,162,5)" fg:x="889" fg:w="3"/><text x="70.4157%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="70.4025%" y="341" width="0.1579%" height="15" fill="rgb(210,33,43)" fg:x="892" fg:w="2"/><text x="70.6525%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="70.4025%" y="325" width="0.1579%" height="15" fill="rgb(216,116,54)" fg:x="892" fg:w="2"/><text x="70.6525%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="70.4025%" y="309" width="0.1579%" height="15" fill="rgb(249,92,24)" fg:x="892" fg:w="2"/><text x="70.6525%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (2 samples, 0.16%)</title><rect x="70.4025%" y="293" width="0.1579%" height="15" fill="rgb(231,189,14)" fg:x="892" fg:w="2"/><text x="70.6525%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.4815%" y="277" width="0.0789%" height="15" fill="rgb(230,8,41)" fg:x="893" fg:w="1"/><text x="70.7315%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.4815%" y="261" width="0.0789%" height="15" fill="rgb(249,7,27)" fg:x="893" fg:w="1"/><text x="70.7315%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="70.7182%" y="277" width="0.0789%" height="15" fill="rgb(232,86,5)" fg:x="896" fg:w="1"/><text x="70.9682%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="70.7972%" y="277" width="0.0789%" height="15" fill="rgb(224,175,18)" fg:x="897" fg:w="1"/><text x="71.0472%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="70.9550%" y="245" width="0.1579%" height="15" fill="rgb(220,129,12)" fg:x="899" fg:w="2"/><text x="71.2050%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="70.9550%" y="229" width="0.1579%" height="15" fill="rgb(210,19,36)" fg:x="899" fg:w="2"/><text x="71.2050%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="70.9550%" y="213" width="0.1579%" height="15" fill="rgb(219,96,14)" fg:x="899" fg:w="2"/><text x="71.2050%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="70.8761%" y="277" width="0.3157%" height="15" fill="rgb(249,106,1)" fg:x="898" fg:w="4"/><text x="71.1261%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="70.9550%" y="261" width="0.2368%" height="15" fill="rgb(249,155,20)" fg:x="899" fg:w="3"/><text x="71.2050%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="71.1129%" y="245" width="0.0789%" height="15" fill="rgb(244,168,9)" fg:x="901" fg:w="1"/><text x="71.3629%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.1918%" y="245" width="0.0789%" height="15" fill="rgb(216,23,50)" fg:x="902" fg:w="1"/><text x="71.4418%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.1918%" y="229" width="0.0789%" height="15" fill="rgb(224,219,20)" fg:x="902" fg:w="1"/><text x="71.4418%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="71.1918%" y="277" width="0.1579%" height="15" fill="rgb(222,156,15)" fg:x="902" fg:w="2"/><text x="71.4418%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="71.1918%" y="261" width="0.1579%" height="15" fill="rgb(231,97,17)" fg:x="902" fg:w="2"/><text x="71.4418%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="71.2707%" y="245" width="0.0789%" height="15" fill="rgb(218,70,48)" fg:x="903" fg:w="1"/><text x="71.5207%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="71.2707%" y="229" width="0.0789%" height="15" fill="rgb(212,196,52)" fg:x="903" fg:w="1"/><text x="71.5207%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (65 samples, 5.13%)</title><rect x="71.3496%" y="277" width="5.1302%" height="15" fill="rgb(243,203,18)" fg:x="904" fg:w="65"/><text x="71.5996%" y="287.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (65 samples, 5.13%)</title><rect x="71.3496%" y="261" width="5.1302%" height="15" fill="rgb(252,125,41)" fg:x="904" fg:w="65"/><text x="71.5996%" y="271.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (65 samples, 5.13%)</title><rect x="71.3496%" y="245" width="5.1302%" height="15" fill="rgb(223,180,33)" fg:x="904" fg:w="65"/><text x="71.5996%" y="255.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="76.4799%" y="277" width="0.1579%" height="15" fill="rgb(254,159,46)" fg:x="969" fg:w="2"/><text x="76.7299%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 6.16%)</title><rect x="70.5604%" y="325" width="6.1563%" height="15" fill="rgb(254,38,10)" fg:x="894" fg:w="78"/><text x="70.8104%" y="335.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (78 samples, 6.16%)</title><rect x="70.5604%" y="309" width="6.1563%" height="15" fill="rgb(208,217,32)" fg:x="894" fg:w="78"/><text x="70.8104%" y="319.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (78 samples, 6.16%)</title><rect x="70.5604%" y="293" width="6.1563%" height="15" fill="rgb(221,120,13)" fg:x="894" fg:w="78"/><text x="70.8104%" y="303.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="76.6377%" y="277" width="0.0789%" height="15" fill="rgb(246,54,52)" fg:x="971" fg:w="1"/><text x="76.8877%" y="287.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="76.7956%" y="309" width="0.0789%" height="15" fill="rgb(242,34,25)" fg:x="973" fg:w="1"/><text x="77.0456%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.8745%" y="309" width="0.0789%" height="15" fill="rgb(247,209,9)" fg:x="974" fg:w="1"/><text x="77.1245%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.9534%" y="309" width="0.0789%" height="15" fill="rgb(228,71,26)" fg:x="975" fg:w="1"/><text x="77.2034%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.39%)</title><rect x="77.0324%" y="309" width="0.3946%" height="15" fill="rgb(222,145,49)" fg:x="976" fg:w="5"/><text x="77.2824%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.3481%" y="293" width="0.0789%" height="15" fill="rgb(218,121,17)" fg:x="980" fg:w="1"/><text x="77.5981%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.3481%" y="277" width="0.0789%" height="15" fill="rgb(244,50,7)" fg:x="980" fg:w="1"/><text x="77.5981%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.79%)</title><rect x="76.7167%" y="325" width="0.7893%" height="15" fill="rgb(246,229,37)" fg:x="972" fg:w="10"/><text x="76.9667%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="77.4270%" y="309" width="0.0789%" height="15" fill="rgb(225,18,5)" fg:x="981" fg:w="1"/><text x="77.6770%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="77.5059%" y="325" width="0.0789%" height="15" fill="rgb(213,204,8)" fg:x="982" fg:w="1"/><text x="77.7559%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (90 samples, 7.10%)</title><rect x="70.5604%" y="341" width="7.1034%" height="15" fill="rgb(238,103,6)" fg:x="894" fg:w="90"/><text x="70.8104%" y="351.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="77.5848%" y="325" width="0.0789%" height="15" fill="rgb(222,25,35)" fg:x="983" fg:w="1"/><text x="77.8348%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="77.5848%" y="309" width="0.0789%" height="15" fill="rgb(213,203,35)" fg:x="983" fg:w="1"/><text x="77.8348%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (121 samples, 9.55%)</title><rect x="68.1926%" y="357" width="9.5501%" height="15" fill="rgb(221,79,53)" fg:x="864" fg:w="121"/><text x="68.4426%" y="367.50">regex_automata..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="77.6638%" y="341" width="0.0789%" height="15" fill="rgb(243,200,35)" fg:x="984" fg:w="1"/><text x="77.9138%" y="351.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="77.6638%" y="325" width="0.0789%" height="15" fill="rgb(248,60,25)" fg:x="984" fg:w="1"/><text x="77.9138%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="77.8216%" y="309" width="0.0789%" height="15" fill="rgb(227,53,46)" fg:x="986" fg:w="1"/><text x="78.0716%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="77.8216%" y="293" width="0.0789%" height="15" fill="rgb(216,120,32)" fg:x="986" fg:w="1"/><text x="78.0716%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="77.8216%" y="277" width="0.0789%" height="15" fill="rgb(220,134,1)" fg:x="986" fg:w="1"/><text x="78.0716%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="77.7427%" y="357" width="0.2368%" height="15" fill="rgb(237,168,5)" fg:x="985" fg:w="3"/><text x="77.9927%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="77.7427%" y="341" width="0.2368%" height="15" fill="rgb(231,100,33)" fg:x="985" fg:w="3"/><text x="77.9927%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="77.8216%" y="325" width="0.1579%" height="15" fill="rgb(236,177,47)" fg:x="986" fg:w="2"/><text x="78.0716%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="77.9006%" y="309" width="0.0789%" height="15" fill="rgb(235,7,49)" fg:x="987" fg:w="1"/><text x="78.1506%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (125 samples, 9.87%)</title><rect x="68.1926%" y="405" width="9.8658%" height="15" fill="rgb(232,119,22)" fg:x="864" fg:w="125"/><text x="68.4426%" y="415.50">&lt;regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (125 samples, 9.87%)</title><rect x="68.1926%" y="389" width="9.8658%" height="15" fill="rgb(254,73,53)" fg:x="864" fg:w="125"/><text x="68.4426%" y="399.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (125 samples, 9.87%)</title><rect x="68.1926%" y="373" width="9.8658%" height="15" fill="rgb(251,35,20)" fg:x="864" fg:w="125"/><text x="68.4426%" y="383.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="77.9795%" y="357" width="0.0789%" height="15" fill="rgb(241,119,20)" fg:x="988" fg:w="1"/><text x="78.2295%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="77.9795%" y="341" width="0.0789%" height="15" fill="rgb(207,102,14)" fg:x="988" fg:w="1"/><text x="78.2295%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="78.0584%" y="373" width="0.0789%" height="15" fill="rgb(248,201,50)" fg:x="989" fg:w="1"/><text x="78.3084%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="78.0584%" y="357" width="0.0789%" height="15" fill="rgb(222,185,44)" fg:x="989" fg:w="1"/><text x="78.3084%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="78.0584%" y="341" width="0.0789%" height="15" fill="rgb(218,107,18)" fg:x="989" fg:w="1"/><text x="78.3084%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="78.0584%" y="405" width="0.2368%" height="15" fill="rgb(237,177,39)" fg:x="989" fg:w="3"/><text x="78.3084%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="78.0584%" y="389" width="0.2368%" height="15" fill="rgb(246,69,6)" fg:x="989" fg:w="3"/><text x="78.3084%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="78.1373%" y="373" width="0.1579%" height="15" fill="rgb(234,208,37)" fg:x="990" fg:w="2"/><text x="78.3873%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="78.1373%" y="357" width="0.1579%" height="15" fill="rgb(225,4,6)" fg:x="990" fg:w="2"/><text x="78.3873%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.1373%" y="341" width="0.1579%" height="15" fill="rgb(233,45,0)" fg:x="990" fg:w="2"/><text x="78.3873%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.2163%" y="325" width="0.0789%" height="15" fill="rgb(226,136,5)" fg:x="991" fg:w="1"/><text x="78.4663%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.5320%" y="325" width="0.0789%" height="15" fill="rgb(211,91,47)" fg:x="995" fg:w="1"/><text x="78.7820%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.5320%" y="309" width="0.0789%" height="15" fill="rgb(242,88,51)" fg:x="995" fg:w="1"/><text x="78.7820%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5320%" y="293" width="0.0789%" height="15" fill="rgb(230,91,28)" fg:x="995" fg:w="1"/><text x="78.7820%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.39%)</title><rect x="78.3741%" y="341" width="0.3946%" height="15" fill="rgb(254,186,29)" fg:x="993" fg:w="5"/><text x="78.6241%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="78.6109%" y="325" width="0.1579%" height="15" fill="rgb(238,6,4)" fg:x="996" fg:w="2"/><text x="78.8609%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="78.6109%" y="309" width="0.1579%" height="15" fill="rgb(221,151,16)" fg:x="996" fg:w="2"/><text x="78.8609%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="78.6898%" y="293" width="0.0789%" height="15" fill="rgb(251,143,52)" fg:x="997" fg:w="1"/><text x="78.9398%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (138 samples, 10.89%)</title><rect x="67.9558%" y="421" width="10.8919%" height="15" fill="rgb(206,90,15)" fg:x="861" fg:w="138"/><text x="68.2058%" y="431.50">indefinite::help..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.55%)</title><rect x="78.2952%" y="405" width="0.5525%" height="15" fill="rgb(218,35,8)" fg:x="992" fg:w="7"/><text x="78.5452%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.55%)</title><rect x="78.2952%" y="389" width="0.5525%" height="15" fill="rgb(239,215,6)" fg:x="992" fg:w="7"/><text x="78.5452%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.55%)</title><rect x="78.2952%" y="373" width="0.5525%" height="15" fill="rgb(245,116,39)" fg:x="992" fg:w="7"/><text x="78.5452%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.47%)</title><rect x="78.3741%" y="357" width="0.4736%" height="15" fill="rgb(242,65,28)" fg:x="993" fg:w="6"/><text x="78.6241%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="78.7687%" y="341" width="0.0789%" height="15" fill="rgb(252,132,53)" fg:x="998" fg:w="1"/><text x="79.0187%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.7687%" y="325" width="0.0789%" height="15" fill="rgb(224,159,50)" fg:x="998" fg:w="1"/><text x="79.0187%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.7687%" y="309" width="0.0789%" height="15" fill="rgb(224,93,4)" fg:x="998" fg:w="1"/><text x="79.0187%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7687%" y="293" width="0.0789%" height="15" fill="rgb(208,81,34)" fg:x="998" fg:w="1"/><text x="79.0187%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="78.9266%" y="357" width="0.0789%" height="15" fill="rgb(233,92,54)" fg:x="1000" fg:w="1"/><text x="79.1766%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.9266%" y="341" width="0.0789%" height="15" fill="rgb(237,21,14)" fg:x="1000" fg:w="1"/><text x="79.1766%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="78.9266%" y="325" width="0.0789%" height="15" fill="rgb(249,128,51)" fg:x="1000" fg:w="1"/><text x="79.1766%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.1634%" y="325" width="0.0789%" height="15" fill="rgb(223,129,24)" fg:x="1003" fg:w="1"/><text x="79.4134%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (25 samples, 1.97%)</title><rect x="79.0055%" y="341" width="1.9732%" height="15" fill="rgb(231,168,25)" fg:x="1001" fg:w="25"/><text x="79.2555%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (22 samples, 1.74%)</title><rect x="79.2423%" y="325" width="1.7364%" height="15" fill="rgb(224,39,20)" fg:x="1004" fg:w="22"/><text x="79.4923%" y="335.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="80.6630%" y="309" width="0.3157%" height="15" fill="rgb(225,152,53)" fg:x="1022" fg:w="4"/><text x="80.9130%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="80.9787%" y="341" width="0.0789%" height="15" fill="rgb(252,17,24)" fg:x="1026" fg:w="1"/><text x="81.2287%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="81.0576%" y="325" width="0.2368%" height="15" fill="rgb(250,114,30)" fg:x="1027" fg:w="3"/><text x="81.3076%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="81.0576%" y="341" width="0.3157%" height="15" fill="rgb(229,5,4)" fg:x="1027" fg:w="4"/><text x="81.3076%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="81.2944%" y="325" width="0.0789%" height="15" fill="rgb(225,176,49)" fg:x="1030" fg:w="1"/><text x="81.5444%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.5312%" y="309" width="0.0789%" height="15" fill="rgb(224,221,49)" fg:x="1033" fg:w="1"/><text x="81.7812%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.5312%" y="293" width="0.0789%" height="15" fill="rgb(253,169,27)" fg:x="1033" fg:w="1"/><text x="81.7812%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5312%" y="277" width="0.0789%" height="15" fill="rgb(211,206,16)" fg:x="1033" fg:w="1"/><text x="81.7812%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSet&gt; (1 samples, 0.08%)</title><rect x="81.6101%" y="309" width="0.0789%" height="15" fill="rgb(244,87,35)" fg:x="1034" fg:w="1"/><text x="81.8601%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.7680%" y="277" width="0.0789%" height="15" fill="rgb(246,28,10)" fg:x="1036" fg:w="1"/><text x="82.0180%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="81.6890%" y="309" width="0.2368%" height="15" fill="rgb(229,12,44)" fg:x="1035" fg:w="3"/><text x="81.9390%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="81.7680%" y="293" width="0.1579%" height="15" fill="rgb(210,145,37)" fg:x="1036" fg:w="2"/><text x="82.0180%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.8469%" y="277" width="0.0789%" height="15" fill="rgb(227,112,52)" fg:x="1037" fg:w="1"/><text x="82.0969%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.8469%" y="261" width="0.0789%" height="15" fill="rgb(238,155,34)" fg:x="1037" fg:w="1"/><text x="82.0969%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.8469%" y="245" width="0.0789%" height="15" fill="rgb(239,226,36)" fg:x="1037" fg:w="1"/><text x="82.0969%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.47%)</title><rect x="81.9258%" y="293" width="0.4736%" height="15" fill="rgb(230,16,23)" fg:x="1038" fg:w="6"/><text x="82.1758%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.47%)</title><rect x="81.9258%" y="277" width="0.4736%" height="15" fill="rgb(236,171,36)" fg:x="1038" fg:w="6"/><text x="82.1758%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (14 samples, 1.10%)</title><rect x="81.3733%" y="341" width="1.1050%" height="15" fill="rgb(221,22,14)" fg:x="1031" fg:w="14"/><text x="81.6233%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (14 samples, 1.10%)</title><rect x="81.3733%" y="325" width="1.1050%" height="15" fill="rgb(242,43,11)" fg:x="1031" fg:w="14"/><text x="81.6233%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (7 samples, 0.55%)</title><rect x="81.9258%" y="309" width="0.5525%" height="15" fill="rgb(232,69,23)" fg:x="1038" fg:w="7"/><text x="82.1758%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="82.3994%" y="293" width="0.0789%" height="15" fill="rgb(216,180,54)" fg:x="1044" fg:w="1"/><text x="82.6494%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="82.4783%" y="325" width="0.0789%" height="15" fill="rgb(216,5,24)" fg:x="1045" fg:w="1"/><text x="82.7283%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="82.4783%" y="309" width="0.0789%" height="15" fill="rgb(225,89,9)" fg:x="1045" fg:w="1"/><text x="82.7283%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (3 samples, 0.24%)</title><rect x="82.4783%" y="341" width="0.2368%" height="15" fill="rgb(243,75,33)" fg:x="1045" fg:w="3"/><text x="82.7283%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="82.5572%" y="325" width="0.1579%" height="15" fill="rgb(247,141,45)" fg:x="1046" fg:w="2"/><text x="82.8072%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="82.5572%" y="309" width="0.1579%" height="15" fill="rgb(232,177,36)" fg:x="1046" fg:w="2"/><text x="82.8072%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="82.6361%" y="293" width="0.0789%" height="15" fill="rgb(219,125,36)" fg:x="1047" fg:w="1"/><text x="82.8861%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.6361%" y="277" width="0.0789%" height="15" fill="rgb(227,94,9)" fg:x="1047" fg:w="1"/><text x="82.8861%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.6361%" y="261" width="0.0789%" height="15" fill="rgb(240,34,52)" fg:x="1047" fg:w="1"/><text x="82.8861%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.6361%" y="245" width="0.0789%" height="15" fill="rgb(216,45,12)" fg:x="1047" fg:w="1"/><text x="82.8861%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="82.7940%" y="309" width="0.0789%" height="15" fill="rgb(246,21,19)" fg:x="1049" fg:w="1"/><text x="83.0440%" y="319.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="83.3465%" y="229" width="0.3157%" height="15" fill="rgb(213,98,42)" fg:x="1056" fg:w="4"/><text x="83.5965%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="83.6622%" y="229" width="0.1579%" height="15" fill="rgb(250,136,47)" fg:x="1060" fg:w="2"/><text x="83.9122%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="83.8200%" y="229" width="0.0789%" height="15" fill="rgb(251,124,27)" fg:x="1062" fg:w="1"/><text x="84.0700%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="83.8990%" y="229" width="0.0789%" height="15" fill="rgb(229,180,14)" fg:x="1063" fg:w="1"/><text x="84.1490%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="84.4515%" y="197" width="0.1579%" height="15" fill="rgb(245,216,25)" fg:x="1070" fg:w="2"/><text x="84.7015%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.5304%" y="181" width="0.0789%" height="15" fill="rgb(251,43,5)" fg:x="1071" fg:w="1"/><text x="84.7804%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.5304%" y="165" width="0.0789%" height="15" fill="rgb(250,128,24)" fg:x="1071" fg:w="1"/><text x="84.7804%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (13 samples, 1.03%)</title><rect x="83.9779%" y="229" width="1.0260%" height="15" fill="rgb(217,117,27)" fg:x="1064" fg:w="13"/><text x="84.2279%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (10 samples, 0.79%)</title><rect x="84.2147%" y="213" width="0.7893%" height="15" fill="rgb(245,147,4)" fg:x="1067" fg:w="10"/><text x="84.4647%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.39%)</title><rect x="84.6093%" y="197" width="0.3946%" height="15" fill="rgb(242,201,35)" fg:x="1072" fg:w="5"/><text x="84.8593%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="84.9250%" y="181" width="0.0789%" height="15" fill="rgb(218,181,1)" fg:x="1076" fg:w="1"/><text x="85.1750%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.9250%" y="165" width="0.0789%" height="15" fill="rgb(222,6,29)" fg:x="1076" fg:w="1"/><text x="85.1750%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.9250%" y="149" width="0.0789%" height="15" fill="rgb(208,186,3)" fg:x="1076" fg:w="1"/><text x="85.1750%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.9250%" y="133" width="0.0789%" height="15" fill="rgb(216,36,26)" fg:x="1076" fg:w="1"/><text x="85.1750%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (78 samples, 6.16%)</title><rect x="85.0039%" y="229" width="6.1563%" height="15" fill="rgb(248,201,23)" fg:x="1077" fg:w="78"/><text x="85.2539%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (78 samples, 6.16%)</title><rect x="85.0039%" y="213" width="6.1563%" height="15" fill="rgb(251,170,31)" fg:x="1077" fg:w="78"/><text x="85.2539%" y="223.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (78 samples, 6.16%)</title><rect x="85.0039%" y="197" width="6.1563%" height="15" fill="rgb(207,110,25)" fg:x="1077" fg:w="78"/><text x="85.2539%" y="207.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="91.1602%" y="229" width="0.3157%" height="15" fill="rgb(250,54,15)" fg:x="1155" fg:w="4"/><text x="91.4102%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.3970%" y="213" width="0.0789%" height="15" fill="rgb(227,68,33)" fg:x="1158" fg:w="1"/><text x="91.6470%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (111 samples, 8.76%)</title><rect x="82.7940%" y="325" width="8.7609%" height="15" fill="rgb(238,34,41)" fg:x="1049" fg:w="111"/><text x="83.0440%" y="335.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (110 samples, 8.68%)</title><rect x="82.8729%" y="309" width="8.6819%" height="15" fill="rgb(220,11,15)" fg:x="1050" fg:w="110"/><text x="83.1229%" y="319.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (110 samples, 8.68%)</title><rect x="82.8729%" y="293" width="8.6819%" height="15" fill="rgb(246,111,35)" fg:x="1050" fg:w="110"/><text x="83.1229%" y="303.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (110 samples, 8.68%)</title><rect x="82.8729%" y="277" width="8.6819%" height="15" fill="rgb(209,88,53)" fg:x="1050" fg:w="110"/><text x="83.1229%" y="287.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (110 samples, 8.68%)</title><rect x="82.8729%" y="261" width="8.6819%" height="15" fill="rgb(231,185,47)" fg:x="1050" fg:w="110"/><text x="83.1229%" y="271.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (110 samples, 8.68%)</title><rect x="82.8729%" y="245" width="8.6819%" height="15" fill="rgb(233,154,1)" fg:x="1050" fg:w="110"/><text x="83.1229%" y="255.50">regex_automa..</text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="91.4759%" y="229" width="0.0789%" height="15" fill="rgb(225,15,46)" fg:x="1159" fg:w="1"/><text x="91.7259%" y="239.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="91.7916%" y="309" width="0.1579%" height="15" fill="rgb(211,135,41)" fg:x="1163" fg:w="2"/><text x="92.0416%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.9495%" y="309" width="0.0789%" height="15" fill="rgb(208,54,0)" fg:x="1165" fg:w="1"/><text x="92.1995%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.9495%" y="293" width="0.0789%" height="15" fill="rgb(244,136,14)" fg:x="1165" fg:w="1"/><text x="92.1995%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.63%)</title><rect x="92.0284%" y="309" width="0.6314%" height="15" fill="rgb(241,56,14)" fg:x="1166" fg:w="8"/><text x="92.2784%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.39%)</title><rect x="92.2652%" y="293" width="0.3946%" height="15" fill="rgb(205,80,24)" fg:x="1169" fg:w="5"/><text x="92.5152%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="92.3441%" y="277" width="0.3157%" height="15" fill="rgb(220,57,4)" fg:x="1170" fg:w="4"/><text x="92.5941%" y="287.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="92.3441%" y="261" width="0.3157%" height="15" fill="rgb(226,193,50)" fg:x="1170" fg:w="4"/><text x="92.5941%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.39%)</title><rect x="92.6598%" y="309" width="0.3946%" height="15" fill="rgb(231,168,22)" fg:x="1174" fg:w="5"/><text x="92.9098%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.9755%" y="293" width="0.0789%" height="15" fill="rgb(254,215,14)" fg:x="1178" fg:w="1"/><text x="93.2255%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.9755%" y="277" width="0.0789%" height="15" fill="rgb(211,115,16)" fg:x="1178" fg:w="1"/><text x="93.2255%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.9755%" y="261" width="0.0789%" height="15" fill="rgb(236,210,16)" fg:x="1178" fg:w="1"/><text x="93.2255%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="93.0545%" y="309" width="0.1579%" height="15" fill="rgb(221,94,12)" fg:x="1179" fg:w="2"/><text x="93.3045%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (181 samples, 14.29%)</title><rect x="79.0055%" y="357" width="14.2857%" height="15" fill="rgb(235,218,49)" fg:x="1001" fg:w="181"/><text x="79.2555%" y="367.50">regex_automata::meta::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (134 samples, 10.58%)</title><rect x="82.7151%" y="341" width="10.5762%" height="15" fill="rgb(217,114,14)" fg:x="1048" fg:w="134"/><text x="82.9651%" y="351.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (22 samples, 1.74%)</title><rect x="91.5549%" y="325" width="1.7364%" height="15" fill="rgb(216,145,22)" fg:x="1160" fg:w="22"/><text x="91.8049%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="93.2123%" y="309" width="0.0789%" height="15" fill="rgb(217,112,39)" fg:x="1181" fg:w="1"/><text x="93.4623%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="93.4491%" y="325" width="0.0789%" height="15" fill="rgb(225,85,32)" fg:x="1184" fg:w="1"/><text x="93.6991%" y="335.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="93.5280%" y="309" width="0.0789%" height="15" fill="rgb(245,209,47)" fg:x="1185" fg:w="1"/><text x="93.7780%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="93.5280%" y="325" width="0.1579%" height="15" fill="rgb(218,220,15)" fg:x="1185" fg:w="2"/><text x="93.7780%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="93.6069%" y="309" width="0.0789%" height="15" fill="rgb(222,202,31)" fg:x="1186" fg:w="1"/><text x="93.8569%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.6069%" y="293" width="0.0789%" height="15" fill="rgb(243,203,4)" fg:x="1186" fg:w="1"/><text x="93.8569%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.6069%" y="277" width="0.0789%" height="15" fill="rgb(237,92,17)" fg:x="1186" fg:w="1"/><text x="93.8569%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.6069%" y="261" width="0.0789%" height="15" fill="rgb(231,119,7)" fg:x="1186" fg:w="1"/><text x="93.8569%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.47%)</title><rect x="93.2912%" y="357" width="0.4736%" height="15" fill="rgb(237,82,41)" fg:x="1182" fg:w="6"/><text x="93.5412%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.39%)</title><rect x="93.3702%" y="341" width="0.3946%" height="15" fill="rgb(226,81,48)" fg:x="1183" fg:w="5"/><text x="93.6202%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="93.6859%" y="325" width="0.0789%" height="15" fill="rgb(234,70,51)" fg:x="1187" fg:w="1"/><text x="93.9359%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="93.6859%" y="309" width="0.0789%" height="15" fill="rgb(251,86,4)" fg:x="1187" fg:w="1"/><text x="93.9359%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="93.7648%" y="325" width="0.1579%" height="15" fill="rgb(244,144,28)" fg:x="1188" fg:w="2"/><text x="94.0148%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.8437%" y="309" width="0.0789%" height="15" fill="rgb(232,161,39)" fg:x="1189" fg:w="1"/><text x="94.0937%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.8437%" y="293" width="0.0789%" height="15" fill="rgb(247,34,51)" fg:x="1189" fg:w="1"/><text x="94.0937%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.8437%" y="277" width="0.0789%" height="15" fill="rgb(225,132,2)" fg:x="1189" fg:w="1"/><text x="94.0937%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (191 samples, 15.07%)</title><rect x="78.9266%" y="405" width="15.0750%" height="15" fill="rgb(209,159,44)" fg:x="1000" fg:w="191"/><text x="79.1766%" y="415.50">&lt;regex::regex::string::..</text></g><g><title>regex::builders::Builder::build_one_string (191 samples, 15.07%)</title><rect x="78.9266%" y="389" width="15.0750%" height="15" fill="rgb(251,214,1)" fg:x="1000" fg:w="191"/><text x="79.1766%" y="399.50">regex::builders::Builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (191 samples, 15.07%)</title><rect x="78.9266%" y="373" width="15.0750%" height="15" fill="rgb(247,84,47)" fg:x="1000" fg:w="191"/><text x="79.1766%" y="383.50">regex_automata::meta::r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="93.7648%" y="357" width="0.2368%" height="15" fill="rgb(240,111,43)" fg:x="1188" fg:w="3"/><text x="94.0148%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="93.7648%" y="341" width="0.2368%" height="15" fill="rgb(215,214,35)" fg:x="1188" fg:w="3"/><text x="94.0148%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="93.9227%" y="325" width="0.0789%" height="15" fill="rgb(248,207,23)" fg:x="1190" fg:w="1"/><text x="94.1727%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="93.9227%" y="309" width="0.0789%" height="15" fill="rgb(214,186,4)" fg:x="1190" fg:w="1"/><text x="94.1727%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.9227%" y="293" width="0.0789%" height="15" fill="rgb(220,133,22)" fg:x="1190" fg:w="1"/><text x="94.1727%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.9227%" y="277" width="0.0789%" height="15" fill="rgb(239,134,19)" fg:x="1190" fg:w="1"/><text x="94.1727%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.9227%" y="261" width="0.0789%" height="15" fill="rgb(250,140,9)" fg:x="1190" fg:w="1"/><text x="94.1727%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="94.0805%" y="357" width="0.0789%" height="15" fill="rgb(225,59,14)" fg:x="1192" fg:w="1"/><text x="94.3305%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="94.0016%" y="373" width="0.2368%" height="15" fill="rgb(214,152,51)" fg:x="1191" fg:w="3"/><text x="94.2516%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="94.1594%" y="357" width="0.0789%" height="15" fill="rgb(251,227,43)" fg:x="1193" fg:w="1"/><text x="94.4094%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.1594%" y="341" width="0.0789%" height="15" fill="rgb(241,96,17)" fg:x="1193" fg:w="1"/><text x="94.4094%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.1594%" y="325" width="0.0789%" height="15" fill="rgb(234,198,43)" fg:x="1193" fg:w="1"/><text x="94.4094%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="94.0016%" y="405" width="0.3157%" height="15" fill="rgb(220,108,29)" fg:x="1191" fg:w="4"/><text x="94.2516%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="94.0016%" y="389" width="0.3157%" height="15" fill="rgb(226,163,33)" fg:x="1191" fg:w="4"/><text x="94.2516%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="94.2384%" y="373" width="0.0789%" height="15" fill="rgb(205,194,45)" fg:x="1194" fg:w="1"/><text x="94.4884%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="94.2384%" y="357" width="0.0789%" height="15" fill="rgb(206,143,44)" fg:x="1194" fg:w="1"/><text x="94.4884%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="94.3173%" y="389" width="0.1579%" height="15" fill="rgb(236,136,36)" fg:x="1195" fg:w="2"/><text x="94.5673%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="94.3173%" y="373" width="0.1579%" height="15" fill="rgb(249,172,42)" fg:x="1195" fg:w="2"/><text x="94.5673%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="94.3173%" y="357" width="0.1579%" height="15" fill="rgb(216,139,23)" fg:x="1195" fg:w="2"/><text x="94.5673%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="94.3173%" y="341" width="0.1579%" height="15" fill="rgb(207,166,20)" fg:x="1195" fg:w="2"/><text x="94.5673%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="94.8698%" y="309" width="0.1579%" height="15" fill="rgb(210,209,22)" fg:x="1202" fg:w="2"/><text x="95.1198%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.8698%" y="293" width="0.1579%" height="15" fill="rgb(232,118,20)" fg:x="1202" fg:w="2"/><text x="95.1198%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="94.8698%" y="277" width="0.1579%" height="15" fill="rgb(238,113,42)" fg:x="1202" fg:w="2"/><text x="95.1198%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="95.0276%" y="309" width="0.1579%" height="15" fill="rgb(231,42,5)" fg:x="1204" fg:w="2"/><text x="95.2776%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="95.0276%" y="293" width="0.1579%" height="15" fill="rgb(243,166,24)" fg:x="1204" fg:w="2"/><text x="95.2776%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="95.0276%" y="277" width="0.1579%" height="15" fill="rgb(237,226,12)" fg:x="1204" fg:w="2"/><text x="95.2776%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.79%)</title><rect x="94.5541%" y="341" width="0.7893%" height="15" fill="rgb(229,133,24)" fg:x="1198" fg:w="10"/><text x="94.8041%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.79%)</title><rect x="94.5541%" y="325" width="0.7893%" height="15" fill="rgb(238,33,43)" fg:x="1198" fg:w="10"/><text x="94.8041%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="95.1855%" y="309" width="0.1579%" height="15" fill="rgb(227,59,38)" fg:x="1206" fg:w="2"/><text x="95.4355%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (210 samples, 16.57%)</title><rect x="78.8477%" y="421" width="16.5746%" height="15" fill="rgb(230,97,0)" fg:x="999" fg:w="210"/><text x="79.0977%" y="431.50">indefinite::rules::number:..</text></g><g><title>regex::regex::string::Regex::is_match_at (14 samples, 1.10%)</title><rect x="94.3173%" y="405" width="1.1050%" height="15" fill="rgb(250,173,50)" fg:x="1195" fg:w="14"/><text x="94.5673%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.95%)</title><rect x="94.4751%" y="389" width="0.9471%" height="15" fill="rgb(240,15,50)" fg:x="1197" fg:w="12"/><text x="94.7251%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.95%)</title><rect x="94.4751%" y="373" width="0.9471%" height="15" fill="rgb(221,93,22)" fg:x="1197" fg:w="12"/><text x="94.7251%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.95%)</title><rect x="94.4751%" y="357" width="0.9471%" height="15" fill="rgb(245,180,53)" fg:x="1197" fg:w="12"/><text x="94.7251%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="95.3433%" y="341" width="0.0789%" height="15" fill="rgb(231,88,51)" fg:x="1208" fg:w="1"/><text x="95.5933%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="95.3433%" y="325" width="0.0789%" height="15" fill="rgb(240,58,21)" fg:x="1208" fg:w="1"/><text x="95.5933%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.3433%" y="309" width="0.0789%" height="15" fill="rgb(237,21,10)" fg:x="1208" fg:w="1"/><text x="95.5933%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3433%" y="293" width="0.0789%" height="15" fill="rgb(218,43,11)" fg:x="1208" fg:w="1"/><text x="95.5933%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3433%" y="277" width="0.0789%" height="15" fill="rgb(218,221,29)" fg:x="1208" fg:w="1"/><text x="95.5933%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.4223%" y="405" width="0.0789%" height="15" fill="rgb(214,118,42)" fg:x="1209" fg:w="1"/><text x="95.6723%" y="415.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="95.5012%" y="373" width="0.0789%" height="15" fill="rgb(251,200,26)" fg:x="1210" fg:w="1"/><text x="95.7512%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.5801%" y="341" width="0.0789%" height="15" fill="rgb(237,101,39)" fg:x="1211" fg:w="1"/><text x="95.8301%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.6590%" y="309" width="0.0789%" height="15" fill="rgb(251,117,11)" fg:x="1212" fg:w="1"/><text x="95.9090%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.6590%" y="293" width="0.0789%" height="15" fill="rgb(216,223,23)" fg:x="1212" fg:w="1"/><text x="95.9090%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="95.7380%" y="309" width="0.0789%" height="15" fill="rgb(251,54,12)" fg:x="1213" fg:w="1"/><text x="95.9880%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.7380%" y="293" width="0.0789%" height="15" fill="rgb(254,176,54)" fg:x="1213" fg:w="1"/><text x="95.9880%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="95.6590%" y="341" width="0.2368%" height="15" fill="rgb(210,32,8)" fg:x="1212" fg:w="3"/><text x="95.9090%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="95.6590%" y="325" width="0.2368%" height="15" fill="rgb(235,52,38)" fg:x="1212" fg:w="3"/><text x="95.9090%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="95.8169%" y="309" width="0.0789%" height="15" fill="rgb(231,4,44)" fg:x="1214" fg:w="1"/><text x="96.0669%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.8169%" y="293" width="0.0789%" height="15" fill="rgb(249,2,32)" fg:x="1214" fg:w="1"/><text x="96.0669%" y="303.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="95.8958%" y="341" width="0.0789%" height="15" fill="rgb(224,65,26)" fg:x="1215" fg:w="1"/><text x="96.1458%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.8958%" y="325" width="0.0789%" height="15" fill="rgb(250,73,40)" fg:x="1215" fg:w="1"/><text x="96.1458%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.0537%" y="325" width="0.0789%" height="15" fill="rgb(253,177,16)" fg:x="1217" fg:w="1"/><text x="96.3037%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="96.1326%" y="325" width="0.3157%" height="15" fill="rgb(217,32,34)" fg:x="1218" fg:w="4"/><text x="96.3826%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="96.1326%" y="309" width="0.3157%" height="15" fill="rgb(212,7,10)" fg:x="1218" fg:w="4"/><text x="96.3826%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="96.4483%" y="325" width="0.1579%" height="15" fill="rgb(245,89,8)" fg:x="1222" fg:w="2"/><text x="96.6983%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.5272%" y="309" width="0.0789%" height="15" fill="rgb(237,16,53)" fg:x="1223" fg:w="1"/><text x="96.7772%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="96.5272%" y="293" width="0.0789%" height="15" fill="rgb(250,204,30)" fg:x="1223" fg:w="1"/><text x="96.7772%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.5272%" y="277" width="0.0789%" height="15" fill="rgb(208,77,27)" fg:x="1223" fg:w="1"/><text x="96.7772%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="96.6062%" y="309" width="0.0789%" height="15" fill="rgb(250,204,28)" fg:x="1224" fg:w="1"/><text x="96.8562%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="96.6062%" y="293" width="0.0789%" height="15" fill="rgb(244,63,21)" fg:x="1224" fg:w="1"/><text x="96.8562%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.6062%" y="277" width="0.0789%" height="15" fill="rgb(236,85,44)" fg:x="1224" fg:w="1"/><text x="96.8562%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.6062%" y="261" width="0.0789%" height="15" fill="rgb(215,98,4)" fg:x="1224" fg:w="1"/><text x="96.8562%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (13 samples, 1.03%)</title><rect x="95.9747%" y="341" width="1.0260%" height="15" fill="rgb(235,38,11)" fg:x="1216" fg:w="13"/><text x="96.2247%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.39%)</title><rect x="96.6062%" y="325" width="0.3946%" height="15" fill="rgb(254,186,25)" fg:x="1224" fg:w="5"/><text x="96.8562%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="96.6851%" y="309" width="0.3157%" height="15" fill="rgb(225,55,31)" fg:x="1225" fg:w="4"/><text x="96.9351%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="96.7640%" y="293" width="0.2368%" height="15" fill="rgb(211,15,21)" fg:x="1226" fg:w="3"/><text x="97.0140%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="97.0797%" y="293" width="0.1579%" height="15" fill="rgb(215,187,41)" fg:x="1230" fg:w="2"/><text x="97.3297%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1586%" y="277" width="0.0789%" height="15" fill="rgb(248,69,32)" fg:x="1231" fg:w="1"/><text x="97.4086%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1586%" y="261" width="0.0789%" height="15" fill="rgb(252,102,52)" fg:x="1231" fg:w="1"/><text x="97.4086%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.1586%" y="245" width="0.0789%" height="15" fill="rgb(253,140,32)" fg:x="1231" fg:w="1"/><text x="97.4086%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="97.2376%" y="293" width="0.1579%" height="15" fill="rgb(216,56,42)" fg:x="1232" fg:w="2"/><text x="97.4876%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.47%)</title><rect x="97.0008%" y="341" width="0.4736%" height="15" fill="rgb(216,184,14)" fg:x="1229" fg:w="6"/><text x="97.2508%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.47%)</title><rect x="97.0008%" y="325" width="0.4736%" height="15" fill="rgb(237,187,27)" fg:x="1229" fg:w="6"/><text x="97.2508%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.47%)</title><rect x="97.0008%" y="309" width="0.4736%" height="15" fill="rgb(219,65,3)" fg:x="1229" fg:w="6"/><text x="97.2508%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="97.3954%" y="293" width="0.0789%" height="15" fill="rgb(245,83,25)" fg:x="1234" fg:w="1"/><text x="97.6454%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.3954%" y="277" width="0.0789%" height="15" fill="rgb(214,205,45)" fg:x="1234" fg:w="1"/><text x="97.6454%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.3954%" y="261" width="0.0789%" height="15" fill="rgb(241,20,18)" fg:x="1234" fg:w="1"/><text x="97.6454%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3954%" y="245" width="0.0789%" height="15" fill="rgb(232,163,23)" fg:x="1234" fg:w="1"/><text x="97.6454%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.4743%" y="293" width="0.0789%" height="15" fill="rgb(214,5,46)" fg:x="1235" fg:w="1"/><text x="97.7243%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.4743%" y="277" width="0.0789%" height="15" fill="rgb(229,78,17)" fg:x="1235" fg:w="1"/><text x="97.7243%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.4743%" y="261" width="0.0789%" height="15" fill="rgb(248,89,10)" fg:x="1235" fg:w="1"/><text x="97.7243%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (27 samples, 2.13%)</title><rect x="95.5012%" y="389" width="2.1310%" height="15" fill="rgb(248,54,15)" fg:x="1210" fg:w="27"/><text x="95.7512%" y="399.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (26 samples, 2.05%)</title><rect x="95.5801%" y="373" width="2.0521%" height="15" fill="rgb(223,116,6)" fg:x="1211" fg:w="26"/><text x="95.8301%" y="383.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (26 samples, 2.05%)</title><rect x="95.5801%" y="357" width="2.0521%" height="15" fill="rgb(205,125,38)" fg:x="1211" fg:w="26"/><text x="95.8301%" y="367.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="97.4743%" y="341" width="0.1579%" height="15" fill="rgb(251,78,38)" fg:x="1235" fg:w="2"/><text x="97.7243%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.4743%" y="325" width="0.1579%" height="15" fill="rgb(253,78,28)" fg:x="1235" fg:w="2"/><text x="97.7243%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="97.4743%" y="309" width="0.1579%" height="15" fill="rgb(209,120,3)" fg:x="1235" fg:w="2"/><text x="97.7243%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.5533%" y="293" width="0.0789%" height="15" fill="rgb(238,229,9)" fg:x="1236" fg:w="1"/><text x="97.8033%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="97.6322%" y="389" width="0.0789%" height="15" fill="rgb(253,159,18)" fg:x="1237" fg:w="1"/><text x="97.8822%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="97.6322%" y="373" width="0.0789%" height="15" fill="rgb(244,42,34)" fg:x="1237" fg:w="1"/><text x="97.8822%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="97.6322%" y="357" width="0.0789%" height="15" fill="rgb(224,8,7)" fg:x="1237" fg:w="1"/><text x="97.8822%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="97.6322%" y="341" width="0.0789%" height="15" fill="rgb(210,201,45)" fg:x="1237" fg:w="1"/><text x="97.8822%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.6322%" y="325" width="0.0789%" height="15" fill="rgb(252,185,21)" fg:x="1237" fg:w="1"/><text x="97.8822%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.6322%" y="309" width="0.0789%" height="15" fill="rgb(223,131,1)" fg:x="1237" fg:w="1"/><text x="97.8822%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6322%" y="293" width="0.0789%" height="15" fill="rgb(245,141,16)" fg:x="1237" fg:w="1"/><text x="97.8822%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.7111%" y="357" width="0.0789%" height="15" fill="rgb(229,55,45)" fg:x="1238" fg:w="1"/><text x="97.9611%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.7111%" y="341" width="0.0789%" height="15" fill="rgb(208,92,15)" fg:x="1238" fg:w="1"/><text x="97.9611%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="97.7111%" y="389" width="0.1579%" height="15" fill="rgb(234,185,47)" fg:x="1238" fg:w="2"/><text x="97.9611%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="97.7111%" y="373" width="0.1579%" height="15" fill="rgb(253,104,50)" fg:x="1238" fg:w="2"/><text x="97.9611%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.7901%" y="357" width="0.0789%" height="15" fill="rgb(205,70,7)" fg:x="1239" fg:w="1"/><text x="98.0401%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.7901%" y="341" width="0.0789%" height="15" fill="rgb(240,178,43)" fg:x="1239" fg:w="1"/><text x="98.0401%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.9479%" y="309" width="0.0789%" height="15" fill="rgb(214,112,2)" fg:x="1241" fg:w="1"/><text x="98.1979%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.9479%" y="293" width="0.0789%" height="15" fill="rgb(206,46,17)" fg:x="1241" fg:w="1"/><text x="98.1979%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.9479%" y="277" width="0.0789%" height="15" fill="rgb(225,220,16)" fg:x="1241" fg:w="1"/><text x="98.1979%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (390 samples, 30.78%)</title><rect x="67.4033%" y="501" width="30.7814%" height="15" fill="rgb(238,65,40)" fg:x="854" fg:w="390"/><text x="67.6533%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::loo..</text></g><g><title>plugins_core::looking::model::qualify_name (383 samples, 30.23%)</title><rect x="67.9558%" y="485" width="30.2289%" height="15" fill="rgb(230,151,21)" fg:x="861" fg:w="383"/><text x="68.2058%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (383 samples, 30.23%)</title><rect x="67.9558%" y="469" width="30.2289%" height="15" fill="rgb(218,58,49)" fg:x="861" fg:w="383"/><text x="68.2058%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (383 samples, 30.23%)</title><rect x="67.9558%" y="453" width="30.2289%" height="15" fill="rgb(219,179,14)" fg:x="861" fg:w="383"/><text x="68.2058%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (383 samples, 30.23%)</title><rect x="67.9558%" y="437" width="30.2289%" height="15" fill="rgb(223,72,1)" fg:x="861" fg:w="383"/><text x="68.2058%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (35 samples, 2.76%)</title><rect x="95.4223%" y="421" width="2.7624%" height="15" fill="rgb(238,126,10)" fg:x="1209" fg:w="35"/><text x="95.6723%" y="431.50">in..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (34 samples, 2.68%)</title><rect x="95.5012%" y="405" width="2.6835%" height="15" fill="rgb(224,206,38)" fg:x="1210" fg:w="34"/><text x="95.7512%" y="415.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="97.8690%" y="389" width="0.3157%" height="15" fill="rgb(212,201,54)" fg:x="1240" fg:w="4"/><text x="98.1190%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="97.8690%" y="373" width="0.3157%" height="15" fill="rgb(218,154,48)" fg:x="1240" fg:w="4"/><text x="98.1190%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="97.8690%" y="357" width="0.3157%" height="15" fill="rgb(232,93,24)" fg:x="1240" fg:w="4"/><text x="98.1190%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="97.8690%" y="341" width="0.3157%" height="15" fill="rgb(245,30,21)" fg:x="1240" fg:w="4"/><text x="98.1190%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="97.9479%" y="325" width="0.2368%" height="15" fill="rgb(242,148,29)" fg:x="1241" fg:w="3"/><text x="98.1979%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.0268%" y="309" width="0.1579%" height="15" fill="rgb(244,153,54)" fg:x="1242" fg:w="2"/><text x="98.2768%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.1058%" y="293" width="0.0789%" height="15" fill="rgb(252,87,22)" fg:x="1243" fg:w="1"/><text x="98.3558%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.1058%" y="277" width="0.0789%" height="15" fill="rgb(210,51,29)" fg:x="1243" fg:w="1"/><text x="98.3558%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="98.1847%" y="501" width="0.0789%" height="15" fill="rgb(242,136,47)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="98.1847%" y="485" width="0.0789%" height="15" fill="rgb(238,68,4)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="98.1847%" y="469" width="0.0789%" height="15" fill="rgb(242,161,30)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.1847%" y="453" width="0.0789%" height="15" fill="rgb(218,58,44)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.1847%" y="437" width="0.0789%" height="15" fill="rgb(252,125,32)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.1847%" y="421" width="0.0789%" height="15" fill="rgb(219,178,0)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.1847%" y="405" width="0.0789%" height="15" fill="rgb(213,152,7)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="98.1847%" y="389" width="0.0789%" height="15" fill="rgb(249,109,34)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.1847%" y="373" width="0.0789%" height="15" fill="rgb(232,96,21)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.1847%" y="357" width="0.0789%" height="15" fill="rgb(228,27,39)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.1847%" y="341" width="0.0789%" height="15" fill="rgb(211,182,52)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="98.1847%" y="325" width="0.0789%" height="15" fill="rgb(234,178,38)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.1847%" y="309" width="0.0789%" height="15" fill="rgb(221,111,3)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.1847%" y="293" width="0.0789%" height="15" fill="rgb(228,175,21)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.1847%" y="277" width="0.0789%" height="15" fill="rgb(228,174,43)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.1847%" y="261" width="0.0789%" height="15" fill="rgb(211,191,0)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.1847%" y="245" width="0.0789%" height="15" fill="rgb(253,117,3)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="98.1847%" y="229" width="0.0789%" height="15" fill="rgb(241,127,19)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="98.1847%" y="213" width="0.0789%" height="15" fill="rgb(218,103,12)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="98.1847%" y="197" width="0.0789%" height="15" fill="rgb(236,214,43)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="98.1847%" y="181" width="0.0789%" height="15" fill="rgb(244,144,19)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="98.1847%" y="165" width="0.0789%" height="15" fill="rgb(246,188,10)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="98.1847%" y="149" width="0.0789%" height="15" fill="rgb(212,193,33)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.1847%" y="133" width="0.0789%" height="15" fill="rgb(241,51,29)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="98.1847%" y="117" width="0.0789%" height="15" fill="rgb(211,58,19)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.1847%" y="101" width="0.0789%" height="15" fill="rgb(229,111,26)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="98.1847%" y="85" width="0.0789%" height="15" fill="rgb(213,115,40)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="98.1847%" y="69" width="0.0789%" height="15" fill="rgb(209,56,44)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="98.1847%" y="53" width="0.0789%" height="15" fill="rgb(230,108,32)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.1847%" y="37" width="0.0789%" height="15" fill="rgb(216,165,31)" fg:x="1244" fg:w="1"/><text x="98.4347%" y="47.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2636%" y="501" width="0.0789%" height="15" fill="rgb(218,122,21)" fg:x="1245" fg:w="1"/><text x="98.5136%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="98.3425%" y="501" width="0.0789%" height="15" fill="rgb(223,224,47)" fg:x="1246" fg:w="1"/><text x="98.5925%" y="511.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4215%" y="469" width="0.0789%" height="15" fill="rgb(238,102,44)" fg:x="1247" fg:w="1"/><text x="98.6715%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4215%" y="453" width="0.0789%" height="15" fill="rgb(236,46,40)" fg:x="1247" fg:w="1"/><text x="98.6715%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.5004%" y="357" width="0.0789%" height="15" fill="rgb(247,202,50)" fg:x="1248" fg:w="1"/><text x="98.7504%" y="367.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="98.5004%" y="341" width="0.0789%" height="15" fill="rgb(209,99,20)" fg:x="1248" fg:w="1"/><text x="98.7504%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="98.5004%" y="325" width="0.0789%" height="15" fill="rgb(252,27,34)" fg:x="1248" fg:w="1"/><text x="98.7504%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="98.5004%" y="309" width="0.0789%" height="15" fill="rgb(215,206,23)" fg:x="1248" fg:w="1"/><text x="98.7504%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="98.5004%" y="293" width="0.0789%" height="15" fill="rgb(212,135,36)" fg:x="1248" fg:w="1"/><text x="98.7504%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5004%" y="277" width="0.0789%" height="15" fill="rgb(240,189,1)" fg:x="1248" fg:w="1"/><text x="98.7504%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5004%" y="261" width="0.0789%" height="15" fill="rgb(242,56,20)" fg:x="1248" fg:w="1"/><text x="98.7504%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5004%" y="245" width="0.0789%" height="15" fill="rgb(247,132,33)" fg:x="1248" fg:w="1"/><text x="98.7504%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5004%" y="229" width="0.0789%" height="15" fill="rgb(208,149,11)" fg:x="1248" fg:w="1"/><text x="98.7504%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5004%" y="213" width="0.0789%" height="15" fill="rgb(211,33,11)" fg:x="1248" fg:w="1"/><text x="98.7504%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5004%" y="197" width="0.0789%" height="15" fill="rgb(221,29,38)" fg:x="1248" fg:w="1"/><text x="98.7504%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.5793%" y="261" width="0.0789%" height="15" fill="rgb(206,182,49)" fg:x="1249" fg:w="1"/><text x="98.8293%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.5793%" y="245" width="0.0789%" height="15" fill="rgb(216,140,1)" fg:x="1249" fg:w="1"/><text x="98.8293%" y="255.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="98.5793%" y="341" width="0.2368%" height="15" fill="rgb(232,57,40)" fg:x="1249" fg:w="3"/><text x="98.8293%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="98.5793%" y="325" width="0.2368%" height="15" fill="rgb(224,186,18)" fg:x="1249" fg:w="3"/><text x="98.8293%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.5793%" y="309" width="0.2368%" height="15" fill="rgb(215,121,11)" fg:x="1249" fg:w="3"/><text x="98.8293%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="98.5793%" y="293" width="0.2368%" height="15" fill="rgb(245,147,10)" fg:x="1249" fg:w="3"/><text x="98.8293%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.5793%" y="277" width="0.2368%" height="15" fill="rgb(238,153,13)" fg:x="1249" fg:w="3"/><text x="98.8293%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.6582%" y="261" width="0.1579%" height="15" fill="rgb(233,108,0)" fg:x="1250" fg:w="2"/><text x="98.9082%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.6582%" y="245" width="0.1579%" height="15" fill="rgb(212,157,17)" fg:x="1250" fg:w="2"/><text x="98.9082%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.6582%" y="229" width="0.1579%" height="15" fill="rgb(225,213,38)" fg:x="1250" fg:w="2"/><text x="98.9082%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.6582%" y="213" width="0.1579%" height="15" fill="rgb(248,16,11)" fg:x="1250" fg:w="2"/><text x="98.9082%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7372%" y="197" width="0.0789%" height="15" fill="rgb(241,33,4)" fg:x="1251" fg:w="1"/><text x="98.9872%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7372%" y="181" width="0.0789%" height="15" fill="rgb(222,26,43)" fg:x="1251" fg:w="1"/><text x="98.9872%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7372%" y="165" width="0.0789%" height="15" fill="rgb(243,29,36)" fg:x="1251" fg:w="1"/><text x="98.9872%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (4 samples, 0.32%)</title><rect x="98.5793%" y="357" width="0.3157%" height="15" fill="rgb(241,9,27)" fg:x="1249" fg:w="4"/><text x="98.8293%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8161%" y="341" width="0.0789%" height="15" fill="rgb(205,117,26)" fg:x="1252" fg:w="1"/><text x="99.0661%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8161%" y="325" width="0.0789%" height="15" fill="rgb(209,80,39)" fg:x="1252" fg:w="1"/><text x="99.0661%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8161%" y="309" width="0.0789%" height="15" fill="rgb(239,155,6)" fg:x="1252" fg:w="1"/><text x="99.0661%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8161%" y="293" width="0.0789%" height="15" fill="rgb(212,104,12)" fg:x="1252" fg:w="1"/><text x="99.0661%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.9740%" y="213" width="0.0789%" height="15" fill="rgb(234,204,3)" fg:x="1254" fg:w="1"/><text x="99.2240%" y="223.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="98.9740%" y="197" width="0.0789%" height="15" fill="rgb(251,218,7)" fg:x="1254" fg:w="1"/><text x="99.2240%" y="207.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.9740%" y="181" width="0.0789%" height="15" fill="rgb(221,81,32)" fg:x="1254" fg:w="1"/><text x="99.2240%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="98.8950%" y="357" width="0.2368%" height="15" fill="rgb(214,152,26)" fg:x="1253" fg:w="3"/><text x="99.1450%" y="367.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="98.8950%" y="341" width="0.2368%" height="15" fill="rgb(223,22,3)" fg:x="1253" fg:w="3"/><text x="99.1450%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="98.8950%" y="325" width="0.2368%" height="15" fill="rgb(207,174,7)" fg:x="1253" fg:w="3"/><text x="99.1450%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.8950%" y="309" width="0.2368%" height="15" fill="rgb(224,19,52)" fg:x="1253" fg:w="3"/><text x="99.1450%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.8950%" y="293" width="0.2368%" height="15" fill="rgb(228,24,14)" fg:x="1253" fg:w="3"/><text x="99.1450%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.8950%" y="277" width="0.2368%" height="15" fill="rgb(230,153,43)" fg:x="1253" fg:w="3"/><text x="99.1450%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.8950%" y="261" width="0.2368%" height="15" fill="rgb(231,106,12)" fg:x="1253" fg:w="3"/><text x="99.1450%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="98.8950%" y="245" width="0.2368%" height="15" fill="rgb(215,92,2)" fg:x="1253" fg:w="3"/><text x="99.1450%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.9740%" y="229" width="0.1579%" height="15" fill="rgb(249,143,25)" fg:x="1254" fg:w="2"/><text x="99.2240%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0529%" y="213" width="0.0789%" height="15" fill="rgb(252,7,35)" fg:x="1255" fg:w="1"/><text x="99.3029%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0529%" y="197" width="0.0789%" height="15" fill="rgb(216,69,40)" fg:x="1255" fg:w="1"/><text x="99.3029%" y="207.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (9 samples, 0.71%)</title><rect x="98.5004%" y="469" width="0.7103%" height="15" fill="rgb(240,36,33)" fg:x="1248" fg:w="9"/><text x="98.7504%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.71%)</title><rect x="98.5004%" y="453" width="0.7103%" height="15" fill="rgb(231,128,14)" fg:x="1248" fg:w="9"/><text x="98.7504%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="98.5004%" y="437" width="0.7103%" height="15" fill="rgb(245,143,14)" fg:x="1248" fg:w="9"/><text x="98.7504%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.71%)</title><rect x="98.5004%" y="421" width="0.7103%" height="15" fill="rgb(222,130,28)" fg:x="1248" fg:w="9"/><text x="98.7504%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (9 samples, 0.71%)</title><rect x="98.5004%" y="405" width="0.7103%" height="15" fill="rgb(212,10,48)" fg:x="1248" fg:w="9"/><text x="98.7504%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.71%)</title><rect x="98.5004%" y="389" width="0.7103%" height="15" fill="rgb(254,118,45)" fg:x="1248" fg:w="9"/><text x="98.7504%" y="399.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.71%)</title><rect x="98.5004%" y="373" width="0.7103%" height="15" fill="rgb(228,6,45)" fg:x="1248" fg:w="9"/><text x="98.7504%" y="383.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.1318%" y="357" width="0.0789%" height="15" fill="rgb(241,18,35)" fg:x="1256" fg:w="1"/><text x="99.3818%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1318%" y="341" width="0.0789%" height="15" fill="rgb(227,214,53)" fg:x="1256" fg:w="1"/><text x="99.3818%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1318%" y="325" width="0.0789%" height="15" fill="rgb(224,107,51)" fg:x="1256" fg:w="1"/><text x="99.3818%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.2897%" y="437" width="0.0789%" height="15" fill="rgb(248,60,28)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2897%" y="421" width="0.0789%" height="15" fill="rgb(249,101,23)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2897%" y="405" width="0.0789%" height="15" fill="rgb(228,51,19)" fg:x="1258" fg:w="1"/><text x="99.5397%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.3686%" y="437" width="0.0789%" height="15" fill="rgb(213,20,6)" fg:x="1259" fg:w="1"/><text x="99.6186%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.3686%" y="421" width="0.0789%" height="15" fill="rgb(212,124,10)" fg:x="1259" fg:w="1"/><text x="99.6186%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.3686%" y="405" width="0.0789%" height="15" fill="rgb(248,3,40)" fg:x="1259" fg:w="1"/><text x="99.6186%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3686%" y="389" width="0.0789%" height="15" fill="rgb(223,178,23)" fg:x="1259" fg:w="1"/><text x="99.6186%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3686%" y="373" width="0.0789%" height="15" fill="rgb(240,132,45)" fg:x="1259" fg:w="1"/><text x="99.6186%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="99.3686%" y="357" width="0.0789%" height="15" fill="rgb(245,164,36)" fg:x="1259" fg:w="1"/><text x="99.6186%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (410 samples, 32.36%)</title><rect x="67.1665%" y="725" width="32.3599%" height="15" fill="rgb(231,188,53)" fg:x="851" fg:w="410"/><text x="67.4165%" y="735.50">&lt;engine::session::Session as kernel::actions::Perfor..</text></g><g><title>kernel::plugins::mw::apply_middleware (410 samples, 32.36%)</title><rect x="67.1665%" y="709" width="32.3599%" height="15" fill="rgb(237,198,39)" fg:x="851" fg:w="410"/><text x="67.4165%" y="719.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (410 samples, 32.36%)</title><rect x="67.1665%" y="693" width="32.3599%" height="15" fill="rgb(223,120,35)" fg:x="851" fg:w="410"/><text x="67.4165%" y="703.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (410 samples, 32.36%)</title><rect x="67.1665%" y="677" width="32.3599%" height="15" fill="rgb(253,107,49)" fg:x="851" fg:w="410"/><text x="67.4165%" y="687.50">&lt;engine::session::ExpandSurroundingsMiddleware as ke..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (407 samples, 32.12%)</title><rect x="67.4033%" y="661" width="32.1231%" height="15" fill="rgb(216,44,31)" fg:x="854" fg:w="407"/><text x="67.6533%" y="671.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (407 samples, 32.12%)</title><rect x="67.4033%" y="645" width="32.1231%" height="15" fill="rgb(253,87,21)" fg:x="854" fg:w="407"/><text x="67.6533%" y="655.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugin..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (407 samples, 32.12%)</title><rect x="67.4033%" y="629" width="32.1231%" height="15" fill="rgb(226,18,2)" fg:x="854" fg:w="407"/><text x="67.6533%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (407 samples, 32.12%)</title><rect x="67.4033%" y="613" width="32.1231%" height="15" fill="rgb(216,8,46)" fg:x="854" fg:w="407"/><text x="67.6533%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (407 samples, 32.12%)</title><rect x="67.4033%" y="597" width="32.1231%" height="15" fill="rgb(226,140,39)" fg:x="854" fg:w="407"/><text x="67.6533%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (407 samples, 32.12%)</title><rect x="67.4033%" y="581" width="32.1231%" height="15" fill="rgb(221,194,54)" fg:x="854" fg:w="407"/><text x="67.6533%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (407 samples, 32.12%)</title><rect x="67.4033%" y="565" width="32.1231%" height="15" fill="rgb(213,92,11)" fg:x="854" fg:w="407"/><text x="67.6533%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOn..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (407 samples, 32.12%)</title><rect x="67.4033%" y="549" width="32.1231%" height="15" fill="rgb(229,162,46)" fg:x="854" fg:w="407"/><text x="67.6533%" y="559.50">&lt;engine::session::state::State as kernel::actions::P..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (407 samples, 32.12%)</title><rect x="67.4033%" y="533" width="32.1231%" height="15" fill="rgb(214,111,36)" fg:x="854" fg:w="407"/><text x="67.6533%" y="543.50">&lt;plugins_core::looking::actions::LookAction as kerne..</text></g><g><title>plugins_core::looking::model::new_area_observation (407 samples, 32.12%)</title><rect x="67.4033%" y="517" width="32.1231%" height="15" fill="rgb(207,6,21)" fg:x="854" fg:w="407"/><text x="67.6533%" y="527.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (14 samples, 1.10%)</title><rect x="98.4215%" y="501" width="1.1050%" height="15" fill="rgb(213,127,38)" fg:x="1247" fg:w="14"/><text x="98.6715%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (14 samples, 1.10%)</title><rect x="98.4215%" y="485" width="1.1050%" height="15" fill="rgb(238,118,32)" fg:x="1247" fg:w="14"/><text x="98.6715%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="99.2107%" y="469" width="0.3157%" height="15" fill="rgb(240,139,39)" fg:x="1257" fg:w="4"/><text x="99.4607%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="99.2107%" y="453" width="0.3157%" height="15" fill="rgb(235,10,37)" fg:x="1257" fg:w="4"/><text x="99.4607%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u32 (1 samples, 0.08%)</title><rect x="99.4475%" y="437" width="0.0789%" height="15" fill="rgb(249,171,38)" fg:x="1260" fg:w="1"/><text x="99.6975%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="99.5264%" y="725" width="0.0789%" height="15" fill="rgb(242,144,32)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.5264%" y="709" width="0.0789%" height="15" fill="rgb(217,117,21)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="99.5264%" y="693" width="0.0789%" height="15" fill="rgb(249,87,1)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5264%" y="677" width="0.0789%" height="15" fill="rgb(248,196,48)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5264%" y="661" width="0.0789%" height="15" fill="rgb(251,206,33)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.5264%" y="645" width="0.0789%" height="15" fill="rgb(232,141,28)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5264%" y="629" width="0.0789%" height="15" fill="rgb(209,167,14)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="639.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5264%" y="613" width="0.0789%" height="15" fill="rgb(225,11,50)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5264%" y="597" width="0.0789%" height="15" fill="rgb(209,50,20)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5264%" y="581" width="0.0789%" height="15" fill="rgb(212,17,46)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="591.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.5264%" y="565" width="0.0789%" height="15" fill="rgb(216,101,39)" fg:x="1261" fg:w="1"/><text x="99.7764%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.6054%" y="677" width="0.0789%" height="15" fill="rgb(212,228,48)" fg:x="1262" fg:w="1"/><text x="99.8554%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="99.6054%" y="661" width="0.0789%" height="15" fill="rgb(250,6,50)" fg:x="1262" fg:w="1"/><text x="99.8554%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.6054%" y="645" width="0.0789%" height="15" fill="rgb(250,160,48)" fg:x="1262" fg:w="1"/><text x="99.8554%" y="655.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="99.6054%" y="629" width="0.0789%" height="15" fill="rgb(244,216,33)" fg:x="1262" fg:w="1"/><text x="99.8554%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6843%" y="629" width="0.0789%" height="15" fill="rgb(207,157,5)" fg:x="1263" fg:w="1"/><text x="99.9343%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6843%" y="613" width="0.0789%" height="15" fill="rgb(228,199,8)" fg:x="1263" fg:w="1"/><text x="99.9343%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.6054%" y="709" width="0.2368%" height="15" fill="rgb(227,80,20)" fg:x="1262" fg:w="3"/><text x="99.8554%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.6054%" y="693" width="0.2368%" height="15" fill="rgb(222,9,33)" fg:x="1262" fg:w="3"/><text x="99.8554%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="99.6843%" y="677" width="0.1579%" height="15" fill="rgb(239,44,28)" fg:x="1263" fg:w="2"/><text x="99.9343%" y="687.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="99.6843%" y="661" width="0.1579%" height="15" fill="rgb(249,187,43)" fg:x="1263" fg:w="2"/><text x="99.9343%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="99.6843%" y="645" width="0.1579%" height="15" fill="rgb(216,141,28)" fg:x="1263" fg:w="2"/><text x="99.9343%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7632%" y="629" width="0.0789%" height="15" fill="rgb(230,154,53)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7632%" y="613" width="0.0789%" height="15" fill="rgb(227,82,4)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7632%" y="597" width="0.0789%" height="15" fill="rgb(220,107,16)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7632%" y="581" width="0.0789%" height="15" fill="rgb(207,187,2)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.7632%" y="565" width="0.0789%" height="15" fill="rgb(210,162,52)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7632%" y="549" width="0.0789%" height="15" fill="rgb(217,216,49)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7632%" y="533" width="0.0789%" height="15" fill="rgb(218,146,49)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7632%" y="517" width="0.0789%" height="15" fill="rgb(216,55,40)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7632%" y="501" width="0.0789%" height="15" fill="rgb(208,196,21)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7632%" y="485" width="0.0789%" height="15" fill="rgb(242,117,42)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.7632%" y="469" width="0.0789%" height="15" fill="rgb(210,11,23)" fg:x="1264" fg:w="1"/><text x="100.0132%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (4 samples, 0.32%)</title><rect x="99.6054%" y="725" width="0.3157%" height="15" fill="rgb(217,110,2)" fg:x="1262" fg:w="4"/><text x="99.8554%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.8421%" y="709" width="0.0789%" height="15" fill="rgb(229,77,54)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.8421%" y="693" width="0.0789%" height="15" fill="rgb(218,53,16)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.8421%" y="677" width="0.0789%" height="15" fill="rgb(215,38,13)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8421%" y="661" width="0.0789%" height="15" fill="rgb(235,42,18)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8421%" y="645" width="0.0789%" height="15" fill="rgb(219,66,54)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8421%" y="629" width="0.0789%" height="15" fill="rgb(222,205,4)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.8421%" y="613" width="0.0789%" height="15" fill="rgb(227,213,46)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8421%" y="597" width="0.0789%" height="15" fill="rgb(250,145,42)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8421%" y="581" width="0.0789%" height="15" fill="rgb(219,15,2)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8421%" y="565" width="0.0789%" height="15" fill="rgb(231,181,52)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.8421%" y="549" width="0.0789%" height="15" fill="rgb(235,1,42)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8421%" y="533" width="0.0789%" height="15" fill="rgb(249,88,27)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8421%" y="517" width="0.0789%" height="15" fill="rgb(235,145,16)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="527.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8421%" y="501" width="0.0789%" height="15" fill="rgb(237,114,19)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.8421%" y="485" width="0.0789%" height="15" fill="rgb(238,51,50)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8421%" y="469" width="0.0789%" height="15" fill="rgb(205,194,25)" fg:x="1265" fg:w="1"/><text x="100.0921%" y="479.50"></text></g><g><title>all (1,267 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(215,203,17)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-b9ccdf7e (1,267 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(233,112,49)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="1087.50">simple-b9ccdf7e</text></g><g><title>_start (1,267 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(241,130,26)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,267 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(252,223,19)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,267 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(211,95,25)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,267 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(251,182,27)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,267 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(238,24,4)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,267 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(224,220,25)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,267 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(239,133,26)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,267 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(211,94,48)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,267 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(239,87,6)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,267 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(227,62,0)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,267 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(211,226,4)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,267 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(253,38,52)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,267 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(229,126,40)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,267 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(229,165,44)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,267 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(247,95,47)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,267 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(216,140,30)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,267 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(246,214,8)" fg:x="0" fg:w="1267"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (495 samples, 39.07%)</title><rect x="60.9313%" y="789" width="39.0687%" height="15" fill="rgb(227,224,15)" fg:x="772" fg:w="495"/><text x="61.1813%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Rout..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (495 samples, 39.07%)</title><rect x="60.9313%" y="773" width="39.0687%" height="15" fill="rgb(233,175,4)" fg:x="772" fg:w="495"/><text x="61.1813%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (495 samples, 39.07%)</title><rect x="60.9313%" y="757" width="39.0687%" height="15" fill="rgb(221,66,45)" fg:x="772" fg:w="495"/><text x="61.1813%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (416 samples, 32.83%)</title><rect x="67.1665%" y="741" width="32.8335%" height="15" fill="rgb(221,178,18)" fg:x="851" fg:w="416"/><text x="67.4165%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.9211%" y="725" width="0.0789%" height="15" fill="rgb(213,81,29)" fg:x="1266" fg:w="1"/><text x="100.1711%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="99.9211%" y="709" width="0.0789%" height="15" fill="rgb(220,89,49)" fg:x="1266" fg:w="1"/><text x="100.1711%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.9211%" y="693" width="0.0789%" height="15" fill="rgb(227,60,33)" fg:x="1266" fg:w="1"/><text x="100.1711%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.9211%" y="677" width="0.0789%" height="15" fill="rgb(205,113,12)" fg:x="1266" fg:w="1"/><text x="100.1711%" y="687.50"></text></g></svg></svg>