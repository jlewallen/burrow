<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1094" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1077.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1077.00"> </text><svg id="frames" x="10" width="1180" total_samples="1235"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0810%" y="677" width="0.0810%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3310%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0810%" y="661" width="0.0810%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3310%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3239%" y="581" width="0.0810%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.5739%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3239%" y="565" width="0.0810%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.5739%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.4049%" y="565" width="0.1619%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="2"/><text x="0.6549%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.4049%" y="549" width="0.1619%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="2"/><text x="0.6549%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.4049%" y="533" width="0.1619%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="2"/><text x="0.6549%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4858%" y="517" width="0.0810%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="1"/><text x="0.7358%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="0.0810%" y="693" width="0.6478%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="8"/><text x="0.3310%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (7 samples, 0.57%)</title><rect x="0.1619%" y="677" width="0.5668%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="7"/><text x="0.4119%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="0.1619%" y="661" width="0.5668%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="7"/><text x="0.4119%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (7 samples, 0.57%)</title><rect x="0.1619%" y="645" width="0.5668%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="7"/><text x="0.4119%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="0.1619%" y="629" width="0.5668%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="7"/><text x="0.4119%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="0.2429%" y="613" width="0.4858%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="6"/><text x="0.4929%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.3239%" y="597" width="0.4049%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="5"/><text x="0.5739%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.4049%" y="581" width="0.3239%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="4"/><text x="0.6549%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.5668%" y="565" width="0.1619%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="2"/><text x="0.8168%" y="575.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="0.8907%" y="613" width="0.0810%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="1"/><text x="1.1407%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="0.8907%" y="597" width="0.0810%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="1"/><text x="1.1407%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="0.8907%" y="581" width="0.0810%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="1"/><text x="1.1407%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="0.8907%" y="565" width="0.0810%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="1"/><text x="1.1407%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="0.8907%" y="549" width="0.0810%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="1"/><text x="1.1407%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="0.8907%" y="533" width="0.0810%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="1"/><text x="1.1407%" y="543.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.9717%" y="597" width="0.0810%" height="15" fill="rgb(247,18,42)" fg:x="12" fg:w="1"/><text x="1.2217%" y="607.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.9717%" y="581" width="0.0810%" height="15" fill="rgb(241,131,45)" fg:x="12" fg:w="1"/><text x="1.2217%" y="591.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (10 samples, 0.81%)</title><rect x="0.7287%" y="693" width="0.8097%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="10"/><text x="0.9787%" y="703.50"></text></g><g><title>engine::session::Session::new (10 samples, 0.81%)</title><rect x="0.7287%" y="677" width="0.8097%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="10"/><text x="0.9787%" y="687.50"></text></g><g><title>engine::session::Session::initialize (10 samples, 0.81%)</title><rect x="0.7287%" y="661" width="0.8097%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="10"/><text x="0.9787%" y="671.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (9 samples, 0.73%)</title><rect x="0.8097%" y="645" width="0.7287%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="9"/><text x="1.0597%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.65%)</title><rect x="0.8907%" y="629" width="0.6478%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="8"/><text x="1.1407%" y="639.50"></text></g><g><title>libloading::os::unix::Library::open (7 samples, 0.57%)</title><rect x="0.9717%" y="613" width="0.5668%" height="15" fill="rgb(209,103,24)" fg:x="12" fg:w="7"/><text x="1.2217%" y="623.50"></text></g><g><title>dlopen (6 samples, 0.49%)</title><rect x="1.0526%" y="597" width="0.4858%" height="15" fill="rgb(229,88,8)" fg:x="13" fg:w="6"/><text x="1.3026%" y="607.50"></text></g><g><title>_dl_catch_error (5 samples, 0.40%)</title><rect x="1.1336%" y="581" width="0.4049%" height="15" fill="rgb(213,181,19)" fg:x="14" fg:w="5"/><text x="1.3836%" y="591.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="1.1336%" y="565" width="0.4049%" height="15" fill="rgb(254,191,54)" fg:x="14" fg:w="5"/><text x="1.3836%" y="575.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.2146%" y="549" width="0.3239%" height="15" fill="rgb(241,83,37)" fg:x="15" fg:w="4"/><text x="1.4646%" y="559.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.2146%" y="533" width="0.3239%" height="15" fill="rgb(233,36,39)" fg:x="15" fg:w="4"/><text x="1.4646%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="1.5385%" y="677" width="0.0810%" height="15" fill="rgb(226,3,54)" fg:x="19" fg:w="1"/><text x="1.7885%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5385%" y="661" width="0.0810%" height="15" fill="rgb(245,192,40)" fg:x="19" fg:w="1"/><text x="1.7885%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.6194%" y="661" width="0.0810%" height="15" fill="rgb(238,167,29)" fg:x="20" fg:w="1"/><text x="1.8694%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.6194%" y="645" width="0.0810%" height="15" fill="rgb(232,182,51)" fg:x="20" fg:w="1"/><text x="1.8694%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.6194%" y="629" width="0.0810%" height="15" fill="rgb(231,60,39)" fg:x="20" fg:w="1"/><text x="1.8694%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.6194%" y="613" width="0.0810%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="1"/><text x="1.8694%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.6194%" y="597" width="0.0810%" height="15" fill="rgb(235,93,37)" fg:x="20" fg:w="1"/><text x="1.8694%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.6194%" y="581" width="0.0810%" height="15" fill="rgb(213,116,39)" fg:x="20" fg:w="1"/><text x="1.8694%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.6194%" y="565" width="0.0810%" height="15" fill="rgb(222,207,29)" fg:x="20" fg:w="1"/><text x="1.8694%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.6194%" y="549" width="0.0810%" height="15" fill="rgb(206,96,30)" fg:x="20" fg:w="1"/><text x="1.8694%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.6194%" y="533" width="0.0810%" height="15" fill="rgb(218,138,4)" fg:x="20" fg:w="1"/><text x="1.8694%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.6194%" y="517" width="0.0810%" height="15" fill="rgb(250,191,14)" fg:x="20" fg:w="1"/><text x="1.8694%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.6194%" y="501" width="0.0810%" height="15" fill="rgb(239,60,40)" fg:x="20" fg:w="1"/><text x="1.8694%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.6194%" y="485" width="0.0810%" height="15" fill="rgb(206,27,48)" fg:x="20" fg:w="1"/><text x="1.8694%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.6194%" y="469" width="0.0810%" height="15" fill="rgb(225,35,8)" fg:x="20" fg:w="1"/><text x="1.8694%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="1.7814%" y="613" width="0.0810%" height="15" fill="rgb(250,213,24)" fg:x="22" fg:w="1"/><text x="2.0314%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.8623%" y="581" width="0.0810%" height="15" fill="rgb(247,123,22)" fg:x="23" fg:w="1"/><text x="2.1123%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.8623%" y="565" width="0.0810%" height="15" fill="rgb(231,138,38)" fg:x="23" fg:w="1"/><text x="2.1123%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.8623%" y="549" width="0.0810%" height="15" fill="rgb(231,145,46)" fg:x="23" fg:w="1"/><text x="2.1123%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.8623%" y="533" width="0.0810%" height="15" fill="rgb(251,118,11)" fg:x="23" fg:w="1"/><text x="2.1123%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.9433%" y="565" width="0.0810%" height="15" fill="rgb(217,147,25)" fg:x="24" fg:w="1"/><text x="2.1933%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.9433%" y="549" width="0.0810%" height="15" fill="rgb(247,81,37)" fg:x="24" fg:w="1"/><text x="2.1933%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.0243%" y="549" width="0.0810%" height="15" fill="rgb(209,12,38)" fg:x="25" fg:w="1"/><text x="2.2743%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.0243%" y="533" width="0.0810%" height="15" fill="rgb(227,1,9)" fg:x="25" fg:w="1"/><text x="2.2743%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.0243%" y="517" width="0.0810%" height="15" fill="rgb(248,47,43)" fg:x="25" fg:w="1"/><text x="2.2743%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1053%" y="533" width="0.0810%" height="15" fill="rgb(221,10,30)" fg:x="26" fg:w="1"/><text x="2.3553%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1053%" y="517" width="0.0810%" height="15" fill="rgb(210,229,1)" fg:x="26" fg:w="1"/><text x="2.3553%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1053%" y="501" width="0.0810%" height="15" fill="rgb(222,148,37)" fg:x="26" fg:w="1"/><text x="2.3553%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.1053%" y="485" width="0.0810%" height="15" fill="rgb(234,67,33)" fg:x="26" fg:w="1"/><text x="2.3553%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.0243%" y="565" width="0.2429%" height="15" fill="rgb(247,98,35)" fg:x="25" fg:w="3"/><text x="2.2743%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.1053%" y="549" width="0.1619%" height="15" fill="rgb(247,138,52)" fg:x="26" fg:w="2"/><text x="2.3553%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.1862%" y="533" width="0.0810%" height="15" fill="rgb(213,79,30)" fg:x="27" fg:w="1"/><text x="2.4362%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.49%)</title><rect x="1.8623%" y="597" width="0.4858%" height="15" fill="rgb(246,177,23)" fg:x="23" fg:w="6"/><text x="2.1123%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="1.9433%" y="581" width="0.4049%" height="15" fill="rgb(230,62,27)" fg:x="24" fg:w="5"/><text x="2.1933%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2672%" y="565" width="0.0810%" height="15" fill="rgb(216,154,8)" fg:x="28" fg:w="1"/><text x="2.5172%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.2672%" y="549" width="0.0810%" height="15" fill="rgb(244,35,45)" fg:x="28" fg:w="1"/><text x="2.5172%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.2672%" y="533" width="0.0810%" height="15" fill="rgb(251,115,12)" fg:x="28" fg:w="1"/><text x="2.5172%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.2672%" y="517" width="0.0810%" height="15" fill="rgb(240,54,50)" fg:x="28" fg:w="1"/><text x="2.5172%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.2672%" y="501" width="0.0810%" height="15" fill="rgb(233,84,52)" fg:x="28" fg:w="1"/><text x="2.5172%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.2672%" y="485" width="0.0810%" height="15" fill="rgb(207,117,47)" fg:x="28" fg:w="1"/><text x="2.5172%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3482%" y="597" width="0.0810%" height="15" fill="rgb(249,43,39)" fg:x="29" fg:w="1"/><text x="2.5982%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.3482%" y="581" width="0.0810%" height="15" fill="rgb(209,38,44)" fg:x="29" fg:w="1"/><text x="2.5982%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3482%" y="565" width="0.0810%" height="15" fill="rgb(236,212,23)" fg:x="29" fg:w="1"/><text x="2.5982%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3482%" y="549" width="0.0810%" height="15" fill="rgb(242,79,21)" fg:x="29" fg:w="1"/><text x="2.5982%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3482%" y="533" width="0.0810%" height="15" fill="rgb(211,96,35)" fg:x="29" fg:w="1"/><text x="2.5982%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="2.4291%" y="581" width="0.0810%" height="15" fill="rgb(253,215,40)" fg:x="30" fg:w="1"/><text x="2.6791%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.5911%" y="501" width="0.0810%" height="15" fill="rgb(211,81,21)" fg:x="32" fg:w="1"/><text x="2.8411%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.5911%" y="485" width="0.0810%" height="15" fill="rgb(208,190,38)" fg:x="32" fg:w="1"/><text x="2.8411%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.6721%" y="453" width="0.1619%" height="15" fill="rgb(235,213,38)" fg:x="33" fg:w="2"/><text x="2.9221%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.6721%" y="437" width="0.1619%" height="15" fill="rgb(237,122,38)" fg:x="33" fg:w="2"/><text x="2.9221%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.7530%" y="421" width="0.0810%" height="15" fill="rgb(244,218,35)" fg:x="34" fg:w="1"/><text x="3.0030%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7530%" y="405" width="0.0810%" height="15" fill="rgb(240,68,47)" fg:x="34" fg:w="1"/><text x="3.0030%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="2.5911%" y="517" width="0.3239%" height="15" fill="rgb(210,16,53)" fg:x="32" fg:w="4"/><text x="2.8411%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="2.6721%" y="501" width="0.2429%" height="15" fill="rgb(235,124,12)" fg:x="33" fg:w="3"/><text x="2.9221%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="2.6721%" y="485" width="0.2429%" height="15" fill="rgb(224,169,11)" fg:x="33" fg:w="3"/><text x="2.9221%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="2.6721%" y="469" width="0.2429%" height="15" fill="rgb(250,166,2)" fg:x="33" fg:w="3"/><text x="2.9221%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8340%" y="453" width="0.0810%" height="15" fill="rgb(242,216,29)" fg:x="35" fg:w="1"/><text x="3.0840%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.49%)</title><rect x="2.5911%" y="533" width="0.4858%" height="15" fill="rgb(230,116,27)" fg:x="32" fg:w="6"/><text x="2.8411%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="2.9150%" y="517" width="0.1619%" height="15" fill="rgb(228,99,48)" fg:x="36" fg:w="2"/><text x="3.1650%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="2.9150%" y="501" width="0.1619%" height="15" fill="rgb(253,11,6)" fg:x="36" fg:w="2"/><text x="3.1650%" y="511.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.54%)</title><rect x="1.6194%" y="677" width="1.5385%" height="15" fill="rgb(247,143,39)" fg:x="20" fg:w="19"/><text x="1.8694%" y="687.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.46%)</title><rect x="1.7004%" y="661" width="1.4575%" height="15" fill="rgb(236,97,10)" fg:x="21" fg:w="18"/><text x="1.9504%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.46%)</title><rect x="1.7004%" y="645" width="1.4575%" height="15" fill="rgb(233,208,19)" fg:x="21" fg:w="18"/><text x="1.9504%" y="655.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (17 samples, 1.38%)</title><rect x="1.7814%" y="629" width="1.3765%" height="15" fill="rgb(216,164,2)" fg:x="22" fg:w="17"/><text x="2.0314%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (16 samples, 1.30%)</title><rect x="1.8623%" y="613" width="1.2955%" height="15" fill="rgb(220,129,5)" fg:x="23" fg:w="16"/><text x="2.1123%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.73%)</title><rect x="2.4291%" y="597" width="0.7287%" height="15" fill="rgb(242,17,10)" fg:x="30" fg:w="9"/><text x="2.6791%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="2.5101%" y="581" width="0.6478%" height="15" fill="rgb(242,107,0)" fg:x="31" fg:w="8"/><text x="2.7601%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="2.5101%" y="565" width="0.6478%" height="15" fill="rgb(251,28,31)" fg:x="31" fg:w="8"/><text x="2.7601%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.65%)</title><rect x="2.5101%" y="549" width="0.6478%" height="15" fill="rgb(233,223,10)" fg:x="31" fg:w="8"/><text x="2.7601%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.0769%" y="533" width="0.0810%" height="15" fill="rgb(215,21,27)" fg:x="38" fg:w="1"/><text x="3.3269%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.0769%" y="517" width="0.0810%" height="15" fill="rgb(232,23,21)" fg:x="38" fg:w="1"/><text x="3.3269%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="3.0769%" y="501" width="0.0810%" height="15" fill="rgb(244,5,23)" fg:x="38" fg:w="1"/><text x="3.3269%" y="511.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="3.1579%" y="645" width="0.0810%" height="15" fill="rgb(226,81,46)" fg:x="39" fg:w="1"/><text x="3.4079%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.1579%" y="629" width="0.0810%" height="15" fill="rgb(247,70,30)" fg:x="39" fg:w="1"/><text x="3.4079%" y="639.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="3.1579%" y="613" width="0.0810%" height="15" fill="rgb(212,68,19)" fg:x="39" fg:w="1"/><text x="3.4079%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="3.1579%" y="597" width="0.0810%" height="15" fill="rgb(240,187,13)" fg:x="39" fg:w="1"/><text x="3.4079%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1579%" y="581" width="0.0810%" height="15" fill="rgb(223,113,26)" fg:x="39" fg:w="1"/><text x="3.4079%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2389%" y="613" width="0.0810%" height="15" fill="rgb(206,192,2)" fg:x="40" fg:w="1"/><text x="3.4889%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2389%" y="597" width="0.0810%" height="15" fill="rgb(241,108,4)" fg:x="40" fg:w="1"/><text x="3.4889%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.2389%" y="581" width="0.0810%" height="15" fill="rgb(247,173,49)" fg:x="40" fg:w="1"/><text x="3.4889%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.2389%" y="565" width="0.0810%" height="15" fill="rgb(224,114,35)" fg:x="40" fg:w="1"/><text x="3.4889%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.2389%" y="549" width="0.0810%" height="15" fill="rgb(245,159,27)" fg:x="40" fg:w="1"/><text x="3.4889%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.2389%" y="533" width="0.0810%" height="15" fill="rgb(245,172,44)" fg:x="40" fg:w="1"/><text x="3.4889%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.2389%" y="517" width="0.0810%" height="15" fill="rgb(236,23,11)" fg:x="40" fg:w="1"/><text x="3.4889%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.57%)</title><rect x="3.1579%" y="661" width="0.5668%" height="15" fill="rgb(205,117,38)" fg:x="39" fg:w="7"/><text x="3.4079%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.49%)</title><rect x="3.2389%" y="645" width="0.4858%" height="15" fill="rgb(237,72,25)" fg:x="40" fg:w="6"/><text x="3.4889%" y="655.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (6 samples, 0.49%)</title><rect x="3.2389%" y="629" width="0.4858%" height="15" fill="rgb(244,70,9)" fg:x="40" fg:w="6"/><text x="3.4889%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.40%)</title><rect x="3.3198%" y="613" width="0.4049%" height="15" fill="rgb(217,125,39)" fg:x="41" fg:w="5"/><text x="3.5698%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (5 samples, 0.40%)</title><rect x="3.3198%" y="597" width="0.4049%" height="15" fill="rgb(235,36,10)" fg:x="41" fg:w="5"/><text x="3.5698%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.40%)</title><rect x="3.3198%" y="581" width="0.4049%" height="15" fill="rgb(251,123,47)" fg:x="41" fg:w="5"/><text x="3.5698%" y="591.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="3.3198%" y="565" width="0.4049%" height="15" fill="rgb(221,13,13)" fg:x="41" fg:w="5"/><text x="3.5698%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.7247%" y="645" width="0.0810%" height="15" fill="rgb(238,131,9)" fg:x="46" fg:w="1"/><text x="3.9747%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.7247%" y="629" width="0.0810%" height="15" fill="rgb(211,50,8)" fg:x="46" fg:w="1"/><text x="3.9747%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.7247%" y="613" width="0.0810%" height="15" fill="rgb(245,182,24)" fg:x="46" fg:w="1"/><text x="3.9747%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.7247%" y="597" width="0.0810%" height="15" fill="rgb(242,14,37)" fg:x="46" fg:w="1"/><text x="3.9747%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7247%" y="581" width="0.0810%" height="15" fill="rgb(246,228,12)" fg:x="46" fg:w="1"/><text x="3.9747%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7247%" y="565" width="0.0810%" height="15" fill="rgb(213,55,15)" fg:x="46" fg:w="1"/><text x="3.9747%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7247%" y="549" width="0.0810%" height="15" fill="rgb(209,9,3)" fg:x="46" fg:w="1"/><text x="3.9747%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7247%" y="533" width="0.0810%" height="15" fill="rgb(230,59,30)" fg:x="46" fg:w="1"/><text x="3.9747%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7247%" y="517" width="0.0810%" height="15" fill="rgb(209,121,21)" fg:x="46" fg:w="1"/><text x="3.9747%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7247%" y="501" width="0.0810%" height="15" fill="rgb(220,109,13)" fg:x="46" fg:w="1"/><text x="3.9747%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7247%" y="485" width="0.0810%" height="15" fill="rgb(232,18,1)" fg:x="46" fg:w="1"/><text x="3.9747%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.7247%" y="469" width="0.0810%" height="15" fill="rgb(215,41,42)" fg:x="46" fg:w="1"/><text x="3.9747%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.7247%" y="453" width="0.0810%" height="15" fill="rgb(224,123,36)" fg:x="46" fg:w="1"/><text x="3.9747%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.7247%" y="437" width="0.0810%" height="15" fill="rgb(240,125,3)" fg:x="46" fg:w="1"/><text x="3.9747%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.7247%" y="421" width="0.0810%" height="15" fill="rgb(205,98,50)" fg:x="46" fg:w="1"/><text x="3.9747%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.7247%" y="405" width="0.0810%" height="15" fill="rgb(205,185,37)" fg:x="46" fg:w="1"/><text x="3.9747%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.7247%" y="389" width="0.0810%" height="15" fill="rgb(238,207,15)" fg:x="46" fg:w="1"/><text x="3.9747%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.7247%" y="373" width="0.0810%" height="15" fill="rgb(213,199,42)" fg:x="46" fg:w="1"/><text x="3.9747%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.7247%" y="357" width="0.0810%" height="15" fill="rgb(235,201,11)" fg:x="46" fg:w="1"/><text x="3.9747%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.7247%" y="341" width="0.0810%" height="15" fill="rgb(207,46,11)" fg:x="46" fg:w="1"/><text x="3.9747%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7247%" y="325" width="0.0810%" height="15" fill="rgb(241,35,35)" fg:x="46" fg:w="1"/><text x="3.9747%" y="335.50"></text></g><g><title>plugins_core::build::Build::holding (9 samples, 0.73%)</title><rect x="3.1579%" y="677" width="0.7287%" height="15" fill="rgb(243,32,47)" fg:x="39" fg:w="9"/><text x="3.4079%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="3.7247%" y="661" width="0.1619%" height="15" fill="rgb(247,202,23)" fg:x="46" fg:w="2"/><text x="3.9747%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.8057%" y="645" width="0.0810%" height="15" fill="rgb(219,102,11)" fg:x="47" fg:w="1"/><text x="4.0557%" y="655.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8057%" y="629" width="0.0810%" height="15" fill="rgb(243,110,44)" fg:x="47" fg:w="1"/><text x="4.0557%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.8057%" y="613" width="0.0810%" height="15" fill="rgb(222,74,54)" fg:x="47" fg:w="1"/><text x="4.0557%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8057%" y="597" width="0.0810%" height="15" fill="rgb(216,99,12)" fg:x="47" fg:w="1"/><text x="4.0557%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.8057%" y="581" width="0.0810%" height="15" fill="rgb(226,22,26)" fg:x="47" fg:w="1"/><text x="4.0557%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.8866%" y="645" width="0.0810%" height="15" fill="rgb(217,163,10)" fg:x="48" fg:w="1"/><text x="4.1366%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.8866%" y="629" width="0.0810%" height="15" fill="rgb(213,25,53)" fg:x="48" fg:w="1"/><text x="4.1366%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.8866%" y="613" width="0.0810%" height="15" fill="rgb(252,105,26)" fg:x="48" fg:w="1"/><text x="4.1366%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.8866%" y="597" width="0.0810%" height="15" fill="rgb(220,39,43)" fg:x="48" fg:w="1"/><text x="4.1366%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8866%" y="581" width="0.0810%" height="15" fill="rgb(229,68,48)" fg:x="48" fg:w="1"/><text x="4.1366%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.8866%" y="565" width="0.0810%" height="15" fill="rgb(252,8,32)" fg:x="48" fg:w="1"/><text x="4.1366%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8866%" y="549" width="0.0810%" height="15" fill="rgb(223,20,43)" fg:x="48" fg:w="1"/><text x="4.1366%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.8866%" y="533" width="0.0810%" height="15" fill="rgb(229,81,49)" fg:x="48" fg:w="1"/><text x="4.1366%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8866%" y="517" width="0.0810%" height="15" fill="rgb(236,28,36)" fg:x="48" fg:w="1"/><text x="4.1366%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.8866%" y="501" width="0.0810%" height="15" fill="rgb(249,185,26)" fg:x="48" fg:w="1"/><text x="4.1366%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.8866%" y="485" width="0.0810%" height="15" fill="rgb(249,174,33)" fg:x="48" fg:w="1"/><text x="4.1366%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="3.8866%" y="677" width="0.1619%" height="15" fill="rgb(233,201,37)" fg:x="48" fg:w="2"/><text x="4.1366%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.8866%" y="661" width="0.1619%" height="15" fill="rgb(221,78,26)" fg:x="48" fg:w="2"/><text x="4.1366%" y="671.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="3.9676%" y="645" width="0.0810%" height="15" fill="rgb(250,127,30)" fg:x="49" fg:w="1"/><text x="4.2176%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.9676%" y="629" width="0.0810%" height="15" fill="rgb(230,49,44)" fg:x="49" fg:w="1"/><text x="4.2176%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="3.9676%" y="613" width="0.0810%" height="15" fill="rgb(229,67,23)" fg:x="49" fg:w="1"/><text x="4.2176%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.9676%" y="597" width="0.0810%" height="15" fill="rgb(249,83,47)" fg:x="49" fg:w="1"/><text x="4.2176%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.9676%" y="581" width="0.0810%" height="15" fill="rgb(215,43,3)" fg:x="49" fg:w="1"/><text x="4.2176%" y="591.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="4.0486%" y="581" width="0.0810%" height="15" fill="rgb(238,154,13)" fg:x="50" fg:w="1"/><text x="4.2986%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="4.0486%" y="565" width="0.0810%" height="15" fill="rgb(219,56,2)" fg:x="50" fg:w="1"/><text x="4.2986%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.0486%" y="549" width="0.0810%" height="15" fill="rgb(233,0,4)" fg:x="50" fg:w="1"/><text x="4.2986%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.0486%" y="533" width="0.0810%" height="15" fill="rgb(235,30,7)" fg:x="50" fg:w="1"/><text x="4.2986%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.0486%" y="517" width="0.0810%" height="15" fill="rgb(250,79,13)" fg:x="50" fg:w="1"/><text x="4.2986%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.0486%" y="501" width="0.0810%" height="15" fill="rgb(211,146,34)" fg:x="50" fg:w="1"/><text x="4.2986%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.0486%" y="485" width="0.0810%" height="15" fill="rgb(228,22,38)" fg:x="50" fg:w="1"/><text x="4.2986%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.0486%" y="469" width="0.0810%" height="15" fill="rgb(235,168,5)" fg:x="50" fg:w="1"/><text x="4.2986%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="4.0486%" y="453" width="0.0810%" height="15" fill="rgb(221,155,16)" fg:x="50" fg:w="1"/><text x="4.2986%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.0486%" y="437" width="0.0810%" height="15" fill="rgb(215,215,53)" fg:x="50" fg:w="1"/><text x="4.2986%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.0486%" y="597" width="0.1619%" height="15" fill="rgb(223,4,10)" fg:x="50" fg:w="2"/><text x="4.2986%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="4.1296%" y="581" width="0.0810%" height="15" fill="rgb(234,103,6)" fg:x="51" fg:w="1"/><text x="4.3796%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="4.1296%" y="565" width="0.0810%" height="15" fill="rgb(227,97,0)" fg:x="51" fg:w="1"/><text x="4.3796%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="4.1296%" y="549" width="0.0810%" height="15" fill="rgb(234,150,53)" fg:x="51" fg:w="1"/><text x="4.3796%" y="559.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="4.1296%" y="533" width="0.0810%" height="15" fill="rgb(228,201,54)" fg:x="51" fg:w="1"/><text x="4.3796%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.1296%" y="517" width="0.0810%" height="15" fill="rgb(222,22,37)" fg:x="51" fg:w="1"/><text x="4.3796%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="4.1296%" y="501" width="0.0810%" height="15" fill="rgb(237,53,32)" fg:x="51" fg:w="1"/><text x="4.3796%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2915%" y="501" width="0.0810%" height="15" fill="rgb(233,25,53)" fg:x="53" fg:w="1"/><text x="4.5415%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2915%" y="485" width="0.0810%" height="15" fill="rgb(210,40,34)" fg:x="53" fg:w="1"/><text x="4.5415%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2915%" y="469" width="0.0810%" height="15" fill="rgb(241,220,44)" fg:x="53" fg:w="1"/><text x="4.5415%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2915%" y="453" width="0.0810%" height="15" fill="rgb(235,28,35)" fg:x="53" fg:w="1"/><text x="4.5415%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="4.0486%" y="661" width="0.4049%" height="15" fill="rgb(210,56,17)" fg:x="50" fg:w="5"/><text x="4.2986%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="4.0486%" y="645" width="0.4049%" height="15" fill="rgb(224,130,29)" fg:x="50" fg:w="5"/><text x="4.2986%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.40%)</title><rect x="4.0486%" y="629" width="0.4049%" height="15" fill="rgb(235,212,8)" fg:x="50" fg:w="5"/><text x="4.2986%" y="639.50"></text></g><g><title>plugins_core::build::Build::leads_to (5 samples, 0.40%)</title><rect x="4.0486%" y="613" width="0.4049%" height="15" fill="rgb(223,33,50)" fg:x="50" fg:w="5"/><text x="4.2986%" y="623.50"></text></g><g><title>plugins_core::tools::leads_to (3 samples, 0.24%)</title><rect x="4.2105%" y="597" width="0.2429%" height="15" fill="rgb(219,149,13)" fg:x="52" fg:w="3"/><text x="4.4605%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="4.2915%" y="581" width="0.1619%" height="15" fill="rgb(250,156,29)" fg:x="53" fg:w="2"/><text x="4.5415%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="4.2915%" y="565" width="0.1619%" height="15" fill="rgb(216,193,19)" fg:x="53" fg:w="2"/><text x="4.5415%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="4.2915%" y="549" width="0.1619%" height="15" fill="rgb(216,135,14)" fg:x="53" fg:w="2"/><text x="4.5415%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.2915%" y="533" width="0.1619%" height="15" fill="rgb(241,47,5)" fg:x="53" fg:w="2"/><text x="4.5415%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.2915%" y="517" width="0.1619%" height="15" fill="rgb(233,42,35)" fg:x="53" fg:w="2"/><text x="4.5415%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.3725%" y="501" width="0.0810%" height="15" fill="rgb(231,13,6)" fg:x="54" fg:w="1"/><text x="4.6225%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.3725%" y="485" width="0.0810%" height="15" fill="rgb(207,181,40)" fg:x="54" fg:w="1"/><text x="4.6225%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.3725%" y="469" width="0.0810%" height="15" fill="rgb(254,173,49)" fg:x="54" fg:w="1"/><text x="4.6225%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.4534%" y="597" width="0.0810%" height="15" fill="rgb(221,1,38)" fg:x="55" fg:w="1"/><text x="4.7034%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="4.4534%" y="581" width="0.0810%" height="15" fill="rgb(206,124,46)" fg:x="55" fg:w="1"/><text x="4.7034%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="4.4534%" y="565" width="0.0810%" height="15" fill="rgb(249,21,11)" fg:x="55" fg:w="1"/><text x="4.7034%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4534%" y="549" width="0.0810%" height="15" fill="rgb(222,201,40)" fg:x="55" fg:w="1"/><text x="4.7034%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4534%" y="533" width="0.0810%" height="15" fill="rgb(235,61,29)" fg:x="55" fg:w="1"/><text x="4.7034%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.4534%" y="517" width="0.0810%" height="15" fill="rgb(219,207,3)" fg:x="55" fg:w="1"/><text x="4.7034%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.4534%" y="501" width="0.0810%" height="15" fill="rgb(222,56,46)" fg:x="55" fg:w="1"/><text x="4.7034%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.4534%" y="485" width="0.0810%" height="15" fill="rgb(239,76,54)" fg:x="55" fg:w="1"/><text x="4.7034%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="4.4534%" y="469" width="0.0810%" height="15" fill="rgb(231,124,27)" fg:x="55" fg:w="1"/><text x="4.7034%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.4534%" y="453" width="0.0810%" height="15" fill="rgb(249,195,6)" fg:x="55" fg:w="1"/><text x="4.7034%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="4.5344%" y="549" width="0.0810%" height="15" fill="rgb(237,174,47)" fg:x="56" fg:w="1"/><text x="4.7844%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.5344%" y="533" width="0.0810%" height="15" fill="rgb(206,201,31)" fg:x="56" fg:w="1"/><text x="4.7844%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5344%" y="517" width="0.0810%" height="15" fill="rgb(231,57,52)" fg:x="56" fg:w="1"/><text x="4.7844%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.5344%" y="501" width="0.0810%" height="15" fill="rgb(248,177,22)" fg:x="56" fg:w="1"/><text x="4.7844%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.5344%" y="485" width="0.0810%" height="15" fill="rgb(215,211,37)" fg:x="56" fg:w="1"/><text x="4.7844%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.5344%" y="469" width="0.0810%" height="15" fill="rgb(241,128,51)" fg:x="56" fg:w="1"/><text x="4.7844%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.5344%" y="453" width="0.0810%" height="15" fill="rgb(227,165,31)" fg:x="56" fg:w="1"/><text x="4.7844%" y="463.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="4.5344%" y="437" width="0.0810%" height="15" fill="rgb(228,167,24)" fg:x="56" fg:w="1"/><text x="4.7844%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.6154%" y="533" width="0.0810%" height="15" fill="rgb(228,143,12)" fg:x="57" fg:w="1"/><text x="4.8654%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6154%" y="517" width="0.0810%" height="15" fill="rgb(249,149,8)" fg:x="57" fg:w="1"/><text x="4.8654%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.6154%" y="501" width="0.0810%" height="15" fill="rgb(243,35,44)" fg:x="57" fg:w="1"/><text x="4.8654%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.6154%" y="485" width="0.0810%" height="15" fill="rgb(246,89,9)" fg:x="57" fg:w="1"/><text x="4.8654%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.6154%" y="469" width="0.0810%" height="15" fill="rgb(233,213,13)" fg:x="57" fg:w="1"/><text x="4.8654%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.6154%" y="453" width="0.0810%" height="15" fill="rgb(233,141,41)" fg:x="57" fg:w="1"/><text x="4.8654%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.6154%" y="437" width="0.0810%" height="15" fill="rgb(239,167,4)" fg:x="57" fg:w="1"/><text x="4.8654%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.6964%" y="485" width="0.0810%" height="15" fill="rgb(209,217,16)" fg:x="58" fg:w="1"/><text x="4.9464%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.6964%" y="501" width="0.1619%" height="15" fill="rgb(219,88,35)" fg:x="58" fg:w="2"/><text x="4.9464%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.7773%" y="485" width="0.0810%" height="15" fill="rgb(220,193,23)" fg:x="59" fg:w="1"/><text x="5.0273%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="4.6964%" y="517" width="0.2429%" height="15" fill="rgb(230,90,52)" fg:x="58" fg:w="3"/><text x="4.9464%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8583%" y="501" width="0.0810%" height="15" fill="rgb(252,106,19)" fg:x="60" fg:w="1"/><text x="5.1083%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.8583%" y="485" width="0.0810%" height="15" fill="rgb(206,74,20)" fg:x="60" fg:w="1"/><text x="5.1083%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.8583%" y="469" width="0.0810%" height="15" fill="rgb(230,138,44)" fg:x="60" fg:w="1"/><text x="5.1083%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.9393%" y="501" width="0.0810%" height="15" fill="rgb(235,182,43)" fg:x="61" fg:w="1"/><text x="5.1893%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.9393%" y="485" width="0.0810%" height="15" fill="rgb(242,16,51)" fg:x="61" fg:w="1"/><text x="5.1893%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.9393%" y="469" width="0.0810%" height="15" fill="rgb(248,9,4)" fg:x="61" fg:w="1"/><text x="5.1893%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.9393%" y="453" width="0.0810%" height="15" fill="rgb(210,31,22)" fg:x="61" fg:w="1"/><text x="5.1893%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.0202%" y="485" width="0.0810%" height="15" fill="rgb(239,54,39)" fg:x="62" fg:w="1"/><text x="5.2702%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.9393%" y="517" width="0.2429%" height="15" fill="rgb(230,99,41)" fg:x="61" fg:w="3"/><text x="5.1893%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.0202%" y="501" width="0.1619%" height="15" fill="rgb(253,106,12)" fg:x="62" fg:w="2"/><text x="5.2702%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1012%" y="485" width="0.0810%" height="15" fill="rgb(213,46,41)" fg:x="63" fg:w="1"/><text x="5.3512%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.1012%" y="469" width="0.0810%" height="15" fill="rgb(215,133,35)" fg:x="63" fg:w="1"/><text x="5.3512%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.1012%" y="453" width="0.0810%" height="15" fill="rgb(213,28,5)" fg:x="63" fg:w="1"/><text x="5.3512%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.1012%" y="437" width="0.0810%" height="15" fill="rgb(215,77,49)" fg:x="63" fg:w="1"/><text x="5.3512%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.1012%" y="421" width="0.0810%" height="15" fill="rgb(248,100,22)" fg:x="63" fg:w="1"/><text x="5.3512%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.73%)</title><rect x="4.5344%" y="565" width="0.7287%" height="15" fill="rgb(208,67,9)" fg:x="56" fg:w="9"/><text x="4.7844%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="4.6154%" y="549" width="0.6478%" height="15" fill="rgb(219,133,21)" fg:x="57" fg:w="8"/><text x="4.8654%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="4.6964%" y="533" width="0.5668%" height="15" fill="rgb(246,46,29)" fg:x="58" fg:w="7"/><text x="4.9464%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.1822%" y="517" width="0.0810%" height="15" fill="rgb(246,185,52)" fg:x="64" fg:w="1"/><text x="5.4322%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.1822%" y="501" width="0.0810%" height="15" fill="rgb(252,136,11)" fg:x="64" fg:w="1"/><text x="5.4322%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.1822%" y="485" width="0.0810%" height="15" fill="rgb(219,138,53)" fg:x="64" fg:w="1"/><text x="5.4322%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.2632%" y="517" width="0.0810%" height="15" fill="rgb(211,51,23)" fg:x="65" fg:w="1"/><text x="5.5132%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.2632%" y="565" width="0.1619%" height="15" fill="rgb(247,221,28)" fg:x="65" fg:w="2"/><text x="5.5132%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="5.2632%" y="549" width="0.1619%" height="15" fill="rgb(251,222,45)" fg:x="65" fg:w="2"/><text x="5.5132%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.2632%" y="533" width="0.1619%" height="15" fill="rgb(217,162,53)" fg:x="65" fg:w="2"/><text x="5.5132%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.3441%" y="517" width="0.0810%" height="15" fill="rgb(229,93,14)" fg:x="66" fg:w="1"/><text x="5.5941%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.3441%" y="501" width="0.0810%" height="15" fill="rgb(209,67,49)" fg:x="66" fg:w="1"/><text x="5.5941%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.3441%" y="485" width="0.0810%" height="15" fill="rgb(213,87,29)" fg:x="66" fg:w="1"/><text x="5.5941%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.3441%" y="469" width="0.0810%" height="15" fill="rgb(205,151,52)" fg:x="66" fg:w="1"/><text x="5.5941%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.3441%" y="453" width="0.0810%" height="15" fill="rgb(253,215,39)" fg:x="66" fg:w="1"/><text x="5.5941%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4251%" y="517" width="0.0810%" height="15" fill="rgb(221,220,41)" fg:x="67" fg:w="1"/><text x="5.6751%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.4251%" y="501" width="0.0810%" height="15" fill="rgb(218,133,21)" fg:x="67" fg:w="1"/><text x="5.6751%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4251%" y="485" width="0.0810%" height="15" fill="rgb(221,193,43)" fg:x="67" fg:w="1"/><text x="5.6751%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4251%" y="469" width="0.0810%" height="15" fill="rgb(240,128,52)" fg:x="67" fg:w="1"/><text x="5.6751%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4251%" y="453" width="0.0810%" height="15" fill="rgb(253,114,12)" fg:x="67" fg:w="1"/><text x="5.6751%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5061%" y="517" width="0.0810%" height="15" fill="rgb(215,223,47)" fg:x="68" fg:w="1"/><text x="5.7561%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.5061%" y="501" width="0.0810%" height="15" fill="rgb(248,225,23)" fg:x="68" fg:w="1"/><text x="5.7561%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5061%" y="485" width="0.0810%" height="15" fill="rgb(250,108,0)" fg:x="68" fg:w="1"/><text x="5.7561%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.6680%" y="469" width="0.0810%" height="15" fill="rgb(228,208,7)" fg:x="70" fg:w="1"/><text x="5.9180%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6680%" y="453" width="0.0810%" height="15" fill="rgb(244,45,10)" fg:x="70" fg:w="1"/><text x="5.9180%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.6680%" y="437" width="0.0810%" height="15" fill="rgb(207,125,25)" fg:x="70" fg:w="1"/><text x="5.9180%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.6680%" y="485" width="0.2429%" height="15" fill="rgb(210,195,18)" fg:x="70" fg:w="3"/><text x="5.9180%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.7490%" y="469" width="0.1619%" height="15" fill="rgb(249,80,12)" fg:x="71" fg:w="2"/><text x="5.9990%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.7490%" y="453" width="0.1619%" height="15" fill="rgb(221,65,9)" fg:x="71" fg:w="2"/><text x="5.9990%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.7490%" y="437" width="0.1619%" height="15" fill="rgb(235,49,36)" fg:x="71" fg:w="2"/><text x="5.9990%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.8300%" y="421" width="0.0810%" height="15" fill="rgb(225,32,20)" fg:x="72" fg:w="1"/><text x="6.0800%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.8300%" y="405" width="0.0810%" height="15" fill="rgb(215,141,46)" fg:x="72" fg:w="1"/><text x="6.0800%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.8300%" y="389" width="0.0810%" height="15" fill="rgb(250,160,47)" fg:x="72" fg:w="1"/><text x="6.0800%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.8300%" y="373" width="0.0810%" height="15" fill="rgb(216,222,40)" fg:x="72" fg:w="1"/><text x="6.0800%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8300%" y="357" width="0.0810%" height="15" fill="rgb(234,217,39)" fg:x="72" fg:w="1"/><text x="6.0800%" y="367.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.54%)</title><rect x="4.4534%" y="661" width="1.5385%" height="15" fill="rgb(207,178,40)" fg:x="55" fg:w="19"/><text x="4.7034%" y="671.50"></text></g><g><title>engine::session::Session::save_changes (19 samples, 1.54%)</title><rect x="4.4534%" y="645" width="1.5385%" height="15" fill="rgb(221,136,13)" fg:x="55" fg:w="19"/><text x="4.7034%" y="655.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.54%)</title><rect x="4.4534%" y="629" width="1.5385%" height="15" fill="rgb(249,199,10)" fg:x="55" fg:w="19"/><text x="4.7034%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.54%)</title><rect x="4.4534%" y="613" width="1.5385%" height="15" fill="rgb(249,222,13)" fg:x="55" fg:w="19"/><text x="4.7034%" y="623.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (18 samples, 1.46%)</title><rect x="4.5344%" y="597" width="1.4575%" height="15" fill="rgb(244,185,38)" fg:x="56" fg:w="18"/><text x="4.7844%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.46%)</title><rect x="4.5344%" y="581" width="1.4575%" height="15" fill="rgb(236,202,9)" fg:x="56" fg:w="18"/><text x="4.7844%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.57%)</title><rect x="5.4251%" y="565" width="0.5668%" height="15" fill="rgb(250,229,37)" fg:x="67" fg:w="7"/><text x="5.6751%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="5.4251%" y="549" width="0.5668%" height="15" fill="rgb(206,174,23)" fg:x="67" fg:w="7"/><text x="5.6751%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="5.4251%" y="533" width="0.5668%" height="15" fill="rgb(211,33,43)" fg:x="67" fg:w="7"/><text x="5.6751%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="5.5870%" y="517" width="0.4049%" height="15" fill="rgb(245,58,50)" fg:x="69" fg:w="5"/><text x="5.8370%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="5.6680%" y="501" width="0.3239%" height="15" fill="rgb(244,68,36)" fg:x="70" fg:w="4"/><text x="5.9180%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.9109%" y="485" width="0.0810%" height="15" fill="rgb(232,229,15)" fg:x="73" fg:w="1"/><text x="6.1609%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.9919%" y="629" width="0.0810%" height="15" fill="rgb(254,30,23)" fg:x="74" fg:w="1"/><text x="6.2419%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.9919%" y="613" width="0.0810%" height="15" fill="rgb(235,160,14)" fg:x="74" fg:w="1"/><text x="6.2419%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.9919%" y="597" width="0.0810%" height="15" fill="rgb(212,155,44)" fg:x="74" fg:w="1"/><text x="6.2419%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9919%" y="581" width="0.0810%" height="15" fill="rgb(226,2,50)" fg:x="74" fg:w="1"/><text x="6.2419%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9919%" y="565" width="0.0810%" height="15" fill="rgb(234,177,6)" fg:x="74" fg:w="1"/><text x="6.2419%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9919%" y="549" width="0.0810%" height="15" fill="rgb(217,24,9)" fg:x="74" fg:w="1"/><text x="6.2419%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9919%" y="533" width="0.0810%" height="15" fill="rgb(220,13,46)" fg:x="74" fg:w="1"/><text x="6.2419%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9919%" y="517" width="0.0810%" height="15" fill="rgb(239,221,27)" fg:x="74" fg:w="1"/><text x="6.2419%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9919%" y="501" width="0.0810%" height="15" fill="rgb(222,198,25)" fg:x="74" fg:w="1"/><text x="6.2419%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9919%" y="485" width="0.0810%" height="15" fill="rgb(211,99,13)" fg:x="74" fg:w="1"/><text x="6.2419%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.9919%" y="469" width="0.0810%" height="15" fill="rgb(232,111,31)" fg:x="74" fg:w="1"/><text x="6.2419%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.9919%" y="453" width="0.0810%" height="15" fill="rgb(245,82,37)" fg:x="74" fg:w="1"/><text x="6.2419%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.9919%" y="437" width="0.0810%" height="15" fill="rgb(227,149,46)" fg:x="74" fg:w="1"/><text x="6.2419%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="5.9919%" y="421" width="0.0810%" height="15" fill="rgb(218,36,50)" fg:x="74" fg:w="1"/><text x="6.2419%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="5.9919%" y="405" width="0.0810%" height="15" fill="rgb(226,80,48)" fg:x="74" fg:w="1"/><text x="6.2419%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.9919%" y="645" width="0.1619%" height="15" fill="rgb(238,224,15)" fg:x="74" fg:w="2"/><text x="6.2419%" y="655.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="6.0729%" y="629" width="0.0810%" height="15" fill="rgb(241,136,10)" fg:x="75" fg:w="1"/><text x="6.3229%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.0729%" y="613" width="0.0810%" height="15" fill="rgb(208,32,45)" fg:x="75" fg:w="1"/><text x="6.3229%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="6.0729%" y="597" width="0.0810%" height="15" fill="rgb(207,135,9)" fg:x="75" fg:w="1"/><text x="6.3229%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.0729%" y="581" width="0.0810%" height="15" fill="rgb(206,86,44)" fg:x="75" fg:w="1"/><text x="6.3229%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0729%" y="565" width="0.0810%" height="15" fill="rgb(245,177,15)" fg:x="75" fg:w="1"/><text x="6.3229%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.1538%" y="533" width="0.1619%" height="15" fill="rgb(206,64,50)" fg:x="76" fg:w="2"/><text x="6.4038%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.1538%" y="517" width="0.1619%" height="15" fill="rgb(234,36,40)" fg:x="76" fg:w="2"/><text x="6.4038%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.1538%" y="501" width="0.1619%" height="15" fill="rgb(213,64,8)" fg:x="76" fg:w="2"/><text x="6.4038%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2348%" y="485" width="0.0810%" height="15" fill="rgb(210,75,36)" fg:x="77" fg:w="1"/><text x="6.4848%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.2348%" y="469" width="0.0810%" height="15" fill="rgb(229,88,21)" fg:x="77" fg:w="1"/><text x="6.4848%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.2348%" y="453" width="0.0810%" height="15" fill="rgb(252,204,47)" fg:x="77" fg:w="1"/><text x="6.4848%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.2348%" y="437" width="0.0810%" height="15" fill="rgb(208,77,27)" fg:x="77" fg:w="1"/><text x="6.4848%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.2348%" y="421" width="0.0810%" height="15" fill="rgb(221,76,26)" fg:x="77" fg:w="1"/><text x="6.4848%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.2348%" y="405" width="0.0810%" height="15" fill="rgb(225,139,18)" fg:x="77" fg:w="1"/><text x="6.4848%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.2348%" y="389" width="0.0810%" height="15" fill="rgb(230,137,11)" fg:x="77" fg:w="1"/><text x="6.4848%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.2348%" y="373" width="0.0810%" height="15" fill="rgb(212,28,1)" fg:x="77" fg:w="1"/><text x="6.4848%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.2348%" y="357" width="0.0810%" height="15" fill="rgb(248,164,17)" fg:x="77" fg:w="1"/><text x="6.4848%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.2348%" y="341" width="0.0810%" height="15" fill="rgb(222,171,42)" fg:x="77" fg:w="1"/><text x="6.4848%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.2348%" y="325" width="0.0810%" height="15" fill="rgb(243,84,45)" fg:x="77" fg:w="1"/><text x="6.4848%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.2348%" y="309" width="0.0810%" height="15" fill="rgb(252,49,23)" fg:x="77" fg:w="1"/><text x="6.4848%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2348%" y="293" width="0.0810%" height="15" fill="rgb(215,19,7)" fg:x="77" fg:w="1"/><text x="6.4848%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="6.1538%" y="549" width="0.2429%" height="15" fill="rgb(238,81,41)" fg:x="76" fg:w="3"/><text x="6.4038%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3158%" y="533" width="0.0810%" height="15" fill="rgb(210,199,37)" fg:x="78" fg:w="1"/><text x="6.5658%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3158%" y="517" width="0.0810%" height="15" fill="rgb(244,192,49)" fg:x="78" fg:w="1"/><text x="6.5658%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.3158%" y="501" width="0.0810%" height="15" fill="rgb(226,211,11)" fg:x="78" fg:w="1"/><text x="6.5658%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.3158%" y="485" width="0.0810%" height="15" fill="rgb(236,162,54)" fg:x="78" fg:w="1"/><text x="6.5658%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.3158%" y="469" width="0.0810%" height="15" fill="rgb(220,229,9)" fg:x="78" fg:w="1"/><text x="6.5658%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3158%" y="453" width="0.0810%" height="15" fill="rgb(250,87,22)" fg:x="78" fg:w="1"/><text x="6.5658%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3158%" y="437" width="0.0810%" height="15" fill="rgb(239,43,17)" fg:x="78" fg:w="1"/><text x="6.5658%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.3158%" y="421" width="0.0810%" height="15" fill="rgb(231,177,25)" fg:x="78" fg:w="1"/><text x="6.5658%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.3158%" y="405" width="0.0810%" height="15" fill="rgb(219,179,1)" fg:x="78" fg:w="1"/><text x="6.5658%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.3158%" y="389" width="0.0810%" height="15" fill="rgb(238,219,53)" fg:x="78" fg:w="1"/><text x="6.5658%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.3158%" y="373" width="0.0810%" height="15" fill="rgb(232,167,36)" fg:x="78" fg:w="1"/><text x="6.5658%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3158%" y="357" width="0.0810%" height="15" fill="rgb(244,19,51)" fg:x="78" fg:w="1"/><text x="6.5658%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.3968%" y="453" width="0.0810%" height="15" fill="rgb(224,6,22)" fg:x="79" fg:w="1"/><text x="6.6468%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.3968%" y="437" width="0.0810%" height="15" fill="rgb(224,145,5)" fg:x="79" fg:w="1"/><text x="6.6468%" y="447.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (5 samples, 0.40%)</title><rect x="6.1538%" y="629" width="0.4049%" height="15" fill="rgb(234,130,49)" fg:x="76" fg:w="5"/><text x="6.4038%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (5 samples, 0.40%)</title><rect x="6.1538%" y="613" width="0.4049%" height="15" fill="rgb(254,6,2)" fg:x="76" fg:w="5"/><text x="6.4038%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.40%)</title><rect x="6.1538%" y="597" width="0.4049%" height="15" fill="rgb(208,96,46)" fg:x="76" fg:w="5"/><text x="6.4038%" y="607.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="6.1538%" y="581" width="0.4049%" height="15" fill="rgb(239,3,39)" fg:x="76" fg:w="5"/><text x="6.4038%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="6.1538%" y="565" width="0.4049%" height="15" fill="rgb(233,210,1)" fg:x="76" fg:w="5"/><text x="6.4038%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="6.3968%" y="549" width="0.1619%" height="15" fill="rgb(244,137,37)" fg:x="79" fg:w="2"/><text x="6.6468%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="6.3968%" y="533" width="0.1619%" height="15" fill="rgb(240,136,2)" fg:x="79" fg:w="2"/><text x="6.6468%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="6.3968%" y="517" width="0.1619%" height="15" fill="rgb(239,18,37)" fg:x="79" fg:w="2"/><text x="6.6468%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="6.3968%" y="501" width="0.1619%" height="15" fill="rgb(218,185,22)" fg:x="79" fg:w="2"/><text x="6.6468%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="6.3968%" y="485" width="0.1619%" height="15" fill="rgb(225,218,4)" fg:x="79" fg:w="2"/><text x="6.6468%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="6.3968%" y="469" width="0.1619%" height="15" fill="rgb(230,182,32)" fg:x="79" fg:w="2"/><text x="6.6468%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.4777%" y="453" width="0.0810%" height="15" fill="rgb(242,56,43)" fg:x="80" fg:w="1"/><text x="6.7277%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.4777%" y="437" width="0.0810%" height="15" fill="rgb(233,99,24)" fg:x="80" fg:w="1"/><text x="6.7277%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.4777%" y="421" width="0.0810%" height="15" fill="rgb(234,209,42)" fg:x="80" fg:w="1"/><text x="6.7277%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.4777%" y="405" width="0.0810%" height="15" fill="rgb(227,7,12)" fg:x="80" fg:w="1"/><text x="6.7277%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="6.4777%" y="389" width="0.0810%" height="15" fill="rgb(245,203,43)" fg:x="80" fg:w="1"/><text x="6.7277%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="6.4777%" y="373" width="0.0810%" height="15" fill="rgb(238,205,33)" fg:x="80" fg:w="1"/><text x="6.7277%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5587%" y="613" width="0.0810%" height="15" fill="rgb(231,56,7)" fg:x="81" fg:w="1"/><text x="6.8087%" y="623.50"></text></g><g><title>plugins_core::build::Build::holding (9 samples, 0.73%)</title><rect x="5.9919%" y="661" width="0.7287%" height="15" fill="rgb(244,186,29)" fg:x="74" fg:w="9"/><text x="6.2419%" y="671.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.57%)</title><rect x="6.1538%" y="645" width="0.5668%" height="15" fill="rgb(234,111,31)" fg:x="76" fg:w="7"/><text x="6.4038%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="6.5587%" y="629" width="0.1619%" height="15" fill="rgb(241,149,10)" fg:x="81" fg:w="2"/><text x="6.8087%" y="639.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="6.6397%" y="613" width="0.0810%" height="15" fill="rgb(249,206,44)" fg:x="82" fg:w="1"/><text x="6.8897%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.6397%" y="597" width="0.0810%" height="15" fill="rgb(251,153,30)" fg:x="82" fg:w="1"/><text x="6.8897%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.6397%" y="581" width="0.0810%" height="15" fill="rgb(239,152,38)" fg:x="82" fg:w="1"/><text x="6.8897%" y="591.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.7206%" y="661" width="0.0810%" height="15" fill="rgb(249,139,47)" fg:x="83" fg:w="1"/><text x="6.9706%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.7206%" y="645" width="0.0810%" height="15" fill="rgb(244,64,35)" fg:x="83" fg:w="1"/><text x="6.9706%" y="655.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="6.7206%" y="629" width="0.0810%" height="15" fill="rgb(216,46,15)" fg:x="83" fg:w="1"/><text x="6.9706%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.7206%" y="613" width="0.0810%" height="15" fill="rgb(250,74,19)" fg:x="83" fg:w="1"/><text x="6.9706%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="6.8016%" y="629" width="0.0810%" height="15" fill="rgb(249,42,33)" fg:x="84" fg:w="1"/><text x="7.0516%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="6.8016%" y="613" width="0.0810%" height="15" fill="rgb(242,149,17)" fg:x="84" fg:w="1"/><text x="7.0516%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="6.8016%" y="597" width="0.0810%" height="15" fill="rgb(244,29,21)" fg:x="84" fg:w="1"/><text x="7.0516%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="6.8016%" y="581" width="0.0810%" height="15" fill="rgb(220,130,37)" fg:x="84" fg:w="1"/><text x="7.0516%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.8016%" y="565" width="0.0810%" height="15" fill="rgb(211,67,2)" fg:x="84" fg:w="1"/><text x="7.0516%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.8016%" y="549" width="0.0810%" height="15" fill="rgb(235,68,52)" fg:x="84" fg:w="1"/><text x="7.0516%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="6.8016%" y="533" width="0.0810%" height="15" fill="rgb(246,142,3)" fg:x="84" fg:w="1"/><text x="7.0516%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="6.8016%" y="517" width="0.0810%" height="15" fill="rgb(241,25,7)" fg:x="84" fg:w="1"/><text x="7.0516%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.8016%" y="501" width="0.0810%" height="15" fill="rgb(242,119,39)" fg:x="84" fg:w="1"/><text x="7.0516%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.8016%" y="485" width="0.0810%" height="15" fill="rgb(241,98,45)" fg:x="84" fg:w="1"/><text x="7.0516%" y="495.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="6.8016%" y="469" width="0.0810%" height="15" fill="rgb(254,28,30)" fg:x="84" fg:w="1"/><text x="7.0516%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.8016%" y="645" width="0.1619%" height="15" fill="rgb(241,142,54)" fg:x="84" fg:w="2"/><text x="7.0516%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.8826%" y="629" width="0.0810%" height="15" fill="rgb(222,85,15)" fg:x="85" fg:w="1"/><text x="7.1326%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.8826%" y="613" width="0.0810%" height="15" fill="rgb(210,85,47)" fg:x="85" fg:w="1"/><text x="7.1326%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.8826%" y="597" width="0.0810%" height="15" fill="rgb(224,206,25)" fg:x="85" fg:w="1"/><text x="7.1326%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.8826%" y="581" width="0.0810%" height="15" fill="rgb(243,201,19)" fg:x="85" fg:w="1"/><text x="7.1326%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.8826%" y="565" width="0.0810%" height="15" fill="rgb(236,59,4)" fg:x="85" fg:w="1"/><text x="7.1326%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8826%" y="549" width="0.0810%" height="15" fill="rgb(254,179,45)" fg:x="85" fg:w="1"/><text x="7.1326%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.8826%" y="533" width="0.0810%" height="15" fill="rgb(226,14,10)" fg:x="85" fg:w="1"/><text x="7.1326%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8826%" y="517" width="0.0810%" height="15" fill="rgb(244,27,41)" fg:x="85" fg:w="1"/><text x="7.1326%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.8826%" y="501" width="0.0810%" height="15" fill="rgb(235,35,32)" fg:x="85" fg:w="1"/><text x="7.1326%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.8826%" y="485" width="0.0810%" height="15" fill="rgb(218,68,31)" fg:x="85" fg:w="1"/><text x="7.1326%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8826%" y="469" width="0.0810%" height="15" fill="rgb(207,120,37)" fg:x="85" fg:w="1"/><text x="7.1326%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.8826%" y="453" width="0.0810%" height="15" fill="rgb(227,98,0)" fg:x="85" fg:w="1"/><text x="7.1326%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8826%" y="437" width="0.0810%" height="15" fill="rgb(207,7,3)" fg:x="85" fg:w="1"/><text x="7.1326%" y="447.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.9636%" y="629" width="0.0810%" height="15" fill="rgb(206,98,19)" fg:x="86" fg:w="1"/><text x="7.2136%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.9636%" y="613" width="0.0810%" height="15" fill="rgb(217,5,26)" fg:x="86" fg:w="1"/><text x="7.2136%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.9636%" y="597" width="0.0810%" height="15" fill="rgb(235,190,38)" fg:x="86" fg:w="1"/><text x="7.2136%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (38 samples, 3.08%)</title><rect x="4.0486%" y="677" width="3.0769%" height="15" fill="rgb(247,86,24)" fg:x="50" fg:w="38"/><text x="4.2986%" y="687.50">plu..</text></g><g><title>plugins_core::build::Build::occupying (4 samples, 0.32%)</title><rect x="6.8016%" y="661" width="0.3239%" height="15" fill="rgb(205,101,16)" fg:x="84" fg:w="4"/><text x="7.0516%" y="671.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="6.9636%" y="645" width="0.1619%" height="15" fill="rgb(246,168,33)" fg:x="86" fg:w="2"/><text x="7.2136%" y="655.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="7.0445%" y="629" width="0.0810%" height="15" fill="rgb(231,114,1)" fg:x="87" fg:w="1"/><text x="7.2945%" y="639.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="7.0445%" y="613" width="0.0810%" height="15" fill="rgb(207,184,53)" fg:x="87" fg:w="1"/><text x="7.2945%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.0445%" y="597" width="0.0810%" height="15" fill="rgb(224,95,51)" fg:x="87" fg:w="1"/><text x="7.2945%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.0445%" y="581" width="0.0810%" height="15" fill="rgb(212,188,45)" fg:x="87" fg:w="1"/><text x="7.2945%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.0445%" y="565" width="0.0810%" height="15" fill="rgb(223,154,38)" fg:x="87" fg:w="1"/><text x="7.2945%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.0445%" y="549" width="0.0810%" height="15" fill="rgb(251,22,52)" fg:x="87" fg:w="1"/><text x="7.2945%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0445%" y="533" width="0.0810%" height="15" fill="rgb(229,209,22)" fg:x="87" fg:w="1"/><text x="7.2945%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0445%" y="517" width="0.0810%" height="15" fill="rgb(234,138,34)" fg:x="87" fg:w="1"/><text x="7.2945%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0445%" y="501" width="0.0810%" height="15" fill="rgb(212,95,11)" fg:x="87" fg:w="1"/><text x="7.2945%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0445%" y="485" width="0.0810%" height="15" fill="rgb(240,179,47)" fg:x="87" fg:w="1"/><text x="7.2945%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.0445%" y="469" width="0.0810%" height="15" fill="rgb(240,163,11)" fg:x="87" fg:w="1"/><text x="7.2945%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0445%" y="453" width="0.0810%" height="15" fill="rgb(236,37,12)" fg:x="87" fg:w="1"/><text x="7.2945%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0445%" y="437" width="0.0810%" height="15" fill="rgb(232,164,16)" fg:x="87" fg:w="1"/><text x="7.2945%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0445%" y="421" width="0.0810%" height="15" fill="rgb(244,205,15)" fg:x="87" fg:w="1"/><text x="7.2945%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0445%" y="405" width="0.0810%" height="15" fill="rgb(223,117,47)" fg:x="87" fg:w="1"/><text x="7.2945%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0445%" y="389" width="0.0810%" height="15" fill="rgb(244,107,35)" fg:x="87" fg:w="1"/><text x="7.2945%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="7.0445%" y="373" width="0.0810%" height="15" fill="rgb(205,140,8)" fg:x="87" fg:w="1"/><text x="7.2945%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="7.0445%" y="357" width="0.0810%" height="15" fill="rgb(228,84,46)" fg:x="87" fg:w="1"/><text x="7.2945%" y="367.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="7.0445%" y="341" width="0.0810%" height="15" fill="rgb(254,188,9)" fg:x="87" fg:w="1"/><text x="7.2945%" y="351.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="7.1255%" y="677" width="0.0810%" height="15" fill="rgb(206,112,54)" fg:x="88" fg:w="1"/><text x="7.3755%" y="687.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="7.1255%" y="661" width="0.0810%" height="15" fill="rgb(216,84,49)" fg:x="88" fg:w="1"/><text x="7.3755%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.1255%" y="645" width="0.0810%" height="15" fill="rgb(214,194,35)" fg:x="88" fg:w="1"/><text x="7.3755%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.1255%" y="629" width="0.0810%" height="15" fill="rgb(249,28,3)" fg:x="88" fg:w="1"/><text x="7.3755%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.1255%" y="613" width="0.0810%" height="15" fill="rgb(222,56,52)" fg:x="88" fg:w="1"/><text x="7.3755%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.1255%" y="597" width="0.0810%" height="15" fill="rgb(245,217,50)" fg:x="88" fg:w="1"/><text x="7.3755%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (1 samples, 0.08%)</title><rect x="7.2065%" y="677" width="0.0810%" height="15" fill="rgb(213,201,24)" fg:x="89" fg:w="1"/><text x="7.4565%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.2065%" y="661" width="0.0810%" height="15" fill="rgb(248,116,28)" fg:x="89" fg:w="1"/><text x="7.4565%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.2065%" y="645" width="0.0810%" height="15" fill="rgb(219,72,43)" fg:x="89" fg:w="1"/><text x="7.4565%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.2065%" y="629" width="0.0810%" height="15" fill="rgb(209,138,14)" fg:x="89" fg:w="1"/><text x="7.4565%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.2065%" y="613" width="0.0810%" height="15" fill="rgb(222,18,33)" fg:x="89" fg:w="1"/><text x="7.4565%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2065%" y="597" width="0.0810%" height="15" fill="rgb(213,199,7)" fg:x="89" fg:w="1"/><text x="7.4565%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2065%" y="581" width="0.0810%" height="15" fill="rgb(250,110,10)" fg:x="89" fg:w="1"/><text x="7.4565%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2065%" y="565" width="0.0810%" height="15" fill="rgb(248,123,6)" fg:x="89" fg:w="1"/><text x="7.4565%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2065%" y="549" width="0.0810%" height="15" fill="rgb(206,91,31)" fg:x="89" fg:w="1"/><text x="7.4565%" y="559.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (72 samples, 5.83%)</title><rect x="1.5385%" y="693" width="5.8300%" height="15" fill="rgb(211,154,13)" fg:x="19" fg:w="72"/><text x="1.7885%" y="703.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::route (1 samples, 0.08%)</title><rect x="7.2874%" y="677" width="0.0810%" height="15" fill="rgb(225,148,7)" fg:x="90" fg:w="1"/><text x="7.5374%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.2874%" y="661" width="0.0810%" height="15" fill="rgb(220,160,43)" fg:x="90" fg:w="1"/><text x="7.5374%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="7.3684%" y="693" width="0.0810%" height="15" fill="rgb(213,52,39)" fg:x="91" fg:w="1"/><text x="7.6184%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="7.3684%" y="677" width="0.0810%" height="15" fill="rgb(243,137,7)" fg:x="91" fg:w="1"/><text x="7.6184%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3684%" y="661" width="0.0810%" height="15" fill="rgb(230,79,13)" fg:x="91" fg:w="1"/><text x="7.6184%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="7.5304%" y="677" width="0.1619%" height="15" fill="rgb(247,105,23)" fg:x="93" fg:w="2"/><text x="7.7804%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.5304%" y="661" width="0.1619%" height="15" fill="rgb(223,179,41)" fg:x="93" fg:w="2"/><text x="7.7804%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.6113%" y="645" width="0.0810%" height="15" fill="rgb(218,9,34)" fg:x="94" fg:w="1"/><text x="7.8613%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8543%" y="581" width="0.0810%" height="15" fill="rgb(222,106,8)" fg:x="97" fg:w="1"/><text x="8.1043%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.9352%" y="549" width="0.0810%" height="15" fill="rgb(211,220,0)" fg:x="98" fg:w="1"/><text x="8.1852%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.9352%" y="533" width="0.0810%" height="15" fill="rgb(229,52,16)" fg:x="98" fg:w="1"/><text x="8.1852%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.9352%" y="517" width="0.0810%" height="15" fill="rgb(212,155,18)" fg:x="98" fg:w="1"/><text x="8.1852%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.9352%" y="565" width="0.1619%" height="15" fill="rgb(242,21,14)" fg:x="98" fg:w="2"/><text x="8.1852%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0162%" y="549" width="0.0810%" height="15" fill="rgb(222,19,48)" fg:x="99" fg:w="1"/><text x="8.2662%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.9352%" y="581" width="0.2429%" height="15" fill="rgb(232,45,27)" fg:x="98" fg:w="3"/><text x="8.1852%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0972%" y="565" width="0.0810%" height="15" fill="rgb(249,103,42)" fg:x="100" fg:w="1"/><text x="8.3472%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="7.8543%" y="613" width="0.4049%" height="15" fill="rgb(246,81,33)" fg:x="97" fg:w="5"/><text x="8.1043%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="7.8543%" y="597" width="0.4049%" height="15" fill="rgb(252,33,42)" fg:x="97" fg:w="5"/><text x="8.1043%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1781%" y="581" width="0.0810%" height="15" fill="rgb(209,212,41)" fg:x="101" fg:w="1"/><text x="8.4281%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.1781%" y="565" width="0.0810%" height="15" fill="rgb(207,154,6)" fg:x="101" fg:w="1"/><text x="8.4281%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2591%" y="549" width="0.0810%" height="15" fill="rgb(223,64,47)" fg:x="102" fg:w="1"/><text x="8.5091%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2591%" y="613" width="0.1619%" height="15" fill="rgb(211,161,38)" fg:x="102" fg:w="2"/><text x="8.5091%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="8.2591%" y="597" width="0.1619%" height="15" fill="rgb(219,138,40)" fg:x="102" fg:w="2"/><text x="8.5091%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2591%" y="581" width="0.1619%" height="15" fill="rgb(241,228,46)" fg:x="102" fg:w="2"/><text x="8.5091%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2591%" y="565" width="0.1619%" height="15" fill="rgb(223,209,38)" fg:x="102" fg:w="2"/><text x="8.5091%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3401%" y="549" width="0.0810%" height="15" fill="rgb(236,164,45)" fg:x="103" fg:w="1"/><text x="8.5901%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="8.3401%" y="533" width="0.0810%" height="15" fill="rgb(231,15,5)" fg:x="103" fg:w="1"/><text x="8.5901%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.3401%" y="517" width="0.0810%" height="15" fill="rgb(252,35,15)" fg:x="103" fg:w="1"/><text x="8.5901%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.4211%" y="549" width="0.0810%" height="15" fill="rgb(248,181,18)" fg:x="104" fg:w="1"/><text x="8.6711%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.5020%" y="517" width="0.0810%" height="15" fill="rgb(233,39,42)" fg:x="105" fg:w="1"/><text x="8.7520%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.4211%" y="581" width="0.3239%" height="15" fill="rgb(238,110,33)" fg:x="104" fg:w="4"/><text x="8.6711%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="8.4211%" y="565" width="0.3239%" height="15" fill="rgb(233,195,10)" fg:x="104" fg:w="4"/><text x="8.6711%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.5020%" y="549" width="0.2429%" height="15" fill="rgb(254,105,3)" fg:x="105" fg:w="3"/><text x="8.7520%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.5020%" y="533" width="0.2429%" height="15" fill="rgb(221,225,9)" fg:x="105" fg:w="3"/><text x="8.7520%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.5830%" y="517" width="0.1619%" height="15" fill="rgb(224,227,45)" fg:x="106" fg:w="2"/><text x="8.8330%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.6640%" y="501" width="0.0810%" height="15" fill="rgb(229,198,43)" fg:x="107" fg:w="1"/><text x="8.9140%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6640%" y="485" width="0.0810%" height="15" fill="rgb(206,209,35)" fg:x="107" fg:w="1"/><text x="8.9140%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="8.7449%" y="517" width="0.0810%" height="15" fill="rgb(245,195,53)" fg:x="108" fg:w="1"/><text x="8.9949%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.7449%" y="501" width="0.0810%" height="15" fill="rgb(240,92,26)" fg:x="108" fg:w="1"/><text x="8.9949%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.49%)</title><rect x="8.4211%" y="597" width="0.4858%" height="15" fill="rgb(207,40,23)" fg:x="104" fg:w="6"/><text x="8.6711%" y="607.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="8.7449%" y="581" width="0.1619%" height="15" fill="rgb(223,111,35)" fg:x="108" fg:w="2"/><text x="8.9949%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="8.7449%" y="565" width="0.1619%" height="15" fill="rgb(229,147,28)" fg:x="108" fg:w="2"/><text x="8.9949%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="8.7449%" y="549" width="0.1619%" height="15" fill="rgb(211,29,28)" fg:x="108" fg:w="2"/><text x="8.9949%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="8.7449%" y="533" width="0.1619%" height="15" fill="rgb(228,72,33)" fg:x="108" fg:w="2"/><text x="8.9949%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8259%" y="517" width="0.0810%" height="15" fill="rgb(205,214,31)" fg:x="109" fg:w="1"/><text x="9.0759%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8259%" y="501" width="0.0810%" height="15" fill="rgb(224,111,15)" fg:x="109" fg:w="1"/><text x="9.0759%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8259%" y="485" width="0.0810%" height="15" fill="rgb(253,21,26)" fg:x="109" fg:w="1"/><text x="9.0759%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8259%" y="469" width="0.0810%" height="15" fill="rgb(245,139,43)" fg:x="109" fg:w="1"/><text x="9.0759%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.8259%" y="453" width="0.0810%" height="15" fill="rgb(252,170,7)" fg:x="109" fg:w="1"/><text x="9.0759%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.9069%" y="565" width="0.0810%" height="15" fill="rgb(231,118,14)" fg:x="110" fg:w="1"/><text x="9.1569%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.9069%" y="549" width="0.0810%" height="15" fill="rgb(238,83,0)" fg:x="110" fg:w="1"/><text x="9.1569%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9069%" y="533" width="0.0810%" height="15" fill="rgb(221,39,39)" fg:x="110" fg:w="1"/><text x="9.1569%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.0688%" y="517" width="0.0810%" height="15" fill="rgb(222,119,46)" fg:x="112" fg:w="1"/><text x="9.3188%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0688%" y="501" width="0.0810%" height="15" fill="rgb(222,165,49)" fg:x="112" fg:w="1"/><text x="9.3188%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.0688%" y="485" width="0.0810%" height="15" fill="rgb(219,113,52)" fg:x="112" fg:w="1"/><text x="9.3188%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="9.0688%" y="549" width="0.1619%" height="15" fill="rgb(214,7,15)" fg:x="112" fg:w="2"/><text x="9.3188%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="9.0688%" y="533" width="0.1619%" height="15" fill="rgb(235,32,4)" fg:x="112" fg:w="2"/><text x="9.3188%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1498%" y="517" width="0.0810%" height="15" fill="rgb(238,90,54)" fg:x="113" fg:w="1"/><text x="9.3998%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.1498%" y="501" width="0.0810%" height="15" fill="rgb(213,208,19)" fg:x="113" fg:w="1"/><text x="9.3998%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1498%" y="485" width="0.0810%" height="15" fill="rgb(233,156,4)" fg:x="113" fg:w="1"/><text x="9.3998%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="9.2308%" y="549" width="0.0810%" height="15" fill="rgb(207,194,5)" fg:x="114" fg:w="1"/><text x="9.4808%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="9.2308%" y="533" width="0.0810%" height="15" fill="rgb(206,111,30)" fg:x="114" fg:w="1"/><text x="9.4808%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="8.9069%" y="597" width="0.4858%" height="15" fill="rgb(243,70,54)" fg:x="110" fg:w="6"/><text x="9.1569%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="8.9069%" y="581" width="0.4858%" height="15" fill="rgb(242,28,8)" fg:x="110" fg:w="6"/><text x="9.1569%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="8.9879%" y="565" width="0.4049%" height="15" fill="rgb(219,106,18)" fg:x="111" fg:w="5"/><text x="9.2379%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3117%" y="549" width="0.0810%" height="15" fill="rgb(244,222,10)" fg:x="115" fg:w="1"/><text x="9.5617%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3117%" y="533" width="0.0810%" height="15" fill="rgb(236,179,52)" fg:x="115" fg:w="1"/><text x="9.5617%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.3117%" y="517" width="0.0810%" height="15" fill="rgb(213,23,39)" fg:x="115" fg:w="1"/><text x="9.5617%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="9.3927%" y="421" width="0.0810%" height="15" fill="rgb(238,48,10)" fg:x="116" fg:w="1"/><text x="9.6427%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="9.3927%" y="405" width="0.0810%" height="15" fill="rgb(251,196,23)" fg:x="116" fg:w="1"/><text x="9.6427%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="9.3927%" y="469" width="0.1619%" height="15" fill="rgb(250,152,24)" fg:x="116" fg:w="2"/><text x="9.6427%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="9.3927%" y="453" width="0.1619%" height="15" fill="rgb(209,150,17)" fg:x="116" fg:w="2"/><text x="9.6427%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="9.3927%" y="437" width="0.1619%" height="15" fill="rgb(234,202,34)" fg:x="116" fg:w="2"/><text x="9.6427%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4737%" y="421" width="0.0810%" height="15" fill="rgb(253,148,53)" fg:x="117" fg:w="1"/><text x="9.7237%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4737%" y="405" width="0.0810%" height="15" fill="rgb(218,129,16)" fg:x="117" fg:w="1"/><text x="9.7237%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4737%" y="389" width="0.0810%" height="15" fill="rgb(216,85,19)" fg:x="117" fg:w="1"/><text x="9.7237%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="9.3927%" y="501" width="0.2429%" height="15" fill="rgb(235,228,7)" fg:x="116" fg:w="3"/><text x="9.6427%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="9.3927%" y="485" width="0.2429%" height="15" fill="rgb(245,175,0)" fg:x="116" fg:w="3"/><text x="9.6427%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5547%" y="469" width="0.0810%" height="15" fill="rgb(208,168,36)" fg:x="118" fg:w="1"/><text x="9.8047%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5547%" y="453" width="0.0810%" height="15" fill="rgb(246,171,24)" fg:x="118" fg:w="1"/><text x="9.8047%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5547%" y="437" width="0.0810%" height="15" fill="rgb(215,142,24)" fg:x="118" fg:w="1"/><text x="9.8047%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="9.6356%" y="501" width="0.1619%" height="15" fill="rgb(250,187,7)" fg:x="119" fg:w="2"/><text x="9.8856%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="9.7166%" y="485" width="0.0810%" height="15" fill="rgb(228,66,33)" fg:x="120" fg:w="1"/><text x="9.9666%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="9.3927%" y="533" width="0.4858%" height="15" fill="rgb(234,215,21)" fg:x="116" fg:w="6"/><text x="9.6427%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="9.3927%" y="517" width="0.4858%" height="15" fill="rgb(222,191,20)" fg:x="116" fg:w="6"/><text x="9.6427%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7976%" y="501" width="0.0810%" height="15" fill="rgb(245,79,54)" fg:x="121" fg:w="1"/><text x="10.0476%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7976%" y="485" width="0.0810%" height="15" fill="rgb(240,10,37)" fg:x="121" fg:w="1"/><text x="10.0476%" y="495.50"></text></g><g><title>engine::session::Session::close (31 samples, 2.51%)</title><rect x="7.4494%" y="693" width="2.5101%" height="15" fill="rgb(214,192,32)" fg:x="92" fg:w="31"/><text x="7.6994%" y="703.50">en..</text></g><g><title>engine::session::state::State::close (28 samples, 2.27%)</title><rect x="7.6923%" y="677" width="2.2672%" height="15" fill="rgb(209,36,54)" fg:x="95" fg:w="28"/><text x="7.9423%" y="687.50">e..</text></g><g><title>engine::session::state::State::flush_entities (28 samples, 2.27%)</title><rect x="7.6923%" y="661" width="2.2672%" height="15" fill="rgb(220,10,11)" fg:x="95" fg:w="28"/><text x="7.9423%" y="671.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (28 samples, 2.27%)</title><rect x="7.6923%" y="645" width="2.2672%" height="15" fill="rgb(221,106,17)" fg:x="95" fg:w="28"/><text x="7.9423%" y="655.50">e..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (27 samples, 2.19%)</title><rect x="7.7733%" y="629" width="2.1862%" height="15" fill="rgb(251,142,44)" fg:x="96" fg:w="27"/><text x="8.0233%" y="639.50">e..</text></g><g><title>kernel::model::any_entity_changes (19 samples, 1.54%)</title><rect x="8.4211%" y="613" width="1.5385%" height="15" fill="rgb(238,13,15)" fg:x="104" fg:w="19"/><text x="8.6711%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.57%)</title><rect x="9.3927%" y="597" width="0.5668%" height="15" fill="rgb(208,107,27)" fg:x="116" fg:w="7"/><text x="9.6427%" y="607.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.57%)</title><rect x="9.3927%" y="581" width="0.5668%" height="15" fill="rgb(205,136,37)" fg:x="116" fg:w="7"/><text x="9.6427%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="9.3927%" y="565" width="0.5668%" height="15" fill="rgb(250,205,27)" fg:x="116" fg:w="7"/><text x="9.6427%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.57%)</title><rect x="9.3927%" y="549" width="0.5668%" height="15" fill="rgb(210,80,43)" fg:x="116" fg:w="7"/><text x="9.6427%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8785%" y="533" width="0.0810%" height="15" fill="rgb(247,160,36)" fg:x="122" fg:w="1"/><text x="10.1285%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.0405%" y="549" width="0.0810%" height="15" fill="rgb(234,13,49)" fg:x="124" fg:w="1"/><text x="10.2905%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.0405%" y="533" width="0.0810%" height="15" fill="rgb(234,122,0)" fg:x="124" fg:w="1"/><text x="10.2905%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="10.0405%" y="517" width="0.0810%" height="15" fill="rgb(207,146,38)" fg:x="124" fg:w="1"/><text x="10.2905%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.0405%" y="501" width="0.0810%" height="15" fill="rgb(207,177,25)" fg:x="124" fg:w="1"/><text x="10.2905%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.0405%" y="485" width="0.0810%" height="15" fill="rgb(211,178,42)" fg:x="124" fg:w="1"/><text x="10.2905%" y="495.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="10.1215%" y="533" width="0.0810%" height="15" fill="rgb(230,69,54)" fg:x="125" fg:w="1"/><text x="10.3715%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.1215%" y="517" width="0.0810%" height="15" fill="rgb(214,135,41)" fg:x="125" fg:w="1"/><text x="10.3715%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.1215%" y="501" width="0.0810%" height="15" fill="rgb(237,67,25)" fg:x="125" fg:w="1"/><text x="10.3715%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1215%" y="485" width="0.0810%" height="15" fill="rgb(222,189,50)" fg:x="125" fg:w="1"/><text x="10.3715%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="10.2024%" y="453" width="0.0810%" height="15" fill="rgb(245,148,34)" fg:x="126" fg:w="1"/><text x="10.4524%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.2024%" y="437" width="0.0810%" height="15" fill="rgb(222,29,6)" fg:x="126" fg:w="1"/><text x="10.4524%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="10.2024%" y="421" width="0.0810%" height="15" fill="rgb(221,189,43)" fg:x="126" fg:w="1"/><text x="10.4524%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="10.2024%" y="405" width="0.0810%" height="15" fill="rgb(207,36,27)" fg:x="126" fg:w="1"/><text x="10.4524%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.2024%" y="389" width="0.0810%" height="15" fill="rgb(217,90,24)" fg:x="126" fg:w="1"/><text x="10.4524%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="10.0405%" y="597" width="0.3239%" height="15" fill="rgb(224,66,35)" fg:x="124" fg:w="4"/><text x="10.2905%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="10.0405%" y="581" width="0.3239%" height="15" fill="rgb(221,13,50)" fg:x="124" fg:w="4"/><text x="10.2905%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="10.0405%" y="565" width="0.3239%" height="15" fill="rgb(236,68,49)" fg:x="124" fg:w="4"/><text x="10.2905%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_str (3 samples, 0.24%)</title><rect x="10.1215%" y="549" width="0.2429%" height="15" fill="rgb(229,146,28)" fg:x="125" fg:w="3"/><text x="10.3715%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="10.2024%" y="533" width="0.1619%" height="15" fill="rgb(225,31,38)" fg:x="126" fg:w="2"/><text x="10.4524%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.2024%" y="517" width="0.1619%" height="15" fill="rgb(250,208,3)" fg:x="126" fg:w="2"/><text x="10.4524%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="10.2024%" y="501" width="0.1619%" height="15" fill="rgb(246,54,23)" fg:x="126" fg:w="2"/><text x="10.4524%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.2024%" y="485" width="0.1619%" height="15" fill="rgb(243,76,11)" fg:x="126" fg:w="2"/><text x="10.4524%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="10.2024%" y="469" width="0.1619%" height="15" fill="rgb(245,21,50)" fg:x="126" fg:w="2"/><text x="10.4524%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2834%" y="453" width="0.0810%" height="15" fill="rgb(228,9,43)" fg:x="127" fg:w="1"/><text x="10.5334%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.2834%" y="437" width="0.0810%" height="15" fill="rgb(208,100,47)" fg:x="127" fg:w="1"/><text x="10.5334%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="10.2834%" y="421" width="0.0810%" height="15" fill="rgb(232,26,8)" fg:x="127" fg:w="1"/><text x="10.5334%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2834%" y="405" width="0.0810%" height="15" fill="rgb(216,166,38)" fg:x="127" fg:w="1"/><text x="10.5334%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.2834%" y="389" width="0.0810%" height="15" fill="rgb(251,202,51)" fg:x="127" fg:w="1"/><text x="10.5334%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="10.2834%" y="373" width="0.0810%" height="15" fill="rgb(254,216,34)" fg:x="127" fg:w="1"/><text x="10.5334%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2834%" y="357" width="0.0810%" height="15" fill="rgb(251,32,27)" fg:x="127" fg:w="1"/><text x="10.5334%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.2834%" y="341" width="0.0810%" height="15" fill="rgb(208,127,28)" fg:x="127" fg:w="1"/><text x="10.5334%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="10.2834%" y="325" width="0.0810%" height="15" fill="rgb(224,137,22)" fg:x="127" fg:w="1"/><text x="10.5334%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2834%" y="309" width="0.0810%" height="15" fill="rgb(254,70,32)" fg:x="127" fg:w="1"/><text x="10.5334%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.2834%" y="293" width="0.0810%" height="15" fill="rgb(229,75,37)" fg:x="127" fg:w="1"/><text x="10.5334%" y="303.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.3644%" y="597" width="0.0810%" height="15" fill="rgb(252,64,23)" fg:x="128" fg:w="1"/><text x="10.6144%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.3644%" y="581" width="0.0810%" height="15" fill="rgb(232,162,48)" fg:x="128" fg:w="1"/><text x="10.6144%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.3644%" y="565" width="0.0810%" height="15" fill="rgb(246,160,12)" fg:x="128" fg:w="1"/><text x="10.6144%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.3644%" y="549" width="0.0810%" height="15" fill="rgb(247,166,0)" fg:x="128" fg:w="1"/><text x="10.6144%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.3644%" y="533" width="0.0810%" height="15" fill="rgb(249,219,21)" fg:x="128" fg:w="1"/><text x="10.6144%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.3644%" y="517" width="0.0810%" height="15" fill="rgb(205,209,3)" fg:x="128" fg:w="1"/><text x="10.6144%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.3644%" y="501" width="0.0810%" height="15" fill="rgb(243,44,1)" fg:x="128" fg:w="1"/><text x="10.6144%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.3644%" y="485" width="0.0810%" height="15" fill="rgb(206,159,16)" fg:x="128" fg:w="1"/><text x="10.6144%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.3644%" y="469" width="0.0810%" height="15" fill="rgb(244,77,30)" fg:x="128" fg:w="1"/><text x="10.6144%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.3644%" y="453" width="0.0810%" height="15" fill="rgb(218,69,12)" fg:x="128" fg:w="1"/><text x="10.6144%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.3644%" y="437" width="0.0810%" height="15" fill="rgb(212,87,7)" fg:x="128" fg:w="1"/><text x="10.6144%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.3644%" y="421" width="0.0810%" height="15" fill="rgb(245,114,25)" fg:x="128" fg:w="1"/><text x="10.6144%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.3644%" y="405" width="0.0810%" height="15" fill="rgb(210,61,42)" fg:x="128" fg:w="1"/><text x="10.6144%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.3644%" y="389" width="0.0810%" height="15" fill="rgb(211,52,33)" fg:x="128" fg:w="1"/><text x="10.6144%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.3644%" y="373" width="0.0810%" height="15" fill="rgb(234,58,33)" fg:x="128" fg:w="1"/><text x="10.6144%" y="383.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (6 samples, 0.49%)</title><rect x="10.0405%" y="645" width="0.4858%" height="15" fill="rgb(220,115,36)" fg:x="124" fg:w="6"/><text x="10.2905%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.49%)</title><rect x="10.0405%" y="629" width="0.4858%" height="15" fill="rgb(243,153,54)" fg:x="124" fg:w="6"/><text x="10.2905%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="10.0405%" y="613" width="0.4858%" height="15" fill="rgb(251,47,18)" fg:x="124" fg:w="6"/><text x="10.2905%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.4453%" y="597" width="0.0810%" height="15" fill="rgb(242,102,42)" fg:x="129" fg:w="1"/><text x="10.6953%" y="607.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (7 samples, 0.57%)</title><rect x="10.0405%" y="661" width="0.5668%" height="15" fill="rgb(234,31,38)" fg:x="124" fg:w="7"/><text x="10.2905%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="10.5263%" y="645" width="0.0810%" height="15" fill="rgb(221,117,51)" fg:x="130" fg:w="1"/><text x="10.7763%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (2 samples, 0.16%)</title><rect x="10.6073%" y="629" width="0.1619%" height="15" fill="rgb(212,20,18)" fg:x="131" fg:w="2"/><text x="10.8573%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="10.6073%" y="613" width="0.1619%" height="15" fill="rgb(245,133,36)" fg:x="131" fg:w="2"/><text x="10.8573%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="10.6073%" y="597" width="0.1619%" height="15" fill="rgb(212,6,19)" fg:x="131" fg:w="2"/><text x="10.8573%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="10.6073%" y="581" width="0.1619%" height="15" fill="rgb(218,1,36)" fg:x="131" fg:w="2"/><text x="10.8573%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.6883%" y="565" width="0.0810%" height="15" fill="rgb(246,84,54)" fg:x="132" fg:w="1"/><text x="10.9383%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.6883%" y="549" width="0.0810%" height="15" fill="rgb(242,110,6)" fg:x="132" fg:w="1"/><text x="10.9383%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.6883%" y="533" width="0.0810%" height="15" fill="rgb(214,47,5)" fg:x="132" fg:w="1"/><text x="10.9383%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="10.6883%" y="517" width="0.0810%" height="15" fill="rgb(218,159,25)" fg:x="132" fg:w="1"/><text x="10.9383%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.9312%" y="597" width="0.0810%" height="15" fill="rgb(215,211,28)" fg:x="135" fg:w="1"/><text x="11.1812%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9312%" y="581" width="0.0810%" height="15" fill="rgb(238,59,32)" fg:x="135" fg:w="1"/><text x="11.1812%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="11.0121%" y="597" width="0.0810%" height="15" fill="rgb(226,82,3)" fg:x="136" fg:w="1"/><text x="11.2621%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="11.0121%" y="581" width="0.0810%" height="15" fill="rgb(240,164,32)" fg:x="136" fg:w="1"/><text x="11.2621%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.0931%" y="597" width="0.0810%" height="15" fill="rgb(232,46,7)" fg:x="137" fg:w="1"/><text x="11.3431%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.1741%" y="597" width="0.0810%" height="15" fill="rgb(229,129,53)" fg:x="138" fg:w="1"/><text x="11.4241%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="11.1741%" y="581" width="0.0810%" height="15" fill="rgb(234,188,29)" fg:x="138" fg:w="1"/><text x="11.4241%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="11.1741%" y="565" width="0.0810%" height="15" fill="rgb(246,141,4)" fg:x="138" fg:w="1"/><text x="11.4241%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.1741%" y="549" width="0.0810%" height="15" fill="rgb(229,23,39)" fg:x="138" fg:w="1"/><text x="11.4241%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.2551%" y="533" width="0.0810%" height="15" fill="rgb(206,12,3)" fg:x="139" fg:w="1"/><text x="11.5051%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.2551%" y="517" width="0.0810%" height="15" fill="rgb(252,226,20)" fg:x="139" fg:w="1"/><text x="11.5051%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3360%" y="325" width="0.0810%" height="15" fill="rgb(216,123,35)" fg:x="140" fg:w="1"/><text x="11.5860%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="11.3360%" y="469" width="0.1619%" height="15" fill="rgb(212,68,40)" fg:x="140" fg:w="2"/><text x="11.5860%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="11.3360%" y="453" width="0.1619%" height="15" fill="rgb(254,125,32)" fg:x="140" fg:w="2"/><text x="11.5860%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="11.3360%" y="437" width="0.1619%" height="15" fill="rgb(253,97,22)" fg:x="140" fg:w="2"/><text x="11.5860%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="11.3360%" y="421" width="0.1619%" height="15" fill="rgb(241,101,14)" fg:x="140" fg:w="2"/><text x="11.5860%" y="431.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="11.3360%" y="405" width="0.1619%" height="15" fill="rgb(238,103,29)" fg:x="140" fg:w="2"/><text x="11.5860%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.3360%" y="389" width="0.1619%" height="15" fill="rgb(233,195,47)" fg:x="140" fg:w="2"/><text x="11.5860%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.3360%" y="373" width="0.1619%" height="15" fill="rgb(246,218,30)" fg:x="140" fg:w="2"/><text x="11.5860%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.3360%" y="357" width="0.1619%" height="15" fill="rgb(219,145,47)" fg:x="140" fg:w="2"/><text x="11.5860%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.3360%" y="341" width="0.1619%" height="15" fill="rgb(243,12,26)" fg:x="140" fg:w="2"/><text x="11.5860%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.4170%" y="325" width="0.0810%" height="15" fill="rgb(214,87,16)" fg:x="141" fg:w="1"/><text x="11.6670%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.4170%" y="309" width="0.0810%" height="15" fill="rgb(208,99,42)" fg:x="141" fg:w="1"/><text x="11.6670%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.4170%" y="293" width="0.0810%" height="15" fill="rgb(253,99,2)" fg:x="141" fg:w="1"/><text x="11.6670%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.4170%" y="277" width="0.0810%" height="15" fill="rgb(220,168,23)" fg:x="141" fg:w="1"/><text x="11.6670%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.4170%" y="261" width="0.0810%" height="15" fill="rgb(242,38,24)" fg:x="141" fg:w="1"/><text x="11.6670%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4170%" y="245" width="0.0810%" height="15" fill="rgb(225,182,9)" fg:x="141" fg:w="1"/><text x="11.6670%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.4980%" y="437" width="0.0810%" height="15" fill="rgb(243,178,37)" fg:x="142" fg:w="1"/><text x="11.7480%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.4980%" y="421" width="0.0810%" height="15" fill="rgb(232,139,19)" fg:x="142" fg:w="1"/><text x="11.7480%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="11.3360%" y="533" width="0.3239%" height="15" fill="rgb(225,201,24)" fg:x="140" fg:w="4"/><text x="11.5860%" y="543.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (4 samples, 0.32%)</title><rect x="11.3360%" y="517" width="0.3239%" height="15" fill="rgb(221,47,46)" fg:x="140" fg:w="4"/><text x="11.5860%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (4 samples, 0.32%)</title><rect x="11.3360%" y="501" width="0.3239%" height="15" fill="rgb(249,23,13)" fg:x="140" fg:w="4"/><text x="11.5860%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="11.3360%" y="485" width="0.3239%" height="15" fill="rgb(219,9,5)" fg:x="140" fg:w="4"/><text x="11.5860%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.4980%" y="469" width="0.1619%" height="15" fill="rgb(254,171,16)" fg:x="142" fg:w="2"/><text x="11.7480%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.4980%" y="453" width="0.1619%" height="15" fill="rgb(230,171,20)" fg:x="142" fg:w="2"/><text x="11.7480%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.5789%" y="437" width="0.0810%" height="15" fill="rgb(210,71,41)" fg:x="143" fg:w="1"/><text x="11.8289%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5789%" y="421" width="0.0810%" height="15" fill="rgb(206,173,20)" fg:x="143" fg:w="1"/><text x="11.8289%" y="431.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="11.6599%" y="501" width="0.0810%" height="15" fill="rgb(233,88,34)" fg:x="144" fg:w="1"/><text x="11.9099%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="11.6599%" y="485" width="0.0810%" height="15" fill="rgb(223,209,46)" fg:x="144" fg:w="1"/><text x="11.9099%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.6599%" y="469" width="0.0810%" height="15" fill="rgb(250,43,18)" fg:x="144" fg:w="1"/><text x="11.9099%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="11.6599%" y="453" width="0.0810%" height="15" fill="rgb(208,13,10)" fg:x="144" fg:w="1"/><text x="11.9099%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="11.6599%" y="437" width="0.0810%" height="15" fill="rgb(212,200,36)" fg:x="144" fg:w="1"/><text x="11.9099%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="11.6599%" y="421" width="0.0810%" height="15" fill="rgb(225,90,30)" fg:x="144" fg:w="1"/><text x="11.9099%" y="431.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="11.6599%" y="405" width="0.0810%" height="15" fill="rgb(236,182,39)" fg:x="144" fg:w="1"/><text x="11.9099%" y="415.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (7 samples, 0.57%)</title><rect x="11.2551%" y="549" width="0.5668%" height="15" fill="rgb(212,144,35)" fg:x="139" fg:w="7"/><text x="11.5051%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="11.6599%" y="533" width="0.1619%" height="15" fill="rgb(228,63,44)" fg:x="144" fg:w="2"/><text x="11.9099%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="11.6599%" y="517" width="0.1619%" height="15" fill="rgb(228,109,6)" fg:x="144" fg:w="2"/><text x="11.9099%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.7409%" y="501" width="0.0810%" height="15" fill="rgb(238,117,24)" fg:x="145" fg:w="1"/><text x="11.9909%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.7409%" y="485" width="0.0810%" height="15" fill="rgb(242,26,26)" fg:x="145" fg:w="1"/><text x="11.9909%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.8219%" y="533" width="0.0810%" height="15" fill="rgb(221,92,48)" fg:x="146" fg:w="1"/><text x="12.0719%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.9838%" y="469" width="0.0810%" height="15" fill="rgb(209,209,32)" fg:x="148" fg:w="1"/><text x="12.2338%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.9838%" y="453" width="0.0810%" height="15" fill="rgb(221,70,22)" fg:x="148" fg:w="1"/><text x="12.2338%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.9838%" y="437" width="0.0810%" height="15" fill="rgb(248,145,5)" fg:x="148" fg:w="1"/><text x="12.2338%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.9838%" y="421" width="0.0810%" height="15" fill="rgb(226,116,26)" fg:x="148" fg:w="1"/><text x="12.2338%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.9838%" y="405" width="0.0810%" height="15" fill="rgb(244,5,17)" fg:x="148" fg:w="1"/><text x="12.2338%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.9838%" y="389" width="0.0810%" height="15" fill="rgb(252,159,33)" fg:x="148" fg:w="1"/><text x="12.2338%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.9838%" y="373" width="0.0810%" height="15" fill="rgb(206,71,0)" fg:x="148" fg:w="1"/><text x="12.2338%" y="383.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.9838%" y="501" width="0.1619%" height="15" fill="rgb(233,118,54)" fg:x="148" fg:w="2"/><text x="12.2338%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.9838%" y="485" width="0.1619%" height="15" fill="rgb(234,83,48)" fg:x="148" fg:w="2"/><text x="12.2338%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0648%" y="469" width="0.0810%" height="15" fill="rgb(228,3,54)" fg:x="149" fg:w="1"/><text x="12.3148%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.0648%" y="453" width="0.0810%" height="15" fill="rgb(226,155,13)" fg:x="149" fg:w="1"/><text x="12.3148%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0648%" y="437" width="0.0810%" height="15" fill="rgb(241,28,37)" fg:x="149" fg:w="1"/><text x="12.3148%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0648%" y="421" width="0.0810%" height="15" fill="rgb(233,93,10)" fg:x="149" fg:w="1"/><text x="12.3148%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.0648%" y="405" width="0.0810%" height="15" fill="rgb(225,113,19)" fg:x="149" fg:w="1"/><text x="12.3148%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.0648%" y="389" width="0.0810%" height="15" fill="rgb(241,2,18)" fg:x="149" fg:w="1"/><text x="12.3148%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.0648%" y="373" width="0.0810%" height="15" fill="rgb(228,207,21)" fg:x="149" fg:w="1"/><text x="12.3148%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0648%" y="357" width="0.0810%" height="15" fill="rgb(213,211,35)" fg:x="149" fg:w="1"/><text x="12.3148%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0648%" y="341" width="0.0810%" height="15" fill="rgb(209,83,10)" fg:x="149" fg:w="1"/><text x="12.3148%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.0648%" y="325" width="0.0810%" height="15" fill="rgb(209,164,1)" fg:x="149" fg:w="1"/><text x="12.3148%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.0648%" y="309" width="0.0810%" height="15" fill="rgb(213,184,43)" fg:x="149" fg:w="1"/><text x="12.3148%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.0648%" y="293" width="0.0810%" height="15" fill="rgb(231,61,34)" fg:x="149" fg:w="1"/><text x="12.3148%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.0648%" y="277" width="0.0810%" height="15" fill="rgb(235,75,3)" fg:x="149" fg:w="1"/><text x="12.3148%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.0648%" y="261" width="0.0810%" height="15" fill="rgb(220,106,47)" fg:x="149" fg:w="1"/><text x="12.3148%" y="271.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="12.2267%" y="405" width="0.0810%" height="15" fill="rgb(210,196,33)" fg:x="151" fg:w="1"/><text x="12.4767%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.2267%" y="389" width="0.0810%" height="15" fill="rgb(229,154,42)" fg:x="151" fg:w="1"/><text x="12.4767%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.2267%" y="373" width="0.0810%" height="15" fill="rgb(228,114,26)" fg:x="151" fg:w="1"/><text x="12.4767%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.2267%" y="357" width="0.0810%" height="15" fill="rgb(208,144,1)" fg:x="151" fg:w="1"/><text x="12.4767%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.2267%" y="341" width="0.0810%" height="15" fill="rgb(239,112,37)" fg:x="151" fg:w="1"/><text x="12.4767%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.2267%" y="325" width="0.0810%" height="15" fill="rgb(210,96,50)" fg:x="151" fg:w="1"/><text x="12.4767%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.2267%" y="309" width="0.0810%" height="15" fill="rgb(222,178,2)" fg:x="151" fg:w="1"/><text x="12.4767%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.2267%" y="293" width="0.0810%" height="15" fill="rgb(226,74,18)" fg:x="151" fg:w="1"/><text x="12.4767%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.2267%" y="277" width="0.0810%" height="15" fill="rgb(225,67,54)" fg:x="151" fg:w="1"/><text x="12.4767%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.2267%" y="261" width="0.0810%" height="15" fill="rgb(251,92,32)" fg:x="151" fg:w="1"/><text x="12.4767%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.2267%" y="245" width="0.0810%" height="15" fill="rgb(228,149,22)" fg:x="151" fg:w="1"/><text x="12.4767%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.2267%" y="229" width="0.0810%" height="15" fill="rgb(243,54,13)" fg:x="151" fg:w="1"/><text x="12.4767%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.2267%" y="213" width="0.0810%" height="15" fill="rgb(243,180,28)" fg:x="151" fg:w="1"/><text x="12.4767%" y="223.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.3887%" y="389" width="0.0810%" height="15" fill="rgb(208,167,24)" fg:x="153" fg:w="1"/><text x="12.6387%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.3887%" y="373" width="0.0810%" height="15" fill="rgb(245,73,45)" fg:x="153" fg:w="1"/><text x="12.6387%" y="383.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="12.4696%" y="389" width="0.0810%" height="15" fill="rgb(237,203,48)" fg:x="154" fg:w="1"/><text x="12.7196%" y="399.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="12.4696%" y="373" width="0.0810%" height="15" fill="rgb(211,197,16)" fg:x="154" fg:w="1"/><text x="12.7196%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.4696%" y="357" width="0.0810%" height="15" fill="rgb(243,99,51)" fg:x="154" fg:w="1"/><text x="12.7196%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.4696%" y="341" width="0.0810%" height="15" fill="rgb(215,123,29)" fg:x="154" fg:w="1"/><text x="12.7196%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="12.4696%" y="325" width="0.0810%" height="15" fill="rgb(239,186,37)" fg:x="154" fg:w="1"/><text x="12.7196%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.4696%" y="309" width="0.0810%" height="15" fill="rgb(252,136,39)" fg:x="154" fg:w="1"/><text x="12.7196%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4696%" y="293" width="0.0810%" height="15" fill="rgb(223,213,32)" fg:x="154" fg:w="1"/><text x="12.7196%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.4696%" y="277" width="0.0810%" height="15" fill="rgb(233,115,5)" fg:x="154" fg:w="1"/><text x="12.7196%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4696%" y="261" width="0.0810%" height="15" fill="rgb(207,226,44)" fg:x="154" fg:w="1"/><text x="12.7196%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.4696%" y="245" width="0.0810%" height="15" fill="rgb(208,126,0)" fg:x="154" fg:w="1"/><text x="12.7196%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4696%" y="229" width="0.0810%" height="15" fill="rgb(244,66,21)" fg:x="154" fg:w="1"/><text x="12.7196%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.4696%" y="213" width="0.0810%" height="15" fill="rgb(222,97,12)" fg:x="154" fg:w="1"/><text x="12.7196%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4696%" y="197" width="0.0810%" height="15" fill="rgb(219,213,19)" fg:x="154" fg:w="1"/><text x="12.7196%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.5506%" y="341" width="0.0810%" height="15" fill="rgb(252,169,30)" fg:x="155" fg:w="1"/><text x="12.8006%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.5506%" y="325" width="0.0810%" height="15" fill="rgb(206,32,51)" fg:x="155" fg:w="1"/><text x="12.8006%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.5506%" y="309" width="0.0810%" height="15" fill="rgb(250,172,42)" fg:x="155" fg:w="1"/><text x="12.8006%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.5506%" y="293" width="0.0810%" height="15" fill="rgb(209,34,43)" fg:x="155" fg:w="1"/><text x="12.8006%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5506%" y="277" width="0.0810%" height="15" fill="rgb(223,11,35)" fg:x="155" fg:w="1"/><text x="12.8006%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5506%" y="261" width="0.0810%" height="15" fill="rgb(251,219,26)" fg:x="155" fg:w="1"/><text x="12.8006%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.5506%" y="245" width="0.0810%" height="15" fill="rgb(231,119,3)" fg:x="155" fg:w="1"/><text x="12.8006%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.5506%" y="229" width="0.0810%" height="15" fill="rgb(216,97,11)" fg:x="155" fg:w="1"/><text x="12.8006%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.5506%" y="213" width="0.0810%" height="15" fill="rgb(223,59,9)" fg:x="155" fg:w="1"/><text x="12.8006%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.5506%" y="197" width="0.0810%" height="15" fill="rgb(233,93,31)" fg:x="155" fg:w="1"/><text x="12.8006%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.5506%" y="181" width="0.0810%" height="15" fill="rgb(239,81,33)" fg:x="155" fg:w="1"/><text x="12.8006%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.5506%" y="165" width="0.0810%" height="15" fill="rgb(213,120,34)" fg:x="155" fg:w="1"/><text x="12.8006%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.5506%" y="149" width="0.0810%" height="15" fill="rgb(243,49,53)" fg:x="155" fg:w="1"/><text x="12.8006%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.5506%" y="133" width="0.0810%" height="15" fill="rgb(247,216,33)" fg:x="155" fg:w="1"/><text x="12.8006%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.5506%" y="117" width="0.0810%" height="15" fill="rgb(226,26,14)" fg:x="155" fg:w="1"/><text x="12.8006%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5506%" y="101" width="0.0810%" height="15" fill="rgb(215,49,53)" fg:x="155" fg:w="1"/><text x="12.8006%" y="111.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.6316%" y="309" width="0.0810%" height="15" fill="rgb(245,162,40)" fg:x="156" fg:w="1"/><text x="12.8816%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.6316%" y="293" width="0.0810%" height="15" fill="rgb(229,68,17)" fg:x="156" fg:w="1"/><text x="12.8816%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7126%" y="245" width="0.0810%" height="15" fill="rgb(213,182,10)" fg:x="157" fg:w="1"/><text x="12.9626%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7126%" y="229" width="0.0810%" height="15" fill="rgb(245,125,30)" fg:x="157" fg:w="1"/><text x="12.9626%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="12.5506%" y="389" width="0.3239%" height="15" fill="rgb(232,202,2)" fg:x="155" fg:w="4"/><text x="12.8006%" y="399.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="12.5506%" y="373" width="0.3239%" height="15" fill="rgb(237,140,51)" fg:x="155" fg:w="4"/><text x="12.8006%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="12.5506%" y="357" width="0.3239%" height="15" fill="rgb(236,157,25)" fg:x="155" fg:w="4"/><text x="12.8006%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="12.6316%" y="341" width="0.2429%" height="15" fill="rgb(219,209,0)" fg:x="156" fg:w="3"/><text x="12.8816%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="12.6316%" y="325" width="0.2429%" height="15" fill="rgb(240,116,54)" fg:x="156" fg:w="3"/><text x="12.8816%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="12.7126%" y="309" width="0.1619%" height="15" fill="rgb(216,10,36)" fg:x="157" fg:w="2"/><text x="12.9626%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.7126%" y="293" width="0.1619%" height="15" fill="rgb(222,72,44)" fg:x="157" fg:w="2"/><text x="12.9626%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="12.7126%" y="277" width="0.1619%" height="15" fill="rgb(232,159,9)" fg:x="157" fg:w="2"/><text x="12.9626%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.7126%" y="261" width="0.1619%" height="15" fill="rgb(210,39,32)" fg:x="157" fg:w="2"/><text x="12.9626%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7935%" y="245" width="0.0810%" height="15" fill="rgb(216,194,45)" fg:x="158" fg:w="1"/><text x="13.0435%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7935%" y="229" width="0.0810%" height="15" fill="rgb(218,18,35)" fg:x="158" fg:w="1"/><text x="13.0435%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7935%" y="213" width="0.0810%" height="15" fill="rgb(207,83,51)" fg:x="158" fg:w="1"/><text x="13.0435%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7935%" y="197" width="0.0810%" height="15" fill="rgb(225,63,43)" fg:x="158" fg:w="1"/><text x="13.0435%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.7935%" y="181" width="0.0810%" height="15" fill="rgb(207,57,36)" fg:x="158" fg:w="1"/><text x="13.0435%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.7935%" y="165" width="0.0810%" height="15" fill="rgb(216,99,33)" fg:x="158" fg:w="1"/><text x="13.0435%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.8745%" y="325" width="0.0810%" height="15" fill="rgb(225,42,16)" fg:x="159" fg:w="1"/><text x="13.1245%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.9555%" y="293" width="0.0810%" height="15" fill="rgb(220,201,45)" fg:x="160" fg:w="1"/><text x="13.2055%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="12.9555%" y="277" width="0.0810%" height="15" fill="rgb(225,33,4)" fg:x="160" fg:w="1"/><text x="13.2055%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.0364%" y="229" width="0.0810%" height="15" fill="rgb(224,33,50)" fg:x="161" fg:w="1"/><text x="13.2864%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.0364%" y="213" width="0.0810%" height="15" fill="rgb(246,198,51)" fg:x="161" fg:w="1"/><text x="13.2864%" y="223.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="12.8745%" y="373" width="0.3239%" height="15" fill="rgb(205,22,4)" fg:x="159" fg:w="4"/><text x="13.1245%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="12.8745%" y="357" width="0.3239%" height="15" fill="rgb(206,3,8)" fg:x="159" fg:w="4"/><text x="13.1245%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="12.8745%" y="341" width="0.3239%" height="15" fill="rgb(251,23,15)" fg:x="159" fg:w="4"/><text x="13.1245%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="12.9555%" y="325" width="0.2429%" height="15" fill="rgb(252,88,28)" fg:x="160" fg:w="3"/><text x="13.2055%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="12.9555%" y="309" width="0.2429%" height="15" fill="rgb(212,127,14)" fg:x="160" fg:w="3"/><text x="13.2055%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="13.0364%" y="293" width="0.1619%" height="15" fill="rgb(247,145,37)" fg:x="161" fg:w="2"/><text x="13.2864%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="13.0364%" y="277" width="0.1619%" height="15" fill="rgb(209,117,53)" fg:x="161" fg:w="2"/><text x="13.2864%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="13.0364%" y="261" width="0.1619%" height="15" fill="rgb(212,90,42)" fg:x="161" fg:w="2"/><text x="13.2864%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="13.0364%" y="245" width="0.1619%" height="15" fill="rgb(218,164,37)" fg:x="161" fg:w="2"/><text x="13.2864%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.1174%" y="229" width="0.0810%" height="15" fill="rgb(246,65,34)" fg:x="162" fg:w="1"/><text x="13.3674%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.1174%" y="213" width="0.0810%" height="15" fill="rgb(231,100,33)" fg:x="162" fg:w="1"/><text x="13.3674%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.1174%" y="197" width="0.0810%" height="15" fill="rgb(228,126,14)" fg:x="162" fg:w="1"/><text x="13.3674%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.1174%" y="181" width="0.0810%" height="15" fill="rgb(215,173,21)" fg:x="162" fg:w="1"/><text x="13.3674%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1174%" y="165" width="0.0810%" height="15" fill="rgb(210,6,40)" fg:x="162" fg:w="1"/><text x="13.3674%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1174%" y="149" width="0.0810%" height="15" fill="rgb(212,48,18)" fg:x="162" fg:w="1"/><text x="13.3674%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.1174%" y="133" width="0.0810%" height="15" fill="rgb(230,214,11)" fg:x="162" fg:w="1"/><text x="13.3674%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.1984%" y="261" width="0.0810%" height="15" fill="rgb(254,105,39)" fg:x="163" fg:w="1"/><text x="13.4484%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.1984%" y="245" width="0.0810%" height="15" fill="rgb(245,158,5)" fg:x="163" fg:w="1"/><text x="13.4484%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.1984%" y="229" width="0.0810%" height="15" fill="rgb(249,208,11)" fg:x="163" fg:w="1"/><text x="13.4484%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.2794%" y="213" width="0.0810%" height="15" fill="rgb(210,39,28)" fg:x="164" fg:w="1"/><text x="13.5294%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="13.1984%" y="341" width="0.2429%" height="15" fill="rgb(211,56,53)" fg:x="163" fg:w="3"/><text x="13.4484%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.1984%" y="325" width="0.2429%" height="15" fill="rgb(226,201,30)" fg:x="163" fg:w="3"/><text x="13.4484%" y="335.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="13.1984%" y="309" width="0.2429%" height="15" fill="rgb(239,101,34)" fg:x="163" fg:w="3"/><text x="13.4484%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.1984%" y="293" width="0.2429%" height="15" fill="rgb(226,209,5)" fg:x="163" fg:w="3"/><text x="13.4484%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="13.1984%" y="277" width="0.2429%" height="15" fill="rgb(250,105,47)" fg:x="163" fg:w="3"/><text x="13.4484%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="13.2794%" y="261" width="0.1619%" height="15" fill="rgb(230,72,3)" fg:x="164" fg:w="2"/><text x="13.5294%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.2794%" y="245" width="0.1619%" height="15" fill="rgb(232,218,39)" fg:x="164" fg:w="2"/><text x="13.5294%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="13.2794%" y="229" width="0.1619%" height="15" fill="rgb(248,166,6)" fg:x="164" fg:w="2"/><text x="13.5294%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="13.3603%" y="213" width="0.0810%" height="15" fill="rgb(247,89,20)" fg:x="165" fg:w="1"/><text x="13.6103%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3603%" y="197" width="0.0810%" height="15" fill="rgb(248,130,54)" fg:x="165" fg:w="1"/><text x="13.6103%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.3603%" y="181" width="0.0810%" height="15" fill="rgb(234,196,4)" fg:x="165" fg:w="1"/><text x="13.6103%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="13.3603%" y="165" width="0.0810%" height="15" fill="rgb(250,143,31)" fg:x="165" fg:w="1"/><text x="13.6103%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3603%" y="149" width="0.0810%" height="15" fill="rgb(211,110,34)" fg:x="165" fg:w="1"/><text x="13.6103%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.3603%" y="133" width="0.0810%" height="15" fill="rgb(215,124,48)" fg:x="165" fg:w="1"/><text x="13.6103%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="13.3603%" y="117" width="0.0810%" height="15" fill="rgb(216,46,13)" fg:x="165" fg:w="1"/><text x="13.6103%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3603%" y="101" width="0.0810%" height="15" fill="rgb(205,184,25)" fg:x="165" fg:w="1"/><text x="13.6103%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.3603%" y="85" width="0.0810%" height="15" fill="rgb(228,1,10)" fg:x="165" fg:w="1"/><text x="13.6103%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="13.3603%" y="69" width="0.0810%" height="15" fill="rgb(213,116,27)" fg:x="165" fg:w="1"/><text x="13.6103%" y="79.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="13.3603%" y="53" width="0.0810%" height="15" fill="rgb(241,95,50)" fg:x="165" fg:w="1"/><text x="13.6103%" y="63.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="13.3603%" y="37" width="0.0810%" height="15" fill="rgb(238,48,32)" fg:x="165" fg:w="1"/><text x="13.6103%" y="47.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (17 samples, 1.38%)</title><rect x="12.1457%" y="501" width="1.3765%" height="15" fill="rgb(235,113,49)" fg:x="150" fg:w="17"/><text x="12.3957%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.38%)</title><rect x="12.1457%" y="485" width="1.3765%" height="15" fill="rgb(205,127,43)" fg:x="150" fg:w="17"/><text x="12.3957%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.38%)</title><rect x="12.1457%" y="469" width="1.3765%" height="15" fill="rgb(250,162,2)" fg:x="150" fg:w="17"/><text x="12.3957%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 1.38%)</title><rect x="12.1457%" y="453" width="1.3765%" height="15" fill="rgb(220,13,41)" fg:x="150" fg:w="17"/><text x="12.3957%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (17 samples, 1.38%)</title><rect x="12.1457%" y="437" width="1.3765%" height="15" fill="rgb(249,221,25)" fg:x="150" fg:w="17"/><text x="12.3957%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (17 samples, 1.38%)</title><rect x="12.1457%" y="421" width="1.3765%" height="15" fill="rgb(215,208,19)" fg:x="150" fg:w="17"/><text x="12.3957%" y="431.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.21%)</title><rect x="12.3077%" y="405" width="1.2146%" height="15" fill="rgb(236,175,2)" fg:x="152" fg:w="15"/><text x="12.5577%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_str (8 samples, 0.65%)</title><rect x="12.8745%" y="389" width="0.6478%" height="15" fill="rgb(241,52,2)" fg:x="159" fg:w="8"/><text x="13.1245%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="13.1984%" y="373" width="0.3239%" height="15" fill="rgb(248,140,14)" fg:x="163" fg:w="4"/><text x="13.4484%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="13.1984%" y="357" width="0.3239%" height="15" fill="rgb(253,22,42)" fg:x="163" fg:w="4"/><text x="13.4484%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.4413%" y="341" width="0.0810%" height="15" fill="rgb(234,61,47)" fg:x="166" fg:w="1"/><text x="13.6913%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.4413%" y="325" width="0.0810%" height="15" fill="rgb(208,226,15)" fg:x="166" fg:w="1"/><text x="13.6913%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.4413%" y="309" width="0.0810%" height="15" fill="rgb(217,221,4)" fg:x="166" fg:w="1"/><text x="13.6913%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.4413%" y="293" width="0.0810%" height="15" fill="rgb(212,174,34)" fg:x="166" fg:w="1"/><text x="13.6913%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5223%" y="501" width="0.0810%" height="15" fill="rgb(253,83,4)" fg:x="167" fg:w="1"/><text x="13.7723%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.6842%" y="469" width="0.0810%" height="15" fill="rgb(250,195,49)" fg:x="169" fg:w="1"/><text x="13.9342%" y="479.50"></text></g><g><title>plugins_core::tools::get_contained_keys (25 samples, 2.02%)</title><rect x="11.8219%" y="549" width="2.0243%" height="15" fill="rgb(241,192,25)" fg:x="146" fg:w="25"/><text x="12.0719%" y="559.50">p..</text></g><g><title>kernel::model::entry::Entry::scope (24 samples, 1.94%)</title><rect x="11.9028%" y="533" width="1.9433%" height="15" fill="rgb(208,124,10)" fg:x="147" fg:w="24"/><text x="12.1528%" y="543.50">k..</text></g><g><title>kernel::model::scopes::Scopes::load_scope (24 samples, 1.94%)</title><rect x="11.9028%" y="517" width="1.9433%" height="15" fill="rgb(222,33,0)" fg:x="147" fg:w="24"/><text x="12.1528%" y="527.50">k..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="13.6032%" y="501" width="0.2429%" height="15" fill="rgb(234,209,28)" fg:x="168" fg:w="3"/><text x="13.8532%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.6032%" y="485" width="0.2429%" height="15" fill="rgb(224,11,23)" fg:x="168" fg:w="3"/><text x="13.8532%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="13.7652%" y="469" width="0.0810%" height="15" fill="rgb(232,99,1)" fg:x="170" fg:w="1"/><text x="14.0152%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="13.7652%" y="453" width="0.0810%" height="15" fill="rgb(237,95,45)" fg:x="170" fg:w="1"/><text x="14.0152%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="13.7652%" y="437" width="0.0810%" height="15" fill="rgb(208,109,11)" fg:x="170" fg:w="1"/><text x="14.0152%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.7652%" y="421" width="0.0810%" height="15" fill="rgb(216,190,48)" fg:x="170" fg:w="1"/><text x="14.0152%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7652%" y="405" width="0.0810%" height="15" fill="rgb(251,171,36)" fg:x="170" fg:w="1"/><text x="14.0152%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 2.67%)</title><rect x="11.2551%" y="581" width="2.6721%" height="15" fill="rgb(230,62,22)" fg:x="139" fg:w="33"/><text x="11.5051%" y="591.50">&lt;a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (33 samples, 2.67%)</title><rect x="11.2551%" y="565" width="2.6721%" height="15" fill="rgb(225,114,35)" fg:x="139" fg:w="33"/><text x="11.5051%" y="575.50">&lt;c..</text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="13.8462%" y="549" width="0.0810%" height="15" fill="rgb(215,118,42)" fg:x="171" fg:w="1"/><text x="14.0962%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="13.8462%" y="533" width="0.0810%" height="15" fill="rgb(243,119,21)" fg:x="171" fg:w="1"/><text x="14.0962%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.8462%" y="517" width="0.0810%" height="15" fill="rgb(252,177,53)" fg:x="171" fg:w="1"/><text x="14.0962%" y="527.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="13.8462%" y="501" width="0.0810%" height="15" fill="rgb(237,209,29)" fg:x="171" fg:w="1"/><text x="14.0962%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="13.8462%" y="485" width="0.0810%" height="15" fill="rgb(212,65,23)" fg:x="171" fg:w="1"/><text x="14.0962%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.0081%" y="533" width="0.0810%" height="15" fill="rgb(230,222,46)" fg:x="173" fg:w="1"/><text x="14.2581%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.0081%" y="517" width="0.0810%" height="15" fill="rgb(215,135,32)" fg:x="173" fg:w="1"/><text x="14.2581%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.0081%" y="501" width="0.0810%" height="15" fill="rgb(246,101,22)" fg:x="173" fg:w="1"/><text x="14.2581%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.0081%" y="485" width="0.0810%" height="15" fill="rgb(206,107,13)" fg:x="173" fg:w="1"/><text x="14.2581%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.0081%" y="469" width="0.0810%" height="15" fill="rgb(250,100,44)" fg:x="173" fg:w="1"/><text x="14.2581%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.0081%" y="453" width="0.0810%" height="15" fill="rgb(231,147,38)" fg:x="173" fg:w="1"/><text x="14.2581%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.0081%" y="437" width="0.0810%" height="15" fill="rgb(229,8,40)" fg:x="173" fg:w="1"/><text x="14.2581%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.0081%" y="421" width="0.0810%" height="15" fill="rgb(221,135,30)" fg:x="173" fg:w="1"/><text x="14.2581%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.0081%" y="405" width="0.0810%" height="15" fill="rgb(249,193,18)" fg:x="173" fg:w="1"/><text x="14.2581%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.0081%" y="389" width="0.0810%" height="15" fill="rgb(209,133,39)" fg:x="173" fg:w="1"/><text x="14.2581%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.0081%" y="373" width="0.0810%" height="15" fill="rgb(232,100,14)" fg:x="173" fg:w="1"/><text x="14.2581%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0081%" y="357" width="0.0810%" height="15" fill="rgb(224,185,1)" fg:x="173" fg:w="1"/><text x="14.2581%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.0891%" y="501" width="0.0810%" height="15" fill="rgb(223,139,8)" fg:x="174" fg:w="1"/><text x="14.3391%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.0891%" y="485" width="0.0810%" height="15" fill="rgb(232,213,38)" fg:x="174" fg:w="1"/><text x="14.3391%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.0891%" y="469" width="0.0810%" height="15" fill="rgb(207,94,22)" fg:x="174" fg:w="1"/><text x="14.3391%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.0891%" y="453" width="0.0810%" height="15" fill="rgb(219,183,54)" fg:x="174" fg:w="1"/><text x="14.3391%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.0891%" y="437" width="0.0810%" height="15" fill="rgb(216,185,54)" fg:x="174" fg:w="1"/><text x="14.3391%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="14.0891%" y="421" width="0.0810%" height="15" fill="rgb(254,217,39)" fg:x="174" fg:w="1"/><text x="14.3391%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="14.0891%" y="405" width="0.0810%" height="15" fill="rgb(240,178,23)" fg:x="174" fg:w="1"/><text x="14.3391%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.1700%" y="421" width="0.0810%" height="15" fill="rgb(218,11,47)" fg:x="175" fg:w="1"/><text x="14.4200%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="14.0891%" y="533" width="0.2429%" height="15" fill="rgb(218,51,51)" fg:x="174" fg:w="3"/><text x="14.3391%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="14.0891%" y="517" width="0.2429%" height="15" fill="rgb(238,126,27)" fg:x="174" fg:w="3"/><text x="14.3391%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="14.1700%" y="501" width="0.1619%" height="15" fill="rgb(249,202,22)" fg:x="175" fg:w="2"/><text x="14.4200%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="14.1700%" y="485" width="0.1619%" height="15" fill="rgb(254,195,49)" fg:x="175" fg:w="2"/><text x="14.4200%" y="495.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="14.1700%" y="469" width="0.1619%" height="15" fill="rgb(208,123,14)" fg:x="175" fg:w="2"/><text x="14.4200%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="14.1700%" y="453" width="0.1619%" height="15" fill="rgb(224,200,8)" fg:x="175" fg:w="2"/><text x="14.4200%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="14.1700%" y="437" width="0.1619%" height="15" fill="rgb(217,61,36)" fg:x="175" fg:w="2"/><text x="14.4200%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="14.2510%" y="421" width="0.0810%" height="15" fill="rgb(206,35,45)" fg:x="176" fg:w="1"/><text x="14.5010%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.2510%" y="405" width="0.0810%" height="15" fill="rgb(217,65,33)" fg:x="176" fg:w="1"/><text x="14.5010%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.2510%" y="389" width="0.0810%" height="15" fill="rgb(222,158,48)" fg:x="176" fg:w="1"/><text x="14.5010%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.2510%" y="373" width="0.0810%" height="15" fill="rgb(254,2,54)" fg:x="176" fg:w="1"/><text x="14.5010%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="14.2510%" y="357" width="0.0810%" height="15" fill="rgb(250,143,38)" fg:x="176" fg:w="1"/><text x="14.5010%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="14.2510%" y="341" width="0.0810%" height="15" fill="rgb(248,25,0)" fg:x="176" fg:w="1"/><text x="14.5010%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.2510%" y="325" width="0.0810%" height="15" fill="rgb(206,152,27)" fg:x="176" fg:w="1"/><text x="14.5010%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="14.2510%" y="309" width="0.0810%" height="15" fill="rgb(240,77,30)" fg:x="176" fg:w="1"/><text x="14.5010%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="14.2510%" y="293" width="0.0810%" height="15" fill="rgb(231,5,3)" fg:x="176" fg:w="1"/><text x="14.5010%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="14.2510%" y="277" width="0.0810%" height="15" fill="rgb(207,226,32)" fg:x="176" fg:w="1"/><text x="14.5010%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.2510%" y="261" width="0.0810%" height="15" fill="rgb(222,207,47)" fg:x="176" fg:w="1"/><text x="14.5010%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="14.2510%" y="245" width="0.0810%" height="15" fill="rgb(229,115,45)" fg:x="176" fg:w="1"/><text x="14.5010%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.2510%" y="229" width="0.0810%" height="15" fill="rgb(224,191,6)" fg:x="176" fg:w="1"/><text x="14.5010%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="14.2510%" y="213" width="0.0810%" height="15" fill="rgb(230,227,24)" fg:x="176" fg:w="1"/><text x="14.5010%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="14.2510%" y="197" width="0.0810%" height="15" fill="rgb(228,80,19)" fg:x="176" fg:w="1"/><text x="14.5010%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="14.2510%" y="181" width="0.0810%" height="15" fill="rgb(247,229,0)" fg:x="176" fg:w="1"/><text x="14.5010%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.2510%" y="165" width="0.0810%" height="15" fill="rgb(237,194,15)" fg:x="176" fg:w="1"/><text x="14.5010%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.8988%" y="309" width="0.0810%" height="15" fill="rgb(219,203,20)" fg:x="184" fg:w="1"/><text x="15.1488%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="14.8178%" y="357" width="0.2429%" height="15" fill="rgb(234,128,8)" fg:x="183" fg:w="3"/><text x="15.0678%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="14.8178%" y="341" width="0.2429%" height="15" fill="rgb(248,202,8)" fg:x="183" fg:w="3"/><text x="15.0678%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="14.8178%" y="325" width="0.2429%" height="15" fill="rgb(206,104,37)" fg:x="183" fg:w="3"/><text x="15.0678%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.9798%" y="309" width="0.0810%" height="15" fill="rgb(223,8,27)" fg:x="185" fg:w="1"/><text x="15.2298%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="15.1417%" y="293" width="0.0810%" height="15" fill="rgb(216,217,28)" fg:x="187" fg:w="1"/><text x="15.3917%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1417%" y="277" width="0.0810%" height="15" fill="rgb(249,199,1)" fg:x="187" fg:w="1"/><text x="15.3917%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.1417%" y="261" width="0.0810%" height="15" fill="rgb(240,85,17)" fg:x="187" fg:w="1"/><text x="15.3917%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="15.1417%" y="245" width="0.0810%" height="15" fill="rgb(206,108,45)" fg:x="187" fg:w="1"/><text x="15.3917%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="15.0607%" y="341" width="0.2429%" height="15" fill="rgb(245,210,41)" fg:x="186" fg:w="3"/><text x="15.3107%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="15.1417%" y="325" width="0.1619%" height="15" fill="rgb(206,13,37)" fg:x="187" fg:w="2"/><text x="15.3917%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="15.1417%" y="309" width="0.1619%" height="15" fill="rgb(250,61,18)" fg:x="187" fg:w="2"/><text x="15.3917%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="15.2227%" y="293" width="0.0810%" height="15" fill="rgb(235,172,48)" fg:x="188" fg:w="1"/><text x="15.4727%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.2227%" y="277" width="0.0810%" height="15" fill="rgb(249,201,17)" fg:x="188" fg:w="1"/><text x="15.4727%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.57%)</title><rect x="14.8178%" y="373" width="0.5668%" height="15" fill="rgb(219,208,6)" fg:x="183" fg:w="7"/><text x="15.0678%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="15.0607%" y="357" width="0.3239%" height="15" fill="rgb(248,31,23)" fg:x="186" fg:w="4"/><text x="15.3107%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="15.3036%" y="341" width="0.0810%" height="15" fill="rgb(245,15,42)" fg:x="189" fg:w="1"/><text x="15.5536%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.3846%" y="373" width="0.0810%" height="15" fill="rgb(222,217,39)" fg:x="190" fg:w="1"/><text x="15.6346%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.3846%" y="357" width="0.0810%" height="15" fill="rgb(210,219,27)" fg:x="190" fg:w="1"/><text x="15.6346%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (11 samples, 0.89%)</title><rect x="14.7368%" y="421" width="0.8907%" height="15" fill="rgb(252,166,36)" fg:x="182" fg:w="11"/><text x="14.9868%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (10 samples, 0.81%)</title><rect x="14.8178%" y="405" width="0.8097%" height="15" fill="rgb(245,132,34)" fg:x="183" fg:w="10"/><text x="15.0678%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.81%)</title><rect x="14.8178%" y="389" width="0.8097%" height="15" fill="rgb(236,54,3)" fg:x="183" fg:w="10"/><text x="15.0678%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.4656%" y="373" width="0.1619%" height="15" fill="rgb(241,173,43)" fg:x="191" fg:w="2"/><text x="15.7156%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5466%" y="357" width="0.0810%" height="15" fill="rgb(215,190,9)" fg:x="192" fg:w="1"/><text x="15.7966%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="15.6275%" y="421" width="0.2429%" height="15" fill="rgb(242,101,16)" fg:x="193" fg:w="3"/><text x="15.8775%" y="431.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="15.7085%" y="405" width="0.1619%" height="15" fill="rgb(223,190,21)" fg:x="194" fg:w="2"/><text x="15.9585%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.30%)</title><rect x="14.6559%" y="437" width="1.2955%" height="15" fill="rgb(215,228,25)" fg:x="181" fg:w="16"/><text x="14.9059%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.8704%" y="421" width="0.0810%" height="15" fill="rgb(225,36,22)" fg:x="196" fg:w="1"/><text x="16.1204%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.8704%" y="405" width="0.0810%" height="15" fill="rgb(251,106,46)" fg:x="196" fg:w="1"/><text x="16.1204%" y="415.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (18 samples, 1.46%)</title><rect x="14.5749%" y="469" width="1.4575%" height="15" fill="rgb(208,90,1)" fg:x="180" fg:w="18"/><text x="14.8249%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 1.46%)</title><rect x="14.5749%" y="453" width="1.4575%" height="15" fill="rgb(243,10,4)" fg:x="180" fg:w="18"/><text x="14.8249%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="15.9514%" y="437" width="0.0810%" height="15" fill="rgb(212,137,27)" fg:x="197" fg:w="1"/><text x="16.2014%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9514%" y="421" width="0.0810%" height="15" fill="rgb(231,220,49)" fg:x="197" fg:w="1"/><text x="16.2014%" y="431.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (22 samples, 1.78%)</title><rect x="14.3320%" y="517" width="1.7814%" height="15" fill="rgb(237,96,20)" fg:x="177" fg:w="22"/><text x="14.5820%" y="527.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (20 samples, 1.62%)</title><rect x="14.4939%" y="501" width="1.6194%" height="15" fill="rgb(239,229,30)" fg:x="179" fg:w="20"/><text x="14.7439%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 1.62%)</title><rect x="14.4939%" y="485" width="1.6194%" height="15" fill="rgb(219,65,33)" fg:x="179" fg:w="20"/><text x="14.7439%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.0324%" y="469" width="0.0810%" height="15" fill="rgb(243,134,7)" fg:x="198" fg:w="1"/><text x="16.2824%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.0324%" y="453" width="0.0810%" height="15" fill="rgb(216,177,54)" fg:x="198" fg:w="1"/><text x="16.2824%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="16.1943%" y="469" width="0.2429%" height="15" fill="rgb(211,160,20)" fg:x="200" fg:w="3"/><text x="16.4443%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.2753%" y="453" width="0.1619%" height="15" fill="rgb(239,85,39)" fg:x="201" fg:w="2"/><text x="16.5253%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="16.3563%" y="437" width="0.0810%" height="15" fill="rgb(232,125,22)" fg:x="202" fg:w="1"/><text x="16.6063%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="16.4372%" y="469" width="0.0810%" height="15" fill="rgb(244,57,34)" fg:x="203" fg:w="1"/><text x="16.6872%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.4372%" y="453" width="0.0810%" height="15" fill="rgb(214,203,32)" fg:x="203" fg:w="1"/><text x="16.6872%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4372%" y="437" width="0.0810%" height="15" fill="rgb(207,58,43)" fg:x="203" fg:w="1"/><text x="16.6872%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="16.5182%" y="469" width="0.0810%" height="15" fill="rgb(215,193,15)" fg:x="204" fg:w="1"/><text x="16.7682%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.5182%" y="453" width="0.0810%" height="15" fill="rgb(232,15,44)" fg:x="204" fg:w="1"/><text x="16.7682%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5182%" y="437" width="0.0810%" height="15" fill="rgb(212,3,48)" fg:x="204" fg:w="1"/><text x="16.7682%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.5992%" y="469" width="0.0810%" height="15" fill="rgb(218,128,7)" fg:x="205" fg:w="1"/><text x="16.8492%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.5992%" y="453" width="0.0810%" height="15" fill="rgb(226,216,39)" fg:x="205" fg:w="1"/><text x="16.8492%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5992%" y="437" width="0.0810%" height="15" fill="rgb(243,47,51)" fg:x="205" fg:w="1"/><text x="16.8492%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="16.8421%" y="421" width="0.1619%" height="15" fill="rgb(241,183,40)" fg:x="208" fg:w="2"/><text x="17.0921%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="16.8421%" y="405" width="0.1619%" height="15" fill="rgb(231,217,32)" fg:x="208" fg:w="2"/><text x="17.0921%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="16.8421%" y="389" width="0.1619%" height="15" fill="rgb(229,61,38)" fg:x="208" fg:w="2"/><text x="17.0921%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9231%" y="373" width="0.0810%" height="15" fill="rgb(225,210,5)" fg:x="209" fg:w="1"/><text x="17.1731%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9231%" y="357" width="0.0810%" height="15" fill="rgb(231,79,45)" fg:x="209" fg:w="1"/><text x="17.1731%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.0850%" y="373" width="0.0810%" height="15" fill="rgb(224,100,7)" fg:x="211" fg:w="1"/><text x="17.3350%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="16.6802%" y="437" width="0.5668%" height="15" fill="rgb(241,198,18)" fg:x="206" fg:w="7"/><text x="16.9302%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="17.0040%" y="421" width="0.2429%" height="15" fill="rgb(252,97,53)" fg:x="210" fg:w="3"/><text x="17.2540%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="17.0850%" y="405" width="0.1619%" height="15" fill="rgb(220,88,7)" fg:x="211" fg:w="2"/><text x="17.3350%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="17.0850%" y="389" width="0.1619%" height="15" fill="rgb(213,176,14)" fg:x="211" fg:w="2"/><text x="17.3350%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.1660%" y="373" width="0.0810%" height="15" fill="rgb(246,73,7)" fg:x="212" fg:w="1"/><text x="17.4160%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.1660%" y="357" width="0.0810%" height="15" fill="rgb(245,64,36)" fg:x="212" fg:w="1"/><text x="17.4160%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.1660%" y="341" width="0.0810%" height="15" fill="rgb(245,80,10)" fg:x="212" fg:w="1"/><text x="17.4160%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.1660%" y="325" width="0.0810%" height="15" fill="rgb(232,107,50)" fg:x="212" fg:w="1"/><text x="17.4160%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.65%)</title><rect x="16.6802%" y="453" width="0.6478%" height="15" fill="rgb(253,3,0)" fg:x="206" fg:w="8"/><text x="16.9302%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="17.2470%" y="437" width="0.0810%" height="15" fill="rgb(212,99,53)" fg:x="213" fg:w="1"/><text x="17.4970%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2470%" y="421" width="0.0810%" height="15" fill="rgb(249,111,54)" fg:x="213" fg:w="1"/><text x="17.4970%" y="431.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (38 samples, 3.08%)</title><rect x="14.3320%" y="533" width="3.0769%" height="15" fill="rgb(249,55,30)" fg:x="177" fg:w="38"/><text x="14.5820%" y="543.50">&lt;rp..</text></g><g><title>kernel::model::EntityPtr::to_json_value (16 samples, 1.30%)</title><rect x="16.1134%" y="517" width="1.2955%" height="15" fill="rgb(237,47,42)" fg:x="199" fg:w="16"/><text x="16.3634%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.30%)</title><rect x="16.1134%" y="501" width="1.2955%" height="15" fill="rgb(211,20,18)" fg:x="199" fg:w="16"/><text x="16.3634%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.30%)</title><rect x="16.1134%" y="485" width="1.2955%" height="15" fill="rgb(231,203,46)" fg:x="199" fg:w="16"/><text x="16.3634%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.73%)</title><rect x="16.6802%" y="469" width="0.7287%" height="15" fill="rgb(237,142,3)" fg:x="206" fg:w="9"/><text x="16.9302%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3279%" y="453" width="0.0810%" height="15" fill="rgb(241,107,1)" fg:x="214" fg:w="1"/><text x="17.5779%" y="463.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (85 samples, 6.88%)</title><rect x="10.6073%" y="661" width="6.8826%" height="15" fill="rgb(229,83,13)" fg:x="131" fg:w="85"/><text x="10.8573%" y="671.50">kernel::p..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (85 samples, 6.88%)</title><rect x="10.6073%" y="645" width="6.8826%" height="15" fill="rgb(241,91,40)" fg:x="131" fg:w="85"/><text x="10.8573%" y="655.50">&lt;plugins_..</text></g><g><title>plugins_rpc::querying::have_surroundings (83 samples, 6.72%)</title><rect x="10.7692%" y="629" width="6.7206%" height="15" fill="rgb(225,3,45)" fg:x="133" fg:w="83"/><text x="11.0192%" y="639.50">plugins_r..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (82 samples, 6.64%)</title><rect x="10.8502%" y="613" width="6.6397%" height="15" fill="rgb(244,223,14)" fg:x="134" fg:w="82"/><text x="11.1002%" y="623.50">&lt;plugins_..</text></g><g><title>core::iter::adapters::try_process (77 samples, 6.23%)</title><rect x="11.2551%" y="597" width="6.2348%" height="15" fill="rgb(224,124,37)" fg:x="139" fg:w="77"/><text x="11.5051%" y="607.50">core::it..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (44 samples, 3.56%)</title><rect x="13.9271%" y="581" width="3.5628%" height="15" fill="rgb(251,171,30)" fg:x="172" fg:w="44"/><text x="14.1771%" y="591.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (44 samples, 3.56%)</title><rect x="13.9271%" y="565" width="3.5628%" height="15" fill="rgb(236,46,54)" fg:x="172" fg:w="44"/><text x="14.1771%" y="575.50">&lt;cor..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (44 samples, 3.56%)</title><rect x="13.9271%" y="549" width="3.5628%" height="15" fill="rgb(245,213,5)" fg:x="172" fg:w="44"/><text x="14.1771%" y="559.50">plug..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="17.4089%" y="533" width="0.0810%" height="15" fill="rgb(230,144,27)" fg:x="215" fg:w="1"/><text x="17.6589%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="17.5709%" y="517" width="0.0810%" height="15" fill="rgb(220,86,6)" fg:x="217" fg:w="1"/><text x="17.8209%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="17.6518%" y="485" width="0.1619%" height="15" fill="rgb(240,20,13)" fg:x="218" fg:w="2"/><text x="17.9018%" y="495.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="17.6518%" y="469" width="0.1619%" height="15" fill="rgb(217,89,34)" fg:x="218" fg:w="2"/><text x="17.9018%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="17.6518%" y="453" width="0.1619%" height="15" fill="rgb(229,13,5)" fg:x="218" fg:w="2"/><text x="17.9018%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="17.6518%" y="437" width="0.1619%" height="15" fill="rgb(244,67,35)" fg:x="218" fg:w="2"/><text x="17.9018%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.7328%" y="421" width="0.0810%" height="15" fill="rgb(221,40,2)" fg:x="219" fg:w="1"/><text x="17.9828%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.7328%" y="405" width="0.0810%" height="15" fill="rgb(237,157,21)" fg:x="219" fg:w="1"/><text x="17.9828%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.7328%" y="389" width="0.0810%" height="15" fill="rgb(222,94,11)" fg:x="219" fg:w="1"/><text x="17.9828%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.7328%" y="373" width="0.0810%" height="15" fill="rgb(249,113,6)" fg:x="219" fg:w="1"/><text x="17.9828%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.8947%" y="405" width="0.1619%" height="15" fill="rgb(238,137,36)" fg:x="221" fg:w="2"/><text x="18.1447%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.8947%" y="389" width="0.1619%" height="15" fill="rgb(210,102,26)" fg:x="221" fg:w="2"/><text x="18.1447%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="17.8947%" y="373" width="0.1619%" height="15" fill="rgb(218,30,30)" fg:x="221" fg:w="2"/><text x="18.1447%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="17.8947%" y="357" width="0.1619%" height="15" fill="rgb(214,67,26)" fg:x="221" fg:w="2"/><text x="18.1447%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="17.8947%" y="341" width="0.1619%" height="15" fill="rgb(251,9,53)" fg:x="221" fg:w="2"/><text x="18.1447%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="17.8947%" y="325" width="0.1619%" height="15" fill="rgb(228,204,25)" fg:x="221" fg:w="2"/><text x="18.1447%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="17.8947%" y="309" width="0.1619%" height="15" fill="rgb(207,153,8)" fg:x="221" fg:w="2"/><text x="18.1447%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="17.8947%" y="293" width="0.1619%" height="15" fill="rgb(242,9,16)" fg:x="221" fg:w="2"/><text x="18.1447%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="17.8947%" y="277" width="0.1619%" height="15" fill="rgb(217,211,10)" fg:x="221" fg:w="2"/><text x="18.1447%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="17.8947%" y="261" width="0.1619%" height="15" fill="rgb(219,228,52)" fg:x="221" fg:w="2"/><text x="18.1447%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="17.8947%" y="245" width="0.1619%" height="15" fill="rgb(231,92,29)" fg:x="221" fg:w="2"/><text x="18.1447%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="17.8947%" y="229" width="0.1619%" height="15" fill="rgb(232,8,23)" fg:x="221" fg:w="2"/><text x="18.1447%" y="239.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="17.8947%" y="213" width="0.1619%" height="15" fill="rgb(216,211,34)" fg:x="221" fg:w="2"/><text x="18.1447%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.8947%" y="197" width="0.1619%" height="15" fill="rgb(236,151,0)" fg:x="221" fg:w="2"/><text x="18.1447%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.8947%" y="437" width="0.2429%" height="15" fill="rgb(209,168,3)" fg:x="221" fg:w="3"/><text x="18.1447%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.8947%" y="421" width="0.2429%" height="15" fill="rgb(208,129,28)" fg:x="221" fg:w="3"/><text x="18.1447%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.0567%" y="405" width="0.0810%" height="15" fill="rgb(229,78,22)" fg:x="223" fg:w="1"/><text x="18.3067%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.0567%" y="389" width="0.0810%" height="15" fill="rgb(228,187,13)" fg:x="223" fg:w="1"/><text x="18.3067%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.0567%" y="373" width="0.0810%" height="15" fill="rgb(240,119,24)" fg:x="223" fg:w="1"/><text x="18.3067%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.0567%" y="357" width="0.0810%" height="15" fill="rgb(209,194,42)" fg:x="223" fg:w="1"/><text x="18.3067%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.0567%" y="341" width="0.0810%" height="15" fill="rgb(247,200,46)" fg:x="223" fg:w="1"/><text x="18.3067%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.0567%" y="325" width="0.0810%" height="15" fill="rgb(218,76,16)" fg:x="223" fg:w="1"/><text x="18.3067%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.0567%" y="309" width="0.0810%" height="15" fill="rgb(225,21,48)" fg:x="223" fg:w="1"/><text x="18.3067%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.0567%" y="293" width="0.0810%" height="15" fill="rgb(239,223,50)" fg:x="223" fg:w="1"/><text x="18.3067%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.0567%" y="277" width="0.0810%" height="15" fill="rgb(244,45,21)" fg:x="223" fg:w="1"/><text x="18.3067%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.0567%" y="261" width="0.0810%" height="15" fill="rgb(232,33,43)" fg:x="223" fg:w="1"/><text x="18.3067%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.0567%" y="245" width="0.0810%" height="15" fill="rgb(209,8,3)" fg:x="223" fg:w="1"/><text x="18.3067%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0567%" y="229" width="0.0810%" height="15" fill="rgb(214,25,53)" fg:x="223" fg:w="1"/><text x="18.3067%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1377%" y="341" width="0.0810%" height="15" fill="rgb(254,186,54)" fg:x="224" fg:w="1"/><text x="18.3877%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.1377%" y="325" width="0.0810%" height="15" fill="rgb(208,174,49)" fg:x="224" fg:w="1"/><text x="18.3877%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.65%)</title><rect x="17.8138%" y="485" width="0.6478%" height="15" fill="rgb(233,191,51)" fg:x="220" fg:w="8"/><text x="18.0638%" y="495.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.65%)</title><rect x="17.8138%" y="469" width="0.6478%" height="15" fill="rgb(222,134,10)" fg:x="220" fg:w="8"/><text x="18.0638%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.65%)</title><rect x="17.8138%" y="453" width="0.6478%" height="15" fill="rgb(230,226,20)" fg:x="220" fg:w="8"/><text x="18.0638%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="18.1377%" y="437" width="0.3239%" height="15" fill="rgb(251,111,25)" fg:x="224" fg:w="4"/><text x="18.3877%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="18.1377%" y="421" width="0.3239%" height="15" fill="rgb(224,40,46)" fg:x="224" fg:w="4"/><text x="18.3877%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="18.1377%" y="405" width="0.3239%" height="15" fill="rgb(236,108,47)" fg:x="224" fg:w="4"/><text x="18.3877%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="18.1377%" y="389" width="0.3239%" height="15" fill="rgb(234,93,0)" fg:x="224" fg:w="4"/><text x="18.3877%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="18.1377%" y="373" width="0.3239%" height="15" fill="rgb(224,213,32)" fg:x="224" fg:w="4"/><text x="18.3877%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="18.1377%" y="357" width="0.3239%" height="15" fill="rgb(251,11,48)" fg:x="224" fg:w="4"/><text x="18.3877%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="18.2186%" y="341" width="0.2429%" height="15" fill="rgb(236,173,5)" fg:x="225" fg:w="3"/><text x="18.4686%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="18.2186%" y="325" width="0.2429%" height="15" fill="rgb(230,95,12)" fg:x="225" fg:w="3"/><text x="18.4686%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.3806%" y="309" width="0.0810%" height="15" fill="rgb(232,209,1)" fg:x="227" fg:w="1"/><text x="18.6306%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.3806%" y="293" width="0.0810%" height="15" fill="rgb(232,6,1)" fg:x="227" fg:w="1"/><text x="18.6306%" y="303.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="18.4615%" y="437" width="0.0810%" height="15" fill="rgb(210,224,50)" fg:x="228" fg:w="1"/><text x="18.7115%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="18.4615%" y="421" width="0.0810%" height="15" fill="rgb(228,127,35)" fg:x="228" fg:w="1"/><text x="18.7115%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="18.4615%" y="405" width="0.0810%" height="15" fill="rgb(245,102,45)" fg:x="228" fg:w="1"/><text x="18.7115%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="18.4615%" y="389" width="0.0810%" height="15" fill="rgb(214,1,49)" fg:x="228" fg:w="1"/><text x="18.7115%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.4615%" y="373" width="0.0810%" height="15" fill="rgb(226,163,40)" fg:x="228" fg:w="1"/><text x="18.7115%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.4615%" y="357" width="0.0810%" height="15" fill="rgb(239,212,28)" fg:x="228" fg:w="1"/><text x="18.7115%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="18.4615%" y="341" width="0.0810%" height="15" fill="rgb(220,20,13)" fg:x="228" fg:w="1"/><text x="18.7115%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="18.4615%" y="325" width="0.0810%" height="15" fill="rgb(210,164,35)" fg:x="228" fg:w="1"/><text x="18.7115%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="18.4615%" y="309" width="0.0810%" height="15" fill="rgb(248,109,41)" fg:x="228" fg:w="1"/><text x="18.7115%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="18.4615%" y="293" width="0.0810%" height="15" fill="rgb(238,23,50)" fg:x="228" fg:w="1"/><text x="18.7115%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.4615%" y="277" width="0.0810%" height="15" fill="rgb(211,48,49)" fg:x="228" fg:w="1"/><text x="18.7115%" y="287.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="18.5425%" y="421" width="0.0810%" height="15" fill="rgb(223,36,21)" fg:x="229" fg:w="1"/><text x="18.7925%" y="431.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="18.5425%" y="405" width="0.0810%" height="15" fill="rgb(207,123,46)" fg:x="229" fg:w="1"/><text x="18.7925%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="18.5425%" y="389" width="0.0810%" height="15" fill="rgb(240,218,32)" fg:x="229" fg:w="1"/><text x="18.7925%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.5425%" y="373" width="0.0810%" height="15" fill="rgb(252,5,43)" fg:x="229" fg:w="1"/><text x="18.7925%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.5425%" y="357" width="0.0810%" height="15" fill="rgb(252,84,19)" fg:x="229" fg:w="1"/><text x="18.7925%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.5425%" y="341" width="0.0810%" height="15" fill="rgb(243,152,39)" fg:x="229" fg:w="1"/><text x="18.7925%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.5425%" y="325" width="0.0810%" height="15" fill="rgb(234,160,15)" fg:x="229" fg:w="1"/><text x="18.7925%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.5425%" y="309" width="0.0810%" height="15" fill="rgb(237,34,20)" fg:x="229" fg:w="1"/><text x="18.7925%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.5425%" y="293" width="0.0810%" height="15" fill="rgb(229,97,13)" fg:x="229" fg:w="1"/><text x="18.7925%" y="303.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="18.5425%" y="277" width="0.0810%" height="15" fill="rgb(234,71,50)" fg:x="229" fg:w="1"/><text x="18.7925%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="18.9474%" y="309" width="0.0810%" height="15" fill="rgb(253,155,4)" fg:x="234" fg:w="1"/><text x="19.1974%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="18.9474%" y="293" width="0.0810%" height="15" fill="rgb(222,185,37)" fg:x="234" fg:w="1"/><text x="19.1974%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="18.9474%" y="325" width="0.1619%" height="15" fill="rgb(251,177,13)" fg:x="234" fg:w="2"/><text x="19.1974%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="19.0283%" y="309" width="0.0810%" height="15" fill="rgb(250,179,40)" fg:x="235" fg:w="1"/><text x="19.2783%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="19.0283%" y="293" width="0.0810%" height="15" fill="rgb(242,44,2)" fg:x="235" fg:w="1"/><text x="19.2783%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="18.7045%" y="389" width="0.5668%" height="15" fill="rgb(216,177,13)" fg:x="231" fg:w="7"/><text x="18.9545%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (7 samples, 0.57%)</title><rect x="18.7045%" y="373" width="0.5668%" height="15" fill="rgb(216,106,43)" fg:x="231" fg:w="7"/><text x="18.9545%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (7 samples, 0.57%)</title><rect x="18.7045%" y="357" width="0.5668%" height="15" fill="rgb(216,183,2)" fg:x="231" fg:w="7"/><text x="18.9545%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (7 samples, 0.57%)</title><rect x="18.7045%" y="341" width="0.5668%" height="15" fill="rgb(249,75,3)" fg:x="231" fg:w="7"/><text x="18.9545%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="19.1093%" y="325" width="0.1619%" height="15" fill="rgb(219,67,39)" fg:x="236" fg:w="2"/><text x="19.3593%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.1903%" y="309" width="0.0810%" height="15" fill="rgb(253,228,2)" fg:x="237" fg:w="1"/><text x="19.4403%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="18.7045%" y="405" width="0.6478%" height="15" fill="rgb(235,138,27)" fg:x="231" fg:w="8"/><text x="18.9545%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.2713%" y="389" width="0.0810%" height="15" fill="rgb(236,97,51)" fg:x="238" fg:w="1"/><text x="19.5213%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="19.4332%" y="357" width="0.1619%" height="15" fill="rgb(240,80,30)" fg:x="240" fg:w="2"/><text x="19.6832%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.5142%" y="341" width="0.0810%" height="15" fill="rgb(230,178,19)" fg:x="241" fg:w="1"/><text x="19.7642%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.5951%" y="357" width="0.0810%" height="15" fill="rgb(210,190,27)" fg:x="242" fg:w="1"/><text x="19.8451%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="19.6761%" y="357" width="0.0810%" height="15" fill="rgb(222,107,31)" fg:x="243" fg:w="1"/><text x="19.9261%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.6761%" y="341" width="0.0810%" height="15" fill="rgb(216,127,34)" fg:x="243" fg:w="1"/><text x="19.9261%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.6761%" y="325" width="0.0810%" height="15" fill="rgb(234,116,52)" fg:x="243" fg:w="1"/><text x="19.9261%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (29 samples, 2.35%)</title><rect x="19.8381%" y="341" width="2.3482%" height="15" fill="rgb(222,124,15)" fg:x="245" fg:w="29"/><text x="20.0881%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (29 samples, 2.35%)</title><rect x="19.8381%" y="325" width="2.3482%" height="15" fill="rgb(231,179,28)" fg:x="245" fg:w="29"/><text x="20.0881%" y="335.50">c..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="22.0243%" y="309" width="0.1619%" height="15" fill="rgb(226,93,45)" fg:x="272" fg:w="2"/><text x="22.2743%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="22.3482%" y="325" width="0.4049%" height="15" fill="rgb(215,8,51)" fg:x="276" fg:w="5"/><text x="22.5982%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="22.7530%" y="325" width="0.0810%" height="15" fill="rgb(223,106,5)" fg:x="281" fg:w="1"/><text x="23.0030%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.73%)</title><rect x="22.1862%" y="341" width="0.7287%" height="15" fill="rgb(250,191,5)" fg:x="274" fg:w="9"/><text x="22.4362%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="22.8340%" y="325" width="0.0810%" height="15" fill="rgb(242,132,44)" fg:x="282" fg:w="1"/><text x="23.0840%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="22.9150%" y="341" width="0.0810%" height="15" fill="rgb(251,152,29)" fg:x="283" fg:w="1"/><text x="23.1650%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="22.9960%" y="341" width="0.1619%" height="15" fill="rgb(218,179,5)" fg:x="284" fg:w="2"/><text x="23.2460%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="22.9960%" y="325" width="0.1619%" height="15" fill="rgb(227,67,19)" fg:x="284" fg:w="2"/><text x="23.2460%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="22.9960%" y="309" width="0.1619%" height="15" fill="rgb(233,119,31)" fg:x="284" fg:w="2"/><text x="23.2460%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (2 samples, 0.16%)</title><rect x="22.9960%" y="293" width="0.1619%" height="15" fill="rgb(241,120,22)" fg:x="284" fg:w="2"/><text x="23.2460%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="22.9960%" y="277" width="0.1619%" height="15" fill="rgb(224,102,30)" fg:x="284" fg:w="2"/><text x="23.2460%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.0769%" y="261" width="0.0810%" height="15" fill="rgb(210,164,37)" fg:x="285" fg:w="1"/><text x="23.3269%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.2389%" y="309" width="0.0810%" height="15" fill="rgb(226,191,16)" fg:x="287" fg:w="1"/><text x="23.4889%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.2389%" y="293" width="0.0810%" height="15" fill="rgb(214,40,45)" fg:x="287" fg:w="1"/><text x="23.4889%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="23.6437%" y="277" width="0.0810%" height="15" fill="rgb(244,29,26)" fg:x="292" fg:w="1"/><text x="23.8937%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.6437%" y="261" width="0.0810%" height="15" fill="rgb(216,16,5)" fg:x="292" fg:w="1"/><text x="23.8937%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.6437%" y="245" width="0.0810%" height="15" fill="rgb(249,76,35)" fg:x="292" fg:w="1"/><text x="23.8937%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="23.7247%" y="277" width="0.0810%" height="15" fill="rgb(207,11,44)" fg:x="293" fg:w="1"/><text x="23.9747%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.9676%" y="245" width="0.0810%" height="15" fill="rgb(228,190,49)" fg:x="296" fg:w="1"/><text x="24.2176%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.9676%" y="229" width="0.0810%" height="15" fill="rgb(214,173,12)" fg:x="296" fg:w="1"/><text x="24.2176%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.9676%" y="213" width="0.0810%" height="15" fill="rgb(218,26,35)" fg:x="296" fg:w="1"/><text x="24.2176%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="23.8057%" y="277" width="0.3239%" height="15" fill="rgb(220,200,19)" fg:x="294" fg:w="4"/><text x="24.0557%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="23.8866%" y="261" width="0.2429%" height="15" fill="rgb(239,95,49)" fg:x="295" fg:w="3"/><text x="24.1366%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="24.0486%" y="245" width="0.0810%" height="15" fill="rgb(235,85,53)" fg:x="297" fg:w="1"/><text x="24.2986%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="24.1296%" y="261" width="0.0810%" height="15" fill="rgb(233,133,31)" fg:x="298" fg:w="1"/><text x="24.3796%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.1296%" y="245" width="0.0810%" height="15" fill="rgb(218,25,20)" fg:x="298" fg:w="1"/><text x="24.3796%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.1296%" y="229" width="0.0810%" height="15" fill="rgb(252,210,38)" fg:x="298" fg:w="1"/><text x="24.3796%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.1296%" y="213" width="0.0810%" height="15" fill="rgb(242,134,21)" fg:x="298" fg:w="1"/><text x="24.3796%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.2105%" y="245" width="0.0810%" height="15" fill="rgb(213,28,48)" fg:x="299" fg:w="1"/><text x="24.4605%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (153 samples, 12.39%)</title><rect x="24.1296%" y="277" width="12.3887%" height="15" fill="rgb(250,196,2)" fg:x="298" fg:w="153"/><text x="24.3796%" y="287.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (152 samples, 12.31%)</title><rect x="24.2105%" y="261" width="12.3077%" height="15" fill="rgb(227,5,17)" fg:x="299" fg:w="152"/><text x="24.4605%" y="271.50">regex_automata::nf..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (151 samples, 12.23%)</title><rect x="24.2915%" y="245" width="12.2267%" height="15" fill="rgb(221,226,24)" fg:x="300" fg:w="151"/><text x="24.5415%" y="255.50">alloc::vec::Vec&lt;T,..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.57%)</title><rect x="36.5182%" y="277" width="0.5668%" height="15" fill="rgb(211,5,48)" fg:x="451" fg:w="7"/><text x="36.7682%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="36.9231%" y="261" width="0.1619%" height="15" fill="rgb(219,150,6)" fg:x="456" fg:w="2"/><text x="37.1731%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (172 samples, 13.93%)</title><rect x="23.2389%" y="325" width="13.9271%" height="15" fill="rgb(251,46,16)" fg:x="287" fg:w="172"/><text x="23.4889%" y="335.50">&lt;core::iter::adapters..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (171 samples, 13.85%)</title><rect x="23.3198%" y="309" width="13.8462%" height="15" fill="rgb(220,204,40)" fg:x="288" fg:w="171"/><text x="23.5698%" y="319.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (171 samples, 13.85%)</title><rect x="23.3198%" y="293" width="13.8462%" height="15" fill="rgb(211,85,2)" fg:x="288" fg:w="171"/><text x="23.5698%" y="303.50">regex_automata::nfa::..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="37.0850%" y="277" width="0.0810%" height="15" fill="rgb(229,17,7)" fg:x="458" fg:w="1"/><text x="37.3350%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.0850%" y="261" width="0.0810%" height="15" fill="rgb(239,72,28)" fg:x="458" fg:w="1"/><text x="37.3350%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.0850%" y="245" width="0.0810%" height="15" fill="rgb(230,47,54)" fg:x="458" fg:w="1"/><text x="37.3350%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.0850%" y="229" width="0.0810%" height="15" fill="rgb(214,50,8)" fg:x="458" fg:w="1"/><text x="37.3350%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="37.1660%" y="325" width="0.0810%" height="15" fill="rgb(216,198,43)" fg:x="459" fg:w="1"/><text x="37.4160%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.2470%" y="309" width="0.0810%" height="15" fill="rgb(234,20,35)" fg:x="460" fg:w="1"/><text x="37.4970%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.3279%" y="309" width="0.0810%" height="15" fill="rgb(254,45,19)" fg:x="461" fg:w="1"/><text x="37.5779%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.3279%" y="293" width="0.0810%" height="15" fill="rgb(219,14,44)" fg:x="461" fg:w="1"/><text x="37.5779%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.3279%" y="277" width="0.0810%" height="15" fill="rgb(217,220,26)" fg:x="461" fg:w="1"/><text x="37.5779%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="37.4089%" y="309" width="0.0810%" height="15" fill="rgb(213,158,28)" fg:x="462" fg:w="1"/><text x="37.6589%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.49%)</title><rect x="37.4899%" y="309" width="0.4858%" height="15" fill="rgb(252,51,52)" fg:x="463" fg:w="6"/><text x="37.7399%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="37.7328%" y="293" width="0.2429%" height="15" fill="rgb(246,89,16)" fg:x="466" fg:w="3"/><text x="37.9828%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="37.7328%" y="277" width="0.2429%" height="15" fill="rgb(216,158,49)" fg:x="466" fg:w="3"/><text x="37.9828%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="37.7328%" y="261" width="0.2429%" height="15" fill="rgb(236,107,19)" fg:x="466" fg:w="3"/><text x="37.9828%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="37.9757%" y="309" width="0.3239%" height="15" fill="rgb(228,185,30)" fg:x="469" fg:w="4"/><text x="38.2257%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.2186%" y="293" width="0.0810%" height="15" fill="rgb(246,134,8)" fg:x="472" fg:w="1"/><text x="38.4686%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.2186%" y="277" width="0.0810%" height="15" fill="rgb(214,143,50)" fg:x="472" fg:w="1"/><text x="38.4686%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="38.2996%" y="309" width="0.0810%" height="15" fill="rgb(228,75,8)" fg:x="473" fg:w="1"/><text x="38.5496%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.21%)</title><rect x="37.2470%" y="325" width="1.2146%" height="15" fill="rgb(207,175,4)" fg:x="460" fg:w="15"/><text x="37.4970%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="38.3806%" y="309" width="0.0810%" height="15" fill="rgb(205,108,24)" fg:x="474" fg:w="1"/><text x="38.6306%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="38.3806%" y="293" width="0.0810%" height="15" fill="rgb(244,120,49)" fg:x="474" fg:w="1"/><text x="38.6306%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (233 samples, 18.87%)</title><rect x="19.7571%" y="357" width="18.8664%" height="15" fill="rgb(223,47,38)" fg:x="244" fg:w="233"/><text x="20.0071%" y="367.50">regex_automata::meta::strateg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (191 samples, 15.47%)</title><rect x="23.1579%" y="341" width="15.4656%" height="15" fill="rgb(229,179,11)" fg:x="286" fg:w="191"/><text x="23.4079%" y="351.50">regex_automata::nfa::tho..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="38.4615%" y="325" width="0.1619%" height="15" fill="rgb(231,122,1)" fg:x="475" fg:w="2"/><text x="38.7115%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="38.6235%" y="325" width="0.4049%" height="15" fill="rgb(245,119,9)" fg:x="477" fg:w="5"/><text x="38.8735%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="38.6235%" y="309" width="0.4049%" height="15" fill="rgb(241,163,25)" fg:x="477" fg:w="5"/><text x="38.8735%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="38.6235%" y="293" width="0.4049%" height="15" fill="rgb(217,214,3)" fg:x="477" fg:w="5"/><text x="38.8735%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="38.6235%" y="277" width="0.4049%" height="15" fill="rgb(240,86,28)" fg:x="477" fg:w="5"/><text x="38.8735%" y="287.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="38.6235%" y="261" width="0.4049%" height="15" fill="rgb(215,47,9)" fg:x="477" fg:w="5"/><text x="38.8735%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="38.6235%" y="357" width="0.4858%" height="15" fill="rgb(252,25,45)" fg:x="477" fg:w="6"/><text x="38.8735%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="38.6235%" y="341" width="0.4858%" height="15" fill="rgb(251,164,9)" fg:x="477" fg:w="6"/><text x="38.8735%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="39.0283%" y="325" width="0.0810%" height="15" fill="rgb(233,194,0)" fg:x="482" fg:w="1"/><text x="39.2783%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="39.1903%" y="309" width="0.0810%" height="15" fill="rgb(249,111,24)" fg:x="484" fg:w="1"/><text x="39.4403%" y="319.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="39.1903%" y="293" width="0.0810%" height="15" fill="rgb(250,223,3)" fg:x="484" fg:w="1"/><text x="39.4403%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="39.2713%" y="309" width="0.0810%" height="15" fill="rgb(236,178,37)" fg:x="485" fg:w="1"/><text x="39.5213%" y="319.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="39.2713%" y="293" width="0.0810%" height="15" fill="rgb(241,158,50)" fg:x="485" fg:w="1"/><text x="39.5213%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="39.2713%" y="277" width="0.0810%" height="15" fill="rgb(213,121,41)" fg:x="485" fg:w="1"/><text x="39.5213%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="39.1903%" y="325" width="0.2429%" height="15" fill="rgb(240,92,3)" fg:x="484" fg:w="3"/><text x="39.4403%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_unicode_class (1 samples, 0.08%)</title><rect x="39.3522%" y="309" width="0.0810%" height="15" fill="rgb(205,123,3)" fg:x="486" fg:w="1"/><text x="39.6022%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (249 samples, 20.16%)</title><rect x="19.3522%" y="405" width="20.1619%" height="15" fill="rgb(205,97,47)" fg:x="239" fg:w="249"/><text x="19.6022%" y="415.50">&lt;regex::regex::string::Regex as ..</text></g><g><title>regex::builders::Builder::build_one_string (249 samples, 20.16%)</title><rect x="19.3522%" y="389" width="20.1619%" height="15" fill="rgb(247,152,14)" fg:x="239" fg:w="249"/><text x="19.6022%" y="399.50">regex::builders::Builder::build_..</text></g><g><title>regex_automata::meta::regex::Builder::build (249 samples, 20.16%)</title><rect x="19.3522%" y="373" width="20.1619%" height="15" fill="rgb(248,195,53)" fg:x="239" fg:w="249"/><text x="19.6022%" y="383.50">regex_automata::meta::regex::Bui..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="39.1093%" y="357" width="0.4049%" height="15" fill="rgb(226,201,16)" fg:x="483" fg:w="5"/><text x="39.3593%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="39.1093%" y="341" width="0.4049%" height="15" fill="rgb(205,98,0)" fg:x="483" fg:w="5"/><text x="39.3593%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.4332%" y="325" width="0.0810%" height="15" fill="rgb(214,191,48)" fg:x="487" fg:w="1"/><text x="39.6832%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.4332%" y="309" width="0.0810%" height="15" fill="rgb(237,112,39)" fg:x="487" fg:w="1"/><text x="39.6832%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.4332%" y="293" width="0.0810%" height="15" fill="rgb(247,203,27)" fg:x="487" fg:w="1"/><text x="39.6832%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.5142%" y="341" width="0.0810%" height="15" fill="rgb(235,124,28)" fg:x="488" fg:w="1"/><text x="39.7642%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.5142%" y="325" width="0.0810%" height="15" fill="rgb(208,207,46)" fg:x="488" fg:w="1"/><text x="39.7642%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="39.5142%" y="357" width="0.1619%" height="15" fill="rgb(234,176,4)" fg:x="488" fg:w="2"/><text x="39.7642%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.5951%" y="341" width="0.0810%" height="15" fill="rgb(230,133,28)" fg:x="489" fg:w="1"/><text x="39.8451%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="39.5142%" y="373" width="0.2429%" height="15" fill="rgb(211,137,40)" fg:x="488" fg:w="3"/><text x="39.7642%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="39.6761%" y="357" width="0.0810%" height="15" fill="rgb(254,35,13)" fg:x="490" fg:w="1"/><text x="39.9261%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="39.6761%" y="341" width="0.0810%" height="15" fill="rgb(225,49,51)" fg:x="490" fg:w="1"/><text x="39.9261%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="39.5142%" y="405" width="0.3239%" height="15" fill="rgb(251,10,15)" fg:x="488" fg:w="4"/><text x="39.7642%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="39.5142%" y="389" width="0.3239%" height="15" fill="rgb(228,207,15)" fg:x="488" fg:w="4"/><text x="39.7642%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="39.7571%" y="373" width="0.0810%" height="15" fill="rgb(241,99,19)" fg:x="491" fg:w="1"/><text x="40.0071%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="39.7571%" y="357" width="0.0810%" height="15" fill="rgb(207,104,49)" fg:x="491" fg:w="1"/><text x="40.0071%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.2429%" y="325" width="0.0810%" height="15" fill="rgb(234,99,18)" fg:x="497" fg:w="1"/><text x="40.4929%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.2429%" y="309" width="0.0810%" height="15" fill="rgb(213,191,49)" fg:x="497" fg:w="1"/><text x="40.4929%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.2429%" y="293" width="0.0810%" height="15" fill="rgb(210,226,19)" fg:x="497" fg:w="1"/><text x="40.4929%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.3239%" y="325" width="0.0810%" height="15" fill="rgb(229,97,18)" fg:x="498" fg:w="1"/><text x="40.5739%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.3239%" y="309" width="0.0810%" height="15" fill="rgb(211,167,15)" fg:x="498" fg:w="1"/><text x="40.5739%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="40.3239%" y="293" width="0.0810%" height="15" fill="rgb(210,169,34)" fg:x="498" fg:w="1"/><text x="40.5739%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (271 samples, 21.94%)</title><rect x="18.6235%" y="421" width="21.9433%" height="15" fill="rgb(241,121,31)" fg:x="230" fg:w="271"/><text x="18.8735%" y="431.50">indefinite::helper::Helper::get_fir..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.73%)</title><rect x="39.8381%" y="405" width="0.7287%" height="15" fill="rgb(232,40,11)" fg:x="492" fg:w="9"/><text x="40.0881%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.73%)</title><rect x="39.8381%" y="389" width="0.7287%" height="15" fill="rgb(205,86,26)" fg:x="492" fg:w="9"/><text x="40.0881%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.65%)</title><rect x="39.9190%" y="373" width="0.6478%" height="15" fill="rgb(231,126,28)" fg:x="493" fg:w="8"/><text x="40.1690%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.65%)</title><rect x="39.9190%" y="357" width="0.6478%" height="15" fill="rgb(219,221,18)" fg:x="493" fg:w="8"/><text x="40.1690%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.65%)</title><rect x="39.9190%" y="341" width="0.6478%" height="15" fill="rgb(211,40,0)" fg:x="493" fg:w="8"/><text x="40.1690%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="40.4049%" y="325" width="0.1619%" height="15" fill="rgb(239,85,43)" fg:x="499" fg:w="2"/><text x="40.6549%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="40.9717%" y="325" width="0.1619%" height="15" fill="rgb(231,55,21)" fg:x="506" fg:w="2"/><text x="41.2217%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="40.9717%" y="309" width="0.1619%" height="15" fill="rgb(225,184,43)" fg:x="506" fg:w="2"/><text x="41.2217%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.9717%" y="293" width="0.1619%" height="15" fill="rgb(251,158,41)" fg:x="506" fg:w="2"/><text x="41.2217%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.0526%" y="277" width="0.0810%" height="15" fill="rgb(234,159,37)" fg:x="507" fg:w="1"/><text x="41.3026%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.1336%" y="325" width="0.0810%" height="15" fill="rgb(216,204,22)" fg:x="508" fg:w="1"/><text x="41.3836%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="40.8097%" y="357" width="0.4858%" height="15" fill="rgb(214,17,3)" fg:x="504" fg:w="6"/><text x="41.0597%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="40.8097%" y="341" width="0.4858%" height="15" fill="rgb(212,111,17)" fg:x="504" fg:w="6"/><text x="41.0597%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.2146%" y="325" width="0.0810%" height="15" fill="rgb(221,157,24)" fg:x="509" fg:w="1"/><text x="41.4646%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="41.2955%" y="357" width="0.1619%" height="15" fill="rgb(252,16,13)" fg:x="510" fg:w="2"/><text x="41.5455%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="41.2955%" y="341" width="0.1619%" height="15" fill="rgb(221,62,2)" fg:x="510" fg:w="2"/><text x="41.5455%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.3765%" y="325" width="0.0810%" height="15" fill="rgb(247,87,22)" fg:x="511" fg:w="1"/><text x="41.6265%" y="335.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="41.4575%" y="357" width="0.0810%" height="15" fill="rgb(215,73,9)" fg:x="512" fg:w="1"/><text x="41.7075%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (35 samples, 2.83%)</title><rect x="41.8623%" y="341" width="2.8340%" height="15" fill="rgb(207,175,33)" fg:x="517" fg:w="35"/><text x="42.1123%" y="351.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (35 samples, 2.83%)</title><rect x="41.8623%" y="325" width="2.8340%" height="15" fill="rgb(243,129,54)" fg:x="517" fg:w="35"/><text x="42.1123%" y="335.50">co..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.6154%" y="309" width="0.0810%" height="15" fill="rgb(227,119,45)" fg:x="551" fg:w="1"/><text x="44.8654%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="44.6964%" y="325" width="0.0810%" height="15" fill="rgb(205,109,36)" fg:x="552" fg:w="1"/><text x="44.9464%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="44.6964%" y="309" width="0.0810%" height="15" fill="rgb(205,6,39)" fg:x="552" fg:w="1"/><text x="44.9464%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.6964%" y="293" width="0.0810%" height="15" fill="rgb(221,32,16)" fg:x="552" fg:w="1"/><text x="44.9464%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="44.7773%" y="325" width="0.4858%" height="15" fill="rgb(228,144,50)" fg:x="553" fg:w="6"/><text x="45.0273%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="45.1012%" y="309" width="0.1619%" height="15" fill="rgb(229,201,53)" fg:x="557" fg:w="2"/><text x="45.3512%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.65%)</title><rect x="44.6964%" y="341" width="0.6478%" height="15" fill="rgb(249,153,27)" fg:x="552" fg:w="8"/><text x="44.9464%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="45.2632%" y="325" width="0.0810%" height="15" fill="rgb(227,106,25)" fg:x="559" fg:w="1"/><text x="45.5132%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="45.2632%" y="309" width="0.0810%" height="15" fill="rgb(230,65,29)" fg:x="559" fg:w="1"/><text x="45.5132%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.6680%" y="309" width="0.0810%" height="15" fill="rgb(221,57,46)" fg:x="564" fg:w="1"/><text x="45.9180%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="45.7490%" y="309" width="0.0810%" height="15" fill="rgb(229,161,17)" fg:x="565" fg:w="1"/><text x="45.9990%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="45.7490%" y="293" width="0.0810%" height="15" fill="rgb(222,213,11)" fg:x="565" fg:w="1"/><text x="45.9990%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="45.8300%" y="309" width="0.0810%" height="15" fill="rgb(235,35,13)" fg:x="566" fg:w="1"/><text x="46.0800%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.8300%" y="293" width="0.0810%" height="15" fill="rgb(233,158,34)" fg:x="566" fg:w="1"/><text x="46.0800%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="45.9109%" y="309" width="0.1619%" height="15" fill="rgb(215,151,48)" fg:x="567" fg:w="2"/><text x="46.1609%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="45.9919%" y="293" width="0.0810%" height="15" fill="rgb(229,84,14)" fg:x="568" fg:w="1"/><text x="46.2419%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.9919%" y="277" width="0.0810%" height="15" fill="rgb(229,68,14)" fg:x="568" fg:w="1"/><text x="46.2419%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="46.5587%" y="277" width="0.3239%" height="15" fill="rgb(243,106,26)" fg:x="575" fg:w="4"/><text x="46.8087%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="46.5587%" y="261" width="0.3239%" height="15" fill="rgb(206,45,38)" fg:x="575" fg:w="4"/><text x="46.8087%" y="271.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="46.5587%" y="245" width="0.3239%" height="15" fill="rgb(226,6,15)" fg:x="575" fg:w="4"/><text x="46.8087%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (12 samples, 0.97%)</title><rect x="46.0729%" y="309" width="0.9717%" height="15" fill="rgb(232,22,54)" fg:x="569" fg:w="12"/><text x="46.3229%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (8 samples, 0.65%)</title><rect x="46.3968%" y="293" width="0.6478%" height="15" fill="rgb(229,222,32)" fg:x="573" fg:w="8"/><text x="46.6468%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="46.8826%" y="277" width="0.1619%" height="15" fill="rgb(228,62,29)" fg:x="579" fg:w="2"/><text x="47.1326%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.9636%" y="261" width="0.0810%" height="15" fill="rgb(251,103,34)" fg:x="580" fg:w="1"/><text x="47.2136%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.9636%" y="245" width="0.0810%" height="15" fill="rgb(233,12,30)" fg:x="580" fg:w="1"/><text x="47.2136%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.1255%" y="293" width="0.0810%" height="15" fill="rgb(238,52,0)" fg:x="582" fg:w="1"/><text x="47.3755%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.49%)</title><rect x="47.2065%" y="293" width="0.4858%" height="15" fill="rgb(223,98,5)" fg:x="583" fg:w="6"/><text x="47.4565%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="47.2874%" y="277" width="0.4049%" height="15" fill="rgb(228,75,37)" fg:x="584" fg:w="5"/><text x="47.5374%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (30 samples, 2.43%)</title><rect x="45.3441%" y="341" width="2.4291%" height="15" fill="rgb(205,115,49)" fg:x="560" fg:w="30"/><text x="45.5941%" y="351.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (30 samples, 2.43%)</title><rect x="45.3441%" y="325" width="2.4291%" height="15" fill="rgb(250,154,43)" fg:x="560" fg:w="30"/><text x="45.5941%" y="335.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (9 samples, 0.73%)</title><rect x="47.0445%" y="309" width="0.7287%" height="15" fill="rgb(226,43,29)" fg:x="581" fg:w="9"/><text x="47.2945%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="47.6923%" y="293" width="0.0810%" height="15" fill="rgb(249,228,39)" fg:x="589" fg:w="1"/><text x="47.9423%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="47.7733%" y="341" width="0.0810%" height="15" fill="rgb(216,79,43)" fg:x="590" fg:w="1"/><text x="48.0233%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="47.7733%" y="325" width="0.0810%" height="15" fill="rgb(228,95,12)" fg:x="590" fg:w="1"/><text x="48.0233%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="47.7733%" y="309" width="0.0810%" height="15" fill="rgb(249,221,15)" fg:x="590" fg:w="1"/><text x="48.0233%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.9352%" y="309" width="0.0810%" height="15" fill="rgb(233,34,13)" fg:x="592" fg:w="1"/><text x="48.1852%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="48.0162%" y="293" width="0.0810%" height="15" fill="rgb(214,103,39)" fg:x="593" fg:w="1"/><text x="48.2662%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="48.0972%" y="277" width="0.0810%" height="15" fill="rgb(251,126,39)" fg:x="594" fg:w="1"/><text x="48.3472%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="48.1781%" y="277" width="0.0810%" height="15" fill="rgb(214,216,36)" fg:x="595" fg:w="1"/><text x="48.4281%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.73%)</title><rect x="49.3117%" y="229" width="0.7287%" height="15" fill="rgb(220,221,8)" fg:x="609" fg:w="9"/><text x="49.5617%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.0405%" y="229" width="0.0810%" height="15" fill="rgb(240,216,3)" fg:x="618" fg:w="1"/><text x="50.2905%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.49%)</title><rect x="50.1215%" y="229" width="0.4858%" height="15" fill="rgb(232,218,17)" fg:x="619" fg:w="6"/><text x="50.3715%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="50.4453%" y="213" width="0.1619%" height="15" fill="rgb(229,163,45)" fg:x="623" fg:w="2"/><text x="50.6953%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="50.4453%" y="197" width="0.1619%" height="15" fill="rgb(231,110,42)" fg:x="623" fg:w="2"/><text x="50.6953%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="50.4453%" y="181" width="0.1619%" height="15" fill="rgb(208,170,48)" fg:x="623" fg:w="2"/><text x="50.6953%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="51.0121%" y="197" width="0.1619%" height="15" fill="rgb(239,116,25)" fg:x="630" fg:w="2"/><text x="51.2621%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.2551%" y="165" width="0.0810%" height="15" fill="rgb(219,200,50)" fg:x="633" fg:w="1"/><text x="51.5051%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="51.1741%" y="197" width="0.2429%" height="15" fill="rgb(245,200,0)" fg:x="632" fg:w="3"/><text x="51.4241%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.2551%" y="181" width="0.1619%" height="15" fill="rgb(245,119,33)" fg:x="633" fg:w="2"/><text x="51.5051%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.3360%" y="165" width="0.0810%" height="15" fill="rgb(231,125,12)" fg:x="634" fg:w="1"/><text x="51.5860%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.0648%" y="181" width="0.0810%" height="15" fill="rgb(216,96,41)" fg:x="643" fg:w="1"/><text x="52.3148%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (21 samples, 1.70%)</title><rect x="50.6073%" y="229" width="1.7004%" height="15" fill="rgb(248,43,45)" fg:x="625" fg:w="21"/><text x="50.8573%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (19 samples, 1.54%)</title><rect x="50.7692%" y="213" width="1.5385%" height="15" fill="rgb(217,222,7)" fg:x="627" fg:w="19"/><text x="51.0192%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (11 samples, 0.89%)</title><rect x="51.4170%" y="197" width="0.8907%" height="15" fill="rgb(233,28,6)" fg:x="635" fg:w="11"/><text x="51.6670%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="52.1457%" y="181" width="0.1619%" height="15" fill="rgb(231,218,15)" fg:x="644" fg:w="2"/><text x="52.3957%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.2267%" y="165" width="0.0810%" height="15" fill="rgb(226,171,48)" fg:x="645" fg:w="1"/><text x="52.4767%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.2267%" y="149" width="0.0810%" height="15" fill="rgb(235,201,9)" fg:x="645" fg:w="1"/><text x="52.4767%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.2267%" y="133" width="0.0810%" height="15" fill="rgb(217,80,15)" fg:x="645" fg:w="1"/><text x="52.4767%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="52.3077%" y="229" width="0.0810%" height="15" fill="rgb(219,152,8)" fg:x="646" fg:w="1"/><text x="52.5577%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="52.3077%" y="213" width="0.0810%" height="15" fill="rgb(243,107,38)" fg:x="646" fg:w="1"/><text x="52.5577%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="52.3077%" y="197" width="0.0810%" height="15" fill="rgb(231,17,5)" fg:x="646" fg:w="1"/><text x="52.5577%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="52.3887%" y="213" width="0.0810%" height="15" fill="rgb(209,25,54)" fg:x="647" fg:w="1"/><text x="52.6387%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.3887%" y="197" width="0.0810%" height="15" fill="rgb(219,0,2)" fg:x="647" fg:w="1"/><text x="52.6387%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.3887%" y="181" width="0.0810%" height="15" fill="rgb(246,9,5)" fg:x="647" fg:w="1"/><text x="52.6387%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.3887%" y="165" width="0.0810%" height="15" fill="rgb(226,159,4)" fg:x="647" fg:w="1"/><text x="52.6387%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="52.4696%" y="197" width="0.1619%" height="15" fill="rgb(219,175,34)" fg:x="648" fg:w="2"/><text x="52.7196%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (127 samples, 10.28%)</title><rect x="52.3887%" y="229" width="10.2834%" height="15" fill="rgb(236,10,46)" fg:x="647" fg:w="127"/><text x="52.6387%" y="239.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (126 samples, 10.20%)</title><rect x="52.4696%" y="213" width="10.2024%" height="15" fill="rgb(240,211,16)" fg:x="648" fg:w="126"/><text x="52.7196%" y="223.50">regex_automata:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (124 samples, 10.04%)</title><rect x="52.6316%" y="197" width="10.0405%" height="15" fill="rgb(205,3,43)" fg:x="650" fg:w="124"/><text x="52.8816%" y="207.50">alloc::vec::Vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.49%)</title><rect x="62.6721%" y="229" width="0.4858%" height="15" fill="rgb(245,7,22)" fg:x="774" fg:w="6"/><text x="62.9221%" y="239.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="62.8340%" y="213" width="0.3239%" height="15" fill="rgb(239,132,32)" fg:x="776" fg:w="4"/><text x="63.0840%" y="223.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="63.1579%" y="229" width="0.0810%" height="15" fill="rgb(228,202,34)" fg:x="780" fg:w="1"/><text x="63.4079%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="63.2389%" y="229" width="0.0810%" height="15" fill="rgb(254,200,22)" fg:x="781" fg:w="1"/><text x="63.4889%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (194 samples, 15.71%)</title><rect x="47.9352%" y="325" width="15.7085%" height="15" fill="rgb(219,10,39)" fg:x="592" fg:w="194"/><text x="48.1852%" y="335.50">&lt;core::iter::adapters::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (193 samples, 15.63%)</title><rect x="48.0162%" y="309" width="15.6275%" height="15" fill="rgb(226,210,39)" fg:x="593" fg:w="193"/><text x="48.2662%" y="319.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (192 samples, 15.55%)</title><rect x="48.0972%" y="293" width="15.5466%" height="15" fill="rgb(208,219,16)" fg:x="594" fg:w="192"/><text x="48.3472%" y="303.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (190 samples, 15.38%)</title><rect x="48.2591%" y="277" width="15.3846%" height="15" fill="rgb(216,158,51)" fg:x="596" fg:w="190"/><text x="48.5091%" y="287.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (190 samples, 15.38%)</title><rect x="48.2591%" y="261" width="15.3846%" height="15" fill="rgb(233,14,44)" fg:x="596" fg:w="190"/><text x="48.5091%" y="271.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (189 samples, 15.30%)</title><rect x="48.3401%" y="245" width="15.3036%" height="15" fill="rgb(237,97,39)" fg:x="597" fg:w="189"/><text x="48.5901%" y="255.50">regex_automata::nfa::th..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="63.3198%" y="229" width="0.3239%" height="15" fill="rgb(218,198,43)" fg:x="782" fg:w="4"/><text x="63.5698%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.4818%" y="213" width="0.1619%" height="15" fill="rgb(231,104,20)" fg:x="784" fg:w="2"/><text x="63.7318%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.5628%" y="197" width="0.0810%" height="15" fill="rgb(254,36,13)" fg:x="785" fg:w="1"/><text x="63.8128%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.5628%" y="181" width="0.0810%" height="15" fill="rgb(248,14,50)" fg:x="785" fg:w="1"/><text x="63.8128%" y="191.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="63.8866%" y="309" width="0.1619%" height="15" fill="rgb(217,107,29)" fg:x="789" fg:w="2"/><text x="64.1366%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.0486%" y="309" width="0.0810%" height="15" fill="rgb(251,169,33)" fg:x="791" fg:w="1"/><text x="64.2986%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.1296%" y="309" width="0.0810%" height="15" fill="rgb(217,108,32)" fg:x="792" fg:w="1"/><text x="64.3796%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (16 samples, 1.30%)</title><rect x="64.2105%" y="309" width="1.2955%" height="15" fill="rgb(219,66,42)" fg:x="793" fg:w="16"/><text x="64.4605%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.49%)</title><rect x="65.0202%" y="293" width="0.4858%" height="15" fill="rgb(206,180,7)" fg:x="803" fg:w="6"/><text x="65.2702%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="65.1012%" y="277" width="0.4049%" height="15" fill="rgb(208,226,31)" fg:x="804" fg:w="5"/><text x="65.3512%" y="287.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="65.1012%" y="261" width="0.4049%" height="15" fill="rgb(218,26,49)" fg:x="804" fg:w="5"/><text x="65.3512%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="65.5061%" y="309" width="0.2429%" height="15" fill="rgb(233,197,48)" fg:x="809" fg:w="3"/><text x="65.7561%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.6680%" y="293" width="0.0810%" height="15" fill="rgb(252,181,51)" fg:x="811" fg:w="1"/><text x="65.9180%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.6680%" y="277" width="0.0810%" height="15" fill="rgb(253,90,19)" fg:x="811" fg:w="1"/><text x="65.9180%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.6680%" y="261" width="0.0810%" height="15" fill="rgb(215,171,30)" fg:x="811" fg:w="1"/><text x="65.9180%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="65.7490%" y="309" width="0.2429%" height="15" fill="rgb(214,222,9)" fg:x="812" fg:w="3"/><text x="65.9990%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (225 samples, 18.22%)</title><rect x="47.8543%" y="341" width="18.2186%" height="15" fill="rgb(223,3,22)" fg:x="591" fg:w="225"/><text x="48.1043%" y="351.50">regex_automata::nfa::thompso..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (30 samples, 2.43%)</title><rect x="63.6437%" y="325" width="2.4291%" height="15" fill="rgb(225,196,46)" fg:x="786" fg:w="30"/><text x="63.8937%" y="335.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="65.9919%" y="309" width="0.0810%" height="15" fill="rgb(209,110,37)" fg:x="815" fg:w="1"/><text x="66.2419%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="65.9919%" y="293" width="0.0810%" height="15" fill="rgb(249,89,12)" fg:x="815" fg:w="1"/><text x="66.2419%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9919%" y="277" width="0.0810%" height="15" fill="rgb(226,27,33)" fg:x="815" fg:w="1"/><text x="66.2419%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (304 samples, 24.62%)</title><rect x="41.5385%" y="357" width="24.6154%" height="15" fill="rgb(213,82,22)" fg:x="513" fg:w="304"/><text x="41.7885%" y="367.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="66.0729%" y="341" width="0.0810%" height="15" fill="rgb(248,140,0)" fg:x="816" fg:w="1"/><text x="66.3229%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="66.4777%" y="309" width="0.0810%" height="15" fill="rgb(228,106,3)" fg:x="821" fg:w="1"/><text x="66.7277%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="66.4777%" y="293" width="0.0810%" height="15" fill="rgb(209,23,37)" fg:x="821" fg:w="1"/><text x="66.7277%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.57%)</title><rect x="66.3968%" y="325" width="0.5668%" height="15" fill="rgb(241,93,50)" fg:x="820" fg:w="7"/><text x="66.6468%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="66.5587%" y="309" width="0.4049%" height="15" fill="rgb(253,46,43)" fg:x="822" fg:w="5"/><text x="66.8087%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="66.5587%" y="293" width="0.4049%" height="15" fill="rgb(226,206,43)" fg:x="822" fg:w="5"/><text x="66.8087%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="66.5587%" y="277" width="0.4049%" height="15" fill="rgb(217,54,7)" fg:x="822" fg:w="5"/><text x="66.8087%" y="287.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="66.5587%" y="261" width="0.4049%" height="15" fill="rgb(223,5,52)" fg:x="822" fg:w="5"/><text x="66.8087%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="66.9636%" y="325" width="0.1619%" height="15" fill="rgb(206,52,46)" fg:x="827" fg:w="2"/><text x="67.2136%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.2065%" y="309" width="0.0810%" height="15" fill="rgb(253,136,11)" fg:x="830" fg:w="1"/><text x="67.4565%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (15 samples, 1.21%)</title><rect x="66.1538%" y="357" width="1.2146%" height="15" fill="rgb(208,106,33)" fg:x="817" fg:w="15"/><text x="66.4038%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (15 samples, 1.21%)</title><rect x="66.1538%" y="341" width="1.2146%" height="15" fill="rgb(206,54,4)" fg:x="817" fg:w="15"/><text x="66.4038%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="67.1255%" y="325" width="0.2429%" height="15" fill="rgb(213,3,15)" fg:x="829" fg:w="3"/><text x="67.3755%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.2874%" y="309" width="0.0810%" height="15" fill="rgb(252,211,39)" fg:x="831" fg:w="1"/><text x="67.5374%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.2874%" y="293" width="0.0810%" height="15" fill="rgb(223,6,36)" fg:x="831" fg:w="1"/><text x="67.5374%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2874%" y="277" width="0.0810%" height="15" fill="rgb(252,169,45)" fg:x="831" fg:w="1"/><text x="67.5374%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="67.3684%" y="325" width="0.1619%" height="15" fill="rgb(212,48,26)" fg:x="832" fg:w="2"/><text x="67.6184%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="67.3684%" y="309" width="0.1619%" height="15" fill="rgb(251,102,48)" fg:x="832" fg:w="2"/><text x="67.6184%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="67.5304%" y="325" width="0.1619%" height="15" fill="rgb(243,208,16)" fg:x="834" fg:w="2"/><text x="67.7804%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="67.6113%" y="309" width="0.0810%" height="15" fill="rgb(219,96,24)" fg:x="835" fg:w="1"/><text x="67.8613%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (335 samples, 27.13%)</title><rect x="40.6478%" y="373" width="27.1255%" height="15" fill="rgb(219,33,29)" fg:x="502" fg:w="335"/><text x="40.8978%" y="383.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="67.3684%" y="357" width="0.4049%" height="15" fill="rgb(223,176,5)" fg:x="832" fg:w="5"/><text x="67.6184%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="67.3684%" y="341" width="0.4049%" height="15" fill="rgb(228,140,14)" fg:x="832" fg:w="5"/><text x="67.6184%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="67.6923%" y="325" width="0.0810%" height="15" fill="rgb(217,179,31)" fg:x="836" fg:w="1"/><text x="67.9423%" y="335.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (337 samples, 27.29%)</title><rect x="40.5668%" y="405" width="27.2874%" height="15" fill="rgb(230,9,30)" fg:x="501" fg:w="337"/><text x="40.8168%" y="415.50">&lt;regex::regex::string::Regex as core::str::t..</text></g><g><title>regex::builders::Builder::build_one_string (337 samples, 27.29%)</title><rect x="40.5668%" y="389" width="27.2874%" height="15" fill="rgb(230,136,20)" fg:x="501" fg:w="337"/><text x="40.8168%" y="399.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="67.7733%" y="373" width="0.0810%" height="15" fill="rgb(215,210,22)" fg:x="837" fg:w="1"/><text x="68.0233%" y="383.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="67.9352%" y="373" width="0.1619%" height="15" fill="rgb(218,43,5)" fg:x="839" fg:w="2"/><text x="68.1852%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="68.0972%" y="373" width="0.0810%" height="15" fill="rgb(216,11,5)" fg:x="841" fg:w="1"/><text x="68.3472%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="68.0972%" y="357" width="0.0810%" height="15" fill="rgb(209,82,29)" fg:x="841" fg:w="1"/><text x="68.3472%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="68.0972%" y="341" width="0.0810%" height="15" fill="rgb(244,115,12)" fg:x="841" fg:w="1"/><text x="68.3472%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.0972%" y="325" width="0.0810%" height="15" fill="rgb(222,82,18)" fg:x="841" fg:w="1"/><text x="68.3472%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0972%" y="309" width="0.0810%" height="15" fill="rgb(249,227,8)" fg:x="841" fg:w="1"/><text x="68.3472%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="68.1781%" y="357" width="0.1619%" height="15" fill="rgb(253,141,45)" fg:x="842" fg:w="2"/><text x="68.4281%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="68.1781%" y="341" width="0.1619%" height="15" fill="rgb(234,184,4)" fg:x="842" fg:w="2"/><text x="68.4281%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (9 samples, 0.73%)</title><rect x="67.8543%" y="405" width="0.7287%" height="15" fill="rgb(218,194,23)" fg:x="838" fg:w="9"/><text x="68.1043%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (9 samples, 0.73%)</title><rect x="67.8543%" y="389" width="0.7287%" height="15" fill="rgb(235,66,41)" fg:x="838" fg:w="9"/><text x="68.1043%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.40%)</title><rect x="68.1781%" y="373" width="0.4049%" height="15" fill="rgb(245,217,1)" fg:x="842" fg:w="5"/><text x="68.4281%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="68.3401%" y="357" width="0.2429%" height="15" fill="rgb(229,91,1)" fg:x="844" fg:w="3"/><text x="68.5901%" y="367.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="68.3401%" y="341" width="0.2429%" height="15" fill="rgb(207,101,30)" fg:x="844" fg:w="3"/><text x="68.5901%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="68.5830%" y="357" width="0.0810%" height="15" fill="rgb(223,82,49)" fg:x="847" fg:w="1"/><text x="68.8330%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="68.5830%" y="341" width="0.0810%" height="15" fill="rgb(218,167,17)" fg:x="847" fg:w="1"/><text x="68.8330%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="68.5830%" y="389" width="0.1619%" height="15" fill="rgb(208,103,14)" fg:x="847" fg:w="2"/><text x="68.8330%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="68.5830%" y="373" width="0.1619%" height="15" fill="rgb(238,20,8)" fg:x="847" fg:w="2"/><text x="68.8330%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="68.6640%" y="357" width="0.0810%" height="15" fill="rgb(218,80,54)" fg:x="848" fg:w="1"/><text x="68.9140%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.6640%" y="341" width="0.0810%" height="15" fill="rgb(240,144,17)" fg:x="848" fg:w="1"/><text x="68.9140%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.6640%" y="325" width="0.0810%" height="15" fill="rgb(245,27,50)" fg:x="848" fg:w="1"/><text x="68.9140%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.6640%" y="309" width="0.0810%" height="15" fill="rgb(251,51,7)" fg:x="848" fg:w="1"/><text x="68.9140%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.2308%" y="309" width="0.0810%" height="15" fill="rgb(245,217,29)" fg:x="855" fg:w="1"/><text x="69.4808%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.2308%" y="293" width="0.0810%" height="15" fill="rgb(221,176,29)" fg:x="855" fg:w="1"/><text x="69.4808%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.2308%" y="277" width="0.0810%" height="15" fill="rgb(212,180,24)" fg:x="855" fg:w="1"/><text x="69.4808%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="69.3117%" y="309" width="0.1619%" height="15" fill="rgb(254,24,2)" fg:x="856" fg:w="2"/><text x="69.5617%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.3927%" y="293" width="0.0810%" height="15" fill="rgb(230,100,2)" fg:x="857" fg:w="1"/><text x="69.6427%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.81%)</title><rect x="68.9069%" y="341" width="0.8097%" height="15" fill="rgb(219,142,25)" fg:x="851" fg:w="10"/><text x="69.1569%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.81%)</title><rect x="68.9069%" y="325" width="0.8097%" height="15" fill="rgb(240,73,43)" fg:x="851" fg:w="10"/><text x="69.1569%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="69.4737%" y="309" width="0.2429%" height="15" fill="rgb(214,114,15)" fg:x="858" fg:w="3"/><text x="69.7237%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (361 samples, 29.23%)</title><rect x="40.5668%" y="421" width="29.2308%" height="15" fill="rgb(207,130,4)" fg:x="501" fg:w="361"/><text x="40.8168%" y="431.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (15 samples, 1.21%)</title><rect x="68.5830%" y="405" width="1.2146%" height="15" fill="rgb(221,25,40)" fg:x="847" fg:w="15"/><text x="68.8330%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.05%)</title><rect x="68.7449%" y="389" width="1.0526%" height="15" fill="rgb(241,184,7)" fg:x="849" fg:w="13"/><text x="68.9949%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.97%)</title><rect x="68.8259%" y="373" width="0.9717%" height="15" fill="rgb(235,159,4)" fg:x="850" fg:w="12"/><text x="69.0759%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.97%)</title><rect x="68.8259%" y="357" width="0.9717%" height="15" fill="rgb(214,87,48)" fg:x="850" fg:w="12"/><text x="69.0759%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="69.7166%" y="341" width="0.0810%" height="15" fill="rgb(246,198,24)" fg:x="861" fg:w="1"/><text x="69.9666%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="69.7166%" y="325" width="0.0810%" height="15" fill="rgb(209,66,40)" fg:x="861" fg:w="1"/><text x="69.9666%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.7166%" y="309" width="0.0810%" height="15" fill="rgb(233,147,39)" fg:x="861" fg:w="1"/><text x="69.9666%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.7166%" y="293" width="0.0810%" height="15" fill="rgb(231,145,52)" fg:x="861" fg:w="1"/><text x="69.9666%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7166%" y="277" width="0.0810%" height="15" fill="rgb(206,20,26)" fg:x="861" fg:w="1"/><text x="69.9666%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="69.8785%" y="309" width="0.0810%" height="15" fill="rgb(238,220,4)" fg:x="863" fg:w="1"/><text x="70.1285%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="69.8785%" y="341" width="0.2429%" height="15" fill="rgb(252,195,42)" fg:x="863" fg:w="3"/><text x="70.1285%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="69.8785%" y="325" width="0.2429%" height="15" fill="rgb(209,10,6)" fg:x="863" fg:w="3"/><text x="70.1285%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="69.9595%" y="309" width="0.1619%" height="15" fill="rgb(229,3,52)" fg:x="864" fg:w="2"/><text x="70.2095%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.9595%" y="293" width="0.1619%" height="15" fill="rgb(253,49,37)" fg:x="864" fg:w="2"/><text x="70.2095%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="70.0405%" y="277" width="0.0810%" height="15" fill="rgb(240,103,49)" fg:x="865" fg:w="1"/><text x="70.2905%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="70.1215%" y="341" width="0.0810%" height="15" fill="rgb(250,182,30)" fg:x="866" fg:w="1"/><text x="70.3715%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.1215%" y="325" width="0.0810%" height="15" fill="rgb(248,8,30)" fg:x="866" fg:w="1"/><text x="70.3715%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.2024%" y="325" width="0.0810%" height="15" fill="rgb(237,120,30)" fg:x="867" fg:w="1"/><text x="70.4524%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.2024%" y="309" width="0.0810%" height="15" fill="rgb(221,146,34)" fg:x="867" fg:w="1"/><text x="70.4524%" y="319.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="70.2024%" y="341" width="0.1619%" height="15" fill="rgb(242,55,13)" fg:x="867" fg:w="2"/><text x="70.4524%" y="351.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="70.2834%" y="325" width="0.0810%" height="15" fill="rgb(242,112,31)" fg:x="868" fg:w="1"/><text x="70.5334%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2834%" y="309" width="0.0810%" height="15" fill="rgb(249,192,27)" fg:x="868" fg:w="1"/><text x="70.5334%" y="319.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="70.5263%" y="325" width="0.2429%" height="15" fill="rgb(208,204,44)" fg:x="871" fg:w="3"/><text x="70.7763%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="70.7692%" y="325" width="0.4049%" height="15" fill="rgb(208,93,54)" fg:x="874" fg:w="5"/><text x="71.0192%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="70.7692%" y="309" width="0.4049%" height="15" fill="rgb(242,1,31)" fg:x="874" fg:w="5"/><text x="71.0192%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="71.0931%" y="293" width="0.0810%" height="15" fill="rgb(241,83,25)" fg:x="878" fg:w="1"/><text x="71.3431%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.0931%" y="277" width="0.0810%" height="15" fill="rgb(205,169,50)" fg:x="878" fg:w="1"/><text x="71.3431%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.1741%" y="309" width="0.0810%" height="15" fill="rgb(239,186,37)" fg:x="879" fg:w="1"/><text x="71.4241%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="71.1741%" y="293" width="0.0810%" height="15" fill="rgb(205,221,10)" fg:x="879" fg:w="1"/><text x="71.4241%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="71.1741%" y="277" width="0.0810%" height="15" fill="rgb(218,196,15)" fg:x="879" fg:w="1"/><text x="71.4241%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="71.1741%" y="261" width="0.0810%" height="15" fill="rgb(218,196,35)" fg:x="879" fg:w="1"/><text x="71.4241%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.2551%" y="277" width="0.0810%" height="15" fill="rgb(233,63,24)" fg:x="880" fg:w="1"/><text x="71.5051%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="71.2551%" y="293" width="0.1619%" height="15" fill="rgb(225,8,4)" fg:x="880" fg:w="2"/><text x="71.5051%" y="303.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="71.3360%" y="277" width="0.0810%" height="15" fill="rgb(234,105,35)" fg:x="881" fg:w="1"/><text x="71.5860%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="71.4170%" y="293" width="0.4049%" height="15" fill="rgb(236,21,32)" fg:x="882" fg:w="5"/><text x="71.6670%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (19 samples, 1.54%)</title><rect x="70.3644%" y="341" width="1.5385%" height="15" fill="rgb(228,109,6)" fg:x="869" fg:w="19"/><text x="70.6144%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.73%)</title><rect x="71.1741%" y="325" width="0.7287%" height="15" fill="rgb(229,215,31)" fg:x="879" fg:w="9"/><text x="71.4241%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="71.2551%" y="309" width="0.6478%" height="15" fill="rgb(221,52,54)" fg:x="880" fg:w="8"/><text x="71.5051%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="71.8219%" y="293" width="0.0810%" height="15" fill="rgb(252,129,43)" fg:x="887" fg:w="1"/><text x="72.0719%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="71.9028%" y="309" width="0.0810%" height="15" fill="rgb(248,183,27)" fg:x="888" fg:w="1"/><text x="72.1528%" y="319.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="71.9838%" y="293" width="0.0810%" height="15" fill="rgb(250,0,22)" fg:x="889" fg:w="1"/><text x="72.2338%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="72.0648%" y="277" width="0.0810%" height="15" fill="rgb(213,166,10)" fg:x="890" fg:w="1"/><text x="72.3148%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="72.0648%" y="293" width="0.1619%" height="15" fill="rgb(207,163,36)" fg:x="890" fg:w="2"/><text x="72.3148%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="72.1457%" y="277" width="0.0810%" height="15" fill="rgb(208,122,22)" fg:x="891" fg:w="1"/><text x="72.3957%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="72.1457%" y="261" width="0.0810%" height="15" fill="rgb(207,104,49)" fg:x="891" fg:w="1"/><text x="72.3957%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="71.9838%" y="309" width="0.4049%" height="15" fill="rgb(248,211,50)" fg:x="889" fg:w="5"/><text x="72.2338%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="72.2267%" y="293" width="0.1619%" height="15" fill="rgb(217,13,45)" fg:x="892" fg:w="2"/><text x="72.4767%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="72.2267%" y="277" width="0.1619%" height="15" fill="rgb(211,216,49)" fg:x="892" fg:w="2"/><text x="72.4767%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="72.2267%" y="261" width="0.1619%" height="15" fill="rgb(221,58,53)" fg:x="892" fg:w="2"/><text x="72.4767%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="72.2267%" y="245" width="0.1619%" height="15" fill="rgb(220,112,41)" fg:x="892" fg:w="2"/><text x="72.4767%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.57%)</title><rect x="71.9028%" y="341" width="0.5668%" height="15" fill="rgb(236,38,28)" fg:x="888" fg:w="7"/><text x="72.1528%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.57%)</title><rect x="71.9028%" y="325" width="0.5668%" height="15" fill="rgb(227,195,22)" fg:x="888" fg:w="7"/><text x="72.1528%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="72.3887%" y="309" width="0.0810%" height="15" fill="rgb(214,55,33)" fg:x="894" fg:w="1"/><text x="72.6387%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="72.4696%" y="293" width="0.1619%" height="15" fill="rgb(248,80,13)" fg:x="895" fg:w="2"/><text x="72.7196%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="72.4696%" y="309" width="0.2429%" height="15" fill="rgb(238,52,6)" fg:x="895" fg:w="3"/><text x="72.7196%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="72.6316%" y="293" width="0.0810%" height="15" fill="rgb(224,198,47)" fg:x="897" fg:w="1"/><text x="72.8816%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="72.7126%" y="309" width="0.0810%" height="15" fill="rgb(233,171,20)" fg:x="898" fg:w="1"/><text x="72.9626%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="72.7126%" y="293" width="0.0810%" height="15" fill="rgb(241,30,25)" fg:x="898" fg:w="1"/><text x="72.9626%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (37 samples, 3.00%)</title><rect x="69.8785%" y="357" width="2.9960%" height="15" fill="rgb(207,171,38)" fg:x="863" fg:w="37"/><text x="70.1285%" y="367.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="72.4696%" y="341" width="0.4049%" height="15" fill="rgb(234,70,1)" fg:x="895" fg:w="5"/><text x="72.7196%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="72.4696%" y="325" width="0.4049%" height="15" fill="rgb(232,178,18)" fg:x="895" fg:w="5"/><text x="72.7196%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="72.7935%" y="309" width="0.0810%" height="15" fill="rgb(241,78,40)" fg:x="899" fg:w="1"/><text x="73.0435%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="72.7935%" y="293" width="0.0810%" height="15" fill="rgb(222,35,25)" fg:x="899" fg:w="1"/><text x="73.0435%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (39 samples, 3.16%)</title><rect x="69.8785%" y="389" width="3.1579%" height="15" fill="rgb(207,92,16)" fg:x="863" fg:w="39"/><text x="70.1285%" y="399.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (39 samples, 3.16%)</title><rect x="69.8785%" y="373" width="3.1579%" height="15" fill="rgb(216,59,51)" fg:x="863" fg:w="39"/><text x="70.1285%" y="383.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (2 samples, 0.16%)</title><rect x="72.8745%" y="357" width="0.1619%" height="15" fill="rgb(213,80,28)" fg:x="900" fg:w="2"/><text x="73.1245%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="73.0364%" y="389" width="0.1619%" height="15" fill="rgb(220,93,7)" fg:x="902" fg:w="2"/><text x="73.2864%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="73.0364%" y="373" width="0.1619%" height="15" fill="rgb(225,24,44)" fg:x="902" fg:w="2"/><text x="73.2864%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="73.0364%" y="357" width="0.1619%" height="15" fill="rgb(243,74,40)" fg:x="902" fg:w="2"/><text x="73.2864%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.1174%" y="341" width="0.0810%" height="15" fill="rgb(228,39,7)" fg:x="903" fg:w="1"/><text x="73.3674%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.1174%" y="325" width="0.0810%" height="15" fill="rgb(227,79,8)" fg:x="903" fg:w="1"/><text x="73.3674%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.1984%" y="373" width="0.0810%" height="15" fill="rgb(236,58,11)" fg:x="904" fg:w="1"/><text x="73.4484%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="73.2794%" y="341" width="0.0810%" height="15" fill="rgb(249,63,35)" fg:x="905" fg:w="1"/><text x="73.5294%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="73.3603%" y="341" width="0.0810%" height="15" fill="rgb(252,114,16)" fg:x="906" fg:w="1"/><text x="73.6103%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="73.3603%" y="325" width="0.0810%" height="15" fill="rgb(254,151,24)" fg:x="906" fg:w="1"/><text x="73.6103%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.3603%" y="309" width="0.0810%" height="15" fill="rgb(253,54,39)" fg:x="906" fg:w="1"/><text x="73.6103%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="73.2794%" y="357" width="0.2429%" height="15" fill="rgb(243,25,45)" fg:x="905" fg:w="3"/><text x="73.5294%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="73.4413%" y="341" width="0.0810%" height="15" fill="rgb(234,134,9)" fg:x="907" fg:w="1"/><text x="73.6913%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="73.4413%" y="325" width="0.0810%" height="15" fill="rgb(227,166,31)" fg:x="907" fg:w="1"/><text x="73.6913%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.4413%" y="309" width="0.0810%" height="15" fill="rgb(245,143,41)" fg:x="907" fg:w="1"/><text x="73.6913%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="73.1984%" y="389" width="0.4049%" height="15" fill="rgb(238,181,32)" fg:x="904" fg:w="5"/><text x="73.4484%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="73.2794%" y="373" width="0.3239%" height="15" fill="rgb(224,113,18)" fg:x="905" fg:w="4"/><text x="73.5294%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="73.5223%" y="357" width="0.0810%" height="15" fill="rgb(240,229,28)" fg:x="908" fg:w="1"/><text x="73.7723%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="73.5223%" y="341" width="0.0810%" height="15" fill="rgb(250,185,3)" fg:x="908" fg:w="1"/><text x="73.7723%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.5223%" y="325" width="0.0810%" height="15" fill="rgb(212,59,25)" fg:x="908" fg:w="1"/><text x="73.7723%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6032%" y="325" width="0.0810%" height="15" fill="rgb(221,87,20)" fg:x="909" fg:w="1"/><text x="73.8532%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.8462%" y="309" width="0.0810%" height="15" fill="rgb(213,74,28)" fg:x="912" fg:w="1"/><text x="74.0962%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.8462%" y="293" width="0.0810%" height="15" fill="rgb(224,132,34)" fg:x="912" fg:w="1"/><text x="74.0962%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.8462%" y="277" width="0.0810%" height="15" fill="rgb(222,101,24)" fg:x="912" fg:w="1"/><text x="74.0962%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.9271%" y="309" width="0.1619%" height="15" fill="rgb(254,142,4)" fg:x="913" fg:w="2"/><text x="74.1771%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.0081%" y="293" width="0.0810%" height="15" fill="rgb(230,229,49)" fg:x="914" fg:w="1"/><text x="74.2581%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.0081%" y="277" width="0.0810%" height="15" fill="rgb(238,70,47)" fg:x="914" fg:w="1"/><text x="74.2581%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="74.0891%" y="309" width="0.0810%" height="15" fill="rgb(231,160,17)" fg:x="915" fg:w="1"/><text x="74.3391%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.65%)</title><rect x="73.6842%" y="325" width="0.6478%" height="15" fill="rgb(218,68,53)" fg:x="910" fg:w="8"/><text x="73.9342%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="74.1700%" y="309" width="0.1619%" height="15" fill="rgb(236,111,10)" fg:x="916" fg:w="2"/><text x="74.4200%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="74.2510%" y="293" width="0.0810%" height="15" fill="rgb(224,34,41)" fg:x="917" fg:w="1"/><text x="74.5010%" y="303.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (702 samples, 56.84%)</title><rect x="17.6518%" y="501" width="56.8421%" height="15" fill="rgb(241,118,19)" fg:x="218" fg:w="702"/><text x="17.9018%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity..</text></g><g><title>plugins_core::looking::model::qualify_name (692 samples, 56.03%)</title><rect x="18.4615%" y="485" width="56.0324%" height="15" fill="rgb(238,129,25)" fg:x="228" fg:w="692"/><text x="18.7115%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (692 samples, 56.03%)</title><rect x="18.4615%" y="469" width="56.0324%" height="15" fill="rgb(238,22,31)" fg:x="228" fg:w="692"/><text x="18.7115%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (692 samples, 56.03%)</title><rect x="18.4615%" y="453" width="56.0324%" height="15" fill="rgb(222,174,48)" fg:x="228" fg:w="692"/><text x="18.7115%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (691 samples, 55.95%)</title><rect x="18.5425%" y="437" width="55.9514%" height="15" fill="rgb(206,152,40)" fg:x="229" fg:w="691"/><text x="18.7925%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (58 samples, 4.70%)</title><rect x="69.7976%" y="421" width="4.6964%" height="15" fill="rgb(218,99,54)" fg:x="862" fg:w="58"/><text x="70.0476%" y="431.50">indef..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (58 samples, 4.70%)</title><rect x="69.7976%" y="405" width="4.6964%" height="15" fill="rgb(220,174,26)" fg:x="862" fg:w="58"/><text x="70.0476%" y="415.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.89%)</title><rect x="73.6032%" y="389" width="0.8907%" height="15" fill="rgb(245,116,9)" fg:x="909" fg:w="11"/><text x="73.8532%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.89%)</title><rect x="73.6032%" y="373" width="0.8907%" height="15" fill="rgb(209,72,35)" fg:x="909" fg:w="11"/><text x="73.8532%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.89%)</title><rect x="73.6032%" y="357" width="0.8907%" height="15" fill="rgb(226,126,21)" fg:x="909" fg:w="11"/><text x="73.8532%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.89%)</title><rect x="73.6032%" y="341" width="0.8907%" height="15" fill="rgb(227,192,1)" fg:x="909" fg:w="11"/><text x="73.8532%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="74.3320%" y="325" width="0.1619%" height="15" fill="rgb(237,180,29)" fg:x="918" fg:w="2"/><text x="74.5820%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="74.3320%" y="309" width="0.1619%" height="15" fill="rgb(230,197,35)" fg:x="918" fg:w="2"/><text x="74.5820%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="74.3320%" y="293" width="0.1619%" height="15" fill="rgb(246,193,31)" fg:x="918" fg:w="2"/><text x="74.5820%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="74.3320%" y="277" width="0.1619%" height="15" fill="rgb(241,36,4)" fg:x="918" fg:w="2"/><text x="74.5820%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="74.4939%" y="501" width="0.0810%" height="15" fill="rgb(241,130,17)" fg:x="920" fg:w="1"/><text x="74.7439%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="74.4939%" y="485" width="0.0810%" height="15" fill="rgb(206,137,32)" fg:x="920" fg:w="1"/><text x="74.7439%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="74.4939%" y="469" width="0.0810%" height="15" fill="rgb(237,228,51)" fg:x="920" fg:w="1"/><text x="74.7439%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="74.4939%" y="453" width="0.0810%" height="15" fill="rgb(243,6,42)" fg:x="920" fg:w="1"/><text x="74.7439%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="74.4939%" y="437" width="0.0810%" height="15" fill="rgb(251,74,28)" fg:x="920" fg:w="1"/><text x="74.7439%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.4939%" y="421" width="0.0810%" height="15" fill="rgb(218,20,49)" fg:x="920" fg:w="1"/><text x="74.7439%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.4939%" y="405" width="0.0810%" height="15" fill="rgb(238,28,14)" fg:x="920" fg:w="1"/><text x="74.7439%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="74.4939%" y="389" width="0.0810%" height="15" fill="rgb(229,40,46)" fg:x="920" fg:w="1"/><text x="74.7439%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="74.4939%" y="373" width="0.0810%" height="15" fill="rgb(244,195,20)" fg:x="920" fg:w="1"/><text x="74.7439%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.4939%" y="357" width="0.0810%" height="15" fill="rgb(253,56,35)" fg:x="920" fg:w="1"/><text x="74.7439%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.4939%" y="341" width="0.0810%" height="15" fill="rgb(210,149,44)" fg:x="920" fg:w="1"/><text x="74.7439%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.4939%" y="325" width="0.0810%" height="15" fill="rgb(240,135,12)" fg:x="920" fg:w="1"/><text x="74.7439%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="74.4939%" y="309" width="0.0810%" height="15" fill="rgb(251,24,50)" fg:x="920" fg:w="1"/><text x="74.7439%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="74.4939%" y="293" width="0.0810%" height="15" fill="rgb(243,200,47)" fg:x="920" fg:w="1"/><text x="74.7439%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="74.4939%" y="277" width="0.0810%" height="15" fill="rgb(224,166,26)" fg:x="920" fg:w="1"/><text x="74.7439%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="74.4939%" y="261" width="0.0810%" height="15" fill="rgb(233,0,47)" fg:x="920" fg:w="1"/><text x="74.7439%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.4939%" y="245" width="0.0810%" height="15" fill="rgb(253,80,5)" fg:x="920" fg:w="1"/><text x="74.7439%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.5749%" y="501" width="0.0810%" height="15" fill="rgb(214,133,25)" fg:x="921" fg:w="1"/><text x="74.8249%" y="511.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7368%" y="469" width="0.0810%" height="15" fill="rgb(209,27,14)" fg:x="923" fg:w="1"/><text x="74.9868%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7368%" y="453" width="0.0810%" height="15" fill="rgb(219,102,51)" fg:x="923" fg:w="1"/><text x="74.9868%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7368%" y="437" width="0.0810%" height="15" fill="rgb(237,18,16)" fg:x="923" fg:w="1"/><text x="74.9868%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7368%" y="421" width="0.0810%" height="15" fill="rgb(241,85,17)" fg:x="923" fg:w="1"/><text x="74.9868%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.7368%" y="405" width="0.0810%" height="15" fill="rgb(236,90,42)" fg:x="923" fg:w="1"/><text x="74.9868%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.7368%" y="389" width="0.0810%" height="15" fill="rgb(249,57,21)" fg:x="923" fg:w="1"/><text x="74.9868%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.7368%" y="373" width="0.0810%" height="15" fill="rgb(243,12,36)" fg:x="923" fg:w="1"/><text x="74.9868%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.7368%" y="357" width="0.0810%" height="15" fill="rgb(253,128,47)" fg:x="923" fg:w="1"/><text x="74.9868%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.7368%" y="341" width="0.0810%" height="15" fill="rgb(207,33,20)" fg:x="923" fg:w="1"/><text x="74.9868%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.7368%" y="325" width="0.0810%" height="15" fill="rgb(233,215,35)" fg:x="923" fg:w="1"/><text x="74.9868%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.7368%" y="309" width="0.0810%" height="15" fill="rgb(249,188,52)" fg:x="923" fg:w="1"/><text x="74.9868%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.7368%" y="293" width="0.0810%" height="15" fill="rgb(225,12,32)" fg:x="923" fg:w="1"/><text x="74.9868%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.7368%" y="277" width="0.0810%" height="15" fill="rgb(247,98,14)" fg:x="923" fg:w="1"/><text x="74.9868%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7368%" y="261" width="0.0810%" height="15" fill="rgb(247,219,48)" fg:x="923" fg:w="1"/><text x="74.9868%" y="271.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="74.8178%" y="469" width="0.1619%" height="15" fill="rgb(253,60,48)" fg:x="924" fg:w="2"/><text x="75.0678%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="74.8178%" y="453" width="0.1619%" height="15" fill="rgb(245,15,52)" fg:x="924" fg:w="2"/><text x="75.0678%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="74.8178%" y="437" width="0.1619%" height="15" fill="rgb(220,133,28)" fg:x="924" fg:w="2"/><text x="75.0678%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="74.8178%" y="421" width="0.1619%" height="15" fill="rgb(217,180,4)" fg:x="924" fg:w="2"/><text x="75.0678%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="74.8988%" y="405" width="0.0810%" height="15" fill="rgb(251,24,1)" fg:x="925" fg:w="1"/><text x="75.1488%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="74.8988%" y="389" width="0.0810%" height="15" fill="rgb(212,185,49)" fg:x="925" fg:w="1"/><text x="75.1488%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.9798%" y="437" width="0.0810%" height="15" fill="rgb(215,175,22)" fg:x="926" fg:w="1"/><text x="75.2298%" y="447.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (712 samples, 57.65%)</title><rect x="17.4899%" y="629" width="57.6518%" height="15" fill="rgb(250,205,14)" fg:x="216" fg:w="712"/><text x="17.7399%" y="639.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (712 samples, 57.65%)</title><rect x="17.4899%" y="613" width="57.6518%" height="15" fill="rgb(225,211,22)" fg:x="216" fg:w="712"/><text x="17.7399%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (712 samples, 57.65%)</title><rect x="17.4899%" y="597" width="57.6518%" height="15" fill="rgb(251,179,42)" fg:x="216" fg:w="712"/><text x="17.7399%" y="607.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (712 samples, 57.65%)</title><rect x="17.4899%" y="581" width="57.6518%" height="15" fill="rgb(208,216,51)" fg:x="216" fg:w="712"/><text x="17.7399%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (712 samples, 57.65%)</title><rect x="17.4899%" y="565" width="57.6518%" height="15" fill="rgb(235,36,11)" fg:x="216" fg:w="712"/><text x="17.7399%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (712 samples, 57.65%)</title><rect x="17.4899%" y="549" width="57.6518%" height="15" fill="rgb(213,189,28)" fg:x="216" fg:w="712"/><text x="17.7399%" y="559.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (712 samples, 57.65%)</title><rect x="17.4899%" y="533" width="57.6518%" height="15" fill="rgb(227,203,42)" fg:x="216" fg:w="712"/><text x="17.7399%" y="543.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (710 samples, 57.49%)</title><rect x="17.6518%" y="517" width="57.4899%" height="15" fill="rgb(244,72,36)" fg:x="218" fg:w="710"/><text x="17.9018%" y="527.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.49%)</title><rect x="74.6559%" y="501" width="0.4858%" height="15" fill="rgb(213,53,17)" fg:x="922" fg:w="6"/><text x="74.9059%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="74.6559%" y="485" width="0.4858%" height="15" fill="rgb(207,167,3)" fg:x="922" fg:w="6"/><text x="74.9059%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.9798%" y="469" width="0.1619%" height="15" fill="rgb(216,98,30)" fg:x="926" fg:w="2"/><text x="75.2298%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.9798%" y="453" width="0.1619%" height="15" fill="rgb(236,123,15)" fg:x="926" fg:w="2"/><text x="75.2298%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="75.0607%" y="437" width="0.0810%" height="15" fill="rgb(248,81,50)" fg:x="927" fg:w="1"/><text x="75.3107%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="75.0607%" y="421" width="0.0810%" height="15" fill="rgb(214,120,4)" fg:x="927" fg:w="1"/><text x="75.3107%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="75.0607%" y="405" width="0.0810%" height="15" fill="rgb(208,179,34)" fg:x="927" fg:w="1"/><text x="75.3107%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.0607%" y="389" width="0.0810%" height="15" fill="rgb(227,140,7)" fg:x="927" fg:w="1"/><text x="75.3107%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (806 samples, 65.26%)</title><rect x="9.9595%" y="677" width="65.2632%" height="15" fill="rgb(214,22,6)" fg:x="123" fg:w="806"/><text x="10.2095%" y="687.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (713 samples, 57.73%)</title><rect x="17.4899%" y="661" width="57.7328%" height="15" fill="rgb(207,137,27)" fg:x="216" fg:w="713"/><text x="17.7399%" y="671.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (713 samples, 57.73%)</title><rect x="17.4899%" y="645" width="57.7328%" height="15" fill="rgb(210,8,46)" fg:x="216" fg:w="713"/><text x="17.7399%" y="655.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::LibraryMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="75.1417%" y="629" width="0.0810%" height="15" fill="rgb(240,16,54)" fg:x="928" fg:w="1"/><text x="75.3917%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="75.2227%" y="645" width="0.0810%" height="15" fill="rgb(211,209,29)" fg:x="929" fg:w="1"/><text x="75.4727%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="75.2227%" y="629" width="0.0810%" height="15" fill="rgb(226,228,24)" fg:x="929" fg:w="1"/><text x="75.4727%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="75.2227%" y="613" width="0.0810%" height="15" fill="rgb(222,84,9)" fg:x="929" fg:w="1"/><text x="75.4727%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.2227%" y="597" width="0.0810%" height="15" fill="rgb(234,203,30)" fg:x="929" fg:w="1"/><text x="75.4727%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.2227%" y="581" width="0.0810%" height="15" fill="rgb(238,109,14)" fg:x="929" fg:w="1"/><text x="75.4727%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.2227%" y="565" width="0.0810%" height="15" fill="rgb(233,206,34)" fg:x="929" fg:w="1"/><text x="75.4727%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2227%" y="549" width="0.0810%" height="15" fill="rgb(220,167,47)" fg:x="929" fg:w="1"/><text x="75.4727%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.2227%" y="533" width="0.0810%" height="15" fill="rgb(238,105,10)" fg:x="929" fg:w="1"/><text x="75.4727%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2227%" y="517" width="0.0810%" height="15" fill="rgb(213,227,17)" fg:x="929" fg:w="1"/><text x="75.4727%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.2227%" y="501" width="0.0810%" height="15" fill="rgb(217,132,38)" fg:x="929" fg:w="1"/><text x="75.4727%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2227%" y="485" width="0.0810%" height="15" fill="rgb(242,146,4)" fg:x="929" fg:w="1"/><text x="75.4727%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.2227%" y="469" width="0.0810%" height="15" fill="rgb(212,61,9)" fg:x="929" fg:w="1"/><text x="75.4727%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="75.3036%" y="629" width="0.0810%" height="15" fill="rgb(247,126,22)" fg:x="930" fg:w="1"/><text x="75.5536%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.3036%" y="613" width="0.0810%" height="15" fill="rgb(220,196,2)" fg:x="930" fg:w="1"/><text x="75.5536%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3036%" y="597" width="0.0810%" height="15" fill="rgb(208,46,4)" fg:x="930" fg:w="1"/><text x="75.5536%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.3036%" y="581" width="0.0810%" height="15" fill="rgb(252,104,46)" fg:x="930" fg:w="1"/><text x="75.5536%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3036%" y="565" width="0.0810%" height="15" fill="rgb(237,152,48)" fg:x="930" fg:w="1"/><text x="75.5536%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.3036%" y="549" width="0.0810%" height="15" fill="rgb(221,59,37)" fg:x="930" fg:w="1"/><text x="75.5536%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="75.3846%" y="597" width="0.0810%" height="15" fill="rgb(209,202,51)" fg:x="931" fg:w="1"/><text x="75.6346%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="75.2227%" y="677" width="0.3239%" height="15" fill="rgb(228,81,30)" fg:x="929" fg:w="4"/><text x="75.4727%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="75.2227%" y="661" width="0.3239%" height="15" fill="rgb(227,42,39)" fg:x="929" fg:w="4"/><text x="75.4727%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::from_str (3 samples, 0.24%)</title><rect x="75.3036%" y="645" width="0.2429%" height="15" fill="rgb(221,26,2)" fg:x="930" fg:w="3"/><text x="75.5536%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.3846%" y="629" width="0.1619%" height="15" fill="rgb(254,61,31)" fg:x="931" fg:w="2"/><text x="75.6346%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.3846%" y="613" width="0.1619%" height="15" fill="rgb(222,173,38)" fg:x="931" fg:w="2"/><text x="75.6346%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.4656%" y="597" width="0.0810%" height="15" fill="rgb(218,50,12)" fg:x="932" fg:w="1"/><text x="75.7156%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.5466%" y="629" width="0.0810%" height="15" fill="rgb(223,88,40)" fg:x="933" fg:w="1"/><text x="75.7966%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.5466%" y="613" width="0.0810%" height="15" fill="rgb(237,54,19)" fg:x="933" fg:w="1"/><text x="75.7966%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.5466%" y="597" width="0.0810%" height="15" fill="rgb(251,129,25)" fg:x="933" fg:w="1"/><text x="75.7966%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.5466%" y="581" width="0.0810%" height="15" fill="rgb(238,97,19)" fg:x="933" fg:w="1"/><text x="75.7966%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.5466%" y="565" width="0.0810%" height="15" fill="rgb(240,169,18)" fg:x="933" fg:w="1"/><text x="75.7966%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.5466%" y="549" width="0.0810%" height="15" fill="rgb(230,187,49)" fg:x="933" fg:w="1"/><text x="75.7966%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.5466%" y="533" width="0.0810%" height="15" fill="rgb(209,44,26)" fg:x="933" fg:w="1"/><text x="75.7966%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.5466%" y="517" width="0.0810%" height="15" fill="rgb(244,0,6)" fg:x="933" fg:w="1"/><text x="75.7966%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.5466%" y="501" width="0.0810%" height="15" fill="rgb(248,18,21)" fg:x="933" fg:w="1"/><text x="75.7966%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.5466%" y="485" width="0.0810%" height="15" fill="rgb(245,180,19)" fg:x="933" fg:w="1"/><text x="75.7966%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.5466%" y="469" width="0.0810%" height="15" fill="rgb(252,118,36)" fg:x="933" fg:w="1"/><text x="75.7966%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.5466%" y="453" width="0.0810%" height="15" fill="rgb(210,224,19)" fg:x="933" fg:w="1"/><text x="75.7966%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5466%" y="437" width="0.0810%" height="15" fill="rgb(218,30,24)" fg:x="933" fg:w="1"/><text x="75.7966%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.6275%" y="629" width="0.0810%" height="15" fill="rgb(219,75,50)" fg:x="934" fg:w="1"/><text x="75.8775%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.6275%" y="613" width="0.0810%" height="15" fill="rgb(234,72,50)" fg:x="934" fg:w="1"/><text x="75.8775%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.6275%" y="597" width="0.0810%" height="15" fill="rgb(219,100,48)" fg:x="934" fg:w="1"/><text x="75.8775%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6275%" y="581" width="0.0810%" height="15" fill="rgb(253,5,41)" fg:x="934" fg:w="1"/><text x="75.8775%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6275%" y="565" width="0.0810%" height="15" fill="rgb(247,181,11)" fg:x="934" fg:w="1"/><text x="75.8775%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6275%" y="549" width="0.0810%" height="15" fill="rgb(222,223,25)" fg:x="934" fg:w="1"/><text x="75.8775%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6275%" y="533" width="0.0810%" height="15" fill="rgb(214,198,28)" fg:x="934" fg:w="1"/><text x="75.8775%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.6275%" y="517" width="0.0810%" height="15" fill="rgb(230,46,43)" fg:x="934" fg:w="1"/><text x="75.8775%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6275%" y="501" width="0.0810%" height="15" fill="rgb(233,65,53)" fg:x="934" fg:w="1"/><text x="75.8775%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.6275%" y="485" width="0.0810%" height="15" fill="rgb(221,121,27)" fg:x="934" fg:w="1"/><text x="75.8775%" y="495.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="75.7085%" y="613" width="0.1619%" height="15" fill="rgb(247,70,47)" fg:x="935" fg:w="2"/><text x="75.9585%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.7085%" y="597" width="0.1619%" height="15" fill="rgb(228,85,35)" fg:x="935" fg:w="2"/><text x="75.9585%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.7085%" y="581" width="0.1619%" height="15" fill="rgb(209,50,18)" fg:x="935" fg:w="2"/><text x="75.9585%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.7085%" y="565" width="0.1619%" height="15" fill="rgb(250,19,35)" fg:x="935" fg:w="2"/><text x="75.9585%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.7085%" y="549" width="0.1619%" height="15" fill="rgb(253,107,29)" fg:x="935" fg:w="2"/><text x="75.9585%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.7085%" y="533" width="0.1619%" height="15" fill="rgb(252,179,29)" fg:x="935" fg:w="2"/><text x="75.9585%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7895%" y="517" width="0.0810%" height="15" fill="rgb(238,194,6)" fg:x="936" fg:w="1"/><text x="76.0395%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.7895%" y="501" width="0.0810%" height="15" fill="rgb(238,164,29)" fg:x="936" fg:w="1"/><text x="76.0395%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7895%" y="485" width="0.0810%" height="15" fill="rgb(224,25,9)" fg:x="936" fg:w="1"/><text x="76.0395%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.7895%" y="469" width="0.0810%" height="15" fill="rgb(244,153,23)" fg:x="936" fg:w="1"/><text x="76.0395%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.8704%" y="501" width="0.0810%" height="15" fill="rgb(212,203,14)" fg:x="937" fg:w="1"/><text x="76.1204%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.8704%" y="485" width="0.0810%" height="15" fill="rgb(220,164,20)" fg:x="937" fg:w="1"/><text x="76.1204%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.8704%" y="469" width="0.0810%" height="15" fill="rgb(222,203,48)" fg:x="937" fg:w="1"/><text x="76.1204%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (7 samples, 0.57%)</title><rect x="75.5466%" y="677" width="0.5668%" height="15" fill="rgb(215,159,22)" fg:x="933" fg:w="7"/><text x="75.7966%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.57%)</title><rect x="75.5466%" y="661" width="0.5668%" height="15" fill="rgb(216,183,47)" fg:x="933" fg:w="7"/><text x="75.7966%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="75.5466%" y="645" width="0.5668%" height="15" fill="rgb(229,195,25)" fg:x="933" fg:w="7"/><text x="75.7966%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::from_str (5 samples, 0.40%)</title><rect x="75.7085%" y="629" width="0.4049%" height="15" fill="rgb(224,132,51)" fg:x="935" fg:w="5"/><text x="75.9585%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="75.8704%" y="613" width="0.2429%" height="15" fill="rgb(240,63,7)" fg:x="937" fg:w="3"/><text x="76.1204%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.8704%" y="597" width="0.2429%" height="15" fill="rgb(249,182,41)" fg:x="937" fg:w="3"/><text x="76.1204%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="75.8704%" y="581" width="0.2429%" height="15" fill="rgb(243,47,26)" fg:x="937" fg:w="3"/><text x="76.1204%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.8704%" y="565" width="0.2429%" height="15" fill="rgb(233,48,2)" fg:x="937" fg:w="3"/><text x="76.1204%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="75.8704%" y="549" width="0.2429%" height="15" fill="rgb(244,165,34)" fg:x="937" fg:w="3"/><text x="76.1204%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.8704%" y="533" width="0.2429%" height="15" fill="rgb(207,89,7)" fg:x="937" fg:w="3"/><text x="76.1204%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.8704%" y="517" width="0.2429%" height="15" fill="rgb(244,117,36)" fg:x="937" fg:w="3"/><text x="76.1204%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="75.9514%" y="501" width="0.1619%" height="15" fill="rgb(226,144,34)" fg:x="938" fg:w="2"/><text x="76.2014%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.9514%" y="485" width="0.1619%" height="15" fill="rgb(213,23,19)" fg:x="938" fg:w="2"/><text x="76.2014%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.9514%" y="469" width="0.1619%" height="15" fill="rgb(217,75,12)" fg:x="938" fg:w="2"/><text x="76.2014%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="75.9514%" y="453" width="0.1619%" height="15" fill="rgb(224,159,17)" fg:x="938" fg:w="2"/><text x="76.2014%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.9514%" y="437" width="0.1619%" height="15" fill="rgb(217,118,1)" fg:x="938" fg:w="2"/><text x="76.2014%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.9514%" y="421" width="0.1619%" height="15" fill="rgb(232,180,48)" fg:x="938" fg:w="2"/><text x="76.2014%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="75.9514%" y="405" width="0.1619%" height="15" fill="rgb(230,27,33)" fg:x="938" fg:w="2"/><text x="76.2014%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.9514%" y="389" width="0.1619%" height="15" fill="rgb(205,31,21)" fg:x="938" fg:w="2"/><text x="76.2014%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.9514%" y="373" width="0.1619%" height="15" fill="rgb(253,59,4)" fg:x="938" fg:w="2"/><text x="76.2014%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0324%" y="357" width="0.0810%" height="15" fill="rgb(224,201,9)" fg:x="939" fg:w="1"/><text x="76.2824%" y="367.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="76.1134%" y="677" width="0.0810%" height="15" fill="rgb(229,206,30)" fg:x="940" fg:w="1"/><text x="76.3634%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="76.1134%" y="661" width="0.0810%" height="15" fill="rgb(212,67,47)" fg:x="940" fg:w="1"/><text x="76.3634%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (942 samples, 76.28%)</title><rect x="0.0000%" y="741" width="76.2753%" height="15" fill="rgb(211,96,50)" fg:x="0" fg:w="942"/><text x="0.2500%" y="751.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (942 samples, 76.28%)</title><rect x="0.0000%" y="725" width="76.2753%" height="15" fill="rgb(252,114,18)" fg:x="0" fg:w="942"/><text x="0.2500%" y="735.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (942 samples, 76.28%)</title><rect x="0.0000%" y="709" width="76.2753%" height="15" fill="rgb(223,58,37)" fg:x="0" fg:w="942"/><text x="0.2500%" y="719.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (819 samples, 66.32%)</title><rect x="9.9595%" y="693" width="66.3158%" height="15" fill="rgb(237,70,4)" fg:x="123" fg:w="819"/><text x="10.2095%" y="703.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="76.1943%" y="677" width="0.0810%" height="15" fill="rgb(244,85,46)" fg:x="941" fg:w="1"/><text x="76.4443%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="76.1943%" y="661" width="0.0810%" height="15" fill="rgb(223,39,52)" fg:x="941" fg:w="1"/><text x="76.4443%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.1943%" y="645" width="0.0810%" height="15" fill="rgb(218,200,14)" fg:x="941" fg:w="1"/><text x="76.4443%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.1943%" y="629" width="0.0810%" height="15" fill="rgb(208,171,16)" fg:x="941" fg:w="1"/><text x="76.4443%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1943%" y="613" width="0.0810%" height="15" fill="rgb(234,200,18)" fg:x="941" fg:w="1"/><text x="76.4443%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.1943%" y="597" width="0.0810%" height="15" fill="rgb(228,45,11)" fg:x="941" fg:w="1"/><text x="76.4443%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1943%" y="581" width="0.0810%" height="15" fill="rgb(237,182,11)" fg:x="941" fg:w="1"/><text x="76.4443%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.1943%" y="565" width="0.0810%" height="15" fill="rgb(241,175,49)" fg:x="941" fg:w="1"/><text x="76.4443%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.2753%" y="693" width="0.0810%" height="15" fill="rgb(247,38,35)" fg:x="942" fg:w="1"/><text x="76.5253%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (1 samples, 0.08%)</title><rect x="76.2753%" y="677" width="0.0810%" height="15" fill="rgb(228,39,49)" fg:x="942" fg:w="1"/><text x="76.5253%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.2753%" y="661" width="0.0810%" height="15" fill="rgb(226,101,26)" fg:x="942" fg:w="1"/><text x="76.5253%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="76.2753%" y="645" width="0.0810%" height="15" fill="rgb(206,141,19)" fg:x="942" fg:w="1"/><text x="76.5253%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.2753%" y="629" width="0.0810%" height="15" fill="rgb(211,200,13)" fg:x="942" fg:w="1"/><text x="76.5253%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.2753%" y="613" width="0.0810%" height="15" fill="rgb(241,121,6)" fg:x="942" fg:w="1"/><text x="76.5253%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.2753%" y="597" width="0.0810%" height="15" fill="rgb(234,221,29)" fg:x="942" fg:w="1"/><text x="76.5253%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.2753%" y="581" width="0.0810%" height="15" fill="rgb(229,136,5)" fg:x="942" fg:w="1"/><text x="76.5253%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.2753%" y="565" width="0.0810%" height="15" fill="rgb(238,36,11)" fg:x="942" fg:w="1"/><text x="76.5253%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.2753%" y="549" width="0.0810%" height="15" fill="rgb(251,55,41)" fg:x="942" fg:w="1"/><text x="76.5253%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.2753%" y="533" width="0.0810%" height="15" fill="rgb(242,34,40)" fg:x="942" fg:w="1"/><text x="76.5253%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.2753%" y="517" width="0.0810%" height="15" fill="rgb(215,42,17)" fg:x="942" fg:w="1"/><text x="76.5253%" y="527.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (1 samples, 0.08%)</title><rect x="76.3563%" y="693" width="0.0810%" height="15" fill="rgb(207,44,46)" fg:x="943" fg:w="1"/><text x="76.6063%" y="703.50"></text></g><g><title>engine::session::Session::new (1 samples, 0.08%)</title><rect x="76.3563%" y="677" width="0.0810%" height="15" fill="rgb(211,206,28)" fg:x="943" fg:w="1"/><text x="76.6063%" y="687.50"></text></g><g><title>engine::session::Session::initialize (1 samples, 0.08%)</title><rect x="76.3563%" y="661" width="0.0810%" height="15" fill="rgb(237,167,16)" fg:x="943" fg:w="1"/><text x="76.6063%" y="671.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (1 samples, 0.08%)</title><rect x="76.3563%" y="645" width="0.0810%" height="15" fill="rgb(233,66,6)" fg:x="943" fg:w="1"/><text x="76.6063%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="76.3563%" y="629" width="0.0810%" height="15" fill="rgb(246,123,29)" fg:x="943" fg:w="1"/><text x="76.6063%" y="639.50"></text></g><g><title>anyhow::error::object_drop (1 samples, 0.08%)</title><rect x="76.3563%" y="613" width="0.0810%" height="15" fill="rgb(209,62,40)" fg:x="943" fg:w="1"/><text x="76.6063%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3563%" y="597" width="0.0810%" height="15" fill="rgb(218,4,25)" fg:x="943" fg:w="1"/><text x="76.6063%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.4372%" y="565" width="0.0810%" height="15" fill="rgb(253,91,49)" fg:x="944" fg:w="1"/><text x="76.6872%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.4372%" y="549" width="0.0810%" height="15" fill="rgb(228,155,29)" fg:x="944" fg:w="1"/><text x="76.6872%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.4372%" y="533" width="0.0810%" height="15" fill="rgb(243,57,37)" fg:x="944" fg:w="1"/><text x="76.6872%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.4372%" y="517" width="0.0810%" height="15" fill="rgb(244,167,17)" fg:x="944" fg:w="1"/><text x="76.6872%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="76.4372%" y="597" width="0.1619%" height="15" fill="rgb(207,181,38)" fg:x="944" fg:w="2"/><text x="76.6872%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.4372%" y="581" width="0.1619%" height="15" fill="rgb(211,8,23)" fg:x="944" fg:w="2"/><text x="76.6872%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5182%" y="565" width="0.0810%" height="15" fill="rgb(235,11,44)" fg:x="945" fg:w="1"/><text x="76.7682%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5182%" y="549" width="0.0810%" height="15" fill="rgb(248,18,52)" fg:x="945" fg:w="1"/><text x="76.7682%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.5182%" y="533" width="0.0810%" height="15" fill="rgb(208,4,7)" fg:x="945" fg:w="1"/><text x="76.7682%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.5182%" y="517" width="0.0810%" height="15" fill="rgb(240,17,39)" fg:x="945" fg:w="1"/><text x="76.7682%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.5992%" y="597" width="0.0810%" height="15" fill="rgb(207,170,3)" fg:x="946" fg:w="1"/><text x="76.8492%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.5992%" y="581" width="0.0810%" height="15" fill="rgb(236,100,52)" fg:x="946" fg:w="1"/><text x="76.8492%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.5992%" y="565" width="0.0810%" height="15" fill="rgb(246,78,51)" fg:x="946" fg:w="1"/><text x="76.8492%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="76.6802%" y="581" width="0.0810%" height="15" fill="rgb(211,17,15)" fg:x="947" fg:w="1"/><text x="76.9302%" y="591.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="76.6802%" y="565" width="0.0810%" height="15" fill="rgb(209,59,46)" fg:x="947" fg:w="1"/><text x="76.9302%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7611%" y="549" width="0.0810%" height="15" fill="rgb(210,92,25)" fg:x="948" fg:w="1"/><text x="77.0111%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7611%" y="533" width="0.0810%" height="15" fill="rgb(238,174,52)" fg:x="948" fg:w="1"/><text x="77.0111%" y="543.50"></text></g><g><title>engine::session::Session::flush (6 samples, 0.49%)</title><rect x="76.4372%" y="677" width="0.4858%" height="15" fill="rgb(230,73,7)" fg:x="944" fg:w="6"/><text x="76.6872%" y="687.50"></text></g><g><title>engine::session::state::State::close (6 samples, 0.49%)</title><rect x="76.4372%" y="661" width="0.4858%" height="15" fill="rgb(243,124,40)" fg:x="944" fg:w="6"/><text x="76.6872%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (6 samples, 0.49%)</title><rect x="76.4372%" y="645" width="0.4858%" height="15" fill="rgb(244,170,11)" fg:x="944" fg:w="6"/><text x="76.6872%" y="655.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (6 samples, 0.49%)</title><rect x="76.4372%" y="629" width="0.4858%" height="15" fill="rgb(207,114,54)" fg:x="944" fg:w="6"/><text x="76.6872%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (6 samples, 0.49%)</title><rect x="76.4372%" y="613" width="0.4858%" height="15" fill="rgb(205,42,20)" fg:x="944" fg:w="6"/><text x="76.6872%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="76.6802%" y="597" width="0.2429%" height="15" fill="rgb(230,30,28)" fg:x="947" fg:w="3"/><text x="76.9302%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="76.7611%" y="581" width="0.1619%" height="15" fill="rgb(205,73,54)" fg:x="948" fg:w="2"/><text x="77.0111%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="76.7611%" y="565" width="0.1619%" height="15" fill="rgb(254,227,23)" fg:x="948" fg:w="2"/><text x="77.0111%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.8421%" y="549" width="0.0810%" height="15" fill="rgb(228,202,34)" fg:x="949" fg:w="1"/><text x="77.0921%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="76.8421%" y="533" width="0.0810%" height="15" fill="rgb(222,225,37)" fg:x="949" fg:w="1"/><text x="77.0921%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.8421%" y="517" width="0.0810%" height="15" fill="rgb(221,14,54)" fg:x="949" fg:w="1"/><text x="77.0921%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.8421%" y="501" width="0.0810%" height="15" fill="rgb(254,102,2)" fg:x="949" fg:w="1"/><text x="77.0921%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8421%" y="485" width="0.0810%" height="15" fill="rgb(232,104,17)" fg:x="949" fg:w="1"/><text x="77.0921%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.8421%" y="469" width="0.0810%" height="15" fill="rgb(250,220,14)" fg:x="949" fg:w="1"/><text x="77.0921%" y="479.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="76.9231%" y="677" width="0.0810%" height="15" fill="rgb(241,158,9)" fg:x="950" fg:w="1"/><text x="77.1731%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="76.9231%" y="661" width="0.0810%" height="15" fill="rgb(246,9,43)" fg:x="950" fg:w="1"/><text x="77.1731%" y="671.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="76.9231%" y="645" width="0.0810%" height="15" fill="rgb(206,73,33)" fg:x="950" fg:w="1"/><text x="77.1731%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="76.9231%" y="629" width="0.0810%" height="15" fill="rgb(222,79,8)" fg:x="950" fg:w="1"/><text x="77.1731%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="76.9231%" y="613" width="0.0810%" height="15" fill="rgb(234,8,54)" fg:x="950" fg:w="1"/><text x="77.1731%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.9231%" y="597" width="0.0810%" height="15" fill="rgb(209,134,38)" fg:x="950" fg:w="1"/><text x="77.1731%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.9231%" y="581" width="0.0810%" height="15" fill="rgb(230,127,29)" fg:x="950" fg:w="1"/><text x="77.1731%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.9231%" y="565" width="0.0810%" height="15" fill="rgb(242,44,41)" fg:x="950" fg:w="1"/><text x="77.1731%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9231%" y="549" width="0.0810%" height="15" fill="rgb(222,56,43)" fg:x="950" fg:w="1"/><text x="77.1731%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9231%" y="533" width="0.0810%" height="15" fill="rgb(238,39,47)" fg:x="950" fg:w="1"/><text x="77.1731%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9231%" y="517" width="0.0810%" height="15" fill="rgb(226,79,43)" fg:x="950" fg:w="1"/><text x="77.1731%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9231%" y="501" width="0.0810%" height="15" fill="rgb(242,105,53)" fg:x="950" fg:w="1"/><text x="77.1731%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9231%" y="485" width="0.0810%" height="15" fill="rgb(251,132,46)" fg:x="950" fg:w="1"/><text x="77.1731%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="77.0040%" y="677" width="0.0810%" height="15" fill="rgb(231,77,14)" fg:x="951" fg:w="1"/><text x="77.2540%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="77.0040%" y="661" width="0.0810%" height="15" fill="rgb(240,135,9)" fg:x="951" fg:w="1"/><text x="77.2540%" y="671.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="77.0850%" y="677" width="0.0810%" height="15" fill="rgb(248,109,14)" fg:x="952" fg:w="1"/><text x="77.3350%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="77.0850%" y="661" width="0.0810%" height="15" fill="rgb(227,146,52)" fg:x="952" fg:w="1"/><text x="77.3350%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="77.0850%" y="645" width="0.0810%" height="15" fill="rgb(232,54,3)" fg:x="952" fg:w="1"/><text x="77.3350%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="77.0850%" y="629" width="0.0810%" height="15" fill="rgb(229,201,43)" fg:x="952" fg:w="1"/><text x="77.3350%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="77.0850%" y="613" width="0.0810%" height="15" fill="rgb(252,161,33)" fg:x="952" fg:w="1"/><text x="77.3350%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="77.0850%" y="597" width="0.0810%" height="15" fill="rgb(226,146,40)" fg:x="952" fg:w="1"/><text x="77.3350%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="77.1660%" y="661" width="0.0810%" height="15" fill="rgb(219,47,25)" fg:x="953" fg:w="1"/><text x="77.4160%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.1660%" y="645" width="0.0810%" height="15" fill="rgb(250,135,13)" fg:x="953" fg:w="1"/><text x="77.4160%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.1660%" y="629" width="0.0810%" height="15" fill="rgb(219,229,18)" fg:x="953" fg:w="1"/><text x="77.4160%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.1660%" y="613" width="0.0810%" height="15" fill="rgb(217,152,27)" fg:x="953" fg:w="1"/><text x="77.4160%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.1660%" y="597" width="0.0810%" height="15" fill="rgb(225,71,47)" fg:x="953" fg:w="1"/><text x="77.4160%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1660%" y="581" width="0.0810%" height="15" fill="rgb(220,139,14)" fg:x="953" fg:w="1"/><text x="77.4160%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="77.2470%" y="661" width="0.0810%" height="15" fill="rgb(247,54,32)" fg:x="954" fg:w="1"/><text x="77.4970%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.2470%" y="645" width="0.0810%" height="15" fill="rgb(252,131,39)" fg:x="954" fg:w="1"/><text x="77.4970%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="77.2470%" y="629" width="0.0810%" height="15" fill="rgb(210,108,39)" fg:x="954" fg:w="1"/><text x="77.4970%" y="639.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="77.2470%" y="613" width="0.0810%" height="15" fill="rgb(205,23,29)" fg:x="954" fg:w="1"/><text x="77.4970%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="77.2470%" y="597" width="0.0810%" height="15" fill="rgb(246,139,46)" fg:x="954" fg:w="1"/><text x="77.4970%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="77.2470%" y="581" width="0.0810%" height="15" fill="rgb(250,81,26)" fg:x="954" fg:w="1"/><text x="77.4970%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="77.2470%" y="565" width="0.0810%" height="15" fill="rgb(214,104,7)" fg:x="954" fg:w="1"/><text x="77.4970%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="77.2470%" y="549" width="0.0810%" height="15" fill="rgb(233,189,8)" fg:x="954" fg:w="1"/><text x="77.4970%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.2470%" y="533" width="0.0810%" height="15" fill="rgb(228,141,17)" fg:x="954" fg:w="1"/><text x="77.4970%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.2470%" y="517" width="0.0810%" height="15" fill="rgb(247,157,1)" fg:x="954" fg:w="1"/><text x="77.4970%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.2470%" y="501" width="0.0810%" height="15" fill="rgb(249,225,5)" fg:x="954" fg:w="1"/><text x="77.4970%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2470%" y="485" width="0.0810%" height="15" fill="rgb(242,55,13)" fg:x="954" fg:w="1"/><text x="77.4970%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.3279%" y="597" width="0.0810%" height="15" fill="rgb(230,49,50)" fg:x="955" fg:w="1"/><text x="77.5779%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="77.3279%" y="581" width="0.0810%" height="15" fill="rgb(241,111,38)" fg:x="955" fg:w="1"/><text x="77.5779%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3279%" y="565" width="0.0810%" height="15" fill="rgb(252,155,4)" fg:x="955" fg:w="1"/><text x="77.5779%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4089%" y="501" width="0.0810%" height="15" fill="rgb(212,69,32)" fg:x="956" fg:w="1"/><text x="77.6589%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.4089%" y="485" width="0.0810%" height="15" fill="rgb(243,107,47)" fg:x="956" fg:w="1"/><text x="77.6589%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.4089%" y="469" width="0.0810%" height="15" fill="rgb(247,130,12)" fg:x="956" fg:w="1"/><text x="77.6589%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="77.4089%" y="565" width="0.1619%" height="15" fill="rgb(233,74,16)" fg:x="956" fg:w="2"/><text x="77.6589%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.4089%" y="549" width="0.1619%" height="15" fill="rgb(208,58,18)" fg:x="956" fg:w="2"/><text x="77.6589%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.4089%" y="533" width="0.1619%" height="15" fill="rgb(242,225,1)" fg:x="956" fg:w="2"/><text x="77.6589%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.4089%" y="517" width="0.1619%" height="15" fill="rgb(249,39,40)" fg:x="956" fg:w="2"/><text x="77.6589%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.4899%" y="501" width="0.0810%" height="15" fill="rgb(207,72,44)" fg:x="957" fg:w="1"/><text x="77.7399%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.4899%" y="485" width="0.0810%" height="15" fill="rgb(215,193,12)" fg:x="957" fg:w="1"/><text x="77.7399%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.4899%" y="469" width="0.0810%" height="15" fill="rgb(248,41,39)" fg:x="957" fg:w="1"/><text x="77.7399%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.5709%" y="469" width="0.0810%" height="15" fill="rgb(253,85,4)" fg:x="958" fg:w="1"/><text x="77.8209%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5709%" y="453" width="0.0810%" height="15" fill="rgb(243,70,31)" fg:x="958" fg:w="1"/><text x="77.8209%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.5709%" y="437" width="0.0810%" height="15" fill="rgb(253,195,26)" fg:x="958" fg:w="1"/><text x="77.8209%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5709%" y="421" width="0.0810%" height="15" fill="rgb(243,42,11)" fg:x="958" fg:w="1"/><text x="77.8209%" y="431.50"></text></g><g><title>engine::session::Session::flush (5 samples, 0.40%)</title><rect x="77.3279%" y="661" width="0.4049%" height="15" fill="rgb(239,66,17)" fg:x="955" fg:w="5"/><text x="77.5779%" y="671.50"></text></g><g><title>engine::session::Session::save_changes (5 samples, 0.40%)</title><rect x="77.3279%" y="645" width="0.4049%" height="15" fill="rgb(217,132,21)" fg:x="955" fg:w="5"/><text x="77.5779%" y="655.50"></text></g><g><title>engine::session::state::State::close (5 samples, 0.40%)</title><rect x="77.3279%" y="629" width="0.4049%" height="15" fill="rgb(252,202,21)" fg:x="955" fg:w="5"/><text x="77.5779%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (5 samples, 0.40%)</title><rect x="77.3279%" y="613" width="0.4049%" height="15" fill="rgb(233,98,36)" fg:x="955" fg:w="5"/><text x="77.5779%" y="623.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (4 samples, 0.32%)</title><rect x="77.4089%" y="597" width="0.3239%" height="15" fill="rgb(216,153,54)" fg:x="956" fg:w="4"/><text x="77.6589%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (4 samples, 0.32%)</title><rect x="77.4089%" y="581" width="0.3239%" height="15" fill="rgb(250,99,7)" fg:x="956" fg:w="4"/><text x="77.6589%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="77.5709%" y="565" width="0.1619%" height="15" fill="rgb(207,56,50)" fg:x="958" fg:w="2"/><text x="77.8209%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="77.5709%" y="549" width="0.1619%" height="15" fill="rgb(244,61,34)" fg:x="958" fg:w="2"/><text x="77.8209%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="77.5709%" y="533" width="0.1619%" height="15" fill="rgb(241,50,38)" fg:x="958" fg:w="2"/><text x="77.8209%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="77.5709%" y="517" width="0.1619%" height="15" fill="rgb(212,166,30)" fg:x="958" fg:w="2"/><text x="77.8209%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="77.5709%" y="501" width="0.1619%" height="15" fill="rgb(249,127,32)" fg:x="958" fg:w="2"/><text x="77.8209%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.5709%" y="485" width="0.1619%" height="15" fill="rgb(209,103,0)" fg:x="958" fg:w="2"/><text x="77.8209%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6518%" y="469" width="0.0810%" height="15" fill="rgb(238,209,51)" fg:x="959" fg:w="1"/><text x="77.9018%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.6518%" y="453" width="0.0810%" height="15" fill="rgb(237,56,23)" fg:x="959" fg:w="1"/><text x="77.9018%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6518%" y="437" width="0.0810%" height="15" fill="rgb(215,153,46)" fg:x="959" fg:w="1"/><text x="77.9018%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="77.7328%" y="645" width="0.0810%" height="15" fill="rgb(224,49,31)" fg:x="960" fg:w="1"/><text x="77.9828%" y="655.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="77.7328%" y="629" width="0.0810%" height="15" fill="rgb(250,18,42)" fg:x="960" fg:w="1"/><text x="77.9828%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="77.7328%" y="613" width="0.0810%" height="15" fill="rgb(215,176,39)" fg:x="960" fg:w="1"/><text x="77.9828%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.7328%" y="597" width="0.0810%" height="15" fill="rgb(223,77,29)" fg:x="960" fg:w="1"/><text x="77.9828%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="77.8138%" y="629" width="0.0810%" height="15" fill="rgb(234,94,52)" fg:x="961" fg:w="1"/><text x="78.0638%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="77.8138%" y="613" width="0.0810%" height="15" fill="rgb(220,154,50)" fg:x="961" fg:w="1"/><text x="78.0638%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.8138%" y="597" width="0.0810%" height="15" fill="rgb(212,11,10)" fg:x="961" fg:w="1"/><text x="78.0638%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.8138%" y="581" width="0.0810%" height="15" fill="rgb(205,166,19)" fg:x="961" fg:w="1"/><text x="78.0638%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.8138%" y="565" width="0.0810%" height="15" fill="rgb(244,198,16)" fg:x="961" fg:w="1"/><text x="78.0638%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.8138%" y="549" width="0.0810%" height="15" fill="rgb(219,69,12)" fg:x="961" fg:w="1"/><text x="78.0638%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.8138%" y="533" width="0.0810%" height="15" fill="rgb(245,30,7)" fg:x="961" fg:w="1"/><text x="78.0638%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.8138%" y="517" width="0.0810%" height="15" fill="rgb(218,221,48)" fg:x="961" fg:w="1"/><text x="78.0638%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.8138%" y="501" width="0.0810%" height="15" fill="rgb(216,66,15)" fg:x="961" fg:w="1"/><text x="78.0638%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.8138%" y="485" width="0.0810%" height="15" fill="rgb(226,122,50)" fg:x="961" fg:w="1"/><text x="78.0638%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.8138%" y="469" width="0.0810%" height="15" fill="rgb(239,156,16)" fg:x="961" fg:w="1"/><text x="78.0638%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.8138%" y="453" width="0.0810%" height="15" fill="rgb(224,27,38)" fg:x="961" fg:w="1"/><text x="78.0638%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.8138%" y="437" width="0.0810%" height="15" fill="rgb(224,39,27)" fg:x="961" fg:w="1"/><text x="78.0638%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.8138%" y="421" width="0.0810%" height="15" fill="rgb(215,92,29)" fg:x="961" fg:w="1"/><text x="78.0638%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.8138%" y="405" width="0.0810%" height="15" fill="rgb(207,159,16)" fg:x="961" fg:w="1"/><text x="78.0638%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.8138%" y="389" width="0.0810%" height="15" fill="rgb(238,163,47)" fg:x="961" fg:w="1"/><text x="78.0638%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.8138%" y="373" width="0.0810%" height="15" fill="rgb(219,91,49)" fg:x="961" fg:w="1"/><text x="78.0638%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.8138%" y="357" width="0.0810%" height="15" fill="rgb(227,167,31)" fg:x="961" fg:w="1"/><text x="78.0638%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.8138%" y="341" width="0.0810%" height="15" fill="rgb(234,80,54)" fg:x="961" fg:w="1"/><text x="78.0638%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.8138%" y="325" width="0.0810%" height="15" fill="rgb(212,114,2)" fg:x="961" fg:w="1"/><text x="78.0638%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8138%" y="309" width="0.0810%" height="15" fill="rgb(234,50,24)" fg:x="961" fg:w="1"/><text x="78.0638%" y="319.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="77.7328%" y="661" width="0.2429%" height="15" fill="rgb(221,68,8)" fg:x="960" fg:w="3"/><text x="77.9828%" y="671.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="77.8138%" y="645" width="0.1619%" height="15" fill="rgb(254,180,31)" fg:x="961" fg:w="2"/><text x="78.0638%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="77.8947%" y="629" width="0.0810%" height="15" fill="rgb(247,130,50)" fg:x="962" fg:w="1"/><text x="78.1447%" y="639.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="77.8947%" y="613" width="0.0810%" height="15" fill="rgb(211,109,4)" fg:x="962" fg:w="1"/><text x="78.1447%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="77.8947%" y="597" width="0.0810%" height="15" fill="rgb(238,50,21)" fg:x="962" fg:w="1"/><text x="78.1447%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.8947%" y="581" width="0.0810%" height="15" fill="rgb(225,57,45)" fg:x="962" fg:w="1"/><text x="78.1447%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.8947%" y="565" width="0.0810%" height="15" fill="rgb(209,196,50)" fg:x="962" fg:w="1"/><text x="78.1447%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.8947%" y="549" width="0.0810%" height="15" fill="rgb(242,140,13)" fg:x="962" fg:w="1"/><text x="78.1447%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.8947%" y="533" width="0.0810%" height="15" fill="rgb(217,111,7)" fg:x="962" fg:w="1"/><text x="78.1447%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8947%" y="517" width="0.0810%" height="15" fill="rgb(253,193,51)" fg:x="962" fg:w="1"/><text x="78.1447%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.8947%" y="501" width="0.0810%" height="15" fill="rgb(252,70,29)" fg:x="962" fg:w="1"/><text x="78.1447%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8947%" y="485" width="0.0810%" height="15" fill="rgb(232,127,12)" fg:x="962" fg:w="1"/><text x="78.1447%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.8947%" y="469" width="0.0810%" height="15" fill="rgb(211,180,21)" fg:x="962" fg:w="1"/><text x="78.1447%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8947%" y="453" width="0.0810%" height="15" fill="rgb(229,72,13)" fg:x="962" fg:w="1"/><text x="78.1447%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.8947%" y="437" width="0.0810%" height="15" fill="rgb(240,211,49)" fg:x="962" fg:w="1"/><text x="78.1447%" y="447.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="77.9757%" y="661" width="0.0810%" height="15" fill="rgb(219,149,40)" fg:x="963" fg:w="1"/><text x="78.2257%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="77.9757%" y="645" width="0.0810%" height="15" fill="rgb(210,127,46)" fg:x="963" fg:w="1"/><text x="78.2257%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.9757%" y="629" width="0.0810%" height="15" fill="rgb(220,106,7)" fg:x="963" fg:w="1"/><text x="78.2257%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.9757%" y="613" width="0.0810%" height="15" fill="rgb(249,31,22)" fg:x="963" fg:w="1"/><text x="78.2257%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.9757%" y="597" width="0.0810%" height="15" fill="rgb(253,1,49)" fg:x="963" fg:w="1"/><text x="78.2257%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.9757%" y="581" width="0.0810%" height="15" fill="rgb(227,144,33)" fg:x="963" fg:w="1"/><text x="78.2257%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.9757%" y="565" width="0.0810%" height="15" fill="rgb(249,163,44)" fg:x="963" fg:w="1"/><text x="78.2257%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.9757%" y="549" width="0.0810%" height="15" fill="rgb(234,15,39)" fg:x="963" fg:w="1"/><text x="78.2257%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.9757%" y="533" width="0.0810%" height="15" fill="rgb(207,66,16)" fg:x="963" fg:w="1"/><text x="78.2257%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.9757%" y="517" width="0.0810%" height="15" fill="rgb(233,112,24)" fg:x="963" fg:w="1"/><text x="78.2257%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9757%" y="501" width="0.0810%" height="15" fill="rgb(230,90,22)" fg:x="963" fg:w="1"/><text x="78.2257%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="78.0567%" y="629" width="0.0810%" height="15" fill="rgb(229,61,13)" fg:x="964" fg:w="1"/><text x="78.3067%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="78.0567%" y="613" width="0.0810%" height="15" fill="rgb(225,57,24)" fg:x="964" fg:w="1"/><text x="78.3067%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1377%" y="549" width="0.0810%" height="15" fill="rgb(208,169,48)" fg:x="965" fg:w="1"/><text x="78.3877%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1377%" y="533" width="0.0810%" height="15" fill="rgb(244,218,51)" fg:x="965" fg:w="1"/><text x="78.3877%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1377%" y="517" width="0.0810%" height="15" fill="rgb(214,148,10)" fg:x="965" fg:w="1"/><text x="78.3877%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1377%" y="501" width="0.0810%" height="15" fill="rgb(225,174,27)" fg:x="965" fg:w="1"/><text x="78.3877%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.1377%" y="485" width="0.0810%" height="15" fill="rgb(230,96,26)" fg:x="965" fg:w="1"/><text x="78.3877%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.1377%" y="469" width="0.0810%" height="15" fill="rgb(232,10,30)" fg:x="965" fg:w="1"/><text x="78.3877%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.1377%" y="453" width="0.0810%" height="15" fill="rgb(222,8,50)" fg:x="965" fg:w="1"/><text x="78.3877%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.1377%" y="437" width="0.0810%" height="15" fill="rgb(213,81,27)" fg:x="965" fg:w="1"/><text x="78.3877%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.1377%" y="421" width="0.0810%" height="15" fill="rgb(245,50,10)" fg:x="965" fg:w="1"/><text x="78.3877%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.1377%" y="405" width="0.0810%" height="15" fill="rgb(216,100,18)" fg:x="965" fg:w="1"/><text x="78.3877%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.1377%" y="389" width="0.0810%" height="15" fill="rgb(236,147,54)" fg:x="965" fg:w="1"/><text x="78.3877%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.1377%" y="373" width="0.0810%" height="15" fill="rgb(205,143,26)" fg:x="965" fg:w="1"/><text x="78.3877%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.1377%" y="357" width="0.0810%" height="15" fill="rgb(236,26,9)" fg:x="965" fg:w="1"/><text x="78.3877%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.1377%" y="341" width="0.0810%" height="15" fill="rgb(221,165,53)" fg:x="965" fg:w="1"/><text x="78.3877%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.1377%" y="325" width="0.0810%" height="15" fill="rgb(214,110,17)" fg:x="965" fg:w="1"/><text x="78.3877%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1377%" y="309" width="0.0810%" height="15" fill="rgb(237,197,12)" fg:x="965" fg:w="1"/><text x="78.3877%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="78.0567%" y="645" width="0.2429%" height="15" fill="rgb(205,84,17)" fg:x="964" fg:w="3"/><text x="78.3067%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="78.1377%" y="629" width="0.1619%" height="15" fill="rgb(237,18,45)" fg:x="965" fg:w="2"/><text x="78.3877%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="78.1377%" y="613" width="0.1619%" height="15" fill="rgb(221,87,14)" fg:x="965" fg:w="2"/><text x="78.3877%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="78.1377%" y="597" width="0.1619%" height="15" fill="rgb(238,186,15)" fg:x="965" fg:w="2"/><text x="78.3877%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="78.1377%" y="581" width="0.1619%" height="15" fill="rgb(208,115,11)" fg:x="965" fg:w="2"/><text x="78.3877%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="78.1377%" y="565" width="0.1619%" height="15" fill="rgb(254,175,0)" fg:x="965" fg:w="2"/><text x="78.3877%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.2186%" y="549" width="0.0810%" height="15" fill="rgb(227,24,42)" fg:x="966" fg:w="1"/><text x="78.4686%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2186%" y="533" width="0.0810%" height="15" fill="rgb(223,211,37)" fg:x="966" fg:w="1"/><text x="78.4686%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.2186%" y="517" width="0.0810%" height="15" fill="rgb(235,49,27)" fg:x="966" fg:w="1"/><text x="78.4686%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2186%" y="501" width="0.0810%" height="15" fill="rgb(254,97,51)" fg:x="966" fg:w="1"/><text x="78.4686%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.2186%" y="485" width="0.0810%" height="15" fill="rgb(249,51,40)" fg:x="966" fg:w="1"/><text x="78.4686%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2186%" y="469" width="0.0810%" height="15" fill="rgb(210,128,45)" fg:x="966" fg:w="1"/><text x="78.4686%" y="479.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (15 samples, 1.21%)</title><rect x="77.1660%" y="677" width="1.2146%" height="15" fill="rgb(224,137,50)" fg:x="953" fg:w="15"/><text x="77.4160%" y="687.50"></text></g><g><title>plugins_core::build::Build::occupying (4 samples, 0.32%)</title><rect x="78.0567%" y="661" width="0.3239%" height="15" fill="rgb(242,15,9)" fg:x="964" fg:w="4"/><text x="78.3067%" y="671.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="78.2996%" y="645" width="0.0810%" height="15" fill="rgb(233,187,41)" fg:x="967" fg:w="1"/><text x="78.5496%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="78.2996%" y="629" width="0.0810%" height="15" fill="rgb(227,2,29)" fg:x="967" fg:w="1"/><text x="78.5496%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.3806%" y="581" width="0.0810%" height="15" fill="rgb(222,70,3)" fg:x="968" fg:w="1"/><text x="78.6306%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="78.3806%" y="565" width="0.0810%" height="15" fill="rgb(213,11,42)" fg:x="968" fg:w="1"/><text x="78.6306%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.3806%" y="549" width="0.0810%" height="15" fill="rgb(225,150,9)" fg:x="968" fg:w="1"/><text x="78.6306%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3806%" y="533" width="0.0810%" height="15" fill="rgb(230,162,45)" fg:x="968" fg:w="1"/><text x="78.6306%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.3806%" y="517" width="0.0810%" height="15" fill="rgb(222,14,52)" fg:x="968" fg:w="1"/><text x="78.6306%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3806%" y="501" width="0.0810%" height="15" fill="rgb(254,198,14)" fg:x="968" fg:w="1"/><text x="78.6306%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.3806%" y="485" width="0.0810%" height="15" fill="rgb(220,217,30)" fg:x="968" fg:w="1"/><text x="78.6306%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3806%" y="469" width="0.0810%" height="15" fill="rgb(215,146,41)" fg:x="968" fg:w="1"/><text x="78.6306%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.3806%" y="453" width="0.0810%" height="15" fill="rgb(217,27,36)" fg:x="968" fg:w="1"/><text x="78.6306%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3806%" y="437" width="0.0810%" height="15" fill="rgb(219,218,39)" fg:x="968" fg:w="1"/><text x="78.6306%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.3806%" y="421" width="0.0810%" height="15" fill="rgb(219,4,42)" fg:x="968" fg:w="1"/><text x="78.6306%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3806%" y="405" width="0.0810%" height="15" fill="rgb(249,119,36)" fg:x="968" fg:w="1"/><text x="78.6306%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="78.3806%" y="389" width="0.0810%" height="15" fill="rgb(209,23,33)" fg:x="968" fg:w="1"/><text x="78.6306%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="78.3806%" y="373" width="0.0810%" height="15" fill="rgb(211,10,0)" fg:x="968" fg:w="1"/><text x="78.6306%" y="383.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="78.3806%" y="357" width="0.0810%" height="15" fill="rgb(208,99,37)" fg:x="968" fg:w="1"/><text x="78.6306%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="78.3806%" y="645" width="0.1619%" height="15" fill="rgb(213,132,31)" fg:x="968" fg:w="2"/><text x="78.6306%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="78.3806%" y="629" width="0.1619%" height="15" fill="rgb(243,129,40)" fg:x="968" fg:w="2"/><text x="78.6306%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="78.3806%" y="613" width="0.1619%" height="15" fill="rgb(210,66,33)" fg:x="968" fg:w="2"/><text x="78.6306%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="78.3806%" y="597" width="0.1619%" height="15" fill="rgb(209,189,4)" fg:x="968" fg:w="2"/><text x="78.6306%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="78.4615%" y="581" width="0.0810%" height="15" fill="rgb(214,107,37)" fg:x="969" fg:w="1"/><text x="78.7115%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="78.4615%" y="565" width="0.0810%" height="15" fill="rgb(245,88,54)" fg:x="969" fg:w="1"/><text x="78.7115%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="78.4615%" y="549" width="0.0810%" height="15" fill="rgb(205,146,20)" fg:x="969" fg:w="1"/><text x="78.7115%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.4615%" y="533" width="0.0810%" height="15" fill="rgb(220,161,25)" fg:x="969" fg:w="1"/><text x="78.7115%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="78.4615%" y="517" width="0.0810%" height="15" fill="rgb(215,152,15)" fg:x="969" fg:w="1"/><text x="78.7115%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.4615%" y="501" width="0.0810%" height="15" fill="rgb(233,192,44)" fg:x="969" fg:w="1"/><text x="78.7115%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.4615%" y="485" width="0.0810%" height="15" fill="rgb(240,170,46)" fg:x="969" fg:w="1"/><text x="78.7115%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="78.4615%" y="469" width="0.0810%" height="15" fill="rgb(207,104,33)" fg:x="969" fg:w="1"/><text x="78.7115%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.4615%" y="453" width="0.0810%" height="15" fill="rgb(219,21,39)" fg:x="969" fg:w="1"/><text x="78.7115%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.4615%" y="437" width="0.0810%" height="15" fill="rgb(214,133,29)" fg:x="969" fg:w="1"/><text x="78.7115%" y="447.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (27 samples, 2.19%)</title><rect x="76.4372%" y="693" width="2.1862%" height="15" fill="rgb(226,93,6)" fg:x="944" fg:w="27"/><text x="76.6872%" y="703.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="78.3806%" y="677" width="0.2429%" height="15" fill="rgb(252,222,34)" fg:x="968" fg:w="3"/><text x="78.6306%" y="687.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="78.3806%" y="661" width="0.2429%" height="15" fill="rgb(252,92,48)" fg:x="968" fg:w="3"/><text x="78.6306%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="78.5425%" y="645" width="0.0810%" height="15" fill="rgb(245,223,24)" fg:x="970" fg:w="1"/><text x="78.7925%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="78.5425%" y="629" width="0.0810%" height="15" fill="rgb(205,176,3)" fg:x="970" fg:w="1"/><text x="78.7925%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="78.5425%" y="613" width="0.0810%" height="15" fill="rgb(235,151,15)" fg:x="970" fg:w="1"/><text x="78.7925%" y="623.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="78.5425%" y="597" width="0.0810%" height="15" fill="rgb(237,209,11)" fg:x="970" fg:w="1"/><text x="78.7925%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="78.7045%" y="613" width="0.0810%" height="15" fill="rgb(243,227,24)" fg:x="972" fg:w="1"/><text x="78.9545%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="78.7045%" y="597" width="0.0810%" height="15" fill="rgb(239,193,16)" fg:x="972" fg:w="1"/><text x="78.9545%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.7045%" y="581" width="0.0810%" height="15" fill="rgb(231,27,9)" fg:x="972" fg:w="1"/><text x="78.9545%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.7045%" y="565" width="0.0810%" height="15" fill="rgb(219,169,10)" fg:x="972" fg:w="1"/><text x="78.9545%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.7045%" y="549" width="0.0810%" height="15" fill="rgb(244,229,43)" fg:x="972" fg:w="1"/><text x="78.9545%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.7045%" y="533" width="0.0810%" height="15" fill="rgb(254,38,20)" fg:x="972" fg:w="1"/><text x="78.9545%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.7045%" y="517" width="0.0810%" height="15" fill="rgb(250,47,30)" fg:x="972" fg:w="1"/><text x="78.9545%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.7854%" y="565" width="0.0810%" height="15" fill="rgb(224,124,36)" fg:x="973" fg:w="1"/><text x="79.0354%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7854%" y="549" width="0.0810%" height="15" fill="rgb(246,68,51)" fg:x="973" fg:w="1"/><text x="79.0354%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.7854%" y="533" width="0.0810%" height="15" fill="rgb(253,43,49)" fg:x="973" fg:w="1"/><text x="79.0354%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.7854%" y="517" width="0.0810%" height="15" fill="rgb(219,54,36)" fg:x="973" fg:w="1"/><text x="79.0354%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.7854%" y="501" width="0.0810%" height="15" fill="rgb(227,133,34)" fg:x="973" fg:w="1"/><text x="79.0354%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.7854%" y="485" width="0.0810%" height="15" fill="rgb(247,227,15)" fg:x="973" fg:w="1"/><text x="79.0354%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.8664%" y="549" width="0.0810%" height="15" fill="rgb(229,96,14)" fg:x="974" fg:w="1"/><text x="79.1164%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.8664%" y="533" width="0.0810%" height="15" fill="rgb(220,79,17)" fg:x="974" fg:w="1"/><text x="79.1164%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.8664%" y="517" width="0.0810%" height="15" fill="rgb(205,131,53)" fg:x="974" fg:w="1"/><text x="79.1164%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.8664%" y="501" width="0.0810%" height="15" fill="rgb(209,50,29)" fg:x="974" fg:w="1"/><text x="79.1164%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="78.7854%" y="613" width="0.2429%" height="15" fill="rgb(245,86,46)" fg:x="973" fg:w="3"/><text x="79.0354%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="78.7854%" y="597" width="0.2429%" height="15" fill="rgb(235,66,46)" fg:x="973" fg:w="3"/><text x="79.0354%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="78.7854%" y="581" width="0.2429%" height="15" fill="rgb(232,148,31)" fg:x="973" fg:w="3"/><text x="79.0354%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.8664%" y="565" width="0.1619%" height="15" fill="rgb(217,149,8)" fg:x="974" fg:w="2"/><text x="79.1164%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.9474%" y="549" width="0.0810%" height="15" fill="rgb(209,183,11)" fg:x="975" fg:w="1"/><text x="79.1974%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.9474%" y="533" width="0.0810%" height="15" fill="rgb(208,55,20)" fg:x="975" fg:w="1"/><text x="79.1974%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.0283%" y="581" width="0.0810%" height="15" fill="rgb(218,39,14)" fg:x="976" fg:w="1"/><text x="79.2783%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.1093%" y="549" width="0.0810%" height="15" fill="rgb(216,169,33)" fg:x="977" fg:w="1"/><text x="79.3593%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="79.2713%" y="533" width="0.1619%" height="15" fill="rgb(233,80,24)" fg:x="979" fg:w="2"/><text x="79.5213%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="79.2713%" y="517" width="0.1619%" height="15" fill="rgb(213,179,31)" fg:x="979" fg:w="2"/><text x="79.5213%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.4332%" y="501" width="0.0810%" height="15" fill="rgb(209,19,5)" fg:x="981" fg:w="1"/><text x="79.6832%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.5142%" y="501" width="0.0810%" height="15" fill="rgb(219,18,35)" fg:x="982" fg:w="1"/><text x="79.7642%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.5142%" y="485" width="0.0810%" height="15" fill="rgb(209,169,16)" fg:x="982" fg:w="1"/><text x="79.7642%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.65%)</title><rect x="79.0283%" y="597" width="0.6478%" height="15" fill="rgb(245,90,51)" fg:x="976" fg:w="8"/><text x="79.2783%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="79.1093%" y="581" width="0.5668%" height="15" fill="rgb(220,99,45)" fg:x="977" fg:w="7"/><text x="79.3593%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="79.1093%" y="565" width="0.5668%" height="15" fill="rgb(249,89,25)" fg:x="977" fg:w="7"/><text x="79.3593%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="79.1903%" y="549" width="0.4858%" height="15" fill="rgb(239,193,0)" fg:x="978" fg:w="6"/><text x="79.4403%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="79.4332%" y="533" width="0.2429%" height="15" fill="rgb(231,126,1)" fg:x="981" fg:w="3"/><text x="79.6832%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="79.4332%" y="517" width="0.2429%" height="15" fill="rgb(243,166,3)" fg:x="981" fg:w="3"/><text x="79.6832%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.5951%" y="501" width="0.0810%" height="15" fill="rgb(223,22,34)" fg:x="983" fg:w="1"/><text x="79.8451%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.5951%" y="485" width="0.0810%" height="15" fill="rgb(251,52,51)" fg:x="983" fg:w="1"/><text x="79.8451%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.6761%" y="597" width="0.0810%" height="15" fill="rgb(221,165,28)" fg:x="984" fg:w="1"/><text x="79.9261%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.6761%" y="581" width="0.0810%" height="15" fill="rgb(218,121,47)" fg:x="984" fg:w="1"/><text x="79.9261%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.6761%" y="565" width="0.0810%" height="15" fill="rgb(209,120,9)" fg:x="984" fg:w="1"/><text x="79.9261%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.6761%" y="549" width="0.0810%" height="15" fill="rgb(236,68,12)" fg:x="984" fg:w="1"/><text x="79.9261%" y="559.50"></text></g><g><title>engine::session::state::State::close (15 samples, 1.21%)</title><rect x="78.6235%" y="677" width="1.2146%" height="15" fill="rgb(225,194,26)" fg:x="971" fg:w="15"/><text x="78.8735%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (15 samples, 1.21%)</title><rect x="78.6235%" y="661" width="1.2146%" height="15" fill="rgb(231,84,39)" fg:x="971" fg:w="15"/><text x="78.8735%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (15 samples, 1.21%)</title><rect x="78.6235%" y="645" width="1.2146%" height="15" fill="rgb(210,11,45)" fg:x="971" fg:w="15"/><text x="78.8735%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.21%)</title><rect x="78.6235%" y="629" width="1.2146%" height="15" fill="rgb(224,54,52)" fg:x="971" fg:w="15"/><text x="78.8735%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.81%)</title><rect x="79.0283%" y="613" width="0.8097%" height="15" fill="rgb(238,102,14)" fg:x="976" fg:w="10"/><text x="79.2783%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="79.7571%" y="597" width="0.0810%" height="15" fill="rgb(243,160,52)" fg:x="985" fg:w="1"/><text x="80.0071%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="79.7571%" y="581" width="0.0810%" height="15" fill="rgb(216,114,19)" fg:x="985" fg:w="1"/><text x="80.0071%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.7571%" y="565" width="0.0810%" height="15" fill="rgb(244,166,37)" fg:x="985" fg:w="1"/><text x="80.0071%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.7571%" y="549" width="0.0810%" height="15" fill="rgb(246,29,44)" fg:x="985" fg:w="1"/><text x="80.0071%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.7571%" y="533" width="0.0810%" height="15" fill="rgb(215,56,53)" fg:x="985" fg:w="1"/><text x="80.0071%" y="543.50"></text></g><g><title>engine::session::Session::close (16 samples, 1.30%)</title><rect x="78.6235%" y="693" width="1.2955%" height="15" fill="rgb(217,60,2)" fg:x="971" fg:w="16"/><text x="78.8735%" y="703.50"></text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="79.8381%" y="677" width="0.0810%" height="15" fill="rgb(207,26,24)" fg:x="986" fg:w="1"/><text x="80.0881%" y="687.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="79.8381%" y="661" width="0.0810%" height="15" fill="rgb(252,210,15)" fg:x="986" fg:w="1"/><text x="80.0881%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="79.8381%" y="645" width="0.0810%" height="15" fill="rgb(253,209,26)" fg:x="986" fg:w="1"/><text x="80.0881%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="79.8381%" y="629" width="0.0810%" height="15" fill="rgb(238,170,14)" fg:x="986" fg:w="1"/><text x="80.0881%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="79.8381%" y="613" width="0.0810%" height="15" fill="rgb(216,178,15)" fg:x="986" fg:w="1"/><text x="80.0881%" y="623.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="79.9190%" y="533" width="0.0810%" height="15" fill="rgb(250,197,2)" fg:x="987" fg:w="1"/><text x="80.1690%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.9190%" y="517" width="0.0810%" height="15" fill="rgb(212,70,42)" fg:x="987" fg:w="1"/><text x="80.1690%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.9190%" y="501" width="0.0810%" height="15" fill="rgb(227,213,9)" fg:x="987" fg:w="1"/><text x="80.1690%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.9190%" y="485" width="0.0810%" height="15" fill="rgb(245,99,25)" fg:x="987" fg:w="1"/><text x="80.1690%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.9190%" y="469" width="0.0810%" height="15" fill="rgb(250,82,29)" fg:x="987" fg:w="1"/><text x="80.1690%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9190%" y="453" width="0.0810%" height="15" fill="rgb(241,226,54)" fg:x="987" fg:w="1"/><text x="80.1690%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9190%" y="437" width="0.0810%" height="15" fill="rgb(221,99,41)" fg:x="987" fg:w="1"/><text x="80.1690%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.9190%" y="421" width="0.0810%" height="15" fill="rgb(213,90,21)" fg:x="987" fg:w="1"/><text x="80.1690%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.0000%" y="501" width="0.0810%" height="15" fill="rgb(205,208,24)" fg:x="988" fg:w="1"/><text x="80.2500%" y="511.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="79.9190%" y="645" width="0.3239%" height="15" fill="rgb(246,31,12)" fg:x="987" fg:w="4"/><text x="80.1690%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="79.9190%" y="629" width="0.3239%" height="15" fill="rgb(213,154,6)" fg:x="987" fg:w="4"/><text x="80.1690%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="79.9190%" y="613" width="0.3239%" height="15" fill="rgb(222,163,29)" fg:x="987" fg:w="4"/><text x="80.1690%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="79.9190%" y="597" width="0.3239%" height="15" fill="rgb(227,201,8)" fg:x="987" fg:w="4"/><text x="80.1690%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="79.9190%" y="581" width="0.3239%" height="15" fill="rgb(233,9,32)" fg:x="987" fg:w="4"/><text x="80.1690%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="79.9190%" y="565" width="0.3239%" height="15" fill="rgb(217,54,24)" fg:x="987" fg:w="4"/><text x="80.1690%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_str (4 samples, 0.32%)</title><rect x="79.9190%" y="549" width="0.3239%" height="15" fill="rgb(235,192,0)" fg:x="987" fg:w="4"/><text x="80.1690%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="80.0000%" y="533" width="0.2429%" height="15" fill="rgb(235,45,9)" fg:x="988" fg:w="3"/><text x="80.2500%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="80.0000%" y="517" width="0.2429%" height="15" fill="rgb(246,42,40)" fg:x="988" fg:w="3"/><text x="80.2500%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="80.0810%" y="501" width="0.1619%" height="15" fill="rgb(248,111,24)" fg:x="989" fg:w="2"/><text x="80.3310%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.0810%" y="485" width="0.1619%" height="15" fill="rgb(249,65,22)" fg:x="989" fg:w="2"/><text x="80.3310%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="80.0810%" y="469" width="0.1619%" height="15" fill="rgb(238,111,51)" fg:x="989" fg:w="2"/><text x="80.3310%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="80.0810%" y="453" width="0.1619%" height="15" fill="rgb(250,118,22)" fg:x="989" fg:w="2"/><text x="80.3310%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="80.0810%" y="437" width="0.1619%" height="15" fill="rgb(234,84,26)" fg:x="989" fg:w="2"/><text x="80.3310%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="80.0810%" y="421" width="0.1619%" height="15" fill="rgb(243,172,12)" fg:x="989" fg:w="2"/><text x="80.3310%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.1619%" y="405" width="0.0810%" height="15" fill="rgb(236,150,49)" fg:x="990" fg:w="1"/><text x="80.4119%" y="415.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.40%)</title><rect x="79.9190%" y="661" width="0.4049%" height="15" fill="rgb(225,197,26)" fg:x="987" fg:w="5"/><text x="80.1690%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="80.2429%" y="645" width="0.0810%" height="15" fill="rgb(214,17,42)" fg:x="991" fg:w="1"/><text x="80.4929%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.4049%" y="597" width="0.0810%" height="15" fill="rgb(224,165,40)" fg:x="993" fg:w="1"/><text x="80.6549%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.4049%" y="581" width="0.0810%" height="15" fill="rgb(246,100,4)" fg:x="993" fg:w="1"/><text x="80.6549%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.4858%" y="533" width="0.0810%" height="15" fill="rgb(222,103,0)" fg:x="994" fg:w="1"/><text x="80.7358%" y="543.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (1 samples, 0.08%)</title><rect x="80.4858%" y="517" width="0.0810%" height="15" fill="rgb(227,189,26)" fg:x="994" fg:w="1"/><text x="80.7358%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (1 samples, 0.08%)</title><rect x="80.4858%" y="501" width="0.0810%" height="15" fill="rgb(214,202,17)" fg:x="994" fg:w="1"/><text x="80.7358%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="80.4858%" y="485" width="0.0810%" height="15" fill="rgb(229,111,3)" fg:x="994" fg:w="1"/><text x="80.7358%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="80.4858%" y="469" width="0.0810%" height="15" fill="rgb(229,172,15)" fg:x="994" fg:w="1"/><text x="80.7358%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="80.4858%" y="453" width="0.0810%" height="15" fill="rgb(230,224,35)" fg:x="994" fg:w="1"/><text x="80.7358%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="80.4858%" y="437" width="0.0810%" height="15" fill="rgb(251,141,6)" fg:x="994" fg:w="1"/><text x="80.7358%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="80.4858%" y="421" width="0.0810%" height="15" fill="rgb(225,208,6)" fg:x="994" fg:w="1"/><text x="80.7358%" y="431.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="80.4858%" y="405" width="0.0810%" height="15" fill="rgb(246,181,16)" fg:x="994" fg:w="1"/><text x="80.7358%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="80.4858%" y="389" width="0.0810%" height="15" fill="rgb(227,129,36)" fg:x="994" fg:w="1"/><text x="80.7358%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.4858%" y="373" width="0.0810%" height="15" fill="rgb(248,117,24)" fg:x="994" fg:w="1"/><text x="80.7358%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="80.4858%" y="357" width="0.0810%" height="15" fill="rgb(214,185,35)" fg:x="994" fg:w="1"/><text x="80.7358%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.4858%" y="341" width="0.0810%" height="15" fill="rgb(236,150,34)" fg:x="994" fg:w="1"/><text x="80.7358%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.4858%" y="325" width="0.0810%" height="15" fill="rgb(243,228,27)" fg:x="994" fg:w="1"/><text x="80.7358%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.4858%" y="309" width="0.0810%" height="15" fill="rgb(245,77,44)" fg:x="994" fg:w="1"/><text x="80.7358%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.4858%" y="293" width="0.0810%" height="15" fill="rgb(235,214,42)" fg:x="994" fg:w="1"/><text x="80.7358%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.4858%" y="277" width="0.0810%" height="15" fill="rgb(221,74,3)" fg:x="994" fg:w="1"/><text x="80.7358%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.4858%" y="261" width="0.0810%" height="15" fill="rgb(206,121,29)" fg:x="994" fg:w="1"/><text x="80.7358%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.4858%" y="245" width="0.0810%" height="15" fill="rgb(249,131,53)" fg:x="994" fg:w="1"/><text x="80.7358%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.4858%" y="229" width="0.0810%" height="15" fill="rgb(236,170,29)" fg:x="994" fg:w="1"/><text x="80.7358%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.4858%" y="213" width="0.0810%" height="15" fill="rgb(247,96,15)" fg:x="994" fg:w="1"/><text x="80.7358%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.4858%" y="197" width="0.0810%" height="15" fill="rgb(211,210,7)" fg:x="994" fg:w="1"/><text x="80.7358%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.4858%" y="181" width="0.0810%" height="15" fill="rgb(240,88,50)" fg:x="994" fg:w="1"/><text x="80.7358%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.4858%" y="165" width="0.0810%" height="15" fill="rgb(209,229,26)" fg:x="994" fg:w="1"/><text x="80.7358%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.4858%" y="149" width="0.0810%" height="15" fill="rgb(210,68,23)" fg:x="994" fg:w="1"/><text x="80.7358%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.4858%" y="133" width="0.0810%" height="15" fill="rgb(229,180,13)" fg:x="994" fg:w="1"/><text x="80.7358%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.4858%" y="117" width="0.0810%" height="15" fill="rgb(236,53,44)" fg:x="994" fg:w="1"/><text x="80.7358%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.5668%" y="469" width="0.0810%" height="15" fill="rgb(244,214,29)" fg:x="995" fg:w="1"/><text x="80.8168%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.5668%" y="453" width="0.0810%" height="15" fill="rgb(220,75,29)" fg:x="995" fg:w="1"/><text x="80.8168%" y="463.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (3 samples, 0.24%)</title><rect x="80.4858%" y="549" width="0.2429%" height="15" fill="rgb(214,183,37)" fg:x="994" fg:w="3"/><text x="80.7358%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="80.5668%" y="533" width="0.1619%" height="15" fill="rgb(239,117,29)" fg:x="995" fg:w="2"/><text x="80.8168%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="80.5668%" y="517" width="0.1619%" height="15" fill="rgb(237,171,35)" fg:x="995" fg:w="2"/><text x="80.8168%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.5668%" y="501" width="0.1619%" height="15" fill="rgb(229,178,53)" fg:x="995" fg:w="2"/><text x="80.8168%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.5668%" y="485" width="0.1619%" height="15" fill="rgb(210,102,19)" fg:x="995" fg:w="2"/><text x="80.8168%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="80.6478%" y="469" width="0.0810%" height="15" fill="rgb(235,127,22)" fg:x="996" fg:w="1"/><text x="80.8978%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="80.6478%" y="453" width="0.0810%" height="15" fill="rgb(244,31,31)" fg:x="996" fg:w="1"/><text x="80.8978%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="80.6478%" y="437" width="0.0810%" height="15" fill="rgb(231,43,21)" fg:x="996" fg:w="1"/><text x="80.8978%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.6478%" y="421" width="0.0810%" height="15" fill="rgb(217,131,35)" fg:x="996" fg:w="1"/><text x="80.8978%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.6478%" y="405" width="0.0810%" height="15" fill="rgb(221,149,4)" fg:x="996" fg:w="1"/><text x="80.8978%" y="415.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as core::convert::Into&lt;kernel::model::entity::EntityRef&gt;&gt;::into (1 samples, 0.08%)</title><rect x="80.7287%" y="421" width="0.0810%" height="15" fill="rgb(232,170,28)" fg:x="997" fg:w="1"/><text x="80.9787%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.7287%" y="405" width="0.0810%" height="15" fill="rgb(238,56,10)" fg:x="997" fg:w="1"/><text x="80.9787%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.7287%" y="389" width="0.0810%" height="15" fill="rgb(235,196,14)" fg:x="997" fg:w="1"/><text x="80.9787%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.7287%" y="373" width="0.0810%" height="15" fill="rgb(216,45,48)" fg:x="997" fg:w="1"/><text x="80.9787%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.7287%" y="357" width="0.0810%" height="15" fill="rgb(238,213,17)" fg:x="997" fg:w="1"/><text x="80.9787%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.7287%" y="341" width="0.0810%" height="15" fill="rgb(212,13,2)" fg:x="997" fg:w="1"/><text x="80.9787%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.7287%" y="325" width="0.0810%" height="15" fill="rgb(240,114,20)" fg:x="997" fg:w="1"/><text x="80.9787%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.7287%" y="309" width="0.0810%" height="15" fill="rgb(228,41,40)" fg:x="997" fg:w="1"/><text x="80.9787%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.7287%" y="293" width="0.0810%" height="15" fill="rgb(244,132,35)" fg:x="997" fg:w="1"/><text x="80.9787%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.7287%" y="277" width="0.0810%" height="15" fill="rgb(253,189,4)" fg:x="997" fg:w="1"/><text x="80.9787%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.7287%" y="261" width="0.0810%" height="15" fill="rgb(224,37,19)" fg:x="997" fg:w="1"/><text x="80.9787%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.7287%" y="245" width="0.0810%" height="15" fill="rgb(235,223,18)" fg:x="997" fg:w="1"/><text x="80.9787%" y="255.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="80.7287%" y="229" width="0.0810%" height="15" fill="rgb(235,163,25)" fg:x="997" fg:w="1"/><text x="80.9787%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.8097%" y="389" width="0.0810%" height="15" fill="rgb(217,145,28)" fg:x="998" fg:w="1"/><text x="81.0597%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.8097%" y="373" width="0.0810%" height="15" fill="rgb(223,223,32)" fg:x="998" fg:w="1"/><text x="81.0597%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="80.8097%" y="357" width="0.0810%" height="15" fill="rgb(227,189,39)" fg:x="998" fg:w="1"/><text x="81.0597%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.8097%" y="341" width="0.0810%" height="15" fill="rgb(248,10,22)" fg:x="998" fg:w="1"/><text x="81.0597%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.8097%" y="325" width="0.0810%" height="15" fill="rgb(248,46,39)" fg:x="998" fg:w="1"/><text x="81.0597%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.8097%" y="309" width="0.0810%" height="15" fill="rgb(248,113,48)" fg:x="998" fg:w="1"/><text x="81.0597%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8097%" y="293" width="0.0810%" height="15" fill="rgb(245,16,25)" fg:x="998" fg:w="1"/><text x="81.0597%" y="303.50"></text></g><g><title>plugins_core::tools::get_contained_keys (3 samples, 0.24%)</title><rect x="80.7287%" y="549" width="0.2429%" height="15" fill="rgb(249,152,16)" fg:x="997" fg:w="3"/><text x="80.9787%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="80.7287%" y="533" width="0.2429%" height="15" fill="rgb(250,16,1)" fg:x="997" fg:w="3"/><text x="80.9787%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="80.7287%" y="517" width="0.2429%" height="15" fill="rgb(249,138,3)" fg:x="997" fg:w="3"/><text x="80.9787%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (3 samples, 0.24%)</title><rect x="80.7287%" y="501" width="0.2429%" height="15" fill="rgb(227,71,41)" fg:x="997" fg:w="3"/><text x="80.9787%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="80.7287%" y="485" width="0.2429%" height="15" fill="rgb(209,184,23)" fg:x="997" fg:w="3"/><text x="80.9787%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="80.7287%" y="469" width="0.2429%" height="15" fill="rgb(223,215,31)" fg:x="997" fg:w="3"/><text x="80.9787%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="80.7287%" y="453" width="0.2429%" height="15" fill="rgb(210,146,28)" fg:x="997" fg:w="3"/><text x="80.9787%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="80.7287%" y="437" width="0.2429%" height="15" fill="rgb(209,183,41)" fg:x="997" fg:w="3"/><text x="80.9787%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="80.8097%" y="421" width="0.1619%" height="15" fill="rgb(209,224,45)" fg:x="998" fg:w="2"/><text x="81.0597%" y="431.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="80.8097%" y="405" width="0.1619%" height="15" fill="rgb(224,209,51)" fg:x="998" fg:w="2"/><text x="81.0597%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="80.8907%" y="389" width="0.0810%" height="15" fill="rgb(223,17,39)" fg:x="999" fg:w="1"/><text x="81.1407%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.8907%" y="373" width="0.0810%" height="15" fill="rgb(234,204,37)" fg:x="999" fg:w="1"/><text x="81.1407%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.8907%" y="357" width="0.0810%" height="15" fill="rgb(236,120,5)" fg:x="999" fg:w="1"/><text x="81.1407%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.8907%" y="341" width="0.0810%" height="15" fill="rgb(248,97,27)" fg:x="999" fg:w="1"/><text x="81.1407%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.8907%" y="325" width="0.0810%" height="15" fill="rgb(240,66,17)" fg:x="999" fg:w="1"/><text x="81.1407%" y="335.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.8907%" y="309" width="0.0810%" height="15" fill="rgb(210,79,3)" fg:x="999" fg:w="1"/><text x="81.1407%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.8907%" y="293" width="0.0810%" height="15" fill="rgb(214,176,27)" fg:x="999" fg:w="1"/><text x="81.1407%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.8907%" y="277" width="0.0810%" height="15" fill="rgb(235,185,3)" fg:x="999" fg:w="1"/><text x="81.1407%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.8907%" y="261" width="0.0810%" height="15" fill="rgb(227,24,12)" fg:x="999" fg:w="1"/><text x="81.1407%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.8907%" y="245" width="0.0810%" height="15" fill="rgb(252,169,48)" fg:x="999" fg:w="1"/><text x="81.1407%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="80.8907%" y="229" width="0.0810%" height="15" fill="rgb(212,65,1)" fg:x="999" fg:w="1"/><text x="81.1407%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="80.4858%" y="581" width="0.5668%" height="15" fill="rgb(242,39,24)" fg:x="994" fg:w="7"/><text x="80.7358%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.57%)</title><rect x="80.4858%" y="565" width="0.5668%" height="15" fill="rgb(249,32,23)" fg:x="994" fg:w="7"/><text x="80.7358%" y="575.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="80.9717%" y="549" width="0.0810%" height="15" fill="rgb(251,195,23)" fg:x="1000" fg:w="1"/><text x="81.2217%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="80.9717%" y="533" width="0.0810%" height="15" fill="rgb(236,174,8)" fg:x="1000" fg:w="1"/><text x="81.2217%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="80.9717%" y="517" width="0.0810%" height="15" fill="rgb(220,197,8)" fg:x="1000" fg:w="1"/><text x="81.2217%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.9717%" y="501" width="0.0810%" height="15" fill="rgb(240,108,37)" fg:x="1000" fg:w="1"/><text x="81.2217%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9717%" y="485" width="0.0810%" height="15" fill="rgb(232,176,24)" fg:x="1000" fg:w="1"/><text x="81.2217%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="80.9717%" y="469" width="0.0810%" height="15" fill="rgb(243,35,29)" fg:x="1000" fg:w="1"/><text x="81.2217%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="80.9717%" y="453" width="0.0810%" height="15" fill="rgb(210,37,18)" fg:x="1000" fg:w="1"/><text x="81.2217%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="80.9717%" y="437" width="0.0810%" height="15" fill="rgb(224,184,40)" fg:x="1000" fg:w="1"/><text x="81.2217%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.9717%" y="421" width="0.0810%" height="15" fill="rgb(236,39,29)" fg:x="1000" fg:w="1"/><text x="81.2217%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="81.1336%" y="533" width="0.0810%" height="15" fill="rgb(232,48,39)" fg:x="1002" fg:w="1"/><text x="81.3836%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="81.1336%" y="517" width="0.0810%" height="15" fill="rgb(236,34,42)" fg:x="1002" fg:w="1"/><text x="81.3836%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="81.1336%" y="501" width="0.0810%" height="15" fill="rgb(243,106,37)" fg:x="1002" fg:w="1"/><text x="81.3836%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="81.1336%" y="485" width="0.0810%" height="15" fill="rgb(218,96,6)" fg:x="1002" fg:w="1"/><text x="81.3836%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="81.1336%" y="469" width="0.0810%" height="15" fill="rgb(235,130,12)" fg:x="1002" fg:w="1"/><text x="81.3836%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="81.1336%" y="453" width="0.0810%" height="15" fill="rgb(231,95,0)" fg:x="1002" fg:w="1"/><text x="81.3836%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="81.1336%" y="437" width="0.0810%" height="15" fill="rgb(228,12,23)" fg:x="1002" fg:w="1"/><text x="81.3836%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="81.1336%" y="421" width="0.0810%" height="15" fill="rgb(216,12,1)" fg:x="1002" fg:w="1"/><text x="81.3836%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.2955%" y="357" width="0.0810%" height="15" fill="rgb(219,59,3)" fg:x="1004" fg:w="1"/><text x="81.5455%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="81.2955%" y="341" width="0.0810%" height="15" fill="rgb(215,208,46)" fg:x="1004" fg:w="1"/><text x="81.5455%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="81.2146%" y="405" width="0.2429%" height="15" fill="rgb(254,224,29)" fg:x="1003" fg:w="3"/><text x="81.4646%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="81.2146%" y="389" width="0.2429%" height="15" fill="rgb(232,14,29)" fg:x="1003" fg:w="3"/><text x="81.4646%" y="399.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="81.2955%" y="373" width="0.1619%" height="15" fill="rgb(208,45,52)" fg:x="1004" fg:w="2"/><text x="81.5455%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.3765%" y="357" width="0.0810%" height="15" fill="rgb(234,191,28)" fg:x="1005" fg:w="1"/><text x="81.6265%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="81.3765%" y="341" width="0.0810%" height="15" fill="rgb(244,67,43)" fg:x="1005" fg:w="1"/><text x="81.6265%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="81.3765%" y="325" width="0.0810%" height="15" fill="rgb(236,189,24)" fg:x="1005" fg:w="1"/><text x="81.6265%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.3765%" y="309" width="0.0810%" height="15" fill="rgb(239,214,33)" fg:x="1005" fg:w="1"/><text x="81.6265%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="81.3765%" y="293" width="0.0810%" height="15" fill="rgb(226,176,41)" fg:x="1005" fg:w="1"/><text x="81.6265%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="81.2146%" y="517" width="0.3239%" height="15" fill="rgb(248,47,8)" fg:x="1003" fg:w="4"/><text x="81.4646%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="81.2146%" y="501" width="0.3239%" height="15" fill="rgb(218,81,44)" fg:x="1003" fg:w="4"/><text x="81.4646%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="81.2146%" y="485" width="0.3239%" height="15" fill="rgb(213,98,6)" fg:x="1003" fg:w="4"/><text x="81.4646%" y="495.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="81.2146%" y="469" width="0.3239%" height="15" fill="rgb(222,85,22)" fg:x="1003" fg:w="4"/><text x="81.4646%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="81.2146%" y="453" width="0.3239%" height="15" fill="rgb(239,46,39)" fg:x="1003" fg:w="4"/><text x="81.4646%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="81.2146%" y="437" width="0.3239%" height="15" fill="rgb(237,12,29)" fg:x="1003" fg:w="4"/><text x="81.4646%" y="447.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="81.2146%" y="421" width="0.3239%" height="15" fill="rgb(214,77,8)" fg:x="1003" fg:w="4"/><text x="81.4646%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.4575%" y="405" width="0.0810%" height="15" fill="rgb(217,168,37)" fg:x="1006" fg:w="1"/><text x="81.7075%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="81.5385%" y="469" width="0.1619%" height="15" fill="rgb(221,217,23)" fg:x="1007" fg:w="2"/><text x="81.7885%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7004%" y="469" width="0.0810%" height="15" fill="rgb(243,229,36)" fg:x="1009" fg:w="1"/><text x="81.9504%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.7004%" y="453" width="0.0810%" height="15" fill="rgb(251,163,40)" fg:x="1009" fg:w="1"/><text x="81.9504%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.7004%" y="437" width="0.0810%" height="15" fill="rgb(237,222,12)" fg:x="1009" fg:w="1"/><text x="81.9504%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7814%" y="469" width="0.0810%" height="15" fill="rgb(248,132,6)" fg:x="1010" fg:w="1"/><text x="82.0314%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.7814%" y="453" width="0.0810%" height="15" fill="rgb(227,167,50)" fg:x="1010" fg:w="1"/><text x="82.0314%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.7814%" y="437" width="0.0810%" height="15" fill="rgb(242,84,37)" fg:x="1010" fg:w="1"/><text x="82.0314%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.8623%" y="421" width="0.0810%" height="15" fill="rgb(212,4,50)" fg:x="1011" fg:w="1"/><text x="82.1123%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.8623%" y="405" width="0.0810%" height="15" fill="rgb(230,228,32)" fg:x="1011" fg:w="1"/><text x="82.1123%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="81.8623%" y="453" width="0.1619%" height="15" fill="rgb(248,217,23)" fg:x="1011" fg:w="2"/><text x="82.1123%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="81.8623%" y="437" width="0.1619%" height="15" fill="rgb(238,197,32)" fg:x="1011" fg:w="2"/><text x="82.1123%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.9433%" y="421" width="0.0810%" height="15" fill="rgb(236,106,1)" fg:x="1012" fg:w="1"/><text x="82.1933%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.9433%" y="405" width="0.0810%" height="15" fill="rgb(219,228,13)" fg:x="1012" fg:w="1"/><text x="82.1933%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.9433%" y="389" width="0.0810%" height="15" fill="rgb(238,30,35)" fg:x="1012" fg:w="1"/><text x="82.1933%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.9433%" y="373" width="0.0810%" height="15" fill="rgb(236,70,23)" fg:x="1012" fg:w="1"/><text x="82.1933%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.9433%" y="357" width="0.0810%" height="15" fill="rgb(249,104,48)" fg:x="1012" fg:w="1"/><text x="82.1933%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.9433%" y="341" width="0.0810%" height="15" fill="rgb(254,117,50)" fg:x="1012" fg:w="1"/><text x="82.1933%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.9433%" y="325" width="0.0810%" height="15" fill="rgb(223,152,4)" fg:x="1012" fg:w="1"/><text x="82.1933%" y="335.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (22 samples, 1.78%)</title><rect x="80.3239%" y="661" width="1.7814%" height="15" fill="rgb(245,6,2)" fg:x="992" fg:w="22"/><text x="80.5739%" y="671.50">k..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (22 samples, 1.78%)</title><rect x="80.3239%" y="645" width="1.7814%" height="15" fill="rgb(249,150,24)" fg:x="992" fg:w="22"/><text x="80.5739%" y="655.50">&lt;..</text></g><g><title>plugins_rpc::querying::have_surroundings (22 samples, 1.78%)</title><rect x="80.3239%" y="629" width="1.7814%" height="15" fill="rgb(228,185,42)" fg:x="992" fg:w="22"/><text x="80.5739%" y="639.50">p..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (21 samples, 1.70%)</title><rect x="80.4049%" y="613" width="1.7004%" height="15" fill="rgb(226,39,33)" fg:x="993" fg:w="21"/><text x="80.6549%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (20 samples, 1.62%)</title><rect x="80.4858%" y="597" width="1.6194%" height="15" fill="rgb(221,166,19)" fg:x="994" fg:w="20"/><text x="80.7358%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (13 samples, 1.05%)</title><rect x="81.0526%" y="581" width="1.0526%" height="15" fill="rgb(209,109,2)" fg:x="1001" fg:w="13"/><text x="81.3026%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.97%)</title><rect x="81.1336%" y="565" width="0.9717%" height="15" fill="rgb(252,216,26)" fg:x="1002" fg:w="12"/><text x="81.3836%" y="575.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (12 samples, 0.97%)</title><rect x="81.1336%" y="549" width="0.9717%" height="15" fill="rgb(227,173,36)" fg:x="1002" fg:w="12"/><text x="81.3836%" y="559.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (11 samples, 0.89%)</title><rect x="81.2146%" y="533" width="0.8907%" height="15" fill="rgb(209,90,7)" fg:x="1003" fg:w="11"/><text x="81.4646%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (7 samples, 0.57%)</title><rect x="81.5385%" y="517" width="0.5668%" height="15" fill="rgb(250,194,11)" fg:x="1007" fg:w="7"/><text x="81.7885%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="81.5385%" y="501" width="0.5668%" height="15" fill="rgb(220,72,50)" fg:x="1007" fg:w="7"/><text x="81.7885%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="81.5385%" y="485" width="0.5668%" height="15" fill="rgb(222,106,48)" fg:x="1007" fg:w="7"/><text x="81.7885%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="81.8623%" y="469" width="0.2429%" height="15" fill="rgb(216,220,45)" fg:x="1011" fg:w="3"/><text x="82.1123%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.0243%" y="453" width="0.0810%" height="15" fill="rgb(234,112,18)" fg:x="1013" fg:w="1"/><text x="82.2743%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.0243%" y="437" width="0.0810%" height="15" fill="rgb(206,179,9)" fg:x="1013" fg:w="1"/><text x="82.2743%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="82.1862%" y="437" width="0.0810%" height="15" fill="rgb(215,115,40)" fg:x="1015" fg:w="1"/><text x="82.4362%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="82.1862%" y="421" width="0.0810%" height="15" fill="rgb(222,69,34)" fg:x="1015" fg:w="1"/><text x="82.4362%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.1862%" y="405" width="0.0810%" height="15" fill="rgb(209,161,10)" fg:x="1015" fg:w="1"/><text x="82.4362%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.1862%" y="389" width="0.0810%" height="15" fill="rgb(217,6,38)" fg:x="1015" fg:w="1"/><text x="82.4362%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.1862%" y="373" width="0.0810%" height="15" fill="rgb(229,229,48)" fg:x="1015" fg:w="1"/><text x="82.4362%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.1862%" y="357" width="0.0810%" height="15" fill="rgb(225,21,28)" fg:x="1015" fg:w="1"/><text x="82.4362%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="82.1053%" y="485" width="0.3239%" height="15" fill="rgb(206,33,13)" fg:x="1014" fg:w="4"/><text x="82.3553%" y="495.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="82.1862%" y="469" width="0.2429%" height="15" fill="rgb(242,178,17)" fg:x="1015" fg:w="3"/><text x="82.4362%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="82.1862%" y="453" width="0.2429%" height="15" fill="rgb(220,162,5)" fg:x="1015" fg:w="3"/><text x="82.4362%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="82.2672%" y="437" width="0.1619%" height="15" fill="rgb(210,33,43)" fg:x="1016" fg:w="2"/><text x="82.5172%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="82.2672%" y="421" width="0.1619%" height="15" fill="rgb(216,116,54)" fg:x="1016" fg:w="2"/><text x="82.5172%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="82.2672%" y="405" width="0.1619%" height="15" fill="rgb(249,92,24)" fg:x="1016" fg:w="2"/><text x="82.5172%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="82.2672%" y="389" width="0.1619%" height="15" fill="rgb(231,189,14)" fg:x="1016" fg:w="2"/><text x="82.5172%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.3482%" y="373" width="0.0810%" height="15" fill="rgb(230,8,41)" fg:x="1017" fg:w="1"/><text x="82.5982%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.3482%" y="357" width="0.0810%" height="15" fill="rgb(249,7,27)" fg:x="1017" fg:w="1"/><text x="82.5982%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.3482%" y="341" width="0.0810%" height="15" fill="rgb(232,86,5)" fg:x="1017" fg:w="1"/><text x="82.5982%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.3482%" y="325" width="0.0810%" height="15" fill="rgb(224,175,18)" fg:x="1017" fg:w="1"/><text x="82.5982%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.3482%" y="309" width="0.0810%" height="15" fill="rgb(220,129,12)" fg:x="1017" fg:w="1"/><text x="82.5982%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.3482%" y="293" width="0.0810%" height="15" fill="rgb(210,19,36)" fg:x="1017" fg:w="1"/><text x="82.5982%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="82.3482%" y="277" width="0.0810%" height="15" fill="rgb(219,96,14)" fg:x="1017" fg:w="1"/><text x="82.5982%" y="287.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="82.3482%" y="261" width="0.0810%" height="15" fill="rgb(249,106,1)" fg:x="1017" fg:w="1"/><text x="82.5982%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.3482%" y="245" width="0.0810%" height="15" fill="rgb(249,155,20)" fg:x="1017" fg:w="1"/><text x="82.5982%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.4291%" y="405" width="0.0810%" height="15" fill="rgb(244,168,9)" fg:x="1018" fg:w="1"/><text x="82.6791%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.4291%" y="389" width="0.0810%" height="15" fill="rgb(216,23,50)" fg:x="1018" fg:w="1"/><text x="82.6791%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.4291%" y="373" width="0.0810%" height="15" fill="rgb(224,219,20)" fg:x="1018" fg:w="1"/><text x="82.6791%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4291%" y="357" width="0.0810%" height="15" fill="rgb(222,156,15)" fg:x="1018" fg:w="1"/><text x="82.6791%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="82.5101%" y="405" width="0.0810%" height="15" fill="rgb(231,97,17)" fg:x="1019" fg:w="1"/><text x="82.7601%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.5101%" y="389" width="0.0810%" height="15" fill="rgb(218,70,48)" fg:x="1019" fg:w="1"/><text x="82.7601%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="82.5101%" y="373" width="0.0810%" height="15" fill="rgb(212,196,52)" fg:x="1019" fg:w="1"/><text x="82.7601%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="82.5101%" y="357" width="0.0810%" height="15" fill="rgb(243,203,18)" fg:x="1019" fg:w="1"/><text x="82.7601%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="82.5101%" y="341" width="0.0810%" height="15" fill="rgb(252,125,41)" fg:x="1019" fg:w="1"/><text x="82.7601%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="82.5101%" y="325" width="0.0810%" height="15" fill="rgb(223,180,33)" fg:x="1019" fg:w="1"/><text x="82.7601%" y="335.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="82.5911%" y="357" width="0.0810%" height="15" fill="rgb(254,159,46)" fg:x="1020" fg:w="1"/><text x="82.8411%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.13%)</title><rect x="82.7530%" y="341" width="1.1336%" height="15" fill="rgb(254,38,10)" fg:x="1022" fg:w="14"/><text x="83.0030%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.13%)</title><rect x="82.7530%" y="325" width="1.1336%" height="15" fill="rgb(208,217,32)" fg:x="1022" fg:w="14"/><text x="83.0030%" y="335.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="83.6437%" y="309" width="0.2429%" height="15" fill="rgb(221,120,13)" fg:x="1033" fg:w="3"/><text x="83.8937%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="83.8866%" y="325" width="0.2429%" height="15" fill="rgb(246,54,52)" fg:x="1036" fg:w="3"/><text x="84.1366%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="83.8866%" y="341" width="0.3239%" height="15" fill="rgb(242,34,25)" fg:x="1036" fg:w="4"/><text x="84.1366%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="84.1296%" y="325" width="0.0810%" height="15" fill="rgb(247,209,9)" fg:x="1039" fg:w="1"/><text x="84.3796%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="84.1296%" y="309" width="0.0810%" height="15" fill="rgb(228,71,26)" fg:x="1039" fg:w="1"/><text x="84.3796%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="84.1296%" y="293" width="0.0810%" height="15" fill="rgb(222,145,49)" fg:x="1039" fg:w="1"/><text x="84.3796%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.1296%" y="277" width="0.0810%" height="15" fill="rgb(218,121,17)" fg:x="1039" fg:w="1"/><text x="84.3796%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.1296%" y="261" width="0.0810%" height="15" fill="rgb(244,50,7)" fg:x="1039" fg:w="1"/><text x="84.3796%" y="271.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="84.2915%" y="277" width="0.0810%" height="15" fill="rgb(246,229,37)" fg:x="1041" fg:w="1"/><text x="84.5415%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.3725%" y="277" width="0.0810%" height="15" fill="rgb(225,18,5)" fg:x="1042" fg:w="1"/><text x="84.6225%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="84.4534%" y="261" width="0.1619%" height="15" fill="rgb(213,204,8)" fg:x="1043" fg:w="2"/><text x="84.7034%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="84.4534%" y="245" width="0.1619%" height="15" fill="rgb(238,103,6)" fg:x="1043" fg:w="2"/><text x="84.7034%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.5344%" y="229" width="0.0810%" height="15" fill="rgb(222,25,35)" fg:x="1044" fg:w="1"/><text x="84.7844%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.6154%" y="245" width="0.0810%" height="15" fill="rgb(213,203,35)" fg:x="1045" fg:w="1"/><text x="84.8654%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (48 samples, 3.89%)</title><rect x="84.4534%" y="277" width="3.8866%" height="15" fill="rgb(221,79,53)" fg:x="1043" fg:w="48"/><text x="84.7034%" y="287.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (46 samples, 3.72%)</title><rect x="84.6154%" y="261" width="3.7247%" height="15" fill="rgb(243,200,35)" fg:x="1045" fg:w="46"/><text x="84.8654%" y="271.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (45 samples, 3.64%)</title><rect x="84.6964%" y="245" width="3.6437%" height="15" fill="rgb(248,60,25)" fg:x="1046" fg:w="45"/><text x="84.9464%" y="255.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 4.21%)</title><rect x="84.2105%" y="325" width="4.2105%" height="15" fill="rgb(227,53,46)" fg:x="1040" fg:w="52"/><text x="84.4605%" y="335.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (51 samples, 4.13%)</title><rect x="84.2915%" y="309" width="4.1296%" height="15" fill="rgb(216,120,32)" fg:x="1041" fg:w="51"/><text x="84.5415%" y="319.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (51 samples, 4.13%)</title><rect x="84.2915%" y="293" width="4.1296%" height="15" fill="rgb(220,134,1)" fg:x="1041" fg:w="51"/><text x="84.5415%" y="303.50">rege..</text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="88.3401%" y="277" width="0.0810%" height="15" fill="rgb(237,168,5)" fg:x="1091" fg:w="1"/><text x="88.5901%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="88.4211%" y="309" width="0.1619%" height="15" fill="rgb(231,100,33)" fg:x="1092" fg:w="2"/><text x="88.6711%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.5020%" y="293" width="0.0810%" height="15" fill="rgb(236,177,47)" fg:x="1093" fg:w="1"/><text x="88.7520%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.5020%" y="277" width="0.0810%" height="15" fill="rgb(235,7,49)" fg:x="1093" fg:w="1"/><text x="88.7520%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.5020%" y="261" width="0.0810%" height="15" fill="rgb(232,119,22)" fg:x="1093" fg:w="1"/><text x="88.7520%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="88.4211%" y="325" width="0.3239%" height="15" fill="rgb(254,73,53)" fg:x="1092" fg:w="4"/><text x="88.6711%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="88.5830%" y="309" width="0.1619%" height="15" fill="rgb(251,35,20)" fg:x="1094" fg:w="2"/><text x="88.8330%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (76 samples, 6.15%)</title><rect x="82.6721%" y="357" width="6.1538%" height="15" fill="rgb(241,119,20)" fg:x="1021" fg:w="76"/><text x="82.9221%" y="367.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (57 samples, 4.62%)</title><rect x="84.2105%" y="341" width="4.6154%" height="15" fill="rgb(207,102,14)" fg:x="1040" fg:w="57"/><text x="84.4605%" y="351.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="88.7449%" y="325" width="0.0810%" height="15" fill="rgb(248,201,50)" fg:x="1096" fg:w="1"/><text x="88.9949%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="88.7449%" y="309" width="0.0810%" height="15" fill="rgb(222,185,44)" fg:x="1096" fg:w="1"/><text x="88.9949%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="88.8259%" y="309" width="0.0810%" height="15" fill="rgb(218,107,18)" fg:x="1097" fg:w="1"/><text x="89.0759%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="88.8259%" y="293" width="0.0810%" height="15" fill="rgb(237,177,39)" fg:x="1097" fg:w="1"/><text x="89.0759%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="88.8259%" y="357" width="0.1619%" height="15" fill="rgb(246,69,6)" fg:x="1097" fg:w="2"/><text x="89.0759%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="88.8259%" y="341" width="0.1619%" height="15" fill="rgb(234,208,37)" fg:x="1097" fg:w="2"/><text x="89.0759%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="88.8259%" y="325" width="0.1619%" height="15" fill="rgb(225,4,6)" fg:x="1097" fg:w="2"/><text x="89.0759%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="88.9069%" y="309" width="0.0810%" height="15" fill="rgb(233,45,0)" fg:x="1098" fg:w="1"/><text x="89.1569%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.9069%" y="293" width="0.0810%" height="15" fill="rgb(226,136,5)" fg:x="1098" fg:w="1"/><text x="89.1569%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.9069%" y="277" width="0.0810%" height="15" fill="rgb(211,91,47)" fg:x="1098" fg:w="1"/><text x="89.1569%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.9069%" y="261" width="0.0810%" height="15" fill="rgb(242,88,51)" fg:x="1098" fg:w="1"/><text x="89.1569%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="88.9879%" y="325" width="0.0810%" height="15" fill="rgb(230,91,28)" fg:x="1099" fg:w="1"/><text x="89.2379%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="88.9879%" y="309" width="0.0810%" height="15" fill="rgb(254,186,29)" fg:x="1099" fg:w="1"/><text x="89.2379%" y="319.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="88.9879%" y="293" width="0.0810%" height="15" fill="rgb(238,6,4)" fg:x="1099" fg:w="1"/><text x="89.2379%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (81 samples, 6.56%)</title><rect x="82.5911%" y="405" width="6.5587%" height="15" fill="rgb(221,151,16)" fg:x="1020" fg:w="81"/><text x="82.8411%" y="415.50">&lt;regex::r..</text></g><g><title>regex::builders::Builder::build_one_string (81 samples, 6.56%)</title><rect x="82.5911%" y="389" width="6.5587%" height="15" fill="rgb(251,143,52)" fg:x="1020" fg:w="81"/><text x="82.8411%" y="399.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (81 samples, 6.56%)</title><rect x="82.5911%" y="373" width="6.5587%" height="15" fill="rgb(206,90,15)" fg:x="1020" fg:w="81"/><text x="82.8411%" y="383.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="88.9879%" y="357" width="0.1619%" height="15" fill="rgb(218,35,8)" fg:x="1099" fg:w="2"/><text x="89.2379%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="88.9879%" y="341" width="0.1619%" height="15" fill="rgb(239,215,6)" fg:x="1099" fg:w="2"/><text x="89.2379%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="89.0688%" y="325" width="0.0810%" height="15" fill="rgb(245,116,39)" fg:x="1100" fg:w="1"/><text x="89.3188%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="89.1498%" y="405" width="0.0810%" height="15" fill="rgb(242,65,28)" fg:x="1101" fg:w="1"/><text x="89.3998%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="89.1498%" y="389" width="0.0810%" height="15" fill="rgb(252,132,53)" fg:x="1101" fg:w="1"/><text x="89.3998%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="89.1498%" y="373" width="0.0810%" height="15" fill="rgb(224,159,50)" fg:x="1101" fg:w="1"/><text x="89.3998%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="89.1498%" y="357" width="0.0810%" height="15" fill="rgb(224,93,4)" fg:x="1101" fg:w="1"/><text x="89.3998%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.1498%" y="341" width="0.0810%" height="15" fill="rgb(208,81,34)" fg:x="1101" fg:w="1"/><text x="89.3998%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.4737%" y="325" width="0.0810%" height="15" fill="rgb(233,92,54)" fg:x="1105" fg:w="1"/><text x="89.7237%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.4737%" y="309" width="0.0810%" height="15" fill="rgb(237,21,14)" fg:x="1105" fg:w="1"/><text x="89.7237%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="89.2308%" y="341" width="0.4049%" height="15" fill="rgb(249,128,51)" fg:x="1102" fg:w="5"/><text x="89.4808%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="89.5547%" y="325" width="0.0810%" height="15" fill="rgb(223,129,24)" fg:x="1106" fg:w="1"/><text x="89.8047%" y="335.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (91 samples, 7.37%)</title><rect x="82.4291%" y="421" width="7.3684%" height="15" fill="rgb(231,168,25)" fg:x="1018" fg:w="91"/><text x="82.6791%" y="431.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.57%)</title><rect x="89.2308%" y="405" width="0.5668%" height="15" fill="rgb(224,39,20)" fg:x="1102" fg:w="7"/><text x="89.4808%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.57%)</title><rect x="89.2308%" y="389" width="0.5668%" height="15" fill="rgb(225,152,53)" fg:x="1102" fg:w="7"/><text x="89.4808%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.57%)</title><rect x="89.2308%" y="373" width="0.5668%" height="15" fill="rgb(252,17,24)" fg:x="1102" fg:w="7"/><text x="89.4808%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="89.2308%" y="357" width="0.5668%" height="15" fill="rgb(250,114,30)" fg:x="1102" fg:w="7"/><text x="89.4808%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="89.6356%" y="341" width="0.1619%" height="15" fill="rgb(229,5,4)" fg:x="1107" fg:w="2"/><text x="89.8856%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="89.6356%" y="325" width="0.1619%" height="15" fill="rgb(225,176,49)" fg:x="1107" fg:w="2"/><text x="89.8856%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.6356%" y="309" width="0.1619%" height="15" fill="rgb(224,221,49)" fg:x="1107" fg:w="2"/><text x="89.8856%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.7166%" y="293" width="0.0810%" height="15" fill="rgb(253,169,27)" fg:x="1108" fg:w="1"/><text x="89.9666%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.8785%" y="357" width="0.0810%" height="15" fill="rgb(211,206,16)" fg:x="1110" fg:w="1"/><text x="90.1285%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.8785%" y="341" width="0.0810%" height="15" fill="rgb(244,87,35)" fg:x="1110" fg:w="1"/><text x="90.1285%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.8785%" y="325" width="0.0810%" height="15" fill="rgb(246,28,10)" fg:x="1110" fg:w="1"/><text x="90.1285%" y="335.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="89.9595%" y="357" width="0.0810%" height="15" fill="rgb(229,12,44)" fg:x="1111" fg:w="1"/><text x="90.2095%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.57%)</title><rect x="90.0405%" y="341" width="0.5668%" height="15" fill="rgb(210,145,37)" fg:x="1112" fg:w="7"/><text x="90.2905%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.57%)</title><rect x="90.0405%" y="325" width="0.5668%" height="15" fill="rgb(227,112,52)" fg:x="1112" fg:w="7"/><text x="90.2905%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="90.6073%" y="325" width="0.0810%" height="15" fill="rgb(238,155,34)" fg:x="1119" fg:w="1"/><text x="90.8573%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="90.6073%" y="309" width="0.0810%" height="15" fill="rgb(239,226,36)" fg:x="1119" fg:w="1"/><text x="90.8573%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="90.6073%" y="341" width="0.1619%" height="15" fill="rgb(230,16,23)" fg:x="1119" fg:w="2"/><text x="90.8573%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="90.6883%" y="325" width="0.0810%" height="15" fill="rgb(236,171,36)" fg:x="1120" fg:w="1"/><text x="90.9383%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="90.9312%" y="293" width="0.0810%" height="15" fill="rgb(221,22,14)" fg:x="1123" fg:w="1"/><text x="91.1812%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="90.9312%" y="277" width="0.0810%" height="15" fill="rgb(242,43,11)" fg:x="1123" fg:w="1"/><text x="91.1812%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.32%)</title><rect x="90.7692%" y="341" width="0.3239%" height="15" fill="rgb(232,69,23)" fg:x="1121" fg:w="4"/><text x="91.0192%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="90.8502%" y="325" width="0.2429%" height="15" fill="rgb(216,180,54)" fg:x="1122" fg:w="3"/><text x="91.1002%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="90.9312%" y="309" width="0.1619%" height="15" fill="rgb(216,5,24)" fg:x="1123" fg:w="2"/><text x="91.1812%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="91.0121%" y="293" width="0.0810%" height="15" fill="rgb(225,89,9)" fg:x="1124" fg:w="1"/><text x="91.2621%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="91.1741%" y="245" width="0.0810%" height="15" fill="rgb(243,75,33)" fg:x="1126" fg:w="1"/><text x="91.4241%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="91.8219%" y="229" width="0.0810%" height="15" fill="rgb(247,141,45)" fg:x="1134" fg:w="1"/><text x="92.0719%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="91.9028%" y="229" width="0.1619%" height="15" fill="rgb(232,177,36)" fg:x="1135" fg:w="2"/><text x="92.1528%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.9838%" y="213" width="0.0810%" height="15" fill="rgb(219,125,36)" fg:x="1136" fg:w="1"/><text x="92.2338%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.9838%" y="197" width="0.0810%" height="15" fill="rgb(227,94,9)" fg:x="1136" fg:w="1"/><text x="92.2338%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.9838%" y="181" width="0.0810%" height="15" fill="rgb(240,34,52)" fg:x="1136" fg:w="1"/><text x="92.2338%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="92.0648%" y="229" width="0.0810%" height="15" fill="rgb(216,45,12)" fg:x="1137" fg:w="1"/><text x="92.3148%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="92.3077%" y="197" width="0.1619%" height="15" fill="rgb(246,21,19)" fg:x="1140" fg:w="2"/><text x="92.5577%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.3887%" y="181" width="0.0810%" height="15" fill="rgb(213,98,42)" fg:x="1141" fg:w="1"/><text x="92.6387%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.3887%" y="165" width="0.0810%" height="15" fill="rgb(250,136,47)" fg:x="1141" fg:w="1"/><text x="92.6387%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.73%)</title><rect x="92.1457%" y="229" width="0.7287%" height="15" fill="rgb(251,124,27)" fg:x="1138" fg:w="9"/><text x="92.3957%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.65%)</title><rect x="92.2267%" y="213" width="0.6478%" height="15" fill="rgb(229,180,14)" fg:x="1139" fg:w="8"/><text x="92.4767%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="92.4696%" y="197" width="0.4049%" height="15" fill="rgb(245,216,25)" fg:x="1142" fg:w="5"/><text x="92.7196%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="92.7935%" y="181" width="0.0810%" height="15" fill="rgb(251,43,5)" fg:x="1146" fg:w="1"/><text x="93.0435%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.7935%" y="165" width="0.0810%" height="15" fill="rgb(250,128,24)" fg:x="1146" fg:w="1"/><text x="93.0435%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.7935%" y="149" width="0.0810%" height="15" fill="rgb(217,117,27)" fg:x="1146" fg:w="1"/><text x="93.0435%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.7935%" y="133" width="0.0810%" height="15" fill="rgb(245,147,4)" fg:x="1146" fg:w="1"/><text x="93.0435%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (46 samples, 3.72%)</title><rect x="92.8745%" y="229" width="3.7247%" height="15" fill="rgb(242,201,35)" fg:x="1147" fg:w="46"/><text x="93.1245%" y="239.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (46 samples, 3.72%)</title><rect x="92.8745%" y="213" width="3.7247%" height="15" fill="rgb(218,181,1)" fg:x="1147" fg:w="46"/><text x="93.1245%" y="223.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (45 samples, 3.64%)</title><rect x="92.9555%" y="197" width="3.6437%" height="15" fill="rgb(222,6,29)" fg:x="1148" fg:w="45"/><text x="93.2055%" y="207.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="96.5992%" y="229" width="0.1619%" height="15" fill="rgb(208,186,3)" fg:x="1193" fg:w="2"/><text x="96.8492%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.6802%" y="213" width="0.0810%" height="15" fill="rgb(216,36,26)" fg:x="1194" fg:w="1"/><text x="96.9302%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 5.75%)</title><rect x="91.0931%" y="325" width="5.7490%" height="15" fill="rgb(248,201,23)" fg:x="1125" fg:w="71"/><text x="91.3431%" y="335.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (71 samples, 5.75%)</title><rect x="91.0931%" y="309" width="5.7490%" height="15" fill="rgb(251,170,31)" fg:x="1125" fg:w="71"/><text x="91.3431%" y="319.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.75%)</title><rect x="91.0931%" y="293" width="5.7490%" height="15" fill="rgb(207,110,25)" fg:x="1125" fg:w="71"/><text x="91.3431%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (71 samples, 5.75%)</title><rect x="91.0931%" y="277" width="5.7490%" height="15" fill="rgb(250,54,15)" fg:x="1125" fg:w="71"/><text x="91.3431%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (71 samples, 5.75%)</title><rect x="91.0931%" y="261" width="5.7490%" height="15" fill="rgb(227,68,33)" fg:x="1125" fg:w="71"/><text x="91.3431%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (69 samples, 5.59%)</title><rect x="91.2551%" y="245" width="5.5870%" height="15" fill="rgb(238,34,41)" fg:x="1127" fg:w="69"/><text x="91.5051%" y="255.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="96.7611%" y="229" width="0.0810%" height="15" fill="rgb(220,11,15)" fg:x="1195" fg:w="1"/><text x="97.0111%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.7611%" y="213" width="0.0810%" height="15" fill="rgb(246,111,35)" fg:x="1195" fg:w="1"/><text x="97.0111%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.7611%" y="197" width="0.0810%" height="15" fill="rgb(209,88,53)" fg:x="1195" fg:w="1"/><text x="97.0111%" y="207.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="96.7611%" y="181" width="0.0810%" height="15" fill="rgb(231,185,47)" fg:x="1195" fg:w="1"/><text x="97.0111%" y="191.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="96.7611%" y="165" width="0.0810%" height="15" fill="rgb(233,154,1)" fg:x="1195" fg:w="1"/><text x="97.0111%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="96.8421%" y="309" width="0.2429%" height="15" fill="rgb(225,15,46)" fg:x="1196" fg:w="3"/><text x="97.0921%" y="319.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="97.0040%" y="293" width="0.0810%" height="15" fill="rgb(211,135,41)" fg:x="1198" fg:w="1"/><text x="97.2540%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (88 samples, 7.13%)</title><rect x="90.0405%" y="357" width="7.1255%" height="15" fill="rgb(208,54,0)" fg:x="1112" fg:w="88"/><text x="90.2905%" y="367.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (75 samples, 6.07%)</title><rect x="91.0931%" y="341" width="6.0729%" height="15" fill="rgb(244,136,14)" fg:x="1125" fg:w="75"/><text x="91.3431%" y="351.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="96.8421%" y="325" width="0.3239%" height="15" fill="rgb(241,56,14)" fg:x="1196" fg:w="4"/><text x="97.0921%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="97.0850%" y="309" width="0.0810%" height="15" fill="rgb(205,80,24)" fg:x="1199" fg:w="1"/><text x="97.3350%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1660%" y="293" width="0.0810%" height="15" fill="rgb(220,57,4)" fg:x="1200" fg:w="1"/><text x="97.4160%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1660%" y="277" width="0.0810%" height="15" fill="rgb(226,193,50)" fg:x="1200" fg:w="1"/><text x="97.4160%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1660%" y="261" width="0.0810%" height="15" fill="rgb(231,168,22)" fg:x="1200" fg:w="1"/><text x="97.4160%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="97.1660%" y="325" width="0.1619%" height="15" fill="rgb(254,215,14)" fg:x="1200" fg:w="2"/><text x="97.4160%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="97.1660%" y="309" width="0.1619%" height="15" fill="rgb(211,115,16)" fg:x="1200" fg:w="2"/><text x="97.4160%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="97.2470%" y="293" width="0.0810%" height="15" fill="rgb(236,210,16)" fg:x="1201" fg:w="1"/><text x="97.4970%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="97.1660%" y="357" width="0.2429%" height="15" fill="rgb(221,94,12)" fg:x="1200" fg:w="3"/><text x="97.4160%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="97.1660%" y="341" width="0.2429%" height="15" fill="rgb(235,218,49)" fg:x="1200" fg:w="3"/><text x="97.4160%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="97.3279%" y="325" width="0.0810%" height="15" fill="rgb(217,114,14)" fg:x="1202" fg:w="1"/><text x="97.5779%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.3279%" y="309" width="0.0810%" height="15" fill="rgb(216,145,22)" fg:x="1202" fg:w="1"/><text x="97.5779%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.3279%" y="293" width="0.0810%" height="15" fill="rgb(217,112,39)" fg:x="1202" fg:w="1"/><text x="97.5779%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (94 samples, 7.61%)</title><rect x="89.8785%" y="373" width="7.6113%" height="15" fill="rgb(225,85,32)" fg:x="1110" fg:w="94"/><text x="90.1285%" y="383.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.4089%" y="357" width="0.0810%" height="15" fill="rgb(245,209,47)" fg:x="1203" fg:w="1"/><text x="97.6589%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.4089%" y="341" width="0.0810%" height="15" fill="rgb(218,220,15)" fg:x="1203" fg:w="1"/><text x="97.6589%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.4089%" y="325" width="0.0810%" height="15" fill="rgb(222,202,31)" fg:x="1203" fg:w="1"/><text x="97.6589%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.4089%" y="309" width="0.0810%" height="15" fill="rgb(243,203,4)" fg:x="1203" fg:w="1"/><text x="97.6589%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.4089%" y="293" width="0.0810%" height="15" fill="rgb(237,92,17)" fg:x="1203" fg:w="1"/><text x="97.6589%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.4089%" y="277" width="0.0810%" height="15" fill="rgb(231,119,7)" fg:x="1203" fg:w="1"/><text x="97.6589%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (96 samples, 7.77%)</title><rect x="89.7976%" y="405" width="7.7733%" height="15" fill="rgb(237,82,41)" fg:x="1109" fg:w="96"/><text x="90.0476%" y="415.50">&lt;regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (95 samples, 7.69%)</title><rect x="89.8785%" y="389" width="7.6923%" height="15" fill="rgb(226,81,48)" fg:x="1110" fg:w="95"/><text x="90.1285%" y="399.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="97.4899%" y="373" width="0.0810%" height="15" fill="rgb(234,70,51)" fg:x="1204" fg:w="1"/><text x="97.7399%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="97.5709%" y="357" width="0.0810%" height="15" fill="rgb(251,86,4)" fg:x="1205" fg:w="1"/><text x="97.8209%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5709%" y="341" width="0.0810%" height="15" fill="rgb(244,144,28)" fg:x="1205" fg:w="1"/><text x="97.8209%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="97.5709%" y="405" width="0.1619%" height="15" fill="rgb(232,161,39)" fg:x="1205" fg:w="2"/><text x="97.8209%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="97.5709%" y="389" width="0.1619%" height="15" fill="rgb(247,34,51)" fg:x="1205" fg:w="2"/><text x="97.8209%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="97.5709%" y="373" width="0.1619%" height="15" fill="rgb(225,132,2)" fg:x="1205" fg:w="2"/><text x="97.8209%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="97.6518%" y="357" width="0.0810%" height="15" fill="rgb(209,159,44)" fg:x="1206" fg:w="1"/><text x="97.9018%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6518%" y="341" width="0.0810%" height="15" fill="rgb(251,214,1)" fg:x="1206" fg:w="1"/><text x="97.9018%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="97.7328%" y="389" width="0.0810%" height="15" fill="rgb(247,84,47)" fg:x="1207" fg:w="1"/><text x="97.9828%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="97.7328%" y="373" width="0.0810%" height="15" fill="rgb(240,111,43)" fg:x="1207" fg:w="1"/><text x="97.9828%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="97.7328%" y="357" width="0.0810%" height="15" fill="rgb(215,214,35)" fg:x="1207" fg:w="1"/><text x="97.9828%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="97.7328%" y="341" width="0.0810%" height="15" fill="rgb(248,207,23)" fg:x="1207" fg:w="1"/><text x="97.9828%" y="351.50"></text></g><g><title>indefinite::rules::number::Number::check (102 samples, 8.26%)</title><rect x="89.7976%" y="421" width="8.2591%" height="15" fill="rgb(214,186,4)" fg:x="1109" fg:w="102"/><text x="90.0476%" y="431.50">indefinite:..</text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="97.7328%" y="405" width="0.3239%" height="15" fill="rgb(220,133,22)" fg:x="1207" fg:w="4"/><text x="97.9828%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="97.8138%" y="389" width="0.2429%" height="15" fill="rgb(239,134,19)" fg:x="1208" fg:w="3"/><text x="98.0638%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="97.8138%" y="373" width="0.2429%" height="15" fill="rgb(250,140,9)" fg:x="1208" fg:w="3"/><text x="98.0638%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="97.8138%" y="357" width="0.2429%" height="15" fill="rgb(225,59,14)" fg:x="1208" fg:w="3"/><text x="98.0638%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="97.8138%" y="341" width="0.2429%" height="15" fill="rgb(214,152,51)" fg:x="1208" fg:w="3"/><text x="98.0638%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="97.8138%" y="325" width="0.2429%" height="15" fill="rgb(251,227,43)" fg:x="1208" fg:w="3"/><text x="98.0638%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="97.9757%" y="309" width="0.0810%" height="15" fill="rgb(241,96,17)" fg:x="1210" fg:w="1"/><text x="98.2257%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.0567%" y="373" width="0.0810%" height="15" fill="rgb(234,198,43)" fg:x="1211" fg:w="1"/><text x="98.3067%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="98.1377%" y="341" width="0.1619%" height="15" fill="rgb(220,108,29)" fg:x="1212" fg:w="2"/><text x="98.3877%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="98.1377%" y="325" width="0.1619%" height="15" fill="rgb(226,163,33)" fg:x="1212" fg:w="2"/><text x="98.3877%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="98.2186%" y="309" width="0.0810%" height="15" fill="rgb(205,194,45)" fg:x="1213" fg:w="1"/><text x="98.4686%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.2186%" y="293" width="0.0810%" height="15" fill="rgb(206,143,44)" fg:x="1213" fg:w="1"/><text x="98.4686%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="98.4615%" y="325" width="0.0810%" height="15" fill="rgb(236,136,36)" fg:x="1216" fg:w="1"/><text x="98.7115%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="98.4615%" y="309" width="0.0810%" height="15" fill="rgb(249,172,42)" fg:x="1216" fg:w="1"/><text x="98.7115%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="98.5425%" y="293" width="0.1619%" height="15" fill="rgb(216,139,23)" fg:x="1217" fg:w="2"/><text x="98.7925%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="98.5425%" y="325" width="0.2429%" height="15" fill="rgb(207,166,20)" fg:x="1217" fg:w="3"/><text x="98.7925%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="98.5425%" y="309" width="0.2429%" height="15" fill="rgb(210,209,22)" fg:x="1217" fg:w="3"/><text x="98.7925%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="98.7045%" y="293" width="0.0810%" height="15" fill="rgb(232,118,20)" fg:x="1219" fg:w="1"/><text x="98.9545%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.57%)</title><rect x="98.2996%" y="341" width="0.5668%" height="15" fill="rgb(238,113,42)" fg:x="1214" fg:w="7"/><text x="98.5496%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="98.7854%" y="325" width="0.0810%" height="15" fill="rgb(231,42,5)" fg:x="1220" fg:w="1"/><text x="99.0354%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="98.7854%" y="309" width="0.0810%" height="15" fill="rgb(243,166,24)" fg:x="1220" fg:w="1"/><text x="99.0354%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="98.7854%" y="293" width="0.0810%" height="15" fill="rgb(237,226,12)" fg:x="1220" fg:w="1"/><text x="99.0354%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.7854%" y="277" width="0.0810%" height="15" fill="rgb(229,133,24)" fg:x="1220" fg:w="1"/><text x="99.0354%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.7854%" y="261" width="0.0810%" height="15" fill="rgb(238,33,43)" fg:x="1220" fg:w="1"/><text x="99.0354%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7854%" y="245" width="0.0810%" height="15" fill="rgb(227,59,38)" fg:x="1220" fg:w="1"/><text x="99.0354%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="98.9474%" y="293" width="0.0810%" height="15" fill="rgb(230,97,0)" fg:x="1222" fg:w="1"/><text x="99.1974%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="99.0283%" y="293" width="0.0810%" height="15" fill="rgb(250,173,50)" fg:x="1223" fg:w="1"/><text x="99.2783%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="99.0283%" y="277" width="0.0810%" height="15" fill="rgb(240,15,50)" fg:x="1223" fg:w="1"/><text x="99.2783%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="98.8664%" y="341" width="0.3239%" height="15" fill="rgb(221,93,22)" fg:x="1221" fg:w="4"/><text x="99.1164%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="98.8664%" y="325" width="0.3239%" height="15" fill="rgb(245,180,53)" fg:x="1221" fg:w="4"/><text x="99.1164%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="98.8664%" y="309" width="0.3239%" height="15" fill="rgb(231,88,51)" fg:x="1221" fg:w="4"/><text x="99.1164%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="99.1093%" y="293" width="0.0810%" height="15" fill="rgb(240,58,21)" fg:x="1224" fg:w="1"/><text x="99.3593%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.1093%" y="277" width="0.0810%" height="15" fill="rgb(237,21,10)" fg:x="1224" fg:w="1"/><text x="99.3593%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.1093%" y="261" width="0.0810%" height="15" fill="rgb(218,43,11)" fg:x="1224" fg:w="1"/><text x="99.3593%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1093%" y="245" width="0.0810%" height="15" fill="rgb(218,221,29)" fg:x="1224" fg:w="1"/><text x="99.3593%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.2713%" y="277" width="0.0810%" height="15" fill="rgb(214,118,42)" fg:x="1226" fg:w="1"/><text x="99.5213%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.2713%" y="261" width="0.0810%" height="15" fill="rgb(251,200,26)" fg:x="1226" fg:w="1"/><text x="99.5213%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.2713%" y="245" width="0.0810%" height="15" fill="rgb(237,101,39)" fg:x="1226" fg:w="1"/><text x="99.5213%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="99.1903%" y="309" width="0.2429%" height="15" fill="rgb(251,117,11)" fg:x="1225" fg:w="3"/><text x="99.4403%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="99.1903%" y="293" width="0.2429%" height="15" fill="rgb(216,223,23)" fg:x="1225" fg:w="3"/><text x="99.4403%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge_sort::RunVec&lt;alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}},alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}}&gt;&gt; (1 samples, 0.08%)</title><rect x="99.3522%" y="277" width="0.0810%" height="15" fill="rgb(251,54,12)" fg:x="1227" fg:w="1"/><text x="99.6022%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (18 samples, 1.46%)</title><rect x="98.0567%" y="389" width="1.4575%" height="15" fill="rgb(254,176,54)" fg:x="1211" fg:w="18"/><text x="98.3067%" y="399.50"></text></g><g><title>regex::builders::Builder::build_one_string (17 samples, 1.38%)</title><rect x="98.1377%" y="373" width="1.3765%" height="15" fill="rgb(210,32,8)" fg:x="1212" fg:w="17"/><text x="98.3877%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (17 samples, 1.38%)</title><rect x="98.1377%" y="357" width="1.3765%" height="15" fill="rgb(235,52,38)" fg:x="1212" fg:w="17"/><text x="98.3877%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="99.1903%" y="341" width="0.3239%" height="15" fill="rgb(231,4,44)" fg:x="1225" fg:w="4"/><text x="99.4403%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="99.1903%" y="325" width="0.3239%" height="15" fill="rgb(249,2,32)" fg:x="1225" fg:w="4"/><text x="99.4403%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="99.4332%" y="309" width="0.0810%" height="15" fill="rgb(224,65,26)" fg:x="1228" fg:w="1"/><text x="99.6832%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="99.5142%" y="389" width="0.0810%" height="15" fill="rgb(250,73,40)" fg:x="1229" fg:w="1"/><text x="99.7642%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="99.5142%" y="373" width="0.0810%" height="15" fill="rgb(253,177,16)" fg:x="1229" fg:w="1"/><text x="99.7642%" y="383.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (217 samples, 17.57%)</title><rect x="82.1053%" y="501" width="17.5709%" height="15" fill="rgb(217,32,34)" fg:x="1014" fg:w="217"/><text x="82.3553%" y="511.50">&lt;&amp;kernel::model::entry::Ent..</text></g><g><title>plugins_core::looking::model::qualify_name (213 samples, 17.25%)</title><rect x="82.4291%" y="485" width="17.2470%" height="15" fill="rgb(212,7,10)" fg:x="1018" fg:w="213"/><text x="82.6791%" y="495.50">plugins_core::looking::mode..</text></g><g><title>indefinite::indefinite (213 samples, 17.25%)</title><rect x="82.4291%" y="469" width="17.2470%" height="15" fill="rgb(245,89,8)" fg:x="1018" fg:w="213"/><text x="82.6791%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (213 samples, 17.25%)</title><rect x="82.4291%" y="453" width="17.2470%" height="15" fill="rgb(237,16,53)" fg:x="1018" fg:w="213"/><text x="82.6791%" y="463.50">indefinite::methods::indefi..</text></g><g><title>indefinite::methods::apply_rules (213 samples, 17.25%)</title><rect x="82.4291%" y="437" width="17.2470%" height="15" fill="rgb(250,204,30)" fg:x="1018" fg:w="213"/><text x="82.6791%" y="447.50">indefinite::methods::apply_..</text></g><g><title>indefinite::rules::other::Other::run (20 samples, 1.62%)</title><rect x="98.0567%" y="421" width="1.6194%" height="15" fill="rgb(208,77,27)" fg:x="1211" fg:w="20"/><text x="98.3067%" y="431.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (20 samples, 1.62%)</title><rect x="98.0567%" y="405" width="1.6194%" height="15" fill="rgb(250,204,28)" fg:x="1211" fg:w="20"/><text x="98.3067%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="99.5951%" y="389" width="0.0810%" height="15" fill="rgb(244,63,21)" fg:x="1230" fg:w="1"/><text x="99.8451%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="99.5951%" y="373" width="0.0810%" height="15" fill="rgb(236,85,44)" fg:x="1230" fg:w="1"/><text x="99.8451%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="99.5951%" y="357" width="0.0810%" height="15" fill="rgb(215,98,4)" fg:x="1230" fg:w="1"/><text x="99.8451%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="99.5951%" y="341" width="0.0810%" height="15" fill="rgb(235,38,11)" fg:x="1230" fg:w="1"/><text x="99.8451%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="99.5951%" y="325" width="0.0810%" height="15" fill="rgb(254,186,25)" fg:x="1230" fg:w="1"/><text x="99.8451%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.5951%" y="309" width="0.0810%" height="15" fill="rgb(225,55,31)" fg:x="1230" fg:w="1"/><text x="99.8451%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.5951%" y="293" width="0.0810%" height="15" fill="rgb(211,15,21)" fg:x="1230" fg:w="1"/><text x="99.8451%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.5951%" y="277" width="0.0810%" height="15" fill="rgb(215,187,41)" fg:x="1230" fg:w="1"/><text x="99.8451%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (246 samples, 19.92%)</title><rect x="79.9190%" y="677" width="19.9190%" height="15" fill="rgb(248,69,32)" fg:x="987" fg:w="246"/><text x="80.1690%" y="687.50">&lt;engine::session::Session as ke..</text></g><g><title>kernel::plugins::mw::apply_middleware (219 samples, 17.73%)</title><rect x="82.1053%" y="661" width="17.7328%" height="15" fill="rgb(252,102,52)" fg:x="1014" fg:w="219"/><text x="82.3553%" y="671.50">kernel::plugins::mw::apply_m..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (219 samples, 17.73%)</title><rect x="82.1053%" y="645" width="17.7328%" height="15" fill="rgb(253,140,32)" fg:x="1014" fg:w="219"/><text x="82.3553%" y="655.50">kernel::plugins::mw::Middlew..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (219 samples, 17.73%)</title><rect x="82.1053%" y="629" width="17.7328%" height="15" fill="rgb(216,56,42)" fg:x="1014" fg:w="219"/><text x="82.3553%" y="639.50">&lt;plugins_dynlib::DynamicMidd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (219 samples, 17.73%)</title><rect x="82.1053%" y="613" width="17.7328%" height="15" fill="rgb(216,184,14)" fg:x="1014" fg:w="219"/><text x="82.3553%" y="623.50">kernel::plugins::mw::Middlew..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (219 samples, 17.73%)</title><rect x="82.1053%" y="597" width="17.7328%" height="15" fill="rgb(237,187,27)" fg:x="1014" fg:w="219"/><text x="82.3553%" y="607.50">core::ops::function::FnOnce:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (219 samples, 17.73%)</title><rect x="82.1053%" y="581" width="17.7328%" height="15" fill="rgb(219,65,3)" fg:x="1014" fg:w="219"/><text x="82.3553%" y="591.50">kernel::plugins::mw::Middlew..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (219 samples, 17.73%)</title><rect x="82.1053%" y="565" width="17.7328%" height="15" fill="rgb(245,83,25)" fg:x="1014" fg:w="219"/><text x="82.3553%" y="575.50">core::ops::function::FnOnce:..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (219 samples, 17.73%)</title><rect x="82.1053%" y="549" width="17.7328%" height="15" fill="rgb(214,205,45)" fg:x="1014" fg:w="219"/><text x="82.3553%" y="559.50">&lt;engine::session::state::Sta..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (219 samples, 17.73%)</title><rect x="82.1053%" y="533" width="17.7328%" height="15" fill="rgb(241,20,18)" fg:x="1014" fg:w="219"/><text x="82.3553%" y="543.50">&lt;plugins_core::looking::acti..</text></g><g><title>plugins_core::looking::model::new_area_observation (219 samples, 17.73%)</title><rect x="82.1053%" y="517" width="17.7328%" height="15" fill="rgb(232,163,23)" fg:x="1014" fg:w="219"/><text x="82.3553%" y="527.50">plugins_core::looking::model..</text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="99.6761%" y="501" width="0.1619%" height="15" fill="rgb(214,5,46)" fg:x="1231" fg:w="2"/><text x="99.9261%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.7571%" y="485" width="0.0810%" height="15" fill="rgb(229,78,17)" fg:x="1232" fg:w="1"/><text x="100.0071%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="99.7571%" y="469" width="0.0810%" height="15" fill="rgb(248,89,10)" fg:x="1232" fg:w="1"/><text x="100.0071%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="99.7571%" y="453" width="0.0810%" height="15" fill="rgb(248,54,15)" fg:x="1232" fg:w="1"/><text x="100.0071%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.7571%" y="437" width="0.0810%" height="15" fill="rgb(223,116,6)" fg:x="1232" fg:w="1"/><text x="100.0071%" y="447.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (247 samples, 20.00%)</title><rect x="79.9190%" y="693" width="20.0000%" height="15" fill="rgb(205,125,38)" fg:x="987" fg:w="247"/><text x="80.1690%" y="703.50">engine::session::Session::evalu..</text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.8381%" y="677" width="0.0810%" height="15" fill="rgb(251,78,38)" fg:x="1233" fg:w="1"/><text x="100.0881%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="99.8381%" y="661" width="0.0810%" height="15" fill="rgb(253,78,28)" fg:x="1233" fg:w="1"/><text x="100.0881%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.8381%" y="645" width="0.0810%" height="15" fill="rgb(209,120,3)" fg:x="1233" fg:w="1"/><text x="100.0881%" y="655.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.8381%" y="629" width="0.0810%" height="15" fill="rgb(238,229,9)" fg:x="1233" fg:w="1"/><text x="100.0881%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.8381%" y="613" width="0.0810%" height="15" fill="rgb(253,159,18)" fg:x="1233" fg:w="1"/><text x="100.0881%" y="623.50"></text></g><g><title>all (1,235 samples, 100%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(244,42,34)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="1055.50"></text></g><g><title>simple-484c7248 (1,235 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(224,8,7)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="1039.50">simple-484c7248</text></g><g><title>_start (1,235 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(210,201,45)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="1023.50">_start</text></g><g><title>__libc_start_main (1,235 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(252,185,21)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="1007.50">__libc_start_main</text></g><g><title>main (1,235 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(223,131,1)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="991.50">main</text></g><g><title>std::rt::lang_start_internal (1,235 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(245,141,16)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="975.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,235 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(229,55,45)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,235 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(208,92,15)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,235 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(234,185,47)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="927.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,235 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(253,104,50)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="911.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,235 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(205,70,7)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,235 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(240,178,43)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,235 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(214,112,2)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="863.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,235 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(206,46,17)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="847.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,235 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(225,220,16)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="831.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,235 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(238,65,40)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="815.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,235 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(230,151,21)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="799.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,235 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(218,58,49)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="783.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,235 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(219,179,14)" fg:x="0" fg:w="1235"/><text x="0.2500%" y="767.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (293 samples, 23.72%)</title><rect x="76.2753%" y="741" width="23.7247%" height="15" fill="rgb(223,72,1)" fg:x="942" fg:w="293"/><text x="76.5253%" y="751.50">&lt;criterion::routine::Function&lt;M,F,T&gt; a..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (293 samples, 23.72%)</title><rect x="76.2753%" y="725" width="23.7247%" height="15" fill="rgb(238,126,10)" fg:x="942" fg:w="293"/><text x="76.5253%" y="735.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (293 samples, 23.72%)</title><rect x="76.2753%" y="709" width="23.7247%" height="15" fill="rgb(224,206,38)" fg:x="942" fg:w="293"/><text x="76.5253%" y="719.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9190%" y="693" width="0.0810%" height="15" fill="rgb(212,201,54)" fg:x="1234" fg:w="1"/><text x="100.1690%" y="703.50"></text></g></svg></svg>