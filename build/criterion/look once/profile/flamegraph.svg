<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="1226"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0000%" y="533" width="0.0816%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="517" width="0.0816%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="501" width="0.0816%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3263%" y="373" width="0.0816%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.5763%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="0.0816%" y="469" width="0.4894%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="6"/><text x="0.3316%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="0.2447%" y="453" width="0.3263%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="4"/><text x="0.4947%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="0.2447%" y="437" width="0.3263%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="4"/><text x="0.4947%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="0.2447%" y="421" width="0.3263%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="4"/><text x="0.4947%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.3263%" y="405" width="0.2447%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="3"/><text x="0.5763%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="0.3263%" y="389" width="0.2447%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="3"/><text x="0.5763%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.4078%" y="373" width="0.1631%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="2"/><text x="0.6578%" y="383.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="0.0000%" y="549" width="0.6525%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="8"/><text x="0.2500%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (7 samples, 0.57%)</title><rect x="0.0816%" y="533" width="0.5710%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="7"/><text x="0.3316%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="0.0816%" y="517" width="0.5710%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="7"/><text x="0.3316%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (7 samples, 0.57%)</title><rect x="0.0816%" y="501" width="0.5710%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="7"/><text x="0.3316%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="0.0816%" y="485" width="0.5710%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="7"/><text x="0.3316%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5710%" y="469" width="0.0816%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="1"/><text x="0.8210%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="0.7341%" y="469" width="0.0816%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="1"/><text x="0.9841%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="0.7341%" y="453" width="0.0816%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="1"/><text x="0.9841%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.7341%" y="437" width="0.0816%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="1"/><text x="0.9841%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7341%" y="421" width="0.0816%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="1"/><text x="0.9841%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.7341%" y="405" width="0.0816%" height="15" fill="rgb(235,183,28)" fg:x="9" fg:w="1"/><text x="0.9841%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7341%" y="389" width="0.0816%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="1"/><text x="0.9841%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.33%)</title><rect x="0.6525%" y="517" width="0.3263%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="4"/><text x="0.9025%" y="527.50"></text></g><g><title>engine::internal::Entities::prepare_entity (4 samples, 0.33%)</title><rect x="0.6525%" y="501" width="0.3263%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="4"/><text x="0.9025%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="0.7341%" y="485" width="0.2447%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="3"/><text x="0.9841%" y="495.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="0.8157%" y="469" width="0.1631%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="2"/><text x="1.0657%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.8157%" y="453" width="0.1631%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="2"/><text x="1.0657%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.8157%" y="437" width="0.1631%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="2"/><text x="1.0657%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8972%" y="421" width="0.0816%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="1"/><text x="1.1472%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.8972%" y="405" width="0.0816%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="1"/><text x="1.1472%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8972%" y="389" width="0.0816%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="1"/><text x="1.1472%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.8972%" y="373" width="0.0816%" height="15" fill="rgb(213,181,19)" fg:x="11" fg:w="1"/><text x="1.1472%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.8972%" y="357" width="0.0816%" height="15" fill="rgb(254,191,54)" fg:x="11" fg:w="1"/><text x="1.1472%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="0.8972%" y="341" width="0.0816%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="1"/><text x="1.1472%" y="351.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="0.9788%" y="517" width="0.0816%" height="15" fill="rgb(233,36,39)" fg:x="12" fg:w="1"/><text x="1.2288%" y="527.50"></text></g><g><title>&lt;alloc::ffi::c_str::CString as core::convert::From&lt;&amp;core::ffi::c_str::CStr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="1.0604%" y="469" width="0.0816%" height="15" fill="rgb(226,3,54)" fg:x="13" fg:w="1"/><text x="1.3104%" y="479.50"></text></g><g><title>alloc::ffi::c_str::&lt;impl alloc::borrow::ToOwned for core::ffi::c_str::CStr&gt;::to_owned (1 samples, 0.08%)</title><rect x="1.0604%" y="453" width="0.0816%" height="15" fill="rgb(245,192,40)" fg:x="13" fg:w="1"/><text x="1.3104%" y="463.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.08%)</title><rect x="1.0604%" y="437" width="0.0816%" height="15" fill="rgb(238,167,29)" fg:x="13" fg:w="1"/><text x="1.3104%" y="447.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (1 samples, 0.08%)</title><rect x="1.0604%" y="421" width="0.0816%" height="15" fill="rgb(232,182,51)" fg:x="13" fg:w="1"/><text x="1.3104%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as alloc::boxed::BoxFromSlice&lt;T&gt;&gt;::from_slice (1 samples, 0.08%)</title><rect x="1.0604%" y="405" width="0.0816%" height="15" fill="rgb(231,60,39)" fg:x="13" fg:w="1"/><text x="1.3104%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="1.0604%" y="389" width="0.0816%" height="15" fill="rgb(208,69,12)" fg:x="13" fg:w="1"/><text x="1.3104%" y="399.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="1.1419%" y="469" width="0.0816%" height="15" fill="rgb(235,93,37)" fg:x="14" fg:w="1"/><text x="1.3919%" y="479.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.1419%" y="453" width="0.0816%" height="15" fill="rgb(213,116,39)" fg:x="14" fg:w="1"/><text x="1.3919%" y="463.50"></text></g><g><title>pthread_rwlock_unlock (1 samples, 0.08%)</title><rect x="1.1419%" y="437" width="0.0816%" height="15" fill="rgb(222,207,29)" fg:x="14" fg:w="1"/><text x="1.3919%" y="447.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.73%)</title><rect x="0.6525%" y="549" width="0.7341%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="9"/><text x="0.9025%" y="559.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.73%)</title><rect x="0.6525%" y="533" width="0.7341%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="9"/><text x="0.9025%" y="543.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.33%)</title><rect x="1.0604%" y="517" width="0.3263%" height="15" fill="rgb(250,191,14)" fg:x="13" fg:w="4"/><text x="1.3104%" y="527.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.33%)</title><rect x="1.0604%" y="501" width="0.3263%" height="15" fill="rgb(239,60,40)" fg:x="13" fg:w="4"/><text x="1.3104%" y="511.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.33%)</title><rect x="1.0604%" y="485" width="0.3263%" height="15" fill="rgb(206,27,48)" fg:x="13" fg:w="4"/><text x="1.3104%" y="495.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="1.2235%" y="469" width="0.1631%" height="15" fill="rgb(225,35,8)" fg:x="15" fg:w="2"/><text x="1.4735%" y="479.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="1.2235%" y="453" width="0.1631%" height="15" fill="rgb(250,213,24)" fg:x="15" fg:w="2"/><text x="1.4735%" y="463.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="1.2235%" y="437" width="0.1631%" height="15" fill="rgb(247,123,22)" fg:x="15" fg:w="2"/><text x="1.4735%" y="447.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="1.2235%" y="421" width="0.1631%" height="15" fill="rgb(231,138,38)" fg:x="15" fg:w="2"/><text x="1.4735%" y="431.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="1.2235%" y="405" width="0.1631%" height="15" fill="rgb(231,145,46)" fg:x="15" fg:w="2"/><text x="1.4735%" y="415.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.3866%" y="501" width="0.0816%" height="15" fill="rgb(251,118,11)" fg:x="17" fg:w="1"/><text x="1.6366%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.3866%" y="485" width="0.0816%" height="15" fill="rgb(217,147,25)" fg:x="17" fg:w="1"/><text x="1.6366%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="1.3866%" y="469" width="0.0816%" height="15" fill="rgb(247,81,37)" fg:x="17" fg:w="1"/><text x="1.6366%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="1.4682%" y="437" width="0.1631%" height="15" fill="rgb(209,12,38)" fg:x="18" fg:w="2"/><text x="1.7182%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.4682%" y="421" width="0.1631%" height="15" fill="rgb(227,1,9)" fg:x="18" fg:w="2"/><text x="1.7182%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="1.4682%" y="405" width="0.1631%" height="15" fill="rgb(248,47,43)" fg:x="18" fg:w="2"/><text x="1.7182%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="1.4682%" y="389" width="0.1631%" height="15" fill="rgb(221,10,30)" fg:x="18" fg:w="2"/><text x="1.7182%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.5498%" y="373" width="0.0816%" height="15" fill="rgb(210,229,1)" fg:x="19" fg:w="1"/><text x="1.7998%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.5498%" y="357" width="0.0816%" height="15" fill="rgb(222,148,37)" fg:x="19" fg:w="1"/><text x="1.7998%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.6313%" y="421" width="0.0816%" height="15" fill="rgb(234,67,33)" fg:x="20" fg:w="1"/><text x="1.8813%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.6313%" y="405" width="0.0816%" height="15" fill="rgb(247,98,35)" fg:x="20" fg:w="1"/><text x="1.8813%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.41%)</title><rect x="1.4682%" y="469" width="0.4078%" height="15" fill="rgb(247,138,52)" fg:x="18" fg:w="5"/><text x="1.7182%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="1.4682%" y="453" width="0.4078%" height="15" fill="rgb(213,79,30)" fg:x="18" fg:w="5"/><text x="1.7182%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="1.6313%" y="437" width="0.2447%" height="15" fill="rgb(246,177,23)" fg:x="20" fg:w="3"/><text x="1.8813%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.7129%" y="421" width="0.1631%" height="15" fill="rgb(230,62,27)" fg:x="21" fg:w="2"/><text x="1.9629%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.7129%" y="405" width="0.1631%" height="15" fill="rgb(216,154,8)" fg:x="21" fg:w="2"/><text x="1.9629%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.7945%" y="389" width="0.0816%" height="15" fill="rgb(244,35,45)" fg:x="22" fg:w="1"/><text x="2.0445%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.7945%" y="373" width="0.0816%" height="15" fill="rgb(251,115,12)" fg:x="22" fg:w="1"/><text x="2.0445%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.8760%" y="437" width="0.0816%" height="15" fill="rgb(240,54,50)" fg:x="23" fg:w="1"/><text x="2.1260%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9576%" y="421" width="0.0816%" height="15" fill="rgb(233,84,52)" fg:x="24" fg:w="1"/><text x="2.2076%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.8760%" y="469" width="0.2447%" height="15" fill="rgb(207,117,47)" fg:x="23" fg:w="3"/><text x="2.1260%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="1.8760%" y="453" width="0.2447%" height="15" fill="rgb(249,43,39)" fg:x="23" fg:w="3"/><text x="2.1260%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.9576%" y="437" width="0.1631%" height="15" fill="rgb(209,38,44)" fg:x="24" fg:w="2"/><text x="2.2076%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0392%" y="421" width="0.0816%" height="15" fill="rgb(236,212,23)" fg:x="25" fg:w="1"/><text x="2.2892%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0392%" y="405" width="0.0816%" height="15" fill="rgb(242,79,21)" fg:x="25" fg:w="1"/><text x="2.2892%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="2.2023%" y="421" width="0.1631%" height="15" fill="rgb(211,96,35)" fg:x="27" fg:w="2"/><text x="2.4523%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.2838%" y="405" width="0.0816%" height="15" fill="rgb(253,215,40)" fg:x="28" fg:w="1"/><text x="2.5338%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="2.2838%" y="389" width="0.0816%" height="15" fill="rgb(211,81,21)" fg:x="28" fg:w="1"/><text x="2.5338%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="2.3654%" y="421" width="0.0816%" height="15" fill="rgb(208,190,38)" fg:x="29" fg:w="1"/><text x="2.6154%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.3654%" y="405" width="0.0816%" height="15" fill="rgb(235,213,38)" fg:x="29" fg:w="1"/><text x="2.6154%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.3654%" y="389" width="0.0816%" height="15" fill="rgb(237,122,38)" fg:x="29" fg:w="1"/><text x="2.6154%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.3654%" y="373" width="0.0816%" height="15" fill="rgb(244,218,35)" fg:x="29" fg:w="1"/><text x="2.6154%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4470%" y="421" width="0.0816%" height="15" fill="rgb(240,68,47)" fg:x="30" fg:w="1"/><text x="2.6970%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.4470%" y="405" width="0.0816%" height="15" fill="rgb(210,16,53)" fg:x="30" fg:w="1"/><text x="2.6970%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="2.4470%" y="389" width="0.0816%" height="15" fill="rgb(235,124,12)" fg:x="30" fg:w="1"/><text x="2.6970%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4470%" y="373" width="0.0816%" height="15" fill="rgb(224,169,11)" fg:x="30" fg:w="1"/><text x="2.6970%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="2.4470%" y="357" width="0.0816%" height="15" fill="rgb(250,166,2)" fg:x="30" fg:w="1"/><text x="2.6970%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.5285%" y="389" width="0.0816%" height="15" fill="rgb(242,216,29)" fg:x="31" fg:w="1"/><text x="2.7785%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.5285%" y="373" width="0.0816%" height="15" fill="rgb(230,116,27)" fg:x="31" fg:w="1"/><text x="2.7785%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.5285%" y="357" width="0.0816%" height="15" fill="rgb(228,99,48)" fg:x="31" fg:w="1"/><text x="2.7785%" y="367.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.31%)</title><rect x="1.3866%" y="533" width="1.3051%" height="15" fill="rgb(253,11,6)" fg:x="17" fg:w="16"/><text x="1.6366%" y="543.50"></text></g><g><title>engine::session::Session::save_entity_changes (16 samples, 1.31%)</title><rect x="1.3866%" y="517" width="1.3051%" height="15" fill="rgb(247,143,39)" fg:x="17" fg:w="16"/><text x="1.6366%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (15 samples, 1.22%)</title><rect x="1.4682%" y="501" width="1.2235%" height="15" fill="rgb(236,97,10)" fg:x="18" fg:w="15"/><text x="1.7182%" y="511.50"></text></g><g><title>engine::session::Session::check_for_changes (15 samples, 1.22%)</title><rect x="1.4682%" y="485" width="1.2235%" height="15" fill="rgb(233,208,19)" fg:x="18" fg:w="15"/><text x="1.7182%" y="495.50"></text></g><g><title>kernel::compare::any_entity_changes (7 samples, 0.57%)</title><rect x="2.1207%" y="469" width="0.5710%" height="15" fill="rgb(216,164,2)" fg:x="26" fg:w="7"/><text x="2.3707%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="2.1207%" y="453" width="0.5710%" height="15" fill="rgb(220,129,5)" fg:x="26" fg:w="7"/><text x="2.3707%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="2.1207%" y="437" width="0.5710%" height="15" fill="rgb(242,17,10)" fg:x="26" fg:w="7"/><text x="2.3707%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="2.5285%" y="421" width="0.1631%" height="15" fill="rgb(242,107,0)" fg:x="31" fg:w="2"/><text x="2.7785%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="2.5285%" y="405" width="0.1631%" height="15" fill="rgb(251,28,31)" fg:x="31" fg:w="2"/><text x="2.7785%" y="415.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="2.6101%" y="389" width="0.0816%" height="15" fill="rgb(233,223,10)" fg:x="32" fg:w="1"/><text x="2.8601%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.6101%" y="373" width="0.0816%" height="15" fill="rgb(215,21,27)" fg:x="32" fg:w="1"/><text x="2.8601%" y="383.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="2.6917%" y="533" width="0.0816%" height="15" fill="rgb(232,23,21)" fg:x="33" fg:w="1"/><text x="2.9417%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="2.6917%" y="517" width="0.0816%" height="15" fill="rgb(244,5,23)" fg:x="33" fg:w="1"/><text x="2.9417%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::modified (1 samples, 0.08%)</title><rect x="2.6917%" y="501" width="0.0816%" height="15" fill="rgb(226,81,46)" fg:x="33" fg:w="1"/><text x="2.9417%" y="511.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="2.6917%" y="485" width="0.0816%" height="15" fill="rgb(247,70,30)" fg:x="33" fg:w="1"/><text x="2.9417%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="2.7732%" y="517" width="0.0816%" height="15" fill="rgb(212,68,19)" fg:x="34" fg:w="1"/><text x="3.0232%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.7732%" y="501" width="0.0816%" height="15" fill="rgb(240,187,13)" fg:x="34" fg:w="1"/><text x="3.0232%" y="511.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="2.7732%" y="485" width="0.0816%" height="15" fill="rgb(223,113,26)" fg:x="34" fg:w="1"/><text x="3.0232%" y="495.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="2.8548%" y="485" width="0.0816%" height="15" fill="rgb(206,192,2)" fg:x="35" fg:w="1"/><text x="3.1048%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.8548%" y="469" width="0.0816%" height="15" fill="rgb(241,108,4)" fg:x="35" fg:w="1"/><text x="3.1048%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.8548%" y="453" width="0.0816%" height="15" fill="rgb(247,173,49)" fg:x="35" fg:w="1"/><text x="3.1048%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.8548%" y="437" width="0.0816%" height="15" fill="rgb(224,114,35)" fg:x="35" fg:w="1"/><text x="3.1048%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.8548%" y="421" width="0.0816%" height="15" fill="rgb(245,159,27)" fg:x="35" fg:w="1"/><text x="3.1048%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.8548%" y="405" width="0.0816%" height="15" fill="rgb(245,172,44)" fg:x="35" fg:w="1"/><text x="3.1048%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.8548%" y="389" width="0.0816%" height="15" fill="rgb(236,23,11)" fg:x="35" fg:w="1"/><text x="3.1048%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.8548%" y="373" width="0.0816%" height="15" fill="rgb(205,117,38)" fg:x="35" fg:w="1"/><text x="3.1048%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.8548%" y="357" width="0.0816%" height="15" fill="rgb(237,72,25)" fg:x="35" fg:w="1"/><text x="3.1048%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.8548%" y="341" width="0.0816%" height="15" fill="rgb(244,70,9)" fg:x="35" fg:w="1"/><text x="3.1048%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.8548%" y="325" width="0.0816%" height="15" fill="rgb(217,125,39)" fg:x="35" fg:w="1"/><text x="3.1048%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.8548%" y="309" width="0.0816%" height="15" fill="rgb(235,36,10)" fg:x="35" fg:w="1"/><text x="3.1048%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8548%" y="293" width="0.0816%" height="15" fill="rgb(251,123,47)" fg:x="35" fg:w="1"/><text x="3.1048%" y="303.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="2.9364%" y="437" width="0.1631%" height="15" fill="rgb(221,13,13)" fg:x="36" fg:w="2"/><text x="3.1864%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.9364%" y="421" width="0.1631%" height="15" fill="rgb(238,131,9)" fg:x="36" fg:w="2"/><text x="3.1864%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.9364%" y="405" width="0.1631%" height="15" fill="rgb(211,50,8)" fg:x="36" fg:w="2"/><text x="3.1864%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="2.9364%" y="389" width="0.1631%" height="15" fill="rgb(245,182,24)" fg:x="36" fg:w="2"/><text x="3.1864%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.9364%" y="373" width="0.1631%" height="15" fill="rgb(242,14,37)" fg:x="36" fg:w="2"/><text x="3.1864%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.0179%" y="357" width="0.0816%" height="15" fill="rgb(246,228,12)" fg:x="37" fg:w="1"/><text x="3.2679%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.0179%" y="341" width="0.0816%" height="15" fill="rgb(213,55,15)" fg:x="37" fg:w="1"/><text x="3.2679%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.0179%" y="325" width="0.0816%" height="15" fill="rgb(209,9,3)" fg:x="37" fg:w="1"/><text x="3.2679%" y="335.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="3.3442%" y="389" width="0.1631%" height="15" fill="rgb(230,59,30)" fg:x="41" fg:w="2"/><text x="3.5942%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.4258%" y="373" width="0.0816%" height="15" fill="rgb(209,121,21)" fg:x="42" fg:w="1"/><text x="3.6758%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5073%" y="389" width="0.0816%" height="15" fill="rgb(220,109,13)" fg:x="43" fg:w="1"/><text x="3.7573%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="3.2626%" y="405" width="0.4078%" height="15" fill="rgb(232,18,1)" fg:x="40" fg:w="5"/><text x="3.5126%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.5889%" y="389" width="0.0816%" height="15" fill="rgb(215,41,42)" fg:x="44" fg:w="1"/><text x="3.8389%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.5889%" y="373" width="0.0816%" height="15" fill="rgb(224,123,36)" fg:x="44" fg:w="1"/><text x="3.8389%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.5889%" y="357" width="0.0816%" height="15" fill="rgb(240,125,3)" fg:x="44" fg:w="1"/><text x="3.8389%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="3.1811%" y="421" width="0.5710%" height="15" fill="rgb(205,98,50)" fg:x="39" fg:w="7"/><text x="3.4311%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.6705%" y="405" width="0.0816%" height="15" fill="rgb(205,185,37)" fg:x="45" fg:w="1"/><text x="3.9205%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.6705%" y="389" width="0.0816%" height="15" fill="rgb(238,207,15)" fg:x="45" fg:w="1"/><text x="3.9205%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.6705%" y="373" width="0.0816%" height="15" fill="rgb(213,199,42)" fg:x="45" fg:w="1"/><text x="3.9205%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.98%)</title><rect x="2.9364%" y="453" width="0.9788%" height="15" fill="rgb(235,201,11)" fg:x="36" fg:w="12"/><text x="3.1864%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.82%)</title><rect x="3.0995%" y="437" width="0.8157%" height="15" fill="rgb(207,46,11)" fg:x="38" fg:w="10"/><text x="3.3495%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.7520%" y="421" width="0.1631%" height="15" fill="rgb(241,35,35)" fg:x="46" fg:w="2"/><text x="4.0020%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="3.7520%" y="405" width="0.1631%" height="15" fill="rgb(243,32,47)" fg:x="46" fg:w="2"/><text x="4.0020%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="3.7520%" y="389" width="0.1631%" height="15" fill="rgb(247,202,23)" fg:x="46" fg:w="2"/><text x="4.0020%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.8336%" y="373" width="0.0816%" height="15" fill="rgb(219,102,11)" fg:x="47" fg:w="1"/><text x="4.0836%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.8336%" y="357" width="0.0816%" height="15" fill="rgb(243,110,44)" fg:x="47" fg:w="1"/><text x="4.0836%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.8336%" y="341" width="0.0816%" height="15" fill="rgb(222,74,54)" fg:x="47" fg:w="1"/><text x="4.0836%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.9152%" y="421" width="0.0816%" height="15" fill="rgb(216,99,12)" fg:x="48" fg:w="1"/><text x="4.1652%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.9967%" y="405" width="0.0816%" height="15" fill="rgb(226,22,26)" fg:x="49" fg:w="1"/><text x="4.2467%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="3.9152%" y="453" width="0.3263%" height="15" fill="rgb(217,163,10)" fg:x="48" fg:w="4"/><text x="4.1652%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="3.9152%" y="437" width="0.3263%" height="15" fill="rgb(213,25,53)" fg:x="48" fg:w="4"/><text x="4.1652%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="3.9967%" y="421" width="0.2447%" height="15" fill="rgb(252,105,26)" fg:x="49" fg:w="3"/><text x="4.2467%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.0783%" y="405" width="0.1631%" height="15" fill="rgb(220,39,43)" fg:x="50" fg:w="2"/><text x="4.3283%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.1599%" y="389" width="0.0816%" height="15" fill="rgb(229,68,48)" fg:x="51" fg:w="1"/><text x="4.4099%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.1599%" y="373" width="0.0816%" height="15" fill="rgb(252,8,32)" fg:x="51" fg:w="1"/><text x="4.4099%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.1599%" y="357" width="0.0816%" height="15" fill="rgb(223,20,43)" fg:x="51" fg:w="1"/><text x="4.4099%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="4.4046%" y="341" width="0.0816%" height="15" fill="rgb(229,81,49)" fg:x="54" fg:w="1"/><text x="4.6546%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4046%" y="325" width="0.0816%" height="15" fill="rgb(236,28,36)" fg:x="54" fg:w="1"/><text x="4.6546%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.4861%" y="341" width="0.0816%" height="15" fill="rgb(249,185,26)" fg:x="55" fg:w="1"/><text x="4.7361%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4861%" y="325" width="0.0816%" height="15" fill="rgb(249,174,33)" fg:x="55" fg:w="1"/><text x="4.7361%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (4 samples, 0.33%)</title><rect x="4.3230%" y="405" width="0.3263%" height="15" fill="rgb(233,201,37)" fg:x="53" fg:w="4"/><text x="4.5730%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="4.4046%" y="389" width="0.2447%" height="15" fill="rgb(221,78,26)" fg:x="54" fg:w="3"/><text x="4.6546%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="4.4046%" y="373" width="0.2447%" height="15" fill="rgb(250,127,30)" fg:x="54" fg:w="3"/><text x="4.6546%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (3 samples, 0.24%)</title><rect x="4.4046%" y="357" width="0.2447%" height="15" fill="rgb(230,49,44)" fg:x="54" fg:w="3"/><text x="4.6546%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5677%" y="341" width="0.0816%" height="15" fill="rgb(229,67,23)" fg:x="56" fg:w="1"/><text x="4.8177%" y="351.50"></text></g><g><title>kernel::compare::any_entity_changes (7 samples, 0.57%)</title><rect x="4.2414%" y="453" width="0.5710%" height="15" fill="rgb(249,83,47)" fg:x="52" fg:w="7"/><text x="4.4914%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="4.2414%" y="437" width="0.5710%" height="15" fill="rgb(215,43,3)" fg:x="52" fg:w="7"/><text x="4.4914%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="4.2414%" y="421" width="0.5710%" height="15" fill="rgb(238,154,13)" fg:x="52" fg:w="7"/><text x="4.4914%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="4.6493%" y="405" width="0.1631%" height="15" fill="rgb(219,56,2)" fg:x="57" fg:w="2"/><text x="4.8993%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="4.6493%" y="389" width="0.1631%" height="15" fill="rgb(233,0,4)" fg:x="57" fg:w="2"/><text x="4.8993%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="4.6493%" y="373" width="0.1631%" height="15" fill="rgb(235,30,7)" fg:x="57" fg:w="2"/><text x="4.8993%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.7308%" y="357" width="0.0816%" height="15" fill="rgb(250,79,13)" fg:x="58" fg:w="1"/><text x="4.9808%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7308%" y="341" width="0.0816%" height="15" fill="rgb(211,146,34)" fg:x="58" fg:w="1"/><text x="4.9808%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="4.7308%" y="325" width="0.0816%" height="15" fill="rgb(228,22,38)" fg:x="58" fg:w="1"/><text x="4.9808%" y="335.50"></text></g><g><title>engine::session::Session::flush (25 samples, 2.04%)</title><rect x="2.8548%" y="517" width="2.0392%" height="15" fill="rgb(235,168,5)" fg:x="35" fg:w="25"/><text x="3.1048%" y="527.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (25 samples, 2.04%)</title><rect x="2.8548%" y="501" width="2.0392%" height="15" fill="rgb(221,155,16)" fg:x="35" fg:w="25"/><text x="3.1048%" y="511.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (24 samples, 1.96%)</title><rect x="2.9364%" y="485" width="1.9576%" height="15" fill="rgb(215,215,53)" fg:x="36" fg:w="24"/><text x="3.1864%" y="495.50">e..</text></g><g><title>engine::session::Session::check_for_changes (24 samples, 1.96%)</title><rect x="2.9364%" y="469" width="1.9576%" height="15" fill="rgb(223,4,10)" fg:x="36" fg:w="24"/><text x="3.1864%" y="479.50">e..</text></g><g><title>kernel::model::Entity::set_gid (1 samples, 0.08%)</title><rect x="4.8124%" y="453" width="0.0816%" height="15" fill="rgb(234,103,6)" fg:x="59" fg:w="1"/><text x="5.0624%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8124%" y="437" width="0.0816%" height="15" fill="rgb(227,97,0)" fg:x="59" fg:w="1"/><text x="5.0624%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.8940%" y="405" width="0.1631%" height="15" fill="rgb(234,150,53)" fg:x="60" fg:w="2"/><text x="5.1440%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="4.8940%" y="501" width="0.2447%" height="15" fill="rgb(228,201,54)" fg:x="60" fg:w="3"/><text x="5.1440%" y="511.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="4.8940%" y="485" width="0.2447%" height="15" fill="rgb(222,22,37)" fg:x="60" fg:w="3"/><text x="5.1440%" y="495.50"></text></g><g><title>engine::internal::EntityMap::add_entity (3 samples, 0.24%)</title><rect x="4.8940%" y="469" width="0.2447%" height="15" fill="rgb(237,53,32)" fg:x="60" fg:w="3"/><text x="5.1440%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="4.8940%" y="453" width="0.2447%" height="15" fill="rgb(233,25,53)" fg:x="60" fg:w="3"/><text x="5.1440%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.24%)</title><rect x="4.8940%" y="437" width="0.2447%" height="15" fill="rgb(210,40,34)" fg:x="60" fg:w="3"/><text x="5.1440%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.24%)</title><rect x="4.8940%" y="421" width="0.2447%" height="15" fill="rgb(241,220,44)" fg:x="60" fg:w="3"/><text x="5.1440%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.0571%" y="405" width="0.0816%" height="15" fill="rgb(235,28,35)" fg:x="62" fg:w="1"/><text x="5.3071%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="5.0571%" y="389" width="0.0816%" height="15" fill="rgb(210,56,17)" fg:x="62" fg:w="1"/><text x="5.3071%" y="399.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="5.1387%" y="485" width="0.0816%" height="15" fill="rgb(224,130,29)" fg:x="63" fg:w="1"/><text x="5.3887%" y="495.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="5.1387%" y="469" width="0.0816%" height="15" fill="rgb(235,212,8)" fg:x="63" fg:w="1"/><text x="5.3887%" y="479.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1387%" y="453" width="0.0816%" height="15" fill="rgb(223,33,50)" fg:x="63" fg:w="1"/><text x="5.3887%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.1387%" y="437" width="0.0816%" height="15" fill="rgb(219,149,13)" fg:x="63" fg:w="1"/><text x="5.3887%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1387%" y="421" width="0.0816%" height="15" fill="rgb(250,156,29)" fg:x="63" fg:w="1"/><text x="5.3887%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.1387%" y="405" width="0.0816%" height="15" fill="rgb(216,193,19)" fg:x="63" fg:w="1"/><text x="5.3887%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1387%" y="389" width="0.0816%" height="15" fill="rgb(216,135,14)" fg:x="63" fg:w="1"/><text x="5.3887%" y="399.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.41%)</title><rect x="4.8940%" y="517" width="0.4078%" height="15" fill="rgb(241,47,5)" fg:x="60" fg:w="5"/><text x="5.1440%" y="527.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="5.1387%" y="501" width="0.1631%" height="15" fill="rgb(233,42,35)" fg:x="63" fg:w="2"/><text x="5.3887%" y="511.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="5.2202%" y="485" width="0.0816%" height="15" fill="rgb(231,13,6)" fg:x="64" fg:w="1"/><text x="5.4702%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="5.2202%" y="469" width="0.0816%" height="15" fill="rgb(207,181,40)" fg:x="64" fg:w="1"/><text x="5.4702%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.2202%" y="453" width="0.0816%" height="15" fill="rgb(254,173,49)" fg:x="64" fg:w="1"/><text x="5.4702%" y="463.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="5.3018%" y="517" width="0.1631%" height="15" fill="rgb(221,1,38)" fg:x="65" fg:w="2"/><text x="5.5518%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.3018%" y="501" width="0.1631%" height="15" fill="rgb(206,124,46)" fg:x="65" fg:w="2"/><text x="5.5518%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="5.3018%" y="485" width="0.1631%" height="15" fill="rgb(249,21,11)" fg:x="65" fg:w="2"/><text x="5.5518%" y="495.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="5.3018%" y="469" width="0.1631%" height="15" fill="rgb(222,201,40)" fg:x="65" fg:w="2"/><text x="5.5518%" y="479.50"></text></g><g><title>engine::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="5.3018%" y="453" width="0.1631%" height="15" fill="rgb(235,61,29)" fg:x="65" fg:w="2"/><text x="5.5518%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.3834%" y="437" width="0.0816%" height="15" fill="rgb(219,207,3)" fg:x="66" fg:w="1"/><text x="5.6334%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.3834%" y="421" width="0.0816%" height="15" fill="rgb(222,56,46)" fg:x="66" fg:w="1"/><text x="5.6334%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.3834%" y="405" width="0.0816%" height="15" fill="rgb(239,76,54)" fg:x="66" fg:w="1"/><text x="5.6334%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.3834%" y="389" width="0.0816%" height="15" fill="rgb(231,124,27)" fg:x="66" fg:w="1"/><text x="5.6334%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.3834%" y="373" width="0.0816%" height="15" fill="rgb(249,195,6)" fg:x="66" fg:w="1"/><text x="5.6334%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.3834%" y="357" width="0.0816%" height="15" fill="rgb(237,174,47)" fg:x="66" fg:w="1"/><text x="5.6334%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.3834%" y="341" width="0.0816%" height="15" fill="rgb(206,201,31)" fg:x="66" fg:w="1"/><text x="5.6334%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.3834%" y="325" width="0.0816%" height="15" fill="rgb(231,57,52)" fg:x="66" fg:w="1"/><text x="5.6334%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.3834%" y="309" width="0.0816%" height="15" fill="rgb(248,177,22)" fg:x="66" fg:w="1"/><text x="5.6334%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.3834%" y="293" width="0.0816%" height="15" fill="rgb(215,211,37)" fg:x="66" fg:w="1"/><text x="5.6334%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.3834%" y="277" width="0.0816%" height="15" fill="rgb(241,128,51)" fg:x="66" fg:w="1"/><text x="5.6334%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.3834%" y="261" width="0.0816%" height="15" fill="rgb(227,165,31)" fg:x="66" fg:w="1"/><text x="5.6334%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3834%" y="245" width="0.0816%" height="15" fill="rgb(228,167,24)" fg:x="66" fg:w="1"/><text x="5.6334%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.4649%" y="501" width="0.1631%" height="15" fill="rgb(228,143,12)" fg:x="67" fg:w="2"/><text x="5.7149%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="5.5465%" y="485" width="0.0816%" height="15" fill="rgb(249,149,8)" fg:x="68" fg:w="1"/><text x="5.7965%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="5.5465%" y="469" width="0.0816%" height="15" fill="rgb(243,35,44)" fg:x="68" fg:w="1"/><text x="5.7965%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="5.5465%" y="453" width="0.0816%" height="15" fill="rgb(246,89,9)" fg:x="68" fg:w="1"/><text x="5.7965%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.5465%" y="437" width="0.0816%" height="15" fill="rgb(233,213,13)" fg:x="68" fg:w="1"/><text x="5.7965%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5465%" y="421" width="0.0816%" height="15" fill="rgb(233,141,41)" fg:x="68" fg:w="1"/><text x="5.7965%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.5465%" y="405" width="0.0816%" height="15" fill="rgb(239,167,4)" fg:x="68" fg:w="1"/><text x="5.7965%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="5.5465%" y="389" width="0.0816%" height="15" fill="rgb(209,217,16)" fg:x="68" fg:w="1"/><text x="5.7965%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.5465%" y="373" width="0.0816%" height="15" fill="rgb(219,88,35)" fg:x="68" fg:w="1"/><text x="5.7965%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5465%" y="357" width="0.0816%" height="15" fill="rgb(220,193,23)" fg:x="68" fg:w="1"/><text x="5.7965%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.5465%" y="341" width="0.0816%" height="15" fill="rgb(230,90,52)" fg:x="68" fg:w="1"/><text x="5.7965%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5465%" y="325" width="0.0816%" height="15" fill="rgb(252,106,19)" fg:x="68" fg:w="1"/><text x="5.7965%" y="335.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (36 samples, 2.94%)</title><rect x="2.7732%" y="533" width="2.9364%" height="15" fill="rgb(206,74,20)" fg:x="34" fg:w="36"/><text x="3.0232%" y="543.50">pl..</text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="5.4649%" y="517" width="0.2447%" height="15" fill="rgb(230,138,44)" fg:x="67" fg:w="3"/><text x="5.7149%" y="527.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="5.6281%" y="501" width="0.0816%" height="15" fill="rgb(235,182,43)" fg:x="69" fg:w="1"/><text x="5.8781%" y="511.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="5.6281%" y="485" width="0.0816%" height="15" fill="rgb(242,16,51)" fg:x="69" fg:w="1"/><text x="5.8781%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="5.7096%" y="517" width="0.0816%" height="15" fill="rgb(248,9,4)" fg:x="70" fg:w="1"/><text x="5.9596%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.7912%" y="501" width="0.0816%" height="15" fill="rgb(210,31,22)" fg:x="71" fg:w="1"/><text x="6.0412%" y="511.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.7912%" y="485" width="0.0816%" height="15" fill="rgb(239,54,39)" fg:x="71" fg:w="1"/><text x="6.0412%" y="495.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.7912%" y="469" width="0.0816%" height="15" fill="rgb(230,99,41)" fg:x="71" fg:w="1"/><text x="6.0412%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.7912%" y="453" width="0.0816%" height="15" fill="rgb(253,106,12)" fg:x="71" fg:w="1"/><text x="6.0412%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.7912%" y="437" width="0.0816%" height="15" fill="rgb(213,46,41)" fg:x="71" fg:w="1"/><text x="6.0412%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.7912%" y="421" width="0.0816%" height="15" fill="rgb(215,133,35)" fg:x="71" fg:w="1"/><text x="6.0412%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.7912%" y="405" width="0.0816%" height="15" fill="rgb(213,28,5)" fg:x="71" fg:w="1"/><text x="6.0412%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.7912%" y="389" width="0.0816%" height="15" fill="rgb(215,77,49)" fg:x="71" fg:w="1"/><text x="6.0412%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.7912%" y="373" width="0.0816%" height="15" fill="rgb(248,100,22)" fg:x="71" fg:w="1"/><text x="6.0412%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.7912%" y="357" width="0.0816%" height="15" fill="rgb(208,67,9)" fg:x="71" fg:w="1"/><text x="6.0412%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.7912%" y="341" width="0.0816%" height="15" fill="rgb(219,133,21)" fg:x="71" fg:w="1"/><text x="6.0412%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.7912%" y="325" width="0.0816%" height="15" fill="rgb(246,46,29)" fg:x="71" fg:w="1"/><text x="6.0412%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.7912%" y="309" width="0.0816%" height="15" fill="rgb(246,185,52)" fg:x="71" fg:w="1"/><text x="6.0412%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.7912%" y="293" width="0.0816%" height="15" fill="rgb(252,136,11)" fg:x="71" fg:w="1"/><text x="6.0412%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7912%" y="277" width="0.0816%" height="15" fill="rgb(219,138,53)" fg:x="71" fg:w="1"/><text x="6.0412%" y="287.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (56 samples, 4.57%)</title><rect x="1.3866%" y="549" width="4.5677%" height="15" fill="rgb(211,51,23)" fg:x="17" fg:w="56"/><text x="1.6366%" y="559.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="5.7096%" y="533" width="0.2447%" height="15" fill="rgb(247,221,28)" fg:x="70" fg:w="3"/><text x="5.9596%" y="543.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="5.7912%" y="517" width="0.1631%" height="15" fill="rgb(251,222,45)" fg:x="71" fg:w="2"/><text x="6.0412%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="5.8728%" y="501" width="0.0816%" height="15" fill="rgb(217,162,53)" fg:x="72" fg:w="1"/><text x="6.1228%" y="511.50"></text></g><g><title>kernel::model::Props::set_property (1 samples, 0.08%)</title><rect x="5.8728%" y="485" width="0.0816%" height="15" fill="rgb(229,93,14)" fg:x="72" fg:w="1"/><text x="6.1228%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8728%" y="469" width="0.0816%" height="15" fill="rgb(209,67,49)" fg:x="72" fg:w="1"/><text x="6.1228%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8728%" y="453" width="0.0816%" height="15" fill="rgb(213,87,29)" fg:x="72" fg:w="1"/><text x="6.1228%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="5.8728%" y="437" width="0.0816%" height="15" fill="rgb(205,151,52)" fg:x="72" fg:w="1"/><text x="6.1228%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="5.9543%" y="549" width="0.0816%" height="15" fill="rgb(253,215,39)" fg:x="73" fg:w="1"/><text x="6.2043%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="5.9543%" y="533" width="0.0816%" height="15" fill="rgb(221,220,41)" fg:x="73" fg:w="1"/><text x="6.2043%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="5.9543%" y="517" width="0.0816%" height="15" fill="rgb(218,133,21)" fg:x="73" fg:w="1"/><text x="6.2043%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.9543%" y="501" width="0.0816%" height="15" fill="rgb(221,193,43)" fg:x="73" fg:w="1"/><text x="6.2043%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.9543%" y="485" width="0.0816%" height="15" fill="rgb(240,128,52)" fg:x="73" fg:w="1"/><text x="6.2043%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.0359%" y="517" width="0.0816%" height="15" fill="rgb(253,114,12)" fg:x="74" fg:w="1"/><text x="6.2859%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="6.0359%" y="501" width="0.0816%" height="15" fill="rgb(215,223,47)" fg:x="74" fg:w="1"/><text x="6.2859%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="6.0359%" y="485" width="0.0816%" height="15" fill="rgb(248,225,23)" fg:x="74" fg:w="1"/><text x="6.2859%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="6.1175%" y="453" width="0.2447%" height="15" fill="rgb(250,108,0)" fg:x="75" fg:w="3"/><text x="6.3675%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.1990%" y="437" width="0.1631%" height="15" fill="rgb(228,208,7)" fg:x="76" fg:w="2"/><text x="6.4490%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.1990%" y="421" width="0.1631%" height="15" fill="rgb(244,45,10)" fg:x="76" fg:w="2"/><text x="6.4490%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.1990%" y="405" width="0.1631%" height="15" fill="rgb(207,125,25)" fg:x="76" fg:w="2"/><text x="6.4490%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.3622%" y="437" width="0.0816%" height="15" fill="rgb(210,195,18)" fg:x="78" fg:w="1"/><text x="6.6122%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3622%" y="421" width="0.0816%" height="15" fill="rgb(249,80,12)" fg:x="78" fg:w="1"/><text x="6.6122%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.3622%" y="405" width="0.0816%" height="15" fill="rgb(221,65,9)" fg:x="78" fg:w="1"/><text x="6.6122%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.3622%" y="389" width="0.0816%" height="15" fill="rgb(235,49,36)" fg:x="78" fg:w="1"/><text x="6.6122%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.4437%" y="437" width="0.0816%" height="15" fill="rgb(225,32,20)" fg:x="79" fg:w="1"/><text x="6.6937%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4437%" y="421" width="0.0816%" height="15" fill="rgb(215,141,46)" fg:x="79" fg:w="1"/><text x="6.6937%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4437%" y="405" width="0.0816%" height="15" fill="rgb(250,160,47)" fg:x="79" fg:w="1"/><text x="6.6937%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4437%" y="389" width="0.0816%" height="15" fill="rgb(216,222,40)" fg:x="79" fg:w="1"/><text x="6.6937%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.6884%" y="405" width="0.0816%" height="15" fill="rgb(234,217,39)" fg:x="82" fg:w="1"/><text x="6.9384%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.6884%" y="389" width="0.0816%" height="15" fill="rgb(207,178,40)" fg:x="82" fg:w="1"/><text x="6.9384%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="6.3622%" y="453" width="0.4894%" height="15" fill="rgb(221,136,13)" fg:x="78" fg:w="6"/><text x="6.6122%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="6.5253%" y="437" width="0.3263%" height="15" fill="rgb(249,199,10)" fg:x="80" fg:w="4"/><text x="6.7753%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.6069%" y="421" width="0.2447%" height="15" fill="rgb(249,222,13)" fg:x="81" fg:w="3"/><text x="6.8569%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.7700%" y="405" width="0.0816%" height="15" fill="rgb(244,185,38)" fg:x="83" fg:w="1"/><text x="7.0200%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.7700%" y="389" width="0.0816%" height="15" fill="rgb(236,202,9)" fg:x="83" fg:w="1"/><text x="7.0200%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.7700%" y="373" width="0.0816%" height="15" fill="rgb(250,229,37)" fg:x="83" fg:w="1"/><text x="7.0200%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.82%)</title><rect x="6.1175%" y="485" width="0.8157%" height="15" fill="rgb(206,174,23)" fg:x="75" fg:w="10"/><text x="6.3675%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.82%)</title><rect x="6.1175%" y="469" width="0.8157%" height="15" fill="rgb(211,33,43)" fg:x="75" fg:w="10"/><text x="6.3675%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.8515%" y="453" width="0.0816%" height="15" fill="rgb(245,58,50)" fg:x="84" fg:w="1"/><text x="7.1015%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.8515%" y="437" width="0.0816%" height="15" fill="rgb(244,68,36)" fg:x="84" fg:w="1"/><text x="7.1015%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.8515%" y="421" width="0.0816%" height="15" fill="rgb(232,229,15)" fg:x="84" fg:w="1"/><text x="7.1015%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.8515%" y="405" width="0.0816%" height="15" fill="rgb(254,30,23)" fg:x="84" fg:w="1"/><text x="7.1015%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.8515%" y="389" width="0.0816%" height="15" fill="rgb(235,160,14)" fg:x="84" fg:w="1"/><text x="7.1015%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.8515%" y="373" width="0.0816%" height="15" fill="rgb(212,155,44)" fg:x="84" fg:w="1"/><text x="7.1015%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.9331%" y="485" width="0.0816%" height="15" fill="rgb(226,2,50)" fg:x="85" fg:w="1"/><text x="7.1831%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.9331%" y="469" width="0.0816%" height="15" fill="rgb(234,177,6)" fg:x="85" fg:w="1"/><text x="7.1831%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.9331%" y="453" width="0.0816%" height="15" fill="rgb(217,24,9)" fg:x="85" fg:w="1"/><text x="7.1831%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="7.0147%" y="437" width="0.1631%" height="15" fill="rgb(220,13,46)" fg:x="86" fg:w="2"/><text x="7.2647%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.1778%" y="405" width="0.0816%" height="15" fill="rgb(239,221,27)" fg:x="88" fg:w="1"/><text x="7.4278%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.2594%" y="389" width="0.0816%" height="15" fill="rgb(222,198,25)" fg:x="89" fg:w="1"/><text x="7.5094%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2594%" y="373" width="0.0816%" height="15" fill="rgb(211,99,13)" fg:x="89" fg:w="1"/><text x="7.5094%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.3409%" y="373" width="0.0816%" height="15" fill="rgb(232,111,31)" fg:x="90" fg:w="1"/><text x="7.5909%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3409%" y="357" width="0.0816%" height="15" fill="rgb(245,82,37)" fg:x="90" fg:w="1"/><text x="7.5909%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="7.0147%" y="469" width="0.4894%" height="15" fill="rgb(227,149,46)" fg:x="86" fg:w="6"/><text x="7.2647%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="7.0147%" y="453" width="0.4894%" height="15" fill="rgb(218,36,50)" fg:x="86" fg:w="6"/><text x="7.2647%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="7.1778%" y="437" width="0.3263%" height="15" fill="rgb(226,80,48)" fg:x="88" fg:w="4"/><text x="7.4278%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="7.1778%" y="421" width="0.3263%" height="15" fill="rgb(238,224,15)" fg:x="88" fg:w="4"/><text x="7.4278%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.2594%" y="405" width="0.2447%" height="15" fill="rgb(241,136,10)" fg:x="89" fg:w="3"/><text x="7.5094%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.3409%" y="389" width="0.1631%" height="15" fill="rgb(208,32,45)" fg:x="90" fg:w="2"/><text x="7.5909%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.4225%" y="373" width="0.0816%" height="15" fill="rgb(207,135,9)" fg:x="91" fg:w="1"/><text x="7.6725%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.4225%" y="357" width="0.0816%" height="15" fill="rgb(206,86,44)" fg:x="91" fg:w="1"/><text x="7.6725%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.7488%" y="437" width="0.1631%" height="15" fill="rgb(245,177,15)" fg:x="95" fg:w="2"/><text x="7.9988%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.7488%" y="421" width="0.1631%" height="15" fill="rgb(206,64,50)" fg:x="95" fg:w="2"/><text x="7.9988%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="7.7488%" y="405" width="0.1631%" height="15" fill="rgb(234,36,40)" fg:x="95" fg:w="2"/><text x="7.9988%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="7.9119%" y="437" width="0.1631%" height="15" fill="rgb(213,64,8)" fg:x="97" fg:w="2"/><text x="8.1619%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="7.9119%" y="421" width="0.1631%" height="15" fill="rgb(210,75,36)" fg:x="97" fg:w="2"/><text x="8.1619%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.9935%" y="405" width="0.0816%" height="15" fill="rgb(229,88,21)" fg:x="98" fg:w="1"/><text x="8.2435%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="7.9935%" y="389" width="0.0816%" height="15" fill="rgb(252,204,47)" fg:x="98" fg:w="1"/><text x="8.2435%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0750%" y="389" width="0.0816%" height="15" fill="rgb(208,77,27)" fg:x="99" fg:w="1"/><text x="8.3250%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0750%" y="373" width="0.0816%" height="15" fill="rgb(221,76,26)" fg:x="99" fg:w="1"/><text x="8.3250%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.0750%" y="357" width="0.0816%" height="15" fill="rgb(225,139,18)" fg:x="99" fg:w="1"/><text x="8.3250%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="8.0750%" y="437" width="0.1631%" height="15" fill="rgb(230,137,11)" fg:x="99" fg:w="2"/><text x="8.3250%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.0750%" y="421" width="0.1631%" height="15" fill="rgb(212,28,1)" fg:x="99" fg:w="2"/><text x="8.3250%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="8.0750%" y="405" width="0.1631%" height="15" fill="rgb(248,164,17)" fg:x="99" fg:w="2"/><text x="8.3250%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1566%" y="389" width="0.0816%" height="15" fill="rgb(222,171,42)" fg:x="100" fg:w="1"/><text x="8.4066%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1566%" y="373" width="0.0816%" height="15" fill="rgb(243,84,45)" fg:x="100" fg:w="1"/><text x="8.4066%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="8.2382%" y="405" width="0.0816%" height="15" fill="rgb(252,49,23)" fg:x="101" fg:w="1"/><text x="8.4882%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.3197%" y="341" width="0.1631%" height="15" fill="rgb(215,19,7)" fg:x="102" fg:w="2"/><text x="8.5697%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.4013%" y="325" width="0.0816%" height="15" fill="rgb(238,81,41)" fg:x="103" fg:w="1"/><text x="8.6513%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="8.4013%" y="309" width="0.0816%" height="15" fill="rgb(210,199,37)" fg:x="103" fg:w="1"/><text x="8.6513%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.41%)</title><rect x="8.3197%" y="389" width="0.4078%" height="15" fill="rgb(244,192,49)" fg:x="102" fg:w="5"/><text x="8.5697%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="8.3197%" y="373" width="0.4078%" height="15" fill="rgb(226,211,11)" fg:x="102" fg:w="5"/><text x="8.5697%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="8.3197%" y="357" width="0.4078%" height="15" fill="rgb(236,162,54)" fg:x="102" fg:w="5"/><text x="8.5697%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="8.4829%" y="341" width="0.2447%" height="15" fill="rgb(220,229,9)" fg:x="104" fg:w="3"/><text x="8.7329%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="8.5644%" y="325" width="0.1631%" height="15" fill="rgb(250,87,22)" fg:x="105" fg:w="2"/><text x="8.8144%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (16 samples, 1.31%)</title><rect x="7.5041%" y="469" width="1.3051%" height="15" fill="rgb(239,43,17)" fg:x="92" fg:w="16"/><text x="7.7541%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.22%)</title><rect x="7.5856%" y="453" width="1.2235%" height="15" fill="rgb(231,177,25)" fg:x="93" fg:w="15"/><text x="7.8356%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.57%)</title><rect x="8.2382%" y="437" width="0.5710%" height="15" fill="rgb(219,179,1)" fg:x="101" fg:w="7"/><text x="8.4882%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (7 samples, 0.57%)</title><rect x="8.2382%" y="421" width="0.5710%" height="15" fill="rgb(238,219,53)" fg:x="101" fg:w="7"/><text x="8.4882%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="8.3197%" y="405" width="0.4894%" height="15" fill="rgb(232,167,36)" fg:x="102" fg:w="6"/><text x="8.5697%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7276%" y="389" width="0.0816%" height="15" fill="rgb(244,19,51)" fg:x="107" fg:w="1"/><text x="8.9776%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.7276%" y="373" width="0.0816%" height="15" fill="rgb(224,6,22)" fg:x="107" fg:w="1"/><text x="8.9776%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="8.8907%" y="373" width="0.0816%" height="15" fill="rgb(224,145,5)" fg:x="109" fg:w="1"/><text x="9.1407%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="8.8907%" y="357" width="0.0816%" height="15" fill="rgb(234,130,49)" fg:x="109" fg:w="1"/><text x="9.1407%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="8.8907%" y="341" width="0.0816%" height="15" fill="rgb(254,6,2)" fg:x="109" fg:w="1"/><text x="9.1407%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="8.8907%" y="325" width="0.0816%" height="15" fill="rgb(208,96,46)" fg:x="109" fg:w="1"/><text x="9.1407%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.8907%" y="309" width="0.0816%" height="15" fill="rgb(239,3,39)" fg:x="109" fg:w="1"/><text x="9.1407%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="8.9723%" y="373" width="0.1631%" height="15" fill="rgb(233,210,1)" fg:x="110" fg:w="2"/><text x="9.2223%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="8.9723%" y="357" width="0.1631%" height="15" fill="rgb(244,137,37)" fg:x="110" fg:w="2"/><text x="9.2223%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2170%" y="341" width="0.0816%" height="15" fill="rgb(240,136,2)" fg:x="113" fg:w="1"/><text x="9.4670%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="8.8091%" y="405" width="0.5710%" height="15" fill="rgb(239,18,37)" fg:x="108" fg:w="7"/><text x="9.0591%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="8.8907%" y="389" width="0.4894%" height="15" fill="rgb(218,185,22)" fg:x="109" fg:w="6"/><text x="9.1407%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="9.1354%" y="373" width="0.2447%" height="15" fill="rgb(225,218,4)" fg:x="112" fg:w="3"/><text x="9.3854%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.2170%" y="357" width="0.1631%" height="15" fill="rgb(230,182,32)" fg:x="113" fg:w="2"/><text x="9.4670%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.2985%" y="341" width="0.0816%" height="15" fill="rgb(242,56,43)" fg:x="114" fg:w="1"/><text x="9.5485%" y="351.50"></text></g><g><title>kernel::compare::any_entity_changes (31 samples, 2.53%)</title><rect x="7.0147%" y="485" width="2.5285%" height="15" fill="rgb(233,99,24)" fg:x="86" fg:w="31"/><text x="7.2647%" y="495.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.73%)</title><rect x="8.8091%" y="469" width="0.7341%" height="15" fill="rgb(234,209,42)" fg:x="108" fg:w="9"/><text x="9.0591%" y="479.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.73%)</title><rect x="8.8091%" y="453" width="0.7341%" height="15" fill="rgb(227,7,12)" fg:x="108" fg:w="9"/><text x="9.0591%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.73%)</title><rect x="8.8091%" y="437" width="0.7341%" height="15" fill="rgb(245,203,43)" fg:x="108" fg:w="9"/><text x="9.0591%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.73%)</title><rect x="8.8091%" y="421" width="0.7341%" height="15" fill="rgb(238,205,33)" fg:x="108" fg:w="9"/><text x="9.0591%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.3801%" y="405" width="0.1631%" height="15" fill="rgb(231,56,7)" fg:x="115" fg:w="2"/><text x="9.6301%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4617%" y="389" width="0.0816%" height="15" fill="rgb(244,186,29)" fg:x="116" fg:w="1"/><text x="9.7117%" y="399.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (43 samples, 3.51%)</title><rect x="6.1175%" y="517" width="3.5073%" height="15" fill="rgb(234,111,31)" fg:x="75" fg:w="43"/><text x="6.3675%" y="527.50">eng..</text></g><g><title>engine::session::Session::check_for_changes (43 samples, 3.51%)</title><rect x="6.1175%" y="501" width="3.5073%" height="15" fill="rgb(241,149,10)" fg:x="75" fg:w="43"/><text x="6.3675%" y="511.50">eng..</text></g><g><title>kernel::model::Entity::set_gid (1 samples, 0.08%)</title><rect x="9.5432%" y="485" width="0.0816%" height="15" fill="rgb(249,206,44)" fg:x="117" fg:w="1"/><text x="9.7932%" y="495.50"></text></g><g><title>engine::session::Session::close (45 samples, 3.67%)</title><rect x="6.0359%" y="549" width="3.6705%" height="15" fill="rgb(251,153,30)" fg:x="74" fg:w="45"/><text x="6.2859%" y="559.50">engi..</text></g><g><title>engine::session::Session::save_entity_changes (45 samples, 3.67%)</title><rect x="6.0359%" y="533" width="3.6705%" height="15" fill="rgb(239,152,38)" fg:x="74" fg:w="45"/><text x="6.2859%" y="543.50">engi..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="9.6248%" y="517" width="0.0816%" height="15" fill="rgb(249,139,47)" fg:x="118" fg:w="1"/><text x="9.8748%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="9.6248%" y="501" width="0.0816%" height="15" fill="rgb(244,64,35)" fg:x="118" fg:w="1"/><text x="9.8748%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="9.6248%" y="485" width="0.0816%" height="15" fill="rgb(216,46,15)" fg:x="118" fg:w="1"/><text x="9.8748%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.6248%" y="469" width="0.0816%" height="15" fill="rgb(250,74,19)" fg:x="118" fg:w="1"/><text x="9.8748%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.6248%" y="453" width="0.0816%" height="15" fill="rgb(249,42,33)" fg:x="118" fg:w="1"/><text x="9.8748%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.6248%" y="437" width="0.0816%" height="15" fill="rgb(242,149,17)" fg:x="118" fg:w="1"/><text x="9.8748%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.6248%" y="421" width="0.0816%" height="15" fill="rgb(244,29,21)" fg:x="118" fg:w="1"/><text x="9.8748%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="9.6248%" y="405" width="0.0816%" height="15" fill="rgb(220,130,37)" fg:x="118" fg:w="1"/><text x="9.8748%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.6248%" y="389" width="0.0816%" height="15" fill="rgb(211,67,2)" fg:x="118" fg:w="1"/><text x="9.8748%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.6248%" y="373" width="0.0816%" height="15" fill="rgb(235,68,52)" fg:x="118" fg:w="1"/><text x="9.8748%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.6248%" y="357" width="0.0816%" height="15" fill="rgb(246,142,3)" fg:x="118" fg:w="1"/><text x="9.8748%" y="367.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="9.6248%" y="341" width="0.0816%" height="15" fill="rgb(241,25,7)" fg:x="118" fg:w="1"/><text x="9.8748%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::desc (2 samples, 0.16%)</title><rect x="9.7879%" y="469" width="0.1631%" height="15" fill="rgb(242,119,39)" fg:x="120" fg:w="2"/><text x="10.0379%" y="479.50"></text></g><g><title>kernel::model::Props::property_named (2 samples, 0.16%)</title><rect x="9.7879%" y="453" width="0.1631%" height="15" fill="rgb(241,98,45)" fg:x="120" fg:w="2"/><text x="10.0379%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="9.9511%" y="469" width="0.0816%" height="15" fill="rgb(254,28,30)" fg:x="122" fg:w="1"/><text x="10.2011%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="9.9511%" y="453" width="0.0816%" height="15" fill="rgb(241,142,54)" fg:x="122" fg:w="1"/><text x="10.2011%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9511%" y="437" width="0.0816%" height="15" fill="rgb(222,85,15)" fg:x="122" fg:w="1"/><text x="10.2011%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="10.2773%" y="309" width="0.1631%" height="15" fill="rgb(210,85,47)" fg:x="126" fg:w="2"/><text x="10.5273%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.16%)</title><rect x="10.2773%" y="293" width="0.1631%" height="15" fill="rgb(224,206,25)" fg:x="126" fg:w="2"/><text x="10.5273%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.3589%" y="277" width="0.0816%" height="15" fill="rgb(243,201,19)" fg:x="127" fg:w="1"/><text x="10.6089%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.33%)</title><rect x="10.2773%" y="325" width="0.3263%" height="15" fill="rgb(236,59,4)" fg:x="126" fg:w="4"/><text x="10.5273%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="10.4405%" y="309" width="0.1631%" height="15" fill="rgb(254,179,45)" fg:x="128" fg:w="2"/><text x="10.6905%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="10.5220%" y="293" width="0.0816%" height="15" fill="rgb(226,14,10)" fg:x="129" fg:w="1"/><text x="10.7720%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="10.6852%" y="309" width="0.0816%" height="15" fill="rgb(244,27,41)" fg:x="131" fg:w="1"/><text x="10.9352%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="10.6852%" y="293" width="0.0816%" height="15" fill="rgb(235,35,32)" fg:x="131" fg:w="1"/><text x="10.9352%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.6852%" y="277" width="0.0816%" height="15" fill="rgb(218,68,31)" fg:x="131" fg:w="1"/><text x="10.9352%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.6852%" y="261" width="0.0816%" height="15" fill="rgb(207,120,37)" fg:x="131" fg:w="1"/><text x="10.9352%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="10.2773%" y="389" width="0.5710%" height="15" fill="rgb(227,98,0)" fg:x="126" fg:w="7"/><text x="10.5273%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="10.2773%" y="373" width="0.5710%" height="15" fill="rgb(207,7,3)" fg:x="126" fg:w="7"/><text x="10.5273%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (7 samples, 0.57%)</title><rect x="10.2773%" y="357" width="0.5710%" height="15" fill="rgb(206,98,19)" fg:x="126" fg:w="7"/><text x="10.5273%" y="367.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (7 samples, 0.57%)</title><rect x="10.2773%" y="341" width="0.5710%" height="15" fill="rgb(217,5,26)" fg:x="126" fg:w="7"/><text x="10.5273%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (3 samples, 0.24%)</title><rect x="10.6036%" y="325" width="0.2447%" height="15" fill="rgb(235,190,38)" fg:x="130" fg:w="3"/><text x="10.8536%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="10.7667%" y="309" width="0.0816%" height="15" fill="rgb(247,86,24)" fg:x="132" fg:w="1"/><text x="11.0167%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="10.7667%" y="293" width="0.0816%" height="15" fill="rgb(205,101,16)" fg:x="132" fg:w="1"/><text x="11.0167%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.7667%" y="277" width="0.0816%" height="15" fill="rgb(246,168,33)" fg:x="132" fg:w="1"/><text x="11.0167%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.7667%" y="261" width="0.0816%" height="15" fill="rgb(231,114,1)" fg:x="132" fg:w="1"/><text x="11.0167%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.8483%" y="357" width="0.0816%" height="15" fill="rgb(207,184,53)" fg:x="133" fg:w="1"/><text x="11.0983%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="10.9299%" y="341" width="0.0816%" height="15" fill="rgb(224,95,51)" fg:x="134" fg:w="1"/><text x="11.1799%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.9299%" y="325" width="0.0816%" height="15" fill="rgb(212,188,45)" fg:x="134" fg:w="1"/><text x="11.1799%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="10.9299%" y="357" width="0.2447%" height="15" fill="rgb(223,154,38)" fg:x="134" fg:w="3"/><text x="11.1799%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="11.0114%" y="341" width="0.1631%" height="15" fill="rgb(251,22,52)" fg:x="135" fg:w="2"/><text x="11.2614%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="11.0114%" y="325" width="0.1631%" height="15" fill="rgb(229,209,22)" fg:x="135" fg:w="2"/><text x="11.2614%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.41%)</title><rect x="10.8483%" y="389" width="0.4078%" height="15" fill="rgb(234,138,34)" fg:x="133" fg:w="5"/><text x="11.0983%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.41%)</title><rect x="10.8483%" y="373" width="0.4078%" height="15" fill="rgb(212,95,11)" fg:x="133" fg:w="5"/><text x="11.0983%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="11.1746%" y="357" width="0.0816%" height="15" fill="rgb(240,179,47)" fg:x="137" fg:w="1"/><text x="11.4246%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="11.1746%" y="341" width="0.0816%" height="15" fill="rgb(240,163,11)" fg:x="137" fg:w="1"/><text x="11.4246%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.1746%" y="325" width="0.0816%" height="15" fill="rgb(236,37,12)" fg:x="137" fg:w="1"/><text x="11.4246%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3377%" y="357" width="0.0816%" height="15" fill="rgb(232,164,16)" fg:x="139" fg:w="1"/><text x="11.5877%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.4192%" y="341" width="0.0816%" height="15" fill="rgb(244,205,15)" fg:x="140" fg:w="1"/><text x="11.6692%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.4192%" y="325" width="0.0816%" height="15" fill="rgb(223,117,47)" fg:x="140" fg:w="1"/><text x="11.6692%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="11.5008%" y="341" width="0.0816%" height="15" fill="rgb(244,107,35)" fg:x="141" fg:w="1"/><text x="11.7508%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.5008%" y="325" width="0.0816%" height="15" fill="rgb(205,140,8)" fg:x="141" fg:w="1"/><text x="11.7508%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="11.5008%" y="309" width="0.0816%" height="15" fill="rgb(228,84,46)" fg:x="141" fg:w="1"/><text x="11.7508%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.5008%" y="293" width="0.0816%" height="15" fill="rgb(254,188,9)" fg:x="141" fg:w="1"/><text x="11.7508%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.5008%" y="277" width="0.0816%" height="15" fill="rgb(206,112,54)" fg:x="141" fg:w="1"/><text x="11.7508%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.5008%" y="261" width="0.0816%" height="15" fill="rgb(216,84,49)" fg:x="141" fg:w="1"/><text x="11.7508%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="11.5824%" y="341" width="0.1631%" height="15" fill="rgb(214,194,35)" fg:x="142" fg:w="2"/><text x="11.8324%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1533%" y="325" width="0.0816%" height="15" fill="rgb(249,28,3)" fg:x="149" fg:w="1"/><text x="12.4033%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="12.3165%" y="309" width="0.1631%" height="15" fill="rgb(222,56,52)" fg:x="151" fg:w="2"/><text x="12.5665%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (31 samples, 2.53%)</title><rect x="12.2349%" y="325" width="2.5285%" height="15" fill="rgb(245,217,50)" fg:x="150" fg:w="31"/><text x="12.4849%" y="335.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (28 samples, 2.28%)</title><rect x="12.4796%" y="309" width="2.2838%" height="15" fill="rgb(213,201,24)" fg:x="153" fg:w="28"/><text x="12.7296%" y="319.50">c..</text></g><g><title>__libc_free (4 samples, 0.33%)</title><rect x="14.4372%" y="293" width="0.3263%" height="15" fill="rgb(248,116,28)" fg:x="177" fg:w="4"/><text x="14.6872%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="14.7635%" y="325" width="0.0816%" height="15" fill="rgb(219,72,43)" fg:x="181" fg:w="1"/><text x="15.0135%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.73%)</title><rect x="14.8450%" y="325" width="0.7341%" height="15" fill="rgb(209,138,14)" fg:x="182" fg:w="9"/><text x="15.0950%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="15.0897%" y="309" width="0.4894%" height="15" fill="rgb(222,18,33)" fg:x="185" fg:w="6"/><text x="15.3397%" y="319.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="15.9054%" y="261" width="0.1631%" height="15" fill="rgb(213,199,7)" fg:x="195" fg:w="2"/><text x="16.1554%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="16.0685%" y="261" width="0.1631%" height="15" fill="rgb(250,110,10)" fg:x="197" fg:w="2"/><text x="16.3185%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="16.1501%" y="245" width="0.0816%" height="15" fill="rgb(248,123,6)" fg:x="198" fg:w="1"/><text x="16.4001%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.1501%" y="229" width="0.0816%" height="15" fill="rgb(206,91,31)" fg:x="198" fg:w="1"/><text x="16.4001%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.1501%" y="213" width="0.0816%" height="15" fill="rgb(211,154,13)" fg:x="198" fg:w="1"/><text x="16.4001%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="16.2316%" y="261" width="0.2447%" height="15" fill="rgb(225,148,7)" fg:x="199" fg:w="3"/><text x="16.4816%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="16.3948%" y="245" width="0.0816%" height="15" fill="rgb(220,160,43)" fg:x="201" fg:w="1"/><text x="16.6448%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.3948%" y="229" width="0.0816%" height="15" fill="rgb(213,52,39)" fg:x="201" fg:w="1"/><text x="16.6448%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.3948%" y="213" width="0.0816%" height="15" fill="rgb(243,137,7)" fg:x="201" fg:w="1"/><text x="16.6448%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.4763%" y="197" width="0.1631%" height="15" fill="rgb(230,79,13)" fg:x="202" fg:w="2"/><text x="16.7263%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="16.4763%" y="229" width="0.2447%" height="15" fill="rgb(247,105,23)" fg:x="202" fg:w="3"/><text x="16.7263%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="16.4763%" y="213" width="0.2447%" height="15" fill="rgb(223,179,41)" fg:x="202" fg:w="3"/><text x="16.7263%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.6395%" y="197" width="0.0816%" height="15" fill="rgb(218,9,34)" fg:x="204" fg:w="1"/><text x="16.8895%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.49%)</title><rect x="16.4763%" y="261" width="0.4894%" height="15" fill="rgb(222,106,8)" fg:x="202" fg:w="6"/><text x="16.7263%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.49%)</title><rect x="16.4763%" y="245" width="0.4894%" height="15" fill="rgb(211,220,0)" fg:x="202" fg:w="6"/><text x="16.7263%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="16.7210%" y="229" width="0.2447%" height="15" fill="rgb(229,52,16)" fg:x="205" fg:w="3"/><text x="16.9710%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.8842%" y="213" width="0.0816%" height="15" fill="rgb(212,155,18)" fg:x="207" fg:w="1"/><text x="17.1342%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.9657%" y="229" width="0.0816%" height="15" fill="rgb(242,21,14)" fg:x="208" fg:w="1"/><text x="17.2157%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (111 samples, 9.05%)</title><rect x="16.9657%" y="261" width="9.0538%" height="15" fill="rgb(222,19,48)" fg:x="208" fg:w="111"/><text x="17.2157%" y="271.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (111 samples, 9.05%)</title><rect x="16.9657%" y="245" width="9.0538%" height="15" fill="rgb(232,45,27)" fg:x="208" fg:w="111"/><text x="17.2157%" y="255.50">regex_automat..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (110 samples, 8.97%)</title><rect x="17.0473%" y="229" width="8.9723%" height="15" fill="rgb(249,103,42)" fg:x="209" fg:w="110"/><text x="17.2973%" y="239.50">alloc::vec::V..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.33%)</title><rect x="26.0196%" y="261" width="0.3263%" height="15" fill="rgb(246,81,33)" fg:x="319" fg:w="4"/><text x="26.2696%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.2643%" y="245" width="0.0816%" height="15" fill="rgb(252,33,42)" fg:x="322" fg:w="1"/><text x="26.5143%" y="255.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="26.3458%" y="261" width="0.0816%" height="15" fill="rgb(209,212,41)" fg:x="323" fg:w="1"/><text x="26.5958%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (134 samples, 10.93%)</title><rect x="15.5791%" y="309" width="10.9299%" height="15" fill="rgb(207,154,6)" fg:x="191" fg:w="134"/><text x="15.8291%" y="319.50">&lt;core::iter::ada..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (133 samples, 10.85%)</title><rect x="15.6607%" y="293" width="10.8483%" height="15" fill="rgb(223,64,47)" fg:x="192" fg:w="133"/><text x="15.9107%" y="303.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (132 samples, 10.77%)</title><rect x="15.7423%" y="277" width="10.7667%" height="15" fill="rgb(211,161,38)" fg:x="193" fg:w="132"/><text x="15.9923%" y="287.50">regex_automata::..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="26.4274%" y="261" width="0.0816%" height="15" fill="rgb(219,138,40)" fg:x="324" fg:w="1"/><text x="26.6774%" y="271.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="26.9168%" y="293" width="0.0816%" height="15" fill="rgb(241,228,46)" fg:x="330" fg:w="1"/><text x="27.1668%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.9984%" y="293" width="0.0816%" height="15" fill="rgb(223,209,38)" fg:x="331" fg:w="1"/><text x="27.2484%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.9984%" y="277" width="0.0816%" height="15" fill="rgb(236,164,45)" fg:x="331" fg:w="1"/><text x="27.2484%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="27.2431%" y="245" width="0.2447%" height="15" fill="rgb(231,15,5)" fg:x="334" fg:w="3"/><text x="27.4931%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.49%)</title><rect x="27.0799%" y="293" width="0.4894%" height="15" fill="rgb(252,35,15)" fg:x="332" fg:w="6"/><text x="27.3299%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="27.2431%" y="277" width="0.3263%" height="15" fill="rgb(248,181,18)" fg:x="334" fg:w="4"/><text x="27.4931%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="27.2431%" y="261" width="0.3263%" height="15" fill="rgb(233,39,42)" fg:x="334" fg:w="4"/><text x="27.4931%" y="271.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="27.4878%" y="245" width="0.0816%" height="15" fill="rgb(238,110,33)" fg:x="337" fg:w="1"/><text x="27.7378%" y="255.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="27.4878%" y="229" width="0.0816%" height="15" fill="rgb(233,195,10)" fg:x="337" fg:w="1"/><text x="27.7378%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.49%)</title><rect x="27.5693%" y="293" width="0.4894%" height="15" fill="rgb(254,105,3)" fg:x="338" fg:w="6"/><text x="27.8193%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.9772%" y="277" width="0.0816%" height="15" fill="rgb(221,225,9)" fg:x="343" fg:w="1"/><text x="28.2272%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.9772%" y="261" width="0.0816%" height="15" fill="rgb(224,227,45)" fg:x="343" fg:w="1"/><text x="28.2272%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.9772%" y="245" width="0.0816%" height="15" fill="rgb(229,198,43)" fg:x="343" fg:w="1"/><text x="28.2272%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="28.0587%" y="293" width="0.0816%" height="15" fill="rgb(206,209,35)" fg:x="344" fg:w="1"/><text x="28.3087%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (21 samples, 1.71%)</title><rect x="26.5090%" y="309" width="1.7129%" height="15" fill="rgb(245,195,53)" fg:x="325" fg:w="21"/><text x="26.7590%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="28.1403%" y="293" width="0.0816%" height="15" fill="rgb(240,92,26)" fg:x="345" fg:w="1"/><text x="28.3903%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.1403%" y="277" width="0.0816%" height="15" fill="rgb(207,40,23)" fg:x="345" fg:w="1"/><text x="28.3903%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (157 samples, 12.81%)</title><rect x="15.5791%" y="325" width="12.8059%" height="15" fill="rgb(223,111,35)" fg:x="191" fg:w="157"/><text x="15.8291%" y="335.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="28.2219%" y="309" width="0.1631%" height="15" fill="rgb(229,147,28)" fg:x="346" fg:w="2"/><text x="28.4719%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="28.3034%" y="293" width="0.0816%" height="15" fill="rgb(211,29,28)" fg:x="347" fg:w="1"/><text x="28.5534%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (207 samples, 16.88%)</title><rect x="11.7455%" y="341" width="16.8842%" height="15" fill="rgb(228,72,33)" fg:x="144" fg:w="207"/><text x="11.9955%" y="351.50">regex_automata::meta::stra..</text></g><g><title>regex_automata::util::prefilter::suffixes (3 samples, 0.24%)</title><rect x="28.3850%" y="325" width="0.2447%" height="15" fill="rgb(205,214,31)" fg:x="348" fg:w="3"/><text x="28.6350%" y="335.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (2 samples, 0.16%)</title><rect x="28.4666%" y="309" width="0.1631%" height="15" fill="rgb(224,111,15)" fg:x="349" fg:w="2"/><text x="28.7166%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="28.7928%" y="293" width="0.1631%" height="15" fill="rgb(253,21,26)" fg:x="353" fg:w="2"/><text x="29.0428%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="28.8744%" y="277" width="0.0816%" height="15" fill="rgb(245,139,43)" fg:x="354" fg:w="1"/><text x="29.1244%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.73%)</title><rect x="28.7113%" y="309" width="0.7341%" height="15" fill="rgb(252,170,7)" fg:x="352" fg:w="9"/><text x="28.9613%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.49%)</title><rect x="28.9560%" y="293" width="0.4894%" height="15" fill="rgb(231,118,14)" fg:x="355" fg:w="6"/><text x="29.2060%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="29.1191%" y="277" width="0.3263%" height="15" fill="rgb(238,83,0)" fg:x="357" fg:w="4"/><text x="29.3691%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="29.1191%" y="261" width="0.3263%" height="15" fill="rgb(221,39,39)" fg:x="357" fg:w="4"/><text x="29.3691%" y="271.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="29.1191%" y="245" width="0.3263%" height="15" fill="rgb(222,119,46)" fg:x="357" fg:w="4"/><text x="29.3691%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="29.4454%" y="309" width="0.0816%" height="15" fill="rgb(222,165,49)" fg:x="361" fg:w="1"/><text x="29.6954%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.98%)</title><rect x="28.6297%" y="341" width="0.9788%" height="15" fill="rgb(219,113,52)" fg:x="351" fg:w="12"/><text x="28.8797%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.98%)</title><rect x="28.6297%" y="325" width="0.9788%" height="15" fill="rgb(214,7,15)" fg:x="351" fg:w="12"/><text x="28.8797%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="29.5269%" y="309" width="0.0816%" height="15" fill="rgb(235,32,4)" fg:x="362" fg:w="1"/><text x="29.7769%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="29.6085%" y="309" width="0.0816%" height="15" fill="rgb(238,90,54)" fg:x="363" fg:w="1"/><text x="29.8585%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="29.6085%" y="293" width="0.0816%" height="15" fill="rgb(213,208,19)" fg:x="363" fg:w="1"/><text x="29.8585%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (227 samples, 18.52%)</title><rect x="11.2561%" y="389" width="18.5155%" height="15" fill="rgb(233,156,4)" fg:x="138" fg:w="227"/><text x="11.5061%" y="399.50">regex::regex::string::Regex::..</text></g><g><title>regex::builders::Builder::build_one_string (227 samples, 18.52%)</title><rect x="11.2561%" y="373" width="18.5155%" height="15" fill="rgb(207,194,5)" fg:x="138" fg:w="227"/><text x="11.5061%" y="383.50">regex::builders::Builder::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (225 samples, 18.35%)</title><rect x="11.4192%" y="357" width="18.3524%" height="15" fill="rgb(206,111,30)" fg:x="140" fg:w="225"/><text x="11.6692%" y="367.50">regex_automata::meta::regex::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="29.6085%" y="341" width="0.1631%" height="15" fill="rgb(243,70,54)" fg:x="363" fg:w="2"/><text x="29.8585%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="29.6085%" y="325" width="0.1631%" height="15" fill="rgb(242,28,8)" fg:x="363" fg:w="2"/><text x="29.8585%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="29.6900%" y="309" width="0.0816%" height="15" fill="rgb(219,106,18)" fg:x="364" fg:w="1"/><text x="29.9400%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.0979%" y="309" width="0.0816%" height="15" fill="rgb(244,222,10)" fg:x="369" fg:w="1"/><text x="30.3479%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.0979%" y="293" width="0.0816%" height="15" fill="rgb(236,179,52)" fg:x="369" fg:w="1"/><text x="30.3479%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.1794%" y="293" width="0.0816%" height="15" fill="rgb(213,23,39)" fg:x="370" fg:w="1"/><text x="30.4294%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="30.1794%" y="277" width="0.0816%" height="15" fill="rgb(238,48,10)" fg:x="370" fg:w="1"/><text x="30.4294%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.1794%" y="309" width="0.1631%" height="15" fill="rgb(251,196,23)" fg:x="370" fg:w="2"/><text x="30.4294%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.2610%" y="293" width="0.0816%" height="15" fill="rgb(250,152,24)" fg:x="371" fg:w="1"/><text x="30.5110%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="30.2610%" y="277" width="0.0816%" height="15" fill="rgb(209,150,17)" fg:x="371" fg:w="1"/><text x="30.5110%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.98%)</title><rect x="29.7716%" y="325" width="0.9788%" height="15" fill="rgb(234,202,34)" fg:x="365" fg:w="12"/><text x="30.0216%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (5 samples, 0.41%)</title><rect x="30.3426%" y="309" width="0.4078%" height="15" fill="rgb(253,148,53)" fg:x="372" fg:w="5"/><text x="30.5926%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.14%)</title><rect x="29.7716%" y="341" width="1.1419%" height="15" fill="rgb(218,129,16)" fg:x="365" fg:w="14"/><text x="30.0216%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="30.7504%" y="325" width="0.1631%" height="15" fill="rgb(216,85,19)" fg:x="377" fg:w="2"/><text x="31.0004%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="30.7504%" y="309" width="0.1631%" height="15" fill="rgb(235,228,7)" fg:x="377" fg:w="2"/><text x="31.0004%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.8320%" y="293" width="0.0816%" height="15" fill="rgb(245,175,0)" fg:x="378" fg:w="1"/><text x="31.0820%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.8320%" y="277" width="0.0816%" height="15" fill="rgb(208,168,36)" fg:x="378" fg:w="1"/><text x="31.0820%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (256 samples, 20.88%)</title><rect x="10.1142%" y="405" width="20.8809%" height="15" fill="rgb(246,171,24)" fg:x="124" fg:w="256"/><text x="10.3642%" y="415.50">indefinite::helper::Helper::get_f..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.22%)</title><rect x="29.7716%" y="389" width="1.2235%" height="15" fill="rgb(215,142,24)" fg:x="365" fg:w="15"/><text x="30.0216%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.22%)</title><rect x="29.7716%" y="373" width="1.2235%" height="15" fill="rgb(250,187,7)" fg:x="365" fg:w="15"/><text x="30.0216%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.22%)</title><rect x="29.7716%" y="357" width="1.2235%" height="15" fill="rgb(228,66,33)" fg:x="365" fg:w="15"/><text x="30.0216%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="30.9135%" y="341" width="0.0816%" height="15" fill="rgb(234,215,21)" fg:x="379" fg:w="1"/><text x="31.1635%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.9951%" y="325" width="0.0816%" height="15" fill="rgb(222,191,20)" fg:x="380" fg:w="1"/><text x="31.2451%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="30.9951%" y="341" width="0.1631%" height="15" fill="rgb(245,79,54)" fg:x="380" fg:w="2"/><text x="31.2451%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.0767%" y="325" width="0.0816%" height="15" fill="rgb(240,10,37)" fg:x="381" fg:w="1"/><text x="31.3267%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="31.1582%" y="341" width="0.0816%" height="15" fill="rgb(214,192,32)" fg:x="382" fg:w="1"/><text x="31.4082%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.1582%" y="325" width="0.0816%" height="15" fill="rgb(209,36,54)" fg:x="382" fg:w="1"/><text x="31.4082%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.33%)</title><rect x="30.9951%" y="357" width="0.3263%" height="15" fill="rgb(220,10,11)" fg:x="380" fg:w="4"/><text x="31.2451%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="31.2398%" y="341" width="0.0816%" height="15" fill="rgb(221,106,17)" fg:x="383" fg:w="1"/><text x="31.4898%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.41%)</title><rect x="30.9951%" y="389" width="0.4078%" height="15" fill="rgb(251,142,44)" fg:x="380" fg:w="5"/><text x="31.2451%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.41%)</title><rect x="30.9951%" y="373" width="0.4078%" height="15" fill="rgb(238,13,15)" fg:x="380" fg:w="5"/><text x="31.2451%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="31.3214%" y="357" width="0.0816%" height="15" fill="rgb(208,107,27)" fg:x="384" fg:w="1"/><text x="31.5714%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.3214%" y="341" width="0.0816%" height="15" fill="rgb(205,136,37)" fg:x="384" fg:w="1"/><text x="31.5714%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.8108%" y="325" width="0.0816%" height="15" fill="rgb(250,205,27)" fg:x="390" fg:w="1"/><text x="32.0608%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (7 samples, 0.57%)</title><rect x="31.4029%" y="373" width="0.5710%" height="15" fill="rgb(210,80,43)" fg:x="385" fg:w="7"/><text x="31.6529%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.41%)</title><rect x="31.5661%" y="357" width="0.4078%" height="15" fill="rgb(247,160,36)" fg:x="387" fg:w="5"/><text x="31.8161%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (5 samples, 0.41%)</title><rect x="31.5661%" y="341" width="0.4078%" height="15" fill="rgb(234,13,49)" fg:x="387" fg:w="5"/><text x="31.8161%" y="351.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="31.8923%" y="325" width="0.0816%" height="15" fill="rgb(234,122,0)" fg:x="391" fg:w="1"/><text x="32.1423%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="32.7896%" y="293" width="0.2447%" height="15" fill="rgb(207,146,38)" fg:x="402" fg:w="3"/><text x="33.0396%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="32.7896%" y="277" width="0.2447%" height="15" fill="rgb(207,177,25)" fg:x="402" fg:w="3"/><text x="33.0396%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="32.8711%" y="261" width="0.1631%" height="15" fill="rgb(211,178,42)" fg:x="403" fg:w="2"/><text x="33.1211%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (18 samples, 1.47%)</title><rect x="31.9739%" y="309" width="1.4682%" height="15" fill="rgb(230,69,54)" fg:x="392" fg:w="18"/><text x="32.2239%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (5 samples, 0.41%)</title><rect x="33.0343%" y="293" width="0.4078%" height="15" fill="rgb(214,135,41)" fg:x="405" fg:w="5"/><text x="33.2843%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (19 samples, 1.55%)</title><rect x="31.9739%" y="325" width="1.5498%" height="15" fill="rgb(237,67,25)" fg:x="392" fg:w="19"/><text x="32.2239%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="33.4421%" y="309" width="0.0816%" height="15" fill="rgb(222,189,50)" fg:x="410" fg:w="1"/><text x="33.6921%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.4421%" y="293" width="0.0816%" height="15" fill="rgb(245,148,34)" fg:x="410" fg:w="1"/><text x="33.6921%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.4421%" y="277" width="0.0816%" height="15" fill="rgb(222,29,6)" fg:x="410" fg:w="1"/><text x="33.6921%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.4421%" y="261" width="0.0816%" height="15" fill="rgb(221,189,43)" fg:x="410" fg:w="1"/><text x="33.6921%" y="271.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (27 samples, 2.20%)</title><rect x="31.4029%" y="389" width="2.2023%" height="15" fill="rgb(207,36,27)" fg:x="385" fg:w="27"/><text x="31.6529%" y="399.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (20 samples, 1.63%)</title><rect x="31.9739%" y="373" width="1.6313%" height="15" fill="rgb(217,90,24)" fg:x="392" fg:w="20"/><text x="32.2239%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (20 samples, 1.63%)</title><rect x="31.9739%" y="357" width="1.6313%" height="15" fill="rgb(224,66,35)" fg:x="392" fg:w="20"/><text x="32.2239%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (20 samples, 1.63%)</title><rect x="31.9739%" y="341" width="1.6313%" height="15" fill="rgb(221,13,50)" fg:x="392" fg:w="20"/><text x="32.2239%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="33.5237%" y="325" width="0.0816%" height="15" fill="rgb(236,68,49)" fg:x="411" fg:w="1"/><text x="33.7737%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="33.5237%" y="309" width="0.0816%" height="15" fill="rgb(229,146,28)" fg:x="411" fg:w="1"/><text x="33.7737%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.5237%" y="293" width="0.0816%" height="15" fill="rgb(225,31,38)" fg:x="411" fg:w="1"/><text x="33.7737%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.5237%" y="277" width="0.0816%" height="15" fill="rgb(250,208,3)" fg:x="411" fg:w="1"/><text x="33.7737%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.5237%" y="261" width="0.0816%" height="15" fill="rgb(246,54,23)" fg:x="411" fg:w="1"/><text x="33.7737%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.8499%" y="325" width="0.0816%" height="15" fill="rgb(243,76,11)" fg:x="415" fg:w="1"/><text x="34.0999%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="33.8499%" y="309" width="0.0816%" height="15" fill="rgb(245,21,50)" fg:x="415" fg:w="1"/><text x="34.0999%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="33.8499%" y="341" width="0.1631%" height="15" fill="rgb(228,9,43)" fg:x="415" fg:w="2"/><text x="34.0999%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="33.9315%" y="325" width="0.0816%" height="15" fill="rgb(208,100,47)" fg:x="416" fg:w="1"/><text x="34.1815%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.1762%" y="309" width="0.0816%" height="15" fill="rgb(232,26,8)" fg:x="419" fg:w="1"/><text x="34.4262%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.1762%" y="293" width="0.0816%" height="15" fill="rgb(216,166,38)" fg:x="419" fg:w="1"/><text x="34.4262%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.1762%" y="277" width="0.0816%" height="15" fill="rgb(251,202,51)" fg:x="419" fg:w="1"/><text x="34.4262%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.1762%" y="261" width="0.0816%" height="15" fill="rgb(254,216,34)" fg:x="419" fg:w="1"/><text x="34.4262%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.33%)</title><rect x="34.0131%" y="341" width="0.3263%" height="15" fill="rgb(251,32,27)" fg:x="417" fg:w="4"/><text x="34.2631%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="34.0131%" y="325" width="0.3263%" height="15" fill="rgb(208,127,28)" fg:x="417" fg:w="4"/><text x="34.2631%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="34.2577%" y="309" width="0.0816%" height="15" fill="rgb(224,137,22)" fg:x="420" fg:w="1"/><text x="34.5077%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.2577%" y="293" width="0.0816%" height="15" fill="rgb(254,70,32)" fg:x="420" fg:w="1"/><text x="34.5077%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.2577%" y="277" width="0.0816%" height="15" fill="rgb(229,75,37)" fg:x="420" fg:w="1"/><text x="34.5077%" y="287.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="34.3393%" y="341" width="0.0816%" height="15" fill="rgb(252,64,23)" fg:x="421" fg:w="1"/><text x="34.5893%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.6656%" y="309" width="0.0816%" height="15" fill="rgb(232,162,48)" fg:x="425" fg:w="1"/><text x="34.9156%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (40 samples, 3.26%)</title><rect x="34.7471%" y="309" width="3.2626%" height="15" fill="rgb(246,160,12)" fg:x="426" fg:w="40"/><text x="34.9971%" y="319.50">cor..</text></g><g><title>__libc_free (8 samples, 0.65%)</title><rect x="37.3573%" y="293" width="0.6525%" height="15" fill="rgb(247,166,0)" fg:x="458" fg:w="8"/><text x="37.6073%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (42 samples, 3.43%)</title><rect x="34.6656%" y="325" width="3.4258%" height="15" fill="rgb(249,219,21)" fg:x="425" fg:w="42"/><text x="34.9156%" y="335.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="38.0098%" y="309" width="0.0816%" height="15" fill="rgb(205,209,3)" fg:x="466" fg:w="1"/><text x="38.2598%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="38.0914%" y="325" width="0.4078%" height="15" fill="rgb(243,44,1)" fg:x="467" fg:w="5"/><text x="38.3414%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.33%)</title><rect x="38.1729%" y="309" width="0.3263%" height="15" fill="rgb(206,159,16)" fg:x="468" fg:w="4"/><text x="38.4229%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="38.8254%" y="293" width="0.1631%" height="15" fill="rgb(244,77,30)" fg:x="476" fg:w="2"/><text x="39.0754%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="38.8254%" y="277" width="0.1631%" height="15" fill="rgb(218,69,12)" fg:x="476" fg:w="2"/><text x="39.0754%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.8254%" y="261" width="0.1631%" height="15" fill="rgb(212,87,7)" fg:x="476" fg:w="2"/><text x="39.0754%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="38.8254%" y="245" width="0.1631%" height="15" fill="rgb(245,114,25)" fg:x="476" fg:w="2"/><text x="39.0754%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.6411%" y="261" width="0.0816%" height="15" fill="rgb(210,61,42)" fg:x="486" fg:w="1"/><text x="39.8911%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.6411%" y="245" width="0.0816%" height="15" fill="rgb(211,52,33)" fg:x="486" fg:w="1"/><text x="39.8911%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.6411%" y="229" width="0.0816%" height="15" fill="rgb(234,58,33)" fg:x="486" fg:w="1"/><text x="39.8911%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (10 samples, 0.82%)</title><rect x="38.9886%" y="293" width="0.8157%" height="15" fill="rgb(220,115,36)" fg:x="478" fg:w="10"/><text x="39.2386%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.41%)</title><rect x="39.3964%" y="277" width="0.4078%" height="15" fill="rgb(243,153,54)" fg:x="483" fg:w="5"/><text x="39.6464%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.7227%" y="261" width="0.0816%" height="15" fill="rgb(251,47,18)" fg:x="487" fg:w="1"/><text x="39.9727%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.7227%" y="245" width="0.0816%" height="15" fill="rgb(242,102,42)" fg:x="487" fg:w="1"/><text x="39.9727%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.7227%" y="229" width="0.0816%" height="15" fill="rgb(234,31,38)" fg:x="487" fg:w="1"/><text x="39.9727%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (7 samples, 0.57%)</title><rect x="39.8042%" y="277" width="0.5710%" height="15" fill="rgb(221,117,51)" fg:x="488" fg:w="7"/><text x="40.0542%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (7 samples, 0.57%)</title><rect x="39.8042%" y="261" width="0.5710%" height="15" fill="rgb(212,20,18)" fg:x="488" fg:w="7"/><text x="40.0542%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.65%)</title><rect x="39.8042%" y="293" width="0.6525%" height="15" fill="rgb(245,133,36)" fg:x="488" fg:w="8"/><text x="40.0542%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="40.3752%" y="277" width="0.0816%" height="15" fill="rgb(212,6,19)" fg:x="495" fg:w="1"/><text x="40.6252%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (25 samples, 2.04%)</title><rect x="38.5808%" y="309" width="2.0392%" height="15" fill="rgb(218,1,36)" fg:x="473" fg:w="25"/><text x="38.8308%" y="319.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (2 samples, 0.16%)</title><rect x="40.4568%" y="293" width="0.1631%" height="15" fill="rgb(246,84,54)" fg:x="496" fg:w="2"/><text x="40.7068%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (27 samples, 2.20%)</title><rect x="38.4992%" y="325" width="2.2023%" height="15" fill="rgb(242,110,6)" fg:x="472" fg:w="27"/><text x="38.7492%" y="335.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.6199%" y="309" width="0.0816%" height="15" fill="rgb(214,47,5)" fg:x="498" fg:w="1"/><text x="40.8699%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="40.6199%" y="293" width="0.0816%" height="15" fill="rgb(218,159,25)" fg:x="498" fg:w="1"/><text x="40.8699%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="40.6199%" y="277" width="0.0816%" height="15" fill="rgb(215,211,28)" fg:x="498" fg:w="1"/><text x="40.8699%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.6199%" y="261" width="0.0816%" height="15" fill="rgb(238,59,32)" fg:x="498" fg:w="1"/><text x="40.8699%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.6199%" y="245" width="0.0816%" height="15" fill="rgb(226,82,3)" fg:x="498" fg:w="1"/><text x="40.8699%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.6199%" y="229" width="0.0816%" height="15" fill="rgb(240,164,32)" fg:x="498" fg:w="1"/><text x="40.8699%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="40.7015%" y="277" width="0.0816%" height="15" fill="rgb(232,46,7)" fg:x="499" fg:w="1"/><text x="40.9515%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.7015%" y="261" width="0.0816%" height="15" fill="rgb(229,129,53)" fg:x="499" fg:w="1"/><text x="40.9515%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.7015%" y="245" width="0.0816%" height="15" fill="rgb(234,188,29)" fg:x="499" fg:w="1"/><text x="40.9515%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.7015%" y="229" width="0.0816%" height="15" fill="rgb(246,141,4)" fg:x="499" fg:w="1"/><text x="40.9515%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="40.7830%" y="261" width="0.0816%" height="15" fill="rgb(229,23,39)" fg:x="500" fg:w="1"/><text x="41.0330%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="40.8646%" y="229" width="0.0816%" height="15" fill="rgb(206,12,3)" fg:x="501" fg:w="1"/><text x="41.1146%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="42.0881%" y="213" width="0.2447%" height="15" fill="rgb(252,226,20)" fg:x="516" fg:w="3"/><text x="42.3381%" y="223.50"></text></g><g><title>__libc_free (4 samples, 0.33%)</title><rect x="42.3328%" y="213" width="0.3263%" height="15" fill="rgb(216,123,35)" fg:x="519" fg:w="4"/><text x="42.5828%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.33%)</title><rect x="42.6591%" y="213" width="0.3263%" height="15" fill="rgb(212,68,40)" fg:x="523" fg:w="4"/><text x="42.9091%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="42.7406%" y="197" width="0.2447%" height="15" fill="rgb(254,125,32)" fg:x="524" fg:w="3"/><text x="42.9906%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="42.7406%" y="181" width="0.2447%" height="15" fill="rgb(253,97,22)" fg:x="524" fg:w="3"/><text x="42.9906%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="42.7406%" y="165" width="0.2447%" height="15" fill="rgb(241,101,14)" fg:x="524" fg:w="3"/><text x="42.9906%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.33%)</title><rect x="42.9853%" y="213" width="0.3263%" height="15" fill="rgb(238,103,29)" fg:x="527" fg:w="4"/><text x="43.2353%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.2300%" y="197" width="0.0816%" height="15" fill="rgb(233,195,47)" fg:x="530" fg:w="1"/><text x="43.4800%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.2300%" y="181" width="0.0816%" height="15" fill="rgb(246,218,30)" fg:x="530" fg:w="1"/><text x="43.4800%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.2300%" y="165" width="0.0816%" height="15" fill="rgb(219,145,47)" fg:x="530" fg:w="1"/><text x="43.4800%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.5563%" y="181" width="0.0816%" height="15" fill="rgb(243,12,26)" fg:x="534" fg:w="1"/><text x="43.8063%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="43.7194%" y="149" width="0.1631%" height="15" fill="rgb(214,87,16)" fg:x="536" fg:w="2"/><text x="43.9694%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.41%)</title><rect x="43.6378%" y="181" width="0.4078%" height="15" fill="rgb(208,99,42)" fg:x="535" fg:w="5"/><text x="43.8878%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="43.7194%" y="165" width="0.3263%" height="15" fill="rgb(253,99,2)" fg:x="536" fg:w="4"/><text x="43.9694%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.8825%" y="149" width="0.1631%" height="15" fill="rgb(220,168,23)" fg:x="538" fg:w="2"/><text x="44.1325%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.9429%" y="165" width="0.0816%" height="15" fill="rgb(242,38,24)" fg:x="551" fg:w="1"/><text x="45.1929%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (24 samples, 1.96%)</title><rect x="43.3116%" y="213" width="1.9576%" height="15" fill="rgb(225,182,9)" fg:x="531" fg:w="24"/><text x="43.5616%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (24 samples, 1.96%)</title><rect x="43.3116%" y="197" width="1.9576%" height="15" fill="rgb(243,178,37)" fg:x="531" fg:w="24"/><text x="43.5616%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (15 samples, 1.22%)</title><rect x="44.0457%" y="181" width="1.2235%" height="15" fill="rgb(232,139,19)" fg:x="540" fg:w="15"/><text x="44.2957%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="45.0245%" y="165" width="0.2447%" height="15" fill="rgb(225,201,24)" fg:x="552" fg:w="3"/><text x="45.2745%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="45.0245%" y="149" width="0.2447%" height="15" fill="rgb(221,47,46)" fg:x="552" fg:w="3"/><text x="45.2745%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="45.0245%" y="133" width="0.2447%" height="15" fill="rgb(249,23,13)" fg:x="552" fg:w="3"/><text x="45.2745%" y="143.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="45.0245%" y="117" width="0.2447%" height="15" fill="rgb(219,9,5)" fg:x="552" fg:w="3"/><text x="45.2745%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.2692%" y="197" width="0.0816%" height="15" fill="rgb(254,171,16)" fg:x="555" fg:w="1"/><text x="45.5192%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.2692%" y="181" width="0.0816%" height="15" fill="rgb(230,171,20)" fg:x="555" fg:w="1"/><text x="45.5192%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (117 samples, 9.54%)</title><rect x="45.2692%" y="213" width="9.5432%" height="15" fill="rgb(210,71,41)" fg:x="555" fg:w="117"/><text x="45.5192%" y="223.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (116 samples, 9.46%)</title><rect x="45.3507%" y="197" width="9.4617%" height="15" fill="rgb(206,173,20)" fg:x="556" fg:w="116"/><text x="45.6007%" y="207.50">regex_automata..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (115 samples, 9.38%)</title><rect x="45.4323%" y="181" width="9.3801%" height="15" fill="rgb(233,88,34)" fg:x="557" fg:w="115"/><text x="45.6823%" y="191.50">alloc::vec::V..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.49%)</title><rect x="54.8124%" y="213" width="0.4894%" height="15" fill="rgb(223,209,46)" fg:x="672" fg:w="6"/><text x="55.0624%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.2202%" y="197" width="0.0816%" height="15" fill="rgb(250,43,18)" fg:x="677" fg:w="1"/><text x="55.4702%" y="207.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="55.3018%" y="213" width="0.1631%" height="15" fill="rgb(208,13,10)" fg:x="678" fg:w="2"/><text x="55.5518%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (191 samples, 15.58%)</title><rect x="40.7015%" y="309" width="15.5791%" height="15" fill="rgb(212,200,36)" fg:x="499" fg:w="191"/><text x="40.9515%" y="319.50">&lt;core::iter::adapters::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (191 samples, 15.58%)</title><rect x="40.7015%" y="293" width="15.5791%" height="15" fill="rgb(225,90,30)" fg:x="499" fg:w="191"/><text x="40.9515%" y="303.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (190 samples, 15.50%)</title><rect x="40.7830%" y="277" width="15.4976%" height="15" fill="rgb(236,182,39)" fg:x="500" fg:w="190"/><text x="41.0330%" y="287.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (189 samples, 15.42%)</title><rect x="40.8646%" y="261" width="15.4160%" height="15" fill="rgb(212,144,35)" fg:x="501" fg:w="189"/><text x="41.1146%" y="271.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (189 samples, 15.42%)</title><rect x="40.8646%" y="245" width="15.4160%" height="15" fill="rgb(228,63,44)" fg:x="501" fg:w="189"/><text x="41.1146%" y="255.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (188 samples, 15.33%)</title><rect x="40.9462%" y="229" width="15.3344%" height="15" fill="rgb(228,109,6)" fg:x="502" fg:w="188"/><text x="41.1962%" y="239.50">regex_automata::nfa::th..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (10 samples, 0.82%)</title><rect x="55.4649%" y="213" width="0.8157%" height="15" fill="rgb(238,117,24)" fg:x="680" fg:w="10"/><text x="55.7149%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.65%)</title><rect x="55.6281%" y="197" width="0.6525%" height="15" fill="rgb(242,26,26)" fg:x="682" fg:w="8"/><text x="55.8781%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="55.8728%" y="181" width="0.4078%" height="15" fill="rgb(221,92,48)" fg:x="685" fg:w="5"/><text x="56.1228%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="56.0359%" y="165" width="0.2447%" height="15" fill="rgb(209,209,32)" fg:x="687" fg:w="3"/><text x="56.2859%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="56.2806%" y="309" width="0.0816%" height="15" fill="rgb(221,70,22)" fg:x="690" fg:w="1"/><text x="56.5306%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.2806%" y="293" width="0.0816%" height="15" fill="rgb(248,145,5)" fg:x="690" fg:w="1"/><text x="56.5306%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.2806%" y="277" width="0.0816%" height="15" fill="rgb(226,116,26)" fg:x="690" fg:w="1"/><text x="56.5306%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.2806%" y="261" width="0.0816%" height="15" fill="rgb(244,5,17)" fg:x="690" fg:w="1"/><text x="56.5306%" y="271.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="56.7700%" y="293" width="0.0816%" height="15" fill="rgb(252,159,33)" fg:x="696" fg:w="1"/><text x="57.0200%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.8515%" y="293" width="0.0816%" height="15" fill="rgb(206,71,0)" fg:x="697" fg:w="1"/><text x="57.1015%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.49%)</title><rect x="57.6672%" y="277" width="0.4894%" height="15" fill="rgb(233,118,54)" fg:x="707" fg:w="6"/><text x="57.9172%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.49%)</title><rect x="57.6672%" y="261" width="0.4894%" height="15" fill="rgb(234,83,48)" fg:x="707" fg:w="6"/><text x="57.9172%" y="271.50"></text></g><g><title>realloc (6 samples, 0.49%)</title><rect x="57.6672%" y="245" width="0.4894%" height="15" fill="rgb(228,3,54)" fg:x="707" fg:w="6"/><text x="57.9172%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (16 samples, 1.31%)</title><rect x="56.9331%" y="293" width="1.3051%" height="15" fill="rgb(226,155,13)" fg:x="698" fg:w="16"/><text x="57.1831%" y="303.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="58.1566%" y="277" width="0.0816%" height="15" fill="rgb(241,28,37)" fg:x="713" fg:w="1"/><text x="58.4066%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="58.2382%" y="293" width="0.3263%" height="15" fill="rgb(233,93,10)" fg:x="714" fg:w="4"/><text x="58.4882%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="58.4013%" y="277" width="0.1631%" height="15" fill="rgb(225,113,19)" fg:x="716" fg:w="2"/><text x="58.6513%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (4 samples, 0.33%)</title><rect x="58.5644%" y="293" width="0.3263%" height="15" fill="rgb(241,2,18)" fg:x="718" fg:w="4"/><text x="58.8144%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (225 samples, 18.35%)</title><rect x="40.7015%" y="325" width="18.3524%" height="15" fill="rgb(228,207,21)" fg:x="499" fg:w="225"/><text x="40.9515%" y="335.50">regex_automata::nfa::thompson..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (33 samples, 2.69%)</title><rect x="56.3622%" y="309" width="2.6917%" height="15" fill="rgb(213,211,35)" fg:x="691" fg:w="33"/><text x="56.6122%" y="319.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="58.8907%" y="293" width="0.1631%" height="15" fill="rgb(209,83,10)" fg:x="722" fg:w="2"/><text x="59.1407%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="58.8907%" y="277" width="0.1631%" height="15" fill="rgb(209,164,1)" fg:x="722" fg:w="2"/><text x="59.1407%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="58.8907%" y="261" width="0.1631%" height="15" fill="rgb(213,184,43)" fg:x="722" fg:w="2"/><text x="59.1407%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="58.8907%" y="245" width="0.1631%" height="15" fill="rgb(231,61,34)" fg:x="722" fg:w="2"/><text x="59.1407%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (303 samples, 24.71%)</title><rect x="34.4209%" y="341" width="24.7145%" height="15" fill="rgb(235,75,3)" fg:x="422" fg:w="303"/><text x="34.6709%" y="351.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="59.0538%" y="325" width="0.0816%" height="15" fill="rgb(220,106,47)" fg:x="724" fg:w="1"/><text x="59.3038%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="59.0538%" y="309" width="0.0816%" height="15" fill="rgb(210,196,33)" fg:x="724" fg:w="1"/><text x="59.3038%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="59.0538%" y="293" width="0.0816%" height="15" fill="rgb(229,154,42)" fg:x="724" fg:w="1"/><text x="59.3038%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="59.2170%" y="293" width="0.0816%" height="15" fill="rgb(228,114,26)" fg:x="726" fg:w="1"/><text x="59.4670%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.2170%" y="277" width="0.0816%" height="15" fill="rgb(208,144,1)" fg:x="726" fg:w="1"/><text x="59.4670%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.2170%" y="261" width="0.0816%" height="15" fill="rgb(239,112,37)" fg:x="726" fg:w="1"/><text x="59.4670%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.41%)</title><rect x="59.1354%" y="309" width="0.4078%" height="15" fill="rgb(210,96,50)" fg:x="725" fg:w="5"/><text x="59.3854%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="59.2985%" y="293" width="0.2447%" height="15" fill="rgb(222,178,2)" fg:x="727" fg:w="3"/><text x="59.5485%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.3801%" y="277" width="0.1631%" height="15" fill="rgb(226,74,18)" fg:x="728" fg:w="2"/><text x="59.6301%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.3801%" y="261" width="0.1631%" height="15" fill="rgb(225,67,54)" fg:x="728" fg:w="2"/><text x="59.6301%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.3801%" y="245" width="0.1631%" height="15" fill="rgb(251,92,32)" fg:x="728" fg:w="2"/><text x="59.6301%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="59.5432%" y="309" width="0.0816%" height="15" fill="rgb(228,149,22)" fg:x="730" fg:w="1"/><text x="59.7932%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="59.5432%" y="293" width="0.0816%" height="15" fill="rgb(243,54,13)" fg:x="730" fg:w="1"/><text x="59.7932%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.57%)</title><rect x="59.1354%" y="341" width="0.5710%" height="15" fill="rgb(243,180,28)" fg:x="725" fg:w="7"/><text x="59.3854%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.57%)</title><rect x="59.1354%" y="325" width="0.5710%" height="15" fill="rgb(208,167,24)" fg:x="725" fg:w="7"/><text x="59.3854%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="59.6248%" y="309" width="0.0816%" height="15" fill="rgb(245,73,45)" fg:x="731" fg:w="1"/><text x="59.8748%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.8695%" y="293" width="0.0816%" height="15" fill="rgb(237,203,48)" fg:x="734" fg:w="1"/><text x="60.1195%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.8695%" y="277" width="0.0816%" height="15" fill="rgb(211,197,16)" fg:x="734" fg:w="1"/><text x="60.1195%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.8695%" y="261" width="0.0816%" height="15" fill="rgb(243,99,51)" fg:x="734" fg:w="1"/><text x="60.1195%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.33%)</title><rect x="59.8695%" y="309" width="0.3263%" height="15" fill="rgb(215,123,29)" fg:x="734" fg:w="4"/><text x="60.1195%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="59.9511%" y="293" width="0.2447%" height="15" fill="rgb(239,186,37)" fg:x="735" fg:w="3"/><text x="60.2011%" y="303.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="60.1142%" y="277" width="0.0816%" height="15" fill="rgb(252,136,39)" fg:x="737" fg:w="1"/><text x="60.3642%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.2773%" y="293" width="0.0816%" height="15" fill="rgb(223,213,32)" fg:x="739" fg:w="1"/><text x="60.5273%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (361 samples, 29.45%)</title><rect x="30.9951%" y="405" width="29.4454%" height="15" fill="rgb(233,115,5)" fg:x="380" fg:w="361"/><text x="31.2451%" y="415.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (329 samples, 26.84%)</title><rect x="33.6052%" y="389" width="26.8352%" height="15" fill="rgb(207,226,44)" fg:x="412" fg:w="329"/><text x="33.8552%" y="399.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (328 samples, 26.75%)</title><rect x="33.6868%" y="373" width="26.7537%" height="15" fill="rgb(208,126,0)" fg:x="413" fg:w="328"/><text x="33.9368%" y="383.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::build (328 samples, 26.75%)</title><rect x="33.6868%" y="357" width="26.7537%" height="15" fill="rgb(244,66,21)" fg:x="413" fg:w="328"/><text x="33.9368%" y="367.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.73%)</title><rect x="59.7064%" y="341" width="0.7341%" height="15" fill="rgb(222,97,12)" fg:x="732" fg:w="9"/><text x="59.9564%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.73%)</title><rect x="59.7064%" y="325" width="0.7341%" height="15" fill="rgb(219,213,19)" fg:x="732" fg:w="9"/><text x="59.9564%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="60.1958%" y="309" width="0.2447%" height="15" fill="rgb(252,169,30)" fg:x="738" fg:w="3"/><text x="60.4458%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="60.3589%" y="293" width="0.0816%" height="15" fill="rgb(206,32,51)" fg:x="740" fg:w="1"/><text x="60.6089%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3589%" y="277" width="0.0816%" height="15" fill="rgb(250,172,42)" fg:x="740" fg:w="1"/><text x="60.6089%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="60.5220%" y="373" width="0.0816%" height="15" fill="rgb(209,34,43)" fg:x="742" fg:w="1"/><text x="60.7720%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="60.5220%" y="357" width="0.0816%" height="15" fill="rgb(223,11,35)" fg:x="742" fg:w="1"/><text x="60.7720%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="60.5220%" y="341" width="0.0816%" height="15" fill="rgb(251,219,26)" fg:x="742" fg:w="1"/><text x="60.7720%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="60.6036%" y="325" width="0.1631%" height="15" fill="rgb(231,119,3)" fg:x="743" fg:w="2"/><text x="60.8536%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.6852%" y="309" width="0.0816%" height="15" fill="rgb(216,97,11)" fg:x="744" fg:w="1"/><text x="60.9352%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="60.6852%" y="293" width="0.0816%" height="15" fill="rgb(223,59,9)" fg:x="744" fg:w="1"/><text x="60.9352%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="60.7667%" y="325" width="0.1631%" height="15" fill="rgb(233,93,31)" fg:x="745" fg:w="2"/><text x="61.0167%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="60.9299%" y="293" width="0.0816%" height="15" fill="rgb(239,81,33)" fg:x="747" fg:w="1"/><text x="61.1799%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.9299%" y="277" width="0.0816%" height="15" fill="rgb(213,120,34)" fg:x="747" fg:w="1"/><text x="61.1799%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="61.0114%" y="293" width="0.0816%" height="15" fill="rgb(243,49,53)" fg:x="748" fg:w="1"/><text x="61.2614%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="61.0930%" y="261" width="0.1631%" height="15" fill="rgb(247,216,33)" fg:x="749" fg:w="2"/><text x="61.3430%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.1746%" y="245" width="0.0816%" height="15" fill="rgb(226,26,14)" fg:x="750" fg:w="1"/><text x="61.4246%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.41%)</title><rect x="60.9299%" y="325" width="0.4078%" height="15" fill="rgb(215,49,53)" fg:x="747" fg:w="5"/><text x="61.1799%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="60.9299%" y="309" width="0.4078%" height="15" fill="rgb(245,162,40)" fg:x="747" fg:w="5"/><text x="61.1799%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="61.0930%" y="293" width="0.2447%" height="15" fill="rgb(229,68,17)" fg:x="749" fg:w="3"/><text x="61.3430%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.0930%" y="277" width="0.2447%" height="15" fill="rgb(213,182,10)" fg:x="749" fg:w="3"/><text x="61.3430%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="61.2561%" y="261" width="0.0816%" height="15" fill="rgb(245,125,30)" fg:x="751" fg:w="1"/><text x="61.5061%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.2561%" y="245" width="0.0816%" height="15" fill="rgb(232,202,2)" fg:x="751" fg:w="1"/><text x="61.5061%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="61.5824%" y="309" width="0.0816%" height="15" fill="rgb(237,140,51)" fg:x="755" fg:w="1"/><text x="61.8324%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="61.6639%" y="309" width="0.1631%" height="15" fill="rgb(236,157,25)" fg:x="756" fg:w="2"/><text x="61.9139%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="61.6639%" y="293" width="0.1631%" height="15" fill="rgb(219,209,0)" fg:x="756" fg:w="2"/><text x="61.9139%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="61.6639%" y="277" width="0.1631%" height="15" fill="rgb(240,116,54)" fg:x="756" fg:w="2"/><text x="61.9139%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (2 samples, 0.16%)</title><rect x="61.6639%" y="261" width="0.1631%" height="15" fill="rgb(216,10,36)" fg:x="756" fg:w="2"/><text x="61.9139%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.33%)</title><rect x="61.9902%" y="293" width="0.3263%" height="15" fill="rgb(222,72,44)" fg:x="760" fg:w="4"/><text x="62.2402%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.57%)</title><rect x="61.8271%" y="309" width="0.5710%" height="15" fill="rgb(232,159,9)" fg:x="758" fg:w="7"/><text x="62.0771%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="62.3165%" y="293" width="0.0816%" height="15" fill="rgb(210,39,32)" fg:x="764" fg:w="1"/><text x="62.5665%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="62.3165%" y="277" width="0.0816%" height="15" fill="rgb(216,194,45)" fg:x="764" fg:w="1"/><text x="62.5665%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="62.3165%" y="261" width="0.0816%" height="15" fill="rgb(218,18,35)" fg:x="764" fg:w="1"/><text x="62.5665%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.3165%" y="245" width="0.0816%" height="15" fill="rgb(207,83,51)" fg:x="764" fg:w="1"/><text x="62.5665%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.3165%" y="229" width="0.0816%" height="15" fill="rgb(225,63,43)" fg:x="764" fg:w="1"/><text x="62.5665%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.3165%" y="213" width="0.0816%" height="15" fill="rgb(207,57,36)" fg:x="764" fg:w="1"/><text x="62.5665%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="62.4796%" y="277" width="0.0816%" height="15" fill="rgb(216,99,33)" fg:x="766" fg:w="1"/><text x="62.7296%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.4796%" y="261" width="0.0816%" height="15" fill="rgb(225,42,16)" fg:x="766" fg:w="1"/><text x="62.7296%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.4796%" y="245" width="0.0816%" height="15" fill="rgb(220,201,45)" fg:x="766" fg:w="1"/><text x="62.7296%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.4796%" y="229" width="0.0816%" height="15" fill="rgb(225,33,4)" fg:x="766" fg:w="1"/><text x="62.7296%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="62.4796%" y="293" width="0.1631%" height="15" fill="rgb(224,33,50)" fg:x="766" fg:w="2"/><text x="62.7296%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="62.5612%" y="277" width="0.0816%" height="15" fill="rgb(246,198,51)" fg:x="767" fg:w="1"/><text x="62.8112%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="62.5612%" y="261" width="0.0816%" height="15" fill="rgb(205,22,4)" fg:x="767" fg:w="1"/><text x="62.8112%" y="271.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="62.8059%" y="277" width="0.1631%" height="15" fill="rgb(206,3,8)" fg:x="770" fg:w="2"/><text x="63.0559%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.9690%" y="277" width="0.0816%" height="15" fill="rgb(251,23,15)" fg:x="772" fg:w="1"/><text x="63.2190%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="63.0506%" y="277" width="0.0816%" height="15" fill="rgb(252,88,28)" fg:x="773" fg:w="1"/><text x="63.3006%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (25 samples, 2.04%)</title><rect x="61.3377%" y="325" width="2.0392%" height="15" fill="rgb(212,127,14)" fg:x="752" fg:w="25"/><text x="61.5877%" y="335.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (12 samples, 0.98%)</title><rect x="62.3980%" y="309" width="0.9788%" height="15" fill="rgb(247,145,37)" fg:x="765" fg:w="12"/><text x="62.6480%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.73%)</title><rect x="62.6427%" y="293" width="0.7341%" height="15" fill="rgb(209,117,53)" fg:x="768" fg:w="9"/><text x="62.8927%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="63.1321%" y="277" width="0.2447%" height="15" fill="rgb(212,90,42)" fg:x="774" fg:w="3"/><text x="63.3821%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.2953%" y="261" width="0.0816%" height="15" fill="rgb(218,164,37)" fg:x="776" fg:w="1"/><text x="63.5453%" y="271.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="63.6215%" y="277" width="0.1631%" height="15" fill="rgb(246,65,34)" fg:x="780" fg:w="2"/><text x="63.8715%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.7031%" y="261" width="0.0816%" height="15" fill="rgb(231,100,33)" fg:x="781" fg:w="1"/><text x="63.9531%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.7031%" y="245" width="0.0816%" height="15" fill="rgb(228,126,14)" fg:x="781" fg:w="1"/><text x="63.9531%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.7031%" y="229" width="0.0816%" height="15" fill="rgb(215,173,21)" fg:x="781" fg:w="1"/><text x="63.9531%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="63.7847%" y="277" width="0.0816%" height="15" fill="rgb(210,6,40)" fg:x="782" fg:w="1"/><text x="64.0347%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="63.7847%" y="261" width="0.0816%" height="15" fill="rgb(212,48,18)" fg:x="782" fg:w="1"/><text x="64.0347%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="63.7847%" y="245" width="0.0816%" height="15" fill="rgb(230,214,11)" fg:x="782" fg:w="1"/><text x="64.0347%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="63.4584%" y="293" width="0.4894%" height="15" fill="rgb(254,105,39)" fg:x="778" fg:w="6"/><text x="63.7084%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="63.8662%" y="277" width="0.0816%" height="15" fill="rgb(245,158,5)" fg:x="783" fg:w="1"/><text x="64.1162%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="63.8662%" y="261" width="0.0816%" height="15" fill="rgb(249,208,11)" fg:x="783" fg:w="1"/><text x="64.1162%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="63.8662%" y="245" width="0.0816%" height="15" fill="rgb(210,39,28)" fg:x="783" fg:w="1"/><text x="64.1162%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.82%)</title><rect x="63.3768%" y="325" width="0.8157%" height="15" fill="rgb(211,56,53)" fg:x="777" fg:w="10"/><text x="63.6268%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.82%)</title><rect x="63.3768%" y="309" width="0.8157%" height="15" fill="rgb(226,201,30)" fg:x="777" fg:w="10"/><text x="63.6268%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="63.9478%" y="293" width="0.2447%" height="15" fill="rgb(239,101,34)" fg:x="784" fg:w="3"/><text x="64.1978%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="64.4372%" y="277" width="0.1631%" height="15" fill="rgb(226,209,5)" fg:x="790" fg:w="2"/><text x="64.6872%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="64.6003%" y="277" width="0.2447%" height="15" fill="rgb(250,105,47)" fg:x="792" fg:w="3"/><text x="64.8503%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.7635%" y="261" width="0.0816%" height="15" fill="rgb(230,72,3)" fg:x="794" fg:w="1"/><text x="65.0135%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.7635%" y="245" width="0.0816%" height="15" fill="rgb(232,218,39)" fg:x="794" fg:w="1"/><text x="65.0135%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.7635%" y="229" width="0.0816%" height="15" fill="rgb(248,166,6)" fg:x="794" fg:w="1"/><text x="65.0135%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (8 samples, 0.65%)</title><rect x="64.2741%" y="293" width="0.6525%" height="15" fill="rgb(247,89,20)" fg:x="788" fg:w="8"/><text x="64.5241%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="64.8450%" y="277" width="0.0816%" height="15" fill="rgb(248,130,54)" fg:x="795" fg:w="1"/><text x="65.0950%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="64.9266%" y="293" width="0.1631%" height="15" fill="rgb(234,196,4)" fg:x="796" fg:w="2"/><text x="65.1766%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::class (2 samples, 0.16%)</title><rect x="64.9266%" y="277" width="0.1631%" height="15" fill="rgb(250,143,31)" fg:x="796" fg:w="2"/><text x="65.1766%" y="287.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="65.0082%" y="261" width="0.0816%" height="15" fill="rgb(211,110,34)" fg:x="797" fg:w="1"/><text x="65.2582%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (57 samples, 4.65%)</title><rect x="60.6036%" y="341" width="4.6493%" height="15" fill="rgb(215,124,48)" fg:x="743" fg:w="57"/><text x="60.8536%" y="351.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (13 samples, 1.06%)</title><rect x="64.1925%" y="325" width="1.0604%" height="15" fill="rgb(216,46,13)" fg:x="787" fg:w="13"/><text x="64.4425%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (13 samples, 1.06%)</title><rect x="64.1925%" y="309" width="1.0604%" height="15" fill="rgb(205,184,25)" fg:x="787" fg:w="13"/><text x="64.4425%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="65.0897%" y="293" width="0.1631%" height="15" fill="rgb(228,1,10)" fg:x="798" fg:w="2"/><text x="65.3397%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="65.0897%" y="277" width="0.1631%" height="15" fill="rgb(213,116,27)" fg:x="798" fg:w="2"/><text x="65.3397%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (58 samples, 4.73%)</title><rect x="60.6036%" y="373" width="4.7308%" height="15" fill="rgb(241,95,50)" fg:x="743" fg:w="58"/><text x="60.8536%" y="383.50">regex:..</text></g><g><title>regex::builders::Builder::build_one_string (58 samples, 4.73%)</title><rect x="60.6036%" y="357" width="4.7308%" height="15" fill="rgb(238,48,32)" fg:x="743" fg:w="58"/><text x="60.8536%" y="367.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="65.2529%" y="341" width="0.0816%" height="15" fill="rgb(235,113,49)" fg:x="800" fg:w="1"/><text x="65.5029%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="65.3344%" y="309" width="0.1631%" height="15" fill="rgb(205,127,43)" fg:x="801" fg:w="2"/><text x="65.5844%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.4160%" y="293" width="0.0816%" height="15" fill="rgb(250,162,2)" fg:x="802" fg:w="1"/><text x="65.6660%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="65.4160%" y="277" width="0.0816%" height="15" fill="rgb(220,13,41)" fg:x="802" fg:w="1"/><text x="65.6660%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="65.7423%" y="293" width="0.1631%" height="15" fill="rgb(249,221,25)" fg:x="806" fg:w="2"/><text x="65.9923%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.7423%" y="277" width="0.1631%" height="15" fill="rgb(215,208,19)" fg:x="806" fg:w="2"/><text x="65.9923%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="65.7423%" y="261" width="0.1631%" height="15" fill="rgb(236,175,2)" fg:x="806" fg:w="2"/><text x="65.9923%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.9054%" y="293" width="0.0816%" height="15" fill="rgb(241,52,2)" fg:x="808" fg:w="1"/><text x="66.1554%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.9054%" y="277" width="0.0816%" height="15" fill="rgb(248,140,14)" fg:x="808" fg:w="1"/><text x="66.1554%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.57%)</title><rect x="65.4976%" y="309" width="0.5710%" height="15" fill="rgb(253,22,42)" fg:x="803" fg:w="7"/><text x="65.7476%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="65.9869%" y="293" width="0.0816%" height="15" fill="rgb(234,61,47)" fg:x="809" fg:w="1"/><text x="66.2369%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.90%)</title><rect x="65.3344%" y="325" width="0.8972%" height="15" fill="rgb(208,226,15)" fg:x="801" fg:w="11"/><text x="65.5844%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="66.0685%" y="309" width="0.1631%" height="15" fill="rgb(217,221,4)" fg:x="810" fg:w="2"/><text x="66.3185%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.1501%" y="293" width="0.0816%" height="15" fill="rgb(212,174,34)" fg:x="811" fg:w="1"/><text x="66.4001%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (72 samples, 5.87%)</title><rect x="60.4405%" y="389" width="5.8728%" height="15" fill="rgb(253,83,4)" fg:x="741" fg:w="72"/><text x="60.6905%" y="399.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.98%)</title><rect x="65.3344%" y="373" width="0.9788%" height="15" fill="rgb(250,195,49)" fg:x="801" fg:w="12"/><text x="65.5844%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.98%)</title><rect x="65.3344%" y="357" width="0.9788%" height="15" fill="rgb(241,192,25)" fg:x="801" fg:w="12"/><text x="65.5844%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.98%)</title><rect x="65.3344%" y="341" width="0.9788%" height="15" fill="rgb(208,124,10)" fg:x="801" fg:w="12"/><text x="65.5844%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="66.2316%" y="325" width="0.0816%" height="15" fill="rgb(222,33,0)" fg:x="812" fg:w="1"/><text x="66.4816%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="66.2316%" y="309" width="0.0816%" height="15" fill="rgb(234,209,28)" fg:x="812" fg:w="1"/><text x="66.4816%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (695 samples, 56.69%)</title><rect x="9.7879%" y="485" width="56.6884%" height="15" fill="rgb(224,11,23)" fg:x="120" fg:w="695"/><text x="10.0379%" y="495.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity..</text></g><g><title>plugins_core::looking::model::qualify_name (692 samples, 56.44%)</title><rect x="10.0326%" y="469" width="56.4437%" height="15" fill="rgb(232,99,1)" fg:x="123" fg:w="692"/><text x="10.2826%" y="479.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (691 samples, 56.36%)</title><rect x="10.1142%" y="453" width="56.3622%" height="15" fill="rgb(237,95,45)" fg:x="124" fg:w="691"/><text x="10.3642%" y="463.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (691 samples, 56.36%)</title><rect x="10.1142%" y="437" width="56.3622%" height="15" fill="rgb(208,109,11)" fg:x="124" fg:w="691"/><text x="10.3642%" y="447.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (691 samples, 56.36%)</title><rect x="10.1142%" y="421" width="56.3622%" height="15" fill="rgb(216,190,48)" fg:x="124" fg:w="691"/><text x="10.3642%" y="431.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (74 samples, 6.04%)</title><rect x="60.4405%" y="405" width="6.0359%" height="15" fill="rgb(251,171,36)" fg:x="741" fg:w="74"/><text x="60.6905%" y="415.50">indefini..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="66.3132%" y="389" width="0.1631%" height="15" fill="rgb(230,62,22)" fg:x="813" fg:w="2"/><text x="66.5632%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.4763%" y="485" width="0.0816%" height="15" fill="rgb(225,114,35)" fg:x="815" fg:w="1"/><text x="66.7263%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (2 samples, 0.16%)</title><rect x="66.5579%" y="485" width="0.1631%" height="15" fill="rgb(215,118,42)" fg:x="816" fg:w="2"/><text x="66.8079%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6395%" y="469" width="0.0816%" height="15" fill="rgb(243,119,21)" fg:x="817" fg:w="1"/><text x="66.8895%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.7210%" y="453" width="0.1631%" height="15" fill="rgb(252,177,53)" fg:x="818" fg:w="2"/><text x="66.9710%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8026%" y="437" width="0.0816%" height="15" fill="rgb(237,209,29)" fg:x="819" fg:w="1"/><text x="67.0526%" y="447.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="66.8842%" y="453" width="0.0816%" height="15" fill="rgb(212,65,23)" fg:x="820" fg:w="1"/><text x="67.1342%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="66.8842%" y="437" width="0.0816%" height="15" fill="rgb(230,222,46)" fg:x="820" fg:w="1"/><text x="67.1342%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.8842%" y="421" width="0.0816%" height="15" fill="rgb(215,135,32)" fg:x="820" fg:w="1"/><text x="67.1342%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="66.8842%" y="405" width="0.0816%" height="15" fill="rgb(246,101,22)" fg:x="820" fg:w="1"/><text x="67.1342%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="66.8842%" y="389" width="0.0816%" height="15" fill="rgb(206,107,13)" fg:x="820" fg:w="1"/><text x="67.1342%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="66.8842%" y="373" width="0.0816%" height="15" fill="rgb(250,100,44)" fg:x="820" fg:w="1"/><text x="67.1342%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8842%" y="357" width="0.0816%" height="15" fill="rgb(231,147,38)" fg:x="820" fg:w="1"/><text x="67.1342%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8842%" y="341" width="0.0816%" height="15" fill="rgb(229,8,40)" fg:x="820" fg:w="1"/><text x="67.1342%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.8842%" y="325" width="0.0816%" height="15" fill="rgb(221,135,30)" fg:x="820" fg:w="1"/><text x="67.1342%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.8842%" y="309" width="0.0816%" height="15" fill="rgb(249,193,18)" fg:x="820" fg:w="1"/><text x="67.1342%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.8842%" y="293" width="0.0816%" height="15" fill="rgb(209,133,39)" fg:x="820" fg:w="1"/><text x="67.1342%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="66.8842%" y="277" width="0.0816%" height="15" fill="rgb(232,100,14)" fg:x="820" fg:w="1"/><text x="67.1342%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="66.8842%" y="261" width="0.0816%" height="15" fill="rgb(224,185,1)" fg:x="820" fg:w="1"/><text x="67.1342%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="66.9657%" y="421" width="0.2447%" height="15" fill="rgb(223,139,8)" fg:x="821" fg:w="3"/><text x="67.2157%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="66.9657%" y="405" width="0.2447%" height="15" fill="rgb(232,213,38)" fg:x="821" fg:w="3"/><text x="67.2157%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="66.9657%" y="389" width="0.2447%" height="15" fill="rgb(207,94,22)" fg:x="821" fg:w="3"/><text x="67.2157%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="66.9657%" y="373" width="0.2447%" height="15" fill="rgb(219,183,54)" fg:x="821" fg:w="3"/><text x="67.2157%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.0473%" y="357" width="0.1631%" height="15" fill="rgb(216,185,54)" fg:x="822" fg:w="2"/><text x="67.2973%" y="367.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (706 samples, 57.59%)</title><rect x="9.7064%" y="517" width="57.5856%" height="15" fill="rgb(254,217,39)" fg:x="119" fg:w="706"/><text x="9.9564%" y="527.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (706 samples, 57.59%)</title><rect x="9.7064%" y="501" width="57.5856%" height="15" fill="rgb(240,178,23)" fg:x="119" fg:w="706"/><text x="9.9564%" y="511.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (7 samples, 0.57%)</title><rect x="66.7210%" y="485" width="0.5710%" height="15" fill="rgb(218,11,47)" fg:x="818" fg:w="7"/><text x="66.9710%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (7 samples, 0.57%)</title><rect x="66.7210%" y="469" width="0.5710%" height="15" fill="rgb(218,51,51)" fg:x="818" fg:w="7"/><text x="66.9710%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="66.9657%" y="453" width="0.3263%" height="15" fill="rgb(238,126,27)" fg:x="821" fg:w="4"/><text x="67.2157%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="66.9657%" y="437" width="0.3263%" height="15" fill="rgb(249,202,22)" fg:x="821" fg:w="4"/><text x="67.2157%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.2104%" y="421" width="0.0816%" height="15" fill="rgb(254,195,49)" fg:x="824" fg:w="1"/><text x="67.4604%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.2104%" y="405" width="0.0816%" height="15" fill="rgb(208,123,14)" fg:x="824" fg:w="1"/><text x="67.4604%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="67.2104%" y="389" width="0.0816%" height="15" fill="rgb(224,200,8)" fg:x="824" fg:w="1"/><text x="67.4604%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="67.2104%" y="373" width="0.0816%" height="15" fill="rgb(217,61,36)" fg:x="824" fg:w="1"/><text x="67.4604%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="67.2920%" y="501" width="0.0816%" height="15" fill="rgb(206,35,45)" fg:x="825" fg:w="1"/><text x="67.5420%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="67.2920%" y="485" width="0.0816%" height="15" fill="rgb(217,65,33)" fg:x="825" fg:w="1"/><text x="67.5420%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="67.2920%" y="469" width="0.0816%" height="15" fill="rgb(222,158,48)" fg:x="825" fg:w="1"/><text x="67.5420%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="67.2920%" y="453" width="0.0816%" height="15" fill="rgb(254,2,54)" fg:x="825" fg:w="1"/><text x="67.5420%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.2920%" y="437" width="0.0816%" height="15" fill="rgb(250,143,38)" fg:x="825" fg:w="1"/><text x="67.5420%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.2920%" y="421" width="0.0816%" height="15" fill="rgb(248,25,0)" fg:x="825" fg:w="1"/><text x="67.5420%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="67.2920%" y="405" width="0.0816%" height="15" fill="rgb(206,152,27)" fg:x="825" fg:w="1"/><text x="67.5420%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="67.2920%" y="389" width="0.0816%" height="15" fill="rgb(240,77,30)" fg:x="825" fg:w="1"/><text x="67.5420%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.2920%" y="373" width="0.0816%" height="15" fill="rgb(231,5,3)" fg:x="825" fg:w="1"/><text x="67.5420%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.2920%" y="357" width="0.0816%" height="15" fill="rgb(207,226,32)" fg:x="825" fg:w="1"/><text x="67.5420%" y="367.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="67.2920%" y="341" width="0.0816%" height="15" fill="rgb(222,207,47)" fg:x="825" fg:w="1"/><text x="67.5420%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="67.2920%" y="325" width="0.0816%" height="15" fill="rgb(229,115,45)" fg:x="825" fg:w="1"/><text x="67.5420%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.2920%" y="309" width="0.0816%" height="15" fill="rgb(224,191,6)" fg:x="825" fg:w="1"/><text x="67.5420%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.2920%" y="293" width="0.0816%" height="15" fill="rgb(230,227,24)" fg:x="825" fg:w="1"/><text x="67.5420%" y="303.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="67.2920%" y="277" width="0.0816%" height="15" fill="rgb(228,80,19)" fg:x="825" fg:w="1"/><text x="67.5420%" y="287.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="67.2920%" y="261" width="0.0816%" height="15" fill="rgb(247,229,0)" fg:x="825" fg:w="1"/><text x="67.5420%" y="271.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="67.2920%" y="245" width="0.0816%" height="15" fill="rgb(237,194,15)" fg:x="825" fg:w="1"/><text x="67.5420%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="67.5367%" y="389" width="0.0816%" height="15" fill="rgb(219,203,20)" fg:x="828" fg:w="1"/><text x="67.7867%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="67.5367%" y="373" width="0.0816%" height="15" fill="rgb(234,128,8)" fg:x="828" fg:w="1"/><text x="67.7867%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.5367%" y="357" width="0.0816%" height="15" fill="rgb(248,202,8)" fg:x="828" fg:w="1"/><text x="67.7867%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5367%" y="341" width="0.0816%" height="15" fill="rgb(206,104,37)" fg:x="828" fg:w="1"/><text x="67.7867%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.5367%" y="325" width="0.0816%" height="15" fill="rgb(223,8,27)" fg:x="828" fg:w="1"/><text x="67.7867%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5367%" y="309" width="0.0816%" height="15" fill="rgb(216,217,28)" fg:x="828" fg:w="1"/><text x="67.7867%" y="319.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.5367%" y="293" width="0.0816%" height="15" fill="rgb(249,199,1)" fg:x="828" fg:w="1"/><text x="67.7867%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5367%" y="277" width="0.0816%" height="15" fill="rgb(240,85,17)" fg:x="828" fg:w="1"/><text x="67.7867%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.5367%" y="261" width="0.0816%" height="15" fill="rgb(206,108,45)" fg:x="828" fg:w="1"/><text x="67.7867%" y="271.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="67.5367%" y="245" width="0.0816%" height="15" fill="rgb(245,210,41)" fg:x="828" fg:w="1"/><text x="67.7867%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="67.5367%" y="229" width="0.0816%" height="15" fill="rgb(206,13,37)" fg:x="828" fg:w="1"/><text x="67.7867%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5367%" y="213" width="0.0816%" height="15" fill="rgb(250,61,18)" fg:x="828" fg:w="1"/><text x="67.7867%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.6183%" y="309" width="0.0816%" height="15" fill="rgb(235,172,48)" fg:x="829" fg:w="1"/><text x="67.8683%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="67.6183%" y="293" width="0.0816%" height="15" fill="rgb(249,201,17)" fg:x="829" fg:w="1"/><text x="67.8683%" y="303.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (5 samples, 0.41%)</title><rect x="67.3736%" y="501" width="0.4078%" height="15" fill="rgb(219,208,6)" fg:x="826" fg:w="5"/><text x="67.6236%" y="511.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (5 samples, 0.41%)</title><rect x="67.3736%" y="485" width="0.4078%" height="15" fill="rgb(248,31,23)" fg:x="826" fg:w="5"/><text x="67.6236%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.41%)</title><rect x="67.3736%" y="469" width="0.4078%" height="15" fill="rgb(245,15,42)" fg:x="826" fg:w="5"/><text x="67.6236%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (5 samples, 0.41%)</title><rect x="67.3736%" y="453" width="0.4078%" height="15" fill="rgb(222,217,39)" fg:x="826" fg:w="5"/><text x="67.6236%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.41%)</title><rect x="67.3736%" y="437" width="0.4078%" height="15" fill="rgb(210,219,27)" fg:x="826" fg:w="5"/><text x="67.6236%" y="447.50"></text></g><g><title>engine::internal::Entities::prepare_entity (4 samples, 0.33%)</title><rect x="67.4551%" y="421" width="0.3263%" height="15" fill="rgb(252,166,36)" fg:x="827" fg:w="4"/><text x="67.7051%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.33%)</title><rect x="67.4551%" y="405" width="0.3263%" height="15" fill="rgb(245,132,34)" fg:x="827" fg:w="4"/><text x="67.7051%" y="415.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="67.6183%" y="389" width="0.1631%" height="15" fill="rgb(236,54,3)" fg:x="829" fg:w="2"/><text x="67.8683%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.6183%" y="373" width="0.1631%" height="15" fill="rgb(241,173,43)" fg:x="829" fg:w="2"/><text x="67.8683%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.6183%" y="357" width="0.1631%" height="15" fill="rgb(215,190,9)" fg:x="829" fg:w="2"/><text x="67.8683%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.6183%" y="341" width="0.1631%" height="15" fill="rgb(242,101,16)" fg:x="829" fg:w="2"/><text x="67.8683%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.6183%" y="325" width="0.1631%" height="15" fill="rgb(223,190,21)" fg:x="829" fg:w="2"/><text x="67.8683%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.6998%" y="309" width="0.0816%" height="15" fill="rgb(215,228,25)" fg:x="830" fg:w="1"/><text x="67.9498%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.6998%" y="293" width="0.0816%" height="15" fill="rgb(225,36,22)" fg:x="830" fg:w="1"/><text x="67.9498%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.6998%" y="277" width="0.0816%" height="15" fill="rgb(251,106,46)" fg:x="830" fg:w="1"/><text x="67.9498%" y="287.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="67.6998%" y="261" width="0.0816%" height="15" fill="rgb(208,90,1)" fg:x="830" fg:w="1"/><text x="67.9498%" y="271.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_name (7 samples, 0.57%)</title><rect x="67.2920%" y="517" width="0.5710%" height="15" fill="rgb(243,10,4)" fg:x="825" fg:w="7"/><text x="67.5420%" y="527.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="67.7814%" y="501" width="0.0816%" height="15" fill="rgb(212,137,27)" fg:x="831" fg:w="1"/><text x="68.0314%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="67.7814%" y="485" width="0.0816%" height="15" fill="rgb(231,220,49)" fg:x="831" fg:w="1"/><text x="68.0314%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="67.7814%" y="469" width="0.0816%" height="15" fill="rgb(237,96,20)" fg:x="831" fg:w="1"/><text x="68.0314%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.7814%" y="453" width="0.0816%" height="15" fill="rgb(239,229,30)" fg:x="831" fg:w="1"/><text x="68.0314%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7814%" y="437" width="0.0816%" height="15" fill="rgb(219,65,33)" fg:x="831" fg:w="1"/><text x="68.0314%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.0261%" y="405" width="0.0816%" height="15" fill="rgb(243,134,7)" fg:x="834" fg:w="1"/><text x="68.2761%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="68.0261%" y="389" width="0.0816%" height="15" fill="rgb(216,177,54)" fg:x="834" fg:w="1"/><text x="68.2761%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.9445%" y="421" width="0.2447%" height="15" fill="rgb(211,160,20)" fg:x="833" fg:w="3"/><text x="68.1945%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.1077%" y="405" width="0.0816%" height="15" fill="rgb(239,85,39)" fg:x="835" fg:w="1"/><text x="68.3577%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.1892%" y="421" width="0.0816%" height="15" fill="rgb(232,125,22)" fg:x="836" fg:w="1"/><text x="68.4392%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="67.9445%" y="437" width="0.4078%" height="15" fill="rgb(244,57,34)" fg:x="833" fg:w="5"/><text x="68.1945%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="68.2708%" y="421" width="0.0816%" height="15" fill="rgb(214,203,32)" fg:x="837" fg:w="1"/><text x="68.5208%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.2708%" y="405" width="0.0816%" height="15" fill="rgb(207,58,43)" fg:x="837" fg:w="1"/><text x="68.5208%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="67.8630%" y="453" width="0.6525%" height="15" fill="rgb(215,193,15)" fg:x="832" fg:w="8"/><text x="68.1130%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="68.3524%" y="437" width="0.1631%" height="15" fill="rgb(232,15,44)" fg:x="838" fg:w="2"/><text x="68.6024%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="67.8630%" y="469" width="0.7341%" height="15" fill="rgb(212,3,48)" fg:x="832" fg:w="9"/><text x="68.1130%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5155%" y="453" width="0.0816%" height="15" fill="rgb(218,128,7)" fg:x="840" fg:w="1"/><text x="68.7655%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynMessage&gt; (11 samples, 0.90%)</title><rect x="67.8630%" y="485" width="0.8972%" height="15" fill="rgb(226,216,39)" fg:x="832" fg:w="11"/><text x="68.1130%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="68.5971%" y="469" width="0.1631%" height="15" fill="rgb(243,47,51)" fg:x="841" fg:w="2"/><text x="68.8471%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="68.7602%" y="437" width="0.0816%" height="15" fill="rgb(241,183,40)" fg:x="843" fg:w="1"/><text x="69.0102%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="68.7602%" y="453" width="0.1631%" height="15" fill="rgb(231,217,32)" fg:x="843" fg:w="2"/><text x="69.0102%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8418%" y="437" width="0.0816%" height="15" fill="rgb(229,61,38)" fg:x="844" fg:w="1"/><text x="69.0918%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0865%" y="309" width="0.0816%" height="15" fill="rgb(225,210,5)" fg:x="847" fg:w="1"/><text x="69.3365%" y="319.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="69.1680%" y="261" width="0.0816%" height="15" fill="rgb(231,79,45)" fg:x="848" fg:w="1"/><text x="69.4180%" y="271.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="69.1680%" y="245" width="0.0816%" height="15" fill="rgb(224,100,7)" fg:x="848" fg:w="1"/><text x="69.4180%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.1680%" y="229" width="0.0816%" height="15" fill="rgb(241,198,18)" fg:x="848" fg:w="1"/><text x="69.4180%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1680%" y="213" width="0.0816%" height="15" fill="rgb(252,97,53)" fg:x="848" fg:w="1"/><text x="69.4180%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.1680%" y="197" width="0.0816%" height="15" fill="rgb(220,88,7)" fg:x="848" fg:w="1"/><text x="69.4180%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1680%" y="181" width="0.0816%" height="15" fill="rgb(213,176,14)" fg:x="848" fg:w="1"/><text x="69.4180%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.1680%" y="165" width="0.0816%" height="15" fill="rgb(246,73,7)" fg:x="848" fg:w="1"/><text x="69.4180%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1680%" y="149" width="0.0816%" height="15" fill="rgb(245,64,36)" fg:x="848" fg:w="1"/><text x="69.4180%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.1680%" y="133" width="0.0816%" height="15" fill="rgb(245,80,10)" fg:x="848" fg:w="1"/><text x="69.4180%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.1680%" y="117" width="0.0816%" height="15" fill="rgb(232,107,50)" fg:x="848" fg:w="1"/><text x="69.4180%" y="127.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="69.1680%" y="309" width="0.1631%" height="15" fill="rgb(253,3,0)" fg:x="848" fg:w="2"/><text x="69.4180%" y="319.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="69.1680%" y="293" width="0.1631%" height="15" fill="rgb(212,99,53)" fg:x="848" fg:w="2"/><text x="69.4180%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="69.1680%" y="277" width="0.1631%" height="15" fill="rgb(249,111,54)" fg:x="848" fg:w="2"/><text x="69.4180%" y="287.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="69.2496%" y="261" width="0.0816%" height="15" fill="rgb(249,55,30)" fg:x="849" fg:w="1"/><text x="69.4996%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.2496%" y="245" width="0.0816%" height="15" fill="rgb(237,47,42)" fg:x="849" fg:w="1"/><text x="69.4996%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.2496%" y="229" width="0.0816%" height="15" fill="rgb(211,20,18)" fg:x="849" fg:w="1"/><text x="69.4996%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.2496%" y="213" width="0.0816%" height="15" fill="rgb(231,203,46)" fg:x="849" fg:w="1"/><text x="69.4996%" y="223.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="69.2496%" y="197" width="0.0816%" height="15" fill="rgb(237,142,3)" fg:x="849" fg:w="1"/><text x="69.4996%" y="207.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.33%)</title><rect x="69.0865%" y="389" width="0.3263%" height="15" fill="rgb(241,107,1)" fg:x="847" fg:w="4"/><text x="69.3365%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="69.0865%" y="373" width="0.3263%" height="15" fill="rgb(229,83,13)" fg:x="847" fg:w="4"/><text x="69.3365%" y="383.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (4 samples, 0.33%)</title><rect x="69.0865%" y="357" width="0.3263%" height="15" fill="rgb(241,91,40)" fg:x="847" fg:w="4"/><text x="69.3365%" y="367.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (4 samples, 0.33%)</title><rect x="69.0865%" y="341" width="0.3263%" height="15" fill="rgb(225,3,45)" fg:x="847" fg:w="4"/><text x="69.3365%" y="351.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.33%)</title><rect x="69.0865%" y="325" width="0.3263%" height="15" fill="rgb(244,223,14)" fg:x="847" fg:w="4"/><text x="69.3365%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.3312%" y="309" width="0.0816%" height="15" fill="rgb(224,124,37)" fg:x="850" fg:w="1"/><text x="69.5812%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.4127%" y="357" width="0.1631%" height="15" fill="rgb(251,171,30)" fg:x="851" fg:w="2"/><text x="69.6627%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="69.4127%" y="341" width="0.1631%" height="15" fill="rgb(236,46,54)" fg:x="851" fg:w="2"/><text x="69.6627%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.4127%" y="325" width="0.1631%" height="15" fill="rgb(245,213,5)" fg:x="851" fg:w="2"/><text x="69.6627%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="69.4127%" y="309" width="0.1631%" height="15" fill="rgb(230,144,27)" fg:x="851" fg:w="2"/><text x="69.6627%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="69.4127%" y="293" width="0.1631%" height="15" fill="rgb(220,86,6)" fg:x="851" fg:w="2"/><text x="69.6627%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="69.4127%" y="277" width="0.1631%" height="15" fill="rgb(240,20,13)" fg:x="851" fg:w="2"/><text x="69.6627%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="69.4127%" y="261" width="0.1631%" height="15" fill="rgb(217,89,34)" fg:x="851" fg:w="2"/><text x="69.6627%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="69.4127%" y="245" width="0.1631%" height="15" fill="rgb(229,13,5)" fg:x="851" fg:w="2"/><text x="69.6627%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="69.4127%" y="229" width="0.1631%" height="15" fill="rgb(244,67,35)" fg:x="851" fg:w="2"/><text x="69.6627%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="69.4127%" y="213" width="0.1631%" height="15" fill="rgb(221,40,2)" fg:x="851" fg:w="2"/><text x="69.6627%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="69.4127%" y="197" width="0.1631%" height="15" fill="rgb(237,157,21)" fg:x="851" fg:w="2"/><text x="69.6627%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="69.4127%" y="181" width="0.1631%" height="15" fill="rgb(222,94,11)" fg:x="851" fg:w="2"/><text x="69.6627%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="69.4127%" y="165" width="0.1631%" height="15" fill="rgb(249,113,6)" fg:x="851" fg:w="2"/><text x="69.6627%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="69.4127%" y="149" width="0.1631%" height="15" fill="rgb(238,137,36)" fg:x="851" fg:w="2"/><text x="69.6627%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.4127%" y="133" width="0.1631%" height="15" fill="rgb(210,102,26)" fg:x="851" fg:w="2"/><text x="69.6627%" y="143.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (7 samples, 0.57%)</title><rect x="69.0865%" y="405" width="0.5710%" height="15" fill="rgb(218,30,30)" fg:x="847" fg:w="7"/><text x="69.3365%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="69.4127%" y="389" width="0.2447%" height="15" fill="rgb(214,67,26)" fg:x="851" fg:w="3"/><text x="69.6627%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="69.4127%" y="373" width="0.2447%" height="15" fill="rgb(251,9,53)" fg:x="851" fg:w="3"/><text x="69.6627%" y="383.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="69.5759%" y="357" width="0.0816%" height="15" fill="rgb(228,204,25)" fg:x="853" fg:w="1"/><text x="69.8259%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="69.5759%" y="341" width="0.0816%" height="15" fill="rgb(207,153,8)" fg:x="853" fg:w="1"/><text x="69.8259%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.7390%" y="181" width="0.1631%" height="15" fill="rgb(242,9,16)" fg:x="855" fg:w="2"/><text x="69.9890%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.7390%" y="165" width="0.1631%" height="15" fill="rgb(217,211,10)" fg:x="855" fg:w="2"/><text x="69.9890%" y="175.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.7390%" y="149" width="0.1631%" height="15" fill="rgb(219,228,52)" fg:x="855" fg:w="2"/><text x="69.9890%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.8206%" y="133" width="0.0816%" height="15" fill="rgb(231,92,29)" fg:x="856" fg:w="1"/><text x="70.0706%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8206%" y="117" width="0.0816%" height="15" fill="rgb(232,8,23)" fg:x="856" fg:w="1"/><text x="70.0706%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.8206%" y="101" width="0.0816%" height="15" fill="rgb(216,211,34)" fg:x="856" fg:w="1"/><text x="70.0706%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8206%" y="85" width="0.0816%" height="15" fill="rgb(236,151,0)" fg:x="856" fg:w="1"/><text x="70.0706%" y="95.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.8206%" y="69" width="0.0816%" height="15" fill="rgb(209,168,3)" fg:x="856" fg:w="1"/><text x="70.0706%" y="79.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.8206%" y="53" width="0.0816%" height="15" fill="rgb(208,129,28)" fg:x="856" fg:w="1"/><text x="70.0706%" y="63.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.9021%" y="149" width="0.0816%" height="15" fill="rgb(229,78,22)" fg:x="857" fg:w="1"/><text x="70.1521%" y="159.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (5 samples, 0.41%)</title><rect x="69.7390%" y="245" width="0.4078%" height="15" fill="rgb(228,187,13)" fg:x="855" fg:w="5"/><text x="69.9890%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (5 samples, 0.41%)</title><rect x="69.7390%" y="229" width="0.4078%" height="15" fill="rgb(240,119,24)" fg:x="855" fg:w="5"/><text x="69.9890%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="69.7390%" y="213" width="0.4078%" height="15" fill="rgb(209,194,42)" fg:x="855" fg:w="5"/><text x="69.9890%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="69.7390%" y="197" width="0.4078%" height="15" fill="rgb(247,200,46)" fg:x="855" fg:w="5"/><text x="69.9890%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="69.9021%" y="181" width="0.2447%" height="15" fill="rgb(218,76,16)" fg:x="857" fg:w="3"/><text x="70.1521%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.9021%" y="165" width="0.2447%" height="15" fill="rgb(225,21,48)" fg:x="857" fg:w="3"/><text x="70.1521%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.9837%" y="149" width="0.1631%" height="15" fill="rgb(239,223,50)" fg:x="858" fg:w="2"/><text x="70.2337%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.9837%" y="133" width="0.1631%" height="15" fill="rgb(244,45,21)" fg:x="858" fg:w="2"/><text x="70.2337%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.9837%" y="117" width="0.1631%" height="15" fill="rgb(232,33,43)" fg:x="858" fg:w="2"/><text x="70.2337%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.9837%" y="101" width="0.1631%" height="15" fill="rgb(209,8,3)" fg:x="858" fg:w="2"/><text x="70.2337%" y="111.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.9837%" y="85" width="0.1631%" height="15" fill="rgb(214,25,53)" fg:x="858" fg:w="2"/><text x="70.2337%" y="95.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.3100%" y="165" width="0.0816%" height="15" fill="rgb(254,186,54)" fg:x="862" fg:w="1"/><text x="70.5600%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3100%" y="149" width="0.0816%" height="15" fill="rgb(208,174,49)" fg:x="862" fg:w="1"/><text x="70.5600%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.4731%" y="101" width="0.0816%" height="15" fill="rgb(233,191,51)" fg:x="864" fg:w="1"/><text x="70.7231%" y="111.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.4731%" y="85" width="0.0816%" height="15" fill="rgb(222,134,10)" fg:x="864" fg:w="1"/><text x="70.7231%" y="95.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (11 samples, 0.90%)</title><rect x="69.7390%" y="357" width="0.8972%" height="15" fill="rgb(230,226,20)" fg:x="855" fg:w="11"/><text x="69.9890%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.90%)</title><rect x="69.7390%" y="341" width="0.8972%" height="15" fill="rgb(251,111,25)" fg:x="855" fg:w="11"/><text x="69.9890%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.90%)</title><rect x="69.7390%" y="325" width="0.8972%" height="15" fill="rgb(224,40,46)" fg:x="855" fg:w="11"/><text x="69.9890%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (11 samples, 0.90%)</title><rect x="69.7390%" y="309" width="0.8972%" height="15" fill="rgb(236,108,47)" fg:x="855" fg:w="11"/><text x="69.9890%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (11 samples, 0.90%)</title><rect x="69.7390%" y="293" width="0.8972%" height="15" fill="rgb(234,93,0)" fg:x="855" fg:w="11"/><text x="69.9890%" y="303.50"></text></g><g><title>engine::internal::Entities::prepare_entity (11 samples, 0.90%)</title><rect x="69.7390%" y="277" width="0.8972%" height="15" fill="rgb(224,213,32)" fg:x="855" fg:w="11"/><text x="69.9890%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity (11 samples, 0.90%)</title><rect x="69.7390%" y="261" width="0.8972%" height="15" fill="rgb(251,11,48)" fg:x="855" fg:w="11"/><text x="69.9890%" y="271.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.49%)</title><rect x="70.1468%" y="245" width="0.4894%" height="15" fill="rgb(236,173,5)" fg:x="860" fg:w="6"/><text x="70.3968%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.49%)</title><rect x="70.1468%" y="229" width="0.4894%" height="15" fill="rgb(230,95,12)" fg:x="860" fg:w="6"/><text x="70.3968%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="70.1468%" y="213" width="0.4894%" height="15" fill="rgb(232,209,1)" fg:x="860" fg:w="6"/><text x="70.3968%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.41%)</title><rect x="70.2284%" y="197" width="0.4078%" height="15" fill="rgb(232,6,1)" fg:x="861" fg:w="5"/><text x="70.4784%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="70.2284%" y="181" width="0.4078%" height="15" fill="rgb(210,224,50)" fg:x="861" fg:w="5"/><text x="70.4784%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="70.3915%" y="165" width="0.2447%" height="15" fill="rgb(228,127,35)" fg:x="863" fg:w="3"/><text x="70.6415%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.3915%" y="149" width="0.2447%" height="15" fill="rgb(245,102,45)" fg:x="863" fg:w="3"/><text x="70.6415%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.4731%" y="133" width="0.1631%" height="15" fill="rgb(214,1,49)" fg:x="864" fg:w="2"/><text x="70.7231%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.4731%" y="117" width="0.1631%" height="15" fill="rgb(226,163,40)" fg:x="864" fg:w="2"/><text x="70.7231%" y="127.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.5546%" y="101" width="0.0816%" height="15" fill="rgb(239,212,28)" fg:x="865" fg:w="1"/><text x="70.8046%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.5546%" y="85" width="0.0816%" height="15" fill="rgb(220,20,13)" fg:x="865" fg:w="1"/><text x="70.8046%" y="95.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5546%" y="69" width="0.0816%" height="15" fill="rgb(210,164,35)" fg:x="865" fg:w="1"/><text x="70.8046%" y="79.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5546%" y="53" width="0.0816%" height="15" fill="rgb(248,109,41)" fg:x="865" fg:w="1"/><text x="70.8046%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.5546%" y="37" width="0.0816%" height="15" fill="rgb(238,23,50)" fg:x="865" fg:w="1"/><text x="70.8046%" y="47.50"></text></g><g><title>plugins_core::tools::get_contained_keys (14 samples, 1.14%)</title><rect x="69.6574%" y="405" width="1.1419%" height="15" fill="rgb(211,48,49)" fg:x="854" fg:w="14"/><text x="69.9074%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (14 samples, 1.14%)</title><rect x="69.6574%" y="389" width="1.1419%" height="15" fill="rgb(223,36,21)" fg:x="854" fg:w="14"/><text x="69.9074%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (14 samples, 1.14%)</title><rect x="69.6574%" y="373" width="1.1419%" height="15" fill="rgb(207,123,46)" fg:x="854" fg:w="14"/><text x="69.9074%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.6362%" y="357" width="0.1631%" height="15" fill="rgb(240,218,32)" fg:x="866" fg:w="2"/><text x="70.8862%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7178%" y="341" width="0.0816%" height="15" fill="rgb(252,5,43)" fg:x="867" fg:w="1"/><text x="70.9678%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.7178%" y="325" width="0.0816%" height="15" fill="rgb(252,84,19)" fg:x="867" fg:w="1"/><text x="70.9678%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="70.7178%" y="309" width="0.0816%" height="15" fill="rgb(243,152,39)" fg:x="867" fg:w="1"/><text x="70.9678%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="70.7178%" y="293" width="0.0816%" height="15" fill="rgb(234,160,15)" fg:x="867" fg:w="1"/><text x="70.9678%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.7178%" y="277" width="0.0816%" height="15" fill="rgb(237,34,20)" fg:x="867" fg:w="1"/><text x="70.9678%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7178%" y="261" width="0.0816%" height="15" fill="rgb(229,97,13)" fg:x="867" fg:w="1"/><text x="70.9678%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.7178%" y="245" width="0.0816%" height="15" fill="rgb(234,71,50)" fg:x="867" fg:w="1"/><text x="70.9678%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="70.7993%" y="389" width="0.0816%" height="15" fill="rgb(253,155,4)" fg:x="868" fg:w="1"/><text x="71.0493%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.7993%" y="373" width="0.0816%" height="15" fill="rgb(222,185,37)" fg:x="868" fg:w="1"/><text x="71.0493%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 2.04%)</title><rect x="68.9233%" y="437" width="2.0392%" height="15" fill="rgb(251,177,13)" fg:x="845" fg:w="25"/><text x="69.1733%" y="447.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (25 samples, 2.04%)</title><rect x="68.9233%" y="421" width="2.0392%" height="15" fill="rgb(250,179,40)" fg:x="845" fg:w="25"/><text x="69.1733%" y="431.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="70.7993%" y="405" width="0.1631%" height="15" fill="rgb(242,44,2)" fg:x="868" fg:w="2"/><text x="71.0493%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="70.8809%" y="389" width="0.0816%" height="15" fill="rgb(216,177,13)" fg:x="869" fg:w="1"/><text x="71.1309%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.8809%" y="373" width="0.0816%" height="15" fill="rgb(216,106,43)" fg:x="869" fg:w="1"/><text x="71.1309%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8809%" y="357" width="0.0816%" height="15" fill="rgb(216,183,2)" fg:x="869" fg:w="1"/><text x="71.1309%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8809%" y="341" width="0.0816%" height="15" fill="rgb(249,75,3)" fg:x="869" fg:w="1"/><text x="71.1309%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8809%" y="325" width="0.0816%" height="15" fill="rgb(219,67,39)" fg:x="869" fg:w="1"/><text x="71.1309%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1256%" y="389" width="0.0816%" height="15" fill="rgb(253,228,2)" fg:x="872" fg:w="1"/><text x="71.3756%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1256%" y="373" width="0.0816%" height="15" fill="rgb(235,138,27)" fg:x="872" fg:w="1"/><text x="71.3756%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.1256%" y="357" width="0.0816%" height="15" fill="rgb(236,97,51)" fg:x="872" fg:w="1"/><text x="71.3756%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.1256%" y="341" width="0.0816%" height="15" fill="rgb(240,80,30)" fg:x="872" fg:w="1"/><text x="71.3756%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.1256%" y="325" width="0.0816%" height="15" fill="rgb(230,178,19)" fg:x="872" fg:w="1"/><text x="71.3756%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1256%" y="309" width="0.0816%" height="15" fill="rgb(210,190,27)" fg:x="872" fg:w="1"/><text x="71.3756%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1256%" y="293" width="0.0816%" height="15" fill="rgb(222,107,31)" fg:x="872" fg:w="1"/><text x="71.3756%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.1256%" y="277" width="0.0816%" height="15" fill="rgb(216,127,34)" fg:x="872" fg:w="1"/><text x="71.3756%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.1256%" y="261" width="0.0816%" height="15" fill="rgb(234,116,52)" fg:x="872" fg:w="1"/><text x="71.3756%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.1256%" y="245" width="0.0816%" height="15" fill="rgb(222,124,15)" fg:x="872" fg:w="1"/><text x="71.3756%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.1256%" y="229" width="0.0816%" height="15" fill="rgb(231,179,28)" fg:x="872" fg:w="1"/><text x="71.3756%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.1256%" y="213" width="0.0816%" height="15" fill="rgb(226,93,45)" fg:x="872" fg:w="1"/><text x="71.3756%" y="223.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="71.2887%" y="373" width="0.0816%" height="15" fill="rgb(215,8,51)" fg:x="874" fg:w="1"/><text x="71.5387%" y="383.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="71.2887%" y="357" width="0.0816%" height="15" fill="rgb(223,106,5)" fg:x="874" fg:w="1"/><text x="71.5387%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2887%" y="341" width="0.0816%" height="15" fill="rgb(250,191,5)" fg:x="874" fg:w="1"/><text x="71.5387%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2887%" y="325" width="0.0816%" height="15" fill="rgb(242,132,44)" fg:x="874" fg:w="1"/><text x="71.5387%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2887%" y="309" width="0.0816%" height="15" fill="rgb(251,152,29)" fg:x="874" fg:w="1"/><text x="71.5387%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.2887%" y="293" width="0.0816%" height="15" fill="rgb(218,179,5)" fg:x="874" fg:w="1"/><text x="71.5387%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.2887%" y="277" width="0.0816%" height="15" fill="rgb(227,67,19)" fg:x="874" fg:w="1"/><text x="71.5387%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.2887%" y="261" width="0.0816%" height="15" fill="rgb(233,119,31)" fg:x="874" fg:w="1"/><text x="71.5387%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2887%" y="245" width="0.0816%" height="15" fill="rgb(241,120,22)" fg:x="874" fg:w="1"/><text x="71.5387%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2887%" y="229" width="0.0816%" height="15" fill="rgb(224,102,30)" fg:x="874" fg:w="1"/><text x="71.5387%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.2887%" y="213" width="0.0816%" height="15" fill="rgb(210,164,37)" fg:x="874" fg:w="1"/><text x="71.5387%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.2887%" y="197" width="0.0816%" height="15" fill="rgb(226,191,16)" fg:x="874" fg:w="1"/><text x="71.5387%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.2887%" y="181" width="0.0816%" height="15" fill="rgb(214,40,45)" fg:x="874" fg:w="1"/><text x="71.5387%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.2887%" y="165" width="0.0816%" height="15" fill="rgb(244,29,26)" fg:x="874" fg:w="1"/><text x="71.5387%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2887%" y="149" width="0.0816%" height="15" fill="rgb(216,16,5)" fg:x="874" fg:w="1"/><text x="71.5387%" y="159.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.33%)</title><rect x="71.2072%" y="389" width="0.3263%" height="15" fill="rgb(249,76,35)" fg:x="873" fg:w="4"/><text x="71.4572%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="71.3703%" y="373" width="0.1631%" height="15" fill="rgb(207,11,44)" fg:x="875" fg:w="2"/><text x="71.6203%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="71.3703%" y="357" width="0.1631%" height="15" fill="rgb(228,190,49)" fg:x="875" fg:w="2"/><text x="71.6203%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="71.3703%" y="341" width="0.1631%" height="15" fill="rgb(214,173,12)" fg:x="875" fg:w="2"/><text x="71.6203%" y="351.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="71.3703%" y="325" width="0.1631%" height="15" fill="rgb(218,26,35)" fg:x="875" fg:w="2"/><text x="71.6203%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="71.3703%" y="309" width="0.1631%" height="15" fill="rgb(220,200,19)" fg:x="875" fg:w="2"/><text x="71.6203%" y="319.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="71.3703%" y="293" width="0.1631%" height="15" fill="rgb(239,95,49)" fg:x="875" fg:w="2"/><text x="71.6203%" y="303.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="71.3703%" y="277" width="0.1631%" height="15" fill="rgb(235,85,53)" fg:x="875" fg:w="2"/><text x="71.6203%" y="287.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="71.3703%" y="261" width="0.1631%" height="15" fill="rgb(233,133,31)" fg:x="875" fg:w="2"/><text x="71.6203%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.0228%" y="181" width="0.0816%" height="15" fill="rgb(218,25,20)" fg:x="883" fg:w="1"/><text x="72.2728%" y="191.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.0228%" y="165" width="0.0816%" height="15" fill="rgb(252,210,38)" fg:x="883" fg:w="1"/><text x="72.2728%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="72.4307%" y="149" width="0.2447%" height="15" fill="rgb(242,134,21)" fg:x="888" fg:w="3"/><text x="72.6807%" y="159.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="72.5938%" y="133" width="0.0816%" height="15" fill="rgb(213,28,48)" fg:x="890" fg:w="1"/><text x="72.8438%" y="143.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.5938%" y="117" width="0.0816%" height="15" fill="rgb(250,196,2)" fg:x="890" fg:w="1"/><text x="72.8438%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="72.5938%" y="101" width="0.0816%" height="15" fill="rgb(227,5,17)" fg:x="890" fg:w="1"/><text x="72.8438%" y="111.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.65%)</title><rect x="72.1044%" y="181" width="0.6525%" height="15" fill="rgb(221,226,24)" fg:x="884" fg:w="8"/><text x="72.3544%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="72.3491%" y="165" width="0.4078%" height="15" fill="rgb(211,5,48)" fg:x="887" fg:w="5"/><text x="72.5991%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.6754%" y="149" width="0.0816%" height="15" fill="rgb(219,150,6)" fg:x="891" fg:w="1"/><text x="72.9254%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.6754%" y="133" width="0.0816%" height="15" fill="rgb(251,46,16)" fg:x="891" fg:w="1"/><text x="72.9254%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (12 samples, 0.98%)</title><rect x="71.9413%" y="213" width="0.9788%" height="15" fill="rgb(220,204,40)" fg:x="882" fg:w="12"/><text x="72.1913%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.98%)</title><rect x="71.9413%" y="197" width="0.9788%" height="15" fill="rgb(211,85,2)" fg:x="882" fg:w="12"/><text x="72.1913%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="72.7569%" y="181" width="0.1631%" height="15" fill="rgb(229,17,7)" fg:x="892" fg:w="2"/><text x="73.0069%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8385%" y="165" width="0.0816%" height="15" fill="rgb(239,72,28)" fg:x="893" fg:w="1"/><text x="73.0885%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.31%)</title><rect x="71.7781%" y="245" width="1.3051%" height="15" fill="rgb(230,47,54)" fg:x="880" fg:w="16"/><text x="72.0281%" y="255.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (14 samples, 1.14%)</title><rect x="71.9413%" y="229" width="1.1419%" height="15" fill="rgb(214,50,8)" fg:x="882" fg:w="14"/><text x="72.1913%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="72.9201%" y="213" width="0.1631%" height="15" fill="rgb(216,198,43)" fg:x="894" fg:w="2"/><text x="73.1701%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="73.0016%" y="197" width="0.0816%" height="15" fill="rgb(234,20,35)" fg:x="895" fg:w="1"/><text x="73.2516%" y="207.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="73.0016%" y="181" width="0.0816%" height="15" fill="rgb(254,45,19)" fg:x="895" fg:w="1"/><text x="73.2516%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.0016%" y="165" width="0.0816%" height="15" fill="rgb(219,14,44)" fg:x="895" fg:w="1"/><text x="73.2516%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="73.0016%" y="149" width="0.0816%" height="15" fill="rgb(217,220,26)" fg:x="895" fg:w="1"/><text x="73.2516%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0016%" y="133" width="0.0816%" height="15" fill="rgb(213,158,28)" fg:x="895" fg:w="1"/><text x="73.2516%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.0016%" y="117" width="0.0816%" height="15" fill="rgb(252,51,52)" fg:x="895" fg:w="1"/><text x="73.2516%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.0016%" y="101" width="0.0816%" height="15" fill="rgb(246,89,16)" fg:x="895" fg:w="1"/><text x="73.2516%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (17 samples, 1.39%)</title><rect x="71.7781%" y="261" width="1.3866%" height="15" fill="rgb(216,158,49)" fg:x="880" fg:w="17"/><text x="72.0281%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.0832%" y="245" width="0.0816%" height="15" fill="rgb(236,107,19)" fg:x="896" fg:w="1"/><text x="73.3332%" y="255.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (18 samples, 1.47%)</title><rect x="71.7781%" y="277" width="1.4682%" height="15" fill="rgb(228,185,30)" fg:x="880" fg:w="18"/><text x="72.0281%" y="287.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.1648%" y="261" width="0.0816%" height="15" fill="rgb(246,134,8)" fg:x="897" fg:w="1"/><text x="73.4148%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 1.63%)</title><rect x="71.7781%" y="293" width="1.6313%" height="15" fill="rgb(214,143,50)" fg:x="880" fg:w="20"/><text x="72.0281%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="73.2463%" y="277" width="0.1631%" height="15" fill="rgb(228,75,8)" fg:x="898" fg:w="2"/><text x="73.4963%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.3279%" y="261" width="0.0816%" height="15" fill="rgb(207,175,4)" fg:x="899" fg:w="1"/><text x="73.5779%" y="271.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (24 samples, 1.96%)</title><rect x="71.6150%" y="325" width="1.9576%" height="15" fill="rgb(205,108,24)" fg:x="878" fg:w="24"/><text x="71.8650%" y="335.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (22 samples, 1.79%)</title><rect x="71.7781%" y="309" width="1.7945%" height="15" fill="rgb(244,120,49)" fg:x="880" fg:w="22"/><text x="72.0281%" y="319.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="73.4095%" y="293" width="0.1631%" height="15" fill="rgb(223,47,38)" fg:x="900" fg:w="2"/><text x="73.6595%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="73.4095%" y="277" width="0.1631%" height="15" fill="rgb(229,179,11)" fg:x="900" fg:w="2"/><text x="73.6595%" y="287.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (26 samples, 2.12%)</title><rect x="71.5334%" y="373" width="2.1207%" height="15" fill="rgb(231,122,1)" fg:x="877" fg:w="26"/><text x="71.7834%" y="383.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (26 samples, 2.12%)</title><rect x="71.5334%" y="357" width="2.1207%" height="15" fill="rgb(245,119,9)" fg:x="877" fg:w="26"/><text x="71.7834%" y="367.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 2.04%)</title><rect x="71.6150%" y="341" width="2.0392%" height="15" fill="rgb(241,163,25)" fg:x="878" fg:w="25"/><text x="71.8650%" y="351.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5726%" y="325" width="0.0816%" height="15" fill="rgb(217,214,3)" fg:x="902" fg:w="1"/><text x="73.8226%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.5726%" y="309" width="0.0816%" height="15" fill="rgb(240,86,28)" fg:x="902" fg:w="1"/><text x="73.8226%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="73.6542%" y="325" width="0.1631%" height="15" fill="rgb(215,47,9)" fg:x="903" fg:w="2"/><text x="73.9042%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8173%" y="325" width="0.0816%" height="15" fill="rgb(252,25,45)" fg:x="905" fg:w="1"/><text x="74.0673%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.8173%" y="309" width="0.0816%" height="15" fill="rgb(251,164,9)" fg:x="905" fg:w="1"/><text x="74.0673%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.8173%" y="293" width="0.0816%" height="15" fill="rgb(233,194,0)" fg:x="905" fg:w="1"/><text x="74.0673%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="73.8173%" y="277" width="0.0816%" height="15" fill="rgb(249,111,24)" fg:x="905" fg:w="1"/><text x="74.0673%" y="287.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="73.8989%" y="325" width="0.2447%" height="15" fill="rgb(250,223,3)" fg:x="906" fg:w="3"/><text x="74.1489%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="73.8989%" y="309" width="0.2447%" height="15" fill="rgb(236,178,37)" fg:x="906" fg:w="3"/><text x="74.1489%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.9804%" y="293" width="0.1631%" height="15" fill="rgb(241,158,50)" fg:x="907" fg:w="2"/><text x="74.2304%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.0620%" y="277" width="0.0816%" height="15" fill="rgb(213,121,41)" fg:x="908" fg:w="1"/><text x="74.3120%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="74.0620%" y="261" width="0.0816%" height="15" fill="rgb(240,92,3)" fg:x="908" fg:w="1"/><text x="74.3120%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="74.1436%" y="277" width="0.1631%" height="15" fill="rgb(205,123,3)" fg:x="909" fg:w="2"/><text x="74.3936%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="74.1436%" y="261" width="0.1631%" height="15" fill="rgb(205,97,47)" fg:x="909" fg:w="2"/><text x="74.3936%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="74.1436%" y="245" width="0.1631%" height="15" fill="rgb(247,152,14)" fg:x="909" fg:w="2"/><text x="74.3936%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3067%" y="245" width="0.0816%" height="15" fill="rgb(248,195,53)" fg:x="911" fg:w="1"/><text x="74.5567%" y="255.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="74.3067%" y="261" width="0.1631%" height="15" fill="rgb(226,201,16)" fg:x="911" fg:w="2"/><text x="74.5567%" y="271.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="74.3883%" y="245" width="0.0816%" height="15" fill="rgb(205,98,0)" fg:x="912" fg:w="1"/><text x="74.6383%" y="255.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.3883%" y="229" width="0.0816%" height="15" fill="rgb(214,191,48)" fg:x="912" fg:w="1"/><text x="74.6383%" y="239.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.3883%" y="213" width="0.0816%" height="15" fill="rgb(237,112,39)" fg:x="912" fg:w="1"/><text x="74.6383%" y="223.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="74.3883%" y="197" width="0.0816%" height="15" fill="rgb(247,203,27)" fg:x="912" fg:w="1"/><text x="74.6383%" y="207.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (5 samples, 0.41%)</title><rect x="74.1436%" y="325" width="0.4078%" height="15" fill="rgb(235,124,28)" fg:x="909" fg:w="5"/><text x="74.3936%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="74.1436%" y="309" width="0.4078%" height="15" fill="rgb(208,207,46)" fg:x="909" fg:w="5"/><text x="74.3936%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.41%)</title><rect x="74.1436%" y="293" width="0.4078%" height="15" fill="rgb(234,176,4)" fg:x="909" fg:w="5"/><text x="74.3936%" y="303.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (3 samples, 0.24%)</title><rect x="74.3067%" y="277" width="0.2447%" height="15" fill="rgb(230,133,28)" fg:x="911" fg:w="3"/><text x="74.5567%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4698%" y="261" width="0.0816%" height="15" fill="rgb(211,137,40)" fg:x="913" fg:w="1"/><text x="74.7198%" y="271.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5514%" y="325" width="0.0816%" height="15" fill="rgb(254,35,13)" fg:x="914" fg:w="1"/><text x="74.8014%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.5514%" y="309" width="0.0816%" height="15" fill="rgb(225,49,51)" fg:x="914" fg:w="1"/><text x="74.8014%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5514%" y="293" width="0.0816%" height="15" fill="rgb(251,10,15)" fg:x="914" fg:w="1"/><text x="74.8014%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.6330%" y="309" width="0.0816%" height="15" fill="rgb(228,207,15)" fg:x="915" fg:w="1"/><text x="74.8830%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.6330%" y="293" width="0.0816%" height="15" fill="rgb(241,99,19)" fg:x="915" fg:w="1"/><text x="74.8830%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6330%" y="277" width="0.0816%" height="15" fill="rgb(207,104,49)" fg:x="915" fg:w="1"/><text x="74.8830%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7145%" y="277" width="0.0816%" height="15" fill="rgb(234,99,18)" fg:x="916" fg:w="1"/><text x="74.9645%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7145%" y="261" width="0.0816%" height="15" fill="rgb(213,191,49)" fg:x="916" fg:w="1"/><text x="74.9645%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="74.7145%" y="245" width="0.0816%" height="15" fill="rgb(210,226,19)" fg:x="916" fg:w="1"/><text x="74.9645%" y="255.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.7961%" y="277" width="0.0816%" height="15" fill="rgb(229,97,18)" fg:x="917" fg:w="1"/><text x="75.0461%" y="287.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7961%" y="261" width="0.0816%" height="15" fill="rgb(211,167,15)" fg:x="917" fg:w="1"/><text x="75.0461%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.7961%" y="245" width="0.0816%" height="15" fill="rgb(210,169,34)" fg:x="917" fg:w="1"/><text x="75.0461%" y="255.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7961%" y="229" width="0.0816%" height="15" fill="rgb(241,121,31)" fg:x="917" fg:w="1"/><text x="75.0461%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7961%" y="213" width="0.0816%" height="15" fill="rgb(232,40,11)" fg:x="917" fg:w="1"/><text x="75.0461%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.9592%" y="261" width="0.0816%" height="15" fill="rgb(205,86,26)" fg:x="919" fg:w="1"/><text x="75.2092%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.0408%" y="261" width="0.0816%" height="15" fill="rgb(231,126,28)" fg:x="920" fg:w="1"/><text x="75.2908%" y="271.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.0408%" y="245" width="0.0816%" height="15" fill="rgb(219,221,18)" fg:x="920" fg:w="1"/><text x="75.2908%" y="255.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="75.0408%" y="229" width="0.0816%" height="15" fill="rgb(211,40,0)" fg:x="920" fg:w="1"/><text x="75.2908%" y="239.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="74.7145%" y="293" width="0.4894%" height="15" fill="rgb(239,85,43)" fg:x="916" fg:w="6"/><text x="74.9645%" y="303.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="74.8777%" y="277" width="0.3263%" height="15" fill="rgb(231,55,21)" fg:x="918" fg:w="4"/><text x="75.1277%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1223%" y="261" width="0.0816%" height="15" fill="rgb(225,184,43)" fg:x="921" fg:w="1"/><text x="75.3723%" y="271.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (80 samples, 6.53%)</title><rect x="68.7602%" y="469" width="6.5253%" height="15" fill="rgb(251,158,41)" fg:x="843" fg:w="80"/><text x="69.0102%" y="479.50">&lt;plugins_..</text></g><g><title>core::iter::adapters::try_process (78 samples, 6.36%)</title><rect x="68.9233%" y="453" width="6.3622%" height="15" fill="rgb(234,159,37)" fg:x="845" fg:w="78"/><text x="69.1733%" y="463.50">core::it..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (53 samples, 4.32%)</title><rect x="70.9625%" y="437" width="4.3230%" height="15" fill="rgb(216,204,22)" fg:x="870" fg:w="53"/><text x="71.2125%" y="447.50">alloc..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (53 samples, 4.32%)</title><rect x="70.9625%" y="421" width="4.3230%" height="15" fill="rgb(214,17,3)" fg:x="870" fg:w="53"/><text x="71.2125%" y="431.50">&lt;core..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (52 samples, 4.24%)</title><rect x="71.0440%" y="405" width="4.2414%" height="15" fill="rgb(212,111,17)" fg:x="871" fg:w="52"/><text x="71.2940%" y="415.50">plugi..</text></g><g><title>&lt;plugins_rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (46 samples, 3.75%)</title><rect x="71.5334%" y="389" width="3.7520%" height="15" fill="rgb(221,157,24)" fg:x="877" fg:w="46"/><text x="71.7834%" y="399.50">&lt;plu..</text></g><g><title>kernel::model::EntityPtr::to_json_value (20 samples, 1.63%)</title><rect x="73.6542%" y="373" width="1.6313%" height="15" fill="rgb(252,16,13)" fg:x="903" fg:w="20"/><text x="73.9042%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (20 samples, 1.63%)</title><rect x="73.6542%" y="357" width="1.6313%" height="15" fill="rgb(221,62,2)" fg:x="903" fg:w="20"/><text x="73.9042%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (20 samples, 1.63%)</title><rect x="73.6542%" y="341" width="1.6313%" height="15" fill="rgb(247,87,22)" fg:x="903" fg:w="20"/><text x="73.9042%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.65%)</title><rect x="74.6330%" y="325" width="0.6525%" height="15" fill="rgb(215,73,9)" fg:x="915" fg:w="8"/><text x="74.8830%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (7 samples, 0.57%)</title><rect x="74.7145%" y="309" width="0.5710%" height="15" fill="rgb(207,175,33)" fg:x="916" fg:w="7"/><text x="74.9645%" y="319.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="75.2039%" y="293" width="0.0816%" height="15" fill="rgb(243,129,54)" fg:x="922" fg:w="1"/><text x="75.4539%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2039%" y="277" width="0.0816%" height="15" fill="rgb(227,119,45)" fg:x="922" fg:w="1"/><text x="75.4539%" y="287.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (92 samples, 7.50%)</title><rect x="67.8630%" y="517" width="7.5041%" height="15" fill="rgb(205,109,36)" fg:x="832" fg:w="92"/><text x="68.1130%" y="527.50">kernel::pl..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (92 samples, 7.50%)</title><rect x="67.8630%" y="501" width="7.5041%" height="15" fill="rgb(205,6,39)" fg:x="832" fg:w="92"/><text x="68.1130%" y="511.50">&lt;plugins_d..</text></g><g><title>plugins_rpc::querying::have_surroundings (81 samples, 6.61%)</title><rect x="68.7602%" y="485" width="6.6069%" height="15" fill="rgb(221,32,16)" fg:x="843" fg:w="81"/><text x="69.0102%" y="495.50">plugins_r..</text></g><g><title>&lt;plugins_rpc_proto::Surroundings as core::convert::TryFrom&lt;&amp;kernel::surround::Surroundings&gt;&gt;::try_from (1 samples, 0.08%)</title><rect x="75.2855%" y="469" width="0.0816%" height="15" fill="rgb(228,144,50)" fg:x="923" fg:w="1"/><text x="75.5355%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (925 samples, 75.45%)</title><rect x="0.0000%" y="597" width="75.4486%" height="15" fill="rgb(229,201,53)" fg:x="0" fg:w="925"/><text x="0.2500%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (925 samples, 75.45%)</title><rect x="0.0000%" y="581" width="75.4486%" height="15" fill="rgb(249,153,27)" fg:x="0" fg:w="925"/><text x="0.2500%" y="591.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (925 samples, 75.45%)</title><rect x="0.0000%" y="565" width="75.4486%" height="15" fill="rgb(227,106,25)" fg:x="0" fg:w="925"/><text x="0.2500%" y="575.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (806 samples, 65.74%)</title><rect x="9.7064%" y="549" width="65.7423%" height="15" fill="rgb(230,65,29)" fg:x="119" fg:w="806"/><text x="9.9564%" y="559.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (806 samples, 65.74%)</title><rect x="9.7064%" y="533" width="65.7423%" height="15" fill="rgb(221,57,46)" fg:x="119" fg:w="806"/><text x="9.9564%" y="543.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="75.3670%" y="517" width="0.0816%" height="15" fill="rgb(229,161,17)" fg:x="924" fg:w="1"/><text x="75.6170%" y="527.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="75.3670%" y="501" width="0.0816%" height="15" fill="rgb(222,213,11)" fg:x="924" fg:w="1"/><text x="75.6170%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="75.3670%" y="485" width="0.0816%" height="15" fill="rgb(235,35,13)" fg:x="924" fg:w="1"/><text x="75.6170%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="75.3670%" y="469" width="0.0816%" height="15" fill="rgb(233,158,34)" fg:x="924" fg:w="1"/><text x="75.6170%" y="479.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="75.3670%" y="453" width="0.0816%" height="15" fill="rgb(215,151,48)" fg:x="924" fg:w="1"/><text x="75.6170%" y="463.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.4486%" y="549" width="0.0816%" height="15" fill="rgb(229,84,14)" fg:x="925" fg:w="1"/><text x="75.6986%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (1 samples, 0.08%)</title><rect x="75.4486%" y="533" width="0.0816%" height="15" fill="rgb(229,68,14)" fg:x="925" fg:w="1"/><text x="75.6986%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.4486%" y="517" width="0.0816%" height="15" fill="rgb(243,106,26)" fg:x="925" fg:w="1"/><text x="75.6986%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="75.4486%" y="501" width="0.0816%" height="15" fill="rgb(206,45,38)" fg:x="925" fg:w="1"/><text x="75.6986%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.4486%" y="485" width="0.0816%" height="15" fill="rgb(226,6,15)" fg:x="925" fg:w="1"/><text x="75.6986%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.4486%" y="469" width="0.0816%" height="15" fill="rgb(232,22,54)" fg:x="925" fg:w="1"/><text x="75.6986%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="75.5302%" y="517" width="0.1631%" height="15" fill="rgb(229,222,32)" fg:x="926" fg:w="2"/><text x="75.7802%" y="527.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="75.5302%" y="501" width="0.1631%" height="15" fill="rgb(228,62,29)" fg:x="926" fg:w="2"/><text x="75.7802%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="75.5302%" y="485" width="0.1631%" height="15" fill="rgb(251,103,34)" fg:x="926" fg:w="2"/><text x="75.7802%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="75.5302%" y="469" width="0.1631%" height="15" fill="rgb(233,12,30)" fg:x="926" fg:w="2"/><text x="75.7802%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="75.5302%" y="453" width="0.1631%" height="15" fill="rgb(238,52,0)" fg:x="926" fg:w="2"/><text x="75.7802%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.5302%" y="437" width="0.1631%" height="15" fill="rgb(223,98,5)" fg:x="926" fg:w="2"/><text x="75.7802%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6117%" y="421" width="0.0816%" height="15" fill="rgb(228,75,37)" fg:x="927" fg:w="1"/><text x="75.8617%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6117%" y="405" width="0.0816%" height="15" fill="rgb(205,115,49)" fg:x="927" fg:w="1"/><text x="75.8617%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6117%" y="389" width="0.0816%" height="15" fill="rgb(250,154,43)" fg:x="927" fg:w="1"/><text x="75.8617%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.6117%" y="373" width="0.0816%" height="15" fill="rgb(226,43,29)" fg:x="927" fg:w="1"/><text x="75.8617%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6117%" y="357" width="0.0816%" height="15" fill="rgb(249,228,39)" fg:x="927" fg:w="1"/><text x="75.8617%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6117%" y="341" width="0.0816%" height="15" fill="rgb(216,79,43)" fg:x="927" fg:w="1"/><text x="75.8617%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6117%" y="325" width="0.0816%" height="15" fill="rgb(228,95,12)" fg:x="927" fg:w="1"/><text x="75.8617%" y="335.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (1 samples, 0.08%)</title><rect x="75.6933%" y="517" width="0.0816%" height="15" fill="rgb(249,221,15)" fg:x="928" fg:w="1"/><text x="75.9433%" y="527.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="75.6933%" y="501" width="0.0816%" height="15" fill="rgb(233,34,13)" fg:x="928" fg:w="1"/><text x="75.9433%" y="511.50"></text></g><g><title>libloading::os::unix::Library::open (1 samples, 0.08%)</title><rect x="75.6933%" y="485" width="0.0816%" height="15" fill="rgb(214,103,39)" fg:x="928" fg:w="1"/><text x="75.9433%" y="495.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="75.6933%" y="469" width="0.0816%" height="15" fill="rgb(251,126,39)" fg:x="928" fg:w="1"/><text x="75.9433%" y="479.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="75.6933%" y="453" width="0.0816%" height="15" fill="rgb(214,216,36)" fg:x="928" fg:w="1"/><text x="75.9433%" y="463.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="75.6933%" y="437" width="0.0816%" height="15" fill="rgb(220,221,8)" fg:x="928" fg:w="1"/><text x="75.9433%" y="447.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (4 samples, 0.33%)</title><rect x="75.5302%" y="549" width="0.3263%" height="15" fill="rgb(240,216,3)" fg:x="926" fg:w="4"/><text x="75.7802%" y="559.50"></text></g><g><title>engine::session::Session::new (4 samples, 0.33%)</title><rect x="75.5302%" y="533" width="0.3263%" height="15" fill="rgb(232,218,17)" fg:x="926" fg:w="4"/><text x="75.7802%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="75.7749%" y="517" width="0.0816%" height="15" fill="rgb(229,163,45)" fg:x="929" fg:w="1"/><text x="76.0249%" y="527.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="75.7749%" y="501" width="0.0816%" height="15" fill="rgb(231,110,42)" fg:x="929" fg:w="1"/><text x="76.0249%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.8564%" y="437" width="0.0816%" height="15" fill="rgb(208,170,48)" fg:x="930" fg:w="1"/><text x="76.1064%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.8564%" y="421" width="0.0816%" height="15" fill="rgb(239,116,25)" fg:x="930" fg:w="1"/><text x="76.1064%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.8564%" y="405" width="0.0816%" height="15" fill="rgb(219,200,50)" fg:x="930" fg:w="1"/><text x="76.1064%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.8564%" y="389" width="0.0816%" height="15" fill="rgb(245,200,0)" fg:x="930" fg:w="1"/><text x="76.1064%" y="399.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="75.8564%" y="453" width="0.1631%" height="15" fill="rgb(245,119,33)" fg:x="930" fg:w="2"/><text x="76.1064%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.9380%" y="437" width="0.0816%" height="15" fill="rgb(231,125,12)" fg:x="931" fg:w="1"/><text x="76.1880%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.9380%" y="421" width="0.0816%" height="15" fill="rgb(216,96,41)" fg:x="931" fg:w="1"/><text x="76.1880%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="75.8564%" y="469" width="0.2447%" height="15" fill="rgb(248,43,45)" fg:x="930" fg:w="3"/><text x="76.1064%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0196%" y="453" width="0.0816%" height="15" fill="rgb(217,222,7)" fg:x="932" fg:w="1"/><text x="76.2696%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0196%" y="437" width="0.0816%" height="15" fill="rgb(233,28,6)" fg:x="932" fg:w="1"/><text x="76.2696%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.1011%" y="469" width="0.0816%" height="15" fill="rgb(231,218,15)" fg:x="933" fg:w="1"/><text x="76.3511%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.1011%" y="453" width="0.0816%" height="15" fill="rgb(226,171,48)" fg:x="933" fg:w="1"/><text x="76.3511%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.1011%" y="437" width="0.0816%" height="15" fill="rgb(235,201,9)" fg:x="933" fg:w="1"/><text x="76.3511%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.1011%" y="421" width="0.0816%" height="15" fill="rgb(217,80,15)" fg:x="933" fg:w="1"/><text x="76.3511%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1827%" y="405" width="0.0816%" height="15" fill="rgb(219,152,8)" fg:x="934" fg:w="1"/><text x="76.4327%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1827%" y="389" width="0.0816%" height="15" fill="rgb(243,107,38)" fg:x="934" fg:w="1"/><text x="76.4327%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1827%" y="373" width="0.0816%" height="15" fill="rgb(231,17,5)" fg:x="934" fg:w="1"/><text x="76.4327%" y="383.50"></text></g><g><title>engine::session::Session::flush (6 samples, 0.49%)</title><rect x="75.8564%" y="533" width="0.4894%" height="15" fill="rgb(209,25,54)" fg:x="930" fg:w="6"/><text x="76.1064%" y="543.50"></text></g><g><title>engine::session::Session::save_entity_changes (6 samples, 0.49%)</title><rect x="75.8564%" y="517" width="0.4894%" height="15" fill="rgb(219,0,2)" fg:x="930" fg:w="6"/><text x="76.1064%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (6 samples, 0.49%)</title><rect x="75.8564%" y="501" width="0.4894%" height="15" fill="rgb(246,9,5)" fg:x="930" fg:w="6"/><text x="76.1064%" y="511.50"></text></g><g><title>engine::session::Session::check_for_changes (6 samples, 0.49%)</title><rect x="75.8564%" y="485" width="0.4894%" height="15" fill="rgb(226,159,4)" fg:x="930" fg:w="6"/><text x="76.1064%" y="495.50"></text></g><g><title>kernel::compare::any_entity_changes (2 samples, 0.16%)</title><rect x="76.1827%" y="469" width="0.1631%" height="15" fill="rgb(219,175,34)" fg:x="934" fg:w="2"/><text x="76.4327%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="76.1827%" y="453" width="0.1631%" height="15" fill="rgb(236,10,46)" fg:x="934" fg:w="2"/><text x="76.4327%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="76.1827%" y="437" width="0.1631%" height="15" fill="rgb(240,211,16)" fg:x="934" fg:w="2"/><text x="76.4327%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="76.1827%" y="421" width="0.1631%" height="15" fill="rgb(205,3,43)" fg:x="934" fg:w="2"/><text x="76.4327%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2643%" y="405" width="0.0816%" height="15" fill="rgb(245,7,22)" fg:x="935" fg:w="1"/><text x="76.5143%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.2643%" y="389" width="0.0816%" height="15" fill="rgb(239,132,32)" fg:x="935" fg:w="1"/><text x="76.5143%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.2643%" y="373" width="0.0816%" height="15" fill="rgb(228,202,34)" fg:x="935" fg:w="1"/><text x="76.5143%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2643%" y="357" width="0.0816%" height="15" fill="rgb(254,200,22)" fg:x="935" fg:w="1"/><text x="76.5143%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.2643%" y="341" width="0.0816%" height="15" fill="rgb(219,10,39)" fg:x="935" fg:w="1"/><text x="76.5143%" y="351.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="76.3458%" y="533" width="0.0816%" height="15" fill="rgb(226,210,39)" fg:x="936" fg:w="1"/><text x="76.5958%" y="543.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="76.3458%" y="517" width="0.0816%" height="15" fill="rgb(208,219,16)" fg:x="936" fg:w="1"/><text x="76.5958%" y="527.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="76.3458%" y="501" width="0.0816%" height="15" fill="rgb(216,158,51)" fg:x="936" fg:w="1"/><text x="76.5958%" y="511.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="76.3458%" y="485" width="0.0816%" height="15" fill="rgb(233,14,44)" fg:x="936" fg:w="1"/><text x="76.5958%" y="495.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3458%" y="469" width="0.0816%" height="15" fill="rgb(237,97,39)" fg:x="936" fg:w="1"/><text x="76.5958%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.3458%" y="453" width="0.0816%" height="15" fill="rgb(218,198,43)" fg:x="936" fg:w="1"/><text x="76.5958%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3458%" y="437" width="0.0816%" height="15" fill="rgb(231,104,20)" fg:x="936" fg:w="1"/><text x="76.5958%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.3458%" y="421" width="0.0816%" height="15" fill="rgb(254,36,13)" fg:x="936" fg:w="1"/><text x="76.5958%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.3458%" y="405" width="0.0816%" height="15" fill="rgb(248,14,50)" fg:x="936" fg:w="1"/><text x="76.5958%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.3458%" y="389" width="0.0816%" height="15" fill="rgb(217,107,29)" fg:x="936" fg:w="1"/><text x="76.5958%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="76.3458%" y="373" width="0.0816%" height="15" fill="rgb(251,169,33)" fg:x="936" fg:w="1"/><text x="76.5958%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="76.4274%" y="517" width="0.0816%" height="15" fill="rgb(217,108,32)" fg:x="937" fg:w="1"/><text x="76.6774%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.4274%" y="501" width="0.0816%" height="15" fill="rgb(219,66,42)" fg:x="937" fg:w="1"/><text x="76.6774%" y="511.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="76.4274%" y="485" width="0.0816%" height="15" fill="rgb(206,180,7)" fg:x="937" fg:w="1"/><text x="76.6774%" y="495.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="76.4274%" y="469" width="0.0816%" height="15" fill="rgb(208,226,31)" fg:x="937" fg:w="1"/><text x="76.6774%" y="479.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="76.4274%" y="453" width="0.0816%" height="15" fill="rgb(218,26,49)" fg:x="937" fg:w="1"/><text x="76.6774%" y="463.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="76.4274%" y="437" width="0.0816%" height="15" fill="rgb(233,197,48)" fg:x="937" fg:w="1"/><text x="76.6774%" y="447.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="76.4274%" y="421" width="0.0816%" height="15" fill="rgb(252,181,51)" fg:x="937" fg:w="1"/><text x="76.6774%" y="431.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Exit&gt;::serialize (1 samples, 0.08%)</title><rect x="76.4274%" y="405" width="0.0816%" height="15" fill="rgb(253,90,19)" fg:x="937" fg:w="1"/><text x="76.6774%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.4274%" y="389" width="0.0816%" height="15" fill="rgb(215,171,30)" fg:x="937" fg:w="1"/><text x="76.6774%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="76.4274%" y="373" width="0.0816%" height="15" fill="rgb(214,222,9)" fg:x="937" fg:w="1"/><text x="76.6774%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.4274%" y="357" width="0.0816%" height="15" fill="rgb(223,3,22)" fg:x="937" fg:w="1"/><text x="76.6774%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.4274%" y="341" width="0.0816%" height="15" fill="rgb(225,196,46)" fg:x="937" fg:w="1"/><text x="76.6774%" y="351.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.5090%" y="485" width="0.0816%" height="15" fill="rgb(209,110,37)" fg:x="938" fg:w="1"/><text x="76.7590%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="76.5090%" y="469" width="0.0816%" height="15" fill="rgb(249,89,12)" fg:x="938" fg:w="1"/><text x="76.7590%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="76.5090%" y="453" width="0.0816%" height="15" fill="rgb(226,27,33)" fg:x="938" fg:w="1"/><text x="76.7590%" y="463.50"></text></g><g><title>engine::identifiers::model::set_gid (2 samples, 0.16%)</title><rect x="76.5905%" y="485" width="0.1631%" height="15" fill="rgb(213,82,22)" fg:x="939" fg:w="2"/><text x="76.8405%" y="495.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="76.5905%" y="469" width="0.1631%" height="15" fill="rgb(248,140,0)" fg:x="939" fg:w="2"/><text x="76.8405%" y="479.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="76.5905%" y="453" width="0.1631%" height="15" fill="rgb(228,106,3)" fg:x="939" fg:w="2"/><text x="76.8405%" y="463.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (2 samples, 0.16%)</title><rect x="76.5905%" y="437" width="0.1631%" height="15" fill="rgb(209,23,37)" fg:x="939" fg:w="2"/><text x="76.8405%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="76.5905%" y="421" width="0.1631%" height="15" fill="rgb(241,93,50)" fg:x="939" fg:w="2"/><text x="76.8405%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="76.5905%" y="405" width="0.1631%" height="15" fill="rgb(253,46,43)" fg:x="939" fg:w="2"/><text x="76.8405%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="76.5905%" y="389" width="0.1631%" height="15" fill="rgb(226,206,43)" fg:x="939" fg:w="2"/><text x="76.8405%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="76.5905%" y="373" width="0.1631%" height="15" fill="rgb(217,54,7)" fg:x="939" fg:w="2"/><text x="76.8405%" y="383.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="76.7537%" y="437" width="0.0816%" height="15" fill="rgb(223,5,52)" fg:x="941" fg:w="1"/><text x="77.0037%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.7537%" y="421" width="0.0816%" height="15" fill="rgb(206,52,46)" fg:x="941" fg:w="1"/><text x="77.0037%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.7537%" y="405" width="0.0816%" height="15" fill="rgb(253,136,11)" fg:x="941" fg:w="1"/><text x="77.0037%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.7537%" y="389" width="0.0816%" height="15" fill="rgb(208,106,33)" fg:x="941" fg:w="1"/><text x="77.0037%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.7537%" y="373" width="0.0816%" height="15" fill="rgb(206,54,4)" fg:x="941" fg:w="1"/><text x="77.0037%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8352%" y="421" width="0.0816%" height="15" fill="rgb(213,3,15)" fg:x="942" fg:w="1"/><text x="77.0852%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8352%" y="405" width="0.0816%" height="15" fill="rgb(252,211,39)" fg:x="942" fg:w="1"/><text x="77.0852%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.8352%" y="389" width="0.0816%" height="15" fill="rgb(223,6,36)" fg:x="942" fg:w="1"/><text x="77.0852%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.33%)</title><rect x="76.7537%" y="453" width="0.3263%" height="15" fill="rgb(252,169,45)" fg:x="941" fg:w="4"/><text x="77.0037%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="76.8352%" y="437" width="0.2447%" height="15" fill="rgb(212,48,26)" fg:x="942" fg:w="3"/><text x="77.0852%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.9168%" y="421" width="0.1631%" height="15" fill="rgb(251,102,48)" fg:x="943" fg:w="2"/><text x="77.1668%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.9984%" y="405" width="0.0816%" height="15" fill="rgb(243,208,16)" fg:x="944" fg:w="1"/><text x="77.2484%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.9984%" y="389" width="0.0816%" height="15" fill="rgb(219,96,24)" fg:x="944" fg:w="1"/><text x="77.2484%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.9984%" y="373" width="0.0816%" height="15" fill="rgb(219,33,29)" fg:x="944" fg:w="1"/><text x="77.2484%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.9984%" y="357" width="0.0816%" height="15" fill="rgb(223,176,5)" fg:x="944" fg:w="1"/><text x="77.2484%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.9984%" y="341" width="0.0816%" height="15" fill="rgb(228,140,14)" fg:x="944" fg:w="1"/><text x="77.2484%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.0799%" y="421" width="0.0816%" height="15" fill="rgb(217,179,31)" fg:x="945" fg:w="1"/><text x="77.3299%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.0799%" y="453" width="0.1631%" height="15" fill="rgb(230,9,30)" fg:x="945" fg:w="2"/><text x="77.3299%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="77.0799%" y="437" width="0.1631%" height="15" fill="rgb(230,136,20)" fg:x="945" fg:w="2"/><text x="77.3299%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.1615%" y="421" width="0.0816%" height="15" fill="rgb(215,210,22)" fg:x="946" fg:w="1"/><text x="77.4115%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.1615%" y="405" width="0.0816%" height="15" fill="rgb(218,43,5)" fg:x="946" fg:w="1"/><text x="77.4115%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.1615%" y="389" width="0.0816%" height="15" fill="rgb(216,11,5)" fg:x="946" fg:w="1"/><text x="77.4115%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2431%" y="405" width="0.0816%" height="15" fill="rgb(209,82,29)" fg:x="947" fg:w="1"/><text x="77.4931%" y="415.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (8 samples, 0.65%)</title><rect x="76.7537%" y="485" width="0.6525%" height="15" fill="rgb(244,115,12)" fg:x="941" fg:w="8"/><text x="77.0037%" y="495.50"></text></g><g><title>engine::session::Session::check_for_changes (8 samples, 0.65%)</title><rect x="76.7537%" y="469" width="0.6525%" height="15" fill="rgb(222,82,18)" fg:x="941" fg:w="8"/><text x="77.0037%" y="479.50"></text></g><g><title>kernel::compare::any_entity_changes (2 samples, 0.16%)</title><rect x="77.2431%" y="453" width="0.1631%" height="15" fill="rgb(249,227,8)" fg:x="947" fg:w="2"/><text x="77.4931%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="77.2431%" y="437" width="0.1631%" height="15" fill="rgb(253,141,45)" fg:x="947" fg:w="2"/><text x="77.4931%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="77.2431%" y="421" width="0.1631%" height="15" fill="rgb(234,184,4)" fg:x="947" fg:w="2"/><text x="77.4931%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3246%" y="405" width="0.0816%" height="15" fill="rgb(218,194,23)" fg:x="948" fg:w="1"/><text x="77.5746%" y="415.50"></text></g><g><title>engine::session::Session::flush (12 samples, 0.98%)</title><rect x="76.5090%" y="517" width="0.9788%" height="15" fill="rgb(235,66,41)" fg:x="938" fg:w="12"/><text x="76.7590%" y="527.50"></text></g><g><title>engine::session::Session::save_entity_changes (12 samples, 0.98%)</title><rect x="76.5090%" y="501" width="0.9788%" height="15" fill="rgb(245,217,1)" fg:x="938" fg:w="12"/><text x="76.7590%" y="511.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="77.4062%" y="485" width="0.0816%" height="15" fill="rgb(229,91,1)" fg:x="949" fg:w="1"/><text x="77.6562%" y="495.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="77.4062%" y="469" width="0.0816%" height="15" fill="rgb(207,101,30)" fg:x="949" fg:w="1"/><text x="77.6562%" y="479.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="77.4062%" y="453" width="0.0816%" height="15" fill="rgb(223,82,49)" fg:x="949" fg:w="1"/><text x="77.6562%" y="463.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="77.4062%" y="437" width="0.0816%" height="15" fill="rgb(218,167,17)" fg:x="949" fg:w="1"/><text x="77.6562%" y="447.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="77.4062%" y="421" width="0.0816%" height="15" fill="rgb(208,103,14)" fg:x="949" fg:w="1"/><text x="77.6562%" y="431.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="77.4062%" y="405" width="0.0816%" height="15" fill="rgb(238,20,8)" fg:x="949" fg:w="1"/><text x="77.6562%" y="415.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="77.4062%" y="389" width="0.0816%" height="15" fill="rgb(218,80,54)" fg:x="949" fg:w="1"/><text x="77.6562%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="77.4878%" y="517" width="0.0816%" height="15" fill="rgb(240,144,17)" fg:x="950" fg:w="1"/><text x="77.7378%" y="527.50"></text></g><g><title>kernel::model::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="77.4878%" y="501" width="0.0816%" height="15" fill="rgb(245,27,50)" fg:x="950" fg:w="1"/><text x="77.7378%" y="511.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="77.4878%" y="485" width="0.0816%" height="15" fill="rgb(251,51,7)" fg:x="950" fg:w="1"/><text x="77.7378%" y="495.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (22 samples, 1.79%)</title><rect x="75.8564%" y="549" width="1.7945%" height="15" fill="rgb(245,217,29)" fg:x="930" fg:w="22"/><text x="76.1064%" y="559.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::build (15 samples, 1.22%)</title><rect x="76.4274%" y="533" width="1.2235%" height="15" fill="rgb(221,176,29)" fg:x="937" fg:w="15"/><text x="76.6774%" y="543.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="77.5693%" y="517" width="0.0816%" height="15" fill="rgb(212,180,24)" fg:x="951" fg:w="1"/><text x="77.8193%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="77.5693%" y="501" width="0.0816%" height="15" fill="rgb(254,24,2)" fg:x="951" fg:w="1"/><text x="77.8193%" y="511.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="77.5693%" y="485" width="0.0816%" height="15" fill="rgb(230,100,2)" fg:x="951" fg:w="1"/><text x="77.8193%" y="495.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="77.5693%" y="469" width="0.0816%" height="15" fill="rgb(219,142,25)" fg:x="951" fg:w="1"/><text x="77.8193%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5693%" y="453" width="0.0816%" height="15" fill="rgb(240,73,43)" fg:x="951" fg:w="1"/><text x="77.8193%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5693%" y="437" width="0.0816%" height="15" fill="rgb(214,114,15)" fg:x="951" fg:w="1"/><text x="77.8193%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="77.5693%" y="421" width="0.0816%" height="15" fill="rgb(207,130,4)" fg:x="951" fg:w="1"/><text x="77.8193%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5693%" y="405" width="0.0816%" height="15" fill="rgb(221,25,40)" fg:x="951" fg:w="1"/><text x="77.8193%" y="415.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="77.6509%" y="517" width="0.0816%" height="15" fill="rgb(241,184,7)" fg:x="952" fg:w="1"/><text x="77.9009%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6509%" y="501" width="0.0816%" height="15" fill="rgb(235,159,4)" fg:x="952" fg:w="1"/><text x="77.9009%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6509%" y="485" width="0.0816%" height="15" fill="rgb(214,87,48)" fg:x="952" fg:w="1"/><text x="77.9009%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.6509%" y="469" width="0.0816%" height="15" fill="rgb(246,198,24)" fg:x="952" fg:w="1"/><text x="77.9009%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.6509%" y="453" width="0.0816%" height="15" fill="rgb(209,66,40)" fg:x="952" fg:w="1"/><text x="77.9009%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.6509%" y="437" width="0.0816%" height="15" fill="rgb(233,147,39)" fg:x="952" fg:w="1"/><text x="77.9009%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="77.6509%" y="421" width="0.0816%" height="15" fill="rgb(231,145,52)" fg:x="952" fg:w="1"/><text x="77.9009%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="77.6509%" y="405" width="0.0816%" height="15" fill="rgb(206,20,26)" fg:x="952" fg:w="1"/><text x="77.9009%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8956%" y="437" width="0.0816%" height="15" fill="rgb(238,220,4)" fg:x="955" fg:w="1"/><text x="78.1456%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.8956%" y="421" width="0.0816%" height="15" fill="rgb(252,195,42)" fg:x="955" fg:w="1"/><text x="78.1456%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="77.8956%" y="405" width="0.0816%" height="15" fill="rgb(209,10,6)" fg:x="955" fg:w="1"/><text x="78.1456%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.9772%" y="389" width="0.0816%" height="15" fill="rgb(229,3,52)" fg:x="956" fg:w="1"/><text x="78.2272%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9772%" y="373" width="0.0816%" height="15" fill="rgb(253,49,37)" fg:x="956" fg:w="1"/><text x="78.2272%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.9772%" y="357" width="0.0816%" height="15" fill="rgb(240,103,49)" fg:x="956" fg:w="1"/><text x="78.2272%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9772%" y="341" width="0.0816%" height="15" fill="rgb(250,182,30)" fg:x="956" fg:w="1"/><text x="78.2272%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.9772%" y="405" width="0.1631%" height="15" fill="rgb(248,8,30)" fg:x="956" fg:w="2"/><text x="78.2272%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.0587%" y="389" width="0.0816%" height="15" fill="rgb(237,120,30)" fg:x="957" fg:w="1"/><text x="78.3087%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.0587%" y="373" width="0.0816%" height="15" fill="rgb(221,146,34)" fg:x="957" fg:w="1"/><text x="78.3087%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="77.7325%" y="469" width="0.4894%" height="15" fill="rgb(242,55,13)" fg:x="953" fg:w="6"/><text x="77.9825%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="77.7325%" y="453" width="0.4894%" height="15" fill="rgb(242,112,31)" fg:x="953" fg:w="6"/><text x="77.9825%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="77.9772%" y="437" width="0.2447%" height="15" fill="rgb(249,192,27)" fg:x="956" fg:w="3"/><text x="78.2272%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.24%)</title><rect x="77.9772%" y="421" width="0.2447%" height="15" fill="rgb(208,204,44)" fg:x="956" fg:w="3"/><text x="78.2272%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.1403%" y="405" width="0.0816%" height="15" fill="rgb(208,93,54)" fg:x="958" fg:w="1"/><text x="78.3903%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="78.2219%" y="469" width="0.0816%" height="15" fill="rgb(242,1,31)" fg:x="959" fg:w="1"/><text x="78.4719%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="78.2219%" y="453" width="0.0816%" height="15" fill="rgb(241,83,25)" fg:x="959" fg:w="1"/><text x="78.4719%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2219%" y="437" width="0.0816%" height="15" fill="rgb(205,169,50)" fg:x="959" fg:w="1"/><text x="78.4719%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.2219%" y="421" width="0.0816%" height="15" fill="rgb(239,186,37)" fg:x="959" fg:w="1"/><text x="78.4719%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2219%" y="405" width="0.0816%" height="15" fill="rgb(205,221,10)" fg:x="959" fg:w="1"/><text x="78.4719%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.2219%" y="389" width="0.0816%" height="15" fill="rgb(218,196,15)" fg:x="959" fg:w="1"/><text x="78.4719%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.2219%" y="373" width="0.0816%" height="15" fill="rgb(218,196,35)" fg:x="959" fg:w="1"/><text x="78.4719%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="78.3034%" y="437" width="0.0816%" height="15" fill="rgb(233,63,24)" fg:x="960" fg:w="1"/><text x="78.5534%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="78.3034%" y="421" width="0.0816%" height="15" fill="rgb(225,8,4)" fg:x="960" fg:w="1"/><text x="78.5534%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="78.3034%" y="405" width="0.0816%" height="15" fill="rgb(234,105,35)" fg:x="960" fg:w="1"/><text x="78.5534%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.3034%" y="389" width="0.0816%" height="15" fill="rgb(236,21,32)" fg:x="960" fg:w="1"/><text x="78.5534%" y="399.50"></text></g><g><title>engine::session::Session::close (10 samples, 0.82%)</title><rect x="77.6509%" y="549" width="0.8157%" height="15" fill="rgb(228,109,6)" fg:x="952" fg:w="10"/><text x="77.9009%" y="559.50"></text></g><g><title>engine::session::Session::save_entity_changes (10 samples, 0.82%)</title><rect x="77.6509%" y="533" width="0.8157%" height="15" fill="rgb(229,215,31)" fg:x="952" fg:w="10"/><text x="77.9009%" y="543.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (9 samples, 0.73%)</title><rect x="77.7325%" y="517" width="0.7341%" height="15" fill="rgb(221,52,54)" fg:x="953" fg:w="9"/><text x="77.9825%" y="527.50"></text></g><g><title>engine::session::Session::check_for_changes (9 samples, 0.73%)</title><rect x="77.7325%" y="501" width="0.7341%" height="15" fill="rgb(252,129,43)" fg:x="953" fg:w="9"/><text x="77.9825%" y="511.50"></text></g><g><title>kernel::compare::any_entity_changes (9 samples, 0.73%)</title><rect x="77.7325%" y="485" width="0.7341%" height="15" fill="rgb(248,183,27)" fg:x="953" fg:w="9"/><text x="77.9825%" y="495.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="78.3034%" y="469" width="0.1631%" height="15" fill="rgb(250,0,22)" fg:x="960" fg:w="2"/><text x="78.5534%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="78.3034%" y="453" width="0.1631%" height="15" fill="rgb(213,166,10)" fg:x="960" fg:w="2"/><text x="78.5534%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.3850%" y="437" width="0.0816%" height="15" fill="rgb(207,163,36)" fg:x="961" fg:w="1"/><text x="78.6350%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5481%" y="293" width="0.0816%" height="15" fill="rgb(208,122,22)" fg:x="963" fg:w="1"/><text x="78.7981%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6297%" y="293" width="0.0816%" height="15" fill="rgb(207,104,49)" fg:x="964" fg:w="1"/><text x="78.8797%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.6297%" y="277" width="0.0816%" height="15" fill="rgb(248,211,50)" fg:x="964" fg:w="1"/><text x="78.8797%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="78.6297%" y="261" width="0.0816%" height="15" fill="rgb(217,13,45)" fg:x="964" fg:w="1"/><text x="78.8797%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="78.5481%" y="325" width="0.2447%" height="15" fill="rgb(211,216,49)" fg:x="963" fg:w="3"/><text x="78.7981%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="78.5481%" y="309" width="0.2447%" height="15" fill="rgb(221,58,53)" fg:x="963" fg:w="3"/><text x="78.7981%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="78.7113%" y="293" width="0.0816%" height="15" fill="rgb(220,112,41)" fg:x="965" fg:w="1"/><text x="78.9613%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="78.4666%" y="389" width="0.4078%" height="15" fill="rgb(236,38,28)" fg:x="962" fg:w="5"/><text x="78.7166%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="78.4666%" y="373" width="0.4078%" height="15" fill="rgb(227,195,22)" fg:x="962" fg:w="5"/><text x="78.7166%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.41%)</title><rect x="78.4666%" y="357" width="0.4078%" height="15" fill="rgb(214,55,33)" fg:x="962" fg:w="5"/><text x="78.7166%" y="367.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.33%)</title><rect x="78.5481%" y="341" width="0.3263%" height="15" fill="rgb(248,80,13)" fg:x="963" fg:w="4"/><text x="78.7981%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="78.7928%" y="325" width="0.0816%" height="15" fill="rgb(238,52,6)" fg:x="966" fg:w="1"/><text x="79.0428%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="78.7928%" y="309" width="0.0816%" height="15" fill="rgb(224,198,47)" fg:x="966" fg:w="1"/><text x="79.0428%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.7928%" y="293" width="0.0816%" height="15" fill="rgb(233,171,20)" fg:x="966" fg:w="1"/><text x="79.0428%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.7928%" y="277" width="0.0816%" height="15" fill="rgb(241,30,25)" fg:x="966" fg:w="1"/><text x="79.0428%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7928%" y="261" width="0.0816%" height="15" fill="rgb(207,171,38)" fg:x="966" fg:w="1"/><text x="79.0428%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="78.8744%" y="357" width="0.0816%" height="15" fill="rgb(234,70,1)" fg:x="967" fg:w="1"/><text x="79.1244%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="78.8744%" y="389" width="0.1631%" height="15" fill="rgb(232,178,18)" fg:x="967" fg:w="2"/><text x="79.1244%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="78.8744%" y="373" width="0.1631%" height="15" fill="rgb(241,78,40)" fg:x="967" fg:w="2"/><text x="79.1244%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="78.9560%" y="357" width="0.0816%" height="15" fill="rgb(222,35,25)" fg:x="968" fg:w="1"/><text x="79.2060%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="78.9560%" y="341" width="0.0816%" height="15" fill="rgb(207,92,16)" fg:x="968" fg:w="1"/><text x="79.2060%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.90%)</title><rect x="79.2007%" y="325" width="0.8972%" height="15" fill="rgb(216,59,51)" fg:x="971" fg:w="11"/><text x="79.4507%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.90%)</title><rect x="79.2007%" y="309" width="0.8972%" height="15" fill="rgb(213,80,28)" fg:x="971" fg:w="11"/><text x="79.4507%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="80.0979%" y="325" width="0.1631%" height="15" fill="rgb(220,93,7)" fg:x="982" fg:w="2"/><text x="80.3479%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="80.2610%" y="325" width="0.1631%" height="15" fill="rgb(225,24,44)" fg:x="984" fg:w="2"/><text x="80.5110%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="80.3426%" y="309" width="0.0816%" height="15" fill="rgb(243,74,40)" fg:x="985" fg:w="1"/><text x="80.5926%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="80.3426%" y="293" width="0.0816%" height="15" fill="rgb(228,39,7)" fg:x="985" fg:w="1"/><text x="80.5926%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="80.3426%" y="277" width="0.0816%" height="15" fill="rgb(227,79,8)" fg:x="985" fg:w="1"/><text x="80.5926%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.3426%" y="261" width="0.0816%" height="15" fill="rgb(236,58,11)" fg:x="985" fg:w="1"/><text x="80.5926%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.3426%" y="245" width="0.0816%" height="15" fill="rgb(249,63,35)" fg:x="985" fg:w="1"/><text x="80.5926%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.5873%" y="261" width="0.0816%" height="15" fill="rgb(252,114,16)" fg:x="988" fg:w="1"/><text x="80.8373%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="80.6688%" y="261" width="0.0816%" height="15" fill="rgb(254,151,24)" fg:x="989" fg:w="1"/><text x="80.9188%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="80.6688%" y="245" width="0.0816%" height="15" fill="rgb(253,54,39)" fg:x="989" fg:w="1"/><text x="80.9188%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.6688%" y="229" width="0.0816%" height="15" fill="rgb(243,25,45)" fg:x="989" fg:w="1"/><text x="80.9188%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.6688%" y="213" width="0.0816%" height="15" fill="rgb(234,134,9)" fg:x="989" fg:w="1"/><text x="80.9188%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.6688%" y="197" width="0.0816%" height="15" fill="rgb(227,166,31)" fg:x="989" fg:w="1"/><text x="80.9188%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (34 samples, 2.77%)</title><rect x="80.7504%" y="261" width="2.7732%" height="15" fill="rgb(245,143,41)" fg:x="990" fg:w="34"/><text x="81.0004%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (34 samples, 2.77%)</title><rect x="80.7504%" y="245" width="2.7732%" height="15" fill="rgb(238,181,32)" fg:x="990" fg:w="34"/><text x="81.0004%" y="255.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (33 samples, 2.69%)</title><rect x="80.8320%" y="229" width="2.6917%" height="15" fill="rgb(224,113,18)" fg:x="991" fg:w="33"/><text x="81.0820%" y="239.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 3.18%)</title><rect x="80.4241%" y="309" width="3.1811%" height="15" fill="rgb(240,229,28)" fg:x="986" fg:w="39"/><text x="80.6741%" y="319.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (38 samples, 3.10%)</title><rect x="80.5057%" y="293" width="3.0995%" height="15" fill="rgb(250,185,3)" fg:x="987" fg:w="38"/><text x="80.7557%" y="303.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (38 samples, 3.10%)</title><rect x="80.5057%" y="277" width="3.0995%" height="15" fill="rgb(212,59,25)" fg:x="987" fg:w="38"/><text x="80.7557%" y="287.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="83.5237%" y="261" width="0.0816%" height="15" fill="rgb(221,87,20)" fg:x="1024" fg:w="1"/><text x="83.7737%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.6052%" y="309" width="0.0816%" height="15" fill="rgb(213,74,28)" fg:x="1025" fg:w="1"/><text x="83.8552%" y="319.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="83.7684%" y="293" width="0.0816%" height="15" fill="rgb(224,132,34)" fg:x="1027" fg:w="1"/><text x="84.0184%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.8499%" y="293" width="0.0816%" height="15" fill="rgb(222,101,24)" fg:x="1028" fg:w="1"/><text x="84.0999%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="83.9315%" y="293" width="0.0816%" height="15" fill="rgb(254,142,4)" fg:x="1029" fg:w="1"/><text x="84.1815%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.9315%" y="277" width="0.0816%" height="15" fill="rgb(230,229,49)" fg:x="1029" fg:w="1"/><text x="84.1815%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.9315%" y="261" width="0.0816%" height="15" fill="rgb(238,70,47)" fg:x="1029" fg:w="1"/><text x="84.1815%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.9315%" y="245" width="0.0816%" height="15" fill="rgb(231,160,17)" fg:x="1029" fg:w="1"/><text x="84.1815%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="84.0131%" y="293" width="0.2447%" height="15" fill="rgb(218,68,53)" fg:x="1030" fg:w="3"/><text x="84.2631%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (48 samples, 3.92%)</title><rect x="80.4241%" y="325" width="3.9152%" height="15" fill="rgb(236,111,10)" fg:x="986" fg:w="48"/><text x="80.6741%" y="335.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="83.6868%" y="309" width="0.6525%" height="15" fill="rgb(224,34,41)" fg:x="1026" fg:w="8"/><text x="83.9368%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="84.2577%" y="293" width="0.0816%" height="15" fill="rgb(241,118,19)" fg:x="1033" fg:w="1"/><text x="84.5077%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (65 samples, 5.30%)</title><rect x="79.1191%" y="341" width="5.3018%" height="15" fill="rgb(238,129,25)" fg:x="970" fg:w="65"/><text x="79.3691%" y="351.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="84.3393%" y="325" width="0.0816%" height="15" fill="rgb(238,22,31)" fg:x="1034" fg:w="1"/><text x="84.5893%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="84.3393%" y="309" width="0.0816%" height="15" fill="rgb(222,174,48)" fg:x="1034" fg:w="1"/><text x="84.5893%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="84.5024%" y="293" width="0.0816%" height="15" fill="rgb(206,152,40)" fg:x="1036" fg:w="1"/><text x="84.7524%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="84.5024%" y="277" width="0.0816%" height="15" fill="rgb(218,99,54)" fg:x="1036" fg:w="1"/><text x="84.7524%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="84.5024%" y="261" width="0.0816%" height="15" fill="rgb(220,174,26)" fg:x="1036" fg:w="1"/><text x="84.7524%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.33%)</title><rect x="84.4209%" y="309" width="0.3263%" height="15" fill="rgb(245,116,9)" fg:x="1035" fg:w="4"/><text x="84.6709%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="84.5840%" y="293" width="0.1631%" height="15" fill="rgb(209,72,35)" fg:x="1037" fg:w="2"/><text x="84.8340%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="84.5840%" y="277" width="0.1631%" height="15" fill="rgb(226,126,21)" fg:x="1037" fg:w="2"/><text x="84.8340%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="84.5840%" y="261" width="0.1631%" height="15" fill="rgb(227,192,1)" fg:x="1037" fg:w="2"/><text x="84.8340%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="84.5840%" y="245" width="0.1631%" height="15" fill="rgb(237,180,29)" fg:x="1037" fg:w="2"/><text x="84.8340%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="84.4209%" y="341" width="0.4078%" height="15" fill="rgb(230,197,35)" fg:x="1035" fg:w="5"/><text x="84.6709%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="84.4209%" y="325" width="0.4078%" height="15" fill="rgb(246,193,31)" fg:x="1035" fg:w="5"/><text x="84.6709%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="84.7471%" y="309" width="0.0816%" height="15" fill="rgb(241,36,4)" fg:x="1039" fg:w="1"/><text x="84.9971%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.7471%" y="293" width="0.0816%" height="15" fill="rgb(241,130,17)" fg:x="1039" fg:w="1"/><text x="84.9971%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (73 samples, 5.95%)</title><rect x="79.0375%" y="389" width="5.9543%" height="15" fill="rgb(206,137,32)" fg:x="969" fg:w="73"/><text x="79.2875%" y="399.50">regex::r..</text></g><g><title>regex::builders::Builder::build_one_string (73 samples, 5.95%)</title><rect x="79.0375%" y="373" width="5.9543%" height="15" fill="rgb(237,228,51)" fg:x="969" fg:w="73"/><text x="79.2875%" y="383.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (72 samples, 5.87%)</title><rect x="79.1191%" y="357" width="5.8728%" height="15" fill="rgb(243,6,42)" fg:x="970" fg:w="72"/><text x="79.3691%" y="367.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="84.8287%" y="341" width="0.1631%" height="15" fill="rgb(251,74,28)" fg:x="1040" fg:w="2"/><text x="85.0787%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="84.8287%" y="325" width="0.1631%" height="15" fill="rgb(218,20,49)" fg:x="1040" fg:w="2"/><text x="85.0787%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="84.8287%" y="309" width="0.1631%" height="15" fill="rgb(238,28,14)" fg:x="1040" fg:w="2"/><text x="85.0787%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="84.8287%" y="293" width="0.1631%" height="15" fill="rgb(229,40,46)" fg:x="1040" fg:w="2"/><text x="85.0787%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="85.0734%" y="325" width="0.2447%" height="15" fill="rgb(244,195,20)" fg:x="1043" fg:w="3"/><text x="85.3234%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.2365%" y="309" width="0.0816%" height="15" fill="rgb(253,56,35)" fg:x="1045" fg:w="1"/><text x="85.4865%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.2365%" y="293" width="0.0816%" height="15" fill="rgb(210,149,44)" fg:x="1045" fg:w="1"/><text x="85.4865%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.2365%" y="277" width="0.0816%" height="15" fill="rgb(240,135,12)" fg:x="1045" fg:w="1"/><text x="85.4865%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (85 samples, 6.93%)</title><rect x="78.4666%" y="405" width="6.9331%" height="15" fill="rgb(251,24,50)" fg:x="962" fg:w="85"/><text x="78.7166%" y="415.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="84.9918%" y="389" width="0.4078%" height="15" fill="rgb(243,200,47)" fg:x="1042" fg:w="5"/><text x="85.2418%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="84.9918%" y="373" width="0.4078%" height="15" fill="rgb(224,166,26)" fg:x="1042" fg:w="5"/><text x="85.2418%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="84.9918%" y="357" width="0.4078%" height="15" fill="rgb(233,0,47)" fg:x="1042" fg:w="5"/><text x="85.2418%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="85.0734%" y="341" width="0.3263%" height="15" fill="rgb(253,80,5)" fg:x="1043" fg:w="4"/><text x="85.3234%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="85.3181%" y="325" width="0.0816%" height="15" fill="rgb(214,133,25)" fg:x="1046" fg:w="1"/><text x="85.5681%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.3181%" y="309" width="0.0816%" height="15" fill="rgb(209,27,14)" fg:x="1046" fg:w="1"/><text x="85.5681%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.3181%" y="293" width="0.0816%" height="15" fill="rgb(219,102,51)" fg:x="1046" fg:w="1"/><text x="85.5681%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3181%" y="277" width="0.0816%" height="15" fill="rgb(237,18,16)" fg:x="1046" fg:w="1"/><text x="85.5681%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.3997%" y="357" width="0.0816%" height="15" fill="rgb(241,85,17)" fg:x="1047" fg:w="1"/><text x="85.6497%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="85.3997%" y="341" width="0.0816%" height="15" fill="rgb(236,90,42)" fg:x="1047" fg:w="1"/><text x="85.6497%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.3997%" y="325" width="0.0816%" height="15" fill="rgb(249,57,21)" fg:x="1047" fg:w="1"/><text x="85.6497%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.3997%" y="309" width="0.0816%" height="15" fill="rgb(243,12,36)" fg:x="1047" fg:w="1"/><text x="85.6497%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.4812%" y="341" width="0.0816%" height="15" fill="rgb(253,128,47)" fg:x="1048" fg:w="1"/><text x="85.7312%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="85.3997%" y="389" width="0.2447%" height="15" fill="rgb(207,33,20)" fg:x="1047" fg:w="3"/><text x="85.6497%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="85.3997%" y="373" width="0.2447%" height="15" fill="rgb(233,215,35)" fg:x="1047" fg:w="3"/><text x="85.6497%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="85.4812%" y="357" width="0.1631%" height="15" fill="rgb(249,188,52)" fg:x="1048" fg:w="2"/><text x="85.7312%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="85.5628%" y="341" width="0.0816%" height="15" fill="rgb(225,12,32)" fg:x="1049" fg:w="1"/><text x="85.8128%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="85.6444%" y="373" width="0.0816%" height="15" fill="rgb(247,98,14)" fg:x="1050" fg:w="1"/><text x="85.8944%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="85.6444%" y="357" width="0.0816%" height="15" fill="rgb(247,219,48)" fg:x="1050" fg:w="1"/><text x="85.8944%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="85.6444%" y="341" width="0.0816%" height="15" fill="rgb(253,60,48)" fg:x="1050" fg:w="1"/><text x="85.8944%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="85.7259%" y="309" width="0.4078%" height="15" fill="rgb(245,15,52)" fg:x="1051" fg:w="5"/><text x="85.9759%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="85.8891%" y="293" width="0.2447%" height="15" fill="rgb(220,133,28)" fg:x="1053" fg:w="3"/><text x="86.1391%" y="303.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (8 samples, 0.65%)</title><rect x="85.6444%" y="389" width="0.6525%" height="15" fill="rgb(217,180,4)" fg:x="1050" fg:w="8"/><text x="85.8944%" y="399.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.57%)</title><rect x="85.7259%" y="373" width="0.5710%" height="15" fill="rgb(251,24,1)" fg:x="1051" fg:w="7"/><text x="85.9759%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.57%)</title><rect x="85.7259%" y="357" width="0.5710%" height="15" fill="rgb(212,185,49)" fg:x="1051" fg:w="7"/><text x="85.9759%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.57%)</title><rect x="85.7259%" y="341" width="0.5710%" height="15" fill="rgb(215,175,22)" fg:x="1051" fg:w="7"/><text x="85.9759%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="85.7259%" y="325" width="0.5710%" height="15" fill="rgb(250,205,14)" fg:x="1051" fg:w="7"/><text x="85.9759%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="86.1338%" y="309" width="0.1631%" height="15" fill="rgb(225,211,22)" fg:x="1056" fg:w="2"/><text x="86.3838%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="86.1338%" y="293" width="0.1631%" height="15" fill="rgb(251,179,42)" fg:x="1056" fg:w="2"/><text x="86.3838%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.2153%" y="277" width="0.0816%" height="15" fill="rgb(208,216,51)" fg:x="1057" fg:w="1"/><text x="86.4653%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.2153%" y="261" width="0.0816%" height="15" fill="rgb(235,36,11)" fg:x="1057" fg:w="1"/><text x="86.4653%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="86.2969%" y="341" width="0.0816%" height="15" fill="rgb(213,189,28)" fg:x="1058" fg:w="1"/><text x="86.5469%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.2969%" y="325" width="0.0816%" height="15" fill="rgb(227,203,42)" fg:x="1058" fg:w="1"/><text x="86.5469%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.3785%" y="325" width="0.0816%" height="15" fill="rgb(244,72,36)" fg:x="1059" fg:w="1"/><text x="86.6285%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.22%)</title><rect x="86.4600%" y="325" width="1.2235%" height="15" fill="rgb(213,53,17)" fg:x="1060" fg:w="15"/><text x="86.7100%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.22%)</title><rect x="86.4600%" y="309" width="1.2235%" height="15" fill="rgb(207,167,3)" fg:x="1060" fg:w="15"/><text x="86.7100%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.6020%" y="293" width="0.0816%" height="15" fill="rgb(216,98,30)" fg:x="1074" fg:w="1"/><text x="87.8520%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="87.6835%" y="325" width="0.0816%" height="15" fill="rgb(236,123,15)" fg:x="1075" fg:w="1"/><text x="87.9335%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="87.6835%" y="309" width="0.0816%" height="15" fill="rgb(248,81,50)" fg:x="1075" fg:w="1"/><text x="87.9335%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="87.6835%" y="293" width="0.0816%" height="15" fill="rgb(214,120,4)" fg:x="1075" fg:w="1"/><text x="87.9335%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="87.6835%" y="277" width="0.0816%" height="15" fill="rgb(208,179,34)" fg:x="1075" fg:w="1"/><text x="87.9335%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.6835%" y="261" width="0.0816%" height="15" fill="rgb(227,140,7)" fg:x="1075" fg:w="1"/><text x="87.9335%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.7651%" y="325" width="0.0816%" height="15" fill="rgb(214,22,6)" fg:x="1076" fg:w="1"/><text x="88.0151%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="87.7651%" y="309" width="0.0816%" height="15" fill="rgb(207,137,27)" fg:x="1076" fg:w="1"/><text x="88.0151%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.8467%" y="293" width="0.0816%" height="15" fill="rgb(210,8,46)" fg:x="1077" fg:w="1"/><text x="88.0967%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="87.9282%" y="293" width="0.1631%" height="15" fill="rgb(240,16,54)" fg:x="1078" fg:w="2"/><text x="88.1782%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="87.9282%" y="277" width="0.1631%" height="15" fill="rgb(211,209,29)" fg:x="1078" fg:w="2"/><text x="88.1782%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.0098%" y="261" width="0.0816%" height="15" fill="rgb(226,228,24)" fg:x="1079" fg:w="1"/><text x="88.2598%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.0098%" y="245" width="0.0816%" height="15" fill="rgb(222,84,9)" fg:x="1079" fg:w="1"/><text x="88.2598%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="88.0914%" y="293" width="0.1631%" height="15" fill="rgb(234,203,30)" fg:x="1080" fg:w="2"/><text x="88.3414%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="88.1729%" y="277" width="0.0816%" height="15" fill="rgb(238,109,14)" fg:x="1081" fg:w="1"/><text x="88.4229%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.73%)</title><rect x="87.8467%" y="325" width="0.7341%" height="15" fill="rgb(233,206,34)" fg:x="1077" fg:w="9"/><text x="88.0967%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (9 samples, 0.73%)</title><rect x="87.8467%" y="309" width="0.7341%" height="15" fill="rgb(220,167,47)" fg:x="1077" fg:w="9"/><text x="88.0967%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.33%)</title><rect x="88.2545%" y="293" width="0.3263%" height="15" fill="rgb(238,105,10)" fg:x="1082" fg:w="4"/><text x="88.5045%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.33%)</title><rect x="88.2545%" y="277" width="0.3263%" height="15" fill="rgb(213,227,17)" fg:x="1082" fg:w="4"/><text x="88.5045%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.33%)</title><rect x="88.2545%" y="261" width="0.3263%" height="15" fill="rgb(217,132,38)" fg:x="1082" fg:w="4"/><text x="88.5045%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="88.9886%" y="213" width="0.0816%" height="15" fill="rgb(242,146,4)" fg:x="1091" fg:w="1"/><text x="89.2386%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.33%)</title><rect x="89.0701%" y="213" width="0.3263%" height="15" fill="rgb(212,61,9)" fg:x="1092" fg:w="4"/><text x="89.3201%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="89.1517%" y="197" width="0.2447%" height="15" fill="rgb(247,126,22)" fg:x="1093" fg:w="3"/><text x="89.4017%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="89.1517%" y="181" width="0.2447%" height="15" fill="rgb(220,196,2)" fg:x="1093" fg:w="3"/><text x="89.4017%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="89.1517%" y="165" width="0.2447%" height="15" fill="rgb(208,46,4)" fg:x="1093" fg:w="3"/><text x="89.4017%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="89.3964%" y="213" width="0.2447%" height="15" fill="rgb(252,104,46)" fg:x="1096" fg:w="3"/><text x="89.6464%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.5595%" y="197" width="0.0816%" height="15" fill="rgb(237,152,48)" fg:x="1098" fg:w="1"/><text x="89.8095%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.5595%" y="181" width="0.0816%" height="15" fill="rgb(221,59,37)" fg:x="1098" fg:w="1"/><text x="89.8095%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.5595%" y="165" width="0.0816%" height="15" fill="rgb(209,202,51)" fg:x="1098" fg:w="1"/><text x="89.8095%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.9674%" y="181" width="0.0816%" height="15" fill="rgb(228,81,30)" fg:x="1103" fg:w="1"/><text x="90.2174%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.0489%" y="181" width="0.0816%" height="15" fill="rgb(227,42,39)" fg:x="1104" fg:w="1"/><text x="90.2989%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.0489%" y="165" width="0.0816%" height="15" fill="rgb(221,26,2)" fg:x="1104" fg:w="1"/><text x="90.2989%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.0489%" y="149" width="0.0816%" height="15" fill="rgb(254,61,31)" fg:x="1104" fg:w="1"/><text x="90.2989%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.82%)</title><rect x="89.6411%" y="213" width="0.8157%" height="15" fill="rgb(222,173,38)" fg:x="1099" fg:w="10"/><text x="89.8911%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.73%)</title><rect x="89.7227%" y="197" width="0.7341%" height="15" fill="rgb(218,50,12)" fg:x="1100" fg:w="9"/><text x="89.9727%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.33%)</title><rect x="90.1305%" y="181" width="0.3263%" height="15" fill="rgb(223,88,40)" fg:x="1105" fg:w="4"/><text x="90.3805%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="90.2936%" y="165" width="0.1631%" height="15" fill="rgb(237,54,19)" fg:x="1107" fg:w="2"/><text x="90.5436%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.3752%" y="149" width="0.0816%" height="15" fill="rgb(251,129,25)" fg:x="1108" fg:w="1"/><text x="90.6252%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.3752%" y="133" width="0.0816%" height="15" fill="rgb(238,97,19)" fg:x="1108" fg:w="1"/><text x="90.6252%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.3752%" y="117" width="0.0816%" height="15" fill="rgb(240,169,18)" fg:x="1108" fg:w="1"/><text x="90.6252%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (39 samples, 3.18%)</title><rect x="90.4568%" y="213" width="3.1811%" height="15" fill="rgb(230,187,49)" fg:x="1109" fg:w="39"/><text x="90.7068%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (39 samples, 3.18%)</title><rect x="90.4568%" y="197" width="3.1811%" height="15" fill="rgb(209,44,26)" fg:x="1109" fg:w="39"/><text x="90.7068%" y="207.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (39 samples, 3.18%)</title><rect x="90.4568%" y="181" width="3.1811%" height="15" fill="rgb(244,0,6)" fg:x="1109" fg:w="39"/><text x="90.7068%" y="191.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="93.6378%" y="213" width="0.2447%" height="15" fill="rgb(248,18,21)" fg:x="1148" fg:w="3"/><text x="93.8878%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.8010%" y="197" width="0.0816%" height="15" fill="rgb(245,180,19)" fg:x="1150" fg:w="1"/><text x="94.0510%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 5.55%)</title><rect x="88.5808%" y="309" width="5.5465%" height="15" fill="rgb(252,118,36)" fg:x="1086" fg:w="68"/><text x="88.8308%" y="319.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (68 samples, 5.55%)</title><rect x="88.5808%" y="293" width="5.5465%" height="15" fill="rgb(210,224,19)" fg:x="1086" fg:w="68"/><text x="88.8308%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (68 samples, 5.55%)</title><rect x="88.5808%" y="277" width="5.5465%" height="15" fill="rgb(218,30,24)" fg:x="1086" fg:w="68"/><text x="88.8308%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (68 samples, 5.55%)</title><rect x="88.5808%" y="261" width="5.5465%" height="15" fill="rgb(219,75,50)" fg:x="1086" fg:w="68"/><text x="88.8308%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (68 samples, 5.55%)</title><rect x="88.5808%" y="245" width="5.5465%" height="15" fill="rgb(234,72,50)" fg:x="1086" fg:w="68"/><text x="88.8308%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (68 samples, 5.55%)</title><rect x="88.5808%" y="229" width="5.5465%" height="15" fill="rgb(219,100,48)" fg:x="1086" fg:w="68"/><text x="88.8308%" y="239.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="93.8825%" y="213" width="0.2447%" height="15" fill="rgb(253,5,41)" fg:x="1151" fg:w="3"/><text x="94.1325%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="93.8825%" y="197" width="0.2447%" height="15" fill="rgb(247,181,11)" fg:x="1151" fg:w="3"/><text x="94.1325%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="93.9641%" y="181" width="0.1631%" height="15" fill="rgb(222,223,25)" fg:x="1152" fg:w="2"/><text x="94.2141%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.0457%" y="165" width="0.0816%" height="15" fill="rgb(214,198,28)" fg:x="1153" fg:w="1"/><text x="94.2957%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.57%)</title><rect x="94.2088%" y="293" width="0.5710%" height="15" fill="rgb(230,46,43)" fg:x="1155" fg:w="7"/><text x="94.4588%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (108 samples, 8.81%)</title><rect x="86.3785%" y="341" width="8.8091%" height="15" fill="rgb(233,65,53)" fg:x="1059" fg:w="108"/><text x="86.6285%" y="351.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (81 samples, 6.61%)</title><rect x="88.5808%" y="325" width="6.6069%" height="15" fill="rgb(221,121,27)" fg:x="1086" fg:w="81"/><text x="88.8308%" y="335.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.06%)</title><rect x="94.1272%" y="309" width="1.0604%" height="15" fill="rgb(247,70,47)" fg:x="1154" fg:w="13"/><text x="94.3772%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.41%)</title><rect x="94.7798%" y="293" width="0.4078%" height="15" fill="rgb(228,85,35)" fg:x="1162" fg:w="5"/><text x="95.0298%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="95.1876%" y="309" width="0.1631%" height="15" fill="rgb(209,50,18)" fg:x="1167" fg:w="2"/><text x="95.4376%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.2692%" y="293" width="0.0816%" height="15" fill="rgb(250,19,35)" fg:x="1168" fg:w="1"/><text x="95.5192%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.2692%" y="277" width="0.0816%" height="15" fill="rgb(253,107,29)" fg:x="1168" fg:w="1"/><text x="95.5192%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.2692%" y="261" width="0.0816%" height="15" fill="rgb(252,179,29)" fg:x="1168" fg:w="1"/><text x="95.5192%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.2692%" y="245" width="0.0816%" height="15" fill="rgb(238,194,6)" fg:x="1168" fg:w="1"/><text x="95.5192%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="95.1876%" y="341" width="0.2447%" height="15" fill="rgb(238,164,29)" fg:x="1167" fg:w="3"/><text x="95.4376%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="95.1876%" y="325" width="0.2447%" height="15" fill="rgb(224,25,9)" fg:x="1167" fg:w="3"/><text x="95.4376%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.3507%" y="309" width="0.0816%" height="15" fill="rgb(244,153,23)" fg:x="1169" fg:w="1"/><text x="95.6007%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (126 samples, 10.28%)</title><rect x="85.3997%" y="405" width="10.2773%" height="15" fill="rgb(212,203,14)" fg:x="1047" fg:w="126"/><text x="85.6497%" y="415.50">indefinite::rul..</text></g><g><title>regex::regex::string::Regex::new (115 samples, 9.38%)</title><rect x="86.2969%" y="389" width="9.3801%" height="15" fill="rgb(220,164,20)" fg:x="1058" fg:w="115"/><text x="86.5469%" y="399.50">regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (115 samples, 9.38%)</title><rect x="86.2969%" y="373" width="9.3801%" height="15" fill="rgb(222,203,48)" fg:x="1058" fg:w="115"/><text x="86.5469%" y="383.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (115 samples, 9.38%)</title><rect x="86.2969%" y="357" width="9.3801%" height="15" fill="rgb(215,159,22)" fg:x="1058" fg:w="115"/><text x="86.5469%" y="367.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.4323%" y="341" width="0.2447%" height="15" fill="rgb(216,183,47)" fg:x="1170" fg:w="3"/><text x="95.6823%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.4323%" y="325" width="0.2447%" height="15" fill="rgb(229,195,25)" fg:x="1170" fg:w="3"/><text x="95.6823%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="95.4323%" y="309" width="0.2447%" height="15" fill="rgb(224,132,51)" fg:x="1170" fg:w="3"/><text x="95.6823%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="95.5139%" y="293" width="0.1631%" height="15" fill="rgb(240,63,7)" fg:x="1171" fg:w="2"/><text x="95.7639%" y="303.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="95.5954%" y="277" width="0.0816%" height="15" fill="rgb(249,182,41)" fg:x="1172" fg:w="1"/><text x="95.8454%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.6770%" y="325" width="0.0816%" height="15" fill="rgb(243,47,26)" fg:x="1173" fg:w="1"/><text x="95.9270%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.6770%" y="309" width="0.0816%" height="15" fill="rgb(233,48,2)" fg:x="1173" fg:w="1"/><text x="95.9270%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.6770%" y="293" width="0.0816%" height="15" fill="rgb(244,165,34)" fg:x="1173" fg:w="1"/><text x="95.9270%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="95.7586%" y="325" width="0.1631%" height="15" fill="rgb(207,89,7)" fg:x="1174" fg:w="2"/><text x="96.0086%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.7586%" y="309" width="0.1631%" height="15" fill="rgb(244,117,36)" fg:x="1174" fg:w="2"/><text x="96.0086%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="95.8401%" y="293" width="0.0816%" height="15" fill="rgb(226,144,34)" fg:x="1175" fg:w="1"/><text x="96.0901%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.8401%" y="277" width="0.0816%" height="15" fill="rgb(213,23,19)" fg:x="1175" fg:w="1"/><text x="96.0901%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.8401%" y="261" width="0.0816%" height="15" fill="rgb(217,75,12)" fg:x="1175" fg:w="1"/><text x="96.0901%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="96.0848%" y="309" width="0.0816%" height="15" fill="rgb(224,159,17)" fg:x="1178" fg:w="1"/><text x="96.3348%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="96.0848%" y="293" width="0.0816%" height="15" fill="rgb(217,118,1)" fg:x="1178" fg:w="1"/><text x="96.3348%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.0848%" y="277" width="0.0816%" height="15" fill="rgb(232,180,48)" fg:x="1178" fg:w="1"/><text x="96.3348%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.0848%" y="261" width="0.0816%" height="15" fill="rgb(230,27,33)" fg:x="1178" fg:w="1"/><text x="96.3348%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="96.1664%" y="293" width="0.0816%" height="15" fill="rgb(205,31,21)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="96.1664%" y="277" width="0.0816%" height="15" fill="rgb(253,59,4)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.1664%" y="261" width="0.0816%" height="15" fill="rgb(224,201,9)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.1664%" y="245" width="0.0816%" height="15" fill="rgb(229,206,30)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="96.1664%" y="229" width="0.0816%" height="15" fill="rgb(212,67,47)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="96.2480%" y="277" width="0.0816%" height="15" fill="rgb(211,96,50)" fg:x="1180" fg:w="1"/><text x="96.4980%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.3295%" y="277" width="0.0816%" height="15" fill="rgb(252,114,18)" fg:x="1181" fg:w="1"/><text x="96.5795%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.57%)</title><rect x="95.9217%" y="325" width="0.5710%" height="15" fill="rgb(223,58,37)" fg:x="1176" fg:w="7"/><text x="96.1717%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.33%)</title><rect x="96.1664%" y="309" width="0.3263%" height="15" fill="rgb(237,70,4)" fg:x="1179" fg:w="4"/><text x="96.4164%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="96.2480%" y="293" width="0.2447%" height="15" fill="rgb(244,85,46)" fg:x="1180" fg:w="3"/><text x="96.4980%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="96.4111%" y="277" width="0.0816%" height="15" fill="rgb(223,39,52)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="96.4927%" y="325" width="0.0816%" height="15" fill="rgb(218,200,14)" fg:x="1183" fg:w="1"/><text x="96.7427%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="96.4927%" y="309" width="0.0816%" height="15" fill="rgb(208,171,16)" fg:x="1183" fg:w="1"/><text x="96.7427%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.4927%" y="293" width="0.0816%" height="15" fill="rgb(234,200,18)" fg:x="1183" fg:w="1"/><text x="96.7427%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.4927%" y="277" width="0.0816%" height="15" fill="rgb(228,45,11)" fg:x="1183" fg:w="1"/><text x="96.7427%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.4927%" y="261" width="0.0816%" height="15" fill="rgb(237,182,11)" fg:x="1183" fg:w="1"/><text x="96.7427%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.4927%" y="245" width="0.0816%" height="15" fill="rgb(241,175,49)" fg:x="1183" fg:w="1"/><text x="96.7427%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.4927%" y="229" width="0.0816%" height="15" fill="rgb(247,38,35)" fg:x="1183" fg:w="1"/><text x="96.7427%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6558%" y="277" width="0.0816%" height="15" fill="rgb(228,39,49)" fg:x="1185" fg:w="1"/><text x="96.9058%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6558%" y="261" width="0.0816%" height="15" fill="rgb(226,101,26)" fg:x="1185" fg:w="1"/><text x="96.9058%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.6558%" y="245" width="0.0816%" height="15" fill="rgb(206,141,19)" fg:x="1185" fg:w="1"/><text x="96.9058%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (14 samples, 1.14%)</title><rect x="95.6770%" y="373" width="1.1419%" height="15" fill="rgb(211,200,13)" fg:x="1173" fg:w="14"/><text x="95.9270%" y="383.50"></text></g><g><title>regex::builders::Builder::build_one_string (14 samples, 1.14%)</title><rect x="95.6770%" y="357" width="1.1419%" height="15" fill="rgb(241,121,6)" fg:x="1173" fg:w="14"/><text x="95.9270%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (14 samples, 1.14%)</title><rect x="95.6770%" y="341" width="1.1419%" height="15" fill="rgb(234,221,29)" fg:x="1173" fg:w="14"/><text x="95.9270%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="96.5742%" y="325" width="0.2447%" height="15" fill="rgb(229,136,5)" fg:x="1184" fg:w="3"/><text x="96.8242%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="96.5742%" y="309" width="0.2447%" height="15" fill="rgb(238,36,11)" fg:x="1184" fg:w="3"/><text x="96.8242%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="96.6558%" y="293" width="0.1631%" height="15" fill="rgb(251,55,41)" fg:x="1185" fg:w="2"/><text x="96.9058%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.7374%" y="277" width="0.0816%" height="15" fill="rgb(242,34,40)" fg:x="1186" fg:w="1"/><text x="96.9874%" y="287.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (16 samples, 1.31%)</title><rect x="95.6770%" y="389" width="1.3051%" height="15" fill="rgb(215,42,17)" fg:x="1173" fg:w="16"/><text x="95.9270%" y="399.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="96.8189%" y="373" width="0.1631%" height="15" fill="rgb(207,44,46)" fg:x="1187" fg:w="2"/><text x="97.0689%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="96.8189%" y="357" width="0.1631%" height="15" fill="rgb(211,206,28)" fg:x="1187" fg:w="2"/><text x="97.0689%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="96.8189%" y="341" width="0.1631%" height="15" fill="rgb(237,167,16)" fg:x="1187" fg:w="2"/><text x="97.0689%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="96.8189%" y="325" width="0.1631%" height="15" fill="rgb(233,66,6)" fg:x="1187" fg:w="2"/><text x="97.0689%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="96.9005%" y="309" width="0.0816%" height="15" fill="rgb(246,123,29)" fg:x="1188" fg:w="1"/><text x="97.1505%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.9005%" y="293" width="0.0816%" height="15" fill="rgb(209,62,40)" fg:x="1188" fg:w="1"/><text x="97.1505%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.9005%" y="277" width="0.0816%" height="15" fill="rgb(218,4,25)" fg:x="1188" fg:w="1"/><text x="97.1505%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.9005%" y="261" width="0.0816%" height="15" fill="rgb(253,91,49)" fg:x="1188" fg:w="1"/><text x="97.1505%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (228 samples, 18.60%)</title><rect x="78.4666%" y="485" width="18.5971%" height="15" fill="rgb(228,155,29)" fg:x="962" fg:w="228"/><text x="78.7166%" y="495.50">&lt;&amp;kernel::model::entry::Entry..</text></g><g><title>plugins_core::looking::model::qualify_name (228 samples, 18.60%)</title><rect x="78.4666%" y="469" width="18.5971%" height="15" fill="rgb(243,57,37)" fg:x="962" fg:w="228"/><text x="78.7166%" y="479.50">plugins_core::looking::model:..</text></g><g><title>indefinite::indefinite (228 samples, 18.60%)</title><rect x="78.4666%" y="453" width="18.5971%" height="15" fill="rgb(244,167,17)" fg:x="962" fg:w="228"/><text x="78.7166%" y="463.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (228 samples, 18.60%)</title><rect x="78.4666%" y="437" width="18.5971%" height="15" fill="rgb(207,181,38)" fg:x="962" fg:w="228"/><text x="78.7166%" y="447.50">indefinite::methods::indefini..</text></g><g><title>indefinite::methods::apply_rules (228 samples, 18.60%)</title><rect x="78.4666%" y="421" width="18.5971%" height="15" fill="rgb(211,8,23)" fg:x="962" fg:w="228"/><text x="78.7166%" y="431.50">indefinite::methods::apply_ru..</text></g><g><title>indefinite::rules::other::Other::run (17 samples, 1.39%)</title><rect x="95.6770%" y="405" width="1.3866%" height="15" fill="rgb(235,11,44)" fg:x="1173" fg:w="17"/><text x="95.9270%" y="415.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="96.9821%" y="389" width="0.0816%" height="15" fill="rgb(248,18,52)" fg:x="1189" fg:w="1"/><text x="97.2321%" y="399.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (229 samples, 18.68%)</title><rect x="78.4666%" y="517" width="18.6786%" height="15" fill="rgb(208,4,7)" fg:x="962" fg:w="229"/><text x="78.7166%" y="527.50">&lt;plugins_core::looking::actio..</text></g><g><title>plugins_core::looking::model::new_area_observation (229 samples, 18.68%)</title><rect x="78.4666%" y="501" width="18.6786%" height="15" fill="rgb(240,17,39)" fg:x="962" fg:w="229"/><text x="78.7166%" y="511.50">plugins_core::looking::model:..</text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.0636%" y="485" width="0.0816%" height="15" fill="rgb(207,170,3)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.0636%" y="469" width="0.0816%" height="15" fill="rgb(236,100,52)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.0636%" y="453" width="0.0816%" height="15" fill="rgb(246,78,51)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.0636%" y="437" width="0.0816%" height="15" fill="rgb(211,17,15)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.0636%" y="421" width="0.0816%" height="15" fill="rgb(209,59,46)" fg:x="1190" fg:w="1"/><text x="97.3136%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="97.1452%" y="453" width="0.0816%" height="15" fill="rgb(210,92,25)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="97.1452%" y="437" width="0.0816%" height="15" fill="rgb(238,174,52)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.1452%" y="421" width="0.0816%" height="15" fill="rgb(230,73,7)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1452%" y="405" width="0.0816%" height="15" fill="rgb(243,124,40)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.1452%" y="389" width="0.0816%" height="15" fill="rgb(244,170,11)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1452%" y="373" width="0.0816%" height="15" fill="rgb(207,114,54)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.1452%" y="357" width="0.0816%" height="15" fill="rgb(205,42,20)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1452%" y="341" width="0.0816%" height="15" fill="rgb(230,30,28)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.1452%" y="325" width="0.0816%" height="15" fill="rgb(205,73,54)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1452%" y="309" width="0.0816%" height="15" fill="rgb(254,227,23)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.1452%" y="293" width="0.0816%" height="15" fill="rgb(228,202,34)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.1452%" y="277" width="0.0816%" height="15" fill="rgb(222,225,37)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.1452%" y="261" width="0.0816%" height="15" fill="rgb(221,14,54)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="97.1452%" y="501" width="0.1631%" height="15" fill="rgb(254,102,2)" fg:x="1191" fg:w="2"/><text x="97.3952%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="97.1452%" y="485" width="0.1631%" height="15" fill="rgb(232,104,17)" fg:x="1191" fg:w="2"/><text x="97.3952%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="97.1452%" y="469" width="0.1631%" height="15" fill="rgb(250,220,14)" fg:x="1191" fg:w="2"/><text x="97.3952%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.2268%" y="453" width="0.0816%" height="15" fill="rgb(241,158,9)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.2268%" y="437" width="0.0816%" height="15" fill="rgb(246,9,43)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2268%" y="421" width="0.0816%" height="15" fill="rgb(206,73,33)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.2268%" y="405" width="0.0816%" height="15" fill="rgb(222,79,8)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2268%" y="389" width="0.0816%" height="15" fill="rgb(234,8,54)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.2268%" y="373" width="0.0816%" height="15" fill="rgb(209,134,38)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2268%" y="357" width="0.0816%" height="15" fill="rgb(230,127,29)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.2268%" y="341" width="0.0816%" height="15" fill="rgb(242,44,41)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2268%" y="325" width="0.0816%" height="15" fill="rgb(222,56,43)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="335.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="97.4715%" y="389" width="0.0816%" height="15" fill="rgb(238,39,47)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="97.4715%" y="373" width="0.0816%" height="15" fill="rgb(226,79,43)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.4715%" y="357" width="0.0816%" height="15" fill="rgb(242,105,53)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4715%" y="341" width="0.0816%" height="15" fill="rgb(251,132,46)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.4715%" y="325" width="0.0816%" height="15" fill="rgb(231,77,14)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4715%" y="309" width="0.0816%" height="15" fill="rgb(240,135,9)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.4715%" y="293" width="0.0816%" height="15" fill="rgb(248,109,14)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4715%" y="277" width="0.0816%" height="15" fill="rgb(227,146,52)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.4715%" y="261" width="0.0816%" height="15" fill="rgb(232,54,3)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.4715%" y="245" width="0.0816%" height="15" fill="rgb(229,201,43)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="255.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_name (6 samples, 0.49%)</title><rect x="97.1452%" y="517" width="0.4894%" height="15" fill="rgb(252,161,33)" fg:x="1191" fg:w="6"/><text x="97.3952%" y="527.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (4 samples, 0.33%)</title><rect x="97.3083%" y="501" width="0.3263%" height="15" fill="rgb(226,146,40)" fg:x="1193" fg:w="4"/><text x="97.5583%" y="511.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="97.4715%" y="485" width="0.1631%" height="15" fill="rgb(219,47,25)" fg:x="1195" fg:w="2"/><text x="97.7215%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="97.4715%" y="469" width="0.1631%" height="15" fill="rgb(250,135,13)" fg:x="1195" fg:w="2"/><text x="97.7215%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="97.4715%" y="453" width="0.1631%" height="15" fill="rgb(219,229,18)" fg:x="1195" fg:w="2"/><text x="97.7215%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="97.4715%" y="437" width="0.1631%" height="15" fill="rgb(217,152,27)" fg:x="1195" fg:w="2"/><text x="97.7215%" y="447.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="97.4715%" y="421" width="0.1631%" height="15" fill="rgb(225,71,47)" fg:x="1195" fg:w="2"/><text x="97.7215%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="97.4715%" y="405" width="0.1631%" height="15" fill="rgb(220,139,14)" fg:x="1195" fg:w="2"/><text x="97.7215%" y="415.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.5530%" y="389" width="0.0816%" height="15" fill="rgb(247,54,32)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.5530%" y="373" width="0.0816%" height="15" fill="rgb(252,131,39)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.5530%" y="357" width="0.0816%" height="15" fill="rgb(210,108,39)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.5530%" y="341" width="0.0816%" height="15" fill="rgb(205,23,29)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.5530%" y="325" width="0.0816%" height="15" fill="rgb(246,139,46)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.5530%" y="309" width="0.0816%" height="15" fill="rgb(250,81,26)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.5530%" y="293" width="0.0816%" height="15" fill="rgb(214,104,7)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.5530%" y="277" width="0.0816%" height="15" fill="rgb(233,189,8)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.5530%" y="261" width="0.0816%" height="15" fill="rgb(228,141,17)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.7162%" y="421" width="0.0816%" height="15" fill="rgb(247,157,1)" fg:x="1198" fg:w="1"/><text x="97.9662%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynMessage&gt; (3 samples, 0.24%)</title><rect x="97.6346%" y="485" width="0.2447%" height="15" fill="rgb(249,225,5)" fg:x="1197" fg:w="3"/><text x="97.8846%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="97.6346%" y="469" width="0.2447%" height="15" fill="rgb(242,55,13)" fg:x="1197" fg:w="3"/><text x="97.8846%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="97.6346%" y="453" width="0.2447%" height="15" fill="rgb(230,49,50)" fg:x="1197" fg:w="3"/><text x="97.8846%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.7162%" y="437" width="0.1631%" height="15" fill="rgb(241,111,38)" fg:x="1198" fg:w="2"/><text x="97.9662%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="97.7977%" y="421" width="0.0816%" height="15" fill="rgb(252,155,4)" fg:x="1199" fg:w="1"/><text x="98.0477%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.7977%" y="405" width="0.0816%" height="15" fill="rgb(212,69,32)" fg:x="1199" fg:w="1"/><text x="98.0477%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8793%" y="389" width="0.0816%" height="15" fill="rgb(243,107,47)" fg:x="1200" fg:w="1"/><text x="98.1293%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="97.9608%" y="389" width="0.0816%" height="15" fill="rgb(247,130,12)" fg:x="1201" fg:w="1"/><text x="98.2108%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.9608%" y="373" width="0.0816%" height="15" fill="rgb(233,74,16)" fg:x="1201" fg:w="1"/><text x="98.2108%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0424%" y="341" width="0.0816%" height="15" fill="rgb(208,58,18)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0424%" y="325" width="0.0816%" height="15" fill="rgb(242,225,1)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0424%" y="309" width="0.0816%" height="15" fill="rgb(249,39,40)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0424%" y="293" width="0.0816%" height="15" fill="rgb(207,72,44)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.0424%" y="277" width="0.0816%" height="15" fill="rgb(215,193,12)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.0424%" y="261" width="0.0816%" height="15" fill="rgb(248,41,39)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.0424%" y="245" width="0.0816%" height="15" fill="rgb(253,85,4)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0424%" y="229" width="0.0816%" height="15" fill="rgb(243,70,31)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0424%" y="213" width="0.0816%" height="15" fill="rgb(253,195,26)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.0424%" y="197" width="0.0816%" height="15" fill="rgb(243,42,11)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.0424%" y="181" width="0.0816%" height="15" fill="rgb(239,66,17)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.0424%" y="165" width="0.0816%" height="15" fill="rgb(217,132,21)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.0424%" y="149" width="0.0816%" height="15" fill="rgb(252,202,21)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0424%" y="133" width="0.0816%" height="15" fill="rgb(233,98,36)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="143.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (4 samples, 0.33%)</title><rect x="97.8793%" y="405" width="0.3263%" height="15" fill="rgb(216,153,54)" fg:x="1200" fg:w="4"/><text x="98.1293%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="98.0424%" y="389" width="0.1631%" height="15" fill="rgb(250,99,7)" fg:x="1202" fg:w="2"/><text x="98.2924%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="98.0424%" y="373" width="0.1631%" height="15" fill="rgb(207,56,50)" fg:x="1202" fg:w="2"/><text x="98.2924%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.0424%" y="357" width="0.1631%" height="15" fill="rgb(244,61,34)" fg:x="1202" fg:w="2"/><text x="98.2924%" y="367.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="98.1240%" y="341" width="0.0816%" height="15" fill="rgb(241,50,38)" fg:x="1203" fg:w="1"/><text x="98.3740%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2055%" y="357" width="0.0816%" height="15" fill="rgb(212,166,30)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2055%" y="341" width="0.0816%" height="15" fill="rgb(249,127,32)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2055%" y="325" width="0.0816%" height="15" fill="rgb(209,103,0)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2055%" y="309" width="0.0816%" height="15" fill="rgb(238,209,51)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2055%" y="293" width="0.0816%" height="15" fill="rgb(237,56,23)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2055%" y="277" width="0.0816%" height="15" fill="rgb(215,153,46)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2055%" y="261" width="0.0816%" height="15" fill="rgb(224,49,31)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2055%" y="245" width="0.0816%" height="15" fill="rgb(250,18,42)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2055%" y="229" width="0.0816%" height="15" fill="rgb(215,176,39)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2055%" y="213" width="0.0816%" height="15" fill="rgb(223,77,29)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.2055%" y="197" width="0.0816%" height="15" fill="rgb(234,94,52)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.2055%" y="181" width="0.0816%" height="15" fill="rgb(220,154,50)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.2055%" y="165" width="0.0816%" height="15" fill="rgb(212,11,10)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.2055%" y="149" width="0.0816%" height="15" fill="rgb(205,166,19)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.2055%" y="133" width="0.0816%" height="15" fill="rgb(244,198,16)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="143.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="98.2871%" y="357" width="0.1631%" height="15" fill="rgb(219,69,12)" fg:x="1205" fg:w="2"/><text x="98.5371%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="98.2871%" y="341" width="0.1631%" height="15" fill="rgb(245,30,7)" fg:x="1205" fg:w="2"/><text x="98.5371%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.2871%" y="325" width="0.1631%" height="15" fill="rgb(218,221,48)" fg:x="1205" fg:w="2"/><text x="98.5371%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="98.2871%" y="309" width="0.1631%" height="15" fill="rgb(216,66,15)" fg:x="1205" fg:w="2"/><text x="98.5371%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="98.2871%" y="293" width="0.1631%" height="15" fill="rgb(226,122,50)" fg:x="1205" fg:w="2"/><text x="98.5371%" y="303.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="98.3687%" y="277" width="0.0816%" height="15" fill="rgb(239,156,16)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="98.3687%" y="261" width="0.0816%" height="15" fill="rgb(224,27,38)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="271.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.3687%" y="245" width="0.0816%" height="15" fill="rgb(224,39,27)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3687%" y="229" width="0.0816%" height="15" fill="rgb(215,92,29)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3687%" y="213" width="0.0816%" height="15" fill="rgb(207,159,16)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3687%" y="197" width="0.0816%" height="15" fill="rgb(238,163,47)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3687%" y="181" width="0.0816%" height="15" fill="rgb(219,91,49)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3687%" y="165" width="0.0816%" height="15" fill="rgb(227,167,31)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3687%" y="149" width="0.0816%" height="15" fill="rgb(234,80,54)" fg:x="1206" fg:w="1"/><text x="98.6187%" y="159.50"></text></g><g><title>plugins_core::tools::get_contained_keys (4 samples, 0.33%)</title><rect x="98.2055%" y="405" width="0.3263%" height="15" fill="rgb(212,114,2)" fg:x="1204" fg:w="4"/><text x="98.4555%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.33%)</title><rect x="98.2055%" y="389" width="0.3263%" height="15" fill="rgb(234,50,24)" fg:x="1204" fg:w="4"/><text x="98.4555%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.33%)</title><rect x="98.2055%" y="373" width="0.3263%" height="15" fill="rgb(221,68,8)" fg:x="1204" fg:w="4"/><text x="98.4555%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4502%" y="357" width="0.0816%" height="15" fill="rgb(254,180,31)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4502%" y="341" width="0.0816%" height="15" fill="rgb(247,130,50)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.4502%" y="325" width="0.0816%" height="15" fill="rgb(211,109,4)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.4502%" y="309" width="0.0816%" height="15" fill="rgb(238,50,21)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.4502%" y="293" width="0.0816%" height="15" fill="rgb(225,57,45)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4502%" y="277" width="0.0816%" height="15" fill="rgb(209,196,50)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4502%" y="261" width="0.0816%" height="15" fill="rgb(242,140,13)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.73%)</title><rect x="97.8793%" y="437" width="0.7341%" height="15" fill="rgb(217,111,7)" fg:x="1200" fg:w="9"/><text x="98.1293%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.73%)</title><rect x="97.8793%" y="421" width="0.7341%" height="15" fill="rgb(253,193,51)" fg:x="1200" fg:w="9"/><text x="98.1293%" y="431.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="98.5318%" y="405" width="0.0816%" height="15" fill="rgb(252,70,29)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="98.5318%" y="389" width="0.0816%" height="15" fill="rgb(232,127,12)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="98.5318%" y="373" width="0.0816%" height="15" fill="rgb(211,180,21)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5318%" y="357" width="0.0816%" height="15" fill="rgb(229,72,13)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5318%" y="341" width="0.0816%" height="15" fill="rgb(240,211,49)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="351.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="98.6134%" y="373" width="0.0816%" height="15" fill="rgb(219,149,40)" fg:x="1209" fg:w="1"/><text x="98.8634%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="98.6134%" y="389" width="0.1631%" height="15" fill="rgb(210,127,46)" fg:x="1209" fg:w="2"/><text x="98.8634%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="98.6949%" y="373" width="0.0816%" height="15" fill="rgb(220,106,7)" fg:x="1210" fg:w="1"/><text x="98.9449%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.6949%" y="357" width="0.0816%" height="15" fill="rgb(249,31,22)" fg:x="1210" fg:w="1"/><text x="98.9449%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.6949%" y="341" width="0.0816%" height="15" fill="rgb(253,1,49)" fg:x="1210" fg:w="1"/><text x="98.9449%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.6949%" y="325" width="0.0816%" height="15" fill="rgb(227,144,33)" fg:x="1210" fg:w="1"/><text x="98.9449%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.6949%" y="309" width="0.0816%" height="15" fill="rgb(249,163,44)" fg:x="1210" fg:w="1"/><text x="98.9449%" y="319.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="98.6949%" y="293" width="0.0816%" height="15" fill="rgb(234,15,39)" fg:x="1210" fg:w="1"/><text x="98.9449%" y="303.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.6949%" y="277" width="0.0816%" height="15" fill="rgb(207,66,16)" fg:x="1210" fg:w="1"/><text x="98.9449%" y="287.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.6949%" y="261" width="0.0816%" height="15" fill="rgb(233,112,24)" fg:x="1210" fg:w="1"/><text x="98.9449%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.6949%" y="245" width="0.0816%" height="15" fill="rgb(230,90,22)" fg:x="1210" fg:w="1"/><text x="98.9449%" y="255.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.7765%" y="181" width="0.1631%" height="15" fill="rgb(229,61,13)" fg:x="1211" fg:w="2"/><text x="99.0265%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.9396%" y="165" width="0.0816%" height="15" fill="rgb(225,57,24)" fg:x="1213" fg:w="1"/><text x="99.1896%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.9396%" y="149" width="0.0816%" height="15" fill="rgb(208,169,48)" fg:x="1213" fg:w="1"/><text x="99.1896%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.33%)</title><rect x="98.7765%" y="197" width="0.3263%" height="15" fill="rgb(244,218,51)" fg:x="1211" fg:w="4"/><text x="99.0265%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.9396%" y="181" width="0.1631%" height="15" fill="rgb(214,148,10)" fg:x="1213" fg:w="2"/><text x="99.1896%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.0212%" y="165" width="0.0816%" height="15" fill="rgb(225,174,27)" fg:x="1214" fg:w="1"/><text x="99.2712%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="98.7765%" y="213" width="0.4078%" height="15" fill="rgb(230,96,26)" fg:x="1211" fg:w="5"/><text x="99.0265%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.1028%" y="197" width="0.0816%" height="15" fill="rgb(232,10,30)" fg:x="1215" fg:w="1"/><text x="99.3528%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1028%" y="181" width="0.0816%" height="15" fill="rgb(222,8,50)" fg:x="1215" fg:w="1"/><text x="99.3528%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.57%)</title><rect x="98.7765%" y="245" width="0.5710%" height="15" fill="rgb(213,81,27)" fg:x="1211" fg:w="7"/><text x="99.0265%" y="255.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.57%)</title><rect x="98.7765%" y="229" width="0.5710%" height="15" fill="rgb(245,50,10)" fg:x="1211" fg:w="7"/><text x="99.0265%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.1843%" y="213" width="0.1631%" height="15" fill="rgb(216,100,18)" fg:x="1216" fg:w="2"/><text x="99.4343%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="99.1843%" y="197" width="0.1631%" height="15" fill="rgb(236,147,54)" fg:x="1216" fg:w="2"/><text x="99.4343%" y="207.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="99.1843%" y="181" width="0.1631%" height="15" fill="rgb(205,143,26)" fg:x="1216" fg:w="2"/><text x="99.4343%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.1843%" y="165" width="0.1631%" height="15" fill="rgb(236,26,9)" fg:x="1216" fg:w="2"/><text x="99.4343%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.2659%" y="149" width="0.0816%" height="15" fill="rgb(221,165,53)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="159.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.65%)</title><rect x="98.7765%" y="373" width="0.6525%" height="15" fill="rgb(214,110,17)" fg:x="1211" fg:w="8"/><text x="99.0265%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="98.7765%" y="357" width="0.6525%" height="15" fill="rgb(237,197,12)" fg:x="1211" fg:w="8"/><text x="99.0265%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.65%)</title><rect x="98.7765%" y="341" width="0.6525%" height="15" fill="rgb(205,84,17)" fg:x="1211" fg:w="8"/><text x="99.0265%" y="351.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.65%)</title><rect x="98.7765%" y="325" width="0.6525%" height="15" fill="rgb(237,18,45)" fg:x="1211" fg:w="8"/><text x="99.0265%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="98.7765%" y="309" width="0.6525%" height="15" fill="rgb(221,87,14)" fg:x="1211" fg:w="8"/><text x="99.0265%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.65%)</title><rect x="98.7765%" y="293" width="0.6525%" height="15" fill="rgb(238,186,15)" fg:x="1211" fg:w="8"/><text x="99.0265%" y="303.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.65%)</title><rect x="98.7765%" y="277" width="0.6525%" height="15" fill="rgb(208,115,11)" fg:x="1211" fg:w="8"/><text x="99.0265%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="98.7765%" y="261" width="0.6525%" height="15" fill="rgb(254,175,0)" fg:x="1211" fg:w="8"/><text x="99.0265%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.3475%" y="245" width="0.0816%" height="15" fill="rgb(227,24,42)" fg:x="1218" fg:w="1"/><text x="99.5975%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3475%" y="229" width="0.0816%" height="15" fill="rgb(223,211,37)" fg:x="1218" fg:w="1"/><text x="99.5975%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4290%" y="325" width="0.0816%" height="15" fill="rgb(235,49,27)" fg:x="1219" fg:w="1"/><text x="99.6790%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="99.5106%" y="325" width="0.0816%" height="15" fill="rgb(254,97,51)" fg:x="1220" fg:w="1"/><text x="99.7606%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.5106%" y="309" width="0.0816%" height="15" fill="rgb(249,51,40)" fg:x="1220" fg:w="1"/><text x="99.7606%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="99.5106%" y="293" width="0.0816%" height="15" fill="rgb(210,128,45)" fg:x="1220" fg:w="1"/><text x="99.7606%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="99.5106%" y="277" width="0.0816%" height="15" fill="rgb(224,137,50)" fg:x="1220" fg:w="1"/><text x="99.7606%" y="287.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="99.5922%" y="325" width="0.0816%" height="15" fill="rgb(242,15,9)" fg:x="1221" fg:w="1"/><text x="99.8422%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.5922%" y="309" width="0.0816%" height="15" fill="rgb(233,187,41)" fg:x="1221" fg:w="1"/><text x="99.8422%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="99.5922%" y="293" width="0.0816%" height="15" fill="rgb(227,2,29)" fg:x="1221" fg:w="1"/><text x="99.8422%" y="303.50"></text></g><g><title>&lt;plugins_rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (12 samples, 0.98%)</title><rect x="98.7765%" y="389" width="0.9788%" height="15" fill="rgb(222,70,3)" fg:x="1211" fg:w="12"/><text x="99.0265%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (4 samples, 0.33%)</title><rect x="99.4290%" y="373" width="0.3263%" height="15" fill="rgb(213,11,42)" fg:x="1219" fg:w="4"/><text x="99.6790%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="99.4290%" y="357" width="0.3263%" height="15" fill="rgb(225,150,9)" fg:x="1219" fg:w="4"/><text x="99.6790%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="99.4290%" y="341" width="0.3263%" height="15" fill="rgb(230,162,45)" fg:x="1219" fg:w="4"/><text x="99.6790%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="99.6737%" y="325" width="0.0816%" height="15" fill="rgb(222,14,52)" fg:x="1222" fg:w="1"/><text x="99.9237%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.6737%" y="309" width="0.0816%" height="15" fill="rgb(254,198,14)" fg:x="1222" fg:w="1"/><text x="99.9237%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6737%" y="293" width="0.0816%" height="15" fill="rgb(220,217,30)" fg:x="1222" fg:w="1"/><text x="99.9237%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6737%" y="277" width="0.0816%" height="15" fill="rgb(215,146,41)" fg:x="1222" fg:w="1"/><text x="99.9237%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6737%" y="261" width="0.0816%" height="15" fill="rgb(217,27,36)" fg:x="1222" fg:w="1"/><text x="99.9237%" y="271.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (25 samples, 2.04%)</title><rect x="97.8793%" y="469" width="2.0392%" height="15" fill="rgb(219,218,39)" fg:x="1200" fg:w="25"/><text x="98.1293%" y="479.50">&lt;..</text></g><g><title>core::iter::adapters::try_process (25 samples, 2.04%)</title><rect x="97.8793%" y="453" width="2.0392%" height="15" fill="rgb(219,4,42)" fg:x="1200" fg:w="25"/><text x="98.1293%" y="463.50">c..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (16 samples, 1.31%)</title><rect x="98.6134%" y="437" width="1.3051%" height="15" fill="rgb(249,119,36)" fg:x="1209" fg:w="16"/><text x="98.8634%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (16 samples, 1.31%)</title><rect x="98.6134%" y="421" width="1.3051%" height="15" fill="rgb(209,23,33)" fg:x="1209" fg:w="16"/><text x="98.8634%" y="431.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (16 samples, 1.31%)</title><rect x="98.6134%" y="405" width="1.3051%" height="15" fill="rgb(211,10,0)" fg:x="1209" fg:w="16"/><text x="98.8634%" y="415.50"></text></g><g><title>plugins_rpc_proto::&lt;impl core::convert::From&lt;&amp;plugins_rpc_proto::EntityKey&gt; for kernel::model::EntityKey&gt;::from (2 samples, 0.16%)</title><rect x="99.7553%" y="389" width="0.1631%" height="15" fill="rgb(208,99,37)" fg:x="1223" fg:w="2"/><text x="100.0053%" y="399.50"></text></g><g><title>kernel::model::EntityKey::new (2 samples, 0.16%)</title><rect x="99.7553%" y="373" width="0.1631%" height="15" fill="rgb(213,132,31)" fg:x="1223" fg:w="2"/><text x="100.0053%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8369%" y="357" width="0.0816%" height="15" fill="rgb(243,129,40)" fg:x="1224" fg:w="1"/><text x="100.0869%" y="367.50"></text></g><g><title>all (1,226 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(210,66,33)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="911.50"></text></g><g><title>simple-255e00ed (1,226 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(209,189,4)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="895.50">simple-255e00ed</text></g><g><title>_start (1,226 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(214,107,37)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="879.50">_start</text></g><g><title>__libc_start_main (1,226 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(245,88,54)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="863.50">__libc_start_main</text></g><g><title>main (1,226 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(205,146,20)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="847.50">main</text></g><g><title>std::rt::lang_start_internal (1,226 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(220,161,25)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="831.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,226 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(215,152,15)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,226 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(233,192,44)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,226 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(240,170,46)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="783.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,226 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(207,104,33)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="767.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,226 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(219,21,39)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,226 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(214,133,29)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,226 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(226,93,6)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="719.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,226 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(252,222,34)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="703.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,226 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(252,92,48)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="687.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,226 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(245,223,24)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="671.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,226 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(205,176,3)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="655.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,226 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(235,151,15)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="639.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,226 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(237,209,11)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="623.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (301 samples, 24.55%)</title><rect x="75.4486%" y="597" width="24.5514%" height="15" fill="rgb(243,227,24)" fg:x="925" fg:w="301"/><text x="75.6986%" y="607.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (301 samples, 24.55%)</title><rect x="75.4486%" y="581" width="24.5514%" height="15" fill="rgb(239,193,16)" fg:x="925" fg:w="301"/><text x="75.6986%" y="591.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (301 samples, 24.55%)</title><rect x="75.4486%" y="565" width="24.5514%" height="15" fill="rgb(231,27,9)" fg:x="925" fg:w="301"/><text x="75.6986%" y="575.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (264 samples, 21.53%)</title><rect x="78.4666%" y="549" width="21.5334%" height="15" fill="rgb(219,169,10)" fg:x="962" fg:w="264"/><text x="78.7166%" y="559.50">engine::session::Session::evaluate..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (264 samples, 21.53%)</title><rect x="78.4666%" y="533" width="21.5334%" height="15" fill="rgb(244,229,43)" fg:x="962" fg:w="264"/><text x="78.7166%" y="543.50">engine::perform::StandardPerformer..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (29 samples, 2.37%)</title><rect x="97.6346%" y="517" width="2.3654%" height="15" fill="rgb(254,38,20)" fg:x="1197" fg:w="29"/><text x="97.8846%" y="527.50">ke..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (29 samples, 2.37%)</title><rect x="97.6346%" y="501" width="2.3654%" height="15" fill="rgb(250,47,30)" fg:x="1197" fg:w="29"/><text x="97.8846%" y="511.50">&lt;p..</text></g><g><title>plugins_rpc::querying::have_surroundings (26 samples, 2.12%)</title><rect x="97.8793%" y="485" width="2.1207%" height="15" fill="rgb(224,124,36)" fg:x="1200" fg:w="26"/><text x="98.1293%" y="495.50">p..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.9184%" y="469" width="0.0816%" height="15" fill="rgb(246,68,51)" fg:x="1225" fg:w="1"/><text x="100.1684%" y="479.50"></text></g></svg></svg>