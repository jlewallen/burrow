<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1238"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0808%" y="725" width="0.0808%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3308%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1616%" y="709" width="0.0808%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.4116%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1616%" y="693" width="0.0808%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.4116%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2423%" y="709" width="0.0808%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.4923%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3231%" y="709" width="0.0808%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="0.5731%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3231%" y="693" width="0.0808%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.5731%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0000%" y="741" width="0.4847%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.1616%" y="725" width="0.3231%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="4"/><text x="0.4116%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4039%" y="709" width="0.0808%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="1"/><text x="0.6539%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4847%" y="661" width="0.0808%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="1"/><text x="0.7347%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.4847%" y="725" width="0.1616%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="2"/><text x="0.7347%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.4847%" y="709" width="0.1616%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="2"/><text x="0.7347%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.4847%" y="693" width="0.1616%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="2"/><text x="0.7347%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="0.4847%" y="677" width="0.1616%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="2"/><text x="0.7347%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.5654%" y="661" width="0.0808%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="1"/><text x="0.8154%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5654%" y="645" width="0.0808%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="1"/><text x="0.8154%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6462%" y="613" width="0.0808%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="1"/><text x="0.8962%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.7270%" y="613" width="0.0808%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="1"/><text x="0.9770%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7270%" y="597" width="0.0808%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="1"/><text x="0.9770%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8078%" y="597" width="0.0808%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="1"/><text x="1.0578%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8885%" y="597" width="0.0808%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="1"/><text x="1.1385%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.6462%" y="661" width="0.4847%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="6"/><text x="0.8962%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="0.6462%" y="645" width="0.4847%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="6"/><text x="0.8962%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="0.6462%" y="629" width="0.4847%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="6"/><text x="0.8962%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.8078%" y="613" width="0.3231%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="4"/><text x="1.0578%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.9693%" y="597" width="0.1616%" height="15" fill="rgb(249,31,29)" fg:x="12" fg:w="2"/><text x="1.2193%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0501%" y="581" width="0.0808%" height="15" fill="rgb(225,111,53)" fg:x="13" fg:w="1"/><text x="1.3001%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.1309%" y="629" width="0.1616%" height="15" fill="rgb(238,160,17)" fg:x="14" fg:w="2"/><text x="1.3809%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.2924%" y="629" width="0.1616%" height="15" fill="rgb(214,148,48)" fg:x="16" fg:w="2"/><text x="1.5424%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.4540%" y="613" width="0.0808%" height="15" fill="rgb(232,36,49)" fg:x="18" fg:w="1"/><text x="1.7040%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.4540%" y="597" width="0.0808%" height="15" fill="rgb(209,103,24)" fg:x="18" fg:w="1"/><text x="1.7040%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.4540%" y="581" width="0.0808%" height="15" fill="rgb(229,88,8)" fg:x="18" fg:w="1"/><text x="1.7040%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="1.1309%" y="645" width="0.4847%" height="15" fill="rgb(213,181,19)" fg:x="14" fg:w="6"/><text x="1.3809%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.4540%" y="629" width="0.1616%" height="15" fill="rgb(254,191,54)" fg:x="18" fg:w="2"/><text x="1.7040%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5347%" y="613" width="0.0808%" height="15" fill="rgb(241,83,37)" fg:x="19" fg:w="1"/><text x="1.7847%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5347%" y="597" width="0.0808%" height="15" fill="rgb(233,36,39)" fg:x="19" fg:w="1"/><text x="1.7847%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.21%)</title><rect x="0.4847%" y="741" width="1.2116%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="15"/><text x="0.7347%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (13 samples, 1.05%)</title><rect x="0.6462%" y="725" width="1.0501%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="13"/><text x="0.8962%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.05%)</title><rect x="0.6462%" y="709" width="1.0501%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="13"/><text x="0.8962%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (13 samples, 1.05%)</title><rect x="0.6462%" y="693" width="1.0501%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="13"/><text x="0.8962%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.05%)</title><rect x="0.6462%" y="677" width="1.0501%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="13"/><text x="0.8962%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="1.1309%" y="661" width="0.5654%" height="15" fill="rgb(208,69,12)" fg:x="14" fg:w="7"/><text x="1.3809%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6155%" y="645" width="0.0808%" height="15" fill="rgb(235,93,37)" fg:x="20" fg:w="1"/><text x="1.8655%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.0194%" y="581" width="0.0808%" height="15" fill="rgb(213,116,39)" fg:x="25" fg:w="1"/><text x="2.2694%" y="591.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="2.1002%" y="581" width="0.0808%" height="15" fill="rgb(222,207,29)" fg:x="26" fg:w="1"/><text x="2.3502%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="2.1002%" y="565" width="0.0808%" height="15" fill="rgb(206,96,30)" fg:x="26" fg:w="1"/><text x="2.3502%" y="575.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (3 samples, 0.24%)</title><rect x="2.0194%" y="613" width="0.2423%" height="15" fill="rgb(218,138,4)" fg:x="25" fg:w="3"/><text x="2.2694%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (3 samples, 0.24%)</title><rect x="2.0194%" y="597" width="0.2423%" height="15" fill="rgb(250,191,14)" fg:x="25" fg:w="3"/><text x="2.2694%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.1809%" y="581" width="0.0808%" height="15" fill="rgb(239,60,40)" fg:x="27" fg:w="1"/><text x="2.4309%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.1809%" y="565" width="0.0808%" height="15" fill="rgb(206,27,48)" fg:x="27" fg:w="1"/><text x="2.4309%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.1809%" y="549" width="0.0808%" height="15" fill="rgb(225,35,8)" fg:x="27" fg:w="1"/><text x="2.4309%" y="559.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.40%)</title><rect x="2.0194%" y="645" width="0.4039%" height="15" fill="rgb(250,213,24)" fg:x="25" fg:w="5"/><text x="2.2694%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.40%)</title><rect x="2.0194%" y="629" width="0.4039%" height="15" fill="rgb(247,123,22)" fg:x="25" fg:w="5"/><text x="2.2694%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="2.2617%" y="613" width="0.1616%" height="15" fill="rgb(231,138,38)" fg:x="28" fg:w="2"/><text x="2.5117%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="2.2617%" y="597" width="0.1616%" height="15" fill="rgb(231,145,46)" fg:x="28" fg:w="2"/><text x="2.5117%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.3425%" y="581" width="0.0808%" height="15" fill="rgb(251,118,11)" fg:x="29" fg:w="1"/><text x="2.5925%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.3425%" y="565" width="0.0808%" height="15" fill="rgb(217,147,25)" fg:x="29" fg:w="1"/><text x="2.5925%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::actions::GiveToAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.4233%" y="613" width="0.0808%" height="15" fill="rgb(247,81,37)" fg:x="30" fg:w="1"/><text x="2.6733%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.4233%" y="597" width="0.0808%" height="15" fill="rgb(209,12,38)" fg:x="30" fg:w="1"/><text x="2.6733%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.4233%" y="581" width="0.0808%" height="15" fill="rgb(227,1,9)" fg:x="30" fg:w="1"/><text x="2.6733%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.4233%" y="565" width="0.0808%" height="15" fill="rgb(248,47,43)" fg:x="30" fg:w="1"/><text x="2.6733%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4233%" y="549" width="0.0808%" height="15" fill="rgb(221,10,30)" fg:x="30" fg:w="1"/><text x="2.6733%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.4233%" y="645" width="0.1616%" height="15" fill="rgb(210,229,1)" fg:x="30" fg:w="2"/><text x="2.6733%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.4233%" y="629" width="0.1616%" height="15" fill="rgb(222,148,37)" fg:x="30" fg:w="2"/><text x="2.6733%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="2.5040%" y="613" width="0.0808%" height="15" fill="rgb(234,67,33)" fg:x="31" fg:w="1"/><text x="2.7540%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5040%" y="597" width="0.0808%" height="15" fill="rgb(247,98,35)" fg:x="31" fg:w="1"/><text x="2.7540%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.5848%" y="645" width="0.1616%" height="15" fill="rgb(247,138,52)" fg:x="32" fg:w="2"/><text x="2.8348%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.5848%" y="629" width="0.1616%" height="15" fill="rgb(213,79,30)" fg:x="32" fg:w="2"/><text x="2.8348%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="2.5848%" y="613" width="0.1616%" height="15" fill="rgb(246,177,23)" fg:x="32" fg:w="2"/><text x="2.8348%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.6656%" y="597" width="0.0808%" height="15" fill="rgb(230,62,27)" fg:x="33" fg:w="1"/><text x="2.9156%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.7464%" y="645" width="0.1616%" height="15" fill="rgb(216,154,8)" fg:x="34" fg:w="2"/><text x="2.9964%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.7464%" y="629" width="0.1616%" height="15" fill="rgb(244,35,45)" fg:x="34" fg:w="2"/><text x="2.9964%" y="639.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.8271%" y="613" width="0.0808%" height="15" fill="rgb(251,115,12)" fg:x="35" fg:w="1"/><text x="3.0771%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.8271%" y="597" width="0.0808%" height="15" fill="rgb(240,54,50)" fg:x="35" fg:w="1"/><text x="3.0771%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8271%" y="581" width="0.0808%" height="15" fill="rgb(233,84,52)" fg:x="35" fg:w="1"/><text x="3.0771%" y="591.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.9079%" y="645" width="0.0808%" height="15" fill="rgb(207,117,47)" fg:x="36" fg:w="1"/><text x="3.1579%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.9079%" y="629" width="0.0808%" height="15" fill="rgb(249,43,39)" fg:x="36" fg:w="1"/><text x="3.1579%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="2.9079%" y="613" width="0.0808%" height="15" fill="rgb(209,38,44)" fg:x="36" fg:w="1"/><text x="3.1579%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.9079%" y="597" width="0.0808%" height="15" fill="rgb(236,212,23)" fg:x="36" fg:w="1"/><text x="3.1579%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.9079%" y="581" width="0.0808%" height="15" fill="rgb(242,79,21)" fg:x="36" fg:w="1"/><text x="3.1579%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9887%" y="645" width="0.0808%" height="15" fill="rgb(211,96,35)" fg:x="37" fg:w="1"/><text x="3.2387%" y="655.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (16 samples, 1.29%)</title><rect x="1.8578%" y="661" width="1.2924%" height="15" fill="rgb(253,215,40)" fg:x="23" fg:w="16"/><text x="2.1078%" y="671.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="3.0695%" y="645" width="0.0808%" height="15" fill="rgb(211,81,21)" fg:x="38" fg:w="1"/><text x="3.3195%" y="655.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="3.0695%" y="629" width="0.0808%" height="15" fill="rgb(208,190,38)" fg:x="38" fg:w="1"/><text x="3.3195%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.1502%" y="645" width="0.0808%" height="15" fill="rgb(235,213,38)" fg:x="39" fg:w="1"/><text x="3.4002%" y="655.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.2310%" y="597" width="0.0808%" height="15" fill="rgb(237,122,38)" fg:x="40" fg:w="1"/><text x="3.4810%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.2310%" y="581" width="0.0808%" height="15" fill="rgb(244,218,35)" fg:x="40" fg:w="1"/><text x="3.4810%" y="591.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="3.2310%" y="565" width="0.0808%" height="15" fill="rgb(240,68,47)" fg:x="40" fg:w="1"/><text x="3.4810%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="3.2310%" y="549" width="0.0808%" height="15" fill="rgb(210,16,53)" fg:x="40" fg:w="1"/><text x="3.4810%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="3.2310%" y="533" width="0.0808%" height="15" fill="rgb(235,124,12)" fg:x="40" fg:w="1"/><text x="3.4810%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="3.2310%" y="517" width="0.0808%" height="15" fill="rgb(224,169,11)" fg:x="40" fg:w="1"/><text x="3.4810%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.2310%" y="501" width="0.0808%" height="15" fill="rgb(250,166,2)" fg:x="40" fg:w="1"/><text x="3.4810%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="3.2310%" y="645" width="0.2423%" height="15" fill="rgb(242,216,29)" fg:x="40" fg:w="3"/><text x="3.4810%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="3.2310%" y="629" width="0.2423%" height="15" fill="rgb(230,116,27)" fg:x="40" fg:w="3"/><text x="3.4810%" y="639.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="3.2310%" y="613" width="0.2423%" height="15" fill="rgb(228,99,48)" fg:x="40" fg:w="3"/><text x="3.4810%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="3.3118%" y="597" width="0.1616%" height="15" fill="rgb(253,11,6)" fg:x="41" fg:w="2"/><text x="3.5618%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="3.3118%" y="581" width="0.1616%" height="15" fill="rgb(247,143,39)" fg:x="41" fg:w="2"/><text x="3.5618%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="3.3118%" y="565" width="0.1616%" height="15" fill="rgb(236,97,10)" fg:x="41" fg:w="2"/><text x="3.5618%" y="575.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="3.3118%" y="549" width="0.1616%" height="15" fill="rgb(233,208,19)" fg:x="41" fg:w="2"/><text x="3.5618%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="3.3118%" y="533" width="0.1616%" height="15" fill="rgb(216,164,2)" fg:x="41" fg:w="2"/><text x="3.5618%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="3.3118%" y="517" width="0.1616%" height="15" fill="rgb(220,129,5)" fg:x="41" fg:w="2"/><text x="3.5618%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="3.3118%" y="501" width="0.1616%" height="15" fill="rgb(242,17,10)" fg:x="41" fg:w="2"/><text x="3.5618%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="3.3118%" y="485" width="0.1616%" height="15" fill="rgb(242,107,0)" fg:x="41" fg:w="2"/><text x="3.5618%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="3.3118%" y="469" width="0.1616%" height="15" fill="rgb(251,28,31)" fg:x="41" fg:w="2"/><text x="3.5618%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="3.3118%" y="453" width="0.1616%" height="15" fill="rgb(233,223,10)" fg:x="41" fg:w="2"/><text x="3.5618%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="3.3118%" y="437" width="0.1616%" height="15" fill="rgb(215,21,27)" fg:x="41" fg:w="2"/><text x="3.5618%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="3.3118%" y="421" width="0.1616%" height="15" fill="rgb(232,23,21)" fg:x="41" fg:w="2"/><text x="3.5618%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.16%)</title><rect x="3.3118%" y="405" width="0.1616%" height="15" fill="rgb(244,5,23)" fg:x="41" fg:w="2"/><text x="3.5618%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.16%)</title><rect x="3.3118%" y="389" width="0.1616%" height="15" fill="rgb(226,81,46)" fg:x="41" fg:w="2"/><text x="3.5618%" y="399.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.16%)</title><rect x="3.3118%" y="373" width="0.1616%" height="15" fill="rgb(247,70,30)" fg:x="41" fg:w="2"/><text x="3.5618%" y="383.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="3.3118%" y="357" width="0.1616%" height="15" fill="rgb(212,68,19)" fg:x="41" fg:w="2"/><text x="3.5618%" y="367.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="3.1502%" y="661" width="0.4847%" height="15" fill="rgb(240,187,13)" fg:x="39" fg:w="6"/><text x="3.4002%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="3.4733%" y="645" width="0.1616%" height="15" fill="rgb(223,113,26)" fg:x="43" fg:w="2"/><text x="3.7233%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="3.4733%" y="629" width="0.1616%" height="15" fill="rgb(206,192,2)" fg:x="43" fg:w="2"/><text x="3.7233%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="3.4733%" y="613" width="0.1616%" height="15" fill="rgb(241,108,4)" fg:x="43" fg:w="2"/><text x="3.7233%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="3.4733%" y="597" width="0.1616%" height="15" fill="rgb(247,173,49)" fg:x="43" fg:w="2"/><text x="3.7233%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="3.4733%" y="581" width="0.1616%" height="15" fill="rgb(224,114,35)" fg:x="43" fg:w="2"/><text x="3.7233%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="3.4733%" y="565" width="0.1616%" height="15" fill="rgb(245,159,27)" fg:x="43" fg:w="2"/><text x="3.7233%" y="575.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="3.4733%" y="549" width="0.1616%" height="15" fill="rgb(245,172,44)" fg:x="43" fg:w="2"/><text x="3.7233%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="3.7157%" y="597" width="0.2423%" height="15" fill="rgb(236,23,11)" fg:x="46" fg:w="3"/><text x="3.9657%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="3.7157%" y="581" width="0.2423%" height="15" fill="rgb(205,117,38)" fg:x="46" fg:w="3"/><text x="3.9657%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="3.7157%" y="565" width="0.2423%" height="15" fill="rgb(237,72,25)" fg:x="46" fg:w="3"/><text x="3.9657%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="3.7157%" y="549" width="0.2423%" height="15" fill="rgb(244,70,9)" fg:x="46" fg:w="3"/><text x="3.9657%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="3.7157%" y="533" width="0.2423%" height="15" fill="rgb(217,125,39)" fg:x="46" fg:w="3"/><text x="3.9657%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="3.7157%" y="517" width="0.2423%" height="15" fill="rgb(235,36,10)" fg:x="46" fg:w="3"/><text x="3.9657%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="3.7157%" y="501" width="0.2423%" height="15" fill="rgb(251,123,47)" fg:x="46" fg:w="3"/><text x="3.9657%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.24%)</title><rect x="3.7157%" y="485" width="0.2423%" height="15" fill="rgb(221,13,13)" fg:x="46" fg:w="3"/><text x="3.9657%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.24%)</title><rect x="3.7157%" y="469" width="0.2423%" height="15" fill="rgb(238,131,9)" fg:x="46" fg:w="3"/><text x="3.9657%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.24%)</title><rect x="3.7157%" y="453" width="0.2423%" height="15" fill="rgb(211,50,8)" fg:x="46" fg:w="3"/><text x="3.9657%" y="463.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.24%)</title><rect x="3.7157%" y="437" width="0.2423%" height="15" fill="rgb(245,182,24)" fg:x="46" fg:w="3"/><text x="3.9657%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.7964%" y="421" width="0.1616%" height="15" fill="rgb(242,14,37)" fg:x="47" fg:w="2"/><text x="4.0464%" y="431.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (5 samples, 0.40%)</title><rect x="3.6349%" y="645" width="0.4039%" height="15" fill="rgb(246,228,12)" fg:x="45" fg:w="5"/><text x="3.8849%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.40%)</title><rect x="3.6349%" y="629" width="0.4039%" height="15" fill="rgb(213,55,15)" fg:x="45" fg:w="5"/><text x="3.8849%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.40%)</title><rect x="3.6349%" y="613" width="0.4039%" height="15" fill="rgb(209,9,3)" fg:x="45" fg:w="5"/><text x="3.8849%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.9580%" y="597" width="0.0808%" height="15" fill="rgb(230,59,30)" fg:x="49" fg:w="1"/><text x="4.2080%" y="607.50"></text></g><g><title>glob::is_dir (6 samples, 0.48%)</title><rect x="4.0388%" y="597" width="0.4847%" height="15" fill="rgb(209,121,21)" fg:x="50" fg:w="6"/><text x="4.2888%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (5 samples, 0.40%)</title><rect x="4.1195%" y="581" width="0.4039%" height="15" fill="rgb(220,109,13)" fg:x="51" fg:w="5"/><text x="4.3695%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (5 samples, 0.40%)</title><rect x="4.1195%" y="565" width="0.4039%" height="15" fill="rgb(232,18,1)" fg:x="51" fg:w="5"/><text x="4.3695%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (5 samples, 0.40%)</title><rect x="4.1195%" y="549" width="0.4039%" height="15" fill="rgb(215,41,42)" fg:x="51" fg:w="5"/><text x="4.3695%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="4.2003%" y="533" width="0.3231%" height="15" fill="rgb(224,123,36)" fg:x="52" fg:w="4"/><text x="4.4503%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="4.2003%" y="517" width="0.3231%" height="15" fill="rgb(240,125,3)" fg:x="52" fg:w="4"/><text x="4.4503%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="4.2003%" y="501" width="0.3231%" height="15" fill="rgb(205,98,50)" fg:x="52" fg:w="4"/><text x="4.4503%" y="511.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="4.2003%" y="485" width="0.3231%" height="15" fill="rgb(205,185,37)" fg:x="52" fg:w="4"/><text x="4.4503%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.65%)</title><rect x="4.0388%" y="629" width="0.6462%" height="15" fill="rgb(238,207,15)" fg:x="50" fg:w="8"/><text x="4.2888%" y="639.50"></text></g><g><title>glob::fill_todo (8 samples, 0.65%)</title><rect x="4.0388%" y="613" width="0.6462%" height="15" fill="rgb(213,199,42)" fg:x="50" fg:w="8"/><text x="4.2888%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="4.5234%" y="597" width="0.1616%" height="15" fill="rgb(235,201,11)" fg:x="56" fg:w="2"/><text x="4.7734%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="4.5234%" y="581" width="0.1616%" height="15" fill="rgb(207,46,11)" fg:x="56" fg:w="2"/><text x="4.7734%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="4.5234%" y="565" width="0.1616%" height="15" fill="rgb(241,35,35)" fg:x="56" fg:w="2"/><text x="4.7734%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="4.5234%" y="549" width="0.1616%" height="15" fill="rgb(243,32,47)" fg:x="56" fg:w="2"/><text x="4.7734%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="4.5234%" y="533" width="0.1616%" height="15" fill="rgb(247,202,23)" fg:x="56" fg:w="2"/><text x="4.7734%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="4.5234%" y="517" width="0.1616%" height="15" fill="rgb(219,102,11)" fg:x="56" fg:w="2"/><text x="4.7734%" y="527.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="4.5234%" y="501" width="0.1616%" height="15" fill="rgb(243,110,44)" fg:x="56" fg:w="2"/><text x="4.7734%" y="511.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (15 samples, 1.21%)</title><rect x="3.6349%" y="661" width="1.2116%" height="15" fill="rgb(222,74,54)" fg:x="45" fg:w="15"/><text x="3.8849%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (10 samples, 0.81%)</title><rect x="4.0388%" y="645" width="0.8078%" height="15" fill="rgb(216,99,12)" fg:x="50" fg:w="10"/><text x="4.2888%" y="655.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="4.6850%" y="629" width="0.1616%" height="15" fill="rgb(226,22,26)" fg:x="58" fg:w="2"/><text x="4.9350%" y="639.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="4.7658%" y="613" width="0.0808%" height="15" fill="rgb(217,163,10)" fg:x="59" fg:w="1"/><text x="5.0158%" y="623.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="4.7658%" y="597" width="0.0808%" height="15" fill="rgb(213,25,53)" fg:x="59" fg:w="1"/><text x="5.0158%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.7658%" y="581" width="0.0808%" height="15" fill="rgb(252,105,26)" fg:x="59" fg:w="1"/><text x="5.0158%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.7658%" y="565" width="0.0808%" height="15" fill="rgb(220,39,43)" fg:x="59" fg:w="1"/><text x="5.0158%" y="575.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="4.8465%" y="661" width="0.0808%" height="15" fill="rgb(229,68,48)" fg:x="60" fg:w="1"/><text x="5.0965%" y="671.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.08%)</title><rect x="4.8465%" y="645" width="0.0808%" height="15" fill="rgb(252,8,32)" fg:x="60" fg:w="1"/><text x="5.0965%" y="655.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.08%)</title><rect x="4.8465%" y="629" width="0.0808%" height="15" fill="rgb(223,20,43)" fg:x="60" fg:w="1"/><text x="5.0965%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (1 samples, 0.08%)</title><rect x="4.8465%" y="613" width="0.0808%" height="15" fill="rgb(229,81,49)" fg:x="60" fg:w="1"/><text x="5.0965%" y="623.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="4.8465%" y="597" width="0.0808%" height="15" fill="rgb(236,28,36)" fg:x="60" fg:w="1"/><text x="5.0965%" y="607.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.08%)</title><rect x="4.8465%" y="581" width="0.0808%" height="15" fill="rgb(249,185,26)" fg:x="60" fg:w="1"/><text x="5.0965%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9273%" y="661" width="0.0808%" height="15" fill="rgb(249,174,33)" fg:x="61" fg:w="1"/><text x="5.1773%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="5.0081%" y="661" width="0.0808%" height="15" fill="rgb(233,201,37)" fg:x="62" fg:w="1"/><text x="5.2581%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="5.0081%" y="645" width="0.0808%" height="15" fill="rgb(221,78,26)" fg:x="62" fg:w="1"/><text x="5.2581%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (42 samples, 3.39%)</title><rect x="1.8578%" y="677" width="3.3926%" height="15" fill="rgb(250,127,30)" fg:x="23" fg:w="42"/><text x="2.1078%" y="687.50">ker..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="5.0889%" y="661" width="0.1616%" height="15" fill="rgb(230,49,44)" fg:x="63" fg:w="2"/><text x="5.3389%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="5.1696%" y="645" width="0.0808%" height="15" fill="rgb(229,67,23)" fg:x="64" fg:w="1"/><text x="5.4196%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="5.2504%" y="645" width="0.0808%" height="15" fill="rgb(249,83,47)" fg:x="65" fg:w="1"/><text x="5.5004%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2504%" y="629" width="0.0808%" height="15" fill="rgb(215,43,3)" fg:x="65" fg:w="1"/><text x="5.5004%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::sources (1 samples, 0.08%)</title><rect x="5.3312%" y="645" width="0.0808%" height="15" fill="rgb(238,154,13)" fg:x="66" fg:w="1"/><text x="5.5812%" y="655.50"></text></g><g><title>engine::session::Session::initialize (45 samples, 3.63%)</title><rect x="1.8578%" y="693" width="3.6349%" height="15" fill="rgb(219,56,2)" fg:x="23" fg:w="45"/><text x="2.1078%" y="703.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (3 samples, 0.24%)</title><rect x="5.2504%" y="677" width="0.2423%" height="15" fill="rgb(233,0,4)" fg:x="65" fg:w="3"/><text x="5.5004%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="5.2504%" y="661" width="0.2423%" height="15" fill="rgb(235,30,7)" fg:x="65" fg:w="3"/><text x="5.5004%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.4120%" y="645" width="0.0808%" height="15" fill="rgb(250,79,13)" fg:x="67" fg:w="1"/><text x="5.6620%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.4120%" y="629" width="0.0808%" height="15" fill="rgb(211,146,34)" fg:x="67" fg:w="1"/><text x="5.6620%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.4120%" y="613" width="0.0808%" height="15" fill="rgb(228,22,38)" fg:x="67" fg:w="1"/><text x="5.6620%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (49 samples, 3.96%)</title><rect x="1.6963%" y="741" width="3.9580%" height="15" fill="rgb(235,168,5)" fg:x="21" fg:w="49"/><text x="1.9463%" y="751.50">&lt;eng..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (49 samples, 3.96%)</title><rect x="1.6963%" y="725" width="3.9580%" height="15" fill="rgb(221,155,16)" fg:x="21" fg:w="49"/><text x="1.9463%" y="735.50">engi..</text></g><g><title>engine::session::Session::new (48 samples, 3.88%)</title><rect x="1.7771%" y="709" width="3.8772%" height="15" fill="rgb(215,215,53)" fg:x="22" fg:w="48"/><text x="2.0271%" y="719.50">engi..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="5.4927%" y="693" width="0.1616%" height="15" fill="rgb(223,4,10)" fg:x="68" fg:w="2"/><text x="5.7427%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="5.4927%" y="677" width="0.1616%" height="15" fill="rgb(234,103,6)" fg:x="68" fg:w="2"/><text x="5.7427%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="5.5735%" y="661" width="0.0808%" height="15" fill="rgb(227,97,0)" fg:x="69" fg:w="1"/><text x="5.8235%" y="671.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="5.5735%" y="645" width="0.0808%" height="15" fill="rgb(234,150,53)" fg:x="69" fg:w="1"/><text x="5.8235%" y="655.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="5.5735%" y="629" width="0.0808%" height="15" fill="rgb(228,201,54)" fg:x="69" fg:w="1"/><text x="5.8235%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.6543%" y="725" width="0.0808%" height="15" fill="rgb(222,22,37)" fg:x="70" fg:w="1"/><text x="5.9043%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="5.6543%" y="709" width="0.0808%" height="15" fill="rgb(237,53,32)" fg:x="70" fg:w="1"/><text x="5.9043%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.6543%" y="693" width="0.0808%" height="15" fill="rgb(233,25,53)" fg:x="70" fg:w="1"/><text x="5.9043%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="5.7351%" y="709" width="0.0808%" height="15" fill="rgb(210,40,34)" fg:x="71" fg:w="1"/><text x="5.9851%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.8966%" y="645" width="0.0808%" height="15" fill="rgb(241,220,44)" fg:x="73" fg:w="1"/><text x="6.1466%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="5.9774%" y="629" width="0.0808%" height="15" fill="rgb(235,28,35)" fg:x="74" fg:w="1"/><text x="6.2274%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.9774%" y="613" width="0.0808%" height="15" fill="rgb(210,56,17)" fg:x="74" fg:w="1"/><text x="6.2274%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.9774%" y="597" width="0.0808%" height="15" fill="rgb(224,130,29)" fg:x="74" fg:w="1"/><text x="6.2274%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.9774%" y="581" width="0.0808%" height="15" fill="rgb(235,212,8)" fg:x="74" fg:w="1"/><text x="6.2274%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.9774%" y="565" width="0.0808%" height="15" fill="rgb(223,33,50)" fg:x="74" fg:w="1"/><text x="6.2274%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.9774%" y="549" width="0.0808%" height="15" fill="rgb(219,149,13)" fg:x="74" fg:w="1"/><text x="6.2274%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.9774%" y="533" width="0.0808%" height="15" fill="rgb(250,156,29)" fg:x="74" fg:w="1"/><text x="6.2274%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9774%" y="517" width="0.0808%" height="15" fill="rgb(216,193,19)" fg:x="74" fg:w="1"/><text x="6.2274%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="6.0582%" y="613" width="0.1616%" height="15" fill="rgb(216,135,14)" fg:x="75" fg:w="2"/><text x="6.3082%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.0582%" y="597" width="0.1616%" height="15" fill="rgb(241,47,5)" fg:x="75" fg:w="2"/><text x="6.3082%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.0582%" y="581" width="0.1616%" height="15" fill="rgb(233,42,35)" fg:x="75" fg:w="2"/><text x="6.3082%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.3005%" y="597" width="0.0808%" height="15" fill="rgb(231,13,6)" fg:x="78" fg:w="1"/><text x="6.5505%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.3813%" y="597" width="0.0808%" height="15" fill="rgb(207,181,40)" fg:x="79" fg:w="1"/><text x="6.6313%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.5428%" y="581" width="0.0808%" height="15" fill="rgb(254,173,49)" fg:x="81" fg:w="1"/><text x="6.7928%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5428%" y="565" width="0.0808%" height="15" fill="rgb(221,1,38)" fg:x="81" fg:w="1"/><text x="6.7928%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5428%" y="549" width="0.0808%" height="15" fill="rgb(206,124,46)" fg:x="81" fg:w="1"/><text x="6.7928%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5428%" y="533" width="0.0808%" height="15" fill="rgb(249,21,11)" fg:x="81" fg:w="1"/><text x="6.7928%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.5428%" y="517" width="0.0808%" height="15" fill="rgb(222,201,40)" fg:x="81" fg:w="1"/><text x="6.7928%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.5428%" y="501" width="0.0808%" height="15" fill="rgb(235,61,29)" fg:x="81" fg:w="1"/><text x="6.7928%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.8659%" y="533" width="0.0808%" height="15" fill="rgb(219,207,3)" fg:x="85" fg:w="1"/><text x="7.1159%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="6.6236%" y="581" width="0.4039%" height="15" fill="rgb(222,56,46)" fg:x="82" fg:w="5"/><text x="6.8736%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="6.7851%" y="565" width="0.2423%" height="15" fill="rgb(239,76,54)" fg:x="84" fg:w="3"/><text x="7.0351%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.8659%" y="549" width="0.1616%" height="15" fill="rgb(231,124,27)" fg:x="85" fg:w="2"/><text x="7.1159%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="6.9467%" y="533" width="0.0808%" height="15" fill="rgb(249,195,6)" fg:x="86" fg:w="1"/><text x="7.1967%" y="543.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="7.0275%" y="565" width="0.0808%" height="15" fill="rgb(237,174,47)" fg:x="87" fg:w="1"/><text x="7.2775%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.1082%" y="565" width="0.0808%" height="15" fill="rgb(206,201,31)" fg:x="88" fg:w="1"/><text x="7.3582%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.1082%" y="549" width="0.0808%" height="15" fill="rgb(231,57,52)" fg:x="88" fg:w="1"/><text x="7.3582%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.1082%" y="533" width="0.0808%" height="15" fill="rgb(248,177,22)" fg:x="88" fg:w="1"/><text x="7.3582%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.1082%" y="517" width="0.0808%" height="15" fill="rgb(215,211,37)" fg:x="88" fg:w="1"/><text x="7.3582%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.1082%" y="501" width="0.0808%" height="15" fill="rgb(241,128,51)" fg:x="88" fg:w="1"/><text x="7.3582%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.1082%" y="485" width="0.0808%" height="15" fill="rgb(227,165,31)" fg:x="88" fg:w="1"/><text x="7.3582%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.1082%" y="469" width="0.0808%" height="15" fill="rgb(228,167,24)" fg:x="88" fg:w="1"/><text x="7.3582%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.1890%" y="549" width="0.0808%" height="15" fill="rgb(228,143,12)" fg:x="89" fg:w="1"/><text x="7.4390%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.1890%" y="565" width="0.1616%" height="15" fill="rgb(249,149,8)" fg:x="89" fg:w="2"/><text x="7.4390%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.2698%" y="549" width="0.0808%" height="15" fill="rgb(243,35,44)" fg:x="90" fg:w="1"/><text x="7.5198%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.2698%" y="533" width="0.0808%" height="15" fill="rgb(246,89,9)" fg:x="90" fg:w="1"/><text x="7.5198%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.2698%" y="517" width="0.0808%" height="15" fill="rgb(233,213,13)" fg:x="90" fg:w="1"/><text x="7.5198%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="7.0275%" y="581" width="0.4847%" height="15" fill="rgb(233,141,41)" fg:x="87" fg:w="6"/><text x="7.2775%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.3506%" y="565" width="0.1616%" height="15" fill="rgb(239,167,4)" fg:x="91" fg:w="2"/><text x="7.6006%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.3506%" y="549" width="0.1616%" height="15" fill="rgb(209,217,16)" fg:x="91" fg:w="2"/><text x="7.6006%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.21%)</title><rect x="6.4620%" y="597" width="1.2116%" height="15" fill="rgb(219,88,35)" fg:x="80" fg:w="15"/><text x="6.7120%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.5121%" y="581" width="0.1616%" height="15" fill="rgb(220,193,23)" fg:x="93" fg:w="2"/><text x="7.7621%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.5929%" y="565" width="0.0808%" height="15" fill="rgb(230,90,52)" fg:x="94" fg:w="1"/><text x="7.8429%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (21 samples, 1.70%)</title><rect x="6.2197%" y="613" width="1.6963%" height="15" fill="rgb(252,106,19)" fg:x="77" fg:w="21"/><text x="6.4697%" y="623.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="7.6737%" y="597" width="0.2423%" height="15" fill="rgb(206,74,20)" fg:x="95" fg:w="3"/><text x="7.9237%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.8352%" y="581" width="0.0808%" height="15" fill="rgb(230,138,44)" fg:x="97" fg:w="1"/><text x="8.0852%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.8352%" y="565" width="0.0808%" height="15" fill="rgb(235,182,43)" fg:x="97" fg:w="1"/><text x="8.0852%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (24 samples, 1.94%)</title><rect x="6.0582%" y="629" width="1.9386%" height="15" fill="rgb(242,16,51)" fg:x="75" fg:w="24"/><text x="6.3082%" y="639.50">&lt;..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.9160%" y="613" width="0.0808%" height="15" fill="rgb(248,9,4)" fg:x="98" fg:w="1"/><text x="8.1660%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.9160%" y="597" width="0.0808%" height="15" fill="rgb(210,31,22)" fg:x="98" fg:w="1"/><text x="8.1660%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.9160%" y="581" width="0.0808%" height="15" fill="rgb(239,54,39)" fg:x="98" fg:w="1"/><text x="8.1660%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.9160%" y="565" width="0.0808%" height="15" fill="rgb(230,99,41)" fg:x="98" fg:w="1"/><text x="8.1660%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.9160%" y="549" width="0.0808%" height="15" fill="rgb(253,106,12)" fg:x="98" fg:w="1"/><text x="8.1660%" y="559.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="7.9160%" y="533" width="0.0808%" height="15" fill="rgb(213,46,41)" fg:x="98" fg:w="1"/><text x="8.1660%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="7.9160%" y="517" width="0.0808%" height="15" fill="rgb(215,133,35)" fg:x="98" fg:w="1"/><text x="8.1660%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.9968%" y="629" width="0.0808%" height="15" fill="rgb(213,28,5)" fg:x="99" fg:w="1"/><text x="8.2468%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.9968%" y="613" width="0.0808%" height="15" fill="rgb(215,77,49)" fg:x="99" fg:w="1"/><text x="8.2468%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.9968%" y="597" width="0.0808%" height="15" fill="rgb(248,100,22)" fg:x="99" fg:w="1"/><text x="8.2468%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.9968%" y="581" width="0.0808%" height="15" fill="rgb(208,67,9)" fg:x="99" fg:w="1"/><text x="8.2468%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.9968%" y="565" width="0.0808%" height="15" fill="rgb(219,133,21)" fg:x="99" fg:w="1"/><text x="8.2468%" y="575.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="8.1583%" y="565" width="0.1616%" height="15" fill="rgb(246,46,29)" fg:x="101" fg:w="2"/><text x="8.4083%" y="575.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.16%)</title><rect x="8.1583%" y="549" width="0.1616%" height="15" fill="rgb(246,185,52)" fg:x="101" fg:w="2"/><text x="8.4083%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="8.2391%" y="533" width="0.0808%" height="15" fill="rgb(252,136,11)" fg:x="102" fg:w="1"/><text x="8.4891%" y="543.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (4 samples, 0.32%)</title><rect x="8.0775%" y="597" width="0.3231%" height="15" fill="rgb(219,138,53)" fg:x="100" fg:w="4"/><text x="8.3275%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="8.0775%" y="581" width="0.3231%" height="15" fill="rgb(211,51,23)" fg:x="100" fg:w="4"/><text x="8.3275%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.3199%" y="565" width="0.0808%" height="15" fill="rgb(247,221,28)" fg:x="103" fg:w="1"/><text x="8.5699%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="8.0775%" y="613" width="0.4039%" height="15" fill="rgb(251,222,45)" fg:x="100" fg:w="5"/><text x="8.3275%" y="623.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="8.4006%" y="597" width="0.0808%" height="15" fill="rgb(217,162,53)" fg:x="104" fg:w="1"/><text x="8.6506%" y="607.50"></text></g><g><title>treediff::tools::record::mk (1 samples, 0.08%)</title><rect x="8.4006%" y="581" width="0.0808%" height="15" fill="rgb(229,93,14)" fg:x="104" fg:w="1"/><text x="8.6506%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5622%" y="581" width="0.0808%" height="15" fill="rgb(209,67,49)" fg:x="106" fg:w="1"/><text x="8.8122%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.9661%" y="485" width="0.0808%" height="15" fill="rgb(213,87,29)" fg:x="111" fg:w="1"/><text x="9.2161%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="8.8045%" y="533" width="0.3231%" height="15" fill="rgb(205,151,52)" fg:x="109" fg:w="4"/><text x="9.0545%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="8.8045%" y="517" width="0.3231%" height="15" fill="rgb(253,215,39)" fg:x="109" fg:w="4"/><text x="9.0545%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="8.8045%" y="501" width="0.3231%" height="15" fill="rgb(221,220,41)" fg:x="109" fg:w="4"/><text x="9.0545%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0468%" y="485" width="0.0808%" height="15" fill="rgb(218,133,21)" fg:x="112" fg:w="1"/><text x="9.2968%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.0468%" y="469" width="0.0808%" height="15" fill="rgb(221,193,43)" fg:x="112" fg:w="1"/><text x="9.2968%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0468%" y="453" width="0.0808%" height="15" fill="rgb(240,128,52)" fg:x="112" fg:w="1"/><text x="9.2968%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.0468%" y="437" width="0.0808%" height="15" fill="rgb(253,114,12)" fg:x="112" fg:w="1"/><text x="9.2968%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0468%" y="421" width="0.0808%" height="15" fill="rgb(215,223,47)" fg:x="112" fg:w="1"/><text x="9.2968%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2084%" y="501" width="0.0808%" height="15" fill="rgb(248,225,23)" fg:x="114" fg:w="1"/><text x="9.4584%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.4507%" y="485" width="0.0808%" height="15" fill="rgb(250,108,0)" fg:x="117" fg:w="1"/><text x="9.7007%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4507%" y="469" width="0.0808%" height="15" fill="rgb(228,208,7)" fg:x="117" fg:w="1"/><text x="9.7007%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4507%" y="453" width="0.0808%" height="15" fill="rgb(244,45,10)" fg:x="117" fg:w="1"/><text x="9.7007%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (12 samples, 0.97%)</title><rect x="8.6430%" y="565" width="0.9693%" height="15" fill="rgb(207,125,25)" fg:x="107" fg:w="12"/><text x="8.8930%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.89%)</title><rect x="8.7237%" y="549" width="0.8885%" height="15" fill="rgb(210,195,18)" fg:x="108" fg:w="11"/><text x="8.9737%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="9.1276%" y="533" width="0.4847%" height="15" fill="rgb(249,80,12)" fg:x="113" fg:w="6"/><text x="9.3776%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="9.1276%" y="517" width="0.4847%" height="15" fill="rgb(221,65,9)" fg:x="113" fg:w="6"/><text x="9.3776%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="9.2892%" y="501" width="0.3231%" height="15" fill="rgb(235,49,36)" fg:x="115" fg:w="4"/><text x="9.5392%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5315%" y="485" width="0.0808%" height="15" fill="rgb(225,32,20)" fg:x="118" fg:w="1"/><text x="9.7815%" y="495.50"></text></g><g><title>engine::session::Session::flush (50 samples, 4.04%)</title><rect x="5.7351%" y="725" width="4.0388%" height="15" fill="rgb(215,141,46)" fg:x="71" fg:w="50"/><text x="5.9851%" y="735.50">engi..</text></g><g><title>engine::session::state::State::close (49 samples, 3.96%)</title><rect x="5.8158%" y="709" width="3.9580%" height="15" fill="rgb(250,160,47)" fg:x="72" fg:w="49"/><text x="6.0658%" y="719.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (49 samples, 3.96%)</title><rect x="5.8158%" y="693" width="3.9580%" height="15" fill="rgb(216,222,40)" fg:x="72" fg:w="49"/><text x="6.0658%" y="703.50">engi..</text></g><g><title>core::iter::adapters::try_process (49 samples, 3.96%)</title><rect x="5.8158%" y="677" width="3.9580%" height="15" fill="rgb(234,217,39)" fg:x="72" fg:w="49"/><text x="6.0658%" y="687.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (49 samples, 3.96%)</title><rect x="5.8158%" y="661" width="3.9580%" height="15" fill="rgb(207,178,40)" fg:x="72" fg:w="49"/><text x="6.0658%" y="671.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (47 samples, 3.80%)</title><rect x="5.9774%" y="645" width="3.7964%" height="15" fill="rgb(221,136,13)" fg:x="74" fg:w="47"/><text x="6.2274%" y="655.50">engi..</text></g><g><title>kernel::model::any_entity_changes (21 samples, 1.70%)</title><rect x="8.0775%" y="629" width="1.6963%" height="15" fill="rgb(249,199,10)" fg:x="100" fg:w="21"/><text x="8.3275%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.29%)</title><rect x="8.4814%" y="613" width="1.2924%" height="15" fill="rgb(249,222,13)" fg:x="105" fg:w="16"/><text x="8.7314%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.29%)</title><rect x="8.4814%" y="597" width="1.2924%" height="15" fill="rgb(244,185,38)" fg:x="105" fg:w="16"/><text x="8.7314%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.13%)</title><rect x="8.6430%" y="581" width="1.1309%" height="15" fill="rgb(236,202,9)" fg:x="107" fg:w="14"/><text x="8.8930%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.6123%" y="565" width="0.1616%" height="15" fill="rgb(250,229,37)" fg:x="119" fg:w="2"/><text x="9.8623%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="9.6123%" y="549" width="0.1616%" height="15" fill="rgb(206,174,23)" fg:x="119" fg:w="2"/><text x="9.8623%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8546%" y="677" width="0.0808%" height="15" fill="rgb(211,33,43)" fg:x="122" fg:w="1"/><text x="10.1046%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="9.8546%" y="693" width="0.1616%" height="15" fill="rgb(245,58,50)" fg:x="122" fg:w="2"/><text x="10.1046%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.9354%" y="677" width="0.0808%" height="15" fill="rgb(244,68,36)" fg:x="123" fg:w="1"/><text x="10.1854%" y="687.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="10.0162%" y="693" width="0.0808%" height="15" fill="rgb(232,229,15)" fg:x="124" fg:w="1"/><text x="10.2662%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.0162%" y="677" width="0.0808%" height="15" fill="rgb(254,30,23)" fg:x="124" fg:w="1"/><text x="10.2662%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="10.0162%" y="661" width="0.0808%" height="15" fill="rgb(235,160,14)" fg:x="124" fg:w="1"/><text x="10.2662%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0162%" y="645" width="0.0808%" height="15" fill="rgb(212,155,44)" fg:x="124" fg:w="1"/><text x="10.2662%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.0162%" y="629" width="0.0808%" height="15" fill="rgb(226,2,50)" fg:x="124" fg:w="1"/><text x="10.2662%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.1777%" y="645" width="0.0808%" height="15" fill="rgb(234,177,6)" fg:x="126" fg:w="1"/><text x="10.4277%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.1777%" y="629" width="0.0808%" height="15" fill="rgb(217,24,9)" fg:x="126" fg:w="1"/><text x="10.4277%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.1777%" y="613" width="0.0808%" height="15" fill="rgb(220,13,46)" fg:x="126" fg:w="1"/><text x="10.4277%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.1777%" y="597" width="0.0808%" height="15" fill="rgb(239,221,27)" fg:x="126" fg:w="1"/><text x="10.4277%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.1777%" y="581" width="0.0808%" height="15" fill="rgb(222,198,25)" fg:x="126" fg:w="1"/><text x="10.4277%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.1777%" y="565" width="0.0808%" height="15" fill="rgb(211,99,13)" fg:x="126" fg:w="1"/><text x="10.4277%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.1777%" y="549" width="0.0808%" height="15" fill="rgb(232,111,31)" fg:x="126" fg:w="1"/><text x="10.4277%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="10.1777%" y="677" width="0.1616%" height="15" fill="rgb(245,82,37)" fg:x="126" fg:w="2"/><text x="10.4277%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="10.1777%" y="661" width="0.1616%" height="15" fill="rgb(227,149,46)" fg:x="126" fg:w="2"/><text x="10.4277%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2585%" y="645" width="0.0808%" height="15" fill="rgb(218,36,50)" fg:x="127" fg:w="1"/><text x="10.5085%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2585%" y="629" width="0.0808%" height="15" fill="rgb(226,80,48)" fg:x="127" fg:w="1"/><text x="10.5085%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2585%" y="613" width="0.0808%" height="15" fill="rgb(238,224,15)" fg:x="127" fg:w="1"/><text x="10.5085%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2585%" y="597" width="0.0808%" height="15" fill="rgb(241,136,10)" fg:x="127" fg:w="1"/><text x="10.5085%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="10.3393%" y="677" width="0.0808%" height="15" fill="rgb(208,32,45)" fg:x="128" fg:w="1"/><text x="10.5893%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3393%" y="661" width="0.0808%" height="15" fill="rgb(207,135,9)" fg:x="128" fg:w="1"/><text x="10.5893%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="10.3393%" y="645" width="0.0808%" height="15" fill="rgb(206,86,44)" fg:x="128" fg:w="1"/><text x="10.5893%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.73%)</title><rect x="9.7738%" y="725" width="0.7270%" height="15" fill="rgb(245,177,15)" fg:x="121" fg:w="9"/><text x="10.0238%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.73%)</title><rect x="9.7738%" y="709" width="0.7270%" height="15" fill="rgb(206,64,50)" fg:x="121" fg:w="9"/><text x="10.0238%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="10.0969%" y="693" width="0.4039%" height="15" fill="rgb(234,36,40)" fg:x="125" fg:w="5"/><text x="10.3469%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.4200%" y="677" width="0.0808%" height="15" fill="rgb(213,64,8)" fg:x="129" fg:w="1"/><text x="10.6700%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.4200%" y="661" width="0.0808%" height="15" fill="rgb(210,75,36)" fg:x="129" fg:w="1"/><text x="10.6700%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="10.5008%" y="693" width="0.0808%" height="15" fill="rgb(229,88,21)" fg:x="130" fg:w="1"/><text x="10.7508%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="10.5008%" y="677" width="0.0808%" height="15" fill="rgb(252,204,47)" fg:x="130" fg:w="1"/><text x="10.7508%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.5008%" y="661" width="0.0808%" height="15" fill="rgb(208,77,27)" fg:x="130" fg:w="1"/><text x="10.7508%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="10.5008%" y="645" width="0.0808%" height="15" fill="rgb(221,76,26)" fg:x="130" fg:w="1"/><text x="10.7508%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.5008%" y="629" width="0.0808%" height="15" fill="rgb(225,139,18)" fg:x="130" fg:w="1"/><text x="10.7508%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5008%" y="613" width="0.0808%" height="15" fill="rgb(230,137,11)" fg:x="130" fg:w="1"/><text x="10.7508%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.5008%" y="597" width="0.0808%" height="15" fill="rgb(212,28,1)" fg:x="130" fg:w="1"/><text x="10.7508%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5008%" y="581" width="0.0808%" height="15" fill="rgb(248,164,17)" fg:x="130" fg:w="1"/><text x="10.7508%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.5008%" y="565" width="0.0808%" height="15" fill="rgb(222,171,42)" fg:x="130" fg:w="1"/><text x="10.7508%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.5008%" y="549" width="0.0808%" height="15" fill="rgb(243,84,45)" fg:x="130" fg:w="1"/><text x="10.7508%" y="559.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.5816%" y="693" width="0.0808%" height="15" fill="rgb(252,49,23)" fg:x="131" fg:w="1"/><text x="10.8316%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5816%" y="677" width="0.0808%" height="15" fill="rgb(215,19,7)" fg:x="131" fg:w="1"/><text x="10.8316%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.5816%" y="661" width="0.0808%" height="15" fill="rgb(238,81,41)" fg:x="131" fg:w="1"/><text x="10.8316%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.5816%" y="645" width="0.0808%" height="15" fill="rgb(210,199,37)" fg:x="131" fg:w="1"/><text x="10.8316%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5816%" y="629" width="0.0808%" height="15" fill="rgb(244,192,49)" fg:x="131" fg:w="1"/><text x="10.8316%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.5816%" y="613" width="0.0808%" height="15" fill="rgb(226,211,11)" fg:x="131" fg:w="1"/><text x="10.8316%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5816%" y="597" width="0.0808%" height="15" fill="rgb(236,162,54)" fg:x="131" fg:w="1"/><text x="10.8316%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (5 samples, 0.40%)</title><rect x="10.5008%" y="725" width="0.4039%" height="15" fill="rgb(220,229,9)" fg:x="130" fg:w="5"/><text x="10.7508%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="10.5008%" y="709" width="0.4039%" height="15" fill="rgb(250,87,22)" fg:x="130" fg:w="5"/><text x="10.7508%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="10.6624%" y="693" width="0.2423%" height="15" fill="rgb(239,43,17)" fg:x="132" fg:w="3"/><text x="10.9124%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="10.7431%" y="677" width="0.1616%" height="15" fill="rgb(231,177,25)" fg:x="133" fg:w="2"/><text x="10.9931%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="10.7431%" y="661" width="0.1616%" height="15" fill="rgb(219,179,1)" fg:x="133" fg:w="2"/><text x="10.9931%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.7431%" y="645" width="0.1616%" height="15" fill="rgb(238,219,53)" fg:x="133" fg:w="2"/><text x="10.9931%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.8239%" y="629" width="0.0808%" height="15" fill="rgb(232,167,36)" fg:x="134" fg:w="1"/><text x="11.0739%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8239%" y="613" width="0.0808%" height="15" fill="rgb(244,19,51)" fg:x="134" fg:w="1"/><text x="11.0739%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.8239%" y="597" width="0.0808%" height="15" fill="rgb(224,6,22)" fg:x="134" fg:w="1"/><text x="11.0739%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.9047%" y="709" width="0.0808%" height="15" fill="rgb(224,145,5)" fg:x="135" fg:w="1"/><text x="11.1547%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.9047%" y="693" width="0.0808%" height="15" fill="rgb(234,130,49)" fg:x="135" fg:w="1"/><text x="11.1547%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="10.9047%" y="677" width="0.0808%" height="15" fill="rgb(254,6,2)" fg:x="135" fg:w="1"/><text x="11.1547%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.9047%" y="661" width="0.0808%" height="15" fill="rgb(208,96,46)" fg:x="135" fg:w="1"/><text x="11.1547%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9855%" y="677" width="0.0808%" height="15" fill="rgb(239,3,39)" fg:x="136" fg:w="1"/><text x="11.2355%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="10.9855%" y="661" width="0.0808%" height="15" fill="rgb(233,210,1)" fg:x="136" fg:w="1"/><text x="11.2355%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="10.9855%" y="709" width="0.1616%" height="15" fill="rgb(244,137,37)" fg:x="136" fg:w="2"/><text x="11.2355%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="10.9855%" y="693" width="0.1616%" height="15" fill="rgb(240,136,2)" fg:x="136" fg:w="2"/><text x="11.2355%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.0662%" y="677" width="0.0808%" height="15" fill="rgb(239,18,37)" fg:x="137" fg:w="1"/><text x="11.3162%" y="687.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="11.0662%" y="661" width="0.0808%" height="15" fill="rgb(218,185,22)" fg:x="137" fg:w="1"/><text x="11.3162%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.0662%" y="645" width="0.0808%" height="15" fill="rgb(225,218,4)" fg:x="137" fg:w="1"/><text x="11.3162%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="11.0662%" y="629" width="0.0808%" height="15" fill="rgb(230,182,32)" fg:x="137" fg:w="1"/><text x="11.3162%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.1470%" y="581" width="0.0808%" height="15" fill="rgb(242,56,43)" fg:x="138" fg:w="1"/><text x="11.3970%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.1470%" y="565" width="0.0808%" height="15" fill="rgb(233,99,24)" fg:x="138" fg:w="1"/><text x="11.3970%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="11.1470%" y="709" width="0.1616%" height="15" fill="rgb(234,209,42)" fg:x="138" fg:w="2"/><text x="11.3970%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="11.1470%" y="693" width="0.1616%" height="15" fill="rgb(227,7,12)" fg:x="138" fg:w="2"/><text x="11.3970%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="11.1470%" y="677" width="0.1616%" height="15" fill="rgb(245,203,43)" fg:x="138" fg:w="2"/><text x="11.3970%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="11.1470%" y="661" width="0.1616%" height="15" fill="rgb(238,205,33)" fg:x="138" fg:w="2"/><text x="11.3970%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="11.1470%" y="645" width="0.1616%" height="15" fill="rgb(231,56,7)" fg:x="138" fg:w="2"/><text x="11.3970%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="11.1470%" y="629" width="0.1616%" height="15" fill="rgb(244,186,29)" fg:x="138" fg:w="2"/><text x="11.3970%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="11.1470%" y="613" width="0.1616%" height="15" fill="rgb(234,111,31)" fg:x="138" fg:w="2"/><text x="11.3970%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.1470%" y="597" width="0.1616%" height="15" fill="rgb(241,149,10)" fg:x="138" fg:w="2"/><text x="11.3970%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2278%" y="581" width="0.0808%" height="15" fill="rgb(249,206,44)" fg:x="139" fg:w="1"/><text x="11.4778%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="11.3086%" y="693" width="0.0808%" height="15" fill="rgb(251,153,30)" fg:x="140" fg:w="1"/><text x="11.5586%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3086%" y="677" width="0.0808%" height="15" fill="rgb(239,152,38)" fg:x="140" fg:w="1"/><text x="11.5586%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.4701%" y="645" width="0.0808%" height="15" fill="rgb(249,139,47)" fg:x="142" fg:w="1"/><text x="11.7201%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.4701%" y="629" width="0.0808%" height="15" fill="rgb(244,64,35)" fg:x="142" fg:w="1"/><text x="11.7201%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.4701%" y="613" width="0.0808%" height="15" fill="rgb(216,46,15)" fg:x="142" fg:w="1"/><text x="11.7201%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.4701%" y="597" width="0.0808%" height="15" fill="rgb(250,74,19)" fg:x="142" fg:w="1"/><text x="11.7201%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.6317%" y="565" width="0.0808%" height="15" fill="rgb(249,42,33)" fg:x="144" fg:w="1"/><text x="11.8817%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.6317%" y="549" width="0.0808%" height="15" fill="rgb(242,149,17)" fg:x="144" fg:w="1"/><text x="11.8817%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.6317%" y="533" width="0.0808%" height="15" fill="rgb(244,29,21)" fg:x="144" fg:w="1"/><text x="11.8817%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.6317%" y="517" width="0.0808%" height="15" fill="rgb(220,130,37)" fg:x="144" fg:w="1"/><text x="11.8817%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="11.6317%" y="581" width="0.1616%" height="15" fill="rgb(211,67,2)" fg:x="144" fg:w="2"/><text x="11.8817%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.7124%" y="565" width="0.0808%" height="15" fill="rgb(235,68,52)" fg:x="145" fg:w="1"/><text x="11.9624%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.7124%" y="549" width="0.0808%" height="15" fill="rgb(246,142,3)" fg:x="145" fg:w="1"/><text x="11.9624%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.7932%" y="565" width="0.0808%" height="15" fill="rgb(241,25,7)" fg:x="146" fg:w="1"/><text x="12.0432%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="11.8740%" y="565" width="0.3231%" height="15" fill="rgb(242,119,39)" fg:x="147" fg:w="4"/><text x="12.1240%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.1163%" y="549" width="0.0808%" height="15" fill="rgb(241,98,45)" fg:x="150" fg:w="1"/><text x="12.3663%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.1163%" y="533" width="0.0808%" height="15" fill="rgb(254,28,30)" fg:x="150" fg:w="1"/><text x="12.3663%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.1163%" y="517" width="0.0808%" height="15" fill="rgb(241,142,54)" fg:x="150" fg:w="1"/><text x="12.3663%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="12.1971%" y="549" width="0.1616%" height="15" fill="rgb(222,85,15)" fg:x="151" fg:w="2"/><text x="12.4471%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.2779%" y="533" width="0.0808%" height="15" fill="rgb(210,85,47)" fg:x="152" fg:w="1"/><text x="12.5279%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.2779%" y="517" width="0.0808%" height="15" fill="rgb(224,206,25)" fg:x="152" fg:w="1"/><text x="12.5279%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.2779%" y="501" width="0.0808%" height="15" fill="rgb(243,201,19)" fg:x="152" fg:w="1"/><text x="12.5279%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.2779%" y="485" width="0.0808%" height="15" fill="rgb(236,59,4)" fg:x="152" fg:w="1"/><text x="12.5279%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.2779%" y="469" width="0.0808%" height="15" fill="rgb(254,179,45)" fg:x="152" fg:w="1"/><text x="12.5279%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="12.2779%" y="453" width="0.0808%" height="15" fill="rgb(226,14,10)" fg:x="152" fg:w="1"/><text x="12.5279%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.3586%" y="501" width="0.0808%" height="15" fill="rgb(244,27,41)" fg:x="153" fg:w="1"/><text x="12.6086%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.3586%" y="549" width="0.1616%" height="15" fill="rgb(235,35,32)" fg:x="153" fg:w="2"/><text x="12.6086%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.3586%" y="533" width="0.1616%" height="15" fill="rgb(218,68,31)" fg:x="153" fg:w="2"/><text x="12.6086%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.3586%" y="517" width="0.1616%" height="15" fill="rgb(207,120,37)" fg:x="153" fg:w="2"/><text x="12.6086%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="12.4394%" y="501" width="0.0808%" height="15" fill="rgb(227,98,0)" fg:x="154" fg:w="1"/><text x="12.6894%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.6817%" y="533" width="0.1616%" height="15" fill="rgb(207,7,3)" fg:x="157" fg:w="2"/><text x="12.9317%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.6817%" y="517" width="0.1616%" height="15" fill="rgb(206,98,19)" fg:x="157" fg:w="2"/><text x="12.9317%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.7625%" y="501" width="0.0808%" height="15" fill="rgb(217,5,26)" fg:x="158" fg:w="1"/><text x="13.0125%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.7625%" y="485" width="0.0808%" height="15" fill="rgb(235,190,38)" fg:x="158" fg:w="1"/><text x="13.0125%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.7625%" y="469" width="0.0808%" height="15" fill="rgb(247,86,24)" fg:x="158" fg:w="1"/><text x="13.0125%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.7625%" y="453" width="0.0808%" height="15" fill="rgb(205,101,16)" fg:x="158" fg:w="1"/><text x="13.0125%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.7625%" y="437" width="0.0808%" height="15" fill="rgb(246,168,33)" fg:x="158" fg:w="1"/><text x="13.0125%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.8433%" y="517" width="0.0808%" height="15" fill="rgb(231,114,1)" fg:x="159" fg:w="1"/><text x="13.0933%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.8433%" y="501" width="0.0808%" height="15" fill="rgb(207,184,53)" fg:x="159" fg:w="1"/><text x="13.0933%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.8433%" y="485" width="0.0808%" height="15" fill="rgb(224,95,51)" fg:x="159" fg:w="1"/><text x="13.0933%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.8433%" y="469" width="0.0808%" height="15" fill="rgb(212,188,45)" fg:x="159" fg:w="1"/><text x="13.0933%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="12.8433%" y="533" width="0.1616%" height="15" fill="rgb(223,154,38)" fg:x="159" fg:w="2"/><text x="13.0933%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.9241%" y="517" width="0.0808%" height="15" fill="rgb(251,22,52)" fg:x="160" fg:w="1"/><text x="13.1741%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="12.1971%" y="565" width="0.9693%" height="15" fill="rgb(229,209,22)" fg:x="151" fg:w="12"/><text x="12.4471%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="12.5202%" y="549" width="0.6462%" height="15" fill="rgb(234,138,34)" fg:x="155" fg:w="8"/><text x="12.7702%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.0048%" y="533" width="0.1616%" height="15" fill="rgb(212,95,11)" fg:x="161" fg:w="2"/><text x="13.2548%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.0048%" y="517" width="0.1616%" height="15" fill="rgb(240,179,47)" fg:x="161" fg:w="2"/><text x="13.2548%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (23 samples, 1.86%)</title><rect x="11.6317%" y="597" width="1.8578%" height="15" fill="rgb(240,163,11)" fg:x="144" fg:w="23"/><text x="11.8817%" y="607.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (21 samples, 1.70%)</title><rect x="11.7932%" y="581" width="1.6963%" height="15" fill="rgb(236,37,12)" fg:x="146" fg:w="21"/><text x="12.0432%" y="591.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="13.1664%" y="565" width="0.3231%" height="15" fill="rgb(232,164,16)" fg:x="163" fg:w="4"/><text x="13.4164%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.4087%" y="549" width="0.0808%" height="15" fill="rgb(244,205,15)" fg:x="166" fg:w="1"/><text x="13.6587%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.4087%" y="533" width="0.0808%" height="15" fill="rgb(223,117,47)" fg:x="166" fg:w="1"/><text x="13.6587%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.4895%" y="565" width="0.0808%" height="15" fill="rgb(244,107,35)" fg:x="167" fg:w="1"/><text x="13.7395%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.5703%" y="549" width="0.0808%" height="15" fill="rgb(205,140,8)" fg:x="168" fg:w="1"/><text x="13.8203%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.6511%" y="549" width="0.0808%" height="15" fill="rgb(228,84,46)" fg:x="169" fg:w="1"/><text x="13.9011%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.7318%" y="533" width="0.0808%" height="15" fill="rgb(254,188,9)" fg:x="170" fg:w="1"/><text x="13.9818%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.8126%" y="533" width="0.0808%" height="15" fill="rgb(206,112,54)" fg:x="171" fg:w="1"/><text x="14.0626%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.8126%" y="517" width="0.0808%" height="15" fill="rgb(216,84,49)" fg:x="171" fg:w="1"/><text x="14.0626%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="13.4895%" y="597" width="0.4847%" height="15" fill="rgb(214,194,35)" fg:x="167" fg:w="6"/><text x="13.7395%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="13.4895%" y="581" width="0.4847%" height="15" fill="rgb(249,28,3)" fg:x="167" fg:w="6"/><text x="13.7395%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="13.5703%" y="565" width="0.4039%" height="15" fill="rgb(222,56,52)" fg:x="168" fg:w="5"/><text x="13.8203%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="13.7318%" y="549" width="0.2423%" height="15" fill="rgb(245,217,50)" fg:x="170" fg:w="3"/><text x="13.9818%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.8934%" y="533" width="0.0808%" height="15" fill="rgb(213,201,24)" fg:x="172" fg:w="1"/><text x="14.1434%" y="543.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="13.9742%" y="565" width="0.0808%" height="15" fill="rgb(248,116,28)" fg:x="173" fg:w="1"/><text x="14.2242%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="13.9742%" y="581" width="0.2423%" height="15" fill="rgb(219,72,43)" fg:x="173" fg:w="3"/><text x="14.2242%" y="591.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="14.0549%" y="565" width="0.1616%" height="15" fill="rgb(209,138,14)" fg:x="174" fg:w="2"/><text x="14.3049%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.1357%" y="549" width="0.0808%" height="15" fill="rgb(222,18,33)" fg:x="175" fg:w="1"/><text x="14.3857%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.1357%" y="533" width="0.0808%" height="15" fill="rgb(213,199,7)" fg:x="175" fg:w="1"/><text x="14.3857%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.1357%" y="517" width="0.0808%" height="15" fill="rgb(250,110,10)" fg:x="175" fg:w="1"/><text x="14.3857%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="14.2973%" y="565" width="0.0808%" height="15" fill="rgb(248,123,6)" fg:x="177" fg:w="1"/><text x="14.5473%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.3780%" y="549" width="0.1616%" height="15" fill="rgb(206,91,31)" fg:x="178" fg:w="2"/><text x="14.6280%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="14.5396%" y="549" width="0.0808%" height="15" fill="rgb(211,154,13)" fg:x="180" fg:w="1"/><text x="14.7896%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.5396%" y="533" width="0.0808%" height="15" fill="rgb(225,148,7)" fg:x="180" fg:w="1"/><text x="14.7896%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.6204%" y="517" width="0.0808%" height="15" fill="rgb(220,160,43)" fg:x="181" fg:w="1"/><text x="14.8704%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="15.0242%" y="453" width="0.0808%" height="15" fill="rgb(213,52,39)" fg:x="186" fg:w="1"/><text x="15.2742%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.1050%" y="453" width="0.0808%" height="15" fill="rgb(243,137,7)" fg:x="187" fg:w="1"/><text x="15.3550%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1050%" y="437" width="0.0808%" height="15" fill="rgb(230,79,13)" fg:x="187" fg:w="1"/><text x="15.3550%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.1050%" y="421" width="0.0808%" height="15" fill="rgb(247,105,23)" fg:x="187" fg:w="1"/><text x="15.3550%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="14.7011%" y="517" width="0.6462%" height="15" fill="rgb(223,179,41)" fg:x="182" fg:w="8"/><text x="14.9511%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.65%)</title><rect x="14.7011%" y="501" width="0.6462%" height="15" fill="rgb(218,9,34)" fg:x="182" fg:w="8"/><text x="14.9511%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="14.9435%" y="485" width="0.4039%" height="15" fill="rgb(222,106,8)" fg:x="185" fg:w="5"/><text x="15.1935%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="14.9435%" y="469" width="0.4039%" height="15" fill="rgb(211,220,0)" fg:x="185" fg:w="5"/><text x="15.1935%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.1858%" y="453" width="0.1616%" height="15" fill="rgb(229,52,16)" fg:x="188" fg:w="2"/><text x="15.4358%" y="463.50"></text></g><g><title>engine::session::Session::flush (51 samples, 4.12%)</title><rect x="11.3086%" y="709" width="4.1195%" height="15" fill="rgb(212,155,18)" fg:x="140" fg:w="51"/><text x="11.5586%" y="719.50">engi..</text></g><g><title>engine::session::Session::save_changes (50 samples, 4.04%)</title><rect x="11.3893%" y="693" width="4.0388%" height="15" fill="rgb(242,21,14)" fg:x="141" fg:w="50"/><text x="11.6393%" y="703.50">engi..</text></g><g><title>engine::session::state::State::close (50 samples, 4.04%)</title><rect x="11.3893%" y="677" width="4.0388%" height="15" fill="rgb(222,19,48)" fg:x="141" fg:w="50"/><text x="11.6393%" y="687.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (50 samples, 4.04%)</title><rect x="11.3893%" y="661" width="4.0388%" height="15" fill="rgb(232,45,27)" fg:x="141" fg:w="50"/><text x="11.6393%" y="671.50">engi..</text></g><g><title>core::iter::adapters::try_process (48 samples, 3.88%)</title><rect x="11.5509%" y="645" width="3.8772%" height="15" fill="rgb(249,103,42)" fg:x="143" fg:w="48"/><text x="11.8009%" y="655.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (48 samples, 3.88%)</title><rect x="11.5509%" y="629" width="3.8772%" height="15" fill="rgb(246,81,33)" fg:x="143" fg:w="48"/><text x="11.8009%" y="639.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (47 samples, 3.80%)</title><rect x="11.6317%" y="613" width="3.7964%" height="15" fill="rgb(252,33,42)" fg:x="144" fg:w="47"/><text x="11.8817%" y="623.50">engi..</text></g><g><title>kernel::model::any_entity_changes (18 samples, 1.45%)</title><rect x="13.9742%" y="597" width="1.4540%" height="15" fill="rgb(209,212,41)" fg:x="173" fg:w="18"/><text x="14.2242%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (15 samples, 1.21%)</title><rect x="14.2165%" y="581" width="1.2116%" height="15" fill="rgb(207,154,6)" fg:x="176" fg:w="15"/><text x="14.4665%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.05%)</title><rect x="14.3780%" y="565" width="1.0501%" height="15" fill="rgb(223,64,47)" fg:x="178" fg:w="13"/><text x="14.6280%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.81%)</title><rect x="14.6204%" y="549" width="0.8078%" height="15" fill="rgb(211,161,38)" fg:x="181" fg:w="10"/><text x="14.8704%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.81%)</title><rect x="14.6204%" y="533" width="0.8078%" height="15" fill="rgb(219,138,40)" fg:x="181" fg:w="10"/><text x="14.8704%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="15.3473%" y="517" width="0.0808%" height="15" fill="rgb(241,228,46)" fg:x="190" fg:w="1"/><text x="15.5973%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.3473%" y="501" width="0.0808%" height="15" fill="rgb(223,209,38)" fg:x="190" fg:w="1"/><text x="15.5973%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="15.4281%" y="709" width="0.0808%" height="15" fill="rgb(236,164,45)" fg:x="191" fg:w="1"/><text x="15.6781%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="15.4281%" y="693" width="0.0808%" height="15" fill="rgb(231,15,5)" fg:x="191" fg:w="1"/><text x="15.6781%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="15.4281%" y="677" width="0.0808%" height="15" fill="rgb(252,35,15)" fg:x="191" fg:w="1"/><text x="15.6781%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.4281%" y="661" width="0.0808%" height="15" fill="rgb(248,181,18)" fg:x="191" fg:w="1"/><text x="15.6781%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="15.4281%" y="645" width="0.0808%" height="15" fill="rgb(233,39,42)" fg:x="191" fg:w="1"/><text x="15.6781%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.4281%" y="629" width="0.0808%" height="15" fill="rgb(238,110,33)" fg:x="191" fg:w="1"/><text x="15.6781%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.5089%" y="661" width="0.0808%" height="15" fill="rgb(233,195,10)" fg:x="192" fg:w="1"/><text x="15.7589%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.5089%" y="645" width="0.0808%" height="15" fill="rgb(254,105,3)" fg:x="192" fg:w="1"/><text x="15.7589%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.5089%" y="629" width="0.0808%" height="15" fill="rgb(221,225,9)" fg:x="192" fg:w="1"/><text x="15.7589%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.5089%" y="613" width="0.0808%" height="15" fill="rgb(224,227,45)" fg:x="192" fg:w="1"/><text x="15.7589%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.5089%" y="597" width="0.0808%" height="15" fill="rgb(229,198,43)" fg:x="192" fg:w="1"/><text x="15.7589%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.5089%" y="581" width="0.0808%" height="15" fill="rgb(206,209,35)" fg:x="192" fg:w="1"/><text x="15.7589%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="15.5089%" y="565" width="0.0808%" height="15" fill="rgb(245,195,53)" fg:x="192" fg:w="1"/><text x="15.7589%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="15.5089%" y="549" width="0.0808%" height="15" fill="rgb(240,92,26)" fg:x="192" fg:w="1"/><text x="15.7589%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="15.5089%" y="693" width="0.1616%" height="15" fill="rgb(207,40,23)" fg:x="192" fg:w="2"/><text x="15.7589%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="15.5089%" y="677" width="0.1616%" height="15" fill="rgb(223,111,35)" fg:x="192" fg:w="2"/><text x="15.7589%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.5897%" y="661" width="0.0808%" height="15" fill="rgb(229,147,28)" fg:x="193" fg:w="1"/><text x="15.8397%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.5897%" y="645" width="0.0808%" height="15" fill="rgb(211,29,28)" fg:x="193" fg:w="1"/><text x="15.8397%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.5897%" y="629" width="0.0808%" height="15" fill="rgb(228,72,33)" fg:x="193" fg:w="1"/><text x="15.8397%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.5897%" y="613" width="0.0808%" height="15" fill="rgb(205,214,31)" fg:x="193" fg:w="1"/><text x="15.8397%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.5897%" y="597" width="0.0808%" height="15" fill="rgb(224,111,15)" fg:x="193" fg:w="1"/><text x="15.8397%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.5897%" y="581" width="0.0808%" height="15" fill="rgb(253,21,26)" fg:x="193" fg:w="1"/><text x="15.8397%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="15.6704%" y="661" width="0.0808%" height="15" fill="rgb(245,139,43)" fg:x="194" fg:w="1"/><text x="15.9204%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="15.6704%" y="645" width="0.0808%" height="15" fill="rgb(252,170,7)" fg:x="194" fg:w="1"/><text x="15.9204%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="15.6704%" y="629" width="0.0808%" height="15" fill="rgb(231,118,14)" fg:x="194" fg:w="1"/><text x="15.9204%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.6704%" y="613" width="0.0808%" height="15" fill="rgb(238,83,0)" fg:x="194" fg:w="1"/><text x="15.9204%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.6704%" y="597" width="0.0808%" height="15" fill="rgb(221,39,39)" fg:x="194" fg:w="1"/><text x="15.9204%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.6704%" y="581" width="0.0808%" height="15" fill="rgb(222,119,46)" fg:x="194" fg:w="1"/><text x="15.9204%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.6704%" y="565" width="0.0808%" height="15" fill="rgb(222,165,49)" fg:x="194" fg:w="1"/><text x="15.9204%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.6704%" y="549" width="0.0808%" height="15" fill="rgb(219,113,52)" fg:x="194" fg:w="1"/><text x="15.9204%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.6704%" y="533" width="0.0808%" height="15" fill="rgb(214,7,15)" fg:x="194" fg:w="1"/><text x="15.9204%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.6704%" y="517" width="0.0808%" height="15" fill="rgb(235,32,4)" fg:x="194" fg:w="1"/><text x="15.9204%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.6704%" y="501" width="0.0808%" height="15" fill="rgb(238,90,54)" fg:x="194" fg:w="1"/><text x="15.9204%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.6704%" y="485" width="0.0808%" height="15" fill="rgb(213,208,19)" fg:x="194" fg:w="1"/><text x="15.9204%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.6704%" y="469" width="0.0808%" height="15" fill="rgb(233,156,4)" fg:x="194" fg:w="1"/><text x="15.9204%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.6704%" y="453" width="0.0808%" height="15" fill="rgb(207,194,5)" fg:x="194" fg:w="1"/><text x="15.9204%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.6704%" y="437" width="0.0808%" height="15" fill="rgb(206,111,30)" fg:x="194" fg:w="1"/><text x="15.9204%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.6704%" y="421" width="0.0808%" height="15" fill="rgb(243,70,54)" fg:x="194" fg:w="1"/><text x="15.9204%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.6704%" y="405" width="0.0808%" height="15" fill="rgb(242,28,8)" fg:x="194" fg:w="1"/><text x="15.9204%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.6704%" y="389" width="0.0808%" height="15" fill="rgb(219,106,18)" fg:x="194" fg:w="1"/><text x="15.9204%" y="399.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="15.7512%" y="661" width="0.0808%" height="15" fill="rgb(244,222,10)" fg:x="195" fg:w="1"/><text x="16.0012%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.7512%" y="645" width="0.0808%" height="15" fill="rgb(236,179,52)" fg:x="195" fg:w="1"/><text x="16.0012%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="15.8320%" y="533" width="0.0808%" height="15" fill="rgb(213,23,39)" fg:x="196" fg:w="1"/><text x="16.0820%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="15.6704%" y="693" width="0.3231%" height="15" fill="rgb(238,48,10)" fg:x="194" fg:w="4"/><text x="15.9204%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="15.6704%" y="677" width="0.3231%" height="15" fill="rgb(251,196,23)" fg:x="194" fg:w="4"/><text x="15.9204%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="15.8320%" y="661" width="0.1616%" height="15" fill="rgb(250,152,24)" fg:x="196" fg:w="2"/><text x="16.0820%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="15.8320%" y="645" width="0.1616%" height="15" fill="rgb(209,150,17)" fg:x="196" fg:w="2"/><text x="16.0820%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="15.8320%" y="629" width="0.1616%" height="15" fill="rgb(234,202,34)" fg:x="196" fg:w="2"/><text x="16.0820%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="15.8320%" y="613" width="0.1616%" height="15" fill="rgb(253,148,53)" fg:x="196" fg:w="2"/><text x="16.0820%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="15.8320%" y="597" width="0.1616%" height="15" fill="rgb(218,129,16)" fg:x="196" fg:w="2"/><text x="16.0820%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.8320%" y="581" width="0.1616%" height="15" fill="rgb(216,85,19)" fg:x="196" fg:w="2"/><text x="16.0820%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="15.8320%" y="565" width="0.1616%" height="15" fill="rgb(235,228,7)" fg:x="196" fg:w="2"/><text x="16.0820%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.8320%" y="549" width="0.1616%" height="15" fill="rgb(245,175,0)" fg:x="196" fg:w="2"/><text x="16.0820%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.9128%" y="533" width="0.0808%" height="15" fill="rgb(208,168,36)" fg:x="197" fg:w="1"/><text x="16.1628%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.9128%" y="517" width="0.0808%" height="15" fill="rgb(246,171,24)" fg:x="197" fg:w="1"/><text x="16.1628%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9128%" y="501" width="0.0808%" height="15" fill="rgb(215,142,24)" fg:x="197" fg:w="1"/><text x="16.1628%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.57%)</title><rect x="15.5089%" y="709" width="0.5654%" height="15" fill="rgb(250,187,7)" fg:x="192" fg:w="7"/><text x="15.7589%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.9935%" y="693" width="0.0808%" height="15" fill="rgb(228,66,33)" fg:x="198" fg:w="1"/><text x="16.2435%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.9935%" y="677" width="0.0808%" height="15" fill="rgb(234,215,21)" fg:x="198" fg:w="1"/><text x="16.2435%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.9935%" y="661" width="0.0808%" height="15" fill="rgb(222,191,20)" fg:x="198" fg:w="1"/><text x="16.2435%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.9935%" y="645" width="0.0808%" height="15" fill="rgb(245,79,54)" fg:x="198" fg:w="1"/><text x="16.2435%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.0743%" y="677" width="0.0808%" height="15" fill="rgb(240,10,37)" fg:x="199" fg:w="1"/><text x="16.3243%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="16.0743%" y="661" width="0.0808%" height="15" fill="rgb(214,192,32)" fg:x="199" fg:w="1"/><text x="16.3243%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.0743%" y="645" width="0.0808%" height="15" fill="rgb(209,36,54)" fg:x="199" fg:w="1"/><text x="16.3243%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.0743%" y="629" width="0.0808%" height="15" fill="rgb(220,10,11)" fg:x="199" fg:w="1"/><text x="16.3243%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="16.0743%" y="709" width="0.1616%" height="15" fill="rgb(221,106,17)" fg:x="199" fg:w="2"/><text x="16.3243%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="16.0743%" y="693" width="0.1616%" height="15" fill="rgb(251,142,44)" fg:x="199" fg:w="2"/><text x="16.3243%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.1551%" y="677" width="0.0808%" height="15" fill="rgb(238,13,15)" fg:x="200" fg:w="1"/><text x="16.4051%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="16.1551%" y="661" width="0.0808%" height="15" fill="rgb(208,107,27)" fg:x="200" fg:w="1"/><text x="16.4051%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.1551%" y="645" width="0.0808%" height="15" fill="rgb(205,136,37)" fg:x="200" fg:w="1"/><text x="16.4051%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="16.1551%" y="629" width="0.0808%" height="15" fill="rgb(250,205,27)" fg:x="200" fg:w="1"/><text x="16.4051%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.2359%" y="677" width="0.0808%" height="15" fill="rgb(210,80,43)" fg:x="201" fg:w="1"/><text x="16.4859%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.3166%" y="645" width="0.0808%" height="15" fill="rgb(247,160,36)" fg:x="202" fg:w="1"/><text x="16.5666%" y="655.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="16.3166%" y="629" width="0.0808%" height="15" fill="rgb(234,13,49)" fg:x="202" fg:w="1"/><text x="16.5666%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="16.3974%" y="645" width="0.1616%" height="15" fill="rgb(234,122,0)" fg:x="203" fg:w="2"/><text x="16.6474%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="16.3974%" y="629" width="0.1616%" height="15" fill="rgb(207,146,38)" fg:x="203" fg:w="2"/><text x="16.6474%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.3974%" y="613" width="0.1616%" height="15" fill="rgb(207,177,25)" fg:x="203" fg:w="2"/><text x="16.6474%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4782%" y="597" width="0.0808%" height="15" fill="rgb(211,178,42)" fg:x="204" fg:w="1"/><text x="16.7282%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.4782%" y="581" width="0.0808%" height="15" fill="rgb(230,69,54)" fg:x="204" fg:w="1"/><text x="16.7282%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4782%" y="565" width="0.0808%" height="15" fill="rgb(214,135,41)" fg:x="204" fg:w="1"/><text x="16.7282%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.4782%" y="549" width="0.0808%" height="15" fill="rgb(237,67,25)" fg:x="204" fg:w="1"/><text x="16.7282%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="16.3166%" y="677" width="0.3231%" height="15" fill="rgb(222,189,50)" fg:x="202" fg:w="4"/><text x="16.5666%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="16.3166%" y="661" width="0.3231%" height="15" fill="rgb(245,148,34)" fg:x="202" fg:w="4"/><text x="16.5666%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5590%" y="645" width="0.0808%" height="15" fill="rgb(222,29,6)" fg:x="205" fg:w="1"/><text x="16.8090%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5590%" y="629" width="0.0808%" height="15" fill="rgb(221,189,43)" fg:x="205" fg:w="1"/><text x="16.8090%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.5590%" y="613" width="0.0808%" height="15" fill="rgb(207,36,27)" fg:x="205" fg:w="1"/><text x="16.8090%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.5590%" y="597" width="0.0808%" height="15" fill="rgb(217,90,24)" fg:x="205" fg:w="1"/><text x="16.8090%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.5590%" y="581" width="0.0808%" height="15" fill="rgb(224,66,35)" fg:x="205" fg:w="1"/><text x="16.8090%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.5590%" y="565" width="0.0808%" height="15" fill="rgb(221,13,50)" fg:x="205" fg:w="1"/><text x="16.8090%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.5590%" y="549" width="0.0808%" height="15" fill="rgb(236,68,49)" fg:x="205" fg:w="1"/><text x="16.8090%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.5590%" y="533" width="0.0808%" height="15" fill="rgb(229,146,28)" fg:x="205" fg:w="1"/><text x="16.8090%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.5590%" y="517" width="0.0808%" height="15" fill="rgb(225,31,38)" fg:x="205" fg:w="1"/><text x="16.8090%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.5590%" y="501" width="0.0808%" height="15" fill="rgb(250,208,3)" fg:x="205" fg:w="1"/><text x="16.8090%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.5590%" y="485" width="0.0808%" height="15" fill="rgb(246,54,23)" fg:x="205" fg:w="1"/><text x="16.8090%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5590%" y="469" width="0.0808%" height="15" fill="rgb(243,76,11)" fg:x="205" fg:w="1"/><text x="16.8090%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="16.6397%" y="661" width="0.1616%" height="15" fill="rgb(245,21,50)" fg:x="206" fg:w="2"/><text x="16.8897%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.6397%" y="645" width="0.1616%" height="15" fill="rgb(228,9,43)" fg:x="206" fg:w="2"/><text x="16.8897%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="16.6397%" y="629" width="0.1616%" height="15" fill="rgb(208,100,47)" fg:x="206" fg:w="2"/><text x="16.8897%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="16.6397%" y="613" width="0.1616%" height="15" fill="rgb(232,26,8)" fg:x="206" fg:w="2"/><text x="16.8897%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.7205%" y="597" width="0.0808%" height="15" fill="rgb(216,166,38)" fg:x="207" fg:w="1"/><text x="16.9705%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="16.8013%" y="661" width="0.0808%" height="15" fill="rgb(251,202,51)" fg:x="208" fg:w="1"/><text x="17.0513%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.8013%" y="645" width="0.0808%" height="15" fill="rgb(254,216,34)" fg:x="208" fg:w="1"/><text x="17.0513%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="16.8013%" y="629" width="0.0808%" height="15" fill="rgb(251,32,27)" fg:x="208" fg:w="1"/><text x="17.0513%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (10 samples, 0.81%)</title><rect x="16.2359%" y="709" width="0.8078%" height="15" fill="rgb(208,127,28)" fg:x="201" fg:w="10"/><text x="16.4859%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (10 samples, 0.81%)</title><rect x="16.2359%" y="693" width="0.8078%" height="15" fill="rgb(224,137,22)" fg:x="201" fg:w="10"/><text x="16.4859%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (5 samples, 0.40%)</title><rect x="16.6397%" y="677" width="0.4039%" height="15" fill="rgb(254,70,32)" fg:x="206" fg:w="5"/><text x="16.8897%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (2 samples, 0.16%)</title><rect x="16.8821%" y="661" width="0.1616%" height="15" fill="rgb(229,75,37)" fg:x="209" fg:w="2"/><text x="17.1321%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.8821%" y="645" width="0.1616%" height="15" fill="rgb(252,64,23)" fg:x="209" fg:w="2"/><text x="17.1321%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="16.9628%" y="629" width="0.0808%" height="15" fill="rgb(232,162,48)" fg:x="210" fg:w="1"/><text x="17.2128%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.9628%" y="613" width="0.0808%" height="15" fill="rgb(246,160,12)" fg:x="210" fg:w="1"/><text x="17.2128%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9628%" y="597" width="0.0808%" height="15" fill="rgb(247,166,0)" fg:x="210" fg:w="1"/><text x="17.2128%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="17.2052%" y="693" width="0.1616%" height="15" fill="rgb(249,219,21)" fg:x="213" fg:w="2"/><text x="17.4552%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="17.2052%" y="677" width="0.1616%" height="15" fill="rgb(205,209,3)" fg:x="213" fg:w="2"/><text x="17.4552%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.2052%" y="661" width="0.1616%" height="15" fill="rgb(243,44,1)" fg:x="213" fg:w="2"/><text x="17.4552%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.2859%" y="645" width="0.0808%" height="15" fill="rgb(206,159,16)" fg:x="214" fg:w="1"/><text x="17.5359%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.2859%" y="629" width="0.0808%" height="15" fill="rgb(244,77,30)" fg:x="214" fg:w="1"/><text x="17.5359%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="17.2859%" y="613" width="0.0808%" height="15" fill="rgb(218,69,12)" fg:x="214" fg:w="1"/><text x="17.5359%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="17.2859%" y="597" width="0.0808%" height="15" fill="rgb(212,87,7)" fg:x="214" fg:w="1"/><text x="17.5359%" y="607.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="17.2859%" y="581" width="0.0808%" height="15" fill="rgb(245,114,25)" fg:x="214" fg:w="1"/><text x="17.5359%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::SeqDeserializer as serde::de::SeqAccess&gt;::size_hint (1 samples, 0.08%)</title><rect x="17.2859%" y="565" width="0.0808%" height="15" fill="rgb(210,61,42)" fg:x="214" fg:w="1"/><text x="17.5359%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3667%" y="597" width="0.0808%" height="15" fill="rgb(211,52,33)" fg:x="215" fg:w="1"/><text x="17.6167%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (6 samples, 0.48%)</title><rect x="17.0436%" y="709" width="0.4847%" height="15" fill="rgb(234,58,33)" fg:x="211" fg:w="6"/><text x="17.2936%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="17.3667%" y="693" width="0.1616%" height="15" fill="rgb(220,115,36)" fg:x="215" fg:w="2"/><text x="17.6167%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="17.3667%" y="677" width="0.1616%" height="15" fill="rgb(243,153,54)" fg:x="215" fg:w="2"/><text x="17.6167%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="17.3667%" y="661" width="0.1616%" height="15" fill="rgb(251,47,18)" fg:x="215" fg:w="2"/><text x="17.6167%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="17.3667%" y="645" width="0.1616%" height="15" fill="rgb(242,102,42)" fg:x="215" fg:w="2"/><text x="17.6167%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="17.3667%" y="629" width="0.1616%" height="15" fill="rgb(234,31,38)" fg:x="215" fg:w="2"/><text x="17.6167%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="17.3667%" y="613" width="0.1616%" height="15" fill="rgb(221,117,51)" fg:x="215" fg:w="2"/><text x="17.6167%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4475%" y="597" width="0.0808%" height="15" fill="rgb(212,20,18)" fg:x="216" fg:w="1"/><text x="17.6975%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4475%" y="581" width="0.0808%" height="15" fill="rgb(245,133,36)" fg:x="216" fg:w="1"/><text x="17.6975%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.4475%" y="565" width="0.0808%" height="15" fill="rgb(212,6,19)" fg:x="216" fg:w="1"/><text x="17.6975%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="17.5283%" y="693" width="0.0808%" height="15" fill="rgb(218,1,36)" fg:x="217" fg:w="1"/><text x="17.7783%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="17.5283%" y="677" width="0.0808%" height="15" fill="rgb(246,84,54)" fg:x="217" fg:w="1"/><text x="17.7783%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="17.5283%" y="661" width="0.0808%" height="15" fill="rgb(242,110,6)" fg:x="217" fg:w="1"/><text x="17.7783%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.5283%" y="645" width="0.0808%" height="15" fill="rgb(214,47,5)" fg:x="217" fg:w="1"/><text x="17.7783%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.5283%" y="629" width="0.0808%" height="15" fill="rgb(218,159,25)" fg:x="217" fg:w="1"/><text x="17.7783%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5283%" y="613" width="0.0808%" height="15" fill="rgb(215,211,28)" fg:x="217" fg:w="1"/><text x="17.7783%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.5283%" y="597" width="0.0808%" height="15" fill="rgb(238,59,32)" fg:x="217" fg:w="1"/><text x="17.7783%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5283%" y="581" width="0.0808%" height="15" fill="rgb(226,82,3)" fg:x="217" fg:w="1"/><text x="17.7783%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.5283%" y="565" width="0.0808%" height="15" fill="rgb(240,164,32)" fg:x="217" fg:w="1"/><text x="17.7783%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5283%" y="549" width="0.0808%" height="15" fill="rgb(232,46,7)" fg:x="217" fg:w="1"/><text x="17.7783%" y="559.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="17.6090%" y="693" width="0.0808%" height="15" fill="rgb(229,129,53)" fg:x="218" fg:w="1"/><text x="17.8590%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="17.6090%" y="677" width="0.0808%" height="15" fill="rgb(234,188,29)" fg:x="218" fg:w="1"/><text x="17.8590%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="17.6090%" y="661" width="0.0808%" height="15" fill="rgb(246,141,4)" fg:x="218" fg:w="1"/><text x="17.8590%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="17.6090%" y="645" width="0.0808%" height="15" fill="rgb(229,23,39)" fg:x="218" fg:w="1"/><text x="17.8590%" y="655.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="17.6090%" y="629" width="0.0808%" height="15" fill="rgb(206,12,3)" fg:x="218" fg:w="1"/><text x="17.8590%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.6090%" y="613" width="0.0808%" height="15" fill="rgb(252,226,20)" fg:x="218" fg:w="1"/><text x="17.8590%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (85 samples, 6.87%)</title><rect x="10.9047%" y="725" width="6.8659%" height="15" fill="rgb(216,123,35)" fg:x="135" fg:w="85"/><text x="11.1547%" y="735.50">plugins_c..</text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="17.5283%" y="709" width="0.2423%" height="15" fill="rgb(212,68,40)" fg:x="217" fg:w="3"/><text x="17.7783%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="17.6898%" y="693" width="0.0808%" height="15" fill="rgb(254,125,32)" fg:x="219" fg:w="1"/><text x="17.9398%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.6898%" y="677" width="0.0808%" height="15" fill="rgb(253,97,22)" fg:x="219" fg:w="1"/><text x="17.9398%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6898%" y="661" width="0.0808%" height="15" fill="rgb(241,101,14)" fg:x="219" fg:w="1"/><text x="17.9398%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.6898%" y="645" width="0.0808%" height="15" fill="rgb(238,103,29)" fg:x="219" fg:w="1"/><text x="17.9398%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6898%" y="629" width="0.0808%" height="15" fill="rgb(233,195,47)" fg:x="219" fg:w="1"/><text x="17.9398%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.6898%" y="613" width="0.0808%" height="15" fill="rgb(246,218,30)" fg:x="219" fg:w="1"/><text x="17.9398%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6898%" y="597" width="0.0808%" height="15" fill="rgb(219,145,47)" fg:x="219" fg:w="1"/><text x="17.9398%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="17.7706%" y="693" width="0.0808%" height="15" fill="rgb(243,12,26)" fg:x="220" fg:w="1"/><text x="18.0206%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="17.7706%" y="677" width="0.0808%" height="15" fill="rgb(214,87,16)" fg:x="220" fg:w="1"/><text x="18.0206%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.7706%" y="661" width="0.0808%" height="15" fill="rgb(208,99,42)" fg:x="220" fg:w="1"/><text x="18.0206%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.8514%" y="661" width="0.0808%" height="15" fill="rgb(253,99,2)" fg:x="221" fg:w="1"/><text x="18.1014%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="17.8514%" y="677" width="0.1616%" height="15" fill="rgb(220,168,23)" fg:x="221" fg:w="2"/><text x="18.1014%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="17.9321%" y="661" width="0.0808%" height="15" fill="rgb(242,38,24)" fg:x="222" fg:w="1"/><text x="18.1821%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="18.0129%" y="661" width="0.0808%" height="15" fill="rgb(225,182,9)" fg:x="223" fg:w="1"/><text x="18.2629%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.0129%" y="645" width="0.0808%" height="15" fill="rgb(243,178,37)" fg:x="223" fg:w="1"/><text x="18.2629%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.0129%" y="629" width="0.0808%" height="15" fill="rgb(232,139,19)" fg:x="223" fg:w="1"/><text x="18.2629%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="18.0937%" y="661" width="0.0808%" height="15" fill="rgb(225,201,24)" fg:x="224" fg:w="1"/><text x="18.3437%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.0937%" y="645" width="0.0808%" height="15" fill="rgb(221,47,46)" fg:x="224" fg:w="1"/><text x="18.3437%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.0937%" y="629" width="0.0808%" height="15" fill="rgb(249,23,13)" fg:x="224" fg:w="1"/><text x="18.3437%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0937%" y="613" width="0.0808%" height="15" fill="rgb(219,9,5)" fg:x="224" fg:w="1"/><text x="18.3437%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="18.1745%" y="645" width="0.0808%" height="15" fill="rgb(254,171,16)" fg:x="225" fg:w="1"/><text x="18.4245%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="18.1745%" y="629" width="0.0808%" height="15" fill="rgb(230,171,20)" fg:x="225" fg:w="1"/><text x="18.4245%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.1745%" y="613" width="0.0808%" height="15" fill="rgb(210,71,41)" fg:x="225" fg:w="1"/><text x="18.4245%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="17.8514%" y="693" width="0.4847%" height="15" fill="rgb(206,173,20)" fg:x="221" fg:w="6"/><text x="18.1014%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="18.0129%" y="677" width="0.3231%" height="15" fill="rgb(233,88,34)" fg:x="223" fg:w="4"/><text x="18.2629%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="18.1745%" y="661" width="0.1616%" height="15" fill="rgb(223,209,46)" fg:x="225" fg:w="2"/><text x="18.4245%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2553%" y="645" width="0.0808%" height="15" fill="rgb(250,43,18)" fg:x="226" fg:w="1"/><text x="18.5053%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.2553%" y="629" width="0.0808%" height="15" fill="rgb(208,13,10)" fg:x="226" fg:w="1"/><text x="18.5053%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="18.2553%" y="613" width="0.0808%" height="15" fill="rgb(212,200,36)" fg:x="226" fg:w="1"/><text x="18.5053%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="18.2553%" y="597" width="0.0808%" height="15" fill="rgb(225,90,30)" fg:x="226" fg:w="1"/><text x="18.5053%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.2553%" y="581" width="0.0808%" height="15" fill="rgb(236,182,39)" fg:x="226" fg:w="1"/><text x="18.5053%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (8 samples, 0.65%)</title><rect x="17.7706%" y="725" width="0.6462%" height="15" fill="rgb(212,144,35)" fg:x="220" fg:w="8"/><text x="18.0206%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (8 samples, 0.65%)</title><rect x="17.7706%" y="709" width="0.6462%" height="15" fill="rgb(228,63,44)" fg:x="220" fg:w="8"/><text x="18.0206%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="18.3360%" y="693" width="0.0808%" height="15" fill="rgb(228,109,6)" fg:x="227" fg:w="1"/><text x="18.5860%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="18.4168%" y="693" width="0.0808%" height="15" fill="rgb(238,117,24)" fg:x="228" fg:w="1"/><text x="18.6668%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.4168%" y="677" width="0.0808%" height="15" fill="rgb(242,26,26)" fg:x="228" fg:w="1"/><text x="18.6668%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (3 samples, 0.24%)</title><rect x="18.4168%" y="709" width="0.2423%" height="15" fill="rgb(221,92,48)" fg:x="228" fg:w="3"/><text x="18.6668%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="18.4976%" y="693" width="0.1616%" height="15" fill="rgb(209,209,32)" fg:x="229" fg:w="2"/><text x="18.7476%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.4976%" y="677" width="0.1616%" height="15" fill="rgb(221,70,22)" fg:x="229" fg:w="2"/><text x="18.7476%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="18.4976%" y="661" width="0.1616%" height="15" fill="rgb(248,145,5)" fg:x="229" fg:w="2"/><text x="18.7476%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="18.4976%" y="645" width="0.1616%" height="15" fill="rgb(226,116,26)" fg:x="229" fg:w="2"/><text x="18.7476%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.5784%" y="629" width="0.0808%" height="15" fill="rgb(244,5,17)" fg:x="230" fg:w="1"/><text x="18.8284%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.6591%" y="709" width="0.0808%" height="15" fill="rgb(252,159,33)" fg:x="231" fg:w="1"/><text x="18.9091%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.6591%" y="693" width="0.0808%" height="15" fill="rgb(206,71,0)" fg:x="231" fg:w="1"/><text x="18.9091%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="18.6591%" y="677" width="0.0808%" height="15" fill="rgb(233,118,54)" fg:x="231" fg:w="1"/><text x="18.9091%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.6591%" y="661" width="0.0808%" height="15" fill="rgb(234,83,48)" fg:x="231" fg:w="1"/><text x="18.9091%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.6591%" y="645" width="0.0808%" height="15" fill="rgb(228,3,54)" fg:x="231" fg:w="1"/><text x="18.9091%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.6591%" y="629" width="0.0808%" height="15" fill="rgb(226,155,13)" fg:x="231" fg:w="1"/><text x="18.9091%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="18.7399%" y="709" width="0.0808%" height="15" fill="rgb(241,28,37)" fg:x="232" fg:w="1"/><text x="18.9899%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.7399%" y="693" width="0.0808%" height="15" fill="rgb(233,93,10)" fg:x="232" fg:w="1"/><text x="18.9899%" y="703.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="18.8207%" y="709" width="0.0808%" height="15" fill="rgb(225,113,19)" fg:x="233" fg:w="1"/><text x="19.0707%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="18.8207%" y="693" width="0.0808%" height="15" fill="rgb(241,2,18)" fg:x="233" fg:w="1"/><text x="19.0707%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="18.8207%" y="677" width="0.0808%" height="15" fill="rgb(228,207,21)" fg:x="233" fg:w="1"/><text x="19.0707%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="18.8207%" y="661" width="0.0808%" height="15" fill="rgb(213,211,35)" fg:x="233" fg:w="1"/><text x="19.0707%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="18.8207%" y="645" width="0.0808%" height="15" fill="rgb(209,83,10)" fg:x="233" fg:w="1"/><text x="19.0707%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="18.8207%" y="629" width="0.0808%" height="15" fill="rgb(209,164,1)" fg:x="233" fg:w="1"/><text x="19.0707%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="18.8207%" y="613" width="0.0808%" height="15" fill="rgb(213,184,43)" fg:x="233" fg:w="1"/><text x="19.0707%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.8207%" y="597" width="0.0808%" height="15" fill="rgb(231,61,34)" fg:x="233" fg:w="1"/><text x="19.0707%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.8207%" y="581" width="0.0808%" height="15" fill="rgb(235,75,3)" fg:x="233" fg:w="1"/><text x="19.0707%" y="591.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="18.8207%" y="565" width="0.0808%" height="15" fill="rgb(220,106,47)" fg:x="233" fg:w="1"/><text x="19.0707%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="18.8207%" y="549" width="0.0808%" height="15" fill="rgb(210,196,33)" fg:x="233" fg:w="1"/><text x="19.0707%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="18.8207%" y="533" width="0.0808%" height="15" fill="rgb(229,154,42)" fg:x="233" fg:w="1"/><text x="19.0707%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="18.8207%" y="517" width="0.0808%" height="15" fill="rgb(228,114,26)" fg:x="233" fg:w="1"/><text x="19.0707%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.8207%" y="501" width="0.0808%" height="15" fill="rgb(208,144,1)" fg:x="233" fg:w="1"/><text x="19.0707%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.9015%" y="613" width="0.0808%" height="15" fill="rgb(239,112,37)" fg:x="234" fg:w="1"/><text x="19.1515%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.9015%" y="597" width="0.0808%" height="15" fill="rgb(210,96,50)" fg:x="234" fg:w="1"/><text x="19.1515%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.9015%" y="581" width="0.0808%" height="15" fill="rgb(222,178,2)" fg:x="234" fg:w="1"/><text x="19.1515%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.9015%" y="565" width="0.0808%" height="15" fill="rgb(226,74,18)" fg:x="234" fg:w="1"/><text x="19.1515%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.9015%" y="549" width="0.0808%" height="15" fill="rgb(225,67,54)" fg:x="234" fg:w="1"/><text x="19.1515%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.9015%" y="533" width="0.0808%" height="15" fill="rgb(251,92,32)" fg:x="234" fg:w="1"/><text x="19.1515%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.9015%" y="517" width="0.0808%" height="15" fill="rgb(228,149,22)" fg:x="234" fg:w="1"/><text x="19.1515%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.9015%" y="501" width="0.0808%" height="15" fill="rgb(243,54,13)" fg:x="234" fg:w="1"/><text x="19.1515%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.9015%" y="485" width="0.0808%" height="15" fill="rgb(243,180,28)" fg:x="234" fg:w="1"/><text x="19.1515%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.9015%" y="469" width="0.0808%" height="15" fill="rgb(208,167,24)" fg:x="234" fg:w="1"/><text x="19.1515%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.9015%" y="453" width="0.0808%" height="15" fill="rgb(245,73,45)" fg:x="234" fg:w="1"/><text x="19.1515%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9015%" y="437" width="0.0808%" height="15" fill="rgb(237,203,48)" fg:x="234" fg:w="1"/><text x="19.1515%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.9015%" y="661" width="0.1616%" height="15" fill="rgb(211,197,16)" fg:x="234" fg:w="2"/><text x="19.1515%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.9015%" y="645" width="0.1616%" height="15" fill="rgb(243,99,51)" fg:x="234" fg:w="2"/><text x="19.1515%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.9015%" y="629" width="0.1616%" height="15" fill="rgb(215,123,29)" fg:x="234" fg:w="2"/><text x="19.1515%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9822%" y="613" width="0.0808%" height="15" fill="rgb(239,186,37)" fg:x="235" fg:w="1"/><text x="19.2322%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="18.9015%" y="693" width="0.2423%" height="15" fill="rgb(252,136,39)" fg:x="234" fg:w="3"/><text x="19.1515%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="18.9015%" y="677" width="0.2423%" height="15" fill="rgb(223,213,32)" fg:x="234" fg:w="3"/><text x="19.1515%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.0630%" y="661" width="0.0808%" height="15" fill="rgb(233,115,5)" fg:x="236" fg:w="1"/><text x="19.3130%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.0630%" y="645" width="0.0808%" height="15" fill="rgb(207,226,44)" fg:x="236" fg:w="1"/><text x="19.3130%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.0630%" y="629" width="0.0808%" height="15" fill="rgb(208,126,0)" fg:x="236" fg:w="1"/><text x="19.3130%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.0630%" y="613" width="0.0808%" height="15" fill="rgb(244,66,21)" fg:x="236" fg:w="1"/><text x="19.3130%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="19.1438%" y="661" width="0.0808%" height="15" fill="rgb(222,97,12)" fg:x="237" fg:w="1"/><text x="19.3938%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="19.1438%" y="645" width="0.0808%" height="15" fill="rgb(219,213,19)" fg:x="237" fg:w="1"/><text x="19.3938%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="19.1438%" y="629" width="0.0808%" height="15" fill="rgb(252,169,30)" fg:x="237" fg:w="1"/><text x="19.3938%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="19.1438%" y="613" width="0.0808%" height="15" fill="rgb(206,32,51)" fg:x="237" fg:w="1"/><text x="19.3938%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="19.1438%" y="597" width="0.0808%" height="15" fill="rgb(250,172,42)" fg:x="237" fg:w="1"/><text x="19.3938%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.1438%" y="581" width="0.0808%" height="15" fill="rgb(209,34,43)" fg:x="237" fg:w="1"/><text x="19.3938%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.1438%" y="565" width="0.0808%" height="15" fill="rgb(223,11,35)" fg:x="237" fg:w="1"/><text x="19.3938%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="19.2246%" y="661" width="0.0808%" height="15" fill="rgb(251,219,26)" fg:x="238" fg:w="1"/><text x="19.4746%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="19.1438%" y="693" width="0.2423%" height="15" fill="rgb(231,119,3)" fg:x="237" fg:w="3"/><text x="19.3938%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="19.1438%" y="677" width="0.2423%" height="15" fill="rgb(216,97,11)" fg:x="237" fg:w="3"/><text x="19.3938%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="19.3053%" y="661" width="0.0808%" height="15" fill="rgb(223,59,9)" fg:x="239" fg:w="1"/><text x="19.5553%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.3053%" y="645" width="0.0808%" height="15" fill="rgb(233,93,31)" fg:x="239" fg:w="1"/><text x="19.5553%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="19.3053%" y="629" width="0.0808%" height="15" fill="rgb(239,81,33)" fg:x="239" fg:w="1"/><text x="19.5553%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.3053%" y="613" width="0.0808%" height="15" fill="rgb(213,120,34)" fg:x="239" fg:w="1"/><text x="19.5553%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (172 samples, 13.89%)</title><rect x="5.6543%" y="741" width="13.8934%" height="15" fill="rgb(243,49,53)" fg:x="70" fg:w="172"/><text x="5.9043%" y="751.50">&lt;tests::HoldingKeyInV..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (14 samples, 1.13%)</title><rect x="18.4168%" y="725" width="1.1309%" height="15" fill="rgb(247,216,33)" fg:x="228" fg:w="14"/><text x="18.6668%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.65%)</title><rect x="18.9015%" y="709" width="0.6462%" height="15" fill="rgb(226,26,14)" fg:x="234" fg:w="8"/><text x="19.1515%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="19.3861%" y="693" width="0.1616%" height="15" fill="rgb(215,49,53)" fg:x="240" fg:w="2"/><text x="19.6361%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.3861%" y="677" width="0.1616%" height="15" fill="rgb(245,162,40)" fg:x="240" fg:w="2"/><text x="19.6361%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.3861%" y="661" width="0.1616%" height="15" fill="rgb(229,68,17)" fg:x="240" fg:w="2"/><text x="19.6361%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.3861%" y="645" width="0.1616%" height="15" fill="rgb(213,182,10)" fg:x="240" fg:w="2"/><text x="19.6361%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.4669%" y="629" width="0.0808%" height="15" fill="rgb(245,125,30)" fg:x="241" fg:w="1"/><text x="19.7169%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.4669%" y="613" width="0.0808%" height="15" fill="rgb(232,202,2)" fg:x="241" fg:w="1"/><text x="19.7169%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.4669%" y="597" width="0.0808%" height="15" fill="rgb(237,140,51)" fg:x="241" fg:w="1"/><text x="19.7169%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.4669%" y="581" width="0.0808%" height="15" fill="rgb(236,157,25)" fg:x="241" fg:w="1"/><text x="19.7169%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.4669%" y="565" width="0.0808%" height="15" fill="rgb(219,209,0)" fg:x="241" fg:w="1"/><text x="19.7169%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.4669%" y="549" width="0.0808%" height="15" fill="rgb(240,116,54)" fg:x="241" fg:w="1"/><text x="19.7169%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.4669%" y="533" width="0.0808%" height="15" fill="rgb(216,10,36)" fg:x="241" fg:w="1"/><text x="19.7169%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.4669%" y="517" width="0.0808%" height="15" fill="rgb(222,72,44)" fg:x="241" fg:w="1"/><text x="19.7169%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.4669%" y="501" width="0.0808%" height="15" fill="rgb(232,159,9)" fg:x="241" fg:w="1"/><text x="19.7169%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.4669%" y="485" width="0.0808%" height="15" fill="rgb(210,39,32)" fg:x="241" fg:w="1"/><text x="19.7169%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.4669%" y="469" width="0.0808%" height="15" fill="rgb(216,194,45)" fg:x="241" fg:w="1"/><text x="19.7169%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.4669%" y="453" width="0.0808%" height="15" fill="rgb(218,18,35)" fg:x="241" fg:w="1"/><text x="19.7169%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="19.5477%" y="741" width="0.0808%" height="15" fill="rgb(207,83,51)" fg:x="242" fg:w="1"/><text x="19.7977%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.5477%" y="725" width="0.0808%" height="15" fill="rgb(225,63,43)" fg:x="242" fg:w="1"/><text x="19.7977%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="19.6284%" y="725" width="0.0808%" height="15" fill="rgb(207,57,36)" fg:x="243" fg:w="1"/><text x="19.8784%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="19.6284%" y="709" width="0.0808%" height="15" fill="rgb(216,99,33)" fg:x="243" fg:w="1"/><text x="19.8784%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="19.6284%" y="693" width="0.0808%" height="15" fill="rgb(225,42,16)" fg:x="243" fg:w="1"/><text x="19.8784%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="19.6284%" y="677" width="0.0808%" height="15" fill="rgb(220,201,45)" fg:x="243" fg:w="1"/><text x="19.8784%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.08%)</title><rect x="19.6284%" y="661" width="0.0808%" height="15" fill="rgb(225,33,4)" fg:x="243" fg:w="1"/><text x="19.8784%" y="671.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="19.7092%" y="725" width="0.0808%" height="15" fill="rgb(224,33,50)" fg:x="244" fg:w="1"/><text x="19.9592%" y="735.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="19.7092%" y="709" width="0.0808%" height="15" fill="rgb(246,198,51)" fg:x="244" fg:w="1"/><text x="19.9592%" y="719.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="19.7092%" y="693" width="0.0808%" height="15" fill="rgb(205,22,4)" fg:x="244" fg:w="1"/><text x="19.9592%" y="703.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="19.7092%" y="677" width="0.0808%" height="15" fill="rgb(206,3,8)" fg:x="244" fg:w="1"/><text x="19.9592%" y="687.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="19.7092%" y="661" width="0.0808%" height="15" fill="rgb(251,23,15)" fg:x="244" fg:w="1"/><text x="19.9592%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="19.7092%" y="645" width="0.0808%" height="15" fill="rgb(252,88,28)" fg:x="244" fg:w="1"/><text x="19.9592%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="19.7092%" y="629" width="0.0808%" height="15" fill="rgb(212,127,14)" fg:x="244" fg:w="1"/><text x="19.9592%" y="639.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="19.7092%" y="613" width="0.0808%" height="15" fill="rgb(247,145,37)" fg:x="244" fg:w="1"/><text x="19.9592%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="19.7900%" y="693" width="0.0808%" height="15" fill="rgb(209,117,53)" fg:x="245" fg:w="1"/><text x="20.0400%" y="703.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="19.8708%" y="693" width="0.0808%" height="15" fill="rgb(212,90,42)" fg:x="246" fg:w="1"/><text x="20.1208%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="19.8708%" y="677" width="0.0808%" height="15" fill="rgb(218,164,37)" fg:x="246" fg:w="1"/><text x="20.1208%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="19.8708%" y="661" width="0.0808%" height="15" fill="rgb(246,65,34)" fg:x="246" fg:w="1"/><text x="20.1208%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.8708%" y="645" width="0.0808%" height="15" fill="rgb(231,100,33)" fg:x="246" fg:w="1"/><text x="20.1208%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.8708%" y="629" width="0.0808%" height="15" fill="rgb(228,126,14)" fg:x="246" fg:w="1"/><text x="20.1208%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.8708%" y="613" width="0.0808%" height="15" fill="rgb(215,173,21)" fg:x="246" fg:w="1"/><text x="20.1208%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.8708%" y="597" width="0.0808%" height="15" fill="rgb(210,6,40)" fg:x="246" fg:w="1"/><text x="20.1208%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.8708%" y="581" width="0.0808%" height="15" fill="rgb(212,48,18)" fg:x="246" fg:w="1"/><text x="20.1208%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="19.8708%" y="565" width="0.0808%" height="15" fill="rgb(230,214,11)" fg:x="246" fg:w="1"/><text x="20.1208%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="19.8708%" y="549" width="0.0808%" height="15" fill="rgb(254,105,39)" fg:x="246" fg:w="1"/><text x="20.1208%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="19.9515%" y="645" width="0.0808%" height="15" fill="rgb(245,158,5)" fg:x="247" fg:w="1"/><text x="20.2015%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="19.9515%" y="629" width="0.0808%" height="15" fill="rgb(249,208,11)" fg:x="247" fg:w="1"/><text x="20.2015%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="20.1131%" y="613" width="0.1616%" height="15" fill="rgb(210,39,28)" fg:x="249" fg:w="2"/><text x="20.3631%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.1131%" y="597" width="0.1616%" height="15" fill="rgb(211,56,53)" fg:x="249" fg:w="2"/><text x="20.3631%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="20.2746%" y="597" width="0.0808%" height="15" fill="rgb(226,201,30)" fg:x="251" fg:w="1"/><text x="20.5246%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="20.2746%" y="581" width="0.0808%" height="15" fill="rgb(239,101,34)" fg:x="251" fg:w="1"/><text x="20.5246%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="20.2746%" y="565" width="0.0808%" height="15" fill="rgb(226,209,5)" fg:x="251" fg:w="1"/><text x="20.5246%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.2746%" y="549" width="0.0808%" height="15" fill="rgb(250,105,47)" fg:x="251" fg:w="1"/><text x="20.5246%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.2746%" y="533" width="0.0808%" height="15" fill="rgb(230,72,3)" fg:x="251" fg:w="1"/><text x="20.5246%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="20.3554%" y="597" width="0.1616%" height="15" fill="rgb(232,218,39)" fg:x="252" fg:w="2"/><text x="20.6054%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.4362%" y="581" width="0.0808%" height="15" fill="rgb(248,166,6)" fg:x="253" fg:w="1"/><text x="20.6862%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.4362%" y="565" width="0.0808%" height="15" fill="rgb(247,89,20)" fg:x="253" fg:w="1"/><text x="20.6862%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.4362%" y="549" width="0.0808%" height="15" fill="rgb(248,130,54)" fg:x="253" fg:w="1"/><text x="20.6862%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="20.5977%" y="581" width="0.1616%" height="15" fill="rgb(234,196,4)" fg:x="255" fg:w="2"/><text x="20.8477%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.5977%" y="565" width="0.1616%" height="15" fill="rgb(250,143,31)" fg:x="255" fg:w="2"/><text x="20.8477%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.6785%" y="549" width="0.0808%" height="15" fill="rgb(211,110,34)" fg:x="256" fg:w="1"/><text x="20.9285%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.6785%" y="533" width="0.0808%" height="15" fill="rgb(215,124,48)" fg:x="256" fg:w="1"/><text x="20.9285%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="20.2746%" y="613" width="0.5654%" height="15" fill="rgb(216,46,13)" fg:x="251" fg:w="7"/><text x="20.5246%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="20.5170%" y="597" width="0.3231%" height="15" fill="rgb(205,184,25)" fg:x="254" fg:w="4"/><text x="20.7670%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.7593%" y="581" width="0.0808%" height="15" fill="rgb(228,1,10)" fg:x="257" fg:w="1"/><text x="21.0093%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.97%)</title><rect x="20.0323%" y="645" width="0.9693%" height="15" fill="rgb(213,116,27)" fg:x="248" fg:w="12"/><text x="20.2823%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="20.1131%" y="629" width="0.8885%" height="15" fill="rgb(241,95,50)" fg:x="249" fg:w="11"/><text x="20.3631%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.8401%" y="613" width="0.1616%" height="15" fill="rgb(238,48,32)" fg:x="258" fg:w="2"/><text x="21.0901%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="20.8401%" y="597" width="0.1616%" height="15" fill="rgb(235,113,49)" fg:x="258" fg:w="2"/><text x="21.0901%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="20.8401%" y="581" width="0.1616%" height="15" fill="rgb(205,127,43)" fg:x="258" fg:w="2"/><text x="21.0901%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.9208%" y="565" width="0.0808%" height="15" fill="rgb(250,162,2)" fg:x="259" fg:w="1"/><text x="21.1708%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.9208%" y="549" width="0.0808%" height="15" fill="rgb(220,13,41)" fg:x="259" fg:w="1"/><text x="21.1708%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.9208%" y="533" width="0.0808%" height="15" fill="rgb(249,221,25)" fg:x="259" fg:w="1"/><text x="21.1708%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.0824%" y="613" width="0.0808%" height="15" fill="rgb(215,208,19)" fg:x="261" fg:w="1"/><text x="21.3324%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.1632%" y="565" width="0.0808%" height="15" fill="rgb(236,175,2)" fg:x="262" fg:w="1"/><text x="21.4132%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.2439%" y="565" width="0.0808%" height="15" fill="rgb(241,52,2)" fg:x="263" fg:w="1"/><text x="21.4939%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.2439%" y="549" width="0.0808%" height="15" fill="rgb(248,140,14)" fg:x="263" fg:w="1"/><text x="21.4939%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="21.0016%" y="645" width="0.4039%" height="15" fill="rgb(253,22,42)" fg:x="260" fg:w="5"/><text x="21.2516%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="21.0016%" y="629" width="0.4039%" height="15" fill="rgb(234,61,47)" fg:x="260" fg:w="5"/><text x="21.2516%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="21.1632%" y="613" width="0.2423%" height="15" fill="rgb(208,226,15)" fg:x="262" fg:w="3"/><text x="21.4132%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="21.1632%" y="597" width="0.2423%" height="15" fill="rgb(217,221,4)" fg:x="262" fg:w="3"/><text x="21.4132%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="21.1632%" y="581" width="0.2423%" height="15" fill="rgb(212,174,34)" fg:x="262" fg:w="3"/><text x="21.4132%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="21.3247%" y="565" width="0.0808%" height="15" fill="rgb(253,83,4)" fg:x="264" fg:w="1"/><text x="21.5747%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="21.3247%" y="549" width="0.0808%" height="15" fill="rgb(250,195,49)" fg:x="264" fg:w="1"/><text x="21.5747%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.3247%" y="533" width="0.0808%" height="15" fill="rgb(241,192,25)" fg:x="264" fg:w="1"/><text x="21.5747%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="21.4055%" y="597" width="0.1616%" height="15" fill="rgb(208,124,10)" fg:x="265" fg:w="2"/><text x="21.6555%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.6478%" y="581" width="0.0808%" height="15" fill="rgb(222,33,0)" fg:x="268" fg:w="1"/><text x="21.8978%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.7286%" y="565" width="0.0808%" height="15" fill="rgb(234,209,28)" fg:x="269" fg:w="1"/><text x="21.9786%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.8094%" y="549" width="0.0808%" height="15" fill="rgb(224,11,23)" fg:x="270" fg:w="1"/><text x="22.0594%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.9709%" y="517" width="0.0808%" height="15" fill="rgb(232,99,1)" fg:x="272" fg:w="1"/><text x="22.2209%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="21.8901%" y="549" width="0.2423%" height="15" fill="rgb(237,95,45)" fg:x="271" fg:w="3"/><text x="22.1401%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="21.9709%" y="533" width="0.1616%" height="15" fill="rgb(208,109,11)" fg:x="272" fg:w="2"/><text x="22.2209%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.0517%" y="517" width="0.0808%" height="15" fill="rgb(216,190,48)" fg:x="273" fg:w="1"/><text x="22.3017%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.81%)</title><rect x="21.4055%" y="613" width="0.8078%" height="15" fill="rgb(251,171,36)" fg:x="265" fg:w="10"/><text x="21.6555%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="21.5670%" y="597" width="0.6462%" height="15" fill="rgb(230,62,22)" fg:x="267" fg:w="8"/><text x="21.8170%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="21.7286%" y="581" width="0.4847%" height="15" fill="rgb(225,114,35)" fg:x="269" fg:w="6"/><text x="21.9786%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="21.8094%" y="565" width="0.4039%" height="15" fill="rgb(215,118,42)" fg:x="270" fg:w="5"/><text x="22.0594%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="22.1325%" y="549" width="0.0808%" height="15" fill="rgb(243,119,21)" fg:x="274" fg:w="1"/><text x="22.3825%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.1325%" y="533" width="0.0808%" height="15" fill="rgb(252,177,53)" fg:x="274" fg:w="1"/><text x="22.3825%" y="543.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="22.2132%" y="613" width="0.0808%" height="15" fill="rgb(237,209,29)" fg:x="275" fg:w="1"/><text x="22.4632%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="22.2132%" y="597" width="0.0808%" height="15" fill="rgb(212,65,23)" fg:x="275" fg:w="1"/><text x="22.4632%" y="607.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.2132%" y="581" width="0.0808%" height="15" fill="rgb(230,222,46)" fg:x="275" fg:w="1"/><text x="22.4632%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="22.6171%" y="549" width="0.0808%" height="15" fill="rgb(215,135,32)" fg:x="280" fg:w="1"/><text x="22.8671%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="22.6171%" y="533" width="0.0808%" height="15" fill="rgb(246,101,22)" fg:x="280" fg:w="1"/><text x="22.8671%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.6171%" y="517" width="0.0808%" height="15" fill="rgb(206,107,13)" fg:x="280" fg:w="1"/><text x="22.8671%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="22.6979%" y="549" width="0.0808%" height="15" fill="rgb(250,100,44)" fg:x="281" fg:w="1"/><text x="22.9479%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.6979%" y="533" width="0.0808%" height="15" fill="rgb(231,147,38)" fg:x="281" fg:w="1"/><text x="22.9479%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (18 samples, 1.45%)</title><rect x="21.4055%" y="629" width="1.4540%" height="15" fill="rgb(229,8,40)" fg:x="265" fg:w="18"/><text x="21.6555%" y="639.50"></text></g><g><title>treediff::diff::diff (7 samples, 0.57%)</title><rect x="22.2940%" y="613" width="0.5654%" height="15" fill="rgb(221,135,30)" fg:x="276" fg:w="7"/><text x="22.5440%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (7 samples, 0.57%)</title><rect x="22.2940%" y="597" width="0.5654%" height="15" fill="rgb(249,193,18)" fg:x="276" fg:w="7"/><text x="22.5440%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.40%)</title><rect x="22.4556%" y="581" width="0.4039%" height="15" fill="rgb(209,133,39)" fg:x="278" fg:w="5"/><text x="22.7056%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="22.5363%" y="565" width="0.3231%" height="15" fill="rgb(232,100,14)" fg:x="279" fg:w="4"/><text x="22.7863%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.7787%" y="549" width="0.0808%" height="15" fill="rgb(224,185,1)" fg:x="282" fg:w="1"/><text x="23.0287%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.0210%" y="597" width="0.1616%" height="15" fill="rgb(223,139,8)" fg:x="285" fg:w="2"/><text x="23.2710%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="23.1826%" y="597" width="0.1616%" height="15" fill="rgb(232,213,38)" fg:x="287" fg:w="2"/><text x="23.4326%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.2633%" y="581" width="0.0808%" height="15" fill="rgb(207,94,22)" fg:x="288" fg:w="1"/><text x="23.5133%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="23.3441%" y="597" width="0.1616%" height="15" fill="rgb(219,183,54)" fg:x="289" fg:w="2"/><text x="23.5941%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.4249%" y="581" width="0.0808%" height="15" fill="rgb(216,185,54)" fg:x="290" fg:w="1"/><text x="23.6749%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.4249%" y="565" width="0.0808%" height="15" fill="rgb(254,217,39)" fg:x="290" fg:w="1"/><text x="23.6749%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="24.0711%" y="549" width="0.1616%" height="15" fill="rgb(240,178,23)" fg:x="298" fg:w="2"/><text x="24.3211%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.1519%" y="533" width="0.0808%" height="15" fill="rgb(218,11,47)" fg:x="299" fg:w="1"/><text x="24.4019%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="24.3134%" y="501" width="0.1616%" height="15" fill="rgb(218,51,51)" fg:x="301" fg:w="2"/><text x="24.5634%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="24.3942%" y="485" width="0.0808%" height="15" fill="rgb(238,126,27)" fg:x="302" fg:w="1"/><text x="24.6442%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.4750%" y="485" width="0.1616%" height="15" fill="rgb(249,202,22)" fg:x="303" fg:w="2"/><text x="24.7250%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="24.4750%" y="469" width="0.1616%" height="15" fill="rgb(254,195,49)" fg:x="303" fg:w="2"/><text x="24.7250%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.4750%" y="453" width="0.1616%" height="15" fill="rgb(208,123,14)" fg:x="303" fg:w="2"/><text x="24.7250%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.5557%" y="437" width="0.0808%" height="15" fill="rgb(224,200,8)" fg:x="304" fg:w="1"/><text x="24.8057%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.5557%" y="421" width="0.0808%" height="15" fill="rgb(217,61,36)" fg:x="304" fg:w="1"/><text x="24.8057%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.48%)</title><rect x="24.2326%" y="549" width="0.4847%" height="15" fill="rgb(206,35,45)" fg:x="300" fg:w="6"/><text x="24.4826%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="24.2326%" y="533" width="0.4847%" height="15" fill="rgb(217,65,33)" fg:x="300" fg:w="6"/><text x="24.4826%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="24.2326%" y="517" width="0.4847%" height="15" fill="rgb(222,158,48)" fg:x="300" fg:w="6"/><text x="24.4826%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="24.4750%" y="501" width="0.2423%" height="15" fill="rgb(254,2,54)" fg:x="303" fg:w="3"/><text x="24.7250%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.6365%" y="485" width="0.0808%" height="15" fill="rgb(250,143,38)" fg:x="305" fg:w="1"/><text x="24.8865%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.1212%" y="485" width="0.0808%" height="15" fill="rgb(248,25,0)" fg:x="311" fg:w="1"/><text x="25.3712%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="24.7981%" y="501" width="0.4847%" height="15" fill="rgb(206,152,27)" fg:x="307" fg:w="6"/><text x="25.0481%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="25.2019%" y="485" width="0.0808%" height="15" fill="rgb(240,77,30)" fg:x="312" fg:w="1"/><text x="25.4519%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.89%)</title><rect x="24.7173%" y="533" width="0.8885%" height="15" fill="rgb(231,5,3)" fg:x="306" fg:w="11"/><text x="24.9673%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (11 samples, 0.89%)</title><rect x="24.7173%" y="517" width="0.8885%" height="15" fill="rgb(207,226,32)" fg:x="306" fg:w="11"/><text x="24.9673%" y="527.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="25.2827%" y="501" width="0.3231%" height="15" fill="rgb(222,207,47)" fg:x="313" fg:w="4"/><text x="25.5327%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (21 samples, 1.70%)</title><rect x="23.9903%" y="565" width="1.6963%" height="15" fill="rgb(229,115,45)" fg:x="297" fg:w="21"/><text x="24.2403%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (12 samples, 0.97%)</title><rect x="24.7173%" y="549" width="0.9693%" height="15" fill="rgb(224,191,6)" fg:x="306" fg:w="12"/><text x="24.9673%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.6058%" y="533" width="0.0808%" height="15" fill="rgb(230,227,24)" fg:x="317" fg:w="1"/><text x="25.8558%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (25 samples, 2.02%)</title><rect x="23.8288%" y="581" width="2.0194%" height="15" fill="rgb(228,80,19)" fg:x="295" fg:w="25"/><text x="24.0788%" y="591.50">&lt;..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="25.6866%" y="565" width="0.1616%" height="15" fill="rgb(247,229,0)" fg:x="318" fg:w="2"/><text x="25.9366%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (40 samples, 3.23%)</title><rect x="22.8595%" y="629" width="3.2310%" height="15" fill="rgb(237,194,15)" fg:x="283" fg:w="40"/><text x="23.1095%" y="639.50">ker..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (40 samples, 3.23%)</title><rect x="22.8595%" y="613" width="3.2310%" height="15" fill="rgb(219,203,20)" fg:x="283" fg:w="40"/><text x="23.1095%" y="623.50">&lt;se..</text></g><g><title>serde::ser::Serializer::collect_map (32 samples, 2.58%)</title><rect x="23.5057%" y="597" width="2.5848%" height="15" fill="rgb(234,128,8)" fg:x="291" fg:w="32"/><text x="23.7557%" y="607.50">se..</text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="25.8481%" y="581" width="0.2423%" height="15" fill="rgb(248,202,8)" fg:x="320" fg:w="3"/><text x="26.0981%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.1712%" y="517" width="0.0808%" height="15" fill="rgb(206,104,37)" fg:x="324" fg:w="1"/><text x="26.4212%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="26.2520%" y="485" width="0.1616%" height="15" fill="rgb(223,8,27)" fg:x="325" fg:w="2"/><text x="26.5020%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="26.2520%" y="469" width="0.1616%" height="15" fill="rgb(216,217,28)" fg:x="325" fg:w="2"/><text x="26.5020%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.3328%" y="453" width="0.0808%" height="15" fill="rgb(249,199,1)" fg:x="326" fg:w="1"/><text x="26.5828%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.3328%" y="437" width="0.0808%" height="15" fill="rgb(240,85,17)" fg:x="326" fg:w="1"/><text x="26.5828%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.3328%" y="421" width="0.0808%" height="15" fill="rgb(206,108,45)" fg:x="326" fg:w="1"/><text x="26.5828%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.4136%" y="453" width="0.0808%" height="15" fill="rgb(245,210,41)" fg:x="327" fg:w="1"/><text x="26.6636%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.4943%" y="437" width="0.0808%" height="15" fill="rgb(206,13,37)" fg:x="328" fg:w="1"/><text x="26.7443%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="26.4943%" y="453" width="0.1616%" height="15" fill="rgb(250,61,18)" fg:x="328" fg:w="2"/><text x="26.7443%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.5751%" y="437" width="0.0808%" height="15" fill="rgb(235,172,48)" fg:x="329" fg:w="1"/><text x="26.8251%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5751%" y="421" width="0.0808%" height="15" fill="rgb(249,201,17)" fg:x="329" fg:w="1"/><text x="26.8251%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="26.4136%" y="469" width="0.3231%" height="15" fill="rgb(219,208,6)" fg:x="327" fg:w="4"/><text x="26.6636%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.6559%" y="453" width="0.0808%" height="15" fill="rgb(248,31,23)" fg:x="330" fg:w="1"/><text x="26.9059%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.7367%" y="453" width="0.0808%" height="15" fill="rgb(245,15,42)" fg:x="331" fg:w="1"/><text x="26.9867%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.65%)</title><rect x="26.2520%" y="501" width="0.6462%" height="15" fill="rgb(222,217,39)" fg:x="325" fg:w="8"/><text x="26.5020%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="26.4136%" y="485" width="0.4847%" height="15" fill="rgb(210,219,27)" fg:x="327" fg:w="6"/><text x="26.6636%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="26.7367%" y="469" width="0.1616%" height="15" fill="rgb(252,166,36)" fg:x="331" fg:w="2"/><text x="26.9867%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8174%" y="453" width="0.0808%" height="15" fill="rgb(245,132,34)" fg:x="332" fg:w="1"/><text x="27.0674%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.73%)</title><rect x="26.2520%" y="517" width="0.7270%" height="15" fill="rgb(236,54,3)" fg:x="325" fg:w="9"/><text x="26.5020%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.8982%" y="501" width="0.0808%" height="15" fill="rgb(241,173,43)" fg:x="333" fg:w="1"/><text x="27.1482%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="26.8982%" y="485" width="0.0808%" height="15" fill="rgb(215,190,9)" fg:x="333" fg:w="1"/><text x="27.1482%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="26.8982%" y="469" width="0.0808%" height="15" fill="rgb(242,101,16)" fg:x="333" fg:w="1"/><text x="27.1482%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.89%)</title><rect x="26.1712%" y="533" width="0.8885%" height="15" fill="rgb(223,190,21)" fg:x="324" fg:w="11"/><text x="26.4212%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.9790%" y="517" width="0.0808%" height="15" fill="rgb(215,228,25)" fg:x="334" fg:w="1"/><text x="27.2290%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.97%)</title><rect x="26.1712%" y="565" width="0.9693%" height="15" fill="rgb(225,36,22)" fg:x="324" fg:w="12"/><text x="26.4212%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.97%)</title><rect x="26.1712%" y="549" width="0.9693%" height="15" fill="rgb(251,106,46)" fg:x="324" fg:w="12"/><text x="26.4212%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.0598%" y="533" width="0.0808%" height="15" fill="rgb(208,90,1)" fg:x="335" fg:w="1"/><text x="27.3098%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.0598%" y="517" width="0.0808%" height="15" fill="rgb(243,10,4)" fg:x="335" fg:w="1"/><text x="27.3098%" y="527.50"></text></g><g><title>engine::session::state::State::close (93 samples, 7.51%)</title><rect x="19.7900%" y="725" width="7.5121%" height="15" fill="rgb(212,137,27)" fg:x="245" fg:w="93"/><text x="20.0400%" y="735.50">engine::se..</text></g><g><title>engine::session::state::State::flush_entities (93 samples, 7.51%)</title><rect x="19.7900%" y="709" width="7.5121%" height="15" fill="rgb(231,220,49)" fg:x="245" fg:w="93"/><text x="20.0400%" y="719.50">engine::se..</text></g><g><title>core::iter::adapters::try_process (91 samples, 7.35%)</title><rect x="19.9515%" y="693" width="7.3506%" height="15" fill="rgb(237,96,20)" fg:x="247" fg:w="91"/><text x="20.2015%" y="703.50">core::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (91 samples, 7.35%)</title><rect x="19.9515%" y="677" width="7.3506%" height="15" fill="rgb(239,229,30)" fg:x="247" fg:w="91"/><text x="20.2015%" y="687.50">&lt;alloc::ve..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (91 samples, 7.35%)</title><rect x="19.9515%" y="661" width="7.3506%" height="15" fill="rgb(219,65,33)" fg:x="247" fg:w="91"/><text x="20.2015%" y="671.50">engine::se..</text></g><g><title>kernel::model::any_entity_changes (73 samples, 5.90%)</title><rect x="21.4055%" y="645" width="5.8966%" height="15" fill="rgb(243,134,7)" fg:x="265" fg:w="73"/><text x="21.6555%" y="655.50">kernel:..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (15 samples, 1.21%)</title><rect x="26.0905%" y="629" width="1.2116%" height="15" fill="rgb(216,177,54)" fg:x="323" fg:w="15"/><text x="26.3405%" y="639.50"></text></g><g><title>serde_json::de::from_trait (15 samples, 1.21%)</title><rect x="26.0905%" y="613" width="1.2116%" height="15" fill="rgb(211,160,20)" fg:x="323" fg:w="15"/><text x="26.3405%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.21%)</title><rect x="26.0905%" y="597" width="1.2116%" height="15" fill="rgb(239,85,39)" fg:x="323" fg:w="15"/><text x="26.3405%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (15 samples, 1.21%)</title><rect x="26.0905%" y="581" width="1.2116%" height="15" fill="rgb(232,125,22)" fg:x="323" fg:w="15"/><text x="26.3405%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.1405%" y="565" width="0.1616%" height="15" fill="rgb(244,57,34)" fg:x="336" fg:w="2"/><text x="27.3905%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.1405%" y="549" width="0.1616%" height="15" fill="rgb(214,203,32)" fg:x="336" fg:w="2"/><text x="27.3905%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="27.2213%" y="533" width="0.0808%" height="15" fill="rgb(207,58,43)" fg:x="337" fg:w="1"/><text x="27.4713%" y="543.50"></text></g><g><title>engine::session::Session::close (99 samples, 8.00%)</title><rect x="19.6284%" y="741" width="7.9968%" height="15" fill="rgb(215,193,15)" fg:x="243" fg:w="99"/><text x="19.8784%" y="751.50">engine::ses..</text></g><g><title>kernel::plugins::SessionPlugins::stop (4 samples, 0.32%)</title><rect x="27.3021%" y="725" width="0.3231%" height="15" fill="rgb(232,15,44)" fg:x="338" fg:w="4"/><text x="27.5521%" y="735.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="27.6252%" y="709" width="0.0808%" height="15" fill="rgb(212,3,48)" fg:x="342" fg:w="1"/><text x="27.8752%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="27.6252%" y="693" width="0.0808%" height="15" fill="rgb(218,128,7)" fg:x="342" fg:w="1"/><text x="27.8752%" y="703.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="27.6252%" y="677" width="0.0808%" height="15" fill="rgb(226,216,39)" fg:x="342" fg:w="1"/><text x="27.8752%" y="687.50"></text></g><g><title>&lt;plugins_rune::parser::EditActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="27.6252%" y="661" width="0.0808%" height="15" fill="rgb(243,47,51)" fg:x="342" fg:w="1"/><text x="27.8752%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="27.7060%" y="709" width="0.0808%" height="15" fill="rgb(241,183,40)" fg:x="343" fg:w="1"/><text x="27.9560%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.7868%" y="693" width="0.0808%" height="15" fill="rgb(231,217,32)" fg:x="344" fg:w="1"/><text x="28.0368%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="27.8675%" y="693" width="0.1616%" height="15" fill="rgb(229,61,38)" fg:x="345" fg:w="2"/><text x="28.1175%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="27.8675%" y="677" width="0.1616%" height="15" fill="rgb(225,210,5)" fg:x="345" fg:w="2"/><text x="28.1175%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="27.8675%" y="661" width="0.1616%" height="15" fill="rgb(231,79,45)" fg:x="345" fg:w="2"/><text x="28.1175%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="27.8675%" y="645" width="0.1616%" height="15" fill="rgb(224,100,7)" fg:x="345" fg:w="2"/><text x="28.1175%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="27.8675%" y="629" width="0.1616%" height="15" fill="rgb(241,198,18)" fg:x="345" fg:w="2"/><text x="28.1175%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="27.9483%" y="613" width="0.0808%" height="15" fill="rgb(252,97,53)" fg:x="346" fg:w="1"/><text x="28.1983%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="27.9483%" y="597" width="0.0808%" height="15" fill="rgb(220,88,7)" fg:x="346" fg:w="1"/><text x="28.1983%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="27.9483%" y="581" width="0.0808%" height="15" fill="rgb(213,176,14)" fg:x="346" fg:w="1"/><text x="28.1983%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="27.9483%" y="565" width="0.0808%" height="15" fill="rgb(246,73,7)" fg:x="346" fg:w="1"/><text x="28.1983%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="27.9483%" y="549" width="0.0808%" height="15" fill="rgb(245,64,36)" fg:x="346" fg:w="1"/><text x="28.1983%" y="559.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="28.0291%" y="693" width="0.0808%" height="15" fill="rgb(245,80,10)" fg:x="347" fg:w="1"/><text x="28.2791%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.0291%" y="677" width="0.0808%" height="15" fill="rgb(232,107,50)" fg:x="347" fg:w="1"/><text x="28.2791%" y="687.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="28.1099%" y="677" width="0.0808%" height="15" fill="rgb(253,3,0)" fg:x="348" fg:w="1"/><text x="28.3599%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="28.1099%" y="661" width="0.0808%" height="15" fill="rgb(212,99,53)" fg:x="348" fg:w="1"/><text x="28.3599%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="28.1099%" y="645" width="0.0808%" height="15" fill="rgb(249,111,54)" fg:x="348" fg:w="1"/><text x="28.3599%" y="655.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="28.2714%" y="645" width="0.0808%" height="15" fill="rgb(249,55,30)" fg:x="350" fg:w="1"/><text x="28.5214%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="28.2714%" y="629" width="0.0808%" height="15" fill="rgb(237,47,42)" fg:x="350" fg:w="1"/><text x="28.5214%" y="639.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="28.2714%" y="613" width="0.0808%" height="15" fill="rgb(211,20,18)" fg:x="350" fg:w="1"/><text x="28.5214%" y="623.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="28.1906%" y="677" width="0.2423%" height="15" fill="rgb(231,203,46)" fg:x="349" fg:w="3"/><text x="28.4406%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.24%)</title><rect x="28.1906%" y="661" width="0.2423%" height="15" fill="rgb(237,142,3)" fg:x="349" fg:w="3"/><text x="28.4406%" y="671.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="28.3522%" y="645" width="0.0808%" height="15" fill="rgb(241,107,1)" fg:x="351" fg:w="1"/><text x="28.6022%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="28.3522%" y="629" width="0.0808%" height="15" fill="rgb(229,83,13)" fg:x="351" fg:w="1"/><text x="28.6022%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.4330%" y="629" width="0.0808%" height="15" fill="rgb(241,91,40)" fg:x="352" fg:w="1"/><text x="28.6830%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="28.5137%" y="565" width="0.1616%" height="15" fill="rgb(225,3,45)" fg:x="353" fg:w="2"/><text x="28.7637%" y="575.50"></text></g><g><title>replies::Json::inner (1 samples, 0.08%)</title><rect x="28.5945%" y="549" width="0.0808%" height="15" fill="rgb(244,223,14)" fg:x="354" fg:w="1"/><text x="28.8445%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.7561%" y="501" width="0.0808%" height="15" fill="rgb(224,124,37)" fg:x="356" fg:w="1"/><text x="29.0061%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.7561%" y="485" width="0.0808%" height="15" fill="rgb(251,171,30)" fg:x="356" fg:w="1"/><text x="29.0061%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.7561%" y="469" width="0.0808%" height="15" fill="rgb(236,46,54)" fg:x="356" fg:w="1"/><text x="29.0061%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.7561%" y="453" width="0.0808%" height="15" fill="rgb(245,213,5)" fg:x="356" fg:w="1"/><text x="29.0061%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.7561%" y="437" width="0.0808%" height="15" fill="rgb(230,144,27)" fg:x="356" fg:w="1"/><text x="29.0061%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.7561%" y="421" width="0.0808%" height="15" fill="rgb(220,86,6)" fg:x="356" fg:w="1"/><text x="29.0061%" y="431.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="28.8368%" y="501" width="0.0808%" height="15" fill="rgb(240,20,13)" fg:x="357" fg:w="1"/><text x="29.0868%" y="511.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="28.9984%" y="453" width="0.0808%" height="15" fill="rgb(217,89,34)" fg:x="359" fg:w="1"/><text x="29.2484%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.9984%" y="437" width="0.0808%" height="15" fill="rgb(229,13,5)" fg:x="359" fg:w="1"/><text x="29.2484%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.9984%" y="421" width="0.0808%" height="15" fill="rgb(244,67,35)" fg:x="359" fg:w="1"/><text x="29.2484%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.9984%" y="405" width="0.0808%" height="15" fill="rgb(221,40,2)" fg:x="359" fg:w="1"/><text x="29.2484%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="29.0792%" y="405" width="0.0808%" height="15" fill="rgb(237,157,21)" fg:x="360" fg:w="1"/><text x="29.3292%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.0792%" y="389" width="0.0808%" height="15" fill="rgb(222,94,11)" fg:x="360" fg:w="1"/><text x="29.3292%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="29.0792%" y="373" width="0.0808%" height="15" fill="rgb(249,113,6)" fg:x="360" fg:w="1"/><text x="29.3292%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="29.1599%" y="357" width="0.0808%" height="15" fill="rgb(238,137,36)" fg:x="361" fg:w="1"/><text x="29.4099%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="29.1599%" y="341" width="0.0808%" height="15" fill="rgb(210,102,26)" fg:x="361" fg:w="1"/><text x="29.4099%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="29.1599%" y="389" width="0.1616%" height="15" fill="rgb(218,30,30)" fg:x="361" fg:w="2"/><text x="29.4099%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="29.1599%" y="373" width="0.1616%" height="15" fill="rgb(214,67,26)" fg:x="361" fg:w="2"/><text x="29.4099%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.2407%" y="357" width="0.0808%" height="15" fill="rgb(251,9,53)" fg:x="362" fg:w="1"/><text x="29.4907%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.2407%" y="341" width="0.0808%" height="15" fill="rgb(228,204,25)" fg:x="362" fg:w="1"/><text x="29.4907%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="29.2407%" y="325" width="0.0808%" height="15" fill="rgb(207,153,8)" fg:x="362" fg:w="1"/><text x="29.4907%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.2407%" y="309" width="0.0808%" height="15" fill="rgb(242,9,16)" fg:x="362" fg:w="1"/><text x="29.4907%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.2407%" y="293" width="0.0808%" height="15" fill="rgb(217,211,10)" fg:x="362" fg:w="1"/><text x="29.4907%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.2407%" y="277" width="0.0808%" height="15" fill="rgb(219,228,52)" fg:x="362" fg:w="1"/><text x="29.4907%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="29.2407%" y="261" width="0.0808%" height="15" fill="rgb(231,92,29)" fg:x="362" fg:w="1"/><text x="29.4907%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="28.9176%" y="501" width="0.4847%" height="15" fill="rgb(232,8,23)" fg:x="358" fg:w="6"/><text x="29.1676%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="28.9176%" y="485" width="0.4847%" height="15" fill="rgb(216,211,34)" fg:x="358" fg:w="6"/><text x="29.1676%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="28.9176%" y="469" width="0.4847%" height="15" fill="rgb(236,151,0)" fg:x="358" fg:w="6"/><text x="29.1676%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="29.0792%" y="453" width="0.3231%" height="15" fill="rgb(209,168,3)" fg:x="360" fg:w="4"/><text x="29.3292%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="29.0792%" y="437" width="0.3231%" height="15" fill="rgb(208,129,28)" fg:x="360" fg:w="4"/><text x="29.3292%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="29.0792%" y="421" width="0.3231%" height="15" fill="rgb(229,78,22)" fg:x="360" fg:w="4"/><text x="29.3292%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="29.1599%" y="405" width="0.2423%" height="15" fill="rgb(228,187,13)" fg:x="361" fg:w="3"/><text x="29.4099%" y="415.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="29.3215%" y="389" width="0.0808%" height="15" fill="rgb(240,119,24)" fg:x="363" fg:w="1"/><text x="29.5715%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.4023%" y="309" width="0.0808%" height="15" fill="rgb(209,194,42)" fg:x="364" fg:w="1"/><text x="29.6523%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.4023%" y="293" width="0.0808%" height="15" fill="rgb(247,200,46)" fg:x="364" fg:w="1"/><text x="29.6523%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.4023%" y="277" width="0.0808%" height="15" fill="rgb(218,76,16)" fg:x="364" fg:w="1"/><text x="29.6523%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.4023%" y="261" width="0.0808%" height="15" fill="rgb(225,21,48)" fg:x="364" fg:w="1"/><text x="29.6523%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="29.4023%" y="245" width="0.0808%" height="15" fill="rgb(239,223,50)" fg:x="364" fg:w="1"/><text x="29.6523%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="29.4023%" y="437" width="0.1616%" height="15" fill="rgb(244,45,21)" fg:x="364" fg:w="2"/><text x="29.6523%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="29.4023%" y="421" width="0.1616%" height="15" fill="rgb(232,33,43)" fg:x="364" fg:w="2"/><text x="29.6523%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="29.4023%" y="405" width="0.1616%" height="15" fill="rgb(209,8,3)" fg:x="364" fg:w="2"/><text x="29.6523%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="29.4023%" y="389" width="0.1616%" height="15" fill="rgb(214,25,53)" fg:x="364" fg:w="2"/><text x="29.6523%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="29.4023%" y="373" width="0.1616%" height="15" fill="rgb(254,186,54)" fg:x="364" fg:w="2"/><text x="29.6523%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="29.4023%" y="357" width="0.1616%" height="15" fill="rgb(208,174,49)" fg:x="364" fg:w="2"/><text x="29.6523%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="29.4023%" y="341" width="0.1616%" height="15" fill="rgb(233,191,51)" fg:x="364" fg:w="2"/><text x="29.6523%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="29.4023%" y="325" width="0.1616%" height="15" fill="rgb(222,134,10)" fg:x="364" fg:w="2"/><text x="29.6523%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.4830%" y="309" width="0.0808%" height="15" fill="rgb(230,226,20)" fg:x="365" fg:w="1"/><text x="29.7330%" y="319.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (14 samples, 1.13%)</title><rect x="28.5137%" y="597" width="1.1309%" height="15" fill="rgb(251,111,25)" fg:x="353" fg:w="14"/><text x="28.7637%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (14 samples, 1.13%)</title><rect x="28.5137%" y="581" width="1.1309%" height="15" fill="rgb(224,40,46)" fg:x="353" fg:w="14"/><text x="28.7637%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.97%)</title><rect x="28.6753%" y="565" width="0.9693%" height="15" fill="rgb(236,108,47)" fg:x="355" fg:w="12"/><text x="28.9253%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.89%)</title><rect x="28.7561%" y="549" width="0.8885%" height="15" fill="rgb(234,93,0)" fg:x="356" fg:w="11"/><text x="29.0061%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.89%)</title><rect x="28.7561%" y="533" width="0.8885%" height="15" fill="rgb(224,213,32)" fg:x="356" fg:w="11"/><text x="29.0061%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.89%)</title><rect x="28.7561%" y="517" width="0.8885%" height="15" fill="rgb(251,11,48)" fg:x="356" fg:w="11"/><text x="29.0061%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="29.4023%" y="501" width="0.2423%" height="15" fill="rgb(236,173,5)" fg:x="364" fg:w="3"/><text x="29.6523%" y="511.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="29.4023%" y="485" width="0.2423%" height="15" fill="rgb(230,95,12)" fg:x="364" fg:w="3"/><text x="29.6523%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="29.4023%" y="469" width="0.2423%" height="15" fill="rgb(232,209,1)" fg:x="364" fg:w="3"/><text x="29.6523%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="29.4023%" y="453" width="0.2423%" height="15" fill="rgb(232,6,1)" fg:x="364" fg:w="3"/><text x="29.6523%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.5638%" y="437" width="0.0808%" height="15" fill="rgb(210,224,50)" fg:x="366" fg:w="1"/><text x="29.8138%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5638%" y="421" width="0.0808%" height="15" fill="rgb(228,127,35)" fg:x="366" fg:w="1"/><text x="29.8138%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::Item&gt; (2 samples, 0.16%)</title><rect x="29.6446%" y="565" width="0.1616%" height="15" fill="rgb(245,102,45)" fg:x="367" fg:w="2"/><text x="29.8946%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.8061%" y="533" width="0.0808%" height="15" fill="rgb(214,1,49)" fg:x="369" fg:w="1"/><text x="30.0561%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.0485%" y="421" width="0.0808%" height="15" fill="rgb(226,163,40)" fg:x="372" fg:w="1"/><text x="30.2985%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.2100%" y="389" width="0.1616%" height="15" fill="rgb(239,212,28)" fg:x="374" fg:w="2"/><text x="30.4600%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.3716%" y="357" width="0.0808%" height="15" fill="rgb(220,20,13)" fg:x="376" fg:w="1"/><text x="30.6216%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.3716%" y="341" width="0.0808%" height="15" fill="rgb(210,164,35)" fg:x="376" fg:w="1"/><text x="30.6216%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="30.3716%" y="325" width="0.0808%" height="15" fill="rgb(248,109,41)" fg:x="376" fg:w="1"/><text x="30.6216%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.4523%" y="325" width="0.0808%" height="15" fill="rgb(238,23,50)" fg:x="377" fg:w="1"/><text x="30.7023%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="30.4523%" y="357" width="0.1616%" height="15" fill="rgb(211,48,49)" fg:x="377" fg:w="2"/><text x="30.7023%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="30.4523%" y="341" width="0.1616%" height="15" fill="rgb(223,36,21)" fg:x="377" fg:w="2"/><text x="30.7023%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.5331%" y="325" width="0.0808%" height="15" fill="rgb(207,123,46)" fg:x="378" fg:w="1"/><text x="30.7831%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.5331%" y="309" width="0.0808%" height="15" fill="rgb(240,218,32)" fg:x="378" fg:w="1"/><text x="30.7831%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="30.5331%" y="293" width="0.0808%" height="15" fill="rgb(252,5,43)" fg:x="378" fg:w="1"/><text x="30.7831%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="30.6139%" y="341" width="0.0808%" height="15" fill="rgb(252,84,19)" fg:x="379" fg:w="1"/><text x="30.8639%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="30.6139%" y="325" width="0.0808%" height="15" fill="rgb(243,152,39)" fg:x="379" fg:w="1"/><text x="30.8639%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.6139%" y="309" width="0.0808%" height="15" fill="rgb(234,160,15)" fg:x="379" fg:w="1"/><text x="30.8639%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.6947%" y="309" width="0.0808%" height="15" fill="rgb(237,34,20)" fg:x="380" fg:w="1"/><text x="30.9447%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.6947%" y="293" width="0.0808%" height="15" fill="rgb(229,97,13)" fg:x="380" fg:w="1"/><text x="30.9447%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.7754%" y="277" width="0.0808%" height="15" fill="rgb(234,71,50)" fg:x="381" fg:w="1"/><text x="31.0254%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.8562%" y="245" width="0.0808%" height="15" fill="rgb(253,155,4)" fg:x="382" fg:w="1"/><text x="31.1062%" y="255.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (11 samples, 0.89%)</title><rect x="30.1292%" y="405" width="0.8885%" height="15" fill="rgb(222,185,37)" fg:x="373" fg:w="11"/><text x="30.3792%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (8 samples, 0.65%)</title><rect x="30.3716%" y="389" width="0.6462%" height="15" fill="rgb(251,177,13)" fg:x="376" fg:w="8"/><text x="30.6216%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="30.3716%" y="373" width="0.6462%" height="15" fill="rgb(250,179,40)" fg:x="376" fg:w="8"/><text x="30.6216%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="30.6139%" y="357" width="0.4039%" height="15" fill="rgb(242,44,2)" fg:x="379" fg:w="5"/><text x="30.8639%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (4 samples, 0.32%)</title><rect x="30.6947%" y="341" width="0.3231%" height="15" fill="rgb(216,177,13)" fg:x="380" fg:w="4"/><text x="30.9447%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (4 samples, 0.32%)</title><rect x="30.6947%" y="325" width="0.3231%" height="15" fill="rgb(216,106,43)" fg:x="380" fg:w="4"/><text x="30.9447%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="30.7754%" y="309" width="0.2423%" height="15" fill="rgb(216,183,2)" fg:x="381" fg:w="3"/><text x="31.0254%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="30.7754%" y="293" width="0.2423%" height="15" fill="rgb(249,75,3)" fg:x="381" fg:w="3"/><text x="31.0254%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.8562%" y="277" width="0.1616%" height="15" fill="rgb(219,67,39)" fg:x="382" fg:w="2"/><text x="31.1062%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.8562%" y="261" width="0.1616%" height="15" fill="rgb(253,228,2)" fg:x="382" fg:w="2"/><text x="31.1062%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="30.9370%" y="245" width="0.0808%" height="15" fill="rgb(235,138,27)" fg:x="383" fg:w="1"/><text x="31.1870%" y="255.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (12 samples, 0.97%)</title><rect x="30.1292%" y="421" width="0.9693%" height="15" fill="rgb(236,97,51)" fg:x="373" fg:w="12"/><text x="30.3792%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="31.0178%" y="405" width="0.0808%" height="15" fill="rgb(240,80,30)" fg:x="384" fg:w="1"/><text x="31.2678%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.0178%" y="389" width="0.0808%" height="15" fill="rgb(230,178,19)" fg:x="384" fg:w="1"/><text x="31.2678%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="31.3409%" y="389" width="0.1616%" height="15" fill="rgb(210,190,27)" fg:x="388" fg:w="2"/><text x="31.5909%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="31.3409%" y="373" width="0.1616%" height="15" fill="rgb(222,107,31)" fg:x="388" fg:w="2"/><text x="31.5909%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="31.3409%" y="357" width="0.1616%" height="15" fill="rgb(216,127,34)" fg:x="388" fg:w="2"/><text x="31.5909%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="31.3409%" y="341" width="0.1616%" height="15" fill="rgb(234,116,52)" fg:x="388" fg:w="2"/><text x="31.5909%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="31.3409%" y="325" width="0.1616%" height="15" fill="rgb(222,124,15)" fg:x="388" fg:w="2"/><text x="31.5909%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="31.3409%" y="309" width="0.1616%" height="15" fill="rgb(231,179,28)" fg:x="388" fg:w="2"/><text x="31.5909%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="31.3409%" y="293" width="0.1616%" height="15" fill="rgb(226,93,45)" fg:x="388" fg:w="2"/><text x="31.5909%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="31.5832%" y="357" width="0.1616%" height="15" fill="rgb(215,8,51)" fg:x="391" fg:w="2"/><text x="31.8332%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.6640%" y="341" width="0.0808%" height="15" fill="rgb(223,106,5)" fg:x="392" fg:w="1"/><text x="31.9140%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.6640%" y="325" width="0.0808%" height="15" fill="rgb(250,191,5)" fg:x="392" fg:w="1"/><text x="31.9140%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.7447%" y="261" width="0.0808%" height="15" fill="rgb(242,132,44)" fg:x="393" fg:w="1"/><text x="31.9947%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.7447%" y="245" width="0.0808%" height="15" fill="rgb(251,152,29)" fg:x="393" fg:w="1"/><text x="31.9947%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.7447%" y="229" width="0.0808%" height="15" fill="rgb(218,179,5)" fg:x="393" fg:w="1"/><text x="31.9947%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="31.7447%" y="213" width="0.0808%" height="15" fill="rgb(227,67,19)" fg:x="393" fg:w="1"/><text x="31.9947%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="31.7447%" y="197" width="0.0808%" height="15" fill="rgb(233,119,31)" fg:x="393" fg:w="1"/><text x="31.9947%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="31.7447%" y="181" width="0.0808%" height="15" fill="rgb(241,120,22)" fg:x="393" fg:w="1"/><text x="31.9947%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.7447%" y="165" width="0.0808%" height="15" fill="rgb(224,102,30)" fg:x="393" fg:w="1"/><text x="31.9947%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="31.7447%" y="357" width="0.1616%" height="15" fill="rgb(210,164,37)" fg:x="393" fg:w="2"/><text x="31.9947%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="31.7447%" y="341" width="0.1616%" height="15" fill="rgb(226,191,16)" fg:x="393" fg:w="2"/><text x="31.9947%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="31.7447%" y="325" width="0.1616%" height="15" fill="rgb(214,40,45)" fg:x="393" fg:w="2"/><text x="31.9947%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="31.7447%" y="309" width="0.1616%" height="15" fill="rgb(244,29,26)" fg:x="393" fg:w="2"/><text x="31.9947%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="31.7447%" y="293" width="0.1616%" height="15" fill="rgb(216,16,5)" fg:x="393" fg:w="2"/><text x="31.9947%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="31.7447%" y="277" width="0.1616%" height="15" fill="rgb(249,76,35)" fg:x="393" fg:w="2"/><text x="31.9947%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="31.8255%" y="261" width="0.0808%" height="15" fill="rgb(207,11,44)" fg:x="394" fg:w="1"/><text x="32.0755%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="31.8255%" y="245" width="0.0808%" height="15" fill="rgb(228,190,49)" fg:x="394" fg:w="1"/><text x="32.0755%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.9063%" y="357" width="0.0808%" height="15" fill="rgb(214,173,12)" fg:x="395" fg:w="1"/><text x="32.1563%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.9871%" y="293" width="0.0808%" height="15" fill="rgb(218,26,35)" fg:x="396" fg:w="1"/><text x="32.2371%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (9 samples, 0.73%)</title><rect x="31.5024%" y="389" width="0.7270%" height="15" fill="rgb(220,200,19)" fg:x="390" fg:w="9"/><text x="31.7524%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (8 samples, 0.65%)</title><rect x="31.5832%" y="373" width="0.6462%" height="15" fill="rgb(239,95,49)" fg:x="391" fg:w="8"/><text x="31.8332%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="31.9871%" y="357" width="0.2423%" height="15" fill="rgb(235,85,53)" fg:x="396" fg:w="3"/><text x="32.2371%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="31.9871%" y="341" width="0.2423%" height="15" fill="rgb(233,133,31)" fg:x="396" fg:w="3"/><text x="32.2371%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="31.9871%" y="325" width="0.2423%" height="15" fill="rgb(218,25,20)" fg:x="396" fg:w="3"/><text x="32.2371%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="31.9871%" y="309" width="0.2423%" height="15" fill="rgb(252,210,38)" fg:x="396" fg:w="3"/><text x="32.2371%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="32.0679%" y="293" width="0.1616%" height="15" fill="rgb(242,134,21)" fg:x="397" fg:w="2"/><text x="32.3179%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="32.0679%" y="277" width="0.1616%" height="15" fill="rgb(213,28,48)" fg:x="397" fg:w="2"/><text x="32.3179%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.2294%" y="389" width="0.0808%" height="15" fill="rgb(250,196,2)" fg:x="399" fg:w="1"/><text x="32.4794%" y="399.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="32.3102%" y="389" width="0.1616%" height="15" fill="rgb(227,5,17)" fg:x="400" fg:w="2"/><text x="32.5602%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="32.3102%" y="373" width="0.1616%" height="15" fill="rgb(221,226,24)" fg:x="400" fg:w="2"/><text x="32.5602%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="32.3910%" y="357" width="0.0808%" height="15" fill="rgb(211,5,48)" fg:x="401" fg:w="1"/><text x="32.6410%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="32.3910%" y="341" width="0.0808%" height="15" fill="rgb(219,150,6)" fg:x="401" fg:w="1"/><text x="32.6410%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.3910%" y="325" width="0.0808%" height="15" fill="rgb(251,46,16)" fg:x="401" fg:w="1"/><text x="32.6410%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.3910%" y="309" width="0.0808%" height="15" fill="rgb(220,204,40)" fg:x="401" fg:w="1"/><text x="32.6410%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.3910%" y="293" width="0.0808%" height="15" fill="rgb(211,85,2)" fg:x="401" fg:w="1"/><text x="32.6410%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.3910%" y="277" width="0.0808%" height="15" fill="rgb(229,17,7)" fg:x="401" fg:w="1"/><text x="32.6410%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.4717%" y="373" width="0.0808%" height="15" fill="rgb(239,72,28)" fg:x="402" fg:w="1"/><text x="32.7217%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.4717%" y="357" width="0.0808%" height="15" fill="rgb(230,47,54)" fg:x="402" fg:w="1"/><text x="32.7217%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.4717%" y="341" width="0.0808%" height="15" fill="rgb(214,50,8)" fg:x="402" fg:w="1"/><text x="32.7217%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="32.5525%" y="373" width="0.1616%" height="15" fill="rgb(216,198,43)" fg:x="403" fg:w="2"/><text x="32.8025%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.6333%" y="357" width="0.0808%" height="15" fill="rgb(234,20,35)" fg:x="404" fg:w="1"/><text x="32.8833%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.6333%" y="341" width="0.0808%" height="15" fill="rgb(254,45,19)" fg:x="404" fg:w="1"/><text x="32.8833%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="32.6333%" y="325" width="0.0808%" height="15" fill="rgb(219,14,44)" fg:x="404" fg:w="1"/><text x="32.8833%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="32.6333%" y="309" width="0.0808%" height="15" fill="rgb(217,220,26)" fg:x="404" fg:w="1"/><text x="32.8833%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="32.6333%" y="293" width="0.0808%" height="15" fill="rgb(213,158,28)" fg:x="404" fg:w="1"/><text x="32.8833%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="32.6333%" y="277" width="0.0808%" height="15" fill="rgb(252,51,52)" fg:x="404" fg:w="1"/><text x="32.8833%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="32.6333%" y="261" width="0.0808%" height="15" fill="rgb(246,89,16)" fg:x="404" fg:w="1"/><text x="32.8833%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.7141%" y="373" width="0.0808%" height="15" fill="rgb(216,158,49)" fg:x="405" fg:w="1"/><text x="32.9641%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.7948%" y="309" width="0.0808%" height="15" fill="rgb(236,107,19)" fg:x="406" fg:w="1"/><text x="33.0448%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.7948%" y="293" width="0.0808%" height="15" fill="rgb(228,185,30)" fg:x="406" fg:w="1"/><text x="33.0448%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.57%)</title><rect x="32.4717%" y="389" width="0.5654%" height="15" fill="rgb(246,134,8)" fg:x="402" fg:w="7"/><text x="32.7217%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="32.7948%" y="373" width="0.2423%" height="15" fill="rgb(214,143,50)" fg:x="406" fg:w="3"/><text x="33.0448%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="32.7948%" y="357" width="0.2423%" height="15" fill="rgb(228,75,8)" fg:x="406" fg:w="3"/><text x="33.0448%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="32.7948%" y="341" width="0.2423%" height="15" fill="rgb(207,175,4)" fg:x="406" fg:w="3"/><text x="33.0448%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="32.7948%" y="325" width="0.2423%" height="15" fill="rgb(205,108,24)" fg:x="406" fg:w="3"/><text x="33.0448%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="32.8756%" y="309" width="0.1616%" height="15" fill="rgb(244,120,49)" fg:x="407" fg:w="2"/><text x="33.1256%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.9564%" y="293" width="0.0808%" height="15" fill="rgb(223,47,38)" fg:x="408" fg:w="1"/><text x="33.2064%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="32.9564%" y="277" width="0.0808%" height="15" fill="rgb(229,179,11)" fg:x="408" fg:w="1"/><text x="33.2064%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.9564%" y="261" width="0.0808%" height="15" fill="rgb(231,122,1)" fg:x="408" fg:w="1"/><text x="33.2064%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.0372%" y="389" width="0.0808%" height="15" fill="rgb(245,119,9)" fg:x="409" fg:w="1"/><text x="33.2872%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="33.1987%" y="357" width="0.1616%" height="15" fill="rgb(241,163,25)" fg:x="411" fg:w="2"/><text x="33.4487%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="33.1987%" y="341" width="0.1616%" height="15" fill="rgb(217,214,3)" fg:x="411" fg:w="2"/><text x="33.4487%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="33.2795%" y="325" width="0.0808%" height="15" fill="rgb(240,86,28)" fg:x="412" fg:w="1"/><text x="33.5295%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="33.2795%" y="309" width="0.0808%" height="15" fill="rgb(215,47,9)" fg:x="412" fg:w="1"/><text x="33.5295%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="33.3603%" y="357" width="0.3231%" height="15" fill="rgb(252,25,45)" fg:x="413" fg:w="4"/><text x="33.6103%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.6026%" y="341" width="0.0808%" height="15" fill="rgb(251,164,9)" fg:x="416" fg:w="1"/><text x="33.8526%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.6026%" y="325" width="0.0808%" height="15" fill="rgb(233,194,0)" fg:x="416" fg:w="1"/><text x="33.8526%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="33.6026%" y="309" width="0.0808%" height="15" fill="rgb(249,111,24)" fg:x="416" fg:w="1"/><text x="33.8526%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="33.6026%" y="293" width="0.0808%" height="15" fill="rgb(250,223,3)" fg:x="416" fg:w="1"/><text x="33.8526%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="33.6026%" y="277" width="0.0808%" height="15" fill="rgb(236,178,37)" fg:x="416" fg:w="1"/><text x="33.8526%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.6026%" y="261" width="0.0808%" height="15" fill="rgb(241,158,50)" fg:x="416" fg:w="1"/><text x="33.8526%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="33.6026%" y="245" width="0.0808%" height="15" fill="rgb(213,121,41)" fg:x="416" fg:w="1"/><text x="33.8526%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="33.6026%" y="229" width="0.0808%" height="15" fill="rgb(240,92,3)" fg:x="416" fg:w="1"/><text x="33.8526%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="33.6026%" y="213" width="0.0808%" height="15" fill="rgb(205,123,3)" fg:x="416" fg:w="1"/><text x="33.8526%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="33.6026%" y="197" width="0.0808%" height="15" fill="rgb(205,97,47)" fg:x="416" fg:w="1"/><text x="33.8526%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="33.6026%" y="181" width="0.0808%" height="15" fill="rgb(247,152,14)" fg:x="416" fg:w="1"/><text x="33.8526%" y="191.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.6026%" y="165" width="0.0808%" height="15" fill="rgb(248,195,53)" fg:x="416" fg:w="1"/><text x="33.8526%" y="175.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="33.6834%" y="357" width="0.0808%" height="15" fill="rgb(226,201,16)" fg:x="417" fg:w="1"/><text x="33.9334%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="33.7641%" y="293" width="0.0808%" height="15" fill="rgb(205,98,0)" fg:x="418" fg:w="1"/><text x="34.0141%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.7641%" y="277" width="0.0808%" height="15" fill="rgb(214,191,48)" fg:x="418" fg:w="1"/><text x="34.0141%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.7641%" y="261" width="0.0808%" height="15" fill="rgb(237,112,39)" fg:x="418" fg:w="1"/><text x="34.0141%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.8449%" y="293" width="0.0808%" height="15" fill="rgb(247,203,27)" fg:x="419" fg:w="1"/><text x="34.0949%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="33.8449%" y="277" width="0.0808%" height="15" fill="rgb(235,124,28)" fg:x="419" fg:w="1"/><text x="34.0949%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="33.8449%" y="261" width="0.0808%" height="15" fill="rgb(208,207,46)" fg:x="419" fg:w="1"/><text x="34.0949%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (11 samples, 0.89%)</title><rect x="33.1179%" y="389" width="0.8885%" height="15" fill="rgb(234,176,4)" fg:x="410" fg:w="11"/><text x="33.3679%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (11 samples, 0.89%)</title><rect x="33.1179%" y="373" width="0.8885%" height="15" fill="rgb(230,133,28)" fg:x="410" fg:w="11"/><text x="33.3679%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="33.7641%" y="357" width="0.2423%" height="15" fill="rgb(211,137,40)" fg:x="418" fg:w="3"/><text x="34.0141%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="33.7641%" y="341" width="0.2423%" height="15" fill="rgb(254,35,13)" fg:x="418" fg:w="3"/><text x="34.0141%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="33.7641%" y="325" width="0.2423%" height="15" fill="rgb(225,49,51)" fg:x="418" fg:w="3"/><text x="34.0141%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="33.7641%" y="309" width="0.2423%" height="15" fill="rgb(251,10,15)" fg:x="418" fg:w="3"/><text x="34.0141%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="33.9257%" y="293" width="0.0808%" height="15" fill="rgb(228,207,15)" fg:x="420" fg:w="1"/><text x="34.1757%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="33.9257%" y="277" width="0.0808%" height="15" fill="rgb(241,99,19)" fg:x="420" fg:w="1"/><text x="34.1757%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="34.0065%" y="389" width="0.0808%" height="15" fill="rgb(207,104,49)" fg:x="421" fg:w="1"/><text x="34.2565%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.0065%" y="373" width="0.0808%" height="15" fill="rgb(234,99,18)" fg:x="421" fg:w="1"/><text x="34.2565%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.0065%" y="357" width="0.0808%" height="15" fill="rgb(213,191,49)" fg:x="421" fg:w="1"/><text x="34.2565%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.0065%" y="341" width="0.0808%" height="15" fill="rgb(210,226,19)" fg:x="421" fg:w="1"/><text x="34.2565%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.0065%" y="325" width="0.0808%" height="15" fill="rgb(229,97,18)" fg:x="421" fg:w="1"/><text x="34.2565%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.0065%" y="309" width="0.0808%" height="15" fill="rgb(211,167,15)" fg:x="421" fg:w="1"/><text x="34.2565%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.0065%" y="293" width="0.0808%" height="15" fill="rgb(210,169,34)" fg:x="421" fg:w="1"/><text x="34.2565%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.0065%" y="277" width="0.0808%" height="15" fill="rgb(241,121,31)" fg:x="421" fg:w="1"/><text x="34.2565%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="34.0065%" y="261" width="0.0808%" height="15" fill="rgb(232,40,11)" fg:x="421" fg:w="1"/><text x="34.2565%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="34.0065%" y="245" width="0.0808%" height="15" fill="rgb(205,86,26)" fg:x="421" fg:w="1"/><text x="34.2565%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="34.0065%" y="229" width="0.0808%" height="15" fill="rgb(231,126,28)" fg:x="421" fg:w="1"/><text x="34.2565%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="34.0065%" y="213" width="0.0808%" height="15" fill="rgb(219,221,18)" fg:x="421" fg:w="1"/><text x="34.2565%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.0065%" y="197" width="0.0808%" height="15" fill="rgb(211,40,0)" fg:x="421" fg:w="1"/><text x="34.2565%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.0872%" y="373" width="0.0808%" height="15" fill="rgb(239,85,43)" fg:x="422" fg:w="1"/><text x="34.3372%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="34.1680%" y="341" width="0.1616%" height="15" fill="rgb(231,55,21)" fg:x="423" fg:w="2"/><text x="34.4180%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="34.1680%" y="325" width="0.1616%" height="15" fill="rgb(225,184,43)" fg:x="423" fg:w="2"/><text x="34.4180%" y="335.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="34.1680%" y="309" width="0.1616%" height="15" fill="rgb(251,158,41)" fg:x="423" fg:w="2"/><text x="34.4180%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="34.1680%" y="293" width="0.1616%" height="15" fill="rgb(234,159,37)" fg:x="423" fg:w="2"/><text x="34.4180%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="34.2488%" y="277" width="0.0808%" height="15" fill="rgb(216,204,22)" fg:x="424" fg:w="1"/><text x="34.4988%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="34.2488%" y="261" width="0.0808%" height="15" fill="rgb(214,17,3)" fg:x="424" fg:w="1"/><text x="34.4988%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="34.2488%" y="245" width="0.0808%" height="15" fill="rgb(212,111,17)" fg:x="424" fg:w="1"/><text x="34.4988%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="34.2488%" y="229" width="0.0808%" height="15" fill="rgb(221,157,24)" fg:x="424" fg:w="1"/><text x="34.4988%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.2488%" y="213" width="0.0808%" height="15" fill="rgb(252,16,13)" fg:x="424" fg:w="1"/><text x="34.4988%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="34.2488%" y="197" width="0.0808%" height="15" fill="rgb(221,62,2)" fg:x="424" fg:w="1"/><text x="34.4988%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="34.2488%" y="181" width="0.0808%" height="15" fill="rgb(247,87,22)" fg:x="424" fg:w="1"/><text x="34.4988%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="34.2488%" y="165" width="0.0808%" height="15" fill="rgb(215,73,9)" fg:x="424" fg:w="1"/><text x="34.4988%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.2488%" y="149" width="0.0808%" height="15" fill="rgb(207,175,33)" fg:x="424" fg:w="1"/><text x="34.4988%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="34.2488%" y="133" width="0.0808%" height="15" fill="rgb(243,129,54)" fg:x="424" fg:w="1"/><text x="34.4988%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.2488%" y="117" width="0.0808%" height="15" fill="rgb(227,119,45)" fg:x="424" fg:w="1"/><text x="34.4988%" y="127.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="34.2488%" y="101" width="0.0808%" height="15" fill="rgb(205,109,36)" fg:x="424" fg:w="1"/><text x="34.4988%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="34.2488%" y="85" width="0.0808%" height="15" fill="rgb(205,6,39)" fg:x="424" fg:w="1"/><text x="34.4988%" y="95.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="34.6527%" y="213" width="0.0808%" height="15" fill="rgb(221,32,16)" fg:x="429" fg:w="1"/><text x="34.9027%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="34.4103%" y="309" width="0.4039%" height="15" fill="rgb(228,144,50)" fg:x="426" fg:w="5"/><text x="34.6603%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="34.4103%" y="293" width="0.4039%" height="15" fill="rgb(229,201,53)" fg:x="426" fg:w="5"/><text x="34.6603%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.40%)</title><rect x="34.4103%" y="277" width="0.4039%" height="15" fill="rgb(249,153,27)" fg:x="426" fg:w="5"/><text x="34.6603%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="34.4103%" y="261" width="0.4039%" height="15" fill="rgb(227,106,25)" fg:x="426" fg:w="5"/><text x="34.6603%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="34.6527%" y="245" width="0.1616%" height="15" fill="rgb(230,65,29)" fg:x="429" fg:w="2"/><text x="34.9027%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="34.6527%" y="229" width="0.1616%" height="15" fill="rgb(221,57,46)" fg:x="429" fg:w="2"/><text x="34.9027%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="34.7334%" y="213" width="0.0808%" height="15" fill="rgb(229,161,17)" fg:x="430" fg:w="1"/><text x="34.9834%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.8142%" y="293" width="0.0808%" height="15" fill="rgb(222,213,11)" fg:x="431" fg:w="1"/><text x="35.0642%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.9758%" y="261" width="0.0808%" height="15" fill="rgb(235,35,13)" fg:x="433" fg:w="1"/><text x="35.2258%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="34.8142%" y="309" width="0.3231%" height="15" fill="rgb(233,158,34)" fg:x="431" fg:w="4"/><text x="35.0642%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="34.8950%" y="293" width="0.2423%" height="15" fill="rgb(215,151,48)" fg:x="432" fg:w="3"/><text x="35.1450%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="34.8950%" y="277" width="0.2423%" height="15" fill="rgb(229,84,14)" fg:x="432" fg:w="3"/><text x="35.1450%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="35.0565%" y="261" width="0.0808%" height="15" fill="rgb(229,68,14)" fg:x="434" fg:w="1"/><text x="35.3065%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.0565%" y="245" width="0.0808%" height="15" fill="rgb(243,106,26)" fg:x="434" fg:w="1"/><text x="35.3065%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.2181%" y="293" width="0.0808%" height="15" fill="rgb(206,45,38)" fg:x="436" fg:w="1"/><text x="35.4681%" y="303.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="35.3796%" y="277" width="0.0808%" height="15" fill="rgb(226,6,15)" fg:x="438" fg:w="1"/><text x="35.6296%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="35.3796%" y="261" width="0.0808%" height="15" fill="rgb(232,22,54)" fg:x="438" fg:w="1"/><text x="35.6296%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.5412%" y="261" width="0.0808%" height="15" fill="rgb(229,222,32)" fg:x="440" fg:w="1"/><text x="35.7912%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="35.7027%" y="229" width="0.0808%" height="15" fill="rgb(228,62,29)" fg:x="442" fg:w="1"/><text x="35.9527%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.7027%" y="213" width="0.0808%" height="15" fill="rgb(251,103,34)" fg:x="442" fg:w="1"/><text x="35.9527%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.7027%" y="197" width="0.0808%" height="15" fill="rgb(233,12,30)" fg:x="442" fg:w="1"/><text x="35.9527%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.7027%" y="181" width="0.0808%" height="15" fill="rgb(238,52,0)" fg:x="442" fg:w="1"/><text x="35.9527%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (4 samples, 0.32%)</title><rect x="35.6220%" y="261" width="0.3231%" height="15" fill="rgb(223,98,5)" fg:x="441" fg:w="4"/><text x="35.8720%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="35.6220%" y="245" width="0.3231%" height="15" fill="rgb(228,75,37)" fg:x="441" fg:w="4"/><text x="35.8720%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="35.7835%" y="229" width="0.1616%" height="15" fill="rgb(205,115,49)" fg:x="443" fg:w="2"/><text x="36.0335%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.0258%" y="245" width="0.0808%" height="15" fill="rgb(250,154,43)" fg:x="446" fg:w="1"/><text x="36.2758%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.1066%" y="229" width="0.1616%" height="15" fill="rgb(226,43,29)" fg:x="447" fg:w="2"/><text x="36.3566%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (20 samples, 1.62%)</title><rect x="36.2682%" y="229" width="1.6155%" height="15" fill="rgb(249,228,39)" fg:x="449" fg:w="20"/><text x="36.5182%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="37.6414%" y="213" width="0.2423%" height="15" fill="rgb(216,79,43)" fg:x="466" fg:w="3"/><text x="37.8914%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (23 samples, 1.86%)</title><rect x="36.1066%" y="245" width="1.8578%" height="15" fill="rgb(228,95,12)" fg:x="447" fg:w="23"/><text x="36.3566%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="37.8837%" y="229" width="0.0808%" height="15" fill="rgb(249,221,15)" fg:x="469" fg:w="1"/><text x="38.1337%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.8837%" y="213" width="0.0808%" height="15" fill="rgb(233,34,13)" fg:x="469" fg:w="1"/><text x="38.1337%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="37.9645%" y="229" width="0.0808%" height="15" fill="rgb(214,103,39)" fg:x="470" fg:w="1"/><text x="38.2145%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="37.9645%" y="213" width="0.0808%" height="15" fill="rgb(251,126,39)" fg:x="470" fg:w="1"/><text x="38.2145%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.9645%" y="197" width="0.0808%" height="15" fill="rgb(214,216,36)" fg:x="470" fg:w="1"/><text x="38.2145%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="37.9645%" y="245" width="0.4039%" height="15" fill="rgb(220,221,8)" fg:x="470" fg:w="5"/><text x="38.2145%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="38.0452%" y="229" width="0.3231%" height="15" fill="rgb(240,216,3)" fg:x="471" fg:w="4"/><text x="38.2952%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="38.2876%" y="213" width="0.0808%" height="15" fill="rgb(232,218,17)" fg:x="474" fg:w="1"/><text x="38.5376%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.2876%" y="197" width="0.0808%" height="15" fill="rgb(229,163,45)" fg:x="474" fg:w="1"/><text x="38.5376%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="38.3683%" y="245" width="0.0808%" height="15" fill="rgb(231,110,42)" fg:x="475" fg:w="1"/><text x="38.6183%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="38.9338%" y="181" width="0.0808%" height="15" fill="rgb(208,170,48)" fg:x="482" fg:w="1"/><text x="39.1838%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="39.0145%" y="181" width="0.0808%" height="15" fill="rgb(239,116,25)" fg:x="483" fg:w="1"/><text x="39.2645%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="39.0145%" y="165" width="0.0808%" height="15" fill="rgb(219,200,50)" fg:x="483" fg:w="1"/><text x="39.2645%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="39.0145%" y="149" width="0.0808%" height="15" fill="rgb(245,200,0)" fg:x="483" fg:w="1"/><text x="39.2645%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (59 samples, 4.77%)</title><rect x="39.0953%" y="181" width="4.7658%" height="15" fill="rgb(245,119,33)" fg:x="484" fg:w="59"/><text x="39.3453%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (59 samples, 4.77%)</title><rect x="39.0953%" y="165" width="4.7658%" height="15" fill="rgb(231,125,12)" fg:x="484" fg:w="59"/><text x="39.3453%" y="175.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (58 samples, 4.68%)</title><rect x="39.1761%" y="149" width="4.6850%" height="15" fill="rgb(216,96,41)" fg:x="485" fg:w="58"/><text x="39.4261%" y="159.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.48%)</title><rect x="43.8611%" y="181" width="0.4847%" height="15" fill="rgb(248,43,45)" fg:x="543" fg:w="6"/><text x="44.1111%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.2649%" y="165" width="0.0808%" height="15" fill="rgb(217,222,7)" fg:x="548" fg:w="1"/><text x="44.5149%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="44.3457%" y="181" width="0.0808%" height="15" fill="rgb(233,28,6)" fg:x="549" fg:w="1"/><text x="44.5957%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 6.06%)</title><rect x="38.4491%" y="229" width="6.0582%" height="15" fill="rgb(231,218,15)" fg:x="476" fg:w="75"/><text x="38.6991%" y="239.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (74 samples, 5.98%)</title><rect x="38.5299%" y="213" width="5.9774%" height="15" fill="rgb(226,171,48)" fg:x="477" fg:w="74"/><text x="38.7799%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.74%)</title><rect x="38.7722%" y="197" width="5.7351%" height="15" fill="rgb(235,201,9)" fg:x="480" fg:w="71"/><text x="39.0222%" y="207.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="44.4265%" y="181" width="0.0808%" height="15" fill="rgb(217,80,15)" fg:x="550" fg:w="1"/><text x="44.6765%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.4265%" y="165" width="0.0808%" height="15" fill="rgb(219,152,8)" fg:x="550" fg:w="1"/><text x="44.6765%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="44.5073%" y="229" width="0.0808%" height="15" fill="rgb(243,107,38)" fg:x="551" fg:w="1"/><text x="44.7573%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.6688%" y="213" width="0.0808%" height="15" fill="rgb(231,17,5)" fg:x="553" fg:w="1"/><text x="44.9188%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="44.7496%" y="213" width="0.1616%" height="15" fill="rgb(209,25,54)" fg:x="554" fg:w="2"/><text x="44.9996%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.8304%" y="197" width="0.0808%" height="15" fill="rgb(219,0,2)" fg:x="555" fg:w="1"/><text x="45.0804%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.8304%" y="181" width="0.0808%" height="15" fill="rgb(246,9,5)" fg:x="555" fg:w="1"/><text x="45.0804%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.8304%" y="165" width="0.0808%" height="15" fill="rgb(226,159,4)" fg:x="555" fg:w="1"/><text x="45.0804%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.57%)</title><rect x="44.9111%" y="213" width="0.5654%" height="15" fill="rgb(219,175,34)" fg:x="556" fg:w="7"/><text x="45.1611%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="45.3958%" y="197" width="0.0808%" height="15" fill="rgb(236,10,46)" fg:x="562" fg:w="1"/><text x="45.6458%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.3958%" y="181" width="0.0808%" height="15" fill="rgb(240,211,16)" fg:x="562" fg:w="1"/><text x="45.6458%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.3958%" y="165" width="0.0808%" height="15" fill="rgb(205,3,43)" fg:x="562" fg:w="1"/><text x="45.6458%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="45.4766%" y="213" width="0.2423%" height="15" fill="rgb(245,7,22)" fg:x="563" fg:w="3"/><text x="45.7266%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.21%)</title><rect x="44.5880%" y="229" width="1.2116%" height="15" fill="rgb(239,132,32)" fg:x="552" fg:w="15"/><text x="44.8380%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="45.7189%" y="213" width="0.0808%" height="15" fill="rgb(228,202,34)" fg:x="566" fg:w="1"/><text x="45.9689%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::fixup_slot_ranges (1 samples, 0.08%)</title><rect x="45.7189%" y="197" width="0.0808%" height="15" fill="rgb(254,200,22)" fg:x="566" fg:w="1"/><text x="45.9689%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (92 samples, 7.43%)</title><rect x="38.4491%" y="245" width="7.4313%" height="15" fill="rgb(219,10,39)" fg:x="476" fg:w="92"/><text x="38.6991%" y="255.50">regex_auto..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="45.7997%" y="229" width="0.0808%" height="15" fill="rgb(226,210,39)" fg:x="567" fg:w="1"/><text x="46.0497%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="45.7997%" y="213" width="0.0808%" height="15" fill="rgb(208,219,16)" fg:x="567" fg:w="1"/><text x="46.0497%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.7997%" y="197" width="0.0808%" height="15" fill="rgb(216,158,51)" fg:x="567" fg:w="1"/><text x="46.0497%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.7997%" y="181" width="0.0808%" height="15" fill="rgb(233,14,44)" fg:x="567" fg:w="1"/><text x="46.0497%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.7997%" y="165" width="0.0808%" height="15" fill="rgb(237,97,39)" fg:x="567" fg:w="1"/><text x="46.0497%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (125 samples, 10.10%)</title><rect x="35.9451%" y="261" width="10.0969%" height="15" fill="rgb(218,198,43)" fg:x="445" fg:w="125"/><text x="36.1951%" y="271.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="45.8805%" y="245" width="0.1616%" height="15" fill="rgb(231,104,20)" fg:x="568" fg:w="2"/><text x="46.1305%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="45.9612%" y="229" width="0.0808%" height="15" fill="rgb(254,36,13)" fg:x="569" fg:w="1"/><text x="46.2112%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="45.9612%" y="213" width="0.0808%" height="15" fill="rgb(248,14,50)" fg:x="569" fg:w="1"/><text x="46.2112%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="46.0420%" y="213" width="0.0808%" height="15" fill="rgb(217,107,29)" fg:x="570" fg:w="1"/><text x="46.2920%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="46.0420%" y="197" width="0.0808%" height="15" fill="rgb(251,169,33)" fg:x="570" fg:w="1"/><text x="46.2920%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="46.0420%" y="181" width="0.0808%" height="15" fill="rgb(217,108,32)" fg:x="570" fg:w="1"/><text x="46.2920%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="46.0420%" y="165" width="0.0808%" height="15" fill="rgb(219,66,42)" fg:x="570" fg:w="1"/><text x="46.2920%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="46.0420%" y="229" width="0.2423%" height="15" fill="rgb(206,180,7)" fg:x="570" fg:w="3"/><text x="46.2920%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="46.1228%" y="213" width="0.1616%" height="15" fill="rgb(208,226,31)" fg:x="571" fg:w="2"/><text x="46.3728%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="46.1228%" y="197" width="0.1616%" height="15" fill="rgb(218,26,49)" fg:x="571" fg:w="2"/><text x="46.3728%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="46.1228%" y="181" width="0.1616%" height="15" fill="rgb(233,197,48)" fg:x="571" fg:w="2"/><text x="46.3728%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="46.1228%" y="165" width="0.1616%" height="15" fill="rgb(252,181,51)" fg:x="571" fg:w="2"/><text x="46.3728%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="46.2843%" y="229" width="0.0808%" height="15" fill="rgb(253,90,19)" fg:x="573" fg:w="1"/><text x="46.5343%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.2843%" y="213" width="0.0808%" height="15" fill="rgb(215,171,30)" fg:x="573" fg:w="1"/><text x="46.5343%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="46.0420%" y="261" width="0.4039%" height="15" fill="rgb(214,222,9)" fg:x="570" fg:w="5"/><text x="46.2920%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="46.0420%" y="245" width="0.4039%" height="15" fill="rgb(223,3,22)" fg:x="570" fg:w="5"/><text x="46.2920%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="46.3651%" y="229" width="0.0808%" height="15" fill="rgb(225,196,46)" fg:x="574" fg:w="1"/><text x="46.6151%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="46.3651%" y="213" width="0.0808%" height="15" fill="rgb(209,110,37)" fg:x="574" fg:w="1"/><text x="46.6151%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="46.4459%" y="229" width="0.0808%" height="15" fill="rgb(249,89,12)" fg:x="575" fg:w="1"/><text x="46.6959%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (138 samples, 11.15%)</title><rect x="35.4604%" y="277" width="11.1470%" height="15" fill="rgb(226,27,33)" fg:x="439" fg:w="138"/><text x="35.7104%" y="287.50">regex_automata::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="46.4459%" y="261" width="0.1616%" height="15" fill="rgb(213,82,22)" fg:x="575" fg:w="2"/><text x="46.6959%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="46.4459%" y="245" width="0.1616%" height="15" fill="rgb(248,140,0)" fg:x="575" fg:w="2"/><text x="46.6959%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="46.5267%" y="229" width="0.0808%" height="15" fill="rgb(228,106,3)" fg:x="576" fg:w="1"/><text x="46.7767%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="46.6074%" y="277" width="0.0808%" height="15" fill="rgb(209,23,37)" fg:x="577" fg:w="1"/><text x="46.8574%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (144 samples, 11.63%)</title><rect x="35.1373%" y="309" width="11.6317%" height="15" fill="rgb(241,93,50)" fg:x="435" fg:w="144"/><text x="35.3873%" y="319.50">regex::regex::str..</text></g><g><title>regex::builders::string::RegexBuilder::build (142 samples, 11.47%)</title><rect x="35.2989%" y="293" width="11.4701%" height="15" fill="rgb(253,46,43)" fg:x="437" fg:w="142"/><text x="35.5489%" y="303.50">regex::builders::..</text></g><g><title>regex_automata::util::syntax::Config::utf8 (1 samples, 0.08%)</title><rect x="46.6882%" y="277" width="0.0808%" height="15" fill="rgb(226,206,43)" fg:x="578" fg:w="1"/><text x="46.9382%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="47.4960%" y="229" width="0.0808%" height="15" fill="rgb(217,54,7)" fg:x="588" fg:w="1"/><text x="47.7460%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="47.5767%" y="229" width="0.2423%" height="15" fill="rgb(223,5,52)" fg:x="589" fg:w="3"/><text x="47.8267%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.8191%" y="213" width="0.0808%" height="15" fill="rgb(206,52,46)" fg:x="592" fg:w="1"/><text x="48.0691%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.97%)</title><rect x="47.0113%" y="245" width="0.9693%" height="15" fill="rgb(253,136,11)" fg:x="582" fg:w="12"/><text x="47.2613%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="47.8191%" y="229" width="0.1616%" height="15" fill="rgb(208,106,33)" fg:x="592" fg:w="2"/><text x="48.0691%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.8998%" y="213" width="0.0808%" height="15" fill="rgb(206,54,4)" fg:x="593" fg:w="1"/><text x="48.1498%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.8998%" y="197" width="0.0808%" height="15" fill="rgb(213,3,15)" fg:x="593" fg:w="1"/><text x="48.1498%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.05%)</title><rect x="47.0113%" y="261" width="1.0501%" height="15" fill="rgb(252,211,39)" fg:x="582" fg:w="13"/><text x="47.2613%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="47.9806%" y="245" width="0.0808%" height="15" fill="rgb(223,6,36)" fg:x="594" fg:w="1"/><text x="48.2306%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.9806%" y="229" width="0.0808%" height="15" fill="rgb(252,169,45)" fg:x="594" fg:w="1"/><text x="48.2306%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.9806%" y="213" width="0.0808%" height="15" fill="rgb(212,48,26)" fg:x="594" fg:w="1"/><text x="48.2306%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="47.9806%" y="197" width="0.0808%" height="15" fill="rgb(251,102,48)" fg:x="594" fg:w="1"/><text x="48.2306%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="47.9806%" y="181" width="0.0808%" height="15" fill="rgb(243,208,16)" fg:x="594" fg:w="1"/><text x="48.2306%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (171 samples, 13.81%)</title><rect x="34.3296%" y="325" width="13.8126%" height="15" fill="rgb(219,96,24)" fg:x="425" fg:w="171"/><text x="34.5796%" y="335.50">indefinite::helper::H..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (17 samples, 1.37%)</title><rect x="46.7690%" y="309" width="1.3732%" height="15" fill="rgb(219,33,29)" fg:x="579" fg:w="17"/><text x="47.0190%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.29%)</title><rect x="46.8498%" y="293" width="1.2924%" height="15" fill="rgb(223,176,5)" fg:x="580" fg:w="16"/><text x="47.0998%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.21%)</title><rect x="46.9305%" y="277" width="1.2116%" height="15" fill="rgb(228,140,14)" fg:x="581" fg:w="15"/><text x="47.1805%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="48.0614%" y="261" width="0.0808%" height="15" fill="rgb(217,179,31)" fg:x="595" fg:w="1"/><text x="48.3114%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="48.0614%" y="245" width="0.0808%" height="15" fill="rgb(230,9,30)" fg:x="595" fg:w="1"/><text x="48.3114%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.0614%" y="229" width="0.0808%" height="15" fill="rgb(230,136,20)" fg:x="595" fg:w="1"/><text x="48.3114%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.0614%" y="213" width="0.0808%" height="15" fill="rgb(215,210,22)" fg:x="595" fg:w="1"/><text x="48.3114%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="48.0614%" y="197" width="0.0808%" height="15" fill="rgb(218,43,5)" fg:x="595" fg:w="1"/><text x="48.3114%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="48.0614%" y="181" width="0.0808%" height="15" fill="rgb(216,11,5)" fg:x="595" fg:w="1"/><text x="48.3114%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="48.2229%" y="277" width="0.2423%" height="15" fill="rgb(209,82,29)" fg:x="597" fg:w="3"/><text x="48.4729%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (3 samples, 0.24%)</title><rect x="48.2229%" y="261" width="0.2423%" height="15" fill="rgb(244,115,12)" fg:x="597" fg:w="3"/><text x="48.4729%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="48.2229%" y="245" width="0.2423%" height="15" fill="rgb(222,82,18)" fg:x="597" fg:w="3"/><text x="48.4729%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="48.2229%" y="229" width="0.2423%" height="15" fill="rgb(249,227,8)" fg:x="597" fg:w="3"/><text x="48.4729%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="48.3037%" y="213" width="0.1616%" height="15" fill="rgb(253,141,45)" fg:x="598" fg:w="2"/><text x="48.5537%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.4653%" y="261" width="0.0808%" height="15" fill="rgb(234,184,4)" fg:x="600" fg:w="1"/><text x="48.7153%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="48.5460%" y="261" width="0.0808%" height="15" fill="rgb(218,194,23)" fg:x="601" fg:w="1"/><text x="48.7960%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.5460%" y="245" width="0.0808%" height="15" fill="rgb(235,66,41)" fg:x="601" fg:w="1"/><text x="48.7960%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.57%)</title><rect x="48.1422%" y="309" width="0.5654%" height="15" fill="rgb(245,217,1)" fg:x="596" fg:w="7"/><text x="48.3922%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (7 samples, 0.57%)</title><rect x="48.1422%" y="293" width="0.5654%" height="15" fill="rgb(229,91,1)" fg:x="596" fg:w="7"/><text x="48.3922%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="48.4653%" y="277" width="0.2423%" height="15" fill="rgb(207,101,30)" fg:x="600" fg:w="3"/><text x="48.7153%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="48.6268%" y="261" width="0.0808%" height="15" fill="rgb(223,82,49)" fg:x="602" fg:w="1"/><text x="48.8768%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.6268%" y="245" width="0.0808%" height="15" fill="rgb(218,167,17)" fg:x="602" fg:w="1"/><text x="48.8768%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="48.7076%" y="261" width="0.0808%" height="15" fill="rgb(208,103,14)" fg:x="603" fg:w="1"/><text x="48.9576%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="48.7076%" y="293" width="0.1616%" height="15" fill="rgb(238,20,8)" fg:x="603" fg:w="2"/><text x="48.9576%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="48.7076%" y="277" width="0.1616%" height="15" fill="rgb(218,80,54)" fg:x="603" fg:w="2"/><text x="48.9576%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="48.7884%" y="261" width="0.0808%" height="15" fill="rgb(240,144,17)" fg:x="604" fg:w="1"/><text x="49.0384%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="48.7884%" y="245" width="0.0808%" height="15" fill="rgb(245,27,50)" fg:x="604" fg:w="1"/><text x="49.0384%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="48.8691%" y="229" width="0.0808%" height="15" fill="rgb(251,51,7)" fg:x="605" fg:w="1"/><text x="49.1191%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.3538%" y="213" width="0.0808%" height="15" fill="rgb(245,217,29)" fg:x="611" fg:w="1"/><text x="49.6038%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.3538%" y="197" width="0.0808%" height="15" fill="rgb(221,176,29)" fg:x="611" fg:w="1"/><text x="49.6038%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.3538%" y="181" width="0.0808%" height="15" fill="rgb(212,180,24)" fg:x="611" fg:w="1"/><text x="49.6038%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.81%)</title><rect x="48.9499%" y="229" width="0.8078%" height="15" fill="rgb(254,24,2)" fg:x="606" fg:w="10"/><text x="49.1999%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="49.4346%" y="213" width="0.3231%" height="15" fill="rgb(230,100,2)" fg:x="612" fg:w="4"/><text x="49.6846%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.05%)</title><rect x="48.8691%" y="245" width="1.0501%" height="15" fill="rgb(219,142,25)" fg:x="605" fg:w="13"/><text x="49.1191%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="49.7577%" y="229" width="0.1616%" height="15" fill="rgb(240,73,43)" fg:x="616" fg:w="2"/><text x="50.0077%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (16 samples, 1.29%)</title><rect x="48.7076%" y="309" width="1.2924%" height="15" fill="rgb(214,114,15)" fg:x="603" fg:w="16"/><text x="48.9576%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (14 samples, 1.13%)</title><rect x="48.8691%" y="293" width="1.1309%" height="15" fill="rgb(207,130,4)" fg:x="605" fg:w="14"/><text x="49.1191%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (14 samples, 1.13%)</title><rect x="48.8691%" y="277" width="1.1309%" height="15" fill="rgb(221,25,40)" fg:x="605" fg:w="14"/><text x="49.1191%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.13%)</title><rect x="48.8691%" y="261" width="1.1309%" height="15" fill="rgb(241,184,7)" fg:x="605" fg:w="14"/><text x="49.1191%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="49.9192%" y="245" width="0.0808%" height="15" fill="rgb(235,159,4)" fg:x="618" fg:w="1"/><text x="50.1692%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="49.9192%" y="229" width="0.0808%" height="15" fill="rgb(214,87,48)" fg:x="618" fg:w="1"/><text x="50.1692%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.9192%" y="213" width="0.0808%" height="15" fill="rgb(246,198,24)" fg:x="618" fg:w="1"/><text x="50.1692%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.9192%" y="197" width="0.0808%" height="15" fill="rgb(209,66,40)" fg:x="618" fg:w="1"/><text x="50.1692%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.9192%" y="181" width="0.0808%" height="15" fill="rgb(233,147,39)" fg:x="618" fg:w="1"/><text x="50.1692%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.0808%" y="229" width="0.0808%" height="15" fill="rgb(231,145,52)" fg:x="620" fg:w="1"/><text x="50.3308%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="50.0808%" y="261" width="0.1616%" height="15" fill="rgb(206,20,26)" fg:x="620" fg:w="2"/><text x="50.3308%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="50.0808%" y="245" width="0.1616%" height="15" fill="rgb(238,220,4)" fg:x="620" fg:w="2"/><text x="50.3308%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.1616%" y="229" width="0.0808%" height="15" fill="rgb(252,195,42)" fg:x="621" fg:w="1"/><text x="50.4116%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.2423%" y="261" width="0.0808%" height="15" fill="rgb(209,10,6)" fg:x="622" fg:w="1"/><text x="50.4923%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="50.3231%" y="261" width="0.4039%" height="15" fill="rgb(229,3,52)" fg:x="623" fg:w="5"/><text x="50.5731%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="50.4039%" y="245" width="0.3231%" height="15" fill="rgb(253,49,37)" fg:x="624" fg:w="4"/><text x="50.6539%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="50.5654%" y="229" width="0.1616%" height="15" fill="rgb(240,103,49)" fg:x="626" fg:w="2"/><text x="50.8154%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="50.5654%" y="213" width="0.1616%" height="15" fill="rgb(250,182,30)" fg:x="626" fg:w="2"/><text x="50.8154%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="50.6462%" y="197" width="0.0808%" height="15" fill="rgb(248,8,30)" fg:x="627" fg:w="1"/><text x="50.8962%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (29 samples, 2.34%)</title><rect x="50.8078%" y="245" width="2.3425%" height="15" fill="rgb(237,120,30)" fg:x="629" fg:w="29"/><text x="51.0578%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (29 samples, 2.34%)</title><rect x="50.8078%" y="229" width="2.3425%" height="15" fill="rgb(221,146,34)" fg:x="629" fg:w="29"/><text x="51.0578%" y="239.50">c..</text></g><g><title>__libc_free (6 samples, 0.48%)</title><rect x="52.6656%" y="213" width="0.4847%" height="15" fill="rgb(242,55,13)" fg:x="652" fg:w="6"/><text x="52.9156%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="53.1502%" y="245" width="0.0808%" height="15" fill="rgb(242,112,31)" fg:x="658" fg:w="1"/><text x="53.4002%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="53.1502%" y="229" width="0.0808%" height="15" fill="rgb(249,192,27)" fg:x="658" fg:w="1"/><text x="53.4002%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.8772%" y="213" width="0.0808%" height="15" fill="rgb(208,204,44)" fg:x="667" fg:w="1"/><text x="54.1272%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.8772%" y="197" width="0.0808%" height="15" fill="rgb(208,93,54)" fg:x="667" fg:w="1"/><text x="54.1272%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.8772%" y="181" width="0.0808%" height="15" fill="rgb(242,1,31)" fg:x="667" fg:w="1"/><text x="54.1272%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="53.9580%" y="213" width="0.2423%" height="15" fill="rgb(241,83,25)" fg:x="668" fg:w="3"/><text x="54.2080%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="54.0388%" y="197" width="0.1616%" height="15" fill="rgb(205,169,50)" fg:x="669" fg:w="2"/><text x="54.2888%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.1195%" y="181" width="0.0808%" height="15" fill="rgb(239,186,37)" fg:x="670" fg:w="1"/><text x="54.3695%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.1195%" y="165" width="0.0808%" height="15" fill="rgb(205,221,10)" fg:x="670" fg:w="1"/><text x="54.3695%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.1195%" y="149" width="0.0808%" height="15" fill="rgb(218,196,15)" fg:x="670" fg:w="1"/><text x="54.3695%" y="159.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (9 samples, 0.73%)</title><rect x="54.2003%" y="197" width="0.7270%" height="15" fill="rgb(218,196,35)" fg:x="671" fg:w="9"/><text x="54.4503%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (9 samples, 0.73%)</title><rect x="54.2003%" y="181" width="0.7270%" height="15" fill="rgb(233,63,24)" fg:x="671" fg:w="9"/><text x="54.4503%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (22 samples, 1.78%)</title><rect x="53.2310%" y="245" width="1.7771%" height="15" fill="rgb(225,8,4)" fg:x="659" fg:w="22"/><text x="53.4810%" y="255.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (22 samples, 1.78%)</title><rect x="53.2310%" y="229" width="1.7771%" height="15" fill="rgb(234,105,35)" fg:x="659" fg:w="22"/><text x="53.4810%" y="239.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (10 samples, 0.81%)</title><rect x="54.2003%" y="213" width="0.8078%" height="15" fill="rgb(236,21,32)" fg:x="671" fg:w="10"/><text x="54.4503%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="54.9273%" y="197" width="0.0808%" height="15" fill="rgb(228,109,6)" fg:x="680" fg:w="1"/><text x="55.1773%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="55.0081%" y="213" width="0.0808%" height="15" fill="rgb(229,215,31)" fg:x="681" fg:w="1"/><text x="55.2581%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="55.0889%" y="181" width="0.0808%" height="15" fill="rgb(221,52,54)" fg:x="682" fg:w="1"/><text x="55.3389%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="55.1696%" y="181" width="0.0808%" height="15" fill="rgb(252,129,43)" fg:x="683" fg:w="1"/><text x="55.4196%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="56.2197%" y="133" width="0.4847%" height="15" fill="rgb(248,183,27)" fg:x="696" fg:w="6"/><text x="56.4697%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="56.7044%" y="133" width="0.4039%" height="15" fill="rgb(250,0,22)" fg:x="702" fg:w="5"/><text x="56.9544%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="56.9467%" y="117" width="0.1616%" height="15" fill="rgb(213,166,10)" fg:x="705" fg:w="2"/><text x="57.1967%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="56.9467%" y="101" width="0.1616%" height="15" fill="rgb(207,163,36)" fg:x="705" fg:w="2"/><text x="57.1967%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="56.9467%" y="85" width="0.1616%" height="15" fill="rgb(208,122,22)" fg:x="705" fg:w="2"/><text x="57.1967%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="57.1082%" y="133" width="0.2423%" height="15" fill="rgb(207,104,49)" fg:x="707" fg:w="3"/><text x="57.3582%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.8352%" y="101" width="0.0808%" height="15" fill="rgb(248,211,50)" fg:x="716" fg:w="1"/><text x="58.0852%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="57.9160%" y="101" width="0.2423%" height="15" fill="rgb(217,13,45)" fg:x="717" fg:w="3"/><text x="58.1660%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="57.9160%" y="85" width="0.2423%" height="15" fill="rgb(211,216,49)" fg:x="717" fg:w="3"/><text x="58.1660%" y="95.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="57.9160%" y="69" width="0.2423%" height="15" fill="rgb(221,58,53)" fg:x="717" fg:w="3"/><text x="58.1660%" y="79.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="58.5622%" y="85" width="0.1616%" height="15" fill="rgb(220,112,41)" fg:x="725" fg:w="2"/><text x="58.8122%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (19 samples, 1.53%)</title><rect x="57.3506%" y="133" width="1.5347%" height="15" fill="rgb(236,38,28)" fg:x="710" fg:w="19"/><text x="57.6006%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (18 samples, 1.45%)</title><rect x="57.4313%" y="117" width="1.4540%" height="15" fill="rgb(227,195,22)" fg:x="711" fg:w="18"/><text x="57.6813%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (9 samples, 0.73%)</title><rect x="58.1583%" y="101" width="0.7270%" height="15" fill="rgb(214,55,33)" fg:x="720" fg:w="9"/><text x="58.4083%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="58.7237%" y="85" width="0.1616%" height="15" fill="rgb(248,80,13)" fg:x="727" fg:w="2"/><text x="58.9737%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.8045%" y="69" width="0.0808%" height="15" fill="rgb(238,52,6)" fg:x="728" fg:w="1"/><text x="59.0545%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.8045%" y="53" width="0.0808%" height="15" fill="rgb(224,198,47)" fg:x="728" fg:w="1"/><text x="59.0545%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.8045%" y="37" width="0.0808%" height="15" fill="rgb(233,171,20)" fg:x="728" fg:w="1"/><text x="59.0545%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (53 samples, 4.28%)</title><rect x="58.8853%" y="133" width="4.2811%" height="15" fill="rgb(241,30,25)" fg:x="729" fg:w="53"/><text x="59.1353%" y="143.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (53 samples, 4.28%)</title><rect x="58.8853%" y="117" width="4.2811%" height="15" fill="rgb(207,171,38)" fg:x="729" fg:w="53"/><text x="59.1353%" y="127.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (53 samples, 4.28%)</title><rect x="58.8853%" y="101" width="4.2811%" height="15" fill="rgb(234,70,1)" fg:x="729" fg:w="53"/><text x="59.1353%" y="111.50">alloc..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="63.1664%" y="133" width="0.1616%" height="15" fill="rgb(232,178,18)" fg:x="782" fg:w="2"/><text x="63.4164%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 8.72%)</title><rect x="55.0081%" y="229" width="8.7237%" height="15" fill="rgb(241,78,40)" fg:x="681" fg:w="108"/><text x="55.2581%" y="239.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (107 samples, 8.64%)</title><rect x="55.0889%" y="213" width="8.6430%" height="15" fill="rgb(222,35,25)" fg:x="682" fg:w="107"/><text x="55.3389%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (107 samples, 8.64%)</title><rect x="55.0889%" y="197" width="8.6430%" height="15" fill="rgb(207,92,16)" fg:x="682" fg:w="107"/><text x="55.3389%" y="207.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (105 samples, 8.48%)</title><rect x="55.2504%" y="181" width="8.4814%" height="15" fill="rgb(216,59,51)" fg:x="684" fg:w="105"/><text x="55.5004%" y="191.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (105 samples, 8.48%)</title><rect x="55.2504%" y="165" width="8.4814%" height="15" fill="rgb(213,80,28)" fg:x="684" fg:w="105"/><text x="55.5004%" y="175.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (105 samples, 8.48%)</title><rect x="55.2504%" y="149" width="8.4814%" height="15" fill="rgb(220,93,7)" fg:x="684" fg:w="105"/><text x="55.5004%" y="159.50">regex_automa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.40%)</title><rect x="63.3279%" y="133" width="0.4039%" height="15" fill="rgb(225,24,44)" fg:x="784" fg:w="5"/><text x="63.5779%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.5703%" y="117" width="0.1616%" height="15" fill="rgb(243,74,40)" fg:x="787" fg:w="2"/><text x="63.8203%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.6511%" y="101" width="0.0808%" height="15" fill="rgb(228,39,7)" fg:x="788" fg:w="1"/><text x="63.9011%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.6511%" y="85" width="0.0808%" height="15" fill="rgb(227,79,8)" fg:x="788" fg:w="1"/><text x="63.9011%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.8934%" y="213" width="0.0808%" height="15" fill="rgb(236,58,11)" fg:x="791" fg:w="1"/><text x="64.1434%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.8934%" y="197" width="0.0808%" height="15" fill="rgb(249,63,35)" fg:x="791" fg:w="1"/><text x="64.1434%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.8934%" y="181" width="0.0808%" height="15" fill="rgb(252,114,16)" fg:x="791" fg:w="1"/><text x="64.1434%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.65%)</title><rect x="63.9742%" y="213" width="0.6462%" height="15" fill="rgb(254,151,24)" fg:x="792" fg:w="8"/><text x="64.2242%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="64.4588%" y="197" width="0.1616%" height="15" fill="rgb(253,54,39)" fg:x="798" fg:w="2"/><text x="64.7088%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.4588%" y="181" width="0.1616%" height="15" fill="rgb(243,25,45)" fg:x="798" fg:w="2"/><text x="64.7088%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="64.4588%" y="165" width="0.1616%" height="15" fill="rgb(234,134,9)" fg:x="798" fg:w="2"/><text x="64.7088%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="64.6204%" y="213" width="0.4847%" height="15" fill="rgb(227,166,31)" fg:x="800" fg:w="6"/><text x="64.8704%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.0242%" y="197" width="0.0808%" height="15" fill="rgb(245,143,41)" fg:x="805" fg:w="1"/><text x="65.2742%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (179 samples, 14.46%)</title><rect x="50.7270%" y="261" width="14.4588%" height="15" fill="rgb(238,181,32)" fg:x="628" fg:w="179"/><text x="50.9770%" y="271.50">regex_automata::meta::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (126 samples, 10.18%)</title><rect x="55.0081%" y="245" width="10.1777%" height="15" fill="rgb(224,113,18)" fg:x="681" fg:w="126"/><text x="55.2581%" y="255.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (18 samples, 1.45%)</title><rect x="63.7318%" y="229" width="1.4540%" height="15" fill="rgb(240,229,28)" fg:x="789" fg:w="18"/><text x="63.9818%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="65.1050%" y="213" width="0.0808%" height="15" fill="rgb(250,185,3)" fg:x="806" fg:w="1"/><text x="65.3550%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.1858%" y="229" width="0.0808%" height="15" fill="rgb(212,59,25)" fg:x="807" fg:w="1"/><text x="65.4358%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.1858%" y="213" width="0.0808%" height="15" fill="rgb(221,87,20)" fg:x="807" fg:w="1"/><text x="65.4358%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.1858%" y="197" width="0.0808%" height="15" fill="rgb(213,74,28)" fg:x="807" fg:w="1"/><text x="65.4358%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="65.2666%" y="213" width="0.0808%" height="15" fill="rgb(224,132,34)" fg:x="808" fg:w="1"/><text x="65.5166%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="65.2666%" y="229" width="0.2423%" height="15" fill="rgb(222,101,24)" fg:x="808" fg:w="3"/><text x="65.5166%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="65.3473%" y="213" width="0.1616%" height="15" fill="rgb(254,142,4)" fg:x="809" fg:w="2"/><text x="65.5973%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="65.3473%" y="197" width="0.1616%" height="15" fill="rgb(230,229,49)" fg:x="809" fg:w="2"/><text x="65.5973%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.3473%" y="181" width="0.1616%" height="15" fill="rgb(238,70,47)" fg:x="809" fg:w="2"/><text x="65.5973%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="65.3473%" y="165" width="0.1616%" height="15" fill="rgb(231,160,17)" fg:x="809" fg:w="2"/><text x="65.5973%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (2 samples, 0.16%)</title><rect x="65.5089%" y="229" width="0.1616%" height="15" fill="rgb(218,68,53)" fg:x="811" fg:w="2"/><text x="65.7589%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.5897%" y="213" width="0.0808%" height="15" fill="rgb(236,111,10)" fg:x="812" fg:w="1"/><text x="65.8397%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="65.6704%" y="229" width="0.0808%" height="15" fill="rgb(224,34,41)" fg:x="813" fg:w="1"/><text x="65.9204%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="65.6704%" y="213" width="0.0808%" height="15" fill="rgb(241,118,19)" fg:x="813" fg:w="1"/><text x="65.9204%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="65.7512%" y="229" width="0.0808%" height="15" fill="rgb(238,129,25)" fg:x="814" fg:w="1"/><text x="66.0012%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.73%)</title><rect x="65.1858%" y="261" width="0.7270%" height="15" fill="rgb(238,22,31)" fg:x="807" fg:w="9"/><text x="65.4358%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.73%)</title><rect x="65.1858%" y="245" width="0.7270%" height="15" fill="rgb(222,174,48)" fg:x="807" fg:w="9"/><text x="65.4358%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="65.8320%" y="229" width="0.0808%" height="15" fill="rgb(206,152,40)" fg:x="815" fg:w="1"/><text x="66.0820%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.8320%" y="213" width="0.0808%" height="15" fill="rgb(218,99,54)" fg:x="815" fg:w="1"/><text x="66.0820%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.8320%" y="197" width="0.0808%" height="15" fill="rgb(220,174,26)" fg:x="815" fg:w="1"/><text x="66.0820%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.8320%" y="181" width="0.0808%" height="15" fill="rgb(245,116,9)" fg:x="815" fg:w="1"/><text x="66.0820%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="65.9128%" y="229" width="0.3231%" height="15" fill="rgb(209,72,35)" fg:x="816" fg:w="4"/><text x="66.1628%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="65.9935%" y="213" width="0.2423%" height="15" fill="rgb(226,126,21)" fg:x="817" fg:w="3"/><text x="66.2435%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="66.0743%" y="197" width="0.1616%" height="15" fill="rgb(227,192,1)" fg:x="818" fg:w="2"/><text x="66.3243%" y="207.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="66.2359%" y="213" width="0.0808%" height="15" fill="rgb(237,180,29)" fg:x="820" fg:w="1"/><text x="66.4859%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2359%" y="197" width="0.0808%" height="15" fill="rgb(230,197,35)" fg:x="820" fg:w="1"/><text x="66.4859%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="66.2359%" y="229" width="0.1616%" height="15" fill="rgb(246,193,31)" fg:x="820" fg:w="2"/><text x="66.4859%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_class_unicode (1 samples, 0.08%)</title><rect x="66.3166%" y="213" width="0.0808%" height="15" fill="rgb(241,36,4)" fg:x="821" fg:w="1"/><text x="66.5666%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (227 samples, 18.34%)</title><rect x="48.1422%" y="325" width="18.3360%" height="15" fill="rgb(241,130,17)" fg:x="596" fg:w="227"/><text x="48.3922%" y="335.50">indefinite::rules::number::Nu..</text></g><g><title>regex::regex::string::Regex::new (204 samples, 16.48%)</title><rect x="50.0000%" y="309" width="16.4782%" height="15" fill="rgb(206,137,32)" fg:x="619" fg:w="204"/><text x="50.2500%" y="319.50">regex::regex::string::Reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (204 samples, 16.48%)</title><rect x="50.0000%" y="293" width="16.4782%" height="15" fill="rgb(237,228,51)" fg:x="619" fg:w="204"/><text x="50.2500%" y="303.50">regex::builders::string::..</text></g><g><title>regex_automata::meta::regex::Builder::build (204 samples, 16.48%)</title><rect x="50.0000%" y="277" width="16.4782%" height="15" fill="rgb(243,6,42)" fg:x="619" fg:w="204"/><text x="50.2500%" y="287.50">regex_automata::meta::reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.57%)</title><rect x="65.9128%" y="261" width="0.5654%" height="15" fill="rgb(251,74,28)" fg:x="816" fg:w="7"/><text x="66.1628%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.57%)</title><rect x="65.9128%" y="245" width="0.5654%" height="15" fill="rgb(218,20,49)" fg:x="816" fg:w="7"/><text x="66.1628%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="66.3974%" y="229" width="0.0808%" height="15" fill="rgb(238,28,14)" fg:x="822" fg:w="1"/><text x="66.6474%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="66.4782%" y="293" width="0.0808%" height="15" fill="rgb(229,40,46)" fg:x="823" fg:w="1"/><text x="66.7282%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="66.4782%" y="277" width="0.0808%" height="15" fill="rgb(244,195,20)" fg:x="823" fg:w="1"/><text x="66.7282%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="66.4782%" y="261" width="0.0808%" height="15" fill="rgb(253,56,35)" fg:x="823" fg:w="1"/><text x="66.7282%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="66.4782%" y="245" width="0.0808%" height="15" fill="rgb(210,149,44)" fg:x="823" fg:w="1"/><text x="66.7282%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.5590%" y="261" width="0.0808%" height="15" fill="rgb(240,135,12)" fg:x="824" fg:w="1"/><text x="66.8090%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="66.5590%" y="245" width="0.0808%" height="15" fill="rgb(251,24,50)" fg:x="824" fg:w="1"/><text x="66.8090%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5590%" y="229" width="0.0808%" height="15" fill="rgb(243,200,47)" fg:x="824" fg:w="1"/><text x="66.8090%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="66.5590%" y="293" width="0.1616%" height="15" fill="rgb(224,166,26)" fg:x="824" fg:w="2"/><text x="66.8090%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="66.5590%" y="277" width="0.1616%" height="15" fill="rgb(233,0,47)" fg:x="824" fg:w="2"/><text x="66.8090%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="66.6397%" y="261" width="0.0808%" height="15" fill="rgb(253,80,5)" fg:x="825" fg:w="1"/><text x="66.8897%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="66.6397%" y="245" width="0.0808%" height="15" fill="rgb(214,133,25)" fg:x="825" fg:w="1"/><text x="66.8897%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.6397%" y="229" width="0.0808%" height="15" fill="rgb(209,27,14)" fg:x="825" fg:w="1"/><text x="66.8897%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6397%" y="213" width="0.0808%" height="15" fill="rgb(219,102,51)" fg:x="825" fg:w="1"/><text x="66.8897%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="66.7205%" y="245" width="0.1616%" height="15" fill="rgb(237,18,16)" fg:x="826" fg:w="2"/><text x="66.9705%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="66.7205%" y="229" width="0.1616%" height="15" fill="rgb(241,85,17)" fg:x="826" fg:w="2"/><text x="66.9705%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="66.8013%" y="213" width="0.0808%" height="15" fill="rgb(236,90,42)" fg:x="827" fg:w="1"/><text x="67.0513%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.8013%" y="197" width="0.0808%" height="15" fill="rgb(249,57,21)" fg:x="827" fg:w="1"/><text x="67.0513%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.8013%" y="181" width="0.0808%" height="15" fill="rgb(243,12,36)" fg:x="827" fg:w="1"/><text x="67.0513%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.8013%" y="165" width="0.0808%" height="15" fill="rgb(253,128,47)" fg:x="827" fg:w="1"/><text x="67.0513%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8821%" y="245" width="0.0808%" height="15" fill="rgb(207,33,20)" fg:x="828" fg:w="1"/><text x="67.1321%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="66.9628%" y="245" width="0.1616%" height="15" fill="rgb(233,215,35)" fg:x="829" fg:w="2"/><text x="67.2128%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="66.9628%" y="229" width="0.1616%" height="15" fill="rgb(249,188,52)" fg:x="829" fg:w="2"/><text x="67.2128%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="66.9628%" y="213" width="0.1616%" height="15" fill="rgb(225,12,32)" fg:x="829" fg:w="2"/><text x="67.2128%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="66.9628%" y="197" width="0.1616%" height="15" fill="rgb(247,98,14)" fg:x="829" fg:w="2"/><text x="67.2128%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="67.0436%" y="181" width="0.0808%" height="15" fill="rgb(247,219,48)" fg:x="830" fg:w="1"/><text x="67.2936%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="67.2859%" y="213" width="0.0808%" height="15" fill="rgb(253,60,48)" fg:x="833" fg:w="1"/><text x="67.5359%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="67.2859%" y="197" width="0.0808%" height="15" fill="rgb(245,15,52)" fg:x="833" fg:w="1"/><text x="67.5359%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.2859%" y="181" width="0.0808%" height="15" fill="rgb(220,133,28)" fg:x="833" fg:w="1"/><text x="67.5359%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="67.2052%" y="229" width="0.3231%" height="15" fill="rgb(217,180,4)" fg:x="832" fg:w="4"/><text x="67.4552%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="67.3667%" y="213" width="0.1616%" height="15" fill="rgb(251,24,1)" fg:x="834" fg:w="2"/><text x="67.6167%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.7706%" y="149" width="0.0808%" height="15" fill="rgb(212,185,49)" fg:x="839" fg:w="1"/><text x="68.0206%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="67.5283%" y="213" width="0.4039%" height="15" fill="rgb(215,175,22)" fg:x="836" fg:w="5"/><text x="67.7783%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (5 samples, 0.40%)</title><rect x="67.5283%" y="197" width="0.4039%" height="15" fill="rgb(250,205,14)" fg:x="836" fg:w="5"/><text x="67.7783%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5 samples, 0.40%)</title><rect x="67.5283%" y="181" width="0.4039%" height="15" fill="rgb(225,211,22)" fg:x="836" fg:w="5"/><text x="67.7783%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5 samples, 0.40%)</title><rect x="67.5283%" y="165" width="0.4039%" height="15" fill="rgb(251,179,42)" fg:x="836" fg:w="5"/><text x="67.7783%" y="175.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="67.8514%" y="149" width="0.0808%" height="15" fill="rgb(208,216,51)" fg:x="840" fg:w="1"/><text x="68.1014%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="67.9321%" y="197" width="0.1616%" height="15" fill="rgb(235,36,11)" fg:x="841" fg:w="2"/><text x="68.1821%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.73%)</title><rect x="67.5283%" y="229" width="0.7270%" height="15" fill="rgb(213,189,28)" fg:x="836" fg:w="9"/><text x="67.7783%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="67.9321%" y="213" width="0.3231%" height="15" fill="rgb(227,203,42)" fg:x="841" fg:w="4"/><text x="68.1821%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="68.0937%" y="197" width="0.1616%" height="15" fill="rgb(244,72,36)" fg:x="843" fg:w="2"/><text x="68.3437%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.1745%" y="181" width="0.0808%" height="15" fill="rgb(213,53,17)" fg:x="844" fg:w="1"/><text x="68.4245%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (15 samples, 1.21%)</title><rect x="67.1244%" y="245" width="1.2116%" height="15" fill="rgb(207,167,3)" fg:x="831" fg:w="15"/><text x="67.3744%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="68.2553%" y="229" width="0.0808%" height="15" fill="rgb(216,98,30)" fg:x="845" fg:w="1"/><text x="68.5053%" y="239.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="68.3360%" y="245" width="0.0808%" height="15" fill="rgb(236,123,15)" fg:x="846" fg:w="1"/><text x="68.5860%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="68.3360%" y="229" width="0.0808%" height="15" fill="rgb(248,81,50)" fg:x="846" fg:w="1"/><text x="68.5860%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="68.3360%" y="213" width="0.0808%" height="15" fill="rgb(214,120,4)" fg:x="846" fg:w="1"/><text x="68.5860%" y="223.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="68.3360%" y="197" width="0.0808%" height="15" fill="rgb(208,179,34)" fg:x="846" fg:w="1"/><text x="68.5860%" y="207.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="68.3360%" y="181" width="0.0808%" height="15" fill="rgb(227,140,7)" fg:x="846" fg:w="1"/><text x="68.5860%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="68.5784%" y="197" width="0.0808%" height="15" fill="rgb(214,22,6)" fg:x="849" fg:w="1"/><text x="68.8284%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.5784%" y="181" width="0.0808%" height="15" fill="rgb(207,137,27)" fg:x="849" fg:w="1"/><text x="68.8284%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.5784%" y="165" width="0.0808%" height="15" fill="rgb(210,8,46)" fg:x="849" fg:w="1"/><text x="68.8284%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.5784%" y="149" width="0.0808%" height="15" fill="rgb(240,16,54)" fg:x="849" fg:w="1"/><text x="68.8284%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="68.6591%" y="197" width="0.0808%" height="15" fill="rgb(211,209,29)" fg:x="850" fg:w="1"/><text x="68.9091%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="68.4168%" y="245" width="0.4847%" height="15" fill="rgb(226,228,24)" fg:x="847" fg:w="6"/><text x="68.6668%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="68.4168%" y="229" width="0.4847%" height="15" fill="rgb(222,84,9)" fg:x="847" fg:w="6"/><text x="68.6668%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="68.4168%" y="213" width="0.4847%" height="15" fill="rgb(234,203,30)" fg:x="847" fg:w="6"/><text x="68.6668%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="68.7399%" y="197" width="0.1616%" height="15" fill="rgb(238,109,14)" fg:x="851" fg:w="2"/><text x="68.9899%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="68.7399%" y="181" width="0.1616%" height="15" fill="rgb(233,206,34)" fg:x="851" fg:w="2"/><text x="68.9899%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="68.7399%" y="165" width="0.1616%" height="15" fill="rgb(220,167,47)" fg:x="851" fg:w="2"/><text x="68.9899%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.7399%" y="149" width="0.1616%" height="15" fill="rgb(238,105,10)" fg:x="851" fg:w="2"/><text x="68.9899%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="68.9015%" y="213" width="0.0808%" height="15" fill="rgb(213,227,17)" fg:x="853" fg:w="1"/><text x="69.1515%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="68.9015%" y="197" width="0.0808%" height="15" fill="rgb(217,132,38)" fg:x="853" fg:w="1"/><text x="69.1515%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (29 samples, 2.34%)</title><rect x="66.7205%" y="261" width="2.3425%" height="15" fill="rgb(242,146,4)" fg:x="826" fg:w="29"/><text x="66.9705%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="68.9015%" y="245" width="0.1616%" height="15" fill="rgb(212,61,9)" fg:x="853" fg:w="2"/><text x="69.1515%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="68.9015%" y="229" width="0.1616%" height="15" fill="rgb(247,126,22)" fg:x="853" fg:w="2"/><text x="69.1515%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="68.9822%" y="213" width="0.0808%" height="15" fill="rgb(220,196,2)" fg:x="854" fg:w="1"/><text x="69.2322%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="68.9822%" y="197" width="0.0808%" height="15" fill="rgb(208,46,4)" fg:x="854" fg:w="1"/><text x="69.2322%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (30 samples, 2.42%)</title><rect x="66.7205%" y="293" width="2.4233%" height="15" fill="rgb(252,104,46)" fg:x="826" fg:w="30"/><text x="66.9705%" y="303.50">re..</text></g><g><title>regex::builders::string::RegexBuilder::build (30 samples, 2.42%)</title><rect x="66.7205%" y="277" width="2.4233%" height="15" fill="rgb(237,152,48)" fg:x="826" fg:w="30"/><text x="66.9705%" y="287.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="69.0630%" y="261" width="0.0808%" height="15" fill="rgb(221,59,37)" fg:x="855" fg:w="1"/><text x="69.3130%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.3053%" y="213" width="0.0808%" height="15" fill="rgb(209,202,51)" fg:x="858" fg:w="1"/><text x="69.5553%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.3053%" y="197" width="0.0808%" height="15" fill="rgb(228,81,30)" fg:x="858" fg:w="1"/><text x="69.5553%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="69.1438%" y="229" width="0.4039%" height="15" fill="rgb(227,42,39)" fg:x="856" fg:w="5"/><text x="69.3938%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="69.3861%" y="213" width="0.1616%" height="15" fill="rgb(221,26,2)" fg:x="859" fg:w="2"/><text x="69.6361%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="69.1438%" y="245" width="0.5654%" height="15" fill="rgb(254,61,31)" fg:x="856" fg:w="7"/><text x="69.3938%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="69.5477%" y="229" width="0.1616%" height="15" fill="rgb(222,173,38)" fg:x="861" fg:w="2"/><text x="69.7977%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="69.5477%" y="213" width="0.1616%" height="15" fill="rgb(218,50,12)" fg:x="861" fg:w="2"/><text x="69.7977%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="69.5477%" y="197" width="0.1616%" height="15" fill="rgb(223,88,40)" fg:x="861" fg:w="2"/><text x="69.7977%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.5477%" y="181" width="0.1616%" height="15" fill="rgb(237,54,19)" fg:x="861" fg:w="2"/><text x="69.7977%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (478 samples, 38.61%)</title><rect x="31.1793%" y="405" width="38.6107%" height="15" fill="rgb(251,129,25)" fg:x="386" fg:w="478"/><text x="31.4293%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Obs..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (442 samples, 35.70%)</title><rect x="34.0872%" y="389" width="35.7027%" height="15" fill="rgb(238,97,19)" fg:x="422" fg:w="442"/><text x="34.3372%" y="399.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (441 samples, 35.62%)</title><rect x="34.1680%" y="373" width="35.6220%" height="15" fill="rgb(240,169,18)" fg:x="423" fg:w="441"/><text x="34.4180%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (441 samples, 35.62%)</title><rect x="34.1680%" y="357" width="35.6220%" height="15" fill="rgb(230,187,49)" fg:x="423" fg:w="441"/><text x="34.4180%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (439 samples, 35.46%)</title><rect x="34.3296%" y="341" width="35.4604%" height="15" fill="rgb(209,44,26)" fg:x="425" fg:w="439"/><text x="34.5796%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (41 samples, 3.31%)</title><rect x="66.4782%" y="325" width="3.3118%" height="15" fill="rgb(244,0,6)" fg:x="823" fg:w="41"/><text x="66.7282%" y="335.50">ind..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (41 samples, 3.31%)</title><rect x="66.4782%" y="309" width="3.3118%" height="15" fill="rgb(248,18,21)" fg:x="823" fg:w="41"/><text x="66.7282%" y="319.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.65%)</title><rect x="69.1438%" y="293" width="0.6462%" height="15" fill="rgb(245,180,19)" fg:x="856" fg:w="8"/><text x="69.3938%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.65%)</title><rect x="69.1438%" y="277" width="0.6462%" height="15" fill="rgb(252,118,36)" fg:x="856" fg:w="8"/><text x="69.3938%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.65%)</title><rect x="69.1438%" y="261" width="0.6462%" height="15" fill="rgb(210,224,19)" fg:x="856" fg:w="8"/><text x="69.3938%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="69.7092%" y="245" width="0.0808%" height="15" fill="rgb(218,30,24)" fg:x="863" fg:w="1"/><text x="69.9592%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="69.7092%" y="229" width="0.0808%" height="15" fill="rgb(219,75,50)" fg:x="863" fg:w="1"/><text x="69.9592%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.7092%" y="213" width="0.0808%" height="15" fill="rgb(234,72,50)" fg:x="863" fg:w="1"/><text x="69.9592%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.7092%" y="197" width="0.0808%" height="15" fill="rgb(219,100,48)" fg:x="863" fg:w="1"/><text x="69.9592%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7092%" y="181" width="0.0808%" height="15" fill="rgb(253,5,41)" fg:x="863" fg:w="1"/><text x="69.9592%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.7900%" y="389" width="0.1616%" height="15" fill="rgb(247,181,11)" fg:x="864" fg:w="2"/><text x="70.0400%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="69.7900%" y="373" width="0.1616%" height="15" fill="rgb(222,223,25)" fg:x="864" fg:w="2"/><text x="70.0400%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.8708%" y="357" width="0.0808%" height="15" fill="rgb(214,198,28)" fg:x="865" fg:w="1"/><text x="70.1208%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.8708%" y="341" width="0.0808%" height="15" fill="rgb(230,46,43)" fg:x="865" fg:w="1"/><text x="70.1208%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0323%" y="309" width="0.0808%" height="15" fill="rgb(233,65,53)" fg:x="867" fg:w="1"/><text x="70.2823%" y="319.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.1131%" y="309" width="0.0808%" height="15" fill="rgb(221,121,27)" fg:x="868" fg:w="1"/><text x="70.3631%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.1131%" y="293" width="0.0808%" height="15" fill="rgb(247,70,47)" fg:x="868" fg:w="1"/><text x="70.3631%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1131%" y="277" width="0.0808%" height="15" fill="rgb(228,85,35)" fg:x="868" fg:w="1"/><text x="70.3631%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.1131%" y="261" width="0.0808%" height="15" fill="rgb(209,50,18)" fg:x="868" fg:w="1"/><text x="70.3631%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="70.0323%" y="357" width="0.2423%" height="15" fill="rgb(250,19,35)" fg:x="867" fg:w="3"/><text x="70.2823%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="70.0323%" y="341" width="0.2423%" height="15" fill="rgb(253,107,29)" fg:x="867" fg:w="3"/><text x="70.2823%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="70.0323%" y="325" width="0.2423%" height="15" fill="rgb(252,179,29)" fg:x="867" fg:w="3"/><text x="70.2823%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.1939%" y="309" width="0.0808%" height="15" fill="rgb(238,194,6)" fg:x="869" fg:w="1"/><text x="70.4439%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1939%" y="293" width="0.0808%" height="15" fill="rgb(238,164,29)" fg:x="869" fg:w="1"/><text x="70.4439%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.57%)</title><rect x="69.7900%" y="405" width="0.5654%" height="15" fill="rgb(224,25,9)" fg:x="864" fg:w="7"/><text x="70.0400%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="69.9515%" y="389" width="0.4039%" height="15" fill="rgb(244,153,23)" fg:x="866" fg:w="5"/><text x="70.2015%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="69.9515%" y="373" width="0.4039%" height="15" fill="rgb(212,203,14)" fg:x="866" fg:w="5"/><text x="70.2015%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.2746%" y="357" width="0.0808%" height="15" fill="rgb(220,164,20)" fg:x="870" fg:w="1"/><text x="70.5246%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2746%" y="341" width="0.0808%" height="15" fill="rgb(222,203,48)" fg:x="870" fg:w="1"/><text x="70.5246%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.2746%" y="325" width="0.0808%" height="15" fill="rgb(215,159,22)" fg:x="870" fg:w="1"/><text x="70.5246%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.2746%" y="309" width="0.0808%" height="15" fill="rgb(216,183,47)" fg:x="870" fg:w="1"/><text x="70.5246%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3554%" y="341" width="0.0808%" height="15" fill="rgb(229,195,25)" fg:x="871" fg:w="1"/><text x="70.6054%" y="351.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="70.4362%" y="341" width="0.0808%" height="15" fill="rgb(224,132,51)" fg:x="872" fg:w="1"/><text x="70.6862%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="70.3554%" y="373" width="0.2423%" height="15" fill="rgb(240,63,7)" fg:x="871" fg:w="3"/><text x="70.6054%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="70.3554%" y="357" width="0.2423%" height="15" fill="rgb(249,182,41)" fg:x="871" fg:w="3"/><text x="70.6054%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.5170%" y="341" width="0.0808%" height="15" fill="rgb(243,47,26)" fg:x="873" fg:w="1"/><text x="70.7670%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.5170%" y="325" width="0.0808%" height="15" fill="rgb(233,48,2)" fg:x="873" fg:w="1"/><text x="70.7670%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.5977%" y="373" width="0.0808%" height="15" fill="rgb(244,165,34)" fg:x="874" fg:w="1"/><text x="70.8477%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5977%" y="357" width="0.0808%" height="15" fill="rgb(207,89,7)" fg:x="874" fg:w="1"/><text x="70.8477%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5977%" y="341" width="0.0808%" height="15" fill="rgb(244,117,36)" fg:x="874" fg:w="1"/><text x="70.8477%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5977%" y="325" width="0.0808%" height="15" fill="rgb(226,144,34)" fg:x="874" fg:w="1"/><text x="70.8477%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5977%" y="309" width="0.0808%" height="15" fill="rgb(213,23,19)" fg:x="874" fg:w="1"/><text x="70.8477%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5977%" y="293" width="0.0808%" height="15" fill="rgb(217,75,12)" fg:x="874" fg:w="1"/><text x="70.8477%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.5977%" y="277" width="0.0808%" height="15" fill="rgb(224,159,17)" fg:x="874" fg:w="1"/><text x="70.8477%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.5977%" y="261" width="0.0808%" height="15" fill="rgb(217,118,1)" fg:x="874" fg:w="1"/><text x="70.8477%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.5977%" y="245" width="0.0808%" height="15" fill="rgb(232,180,48)" fg:x="874" fg:w="1"/><text x="70.8477%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.5977%" y="229" width="0.0808%" height="15" fill="rgb(230,27,33)" fg:x="874" fg:w="1"/><text x="70.8477%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.5977%" y="213" width="0.0808%" height="15" fill="rgb(205,31,21)" fg:x="874" fg:w="1"/><text x="70.8477%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.5977%" y="197" width="0.0808%" height="15" fill="rgb(253,59,4)" fg:x="874" fg:w="1"/><text x="70.8477%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.5977%" y="181" width="0.0808%" height="15" fill="rgb(224,201,9)" fg:x="874" fg:w="1"/><text x="70.8477%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.5977%" y="165" width="0.0808%" height="15" fill="rgb(229,206,30)" fg:x="874" fg:w="1"/><text x="70.8477%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.5977%" y="149" width="0.0808%" height="15" fill="rgb(212,67,47)" fg:x="874" fg:w="1"/><text x="70.8477%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.5977%" y="133" width="0.0808%" height="15" fill="rgb(211,96,50)" fg:x="874" fg:w="1"/><text x="70.8477%" y="143.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (5 samples, 0.40%)</title><rect x="70.3554%" y="389" width="0.4039%" height="15" fill="rgb(252,114,18)" fg:x="871" fg:w="5"/><text x="70.6054%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="70.6785%" y="373" width="0.0808%" height="15" fill="rgb(223,58,37)" fg:x="875" fg:w="1"/><text x="70.9285%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.6785%" y="357" width="0.0808%" height="15" fill="rgb(237,70,4)" fg:x="875" fg:w="1"/><text x="70.9285%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.6785%" y="341" width="0.0808%" height="15" fill="rgb(244,85,46)" fg:x="875" fg:w="1"/><text x="70.9285%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.65%)</title><rect x="70.3554%" y="405" width="0.6462%" height="15" fill="rgb(223,39,52)" fg:x="871" fg:w="8"/><text x="70.6054%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="70.7593%" y="389" width="0.2423%" height="15" fill="rgb(218,200,14)" fg:x="876" fg:w="3"/><text x="71.0093%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="70.7593%" y="373" width="0.2423%" height="15" fill="rgb(208,171,16)" fg:x="876" fg:w="3"/><text x="71.0093%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="70.7593%" y="357" width="0.2423%" height="15" fill="rgb(234,200,18)" fg:x="876" fg:w="3"/><text x="71.0093%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="70.7593%" y="341" width="0.2423%" height="15" fill="rgb(228,45,11)" fg:x="876" fg:w="3"/><text x="71.0093%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="70.7593%" y="325" width="0.2423%" height="15" fill="rgb(237,182,11)" fg:x="876" fg:w="3"/><text x="71.0093%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="70.7593%" y="309" width="0.2423%" height="15" fill="rgb(241,175,49)" fg:x="876" fg:w="3"/><text x="71.0093%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="70.7593%" y="293" width="0.2423%" height="15" fill="rgb(247,38,35)" fg:x="876" fg:w="3"/><text x="71.0093%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="70.7593%" y="277" width="0.2423%" height="15" fill="rgb(228,39,49)" fg:x="876" fg:w="3"/><text x="71.0093%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="70.7593%" y="261" width="0.2423%" height="15" fill="rgb(226,101,26)" fg:x="876" fg:w="3"/><text x="71.0093%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="70.7593%" y="245" width="0.2423%" height="15" fill="rgb(206,141,19)" fg:x="876" fg:w="3"/><text x="71.0093%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="70.7593%" y="229" width="0.2423%" height="15" fill="rgb(211,200,13)" fg:x="876" fg:w="3"/><text x="71.0093%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.7593%" y="213" width="0.2423%" height="15" fill="rgb(241,121,6)" fg:x="876" fg:w="3"/><text x="71.0093%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="70.8401%" y="197" width="0.1616%" height="15" fill="rgb(234,221,29)" fg:x="877" fg:w="2"/><text x="71.0901%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.9208%" y="181" width="0.0808%" height="15" fill="rgb(229,136,5)" fg:x="878" fg:w="1"/><text x="71.1708%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="71.0016%" y="405" width="0.0808%" height="15" fill="rgb(238,36,11)" fg:x="879" fg:w="1"/><text x="71.2516%" y="415.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (512 samples, 41.36%)</title><rect x="29.8061%" y="565" width="41.3570%" height="15" fill="rgb(251,55,41)" fg:x="369" fg:w="512"/><text x="30.0561%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (512 samples, 41.36%)</title><rect x="29.8061%" y="549" width="41.3570%" height="15" fill="rgb(242,34,40)" fg:x="369" fg:w="512"/><text x="30.0561%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middlewar..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (511 samples, 41.28%)</title><rect x="29.8869%" y="533" width="41.2763%" height="15" fill="rgb(215,42,17)" fg:x="370" fg:w="511"/><text x="30.1369%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (511 samples, 41.28%)</title><rect x="29.8869%" y="517" width="41.2763%" height="15" fill="rgb(207,44,46)" fg:x="370" fg:w="511"/><text x="30.1369%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (511 samples, 41.28%)</title><rect x="29.8869%" y="501" width="41.2763%" height="15" fill="rgb(211,206,28)" fg:x="370" fg:w="511"/><text x="30.1369%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (511 samples, 41.28%)</title><rect x="29.8869%" y="485" width="41.2763%" height="15" fill="rgb(237,167,16)" fg:x="370" fg:w="511"/><text x="30.1369%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (511 samples, 41.28%)</title><rect x="29.8869%" y="469" width="41.2763%" height="15" fill="rgb(233,66,6)" fg:x="370" fg:w="511"/><text x="30.1369%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (511 samples, 41.28%)</title><rect x="29.8869%" y="453" width="41.2763%" height="15" fill="rgb(246,123,29)" fg:x="370" fg:w="511"/><text x="30.1369%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perf..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (509 samples, 41.11%)</title><rect x="30.0485%" y="437" width="41.1147%" height="15" fill="rgb(209,62,40)" fg:x="372" fg:w="509"/><text x="30.2985%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Act..</text></g><g><title>plugins_core::looking::model::new_area_observation (496 samples, 40.06%)</title><rect x="31.0985%" y="421" width="40.0646%" height="15" fill="rgb(218,4,25)" fg:x="385" fg:w="496"/><text x="31.3485%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="71.0824%" y="405" width="0.0808%" height="15" fill="rgb(253,91,49)" fg:x="880" fg:w="1"/><text x="71.3324%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="71.0824%" y="389" width="0.0808%" height="15" fill="rgb(228,155,29)" fg:x="880" fg:w="1"/><text x="71.3324%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1632%" y="533" width="0.0808%" height="15" fill="rgb(243,57,37)" fg:x="881" fg:w="1"/><text x="71.4132%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.2439%" y="517" width="0.0808%" height="15" fill="rgb(244,167,17)" fg:x="882" fg:w="1"/><text x="71.4939%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.2439%" y="501" width="0.0808%" height="15" fill="rgb(207,181,38)" fg:x="882" fg:w="1"/><text x="71.4939%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2439%" y="485" width="0.0808%" height="15" fill="rgb(211,8,23)" fg:x="882" fg:w="1"/><text x="71.4939%" y="495.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="71.4055%" y="469" width="0.0808%" height="15" fill="rgb(235,11,44)" fg:x="884" fg:w="1"/><text x="71.6555%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4863%" y="405" width="0.0808%" height="15" fill="rgb(248,18,52)" fg:x="885" fg:w="1"/><text x="71.7363%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4863%" y="389" width="0.0808%" height="15" fill="rgb(208,4,7)" fg:x="885" fg:w="1"/><text x="71.7363%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4863%" y="373" width="0.0808%" height="15" fill="rgb(240,17,39)" fg:x="885" fg:w="1"/><text x="71.7363%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4863%" y="357" width="0.0808%" height="15" fill="rgb(207,170,3)" fg:x="885" fg:w="1"/><text x="71.7363%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.4863%" y="341" width="0.0808%" height="15" fill="rgb(236,100,52)" fg:x="885" fg:w="1"/><text x="71.7363%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.4863%" y="325" width="0.0808%" height="15" fill="rgb(246,78,51)" fg:x="885" fg:w="1"/><text x="71.7363%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.4863%" y="309" width="0.0808%" height="15" fill="rgb(211,17,15)" fg:x="885" fg:w="1"/><text x="71.7363%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4863%" y="293" width="0.0808%" height="15" fill="rgb(209,59,46)" fg:x="885" fg:w="1"/><text x="71.7363%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4863%" y="277" width="0.0808%" height="15" fill="rgb(210,92,25)" fg:x="885" fg:w="1"/><text x="71.7363%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.4863%" y="261" width="0.0808%" height="15" fill="rgb(238,174,52)" fg:x="885" fg:w="1"/><text x="71.7363%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.4863%" y="245" width="0.0808%" height="15" fill="rgb(230,73,7)" fg:x="885" fg:w="1"/><text x="71.7363%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.4863%" y="229" width="0.0808%" height="15" fill="rgb(243,124,40)" fg:x="885" fg:w="1"/><text x="71.7363%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.4863%" y="213" width="0.0808%" height="15" fill="rgb(244,170,11)" fg:x="885" fg:w="1"/><text x="71.7363%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.4863%" y="197" width="0.0808%" height="15" fill="rgb(207,114,54)" fg:x="885" fg:w="1"/><text x="71.7363%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.4863%" y="421" width="0.1616%" height="15" fill="rgb(205,42,20)" fg:x="885" fg:w="2"/><text x="71.7363%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5670%" y="405" width="0.0808%" height="15" fill="rgb(230,30,28)" fg:x="886" fg:w="1"/><text x="71.8170%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.4863%" y="453" width="0.2423%" height="15" fill="rgb(205,73,54)" fg:x="885" fg:w="3"/><text x="71.7363%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.4863%" y="437" width="0.2423%" height="15" fill="rgb(254,227,23)" fg:x="885" fg:w="3"/><text x="71.7363%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6478%" y="421" width="0.0808%" height="15" fill="rgb(228,202,34)" fg:x="887" fg:w="1"/><text x="71.8978%" y="431.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="71.7286%" y="453" width="0.0808%" height="15" fill="rgb(222,225,37)" fg:x="888" fg:w="1"/><text x="71.9786%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7286%" y="437" width="0.0808%" height="15" fill="rgb(221,14,54)" fg:x="888" fg:w="1"/><text x="71.9786%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.7286%" y="421" width="0.0808%" height="15" fill="rgb(254,102,2)" fg:x="888" fg:w="1"/><text x="71.9786%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="71.7286%" y="405" width="0.0808%" height="15" fill="rgb(232,104,17)" fg:x="888" fg:w="1"/><text x="71.9786%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.8901%" y="325" width="0.0808%" height="15" fill="rgb(250,220,14)" fg:x="890" fg:w="1"/><text x="72.1401%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.8901%" y="309" width="0.0808%" height="15" fill="rgb(241,158,9)" fg:x="890" fg:w="1"/><text x="72.1401%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.8901%" y="357" width="0.1616%" height="15" fill="rgb(246,9,43)" fg:x="890" fg:w="2"/><text x="72.1401%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.8901%" y="341" width="0.1616%" height="15" fill="rgb(206,73,33)" fg:x="890" fg:w="2"/><text x="72.1401%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="71.9709%" y="325" width="0.0808%" height="15" fill="rgb(222,79,8)" fg:x="891" fg:w="1"/><text x="72.2209%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.9709%" y="309" width="0.0808%" height="15" fill="rgb(234,8,54)" fg:x="891" fg:w="1"/><text x="72.2209%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.9709%" y="293" width="0.0808%" height="15" fill="rgb(209,134,38)" fg:x="891" fg:w="1"/><text x="72.2209%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="72.0517%" y="357" width="0.2423%" height="15" fill="rgb(230,127,29)" fg:x="892" fg:w="3"/><text x="72.3017%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.0517%" y="341" width="0.2423%" height="15" fill="rgb(242,44,41)" fg:x="892" fg:w="3"/><text x="72.3017%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="72.0517%" y="325" width="0.2423%" height="15" fill="rgb(222,56,43)" fg:x="892" fg:w="3"/><text x="72.3017%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.2132%" y="309" width="0.0808%" height="15" fill="rgb(238,39,47)" fg:x="894" fg:w="1"/><text x="72.4632%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2132%" y="293" width="0.0808%" height="15" fill="rgb(226,79,43)" fg:x="894" fg:w="1"/><text x="72.4632%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.2940%" y="277" width="0.0808%" height="15" fill="rgb(242,105,53)" fg:x="895" fg:w="1"/><text x="72.5440%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.2940%" y="261" width="0.0808%" height="15" fill="rgb(251,132,46)" fg:x="895" fg:w="1"/><text x="72.5440%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.65%)</title><rect x="71.8094%" y="453" width="0.6462%" height="15" fill="rgb(231,77,14)" fg:x="889" fg:w="8"/><text x="72.0594%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.65%)</title><rect x="71.8094%" y="437" width="0.6462%" height="15" fill="rgb(240,135,9)" fg:x="889" fg:w="8"/><text x="72.0594%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="71.8094%" y="421" width="0.6462%" height="15" fill="rgb(248,109,14)" fg:x="889" fg:w="8"/><text x="72.0594%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.65%)</title><rect x="71.8094%" y="405" width="0.6462%" height="15" fill="rgb(227,146,52)" fg:x="889" fg:w="8"/><text x="72.0594%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="71.8094%" y="389" width="0.6462%" height="15" fill="rgb(232,54,3)" fg:x="889" fg:w="8"/><text x="72.0594%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (7 samples, 0.57%)</title><rect x="71.8901%" y="373" width="0.5654%" height="15" fill="rgb(229,201,43)" fg:x="890" fg:w="7"/><text x="72.1401%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.2940%" y="357" width="0.1616%" height="15" fill="rgb(252,161,33)" fg:x="895" fg:w="2"/><text x="72.5440%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.2940%" y="341" width="0.1616%" height="15" fill="rgb(226,146,40)" fg:x="895" fg:w="2"/><text x="72.5440%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="72.2940%" y="325" width="0.1616%" height="15" fill="rgb(219,47,25)" fg:x="895" fg:w="2"/><text x="72.5440%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.2940%" y="309" width="0.1616%" height="15" fill="rgb(250,135,13)" fg:x="895" fg:w="2"/><text x="72.5440%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.2940%" y="293" width="0.1616%" height="15" fill="rgb(219,229,18)" fg:x="895" fg:w="2"/><text x="72.5440%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.3748%" y="277" width="0.0808%" height="15" fill="rgb(217,152,27)" fg:x="896" fg:w="1"/><text x="72.6248%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3748%" y="261" width="0.0808%" height="15" fill="rgb(225,71,47)" fg:x="896" fg:w="1"/><text x="72.6248%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.3748%" y="245" width="0.0808%" height="15" fill="rgb(220,139,14)" fg:x="896" fg:w="1"/><text x="72.6248%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3748%" y="229" width="0.0808%" height="15" fill="rgb(247,54,32)" fg:x="896" fg:w="1"/><text x="72.6248%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.4556%" y="293" width="0.1616%" height="15" fill="rgb(252,131,39)" fg:x="897" fg:w="2"/><text x="72.7056%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.5363%" y="277" width="0.0808%" height="15" fill="rgb(210,108,39)" fg:x="898" fg:w="1"/><text x="72.7863%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.5363%" y="261" width="0.0808%" height="15" fill="rgb(205,23,29)" fg:x="898" fg:w="1"/><text x="72.7863%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5363%" y="245" width="0.0808%" height="15" fill="rgb(246,139,46)" fg:x="898" fg:w="1"/><text x="72.7863%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.4556%" y="357" width="0.2423%" height="15" fill="rgb(250,81,26)" fg:x="897" fg:w="3"/><text x="72.7056%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.4556%" y="341" width="0.2423%" height="15" fill="rgb(214,104,7)" fg:x="897" fg:w="3"/><text x="72.7056%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.4556%" y="325" width="0.2423%" height="15" fill="rgb(233,189,8)" fg:x="897" fg:w="3"/><text x="72.7056%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.4556%" y="309" width="0.2423%" height="15" fill="rgb(228,141,17)" fg:x="897" fg:w="3"/><text x="72.7056%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.6171%" y="293" width="0.0808%" height="15" fill="rgb(247,157,1)" fg:x="899" fg:w="1"/><text x="72.8671%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.6171%" y="277" width="0.0808%" height="15" fill="rgb(249,225,5)" fg:x="899" fg:w="1"/><text x="72.8671%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.6979%" y="357" width="0.0808%" height="15" fill="rgb(242,55,13)" fg:x="900" fg:w="1"/><text x="72.9479%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.6979%" y="341" width="0.0808%" height="15" fill="rgb(230,49,50)" fg:x="900" fg:w="1"/><text x="72.9479%" y="351.50"></text></g><g><title>plugins_core::tools::contained_by (20 samples, 1.62%)</title><rect x="71.2439%" y="533" width="1.6155%" height="15" fill="rgb(241,111,38)" fg:x="882" fg:w="20"/><text x="71.4939%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (19 samples, 1.53%)</title><rect x="71.3247%" y="517" width="1.5347%" height="15" fill="rgb(252,155,4)" fg:x="883" fg:w="19"/><text x="71.5747%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (18 samples, 1.45%)</title><rect x="71.4055%" y="501" width="1.4540%" height="15" fill="rgb(212,69,32)" fg:x="884" fg:w="18"/><text x="71.6555%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (18 samples, 1.45%)</title><rect x="71.4055%" y="485" width="1.4540%" height="15" fill="rgb(243,107,47)" fg:x="884" fg:w="18"/><text x="71.6555%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (17 samples, 1.37%)</title><rect x="71.4863%" y="469" width="1.3732%" height="15" fill="rgb(247,130,12)" fg:x="885" fg:w="17"/><text x="71.7363%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="72.4556%" y="453" width="0.4039%" height="15" fill="rgb(233,74,16)" fg:x="897" fg:w="5"/><text x="72.7056%" y="463.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="72.4556%" y="437" width="0.4039%" height="15" fill="rgb(208,58,18)" fg:x="897" fg:w="5"/><text x="72.7056%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="72.4556%" y="421" width="0.4039%" height="15" fill="rgb(242,225,1)" fg:x="897" fg:w="5"/><text x="72.7056%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="72.4556%" y="405" width="0.4039%" height="15" fill="rgb(249,39,40)" fg:x="897" fg:w="5"/><text x="72.7056%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="72.4556%" y="389" width="0.4039%" height="15" fill="rgb(207,72,44)" fg:x="897" fg:w="5"/><text x="72.7056%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="72.4556%" y="373" width="0.4039%" height="15" fill="rgb(215,193,12)" fg:x="897" fg:w="5"/><text x="72.7056%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7787%" y="357" width="0.0808%" height="15" fill="rgb(248,41,39)" fg:x="901" fg:w="1"/><text x="73.0287%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8595%" y="501" width="0.0808%" height="15" fill="rgb(253,85,4)" fg:x="902" fg:w="1"/><text x="73.1095%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8595%" y="485" width="0.0808%" height="15" fill="rgb(243,70,31)" fg:x="902" fg:w="1"/><text x="73.1095%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8595%" y="469" width="0.0808%" height="15" fill="rgb(253,195,26)" fg:x="902" fg:w="1"/><text x="73.1095%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8595%" y="453" width="0.0808%" height="15" fill="rgb(243,42,11)" fg:x="902" fg:w="1"/><text x="73.1095%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8595%" y="437" width="0.0808%" height="15" fill="rgb(239,66,17)" fg:x="902" fg:w="1"/><text x="73.1095%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8595%" y="421" width="0.0808%" height="15" fill="rgb(217,132,21)" fg:x="902" fg:w="1"/><text x="73.1095%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.8595%" y="405" width="0.0808%" height="15" fill="rgb(252,202,21)" fg:x="902" fg:w="1"/><text x="73.1095%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.8595%" y="389" width="0.0808%" height="15" fill="rgb(233,98,36)" fg:x="902" fg:w="1"/><text x="73.1095%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.8595%" y="373" width="0.0808%" height="15" fill="rgb(216,153,54)" fg:x="902" fg:w="1"/><text x="73.1095%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.8595%" y="357" width="0.0808%" height="15" fill="rgb(250,99,7)" fg:x="902" fg:w="1"/><text x="73.1095%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.8595%" y="341" width="0.0808%" height="15" fill="rgb(207,56,50)" fg:x="902" fg:w="1"/><text x="73.1095%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.8595%" y="325" width="0.0808%" height="15" fill="rgb(244,61,34)" fg:x="902" fg:w="1"/><text x="73.1095%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.8595%" y="309" width="0.0808%" height="15" fill="rgb(241,50,38)" fg:x="902" fg:w="1"/><text x="73.1095%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.8595%" y="293" width="0.0808%" height="15" fill="rgb(212,166,30)" fg:x="902" fg:w="1"/><text x="73.1095%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.8595%" y="277" width="0.0808%" height="15" fill="rgb(249,127,32)" fg:x="902" fg:w="1"/><text x="73.1095%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8595%" y="261" width="0.0808%" height="15" fill="rgb(209,103,0)" fg:x="902" fg:w="1"/><text x="73.1095%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="72.9402%" y="501" width="0.0808%" height="15" fill="rgb(238,209,51)" fg:x="903" fg:w="1"/><text x="73.1902%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="72.8595%" y="517" width="0.2423%" height="15" fill="rgb(237,56,23)" fg:x="902" fg:w="3"/><text x="73.1095%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.0210%" y="501" width="0.0808%" height="15" fill="rgb(215,153,46)" fg:x="904" fg:w="1"/><text x="73.2710%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0210%" y="485" width="0.0808%" height="15" fill="rgb(224,49,31)" fg:x="904" fg:w="1"/><text x="73.2710%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="73.0210%" y="469" width="0.0808%" height="15" fill="rgb(250,18,42)" fg:x="904" fg:w="1"/><text x="73.2710%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="73.0210%" y="453" width="0.0808%" height="15" fill="rgb(215,176,39)" fg:x="904" fg:w="1"/><text x="73.2710%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="73.0210%" y="437" width="0.0808%" height="15" fill="rgb(223,77,29)" fg:x="904" fg:w="1"/><text x="73.2710%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0210%" y="421" width="0.0808%" height="15" fill="rgb(234,94,52)" fg:x="904" fg:w="1"/><text x="73.2710%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.0210%" y="405" width="0.0808%" height="15" fill="rgb(220,154,50)" fg:x="904" fg:w="1"/><text x="73.2710%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0210%" y="389" width="0.0808%" height="15" fill="rgb(212,11,10)" fg:x="904" fg:w="1"/><text x="73.2710%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="72.8595%" y="533" width="0.3231%" height="15" fill="rgb(205,166,19)" fg:x="902" fg:w="4"/><text x="73.1095%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="73.1018%" y="517" width="0.0808%" height="15" fill="rgb(244,198,16)" fg:x="905" fg:w="1"/><text x="73.3518%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="73.1018%" y="501" width="0.0808%" height="15" fill="rgb(219,69,12)" fg:x="905" fg:w="1"/><text x="73.3518%" y="511.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (26 samples, 2.10%)</title><rect x="71.1632%" y="549" width="2.1002%" height="15" fill="rgb(245,30,7)" fg:x="881" fg:w="26"/><text x="71.4132%" y="559.50">p..</text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="73.1826%" y="533" width="0.0808%" height="15" fill="rgb(218,221,48)" fg:x="906" fg:w="1"/><text x="73.4326%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="73.1826%" y="517" width="0.0808%" height="15" fill="rgb(216,66,15)" fg:x="906" fg:w="1"/><text x="73.4326%" y="527.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.1826%" y="501" width="0.0808%" height="15" fill="rgb(226,122,50)" fg:x="906" fg:w="1"/><text x="73.4326%" y="511.50"></text></g><g><title>engine::session::Session::captured (565 samples, 45.64%)</title><rect x="27.7868%" y="709" width="45.6381%" height="15" fill="rgb(239,156,16)" fg:x="344" fg:w="565"/><text x="28.0368%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (561 samples, 45.32%)</title><rect x="28.1099%" y="693" width="45.3150%" height="15" fill="rgb(224,27,38)" fg:x="348" fg:w="561"/><text x="28.3599%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (557 samples, 44.99%)</title><rect x="28.4330%" y="677" width="44.9919%" height="15" fill="rgb(224,39,27)" fg:x="352" fg:w="557"/><text x="28.6830%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (557 samples, 44.99%)</title><rect x="28.4330%" y="661" width="44.9919%" height="15" fill="rgb(215,92,29)" fg:x="352" fg:w="557"/><text x="28.6830%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (557 samples, 44.99%)</title><rect x="28.4330%" y="645" width="44.9919%" height="15" fill="rgb(207,159,16)" fg:x="352" fg:w="557"/><text x="28.6830%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (556 samples, 44.91%)</title><rect x="28.5137%" y="629" width="44.9111%" height="15" fill="rgb(238,163,47)" fg:x="353" fg:w="556"/><text x="28.7637%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (556 samples, 44.91%)</title><rect x="28.5137%" y="613" width="44.9111%" height="15" fill="rgb(219,91,49)" fg:x="353" fg:w="556"/><text x="28.7637%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Mid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (542 samples, 43.78%)</title><rect x="29.6446%" y="597" width="43.7803%" height="15" fill="rgb(227,167,31)" fg:x="367" fg:w="542"/><text x="29.8946%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (542 samples, 43.78%)</title><rect x="29.6446%" y="581" width="43.7803%" height="15" fill="rgb(234,80,54)" fg:x="367" fg:w="542"/><text x="29.8946%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (28 samples, 2.26%)</title><rect x="71.1632%" y="565" width="2.2617%" height="15" fill="rgb(212,114,2)" fg:x="881" fg:w="28"/><text x="71.4132%" y="575.50">p..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (2 samples, 0.16%)</title><rect x="73.2633%" y="549" width="0.1616%" height="15" fill="rgb(234,50,24)" fg:x="907" fg:w="2"/><text x="73.5133%" y="559.50"></text></g><g><title>plugins_rune::sources::get_script (2 samples, 0.16%)</title><rect x="73.2633%" y="533" width="0.1616%" height="15" fill="rgb(221,68,8)" fg:x="907" fg:w="2"/><text x="73.5133%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="73.2633%" y="517" width="0.1616%" height="15" fill="rgb(254,180,31)" fg:x="907" fg:w="2"/><text x="73.5133%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="73.2633%" y="501" width="0.1616%" height="15" fill="rgb(247,130,50)" fg:x="907" fg:w="2"/><text x="73.5133%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.3441%" y="485" width="0.0808%" height="15" fill="rgb(211,109,4)" fg:x="908" fg:w="1"/><text x="73.5941%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4249%" y="661" width="0.0808%" height="15" fill="rgb(238,50,21)" fg:x="909" fg:w="1"/><text x="73.6749%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4249%" y="645" width="0.0808%" height="15" fill="rgb(225,57,45)" fg:x="909" fg:w="1"/><text x="73.6749%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.5057%" y="469" width="0.0808%" height="15" fill="rgb(209,196,50)" fg:x="910" fg:w="1"/><text x="73.7557%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.5057%" y="453" width="0.0808%" height="15" fill="rgb(242,140,13)" fg:x="910" fg:w="1"/><text x="73.7557%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="73.5057%" y="517" width="0.1616%" height="15" fill="rgb(217,111,7)" fg:x="910" fg:w="2"/><text x="73.7557%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="73.5057%" y="501" width="0.1616%" height="15" fill="rgb(253,193,51)" fg:x="910" fg:w="2"/><text x="73.7557%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="73.5057%" y="485" width="0.1616%" height="15" fill="rgb(252,70,29)" fg:x="910" fg:w="2"/><text x="73.7557%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.5864%" y="469" width="0.0808%" height="15" fill="rgb(232,127,12)" fg:x="911" fg:w="1"/><text x="73.8364%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5864%" y="453" width="0.0808%" height="15" fill="rgb(211,180,21)" fg:x="911" fg:w="1"/><text x="73.8364%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="73.5864%" y="437" width="0.0808%" height="15" fill="rgb(229,72,13)" fg:x="911" fg:w="1"/><text x="73.8364%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.6672%" y="373" width="0.0808%" height="15" fill="rgb(240,211,49)" fg:x="912" fg:w="1"/><text x="73.9172%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.6672%" y="357" width="0.0808%" height="15" fill="rgb(219,149,40)" fg:x="912" fg:w="1"/><text x="73.9172%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="73.6672%" y="341" width="0.0808%" height="15" fill="rgb(210,127,46)" fg:x="912" fg:w="1"/><text x="73.9172%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="73.6672%" y="325" width="0.0808%" height="15" fill="rgb(220,106,7)" fg:x="912" fg:w="1"/><text x="73.9172%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="73.6672%" y="309" width="0.0808%" height="15" fill="rgb(249,31,22)" fg:x="912" fg:w="1"/><text x="73.9172%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="73.6672%" y="293" width="0.0808%" height="15" fill="rgb(253,1,49)" fg:x="912" fg:w="1"/><text x="73.9172%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="73.6672%" y="277" width="0.0808%" height="15" fill="rgb(227,144,33)" fg:x="912" fg:w="1"/><text x="73.9172%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="73.5057%" y="597" width="0.3231%" height="15" fill="rgb(249,163,44)" fg:x="910" fg:w="4"/><text x="73.7557%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="73.5057%" y="581" width="0.3231%" height="15" fill="rgb(234,15,39)" fg:x="910" fg:w="4"/><text x="73.7557%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="73.5057%" y="565" width="0.3231%" height="15" fill="rgb(207,66,16)" fg:x="910" fg:w="4"/><text x="73.7557%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="73.5057%" y="549" width="0.3231%" height="15" fill="rgb(233,112,24)" fg:x="910" fg:w="4"/><text x="73.7557%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="73.5057%" y="533" width="0.3231%" height="15" fill="rgb(230,90,22)" fg:x="910" fg:w="4"/><text x="73.7557%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.6672%" y="517" width="0.1616%" height="15" fill="rgb(229,61,13)" fg:x="912" fg:w="2"/><text x="73.9172%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.6672%" y="501" width="0.1616%" height="15" fill="rgb(225,57,24)" fg:x="912" fg:w="2"/><text x="73.9172%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="73.6672%" y="485" width="0.1616%" height="15" fill="rgb(208,169,48)" fg:x="912" fg:w="2"/><text x="73.9172%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="73.6672%" y="469" width="0.1616%" height="15" fill="rgb(244,218,51)" fg:x="912" fg:w="2"/><text x="73.9172%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (2 samples, 0.16%)</title><rect x="73.6672%" y="453" width="0.1616%" height="15" fill="rgb(214,148,10)" fg:x="912" fg:w="2"/><text x="73.9172%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (2 samples, 0.16%)</title><rect x="73.6672%" y="437" width="0.1616%" height="15" fill="rgb(225,174,27)" fg:x="912" fg:w="2"/><text x="73.9172%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="73.6672%" y="421" width="0.1616%" height="15" fill="rgb(230,96,26)" fg:x="912" fg:w="2"/><text x="73.9172%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="73.6672%" y="405" width="0.1616%" height="15" fill="rgb(232,10,30)" fg:x="912" fg:w="2"/><text x="73.9172%" y="415.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="73.6672%" y="389" width="0.1616%" height="15" fill="rgb(222,8,50)" fg:x="912" fg:w="2"/><text x="73.9172%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.7480%" y="373" width="0.0808%" height="15" fill="rgb(213,81,27)" fg:x="913" fg:w="1"/><text x="73.9980%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="73.5057%" y="613" width="0.4039%" height="15" fill="rgb(245,50,10)" fg:x="910" fg:w="5"/><text x="73.7557%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;core::iter::adapters::flatten::FlatMap&lt;serde_json::map::Iter,core::option::Option&lt;alloc::vec::Vec&lt;kernel::model::entity_ref::EntityRef&gt;&gt;,kernel::model::entity_ref::find_entity_refs::{{closure}}&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="73.8288%" y="597" width="0.0808%" height="15" fill="rgb(216,100,18)" fg:x="914" fg:w="1"/><text x="74.0788%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.9095%" y="581" width="0.0808%" height="15" fill="rgb(236,147,54)" fg:x="915" fg:w="1"/><text x="74.1595%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.9095%" y="565" width="0.0808%" height="15" fill="rgb(205,143,26)" fg:x="915" fg:w="1"/><text x="74.1595%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.9095%" y="549" width="0.0808%" height="15" fill="rgb(236,26,9)" fg:x="915" fg:w="1"/><text x="74.1595%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="73.5057%" y="661" width="0.5654%" height="15" fill="rgb(221,165,53)" fg:x="910" fg:w="7"/><text x="73.7557%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="73.5057%" y="645" width="0.5654%" height="15" fill="rgb(214,110,17)" fg:x="910" fg:w="7"/><text x="73.7557%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.57%)</title><rect x="73.5057%" y="629" width="0.5654%" height="15" fill="rgb(237,197,12)" fg:x="910" fg:w="7"/><text x="73.7557%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.9095%" y="613" width="0.1616%" height="15" fill="rgb(205,84,17)" fg:x="915" fg:w="2"/><text x="74.1595%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.9095%" y="597" width="0.1616%" height="15" fill="rgb(237,18,45)" fg:x="915" fg:w="2"/><text x="74.1595%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.9903%" y="581" width="0.0808%" height="15" fill="rgb(221,87,14)" fg:x="916" fg:w="1"/><text x="74.2403%" y="591.50"></text></g><g><title>engine::session::internal::Added::find_refs (9 samples, 0.73%)</title><rect x="73.4249%" y="693" width="0.7270%" height="15" fill="rgb(238,186,15)" fg:x="909" fg:w="9"/><text x="73.6749%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.73%)</title><rect x="73.4249%" y="677" width="0.7270%" height="15" fill="rgb(208,115,11)" fg:x="909" fg:w="9"/><text x="73.6749%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.0711%" y="661" width="0.0808%" height="15" fill="rgb(254,175,0)" fg:x="917" fg:w="1"/><text x="74.3211%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.0711%" y="645" width="0.0808%" height="15" fill="rgb(227,24,42)" fg:x="917" fg:w="1"/><text x="74.3211%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.0711%" y="629" width="0.0808%" height="15" fill="rgb(223,211,37)" fg:x="917" fg:w="1"/><text x="74.3211%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0711%" y="613" width="0.0808%" height="15" fill="rgb(235,49,27)" fg:x="917" fg:w="1"/><text x="74.3211%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0711%" y="597" width="0.0808%" height="15" fill="rgb(254,97,51)" fg:x="917" fg:w="1"/><text x="74.3211%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0711%" y="581" width="0.0808%" height="15" fill="rgb(249,51,40)" fg:x="917" fg:w="1"/><text x="74.3211%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1519%" y="677" width="0.0808%" height="15" fill="rgb(210,128,45)" fg:x="918" fg:w="1"/><text x="74.4019%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1519%" y="661" width="0.0808%" height="15" fill="rgb(224,137,50)" fg:x="918" fg:w="1"/><text x="74.4019%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1519%" y="645" width="0.0808%" height="15" fill="rgb(242,15,9)" fg:x="918" fg:w="1"/><text x="74.4019%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1519%" y="629" width="0.0808%" height="15" fill="rgb(233,187,41)" fg:x="918" fg:w="1"/><text x="74.4019%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.1519%" y="613" width="0.0808%" height="15" fill="rgb(227,2,29)" fg:x="918" fg:w="1"/><text x="74.4019%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.1519%" y="597" width="0.0808%" height="15" fill="rgb(222,70,3)" fg:x="918" fg:w="1"/><text x="74.4019%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.1519%" y="581" width="0.0808%" height="15" fill="rgb(213,11,42)" fg:x="918" fg:w="1"/><text x="74.4019%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.1519%" y="565" width="0.0808%" height="15" fill="rgb(225,150,9)" fg:x="918" fg:w="1"/><text x="74.4019%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.1519%" y="549" width="0.0808%" height="15" fill="rgb(230,162,45)" fg:x="918" fg:w="1"/><text x="74.4019%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.1519%" y="533" width="0.0808%" height="15" fill="rgb(222,14,52)" fg:x="918" fg:w="1"/><text x="74.4019%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.1519%" y="517" width="0.0808%" height="15" fill="rgb(254,198,14)" fg:x="918" fg:w="1"/><text x="74.4019%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.1519%" y="501" width="0.0808%" height="15" fill="rgb(220,217,30)" fg:x="918" fg:w="1"/><text x="74.4019%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.1519%" y="485" width="0.0808%" height="15" fill="rgb(215,146,41)" fg:x="918" fg:w="1"/><text x="74.4019%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.1519%" y="469" width="0.0808%" height="15" fill="rgb(217,27,36)" fg:x="918" fg:w="1"/><text x="74.4019%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.1519%" y="453" width="0.0808%" height="15" fill="rgb(219,218,39)" fg:x="918" fg:w="1"/><text x="74.4019%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1519%" y="437" width="0.0808%" height="15" fill="rgb(219,4,42)" fg:x="918" fg:w="1"/><text x="74.4019%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.2326%" y="549" width="0.0808%" height="15" fill="rgb(249,119,36)" fg:x="919" fg:w="1"/><text x="74.4826%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.2326%" y="533" width="0.0808%" height="15" fill="rgb(209,23,33)" fg:x="919" fg:w="1"/><text x="74.4826%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.2326%" y="517" width="0.0808%" height="15" fill="rgb(211,10,0)" fg:x="919" fg:w="1"/><text x="74.4826%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.2326%" y="501" width="0.0808%" height="15" fill="rgb(208,99,37)" fg:x="919" fg:w="1"/><text x="74.4826%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2326%" y="485" width="0.0808%" height="15" fill="rgb(213,132,31)" fg:x="919" fg:w="1"/><text x="74.4826%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.2326%" y="581" width="0.1616%" height="15" fill="rgb(243,129,40)" fg:x="919" fg:w="2"/><text x="74.4826%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.2326%" y="565" width="0.1616%" height="15" fill="rgb(210,66,33)" fg:x="919" fg:w="2"/><text x="74.4826%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.3134%" y="549" width="0.0808%" height="15" fill="rgb(209,189,4)" fg:x="920" fg:w="1"/><text x="74.5634%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="74.2326%" y="677" width="0.2423%" height="15" fill="rgb(214,107,37)" fg:x="919" fg:w="3"/><text x="74.4826%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="74.2326%" y="661" width="0.2423%" height="15" fill="rgb(245,88,54)" fg:x="919" fg:w="3"/><text x="74.4826%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="74.2326%" y="645" width="0.2423%" height="15" fill="rgb(205,146,20)" fg:x="919" fg:w="3"/><text x="74.4826%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="74.2326%" y="629" width="0.2423%" height="15" fill="rgb(220,161,25)" fg:x="919" fg:w="3"/><text x="74.4826%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="74.2326%" y="613" width="0.2423%" height="15" fill="rgb(215,152,15)" fg:x="919" fg:w="3"/><text x="74.4826%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="74.2326%" y="597" width="0.2423%" height="15" fill="rgb(233,192,44)" fg:x="919" fg:w="3"/><text x="74.4826%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3942%" y="581" width="0.0808%" height="15" fill="rgb(240,170,46)" fg:x="921" fg:w="1"/><text x="74.6442%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.3942%" y="565" width="0.0808%" height="15" fill="rgb(207,104,33)" fg:x="921" fg:w="1"/><text x="74.6442%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="74.3942%" y="549" width="0.0808%" height="15" fill="rgb(219,21,39)" fg:x="921" fg:w="1"/><text x="74.6442%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3942%" y="533" width="0.0808%" height="15" fill="rgb(214,133,29)" fg:x="921" fg:w="1"/><text x="74.6442%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.5557%" y="549" width="0.0808%" height="15" fill="rgb(226,93,6)" fg:x="923" fg:w="1"/><text x="74.8057%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.5557%" y="533" width="0.0808%" height="15" fill="rgb(252,222,34)" fg:x="923" fg:w="1"/><text x="74.8057%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.29%)</title><rect x="73.4249%" y="709" width="1.2924%" height="15" fill="rgb(252,92,48)" fg:x="909" fg:w="16"/><text x="73.6749%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="74.1519%" y="693" width="0.5654%" height="15" fill="rgb(245,223,24)" fg:x="918" fg:w="7"/><text x="74.4019%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="74.4750%" y="677" width="0.2423%" height="15" fill="rgb(205,176,3)" fg:x="922" fg:w="3"/><text x="74.7250%" y="687.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="74.4750%" y="661" width="0.2423%" height="15" fill="rgb(235,151,15)" fg:x="922" fg:w="3"/><text x="74.7250%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="74.4750%" y="645" width="0.2423%" height="15" fill="rgb(237,209,11)" fg:x="922" fg:w="3"/><text x="74.7250%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.4750%" y="629" width="0.2423%" height="15" fill="rgb(243,227,24)" fg:x="922" fg:w="3"/><text x="74.7250%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="74.4750%" y="613" width="0.2423%" height="15" fill="rgb(239,193,16)" fg:x="922" fg:w="3"/><text x="74.7250%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.4750%" y="597" width="0.2423%" height="15" fill="rgb(231,27,9)" fg:x="922" fg:w="3"/><text x="74.7250%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="74.4750%" y="581" width="0.2423%" height="15" fill="rgb(219,169,10)" fg:x="922" fg:w="3"/><text x="74.7250%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.4750%" y="565" width="0.2423%" height="15" fill="rgb(244,229,43)" fg:x="922" fg:w="3"/><text x="74.7250%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.6365%" y="549" width="0.0808%" height="15" fill="rgb(254,38,20)" fg:x="924" fg:w="1"/><text x="74.8865%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.6365%" y="533" width="0.0808%" height="15" fill="rgb(250,47,30)" fg:x="924" fg:w="1"/><text x="74.8865%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6365%" y="517" width="0.0808%" height="15" fill="rgb(224,124,36)" fg:x="924" fg:w="1"/><text x="74.8865%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7981%" y="677" width="0.0808%" height="15" fill="rgb(246,68,51)" fg:x="926" fg:w="1"/><text x="75.0481%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8788%" y="645" width="0.0808%" height="15" fill="rgb(253,43,49)" fg:x="927" fg:w="1"/><text x="75.1288%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.9596%" y="613" width="0.0808%" height="15" fill="rgb(219,54,36)" fg:x="928" fg:w="1"/><text x="75.2096%" y="623.50"></text></g><g><title>engine::users::model::username_to_key (6 samples, 0.48%)</title><rect x="74.7173%" y="709" width="0.4847%" height="15" fill="rgb(227,133,34)" fg:x="925" fg:w="6"/><text x="74.9673%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="74.7173%" y="693" width="0.4847%" height="15" fill="rgb(247,227,15)" fg:x="925" fg:w="6"/><text x="74.9673%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="74.8788%" y="677" width="0.3231%" height="15" fill="rgb(229,96,14)" fg:x="927" fg:w="4"/><text x="75.1288%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="74.8788%" y="661" width="0.3231%" height="15" fill="rgb(220,79,17)" fg:x="927" fg:w="4"/><text x="75.1288%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="74.9596%" y="645" width="0.2423%" height="15" fill="rgb(205,131,53)" fg:x="928" fg:w="3"/><text x="75.2096%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="74.9596%" y="629" width="0.2423%" height="15" fill="rgb(209,50,29)" fg:x="928" fg:w="3"/><text x="75.2096%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="75.0404%" y="613" width="0.1616%" height="15" fill="rgb(245,86,46)" fg:x="929" fg:w="2"/><text x="75.2904%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1212%" y="597" width="0.0808%" height="15" fill="rgb(235,66,46)" fg:x="930" fg:w="1"/><text x="75.3712%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="75.2019%" y="661" width="0.0808%" height="15" fill="rgb(232,148,31)" fg:x="931" fg:w="1"/><text x="75.4519%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.2019%" y="645" width="0.0808%" height="15" fill="rgb(217,149,8)" fg:x="931" fg:w="1"/><text x="75.4519%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2019%" y="629" width="0.0808%" height="15" fill="rgb(209,183,11)" fg:x="931" fg:w="1"/><text x="75.4519%" y="639.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="75.2827%" y="661" width="0.0808%" height="15" fill="rgb(208,55,20)" fg:x="932" fg:w="1"/><text x="75.5327%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4443%" y="613" width="0.0808%" height="15" fill="rgb(218,39,14)" fg:x="934" fg:w="1"/><text x="75.6943%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.5250%" y="613" width="0.0808%" height="15" fill="rgb(216,169,33)" fg:x="935" fg:w="1"/><text x="75.7750%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.5250%" y="597" width="0.0808%" height="15" fill="rgb(233,80,24)" fg:x="935" fg:w="1"/><text x="75.7750%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="75.5250%" y="581" width="0.0808%" height="15" fill="rgb(213,179,31)" fg:x="935" fg:w="1"/><text x="75.7750%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="75.5250%" y="565" width="0.0808%" height="15" fill="rgb(209,19,5)" fg:x="935" fg:w="1"/><text x="75.7750%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.6866%" y="581" width="0.0808%" height="15" fill="rgb(219,18,35)" fg:x="937" fg:w="1"/><text x="75.9366%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.6866%" y="565" width="0.0808%" height="15" fill="rgb(209,169,16)" fg:x="937" fg:w="1"/><text x="75.9366%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.7674%" y="533" width="0.0808%" height="15" fill="rgb(245,90,51)" fg:x="938" fg:w="1"/><text x="76.0174%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7674%" y="517" width="0.0808%" height="15" fill="rgb(220,99,45)" fg:x="938" fg:w="1"/><text x="76.0174%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.7674%" y="501" width="0.0808%" height="15" fill="rgb(249,89,25)" fg:x="938" fg:w="1"/><text x="76.0174%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.7674%" y="565" width="0.1616%" height="15" fill="rgb(239,193,0)" fg:x="938" fg:w="2"/><text x="76.0174%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.7674%" y="549" width="0.1616%" height="15" fill="rgb(231,126,1)" fg:x="938" fg:w="2"/><text x="76.0174%" y="559.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.8481%" y="533" width="0.0808%" height="15" fill="rgb(243,166,3)" fg:x="939" fg:w="1"/><text x="76.0981%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="75.8481%" y="517" width="0.0808%" height="15" fill="rgb(223,22,34)" fg:x="939" fg:w="1"/><text x="76.0981%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="75.8481%" y="501" width="0.0808%" height="15" fill="rgb(251,52,51)" fg:x="939" fg:w="1"/><text x="76.0981%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.65%)</title><rect x="75.3635%" y="661" width="0.6462%" height="15" fill="rgb(221,165,28)" fg:x="933" fg:w="8"/><text x="75.6135%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.65%)</title><rect x="75.3635%" y="645" width="0.6462%" height="15" fill="rgb(218,121,47)" fg:x="933" fg:w="8"/><text x="75.6135%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="75.3635%" y="629" width="0.6462%" height="15" fill="rgb(209,120,9)" fg:x="933" fg:w="8"/><text x="75.6135%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="75.6058%" y="613" width="0.4039%" height="15" fill="rgb(236,68,12)" fg:x="936" fg:w="5"/><text x="75.8558%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="75.6866%" y="597" width="0.3231%" height="15" fill="rgb(225,194,26)" fg:x="937" fg:w="4"/><text x="75.9366%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="75.7674%" y="581" width="0.2423%" height="15" fill="rgb(231,84,39)" fg:x="938" fg:w="3"/><text x="76.0174%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.9289%" y="565" width="0.0808%" height="15" fill="rgb(210,11,45)" fg:x="940" fg:w="1"/><text x="76.1789%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.9289%" y="549" width="0.0808%" height="15" fill="rgb(224,54,52)" fg:x="940" fg:w="1"/><text x="76.1789%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.9289%" y="533" width="0.0808%" height="15" fill="rgb(238,102,14)" fg:x="940" fg:w="1"/><text x="76.1789%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.0097%" y="597" width="0.1616%" height="15" fill="rgb(243,160,52)" fg:x="941" fg:w="2"/><text x="76.2597%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0905%" y="581" width="0.0808%" height="15" fill="rgb(216,114,19)" fg:x="942" fg:w="1"/><text x="76.3405%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0905%" y="565" width="0.0808%" height="15" fill="rgb(244,166,37)" fg:x="942" fg:w="1"/><text x="76.3405%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0905%" y="549" width="0.0808%" height="15" fill="rgb(246,29,44)" fg:x="942" fg:w="1"/><text x="76.3405%" y="559.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="76.0905%" y="533" width="0.0808%" height="15" fill="rgb(215,56,53)" fg:x="942" fg:w="1"/><text x="76.3405%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="76.0905%" y="517" width="0.0808%" height="15" fill="rgb(217,60,2)" fg:x="942" fg:w="1"/><text x="76.3405%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (944 samples, 76.25%)</title><rect x="0.0000%" y="789" width="76.2520%" height="15" fill="rgb(207,26,24)" fg:x="0" fg:w="944"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (944 samples, 76.25%)</title><rect x="0.0000%" y="773" width="76.2520%" height="15" fill="rgb(252,210,15)" fg:x="0" fg:w="944"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (944 samples, 76.25%)</title><rect x="0.0000%" y="757" width="76.2520%" height="15" fill="rgb(253,209,26)" fg:x="0" fg:w="944"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (602 samples, 48.63%)</title><rect x="27.6252%" y="741" width="48.6268%" height="15" fill="rgb(238,170,14)" fg:x="342" fg:w="602"/><text x="27.8752%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (602 samples, 48.63%)</title><rect x="27.6252%" y="725" width="48.6268%" height="15" fill="rgb(216,178,15)" fg:x="342" fg:w="602"/><text x="27.8752%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (13 samples, 1.05%)</title><rect x="75.2019%" y="709" width="1.0501%" height="15" fill="rgb(250,197,2)" fg:x="931" fg:w="13"/><text x="75.4519%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.05%)</title><rect x="75.2019%" y="693" width="1.0501%" height="15" fill="rgb(212,70,42)" fg:x="931" fg:w="13"/><text x="75.4519%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.05%)</title><rect x="75.2019%" y="677" width="1.0501%" height="15" fill="rgb(227,213,9)" fg:x="931" fg:w="13"/><text x="75.4519%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="76.0097%" y="661" width="0.2423%" height="15" fill="rgb(245,99,25)" fg:x="941" fg:w="3"/><text x="76.2597%" y="671.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="76.0097%" y="645" width="0.2423%" height="15" fill="rgb(250,82,29)" fg:x="941" fg:w="3"/><text x="76.2597%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="76.0097%" y="629" width="0.2423%" height="15" fill="rgb(241,226,54)" fg:x="941" fg:w="3"/><text x="76.2597%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="76.0097%" y="613" width="0.2423%" height="15" fill="rgb(221,99,41)" fg:x="941" fg:w="3"/><text x="76.2597%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.1712%" y="597" width="0.0808%" height="15" fill="rgb(213,90,21)" fg:x="943" fg:w="1"/><text x="76.4212%" y="607.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="76.3328%" y="725" width="0.1616%" height="15" fill="rgb(205,208,24)" fg:x="945" fg:w="2"/><text x="76.5828%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.3328%" y="709" width="0.1616%" height="15" fill="rgb(246,31,12)" fg:x="945" fg:w="2"/><text x="76.5828%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="76.4136%" y="693" width="0.0808%" height="15" fill="rgb(213,154,6)" fg:x="946" fg:w="1"/><text x="76.6636%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="76.4136%" y="677" width="0.0808%" height="15" fill="rgb(222,163,29)" fg:x="946" fg:w="1"/><text x="76.6636%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4136%" y="661" width="0.0808%" height="15" fill="rgb(227,201,8)" fg:x="946" fg:w="1"/><text x="76.6636%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.4943%" y="661" width="0.0808%" height="15" fill="rgb(233,9,32)" fg:x="947" fg:w="1"/><text x="76.7443%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4943%" y="645" width="0.0808%" height="15" fill="rgb(217,54,24)" fg:x="947" fg:w="1"/><text x="76.7443%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4943%" y="629" width="0.0808%" height="15" fill="rgb(235,192,0)" fg:x="947" fg:w="1"/><text x="76.7443%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.4943%" y="613" width="0.0808%" height="15" fill="rgb(235,45,9)" fg:x="947" fg:w="1"/><text x="76.7443%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4943%" y="597" width="0.0808%" height="15" fill="rgb(246,42,40)" fg:x="947" fg:w="1"/><text x="76.7443%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.6559%" y="629" width="0.0808%" height="15" fill="rgb(248,111,24)" fg:x="949" fg:w="1"/><text x="76.9059%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6559%" y="613" width="0.0808%" height="15" fill="rgb(249,65,22)" fg:x="949" fg:w="1"/><text x="76.9059%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="76.2520%" y="741" width="0.5654%" height="15" fill="rgb(238,111,51)" fg:x="944" fg:w="7"/><text x="76.5020%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (4 samples, 0.32%)</title><rect x="76.4943%" y="725" width="0.3231%" height="15" fill="rgb(250,118,22)" fg:x="947" fg:w="4"/><text x="76.7443%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="76.4943%" y="709" width="0.3231%" height="15" fill="rgb(234,84,26)" fg:x="947" fg:w="4"/><text x="76.7443%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="76.4943%" y="693" width="0.3231%" height="15" fill="rgb(243,172,12)" fg:x="947" fg:w="4"/><text x="76.7443%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="76.4943%" y="677" width="0.3231%" height="15" fill="rgb(236,150,49)" fg:x="947" fg:w="4"/><text x="76.7443%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="76.5751%" y="661" width="0.2423%" height="15" fill="rgb(225,197,26)" fg:x="948" fg:w="3"/><text x="76.8251%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="76.5751%" y="645" width="0.2423%" height="15" fill="rgb(214,17,42)" fg:x="948" fg:w="3"/><text x="76.8251%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.7367%" y="629" width="0.0808%" height="15" fill="rgb(224,165,40)" fg:x="950" fg:w="1"/><text x="76.9867%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.7367%" y="613" width="0.0808%" height="15" fill="rgb(246,100,4)" fg:x="950" fg:w="1"/><text x="76.9867%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.7367%" y="597" width="0.0808%" height="15" fill="rgb(222,103,0)" fg:x="950" fg:w="1"/><text x="76.9867%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7367%" y="581" width="0.0808%" height="15" fill="rgb(227,189,26)" fg:x="950" fg:w="1"/><text x="76.9867%" y="591.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="76.8174%" y="645" width="0.0808%" height="15" fill="rgb(214,202,17)" fg:x="951" fg:w="1"/><text x="77.0674%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="76.8174%" y="629" width="0.0808%" height="15" fill="rgb(229,111,3)" fg:x="951" fg:w="1"/><text x="77.0674%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="76.8174%" y="613" width="0.0808%" height="15" fill="rgb(229,172,15)" fg:x="951" fg:w="1"/><text x="77.0674%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="76.8174%" y="597" width="0.0808%" height="15" fill="rgb(230,224,35)" fg:x="951" fg:w="1"/><text x="77.0674%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="76.8174%" y="581" width="0.0808%" height="15" fill="rgb(251,141,6)" fg:x="951" fg:w="1"/><text x="77.0674%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::actions::PutInsideAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="76.8982%" y="613" width="0.0808%" height="15" fill="rgb(225,208,6)" fg:x="952" fg:w="1"/><text x="77.1482%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="76.8982%" y="597" width="0.0808%" height="15" fill="rgb(246,181,16)" fg:x="952" fg:w="1"/><text x="77.1482%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.8982%" y="581" width="0.0808%" height="15" fill="rgb(227,129,36)" fg:x="952" fg:w="1"/><text x="77.1482%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="76.8982%" y="645" width="0.1616%" height="15" fill="rgb(248,117,24)" fg:x="952" fg:w="2"/><text x="77.1482%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="76.8982%" y="629" width="0.1616%" height="15" fill="rgb(214,185,35)" fg:x="952" fg:w="2"/><text x="77.1482%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.9790%" y="613" width="0.0808%" height="15" fill="rgb(236,150,34)" fg:x="953" fg:w="1"/><text x="77.2290%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.9790%" y="597" width="0.0808%" height="15" fill="rgb(243,228,27)" fg:x="953" fg:w="1"/><text x="77.2290%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.9790%" y="581" width="0.0808%" height="15" fill="rgb(245,77,44)" fg:x="953" fg:w="1"/><text x="77.2290%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 0.40%)</title><rect x="76.8174%" y="661" width="0.4039%" height="15" fill="rgb(235,214,42)" fg:x="951" fg:w="5"/><text x="77.0674%" y="671.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="77.0598%" y="645" width="0.1616%" height="15" fill="rgb(221,74,3)" fg:x="954" fg:w="2"/><text x="77.3098%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="77.0598%" y="629" width="0.1616%" height="15" fill="rgb(206,121,29)" fg:x="954" fg:w="2"/><text x="77.3098%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="77.0598%" y="613" width="0.1616%" height="15" fill="rgb(249,131,53)" fg:x="954" fg:w="2"/><text x="77.3098%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="77.1405%" y="597" width="0.0808%" height="15" fill="rgb(236,170,29)" fg:x="955" fg:w="1"/><text x="77.3905%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="77.2213%" y="661" width="0.0808%" height="15" fill="rgb(247,96,15)" fg:x="956" fg:w="1"/><text x="77.4713%" y="671.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="77.2213%" y="645" width="0.0808%" height="15" fill="rgb(211,210,7)" fg:x="956" fg:w="1"/><text x="77.4713%" y="655.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="77.2213%" y="629" width="0.0808%" height="15" fill="rgb(240,88,50)" fg:x="956" fg:w="1"/><text x="77.4713%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="77.2213%" y="613" width="0.0808%" height="15" fill="rgb(209,229,26)" fg:x="956" fg:w="1"/><text x="77.4713%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="77.2213%" y="597" width="0.0808%" height="15" fill="rgb(210,68,23)" fg:x="956" fg:w="1"/><text x="77.4713%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="77.2213%" y="581" width="0.0808%" height="15" fill="rgb(229,180,13)" fg:x="956" fg:w="1"/><text x="77.4713%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="77.2213%" y="565" width="0.0808%" height="15" fill="rgb(236,53,44)" fg:x="956" fg:w="1"/><text x="77.4713%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (7 samples, 0.57%)</title><rect x="76.8174%" y="741" width="0.5654%" height="15" fill="rgb(244,214,29)" fg:x="951" fg:w="7"/><text x="77.0674%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (7 samples, 0.57%)</title><rect x="76.8174%" y="725" width="0.5654%" height="15" fill="rgb(220,75,29)" fg:x="951" fg:w="7"/><text x="77.0674%" y="735.50"></text></g><g><title>engine::session::Session::new (7 samples, 0.57%)</title><rect x="76.8174%" y="709" width="0.5654%" height="15" fill="rgb(214,183,37)" fg:x="951" fg:w="7"/><text x="77.0674%" y="719.50"></text></g><g><title>engine::session::Session::initialize (7 samples, 0.57%)</title><rect x="76.8174%" y="693" width="0.5654%" height="15" fill="rgb(239,117,29)" fg:x="951" fg:w="7"/><text x="77.0674%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.57%)</title><rect x="76.8174%" y="677" width="0.5654%" height="15" fill="rgb(237,171,35)" fg:x="951" fg:w="7"/><text x="77.0674%" y="687.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="77.3021%" y="661" width="0.0808%" height="15" fill="rgb(229,178,53)" fg:x="957" fg:w="1"/><text x="77.5521%" y="671.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (1 samples, 0.08%)</title><rect x="77.3021%" y="645" width="0.0808%" height="15" fill="rgb(210,102,19)" fg:x="957" fg:w="1"/><text x="77.5521%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.3021%" y="629" width="0.0808%" height="15" fill="rgb(235,127,22)" fg:x="957" fg:w="1"/><text x="77.5521%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.3021%" y="613" width="0.0808%" height="15" fill="rgb(244,31,31)" fg:x="957" fg:w="1"/><text x="77.5521%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.3021%" y="597" width="0.0808%" height="15" fill="rgb(231,43,21)" fg:x="957" fg:w="1"/><text x="77.5521%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.3021%" y="581" width="0.0808%" height="15" fill="rgb(217,131,35)" fg:x="957" fg:w="1"/><text x="77.5521%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.3021%" y="565" width="0.0808%" height="15" fill="rgb(221,149,4)" fg:x="957" fg:w="1"/><text x="77.5521%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.3021%" y="549" width="0.0808%" height="15" fill="rgb(232,170,28)" fg:x="957" fg:w="1"/><text x="77.5521%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.3021%" y="533" width="0.0808%" height="15" fill="rgb(238,56,10)" fg:x="957" fg:w="1"/><text x="77.5521%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.3021%" y="517" width="0.0808%" height="15" fill="rgb(235,196,14)" fg:x="957" fg:w="1"/><text x="77.5521%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.3021%" y="501" width="0.0808%" height="15" fill="rgb(216,45,48)" fg:x="957" fg:w="1"/><text x="77.5521%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.3021%" y="485" width="0.0808%" height="15" fill="rgb(238,213,17)" fg:x="957" fg:w="1"/><text x="77.5521%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.3021%" y="469" width="0.0808%" height="15" fill="rgb(212,13,2)" fg:x="957" fg:w="1"/><text x="77.5521%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.3021%" y="453" width="0.0808%" height="15" fill="rgb(240,114,20)" fg:x="957" fg:w="1"/><text x="77.5521%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.3021%" y="437" width="0.0808%" height="15" fill="rgb(228,41,40)" fg:x="957" fg:w="1"/><text x="77.5521%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3021%" y="421" width="0.0808%" height="15" fill="rgb(244,132,35)" fg:x="957" fg:w="1"/><text x="77.5521%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.3829%" y="677" width="0.0808%" height="15" fill="rgb(253,189,4)" fg:x="958" fg:w="1"/><text x="77.6329%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="77.3829%" y="661" width="0.0808%" height="15" fill="rgb(224,37,19)" fg:x="958" fg:w="1"/><text x="77.6329%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3829%" y="645" width="0.0808%" height="15" fill="rgb(235,223,18)" fg:x="958" fg:w="1"/><text x="77.6329%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4637%" y="597" width="0.0808%" height="15" fill="rgb(235,163,25)" fg:x="959" fg:w="1"/><text x="77.7137%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4637%" y="581" width="0.0808%" height="15" fill="rgb(217,145,28)" fg:x="959" fg:w="1"/><text x="77.7137%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4637%" y="565" width="0.0808%" height="15" fill="rgb(223,223,32)" fg:x="959" fg:w="1"/><text x="77.7137%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.4637%" y="549" width="0.0808%" height="15" fill="rgb(227,189,39)" fg:x="959" fg:w="1"/><text x="77.7137%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.4637%" y="533" width="0.0808%" height="15" fill="rgb(248,10,22)" fg:x="959" fg:w="1"/><text x="77.7137%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.4637%" y="517" width="0.0808%" height="15" fill="rgb(248,46,39)" fg:x="959" fg:w="1"/><text x="77.7137%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="77.4637%" y="629" width="0.1616%" height="15" fill="rgb(248,113,48)" fg:x="959" fg:w="2"/><text x="77.7137%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.4637%" y="613" width="0.1616%" height="15" fill="rgb(245,16,25)" fg:x="959" fg:w="2"/><text x="77.7137%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5444%" y="597" width="0.0808%" height="15" fill="rgb(249,152,16)" fg:x="960" fg:w="1"/><text x="77.7944%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.5444%" y="581" width="0.0808%" height="15" fill="rgb(250,16,1)" fg:x="960" fg:w="1"/><text x="77.7944%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="77.7060%" y="549" width="0.0808%" height="15" fill="rgb(249,138,3)" fg:x="962" fg:w="1"/><text x="77.9560%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.7060%" y="533" width="0.0808%" height="15" fill="rgb(227,71,41)" fg:x="962" fg:w="1"/><text x="77.9560%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7060%" y="517" width="0.0808%" height="15" fill="rgb(209,184,23)" fg:x="962" fg:w="1"/><text x="77.9560%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.6252%" y="629" width="0.2423%" height="15" fill="rgb(223,215,31)" fg:x="961" fg:w="3"/><text x="77.8752%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="77.6252%" y="613" width="0.2423%" height="15" fill="rgb(210,146,28)" fg:x="961" fg:w="3"/><text x="77.8752%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.7060%" y="597" width="0.1616%" height="15" fill="rgb(209,183,41)" fg:x="962" fg:w="2"/><text x="77.9560%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.7060%" y="581" width="0.1616%" height="15" fill="rgb(209,224,45)" fg:x="962" fg:w="2"/><text x="77.9560%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.7060%" y="565" width="0.1616%" height="15" fill="rgb(224,209,51)" fg:x="962" fg:w="2"/><text x="77.9560%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7868%" y="549" width="0.0808%" height="15" fill="rgb(223,17,39)" fg:x="963" fg:w="1"/><text x="78.0368%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7868%" y="533" width="0.0808%" height="15" fill="rgb(234,204,37)" fg:x="963" fg:w="1"/><text x="78.0368%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="77.8675%" y="613" width="0.0808%" height="15" fill="rgb(236,120,5)" fg:x="964" fg:w="1"/><text x="78.1175%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="77.8675%" y="597" width="0.0808%" height="15" fill="rgb(248,97,27)" fg:x="964" fg:w="1"/><text x="78.1175%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.8675%" y="581" width="0.0808%" height="15" fill="rgb(240,66,17)" fg:x="964" fg:w="1"/><text x="78.1175%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9483%" y="581" width="0.0808%" height="15" fill="rgb(210,79,3)" fg:x="965" fg:w="1"/><text x="78.1983%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.1099%" y="533" width="0.0808%" height="15" fill="rgb(214,176,27)" fg:x="967" fg:w="1"/><text x="78.3599%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1099%" y="517" width="0.0808%" height="15" fill="rgb(235,185,3)" fg:x="967" fg:w="1"/><text x="78.3599%" y="527.50"></text></g><g><title>engine::session::Session::flush (11 samples, 0.89%)</title><rect x="77.3829%" y="725" width="0.8885%" height="15" fill="rgb(227,24,12)" fg:x="958" fg:w="11"/><text x="77.6329%" y="735.50"></text></g><g><title>engine::session::state::State::close (11 samples, 0.89%)</title><rect x="77.3829%" y="709" width="0.8885%" height="15" fill="rgb(252,169,48)" fg:x="958" fg:w="11"/><text x="77.6329%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (11 samples, 0.89%)</title><rect x="77.3829%" y="693" width="0.8885%" height="15" fill="rgb(212,65,1)" fg:x="958" fg:w="11"/><text x="77.6329%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (10 samples, 0.81%)</title><rect x="77.4637%" y="677" width="0.8078%" height="15" fill="rgb(242,39,24)" fg:x="959" fg:w="10"/><text x="77.7137%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.81%)</title><rect x="77.4637%" y="661" width="0.8078%" height="15" fill="rgb(249,32,23)" fg:x="959" fg:w="10"/><text x="77.7137%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (10 samples, 0.81%)</title><rect x="77.4637%" y="645" width="0.8078%" height="15" fill="rgb(251,195,23)" fg:x="959" fg:w="10"/><text x="77.7137%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="77.8675%" y="629" width="0.4039%" height="15" fill="rgb(236,174,8)" fg:x="964" fg:w="5"/><text x="78.1175%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="77.9483%" y="613" width="0.3231%" height="15" fill="rgb(220,197,8)" fg:x="965" fg:w="4"/><text x="78.1983%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="77.9483%" y="597" width="0.3231%" height="15" fill="rgb(240,108,37)" fg:x="965" fg:w="4"/><text x="78.1983%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="78.0291%" y="581" width="0.2423%" height="15" fill="rgb(232,176,24)" fg:x="966" fg:w="3"/><text x="78.2791%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="78.1099%" y="565" width="0.1616%" height="15" fill="rgb(243,35,29)" fg:x="967" fg:w="2"/><text x="78.3599%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.1099%" y="549" width="0.1616%" height="15" fill="rgb(210,37,18)" fg:x="967" fg:w="2"/><text x="78.3599%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1906%" y="533" width="0.0808%" height="15" fill="rgb(224,184,40)" fg:x="968" fg:w="1"/><text x="78.4406%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.1906%" y="517" width="0.0808%" height="15" fill="rgb(236,39,29)" fg:x="968" fg:w="1"/><text x="78.4406%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1906%" y="501" width="0.0808%" height="15" fill="rgb(232,48,39)" fg:x="968" fg:w="1"/><text x="78.4406%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.1906%" y="485" width="0.0808%" height="15" fill="rgb(236,34,42)" fg:x="968" fg:w="1"/><text x="78.4406%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1906%" y="469" width="0.0808%" height="15" fill="rgb(243,106,37)" fg:x="968" fg:w="1"/><text x="78.4406%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1906%" y="453" width="0.0808%" height="15" fill="rgb(218,96,6)" fg:x="968" fg:w="1"/><text x="78.4406%" y="463.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="78.2714%" y="725" width="0.0808%" height="15" fill="rgb(235,130,12)" fg:x="969" fg:w="1"/><text x="78.5214%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="78.2714%" y="709" width="0.0808%" height="15" fill="rgb(231,95,0)" fg:x="969" fg:w="1"/><text x="78.5214%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="78.2714%" y="693" width="0.0808%" height="15" fill="rgb(228,12,23)" fg:x="969" fg:w="1"/><text x="78.5214%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2714%" y="677" width="0.0808%" height="15" fill="rgb(216,12,1)" fg:x="969" fg:w="1"/><text x="78.5214%" y="687.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="78.3522%" y="693" width="0.0808%" height="15" fill="rgb(219,59,3)" fg:x="970" fg:w="1"/><text x="78.6022%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="78.3522%" y="677" width="0.0808%" height="15" fill="rgb(215,208,46)" fg:x="970" fg:w="1"/><text x="78.6022%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.3522%" y="661" width="0.0808%" height="15" fill="rgb(254,224,29)" fg:x="970" fg:w="1"/><text x="78.6022%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3522%" y="645" width="0.0808%" height="15" fill="rgb(232,14,29)" fg:x="970" fg:w="1"/><text x="78.6022%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.3522%" y="629" width="0.0808%" height="15" fill="rgb(208,45,52)" fg:x="970" fg:w="1"/><text x="78.6022%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3522%" y="613" width="0.0808%" height="15" fill="rgb(234,191,28)" fg:x="970" fg:w="1"/><text x="78.6022%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="78.3522%" y="597" width="0.0808%" height="15" fill="rgb(244,67,43)" fg:x="970" fg:w="1"/><text x="78.6022%" y="607.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="78.3522%" y="581" width="0.0808%" height="15" fill="rgb(236,189,24)" fg:x="970" fg:w="1"/><text x="78.6022%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="78.3522%" y="725" width="0.1616%" height="15" fill="rgb(239,214,33)" fg:x="970" fg:w="2"/><text x="78.6022%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="78.3522%" y="709" width="0.1616%" height="15" fill="rgb(226,176,41)" fg:x="970" fg:w="2"/><text x="78.6022%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="78.4330%" y="693" width="0.0808%" height="15" fill="rgb(248,47,8)" fg:x="971" fg:w="1"/><text x="78.6830%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="78.4330%" y="677" width="0.0808%" height="15" fill="rgb(218,81,44)" fg:x="971" fg:w="1"/><text x="78.6830%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="78.4330%" y="661" width="0.0808%" height="15" fill="rgb(213,98,6)" fg:x="971" fg:w="1"/><text x="78.6830%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="78.4330%" y="645" width="0.0808%" height="15" fill="rgb(222,85,22)" fg:x="971" fg:w="1"/><text x="78.6830%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.4330%" y="629" width="0.0808%" height="15" fill="rgb(239,46,39)" fg:x="971" fg:w="1"/><text x="78.6830%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.4330%" y="613" width="0.0808%" height="15" fill="rgb(237,12,29)" fg:x="971" fg:w="1"/><text x="78.6830%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="78.5137%" y="725" width="0.0808%" height="15" fill="rgb(214,77,8)" fg:x="972" fg:w="1"/><text x="78.7637%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="78.5137%" y="709" width="0.0808%" height="15" fill="rgb(217,168,37)" fg:x="972" fg:w="1"/><text x="78.7637%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="78.5137%" y="693" width="0.0808%" height="15" fill="rgb(221,217,23)" fg:x="972" fg:w="1"/><text x="78.7637%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="78.5137%" y="677" width="0.0808%" height="15" fill="rgb(243,229,36)" fg:x="972" fg:w="1"/><text x="78.7637%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="78.5137%" y="661" width="0.0808%" height="15" fill="rgb(251,163,40)" fg:x="972" fg:w="1"/><text x="78.7637%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="78.5137%" y="645" width="0.0808%" height="15" fill="rgb(237,222,12)" fg:x="972" fg:w="1"/><text x="78.7637%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.5137%" y="629" width="0.0808%" height="15" fill="rgb(248,132,6)" fg:x="972" fg:w="1"/><text x="78.7637%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="78.6753%" y="693" width="0.0808%" height="15" fill="rgb(227,167,50)" fg:x="974" fg:w="1"/><text x="78.9253%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.6753%" y="677" width="0.0808%" height="15" fill="rgb(242,84,37)" fg:x="974" fg:w="1"/><text x="78.9253%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.6753%" y="661" width="0.0808%" height="15" fill="rgb(212,4,50)" fg:x="974" fg:w="1"/><text x="78.9253%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="78.6753%" y="709" width="0.1616%" height="15" fill="rgb(230,228,32)" fg:x="974" fg:w="2"/><text x="78.9253%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="78.7561%" y="693" width="0.0808%" height="15" fill="rgb(248,217,23)" fg:x="975" fg:w="1"/><text x="79.0061%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.8368%" y="709" width="0.0808%" height="15" fill="rgb(238,197,32)" fg:x="976" fg:w="1"/><text x="79.0868%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.8368%" y="693" width="0.0808%" height="15" fill="rgb(236,106,1)" fg:x="976" fg:w="1"/><text x="79.0868%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.8368%" y="677" width="0.0808%" height="15" fill="rgb(219,228,13)" fg:x="976" fg:w="1"/><text x="79.0868%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.8368%" y="661" width="0.0808%" height="15" fill="rgb(238,30,35)" fg:x="976" fg:w="1"/><text x="79.0868%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.8368%" y="645" width="0.0808%" height="15" fill="rgb(236,70,23)" fg:x="976" fg:w="1"/><text x="79.0868%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.8368%" y="629" width="0.0808%" height="15" fill="rgb(249,104,48)" fg:x="976" fg:w="1"/><text x="79.0868%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::Build&gt; (1 samples, 0.08%)</title><rect x="78.9176%" y="709" width="0.0808%" height="15" fill="rgb(254,117,50)" fg:x="977" fg:w="1"/><text x="79.1676%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="78.9984%" y="693" width="0.0808%" height="15" fill="rgb(223,152,4)" fg:x="978" fg:w="1"/><text x="79.2484%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.9984%" y="677" width="0.0808%" height="15" fill="rgb(245,6,2)" fg:x="978" fg:w="1"/><text x="79.2484%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.1599%" y="581" width="0.0808%" height="15" fill="rgb(249,150,24)" fg:x="980" fg:w="1"/><text x="79.4099%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.1599%" y="565" width="0.0808%" height="15" fill="rgb(228,185,42)" fg:x="980" fg:w="1"/><text x="79.4099%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.1599%" y="549" width="0.0808%" height="15" fill="rgb(226,39,33)" fg:x="980" fg:w="1"/><text x="79.4099%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.1599%" y="533" width="0.0808%" height="15" fill="rgb(221,166,19)" fg:x="980" fg:w="1"/><text x="79.4099%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="79.1599%" y="597" width="0.2423%" height="15" fill="rgb(209,109,2)" fg:x="980" fg:w="3"/><text x="79.4099%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.2407%" y="581" width="0.1616%" height="15" fill="rgb(252,216,26)" fg:x="981" fg:w="2"/><text x="79.4907%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.2407%" y="565" width="0.1616%" height="15" fill="rgb(227,173,36)" fg:x="981" fg:w="2"/><text x="79.4907%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.2407%" y="549" width="0.1616%" height="15" fill="rgb(209,90,7)" fg:x="981" fg:w="2"/><text x="79.4907%" y="559.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="79.3215%" y="533" width="0.0808%" height="15" fill="rgb(250,194,11)" fg:x="982" fg:w="1"/><text x="79.5715%" y="543.50"></text></g><g><title>burrow_bon::perms::find_acls (1 samples, 0.08%)</title><rect x="79.4023%" y="597" width="0.0808%" height="15" fill="rgb(220,72,50)" fg:x="983" fg:w="1"/><text x="79.6523%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.4830%" y="597" width="0.0808%" height="15" fill="rgb(222,106,48)" fg:x="984" fg:w="1"/><text x="79.7330%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="79.4830%" y="581" width="0.0808%" height="15" fill="rgb(216,220,45)" fg:x="984" fg:w="1"/><text x="79.7330%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.4830%" y="565" width="0.0808%" height="15" fill="rgb(234,112,18)" fg:x="984" fg:w="1"/><text x="79.7330%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.4830%" y="549" width="0.0808%" height="15" fill="rgb(206,179,9)" fg:x="984" fg:w="1"/><text x="79.7330%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.4830%" y="533" width="0.0808%" height="15" fill="rgb(215,115,40)" fg:x="984" fg:w="1"/><text x="79.7330%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="79.5638%" y="581" width="0.0808%" height="15" fill="rgb(222,69,34)" fg:x="985" fg:w="1"/><text x="79.8138%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.5638%" y="565" width="0.0808%" height="15" fill="rgb(209,161,10)" fg:x="985" fg:w="1"/><text x="79.8138%" y="575.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPath as core::convert::From&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="79.5638%" y="549" width="0.0808%" height="15" fill="rgb(217,6,38)" fg:x="985" fg:w="1"/><text x="79.8138%" y="559.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="79.6446%" y="549" width="0.0808%" height="15" fill="rgb(229,229,48)" fg:x="986" fg:w="1"/><text x="79.8946%" y="559.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.81%)</title><rect x="78.9984%" y="709" width="0.8078%" height="15" fill="rgb(225,21,28)" fg:x="978" fg:w="10"/><text x="79.2484%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (9 samples, 0.73%)</title><rect x="79.0792%" y="693" width="0.7270%" height="15" fill="rgb(206,33,13)" fg:x="979" fg:w="9"/><text x="79.3292%" y="703.50"></text></g><g><title>engine::session::state::State::close (9 samples, 0.73%)</title><rect x="79.0792%" y="677" width="0.7270%" height="15" fill="rgb(242,178,17)" fg:x="979" fg:w="9"/><text x="79.3292%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (9 samples, 0.73%)</title><rect x="79.0792%" y="661" width="0.7270%" height="15" fill="rgb(220,162,5)" fg:x="979" fg:w="9"/><text x="79.3292%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.73%)</title><rect x="79.0792%" y="645" width="0.7270%" height="15" fill="rgb(210,33,43)" fg:x="979" fg:w="9"/><text x="79.3292%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.73%)</title><rect x="79.0792%" y="629" width="0.7270%" height="15" fill="rgb(216,116,54)" fg:x="979" fg:w="9"/><text x="79.3292%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (9 samples, 0.73%)</title><rect x="79.0792%" y="613" width="0.7270%" height="15" fill="rgb(249,92,24)" fg:x="979" fg:w="9"/><text x="79.3292%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="79.5638%" y="597" width="0.2423%" height="15" fill="rgb(231,189,14)" fg:x="985" fg:w="3"/><text x="79.8138%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="79.6446%" y="581" width="0.1616%" height="15" fill="rgb(230,8,41)" fg:x="986" fg:w="2"/><text x="79.8946%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="79.6446%" y="565" width="0.1616%" height="15" fill="rgb(249,7,27)" fg:x="986" fg:w="2"/><text x="79.8946%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="79.7254%" y="549" width="0.0808%" height="15" fill="rgb(232,86,5)" fg:x="987" fg:w="1"/><text x="79.9754%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="79.7254%" y="533" width="0.0808%" height="15" fill="rgb(224,175,18)" fg:x="987" fg:w="1"/><text x="79.9754%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.7254%" y="517" width="0.0808%" height="15" fill="rgb(220,129,12)" fg:x="987" fg:w="1"/><text x="79.9754%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.7254%" y="501" width="0.0808%" height="15" fill="rgb(210,19,36)" fg:x="987" fg:w="1"/><text x="79.9754%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.7254%" y="485" width="0.0808%" height="15" fill="rgb(219,96,14)" fg:x="987" fg:w="1"/><text x="79.9754%" y="495.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="79.8061%" y="709" width="0.0808%" height="15" fill="rgb(249,106,1)" fg:x="988" fg:w="1"/><text x="80.0561%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="79.8061%" y="693" width="0.0808%" height="15" fill="rgb(249,155,20)" fg:x="988" fg:w="1"/><text x="80.0561%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="79.8061%" y="677" width="0.0808%" height="15" fill="rgb(244,168,9)" fg:x="988" fg:w="1"/><text x="80.0561%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="79.8061%" y="661" width="0.0808%" height="15" fill="rgb(216,23,50)" fg:x="988" fg:w="1"/><text x="80.0561%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.8061%" y="645" width="0.0808%" height="15" fill="rgb(224,219,20)" fg:x="988" fg:w="1"/><text x="80.0561%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="79.8061%" y="629" width="0.0808%" height="15" fill="rgb(222,156,15)" fg:x="988" fg:w="1"/><text x="80.0561%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="79.8061%" y="613" width="0.0808%" height="15" fill="rgb(231,97,17)" fg:x="988" fg:w="1"/><text x="80.0561%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="79.8869%" y="709" width="0.0808%" height="15" fill="rgb(218,70,48)" fg:x="989" fg:w="1"/><text x="80.1369%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="79.8869%" y="693" width="0.0808%" height="15" fill="rgb(212,196,52)" fg:x="989" fg:w="1"/><text x="80.1369%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="79.8869%" y="677" width="0.0808%" height="15" fill="rgb(243,203,18)" fg:x="989" fg:w="1"/><text x="80.1369%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="79.8869%" y="661" width="0.0808%" height="15" fill="rgb(252,125,41)" fg:x="989" fg:w="1"/><text x="80.1369%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="79.8869%" y="645" width="0.0808%" height="15" fill="rgb(223,180,33)" fg:x="989" fg:w="1"/><text x="80.1369%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="79.8869%" y="629" width="0.0808%" height="15" fill="rgb(254,159,46)" fg:x="989" fg:w="1"/><text x="80.1369%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.8869%" y="613" width="0.0808%" height="15" fill="rgb(254,38,10)" fg:x="989" fg:w="1"/><text x="80.1369%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8869%" y="597" width="0.0808%" height="15" fill="rgb(208,217,32)" fg:x="989" fg:w="1"/><text x="80.1369%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.8869%" y="581" width="0.0808%" height="15" fill="rgb(221,120,13)" fg:x="989" fg:w="1"/><text x="80.1369%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8869%" y="565" width="0.0808%" height="15" fill="rgb(246,54,52)" fg:x="989" fg:w="1"/><text x="80.1369%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.8869%" y="549" width="0.0808%" height="15" fill="rgb(242,34,25)" fg:x="989" fg:w="1"/><text x="80.1369%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8869%" y="533" width="0.0808%" height="15" fill="rgb(247,209,9)" fg:x="989" fg:w="1"/><text x="80.1369%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.8869%" y="517" width="0.0808%" height="15" fill="rgb(228,71,26)" fg:x="989" fg:w="1"/><text x="80.1369%" y="527.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="79.9677%" y="677" width="0.0808%" height="15" fill="rgb(222,145,49)" fg:x="990" fg:w="1"/><text x="80.2177%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="80.0485%" y="677" width="0.0808%" height="15" fill="rgb(218,121,17)" fg:x="991" fg:w="1"/><text x="80.2985%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="80.0485%" y="661" width="0.0808%" height="15" fill="rgb(244,50,7)" fg:x="991" fg:w="1"/><text x="80.2985%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.0485%" y="645" width="0.0808%" height="15" fill="rgb(246,229,37)" fg:x="991" fg:w="1"/><text x="80.2985%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.1292%" y="645" width="0.0808%" height="15" fill="rgb(225,18,5)" fg:x="992" fg:w="1"/><text x="80.3792%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.1292%" y="629" width="0.0808%" height="15" fill="rgb(213,204,8)" fg:x="992" fg:w="1"/><text x="80.3792%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.1292%" y="613" width="0.0808%" height="15" fill="rgb(238,103,6)" fg:x="992" fg:w="1"/><text x="80.3792%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.1292%" y="597" width="0.0808%" height="15" fill="rgb(222,25,35)" fg:x="992" fg:w="1"/><text x="80.3792%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.1292%" y="581" width="0.0808%" height="15" fill="rgb(213,203,35)" fg:x="992" fg:w="1"/><text x="80.3792%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.1292%" y="565" width="0.0808%" height="15" fill="rgb(221,79,53)" fg:x="992" fg:w="1"/><text x="80.3792%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.1292%" y="549" width="0.0808%" height="15" fill="rgb(243,200,35)" fg:x="992" fg:w="1"/><text x="80.3792%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.32%)</title><rect x="79.9677%" y="709" width="0.3231%" height="15" fill="rgb(248,60,25)" fg:x="990" fg:w="4"/><text x="80.2177%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="79.9677%" y="693" width="0.3231%" height="15" fill="rgb(227,53,46)" fg:x="990" fg:w="4"/><text x="80.2177%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="80.1292%" y="677" width="0.1616%" height="15" fill="rgb(216,120,32)" fg:x="992" fg:w="2"/><text x="80.3792%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="80.1292%" y="661" width="0.1616%" height="15" fill="rgb(220,134,1)" fg:x="992" fg:w="2"/><text x="80.3792%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="80.2100%" y="645" width="0.0808%" height="15" fill="rgb(237,168,5)" fg:x="993" fg:w="1"/><text x="80.4600%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="80.2100%" y="629" width="0.0808%" height="15" fill="rgb(231,100,33)" fg:x="993" fg:w="1"/><text x="80.4600%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2100%" y="613" width="0.0808%" height="15" fill="rgb(236,177,47)" fg:x="993" fg:w="1"/><text x="80.4600%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="80.2908%" y="709" width="0.0808%" height="15" fill="rgb(235,7,49)" fg:x="994" fg:w="1"/><text x="80.5408%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.2908%" y="693" width="0.0808%" height="15" fill="rgb(232,119,22)" fg:x="994" fg:w="1"/><text x="80.5408%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.2908%" y="677" width="0.0808%" height="15" fill="rgb(254,73,53)" fg:x="994" fg:w="1"/><text x="80.5408%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2908%" y="661" width="0.0808%" height="15" fill="rgb(251,35,20)" fg:x="994" fg:w="1"/><text x="80.5408%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="80.2908%" y="645" width="0.0808%" height="15" fill="rgb(241,119,20)" fg:x="994" fg:w="1"/><text x="80.5408%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="80.2908%" y="629" width="0.0808%" height="15" fill="rgb(207,102,14)" fg:x="994" fg:w="1"/><text x="80.5408%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="80.2908%" y="613" width="0.0808%" height="15" fill="rgb(248,201,50)" fg:x="994" fg:w="1"/><text x="80.5408%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.2908%" y="597" width="0.0808%" height="15" fill="rgb(222,185,44)" fg:x="994" fg:w="1"/><text x="80.5408%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2908%" y="581" width="0.0808%" height="15" fill="rgb(218,107,18)" fg:x="994" fg:w="1"/><text x="80.5408%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (23 samples, 1.86%)</title><rect x="78.5945%" y="725" width="1.8578%" height="15" fill="rgb(237,177,39)" fg:x="973" fg:w="23"/><text x="78.8445%" y="735.50">p..</text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="80.3716%" y="709" width="0.0808%" height="15" fill="rgb(246,69,6)" fg:x="995" fg:w="1"/><text x="80.6216%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="80.3716%" y="693" width="0.0808%" height="15" fill="rgb(234,208,37)" fg:x="995" fg:w="1"/><text x="80.6216%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.3716%" y="677" width="0.0808%" height="15" fill="rgb(225,4,6)" fg:x="995" fg:w="1"/><text x="80.6216%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="80.3716%" y="661" width="0.0808%" height="15" fill="rgb(233,45,0)" fg:x="995" fg:w="1"/><text x="80.6216%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3716%" y="645" width="0.0808%" height="15" fill="rgb(226,136,5)" fg:x="995" fg:w="1"/><text x="80.6216%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="80.3716%" y="629" width="0.0808%" height="15" fill="rgb(211,91,47)" fg:x="995" fg:w="1"/><text x="80.6216%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.3716%" y="613" width="0.0808%" height="15" fill="rgb(242,88,51)" fg:x="995" fg:w="1"/><text x="80.6216%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.3716%" y="597" width="0.0808%" height="15" fill="rgb(230,91,28)" fg:x="995" fg:w="1"/><text x="80.6216%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.4523%" y="677" width="0.0808%" height="15" fill="rgb(254,186,29)" fg:x="996" fg:w="1"/><text x="80.7023%" y="687.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="80.4523%" y="661" width="0.0808%" height="15" fill="rgb(238,6,4)" fg:x="996" fg:w="1"/><text x="80.7023%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.4523%" y="645" width="0.0808%" height="15" fill="rgb(221,151,16)" fg:x="996" fg:w="1"/><text x="80.7023%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.5331%" y="661" width="0.0808%" height="15" fill="rgb(251,143,52)" fg:x="997" fg:w="1"/><text x="80.7831%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.5331%" y="645" width="0.0808%" height="15" fill="rgb(206,90,15)" fg:x="997" fg:w="1"/><text x="80.7831%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="80.6139%" y="661" width="0.0808%" height="15" fill="rgb(218,35,8)" fg:x="998" fg:w="1"/><text x="80.8639%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.6139%" y="645" width="0.0808%" height="15" fill="rgb(239,215,6)" fg:x="998" fg:w="1"/><text x="80.8639%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="80.6139%" y="629" width="0.0808%" height="15" fill="rgb(245,116,39)" fg:x="998" fg:w="1"/><text x="80.8639%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.6139%" y="613" width="0.0808%" height="15" fill="rgb(242,65,28)" fg:x="998" fg:w="1"/><text x="80.8639%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6139%" y="597" width="0.0808%" height="15" fill="rgb(252,132,53)" fg:x="998" fg:w="1"/><text x="80.8639%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6139%" y="581" width="0.0808%" height="15" fill="rgb(224,159,50)" fg:x="998" fg:w="1"/><text x="80.8639%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="80.5331%" y="677" width="0.2423%" height="15" fill="rgb(224,93,4)" fg:x="997" fg:w="3"/><text x="80.7831%" y="687.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="80.6947%" y="661" width="0.0808%" height="15" fill="rgb(208,81,34)" fg:x="999" fg:w="1"/><text x="80.9447%" y="671.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="80.6947%" y="645" width="0.0808%" height="15" fill="rgb(233,92,54)" fg:x="999" fg:w="1"/><text x="80.9447%" y="655.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="80.6947%" y="629" width="0.0808%" height="15" fill="rgb(237,21,14)" fg:x="999" fg:w="1"/><text x="80.9447%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="80.4523%" y="693" width="0.4039%" height="15" fill="rgb(249,128,51)" fg:x="996" fg:w="5"/><text x="80.7023%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.7754%" y="677" width="0.0808%" height="15" fill="rgb(223,129,24)" fg:x="1000" fg:w="1"/><text x="81.0254%" y="687.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (6 samples, 0.48%)</title><rect x="80.4523%" y="725" width="0.4847%" height="15" fill="rgb(231,168,25)" fg:x="996" fg:w="6"/><text x="80.7023%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.48%)</title><rect x="80.4523%" y="709" width="0.4847%" height="15" fill="rgb(224,39,20)" fg:x="996" fg:w="6"/><text x="80.7023%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="80.8562%" y="693" width="0.0808%" height="15" fill="rgb(225,152,53)" fg:x="1001" fg:w="1"/><text x="81.1062%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.8562%" y="677" width="0.0808%" height="15" fill="rgb(252,17,24)" fg:x="1001" fg:w="1"/><text x="81.1062%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="80.8562%" y="661" width="0.0808%" height="15" fill="rgb(250,114,30)" fg:x="1001" fg:w="1"/><text x="81.1062%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="80.9370%" y="709" width="0.0808%" height="15" fill="rgb(229,5,4)" fg:x="1002" fg:w="1"/><text x="81.1870%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.9370%" y="693" width="0.0808%" height="15" fill="rgb(225,176,49)" fg:x="1002" fg:w="1"/><text x="81.1870%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.9370%" y="677" width="0.0808%" height="15" fill="rgb(224,221,49)" fg:x="1002" fg:w="1"/><text x="81.1870%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9370%" y="661" width="0.0808%" height="15" fill="rgb(253,169,27)" fg:x="1002" fg:w="1"/><text x="81.1870%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.9370%" y="645" width="0.0808%" height="15" fill="rgb(211,206,16)" fg:x="1002" fg:w="1"/><text x="81.1870%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9370%" y="629" width="0.0808%" height="15" fill="rgb(244,87,35)" fg:x="1002" fg:w="1"/><text x="81.1870%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.9370%" y="613" width="0.0808%" height="15" fill="rgb(246,28,10)" fg:x="1002" fg:w="1"/><text x="81.1870%" y="623.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="81.0178%" y="709" width="0.0808%" height="15" fill="rgb(229,12,44)" fg:x="1003" fg:w="1"/><text x="81.2678%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="81.0178%" y="693" width="0.0808%" height="15" fill="rgb(210,145,37)" fg:x="1003" fg:w="1"/><text x="81.2678%" y="703.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="81.0178%" y="677" width="0.0808%" height="15" fill="rgb(227,112,52)" fg:x="1003" fg:w="1"/><text x="81.2678%" y="687.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (47 samples, 3.80%)</title><rect x="77.3829%" y="741" width="3.7964%" height="15" fill="rgb(238,155,34)" fg:x="958" fg:w="47"/><text x="77.6329%" y="751.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="80.9370%" y="725" width="0.2423%" height="15" fill="rgb(239,226,36)" fg:x="1002" fg:w="3"/><text x="81.1870%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="81.0985%" y="709" width="0.0808%" height="15" fill="rgb(230,16,23)" fg:x="1004" fg:w="1"/><text x="81.3485%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="81.0985%" y="693" width="0.0808%" height="15" fill="rgb(236,171,36)" fg:x="1004" fg:w="1"/><text x="81.3485%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="81.0985%" y="677" width="0.0808%" height="15" fill="rgb(221,22,14)" fg:x="1004" fg:w="1"/><text x="81.3485%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.0985%" y="661" width="0.0808%" height="15" fill="rgb(242,43,11)" fg:x="1004" fg:w="1"/><text x="81.3485%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.0985%" y="645" width="0.0808%" height="15" fill="rgb(232,69,23)" fg:x="1004" fg:w="1"/><text x="81.3485%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.2601%" y="661" width="0.0808%" height="15" fill="rgb(216,180,54)" fg:x="1006" fg:w="1"/><text x="81.5101%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.2601%" y="645" width="0.0808%" height="15" fill="rgb(216,5,24)" fg:x="1006" fg:w="1"/><text x="81.5101%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.2601%" y="629" width="0.0808%" height="15" fill="rgb(225,89,9)" fg:x="1006" fg:w="1"/><text x="81.5101%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.3409%" y="581" width="0.0808%" height="15" fill="rgb(243,75,33)" fg:x="1007" fg:w="1"/><text x="81.5909%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.3409%" y="565" width="0.0808%" height="15" fill="rgb(247,141,45)" fg:x="1007" fg:w="1"/><text x="81.5909%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.3409%" y="549" width="0.0808%" height="15" fill="rgb(232,177,36)" fg:x="1007" fg:w="1"/><text x="81.5909%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="81.3409%" y="533" width="0.0808%" height="15" fill="rgb(219,125,36)" fg:x="1007" fg:w="1"/><text x="81.5909%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="81.3409%" y="645" width="0.1616%" height="15" fill="rgb(227,94,9)" fg:x="1007" fg:w="2"/><text x="81.5909%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="81.3409%" y="629" width="0.1616%" height="15" fill="rgb(240,34,52)" fg:x="1007" fg:w="2"/><text x="81.5909%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="81.3409%" y="613" width="0.1616%" height="15" fill="rgb(216,45,12)" fg:x="1007" fg:w="2"/><text x="81.5909%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="81.3409%" y="597" width="0.1616%" height="15" fill="rgb(246,21,19)" fg:x="1007" fg:w="2"/><text x="81.5909%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4216%" y="581" width="0.0808%" height="15" fill="rgb(213,98,42)" fg:x="1008" fg:w="1"/><text x="81.6716%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.4216%" y="565" width="0.0808%" height="15" fill="rgb(250,136,47)" fg:x="1008" fg:w="1"/><text x="81.6716%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.4216%" y="549" width="0.0808%" height="15" fill="rgb(251,124,27)" fg:x="1008" fg:w="1"/><text x="81.6716%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.5024%" y="645" width="0.0808%" height="15" fill="rgb(229,180,14)" fg:x="1009" fg:w="1"/><text x="81.7524%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="81.5024%" y="629" width="0.0808%" height="15" fill="rgb(245,216,25)" fg:x="1009" fg:w="1"/><text x="81.7524%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.5024%" y="613" width="0.0808%" height="15" fill="rgb(251,43,5)" fg:x="1009" fg:w="1"/><text x="81.7524%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.5024%" y="597" width="0.0808%" height="15" fill="rgb(250,128,24)" fg:x="1009" fg:w="1"/><text x="81.7524%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.5832%" y="597" width="0.0808%" height="15" fill="rgb(217,117,27)" fg:x="1010" fg:w="1"/><text x="81.8332%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.6640%" y="597" width="0.0808%" height="15" fill="rgb(245,147,4)" fg:x="1011" fg:w="1"/><text x="81.9140%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.6640%" y="581" width="0.0808%" height="15" fill="rgb(242,201,35)" fg:x="1011" fg:w="1"/><text x="81.9140%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="81.7447%" y="581" width="0.1616%" height="15" fill="rgb(218,181,1)" fg:x="1012" fg:w="2"/><text x="81.9947%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="81.5832%" y="613" width="0.4039%" height="15" fill="rgb(222,6,29)" fg:x="1010" fg:w="5"/><text x="81.8332%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="81.7447%" y="597" width="0.2423%" height="15" fill="rgb(208,186,3)" fg:x="1012" fg:w="3"/><text x="81.9947%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.9063%" y="581" width="0.0808%" height="15" fill="rgb(216,36,26)" fg:x="1014" fg:w="1"/><text x="82.1563%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.9063%" y="565" width="0.0808%" height="15" fill="rgb(248,201,23)" fg:x="1014" fg:w="1"/><text x="82.1563%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="81.9063%" y="549" width="0.0808%" height="15" fill="rgb(251,170,31)" fg:x="1014" fg:w="1"/><text x="82.1563%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="81.9063%" y="533" width="0.0808%" height="15" fill="rgb(207,110,25)" fg:x="1014" fg:w="1"/><text x="82.1563%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.9063%" y="517" width="0.0808%" height="15" fill="rgb(250,54,15)" fg:x="1014" fg:w="1"/><text x="82.1563%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.48%)</title><rect x="81.5832%" y="629" width="0.4847%" height="15" fill="rgb(227,68,33)" fg:x="1010" fg:w="6"/><text x="81.8332%" y="639.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="81.9871%" y="613" width="0.0808%" height="15" fill="rgb(238,34,41)" fg:x="1015" fg:w="1"/><text x="82.2371%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.9871%" y="597" width="0.0808%" height="15" fill="rgb(220,11,15)" fg:x="1015" fg:w="1"/><text x="82.2371%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="81.9871%" y="581" width="0.0808%" height="15" fill="rgb(246,111,35)" fg:x="1015" fg:w="1"/><text x="82.2371%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.0679%" y="597" width="0.0808%" height="15" fill="rgb(209,88,53)" fg:x="1016" fg:w="1"/><text x="82.3179%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.0679%" y="581" width="0.0808%" height="15" fill="rgb(231,185,47)" fg:x="1016" fg:w="1"/><text x="82.3179%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0679%" y="565" width="0.0808%" height="15" fill="rgb(233,154,1)" fg:x="1016" fg:w="1"/><text x="82.3179%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.3102%" y="549" width="0.0808%" height="15" fill="rgb(225,15,46)" fg:x="1019" fg:w="1"/><text x="82.5602%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="82.3102%" y="533" width="0.0808%" height="15" fill="rgb(211,135,41)" fg:x="1019" fg:w="1"/><text x="82.5602%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.3910%" y="517" width="0.0808%" height="15" fill="rgb(208,54,0)" fg:x="1020" fg:w="1"/><text x="82.6410%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="82.0679%" y="629" width="0.4847%" height="15" fill="rgb(244,136,14)" fg:x="1016" fg:w="6"/><text x="82.3179%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="82.0679%" y="613" width="0.4847%" height="15" fill="rgb(241,56,14)" fg:x="1016" fg:w="6"/><text x="82.3179%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="82.1486%" y="597" width="0.4039%" height="15" fill="rgb(205,80,24)" fg:x="1017" fg:w="5"/><text x="82.3986%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="82.3102%" y="581" width="0.2423%" height="15" fill="rgb(220,57,4)" fg:x="1019" fg:w="3"/><text x="82.5602%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="82.3102%" y="565" width="0.2423%" height="15" fill="rgb(226,193,50)" fg:x="1019" fg:w="3"/><text x="82.5602%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="82.3910%" y="549" width="0.1616%" height="15" fill="rgb(231,168,22)" fg:x="1020" fg:w="2"/><text x="82.6410%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="82.3910%" y="533" width="0.1616%" height="15" fill="rgb(254,215,14)" fg:x="1020" fg:w="2"/><text x="82.6410%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.4717%" y="517" width="0.0808%" height="15" fill="rgb(211,115,16)" fg:x="1021" fg:w="1"/><text x="82.7217%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.4717%" y="501" width="0.0808%" height="15" fill="rgb(236,210,16)" fg:x="1021" fg:w="1"/><text x="82.7217%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.4717%" y="485" width="0.0808%" height="15" fill="rgb(221,94,12)" fg:x="1021" fg:w="1"/><text x="82.7217%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4717%" y="469" width="0.0808%" height="15" fill="rgb(235,218,49)" fg:x="1021" fg:w="1"/><text x="82.7217%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.6333%" y="501" width="0.0808%" height="15" fill="rgb(217,114,14)" fg:x="1023" fg:w="1"/><text x="82.8833%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.6333%" y="485" width="0.0808%" height="15" fill="rgb(216,145,22)" fg:x="1023" fg:w="1"/><text x="82.8833%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.6333%" y="469" width="0.0808%" height="15" fill="rgb(217,112,39)" fg:x="1023" fg:w="1"/><text x="82.8833%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.6333%" y="453" width="0.0808%" height="15" fill="rgb(225,85,32)" fg:x="1023" fg:w="1"/><text x="82.8833%" y="463.50"></text></g><g><title>engine::session::Session::close (20 samples, 1.62%)</title><rect x="81.1793%" y="741" width="1.6155%" height="15" fill="rgb(245,209,47)" fg:x="1005" fg:w="20"/><text x="81.4293%" y="751.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.62%)</title><rect x="81.1793%" y="725" width="1.6155%" height="15" fill="rgb(218,220,15)" fg:x="1005" fg:w="20"/><text x="81.4293%" y="735.50"></text></g><g><title>engine::session::state::State::flush_entities (20 samples, 1.62%)</title><rect x="81.1793%" y="709" width="1.6155%" height="15" fill="rgb(222,202,31)" fg:x="1005" fg:w="20"/><text x="81.4293%" y="719.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.53%)</title><rect x="81.2601%" y="693" width="1.5347%" height="15" fill="rgb(243,203,4)" fg:x="1006" fg:w="19"/><text x="81.5101%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.53%)</title><rect x="81.2601%" y="677" width="1.5347%" height="15" fill="rgb(237,92,17)" fg:x="1006" fg:w="19"/><text x="81.5101%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.45%)</title><rect x="81.3409%" y="661" width="1.4540%" height="15" fill="rgb(231,119,7)" fg:x="1007" fg:w="18"/><text x="81.5909%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (15 samples, 1.21%)</title><rect x="81.5832%" y="645" width="1.2116%" height="15" fill="rgb(237,82,41)" fg:x="1010" fg:w="15"/><text x="81.8332%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="82.5525%" y="629" width="0.2423%" height="15" fill="rgb(226,81,48)" fg:x="1022" fg:w="3"/><text x="82.8025%" y="639.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="82.5525%" y="613" width="0.2423%" height="15" fill="rgb(234,70,51)" fg:x="1022" fg:w="3"/><text x="82.8025%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="82.5525%" y="597" width="0.2423%" height="15" fill="rgb(251,86,4)" fg:x="1022" fg:w="3"/><text x="82.8025%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="82.5525%" y="581" width="0.2423%" height="15" fill="rgb(244,144,28)" fg:x="1022" fg:w="3"/><text x="82.8025%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="82.5525%" y="565" width="0.2423%" height="15" fill="rgb(232,161,39)" fg:x="1022" fg:w="3"/><text x="82.8025%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="82.5525%" y="549" width="0.2423%" height="15" fill="rgb(247,34,51)" fg:x="1022" fg:w="3"/><text x="82.8025%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="82.5525%" y="533" width="0.2423%" height="15" fill="rgb(225,132,2)" fg:x="1022" fg:w="3"/><text x="82.8025%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="82.6333%" y="517" width="0.1616%" height="15" fill="rgb(209,159,44)" fg:x="1023" fg:w="2"/><text x="82.8833%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="82.7141%" y="501" width="0.0808%" height="15" fill="rgb(251,214,1)" fg:x="1024" fg:w="1"/><text x="82.9641%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7141%" y="485" width="0.0808%" height="15" fill="rgb(247,84,47)" fg:x="1024" fg:w="1"/><text x="82.9641%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="82.7948%" y="693" width="0.0808%" height="15" fill="rgb(240,111,43)" fg:x="1025" fg:w="1"/><text x="83.0448%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="82.7948%" y="677" width="0.0808%" height="15" fill="rgb(215,214,35)" fg:x="1025" fg:w="1"/><text x="83.0448%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="82.7948%" y="661" width="0.0808%" height="15" fill="rgb(248,207,23)" fg:x="1025" fg:w="1"/><text x="83.0448%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="82.7948%" y="645" width="0.0808%" height="15" fill="rgb(214,186,4)" fg:x="1025" fg:w="1"/><text x="83.0448%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="82.7948%" y="629" width="0.0808%" height="15" fill="rgb(220,133,22)" fg:x="1025" fg:w="1"/><text x="83.0448%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="82.7948%" y="613" width="0.0808%" height="15" fill="rgb(239,134,19)" fg:x="1025" fg:w="1"/><text x="83.0448%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="82.7948%" y="597" width="0.0808%" height="15" fill="rgb(250,140,9)" fg:x="1025" fg:w="1"/><text x="83.0448%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="82.7948%" y="581" width="0.0808%" height="15" fill="rgb(225,59,14)" fg:x="1025" fg:w="1"/><text x="83.0448%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="82.7948%" y="565" width="0.0808%" height="15" fill="rgb(214,152,51)" fg:x="1025" fg:w="1"/><text x="83.0448%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="82.7948%" y="549" width="0.0808%" height="15" fill="rgb(251,227,43)" fg:x="1025" fg:w="1"/><text x="83.0448%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.8756%" y="549" width="0.0808%" height="15" fill="rgb(241,96,17)" fg:x="1026" fg:w="1"/><text x="83.1256%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="82.8756%" y="565" width="0.1616%" height="15" fill="rgb(234,198,43)" fg:x="1026" fg:w="2"/><text x="83.1256%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.9564%" y="549" width="0.0808%" height="15" fill="rgb(220,108,29)" fg:x="1027" fg:w="1"/><text x="83.2064%" y="559.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (4 samples, 0.32%)</title><rect x="82.8756%" y="597" width="0.3231%" height="15" fill="rgb(226,163,33)" fg:x="1026" fg:w="4"/><text x="83.1256%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (4 samples, 0.32%)</title><rect x="82.8756%" y="581" width="0.3231%" height="15" fill="rgb(205,194,45)" fg:x="1026" fg:w="4"/><text x="83.1256%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="83.0372%" y="565" width="0.1616%" height="15" fill="rgb(206,143,44)" fg:x="1028" fg:w="2"/><text x="83.2872%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="83.0372%" y="549" width="0.1616%" height="15" fill="rgb(236,136,36)" fg:x="1028" fg:w="2"/><text x="83.2872%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="83.0372%" y="533" width="0.1616%" height="15" fill="rgb(249,172,42)" fg:x="1028" fg:w="2"/><text x="83.2872%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="83.0372%" y="517" width="0.1616%" height="15" fill="rgb(216,139,23)" fg:x="1028" fg:w="2"/><text x="83.2872%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="83.0372%" y="501" width="0.1616%" height="15" fill="rgb(207,166,20)" fg:x="1028" fg:w="2"/><text x="83.2872%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="83.0372%" y="485" width="0.1616%" height="15" fill="rgb(210,209,22)" fg:x="1028" fg:w="2"/><text x="83.2872%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.0372%" y="469" width="0.1616%" height="15" fill="rgb(232,118,20)" fg:x="1028" fg:w="2"/><text x="83.2872%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.1179%" y="453" width="0.0808%" height="15" fill="rgb(238,113,42)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.1179%" y="437" width="0.0808%" height="15" fill="rgb(231,42,5)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="83.1179%" y="421" width="0.0808%" height="15" fill="rgb(243,166,24)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.1179%" y="405" width="0.0808%" height="15" fill="rgb(237,226,12)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.1179%" y="389" width="0.0808%" height="15" fill="rgb(229,133,24)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="83.1179%" y="373" width="0.0808%" height="15" fill="rgb(238,33,43)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="83.1179%" y="357" width="0.0808%" height="15" fill="rgb(227,59,38)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="83.1179%" y="341" width="0.0808%" height="15" fill="rgb(230,97,0)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.1179%" y="325" width="0.0808%" height="15" fill="rgb(250,173,50)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.1179%" y="309" width="0.0808%" height="15" fill="rgb(240,15,50)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="83.1179%" y="293" width="0.0808%" height="15" fill="rgb(221,93,22)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.1179%" y="277" width="0.0808%" height="15" fill="rgb(245,180,53)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.1179%" y="261" width="0.0808%" height="15" fill="rgb(231,88,51)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="83.1179%" y="245" width="0.0808%" height="15" fill="rgb(240,58,21)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.1179%" y="229" width="0.0808%" height="15" fill="rgb(237,21,10)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.1179%" y="213" width="0.0808%" height="15" fill="rgb(218,43,11)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="83.1179%" y="197" width="0.0808%" height="15" fill="rgb(218,221,29)" fg:x="1029" fg:w="1"/><text x="83.3679%" y="207.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (1 samples, 0.08%)</title><rect x="83.3603%" y="421" width="0.0808%" height="15" fill="rgb(214,118,42)" fg:x="1032" fg:w="1"/><text x="83.6103%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="83.3603%" y="405" width="0.0808%" height="15" fill="rgb(251,200,26)" fg:x="1032" fg:w="1"/><text x="83.6103%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (1 samples, 0.08%)</title><rect x="83.3603%" y="389" width="0.0808%" height="15" fill="rgb(237,101,39)" fg:x="1032" fg:w="1"/><text x="83.6103%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.3603%" y="373" width="0.0808%" height="15" fill="rgb(251,117,11)" fg:x="1032" fg:w="1"/><text x="83.6103%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="83.3603%" y="357" width="0.0808%" height="15" fill="rgb(216,223,23)" fg:x="1032" fg:w="1"/><text x="83.6103%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="83.3603%" y="341" width="0.0808%" height="15" fill="rgb(251,54,12)" fg:x="1032" fg:w="1"/><text x="83.6103%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.3603%" y="325" width="0.0808%" height="15" fill="rgb(254,176,54)" fg:x="1032" fg:w="1"/><text x="83.6103%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.3603%" y="309" width="0.0808%" height="15" fill="rgb(210,32,8)" fg:x="1032" fg:w="1"/><text x="83.6103%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.6026%" y="357" width="0.0808%" height="15" fill="rgb(235,52,38)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.6026%" y="341" width="0.0808%" height="15" fill="rgb(231,4,44)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.6026%" y="325" width="0.0808%" height="15" fill="rgb(249,2,32)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.6026%" y="309" width="0.0808%" height="15" fill="rgb(224,65,26)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.6026%" y="293" width="0.0808%" height="15" fill="rgb(250,73,40)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.6026%" y="277" width="0.0808%" height="15" fill="rgb(253,177,16)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.6026%" y="261" width="0.0808%" height="15" fill="rgb(217,32,34)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.6026%" y="245" width="0.0808%" height="15" fill="rgb(212,7,10)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.6026%" y="229" width="0.0808%" height="15" fill="rgb(245,89,8)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="83.6026%" y="213" width="0.0808%" height="15" fill="rgb(237,16,53)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="83.6026%" y="197" width="0.0808%" height="15" fill="rgb(250,204,30)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="83.6026%" y="181" width="0.0808%" height="15" fill="rgb(208,77,27)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="83.6026%" y="165" width="0.0808%" height="15" fill="rgb(250,204,28)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6026%" y="149" width="0.0808%" height="15" fill="rgb(244,63,21)" fg:x="1035" fg:w="1"/><text x="83.8526%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="83.6834%" y="293" width="0.0808%" height="15" fill="rgb(236,85,44)" fg:x="1036" fg:w="1"/><text x="83.9334%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="83.5218%" y="389" width="0.3231%" height="15" fill="rgb(215,98,4)" fg:x="1034" fg:w="4"/><text x="83.7718%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="83.5218%" y="373" width="0.3231%" height="15" fill="rgb(235,38,11)" fg:x="1034" fg:w="4"/><text x="83.7718%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="83.6834%" y="357" width="0.1616%" height="15" fill="rgb(254,186,25)" fg:x="1036" fg:w="2"/><text x="83.9334%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.6834%" y="341" width="0.1616%" height="15" fill="rgb(225,55,31)" fg:x="1036" fg:w="2"/><text x="83.9334%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="83.6834%" y="325" width="0.1616%" height="15" fill="rgb(211,15,21)" fg:x="1036" fg:w="2"/><text x="83.9334%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.6834%" y="309" width="0.1616%" height="15" fill="rgb(215,187,41)" fg:x="1036" fg:w="2"/><text x="83.9334%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.7641%" y="293" width="0.0808%" height="15" fill="rgb(248,69,32)" fg:x="1037" fg:w="1"/><text x="84.0141%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.8449%" y="389" width="0.0808%" height="15" fill="rgb(252,102,52)" fg:x="1038" fg:w="1"/><text x="84.0949%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="83.8449%" y="373" width="0.0808%" height="15" fill="rgb(253,140,32)" fg:x="1038" fg:w="1"/><text x="84.0949%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="83.9257%" y="389" width="0.0808%" height="15" fill="rgb(216,56,42)" fg:x="1039" fg:w="1"/><text x="84.1757%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.9257%" y="373" width="0.0808%" height="15" fill="rgb(216,184,14)" fg:x="1039" fg:w="1"/><text x="84.1757%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.9257%" y="357" width="0.0808%" height="15" fill="rgb(237,187,27)" fg:x="1039" fg:w="1"/><text x="84.1757%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.9257%" y="341" width="0.0808%" height="15" fill="rgb(219,65,3)" fg:x="1039" fg:w="1"/><text x="84.1757%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.9257%" y="325" width="0.0808%" height="15" fill="rgb(245,83,25)" fg:x="1039" fg:w="1"/><text x="84.1757%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.9257%" y="309" width="0.0808%" height="15" fill="rgb(214,205,45)" fg:x="1039" fg:w="1"/><text x="84.1757%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="84.1680%" y="245" width="0.0808%" height="15" fill="rgb(241,20,18)" fg:x="1042" fg:w="1"/><text x="84.4180%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="84.1680%" y="229" width="0.0808%" height="15" fill="rgb(232,163,23)" fg:x="1042" fg:w="1"/><text x="84.4180%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.2488%" y="229" width="0.0808%" height="15" fill="rgb(214,5,46)" fg:x="1043" fg:w="1"/><text x="84.4988%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="84.0872%" y="309" width="0.3231%" height="15" fill="rgb(229,78,17)" fg:x="1041" fg:w="4"/><text x="84.3372%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="84.0872%" y="293" width="0.3231%" height="15" fill="rgb(248,89,10)" fg:x="1041" fg:w="4"/><text x="84.3372%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="84.0872%" y="277" width="0.3231%" height="15" fill="rgb(248,54,15)" fg:x="1041" fg:w="4"/><text x="84.3372%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="84.0872%" y="261" width="0.3231%" height="15" fill="rgb(223,116,6)" fg:x="1041" fg:w="4"/><text x="84.3372%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="84.2488%" y="245" width="0.1616%" height="15" fill="rgb(205,125,38)" fg:x="1043" fg:w="2"/><text x="84.4988%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="84.3296%" y="229" width="0.0808%" height="15" fill="rgb(251,78,38)" fg:x="1044" fg:w="1"/><text x="84.5796%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.4103%" y="293" width="0.0808%" height="15" fill="rgb(253,78,28)" fg:x="1045" fg:w="1"/><text x="84.6603%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="84.4103%" y="309" width="0.2423%" height="15" fill="rgb(209,120,3)" fg:x="1045" fg:w="3"/><text x="84.6603%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="84.4911%" y="293" width="0.1616%" height="15" fill="rgb(238,229,9)" fg:x="1046" fg:w="2"/><text x="84.7411%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="84.4911%" y="277" width="0.1616%" height="15" fill="rgb(253,159,18)" fg:x="1046" fg:w="2"/><text x="84.7411%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="84.4911%" y="261" width="0.1616%" height="15" fill="rgb(244,42,34)" fg:x="1046" fg:w="2"/><text x="84.7411%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="84.5719%" y="245" width="0.0808%" height="15" fill="rgb(224,8,7)" fg:x="1047" fg:w="1"/><text x="84.8219%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.7334%" y="245" width="0.0808%" height="15" fill="rgb(210,201,45)" fg:x="1049" fg:w="1"/><text x="84.9834%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.97%)</title><rect x="84.8142%" y="245" width="0.9693%" height="15" fill="rgb(252,185,21)" fg:x="1050" fg:w="12"/><text x="85.0642%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.89%)</title><rect x="84.8950%" y="229" width="0.8885%" height="15" fill="rgb(223,131,1)" fg:x="1051" fg:w="11"/><text x="85.1450%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="85.6220%" y="213" width="0.1616%" height="15" fill="rgb(245,141,16)" fg:x="1060" fg:w="2"/><text x="85.8720%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="85.7835%" y="245" width="0.0808%" height="15" fill="rgb(229,55,45)" fg:x="1062" fg:w="1"/><text x="86.0335%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="85.7835%" y="229" width="0.0808%" height="15" fill="rgb(208,92,15)" fg:x="1062" fg:w="1"/><text x="86.0335%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.1874%" y="149" width="0.0808%" height="15" fill="rgb(234,185,47)" fg:x="1067" fg:w="1"/><text x="86.4374%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.1874%" y="133" width="0.0808%" height="15" fill="rgb(253,104,50)" fg:x="1067" fg:w="1"/><text x="86.4374%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.1874%" y="117" width="0.0808%" height="15" fill="rgb(205,70,7)" fg:x="1067" fg:w="1"/><text x="86.4374%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="86.1874%" y="181" width="0.1616%" height="15" fill="rgb(240,178,43)" fg:x="1067" fg:w="2"/><text x="86.4374%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="86.1874%" y="165" width="0.1616%" height="15" fill="rgb(214,112,2)" fg:x="1067" fg:w="2"/><text x="86.4374%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="86.2682%" y="149" width="0.0808%" height="15" fill="rgb(206,46,17)" fg:x="1068" fg:w="1"/><text x="86.5182%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="86.2682%" y="133" width="0.0808%" height="15" fill="rgb(225,220,16)" fg:x="1068" fg:w="1"/><text x="86.5182%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.2682%" y="117" width="0.0808%" height="15" fill="rgb(238,65,40)" fg:x="1068" fg:w="1"/><text x="86.5182%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.2682%" y="101" width="0.0808%" height="15" fill="rgb(230,151,21)" fg:x="1068" fg:w="1"/><text x="86.5182%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.2682%" y="85" width="0.0808%" height="15" fill="rgb(218,58,49)" fg:x="1068" fg:w="1"/><text x="86.5182%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (28 samples, 2.26%)</title><rect x="86.3489%" y="181" width="2.2617%" height="15" fill="rgb(219,179,14)" fg:x="1069" fg:w="28"/><text x="86.5989%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (28 samples, 2.26%)</title><rect x="86.3489%" y="165" width="2.2617%" height="15" fill="rgb(223,72,1)" fg:x="1069" fg:w="28"/><text x="86.5989%" y="175.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (28 samples, 2.26%)</title><rect x="86.3489%" y="149" width="2.2617%" height="15" fill="rgb(238,126,10)" fg:x="1069" fg:w="28"/><text x="86.5989%" y="159.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="88.6107%" y="181" width="0.1616%" height="15" fill="rgb(224,206,38)" fg:x="1097" fg:w="2"/><text x="88.8607%" y="191.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="88.7722%" y="181" width="0.0808%" height="15" fill="rgb(212,201,54)" fg:x="1099" fg:w="1"/><text x="89.0222%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 3.07%)</title><rect x="85.8643%" y="229" width="3.0695%" height="15" fill="rgb(218,154,48)" fg:x="1063" fg:w="38"/><text x="86.1143%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (38 samples, 3.07%)</title><rect x="85.8643%" y="213" width="3.0695%" height="15" fill="rgb(232,93,24)" fg:x="1063" fg:w="38"/><text x="86.1143%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (38 samples, 3.07%)</title><rect x="85.8643%" y="197" width="3.0695%" height="15" fill="rgb(245,30,21)" fg:x="1063" fg:w="38"/><text x="86.1143%" y="207.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="88.8530%" y="181" width="0.0808%" height="15" fill="rgb(242,148,29)" fg:x="1100" fg:w="1"/><text x="89.1030%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.9338%" y="213" width="0.0808%" height="15" fill="rgb(244,153,54)" fg:x="1101" fg:w="1"/><text x="89.1838%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="89.0145%" y="213" width="0.1616%" height="15" fill="rgb(252,87,22)" fg:x="1102" fg:w="2"/><text x="89.2645%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="89.0145%" y="197" width="0.1616%" height="15" fill="rgb(210,51,29)" fg:x="1102" fg:w="2"/><text x="89.2645%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.0145%" y="181" width="0.1616%" height="15" fill="rgb(242,136,47)" fg:x="1102" fg:w="2"/><text x="89.2645%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.0145%" y="165" width="0.1616%" height="15" fill="rgb(238,68,4)" fg:x="1102" fg:w="2"/><text x="89.2645%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="89.1761%" y="213" width="0.0808%" height="15" fill="rgb(242,161,30)" fg:x="1104" fg:w="1"/><text x="89.4261%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="88.9338%" y="229" width="0.4039%" height="15" fill="rgb(218,58,44)" fg:x="1101" fg:w="5"/><text x="89.1838%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="89.2569%" y="213" width="0.0808%" height="15" fill="rgb(252,125,32)" fg:x="1105" fg:w="1"/><text x="89.5069%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.2569%" y="197" width="0.0808%" height="15" fill="rgb(219,178,0)" fg:x="1105" fg:w="1"/><text x="89.5069%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="89.3376%" y="229" width="0.0808%" height="15" fill="rgb(213,152,7)" fg:x="1106" fg:w="1"/><text x="89.5876%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="89.3376%" y="213" width="0.0808%" height="15" fill="rgb(249,109,34)" fg:x="1106" fg:w="1"/><text x="89.5876%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (60 samples, 4.85%)</title><rect x="84.6527%" y="261" width="4.8465%" height="15" fill="rgb(232,96,21)" fg:x="1048" fg:w="60"/><text x="84.9027%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (45 samples, 3.63%)</title><rect x="85.8643%" y="245" width="3.6349%" height="15" fill="rgb(228,27,39)" fg:x="1063" fg:w="45"/><text x="86.1143%" y="255.50">rege..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="89.4184%" y="229" width="0.0808%" height="15" fill="rgb(211,182,52)" fg:x="1107" fg:w="1"/><text x="89.6684%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="89.4184%" y="213" width="0.0808%" height="15" fill="rgb(234,178,38)" fg:x="1107" fg:w="1"/><text x="89.6684%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="89.4184%" y="197" width="0.0808%" height="15" fill="rgb(221,111,3)" fg:x="1107" fg:w="1"/><text x="89.6684%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="89.4992%" y="229" width="0.0808%" height="15" fill="rgb(228,175,21)" fg:x="1108" fg:w="1"/><text x="89.7492%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="89.4992%" y="213" width="0.0808%" height="15" fill="rgb(228,174,43)" fg:x="1108" fg:w="1"/><text x="89.7492%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.4992%" y="197" width="0.0808%" height="15" fill="rgb(211,191,0)" fg:x="1108" fg:w="1"/><text x="89.7492%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.4992%" y="181" width="0.0808%" height="15" fill="rgb(253,117,3)" fg:x="1108" fg:w="1"/><text x="89.7492%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.4992%" y="165" width="0.0808%" height="15" fill="rgb(241,127,19)" fg:x="1108" fg:w="1"/><text x="89.7492%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="89.4992%" y="261" width="0.1616%" height="15" fill="rgb(218,103,12)" fg:x="1108" fg:w="2"/><text x="89.7492%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="89.4992%" y="245" width="0.1616%" height="15" fill="rgb(236,214,43)" fg:x="1108" fg:w="2"/><text x="89.7492%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="89.5800%" y="229" width="0.0808%" height="15" fill="rgb(244,144,19)" fg:x="1109" fg:w="1"/><text x="89.8300%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="89.6607%" y="229" width="0.1616%" height="15" fill="rgb(246,188,10)" fg:x="1110" fg:w="2"/><text x="89.9107%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="89.7415%" y="213" width="0.0808%" height="15" fill="rgb(212,193,33)" fg:x="1111" fg:w="1"/><text x="89.9915%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (65 samples, 5.25%)</title><rect x="84.6527%" y="309" width="5.2504%" height="15" fill="rgb(241,51,29)" fg:x="1048" fg:w="65"/><text x="84.9027%" y="319.50">regex:..</text></g><g><title>regex::builders::string::RegexBuilder::build (65 samples, 5.25%)</title><rect x="84.6527%" y="293" width="5.2504%" height="15" fill="rgb(211,58,19)" fg:x="1048" fg:w="65"/><text x="84.9027%" y="303.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (65 samples, 5.25%)</title><rect x="84.6527%" y="277" width="5.2504%" height="15" fill="rgb(229,111,26)" fg:x="1048" fg:w="65"/><text x="84.9027%" y="287.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="89.6607%" y="261" width="0.2423%" height="15" fill="rgb(213,115,40)" fg:x="1110" fg:w="3"/><text x="89.9107%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="89.6607%" y="245" width="0.2423%" height="15" fill="rgb(209,56,44)" fg:x="1110" fg:w="3"/><text x="89.9107%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="89.8223%" y="229" width="0.0808%" height="15" fill="rgb(230,108,32)" fg:x="1112" fg:w="1"/><text x="90.0723%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="89.9031%" y="245" width="0.3231%" height="15" fill="rgb(216,165,31)" fg:x="1113" fg:w="4"/><text x="90.1531%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="90.1454%" y="229" width="0.0808%" height="15" fill="rgb(218,122,21)" fg:x="1116" fg:w="1"/><text x="90.3954%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (78 samples, 6.30%)</title><rect x="84.0065%" y="325" width="6.3005%" height="15" fill="rgb(223,224,47)" fg:x="1040" fg:w="78"/><text x="84.2565%" y="335.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="89.9031%" y="309" width="0.4039%" height="15" fill="rgb(238,102,44)" fg:x="1113" fg:w="5"/><text x="90.1531%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="89.9031%" y="293" width="0.4039%" height="15" fill="rgb(236,46,40)" fg:x="1113" fg:w="5"/><text x="90.1531%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="89.9031%" y="277" width="0.4039%" height="15" fill="rgb(247,202,50)" fg:x="1113" fg:w="5"/><text x="90.1531%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="89.9031%" y="261" width="0.4039%" height="15" fill="rgb(209,99,20)" fg:x="1113" fg:w="5"/><text x="90.1531%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="90.2262%" y="245" width="0.0808%" height="15" fill="rgb(252,27,34)" fg:x="1117" fg:w="1"/><text x="90.4762%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.2262%" y="229" width="0.0808%" height="15" fill="rgb(215,206,23)" fg:x="1117" fg:w="1"/><text x="90.4762%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.2262%" y="213" width="0.0808%" height="15" fill="rgb(212,135,36)" fg:x="1117" fg:w="1"/><text x="90.4762%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.2262%" y="197" width="0.0808%" height="15" fill="rgb(240,189,1)" fg:x="1117" fg:w="1"/><text x="90.4762%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.3069%" y="261" width="0.0808%" height="15" fill="rgb(242,56,20)" fg:x="1118" fg:w="1"/><text x="90.5569%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="90.3069%" y="309" width="0.1616%" height="15" fill="rgb(247,132,33)" fg:x="1118" fg:w="2"/><text x="90.5569%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="90.3069%" y="293" width="0.1616%" height="15" fill="rgb(208,149,11)" fg:x="1118" fg:w="2"/><text x="90.5569%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="90.3069%" y="277" width="0.1616%" height="15" fill="rgb(211,33,11)" fg:x="1118" fg:w="2"/><text x="90.5569%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.3877%" y="261" width="0.0808%" height="15" fill="rgb(221,29,38)" fg:x="1119" fg:w="1"/><text x="90.6377%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.3877%" y="245" width="0.0808%" height="15" fill="rgb(206,182,49)" fg:x="1119" fg:w="1"/><text x="90.6377%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="90.4685%" y="293" width="0.0808%" height="15" fill="rgb(216,140,1)" fg:x="1120" fg:w="1"/><text x="90.7185%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="90.4685%" y="277" width="0.0808%" height="15" fill="rgb(232,57,40)" fg:x="1120" fg:w="1"/><text x="90.7185%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="90.4685%" y="261" width="0.0808%" height="15" fill="rgb(224,186,18)" fg:x="1120" fg:w="1"/><text x="90.7185%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.4685%" y="245" width="0.0808%" height="15" fill="rgb(215,121,11)" fg:x="1120" fg:w="1"/><text x="90.7185%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="90.5493%" y="245" width="0.1616%" height="15" fill="rgb(245,147,10)" fg:x="1121" fg:w="2"/><text x="90.7993%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="90.5493%" y="229" width="0.1616%" height="15" fill="rgb(238,153,13)" fg:x="1121" fg:w="2"/><text x="90.7993%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="90.4685%" y="309" width="0.3231%" height="15" fill="rgb(233,108,0)" fg:x="1120" fg:w="4"/><text x="90.7185%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="90.5493%" y="293" width="0.2423%" height="15" fill="rgb(212,157,17)" fg:x="1121" fg:w="3"/><text x="90.7993%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="90.5493%" y="277" width="0.2423%" height="15" fill="rgb(225,213,38)" fg:x="1121" fg:w="3"/><text x="90.7993%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="90.5493%" y="261" width="0.2423%" height="15" fill="rgb(248,16,11)" fg:x="1121" fg:w="3"/><text x="90.7993%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="90.7108%" y="245" width="0.0808%" height="15" fill="rgb(241,33,4)" fg:x="1123" fg:w="1"/><text x="90.9608%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="90.7108%" y="229" width="0.0808%" height="15" fill="rgb(222,26,43)" fg:x="1123" fg:w="1"/><text x="90.9608%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.7108%" y="213" width="0.0808%" height="15" fill="rgb(243,29,36)" fg:x="1123" fg:w="1"/><text x="90.9608%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.7916%" y="261" width="0.0808%" height="15" fill="rgb(241,9,27)" fg:x="1124" fg:w="1"/><text x="91.0416%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="90.8724%" y="261" width="0.0808%" height="15" fill="rgb(205,117,26)" fg:x="1125" fg:w="1"/><text x="91.1224%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.8724%" y="245" width="0.0808%" height="15" fill="rgb(209,80,39)" fg:x="1125" fg:w="1"/><text x="91.1224%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="90.9532%" y="229" width="0.4847%" height="15" fill="rgb(239,155,6)" fg:x="1126" fg:w="6"/><text x="91.2032%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.57%)</title><rect x="90.9532%" y="245" width="0.5654%" height="15" fill="rgb(212,104,12)" fg:x="1126" fg:w="7"/><text x="91.2032%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="91.4378%" y="229" width="0.0808%" height="15" fill="rgb(234,204,3)" fg:x="1132" fg:w="1"/><text x="91.6878%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.4378%" y="213" width="0.0808%" height="15" fill="rgb(251,218,7)" fg:x="1132" fg:w="1"/><text x="91.6878%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="91.5186%" y="229" width="0.0808%" height="15" fill="rgb(221,81,32)" fg:x="1133" fg:w="1"/><text x="91.7686%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="91.5186%" y="245" width="0.3231%" height="15" fill="rgb(214,152,26)" fg:x="1133" fg:w="4"/><text x="91.7686%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="91.5994%" y="229" width="0.2423%" height="15" fill="rgb(223,22,3)" fg:x="1134" fg:w="3"/><text x="91.8494%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="91.8417%" y="213" width="0.0808%" height="15" fill="rgb(207,174,7)" fg:x="1137" fg:w="1"/><text x="92.0917%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.8417%" y="197" width="0.0808%" height="15" fill="rgb(224,19,52)" fg:x="1137" fg:w="1"/><text x="92.0917%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="91.9225%" y="213" width="0.0808%" height="15" fill="rgb(228,24,14)" fg:x="1138" fg:w="1"/><text x="92.1725%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="91.9225%" y="197" width="0.0808%" height="15" fill="rgb(230,153,43)" fg:x="1138" fg:w="1"/><text x="92.1725%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (3 samples, 0.24%)</title><rect x="91.8417%" y="245" width="0.2423%" height="15" fill="rgb(231,106,12)" fg:x="1137" fg:w="3"/><text x="92.0917%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="91.8417%" y="229" width="0.2423%" height="15" fill="rgb(215,92,2)" fg:x="1137" fg:w="3"/><text x="92.0917%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="92.0032%" y="213" width="0.0808%" height="15" fill="rgb(249,143,25)" fg:x="1139" fg:w="1"/><text x="92.2532%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="92.0032%" y="197" width="0.0808%" height="15" fill="rgb(252,7,35)" fg:x="1139" fg:w="1"/><text x="92.2532%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="92.0032%" y="181" width="0.0808%" height="15" fill="rgb(216,69,40)" fg:x="1139" fg:w="1"/><text x="92.2532%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="92.0840%" y="245" width="0.0808%" height="15" fill="rgb(240,36,33)" fg:x="1140" fg:w="1"/><text x="92.3340%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="92.0840%" y="229" width="0.0808%" height="15" fill="rgb(231,128,14)" fg:x="1140" fg:w="1"/><text x="92.3340%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="92.0840%" y="213" width="0.0808%" height="15" fill="rgb(245,143,14)" fg:x="1140" fg:w="1"/><text x="92.3340%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="92.0840%" y="197" width="0.0808%" height="15" fill="rgb(222,130,28)" fg:x="1140" fg:w="1"/><text x="92.3340%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="92.4879%" y="133" width="0.0808%" height="15" fill="rgb(212,10,48)" fg:x="1145" fg:w="1"/><text x="92.7379%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.4879%" y="117" width="0.0808%" height="15" fill="rgb(254,118,45)" fg:x="1145" fg:w="1"/><text x="92.7379%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.4879%" y="101" width="0.0808%" height="15" fill="rgb(228,6,45)" fg:x="1145" fg:w="1"/><text x="92.7379%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.4879%" y="85" width="0.0808%" height="15" fill="rgb(241,18,35)" fg:x="1145" fg:w="1"/><text x="92.7379%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="92.5687%" y="133" width="0.1616%" height="15" fill="rgb(227,214,53)" fg:x="1146" fg:w="2"/><text x="92.8187%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="92.7302%" y="133" width="0.4847%" height="15" fill="rgb(224,107,51)" fg:x="1148" fg:w="6"/><text x="92.9802%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="92.8918%" y="117" width="0.3231%" height="15" fill="rgb(248,60,28)" fg:x="1150" fg:w="4"/><text x="93.1418%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="93.0533%" y="101" width="0.1616%" height="15" fill="rgb(249,101,23)" fg:x="1152" fg:w="2"/><text x="93.3033%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.1341%" y="85" width="0.0808%" height="15" fill="rgb(228,51,19)" fg:x="1153" fg:w="1"/><text x="93.3841%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (24 samples, 1.94%)</title><rect x="93.2149%" y="133" width="1.9386%" height="15" fill="rgb(213,20,6)" fg:x="1154" fg:w="24"/><text x="93.4649%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (24 samples, 1.94%)</title><rect x="93.2149%" y="117" width="1.9386%" height="15" fill="rgb(212,124,10)" fg:x="1154" fg:w="24"/><text x="93.4649%" y="127.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (24 samples, 1.94%)</title><rect x="93.2149%" y="101" width="1.9386%" height="15" fill="rgb(248,3,40)" fg:x="1154" fg:w="24"/><text x="93.4649%" y="111.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 3.07%)</title><rect x="92.1648%" y="229" width="3.0695%" height="15" fill="rgb(223,178,23)" fg:x="1141" fg:w="38"/><text x="92.4148%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (38 samples, 3.07%)</title><rect x="92.1648%" y="213" width="3.0695%" height="15" fill="rgb(240,132,45)" fg:x="1141" fg:w="38"/><text x="92.4148%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (38 samples, 3.07%)</title><rect x="92.1648%" y="197" width="3.0695%" height="15" fill="rgb(245,164,36)" fg:x="1141" fg:w="38"/><text x="92.4148%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (38 samples, 3.07%)</title><rect x="92.1648%" y="181" width="3.0695%" height="15" fill="rgb(231,188,53)" fg:x="1141" fg:w="38"/><text x="92.4148%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (38 samples, 3.07%)</title><rect x="92.1648%" y="165" width="3.0695%" height="15" fill="rgb(237,198,39)" fg:x="1141" fg:w="38"/><text x="92.4148%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (38 samples, 3.07%)</title><rect x="92.1648%" y="149" width="3.0695%" height="15" fill="rgb(223,120,35)" fg:x="1141" fg:w="38"/><text x="92.4148%" y="159.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="95.1535%" y="133" width="0.0808%" height="15" fill="rgb(253,107,49)" fg:x="1178" fg:w="1"/><text x="95.4035%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1535%" y="117" width="0.0808%" height="15" fill="rgb(216,44,31)" fg:x="1178" fg:w="1"/><text x="95.4035%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1535%" y="101" width="0.0808%" height="15" fill="rgb(253,87,21)" fg:x="1178" fg:w="1"/><text x="95.4035%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.2342%" y="229" width="0.0808%" height="15" fill="rgb(226,18,2)" fg:x="1179" fg:w="1"/><text x="95.4842%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="95.4766%" y="213" width="0.1616%" height="15" fill="rgb(216,8,46)" fg:x="1182" fg:w="2"/><text x="95.7266%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="95.6381%" y="213" width="0.4039%" height="15" fill="rgb(226,140,39)" fg:x="1184" fg:w="5"/><text x="95.8881%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.9612%" y="197" width="0.0808%" height="15" fill="rgb(221,194,54)" fg:x="1188" fg:w="1"/><text x="96.2112%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9612%" y="181" width="0.0808%" height="15" fill="rgb(213,92,11)" fg:x="1188" fg:w="1"/><text x="96.2112%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.9612%" y="165" width="0.0808%" height="15" fill="rgb(229,162,46)" fg:x="1188" fg:w="1"/><text x="96.2112%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (65 samples, 5.25%)</title><rect x="90.9532%" y="261" width="5.2504%" height="15" fill="rgb(214,111,36)" fg:x="1126" fg:w="65"/><text x="91.2032%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (50 samples, 4.04%)</title><rect x="92.1648%" y="245" width="4.0388%" height="15" fill="rgb(207,6,21)" fg:x="1141" fg:w="50"/><text x="92.4148%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.89%)</title><rect x="95.3150%" y="229" width="0.8885%" height="15" fill="rgb(213,127,38)" fg:x="1180" fg:w="11"/><text x="95.5650%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.0420%" y="213" width="0.1616%" height="15" fill="rgb(238,118,32)" fg:x="1189" fg:w="2"/><text x="96.2920%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.2036%" y="229" width="0.0808%" height="15" fill="rgb(240,139,39)" fg:x="1191" fg:w="1"/><text x="96.4536%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.2036%" y="213" width="0.0808%" height="15" fill="rgb(235,10,37)" fg:x="1191" fg:w="1"/><text x="96.4536%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2036%" y="197" width="0.0808%" height="15" fill="rgb(249,171,38)" fg:x="1191" fg:w="1"/><text x="96.4536%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="96.2843%" y="229" width="0.0808%" height="15" fill="rgb(242,144,32)" fg:x="1192" fg:w="1"/><text x="96.5343%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="96.2036%" y="261" width="0.2423%" height="15" fill="rgb(217,117,21)" fg:x="1191" fg:w="3"/><text x="96.4536%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="96.2036%" y="245" width="0.2423%" height="15" fill="rgb(249,87,1)" fg:x="1191" fg:w="3"/><text x="96.4536%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="96.3651%" y="229" width="0.0808%" height="15" fill="rgb(248,196,48)" fg:x="1193" fg:w="1"/><text x="96.6151%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.3651%" y="213" width="0.0808%" height="15" fill="rgb(251,206,33)" fg:x="1193" fg:w="1"/><text x="96.6151%" y="223.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (75 samples, 6.06%)</title><rect x="90.7916%" y="293" width="6.0582%" height="15" fill="rgb(232,141,28)" fg:x="1124" fg:w="75"/><text x="91.0416%" y="303.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (75 samples, 6.06%)</title><rect x="90.7916%" y="277" width="6.0582%" height="15" fill="rgb(209,167,14)" fg:x="1124" fg:w="75"/><text x="91.0416%" y="287.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="96.4459%" y="261" width="0.4039%" height="15" fill="rgb(225,11,50)" fg:x="1194" fg:w="5"/><text x="96.6959%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="96.4459%" y="245" width="0.4039%" height="15" fill="rgb(209,50,20)" fg:x="1194" fg:w="5"/><text x="96.6959%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (5 samples, 0.40%)</title><rect x="96.4459%" y="229" width="0.4039%" height="15" fill="rgb(212,17,46)" fg:x="1194" fg:w="5"/><text x="96.6959%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="96.7690%" y="213" width="0.0808%" height="15" fill="rgb(216,101,39)" fg:x="1198" fg:w="1"/><text x="97.0190%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="96.7690%" y="197" width="0.0808%" height="15" fill="rgb(212,228,48)" fg:x="1198" fg:w="1"/><text x="97.0190%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7690%" y="181" width="0.0808%" height="15" fill="rgb(250,6,50)" fg:x="1198" fg:w="1"/><text x="97.0190%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (82 samples, 6.62%)</title><rect x="90.3069%" y="325" width="6.6236%" height="15" fill="rgb(250,160,48)" fg:x="1118" fg:w="82"/><text x="90.5569%" y="335.50">indefinit..</text></g><g><title>regex::regex::string::Regex::new (76 samples, 6.14%)</title><rect x="90.7916%" y="309" width="6.1389%" height="15" fill="rgb(244,216,33)" fg:x="1124" fg:w="76"/><text x="91.0416%" y="319.50">regex::r..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="96.8498%" y="293" width="0.0808%" height="15" fill="rgb(207,157,5)" fg:x="1199" fg:w="1"/><text x="97.0998%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0113%" y="245" width="0.0808%" height="15" fill="rgb(228,199,8)" fg:x="1201" fg:w="1"/><text x="97.2613%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (2 samples, 0.16%)</title><rect x="97.0921%" y="245" width="0.1616%" height="15" fill="rgb(227,80,20)" fg:x="1202" fg:w="2"/><text x="97.3421%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="97.0921%" y="229" width="0.1616%" height="15" fill="rgb(222,9,33)" fg:x="1202" fg:w="2"/><text x="97.3421%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="97.0921%" y="213" width="0.1616%" height="15" fill="rgb(239,44,28)" fg:x="1202" fg:w="2"/><text x="97.3421%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="97.1729%" y="197" width="0.0808%" height="15" fill="rgb(249,187,43)" fg:x="1203" fg:w="1"/><text x="97.4229%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.1729%" y="181" width="0.0808%" height="15" fill="rgb(216,141,28)" fg:x="1203" fg:w="1"/><text x="97.4229%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1729%" y="165" width="0.0808%" height="15" fill="rgb(230,154,53)" fg:x="1203" fg:w="1"/><text x="97.4229%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1729%" y="149" width="0.0808%" height="15" fill="rgb(227,82,4)" fg:x="1203" fg:w="1"/><text x="97.4229%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="97.2536%" y="245" width="0.0808%" height="15" fill="rgb(220,107,16)" fg:x="1204" fg:w="1"/><text x="97.5036%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="97.2536%" y="229" width="0.0808%" height="15" fill="rgb(207,187,2)" fg:x="1204" fg:w="1"/><text x="97.5036%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.2536%" y="213" width="0.0808%" height="15" fill="rgb(210,162,52)" fg:x="1204" fg:w="1"/><text x="97.5036%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (7 samples, 0.57%)</title><rect x="96.9305%" y="293" width="0.5654%" height="15" fill="rgb(217,216,49)" fg:x="1200" fg:w="7"/><text x="97.1805%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (6 samples, 0.48%)</title><rect x="97.0113%" y="277" width="0.4847%" height="15" fill="rgb(218,146,49)" fg:x="1201" fg:w="6"/><text x="97.2613%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (6 samples, 0.48%)</title><rect x="97.0113%" y="261" width="0.4847%" height="15" fill="rgb(216,55,40)" fg:x="1201" fg:w="6"/><text x="97.2613%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="97.3344%" y="245" width="0.1616%" height="15" fill="rgb(208,196,21)" fg:x="1205" fg:w="2"/><text x="97.5844%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.3344%" y="229" width="0.1616%" height="15" fill="rgb(242,117,42)" fg:x="1205" fg:w="2"/><text x="97.5844%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="97.3344%" y="213" width="0.1616%" height="15" fill="rgb(210,11,23)" fg:x="1205" fg:w="2"/><text x="97.5844%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="97.3344%" y="197" width="0.1616%" height="15" fill="rgb(217,110,2)" fg:x="1205" fg:w="2"/><text x="97.5844%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="97.4960%" y="245" width="0.0808%" height="15" fill="rgb(229,77,54)" fg:x="1207" fg:w="1"/><text x="97.7460%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="97.4960%" y="229" width="0.0808%" height="15" fill="rgb(218,53,16)" fg:x="1207" fg:w="1"/><text x="97.7460%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="97.4960%" y="213" width="0.0808%" height="15" fill="rgb(215,38,13)" fg:x="1207" fg:w="1"/><text x="97.7460%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (175 samples, 14.14%)</title><rect x="83.5218%" y="405" width="14.1357%" height="15" fill="rgb(235,42,18)" fg:x="1034" fg:w="175"/><text x="83.7718%" y="415.50">&lt;&amp;kernel::model::Enti..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (169 samples, 13.65%)</title><rect x="84.0065%" y="389" width="13.6511%" height="15" fill="rgb(219,66,54)" fg:x="1040" fg:w="169"/><text x="84.2565%" y="399.50">plugins_core::looking..</text></g><g><title>indefinite::indefinite (169 samples, 13.65%)</title><rect x="84.0065%" y="373" width="13.6511%" height="15" fill="rgb(222,205,4)" fg:x="1040" fg:w="169"/><text x="84.2565%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (169 samples, 13.65%)</title><rect x="84.0065%" y="357" width="13.6511%" height="15" fill="rgb(227,213,46)" fg:x="1040" fg:w="169"/><text x="84.2565%" y="367.50">indefinite::methods::..</text></g><g><title>indefinite::methods::apply_rules (169 samples, 13.65%)</title><rect x="84.0065%" y="341" width="13.6511%" height="15" fill="rgb(250,145,42)" fg:x="1040" fg:w="169"/><text x="84.2565%" y="351.50">indefinite::methods::..</text></g><g><title>indefinite::rules::other::Other::run (9 samples, 0.73%)</title><rect x="96.9305%" y="325" width="0.7270%" height="15" fill="rgb(219,15,2)" fg:x="1200" fg:w="9"/><text x="97.1805%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (9 samples, 0.73%)</title><rect x="96.9305%" y="309" width="0.7270%" height="15" fill="rgb(231,181,52)" fg:x="1200" fg:w="9"/><text x="97.1805%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="97.4960%" y="293" width="0.1616%" height="15" fill="rgb(235,1,42)" fg:x="1207" fg:w="2"/><text x="97.7460%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="97.4960%" y="277" width="0.1616%" height="15" fill="rgb(249,88,27)" fg:x="1207" fg:w="2"/><text x="97.7460%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="97.4960%" y="261" width="0.1616%" height="15" fill="rgb(235,145,16)" fg:x="1207" fg:w="2"/><text x="97.7460%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="97.5767%" y="245" width="0.0808%" height="15" fill="rgb(237,114,19)" fg:x="1208" fg:w="1"/><text x="97.8267%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="97.5767%" y="229" width="0.0808%" height="15" fill="rgb(238,51,50)" fg:x="1208" fg:w="1"/><text x="97.8267%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.5767%" y="213" width="0.0808%" height="15" fill="rgb(205,194,25)" fg:x="1208" fg:w="1"/><text x="97.8267%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.5767%" y="197" width="0.0808%" height="15" fill="rgb(215,203,17)" fg:x="1208" fg:w="1"/><text x="97.8267%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6575%" y="389" width="0.0808%" height="15" fill="rgb(233,112,49)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6575%" y="373" width="0.0808%" height="15" fill="rgb(241,130,26)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6575%" y="357" width="0.0808%" height="15" fill="rgb(252,223,19)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6575%" y="341" width="0.0808%" height="15" fill="rgb(211,95,25)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6575%" y="325" width="0.0808%" height="15" fill="rgb(251,182,27)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.6575%" y="309" width="0.0808%" height="15" fill="rgb(238,24,4)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.6575%" y="293" width="0.0808%" height="15" fill="rgb(224,220,25)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.6575%" y="277" width="0.0808%" height="15" fill="rgb(239,133,26)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.6575%" y="261" width="0.0808%" height="15" fill="rgb(211,94,48)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.6575%" y="245" width="0.0808%" height="15" fill="rgb(239,87,6)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.6575%" y="229" width="0.0808%" height="15" fill="rgb(227,62,0)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.6575%" y="213" width="0.0808%" height="15" fill="rgb(211,226,4)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.6575%" y="197" width="0.0808%" height="15" fill="rgb(253,38,52)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.6575%" y="181" width="0.0808%" height="15" fill="rgb(229,126,40)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6575%" y="165" width="0.0808%" height="15" fill="rgb(229,165,44)" fg:x="1209" fg:w="1"/><text x="97.9075%" y="175.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.6575%" y="405" width="0.1616%" height="15" fill="rgb(247,95,47)" fg:x="1209" fg:w="2"/><text x="97.9075%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7383%" y="389" width="0.0808%" height="15" fill="rgb(216,140,30)" fg:x="1210" fg:w="1"/><text x="97.9883%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7383%" y="373" width="0.0808%" height="15" fill="rgb(246,214,8)" fg:x="1210" fg:w="1"/><text x="97.9883%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.7383%" y="357" width="0.0808%" height="15" fill="rgb(227,224,15)" fg:x="1210" fg:w="1"/><text x="97.9883%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8191%" y="341" width="0.0808%" height="15" fill="rgb(233,175,4)" fg:x="1211" fg:w="1"/><text x="98.0691%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.8998%" y="277" width="0.0808%" height="15" fill="rgb(221,66,45)" fg:x="1212" fg:w="1"/><text x="98.1498%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="97.8191%" y="357" width="0.2423%" height="15" fill="rgb(221,178,18)" fg:x="1211" fg:w="3"/><text x="98.0691%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.8998%" y="341" width="0.1616%" height="15" fill="rgb(213,81,29)" fg:x="1212" fg:w="2"/><text x="98.1498%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8998%" y="325" width="0.1616%" height="15" fill="rgb(220,89,49)" fg:x="1212" fg:w="2"/><text x="98.1498%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="97.8998%" y="309" width="0.1616%" height="15" fill="rgb(227,60,33)" fg:x="1212" fg:w="2"/><text x="98.1498%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8998%" y="293" width="0.1616%" height="15" fill="rgb(205,113,12)" fg:x="1212" fg:w="2"/><text x="98.1498%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9806%" y="277" width="0.0808%" height="15" fill="rgb(211,32,1)" fg:x="1213" fg:w="1"/><text x="98.2306%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9806%" y="261" width="0.0808%" height="15" fill="rgb(246,2,12)" fg:x="1213" fg:w="1"/><text x="98.2306%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.9806%" y="245" width="0.0808%" height="15" fill="rgb(243,37,27)" fg:x="1213" fg:w="1"/><text x="98.2306%" y="255.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="97.8191%" y="373" width="0.3231%" height="15" fill="rgb(248,211,31)" fg:x="1211" fg:w="4"/><text x="98.0691%" y="383.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="98.0614%" y="357" width="0.0808%" height="15" fill="rgb(242,146,47)" fg:x="1214" fg:w="1"/><text x="98.3114%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.0614%" y="341" width="0.0808%" height="15" fill="rgb(206,70,20)" fg:x="1214" fg:w="1"/><text x="98.3114%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.0614%" y="325" width="0.0808%" height="15" fill="rgb(215,10,51)" fg:x="1214" fg:w="1"/><text x="98.3114%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.1422%" y="373" width="0.0808%" height="15" fill="rgb(243,178,53)" fg:x="1215" fg:w="1"/><text x="98.3922%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="98.1422%" y="357" width="0.0808%" height="15" fill="rgb(233,221,20)" fg:x="1215" fg:w="1"/><text x="98.3922%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.1422%" y="341" width="0.0808%" height="15" fill="rgb(218,95,35)" fg:x="1215" fg:w="1"/><text x="98.3922%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (185 samples, 14.94%)</title><rect x="83.3603%" y="565" width="14.9435%" height="15" fill="rgb(229,13,5)" fg:x="1032" fg:w="185"/><text x="83.6103%" y="575.50">kernel::plugins::mw::Mi..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (185 samples, 14.94%)</title><rect x="83.3603%" y="549" width="14.9435%" height="15" fill="rgb(252,164,30)" fg:x="1032" fg:w="185"/><text x="83.6103%" y="559.50">&lt;plugins_dynlib::Dynami..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (185 samples, 14.94%)</title><rect x="83.3603%" y="533" width="14.9435%" height="15" fill="rgb(232,68,36)" fg:x="1032" fg:w="185"/><text x="83.6103%" y="543.50">kernel::plugins::mw::Mi..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (185 samples, 14.94%)</title><rect x="83.3603%" y="517" width="14.9435%" height="15" fill="rgb(219,59,54)" fg:x="1032" fg:w="185"/><text x="83.6103%" y="527.50">core::ops::function::Fn..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (185 samples, 14.94%)</title><rect x="83.3603%" y="501" width="14.9435%" height="15" fill="rgb(250,92,33)" fg:x="1032" fg:w="185"/><text x="83.6103%" y="511.50">kernel::plugins::mw::Mi..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (185 samples, 14.94%)</title><rect x="83.3603%" y="485" width="14.9435%" height="15" fill="rgb(229,162,54)" fg:x="1032" fg:w="185"/><text x="83.6103%" y="495.50">core::ops::function::Fn..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (185 samples, 14.94%)</title><rect x="83.3603%" y="469" width="14.9435%" height="15" fill="rgb(244,114,52)" fg:x="1032" fg:w="185"/><text x="83.6103%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (185 samples, 14.94%)</title><rect x="83.3603%" y="453" width="14.9435%" height="15" fill="rgb(212,211,43)" fg:x="1032" fg:w="185"/><text x="83.6103%" y="463.50">&lt;engine::session::state..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (185 samples, 14.94%)</title><rect x="83.3603%" y="437" width="14.9435%" height="15" fill="rgb(226,147,8)" fg:x="1032" fg:w="185"/><text x="83.6103%" y="447.50">&lt;plugins_core::looking:..</text></g><g><title>plugins_core::looking::model::new_area_observation (184 samples, 14.86%)</title><rect x="83.4410%" y="421" width="14.8627%" height="15" fill="rgb(226,23,13)" fg:x="1033" fg:w="184"/><text x="83.6910%" y="431.50">plugins_core::looking::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.48%)</title><rect x="97.8191%" y="405" width="0.4847%" height="15" fill="rgb(240,63,4)" fg:x="1211" fg:w="6"/><text x="98.0691%" y="415.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (6 samples, 0.48%)</title><rect x="97.8191%" y="389" width="0.4847%" height="15" fill="rgb(221,1,32)" fg:x="1211" fg:w="6"/><text x="98.0691%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.2229%" y="373" width="0.0808%" height="15" fill="rgb(242,117,10)" fg:x="1216" fg:w="1"/><text x="98.4729%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2229%" y="357" width="0.0808%" height="15" fill="rgb(249,172,44)" fg:x="1216" fg:w="1"/><text x="98.4729%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2229%" y="341" width="0.0808%" height="15" fill="rgb(244,46,45)" fg:x="1216" fg:w="1"/><text x="98.4729%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3037%" y="501" width="0.0808%" height="15" fill="rgb(206,43,17)" fg:x="1217" fg:w="1"/><text x="98.5537%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3037%" y="485" width="0.0808%" height="15" fill="rgb(239,218,39)" fg:x="1217" fg:w="1"/><text x="98.5537%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3037%" y="469" width="0.0808%" height="15" fill="rgb(208,169,54)" fg:x="1217" fg:w="1"/><text x="98.5537%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.3037%" y="453" width="0.0808%" height="15" fill="rgb(247,25,42)" fg:x="1217" fg:w="1"/><text x="98.5537%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.3037%" y="437" width="0.0808%" height="15" fill="rgb(226,23,31)" fg:x="1217" fg:w="1"/><text x="98.5537%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.3037%" y="421" width="0.0808%" height="15" fill="rgb(247,16,28)" fg:x="1217" fg:w="1"/><text x="98.5537%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.3037%" y="405" width="0.0808%" height="15" fill="rgb(231,147,38)" fg:x="1217" fg:w="1"/><text x="98.5537%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.3037%" y="389" width="0.0808%" height="15" fill="rgb(253,81,48)" fg:x="1217" fg:w="1"/><text x="98.5537%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.3037%" y="517" width="0.1616%" height="15" fill="rgb(249,222,43)" fg:x="1217" fg:w="2"/><text x="98.5537%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3845%" y="501" width="0.0808%" height="15" fill="rgb(221,3,27)" fg:x="1218" fg:w="1"/><text x="98.6345%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3845%" y="485" width="0.0808%" height="15" fill="rgb(228,180,5)" fg:x="1218" fg:w="1"/><text x="98.6345%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.3845%" y="469" width="0.0808%" height="15" fill="rgb(227,131,42)" fg:x="1218" fg:w="1"/><text x="98.6345%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3845%" y="453" width="0.0808%" height="15" fill="rgb(212,3,39)" fg:x="1218" fg:w="1"/><text x="98.6345%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3845%" y="437" width="0.0808%" height="15" fill="rgb(226,45,5)" fg:x="1218" fg:w="1"/><text x="98.6345%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4653%" y="357" width="0.0808%" height="15" fill="rgb(215,167,45)" fg:x="1219" fg:w="1"/><text x="98.7153%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4653%" y="341" width="0.0808%" height="15" fill="rgb(250,218,53)" fg:x="1219" fg:w="1"/><text x="98.7153%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.4653%" y="325" width="0.0808%" height="15" fill="rgb(207,140,0)" fg:x="1219" fg:w="1"/><text x="98.7153%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4653%" y="309" width="0.0808%" height="15" fill="rgb(238,133,51)" fg:x="1219" fg:w="1"/><text x="98.7153%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4653%" y="293" width="0.0808%" height="15" fill="rgb(218,203,53)" fg:x="1219" fg:w="1"/><text x="98.7153%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4653%" y="277" width="0.0808%" height="15" fill="rgb(226,184,25)" fg:x="1219" fg:w="1"/><text x="98.7153%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.4653%" y="261" width="0.0808%" height="15" fill="rgb(231,121,21)" fg:x="1219" fg:w="1"/><text x="98.7153%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.4653%" y="453" width="0.1616%" height="15" fill="rgb(251,14,34)" fg:x="1219" fg:w="2"/><text x="98.7153%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.4653%" y="437" width="0.1616%" height="15" fill="rgb(249,193,11)" fg:x="1219" fg:w="2"/><text x="98.7153%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.4653%" y="421" width="0.1616%" height="15" fill="rgb(220,172,37)" fg:x="1219" fg:w="2"/><text x="98.7153%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.4653%" y="405" width="0.1616%" height="15" fill="rgb(231,229,43)" fg:x="1219" fg:w="2"/><text x="98.7153%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.4653%" y="389" width="0.1616%" height="15" fill="rgb(250,161,5)" fg:x="1219" fg:w="2"/><text x="98.7153%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.4653%" y="373" width="0.1616%" height="15" fill="rgb(218,225,18)" fg:x="1219" fg:w="2"/><text x="98.7153%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.5460%" y="357" width="0.0808%" height="15" fill="rgb(245,45,42)" fg:x="1220" fg:w="1"/><text x="98.7960%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.5460%" y="341" width="0.0808%" height="15" fill="rgb(211,115,1)" fg:x="1220" fg:w="1"/><text x="98.7960%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.5460%" y="325" width="0.0808%" height="15" fill="rgb(248,133,52)" fg:x="1220" fg:w="1"/><text x="98.7960%" y="335.50"></text></g><g><title>plugins_core::tools::contained_by (5 samples, 0.40%)</title><rect x="98.3037%" y="533" width="0.4039%" height="15" fill="rgb(238,100,21)" fg:x="1217" fg:w="5"/><text x="98.5537%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="98.4653%" y="517" width="0.2423%" height="15" fill="rgb(247,144,11)" fg:x="1219" fg:w="3"/><text x="98.7153%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="98.4653%" y="501" width="0.2423%" height="15" fill="rgb(206,164,16)" fg:x="1219" fg:w="3"/><text x="98.7153%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="98.4653%" y="485" width="0.2423%" height="15" fill="rgb(222,34,3)" fg:x="1219" fg:w="3"/><text x="98.7153%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="98.4653%" y="469" width="0.2423%" height="15" fill="rgb(248,82,4)" fg:x="1219" fg:w="3"/><text x="98.7153%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.6268%" y="453" width="0.0808%" height="15" fill="rgb(228,81,46)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.6268%" y="437" width="0.0808%" height="15" fill="rgb(227,67,47)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6268%" y="421" width="0.0808%" height="15" fill="rgb(215,93,53)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6268%" y="405" width="0.0808%" height="15" fill="rgb(248,194,39)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6268%" y="389" width="0.0808%" height="15" fill="rgb(215,5,19)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6268%" y="373" width="0.0808%" height="15" fill="rgb(226,215,51)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6268%" y="357" width="0.0808%" height="15" fill="rgb(225,56,26)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6268%" y="341" width="0.0808%" height="15" fill="rgb(222,75,29)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6268%" y="325" width="0.0808%" height="15" fill="rgb(236,139,6)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6268%" y="309" width="0.0808%" height="15" fill="rgb(223,137,36)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6268%" y="293" width="0.0808%" height="15" fill="rgb(226,99,2)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6268%" y="277" width="0.0808%" height="15" fill="rgb(206,133,23)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6268%" y="261" width="0.0808%" height="15" fill="rgb(243,173,15)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6268%" y="245" width="0.0808%" height="15" fill="rgb(228,69,28)" fg:x="1221" fg:w="1"/><text x="98.8768%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7076%" y="501" width="0.0808%" height="15" fill="rgb(212,51,22)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7076%" y="485" width="0.0808%" height="15" fill="rgb(227,113,0)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7076%" y="469" width="0.0808%" height="15" fill="rgb(252,84,27)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7076%" y="453" width="0.0808%" height="15" fill="rgb(223,145,39)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7076%" y="437" width="0.0808%" height="15" fill="rgb(239,219,30)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7076%" y="421" width="0.0808%" height="15" fill="rgb(224,196,39)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.7076%" y="405" width="0.0808%" height="15" fill="rgb(205,35,43)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.7076%" y="389" width="0.0808%" height="15" fill="rgb(228,201,21)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.7076%" y="373" width="0.0808%" height="15" fill="rgb(237,118,16)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7076%" y="357" width="0.0808%" height="15" fill="rgb(241,17,19)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7076%" y="341" width="0.0808%" height="15" fill="rgb(214,10,25)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.7076%" y="325" width="0.0808%" height="15" fill="rgb(238,37,29)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.7076%" y="309" width="0.0808%" height="15" fill="rgb(253,83,25)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.7076%" y="293" width="0.0808%" height="15" fill="rgb(234,192,12)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.7076%" y="277" width="0.0808%" height="15" fill="rgb(241,216,45)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="98.7076%" y="261" width="0.0808%" height="15" fill="rgb(242,22,33)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="98.7076%" y="245" width="0.0808%" height="15" fill="rgb(231,105,49)" fg:x="1222" fg:w="1"/><text x="98.9576%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="98.7884%" y="405" width="0.0808%" height="15" fill="rgb(218,204,15)" fg:x="1223" fg:w="1"/><text x="99.0384%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7884%" y="389" width="0.0808%" height="15" fill="rgb(235,138,41)" fg:x="1223" fg:w="1"/><text x="99.0384%" y="399.50"></text></g><g><title>engine::session::Session::captured (201 samples, 16.24%)</title><rect x="82.7948%" y="709" width="16.2359%" height="15" fill="rgb(246,0,9)" fg:x="1025" fg:w="201"/><text x="83.0448%" y="719.50">engine::session::Session:..</text></g><g><title>engine::session::logs::capture (200 samples, 16.16%)</title><rect x="82.8756%" y="693" width="16.1551%" height="15" fill="rgb(210,74,4)" fg:x="1026" fg:w="200"/><text x="83.1256%" y="703.50">engine::session::logs::ca..</text></g><g><title>tracing_core::dispatcher::with_default (200 samples, 16.16%)</title><rect x="82.8756%" y="677" width="16.1551%" height="15" fill="rgb(250,60,41)" fg:x="1026" fg:w="200"/><text x="83.1256%" y="687.50">tracing_core::dispatcher:..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (200 samples, 16.16%)</title><rect x="82.8756%" y="661" width="16.1551%" height="15" fill="rgb(220,115,12)" fg:x="1026" fg:w="200"/><text x="83.1256%" y="671.50">&lt;engine::session::Session..</text></g><g><title>kernel::plugins::mw::apply_middleware (200 samples, 16.16%)</title><rect x="82.8756%" y="645" width="16.1551%" height="15" fill="rgb(237,100,13)" fg:x="1026" fg:w="200"/><text x="83.1256%" y="655.50">kernel::plugins::mw::appl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (200 samples, 16.16%)</title><rect x="82.8756%" y="629" width="16.1551%" height="15" fill="rgb(213,55,26)" fg:x="1026" fg:w="200"/><text x="83.1256%" y="639.50">kernel::plugins::mw::Midd..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (200 samples, 16.16%)</title><rect x="82.8756%" y="613" width="16.1551%" height="15" fill="rgb(216,17,4)" fg:x="1026" fg:w="200"/><text x="83.1256%" y="623.50">&lt;engine::session::ExpandS..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (196 samples, 15.83%)</title><rect x="83.1987%" y="597" width="15.8320%" height="15" fill="rgb(220,153,47)" fg:x="1030" fg:w="196"/><text x="83.4487%" y="607.50">kernel::plugins::mw::Mid..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (195 samples, 15.75%)</title><rect x="83.2795%" y="581" width="15.7512%" height="15" fill="rgb(215,131,9)" fg:x="1031" fg:w="195"/><text x="83.5295%" y="591.50">&lt;plugins_rune::RuneMiddl..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (9 samples, 0.73%)</title><rect x="98.3037%" y="565" width="0.7270%" height="15" fill="rgb(233,46,42)" fg:x="1217" fg:w="9"/><text x="98.5537%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (9 samples, 0.73%)</title><rect x="98.3037%" y="549" width="0.7270%" height="15" fill="rgb(226,86,7)" fg:x="1217" fg:w="9"/><text x="98.5537%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="98.7076%" y="533" width="0.3231%" height="15" fill="rgb(239,226,21)" fg:x="1222" fg:w="4"/><text x="98.9576%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="98.7076%" y="517" width="0.3231%" height="15" fill="rgb(244,137,22)" fg:x="1222" fg:w="4"/><text x="98.9576%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.7884%" y="501" width="0.2423%" height="15" fill="rgb(211,139,35)" fg:x="1223" fg:w="3"/><text x="99.0384%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.7884%" y="485" width="0.2423%" height="15" fill="rgb(214,62,50)" fg:x="1223" fg:w="3"/><text x="99.0384%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="98.7884%" y="469" width="0.2423%" height="15" fill="rgb(212,113,44)" fg:x="1223" fg:w="3"/><text x="99.0384%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="98.7884%" y="453" width="0.2423%" height="15" fill="rgb(226,150,43)" fg:x="1223" fg:w="3"/><text x="99.0384%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="98.7884%" y="437" width="0.2423%" height="15" fill="rgb(250,71,37)" fg:x="1223" fg:w="3"/><text x="99.0384%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (3 samples, 0.24%)</title><rect x="98.7884%" y="421" width="0.2423%" height="15" fill="rgb(219,76,19)" fg:x="1223" fg:w="3"/><text x="99.0384%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.8691%" y="405" width="0.1616%" height="15" fill="rgb(250,39,11)" fg:x="1224" fg:w="2"/><text x="99.1191%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.8691%" y="389" width="0.1616%" height="15" fill="rgb(230,64,31)" fg:x="1224" fg:w="2"/><text x="99.1191%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.8691%" y="373" width="0.1616%" height="15" fill="rgb(208,222,23)" fg:x="1224" fg:w="2"/><text x="99.1191%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.8691%" y="357" width="0.1616%" height="15" fill="rgb(227,125,18)" fg:x="1224" fg:w="2"/><text x="99.1191%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.9499%" y="341" width="0.0808%" height="15" fill="rgb(234,210,9)" fg:x="1225" fg:w="1"/><text x="99.1999%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0307%" y="661" width="0.0808%" height="15" fill="rgb(217,127,24)" fg:x="1226" fg:w="1"/><text x="99.2807%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0307%" y="645" width="0.0808%" height="15" fill="rgb(239,141,48)" fg:x="1226" fg:w="1"/><text x="99.2807%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0307%" y="629" width="0.0808%" height="15" fill="rgb(227,109,8)" fg:x="1226" fg:w="1"/><text x="99.2807%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0307%" y="613" width="0.0808%" height="15" fill="rgb(235,184,23)" fg:x="1226" fg:w="1"/><text x="99.2807%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0307%" y="597" width="0.0808%" height="15" fill="rgb(227,226,48)" fg:x="1226" fg:w="1"/><text x="99.2807%" y="607.50"></text></g><g><title>engine::session::internal::Added::find_refs (3 samples, 0.24%)</title><rect x="99.0307%" y="693" width="0.2423%" height="15" fill="rgb(206,150,11)" fg:x="1226" fg:w="3"/><text x="99.2807%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="99.0307%" y="677" width="0.2423%" height="15" fill="rgb(254,2,33)" fg:x="1226" fg:w="3"/><text x="99.2807%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.1115%" y="661" width="0.1616%" height="15" fill="rgb(243,160,20)" fg:x="1227" fg:w="2"/><text x="99.3615%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.1115%" y="645" width="0.1616%" height="15" fill="rgb(218,208,30)" fg:x="1227" fg:w="2"/><text x="99.3615%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.1115%" y="629" width="0.1616%" height="15" fill="rgb(224,120,49)" fg:x="1227" fg:w="2"/><text x="99.3615%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1922%" y="613" width="0.0808%" height="15" fill="rgb(246,12,2)" fg:x="1228" fg:w="1"/><text x="99.4422%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1922%" y="597" width="0.0808%" height="15" fill="rgb(236,117,3)" fg:x="1228" fg:w="1"/><text x="99.4422%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1922%" y="581" width="0.0808%" height="15" fill="rgb(216,128,52)" fg:x="1228" fg:w="1"/><text x="99.4422%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3538%" y="677" width="0.0808%" height="15" fill="rgb(246,145,19)" fg:x="1230" fg:w="1"/><text x="99.6038%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3538%" y="661" width="0.0808%" height="15" fill="rgb(222,11,46)" fg:x="1230" fg:w="1"/><text x="99.6038%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3538%" y="645" width="0.0808%" height="15" fill="rgb(245,82,36)" fg:x="1230" fg:w="1"/><text x="99.6038%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3538%" y="629" width="0.0808%" height="15" fill="rgb(250,73,51)" fg:x="1230" fg:w="1"/><text x="99.6038%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3538%" y="613" width="0.0808%" height="15" fill="rgb(221,189,23)" fg:x="1230" fg:w="1"/><text x="99.6038%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3538%" y="597" width="0.0808%" height="15" fill="rgb(210,33,7)" fg:x="1230" fg:w="1"/><text x="99.6038%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.4346%" y="677" width="0.0808%" height="15" fill="rgb(210,107,22)" fg:x="1231" fg:w="1"/><text x="99.6846%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.5153%" y="677" width="0.1616%" height="15" fill="rgb(222,116,37)" fg:x="1232" fg:w="2"/><text x="99.7653%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5153%" y="661" width="0.1616%" height="15" fill="rgb(254,17,48)" fg:x="1232" fg:w="2"/><text x="99.7653%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5153%" y="645" width="0.1616%" height="15" fill="rgb(224,36,32)" fg:x="1232" fg:w="2"/><text x="99.7653%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.5153%" y="629" width="0.1616%" height="15" fill="rgb(232,90,46)" fg:x="1232" fg:w="2"/><text x="99.7653%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5153%" y="613" width="0.1616%" height="15" fill="rgb(241,66,40)" fg:x="1232" fg:w="2"/><text x="99.7653%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.5153%" y="597" width="0.1616%" height="15" fill="rgb(249,184,29)" fg:x="1232" fg:w="2"/><text x="99.7653%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="99.5153%" y="581" width="0.1616%" height="15" fill="rgb(231,181,1)" fg:x="1232" fg:w="2"/><text x="99.7653%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="99.5153%" y="565" width="0.1616%" height="15" fill="rgb(224,94,2)" fg:x="1232" fg:w="2"/><text x="99.7653%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="99.5153%" y="549" width="0.1616%" height="15" fill="rgb(229,170,15)" fg:x="1232" fg:w="2"/><text x="99.7653%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.5961%" y="533" width="0.0808%" height="15" fill="rgb(240,127,35)" fg:x="1233" fg:w="1"/><text x="99.8461%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5961%" y="517" width="0.0808%" height="15" fill="rgb(248,196,34)" fg:x="1233" fg:w="1"/><text x="99.8461%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6769%" y="549" width="0.0808%" height="15" fill="rgb(236,137,7)" fg:x="1234" fg:w="1"/><text x="99.9269%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6769%" y="533" width="0.0808%" height="15" fill="rgb(235,127,16)" fg:x="1234" fg:w="1"/><text x="99.9269%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6769%" y="517" width="0.0808%" height="15" fill="rgb(250,192,54)" fg:x="1234" fg:w="1"/><text x="99.9269%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6769%" y="501" width="0.0808%" height="15" fill="rgb(218,98,20)" fg:x="1234" fg:w="1"/><text x="99.9269%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6769%" y="485" width="0.0808%" height="15" fill="rgb(230,176,47)" fg:x="1234" fg:w="1"/><text x="99.9269%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.81%)</title><rect x="99.0307%" y="709" width="0.8078%" height="15" fill="rgb(244,2,33)" fg:x="1226" fg:w="10"/><text x="99.2807%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="99.2730%" y="693" width="0.5654%" height="15" fill="rgb(231,100,17)" fg:x="1229" fg:w="7"/><text x="99.5230%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.6769%" y="677" width="0.1616%" height="15" fill="rgb(245,23,12)" fg:x="1234" fg:w="2"/><text x="99.9269%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.6769%" y="661" width="0.1616%" height="15" fill="rgb(249,55,22)" fg:x="1234" fg:w="2"/><text x="99.9269%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6769%" y="645" width="0.1616%" height="15" fill="rgb(207,134,9)" fg:x="1234" fg:w="2"/><text x="99.9269%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6769%" y="629" width="0.1616%" height="15" fill="rgb(218,134,0)" fg:x="1234" fg:w="2"/><text x="99.9269%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6769%" y="613" width="0.1616%" height="15" fill="rgb(213,212,33)" fg:x="1234" fg:w="2"/><text x="99.9269%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6769%" y="597" width="0.1616%" height="15" fill="rgb(252,106,18)" fg:x="1234" fg:w="2"/><text x="99.9269%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6769%" y="581" width="0.1616%" height="15" fill="rgb(208,126,42)" fg:x="1234" fg:w="2"/><text x="99.9269%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6769%" y="565" width="0.1616%" height="15" fill="rgb(246,175,29)" fg:x="1234" fg:w="2"/><text x="99.9269%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7577%" y="549" width="0.0808%" height="15" fill="rgb(215,13,50)" fg:x="1235" fg:w="1"/><text x="100.0077%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.7577%" y="533" width="0.0808%" height="15" fill="rgb(216,172,15)" fg:x="1235" fg:w="1"/><text x="100.0077%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.8384%" y="661" width="0.0808%" height="15" fill="rgb(212,103,13)" fg:x="1236" fg:w="1"/><text x="100.0884%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8384%" y="645" width="0.0808%" height="15" fill="rgb(231,171,36)" fg:x="1236" fg:w="1"/><text x="100.0884%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8384%" y="629" width="0.0808%" height="15" fill="rgb(250,123,20)" fg:x="1236" fg:w="1"/><text x="100.0884%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.8384%" y="613" width="0.0808%" height="15" fill="rgb(212,53,50)" fg:x="1236" fg:w="1"/><text x="100.0884%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8384%" y="597" width="0.0808%" height="15" fill="rgb(243,54,12)" fg:x="1236" fg:w="1"/><text x="100.0884%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8384%" y="581" width="0.0808%" height="15" fill="rgb(234,101,34)" fg:x="1236" fg:w="1"/><text x="100.0884%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8384%" y="565" width="0.0808%" height="15" fill="rgb(254,67,22)" fg:x="1236" fg:w="1"/><text x="100.0884%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8384%" y="549" width="0.0808%" height="15" fill="rgb(250,35,47)" fg:x="1236" fg:w="1"/><text x="100.0884%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.8384%" y="533" width="0.0808%" height="15" fill="rgb(226,126,38)" fg:x="1236" fg:w="1"/><text x="100.0884%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8384%" y="517" width="0.0808%" height="15" fill="rgb(216,138,53)" fg:x="1236" fg:w="1"/><text x="100.0884%" y="527.50"></text></g><g><title>all (1,238 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(246,199,43)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-4ed3b75e (1,238 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(232,125,11)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="1087.50">simple-4ed3b75e</text></g><g><title>_start (1,238 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(218,219,45)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,238 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(216,102,54)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,238 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(250,228,7)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,238 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(226,125,25)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,238 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(224,165,27)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,238 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(233,86,3)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,238 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(228,116,20)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,238 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(209,192,17)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,238 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(224,88,34)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,238 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(233,38,6)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,238 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(212,59,30)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,238 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(213,80,3)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,238 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(251,178,7)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,238 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(213,154,26)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,238 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(238,165,49)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,238 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(248,91,46)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,238 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(244,21,52)" fg:x="0" fg:w="1238"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (294 samples, 23.75%)</title><rect x="76.2520%" y="789" width="23.7480%" height="15" fill="rgb(247,122,20)" fg:x="944" fg:w="294"/><text x="76.5020%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; a..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (294 samples, 23.75%)</title><rect x="76.2520%" y="773" width="23.7480%" height="15" fill="rgb(218,27,9)" fg:x="944" fg:w="294"/><text x="76.5020%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (294 samples, 23.75%)</title><rect x="76.2520%" y="757" width="23.7480%" height="15" fill="rgb(246,7,6)" fg:x="944" fg:w="294"/><text x="76.5020%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (213 samples, 17.21%)</title><rect x="82.7948%" y="741" width="17.2052%" height="15" fill="rgb(227,135,54)" fg:x="1025" fg:w="213"/><text x="83.0448%" y="751.50">engine::session::Session::e..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (213 samples, 17.21%)</title><rect x="82.7948%" y="725" width="17.2052%" height="15" fill="rgb(247,14,11)" fg:x="1025" fg:w="213"/><text x="83.0448%" y="735.50">engine::session::Session::e..</text></g><g><title>kernel::model::EntityPtrResolver::world (2 samples, 0.16%)</title><rect x="99.8384%" y="709" width="0.1616%" height="15" fill="rgb(206,149,34)" fg:x="1236" fg:w="2"/><text x="100.0884%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="99.8384%" y="693" width="0.1616%" height="15" fill="rgb(227,228,4)" fg:x="1236" fg:w="2"/><text x="100.0884%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.8384%" y="677" width="0.1616%" height="15" fill="rgb(238,218,28)" fg:x="1236" fg:w="2"/><text x="100.0884%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.9192%" y="661" width="0.0808%" height="15" fill="rgb(252,86,40)" fg:x="1237" fg:w="1"/><text x="100.1692%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.9192%" y="645" width="0.0808%" height="15" fill="rgb(251,225,11)" fg:x="1237" fg:w="1"/><text x="100.1692%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9192%" y="629" width="0.0808%" height="15" fill="rgb(206,46,49)" fg:x="1237" fg:w="1"/><text x="100.1692%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9192%" y="613" width="0.0808%" height="15" fill="rgb(245,128,24)" fg:x="1237" fg:w="1"/><text x="100.1692%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9192%" y="597" width="0.0808%" height="15" fill="rgb(219,177,34)" fg:x="1237" fg:w="1"/><text x="100.1692%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9192%" y="581" width="0.0808%" height="15" fill="rgb(218,60,48)" fg:x="1237" fg:w="1"/><text x="100.1692%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9192%" y="565" width="0.0808%" height="15" fill="rgb(221,11,5)" fg:x="1237" fg:w="1"/><text x="100.1692%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="99.9192%" y="549" width="0.0808%" height="15" fill="rgb(220,148,13)" fg:x="1237" fg:w="1"/><text x="100.1692%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="99.9192%" y="533" width="0.0808%" height="15" fill="rgb(210,16,3)" fg:x="1237" fg:w="1"/><text x="100.1692%" y="543.50"></text></g></svg></svg>