<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1231"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0812%" y="677" width="0.0812%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3312%" y="687.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="0.2437%" y="661" width="0.3249%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="4"/><text x="0.4937%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.57%)</title><rect x="0.0812%" y="693" width="0.5686%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="7"/><text x="0.3312%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (6 samples, 0.49%)</title><rect x="0.1625%" y="677" width="0.4874%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="6"/><text x="0.4125%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.5686%" y="661" width="0.0812%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="1"/><text x="0.8186%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5686%" y="645" width="0.0812%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="1"/><text x="0.8186%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (8 samples, 0.65%)</title><rect x="0.0812%" y="725" width="0.6499%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="8"/><text x="0.3312%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="0.0812%" y="709" width="0.6499%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="8"/><text x="0.3312%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynamicPlugin&gt; (1 samples, 0.08%)</title><rect x="0.6499%" y="693" width="0.0812%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="1"/><text x="0.8999%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.6499%" y="677" width="0.0812%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="1"/><text x="0.8999%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8123%" y="613" width="0.0812%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="1"/><text x="1.0623%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.8936%" y="613" width="0.1625%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="2"/><text x="1.1436%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.8936%" y="597" width="0.1625%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="2"/><text x="1.1436%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="0.7311%" y="661" width="0.4062%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="5"/><text x="0.9811%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (4 samples, 0.32%)</title><rect x="0.8123%" y="645" width="0.3249%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="4"/><text x="1.0623%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="0.8123%" y="629" width="0.3249%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="4"/><text x="1.0623%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.0561%" y="613" width="0.0812%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="1"/><text x="1.3061%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.0561%" y="597" width="0.0812%" height="15" fill="rgb(210,31,41)" fg:x="13" fg:w="1"/><text x="1.3061%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2185%" y="645" width="0.0812%" height="15" fill="rgb(221,200,47)" fg:x="15" fg:w="1"/><text x="1.4685%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 1.62%)</title><rect x="0.0000%" y="741" width="1.6247%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="20"/><text x="0.2500%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (11 samples, 0.89%)</title><rect x="0.7311%" y="725" width="0.8936%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="11"/><text x="0.9811%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.89%)</title><rect x="0.7311%" y="709" width="0.8936%" height="15" fill="rgb(235,183,28)" fg:x="9" fg:w="11"/><text x="0.9811%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (11 samples, 0.89%)</title><rect x="0.7311%" y="693" width="0.8936%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="11"/><text x="0.9811%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.89%)</title><rect x="0.7311%" y="677" width="0.8936%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="11"/><text x="0.9811%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="1.1373%" y="661" width="0.4874%" height="15" fill="rgb(241,131,45)" fg:x="14" fg:w="6"/><text x="1.3873%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.2998%" y="645" width="0.3249%" height="15" fill="rgb(249,31,29)" fg:x="16" fg:w="4"/><text x="1.5498%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.4622%" y="629" width="0.1625%" height="15" fill="rgb(225,111,53)" fg:x="18" fg:w="2"/><text x="1.7122%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.4622%" y="613" width="0.1625%" height="15" fill="rgb(238,160,17)" fg:x="18" fg:w="2"/><text x="1.7122%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5435%" y="597" width="0.0812%" height="15" fill="rgb(214,148,48)" fg:x="19" fg:w="1"/><text x="1.7935%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="1.6247%" y="693" width="0.1625%" height="15" fill="rgb(232,36,49)" fg:x="20" fg:w="2"/><text x="1.8747%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="1.6247%" y="677" width="0.1625%" height="15" fill="rgb(209,103,24)" fg:x="20" fg:w="2"/><text x="1.8747%" y="687.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.7059%" y="661" width="0.0812%" height="15" fill="rgb(229,88,8)" fg:x="21" fg:w="1"/><text x="1.9559%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.8684%" y="677" width="0.0812%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="1"/><text x="2.1184%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.8684%" y="661" width="0.0812%" height="15" fill="rgb(254,191,54)" fg:x="23" fg:w="1"/><text x="2.1184%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.8684%" y="645" width="0.0812%" height="15" fill="rgb(241,83,37)" fg:x="23" fg:w="1"/><text x="2.1184%" y="655.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.0309%" y="645" width="0.1625%" height="15" fill="rgb(233,36,39)" fg:x="25" fg:w="2"/><text x="2.2809%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.0309%" y="629" width="0.1625%" height="15" fill="rgb(226,3,54)" fg:x="25" fg:w="2"/><text x="2.2809%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="2.1121%" y="613" width="0.0812%" height="15" fill="rgb(245,192,40)" fg:x="26" fg:w="1"/><text x="2.3621%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.1121%" y="597" width="0.0812%" height="15" fill="rgb(238,167,29)" fg:x="26" fg:w="1"/><text x="2.3621%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.1933%" y="645" width="0.0812%" height="15" fill="rgb(232,182,51)" fg:x="27" fg:w="1"/><text x="2.4433%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.1933%" y="629" width="0.0812%" height="15" fill="rgb(231,60,39)" fg:x="27" fg:w="1"/><text x="2.4433%" y="639.50"></text></g><g><title>&lt;plugins_core::carrying::actions::TakeOutAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.1933%" y="613" width="0.0812%" height="15" fill="rgb(208,69,12)" fg:x="27" fg:w="1"/><text x="2.4433%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.1933%" y="597" width="0.0812%" height="15" fill="rgb(235,93,37)" fg:x="27" fg:w="1"/><text x="2.4433%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.2746%" y="645" width="0.1625%" height="15" fill="rgb(213,116,39)" fg:x="28" fg:w="2"/><text x="2.5246%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.2746%" y="629" width="0.1625%" height="15" fill="rgb(222,207,29)" fg:x="28" fg:w="2"/><text x="2.5246%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.3558%" y="613" width="0.0812%" height="15" fill="rgb(206,96,30)" fg:x="29" fg:w="1"/><text x="2.6058%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.3558%" y="597" width="0.0812%" height="15" fill="rgb(218,138,4)" fg:x="29" fg:w="1"/><text x="2.6058%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::actions::DeactivateRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.5183%" y="613" width="0.0812%" height="15" fill="rgb(250,191,14)" fg:x="31" fg:w="1"/><text x="2.7683%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.5183%" y="597" width="0.0812%" height="15" fill="rgb(239,60,40)" fg:x="31" fg:w="1"/><text x="2.7683%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="2.4370%" y="645" width="0.2437%" height="15" fill="rgb(206,27,48)" fg:x="30" fg:w="3"/><text x="2.6870%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.5183%" y="629" width="0.1625%" height="15" fill="rgb(225,35,8)" fg:x="31" fg:w="2"/><text x="2.7683%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="2.5995%" y="613" width="0.0812%" height="15" fill="rgb(250,213,24)" fg:x="32" fg:w="1"/><text x="2.8495%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5995%" y="597" width="0.0812%" height="15" fill="rgb(247,123,22)" fg:x="32" fg:w="1"/><text x="2.8495%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (9 samples, 0.73%)</title><rect x="2.0309%" y="661" width="0.7311%" height="15" fill="rgb(231,138,38)" fg:x="25" fg:w="9"/><text x="2.2809%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.6807%" y="645" width="0.0812%" height="15" fill="rgb(231,145,46)" fg:x="33" fg:w="1"/><text x="2.9307%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="2.6807%" y="629" width="0.0812%" height="15" fill="rgb(251,118,11)" fg:x="33" fg:w="1"/><text x="2.9307%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.49%)</title><rect x="2.7620%" y="661" width="0.4874%" height="15" fill="rgb(217,147,25)" fg:x="34" fg:w="6"/><text x="3.0120%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (6 samples, 0.49%)</title><rect x="2.7620%" y="645" width="0.4874%" height="15" fill="rgb(247,81,37)" fg:x="34" fg:w="6"/><text x="3.0120%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (6 samples, 0.49%)</title><rect x="2.7620%" y="629" width="0.4874%" height="15" fill="rgb(209,12,38)" fg:x="34" fg:w="6"/><text x="3.0120%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (6 samples, 0.49%)</title><rect x="2.7620%" y="613" width="0.4874%" height="15" fill="rgb(227,1,9)" fg:x="34" fg:w="6"/><text x="3.0120%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (6 samples, 0.49%)</title><rect x="2.7620%" y="597" width="0.4874%" height="15" fill="rgb(248,47,43)" fg:x="34" fg:w="6"/><text x="3.0120%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (6 samples, 0.49%)</title><rect x="2.7620%" y="581" width="0.4874%" height="15" fill="rgb(221,10,30)" fg:x="34" fg:w="6"/><text x="3.0120%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (6 samples, 0.49%)</title><rect x="2.7620%" y="565" width="0.4874%" height="15" fill="rgb(210,229,1)" fg:x="34" fg:w="6"/><text x="3.0120%" y="575.50"></text></g><g><title>statx (6 samples, 0.49%)</title><rect x="2.7620%" y="549" width="0.4874%" height="15" fill="rgb(222,148,37)" fg:x="34" fg:w="6"/><text x="3.0120%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="3.2494%" y="645" width="0.1625%" height="15" fill="rgb(234,67,33)" fg:x="40" fg:w="2"/><text x="3.4994%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.2494%" y="629" width="0.1625%" height="15" fill="rgb(247,98,35)" fg:x="40" fg:w="2"/><text x="3.4994%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.2494%" y="613" width="0.1625%" height="15" fill="rgb(247,138,52)" fg:x="40" fg:w="2"/><text x="3.4994%" y="623.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.2494%" y="597" width="0.1625%" height="15" fill="rgb(213,79,30)" fg:x="40" fg:w="2"/><text x="3.4994%" y="607.50"></text></g><g><title>glob::is_dir (6 samples, 0.49%)</title><rect x="3.4931%" y="597" width="0.4874%" height="15" fill="rgb(246,177,23)" fg:x="43" fg:w="6"/><text x="3.7431%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (6 samples, 0.49%)</title><rect x="3.4931%" y="581" width="0.4874%" height="15" fill="rgb(230,62,27)" fg:x="43" fg:w="6"/><text x="3.7431%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (6 samples, 0.49%)</title><rect x="3.4931%" y="565" width="0.4874%" height="15" fill="rgb(216,154,8)" fg:x="43" fg:w="6"/><text x="3.7431%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (6 samples, 0.49%)</title><rect x="3.4931%" y="549" width="0.4874%" height="15" fill="rgb(244,35,45)" fg:x="43" fg:w="6"/><text x="3.7431%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (6 samples, 0.49%)</title><rect x="3.4931%" y="533" width="0.4874%" height="15" fill="rgb(251,115,12)" fg:x="43" fg:w="6"/><text x="3.7431%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (6 samples, 0.49%)</title><rect x="3.4931%" y="517" width="0.4874%" height="15" fill="rgb(240,54,50)" fg:x="43" fg:w="6"/><text x="3.7431%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (6 samples, 0.49%)</title><rect x="3.4931%" y="501" width="0.4874%" height="15" fill="rgb(233,84,52)" fg:x="43" fg:w="6"/><text x="3.7431%" y="511.50"></text></g><g><title>statx (6 samples, 0.49%)</title><rect x="3.4931%" y="485" width="0.4874%" height="15" fill="rgb(207,117,47)" fg:x="43" fg:w="6"/><text x="3.7431%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.65%)</title><rect x="3.4119%" y="629" width="0.6499%" height="15" fill="rgb(249,43,39)" fg:x="42" fg:w="8"/><text x="3.6619%" y="639.50"></text></g><g><title>glob::fill_todo (8 samples, 0.65%)</title><rect x="3.4119%" y="613" width="0.6499%" height="15" fill="rgb(209,38,44)" fg:x="42" fg:w="8"/><text x="3.6619%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="3.9805%" y="597" width="0.0812%" height="15" fill="rgb(236,212,23)" fg:x="49" fg:w="1"/><text x="4.2305%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="3.9805%" y="581" width="0.0812%" height="15" fill="rgb(242,79,21)" fg:x="49" fg:w="1"/><text x="4.2305%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="3.9805%" y="565" width="0.0812%" height="15" fill="rgb(211,96,35)" fg:x="49" fg:w="1"/><text x="4.2305%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="3.9805%" y="549" width="0.0812%" height="15" fill="rgb(253,215,40)" fg:x="49" fg:w="1"/><text x="4.2305%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="3.9805%" y="533" width="0.0812%" height="15" fill="rgb(211,81,21)" fg:x="49" fg:w="1"/><text x="4.2305%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="3.9805%" y="517" width="0.0812%" height="15" fill="rgb(208,190,38)" fg:x="49" fg:w="1"/><text x="4.2305%" y="527.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="3.9805%" y="501" width="0.0812%" height="15" fill="rgb(235,213,38)" fg:x="49" fg:w="1"/><text x="4.2305%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2242%" y="565" width="0.0812%" height="15" fill="rgb(237,122,38)" fg:x="52" fg:w="1"/><text x="4.4742%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (14 samples, 1.14%)</title><rect x="3.2494%" y="661" width="1.1373%" height="15" fill="rgb(244,218,35)" fg:x="40" fg:w="14"/><text x="3.4994%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (12 samples, 0.97%)</title><rect x="3.4119%" y="645" width="0.9748%" height="15" fill="rgb(240,68,47)" fg:x="42" fg:w="12"/><text x="3.6619%" y="655.50"></text></g><g><title>glob::glob (4 samples, 0.32%)</title><rect x="4.0617%" y="629" width="0.3249%" height="15" fill="rgb(210,16,53)" fg:x="50" fg:w="4"/><text x="4.3117%" y="639.50"></text></g><g><title>glob::glob_with (4 samples, 0.32%)</title><rect x="4.0617%" y="613" width="0.3249%" height="15" fill="rgb(235,124,12)" fg:x="50" fg:w="4"/><text x="4.3117%" y="623.50"></text></g><g><title>glob::Pattern::new (4 samples, 0.32%)</title><rect x="4.0617%" y="597" width="0.3249%" height="15" fill="rgb(224,169,11)" fg:x="50" fg:w="4"/><text x="4.3117%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.2242%" y="581" width="0.1625%" height="15" fill="rgb(250,166,2)" fg:x="52" fg:w="2"/><text x="4.4742%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.3054%" y="565" width="0.0812%" height="15" fill="rgb(242,216,29)" fg:x="53" fg:w="1"/><text x="4.5554%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.3054%" y="549" width="0.0812%" height="15" fill="rgb(230,116,27)" fg:x="53" fg:w="1"/><text x="4.5554%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.3054%" y="533" width="0.0812%" height="15" fill="rgb(228,99,48)" fg:x="53" fg:w="1"/><text x="4.5554%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.3867%" y="661" width="0.0812%" height="15" fill="rgb(253,11,6)" fg:x="54" fg:w="1"/><text x="4.6367%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.4679%" y="645" width="0.0812%" height="15" fill="rgb(247,143,39)" fg:x="55" fg:w="1"/><text x="4.7179%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (33 samples, 2.68%)</title><rect x="1.9496%" y="677" width="2.6807%" height="15" fill="rgb(236,97,10)" fg:x="24" fg:w="33"/><text x="2.1996%" y="687.50">ke..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="4.4679%" y="661" width="0.1625%" height="15" fill="rgb(233,208,19)" fg:x="55" fg:w="2"/><text x="4.7179%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="4.5491%" y="645" width="0.0812%" height="15" fill="rgb(216,164,2)" fg:x="56" fg:w="1"/><text x="4.7991%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.5491%" y="629" width="0.0812%" height="15" fill="rgb(220,129,5)" fg:x="56" fg:w="1"/><text x="4.7991%" y="639.50"></text></g><g><title>engine::session::Session::initialize (37 samples, 3.01%)</title><rect x="1.7872%" y="693" width="3.0057%" height="15" fill="rgb(242,17,10)" fg:x="22" fg:w="37"/><text x="2.0372%" y="703.50">eng..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="4.6304%" y="677" width="0.1625%" height="15" fill="rgb(242,107,0)" fg:x="57" fg:w="2"/><text x="4.8804%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.6304%" y="661" width="0.1625%" height="15" fill="rgb(251,28,31)" fg:x="57" fg:w="2"/><text x="4.8804%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.7116%" y="645" width="0.0812%" height="15" fill="rgb(233,223,10)" fg:x="58" fg:w="1"/><text x="4.9616%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.7116%" y="629" width="0.0812%" height="15" fill="rgb(215,21,27)" fg:x="58" fg:w="1"/><text x="4.9616%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.7116%" y="613" width="0.0812%" height="15" fill="rgb(232,23,21)" fg:x="58" fg:w="1"/><text x="4.9616%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (40 samples, 3.25%)</title><rect x="1.6247%" y="741" width="3.2494%" height="15" fill="rgb(244,5,23)" fg:x="20" fg:w="40"/><text x="1.8747%" y="751.50">&lt;en..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (40 samples, 3.25%)</title><rect x="1.6247%" y="725" width="3.2494%" height="15" fill="rgb(226,81,46)" fg:x="20" fg:w="40"/><text x="1.8747%" y="735.50">eng..</text></g><g><title>engine::session::Session::new (40 samples, 3.25%)</title><rect x="1.6247%" y="709" width="3.2494%" height="15" fill="rgb(247,70,30)" fg:x="20" fg:w="40"/><text x="1.8747%" y="719.50">eng..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="4.7929%" y="693" width="0.0812%" height="15" fill="rgb(212,68,19)" fg:x="59" fg:w="1"/><text x="5.0429%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.7929%" y="677" width="0.0812%" height="15" fill="rgb(240,187,13)" fg:x="59" fg:w="1"/><text x="5.0429%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.7929%" y="661" width="0.0812%" height="15" fill="rgb(223,113,26)" fg:x="59" fg:w="1"/><text x="5.0429%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.7929%" y="645" width="0.0812%" height="15" fill="rgb(206,192,2)" fg:x="59" fg:w="1"/><text x="5.0429%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.7929%" y="629" width="0.0812%" height="15" fill="rgb(241,108,4)" fg:x="59" fg:w="1"/><text x="5.0429%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="4.8741%" y="613" width="0.1625%" height="15" fill="rgb(247,173,49)" fg:x="60" fg:w="2"/><text x="5.1241%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.8741%" y="597" width="0.1625%" height="15" fill="rgb(224,114,35)" fg:x="60" fg:w="2"/><text x="5.1241%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.0366%" y="597" width="0.0812%" height="15" fill="rgb(245,159,27)" fg:x="62" fg:w="1"/><text x="5.2866%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.0366%" y="581" width="0.0812%" height="15" fill="rgb(245,172,44)" fg:x="62" fg:w="1"/><text x="5.2866%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.1178%" y="581" width="0.0812%" height="15" fill="rgb(236,23,11)" fg:x="63" fg:w="1"/><text x="5.3678%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1990%" y="565" width="0.0812%" height="15" fill="rgb(205,117,38)" fg:x="64" fg:w="1"/><text x="5.4490%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.1990%" y="549" width="0.0812%" height="15" fill="rgb(237,72,25)" fg:x="64" fg:w="1"/><text x="5.4490%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.1990%" y="533" width="0.0812%" height="15" fill="rgb(244,70,9)" fg:x="64" fg:w="1"/><text x="5.4490%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.1990%" y="517" width="0.0812%" height="15" fill="rgb(217,125,39)" fg:x="64" fg:w="1"/><text x="5.4490%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.1990%" y="501" width="0.0812%" height="15" fill="rgb(235,36,10)" fg:x="64" fg:w="1"/><text x="5.4490%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="5.1990%" y="581" width="0.1625%" height="15" fill="rgb(251,123,47)" fg:x="64" fg:w="2"/><text x="5.4490%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.2803%" y="565" width="0.0812%" height="15" fill="rgb(221,13,13)" fg:x="65" fg:w="1"/><text x="5.5303%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.2803%" y="549" width="0.0812%" height="15" fill="rgb(238,131,9)" fg:x="65" fg:w="1"/><text x="5.5303%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.2803%" y="533" width="0.0812%" height="15" fill="rgb(211,50,8)" fg:x="65" fg:w="1"/><text x="5.5303%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.3615%" y="565" width="0.1625%" height="15" fill="rgb(245,182,24)" fg:x="66" fg:w="2"/><text x="5.6115%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="5.1178%" y="597" width="0.4874%" height="15" fill="rgb(242,14,37)" fg:x="63" fg:w="6"/><text x="5.3678%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.3615%" y="581" width="0.2437%" height="15" fill="rgb(246,228,12)" fg:x="66" fg:w="3"/><text x="5.6115%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5240%" y="565" width="0.0812%" height="15" fill="rgb(213,55,15)" fg:x="68" fg:w="1"/><text x="5.7740%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.5240%" y="549" width="0.0812%" height="15" fill="rgb(209,9,3)" fg:x="68" fg:w="1"/><text x="5.7740%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.5240%" y="533" width="0.0812%" height="15" fill="rgb(230,59,30)" fg:x="68" fg:w="1"/><text x="5.7740%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="4.8741%" y="629" width="0.8123%" height="15" fill="rgb(209,121,21)" fg:x="60" fg:w="10"/><text x="5.1241%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="5.0366%" y="613" width="0.6499%" height="15" fill="rgb(220,109,13)" fg:x="62" fg:w="8"/><text x="5.2866%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.6052%" y="597" width="0.0812%" height="15" fill="rgb(232,18,1)" fg:x="69" fg:w="1"/><text x="5.8552%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.6052%" y="581" width="0.0812%" height="15" fill="rgb(215,41,42)" fg:x="69" fg:w="1"/><text x="5.8552%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.6052%" y="565" width="0.0812%" height="15" fill="rgb(224,123,36)" fg:x="69" fg:w="1"/><text x="5.8552%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.6864%" y="629" width="0.1625%" height="15" fill="rgb(240,125,3)" fg:x="70" fg:w="2"/><text x="5.9364%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="5.6864%" y="613" width="0.1625%" height="15" fill="rgb(205,98,50)" fg:x="70" fg:w="2"/><text x="5.9364%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.6864%" y="597" width="0.1625%" height="15" fill="rgb(205,185,37)" fg:x="70" fg:w="2"/><text x="5.9364%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.6864%" y="581" width="0.1625%" height="15" fill="rgb(238,207,15)" fg:x="70" fg:w="2"/><text x="5.9364%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.7677%" y="565" width="0.0812%" height="15" fill="rgb(213,199,42)" fg:x="71" fg:w="1"/><text x="6.0177%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.7677%" y="549" width="0.0812%" height="15" fill="rgb(235,201,11)" fg:x="71" fg:w="1"/><text x="6.0177%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.9301%" y="597" width="0.0812%" height="15" fill="rgb(207,46,11)" fg:x="73" fg:w="1"/><text x="6.1801%" y="607.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="5.8489%" y="613" width="0.3249%" height="15" fill="rgb(241,35,35)" fg:x="72" fg:w="4"/><text x="6.0989%" y="623.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="6.0114%" y="597" width="0.1625%" height="15" fill="rgb(243,32,47)" fg:x="74" fg:w="2"/><text x="6.2614%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.0926%" y="581" width="0.0812%" height="15" fill="rgb(247,202,23)" fg:x="75" fg:w="1"/><text x="6.3426%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.0926%" y="565" width="0.0812%" height="15" fill="rgb(219,102,11)" fg:x="75" fg:w="1"/><text x="6.3426%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2551%" y="581" width="0.0812%" height="15" fill="rgb(243,110,44)" fg:x="77" fg:w="1"/><text x="6.5051%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.4988%" y="533" width="0.1625%" height="15" fill="rgb(222,74,54)" fg:x="80" fg:w="2"/><text x="6.7488%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5800%" y="517" width="0.0812%" height="15" fill="rgb(216,99,12)" fg:x="81" fg:w="1"/><text x="6.8300%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.6613%" y="533" width="0.0812%" height="15" fill="rgb(226,22,26)" fg:x="82" fg:w="1"/><text x="6.9113%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.6613%" y="517" width="0.0812%" height="15" fill="rgb(217,163,10)" fg:x="82" fg:w="1"/><text x="6.9113%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.6613%" y="501" width="0.0812%" height="15" fill="rgb(213,25,53)" fg:x="82" fg:w="1"/><text x="6.9113%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.6613%" y="485" width="0.0812%" height="15" fill="rgb(252,105,26)" fg:x="82" fg:w="1"/><text x="6.9113%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6613%" y="469" width="0.0812%" height="15" fill="rgb(220,39,43)" fg:x="82" fg:w="1"/><text x="6.9113%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.8237%" y="501" width="0.0812%" height="15" fill="rgb(229,68,48)" fg:x="84" fg:w="1"/><text x="7.0737%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="6.8237%" y="517" width="0.4874%" height="15" fill="rgb(252,8,32)" fg:x="84" fg:w="6"/><text x="7.0737%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="6.9050%" y="501" width="0.4062%" height="15" fill="rgb(223,20,43)" fg:x="85" fg:w="5"/><text x="7.1550%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="7.0674%" y="485" width="0.2437%" height="15" fill="rgb(229,81,49)" fg:x="87" fg:w="3"/><text x="7.3174%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.1487%" y="469" width="0.1625%" height="15" fill="rgb(236,28,36)" fg:x="88" fg:w="2"/><text x="7.3987%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2299%" y="453" width="0.0812%" height="15" fill="rgb(249,185,26)" fg:x="89" fg:w="1"/><text x="7.4799%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.89%)</title><rect x="6.4988%" y="549" width="0.8936%" height="15" fill="rgb(249,174,33)" fg:x="80" fg:w="11"/><text x="6.7488%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.65%)</title><rect x="6.7425%" y="533" width="0.6499%" height="15" fill="rgb(233,201,37)" fg:x="83" fg:w="8"/><text x="6.9925%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.3111%" y="517" width="0.0812%" height="15" fill="rgb(221,78,26)" fg:x="90" fg:w="1"/><text x="7.5611%" y="527.50"></text></g><g><title>engine::session::Session::flush (32 samples, 2.60%)</title><rect x="4.8741%" y="725" width="2.5995%" height="15" fill="rgb(250,127,30)" fg:x="60" fg:w="32"/><text x="5.1241%" y="735.50">en..</text></g><g><title>engine::session::state::State::close (32 samples, 2.60%)</title><rect x="4.8741%" y="709" width="2.5995%" height="15" fill="rgb(230,49,44)" fg:x="60" fg:w="32"/><text x="5.1241%" y="719.50">en..</text></g><g><title>engine::session::state::State::flush_entities (32 samples, 2.60%)</title><rect x="4.8741%" y="693" width="2.5995%" height="15" fill="rgb(229,67,23)" fg:x="60" fg:w="32"/><text x="5.1241%" y="703.50">en..</text></g><g><title>core::iter::adapters::try_process (32 samples, 2.60%)</title><rect x="4.8741%" y="677" width="2.5995%" height="15" fill="rgb(249,83,47)" fg:x="60" fg:w="32"/><text x="5.1241%" y="687.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (32 samples, 2.60%)</title><rect x="4.8741%" y="661" width="2.5995%" height="15" fill="rgb(215,43,3)" fg:x="60" fg:w="32"/><text x="5.1241%" y="671.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (32 samples, 2.60%)</title><rect x="4.8741%" y="645" width="2.5995%" height="15" fill="rgb(238,154,13)" fg:x="60" fg:w="32"/><text x="5.1241%" y="655.50">en..</text></g><g><title>kernel::model::any_entity_changes (20 samples, 1.62%)</title><rect x="5.8489%" y="629" width="1.6247%" height="15" fill="rgb(219,56,2)" fg:x="72" fg:w="20"/><text x="6.0989%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.30%)</title><rect x="6.1738%" y="613" width="1.2998%" height="15" fill="rgb(233,0,4)" fg:x="76" fg:w="16"/><text x="6.4238%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.30%)</title><rect x="6.1738%" y="597" width="1.2998%" height="15" fill="rgb(235,30,7)" fg:x="76" fg:w="16"/><text x="6.4238%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.14%)</title><rect x="6.3363%" y="581" width="1.1373%" height="15" fill="rgb(250,79,13)" fg:x="78" fg:w="14"/><text x="6.5863%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (12 samples, 0.97%)</title><rect x="6.4988%" y="565" width="0.9748%" height="15" fill="rgb(211,146,34)" fg:x="80" fg:w="12"/><text x="6.7488%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.3924%" y="549" width="0.0812%" height="15" fill="rgb(228,22,38)" fg:x="91" fg:w="1"/><text x="7.6424%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.3924%" y="533" width="0.0812%" height="15" fill="rgb(235,168,5)" fg:x="91" fg:w="1"/><text x="7.6424%" y="543.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.4736%" y="709" width="0.0812%" height="15" fill="rgb(221,155,16)" fg:x="92" fg:w="1"/><text x="7.7236%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="7.4736%" y="693" width="0.0812%" height="15" fill="rgb(215,215,53)" fg:x="92" fg:w="1"/><text x="7.7236%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.4736%" y="677" width="0.0812%" height="15" fill="rgb(223,4,10)" fg:x="92" fg:w="1"/><text x="7.7236%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.4736%" y="661" width="0.0812%" height="15" fill="rgb(234,103,6)" fg:x="92" fg:w="1"/><text x="7.7236%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.4736%" y="645" width="0.0812%" height="15" fill="rgb(227,97,0)" fg:x="92" fg:w="1"/><text x="7.7236%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.4736%" y="629" width="0.0812%" height="15" fill="rgb(234,150,53)" fg:x="92" fg:w="1"/><text x="7.7236%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.4736%" y="613" width="0.0812%" height="15" fill="rgb(228,201,54)" fg:x="92" fg:w="1"/><text x="7.7236%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.4736%" y="597" width="0.0812%" height="15" fill="rgb(222,22,37)" fg:x="92" fg:w="1"/><text x="7.7236%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="7.5548%" y="693" width="0.0812%" height="15" fill="rgb(237,53,32)" fg:x="93" fg:w="1"/><text x="7.8048%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.5548%" y="677" width="0.0812%" height="15" fill="rgb(233,25,53)" fg:x="93" fg:w="1"/><text x="7.8048%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.5548%" y="661" width="0.0812%" height="15" fill="rgb(210,40,34)" fg:x="93" fg:w="1"/><text x="7.8048%" y="671.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="7.6361%" y="693" width="0.0812%" height="15" fill="rgb(241,220,44)" fg:x="94" fg:w="1"/><text x="7.8861%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="7.6361%" y="677" width="0.0812%" height="15" fill="rgb(235,28,35)" fg:x="94" fg:w="1"/><text x="7.8861%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="7.6361%" y="661" width="0.0812%" height="15" fill="rgb(210,56,17)" fg:x="94" fg:w="1"/><text x="7.8861%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.6361%" y="645" width="0.0812%" height="15" fill="rgb(224,130,29)" fg:x="94" fg:w="1"/><text x="7.8861%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.6361%" y="629" width="0.0812%" height="15" fill="rgb(235,212,8)" fg:x="94" fg:w="1"/><text x="7.8861%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="7.7173%" y="645" width="0.0812%" height="15" fill="rgb(223,33,50)" fg:x="95" fg:w="1"/><text x="7.9673%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.7173%" y="629" width="0.0812%" height="15" fill="rgb(219,149,13)" fg:x="95" fg:w="1"/><text x="7.9673%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.7173%" y="613" width="0.0812%" height="15" fill="rgb(250,156,29)" fg:x="95" fg:w="1"/><text x="7.9673%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.7173%" y="597" width="0.0812%" height="15" fill="rgb(216,193,19)" fg:x="95" fg:w="1"/><text x="7.9673%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.7173%" y="581" width="0.0812%" height="15" fill="rgb(216,135,14)" fg:x="95" fg:w="1"/><text x="7.9673%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="7.7173%" y="565" width="0.0812%" height="15" fill="rgb(241,47,5)" fg:x="95" fg:w="1"/><text x="7.9673%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="7.7173%" y="677" width="0.1625%" height="15" fill="rgb(233,42,35)" fg:x="95" fg:w="2"/><text x="7.9673%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="7.7173%" y="661" width="0.1625%" height="15" fill="rgb(231,13,6)" fg:x="95" fg:w="2"/><text x="7.9673%" y="671.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.7985%" y="645" width="0.0812%" height="15" fill="rgb(207,181,40)" fg:x="96" fg:w="1"/><text x="8.0485%" y="655.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="7.8798%" y="677" width="0.0812%" height="15" fill="rgb(254,173,49)" fg:x="97" fg:w="1"/><text x="8.1298%" y="687.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.9610%" y="645" width="0.0812%" height="15" fill="rgb(221,1,38)" fg:x="98" fg:w="1"/><text x="8.2110%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="8.0422%" y="629" width="0.0812%" height="15" fill="rgb(206,124,46)" fg:x="99" fg:w="1"/><text x="8.2922%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.0422%" y="613" width="0.0812%" height="15" fill="rgb(249,21,11)" fg:x="99" fg:w="1"/><text x="8.2922%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0422%" y="597" width="0.0812%" height="15" fill="rgb(222,201,40)" fg:x="99" fg:w="1"/><text x="8.2922%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.0422%" y="581" width="0.0812%" height="15" fill="rgb(235,61,29)" fg:x="99" fg:w="1"/><text x="8.2922%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0422%" y="565" width="0.0812%" height="15" fill="rgb(219,207,3)" fg:x="99" fg:w="1"/><text x="8.2922%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.73%)</title><rect x="7.4736%" y="725" width="0.7311%" height="15" fill="rgb(222,56,46)" fg:x="92" fg:w="9"/><text x="7.7236%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.65%)</title><rect x="7.5548%" y="709" width="0.6499%" height="15" fill="rgb(239,76,54)" fg:x="93" fg:w="8"/><text x="7.8048%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.49%)</title><rect x="7.7173%" y="693" width="0.4874%" height="15" fill="rgb(231,124,27)" fg:x="95" fg:w="6"/><text x="7.9673%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="7.9610%" y="677" width="0.2437%" height="15" fill="rgb(249,195,6)" fg:x="98" fg:w="3"/><text x="8.2110%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="7.9610%" y="661" width="0.2437%" height="15" fill="rgb(237,174,47)" fg:x="98" fg:w="3"/><text x="8.2110%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="8.0422%" y="645" width="0.1625%" height="15" fill="rgb(206,201,31)" fg:x="99" fg:w="2"/><text x="8.2922%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1235%" y="629" width="0.0812%" height="15" fill="rgb(231,57,52)" fg:x="100" fg:w="1"/><text x="8.3735%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="8.2047%" y="693" width="0.0812%" height="15" fill="rgb(248,177,22)" fg:x="101" fg:w="1"/><text x="8.4547%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="8.2047%" y="677" width="0.0812%" height="15" fill="rgb(215,211,37)" fg:x="101" fg:w="1"/><text x="8.4547%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="8.2047%" y="661" width="0.0812%" height="15" fill="rgb(241,128,51)" fg:x="101" fg:w="1"/><text x="8.4547%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="8.2047%" y="645" width="0.0812%" height="15" fill="rgb(227,165,31)" fg:x="101" fg:w="1"/><text x="8.4547%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="8.2047%" y="629" width="0.0812%" height="15" fill="rgb(228,167,24)" fg:x="101" fg:w="1"/><text x="8.4547%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="8.2047%" y="613" width="0.0812%" height="15" fill="rgb(228,143,12)" fg:x="101" fg:w="1"/><text x="8.4547%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2859%" y="693" width="0.0812%" height="15" fill="rgb(249,149,8)" fg:x="102" fg:w="1"/><text x="8.5359%" y="703.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (5 samples, 0.41%)</title><rect x="8.2047%" y="725" width="0.4062%" height="15" fill="rgb(243,35,44)" fg:x="101" fg:w="5"/><text x="8.4547%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (5 samples, 0.41%)</title><rect x="8.2047%" y="709" width="0.4062%" height="15" fill="rgb(246,89,9)" fg:x="101" fg:w="5"/><text x="8.4547%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="8.3672%" y="693" width="0.2437%" height="15" fill="rgb(233,213,13)" fg:x="103" fg:w="3"/><text x="8.6172%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="8.4484%" y="677" width="0.1625%" height="15" fill="rgb(233,141,41)" fg:x="104" fg:w="2"/><text x="8.6984%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.5297%" y="661" width="0.0812%" height="15" fill="rgb(239,167,4)" fg:x="105" fg:w="1"/><text x="8.7797%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5297%" y="645" width="0.0812%" height="15" fill="rgb(209,217,16)" fg:x="105" fg:w="1"/><text x="8.7797%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.5297%" y="629" width="0.0812%" height="15" fill="rgb(219,88,35)" fg:x="105" fg:w="1"/><text x="8.7797%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5297%" y="613" width="0.0812%" height="15" fill="rgb(220,193,23)" fg:x="105" fg:w="1"/><text x="8.7797%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.5297%" y="597" width="0.0812%" height="15" fill="rgb(230,90,52)" fg:x="105" fg:w="1"/><text x="8.7797%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5297%" y="581" width="0.0812%" height="15" fill="rgb(252,106,19)" fg:x="105" fg:w="1"/><text x="8.7797%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="8.6109%" y="693" width="0.0812%" height="15" fill="rgb(206,74,20)" fg:x="106" fg:w="1"/><text x="8.8609%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="8.6109%" y="677" width="0.0812%" height="15" fill="rgb(230,138,44)" fg:x="106" fg:w="1"/><text x="8.8609%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.6109%" y="661" width="0.0812%" height="15" fill="rgb(235,182,43)" fg:x="106" fg:w="1"/><text x="8.8609%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="8.6109%" y="645" width="0.0812%" height="15" fill="rgb(242,16,51)" fg:x="106" fg:w="1"/><text x="8.8609%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.6109%" y="629" width="0.0812%" height="15" fill="rgb(248,9,4)" fg:x="106" fg:w="1"/><text x="8.8609%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6109%" y="613" width="0.0812%" height="15" fill="rgb(210,31,22)" fg:x="106" fg:w="1"/><text x="8.8609%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.6109%" y="597" width="0.0812%" height="15" fill="rgb(239,54,39)" fg:x="106" fg:w="1"/><text x="8.8609%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6109%" y="581" width="0.0812%" height="15" fill="rgb(230,99,41)" fg:x="106" fg:w="1"/><text x="8.8609%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.6109%" y="565" width="0.0812%" height="15" fill="rgb(253,106,12)" fg:x="106" fg:w="1"/><text x="8.8609%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6109%" y="549" width="0.0812%" height="15" fill="rgb(213,46,41)" fg:x="106" fg:w="1"/><text x="8.8609%" y="559.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.6921%" y="693" width="0.0812%" height="15" fill="rgb(215,133,35)" fg:x="107" fg:w="1"/><text x="8.9421%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="8.6921%" y="677" width="0.0812%" height="15" fill="rgb(213,28,5)" fg:x="107" fg:w="1"/><text x="8.9421%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.6921%" y="661" width="0.0812%" height="15" fill="rgb(215,77,49)" fg:x="107" fg:w="1"/><text x="8.9421%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.6921%" y="645" width="0.0812%" height="15" fill="rgb(248,100,22)" fg:x="107" fg:w="1"/><text x="8.9421%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="8.6921%" y="629" width="0.0812%" height="15" fill="rgb(208,67,9)" fg:x="107" fg:w="1"/><text x="8.9421%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.6921%" y="613" width="0.0812%" height="15" fill="rgb(219,133,21)" fg:x="107" fg:w="1"/><text x="8.9421%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6921%" y="597" width="0.0812%" height="15" fill="rgb(246,46,29)" fg:x="107" fg:w="1"/><text x="8.9421%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.7734%" y="661" width="0.0812%" height="15" fill="rgb(246,185,52)" fg:x="108" fg:w="1"/><text x="9.0234%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="8.7734%" y="677" width="0.2437%" height="15" fill="rgb(252,136,11)" fg:x="108" fg:w="3"/><text x="9.0234%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.8546%" y="661" width="0.1625%" height="15" fill="rgb(219,138,53)" fg:x="109" fg:w="2"/><text x="9.1046%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.8546%" y="645" width="0.1625%" height="15" fill="rgb(211,51,23)" fg:x="109" fg:w="2"/><text x="9.1046%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.8546%" y="629" width="0.1625%" height="15" fill="rgb(247,221,28)" fg:x="109" fg:w="2"/><text x="9.1046%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9358%" y="613" width="0.0812%" height="15" fill="rgb(251,222,45)" fg:x="110" fg:w="1"/><text x="9.1858%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9358%" y="597" width="0.0812%" height="15" fill="rgb(217,162,53)" fg:x="110" fg:w="1"/><text x="9.1858%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9358%" y="581" width="0.0812%" height="15" fill="rgb(229,93,14)" fg:x="110" fg:w="1"/><text x="9.1858%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.9358%" y="565" width="0.0812%" height="15" fill="rgb(209,67,49)" fg:x="110" fg:w="1"/><text x="9.1858%" y="575.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="8.7734%" y="693" width="0.3249%" height="15" fill="rgb(213,87,29)" fg:x="108" fg:w="4"/><text x="9.0234%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="9.0171%" y="677" width="0.0812%" height="15" fill="rgb(205,151,52)" fg:x="111" fg:w="1"/><text x="9.2671%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="9.0171%" y="661" width="0.0812%" height="15" fill="rgb(253,215,39)" fg:x="111" fg:w="1"/><text x="9.2671%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="9.0171%" y="645" width="0.0812%" height="15" fill="rgb(221,220,41)" fg:x="111" fg:w="1"/><text x="9.2671%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.0171%" y="629" width="0.0812%" height="15" fill="rgb(218,133,21)" fg:x="111" fg:w="1"/><text x="9.2671%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.0171%" y="613" width="0.0812%" height="15" fill="rgb(221,193,43)" fg:x="111" fg:w="1"/><text x="9.2671%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.0171%" y="597" width="0.0812%" height="15" fill="rgb(240,128,52)" fg:x="111" fg:w="1"/><text x="9.2671%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.0171%" y="581" width="0.0812%" height="15" fill="rgb(253,114,12)" fg:x="111" fg:w="1"/><text x="9.2671%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.0171%" y="565" width="0.0812%" height="15" fill="rgb(215,223,47)" fg:x="111" fg:w="1"/><text x="9.2671%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.0171%" y="549" width="0.0812%" height="15" fill="rgb(248,225,23)" fg:x="111" fg:w="1"/><text x="9.2671%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.0171%" y="533" width="0.0812%" height="15" fill="rgb(250,108,0)" fg:x="111" fg:w="1"/><text x="9.2671%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0983%" y="677" width="0.0812%" height="15" fill="rgb(228,208,7)" fg:x="112" fg:w="1"/><text x="9.3483%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (9 samples, 0.73%)</title><rect x="8.6109%" y="725" width="0.7311%" height="15" fill="rgb(244,45,10)" fg:x="106" fg:w="9"/><text x="8.8609%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (9 samples, 0.73%)</title><rect x="8.6109%" y="709" width="0.7311%" height="15" fill="rgb(207,125,25)" fg:x="106" fg:w="9"/><text x="8.8609%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (3 samples, 0.24%)</title><rect x="9.0983%" y="693" width="0.2437%" height="15" fill="rgb(210,195,18)" fg:x="112" fg:w="3"/><text x="9.3483%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="9.1795%" y="677" width="0.1625%" height="15" fill="rgb(249,80,12)" fg:x="113" fg:w="2"/><text x="9.4295%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="9.2608%" y="661" width="0.0812%" height="15" fill="rgb(221,65,9)" fg:x="114" fg:w="1"/><text x="9.5108%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.2608%" y="645" width="0.0812%" height="15" fill="rgb(235,49,36)" fg:x="114" fg:w="1"/><text x="9.5108%" y="655.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="9.2608%" y="629" width="0.0812%" height="15" fill="rgb(225,32,20)" fg:x="114" fg:w="1"/><text x="9.5108%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.3420%" y="597" width="0.0812%" height="15" fill="rgb(215,141,46)" fg:x="115" fg:w="1"/><text x="9.5920%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.3420%" y="629" width="0.1625%" height="15" fill="rgb(250,160,47)" fg:x="115" fg:w="2"/><text x="9.5920%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="9.3420%" y="613" width="0.1625%" height="15" fill="rgb(216,222,40)" fg:x="115" fg:w="2"/><text x="9.5920%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.4232%" y="597" width="0.0812%" height="15" fill="rgb(234,217,39)" fg:x="116" fg:w="1"/><text x="9.6732%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.4232%" y="581" width="0.0812%" height="15" fill="rgb(207,178,40)" fg:x="116" fg:w="1"/><text x="9.6732%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.4232%" y="565" width="0.0812%" height="15" fill="rgb(221,136,13)" fg:x="116" fg:w="1"/><text x="9.6732%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.4232%" y="549" width="0.0812%" height="15" fill="rgb(249,199,10)" fg:x="116" fg:w="1"/><text x="9.6732%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.4232%" y="533" width="0.0812%" height="15" fill="rgb(249,222,13)" fg:x="116" fg:w="1"/><text x="9.6732%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.4232%" y="517" width="0.0812%" height="15" fill="rgb(244,185,38)" fg:x="116" fg:w="1"/><text x="9.6732%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.4232%" y="501" width="0.0812%" height="15" fill="rgb(236,202,9)" fg:x="116" fg:w="1"/><text x="9.6732%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4232%" y="485" width="0.0812%" height="15" fill="rgb(250,229,37)" fg:x="116" fg:w="1"/><text x="9.6732%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="9.3420%" y="709" width="0.2437%" height="15" fill="rgb(206,174,23)" fg:x="115" fg:w="3"/><text x="9.5920%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="9.3420%" y="693" width="0.2437%" height="15" fill="rgb(211,33,43)" fg:x="115" fg:w="3"/><text x="9.5920%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="9.3420%" y="677" width="0.2437%" height="15" fill="rgb(245,58,50)" fg:x="115" fg:w="3"/><text x="9.5920%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="9.3420%" y="661" width="0.2437%" height="15" fill="rgb(244,68,36)" fg:x="115" fg:w="3"/><text x="9.5920%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="9.3420%" y="645" width="0.2437%" height="15" fill="rgb(232,229,15)" fg:x="115" fg:w="3"/><text x="9.5920%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="9.5045%" y="629" width="0.0812%" height="15" fill="rgb(254,30,23)" fg:x="117" fg:w="1"/><text x="9.7545%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.5045%" y="613" width="0.0812%" height="15" fill="rgb(235,160,14)" fg:x="117" fg:w="1"/><text x="9.7545%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.5045%" y="597" width="0.0812%" height="15" fill="rgb(212,155,44)" fg:x="117" fg:w="1"/><text x="9.7545%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.5045%" y="581" width="0.0812%" height="15" fill="rgb(226,2,50)" fg:x="117" fg:w="1"/><text x="9.7545%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.5045%" y="565" width="0.0812%" height="15" fill="rgb(234,177,6)" fg:x="117" fg:w="1"/><text x="9.7545%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="9.5857%" y="709" width="0.0812%" height="15" fill="rgb(217,24,9)" fg:x="118" fg:w="1"/><text x="9.8357%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="9.6669%" y="693" width="0.0812%" height="15" fill="rgb(220,13,46)" fg:x="119" fg:w="1"/><text x="9.9169%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.6669%" y="677" width="0.0812%" height="15" fill="rgb(239,221,27)" fg:x="119" fg:w="1"/><text x="9.9169%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.6669%" y="661" width="0.0812%" height="15" fill="rgb(222,198,25)" fg:x="119" fg:w="1"/><text x="9.9169%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.6669%" y="645" width="0.0812%" height="15" fill="rgb(211,99,13)" fg:x="119" fg:w="1"/><text x="9.9169%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.6669%" y="629" width="0.0812%" height="15" fill="rgb(232,111,31)" fg:x="119" fg:w="1"/><text x="9.9169%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.6669%" y="613" width="0.0812%" height="15" fill="rgb(245,82,37)" fg:x="119" fg:w="1"/><text x="9.9169%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.6669%" y="597" width="0.0812%" height="15" fill="rgb(227,149,46)" fg:x="119" fg:w="1"/><text x="9.9169%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.6669%" y="581" width="0.0812%" height="15" fill="rgb(218,36,50)" fg:x="119" fg:w="1"/><text x="9.9169%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.6669%" y="565" width="0.0812%" height="15" fill="rgb(226,80,48)" fg:x="119" fg:w="1"/><text x="9.9169%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.6669%" y="549" width="0.0812%" height="15" fill="rgb(238,224,15)" fg:x="119" fg:w="1"/><text x="9.9169%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.6669%" y="533" width="0.0812%" height="15" fill="rgb(241,136,10)" fg:x="119" fg:w="1"/><text x="9.9169%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.6669%" y="517" width="0.0812%" height="15" fill="rgb(208,32,45)" fg:x="119" fg:w="1"/><text x="9.9169%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6669%" y="501" width="0.0812%" height="15" fill="rgb(207,135,9)" fg:x="119" fg:w="1"/><text x="9.9169%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.8294%" y="645" width="0.0812%" height="15" fill="rgb(206,86,44)" fg:x="121" fg:w="1"/><text x="10.0794%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="9.8294%" y="629" width="0.0812%" height="15" fill="rgb(245,177,15)" fg:x="121" fg:w="1"/><text x="10.0794%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.9106%" y="581" width="0.0812%" height="15" fill="rgb(206,64,50)" fg:x="122" fg:w="1"/><text x="10.1606%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="9.9919%" y="581" width="0.2437%" height="15" fill="rgb(234,36,40)" fg:x="123" fg:w="3"/><text x="10.2419%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.0731%" y="565" width="0.1625%" height="15" fill="rgb(213,64,8)" fg:x="124" fg:w="2"/><text x="10.3231%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.0731%" y="549" width="0.1625%" height="15" fill="rgb(210,75,36)" fg:x="124" fg:w="2"/><text x="10.3231%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.0731%" y="533" width="0.1625%" height="15" fill="rgb(229,88,21)" fg:x="124" fg:w="2"/><text x="10.3231%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.0731%" y="517" width="0.1625%" height="15" fill="rgb(252,204,47)" fg:x="124" fg:w="2"/><text x="10.3231%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.1543%" y="501" width="0.0812%" height="15" fill="rgb(208,77,27)" fg:x="125" fg:w="1"/><text x="10.4043%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.1543%" y="485" width="0.0812%" height="15" fill="rgb(221,76,26)" fg:x="125" fg:w="1"/><text x="10.4043%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.1543%" y="469" width="0.0812%" height="15" fill="rgb(225,139,18)" fg:x="125" fg:w="1"/><text x="10.4043%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.2356%" y="565" width="0.0812%" height="15" fill="rgb(230,137,11)" fg:x="126" fg:w="1"/><text x="10.4856%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.2356%" y="549" width="0.0812%" height="15" fill="rgb(212,28,1)" fg:x="126" fg:w="1"/><text x="10.4856%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.2356%" y="533" width="0.0812%" height="15" fill="rgb(248,164,17)" fg:x="126" fg:w="1"/><text x="10.4856%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="10.3168%" y="565" width="0.2437%" height="15" fill="rgb(222,171,42)" fg:x="127" fg:w="3"/><text x="10.5668%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.3981%" y="549" width="0.1625%" height="15" fill="rgb(243,84,45)" fg:x="128" fg:w="2"/><text x="10.6481%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.3981%" y="533" width="0.1625%" height="15" fill="rgb(252,49,23)" fg:x="128" fg:w="2"/><text x="10.6481%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.3981%" y="517" width="0.1625%" height="15" fill="rgb(215,19,7)" fg:x="128" fg:w="2"/><text x="10.6481%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.4793%" y="501" width="0.0812%" height="15" fill="rgb(238,81,41)" fg:x="129" fg:w="1"/><text x="10.7293%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.4793%" y="485" width="0.0812%" height="15" fill="rgb(210,199,37)" fg:x="129" fg:w="1"/><text x="10.7293%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.5605%" y="517" width="0.1625%" height="15" fill="rgb(244,192,49)" fg:x="130" fg:w="2"/><text x="10.8105%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.6418%" y="501" width="0.0812%" height="15" fill="rgb(226,211,11)" fg:x="131" fg:w="1"/><text x="10.8918%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.6418%" y="485" width="0.0812%" height="15" fill="rgb(236,162,54)" fg:x="131" fg:w="1"/><text x="10.8918%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.6418%" y="469" width="0.0812%" height="15" fill="rgb(220,229,9)" fg:x="131" fg:w="1"/><text x="10.8918%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.6418%" y="453" width="0.0812%" height="15" fill="rgb(250,87,22)" fg:x="131" fg:w="1"/><text x="10.8918%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.6418%" y="437" width="0.0812%" height="15" fill="rgb(239,43,17)" fg:x="131" fg:w="1"/><text x="10.8918%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.6418%" y="421" width="0.0812%" height="15" fill="rgb(231,177,25)" fg:x="131" fg:w="1"/><text x="10.8918%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.7230%" y="501" width="0.0812%" height="15" fill="rgb(219,179,1)" fg:x="132" fg:w="1"/><text x="10.9730%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.7230%" y="485" width="0.0812%" height="15" fill="rgb(238,219,53)" fg:x="132" fg:w="1"/><text x="10.9730%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="10.5605%" y="549" width="0.3249%" height="15" fill="rgb(232,167,36)" fg:x="130" fg:w="4"/><text x="10.8105%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="10.5605%" y="533" width="0.3249%" height="15" fill="rgb(244,19,51)" fg:x="130" fg:w="4"/><text x="10.8105%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.7230%" y="517" width="0.1625%" height="15" fill="rgb(224,6,22)" fg:x="132" fg:w="2"/><text x="10.9730%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.8042%" y="501" width="0.0812%" height="15" fill="rgb(224,145,5)" fg:x="133" fg:w="1"/><text x="11.0542%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.8855%" y="533" width="0.0812%" height="15" fill="rgb(234,130,49)" fg:x="134" fg:w="1"/><text x="11.1355%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="10.9667%" y="533" width="0.2437%" height="15" fill="rgb(254,6,2)" fg:x="135" fg:w="3"/><text x="11.2167%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.0479%" y="517" width="0.1625%" height="15" fill="rgb(208,96,46)" fg:x="136" fg:w="2"/><text x="11.2979%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.0479%" y="501" width="0.1625%" height="15" fill="rgb(239,3,39)" fg:x="136" fg:w="2"/><text x="11.2979%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="11.0479%" y="485" width="0.1625%" height="15" fill="rgb(233,210,1)" fg:x="136" fg:w="2"/><text x="11.2979%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="11.0479%" y="469" width="0.1625%" height="15" fill="rgb(244,137,37)" fg:x="136" fg:w="2"/><text x="11.2979%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="11.0479%" y="453" width="0.1625%" height="15" fill="rgb(240,136,2)" fg:x="136" fg:w="2"/><text x="11.2979%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="11.0479%" y="437" width="0.1625%" height="15" fill="rgb(239,18,37)" fg:x="136" fg:w="2"/><text x="11.2979%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.2104%" y="517" width="0.1625%" height="15" fill="rgb(218,185,22)" fg:x="138" fg:w="2"/><text x="11.4604%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.2104%" y="501" width="0.1625%" height="15" fill="rgb(225,218,4)" fg:x="138" fg:w="2"/><text x="11.4604%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.2916%" y="485" width="0.0812%" height="15" fill="rgb(230,182,32)" fg:x="139" fg:w="1"/><text x="11.5416%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.2916%" y="469" width="0.0812%" height="15" fill="rgb(242,56,43)" fg:x="139" fg:w="1"/><text x="11.5416%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.2916%" y="453" width="0.0812%" height="15" fill="rgb(233,99,24)" fg:x="139" fg:w="1"/><text x="11.5416%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.2916%" y="437" width="0.0812%" height="15" fill="rgb(234,209,42)" fg:x="139" fg:w="1"/><text x="11.5416%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.2916%" y="421" width="0.0812%" height="15" fill="rgb(227,7,12)" fg:x="139" fg:w="1"/><text x="11.5416%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.3729%" y="517" width="0.0812%" height="15" fill="rgb(245,203,43)" fg:x="140" fg:w="1"/><text x="11.6229%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="10.8855%" y="549" width="0.6499%" height="15" fill="rgb(238,205,33)" fg:x="134" fg:w="8"/><text x="11.1355%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="11.2104%" y="533" width="0.3249%" height="15" fill="rgb(231,56,7)" fg:x="138" fg:w="4"/><text x="11.4604%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.4541%" y="517" width="0.0812%" height="15" fill="rgb(244,186,29)" fg:x="141" fg:w="1"/><text x="11.7041%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.4541%" y="501" width="0.0812%" height="15" fill="rgb(234,111,31)" fg:x="141" fg:w="1"/><text x="11.7041%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.14%)</title><rect x="10.5605%" y="565" width="1.1373%" height="15" fill="rgb(241,149,10)" fg:x="130" fg:w="14"/><text x="10.8105%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.5353%" y="549" width="0.1625%" height="15" fill="rgb(249,206,44)" fg:x="142" fg:w="2"/><text x="11.7853%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.5353%" y="533" width="0.1625%" height="15" fill="rgb(251,153,30)" fg:x="142" fg:w="2"/><text x="11.7853%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.6166%" y="517" width="0.0812%" height="15" fill="rgb(239,152,38)" fg:x="143" fg:w="1"/><text x="11.8666%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (24 samples, 1.95%)</title><rect x="9.9106%" y="597" width="1.9496%" height="15" fill="rgb(249,139,47)" fg:x="122" fg:w="24"/><text x="10.1606%" y="607.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.62%)</title><rect x="10.2356%" y="581" width="1.6247%" height="15" fill="rgb(244,64,35)" fg:x="126" fg:w="20"/><text x="10.4856%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.6978%" y="565" width="0.1625%" height="15" fill="rgb(216,46,15)" fg:x="144" fg:w="2"/><text x="11.9478%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.7790%" y="549" width="0.0812%" height="15" fill="rgb(250,74,19)" fg:x="145" fg:w="1"/><text x="12.0290%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.7790%" y="533" width="0.0812%" height="15" fill="rgb(249,42,33)" fg:x="145" fg:w="1"/><text x="12.0290%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="11.8603%" y="549" width="0.1625%" height="15" fill="rgb(242,149,17)" fg:x="146" fg:w="2"/><text x="12.1103%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.8603%" y="597" width="0.2437%" height="15" fill="rgb(244,29,21)" fg:x="146" fg:w="3"/><text x="12.1103%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="11.8603%" y="581" width="0.2437%" height="15" fill="rgb(220,130,37)" fg:x="146" fg:w="3"/><text x="12.1103%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.8603%" y="565" width="0.2437%" height="15" fill="rgb(211,67,2)" fg:x="146" fg:w="3"/><text x="12.1103%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.0227%" y="549" width="0.0812%" height="15" fill="rgb(235,68,52)" fg:x="148" fg:w="1"/><text x="12.2727%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.0227%" y="533" width="0.0812%" height="15" fill="rgb(246,142,3)" fg:x="148" fg:w="1"/><text x="12.2727%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.0227%" y="517" width="0.0812%" height="15" fill="rgb(241,25,7)" fg:x="148" fg:w="1"/><text x="12.2727%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="12.1040%" y="581" width="0.0812%" height="15" fill="rgb(242,119,39)" fg:x="149" fg:w="1"/><text x="12.3540%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="12.1040%" y="565" width="0.0812%" height="15" fill="rgb(241,98,45)" fg:x="149" fg:w="1"/><text x="12.3540%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.1040%" y="549" width="0.0812%" height="15" fill="rgb(254,28,30)" fg:x="149" fg:w="1"/><text x="12.3540%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.1040%" y="533" width="0.0812%" height="15" fill="rgb(241,142,54)" fg:x="149" fg:w="1"/><text x="12.3540%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1852%" y="549" width="0.0812%" height="15" fill="rgb(222,85,15)" fg:x="150" fg:w="1"/><text x="12.4352%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2665%" y="549" width="0.0812%" height="15" fill="rgb(210,85,47)" fg:x="151" fg:w="1"/><text x="12.5165%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="12.3477%" y="549" width="0.1625%" height="15" fill="rgb(224,206,25)" fg:x="152" fg:w="2"/><text x="12.5977%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.4289%" y="533" width="0.0812%" height="15" fill="rgb(243,201,19)" fg:x="153" fg:w="1"/><text x="12.6789%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6726%" y="501" width="0.0812%" height="15" fill="rgb(236,59,4)" fg:x="156" fg:w="1"/><text x="12.9226%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.7539%" y="453" width="0.0812%" height="15" fill="rgb(254,179,45)" fg:x="157" fg:w="1"/><text x="13.0039%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8351%" y="421" width="0.0812%" height="15" fill="rgb(226,14,10)" fg:x="158" fg:w="1"/><text x="13.0851%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="12.7539%" y="501" width="0.2437%" height="15" fill="rgb(244,27,41)" fg:x="157" fg:w="3"/><text x="13.0039%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="12.7539%" y="485" width="0.2437%" height="15" fill="rgb(235,35,32)" fg:x="157" fg:w="3"/><text x="13.0039%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="12.7539%" y="469" width="0.2437%" height="15" fill="rgb(218,68,31)" fg:x="157" fg:w="3"/><text x="13.0039%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="12.8351%" y="453" width="0.1625%" height="15" fill="rgb(207,120,37)" fg:x="158" fg:w="2"/><text x="13.0851%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="12.8351%" y="437" width="0.1625%" height="15" fill="rgb(227,98,0)" fg:x="158" fg:w="2"/><text x="13.0851%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.9163%" y="421" width="0.0812%" height="15" fill="rgb(207,7,3)" fg:x="159" fg:w="1"/><text x="13.1663%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="13.1600%" y="469" width="0.3249%" height="15" fill="rgb(206,98,19)" fg:x="162" fg:w="4"/><text x="13.4100%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="13.3225%" y="453" width="0.1625%" height="15" fill="rgb(217,5,26)" fg:x="164" fg:w="2"/><text x="13.5725%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.4850%" y="437" width="0.0812%" height="15" fill="rgb(235,190,38)" fg:x="166" fg:w="1"/><text x="13.7350%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.4850%" y="421" width="0.0812%" height="15" fill="rgb(247,86,24)" fg:x="166" fg:w="1"/><text x="13.7350%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (14 samples, 1.14%)</title><rect x="12.5914%" y="533" width="1.1373%" height="15" fill="rgb(205,101,16)" fg:x="155" fg:w="14"/><text x="12.8414%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (14 samples, 1.14%)</title><rect x="12.5914%" y="517" width="1.1373%" height="15" fill="rgb(246,168,33)" fg:x="155" fg:w="14"/><text x="12.8414%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.73%)</title><rect x="12.9976%" y="501" width="0.7311%" height="15" fill="rgb(231,114,1)" fg:x="160" fg:w="9"/><text x="13.2476%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="13.0788%" y="485" width="0.6499%" height="15" fill="rgb(207,184,53)" fg:x="161" fg:w="8"/><text x="13.3288%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="13.4850%" y="469" width="0.2437%" height="15" fill="rgb(224,95,51)" fg:x="166" fg:w="3"/><text x="13.7350%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="13.4850%" y="453" width="0.2437%" height="15" fill="rgb(212,188,45)" fg:x="166" fg:w="3"/><text x="13.7350%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="13.5662%" y="437" width="0.1625%" height="15" fill="rgb(223,154,38)" fg:x="167" fg:w="2"/><text x="13.8162%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="13.5662%" y="421" width="0.1625%" height="15" fill="rgb(251,22,52)" fg:x="167" fg:w="2"/><text x="13.8162%" y="431.50"></text></g><g><title>engine::session::Session::flush (51 samples, 4.14%)</title><rect x="9.6669%" y="709" width="4.1430%" height="15" fill="rgb(229,209,22)" fg:x="119" fg:w="51"/><text x="9.9169%" y="719.50">engin..</text></g><g><title>engine::session::Session::save_changes (50 samples, 4.06%)</title><rect x="9.7482%" y="693" width="4.0617%" height="15" fill="rgb(234,138,34)" fg:x="120" fg:w="50"/><text x="9.9982%" y="703.50">engi..</text></g><g><title>engine::session::state::State::close (49 samples, 3.98%)</title><rect x="9.8294%" y="677" width="3.9805%" height="15" fill="rgb(212,95,11)" fg:x="121" fg:w="49"/><text x="10.0794%" y="687.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (49 samples, 3.98%)</title><rect x="9.8294%" y="661" width="3.9805%" height="15" fill="rgb(240,179,47)" fg:x="121" fg:w="49"/><text x="10.0794%" y="671.50">engi..</text></g><g><title>core::iter::adapters::try_process (48 samples, 3.90%)</title><rect x="9.9106%" y="645" width="3.8993%" height="15" fill="rgb(240,163,11)" fg:x="122" fg:w="48"/><text x="10.1606%" y="655.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (48 samples, 3.90%)</title><rect x="9.9106%" y="629" width="3.8993%" height="15" fill="rgb(236,37,12)" fg:x="122" fg:w="48"/><text x="10.1606%" y="639.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (48 samples, 3.90%)</title><rect x="9.9106%" y="613" width="3.8993%" height="15" fill="rgb(232,164,16)" fg:x="122" fg:w="48"/><text x="10.1606%" y="623.50">engi..</text></g><g><title>kernel::model::any_entity_changes (21 samples, 1.71%)</title><rect x="12.1040%" y="597" width="1.7059%" height="15" fill="rgb(244,205,15)" fg:x="149" fg:w="21"/><text x="12.3540%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (20 samples, 1.62%)</title><rect x="12.1852%" y="581" width="1.6247%" height="15" fill="rgb(223,117,47)" fg:x="150" fg:w="20"/><text x="12.4352%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (20 samples, 1.62%)</title><rect x="12.1852%" y="565" width="1.6247%" height="15" fill="rgb(244,107,35)" fg:x="150" fg:w="20"/><text x="12.4352%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (16 samples, 1.30%)</title><rect x="12.5102%" y="549" width="1.2998%" height="15" fill="rgb(205,140,8)" fg:x="154" fg:w="16"/><text x="12.7602%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.7287%" y="533" width="0.0812%" height="15" fill="rgb(228,84,46)" fg:x="169" fg:w="1"/><text x="13.9787%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7287%" y="517" width="0.0812%" height="15" fill="rgb(254,188,9)" fg:x="169" fg:w="1"/><text x="13.9787%" y="527.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="13.8099%" y="709" width="0.1625%" height="15" fill="rgb(206,112,54)" fg:x="170" fg:w="2"/><text x="14.0599%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="13.8099%" y="693" width="0.1625%" height="15" fill="rgb(216,84,49)" fg:x="170" fg:w="2"/><text x="14.0599%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="13.8099%" y="677" width="0.1625%" height="15" fill="rgb(214,194,35)" fg:x="170" fg:w="2"/><text x="14.0599%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.8911%" y="661" width="0.0812%" height="15" fill="rgb(249,28,3)" fg:x="171" fg:w="1"/><text x="14.1411%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8911%" y="645" width="0.0812%" height="15" fill="rgb(222,56,52)" fg:x="171" fg:w="1"/><text x="14.1411%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.8911%" y="629" width="0.0812%" height="15" fill="rgb(245,217,50)" fg:x="171" fg:w="1"/><text x="14.1411%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8911%" y="613" width="0.0812%" height="15" fill="rgb(213,201,24)" fg:x="171" fg:w="1"/><text x="14.1411%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9724%" y="661" width="0.0812%" height="15" fill="rgb(248,116,28)" fg:x="172" fg:w="1"/><text x="14.2224%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="13.9724%" y="693" width="0.2437%" height="15" fill="rgb(219,72,43)" fg:x="172" fg:w="3"/><text x="14.2224%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="13.9724%" y="677" width="0.2437%" height="15" fill="rgb(209,138,14)" fg:x="172" fg:w="3"/><text x="14.2224%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.0536%" y="661" width="0.1625%" height="15" fill="rgb(222,18,33)" fg:x="173" fg:w="2"/><text x="14.3036%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.0536%" y="645" width="0.1625%" height="15" fill="rgb(213,199,7)" fg:x="173" fg:w="2"/><text x="14.3036%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.0536%" y="629" width="0.1625%" height="15" fill="rgb(250,110,10)" fg:x="173" fg:w="2"/><text x="14.3036%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.0536%" y="613" width="0.1625%" height="15" fill="rgb(248,123,6)" fg:x="173" fg:w="2"/><text x="14.3036%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.0536%" y="597" width="0.1625%" height="15" fill="rgb(206,91,31)" fg:x="173" fg:w="2"/><text x="14.3036%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.0536%" y="581" width="0.1625%" height="15" fill="rgb(211,154,13)" fg:x="173" fg:w="2"/><text x="14.3036%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="14.0536%" y="565" width="0.1625%" height="15" fill="rgb(225,148,7)" fg:x="173" fg:w="2"/><text x="14.3036%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1348%" y="549" width="0.0812%" height="15" fill="rgb(220,160,43)" fg:x="174" fg:w="1"/><text x="14.3848%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2161%" y="693" width="0.0812%" height="15" fill="rgb(213,52,39)" fg:x="175" fg:w="1"/><text x="14.4661%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2161%" y="677" width="0.0812%" height="15" fill="rgb(243,137,7)" fg:x="175" fg:w="1"/><text x="14.4661%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.2161%" y="661" width="0.0812%" height="15" fill="rgb(230,79,13)" fg:x="175" fg:w="1"/><text x="14.4661%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.2161%" y="645" width="0.0812%" height="15" fill="rgb(247,105,23)" fg:x="175" fg:w="1"/><text x="14.4661%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.2161%" y="629" width="0.0812%" height="15" fill="rgb(223,179,41)" fg:x="175" fg:w="1"/><text x="14.4661%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.2161%" y="613" width="0.0812%" height="15" fill="rgb(218,9,34)" fg:x="175" fg:w="1"/><text x="14.4661%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.2161%" y="597" width="0.0812%" height="15" fill="rgb(222,106,8)" fg:x="175" fg:w="1"/><text x="14.4661%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.2161%" y="581" width="0.0812%" height="15" fill="rgb(211,220,0)" fg:x="175" fg:w="1"/><text x="14.4661%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.2161%" y="565" width="0.0812%" height="15" fill="rgb(229,52,16)" fg:x="175" fg:w="1"/><text x="14.4661%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.2161%" y="549" width="0.0812%" height="15" fill="rgb(212,155,18)" fg:x="175" fg:w="1"/><text x="14.4661%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.2161%" y="533" width="0.0812%" height="15" fill="rgb(242,21,14)" fg:x="175" fg:w="1"/><text x="14.4661%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.2161%" y="517" width="0.0812%" height="15" fill="rgb(222,19,48)" fg:x="175" fg:w="1"/><text x="14.4661%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.2973%" y="677" width="0.0812%" height="15" fill="rgb(232,45,27)" fg:x="176" fg:w="1"/><text x="14.5473%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.2973%" y="661" width="0.0812%" height="15" fill="rgb(249,103,42)" fg:x="176" fg:w="1"/><text x="14.5473%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2973%" y="645" width="0.0812%" height="15" fill="rgb(246,81,33)" fg:x="176" fg:w="1"/><text x="14.5473%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.2973%" y="629" width="0.0812%" height="15" fill="rgb(252,33,42)" fg:x="176" fg:w="1"/><text x="14.5473%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2973%" y="613" width="0.0812%" height="15" fill="rgb(209,212,41)" fg:x="176" fg:w="1"/><text x="14.5473%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.2973%" y="597" width="0.0812%" height="15" fill="rgb(207,154,6)" fg:x="176" fg:w="1"/><text x="14.5473%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="14.3786%" y="677" width="0.0812%" height="15" fill="rgb(223,64,47)" fg:x="177" fg:w="1"/><text x="14.6286%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="14.3786%" y="661" width="0.0812%" height="15" fill="rgb(211,161,38)" fg:x="177" fg:w="1"/><text x="14.6286%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.3786%" y="645" width="0.0812%" height="15" fill="rgb(219,138,40)" fg:x="177" fg:w="1"/><text x="14.6286%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.3786%" y="629" width="0.0812%" height="15" fill="rgb(241,228,46)" fg:x="177" fg:w="1"/><text x="14.6286%" y="639.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.3786%" y="613" width="0.0812%" height="15" fill="rgb(223,209,38)" fg:x="177" fg:w="1"/><text x="14.6286%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.3786%" y="597" width="0.0812%" height="15" fill="rgb(236,164,45)" fg:x="177" fg:w="1"/><text x="14.6286%" y="607.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="14.3786%" y="581" width="0.0812%" height="15" fill="rgb(231,15,5)" fg:x="177" fg:w="1"/><text x="14.6286%" y="591.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="14.4598%" y="661" width="0.0812%" height="15" fill="rgb(252,35,15)" fg:x="178" fg:w="1"/><text x="14.7098%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.5410%" y="629" width="0.0812%" height="15" fill="rgb(248,181,18)" fg:x="179" fg:w="1"/><text x="14.7910%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="14.6223%" y="613" width="0.3249%" height="15" fill="rgb(233,39,42)" fg:x="180" fg:w="4"/><text x="14.8723%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="14.7847%" y="597" width="0.1625%" height="15" fill="rgb(238,110,33)" fg:x="182" fg:w="2"/><text x="15.0347%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="14.7847%" y="581" width="0.1625%" height="15" fill="rgb(233,195,10)" fg:x="182" fg:w="2"/><text x="15.0347%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="14.7847%" y="565" width="0.1625%" height="15" fill="rgb(254,105,3)" fg:x="182" fg:w="2"/><text x="15.0347%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="14.7847%" y="549" width="0.1625%" height="15" fill="rgb(221,225,9)" fg:x="182" fg:w="2"/><text x="15.0347%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="14.7847%" y="533" width="0.1625%" height="15" fill="rgb(224,227,45)" fg:x="182" fg:w="2"/><text x="15.0347%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="14.8660%" y="517" width="0.0812%" height="15" fill="rgb(229,198,43)" fg:x="183" fg:w="1"/><text x="15.1160%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.8660%" y="501" width="0.0812%" height="15" fill="rgb(206,209,35)" fg:x="183" fg:w="1"/><text x="15.1160%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.57%)</title><rect x="14.4598%" y="677" width="0.5686%" height="15" fill="rgb(245,195,53)" fg:x="178" fg:w="7"/><text x="14.7098%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="14.5410%" y="661" width="0.4874%" height="15" fill="rgb(240,92,26)" fg:x="179" fg:w="6"/><text x="14.7910%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="14.5410%" y="645" width="0.4874%" height="15" fill="rgb(207,40,23)" fg:x="179" fg:w="6"/><text x="14.7910%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.41%)</title><rect x="14.6223%" y="629" width="0.4062%" height="15" fill="rgb(223,111,35)" fg:x="180" fg:w="5"/><text x="14.8723%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9472%" y="613" width="0.0812%" height="15" fill="rgb(229,147,28)" fg:x="184" fg:w="1"/><text x="15.1972%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (14 samples, 1.14%)</title><rect x="13.9724%" y="709" width="1.1373%" height="15" fill="rgb(211,29,28)" fg:x="172" fg:w="14"/><text x="14.2224%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.81%)</title><rect x="14.2973%" y="693" width="0.8123%" height="15" fill="rgb(228,72,33)" fg:x="176" fg:w="10"/><text x="14.5473%" y="703.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="15.0284%" y="677" width="0.0812%" height="15" fill="rgb(205,214,31)" fg:x="185" fg:w="1"/><text x="15.2784%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="15.0284%" y="661" width="0.0812%" height="15" fill="rgb(224,111,15)" fg:x="185" fg:w="1"/><text x="15.2784%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="15.0284%" y="645" width="0.0812%" height="15" fill="rgb(253,21,26)" fg:x="185" fg:w="1"/><text x="15.2784%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="15.1097%" y="677" width="0.0812%" height="15" fill="rgb(245,139,43)" fg:x="186" fg:w="1"/><text x="15.3597%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="15.1097%" y="661" width="0.0812%" height="15" fill="rgb(252,170,7)" fg:x="186" fg:w="1"/><text x="15.3597%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.1097%" y="645" width="0.0812%" height="15" fill="rgb(231,118,14)" fg:x="186" fg:w="1"/><text x="15.3597%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.1097%" y="629" width="0.0812%" height="15" fill="rgb(238,83,0)" fg:x="186" fg:w="1"/><text x="15.3597%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.1097%" y="613" width="0.0812%" height="15" fill="rgb(221,39,39)" fg:x="186" fg:w="1"/><text x="15.3597%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="15.1097%" y="709" width="0.1625%" height="15" fill="rgb(222,119,46)" fg:x="186" fg:w="2"/><text x="15.3597%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="15.1097%" y="693" width="0.1625%" height="15" fill="rgb(222,165,49)" fg:x="186" fg:w="2"/><text x="15.3597%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.1909%" y="677" width="0.0812%" height="15" fill="rgb(219,113,52)" fg:x="187" fg:w="1"/><text x="15.4409%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="15.1909%" y="661" width="0.0812%" height="15" fill="rgb(214,7,15)" fg:x="187" fg:w="1"/><text x="15.4409%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1909%" y="645" width="0.0812%" height="15" fill="rgb(235,32,4)" fg:x="187" fg:w="1"/><text x="15.4409%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="15.1909%" y="629" width="0.0812%" height="15" fill="rgb(238,90,54)" fg:x="187" fg:w="1"/><text x="15.4409%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.1909%" y="613" width="0.0812%" height="15" fill="rgb(213,208,19)" fg:x="187" fg:w="1"/><text x="15.4409%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="15.1909%" y="597" width="0.0812%" height="15" fill="rgb(233,156,4)" fg:x="187" fg:w="1"/><text x="15.4409%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.2721%" y="645" width="0.0812%" height="15" fill="rgb(207,194,5)" fg:x="188" fg:w="1"/><text x="15.5221%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="15.2721%" y="709" width="0.1625%" height="15" fill="rgb(206,111,30)" fg:x="188" fg:w="2"/><text x="15.5221%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="15.2721%" y="693" width="0.1625%" height="15" fill="rgb(243,70,54)" fg:x="188" fg:w="2"/><text x="15.5221%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.2721%" y="677" width="0.1625%" height="15" fill="rgb(242,28,8)" fg:x="188" fg:w="2"/><text x="15.5221%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.2721%" y="661" width="0.1625%" height="15" fill="rgb(219,106,18)" fg:x="188" fg:w="2"/><text x="15.5221%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="15.3534%" y="645" width="0.0812%" height="15" fill="rgb(244,222,10)" fg:x="189" fg:w="1"/><text x="15.6034%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="15.3534%" y="629" width="0.0812%" height="15" fill="rgb(236,179,52)" fg:x="189" fg:w="1"/><text x="15.6034%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="15.3534%" y="613" width="0.0812%" height="15" fill="rgb(213,23,39)" fg:x="189" fg:w="1"/><text x="15.6034%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.3534%" y="597" width="0.0812%" height="15" fill="rgb(238,48,10)" fg:x="189" fg:w="1"/><text x="15.6034%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.3534%" y="581" width="0.0812%" height="15" fill="rgb(251,196,23)" fg:x="189" fg:w="1"/><text x="15.6034%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="15.4346%" y="693" width="0.0812%" height="15" fill="rgb(250,152,24)" fg:x="190" fg:w="1"/><text x="15.6846%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="15.4346%" y="677" width="0.0812%" height="15" fill="rgb(209,150,17)" fg:x="190" fg:w="1"/><text x="15.6846%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.4346%" y="661" width="0.0812%" height="15" fill="rgb(234,202,34)" fg:x="190" fg:w="1"/><text x="15.6846%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.4346%" y="645" width="0.0812%" height="15" fill="rgb(253,148,53)" fg:x="190" fg:w="1"/><text x="15.6846%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.4346%" y="629" width="0.0812%" height="15" fill="rgb(218,129,16)" fg:x="190" fg:w="1"/><text x="15.6846%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.4346%" y="613" width="0.0812%" height="15" fill="rgb(216,85,19)" fg:x="190" fg:w="1"/><text x="15.6846%" y="623.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="15.4346%" y="597" width="0.0812%" height="15" fill="rgb(235,228,7)" fg:x="190" fg:w="1"/><text x="15.6846%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="15.5158%" y="677" width="0.0812%" height="15" fill="rgb(245,175,0)" fg:x="191" fg:w="1"/><text x="15.7658%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5158%" y="661" width="0.0812%" height="15" fill="rgb(208,168,36)" fg:x="191" fg:w="1"/><text x="15.7658%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="15.5158%" y="693" width="0.1625%" height="15" fill="rgb(246,171,24)" fg:x="191" fg:w="2"/><text x="15.7658%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5971%" y="677" width="0.0812%" height="15" fill="rgb(215,142,24)" fg:x="192" fg:w="1"/><text x="15.8471%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.5971%" y="661" width="0.0812%" height="15" fill="rgb(250,187,7)" fg:x="192" fg:w="1"/><text x="15.8471%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.5971%" y="645" width="0.0812%" height="15" fill="rgb(228,66,33)" fg:x="192" fg:w="1"/><text x="15.8471%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5971%" y="629" width="0.0812%" height="15" fill="rgb(234,215,21)" fg:x="192" fg:w="1"/><text x="15.8471%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.5971%" y="613" width="0.0812%" height="15" fill="rgb(222,191,20)" fg:x="192" fg:w="1"/><text x="15.8471%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5971%" y="597" width="0.0812%" height="15" fill="rgb(245,79,54)" fg:x="192" fg:w="1"/><text x="15.8471%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.6783%" y="629" width="0.0812%" height="15" fill="rgb(240,10,37)" fg:x="193" fg:w="1"/><text x="15.9283%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.41%)</title><rect x="15.4346%" y="709" width="0.4062%" height="15" fill="rgb(214,192,32)" fg:x="190" fg:w="5"/><text x="15.6846%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="15.6783%" y="693" width="0.1625%" height="15" fill="rgb(209,36,54)" fg:x="193" fg:w="2"/><text x="15.9283%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="15.6783%" y="677" width="0.1625%" height="15" fill="rgb(220,10,11)" fg:x="193" fg:w="2"/><text x="15.9283%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.6783%" y="661" width="0.1625%" height="15" fill="rgb(221,106,17)" fg:x="193" fg:w="2"/><text x="15.9283%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.6783%" y="645" width="0.1625%" height="15" fill="rgb(251,142,44)" fg:x="193" fg:w="2"/><text x="15.9283%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.7595%" y="629" width="0.0812%" height="15" fill="rgb(238,13,15)" fg:x="194" fg:w="1"/><text x="16.0095%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.7595%" y="613" width="0.0812%" height="15" fill="rgb(208,107,27)" fg:x="194" fg:w="1"/><text x="16.0095%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.7595%" y="597" width="0.0812%" height="15" fill="rgb(205,136,37)" fg:x="194" fg:w="1"/><text x="16.0095%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.7595%" y="581" width="0.0812%" height="15" fill="rgb(250,205,27)" fg:x="194" fg:w="1"/><text x="16.0095%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.7595%" y="565" width="0.0812%" height="15" fill="rgb(210,80,43)" fg:x="194" fg:w="1"/><text x="16.0095%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (81 samples, 6.58%)</title><rect x="9.3420%" y="725" width="6.5800%" height="15" fill="rgb(247,160,36)" fg:x="115" fg:w="81"/><text x="9.5920%" y="735.50">plugins_c..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="15.8408%" y="709" width="0.0812%" height="15" fill="rgb(234,13,49)" fg:x="195" fg:w="1"/><text x="16.0908%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.8408%" y="693" width="0.0812%" height="15" fill="rgb(234,122,0)" fg:x="195" fg:w="1"/><text x="16.0908%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="15.8408%" y="677" width="0.0812%" height="15" fill="rgb(207,146,38)" fg:x="195" fg:w="1"/><text x="16.0908%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.8408%" y="661" width="0.0812%" height="15" fill="rgb(207,177,25)" fg:x="195" fg:w="1"/><text x="16.0908%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="15.9220%" y="693" width="0.0812%" height="15" fill="rgb(211,178,42)" fg:x="196" fg:w="1"/><text x="16.1720%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="15.9220%" y="677" width="0.0812%" height="15" fill="rgb(230,69,54)" fg:x="196" fg:w="1"/><text x="16.1720%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.9220%" y="661" width="0.0812%" height="15" fill="rgb(214,135,41)" fg:x="196" fg:w="1"/><text x="16.1720%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="15.9220%" y="645" width="0.0812%" height="15" fill="rgb(237,67,25)" fg:x="196" fg:w="1"/><text x="16.1720%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="15.9220%" y="629" width="0.0812%" height="15" fill="rgb(222,189,50)" fg:x="196" fg:w="1"/><text x="16.1720%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.9220%" y="613" width="0.0812%" height="15" fill="rgb(245,148,34)" fg:x="196" fg:w="1"/><text x="16.1720%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.9220%" y="597" width="0.0812%" height="15" fill="rgb(222,29,6)" fg:x="196" fg:w="1"/><text x="16.1720%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.0032%" y="677" width="0.0812%" height="15" fill="rgb(221,189,43)" fg:x="197" fg:w="1"/><text x="16.2532%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.0032%" y="661" width="0.0812%" height="15" fill="rgb(207,36,27)" fg:x="197" fg:w="1"/><text x="16.2532%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.0032%" y="645" width="0.0812%" height="15" fill="rgb(217,90,24)" fg:x="197" fg:w="1"/><text x="16.2532%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.0032%" y="629" width="0.0812%" height="15" fill="rgb(224,66,35)" fg:x="197" fg:w="1"/><text x="16.2532%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0032%" y="613" width="0.0812%" height="15" fill="rgb(221,13,50)" fg:x="197" fg:w="1"/><text x="16.2532%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="16.0845%" y="645" width="0.0812%" height="15" fill="rgb(236,68,49)" fg:x="198" fg:w="1"/><text x="16.3345%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="16.0845%" y="629" width="0.0812%" height="15" fill="rgb(229,146,28)" fg:x="198" fg:w="1"/><text x="16.3345%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.0845%" y="613" width="0.0812%" height="15" fill="rgb(225,31,38)" fg:x="198" fg:w="1"/><text x="16.3345%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="16.0845%" y="597" width="0.0812%" height="15" fill="rgb(250,208,3)" fg:x="198" fg:w="1"/><text x="16.3345%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="16.0845%" y="581" width="0.0812%" height="15" fill="rgb(246,54,23)" fg:x="198" fg:w="1"/><text x="16.3345%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0845%" y="565" width="0.0812%" height="15" fill="rgb(243,76,11)" fg:x="198" fg:w="1"/><text x="16.3345%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="16.0032%" y="693" width="0.2437%" height="15" fill="rgb(245,21,50)" fg:x="197" fg:w="3"/><text x="16.2532%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="16.0845%" y="677" width="0.1625%" height="15" fill="rgb(228,9,43)" fg:x="198" fg:w="2"/><text x="16.3345%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="16.0845%" y="661" width="0.1625%" height="15" fill="rgb(208,100,47)" fg:x="198" fg:w="2"/><text x="16.3345%" y="671.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="16.1657%" y="645" width="0.0812%" height="15" fill="rgb(232,26,8)" fg:x="199" fg:w="1"/><text x="16.4157%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.1657%" y="629" width="0.0812%" height="15" fill="rgb(216,166,38)" fg:x="199" fg:w="1"/><text x="16.4157%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.1657%" y="613" width="0.0812%" height="15" fill="rgb(251,202,51)" fg:x="199" fg:w="1"/><text x="16.4157%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.41%)</title><rect x="15.9220%" y="725" width="0.4062%" height="15" fill="rgb(254,216,34)" fg:x="196" fg:w="5"/><text x="16.1720%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.41%)</title><rect x="15.9220%" y="709" width="0.4062%" height="15" fill="rgb(251,32,27)" fg:x="196" fg:w="5"/><text x="16.1720%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="16.2470%" y="693" width="0.0812%" height="15" fill="rgb(208,127,28)" fg:x="200" fg:w="1"/><text x="16.4970%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.2470%" y="677" width="0.0812%" height="15" fill="rgb(224,137,22)" fg:x="200" fg:w="1"/><text x="16.4970%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="16.3282%" y="709" width="0.1625%" height="15" fill="rgb(254,70,32)" fg:x="201" fg:w="2"/><text x="16.5782%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="16.3282%" y="693" width="0.1625%" height="15" fill="rgb(229,75,37)" fg:x="201" fg:w="2"/><text x="16.5782%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.3282%" y="677" width="0.1625%" height="15" fill="rgb(252,64,23)" fg:x="201" fg:w="2"/><text x="16.5782%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.3282%" y="661" width="0.1625%" height="15" fill="rgb(232,162,48)" fg:x="201" fg:w="2"/><text x="16.5782%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="16.3282%" y="645" width="0.1625%" height="15" fill="rgb(246,160,12)" fg:x="201" fg:w="2"/><text x="16.5782%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.3282%" y="629" width="0.1625%" height="15" fill="rgb(247,166,0)" fg:x="201" fg:w="2"/><text x="16.5782%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.4094%" y="613" width="0.0812%" height="15" fill="rgb(249,219,21)" fg:x="202" fg:w="1"/><text x="16.6594%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="16.4907%" y="709" width="0.1625%" height="15" fill="rgb(205,209,3)" fg:x="203" fg:w="2"/><text x="16.7407%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.4907%" y="693" width="0.1625%" height="15" fill="rgb(243,44,1)" fg:x="203" fg:w="2"/><text x="16.7407%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="16.5719%" y="677" width="0.0812%" height="15" fill="rgb(206,159,16)" fg:x="204" fg:w="1"/><text x="16.8219%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.5719%" y="661" width="0.0812%" height="15" fill="rgb(244,77,30)" fg:x="204" fg:w="1"/><text x="16.8219%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.5719%" y="645" width="0.0812%" height="15" fill="rgb(218,69,12)" fg:x="204" fg:w="1"/><text x="16.8219%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.6531%" y="709" width="0.0812%" height="15" fill="rgb(212,87,7)" fg:x="205" fg:w="1"/><text x="16.9031%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.7344%" y="677" width="0.0812%" height="15" fill="rgb(245,114,25)" fg:x="206" fg:w="1"/><text x="16.9844%" y="687.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="16.7344%" y="709" width="0.1625%" height="15" fill="rgb(210,61,42)" fg:x="206" fg:w="2"/><text x="16.9844%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="16.7344%" y="693" width="0.1625%" height="15" fill="rgb(211,52,33)" fg:x="206" fg:w="2"/><text x="16.9844%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="16.8156%" y="677" width="0.0812%" height="15" fill="rgb(234,58,33)" fg:x="207" fg:w="1"/><text x="17.0656%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.8156%" y="661" width="0.0812%" height="15" fill="rgb(220,115,36)" fg:x="207" fg:w="1"/><text x="17.0656%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.8156%" y="645" width="0.0812%" height="15" fill="rgb(243,153,54)" fg:x="207" fg:w="1"/><text x="17.0656%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.8968%" y="693" width="0.0812%" height="15" fill="rgb(251,47,18)" fg:x="208" fg:w="1"/><text x="17.1468%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.8968%" y="677" width="0.0812%" height="15" fill="rgb(242,102,42)" fg:x="208" fg:w="1"/><text x="17.1468%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8968%" y="661" width="0.0812%" height="15" fill="rgb(234,31,38)" fg:x="208" fg:w="1"/><text x="17.1468%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8968%" y="645" width="0.0812%" height="15" fill="rgb(221,117,51)" fg:x="208" fg:w="1"/><text x="17.1468%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.9781%" y="677" width="0.0812%" height="15" fill="rgb(212,20,18)" fg:x="209" fg:w="1"/><text x="17.2281%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.1405%" y="661" width="0.0812%" height="15" fill="rgb(245,133,36)" fg:x="211" fg:w="1"/><text x="17.3905%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="17.2218%" y="661" width="0.0812%" height="15" fill="rgb(212,6,19)" fg:x="212" fg:w="1"/><text x="17.4718%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.2218%" y="645" width="0.0812%" height="15" fill="rgb(218,1,36)" fg:x="212" fg:w="1"/><text x="17.4718%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="17.0593%" y="677" width="0.3249%" height="15" fill="rgb(246,84,54)" fg:x="210" fg:w="4"/><text x="17.3093%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.3030%" y="661" width="0.0812%" height="15" fill="rgb(242,110,6)" fg:x="213" fg:w="1"/><text x="17.5530%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3030%" y="645" width="0.0812%" height="15" fill="rgb(214,47,5)" fg:x="213" fg:w="1"/><text x="17.5530%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.3030%" y="629" width="0.0812%" height="15" fill="rgb(218,159,25)" fg:x="213" fg:w="1"/><text x="17.5530%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3030%" y="613" width="0.0812%" height="15" fill="rgb(215,211,28)" fg:x="213" fg:w="1"/><text x="17.5530%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="17.3030%" y="597" width="0.0812%" height="15" fill="rgb(238,59,32)" fg:x="213" fg:w="1"/><text x="17.5530%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.4655%" y="549" width="0.0812%" height="15" fill="rgb(226,82,3)" fg:x="215" fg:w="1"/><text x="17.7155%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.4655%" y="533" width="0.0812%" height="15" fill="rgb(240,164,32)" fg:x="215" fg:w="1"/><text x="17.7155%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.4655%" y="517" width="0.0812%" height="15" fill="rgb(232,46,7)" fg:x="215" fg:w="1"/><text x="17.7155%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="17.3842%" y="629" width="0.2437%" height="15" fill="rgb(229,129,53)" fg:x="214" fg:w="3"/><text x="17.6342%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="17.3842%" y="613" width="0.2437%" height="15" fill="rgb(234,188,29)" fg:x="214" fg:w="3"/><text x="17.6342%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="17.3842%" y="597" width="0.2437%" height="15" fill="rgb(246,141,4)" fg:x="214" fg:w="3"/><text x="17.6342%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="17.4655%" y="581" width="0.1625%" height="15" fill="rgb(229,23,39)" fg:x="215" fg:w="2"/><text x="17.7155%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.4655%" y="565" width="0.1625%" height="15" fill="rgb(206,12,3)" fg:x="215" fg:w="2"/><text x="17.7155%" y="575.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="17.5467%" y="549" width="0.0812%" height="15" fill="rgb(252,226,20)" fg:x="216" fg:w="1"/><text x="17.7967%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="17.3842%" y="661" width="0.3249%" height="15" fill="rgb(216,123,35)" fg:x="214" fg:w="4"/><text x="17.6342%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="17.3842%" y="645" width="0.3249%" height="15" fill="rgb(212,68,40)" fg:x="214" fg:w="4"/><text x="17.6342%" y="655.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="17.6279%" y="629" width="0.0812%" height="15" fill="rgb(254,125,32)" fg:x="217" fg:w="1"/><text x="17.8779%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6279%" y="613" width="0.0812%" height="15" fill="rgb(253,97,22)" fg:x="217" fg:w="1"/><text x="17.8779%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.7904%" y="629" width="0.0812%" height="15" fill="rgb(241,101,14)" fg:x="219" fg:w="1"/><text x="18.0404%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.57%)</title><rect x="17.3842%" y="677" width="0.5686%" height="15" fill="rgb(238,103,29)" fg:x="214" fg:w="7"/><text x="17.6342%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="17.7092%" y="661" width="0.2437%" height="15" fill="rgb(233,195,47)" fg:x="218" fg:w="3"/><text x="17.9592%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="17.7092%" y="645" width="0.2437%" height="15" fill="rgb(246,218,30)" fg:x="218" fg:w="3"/><text x="17.9592%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8716%" y="629" width="0.0812%" height="15" fill="rgb(219,145,47)" fg:x="220" fg:w="1"/><text x="18.1216%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.8716%" y="613" width="0.0812%" height="15" fill="rgb(243,12,26)" fg:x="220" fg:w="1"/><text x="18.1216%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8716%" y="597" width="0.0812%" height="15" fill="rgb(214,87,16)" fg:x="220" fg:w="1"/><text x="18.1216%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8716%" y="581" width="0.0812%" height="15" fill="rgb(208,99,42)" fg:x="220" fg:w="1"/><text x="18.1216%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8716%" y="565" width="0.0812%" height="15" fill="rgb(253,99,2)" fg:x="220" fg:w="1"/><text x="18.1216%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (21 samples, 1.71%)</title><rect x="16.3282%" y="725" width="1.7059%" height="15" fill="rgb(220,168,23)" fg:x="201" fg:w="21"/><text x="16.5782%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (14 samples, 1.14%)</title><rect x="16.8968%" y="709" width="1.1373%" height="15" fill="rgb(242,38,24)" fg:x="208" fg:w="14"/><text x="17.1468%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (13 samples, 1.06%)</title><rect x="16.9781%" y="693" width="1.0561%" height="15" fill="rgb(225,182,9)" fg:x="209" fg:w="13"/><text x="17.2281%" y="703.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="17.9529%" y="677" width="0.0812%" height="15" fill="rgb(243,178,37)" fg:x="221" fg:w="1"/><text x="18.2029%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.9529%" y="661" width="0.0812%" height="15" fill="rgb(232,139,19)" fg:x="221" fg:w="1"/><text x="18.2029%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.9529%" y="645" width="0.0812%" height="15" fill="rgb(225,201,24)" fg:x="221" fg:w="1"/><text x="18.2029%" y="655.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (163 samples, 13.24%)</title><rect x="4.8741%" y="741" width="13.2413%" height="15" fill="rgb(221,47,46)" fg:x="60" fg:w="163"/><text x="5.1241%" y="751.50">&lt;tests::HoldingKeyIn..</text></g><g><title>plugins_core::build::BuildSurroundings::route (1 samples, 0.08%)</title><rect x="18.0341%" y="725" width="0.0812%" height="15" fill="rgb(249,23,13)" fg:x="222" fg:w="1"/><text x="18.2841%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.0341%" y="709" width="0.0812%" height="15" fill="rgb(219,9,5)" fg:x="222" fg:w="1"/><text x="18.2841%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.0341%" y="693" width="0.0812%" height="15" fill="rgb(254,171,16)" fg:x="222" fg:w="1"/><text x="18.2841%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.1154%" y="741" width="0.0812%" height="15" fill="rgb(230,171,20)" fg:x="223" fg:w="1"/><text x="18.3654%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.1154%" y="725" width="0.0812%" height="15" fill="rgb(210,71,41)" fg:x="223" fg:w="1"/><text x="18.3654%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (2 samples, 0.16%)</title><rect x="18.1966%" y="741" width="0.1625%" height="15" fill="rgb(206,173,20)" fg:x="224" fg:w="2"/><text x="18.4466%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="18.1966%" y="725" width="0.1625%" height="15" fill="rgb(233,88,34)" fg:x="224" fg:w="2"/><text x="18.4466%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="18.1966%" y="709" width="0.1625%" height="15" fill="rgb(223,209,46)" fg:x="224" fg:w="2"/><text x="18.4466%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="18.2778%" y="693" width="0.0812%" height="15" fill="rgb(250,43,18)" fg:x="225" fg:w="1"/><text x="18.5278%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="18.2778%" y="677" width="0.0812%" height="15" fill="rgb(208,13,10)" fg:x="225" fg:w="1"/><text x="18.5278%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.2778%" y="661" width="0.0812%" height="15" fill="rgb(212,200,36)" fg:x="225" fg:w="1"/><text x="18.5278%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.2778%" y="645" width="0.0812%" height="15" fill="rgb(225,90,30)" fg:x="225" fg:w="1"/><text x="18.5278%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.2778%" y="629" width="0.0812%" height="15" fill="rgb(236,182,39)" fg:x="225" fg:w="1"/><text x="18.5278%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.2778%" y="613" width="0.0812%" height="15" fill="rgb(212,144,35)" fg:x="225" fg:w="1"/><text x="18.5278%" y="623.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="18.3591%" y="709" width="0.0812%" height="15" fill="rgb(228,63,44)" fg:x="226" fg:w="1"/><text x="18.6091%" y="719.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.08%)</title><rect x="18.3591%" y="693" width="0.0812%" height="15" fill="rgb(228,109,6)" fg:x="226" fg:w="1"/><text x="18.6091%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="18.3591%" y="725" width="0.2437%" height="15" fill="rgb(238,117,24)" fg:x="226" fg:w="3"/><text x="18.6091%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="18.4403%" y="709" width="0.1625%" height="15" fill="rgb(242,26,26)" fg:x="227" fg:w="2"/><text x="18.6903%" y="719.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="18.4403%" y="693" width="0.1625%" height="15" fill="rgb(221,92,48)" fg:x="227" fg:w="2"/><text x="18.6903%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="18.4403%" y="677" width="0.1625%" height="15" fill="rgb(209,209,32)" fg:x="227" fg:w="2"/><text x="18.6903%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="18.4403%" y="661" width="0.1625%" height="15" fill="rgb(221,70,22)" fg:x="227" fg:w="2"/><text x="18.6903%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="18.4403%" y="645" width="0.1625%" height="15" fill="rgb(248,145,5)" fg:x="227" fg:w="2"/><text x="18.6903%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="18.5215%" y="629" width="0.0812%" height="15" fill="rgb(226,116,26)" fg:x="228" fg:w="1"/><text x="18.7715%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="18.5215%" y="613" width="0.0812%" height="15" fill="rgb(244,5,17)" fg:x="228" fg:w="1"/><text x="18.7715%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="18.5215%" y="597" width="0.0812%" height="15" fill="rgb(252,159,33)" fg:x="228" fg:w="1"/><text x="18.7715%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="18.5215%" y="581" width="0.0812%" height="15" fill="rgb(206,71,0)" fg:x="228" fg:w="1"/><text x="18.7715%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.5215%" y="565" width="0.0812%" height="15" fill="rgb(233,118,54)" fg:x="228" fg:w="1"/><text x="18.7715%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.5215%" y="549" width="0.0812%" height="15" fill="rgb(234,83,48)" fg:x="228" fg:w="1"/><text x="18.7715%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="18.5215%" y="533" width="0.0812%" height="15" fill="rgb(228,3,54)" fg:x="228" fg:w="1"/><text x="18.7715%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="18.5215%" y="517" width="0.0812%" height="15" fill="rgb(226,155,13)" fg:x="228" fg:w="1"/><text x="18.7715%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="18.5215%" y="501" width="0.0812%" height="15" fill="rgb(241,28,37)" fg:x="228" fg:w="1"/><text x="18.7715%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="18.5215%" y="485" width="0.0812%" height="15" fill="rgb(233,93,10)" fg:x="228" fg:w="1"/><text x="18.7715%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="18.5215%" y="469" width="0.0812%" height="15" fill="rgb(225,113,19)" fg:x="228" fg:w="1"/><text x="18.7715%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="18.5215%" y="453" width="0.0812%" height="15" fill="rgb(241,2,18)" fg:x="228" fg:w="1"/><text x="18.7715%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.5215%" y="437" width="0.0812%" height="15" fill="rgb(228,207,21)" fg:x="228" fg:w="1"/><text x="18.7715%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="18.5215%" y="421" width="0.0812%" height="15" fill="rgb(213,211,35)" fg:x="228" fg:w="1"/><text x="18.7715%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.5215%" y="405" width="0.0812%" height="15" fill="rgb(209,83,10)" fg:x="228" fg:w="1"/><text x="18.7715%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="18.5215%" y="389" width="0.0812%" height="15" fill="rgb(209,164,1)" fg:x="228" fg:w="1"/><text x="18.7715%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="18.5215%" y="373" width="0.0812%" height="15" fill="rgb(213,184,43)" fg:x="228" fg:w="1"/><text x="18.7715%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="18.5215%" y="357" width="0.0812%" height="15" fill="rgb(231,61,34)" fg:x="228" fg:w="1"/><text x="18.7715%" y="367.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="18.5215%" y="341" width="0.0812%" height="15" fill="rgb(235,75,3)" fg:x="228" fg:w="1"/><text x="18.7715%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.6840%" y="693" width="0.0812%" height="15" fill="rgb(220,106,47)" fg:x="230" fg:w="1"/><text x="18.9340%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6840%" y="677" width="0.0812%" height="15" fill="rgb(210,196,33)" fg:x="230" fg:w="1"/><text x="18.9340%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="18.7652%" y="693" width="0.1625%" height="15" fill="rgb(229,154,42)" fg:x="231" fg:w="2"/><text x="19.0152%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="18.7652%" y="677" width="0.1625%" height="15" fill="rgb(228,114,26)" fg:x="231" fg:w="2"/><text x="19.0152%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="18.8465%" y="661" width="0.0812%" height="15" fill="rgb(208,144,1)" fg:x="232" fg:w="1"/><text x="19.0965%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.0089%" y="661" width="0.0812%" height="15" fill="rgb(239,112,37)" fg:x="234" fg:w="1"/><text x="19.2589%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.0089%" y="645" width="0.0812%" height="15" fill="rgb(210,96,50)" fg:x="234" fg:w="1"/><text x="19.2589%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.0089%" y="629" width="0.0812%" height="15" fill="rgb(222,178,2)" fg:x="234" fg:w="1"/><text x="19.2589%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="19.1714%" y="629" width="0.0812%" height="15" fill="rgb(226,74,18)" fg:x="236" fg:w="1"/><text x="19.4214%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.1714%" y="613" width="0.0812%" height="15" fill="rgb(225,67,54)" fg:x="236" fg:w="1"/><text x="19.4214%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.1714%" y="597" width="0.0812%" height="15" fill="rgb(251,92,32)" fg:x="236" fg:w="1"/><text x="19.4214%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.1714%" y="581" width="0.0812%" height="15" fill="rgb(228,149,22)" fg:x="236" fg:w="1"/><text x="19.4214%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.1714%" y="565" width="0.0812%" height="15" fill="rgb(243,54,13)" fg:x="236" fg:w="1"/><text x="19.4214%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.2526%" y="613" width="0.0812%" height="15" fill="rgb(243,180,28)" fg:x="237" fg:w="1"/><text x="19.5026%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.2526%" y="597" width="0.0812%" height="15" fill="rgb(208,167,24)" fg:x="237" fg:w="1"/><text x="19.5026%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="19.3339%" y="565" width="0.1625%" height="15" fill="rgb(245,73,45)" fg:x="238" fg:w="2"/><text x="19.5839%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.4151%" y="549" width="0.0812%" height="15" fill="rgb(237,203,48)" fg:x="239" fg:w="1"/><text x="19.6651%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.4151%" y="533" width="0.0812%" height="15" fill="rgb(211,197,16)" fg:x="239" fg:w="1"/><text x="19.6651%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.4151%" y="517" width="0.0812%" height="15" fill="rgb(243,99,51)" fg:x="239" fg:w="1"/><text x="19.6651%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="19.3339%" y="581" width="0.2437%" height="15" fill="rgb(215,123,29)" fg:x="238" fg:w="3"/><text x="19.5839%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="19.4963%" y="565" width="0.0812%" height="15" fill="rgb(239,186,37)" fg:x="240" fg:w="1"/><text x="19.7463%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.4963%" y="549" width="0.0812%" height="15" fill="rgb(252,136,39)" fg:x="240" fg:w="1"/><text x="19.7463%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.4963%" y="533" width="0.0812%" height="15" fill="rgb(223,213,32)" fg:x="240" fg:w="1"/><text x="19.7463%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.4963%" y="517" width="0.0812%" height="15" fill="rgb(233,115,5)" fg:x="240" fg:w="1"/><text x="19.7463%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.49%)</title><rect x="19.3339%" y="597" width="0.4874%" height="15" fill="rgb(207,226,44)" fg:x="238" fg:w="6"/><text x="19.5839%" y="607.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="19.5776%" y="581" width="0.2437%" height="15" fill="rgb(208,126,0)" fg:x="241" fg:w="3"/><text x="19.8276%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.7400%" y="565" width="0.0812%" height="15" fill="rgb(244,66,21)" fg:x="243" fg:w="1"/><text x="19.9900%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="19.8213%" y="597" width="0.2437%" height="15" fill="rgb(222,97,12)" fg:x="244" fg:w="3"/><text x="20.0713%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.9838%" y="581" width="0.0812%" height="15" fill="rgb(219,213,19)" fg:x="246" fg:w="1"/><text x="20.2338%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.9838%" y="565" width="0.0812%" height="15" fill="rgb(252,169,30)" fg:x="246" fg:w="1"/><text x="20.2338%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.9838%" y="549" width="0.0812%" height="15" fill="rgb(206,32,51)" fg:x="246" fg:w="1"/><text x="20.2338%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="20.1462%" y="581" width="0.0812%" height="15" fill="rgb(250,172,42)" fg:x="248" fg:w="1"/><text x="20.3962%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.1462%" y="565" width="0.0812%" height="15" fill="rgb(209,34,43)" fg:x="248" fg:w="1"/><text x="20.3962%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="20.2275%" y="565" width="0.1625%" height="15" fill="rgb(223,11,35)" fg:x="249" fg:w="2"/><text x="20.4775%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.2275%" y="549" width="0.1625%" height="15" fill="rgb(251,219,26)" fg:x="249" fg:w="2"/><text x="20.4775%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="20.2275%" y="533" width="0.1625%" height="15" fill="rgb(231,119,3)" fg:x="249" fg:w="2"/><text x="20.4775%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.3087%" y="517" width="0.0812%" height="15" fill="rgb(216,97,11)" fg:x="250" fg:w="1"/><text x="20.5587%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.3087%" y="501" width="0.0812%" height="15" fill="rgb(223,59,9)" fg:x="250" fg:w="1"/><text x="20.5587%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.3087%" y="485" width="0.0812%" height="15" fill="rgb(233,93,31)" fg:x="250" fg:w="1"/><text x="20.5587%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.3087%" y="469" width="0.0812%" height="15" fill="rgb(239,81,33)" fg:x="250" fg:w="1"/><text x="20.5587%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="20.2275%" y="581" width="0.2437%" height="15" fill="rgb(213,120,34)" fg:x="249" fg:w="3"/><text x="20.4775%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="20.3899%" y="565" width="0.0812%" height="15" fill="rgb(243,49,53)" fg:x="251" fg:w="1"/><text x="20.6399%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.3899%" y="549" width="0.0812%" height="15" fill="rgb(247,216,33)" fg:x="251" fg:w="1"/><text x="20.6399%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.3899%" y="533" width="0.0812%" height="15" fill="rgb(226,26,14)" fg:x="251" fg:w="1"/><text x="20.6399%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="20.0650%" y="597" width="0.4874%" height="15" fill="rgb(215,49,53)" fg:x="247" fg:w="6"/><text x="20.3150%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.4712%" y="581" width="0.0812%" height="15" fill="rgb(245,162,40)" fg:x="252" fg:w="1"/><text x="20.7212%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.4712%" y="565" width="0.0812%" height="15" fill="rgb(229,68,17)" fg:x="252" fg:w="1"/><text x="20.7212%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.4712%" y="549" width="0.0812%" height="15" fill="rgb(213,182,10)" fg:x="252" fg:w="1"/><text x="20.7212%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (20 samples, 1.62%)</title><rect x="19.0902%" y="645" width="1.6247%" height="15" fill="rgb(245,125,30)" fg:x="235" fg:w="20"/><text x="19.3402%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (18 samples, 1.46%)</title><rect x="19.2526%" y="629" width="1.4622%" height="15" fill="rgb(232,202,2)" fg:x="237" fg:w="18"/><text x="19.5026%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.38%)</title><rect x="19.3339%" y="613" width="1.3810%" height="15" fill="rgb(237,140,51)" fg:x="238" fg:w="17"/><text x="19.5839%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.5524%" y="597" width="0.1625%" height="15" fill="rgb(236,157,25)" fg:x="253" fg:w="2"/><text x="20.8024%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="20.5524%" y="581" width="0.1625%" height="15" fill="rgb(219,209,0)" fg:x="253" fg:w="2"/><text x="20.8024%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.6336%" y="565" width="0.0812%" height="15" fill="rgb(240,116,54)" fg:x="254" fg:w="1"/><text x="20.8836%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.7961%" y="613" width="0.0812%" height="15" fill="rgb(216,10,36)" fg:x="256" fg:w="1"/><text x="21.0461%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="20.8773%" y="613" width="0.1625%" height="15" fill="rgb(222,72,44)" fg:x="257" fg:w="2"/><text x="21.1273%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.0398%" y="597" width="0.0812%" height="15" fill="rgb(232,159,9)" fg:x="259" fg:w="1"/><text x="21.2898%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.2023%" y="565" width="0.0812%" height="15" fill="rgb(210,39,32)" fg:x="261" fg:w="1"/><text x="21.4523%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.2023%" y="549" width="0.0812%" height="15" fill="rgb(216,194,45)" fg:x="261" fg:w="1"/><text x="21.4523%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="21.2835%" y="565" width="0.0812%" height="15" fill="rgb(218,18,35)" fg:x="262" fg:w="1"/><text x="21.5335%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="21.2835%" y="549" width="0.0812%" height="15" fill="rgb(207,83,51)" fg:x="262" fg:w="1"/><text x="21.5335%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.2835%" y="533" width="0.0812%" height="15" fill="rgb(225,63,43)" fg:x="262" fg:w="1"/><text x="21.5335%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.73%)</title><rect x="20.7149%" y="645" width="0.7311%" height="15" fill="rgb(207,57,36)" fg:x="255" fg:w="9"/><text x="20.9649%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.65%)</title><rect x="20.7961%" y="629" width="0.6499%" height="15" fill="rgb(216,99,33)" fg:x="256" fg:w="8"/><text x="21.0461%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="21.0398%" y="613" width="0.4062%" height="15" fill="rgb(225,42,16)" fg:x="259" fg:w="5"/><text x="21.2898%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="21.1210%" y="597" width="0.3249%" height="15" fill="rgb(220,201,45)" fg:x="260" fg:w="4"/><text x="21.3710%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="21.2023%" y="581" width="0.2437%" height="15" fill="rgb(225,33,4)" fg:x="261" fg:w="3"/><text x="21.4523%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.3647%" y="565" width="0.0812%" height="15" fill="rgb(224,33,50)" fg:x="263" fg:w="1"/><text x="21.6147%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.3647%" y="549" width="0.0812%" height="15" fill="rgb(246,198,51)" fg:x="263" fg:w="1"/><text x="21.6147%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="21.6084%" y="565" width="0.1625%" height="15" fill="rgb(205,22,4)" fg:x="266" fg:w="2"/><text x="21.8584%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.6897%" y="549" width="0.0812%" height="15" fill="rgb(206,3,8)" fg:x="267" fg:w="1"/><text x="21.9397%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="21.7709%" y="549" width="0.1625%" height="15" fill="rgb(251,23,15)" fg:x="268" fg:w="2"/><text x="22.0209%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="21.7709%" y="533" width="0.1625%" height="15" fill="rgb(252,88,28)" fg:x="268" fg:w="2"/><text x="22.0209%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.8522%" y="517" width="0.0812%" height="15" fill="rgb(212,127,14)" fg:x="269" fg:w="1"/><text x="22.1022%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="21.6084%" y="613" width="0.4062%" height="15" fill="rgb(247,145,37)" fg:x="266" fg:w="5"/><text x="21.8584%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="21.6084%" y="597" width="0.4062%" height="15" fill="rgb(209,117,53)" fg:x="266" fg:w="5"/><text x="21.8584%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="21.6084%" y="581" width="0.4062%" height="15" fill="rgb(212,90,42)" fg:x="266" fg:w="5"/><text x="21.8584%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="21.7709%" y="565" width="0.2437%" height="15" fill="rgb(218,164,37)" fg:x="268" fg:w="3"/><text x="22.0209%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.9334%" y="549" width="0.0812%" height="15" fill="rgb(246,65,34)" fg:x="270" fg:w="1"/><text x="22.1834%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.9334%" y="533" width="0.0812%" height="15" fill="rgb(231,100,33)" fg:x="270" fg:w="1"/><text x="22.1834%" y="543.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (2 samples, 0.16%)</title><rect x="22.0146%" y="613" width="0.1625%" height="15" fill="rgb(228,126,14)" fg:x="271" fg:w="2"/><text x="22.2646%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="22.0959%" y="597" width="0.0812%" height="15" fill="rgb(215,173,21)" fg:x="272" fg:w="1"/><text x="22.3459%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;treediff::tools::record::Recorder&lt;treediff::value::shared::Key,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="22.1771%" y="613" width="0.0812%" height="15" fill="rgb(210,6,40)" fg:x="273" fg:w="1"/><text x="22.4271%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="22.2583%" y="581" width="0.3249%" height="15" fill="rgb(212,48,18)" fg:x="274" fg:w="4"/><text x="22.5083%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="22.4208%" y="565" width="0.1625%" height="15" fill="rgb(230,214,11)" fg:x="276" fg:w="2"/><text x="22.6708%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="22.4208%" y="549" width="0.1625%" height="15" fill="rgb(254,105,39)" fg:x="276" fg:w="2"/><text x="22.6708%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="22.5020%" y="533" width="0.0812%" height="15" fill="rgb(245,158,5)" fg:x="277" fg:w="1"/><text x="22.7520%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (15 samples, 1.22%)</title><rect x="21.4460%" y="629" width="1.2185%" height="15" fill="rgb(249,208,11)" fg:x="264" fg:w="15"/><text x="21.6960%" y="639.50"></text></g><g><title>treediff::diff::diff (5 samples, 0.41%)</title><rect x="22.2583%" y="613" width="0.4062%" height="15" fill="rgb(210,39,28)" fg:x="274" fg:w="5"/><text x="22.5083%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.41%)</title><rect x="22.2583%" y="597" width="0.4062%" height="15" fill="rgb(211,56,53)" fg:x="274" fg:w="5"/><text x="22.5083%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.5833%" y="581" width="0.0812%" height="15" fill="rgb(226,201,30)" fg:x="278" fg:w="1"/><text x="22.8333%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.9894%" y="597" width="0.0812%" height="15" fill="rgb(239,101,34)" fg:x="283" fg:w="1"/><text x="23.2394%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.0707%" y="597" width="0.0812%" height="15" fill="rgb(226,209,5)" fg:x="284" fg:w="1"/><text x="23.3207%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="23.1519%" y="597" width="0.1625%" height="15" fill="rgb(250,105,47)" fg:x="285" fg:w="2"/><text x="23.4019%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="23.1519%" y="581" width="0.1625%" height="15" fill="rgb(230,72,3)" fg:x="285" fg:w="2"/><text x="23.4019%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="23.3144%" y="597" width="0.1625%" height="15" fill="rgb(232,218,39)" fg:x="287" fg:w="2"/><text x="23.5644%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="23.3144%" y="581" width="0.1625%" height="15" fill="rgb(248,166,6)" fg:x="287" fg:w="2"/><text x="23.5644%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.3956%" y="565" width="0.0812%" height="15" fill="rgb(247,89,20)" fg:x="288" fg:w="1"/><text x="23.6456%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="23.3956%" y="549" width="0.0812%" height="15" fill="rgb(248,130,54)" fg:x="288" fg:w="1"/><text x="23.6456%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.5581%" y="565" width="0.0812%" height="15" fill="rgb(234,196,4)" fg:x="290" fg:w="1"/><text x="23.8081%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.7206%" y="549" width="0.1625%" height="15" fill="rgb(250,143,31)" fg:x="292" fg:w="2"/><text x="23.9706%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="23.7206%" y="533" width="0.1625%" height="15" fill="rgb(211,110,34)" fg:x="292" fg:w="2"/><text x="23.9706%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="23.8830%" y="549" width="0.0812%" height="15" fill="rgb(215,124,48)" fg:x="294" fg:w="1"/><text x="24.1330%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="23.8830%" y="533" width="0.0812%" height="15" fill="rgb(216,46,13)" fg:x="294" fg:w="1"/><text x="24.1330%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="23.8830%" y="517" width="0.0812%" height="15" fill="rgb(205,184,25)" fg:x="294" fg:w="1"/><text x="24.1330%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.8830%" y="501" width="0.0812%" height="15" fill="rgb(228,1,10)" fg:x="294" fg:w="1"/><text x="24.1330%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="23.8830%" y="485" width="0.0812%" height="15" fill="rgb(213,116,27)" fg:x="294" fg:w="1"/><text x="24.1330%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.1267%" y="501" width="0.0812%" height="15" fill="rgb(241,95,50)" fg:x="297" fg:w="1"/><text x="24.3767%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.2080%" y="485" width="0.0812%" height="15" fill="rgb(238,48,32)" fg:x="298" fg:w="1"/><text x="24.4580%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="24.2080%" y="469" width="0.0812%" height="15" fill="rgb(235,113,49)" fg:x="298" fg:w="1"/><text x="24.4580%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.73%)</title><rect x="23.6393%" y="565" width="0.7311%" height="15" fill="rgb(205,127,43)" fg:x="291" fg:w="9"/><text x="23.8893%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="23.9643%" y="549" width="0.4062%" height="15" fill="rgb(250,162,2)" fg:x="295" fg:w="5"/><text x="24.2143%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="24.1267%" y="533" width="0.2437%" height="15" fill="rgb(220,13,41)" fg:x="297" fg:w="3"/><text x="24.3767%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="24.1267%" y="517" width="0.2437%" height="15" fill="rgb(249,221,25)" fg:x="297" fg:w="3"/><text x="24.3767%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.2080%" y="501" width="0.1625%" height="15" fill="rgb(215,208,19)" fg:x="298" fg:w="2"/><text x="24.4580%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.2892%" y="485" width="0.0812%" height="15" fill="rgb(236,175,2)" fg:x="299" fg:w="1"/><text x="24.5392%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.2892%" y="469" width="0.0812%" height="15" fill="rgb(241,52,2)" fg:x="299" fg:w="1"/><text x="24.5392%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.06%)</title><rect x="23.4768%" y="581" width="1.0561%" height="15" fill="rgb(248,140,14)" fg:x="289" fg:w="13"/><text x="23.7268%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="24.3704%" y="565" width="0.1625%" height="15" fill="rgb(253,22,42)" fg:x="300" fg:w="2"/><text x="24.6204%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.4517%" y="549" width="0.0812%" height="15" fill="rgb(234,61,47)" fg:x="301" fg:w="1"/><text x="24.7017%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (24 samples, 1.95%)</title><rect x="22.6645%" y="629" width="1.9496%" height="15" fill="rgb(208,226,15)" fg:x="279" fg:w="24"/><text x="22.9145%" y="639.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (23 samples, 1.87%)</title><rect x="22.7457%" y="613" width="1.8684%" height="15" fill="rgb(217,221,4)" fg:x="280" fg:w="23"/><text x="22.9957%" y="623.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.14%)</title><rect x="23.4768%" y="597" width="1.1373%" height="15" fill="rgb(212,174,34)" fg:x="289" fg:w="14"/><text x="23.7268%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.5329%" y="581" width="0.0812%" height="15" fill="rgb(253,83,4)" fg:x="302" fg:w="1"/><text x="24.7829%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="24.7766%" y="453" width="0.0812%" height="15" fill="rgb(250,195,49)" fg:x="305" fg:w="1"/><text x="25.0266%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.7766%" y="437" width="0.0812%" height="15" fill="rgb(241,192,25)" fg:x="305" fg:w="1"/><text x="25.0266%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="24.7766%" y="485" width="0.1625%" height="15" fill="rgb(208,124,10)" fg:x="305" fg:w="2"/><text x="25.0266%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="24.7766%" y="469" width="0.1625%" height="15" fill="rgb(222,33,0)" fg:x="305" fg:w="2"/><text x="25.0266%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="24.8578%" y="453" width="0.0812%" height="15" fill="rgb(234,209,28)" fg:x="306" fg:w="1"/><text x="25.1078%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.8578%" y="437" width="0.0812%" height="15" fill="rgb(224,11,23)" fg:x="306" fg:w="1"/><text x="25.1078%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="25.0203%" y="437" width="0.1625%" height="15" fill="rgb(232,99,1)" fg:x="308" fg:w="2"/><text x="25.2703%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="25.1015%" y="421" width="0.0812%" height="15" fill="rgb(237,95,45)" fg:x="309" fg:w="1"/><text x="25.3515%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="24.9391%" y="469" width="0.4062%" height="15" fill="rgb(208,109,11)" fg:x="307" fg:w="5"/><text x="25.1891%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="25.0203%" y="453" width="0.3249%" height="15" fill="rgb(216,190,48)" fg:x="308" fg:w="4"/><text x="25.2703%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.1828%" y="437" width="0.1625%" height="15" fill="rgb(251,171,36)" fg:x="310" fg:w="2"/><text x="25.4328%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.1828%" y="421" width="0.1625%" height="15" fill="rgb(230,62,22)" fg:x="310" fg:w="2"/><text x="25.4328%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="25.1828%" y="405" width="0.1625%" height="15" fill="rgb(225,114,35)" fg:x="310" fg:w="2"/><text x="25.4328%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.65%)</title><rect x="24.7766%" y="501" width="0.6499%" height="15" fill="rgb(215,118,42)" fg:x="305" fg:w="8"/><text x="25.0266%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="24.9391%" y="485" width="0.4874%" height="15" fill="rgb(243,119,21)" fg:x="307" fg:w="6"/><text x="25.1891%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.3452%" y="469" width="0.0812%" height="15" fill="rgb(252,177,53)" fg:x="312" fg:w="1"/><text x="25.5952%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.81%)</title><rect x="24.7766%" y="533" width="0.8123%" height="15" fill="rgb(237,209,29)" fg:x="305" fg:w="10"/><text x="25.0266%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.81%)</title><rect x="24.7766%" y="517" width="0.8123%" height="15" fill="rgb(212,65,23)" fg:x="305" fg:w="10"/><text x="25.0266%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="25.4265%" y="501" width="0.1625%" height="15" fill="rgb(230,222,46)" fg:x="313" fg:w="2"/><text x="25.6765%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.5077%" y="485" width="0.0812%" height="15" fill="rgb(215,135,32)" fg:x="314" fg:w="1"/><text x="25.7577%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="25.5890%" y="517" width="0.0812%" height="15" fill="rgb(246,101,22)" fg:x="315" fg:w="1"/><text x="25.8390%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.14%)</title><rect x="24.6954%" y="565" width="1.1373%" height="15" fill="rgb(206,107,13)" fg:x="304" fg:w="14"/><text x="24.9454%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.14%)</title><rect x="24.6954%" y="549" width="1.1373%" height="15" fill="rgb(250,100,44)" fg:x="304" fg:w="14"/><text x="24.9454%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="25.5890%" y="533" width="0.2437%" height="15" fill="rgb(231,147,38)" fg:x="315" fg:w="3"/><text x="25.8390%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="25.6702%" y="517" width="0.1625%" height="15" fill="rgb(229,8,40)" fg:x="316" fg:w="2"/><text x="25.9202%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.8327%" y="565" width="0.0812%" height="15" fill="rgb(221,135,30)" fg:x="318" fg:w="1"/><text x="26.0827%" y="575.50"></text></g><g><title>engine::session::Session::close (94 samples, 7.64%)</title><rect x="18.3591%" y="741" width="7.6361%" height="15" fill="rgb(249,193,18)" fg:x="226" fg:w="94"/><text x="18.6091%" y="751.50">engine::se..</text></g><g><title>engine::session::state::State::close (91 samples, 7.39%)</title><rect x="18.6028%" y="725" width="7.3924%" height="15" fill="rgb(209,133,39)" fg:x="229" fg:w="91"/><text x="18.8528%" y="735.50">engine::se..</text></g><g><title>engine::session::state::State::flush_entities (91 samples, 7.39%)</title><rect x="18.6028%" y="709" width="7.3924%" height="15" fill="rgb(232,100,14)" fg:x="229" fg:w="91"/><text x="18.8528%" y="719.50">engine::se..</text></g><g><title>core::iter::adapters::try_process (87 samples, 7.07%)</title><rect x="18.9277%" y="693" width="7.0674%" height="15" fill="rgb(224,185,1)" fg:x="233" fg:w="87"/><text x="19.1777%" y="703.50">core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (87 samples, 7.07%)</title><rect x="18.9277%" y="677" width="7.0674%" height="15" fill="rgb(223,139,8)" fg:x="233" fg:w="87"/><text x="19.1777%" y="687.50">&lt;alloc::v..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (85 samples, 6.90%)</title><rect x="19.0902%" y="661" width="6.9050%" height="15" fill="rgb(232,213,38)" fg:x="235" fg:w="85"/><text x="19.3402%" y="671.50">engine::s..</text></g><g><title>kernel::model::any_entity_changes (56 samples, 4.55%)</title><rect x="21.4460%" y="645" width="4.5491%" height="15" fill="rgb(207,94,22)" fg:x="264" fg:w="56"/><text x="21.6960%" y="655.50">kerne..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (17 samples, 1.38%)</title><rect x="24.6141%" y="629" width="1.3810%" height="15" fill="rgb(219,183,54)" fg:x="303" fg:w="17"/><text x="24.8641%" y="639.50"></text></g><g><title>serde_json::de::from_trait (17 samples, 1.38%)</title><rect x="24.6141%" y="613" width="1.3810%" height="15" fill="rgb(216,185,54)" fg:x="303" fg:w="17"/><text x="24.8641%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (17 samples, 1.38%)</title><rect x="24.6141%" y="597" width="1.3810%" height="15" fill="rgb(254,217,39)" fg:x="303" fg:w="17"/><text x="24.8641%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 1.38%)</title><rect x="24.6141%" y="581" width="1.3810%" height="15" fill="rgb(240,178,23)" fg:x="303" fg:w="17"/><text x="24.8641%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.9139%" y="565" width="0.0812%" height="15" fill="rgb(218,11,47)" fg:x="319" fg:w="1"/><text x="26.1639%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.1576%" y="693" width="0.0812%" height="15" fill="rgb(218,51,51)" fg:x="322" fg:w="1"/><text x="26.4076%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="26.2388%" y="373" width="0.0812%" height="15" fill="rgb(238,126,27)" fg:x="323" fg:w="1"/><text x="26.4888%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="26.2388%" y="357" width="0.0812%" height="15" fill="rgb(249,202,22)" fg:x="323" fg:w="1"/><text x="26.4888%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.2388%" y="341" width="0.0812%" height="15" fill="rgb(254,195,49)" fg:x="323" fg:w="1"/><text x="26.4888%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="26.2388%" y="325" width="0.0812%" height="15" fill="rgb(208,123,14)" fg:x="323" fg:w="1"/><text x="26.4888%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.2388%" y="309" width="0.0812%" height="15" fill="rgb(224,200,8)" fg:x="323" fg:w="1"/><text x="26.4888%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="26.2388%" y="293" width="0.0812%" height="15" fill="rgb(217,61,36)" fg:x="323" fg:w="1"/><text x="26.4888%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="26.2388%" y="277" width="0.0812%" height="15" fill="rgb(206,35,45)" fg:x="323" fg:w="1"/><text x="26.4888%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="26.2388%" y="261" width="0.0812%" height="15" fill="rgb(217,65,33)" fg:x="323" fg:w="1"/><text x="26.4888%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="26.2388%" y="245" width="0.0812%" height="15" fill="rgb(222,158,48)" fg:x="323" fg:w="1"/><text x="26.4888%" y="255.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="26.2388%" y="549" width="0.1625%" height="15" fill="rgb(254,2,54)" fg:x="323" fg:w="2"/><text x="26.4888%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="26.2388%" y="533" width="0.1625%" height="15" fill="rgb(250,143,38)" fg:x="323" fg:w="2"/><text x="26.4888%" y="543.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="26.2388%" y="517" width="0.1625%" height="15" fill="rgb(248,25,0)" fg:x="323" fg:w="2"/><text x="26.4888%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="26.2388%" y="501" width="0.1625%" height="15" fill="rgb(206,152,27)" fg:x="323" fg:w="2"/><text x="26.4888%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (2 samples, 0.16%)</title><rect x="26.2388%" y="485" width="0.1625%" height="15" fill="rgb(240,77,30)" fg:x="323" fg:w="2"/><text x="26.4888%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="26.2388%" y="469" width="0.1625%" height="15" fill="rgb(231,5,3)" fg:x="323" fg:w="2"/><text x="26.4888%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="26.2388%" y="453" width="0.1625%" height="15" fill="rgb(207,226,32)" fg:x="323" fg:w="2"/><text x="26.4888%" y="463.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="26.2388%" y="437" width="0.1625%" height="15" fill="rgb(222,207,47)" fg:x="323" fg:w="2"/><text x="26.4888%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="26.2388%" y="421" width="0.1625%" height="15" fill="rgb(229,115,45)" fg:x="323" fg:w="2"/><text x="26.4888%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="26.2388%" y="405" width="0.1625%" height="15" fill="rgb(224,191,6)" fg:x="323" fg:w="2"/><text x="26.4888%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="26.2388%" y="389" width="0.1625%" height="15" fill="rgb(230,227,24)" fg:x="323" fg:w="2"/><text x="26.4888%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="26.3201%" y="373" width="0.0812%" height="15" fill="rgb(228,80,19)" fg:x="324" fg:w="1"/><text x="26.5701%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.4013%" y="533" width="0.0812%" height="15" fill="rgb(247,229,0)" fg:x="325" fg:w="1"/><text x="26.6513%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.4013%" y="517" width="0.0812%" height="15" fill="rgb(237,194,15)" fg:x="325" fg:w="1"/><text x="26.6513%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="26.4013%" y="501" width="0.0812%" height="15" fill="rgb(219,203,20)" fg:x="325" fg:w="1"/><text x="26.6513%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="26.4013%" y="485" width="0.0812%" height="15" fill="rgb(234,128,8)" fg:x="325" fg:w="1"/><text x="26.6513%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="26.4013%" y="469" width="0.0812%" height="15" fill="rgb(248,202,8)" fg:x="325" fg:w="1"/><text x="26.6513%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="26.4013%" y="453" width="0.0812%" height="15" fill="rgb(206,104,37)" fg:x="325" fg:w="1"/><text x="26.6513%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="26.4013%" y="437" width="0.0812%" height="15" fill="rgb(223,8,27)" fg:x="325" fg:w="1"/><text x="26.6513%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.32%)</title><rect x="26.2388%" y="693" width="0.3249%" height="15" fill="rgb(216,217,28)" fg:x="323" fg:w="4"/><text x="26.4888%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (4 samples, 0.32%)</title><rect x="26.2388%" y="677" width="0.3249%" height="15" fill="rgb(249,199,1)" fg:x="323" fg:w="4"/><text x="26.4888%" y="687.50"></text></g><g><title>core::fmt::write (4 samples, 0.32%)</title><rect x="26.2388%" y="661" width="0.3249%" height="15" fill="rgb(240,85,17)" fg:x="323" fg:w="4"/><text x="26.4888%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.32%)</title><rect x="26.2388%" y="645" width="0.3249%" height="15" fill="rgb(206,108,45)" fg:x="323" fg:w="4"/><text x="26.4888%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (4 samples, 0.32%)</title><rect x="26.2388%" y="629" width="0.3249%" height="15" fill="rgb(245,210,41)" fg:x="323" fg:w="4"/><text x="26.4888%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (4 samples, 0.32%)</title><rect x="26.2388%" y="613" width="0.3249%" height="15" fill="rgb(206,13,37)" fg:x="323" fg:w="4"/><text x="26.4888%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (4 samples, 0.32%)</title><rect x="26.2388%" y="597" width="0.3249%" height="15" fill="rgb(250,61,18)" fg:x="323" fg:w="4"/><text x="26.4888%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (4 samples, 0.32%)</title><rect x="26.2388%" y="581" width="0.3249%" height="15" fill="rgb(235,172,48)" fg:x="323" fg:w="4"/><text x="26.4888%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (4 samples, 0.32%)</title><rect x="26.2388%" y="565" width="0.3249%" height="15" fill="rgb(249,201,17)" fg:x="323" fg:w="4"/><text x="26.4888%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="26.4013%" y="549" width="0.1625%" height="15" fill="rgb(219,208,6)" fg:x="325" fg:w="2"/><text x="26.6513%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="26.4825%" y="533" width="0.0812%" height="15" fill="rgb(248,31,23)" fg:x="326" fg:w="1"/><text x="26.7325%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="26.4825%" y="517" width="0.0812%" height="15" fill="rgb(245,15,42)" fg:x="326" fg:w="1"/><text x="26.7325%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="26.4825%" y="501" width="0.0812%" height="15" fill="rgb(222,217,39)" fg:x="326" fg:w="1"/><text x="26.7325%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="26.4825%" y="485" width="0.0812%" height="15" fill="rgb(210,219,27)" fg:x="326" fg:w="1"/><text x="26.7325%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="26.4825%" y="469" width="0.0812%" height="15" fill="rgb(252,166,36)" fg:x="326" fg:w="1"/><text x="26.7325%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5638%" y="677" width="0.0812%" height="15" fill="rgb(245,132,34)" fg:x="327" fg:w="1"/><text x="26.8138%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.6450%" y="549" width="0.0812%" height="15" fill="rgb(236,54,3)" fg:x="328" fg:w="1"/><text x="26.8950%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.6450%" y="533" width="0.0812%" height="15" fill="rgb(241,173,43)" fg:x="328" fg:w="1"/><text x="26.8950%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.6450%" y="517" width="0.0812%" height="15" fill="rgb(215,190,9)" fg:x="328" fg:w="1"/><text x="26.8950%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="26.6450%" y="501" width="0.0812%" height="15" fill="rgb(242,101,16)" fg:x="328" fg:w="1"/><text x="26.8950%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="26.6450%" y="485" width="0.0812%" height="15" fill="rgb(223,190,21)" fg:x="328" fg:w="1"/><text x="26.8950%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="26.6450%" y="469" width="0.0812%" height="15" fill="rgb(215,228,25)" fg:x="328" fg:w="1"/><text x="26.8950%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="26.6450%" y="453" width="0.0812%" height="15" fill="rgb(225,36,22)" fg:x="328" fg:w="1"/><text x="26.8950%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="26.6450%" y="437" width="0.0812%" height="15" fill="rgb(251,106,46)" fg:x="328" fg:w="1"/><text x="26.8950%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="26.6450%" y="565" width="0.1625%" height="15" fill="rgb(208,90,1)" fg:x="328" fg:w="2"/><text x="26.8950%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.7262%" y="549" width="0.0812%" height="15" fill="rgb(243,10,4)" fg:x="329" fg:w="1"/><text x="26.9762%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.7262%" y="533" width="0.0812%" height="15" fill="rgb(212,137,27)" fg:x="329" fg:w="1"/><text x="26.9762%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.7262%" y="517" width="0.0812%" height="15" fill="rgb(231,220,49)" fg:x="329" fg:w="1"/><text x="26.9762%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="26.8075%" y="501" width="0.1625%" height="15" fill="rgb(237,96,20)" fg:x="330" fg:w="2"/><text x="27.0575%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="26.8075%" y="485" width="0.1625%" height="15" fill="rgb(239,229,30)" fg:x="330" fg:w="2"/><text x="27.0575%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.8887%" y="469" width="0.0812%" height="15" fill="rgb(219,65,33)" fg:x="331" fg:w="1"/><text x="27.1387%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.8887%" y="453" width="0.0812%" height="15" fill="rgb(243,134,7)" fg:x="331" fg:w="1"/><text x="27.1387%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.8887%" y="437" width="0.0812%" height="15" fill="rgb(216,177,54)" fg:x="331" fg:w="1"/><text x="27.1387%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.8887%" y="421" width="0.0812%" height="15" fill="rgb(211,160,20)" fg:x="331" fg:w="1"/><text x="27.1387%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="26.9699%" y="501" width="0.0812%" height="15" fill="rgb(239,85,39)" fg:x="332" fg:w="1"/><text x="27.2199%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.9699%" y="485" width="0.0812%" height="15" fill="rgb(232,125,22)" fg:x="332" fg:w="1"/><text x="27.2199%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.9699%" y="469" width="0.0812%" height="15" fill="rgb(244,57,34)" fg:x="332" fg:w="1"/><text x="27.2199%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.9699%" y="453" width="0.0812%" height="15" fill="rgb(214,203,32)" fg:x="332" fg:w="1"/><text x="27.2199%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.9699%" y="437" width="0.0812%" height="15" fill="rgb(207,58,43)" fg:x="332" fg:w="1"/><text x="27.2199%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.0512%" y="421" width="0.0812%" height="15" fill="rgb(215,193,15)" fg:x="333" fg:w="1"/><text x="27.3012%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="27.1324%" y="309" width="0.2437%" height="15" fill="rgb(232,15,44)" fg:x="334" fg:w="3"/><text x="27.3824%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="27.1324%" y="293" width="0.2437%" height="15" fill="rgb(212,3,48)" fg:x="334" fg:w="3"/><text x="27.3824%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="27.2949%" y="277" width="0.0812%" height="15" fill="rgb(218,128,7)" fg:x="336" fg:w="1"/><text x="27.5449%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.2949%" y="261" width="0.0812%" height="15" fill="rgb(226,216,39)" fg:x="336" fg:w="1"/><text x="27.5449%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.2949%" y="245" width="0.0812%" height="15" fill="rgb(243,47,51)" fg:x="336" fg:w="1"/><text x="27.5449%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="27.2949%" y="229" width="0.0812%" height="15" fill="rgb(241,183,40)" fg:x="336" fg:w="1"/><text x="27.5449%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="27.1324%" y="405" width="0.3249%" height="15" fill="rgb(231,217,32)" fg:x="334" fg:w="4"/><text x="27.3824%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="27.1324%" y="389" width="0.3249%" height="15" fill="rgb(229,61,38)" fg:x="334" fg:w="4"/><text x="27.3824%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (4 samples, 0.32%)</title><rect x="27.1324%" y="373" width="0.3249%" height="15" fill="rgb(225,210,5)" fg:x="334" fg:w="4"/><text x="27.3824%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="27.1324%" y="357" width="0.3249%" height="15" fill="rgb(231,79,45)" fg:x="334" fg:w="4"/><text x="27.3824%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="27.1324%" y="341" width="0.3249%" height="15" fill="rgb(224,100,7)" fg:x="334" fg:w="4"/><text x="27.3824%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="27.1324%" y="325" width="0.3249%" height="15" fill="rgb(241,198,18)" fg:x="334" fg:w="4"/><text x="27.3824%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.3761%" y="309" width="0.0812%" height="15" fill="rgb(252,97,53)" fg:x="337" fg:w="1"/><text x="27.6261%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.3761%" y="293" width="0.0812%" height="15" fill="rgb(220,88,7)" fg:x="337" fg:w="1"/><text x="27.6261%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="27.4574%" y="405" width="0.0812%" height="15" fill="rgb(213,176,14)" fg:x="338" fg:w="1"/><text x="27.7074%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="27.4574%" y="389" width="0.0812%" height="15" fill="rgb(246,73,7)" fg:x="338" fg:w="1"/><text x="27.7074%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="27.4574%" y="373" width="0.0812%" height="15" fill="rgb(245,64,36)" fg:x="338" fg:w="1"/><text x="27.7074%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.4574%" y="357" width="0.0812%" height="15" fill="rgb(245,80,10)" fg:x="338" fg:w="1"/><text x="27.7074%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="27.5386%" y="357" width="0.0812%" height="15" fill="rgb(232,107,50)" fg:x="339" fg:w="1"/><text x="27.7886%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="27.5386%" y="341" width="0.0812%" height="15" fill="rgb(253,3,0)" fg:x="339" fg:w="1"/><text x="27.7886%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.5386%" y="325" width="0.0812%" height="15" fill="rgb(212,99,53)" fg:x="339" fg:w="1"/><text x="27.7886%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.5386%" y="309" width="0.0812%" height="15" fill="rgb(249,111,54)" fg:x="339" fg:w="1"/><text x="27.7886%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="27.5386%" y="293" width="0.0812%" height="15" fill="rgb(249,55,30)" fg:x="339" fg:w="1"/><text x="27.7886%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.5386%" y="277" width="0.0812%" height="15" fill="rgb(237,47,42)" fg:x="339" fg:w="1"/><text x="27.7886%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.5386%" y="261" width="0.0812%" height="15" fill="rgb(211,20,18)" fg:x="339" fg:w="1"/><text x="27.7886%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="27.5386%" y="245" width="0.0812%" height="15" fill="rgb(231,203,46)" fg:x="339" fg:w="1"/><text x="27.7886%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.5386%" y="229" width="0.0812%" height="15" fill="rgb(237,142,3)" fg:x="339" fg:w="1"/><text x="27.7886%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.5386%" y="213" width="0.0812%" height="15" fill="rgb(241,107,1)" fg:x="339" fg:w="1"/><text x="27.7886%" y="223.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.65%)</title><rect x="27.0512%" y="501" width="0.6499%" height="15" fill="rgb(229,83,13)" fg:x="333" fg:w="8"/><text x="27.3012%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.65%)</title><rect x="27.0512%" y="485" width="0.6499%" height="15" fill="rgb(241,91,40)" fg:x="333" fg:w="8"/><text x="27.3012%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="27.0512%" y="469" width="0.6499%" height="15" fill="rgb(225,3,45)" fg:x="333" fg:w="8"/><text x="27.3012%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.65%)</title><rect x="27.0512%" y="453" width="0.6499%" height="15" fill="rgb(244,223,14)" fg:x="333" fg:w="8"/><text x="27.3012%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="27.0512%" y="437" width="0.6499%" height="15" fill="rgb(224,124,37)" fg:x="333" fg:w="8"/><text x="27.3012%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (7 samples, 0.57%)</title><rect x="27.1324%" y="421" width="0.5686%" height="15" fill="rgb(251,171,30)" fg:x="334" fg:w="7"/><text x="27.3824%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="27.5386%" y="405" width="0.1625%" height="15" fill="rgb(236,46,54)" fg:x="339" fg:w="2"/><text x="27.7886%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="27.5386%" y="389" width="0.1625%" height="15" fill="rgb(245,213,5)" fg:x="339" fg:w="2"/><text x="27.7886%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="27.5386%" y="373" width="0.1625%" height="15" fill="rgb(230,144,27)" fg:x="339" fg:w="2"/><text x="27.7886%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.6198%" y="357" width="0.0812%" height="15" fill="rgb(220,86,6)" fg:x="340" fg:w="1"/><text x="27.8698%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.6198%" y="341" width="0.0812%" height="15" fill="rgb(240,20,13)" fg:x="340" fg:w="1"/><text x="27.8698%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="27.6198%" y="325" width="0.0812%" height="15" fill="rgb(217,89,34)" fg:x="340" fg:w="1"/><text x="27.8698%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.6198%" y="309" width="0.0812%" height="15" fill="rgb(229,13,5)" fg:x="340" fg:w="1"/><text x="27.8698%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.6198%" y="293" width="0.0812%" height="15" fill="rgb(244,67,35)" fg:x="340" fg:w="1"/><text x="27.8698%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.6198%" y="277" width="0.0812%" height="15" fill="rgb(221,40,2)" fg:x="340" fg:w="1"/><text x="27.8698%" y="287.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="27.6198%" y="261" width="0.0812%" height="15" fill="rgb(237,157,21)" fg:x="340" fg:w="1"/><text x="27.8698%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.7011%" y="373" width="0.0812%" height="15" fill="rgb(222,94,11)" fg:x="341" fg:w="1"/><text x="27.9511%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="27.7011%" y="437" width="0.1625%" height="15" fill="rgb(249,113,6)" fg:x="341" fg:w="2"/><text x="27.9511%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="27.7011%" y="421" width="0.1625%" height="15" fill="rgb(238,137,36)" fg:x="341" fg:w="2"/><text x="27.9511%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="27.7011%" y="405" width="0.1625%" height="15" fill="rgb(210,102,26)" fg:x="341" fg:w="2"/><text x="27.9511%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="27.7011%" y="389" width="0.1625%" height="15" fill="rgb(218,30,30)" fg:x="341" fg:w="2"/><text x="27.9511%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.7823%" y="373" width="0.0812%" height="15" fill="rgb(214,67,26)" fg:x="342" fg:w="1"/><text x="28.0323%" y="383.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (16 samples, 1.30%)</title><rect x="26.6450%" y="597" width="1.2998%" height="15" fill="rgb(251,9,53)" fg:x="328" fg:w="16"/><text x="26.8950%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (16 samples, 1.30%)</title><rect x="26.6450%" y="581" width="1.2998%" height="15" fill="rgb(228,204,25)" fg:x="328" fg:w="16"/><text x="26.8950%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (14 samples, 1.14%)</title><rect x="26.8075%" y="565" width="1.1373%" height="15" fill="rgb(207,153,8)" fg:x="330" fg:w="14"/><text x="27.0575%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (14 samples, 1.14%)</title><rect x="26.8075%" y="549" width="1.1373%" height="15" fill="rgb(242,9,16)" fg:x="330" fg:w="14"/><text x="27.0575%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.14%)</title><rect x="26.8075%" y="533" width="1.1373%" height="15" fill="rgb(217,211,10)" fg:x="330" fg:w="14"/><text x="27.0575%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.14%)</title><rect x="26.8075%" y="517" width="1.1373%" height="15" fill="rgb(219,228,52)" fg:x="330" fg:w="14"/><text x="27.0575%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="27.7011%" y="501" width="0.2437%" height="15" fill="rgb(231,92,29)" fg:x="341" fg:w="3"/><text x="27.9511%" y="511.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="27.7011%" y="485" width="0.2437%" height="15" fill="rgb(232,8,23)" fg:x="341" fg:w="3"/><text x="27.9511%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="27.7011%" y="469" width="0.2437%" height="15" fill="rgb(216,211,34)" fg:x="341" fg:w="3"/><text x="27.9511%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="27.7011%" y="453" width="0.2437%" height="15" fill="rgb(236,151,0)" fg:x="341" fg:w="3"/><text x="27.9511%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.8635%" y="437" width="0.0812%" height="15" fill="rgb(209,168,3)" fg:x="343" fg:w="1"/><text x="28.1135%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.9448%" y="533" width="0.0812%" height="15" fill="rgb(208,129,28)" fg:x="344" fg:w="1"/><text x="28.1948%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.1072%" y="357" width="0.0812%" height="15" fill="rgb(229,78,22)" fg:x="346" fg:w="1"/><text x="28.3572%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="28.1885%" y="357" width="0.1625%" height="15" fill="rgb(228,187,13)" fg:x="347" fg:w="2"/><text x="28.4385%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="28.1885%" y="341" width="0.1625%" height="15" fill="rgb(240,119,24)" fg:x="347" fg:w="2"/><text x="28.4385%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.2697%" y="325" width="0.0812%" height="15" fill="rgb(209,194,42)" fg:x="348" fg:w="1"/><text x="28.5197%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="28.3509%" y="309" width="0.0812%" height="15" fill="rgb(247,200,46)" fg:x="349" fg:w="1"/><text x="28.6009%" y="319.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.41%)</title><rect x="28.1072%" y="405" width="0.4062%" height="15" fill="rgb(218,76,16)" fg:x="346" fg:w="5"/><text x="28.3572%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (5 samples, 0.41%)</title><rect x="28.1072%" y="389" width="0.4062%" height="15" fill="rgb(225,21,48)" fg:x="346" fg:w="5"/><text x="28.3572%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="28.1072%" y="373" width="0.4062%" height="15" fill="rgb(239,223,50)" fg:x="346" fg:w="5"/><text x="28.3572%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="28.3509%" y="357" width="0.1625%" height="15" fill="rgb(244,45,21)" fg:x="349" fg:w="2"/><text x="28.6009%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="28.3509%" y="341" width="0.1625%" height="15" fill="rgb(232,33,43)" fg:x="349" fg:w="2"/><text x="28.6009%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="28.3509%" y="325" width="0.1625%" height="15" fill="rgb(209,8,3)" fg:x="349" fg:w="2"/><text x="28.6009%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="28.4322%" y="309" width="0.0812%" height="15" fill="rgb(214,25,53)" fg:x="350" fg:w="1"/><text x="28.6822%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="28.4322%" y="293" width="0.0812%" height="15" fill="rgb(254,186,54)" fg:x="350" fg:w="1"/><text x="28.6822%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4322%" y="277" width="0.0812%" height="15" fill="rgb(208,174,49)" fg:x="350" fg:w="1"/><text x="28.6822%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (6 samples, 0.49%)</title><rect x="28.1072%" y="421" width="0.4874%" height="15" fill="rgb(233,191,51)" fg:x="346" fg:w="6"/><text x="28.3572%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="28.5134%" y="405" width="0.0812%" height="15" fill="rgb(222,134,10)" fg:x="351" fg:w="1"/><text x="28.7634%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="28.8383%" y="389" width="0.0812%" height="15" fill="rgb(230,226,20)" fg:x="355" fg:w="1"/><text x="29.0883%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="28.8383%" y="373" width="0.0812%" height="15" fill="rgb(251,111,25)" fg:x="355" fg:w="1"/><text x="29.0883%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.8383%" y="357" width="0.0812%" height="15" fill="rgb(224,40,46)" fg:x="355" fg:w="1"/><text x="29.0883%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="28.8383%" y="341" width="0.0812%" height="15" fill="rgb(236,108,47)" fg:x="355" fg:w="1"/><text x="29.0883%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.0008%" y="357" width="0.1625%" height="15" fill="rgb(234,93,0)" fg:x="357" fg:w="2"/><text x="29.2508%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.0008%" y="341" width="0.1625%" height="15" fill="rgb(224,213,32)" fg:x="357" fg:w="2"/><text x="29.2508%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.0008%" y="325" width="0.1625%" height="15" fill="rgb(251,11,48)" fg:x="357" fg:w="2"/><text x="29.2508%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.0820%" y="309" width="0.0812%" height="15" fill="rgb(236,173,5)" fg:x="358" fg:w="1"/><text x="29.3320%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.0820%" y="293" width="0.0812%" height="15" fill="rgb(230,95,12)" fg:x="358" fg:w="1"/><text x="29.3320%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.0820%" y="277" width="0.0812%" height="15" fill="rgb(232,209,1)" fg:x="358" fg:w="1"/><text x="29.3320%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.0820%" y="261" width="0.0812%" height="15" fill="rgb(232,6,1)" fg:x="358" fg:w="1"/><text x="29.3320%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.0820%" y="245" width="0.0812%" height="15" fill="rgb(210,224,50)" fg:x="358" fg:w="1"/><text x="29.3320%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="29.0820%" y="229" width="0.0812%" height="15" fill="rgb(228,127,35)" fg:x="358" fg:w="1"/><text x="29.3320%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="29.0820%" y="213" width="0.0812%" height="15" fill="rgb(245,102,45)" fg:x="358" fg:w="1"/><text x="29.3320%" y="223.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="28.9196%" y="389" width="0.3249%" height="15" fill="rgb(214,1,49)" fg:x="356" fg:w="4"/><text x="29.1696%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="29.0008%" y="373" width="0.2437%" height="15" fill="rgb(226,163,40)" fg:x="357" fg:w="3"/><text x="29.2508%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.1633%" y="357" width="0.0812%" height="15" fill="rgb(239,212,28)" fg:x="359" fg:w="1"/><text x="29.4133%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.1633%" y="341" width="0.0812%" height="15" fill="rgb(220,20,13)" fg:x="359" fg:w="1"/><text x="29.4133%" y="351.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="29.2445%" y="389" width="0.1625%" height="15" fill="rgb(210,164,35)" fg:x="360" fg:w="2"/><text x="29.4945%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="29.2445%" y="373" width="0.1625%" height="15" fill="rgb(248,109,41)" fg:x="360" fg:w="2"/><text x="29.4945%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="29.2445%" y="357" width="0.1625%" height="15" fill="rgb(238,23,50)" fg:x="360" fg:w="2"/><text x="29.4945%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="29.2445%" y="341" width="0.1625%" height="15" fill="rgb(211,48,49)" fg:x="360" fg:w="2"/><text x="29.4945%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.4070%" y="357" width="0.1625%" height="15" fill="rgb(223,36,21)" fg:x="362" fg:w="2"/><text x="29.6570%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.4070%" y="341" width="0.1625%" height="15" fill="rgb(207,123,46)" fg:x="362" fg:w="2"/><text x="29.6570%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="29.4070%" y="373" width="0.2437%" height="15" fill="rgb(240,218,32)" fg:x="362" fg:w="3"/><text x="29.6570%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.5695%" y="357" width="0.0812%" height="15" fill="rgb(252,5,43)" fg:x="364" fg:w="1"/><text x="29.8195%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.5695%" y="341" width="0.0812%" height="15" fill="rgb(252,84,19)" fg:x="364" fg:w="1"/><text x="29.8195%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.5695%" y="325" width="0.0812%" height="15" fill="rgb(243,152,39)" fg:x="364" fg:w="1"/><text x="29.8195%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.5695%" y="309" width="0.0812%" height="15" fill="rgb(234,160,15)" fg:x="364" fg:w="1"/><text x="29.8195%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.5695%" y="293" width="0.0812%" height="15" fill="rgb(237,34,20)" fg:x="364" fg:w="1"/><text x="29.8195%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.5695%" y="277" width="0.0812%" height="15" fill="rgb(229,97,13)" fg:x="364" fg:w="1"/><text x="29.8195%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.5695%" y="261" width="0.0812%" height="15" fill="rgb(234,71,50)" fg:x="364" fg:w="1"/><text x="29.8195%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="29.5695%" y="245" width="0.0812%" height="15" fill="rgb(253,155,4)" fg:x="364" fg:w="1"/><text x="29.8195%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="29.5695%" y="229" width="0.0812%" height="15" fill="rgb(222,185,37)" fg:x="364" fg:w="1"/><text x="29.8195%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="29.5695%" y="213" width="0.0812%" height="15" fill="rgb(251,177,13)" fg:x="364" fg:w="1"/><text x="29.8195%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="29.5695%" y="197" width="0.0812%" height="15" fill="rgb(250,179,40)" fg:x="364" fg:w="1"/><text x="29.8195%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5695%" y="181" width="0.0812%" height="15" fill="rgb(242,44,2)" fg:x="364" fg:w="1"/><text x="29.8195%" y="191.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.6507%" y="309" width="0.0812%" height="15" fill="rgb(216,177,13)" fg:x="365" fg:w="1"/><text x="29.9007%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.7319%" y="309" width="0.0812%" height="15" fill="rgb(216,106,43)" fg:x="366" fg:w="1"/><text x="29.9819%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.49%)</title><rect x="29.4070%" y="389" width="0.4874%" height="15" fill="rgb(216,183,2)" fg:x="362" fg:w="6"/><text x="29.6570%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="29.6507%" y="373" width="0.2437%" height="15" fill="rgb(249,75,3)" fg:x="365" fg:w="3"/><text x="29.9007%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="29.6507%" y="357" width="0.2437%" height="15" fill="rgb(219,67,39)" fg:x="365" fg:w="3"/><text x="29.9007%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="29.6507%" y="341" width="0.2437%" height="15" fill="rgb(253,228,2)" fg:x="365" fg:w="3"/><text x="29.9007%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="29.6507%" y="325" width="0.2437%" height="15" fill="rgb(235,138,27)" fg:x="365" fg:w="3"/><text x="29.9007%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.8132%" y="309" width="0.0812%" height="15" fill="rgb(236,97,51)" fg:x="367" fg:w="1"/><text x="30.0632%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.8132%" y="293" width="0.0812%" height="15" fill="rgb(240,80,30)" fg:x="367" fg:w="1"/><text x="30.0632%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.8944%" y="357" width="0.0812%" height="15" fill="rgb(230,178,19)" fg:x="368" fg:w="1"/><text x="30.1444%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.8944%" y="341" width="0.0812%" height="15" fill="rgb(210,190,27)" fg:x="368" fg:w="1"/><text x="30.1444%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.8944%" y="325" width="0.0812%" height="15" fill="rgb(222,107,31)" fg:x="368" fg:w="1"/><text x="30.1444%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.8944%" y="309" width="0.0812%" height="15" fill="rgb(216,127,34)" fg:x="368" fg:w="1"/><text x="30.1444%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.8944%" y="293" width="0.0812%" height="15" fill="rgb(234,116,52)" fg:x="368" fg:w="1"/><text x="30.1444%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.8944%" y="277" width="0.0812%" height="15" fill="rgb(222,124,15)" fg:x="368" fg:w="1"/><text x="30.1444%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.8944%" y="261" width="0.0812%" height="15" fill="rgb(231,179,28)" fg:x="368" fg:w="1"/><text x="30.1444%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.8944%" y="245" width="0.0812%" height="15" fill="rgb(226,93,45)" fg:x="368" fg:w="1"/><text x="30.1444%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.8944%" y="229" width="0.0812%" height="15" fill="rgb(215,8,51)" fg:x="368" fg:w="1"/><text x="30.1444%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="29.8944%" y="213" width="0.0812%" height="15" fill="rgb(223,106,5)" fg:x="368" fg:w="1"/><text x="30.1444%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="29.8944%" y="197" width="0.0812%" height="15" fill="rgb(250,191,5)" fg:x="368" fg:w="1"/><text x="30.1444%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="29.8944%" y="181" width="0.0812%" height="15" fill="rgb(242,132,44)" fg:x="368" fg:w="1"/><text x="30.1444%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="29.8944%" y="165" width="0.0812%" height="15" fill="rgb(251,152,29)" fg:x="368" fg:w="1"/><text x="30.1444%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.8944%" y="149" width="0.0812%" height="15" fill="rgb(218,179,5)" fg:x="368" fg:w="1"/><text x="30.1444%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.9756%" y="293" width="0.0812%" height="15" fill="rgb(227,67,19)" fg:x="369" fg:w="1"/><text x="30.2256%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="29.9756%" y="277" width="0.0812%" height="15" fill="rgb(233,119,31)" fg:x="369" fg:w="1"/><text x="30.2256%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="29.8944%" y="373" width="0.2437%" height="15" fill="rgb(241,120,22)" fg:x="368" fg:w="3"/><text x="30.1444%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="29.9756%" y="357" width="0.1625%" height="15" fill="rgb(224,102,30)" fg:x="369" fg:w="2"/><text x="30.2256%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.9756%" y="341" width="0.1625%" height="15" fill="rgb(210,164,37)" fg:x="369" fg:w="2"/><text x="30.2256%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="29.9756%" y="325" width="0.1625%" height="15" fill="rgb(226,191,16)" fg:x="369" fg:w="2"/><text x="30.2256%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.9756%" y="309" width="0.1625%" height="15" fill="rgb(214,40,45)" fg:x="369" fg:w="2"/><text x="30.2256%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="30.0569%" y="293" width="0.0812%" height="15" fill="rgb(244,29,26)" fg:x="370" fg:w="1"/><text x="30.3069%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.0569%" y="277" width="0.0812%" height="15" fill="rgb(216,16,5)" fg:x="370" fg:w="1"/><text x="30.3069%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="30.0569%" y="261" width="0.0812%" height="15" fill="rgb(249,76,35)" fg:x="370" fg:w="1"/><text x="30.3069%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="29.8944%" y="389" width="0.3249%" height="15" fill="rgb(207,11,44)" fg:x="368" fg:w="4"/><text x="30.1444%" y="399.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="30.1381%" y="373" width="0.0812%" height="15" fill="rgb(228,190,49)" fg:x="371" fg:w="1"/><text x="30.3881%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="30.2193%" y="389" width="0.0812%" height="15" fill="rgb(214,173,12)" fg:x="372" fg:w="1"/><text x="30.4693%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="30.3006%" y="389" width="0.0812%" height="15" fill="rgb(218,26,35)" fg:x="373" fg:w="1"/><text x="30.5506%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.3006%" y="373" width="0.0812%" height="15" fill="rgb(220,200,19)" fg:x="373" fg:w="1"/><text x="30.5506%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="30.3818%" y="341" width="0.0812%" height="15" fill="rgb(239,95,49)" fg:x="374" fg:w="1"/><text x="30.6318%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="30.3818%" y="325" width="0.0812%" height="15" fill="rgb(235,85,53)" fg:x="374" fg:w="1"/><text x="30.6318%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="30.3818%" y="309" width="0.0812%" height="15" fill="rgb(233,133,31)" fg:x="374" fg:w="1"/><text x="30.6318%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="30.3818%" y="293" width="0.0812%" height="15" fill="rgb(218,25,20)" fg:x="374" fg:w="1"/><text x="30.6318%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="30.4630%" y="309" width="0.0812%" height="15" fill="rgb(252,210,38)" fg:x="375" fg:w="1"/><text x="30.7130%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.4630%" y="293" width="0.0812%" height="15" fill="rgb(242,134,21)" fg:x="375" fg:w="1"/><text x="30.7130%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.4630%" y="277" width="0.0812%" height="15" fill="rgb(213,28,48)" fg:x="375" fg:w="1"/><text x="30.7130%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="30.4630%" y="261" width="0.0812%" height="15" fill="rgb(250,196,2)" fg:x="375" fg:w="1"/><text x="30.7130%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="30.6255%" y="245" width="0.0812%" height="15" fill="rgb(227,5,17)" fg:x="377" fg:w="1"/><text x="30.8755%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="30.5443%" y="309" width="0.3249%" height="15" fill="rgb(221,226,24)" fg:x="376" fg:w="4"/><text x="30.7943%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="30.5443%" y="293" width="0.3249%" height="15" fill="rgb(211,5,48)" fg:x="376" fg:w="4"/><text x="30.7943%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="30.5443%" y="277" width="0.3249%" height="15" fill="rgb(219,150,6)" fg:x="376" fg:w="4"/><text x="30.7943%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="30.5443%" y="261" width="0.3249%" height="15" fill="rgb(251,46,16)" fg:x="376" fg:w="4"/><text x="30.7943%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="30.7067%" y="245" width="0.1625%" height="15" fill="rgb(220,204,40)" fg:x="378" fg:w="2"/><text x="30.9567%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.7880%" y="229" width="0.0812%" height="15" fill="rgb(211,85,2)" fg:x="379" fg:w="1"/><text x="31.0380%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="30.8692%" y="277" width="0.0812%" height="15" fill="rgb(229,17,7)" fg:x="380" fg:w="1"/><text x="31.1192%" y="287.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::new (2 samples, 0.16%)</title><rect x="30.8692%" y="293" width="0.1625%" height="15" fill="rgb(239,72,28)" fg:x="380" fg:w="2"/><text x="31.1192%" y="303.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="30.9504%" y="277" width="0.0812%" height="15" fill="rgb(230,47,54)" fg:x="381" fg:w="1"/><text x="31.2004%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.1942%" y="229" width="0.0812%" height="15" fill="rgb(214,50,8)" fg:x="384" fg:w="1"/><text x="31.4442%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (18 samples, 1.46%)</title><rect x="31.1942%" y="245" width="1.4622%" height="15" fill="rgb(216,198,43)" fg:x="384" fg:w="18"/><text x="31.4442%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (17 samples, 1.38%)</title><rect x="31.2754%" y="229" width="1.3810%" height="15" fill="rgb(234,20,35)" fg:x="385" fg:w="17"/><text x="31.5254%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.5751%" y="213" width="0.0812%" height="15" fill="rgb(254,45,19)" fg:x="401" fg:w="1"/><text x="32.8251%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="32.6564%" y="245" width="0.1625%" height="15" fill="rgb(219,14,44)" fg:x="402" fg:w="2"/><text x="32.9064%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="32.8188%" y="245" width="0.0812%" height="15" fill="rgb(217,220,26)" fg:x="404" fg:w="1"/><text x="33.0688%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="33.1438%" y="181" width="0.2437%" height="15" fill="rgb(213,158,28)" fg:x="408" fg:w="3"/><text x="33.3938%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="33.1438%" y="165" width="0.2437%" height="15" fill="rgb(252,51,52)" fg:x="408" fg:w="3"/><text x="33.3938%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="33.1438%" y="149" width="0.2437%" height="15" fill="rgb(246,89,16)" fg:x="408" fg:w="3"/><text x="33.3938%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="33.2250%" y="133" width="0.1625%" height="15" fill="rgb(216,158,49)" fg:x="409" fg:w="2"/><text x="33.4750%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="33.3875%" y="181" width="0.0812%" height="15" fill="rgb(236,107,19)" fg:x="411" fg:w="1"/><text x="33.6375%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (47 samples, 3.82%)</title><rect x="33.4687%" y="181" width="3.8180%" height="15" fill="rgb(228,185,30)" fg:x="412" fg:w="47"/><text x="33.7187%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (47 samples, 3.82%)</title><rect x="33.4687%" y="165" width="3.8180%" height="15" fill="rgb(246,134,8)" fg:x="412" fg:w="47"/><text x="33.7187%" y="175.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (47 samples, 3.82%)</title><rect x="33.4687%" y="149" width="3.8180%" height="15" fill="rgb(214,143,50)" fg:x="412" fg:w="47"/><text x="33.7187%" y="159.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="37.2868%" y="181" width="0.1625%" height="15" fill="rgb(228,75,8)" fg:x="459" fg:w="2"/><text x="37.5368%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.3680%" y="165" width="0.0812%" height="15" fill="rgb(207,175,4)" fg:x="460" fg:w="1"/><text x="37.6180%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 4.63%)</title><rect x="32.9813%" y="229" width="4.6304%" height="15" fill="rgb(205,108,24)" fg:x="406" fg:w="57"/><text x="33.2313%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (57 samples, 4.63%)</title><rect x="32.9813%" y="213" width="4.6304%" height="15" fill="rgb(244,120,49)" fg:x="406" fg:w="57"/><text x="33.2313%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (57 samples, 4.63%)</title><rect x="32.9813%" y="197" width="4.6304%" height="15" fill="rgb(223,47,38)" fg:x="406" fg:w="57"/><text x="33.2313%" y="207.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="37.4492%" y="181" width="0.1625%" height="15" fill="rgb(229,179,11)" fg:x="461" fg:w="2"/><text x="37.6992%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="37.4492%" y="165" width="0.1625%" height="15" fill="rgb(231,122,1)" fg:x="461" fg:w="2"/><text x="37.6992%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.5305%" y="149" width="0.0812%" height="15" fill="rgb(245,119,9)" fg:x="462" fg:w="1"/><text x="37.7805%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.5305%" y="133" width="0.0812%" height="15" fill="rgb(241,163,25)" fg:x="462" fg:w="1"/><text x="37.7805%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.6117%" y="229" width="0.0812%" height="15" fill="rgb(217,214,3)" fg:x="463" fg:w="1"/><text x="37.8617%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.8554%" y="213" width="0.0812%" height="15" fill="rgb(240,86,28)" fg:x="466" fg:w="1"/><text x="38.1054%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="37.9366%" y="213" width="0.1625%" height="15" fill="rgb(215,47,9)" fg:x="467" fg:w="2"/><text x="38.1866%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.0179%" y="197" width="0.0812%" height="15" fill="rgb(252,25,45)" fg:x="468" fg:w="1"/><text x="38.2679%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.0179%" y="181" width="0.0812%" height="15" fill="rgb(251,164,9)" fg:x="468" fg:w="1"/><text x="38.2679%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.0179%" y="165" width="0.0812%" height="15" fill="rgb(233,194,0)" fg:x="468" fg:w="1"/><text x="38.2679%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="38.0991%" y="213" width="0.3249%" height="15" fill="rgb(249,111,24)" fg:x="469" fg:w="4"/><text x="38.3491%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.81%)</title><rect x="37.6929%" y="229" width="0.8123%" height="15" fill="rgb(250,223,3)" fg:x="464" fg:w="10"/><text x="37.9429%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="38.4240%" y="213" width="0.0812%" height="15" fill="rgb(236,178,37)" fg:x="473" fg:w="1"/><text x="38.6740%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (92 samples, 7.47%)</title><rect x="31.1942%" y="261" width="7.4736%" height="15" fill="rgb(241,158,50)" fg:x="384" fg:w="92"/><text x="31.4442%" y="271.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (71 samples, 5.77%)</title><rect x="32.9001%" y="245" width="5.7677%" height="15" fill="rgb(213,121,41)" fg:x="405" fg:w="71"/><text x="33.1501%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="38.5053%" y="229" width="0.1625%" height="15" fill="rgb(240,92,3)" fg:x="474" fg:w="2"/><text x="38.7553%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="38.5053%" y="213" width="0.1625%" height="15" fill="rgb(205,123,3)" fg:x="474" fg:w="2"/><text x="38.7553%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.5865%" y="197" width="0.0812%" height="15" fill="rgb(205,97,47)" fg:x="475" fg:w="1"/><text x="38.8365%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.5865%" y="181" width="0.0812%" height="15" fill="rgb(247,152,14)" fg:x="475" fg:w="1"/><text x="38.8365%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.5865%" y="165" width="0.0812%" height="15" fill="rgb(248,195,53)" fg:x="475" fg:w="1"/><text x="38.8365%" y="175.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="38.6677%" y="261" width="0.0812%" height="15" fill="rgb(226,201,16)" fg:x="476" fg:w="1"/><text x="38.9177%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="38.6677%" y="245" width="0.0812%" height="15" fill="rgb(205,98,0)" fg:x="476" fg:w="1"/><text x="38.9177%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="38.6677%" y="229" width="0.0812%" height="15" fill="rgb(214,191,48)" fg:x="476" fg:w="1"/><text x="38.9177%" y="239.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="38.6677%" y="213" width="0.0812%" height="15" fill="rgb(237,112,39)" fg:x="476" fg:w="1"/><text x="38.9177%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="38.6677%" y="197" width="0.0812%" height="15" fill="rgb(247,203,27)" fg:x="476" fg:w="1"/><text x="38.9177%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.8302%" y="229" width="0.0812%" height="15" fill="rgb(235,124,28)" fg:x="478" fg:w="1"/><text x="39.0802%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="39.0739%" y="213" width="0.0812%" height="15" fill="rgb(208,207,46)" fg:x="481" fg:w="1"/><text x="39.3239%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="38.9115%" y="229" width="0.4874%" height="15" fill="rgb(234,176,4)" fg:x="479" fg:w="6"/><text x="39.1615%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="39.1552%" y="213" width="0.2437%" height="15" fill="rgb(230,133,28)" fg:x="482" fg:w="3"/><text x="39.4052%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="39.2364%" y="197" width="0.1625%" height="15" fill="rgb(211,137,40)" fg:x="483" fg:w="2"/><text x="39.4864%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="39.2364%" y="181" width="0.1625%" height="15" fill="rgb(254,35,13)" fg:x="483" fg:w="2"/><text x="39.4864%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="39.2364%" y="165" width="0.1625%" height="15" fill="rgb(225,49,51)" fg:x="483" fg:w="2"/><text x="39.4864%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.73%)</title><rect x="38.7490%" y="261" width="0.7311%" height="15" fill="rgb(251,10,15)" fg:x="477" fg:w="9"/><text x="38.9990%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.73%)</title><rect x="38.7490%" y="245" width="0.7311%" height="15" fill="rgb(228,207,15)" fg:x="477" fg:w="9"/><text x="38.9990%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="39.3989%" y="229" width="0.0812%" height="15" fill="rgb(241,99,19)" fg:x="485" fg:w="1"/><text x="39.6489%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="39.4801%" y="229" width="0.1625%" height="15" fill="rgb(207,104,49)" fg:x="486" fg:w="2"/><text x="39.7301%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="39.5613%" y="213" width="0.0812%" height="15" fill="rgb(234,99,18)" fg:x="487" fg:w="1"/><text x="39.8113%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.5613%" y="197" width="0.0812%" height="15" fill="rgb(213,191,49)" fg:x="487" fg:w="1"/><text x="39.8113%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.5613%" y="181" width="0.0812%" height="15" fill="rgb(210,226,19)" fg:x="487" fg:w="1"/><text x="39.8113%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (109 samples, 8.85%)</title><rect x="30.8692%" y="309" width="8.8546%" height="15" fill="rgb(229,97,18)" fg:x="380" fg:w="109"/><text x="31.1192%" y="319.50">&lt;regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (107 samples, 8.69%)</title><rect x="31.0317%" y="293" width="8.6921%" height="15" fill="rgb(211,167,15)" fg:x="382" fg:w="107"/><text x="31.2817%" y="303.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (107 samples, 8.69%)</title><rect x="31.0317%" y="277" width="8.6921%" height="15" fill="rgb(210,169,34)" fg:x="382" fg:w="107"/><text x="31.2817%" y="287.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="39.4801%" y="261" width="0.2437%" height="15" fill="rgb(241,121,31)" fg:x="486" fg:w="3"/><text x="39.7301%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="39.4801%" y="245" width="0.2437%" height="15" fill="rgb(232,40,11)" fg:x="486" fg:w="3"/><text x="39.7301%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="39.6426%" y="229" width="0.0812%" height="15" fill="rgb(205,86,26)" fg:x="488" fg:w="1"/><text x="39.8926%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_class_unicode (1 samples, 0.08%)</title><rect x="39.6426%" y="213" width="0.0812%" height="15" fill="rgb(231,126,28)" fg:x="488" fg:w="1"/><text x="39.8926%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.7238%" y="293" width="0.0812%" height="15" fill="rgb(219,221,18)" fg:x="489" fg:w="1"/><text x="39.9738%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.8050%" y="261" width="0.0812%" height="15" fill="rgb(211,40,0)" fg:x="490" fg:w="1"/><text x="40.0550%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="39.8050%" y="277" width="0.1625%" height="15" fill="rgb(239,85,43)" fg:x="490" fg:w="2"/><text x="40.0550%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="39.8863%" y="261" width="0.0812%" height="15" fill="rgb(231,55,21)" fg:x="491" fg:w="1"/><text x="40.1363%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.8863%" y="245" width="0.0812%" height="15" fill="rgb(225,184,43)" fg:x="491" fg:w="1"/><text x="40.1363%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.8863%" y="229" width="0.0812%" height="15" fill="rgb(251,158,41)" fg:x="491" fg:w="1"/><text x="40.1363%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="39.7238%" y="309" width="0.3249%" height="15" fill="rgb(234,159,37)" fg:x="489" fg:w="4"/><text x="39.9738%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="39.8050%" y="293" width="0.2437%" height="15" fill="rgb(216,204,22)" fg:x="490" fg:w="3"/><text x="40.0550%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="39.9675%" y="277" width="0.0812%" height="15" fill="rgb(214,17,3)" fg:x="492" fg:w="1"/><text x="40.2175%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="39.9675%" y="261" width="0.0812%" height="15" fill="rgb(212,111,17)" fg:x="492" fg:w="1"/><text x="40.2175%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.9675%" y="245" width="0.0812%" height="15" fill="rgb(221,157,24)" fg:x="492" fg:w="1"/><text x="40.2175%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.5361%" y="229" width="0.0812%" height="15" fill="rgb(252,16,13)" fg:x="499" fg:w="1"/><text x="40.7861%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.5361%" y="213" width="0.0812%" height="15" fill="rgb(221,62,2)" fg:x="499" fg:w="1"/><text x="40.7861%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="40.6174%" y="229" width="0.1625%" height="15" fill="rgb(247,87,22)" fg:x="500" fg:w="2"/><text x="40.8674%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.73%)</title><rect x="40.1300%" y="245" width="0.7311%" height="15" fill="rgb(215,73,9)" fg:x="494" fg:w="9"/><text x="40.3800%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="40.7799%" y="229" width="0.0812%" height="15" fill="rgb(207,175,33)" fg:x="502" fg:w="1"/><text x="41.0299%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.7799%" y="213" width="0.0812%" height="15" fill="rgb(243,129,54)" fg:x="502" fg:w="1"/><text x="41.0299%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (130 samples, 10.56%)</title><rect x="30.4630%" y="325" width="10.5605%" height="15" fill="rgb(227,119,45)" fg:x="375" fg:w="130"/><text x="30.7130%" y="335.50">indefinite::hel..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.97%)</title><rect x="40.0487%" y="309" width="0.9748%" height="15" fill="rgb(205,109,36)" fg:x="493" fg:w="12"/><text x="40.2987%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.97%)</title><rect x="40.0487%" y="293" width="0.9748%" height="15" fill="rgb(205,6,39)" fg:x="493" fg:w="12"/><text x="40.2987%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.97%)</title><rect x="40.0487%" y="277" width="0.9748%" height="15" fill="rgb(221,32,16)" fg:x="493" fg:w="12"/><text x="40.2987%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.89%)</title><rect x="40.1300%" y="261" width="0.8936%" height="15" fill="rgb(228,144,50)" fg:x="494" fg:w="11"/><text x="40.3800%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="40.8611%" y="245" width="0.1625%" height="15" fill="rgb(229,201,53)" fg:x="503" fg:w="2"/><text x="41.1111%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="40.8611%" y="229" width="0.1625%" height="15" fill="rgb(249,153,27)" fg:x="503" fg:w="2"/><text x="41.1111%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.8611%" y="213" width="0.1625%" height="15" fill="rgb(227,106,25)" fg:x="503" fg:w="2"/><text x="41.1111%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.9423%" y="197" width="0.0812%" height="15" fill="rgb(230,65,29)" fg:x="504" fg:w="1"/><text x="41.1923%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="41.1048%" y="261" width="0.1625%" height="15" fill="rgb(221,57,46)" fg:x="506" fg:w="2"/><text x="41.3548%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="41.1048%" y="245" width="0.1625%" height="15" fill="rgb(229,161,17)" fg:x="506" fg:w="2"/><text x="41.3548%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (2 samples, 0.16%)</title><rect x="41.1048%" y="229" width="0.1625%" height="15" fill="rgb(222,213,11)" fg:x="506" fg:w="2"/><text x="41.3548%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.2673%" y="261" width="0.0812%" height="15" fill="rgb(235,35,13)" fg:x="508" fg:w="1"/><text x="41.5173%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.4297%" y="245" width="0.0812%" height="15" fill="rgb(233,158,34)" fg:x="510" fg:w="1"/><text x="41.6797%" y="255.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="41.5110%" y="229" width="0.2437%" height="15" fill="rgb(215,151,48)" fg:x="511" fg:w="3"/><text x="41.7610%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (23 samples, 1.87%)</title><rect x="41.5110%" y="245" width="1.8684%" height="15" fill="rgb(229,84,14)" fg:x="511" fg:w="23"/><text x="41.7610%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (20 samples, 1.62%)</title><rect x="41.7547%" y="229" width="1.6247%" height="15" fill="rgb(229,68,14)" fg:x="514" fg:w="20"/><text x="42.0047%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.49%)</title><rect x="43.3794%" y="245" width="0.4874%" height="15" fill="rgb(243,106,26)" fg:x="534" fg:w="6"/><text x="43.6294%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="43.5418%" y="229" width="0.3249%" height="15" fill="rgb(206,45,38)" fg:x="536" fg:w="4"/><text x="43.7918%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.65%)</title><rect x="43.8668%" y="245" width="0.6499%" height="15" fill="rgb(226,6,15)" fg:x="540" fg:w="8"/><text x="44.1168%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.65%)</title><rect x="43.8668%" y="229" width="0.6499%" height="15" fill="rgb(232,22,54)" fg:x="540" fg:w="8"/><text x="44.1168%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="44.2729%" y="213" width="0.2437%" height="15" fill="rgb(229,222,32)" fg:x="545" fg:w="3"/><text x="44.5229%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="44.2729%" y="197" width="0.2437%" height="15" fill="rgb(228,62,29)" fg:x="545" fg:w="3"/><text x="44.5229%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.4354%" y="181" width="0.0812%" height="15" fill="rgb(251,103,34)" fg:x="547" fg:w="1"/><text x="44.6854%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.4354%" y="165" width="0.0812%" height="15" fill="rgb(233,12,30)" fg:x="547" fg:w="1"/><text x="44.6854%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.4354%" y="149" width="0.0812%" height="15" fill="rgb(238,52,0)" fg:x="547" fg:w="1"/><text x="44.6854%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="44.5167%" y="245" width="0.0812%" height="15" fill="rgb(223,98,5)" fg:x="548" fg:w="1"/><text x="44.7667%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="44.5167%" y="229" width="0.0812%" height="15" fill="rgb(228,75,37)" fg:x="548" fg:w="1"/><text x="44.7667%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="44.5167%" y="213" width="0.0812%" height="15" fill="rgb(205,115,49)" fg:x="548" fg:w="1"/><text x="44.7667%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="44.5167%" y="197" width="0.0812%" height="15" fill="rgb(250,154,43)" fg:x="548" fg:w="1"/><text x="44.7667%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.5167%" y="181" width="0.0812%" height="15" fill="rgb(226,43,29)" fg:x="548" fg:w="1"/><text x="44.7667%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.5167%" y="165" width="0.0812%" height="15" fill="rgb(249,228,39)" fg:x="548" fg:w="1"/><text x="44.7667%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.5167%" y="149" width="0.0812%" height="15" fill="rgb(216,79,43)" fg:x="548" fg:w="1"/><text x="44.7667%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.65%)</title><rect x="45.1665%" y="133" width="0.6499%" height="15" fill="rgb(228,95,12)" fg:x="556" fg:w="8"/><text x="45.4165%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.8164%" y="133" width="0.0812%" height="15" fill="rgb(249,221,15)" fg:x="564" fg:w="1"/><text x="46.0664%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.41%)</title><rect x="45.8976%" y="133" width="0.4062%" height="15" fill="rgb(233,34,13)" fg:x="565" fg:w="5"/><text x="46.1476%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.2226%" y="117" width="0.0812%" height="15" fill="rgb(214,103,39)" fg:x="569" fg:w="1"/><text x="46.4726%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.2226%" y="101" width="0.0812%" height="15" fill="rgb(251,126,39)" fg:x="569" fg:w="1"/><text x="46.4726%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.2226%" y="85" width="0.0812%" height="15" fill="rgb(214,216,36)" fg:x="569" fg:w="1"/><text x="46.4726%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="46.3038%" y="133" width="0.0812%" height="15" fill="rgb(220,221,8)" fg:x="570" fg:w="1"/><text x="46.5538%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.3038%" y="117" width="0.0812%" height="15" fill="rgb(240,216,3)" fg:x="570" fg:w="1"/><text x="46.5538%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.9537%" y="101" width="0.0812%" height="15" fill="rgb(232,218,17)" fg:x="578" fg:w="1"/><text x="47.2037%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="47.1162%" y="69" width="0.1625%" height="15" fill="rgb(229,163,45)" fg:x="580" fg:w="2"/><text x="47.3662%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="47.0349%" y="101" width="0.3249%" height="15" fill="rgb(231,110,42)" fg:x="579" fg:w="4"/><text x="47.2849%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="47.0349%" y="85" width="0.3249%" height="15" fill="rgb(208,170,48)" fg:x="579" fg:w="4"/><text x="47.2849%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.2786%" y="69" width="0.0812%" height="15" fill="rgb(239,116,25)" fg:x="582" fg:w="1"/><text x="47.5286%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (21 samples, 1.71%)</title><rect x="46.3851%" y="133" width="1.7059%" height="15" fill="rgb(219,200,50)" fg:x="571" fg:w="21"/><text x="46.6351%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (20 samples, 1.62%)</title><rect x="46.4663%" y="117" width="1.6247%" height="15" fill="rgb(245,200,0)" fg:x="572" fg:w="20"/><text x="46.7163%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (9 samples, 0.73%)</title><rect x="47.3599%" y="101" width="0.7311%" height="15" fill="rgb(245,119,33)" fg:x="583" fg:w="9"/><text x="47.6099%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="47.8473%" y="85" width="0.2437%" height="15" fill="rgb(231,125,12)" fg:x="589" fg:w="3"/><text x="48.0973%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="47.9285%" y="69" width="0.1625%" height="15" fill="rgb(216,96,41)" fg:x="590" fg:w="2"/><text x="48.1785%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="47.9285%" y="53" width="0.1625%" height="15" fill="rgb(248,43,45)" fg:x="590" fg:w="2"/><text x="48.1785%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="47.9285%" y="37" width="0.1625%" height="15" fill="rgb(217,222,7)" fg:x="590" fg:w="2"/><text x="48.1785%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="48.0910%" y="117" width="0.1625%" height="15" fill="rgb(233,28,6)" fg:x="592" fg:w="2"/><text x="48.3410%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="48.0910%" y="101" width="0.1625%" height="15" fill="rgb(231,218,15)" fg:x="592" fg:w="2"/><text x="48.3410%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.1722%" y="85" width="0.0812%" height="15" fill="rgb(226,171,48)" fg:x="593" fg:w="1"/><text x="48.4222%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.2535%" y="101" width="0.0812%" height="15" fill="rgb(235,201,9)" fg:x="594" fg:w="1"/><text x="48.5035%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (55 samples, 4.47%)</title><rect x="48.0910%" y="133" width="4.4679%" height="15" fill="rgb(217,80,15)" fg:x="592" fg:w="55"/><text x="48.3410%" y="143.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (53 samples, 4.31%)</title><rect x="48.2535%" y="117" width="4.3054%" height="15" fill="rgb(219,152,8)" fg:x="594" fg:w="53"/><text x="48.5035%" y="127.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (52 samples, 4.22%)</title><rect x="48.3347%" y="101" width="4.2242%" height="15" fill="rgb(243,107,38)" fg:x="595" fg:w="52"/><text x="48.5847%" y="111.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="52.5589%" y="133" width="0.1625%" height="15" fill="rgb(231,17,5)" fg:x="647" fg:w="2"/><text x="52.8089%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 8.37%)</title><rect x="44.5979%" y="229" width="8.3672%" height="15" fill="rgb(209,25,54)" fg:x="549" fg:w="103"/><text x="44.8479%" y="239.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (102 samples, 8.29%)</title><rect x="44.6791%" y="213" width="8.2859%" height="15" fill="rgb(219,0,2)" fg:x="550" fg:w="102"/><text x="44.9291%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (102 samples, 8.29%)</title><rect x="44.6791%" y="197" width="8.2859%" height="15" fill="rgb(246,9,5)" fg:x="550" fg:w="102"/><text x="44.9291%" y="207.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (102 samples, 8.29%)</title><rect x="44.6791%" y="181" width="8.2859%" height="15" fill="rgb(226,159,4)" fg:x="550" fg:w="102"/><text x="44.9291%" y="191.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (102 samples, 8.29%)</title><rect x="44.6791%" y="165" width="8.2859%" height="15" fill="rgb(219,175,34)" fg:x="550" fg:w="102"/><text x="44.9291%" y="175.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (102 samples, 8.29%)</title><rect x="44.6791%" y="149" width="8.2859%" height="15" fill="rgb(236,10,46)" fg:x="550" fg:w="102"/><text x="44.9291%" y="159.50">regex_automa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="52.7214%" y="133" width="0.2437%" height="15" fill="rgb(240,211,16)" fg:x="649" fg:w="3"/><text x="52.9714%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.8838%" y="117" width="0.0812%" height="15" fill="rgb(205,3,43)" fg:x="651" fg:w="1"/><text x="53.1338%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.8838%" y="101" width="0.0812%" height="15" fill="rgb(245,7,22)" fg:x="651" fg:w="1"/><text x="53.1338%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.8838%" y="85" width="0.0812%" height="15" fill="rgb(239,132,32)" fg:x="651" fg:w="1"/><text x="53.1338%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="53.1275%" y="213" width="0.2437%" height="15" fill="rgb(228,202,34)" fg:x="654" fg:w="3"/><text x="53.3775%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.2900%" y="197" width="0.0812%" height="15" fill="rgb(254,200,22)" fg:x="656" fg:w="1"/><text x="53.5400%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.2900%" y="181" width="0.0812%" height="15" fill="rgb(219,10,39)" fg:x="656" fg:w="1"/><text x="53.5400%" y="191.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="53.2900%" y="165" width="0.0812%" height="15" fill="rgb(226,210,39)" fg:x="656" fg:w="1"/><text x="53.5400%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.41%)</title><rect x="53.3712%" y="213" width="0.4062%" height="15" fill="rgb(208,219,16)" fg:x="657" fg:w="5"/><text x="53.6212%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.6962%" y="197" width="0.0812%" height="15" fill="rgb(216,158,51)" fg:x="661" fg:w="1"/><text x="53.9462%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (114 samples, 9.26%)</title><rect x="44.5979%" y="245" width="9.2608%" height="15" fill="rgb(233,14,44)" fg:x="549" fg:w="114"/><text x="44.8479%" y="255.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.89%)</title><rect x="52.9651%" y="229" width="0.8936%" height="15" fill="rgb(237,97,39)" fg:x="652" fg:w="11"/><text x="53.2151%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="53.7774%" y="213" width="0.0812%" height="15" fill="rgb(218,198,43)" fg:x="662" fg:w="1"/><text x="54.0274%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="53.8587%" y="213" width="0.0812%" height="15" fill="rgb(231,104,20)" fg:x="663" fg:w="1"/><text x="54.1087%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (156 samples, 12.67%)</title><rect x="41.3485%" y="261" width="12.6726%" height="15" fill="rgb(254,36,13)" fg:x="509" fg:w="156"/><text x="41.5985%" y="271.50">regex_automata::met..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="53.8587%" y="245" width="0.1625%" height="15" fill="rgb(248,14,50)" fg:x="663" fg:w="2"/><text x="54.1087%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="53.8587%" y="229" width="0.1625%" height="15" fill="rgb(217,107,29)" fg:x="663" fg:w="2"/><text x="54.1087%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="53.9399%" y="213" width="0.0812%" height="15" fill="rgb(251,169,33)" fg:x="664" fg:w="1"/><text x="54.1899%" y="223.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="54.0211%" y="261" width="0.0812%" height="15" fill="rgb(217,108,32)" fg:x="665" fg:w="1"/><text x="54.2711%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="54.0211%" y="245" width="0.0812%" height="15" fill="rgb(219,66,42)" fg:x="665" fg:w="1"/><text x="54.2711%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="54.0211%" y="229" width="0.0812%" height="15" fill="rgb(206,180,7)" fg:x="665" fg:w="1"/><text x="54.2711%" y="239.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="54.0211%" y="213" width="0.0812%" height="15" fill="rgb(208,226,31)" fg:x="665" fg:w="1"/><text x="54.2711%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="54.0211%" y="197" width="0.0812%" height="15" fill="rgb(218,26,49)" fg:x="665" fg:w="1"/><text x="54.2711%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="54.1836%" y="213" width="0.0812%" height="15" fill="rgb(233,197,48)" fg:x="667" fg:w="1"/><text x="54.4336%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.1836%" y="197" width="0.0812%" height="15" fill="rgb(252,181,51)" fg:x="667" fg:w="1"/><text x="54.4336%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="54.1024%" y="229" width="0.2437%" height="15" fill="rgb(253,90,19)" fg:x="666" fg:w="3"/><text x="54.3524%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="54.2648%" y="213" width="0.0812%" height="15" fill="rgb(215,171,30)" fg:x="668" fg:w="1"/><text x="54.5148%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.2648%" y="197" width="0.0812%" height="15" fill="rgb(214,222,9)" fg:x="668" fg:w="1"/><text x="54.5148%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.2648%" y="181" width="0.0812%" height="15" fill="rgb(223,3,22)" fg:x="668" fg:w="1"/><text x="54.5148%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.2648%" y="165" width="0.0812%" height="15" fill="rgb(225,196,46)" fg:x="668" fg:w="1"/><text x="54.5148%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="54.3461%" y="229" width="0.0812%" height="15" fill="rgb(209,110,37)" fg:x="669" fg:w="1"/><text x="54.5961%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.3461%" y="213" width="0.0812%" height="15" fill="rgb(249,89,12)" fg:x="669" fg:w="1"/><text x="54.5961%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="54.1024%" y="261" width="0.4874%" height="15" fill="rgb(226,27,33)" fg:x="666" fg:w="6"/><text x="54.3524%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="54.1024%" y="245" width="0.4874%" height="15" fill="rgb(213,82,22)" fg:x="666" fg:w="6"/><text x="54.3524%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="54.4273%" y="229" width="0.1625%" height="15" fill="rgb(248,140,0)" fg:x="670" fg:w="2"/><text x="54.6773%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.16%)</title><rect x="54.4273%" y="213" width="0.1625%" height="15" fill="rgb(228,106,3)" fg:x="670" fg:w="2"/><text x="54.6773%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="54.5898%" y="213" width="0.0812%" height="15" fill="rgb(209,23,37)" fg:x="672" fg:w="1"/><text x="54.8398%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="54.5898%" y="197" width="0.0812%" height="15" fill="rgb(241,93,50)" fg:x="672" fg:w="1"/><text x="54.8398%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="54.5898%" y="229" width="0.1625%" height="15" fill="rgb(253,46,43)" fg:x="672" fg:w="2"/><text x="54.8398%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="54.6710%" y="213" width="0.0812%" height="15" fill="rgb(226,206,43)" fg:x="673" fg:w="1"/><text x="54.9210%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="54.6710%" y="197" width="0.0812%" height="15" fill="rgb(217,54,7)" fg:x="673" fg:w="1"/><text x="54.9210%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="54.6710%" y="181" width="0.0812%" height="15" fill="rgb(223,5,52)" fg:x="673" fg:w="1"/><text x="54.9210%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (170 samples, 13.81%)</title><rect x="41.0236%" y="309" width="13.8099%" height="15" fill="rgb(206,52,46)" fg:x="505" fg:w="170"/><text x="41.2736%" y="319.50">&lt;regex::regex::string..</text></g><g><title>regex::builders::string::RegexBuilder::build (170 samples, 13.81%)</title><rect x="41.0236%" y="293" width="13.8099%" height="15" fill="rgb(253,136,11)" fg:x="505" fg:w="170"/><text x="41.2736%" y="303.50">regex::builders::stri..</text></g><g><title>regex_automata::meta::regex::Builder::build (169 samples, 13.73%)</title><rect x="41.1048%" y="277" width="13.7287%" height="15" fill="rgb(208,106,33)" fg:x="506" fg:w="169"/><text x="41.3548%" y="287.50">regex_automata::meta:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="54.5898%" y="261" width="0.2437%" height="15" fill="rgb(206,54,4)" fg:x="672" fg:w="3"/><text x="54.8398%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="54.5898%" y="245" width="0.2437%" height="15" fill="rgb(213,3,15)" fg:x="672" fg:w="3"/><text x="54.8398%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="54.7522%" y="229" width="0.0812%" height="15" fill="rgb(252,211,39)" fg:x="674" fg:w="1"/><text x="55.0022%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="54.8335%" y="293" width="0.2437%" height="15" fill="rgb(223,6,36)" fg:x="675" fg:w="3"/><text x="55.0835%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="54.8335%" y="277" width="0.2437%" height="15" fill="rgb(252,169,45)" fg:x="675" fg:w="3"/><text x="55.0835%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="54.9959%" y="261" width="0.0812%" height="15" fill="rgb(212,48,26)" fg:x="677" fg:w="1"/><text x="55.2459%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="55.4021%" y="213" width="0.1625%" height="15" fill="rgb(251,102,48)" fg:x="682" fg:w="2"/><text x="55.6521%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="55.0772%" y="245" width="0.5686%" height="15" fill="rgb(243,208,16)" fg:x="678" fg:w="7"/><text x="55.3272%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.57%)</title><rect x="55.0772%" y="229" width="0.5686%" height="15" fill="rgb(219,96,24)" fg:x="678" fg:w="7"/><text x="55.3272%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="55.5646%" y="213" width="0.0812%" height="15" fill="rgb(219,33,29)" fg:x="684" fg:w="1"/><text x="55.8146%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.5646%" y="197" width="0.0812%" height="15" fill="rgb(223,176,5)" fg:x="684" fg:w="1"/><text x="55.8146%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (181 samples, 14.70%)</title><rect x="41.0236%" y="325" width="14.7035%" height="15" fill="rgb(228,140,14)" fg:x="505" fg:w="181"/><text x="41.2736%" y="335.50">indefinite::rules::num..</text></g><g><title>regex::regex::string::Regex::is_match_at (11 samples, 0.89%)</title><rect x="54.8335%" y="309" width="0.8936%" height="15" fill="rgb(217,179,31)" fg:x="675" fg:w="11"/><text x="55.0835%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.65%)</title><rect x="55.0772%" y="293" width="0.6499%" height="15" fill="rgb(230,9,30)" fg:x="678" fg:w="8"/><text x="55.3272%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.65%)</title><rect x="55.0772%" y="277" width="0.6499%" height="15" fill="rgb(230,136,20)" fg:x="678" fg:w="8"/><text x="55.3272%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.65%)</title><rect x="55.0772%" y="261" width="0.6499%" height="15" fill="rgb(215,210,22)" fg:x="678" fg:w="8"/><text x="55.3272%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="55.6458%" y="245" width="0.0812%" height="15" fill="rgb(218,43,5)" fg:x="685" fg:w="1"/><text x="55.8958%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="55.6458%" y="229" width="0.0812%" height="15" fill="rgb(216,11,5)" fg:x="685" fg:w="1"/><text x="55.8958%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.6458%" y="213" width="0.0812%" height="15" fill="rgb(209,82,29)" fg:x="685" fg:w="1"/><text x="55.8958%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.6458%" y="197" width="0.0812%" height="15" fill="rgb(244,115,12)" fg:x="685" fg:w="1"/><text x="55.8958%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.6458%" y="181" width="0.0812%" height="15" fill="rgb(222,82,18)" fg:x="685" fg:w="1"/><text x="55.8958%" y="191.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="55.7271%" y="309" width="0.0812%" height="15" fill="rgb(249,227,8)" fg:x="686" fg:w="1"/><text x="55.9771%" y="319.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="55.7271%" y="293" width="0.0812%" height="15" fill="rgb(253,141,45)" fg:x="686" fg:w="1"/><text x="55.9771%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="55.7271%" y="277" width="0.0812%" height="15" fill="rgb(234,184,4)" fg:x="686" fg:w="1"/><text x="55.9771%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="55.7271%" y="261" width="0.0812%" height="15" fill="rgb(218,194,23)" fg:x="686" fg:w="1"/><text x="55.9771%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="55.7271%" y="245" width="0.0812%" height="15" fill="rgb(235,66,41)" fg:x="686" fg:w="1"/><text x="55.9771%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="55.7271%" y="229" width="0.0812%" height="15" fill="rgb(245,217,1)" fg:x="686" fg:w="1"/><text x="55.9771%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="55.7271%" y="213" width="0.0812%" height="15" fill="rgb(229,91,1)" fg:x="686" fg:w="1"/><text x="55.9771%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="55.7271%" y="197" width="0.0812%" height="15" fill="rgb(207,101,30)" fg:x="686" fg:w="1"/><text x="55.9771%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.8083%" y="245" width="0.0812%" height="15" fill="rgb(223,82,49)" fg:x="687" fg:w="1"/><text x="56.0583%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="55.8895%" y="213" width="0.0812%" height="15" fill="rgb(218,167,17)" fg:x="688" fg:w="1"/><text x="56.1395%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.8895%" y="197" width="0.0812%" height="15" fill="rgb(208,103,14)" fg:x="688" fg:w="1"/><text x="56.1395%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="55.8895%" y="245" width="0.1625%" height="15" fill="rgb(238,20,8)" fg:x="688" fg:w="2"/><text x="56.1395%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="55.8895%" y="229" width="0.1625%" height="15" fill="rgb(218,80,54)" fg:x="688" fg:w="2"/><text x="56.1395%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="55.9708%" y="213" width="0.0812%" height="15" fill="rgb(240,144,17)" fg:x="689" fg:w="1"/><text x="56.2208%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.9708%" y="197" width="0.0812%" height="15" fill="rgb(245,27,50)" fg:x="689" fg:w="1"/><text x="56.2208%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="56.0520%" y="245" width="0.0812%" height="15" fill="rgb(251,51,7)" fg:x="690" fg:w="1"/><text x="56.3020%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.2957%" y="229" width="0.0812%" height="15" fill="rgb(245,217,29)" fg:x="693" fg:w="1"/><text x="56.5457%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="56.3769%" y="229" width="0.0812%" height="15" fill="rgb(221,176,29)" fg:x="694" fg:w="1"/><text x="56.6269%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.3769%" y="213" width="0.0812%" height="15" fill="rgb(212,180,24)" fg:x="694" fg:w="1"/><text x="56.6269%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="56.6206%" y="213" width="0.0812%" height="15" fill="rgb(254,24,2)" fg:x="697" fg:w="1"/><text x="56.8706%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="56.6206%" y="197" width="0.0812%" height="15" fill="rgb(230,100,2)" fg:x="697" fg:w="1"/><text x="56.8706%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.49%)</title><rect x="56.4582%" y="229" width="0.4874%" height="15" fill="rgb(219,142,25)" fg:x="695" fg:w="6"/><text x="56.7082%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="56.7019%" y="213" width="0.2437%" height="15" fill="rgb(240,73,43)" fg:x="698" fg:w="3"/><text x="56.9519%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="56.8643%" y="197" width="0.0812%" height="15" fill="rgb(214,114,15)" fg:x="700" fg:w="1"/><text x="57.1143%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="56.8643%" y="181" width="0.0812%" height="15" fill="rgb(207,130,4)" fg:x="700" fg:w="1"/><text x="57.1143%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="56.9456%" y="229" width="0.0812%" height="15" fill="rgb(221,25,40)" fg:x="701" fg:w="1"/><text x="57.1956%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="56.9456%" y="213" width="0.0812%" height="15" fill="rgb(241,184,7)" fg:x="701" fg:w="1"/><text x="57.1956%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="56.9456%" y="197" width="0.0812%" height="15" fill="rgb(235,159,4)" fg:x="701" fg:w="1"/><text x="57.1956%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="57.0268%" y="197" width="0.0812%" height="15" fill="rgb(214,87,48)" fg:x="702" fg:w="1"/><text x="57.2768%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="57.1080%" y="197" width="0.1625%" height="15" fill="rgb(246,198,24)" fg:x="703" fg:w="2"/><text x="57.3580%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (15 samples, 1.22%)</title><rect x="56.1332%" y="245" width="1.2185%" height="15" fill="rgb(209,66,40)" fg:x="691" fg:w="15"/><text x="56.3832%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="57.0268%" y="229" width="0.3249%" height="15" fill="rgb(233,147,39)" fg:x="702" fg:w="4"/><text x="57.2768%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="57.0268%" y="213" width="0.3249%" height="15" fill="rgb(231,145,52)" fg:x="702" fg:w="4"/><text x="57.2768%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="57.2705%" y="197" width="0.0812%" height="15" fill="rgb(206,20,26)" fg:x="705" fg:w="1"/><text x="57.5205%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="57.4330%" y="197" width="0.0812%" height="15" fill="rgb(238,220,4)" fg:x="707" fg:w="1"/><text x="57.6830%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="57.4330%" y="181" width="0.0812%" height="15" fill="rgb(252,195,42)" fg:x="707" fg:w="1"/><text x="57.6830%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="57.4330%" y="213" width="0.1625%" height="15" fill="rgb(209,10,6)" fg:x="707" fg:w="2"/><text x="57.6830%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="57.5142%" y="197" width="0.0812%" height="15" fill="rgb(229,3,52)" fg:x="708" fg:w="1"/><text x="57.7642%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.5142%" y="181" width="0.0812%" height="15" fill="rgb(253,49,37)" fg:x="708" fg:w="1"/><text x="57.7642%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.5142%" y="165" width="0.0812%" height="15" fill="rgb(240,103,49)" fg:x="708" fg:w="1"/><text x="57.7642%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.5142%" y="149" width="0.0812%" height="15" fill="rgb(250,182,30)" fg:x="708" fg:w="1"/><text x="57.7642%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="57.3517%" y="245" width="0.3249%" height="15" fill="rgb(248,8,30)" fg:x="706" fg:w="4"/><text x="57.6017%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="57.3517%" y="229" width="0.3249%" height="15" fill="rgb(237,120,30)" fg:x="706" fg:w="4"/><text x="57.6017%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="57.5955%" y="213" width="0.0812%" height="15" fill="rgb(221,146,34)" fg:x="709" fg:w="1"/><text x="57.8455%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.5955%" y="197" width="0.0812%" height="15" fill="rgb(242,55,13)" fg:x="709" fg:w="1"/><text x="57.8455%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.5955%" y="181" width="0.0812%" height="15" fill="rgb(242,112,31)" fg:x="709" fg:w="1"/><text x="57.8455%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.5955%" y="165" width="0.0812%" height="15" fill="rgb(249,192,27)" fg:x="709" fg:w="1"/><text x="57.8455%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.8392%" y="197" width="0.0812%" height="15" fill="rgb(208,204,44)" fg:x="712" fg:w="1"/><text x="58.0892%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.8392%" y="181" width="0.0812%" height="15" fill="rgb(208,93,54)" fg:x="712" fg:w="1"/><text x="58.0892%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.8392%" y="165" width="0.0812%" height="15" fill="rgb(242,1,31)" fg:x="712" fg:w="1"/><text x="58.0892%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (28 samples, 2.27%)</title><rect x="55.8083%" y="293" width="2.2746%" height="15" fill="rgb(241,83,25)" fg:x="687" fg:w="28"/><text x="56.0583%" y="303.50">&lt;..</text></g><g><title>regex::builders::string::RegexBuilder::build (28 samples, 2.27%)</title><rect x="55.8083%" y="277" width="2.2746%" height="15" fill="rgb(205,169,50)" fg:x="687" fg:w="28"/><text x="56.0583%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (28 samples, 2.27%)</title><rect x="55.8083%" y="261" width="2.2746%" height="15" fill="rgb(239,186,37)" fg:x="687" fg:w="28"/><text x="56.0583%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="57.6767%" y="245" width="0.4062%" height="15" fill="rgb(205,221,10)" fg:x="710" fg:w="5"/><text x="57.9267%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="57.6767%" y="229" width="0.4062%" height="15" fill="rgb(218,196,15)" fg:x="710" fg:w="5"/><text x="57.9267%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.41%)</title><rect x="57.6767%" y="213" width="0.4062%" height="15" fill="rgb(218,196,35)" fg:x="710" fg:w="5"/><text x="57.9267%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="57.9204%" y="197" width="0.1625%" height="15" fill="rgb(233,63,24)" fg:x="713" fg:w="2"/><text x="58.1704%" y="207.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="58.0016%" y="181" width="0.0812%" height="15" fill="rgb(225,8,4)" fg:x="714" fg:w="1"/><text x="58.2516%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.0829%" y="229" width="0.0812%" height="15" fill="rgb(234,105,35)" fg:x="715" fg:w="1"/><text x="58.3329%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (35 samples, 2.84%)</title><rect x="55.8083%" y="309" width="2.8432%" height="15" fill="rgb(236,21,32)" fg:x="687" fg:w="35"/><text x="56.0583%" y="319.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.57%)</title><rect x="58.0829%" y="293" width="0.5686%" height="15" fill="rgb(228,109,6)" fg:x="715" fg:w="7"/><text x="58.3329%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.57%)</title><rect x="58.0829%" y="277" width="0.5686%" height="15" fill="rgb(229,215,31)" fg:x="715" fg:w="7"/><text x="58.3329%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.57%)</title><rect x="58.0829%" y="261" width="0.5686%" height="15" fill="rgb(221,52,54)" fg:x="715" fg:w="7"/><text x="58.3329%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="58.0829%" y="245" width="0.5686%" height="15" fill="rgb(252,129,43)" fg:x="715" fg:w="7"/><text x="58.3329%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="58.1641%" y="229" width="0.4874%" height="15" fill="rgb(248,183,27)" fg:x="716" fg:w="6"/><text x="58.4141%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.5703%" y="213" width="0.0812%" height="15" fill="rgb(250,0,22)" fg:x="721" fg:w="1"/><text x="58.8203%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="58.5703%" y="197" width="0.0812%" height="15" fill="rgb(213,166,10)" fg:x="721" fg:w="1"/><text x="58.8203%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (369 samples, 29.98%)</title><rect x="28.7571%" y="405" width="29.9756%" height="15" fill="rgb(207,163,36)" fg:x="354" fg:w="369"/><text x="29.0071%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::look..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (349 samples, 28.35%)</title><rect x="30.3818%" y="389" width="28.3509%" height="15" fill="rgb(208,122,22)" fg:x="374" fg:w="349"/><text x="30.6318%" y="399.50">plugins_core::looking::model::Unqualified::qua..</text></g><g><title>indefinite::indefinite (349 samples, 28.35%)</title><rect x="30.3818%" y="373" width="28.3509%" height="15" fill="rgb(207,104,49)" fg:x="374" fg:w="349"/><text x="30.6318%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (349 samples, 28.35%)</title><rect x="30.3818%" y="357" width="28.3509%" height="15" fill="rgb(248,211,50)" fg:x="374" fg:w="349"/><text x="30.6318%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (348 samples, 28.27%)</title><rect x="30.4630%" y="341" width="28.2697%" height="15" fill="rgb(217,13,45)" fg:x="375" fg:w="348"/><text x="30.7130%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (37 samples, 3.01%)</title><rect x="55.7271%" y="325" width="3.0057%" height="15" fill="rgb(211,216,49)" fg:x="686" fg:w="37"/><text x="55.9771%" y="335.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="58.6515%" y="309" width="0.0812%" height="15" fill="rgb(221,58,53)" fg:x="722" fg:w="1"/><text x="58.9015%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.7327%" y="389" width="0.0812%" height="15" fill="rgb(220,112,41)" fg:x="723" fg:w="1"/><text x="58.9827%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.8140%" y="357" width="0.0812%" height="15" fill="rgb(236,38,28)" fg:x="724" fg:w="1"/><text x="59.0640%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="58.7327%" y="405" width="0.2437%" height="15" fill="rgb(227,195,22)" fg:x="723" fg:w="3"/><text x="58.9827%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="58.8140%" y="389" width="0.1625%" height="15" fill="rgb(214,55,33)" fg:x="724" fg:w="2"/><text x="59.0640%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.8140%" y="373" width="0.1625%" height="15" fill="rgb(248,80,13)" fg:x="724" fg:w="2"/><text x="59.0640%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="58.8952%" y="357" width="0.0812%" height="15" fill="rgb(238,52,6)" fg:x="725" fg:w="1"/><text x="59.1452%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="58.8952%" y="341" width="0.0812%" height="15" fill="rgb(224,198,47)" fg:x="725" fg:w="1"/><text x="59.1452%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="58.8952%" y="325" width="0.0812%" height="15" fill="rgb(233,171,20)" fg:x="725" fg:w="1"/><text x="59.1452%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.8952%" y="309" width="0.0812%" height="15" fill="rgb(241,30,25)" fg:x="725" fg:w="1"/><text x="59.1452%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.8952%" y="293" width="0.0812%" height="15" fill="rgb(207,171,38)" fg:x="725" fg:w="1"/><text x="59.1452%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="58.9764%" y="405" width="0.2437%" height="15" fill="rgb(234,70,1)" fg:x="726" fg:w="3"/><text x="59.2264%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.1389%" y="389" width="0.0812%" height="15" fill="rgb(232,178,18)" fg:x="728" fg:w="1"/><text x="59.3889%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.2201%" y="277" width="0.0812%" height="15" fill="rgb(241,78,40)" fg:x="729" fg:w="1"/><text x="59.4701%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="59.2201%" y="261" width="0.0812%" height="15" fill="rgb(222,35,25)" fg:x="729" fg:w="1"/><text x="59.4701%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.2201%" y="245" width="0.0812%" height="15" fill="rgb(207,92,16)" fg:x="729" fg:w="1"/><text x="59.4701%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="59.2201%" y="357" width="0.1625%" height="15" fill="rgb(216,59,51)" fg:x="729" fg:w="2"/><text x="59.4701%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.2201%" y="341" width="0.1625%" height="15" fill="rgb(213,80,28)" fg:x="729" fg:w="2"/><text x="59.4701%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.2201%" y="325" width="0.1625%" height="15" fill="rgb(220,93,7)" fg:x="729" fg:w="2"/><text x="59.4701%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="59.2201%" y="309" width="0.1625%" height="15" fill="rgb(225,24,44)" fg:x="729" fg:w="2"/><text x="59.4701%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.2201%" y="293" width="0.1625%" height="15" fill="rgb(243,74,40)" fg:x="729" fg:w="2"/><text x="59.4701%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.3014%" y="277" width="0.0812%" height="15" fill="rgb(228,39,7)" fg:x="730" fg:w="1"/><text x="59.5514%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="59.2201%" y="373" width="0.2437%" height="15" fill="rgb(227,79,8)" fg:x="729" fg:w="3"/><text x="59.4701%" y="383.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="59.3826%" y="357" width="0.0812%" height="15" fill="rgb(236,58,11)" fg:x="731" fg:w="1"/><text x="59.6326%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="59.4639%" y="373" width="0.0812%" height="15" fill="rgb(249,63,35)" fg:x="732" fg:w="1"/><text x="59.7139%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.4639%" y="357" width="0.0812%" height="15" fill="rgb(252,114,16)" fg:x="732" fg:w="1"/><text x="59.7139%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.4639%" y="341" width="0.0812%" height="15" fill="rgb(254,151,24)" fg:x="732" fg:w="1"/><text x="59.7139%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="59.5451%" y="357" width="0.0812%" height="15" fill="rgb(253,54,39)" fg:x="733" fg:w="1"/><text x="59.7951%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.5451%" y="341" width="0.0812%" height="15" fill="rgb(243,25,45)" fg:x="733" fg:w="1"/><text x="59.7951%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.5451%" y="325" width="0.0812%" height="15" fill="rgb(234,134,9)" fg:x="733" fg:w="1"/><text x="59.7951%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.5451%" y="309" width="0.0812%" height="15" fill="rgb(227,166,31)" fg:x="733" fg:w="1"/><text x="59.7951%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (6 samples, 0.49%)</title><rect x="59.2201%" y="389" width="0.4874%" height="15" fill="rgb(245,143,41)" fg:x="729" fg:w="6"/><text x="59.4701%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="59.5451%" y="373" width="0.1625%" height="15" fill="rgb(238,181,32)" fg:x="733" fg:w="2"/><text x="59.7951%" y="383.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="59.6263%" y="357" width="0.0812%" height="15" fill="rgb(224,113,18)" fg:x="734" fg:w="1"/><text x="59.8763%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.7888%" y="261" width="0.0812%" height="15" fill="rgb(240,229,28)" fg:x="736" fg:w="1"/><text x="60.0388%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.7888%" y="245" width="0.0812%" height="15" fill="rgb(250,185,3)" fg:x="736" fg:w="1"/><text x="60.0388%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.7888%" y="229" width="0.0812%" height="15" fill="rgb(212,59,25)" fg:x="736" fg:w="1"/><text x="60.0388%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.7888%" y="213" width="0.0812%" height="15" fill="rgb(221,87,20)" fg:x="736" fg:w="1"/><text x="60.0388%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.7888%" y="197" width="0.0812%" height="15" fill="rgb(213,74,28)" fg:x="736" fg:w="1"/><text x="60.0388%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.7888%" y="181" width="0.0812%" height="15" fill="rgb(224,132,34)" fg:x="736" fg:w="1"/><text x="60.0388%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.7888%" y="165" width="0.0812%" height="15" fill="rgb(222,101,24)" fg:x="736" fg:w="1"/><text x="60.0388%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.7888%" y="149" width="0.0812%" height="15" fill="rgb(254,142,4)" fg:x="736" fg:w="1"/><text x="60.0388%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.7888%" y="133" width="0.0812%" height="15" fill="rgb(230,229,49)" fg:x="736" fg:w="1"/><text x="60.0388%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.7888%" y="117" width="0.0812%" height="15" fill="rgb(238,70,47)" fg:x="736" fg:w="1"/><text x="60.0388%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.7888%" y="101" width="0.0812%" height="15" fill="rgb(231,160,17)" fg:x="736" fg:w="1"/><text x="60.0388%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.7888%" y="85" width="0.0812%" height="15" fill="rgb(218,68,53)" fg:x="736" fg:w="1"/><text x="60.0388%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.7888%" y="69" width="0.0812%" height="15" fill="rgb(236,111,10)" fg:x="736" fg:w="1"/><text x="60.0388%" y="79.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="59.7888%" y="277" width="0.1625%" height="15" fill="rgb(224,34,41)" fg:x="736" fg:w="2"/><text x="60.0388%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.8700%" y="261" width="0.0812%" height="15" fill="rgb(241,118,19)" fg:x="737" fg:w="1"/><text x="60.1200%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.8700%" y="245" width="0.0812%" height="15" fill="rgb(238,129,25)" fg:x="737" fg:w="1"/><text x="60.1200%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.8700%" y="229" width="0.0812%" height="15" fill="rgb(238,22,31)" fg:x="737" fg:w="1"/><text x="60.1200%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.8700%" y="213" width="0.0812%" height="15" fill="rgb(222,174,48)" fg:x="737" fg:w="1"/><text x="60.1200%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.8700%" y="197" width="0.0812%" height="15" fill="rgb(206,152,40)" fg:x="737" fg:w="1"/><text x="60.1200%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.8700%" y="181" width="0.0812%" height="15" fill="rgb(218,99,54)" fg:x="737" fg:w="1"/><text x="60.1200%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.8700%" y="165" width="0.0812%" height="15" fill="rgb(220,174,26)" fg:x="737" fg:w="1"/><text x="60.1200%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.8700%" y="149" width="0.0812%" height="15" fill="rgb(245,116,9)" fg:x="737" fg:w="1"/><text x="60.1200%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.8700%" y="133" width="0.0812%" height="15" fill="rgb(209,72,35)" fg:x="737" fg:w="1"/><text x="60.1200%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.8700%" y="117" width="0.0812%" height="15" fill="rgb(226,126,21)" fg:x="737" fg:w="1"/><text x="60.1200%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.8700%" y="101" width="0.0812%" height="15" fill="rgb(227,192,1)" fg:x="737" fg:w="1"/><text x="60.1200%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.8700%" y="85" width="0.0812%" height="15" fill="rgb(237,180,29)" fg:x="737" fg:w="1"/><text x="60.1200%" y="95.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="59.7076%" y="325" width="0.3249%" height="15" fill="rgb(230,197,35)" fg:x="735" fg:w="4"/><text x="59.9576%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="59.7888%" y="309" width="0.2437%" height="15" fill="rgb(246,193,31)" fg:x="736" fg:w="3"/><text x="60.0388%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="59.7888%" y="293" width="0.2437%" height="15" fill="rgb(241,36,4)" fg:x="736" fg:w="3"/><text x="60.0388%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.9513%" y="277" width="0.0812%" height="15" fill="rgb(241,130,17)" fg:x="738" fg:w="1"/><text x="60.2013%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.9513%" y="261" width="0.0812%" height="15" fill="rgb(206,137,32)" fg:x="738" fg:w="1"/><text x="60.2013%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.9513%" y="245" width="0.0812%" height="15" fill="rgb(237,228,51)" fg:x="738" fg:w="1"/><text x="60.2013%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.9513%" y="229" width="0.0812%" height="15" fill="rgb(243,6,42)" fg:x="738" fg:w="1"/><text x="60.2013%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.9513%" y="213" width="0.0812%" height="15" fill="rgb(251,74,28)" fg:x="738" fg:w="1"/><text x="60.2013%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.9513%" y="197" width="0.0812%" height="15" fill="rgb(218,20,49)" fg:x="738" fg:w="1"/><text x="60.2013%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.9513%" y="181" width="0.0812%" height="15" fill="rgb(238,28,14)" fg:x="738" fg:w="1"/><text x="60.2013%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.9513%" y="165" width="0.0812%" height="15" fill="rgb(229,40,46)" fg:x="738" fg:w="1"/><text x="60.2013%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.9513%" y="149" width="0.0812%" height="15" fill="rgb(244,195,20)" fg:x="738" fg:w="1"/><text x="60.2013%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.9513%" y="133" width="0.0812%" height="15" fill="rgb(253,56,35)" fg:x="738" fg:w="1"/><text x="60.2013%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.9513%" y="117" width="0.0812%" height="15" fill="rgb(210,149,44)" fg:x="738" fg:w="1"/><text x="60.2013%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.9513%" y="101" width="0.0812%" height="15" fill="rgb(240,135,12)" fg:x="738" fg:w="1"/><text x="60.2013%" y="111.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.0325%" y="277" width="0.0812%" height="15" fill="rgb(251,24,50)" fg:x="739" fg:w="1"/><text x="60.2825%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.0325%" y="261" width="0.0812%" height="15" fill="rgb(243,200,47)" fg:x="739" fg:w="1"/><text x="60.2825%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.0325%" y="245" width="0.0812%" height="15" fill="rgb(224,166,26)" fg:x="739" fg:w="1"/><text x="60.2825%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.1137%" y="229" width="0.0812%" height="15" fill="rgb(233,0,47)" fg:x="740" fg:w="1"/><text x="60.3637%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.1137%" y="213" width="0.0812%" height="15" fill="rgb(253,80,5)" fg:x="740" fg:w="1"/><text x="60.3637%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.1137%" y="197" width="0.0812%" height="15" fill="rgb(214,133,25)" fg:x="740" fg:w="1"/><text x="60.3637%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.1137%" y="181" width="0.0812%" height="15" fill="rgb(209,27,14)" fg:x="740" fg:w="1"/><text x="60.3637%" y="191.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="60.1137%" y="165" width="0.0812%" height="15" fill="rgb(219,102,51)" fg:x="740" fg:w="1"/><text x="60.3637%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.1137%" y="149" width="0.0812%" height="15" fill="rgb(237,18,16)" fg:x="740" fg:w="1"/><text x="60.3637%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.1137%" y="133" width="0.0812%" height="15" fill="rgb(241,85,17)" fg:x="740" fg:w="1"/><text x="60.3637%" y="143.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="60.1137%" y="117" width="0.0812%" height="15" fill="rgb(236,90,42)" fg:x="740" fg:w="1"/><text x="60.3637%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.1137%" y="101" width="0.0812%" height="15" fill="rgb(249,57,21)" fg:x="740" fg:w="1"/><text x="60.3637%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.1137%" y="85" width="0.0812%" height="15" fill="rgb(243,12,36)" fg:x="740" fg:w="1"/><text x="60.3637%" y="95.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="60.0325%" y="325" width="0.2437%" height="15" fill="rgb(253,128,47)" fg:x="739" fg:w="3"/><text x="60.2825%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="60.0325%" y="309" width="0.2437%" height="15" fill="rgb(207,33,20)" fg:x="739" fg:w="3"/><text x="60.2825%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="60.0325%" y="293" width="0.2437%" height="15" fill="rgb(233,215,35)" fg:x="739" fg:w="3"/><text x="60.2825%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="60.1137%" y="277" width="0.1625%" height="15" fill="rgb(249,188,52)" fg:x="740" fg:w="2"/><text x="60.3637%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.1137%" y="261" width="0.1625%" height="15" fill="rgb(225,12,32)" fg:x="740" fg:w="2"/><text x="60.3637%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.1137%" y="245" width="0.1625%" height="15" fill="rgb(247,98,14)" fg:x="740" fg:w="2"/><text x="60.3637%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.1950%" y="229" width="0.0812%" height="15" fill="rgb(247,219,48)" fg:x="741" fg:w="1"/><text x="60.4450%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.1950%" y="213" width="0.0812%" height="15" fill="rgb(253,60,48)" fg:x="741" fg:w="1"/><text x="60.4450%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.1950%" y="197" width="0.0812%" height="15" fill="rgb(245,15,52)" fg:x="741" fg:w="1"/><text x="60.4450%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.1950%" y="181" width="0.0812%" height="15" fill="rgb(220,133,28)" fg:x="741" fg:w="1"/><text x="60.4450%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.1950%" y="165" width="0.0812%" height="15" fill="rgb(217,180,4)" fg:x="741" fg:w="1"/><text x="60.4450%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2762%" y="261" width="0.0812%" height="15" fill="rgb(251,24,1)" fg:x="742" fg:w="1"/><text x="60.5262%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2762%" y="245" width="0.0812%" height="15" fill="rgb(212,185,49)" fg:x="742" fg:w="1"/><text x="60.5262%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2762%" y="229" width="0.0812%" height="15" fill="rgb(215,175,22)" fg:x="742" fg:w="1"/><text x="60.5262%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2762%" y="213" width="0.0812%" height="15" fill="rgb(250,205,14)" fg:x="742" fg:w="1"/><text x="60.5262%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2762%" y="197" width="0.0812%" height="15" fill="rgb(225,211,22)" fg:x="742" fg:w="1"/><text x="60.5262%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2762%" y="181" width="0.0812%" height="15" fill="rgb(251,179,42)" fg:x="742" fg:w="1"/><text x="60.5262%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 1.22%)</title><rect x="59.2201%" y="405" width="1.2185%" height="15" fill="rgb(208,216,51)" fg:x="729" fg:w="15"/><text x="59.4701%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.73%)</title><rect x="59.7076%" y="389" width="0.7311%" height="15" fill="rgb(235,36,11)" fg:x="735" fg:w="9"/><text x="59.9576%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.73%)</title><rect x="59.7076%" y="373" width="0.7311%" height="15" fill="rgb(213,189,28)" fg:x="735" fg:w="9"/><text x="59.9576%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.73%)</title><rect x="59.7076%" y="357" width="0.7311%" height="15" fill="rgb(227,203,42)" fg:x="735" fg:w="9"/><text x="59.9576%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.73%)</title><rect x="59.7076%" y="341" width="0.7311%" height="15" fill="rgb(244,72,36)" fg:x="735" fg:w="9"/><text x="59.9576%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="60.2762%" y="325" width="0.1625%" height="15" fill="rgb(213,53,17)" fg:x="742" fg:w="2"/><text x="60.5262%" y="335.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="60.2762%" y="309" width="0.1625%" height="15" fill="rgb(207,167,3)" fg:x="742" fg:w="2"/><text x="60.5262%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="60.2762%" y="293" width="0.1625%" height="15" fill="rgb(216,98,30)" fg:x="742" fg:w="2"/><text x="60.5262%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.2762%" y="277" width="0.1625%" height="15" fill="rgb(236,123,15)" fg:x="742" fg:w="2"/><text x="60.5262%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.3574%" y="261" width="0.0812%" height="15" fill="rgb(248,81,50)" fg:x="743" fg:w="1"/><text x="60.6074%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (401 samples, 32.58%)</title><rect x="27.9448%" y="565" width="32.5751%" height="15" fill="rgb(214,120,4)" fg:x="344" fg:w="401"/><text x="28.1948%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (401 samples, 32.58%)</title><rect x="27.9448%" y="549" width="32.5751%" height="15" fill="rgb(208,179,34)" fg:x="344" fg:w="401"/><text x="28.1948%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (400 samples, 32.49%)</title><rect x="28.0260%" y="533" width="32.4939%" height="15" fill="rgb(227,140,7)" fg:x="345" fg:w="400"/><text x="28.2760%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (400 samples, 32.49%)</title><rect x="28.0260%" y="517" width="32.4939%" height="15" fill="rgb(214,22,6)" fg:x="345" fg:w="400"/><text x="28.2760%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (400 samples, 32.49%)</title><rect x="28.0260%" y="501" width="32.4939%" height="15" fill="rgb(207,137,27)" fg:x="345" fg:w="400"/><text x="28.2760%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (400 samples, 32.49%)</title><rect x="28.0260%" y="485" width="32.4939%" height="15" fill="rgb(210,8,46)" fg:x="345" fg:w="400"/><text x="28.2760%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (400 samples, 32.49%)</title><rect x="28.0260%" y="469" width="32.4939%" height="15" fill="rgb(240,16,54)" fg:x="345" fg:w="400"/><text x="28.2760%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnc..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (400 samples, 32.49%)</title><rect x="28.0260%" y="453" width="32.4939%" height="15" fill="rgb(211,209,29)" fg:x="345" fg:w="400"/><text x="28.2760%" y="463.50">&lt;engine::session::state::State as kernel::actions::Pe..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (400 samples, 32.49%)</title><rect x="28.0260%" y="437" width="32.4939%" height="15" fill="rgb(226,228,24)" fg:x="345" fg:w="400"/><text x="28.2760%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel..</text></g><g><title>plugins_core::looking::model::new_area_observation (393 samples, 31.93%)</title><rect x="28.5946%" y="421" width="31.9253%" height="15" fill="rgb(222,84,9)" fg:x="352" fg:w="393"/><text x="28.8446%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="60.4387%" y="405" width="0.0812%" height="15" fill="rgb(234,203,30)" fg:x="744" fg:w="1"/><text x="60.6887%" y="415.50"></text></g><g><title>plugins_rune::runner::SharedRunners::add_runners_for (1 samples, 0.08%)</title><rect x="60.5199%" y="565" width="0.0812%" height="15" fill="rgb(238,109,14)" fg:x="745" fg:w="1"/><text x="60.7699%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="60.6011%" y="549" width="0.0812%" height="15" fill="rgb(233,206,34)" fg:x="746" fg:w="1"/><text x="60.8511%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.7636%" y="533" width="0.0812%" height="15" fill="rgb(220,167,47)" fg:x="748" fg:w="1"/><text x="61.0136%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="60.8448%" y="517" width="0.1625%" height="15" fill="rgb(238,105,10)" fg:x="749" fg:w="2"/><text x="61.0948%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.8448%" y="501" width="0.1625%" height="15" fill="rgb(213,227,17)" fg:x="749" fg:w="2"/><text x="61.0948%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.9261%" y="485" width="0.0812%" height="15" fill="rgb(217,132,38)" fg:x="750" fg:w="1"/><text x="61.1761%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="60.9261%" y="469" width="0.0812%" height="15" fill="rgb(242,146,4)" fg:x="750" fg:w="1"/><text x="61.1761%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.9261%" y="453" width="0.0812%" height="15" fill="rgb(212,61,9)" fg:x="750" fg:w="1"/><text x="61.1761%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.9261%" y="437" width="0.0812%" height="15" fill="rgb(247,126,22)" fg:x="750" fg:w="1"/><text x="61.1761%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="61.0073%" y="453" width="0.0812%" height="15" fill="rgb(220,196,2)" fg:x="751" fg:w="1"/><text x="61.2573%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.0073%" y="437" width="0.0812%" height="15" fill="rgb(208,46,4)" fg:x="751" fg:w="1"/><text x="61.2573%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0073%" y="421" width="0.0812%" height="15" fill="rgb(252,104,46)" fg:x="751" fg:w="1"/><text x="61.2573%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="61.0073%" y="405" width="0.0812%" height="15" fill="rgb(237,152,48)" fg:x="751" fg:w="1"/><text x="61.2573%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0073%" y="389" width="0.0812%" height="15" fill="rgb(221,59,37)" fg:x="751" fg:w="1"/><text x="61.2573%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.0073%" y="373" width="0.0812%" height="15" fill="rgb(209,202,51)" fg:x="751" fg:w="1"/><text x="61.2573%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.0073%" y="357" width="0.0812%" height="15" fill="rgb(228,81,30)" fg:x="751" fg:w="1"/><text x="61.2573%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.0885%" y="357" width="0.0812%" height="15" fill="rgb(227,42,39)" fg:x="752" fg:w="1"/><text x="61.3385%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.0885%" y="341" width="0.0812%" height="15" fill="rgb(221,26,2)" fg:x="752" fg:w="1"/><text x="61.3385%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="61.0885%" y="325" width="0.0812%" height="15" fill="rgb(254,61,31)" fg:x="752" fg:w="1"/><text x="61.3385%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.0885%" y="309" width="0.0812%" height="15" fill="rgb(222,173,38)" fg:x="752" fg:w="1"/><text x="61.3385%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.0885%" y="293" width="0.0812%" height="15" fill="rgb(218,50,12)" fg:x="752" fg:w="1"/><text x="61.3385%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.1698%" y="357" width="0.0812%" height="15" fill="rgb(223,88,40)" fg:x="753" fg:w="1"/><text x="61.4198%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.1698%" y="341" width="0.0812%" height="15" fill="rgb(237,54,19)" fg:x="753" fg:w="1"/><text x="61.4198%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.1698%" y="325" width="0.0812%" height="15" fill="rgb(251,129,25)" fg:x="753" fg:w="1"/><text x="61.4198%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.1698%" y="309" width="0.0812%" height="15" fill="rgb(238,97,19)" fg:x="753" fg:w="1"/><text x="61.4198%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="61.0885%" y="453" width="0.2437%" height="15" fill="rgb(240,169,18)" fg:x="752" fg:w="3"/><text x="61.3385%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="61.0885%" y="437" width="0.2437%" height="15" fill="rgb(230,187,49)" fg:x="752" fg:w="3"/><text x="61.3385%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="61.0885%" y="421" width="0.2437%" height="15" fill="rgb(209,44,26)" fg:x="752" fg:w="3"/><text x="61.3385%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="61.0885%" y="405" width="0.2437%" height="15" fill="rgb(244,0,6)" fg:x="752" fg:w="3"/><text x="61.3385%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="61.0885%" y="389" width="0.2437%" height="15" fill="rgb(248,18,21)" fg:x="752" fg:w="3"/><text x="61.3385%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="61.0885%" y="373" width="0.2437%" height="15" fill="rgb(245,180,19)" fg:x="752" fg:w="3"/><text x="61.3385%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.2510%" y="357" width="0.0812%" height="15" fill="rgb(252,118,36)" fg:x="754" fg:w="1"/><text x="61.5010%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.2510%" y="341" width="0.0812%" height="15" fill="rgb(210,224,19)" fg:x="754" fg:w="1"/><text x="61.5010%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.2510%" y="325" width="0.0812%" height="15" fill="rgb(218,30,24)" fg:x="754" fg:w="1"/><text x="61.5010%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.2510%" y="309" width="0.0812%" height="15" fill="rgb(219,75,50)" fg:x="754" fg:w="1"/><text x="61.5010%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.2510%" y="293" width="0.0812%" height="15" fill="rgb(234,72,50)" fg:x="754" fg:w="1"/><text x="61.5010%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.3323%" y="309" width="0.0812%" height="15" fill="rgb(219,100,48)" fg:x="755" fg:w="1"/><text x="61.5823%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.3323%" y="293" width="0.0812%" height="15" fill="rgb(253,5,41)" fg:x="755" fg:w="1"/><text x="61.5823%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.3323%" y="277" width="0.0812%" height="15" fill="rgb(247,181,11)" fg:x="755" fg:w="1"/><text x="61.5823%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.3323%" y="261" width="0.0812%" height="15" fill="rgb(222,223,25)" fg:x="755" fg:w="1"/><text x="61.5823%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.3323%" y="325" width="0.1625%" height="15" fill="rgb(214,198,28)" fg:x="755" fg:w="2"/><text x="61.5823%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.4135%" y="309" width="0.0812%" height="15" fill="rgb(230,46,43)" fg:x="756" fg:w="1"/><text x="61.6635%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.4135%" y="293" width="0.0812%" height="15" fill="rgb(233,65,53)" fg:x="756" fg:w="1"/><text x="61.6635%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.4135%" y="277" width="0.0812%" height="15" fill="rgb(221,121,27)" fg:x="756" fg:w="1"/><text x="61.6635%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.4135%" y="261" width="0.0812%" height="15" fill="rgb(247,70,47)" fg:x="756" fg:w="1"/><text x="61.6635%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="61.3323%" y="357" width="0.2437%" height="15" fill="rgb(228,85,35)" fg:x="755" fg:w="3"/><text x="61.5823%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="61.3323%" y="341" width="0.2437%" height="15" fill="rgb(209,50,18)" fg:x="755" fg:w="3"/><text x="61.5823%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.4947%" y="325" width="0.0812%" height="15" fill="rgb(250,19,35)" fg:x="757" fg:w="1"/><text x="61.7447%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.4947%" y="309" width="0.0812%" height="15" fill="rgb(253,107,29)" fg:x="757" fg:w="1"/><text x="61.7447%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4947%" y="293" width="0.0812%" height="15" fill="rgb(252,179,29)" fg:x="757" fg:w="1"/><text x="61.7447%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="61.3323%" y="389" width="0.3249%" height="15" fill="rgb(238,194,6)" fg:x="755" fg:w="4"/><text x="61.5823%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="61.3323%" y="373" width="0.3249%" height="15" fill="rgb(238,164,29)" fg:x="755" fg:w="4"/><text x="61.5823%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.5760%" y="357" width="0.0812%" height="15" fill="rgb(224,25,9)" fg:x="758" fg:w="1"/><text x="61.8260%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.5760%" y="341" width="0.0812%" height="15" fill="rgb(244,153,23)" fg:x="758" fg:w="1"/><text x="61.8260%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="61.5760%" y="325" width="0.0812%" height="15" fill="rgb(212,203,14)" fg:x="758" fg:w="1"/><text x="61.8260%" y="335.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.73%)</title><rect x="61.0073%" y="517" width="0.7311%" height="15" fill="rgb(220,164,20)" fg:x="751" fg:w="9"/><text x="61.2573%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.73%)</title><rect x="61.0073%" y="501" width="0.7311%" height="15" fill="rgb(222,203,48)" fg:x="751" fg:w="9"/><text x="61.2573%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.73%)</title><rect x="61.0073%" y="485" width="0.7311%" height="15" fill="rgb(215,159,22)" fg:x="751" fg:w="9"/><text x="61.2573%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.73%)</title><rect x="61.0073%" y="469" width="0.7311%" height="15" fill="rgb(216,183,47)" fg:x="751" fg:w="9"/><text x="61.2573%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.41%)</title><rect x="61.3323%" y="453" width="0.4062%" height="15" fill="rgb(229,195,25)" fg:x="755" fg:w="5"/><text x="61.5823%" y="463.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.41%)</title><rect x="61.3323%" y="437" width="0.4062%" height="15" fill="rgb(224,132,51)" fg:x="755" fg:w="5"/><text x="61.5823%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="61.3323%" y="421" width="0.4062%" height="15" fill="rgb(240,63,7)" fg:x="755" fg:w="5"/><text x="61.5823%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="61.3323%" y="405" width="0.4062%" height="15" fill="rgb(249,182,41)" fg:x="755" fg:w="5"/><text x="61.5823%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.6572%" y="389" width="0.0812%" height="15" fill="rgb(243,47,26)" fg:x="759" fg:w="1"/><text x="61.9072%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.6572%" y="373" width="0.0812%" height="15" fill="rgb(233,48,2)" fg:x="759" fg:w="1"/><text x="61.9072%" y="383.50"></text></g><g><title>plugins_core::tools::contained_by (12 samples, 0.97%)</title><rect x="60.8448%" y="533" width="0.9748%" height="15" fill="rgb(244,165,34)" fg:x="749" fg:w="12"/><text x="61.0948%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.7384%" y="517" width="0.0812%" height="15" fill="rgb(207,89,7)" fg:x="760" fg:w="1"/><text x="61.9884%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.9821%" y="501" width="0.0812%" height="15" fill="rgb(244,117,36)" fg:x="763" fg:w="1"/><text x="62.2321%" y="511.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.1446%" y="421" width="0.0812%" height="15" fill="rgb(226,144,34)" fg:x="765" fg:w="1"/><text x="62.3946%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.1446%" y="405" width="0.0812%" height="15" fill="rgb(213,23,19)" fg:x="765" fg:w="1"/><text x="62.3946%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.1446%" y="389" width="0.0812%" height="15" fill="rgb(217,75,12)" fg:x="765" fg:w="1"/><text x="62.3946%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.1446%" y="373" width="0.0812%" height="15" fill="rgb(224,159,17)" fg:x="765" fg:w="1"/><text x="62.3946%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.1446%" y="357" width="0.0812%" height="15" fill="rgb(217,118,1)" fg:x="765" fg:w="1"/><text x="62.3946%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="61.9821%" y="517" width="0.3249%" height="15" fill="rgb(232,180,48)" fg:x="763" fg:w="4"/><text x="62.2321%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="62.0634%" y="501" width="0.2437%" height="15" fill="rgb(230,27,33)" fg:x="764" fg:w="3"/><text x="62.3134%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="62.0634%" y="485" width="0.2437%" height="15" fill="rgb(205,31,21)" fg:x="764" fg:w="3"/><text x="62.3134%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="62.1446%" y="469" width="0.1625%" height="15" fill="rgb(253,59,4)" fg:x="765" fg:w="2"/><text x="62.3946%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="62.1446%" y="453" width="0.1625%" height="15" fill="rgb(224,201,9)" fg:x="765" fg:w="2"/><text x="62.3946%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="62.1446%" y="437" width="0.1625%" height="15" fill="rgb(229,206,30)" fg:x="765" fg:w="2"/><text x="62.3946%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2258%" y="421" width="0.0812%" height="15" fill="rgb(212,67,47)" fg:x="766" fg:w="1"/><text x="62.4758%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2258%" y="405" width="0.0812%" height="15" fill="rgb(211,96,50)" fg:x="766" fg:w="1"/><text x="62.4758%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="62.3071%" y="517" width="0.0812%" height="15" fill="rgb(252,114,18)" fg:x="767" fg:w="1"/><text x="62.5571%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="62.3071%" y="501" width="0.0812%" height="15" fill="rgb(223,58,37)" fg:x="767" fg:w="1"/><text x="62.5571%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="62.3071%" y="485" width="0.0812%" height="15" fill="rgb(237,70,4)" fg:x="767" fg:w="1"/><text x="62.5571%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="62.3071%" y="469" width="0.0812%" height="15" fill="rgb(244,85,46)" fg:x="767" fg:w="1"/><text x="62.5571%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="62.3071%" y="453" width="0.0812%" height="15" fill="rgb(223,39,52)" fg:x="767" fg:w="1"/><text x="62.5571%" y="463.50"></text></g><g><title>plugins_core::tools::occupied_by (8 samples, 0.65%)</title><rect x="61.8197%" y="533" width="0.6499%" height="15" fill="rgb(218,200,14)" fg:x="761" fg:w="8"/><text x="62.0697%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="62.3883%" y="517" width="0.0812%" height="15" fill="rgb(208,171,16)" fg:x="768" fg:w="1"/><text x="62.6383%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Route&gt; (1 samples, 0.08%)</title><rect x="62.3883%" y="501" width="0.0812%" height="15" fill="rgb(234,200,18)" fg:x="768" fg:w="1"/><text x="62.6383%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.3883%" y="485" width="0.0812%" height="15" fill="rgb(228,45,11)" fg:x="768" fg:w="1"/><text x="62.6383%" y="495.50"></text></g><g><title>engine::session::Session::captured (448 samples, 36.39%)</title><rect x="26.1576%" y="709" width="36.3932%" height="15" fill="rgb(237,182,11)" fg:x="322" fg:w="448"/><text x="26.4076%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (443 samples, 35.99%)</title><rect x="26.5638%" y="693" width="35.9870%" height="15" fill="rgb(241,175,49)" fg:x="327" fg:w="443"/><text x="26.8138%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (442 samples, 35.91%)</title><rect x="26.6450%" y="677" width="35.9058%" height="15" fill="rgb(247,38,35)" fg:x="328" fg:w="442"/><text x="26.8950%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (442 samples, 35.91%)</title><rect x="26.6450%" y="661" width="35.9058%" height="15" fill="rgb(228,39,49)" fg:x="328" fg:w="442"/><text x="26.8950%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::..</text></g><g><title>kernel::plugins::mw::apply_middleware (442 samples, 35.91%)</title><rect x="26.6450%" y="645" width="35.9058%" height="15" fill="rgb(226,101,26)" fg:x="328" fg:w="442"/><text x="26.8950%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (442 samples, 35.91%)</title><rect x="26.6450%" y="629" width="35.9058%" height="15" fill="rgb(206,141,19)" fg:x="328" fg:w="442"/><text x="26.8950%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (442 samples, 35.91%)</title><rect x="26.6450%" y="613" width="35.9058%" height="15" fill="rgb(211,200,13)" fg:x="328" fg:w="442"/><text x="26.8950%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (426 samples, 34.61%)</title><rect x="27.9448%" y="597" width="34.6060%" height="15" fill="rgb(241,121,6)" fg:x="344" fg:w="426"/><text x="28.1948%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (426 samples, 34.61%)</title><rect x="27.9448%" y="581" width="34.6060%" height="15" fill="rgb(234,221,29)" fg:x="344" fg:w="426"/><text x="28.1948%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Mi..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (24 samples, 1.95%)</title><rect x="60.6011%" y="565" width="1.9496%" height="15" fill="rgb(229,136,5)" fg:x="746" fg:w="24"/><text x="60.8511%" y="575.50">p..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (23 samples, 1.87%)</title><rect x="60.6824%" y="549" width="1.8684%" height="15" fill="rgb(238,36,11)" fg:x="747" fg:w="23"/><text x="60.9324%" y="559.50">p..</text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="62.4695%" y="533" width="0.0812%" height="15" fill="rgb(251,55,41)" fg:x="769" fg:w="1"/><text x="62.7195%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="62.4695%" y="517" width="0.0812%" height="15" fill="rgb(242,34,40)" fg:x="769" fg:w="1"/><text x="62.7195%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="62.4695%" y="501" width="0.0812%" height="15" fill="rgb(215,42,17)" fg:x="769" fg:w="1"/><text x="62.7195%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.4695%" y="485" width="0.0812%" height="15" fill="rgb(207,44,46)" fg:x="769" fg:w="1"/><text x="62.7195%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="62.4695%" y="469" width="0.0812%" height="15" fill="rgb(211,206,28)" fg:x="769" fg:w="1"/><text x="62.7195%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5508%" y="613" width="0.0812%" height="15" fill="rgb(237,167,16)" fg:x="770" fg:w="1"/><text x="62.8008%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5508%" y="597" width="0.0812%" height="15" fill="rgb(233,66,6)" fg:x="770" fg:w="1"/><text x="62.8008%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5508%" y="581" width="0.0812%" height="15" fill="rgb(246,123,29)" fg:x="770" fg:w="1"/><text x="62.8008%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.5508%" y="565" width="0.0812%" height="15" fill="rgb(209,62,40)" fg:x="770" fg:w="1"/><text x="62.8008%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="62.7132%" y="517" width="0.0812%" height="15" fill="rgb(218,4,25)" fg:x="772" fg:w="1"/><text x="62.9632%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="62.7132%" y="501" width="0.0812%" height="15" fill="rgb(253,91,49)" fg:x="772" fg:w="1"/><text x="62.9632%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="62.7132%" y="485" width="0.0812%" height="15" fill="rgb(228,155,29)" fg:x="772" fg:w="1"/><text x="62.9632%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="62.6320%" y="613" width="0.3249%" height="15" fill="rgb(243,57,37)" fg:x="771" fg:w="4"/><text x="62.8820%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="62.6320%" y="597" width="0.3249%" height="15" fill="rgb(244,167,17)" fg:x="771" fg:w="4"/><text x="62.8820%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="62.6320%" y="581" width="0.3249%" height="15" fill="rgb(207,181,38)" fg:x="771" fg:w="4"/><text x="62.8820%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="62.6320%" y="565" width="0.3249%" height="15" fill="rgb(211,8,23)" fg:x="771" fg:w="4"/><text x="62.8820%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="62.6320%" y="549" width="0.3249%" height="15" fill="rgb(235,11,44)" fg:x="771" fg:w="4"/><text x="62.8820%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="62.6320%" y="533" width="0.3249%" height="15" fill="rgb(248,18,52)" fg:x="771" fg:w="4"/><text x="62.8820%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.7945%" y="517" width="0.1625%" height="15" fill="rgb(208,4,7)" fg:x="773" fg:w="2"/><text x="63.0445%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.7945%" y="501" width="0.1625%" height="15" fill="rgb(240,17,39)" fg:x="773" fg:w="2"/><text x="63.0445%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="62.7945%" y="485" width="0.1625%" height="15" fill="rgb(207,170,3)" fg:x="773" fg:w="2"/><text x="63.0445%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="62.7945%" y="469" width="0.1625%" height="15" fill="rgb(236,100,52)" fg:x="773" fg:w="2"/><text x="63.0445%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (2 samples, 0.16%)</title><rect x="62.7945%" y="453" width="0.1625%" height="15" fill="rgb(246,78,51)" fg:x="773" fg:w="2"/><text x="63.0445%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (2 samples, 0.16%)</title><rect x="62.7945%" y="437" width="0.1625%" height="15" fill="rgb(211,17,15)" fg:x="773" fg:w="2"/><text x="63.0445%" y="447.50"></text></g><g><title>serde_json::error::make_error (2 samples, 0.16%)</title><rect x="62.7945%" y="421" width="0.1625%" height="15" fill="rgb(209,59,46)" fg:x="773" fg:w="2"/><text x="63.0445%" y="431.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.08%)</title><rect x="62.8757%" y="405" width="0.0812%" height="15" fill="rgb(210,92,25)" fg:x="774" fg:w="1"/><text x="63.1257%" y="415.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.08%)</title><rect x="62.8757%" y="389" width="0.0812%" height="15" fill="rgb(238,174,52)" fg:x="774" fg:w="1"/><text x="63.1257%" y="399.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (1 samples, 0.08%)</title><rect x="62.8757%" y="373" width="0.0812%" height="15" fill="rgb(230,73,7)" fg:x="774" fg:w="1"/><text x="63.1257%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="62.5508%" y="661" width="0.4874%" height="15" fill="rgb(243,124,40)" fg:x="770" fg:w="6"/><text x="62.8008%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="62.5508%" y="645" width="0.4874%" height="15" fill="rgb(244,170,11)" fg:x="770" fg:w="6"/><text x="62.8008%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.49%)</title><rect x="62.5508%" y="629" width="0.4874%" height="15" fill="rgb(207,114,54)" fg:x="770" fg:w="6"/><text x="62.8008%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.9569%" y="613" width="0.0812%" height="15" fill="rgb(205,42,20)" fg:x="775" fg:w="1"/><text x="63.2069%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9569%" y="597" width="0.0812%" height="15" fill="rgb(230,30,28)" fg:x="775" fg:w="1"/><text x="63.2069%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.9569%" y="581" width="0.0812%" height="15" fill="rgb(205,73,54)" fg:x="775" fg:w="1"/><text x="63.2069%" y="591.50"></text></g><g><title>engine::session::internal::Added::find_refs (8 samples, 0.65%)</title><rect x="62.5508%" y="693" width="0.6499%" height="15" fill="rgb(254,227,23)" fg:x="770" fg:w="8"/><text x="62.8008%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.65%)</title><rect x="62.5508%" y="677" width="0.6499%" height="15" fill="rgb(228,202,34)" fg:x="770" fg:w="8"/><text x="62.8008%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="63.0382%" y="661" width="0.1625%" height="15" fill="rgb(222,225,37)" fg:x="776" fg:w="2"/><text x="63.2882%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.0382%" y="645" width="0.1625%" height="15" fill="rgb(221,14,54)" fg:x="776" fg:w="2"/><text x="63.2882%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.0382%" y="629" width="0.1625%" height="15" fill="rgb(254,102,2)" fg:x="776" fg:w="2"/><text x="63.2882%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="63.2819%" y="677" width="0.3249%" height="15" fill="rgb(232,104,17)" fg:x="779" fg:w="4"/><text x="63.5319%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="63.2819%" y="661" width="0.3249%" height="15" fill="rgb(250,220,14)" fg:x="779" fg:w="4"/><text x="63.5319%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.5256%" y="645" width="0.0812%" height="15" fill="rgb(241,158,9)" fg:x="782" fg:w="1"/><text x="63.7756%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.5256%" y="629" width="0.0812%" height="15" fill="rgb(246,9,43)" fg:x="782" fg:w="1"/><text x="63.7756%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.5256%" y="613" width="0.0812%" height="15" fill="rgb(206,73,33)" fg:x="782" fg:w="1"/><text x="63.7756%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.5256%" y="597" width="0.0812%" height="15" fill="rgb(222,79,8)" fg:x="782" fg:w="1"/><text x="63.7756%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.5256%" y="581" width="0.0812%" height="15" fill="rgb(234,8,54)" fg:x="782" fg:w="1"/><text x="63.7756%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.5256%" y="565" width="0.0812%" height="15" fill="rgb(209,134,38)" fg:x="782" fg:w="1"/><text x="63.7756%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.5256%" y="549" width="0.0812%" height="15" fill="rgb(230,127,29)" fg:x="782" fg:w="1"/><text x="63.7756%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.5256%" y="533" width="0.0812%" height="15" fill="rgb(242,44,41)" fg:x="782" fg:w="1"/><text x="63.7756%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.5256%" y="517" width="0.0812%" height="15" fill="rgb(222,56,43)" fg:x="782" fg:w="1"/><text x="63.7756%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.5256%" y="501" width="0.0812%" height="15" fill="rgb(238,39,47)" fg:x="782" fg:w="1"/><text x="63.7756%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.5256%" y="485" width="0.0812%" height="15" fill="rgb(226,79,43)" fg:x="782" fg:w="1"/><text x="63.7756%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.5256%" y="469" width="0.0812%" height="15" fill="rgb(242,105,53)" fg:x="782" fg:w="1"/><text x="63.7756%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.5256%" y="453" width="0.0812%" height="15" fill="rgb(251,132,46)" fg:x="782" fg:w="1"/><text x="63.7756%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.5256%" y="437" width="0.0812%" height="15" fill="rgb(231,77,14)" fg:x="782" fg:w="1"/><text x="63.7756%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.5256%" y="421" width="0.0812%" height="15" fill="rgb(240,135,9)" fg:x="782" fg:w="1"/><text x="63.7756%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.6881%" y="581" width="0.0812%" height="15" fill="rgb(248,109,14)" fg:x="784" fg:w="1"/><text x="63.9381%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.6881%" y="565" width="0.0812%" height="15" fill="rgb(227,146,52)" fg:x="784" fg:w="1"/><text x="63.9381%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.6881%" y="549" width="0.0812%" height="15" fill="rgb(232,54,3)" fg:x="784" fg:w="1"/><text x="63.9381%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.6881%" y="533" width="0.0812%" height="15" fill="rgb(229,201,43)" fg:x="784" fg:w="1"/><text x="63.9381%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.6881%" y="517" width="0.0812%" height="15" fill="rgb(252,161,33)" fg:x="784" fg:w="1"/><text x="63.9381%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.6881%" y="501" width="0.0812%" height="15" fill="rgb(226,146,40)" fg:x="784" fg:w="1"/><text x="63.9381%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.6881%" y="485" width="0.0812%" height="15" fill="rgb(219,47,25)" fg:x="784" fg:w="1"/><text x="63.9381%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="63.6068%" y="677" width="0.2437%" height="15" fill="rgb(250,135,13)" fg:x="783" fg:w="3"/><text x="63.8568%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="63.6068%" y="661" width="0.2437%" height="15" fill="rgb(219,229,18)" fg:x="783" fg:w="3"/><text x="63.8568%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="63.6068%" y="645" width="0.2437%" height="15" fill="rgb(217,152,27)" fg:x="783" fg:w="3"/><text x="63.8568%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="63.6881%" y="629" width="0.1625%" height="15" fill="rgb(225,71,47)" fg:x="784" fg:w="2"/><text x="63.9381%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.6881%" y="613" width="0.1625%" height="15" fill="rgb(220,139,14)" fg:x="784" fg:w="2"/><text x="63.9381%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="63.6881%" y="597" width="0.1625%" height="15" fill="rgb(247,54,32)" fg:x="784" fg:w="2"/><text x="63.9381%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="63.7693%" y="581" width="0.0812%" height="15" fill="rgb(252,131,39)" fg:x="785" fg:w="1"/><text x="64.0193%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.7693%" y="565" width="0.0812%" height="15" fill="rgb(210,108,39)" fg:x="785" fg:w="1"/><text x="64.0193%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="63.7693%" y="549" width="0.0812%" height="15" fill="rgb(205,23,29)" fg:x="785" fg:w="1"/><text x="64.0193%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.7693%" y="533" width="0.0812%" height="15" fill="rgb(246,139,46)" fg:x="785" fg:w="1"/><text x="64.0193%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.9318%" y="533" width="0.0812%" height="15" fill="rgb(250,81,26)" fg:x="787" fg:w="1"/><text x="64.1818%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.9318%" y="517" width="0.0812%" height="15" fill="rgb(214,104,7)" fg:x="787" fg:w="1"/><text x="64.1818%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.9318%" y="501" width="0.0812%" height="15" fill="rgb(233,189,8)" fg:x="787" fg:w="1"/><text x="64.1818%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="63.9318%" y="485" width="0.0812%" height="15" fill="rgb(228,141,17)" fg:x="787" fg:w="1"/><text x="64.1818%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.9318%" y="565" width="0.1625%" height="15" fill="rgb(247,157,1)" fg:x="787" fg:w="2"/><text x="64.1818%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="63.9318%" y="549" width="0.1625%" height="15" fill="rgb(249,225,5)" fg:x="787" fg:w="2"/><text x="64.1818%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.0130%" y="533" width="0.0812%" height="15" fill="rgb(242,55,13)" fg:x="788" fg:w="1"/><text x="64.2630%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.0130%" y="517" width="0.0812%" height="15" fill="rgb(230,49,50)" fg:x="788" fg:w="1"/><text x="64.2630%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="63.9318%" y="581" width="0.2437%" height="15" fill="rgb(241,111,38)" fg:x="787" fg:w="3"/><text x="64.1818%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0942%" y="565" width="0.0812%" height="15" fill="rgb(252,155,4)" fg:x="789" fg:w="1"/><text x="64.3442%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="63.9318%" y="597" width="0.3249%" height="15" fill="rgb(212,69,32)" fg:x="787" fg:w="4"/><text x="64.1818%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.1755%" y="581" width="0.0812%" height="15" fill="rgb(243,107,47)" fg:x="790" fg:w="1"/><text x="64.4255%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.1755%" y="565" width="0.0812%" height="15" fill="rgb(247,130,12)" fg:x="790" fg:w="1"/><text x="64.4255%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="63.8505%" y="613" width="0.4874%" height="15" fill="rgb(233,74,16)" fg:x="786" fg:w="6"/><text x="64.1005%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2567%" y="597" width="0.0812%" height="15" fill="rgb(208,58,18)" fg:x="791" fg:w="1"/><text x="64.5067%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (23 samples, 1.87%)</title><rect x="62.5508%" y="709" width="1.8684%" height="15" fill="rgb(242,225,1)" fg:x="770" fg:w="23"/><text x="62.8008%" y="719.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.22%)</title><rect x="63.2006%" y="693" width="1.2185%" height="15" fill="rgb(249,39,40)" fg:x="778" fg:w="15"/><text x="63.4506%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.57%)</title><rect x="63.8505%" y="677" width="0.5686%" height="15" fill="rgb(207,72,44)" fg:x="786" fg:w="7"/><text x="64.1005%" y="687.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.57%)</title><rect x="63.8505%" y="661" width="0.5686%" height="15" fill="rgb(215,193,12)" fg:x="786" fg:w="7"/><text x="64.1005%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="63.8505%" y="645" width="0.5686%" height="15" fill="rgb(248,41,39)" fg:x="786" fg:w="7"/><text x="64.1005%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.57%)</title><rect x="63.8505%" y="629" width="0.5686%" height="15" fill="rgb(253,85,4)" fg:x="786" fg:w="7"/><text x="64.1005%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.3379%" y="613" width="0.0812%" height="15" fill="rgb(243,70,31)" fg:x="792" fg:w="1"/><text x="64.5879%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.4192%" y="677" width="0.0812%" height="15" fill="rgb(253,195,26)" fg:x="793" fg:w="1"/><text x="64.6692%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.4192%" y="661" width="0.0812%" height="15" fill="rgb(243,42,11)" fg:x="793" fg:w="1"/><text x="64.6692%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.4192%" y="645" width="0.0812%" height="15" fill="rgb(239,66,17)" fg:x="793" fg:w="1"/><text x="64.6692%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="64.5816%" y="613" width="0.2437%" height="15" fill="rgb(217,132,21)" fg:x="795" fg:w="3"/><text x="64.8316%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.24%)</title><rect x="64.5816%" y="597" width="0.2437%" height="15" fill="rgb(252,202,21)" fg:x="795" fg:w="3"/><text x="64.8316%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="64.7441%" y="581" width="0.0812%" height="15" fill="rgb(233,98,36)" fg:x="797" fg:w="1"/><text x="64.9941%" y="591.50"></text></g><g><title>engine::users::model::username_to_key (6 samples, 0.49%)</title><rect x="64.4192%" y="709" width="0.4874%" height="15" fill="rgb(216,153,54)" fg:x="793" fg:w="6"/><text x="64.6692%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="64.4192%" y="693" width="0.4874%" height="15" fill="rgb(250,99,7)" fg:x="793" fg:w="6"/><text x="64.6692%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="64.5004%" y="677" width="0.4062%" height="15" fill="rgb(207,56,50)" fg:x="794" fg:w="5"/><text x="64.7504%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="64.5004%" y="661" width="0.4062%" height="15" fill="rgb(244,61,34)" fg:x="794" fg:w="5"/><text x="64.7504%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="64.5816%" y="645" width="0.3249%" height="15" fill="rgb(241,50,38)" fg:x="795" fg:w="4"/><text x="64.8316%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="64.5816%" y="629" width="0.3249%" height="15" fill="rgb(212,166,30)" fg:x="795" fg:w="4"/><text x="64.8316%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.8253%" y="613" width="0.0812%" height="15" fill="rgb(249,127,32)" fg:x="798" fg:w="1"/><text x="65.0753%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9066%" y="661" width="0.0812%" height="15" fill="rgb(209,103,0)" fg:x="799" fg:w="1"/><text x="65.1566%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9066%" y="645" width="0.0812%" height="15" fill="rgb(238,209,51)" fg:x="799" fg:w="1"/><text x="65.1566%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9066%" y="629" width="0.0812%" height="15" fill="rgb(237,56,23)" fg:x="799" fg:w="1"/><text x="65.1566%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="64.9878%" y="661" width="0.0812%" height="15" fill="rgb(215,153,46)" fg:x="800" fg:w="1"/><text x="65.2378%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.9878%" y="645" width="0.0812%" height="15" fill="rgb(224,49,31)" fg:x="800" fg:w="1"/><text x="65.2378%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9878%" y="629" width="0.0812%" height="15" fill="rgb(250,18,42)" fg:x="800" fg:w="1"/><text x="65.2378%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.9878%" y="613" width="0.0812%" height="15" fill="rgb(215,176,39)" fg:x="800" fg:w="1"/><text x="65.2378%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9878%" y="597" width="0.0812%" height="15" fill="rgb(223,77,29)" fg:x="800" fg:w="1"/><text x="65.2378%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.9878%" y="581" width="0.0812%" height="15" fill="rgb(234,94,52)" fg:x="800" fg:w="1"/><text x="65.2378%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9878%" y="565" width="0.0812%" height="15" fill="rgb(220,154,50)" fg:x="800" fg:w="1"/><text x="65.2378%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.9878%" y="549" width="0.0812%" height="15" fill="rgb(212,11,10)" fg:x="800" fg:w="1"/><text x="65.2378%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.9878%" y="533" width="0.0812%" height="15" fill="rgb(205,166,19)" fg:x="800" fg:w="1"/><text x="65.2378%" y="543.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="65.0690%" y="661" width="0.0812%" height="15" fill="rgb(244,198,16)" fg:x="801" fg:w="1"/><text x="65.3190%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.0690%" y="645" width="0.0812%" height="15" fill="rgb(219,69,12)" fg:x="801" fg:w="1"/><text x="65.3190%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1503%" y="613" width="0.0812%" height="15" fill="rgb(245,30,7)" fg:x="802" fg:w="1"/><text x="65.4003%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.2315%" y="581" width="0.0812%" height="15" fill="rgb(218,221,48)" fg:x="803" fg:w="1"/><text x="65.4815%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="65.1503%" y="661" width="0.3249%" height="15" fill="rgb(216,66,15)" fg:x="802" fg:w="4"/><text x="65.4003%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="65.1503%" y="645" width="0.3249%" height="15" fill="rgb(226,122,50)" fg:x="802" fg:w="4"/><text x="65.4003%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="65.1503%" y="629" width="0.3249%" height="15" fill="rgb(239,156,16)" fg:x="802" fg:w="4"/><text x="65.4003%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="65.2315%" y="613" width="0.2437%" height="15" fill="rgb(224,27,38)" fg:x="803" fg:w="3"/><text x="65.4815%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="65.2315%" y="597" width="0.2437%" height="15" fill="rgb(224,39,27)" fg:x="803" fg:w="3"/><text x="65.4815%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="65.3128%" y="581" width="0.1625%" height="15" fill="rgb(215,92,29)" fg:x="804" fg:w="2"/><text x="65.5628%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="65.3128%" y="565" width="0.1625%" height="15" fill="rgb(207,159,16)" fg:x="804" fg:w="2"/><text x="65.5628%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.3128%" y="549" width="0.1625%" height="15" fill="rgb(238,163,47)" fg:x="804" fg:w="2"/><text x="65.5628%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.3940%" y="533" width="0.0812%" height="15" fill="rgb(219,91,49)" fg:x="805" fg:w="1"/><text x="65.6440%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.3940%" y="517" width="0.0812%" height="15" fill="rgb(227,167,31)" fg:x="805" fg:w="1"/><text x="65.6440%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.3940%" y="501" width="0.0812%" height="15" fill="rgb(234,80,54)" fg:x="805" fg:w="1"/><text x="65.6440%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (807 samples, 65.56%)</title><rect x="0.0000%" y="789" width="65.5565%" height="15" fill="rgb(212,114,2)" fg:x="0" fg:w="807"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (807 samples, 65.56%)</title><rect x="0.0000%" y="773" width="65.5565%" height="15" fill="rgb(234,50,24)" fg:x="0" fg:w="807"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (807 samples, 65.56%)</title><rect x="0.0000%" y="757" width="65.5565%" height="15" fill="rgb(221,68,8)" fg:x="0" fg:w="807"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (487 samples, 39.56%)</title><rect x="25.9951%" y="741" width="39.5613%" height="15" fill="rgb(254,180,31)" fg:x="320" fg:w="487"/><text x="26.2451%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (487 samples, 39.56%)</title><rect x="25.9951%" y="725" width="39.5613%" height="15" fill="rgb(247,130,50)" fg:x="320" fg:w="487"/><text x="26.2451%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (8 samples, 0.65%)</title><rect x="64.9066%" y="709" width="0.6499%" height="15" fill="rgb(211,109,4)" fg:x="799" fg:w="8"/><text x="65.1566%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.65%)</title><rect x="64.9066%" y="693" width="0.6499%" height="15" fill="rgb(238,50,21)" fg:x="799" fg:w="8"/><text x="65.1566%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.65%)</title><rect x="64.9066%" y="677" width="0.6499%" height="15" fill="rgb(225,57,45)" fg:x="799" fg:w="8"/><text x="65.1566%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="65.4752%" y="661" width="0.0812%" height="15" fill="rgb(209,196,50)" fg:x="806" fg:w="1"/><text x="65.7252%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="65.4752%" y="645" width="0.0812%" height="15" fill="rgb(242,140,13)" fg:x="806" fg:w="1"/><text x="65.7252%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.4752%" y="629" width="0.0812%" height="15" fill="rgb(217,111,7)" fg:x="806" fg:w="1"/><text x="65.7252%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.4752%" y="613" width="0.0812%" height="15" fill="rgb(253,193,51)" fg:x="806" fg:w="1"/><text x="65.7252%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.4752%" y="597" width="0.0812%" height="15" fill="rgb(252,70,29)" fg:x="806" fg:w="1"/><text x="65.7252%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.4752%" y="581" width="0.0812%" height="15" fill="rgb(232,127,12)" fg:x="806" fg:w="1"/><text x="65.7252%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.4752%" y="565" width="0.0812%" height="15" fill="rgb(211,180,21)" fg:x="806" fg:w="1"/><text x="65.7252%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4752%" y="549" width="0.0812%" height="15" fill="rgb(229,72,13)" fg:x="806" fg:w="1"/><text x="65.7252%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.7189%" y="693" width="0.0812%" height="15" fill="rgb(240,211,49)" fg:x="809" fg:w="1"/><text x="65.9689%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="65.7189%" y="677" width="0.0812%" height="15" fill="rgb(219,149,40)" fg:x="809" fg:w="1"/><text x="65.9689%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.7189%" y="661" width="0.0812%" height="15" fill="rgb(210,127,46)" fg:x="809" fg:w="1"/><text x="65.9689%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="65.5565%" y="725" width="0.3249%" height="15" fill="rgb(220,106,7)" fg:x="807" fg:w="4"/><text x="65.8065%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="65.5565%" y="709" width="0.3249%" height="15" fill="rgb(249,31,22)" fg:x="807" fg:w="4"/><text x="65.8065%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynamicPlugin&gt; (1 samples, 0.08%)</title><rect x="65.8002%" y="693" width="0.0812%" height="15" fill="rgb(253,1,49)" fg:x="810" fg:w="1"/><text x="66.0502%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.8002%" y="677" width="0.0812%" height="15" fill="rgb(227,144,33)" fg:x="810" fg:w="1"/><text x="66.0502%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.9626%" y="613" width="0.0812%" height="15" fill="rgb(249,163,44)" fg:x="812" fg:w="1"/><text x="66.2126%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.9626%" y="597" width="0.0812%" height="15" fill="rgb(234,15,39)" fg:x="812" fg:w="1"/><text x="66.2126%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="66.1251%" y="565" width="0.1625%" height="15" fill="rgb(207,66,16)" fg:x="814" fg:w="2"/><text x="66.3751%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4 samples, 0.32%)</title><rect x="66.0439%" y="597" width="0.3249%" height="15" fill="rgb(233,112,24)" fg:x="813" fg:w="4"/><text x="66.2939%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="66.1251%" y="581" width="0.2437%" height="15" fill="rgb(230,90,22)" fg:x="814" fg:w="3"/><text x="66.3751%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.2876%" y="565" width="0.0812%" height="15" fill="rgb(229,61,13)" fg:x="816" fg:w="1"/><text x="66.5376%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.2876%" y="549" width="0.0812%" height="15" fill="rgb(225,57,24)" fg:x="816" fg:w="1"/><text x="66.5376%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.2876%" y="533" width="0.0812%" height="15" fill="rgb(208,169,48)" fg:x="816" fg:w="1"/><text x="66.5376%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="65.8814%" y="661" width="0.5686%" height="15" fill="rgb(244,218,51)" fg:x="811" fg:w="7"/><text x="66.1314%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (7 samples, 0.57%)</title><rect x="65.8814%" y="645" width="0.5686%" height="15" fill="rgb(214,148,10)" fg:x="811" fg:w="7"/><text x="66.1314%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="65.9626%" y="629" width="0.4874%" height="15" fill="rgb(225,174,27)" fg:x="812" fg:w="6"/><text x="66.2126%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="66.0439%" y="613" width="0.4062%" height="15" fill="rgb(230,96,26)" fg:x="813" fg:w="5"/><text x="66.2939%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.3688%" y="597" width="0.0812%" height="15" fill="rgb(232,10,30)" fg:x="817" fg:w="1"/><text x="66.6188%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.6125%" y="629" width="0.0812%" height="15" fill="rgb(222,8,50)" fg:x="820" fg:w="1"/><text x="66.8625%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6125%" y="613" width="0.0812%" height="15" fill="rgb(213,81,27)" fg:x="820" fg:w="1"/><text x="66.8625%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.22%)</title><rect x="65.5565%" y="741" width="1.2185%" height="15" fill="rgb(245,50,10)" fg:x="807" fg:w="15"/><text x="65.8065%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (11 samples, 0.89%)</title><rect x="65.8814%" y="725" width="0.8936%" height="15" fill="rgb(216,100,18)" fg:x="811" fg:w="11"/><text x="66.1314%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.89%)</title><rect x="65.8814%" y="709" width="0.8936%" height="15" fill="rgb(236,147,54)" fg:x="811" fg:w="11"/><text x="66.1314%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (11 samples, 0.89%)</title><rect x="65.8814%" y="693" width="0.8936%" height="15" fill="rgb(205,143,26)" fg:x="811" fg:w="11"/><text x="66.1314%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.89%)</title><rect x="65.8814%" y="677" width="0.8936%" height="15" fill="rgb(236,26,9)" fg:x="811" fg:w="11"/><text x="66.1314%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="66.4500%" y="661" width="0.3249%" height="15" fill="rgb(221,165,53)" fg:x="818" fg:w="4"/><text x="66.7000%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="66.4500%" y="645" width="0.3249%" height="15" fill="rgb(214,110,17)" fg:x="818" fg:w="4"/><text x="66.7000%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.6937%" y="629" width="0.0812%" height="15" fill="rgb(237,197,12)" fg:x="821" fg:w="1"/><text x="66.9437%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.6937%" y="613" width="0.0812%" height="15" fill="rgb(205,84,17)" fg:x="821" fg:w="1"/><text x="66.9437%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="66.6937%" y="597" width="0.0812%" height="15" fill="rgb(237,18,45)" fg:x="821" fg:w="1"/><text x="66.9437%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.6937%" y="581" width="0.0812%" height="15" fill="rgb(221,87,14)" fg:x="821" fg:w="1"/><text x="66.9437%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6937%" y="565" width="0.0812%" height="15" fill="rgb(238,186,15)" fg:x="821" fg:w="1"/><text x="66.9437%" y="575.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="66.7750%" y="693" width="0.0812%" height="15" fill="rgb(208,115,11)" fg:x="822" fg:w="1"/><text x="67.0250%" y="703.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="67.0999%" y="645" width="0.0812%" height="15" fill="rgb(254,175,0)" fg:x="826" fg:w="1"/><text x="67.3499%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="67.0999%" y="629" width="0.0812%" height="15" fill="rgb(227,24,42)" fg:x="826" fg:w="1"/><text x="67.3499%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="67.0999%" y="613" width="0.0812%" height="15" fill="rgb(223,211,37)" fg:x="826" fg:w="1"/><text x="67.3499%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.0999%" y="597" width="0.0812%" height="15" fill="rgb(235,49,27)" fg:x="826" fg:w="1"/><text x="67.3499%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="67.1812%" y="645" width="0.0812%" height="15" fill="rgb(254,97,51)" fg:x="827" fg:w="1"/><text x="67.4312%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="67.1812%" y="629" width="0.0812%" height="15" fill="rgb(249,51,40)" fg:x="827" fg:w="1"/><text x="67.4312%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="67.1812%" y="613" width="0.0812%" height="15" fill="rgb(210,128,45)" fg:x="827" fg:w="1"/><text x="67.4312%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.1812%" y="597" width="0.0812%" height="15" fill="rgb(224,137,50)" fg:x="827" fg:w="1"/><text x="67.4312%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2624%" y="645" width="0.0812%" height="15" fill="rgb(242,15,9)" fg:x="828" fg:w="1"/><text x="67.5124%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.3436%" y="645" width="0.0812%" height="15" fill="rgb(233,187,41)" fg:x="829" fg:w="1"/><text x="67.5936%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="67.3436%" y="629" width="0.0812%" height="15" fill="rgb(227,2,29)" fg:x="829" fg:w="1"/><text x="67.5936%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 0.41%)</title><rect x="67.0999%" y="661" width="0.4062%" height="15" fill="rgb(222,70,3)" fg:x="826" fg:w="5"/><text x="67.3499%" y="671.50"></text></g><g><title>kernel::plugins::Plugin::schema (1 samples, 0.08%)</title><rect x="67.4249%" y="645" width="0.0812%" height="15" fill="rgb(213,11,42)" fg:x="830" fg:w="1"/><text x="67.6749%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="67.5061%" y="661" width="0.0812%" height="15" fill="rgb(225,150,9)" fg:x="831" fg:w="1"/><text x="67.7561%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="67.5061%" y="645" width="0.0812%" height="15" fill="rgb(230,162,45)" fg:x="831" fg:w="1"/><text x="67.7561%" y="655.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="67.5873%" y="645" width="0.1625%" height="15" fill="rgb(222,14,52)" fg:x="832" fg:w="2"/><text x="67.8373%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="67.5873%" y="629" width="0.1625%" height="15" fill="rgb(254,198,14)" fg:x="832" fg:w="2"/><text x="67.8373%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="67.5873%" y="613" width="0.1625%" height="15" fill="rgb(220,217,30)" fg:x="832" fg:w="2"/><text x="67.8373%" y="623.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (1 samples, 0.08%)</title><rect x="67.6686%" y="597" width="0.0812%" height="15" fill="rgb(215,146,41)" fg:x="833" fg:w="1"/><text x="67.9186%" y="607.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="67.7498%" y="597" width="0.3249%" height="15" fill="rgb(217,27,36)" fg:x="834" fg:w="4"/><text x="67.9998%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="67.7498%" y="581" width="0.3249%" height="15" fill="rgb(219,218,39)" fg:x="834" fg:w="4"/><text x="67.9998%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="67.7498%" y="565" width="0.3249%" height="15" fill="rgb(219,4,42)" fg:x="834" fg:w="4"/><text x="67.9998%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="67.7498%" y="549" width="0.3249%" height="15" fill="rgb(249,119,36)" fg:x="834" fg:w="4"/><text x="67.9998%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="67.7498%" y="533" width="0.3249%" height="15" fill="rgb(209,23,33)" fg:x="834" fg:w="4"/><text x="67.9998%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="67.7498%" y="517" width="0.3249%" height="15" fill="rgb(211,10,0)" fg:x="834" fg:w="4"/><text x="67.9998%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="67.7498%" y="501" width="0.3249%" height="15" fill="rgb(208,99,37)" fg:x="834" fg:w="4"/><text x="67.9998%" y="511.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="67.7498%" y="485" width="0.3249%" height="15" fill="rgb(213,132,31)" fg:x="834" fg:w="4"/><text x="67.9998%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="67.7498%" y="629" width="0.4062%" height="15" fill="rgb(243,129,40)" fg:x="834" fg:w="5"/><text x="67.9998%" y="639.50"></text></g><g><title>glob::fill_todo (5 samples, 0.41%)</title><rect x="67.7498%" y="613" width="0.4062%" height="15" fill="rgb(210,66,33)" fg:x="834" fg:w="5"/><text x="67.9998%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="68.0747%" y="597" width="0.0812%" height="15" fill="rgb(209,189,4)" fg:x="838" fg:w="1"/><text x="68.3247%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="68.0747%" y="581" width="0.0812%" height="15" fill="rgb(214,107,37)" fg:x="838" fg:w="1"/><text x="68.3247%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="68.0747%" y="565" width="0.0812%" height="15" fill="rgb(245,88,54)" fg:x="838" fg:w="1"/><text x="68.3247%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="68.0747%" y="549" width="0.0812%" height="15" fill="rgb(205,146,20)" fg:x="838" fg:w="1"/><text x="68.3247%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="68.0747%" y="533" width="0.0812%" height="15" fill="rgb(220,161,25)" fg:x="838" fg:w="1"/><text x="68.3247%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="68.0747%" y="517" width="0.0812%" height="15" fill="rgb(215,152,15)" fg:x="838" fg:w="1"/><text x="68.3247%" y="527.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="68.0747%" y="501" width="0.0812%" height="15" fill="rgb(233,192,44)" fg:x="838" fg:w="1"/><text x="68.3247%" y="511.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (10 samples, 0.81%)</title><rect x="67.5873%" y="661" width="0.8123%" height="15" fill="rgb(240,170,46)" fg:x="832" fg:w="10"/><text x="67.8373%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (8 samples, 0.65%)</title><rect x="67.7498%" y="645" width="0.6499%" height="15" fill="rgb(207,104,33)" fg:x="834" fg:w="8"/><text x="67.9998%" y="655.50"></text></g><g><title>glob::glob (3 samples, 0.24%)</title><rect x="68.1560%" y="629" width="0.2437%" height="15" fill="rgb(219,21,39)" fg:x="839" fg:w="3"/><text x="68.4060%" y="639.50"></text></g><g><title>glob::glob_with (3 samples, 0.24%)</title><rect x="68.1560%" y="613" width="0.2437%" height="15" fill="rgb(214,133,29)" fg:x="839" fg:w="3"/><text x="68.4060%" y="623.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.16%)</title><rect x="68.2372%" y="597" width="0.1625%" height="15" fill="rgb(226,93,6)" fg:x="840" fg:w="2"/><text x="68.4872%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (19 samples, 1.54%)</title><rect x="66.9374%" y="677" width="1.5435%" height="15" fill="rgb(252,222,34)" fg:x="824" fg:w="19"/><text x="67.1874%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="68.3997%" y="661" width="0.0812%" height="15" fill="rgb(252,92,48)" fg:x="842" fg:w="1"/><text x="68.6497%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.3997%" y="645" width="0.0812%" height="15" fill="rgb(245,223,24)" fg:x="842" fg:w="1"/><text x="68.6497%" y="655.50"></text></g><g><title>engine::session::Session::initialize (21 samples, 1.71%)</title><rect x="66.8562%" y="693" width="1.7059%" height="15" fill="rgb(205,176,3)" fg:x="823" fg:w="21"/><text x="67.1062%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="68.4809%" y="677" width="0.0812%" height="15" fill="rgb(235,151,15)" fg:x="843" fg:w="1"/><text x="68.7309%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.4809%" y="661" width="0.0812%" height="15" fill="rgb(237,209,11)" fg:x="843" fg:w="1"/><text x="68.7309%" y="671.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (23 samples, 1.87%)</title><rect x="66.7750%" y="741" width="1.8684%" height="15" fill="rgb(243,227,24)" fg:x="822" fg:w="23"/><text x="67.0250%" y="751.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (23 samples, 1.87%)</title><rect x="66.7750%" y="725" width="1.8684%" height="15" fill="rgb(239,193,16)" fg:x="822" fg:w="23"/><text x="67.0250%" y="735.50">e..</text></g><g><title>engine::session::Session::new (23 samples, 1.87%)</title><rect x="66.7750%" y="709" width="1.8684%" height="15" fill="rgb(231,27,9)" fg:x="822" fg:w="23"/><text x="67.0250%" y="719.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="68.5621%" y="693" width="0.0812%" height="15" fill="rgb(219,169,10)" fg:x="844" fg:w="1"/><text x="68.8121%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.5621%" y="677" width="0.0812%" height="15" fill="rgb(244,229,43)" fg:x="844" fg:w="1"/><text x="68.8121%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.5621%" y="661" width="0.0812%" height="15" fill="rgb(254,38,20)" fg:x="844" fg:w="1"/><text x="68.8121%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.5621%" y="645" width="0.0812%" height="15" fill="rgb(250,47,30)" fg:x="844" fg:w="1"/><text x="68.8121%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.5621%" y="629" width="0.0812%" height="15" fill="rgb(224,124,36)" fg:x="844" fg:w="1"/><text x="68.8121%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="68.6434%" y="725" width="0.0812%" height="15" fill="rgb(246,68,51)" fg:x="845" fg:w="1"/><text x="68.8934%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6434%" y="709" width="0.0812%" height="15" fill="rgb(253,43,49)" fg:x="845" fg:w="1"/><text x="68.8934%" y="719.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.7246%" y="677" width="0.0812%" height="15" fill="rgb(219,54,36)" fg:x="846" fg:w="1"/><text x="68.9746%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="68.7246%" y="661" width="0.0812%" height="15" fill="rgb(227,133,34)" fg:x="846" fg:w="1"/><text x="68.9746%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.8871%" y="597" width="0.0812%" height="15" fill="rgb(247,227,15)" fg:x="848" fg:w="1"/><text x="69.1371%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.9683%" y="581" width="0.0812%" height="15" fill="rgb(229,96,14)" fg:x="849" fg:w="1"/><text x="69.2183%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.0496%" y="565" width="0.0812%" height="15" fill="rgb(220,79,17)" fg:x="850" fg:w="1"/><text x="69.2996%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.0496%" y="549" width="0.0812%" height="15" fill="rgb(205,131,53)" fg:x="850" fg:w="1"/><text x="69.2996%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.0496%" y="533" width="0.0812%" height="15" fill="rgb(209,50,29)" fg:x="850" fg:w="1"/><text x="69.2996%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.0496%" y="517" width="0.0812%" height="15" fill="rgb(245,86,46)" fg:x="850" fg:w="1"/><text x="69.2996%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.0496%" y="501" width="0.0812%" height="15" fill="rgb(235,66,46)" fg:x="850" fg:w="1"/><text x="69.2996%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.0496%" y="485" width="0.0812%" height="15" fill="rgb(232,148,31)" fg:x="850" fg:w="1"/><text x="69.2996%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.0496%" y="469" width="0.0812%" height="15" fill="rgb(217,149,8)" fg:x="850" fg:w="1"/><text x="69.2996%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.0496%" y="581" width="0.1625%" height="15" fill="rgb(209,183,11)" fg:x="850" fg:w="2"/><text x="69.2996%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.1308%" y="565" width="0.0812%" height="15" fill="rgb(208,55,20)" fg:x="851" fg:w="1"/><text x="69.3808%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.41%)</title><rect x="68.8871%" y="629" width="0.4062%" height="15" fill="rgb(218,39,14)" fg:x="848" fg:w="5"/><text x="69.1371%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="68.8871%" y="613" width="0.4062%" height="15" fill="rgb(216,169,33)" fg:x="848" fg:w="5"/><text x="69.1371%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="68.9683%" y="597" width="0.3249%" height="15" fill="rgb(233,80,24)" fg:x="849" fg:w="4"/><text x="69.2183%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.2120%" y="581" width="0.0812%" height="15" fill="rgb(213,179,31)" fg:x="852" fg:w="1"/><text x="69.4620%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2933%" y="565" width="0.0812%" height="15" fill="rgb(209,19,5)" fg:x="853" fg:w="1"/><text x="69.5433%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.2933%" y="629" width="0.1625%" height="15" fill="rgb(219,18,35)" fg:x="853" fg:w="2"/><text x="69.5433%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="69.2933%" y="613" width="0.1625%" height="15" fill="rgb(209,169,16)" fg:x="853" fg:w="2"/><text x="69.5433%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.2933%" y="597" width="0.1625%" height="15" fill="rgb(245,90,51)" fg:x="853" fg:w="2"/><text x="69.5433%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.2933%" y="581" width="0.1625%" height="15" fill="rgb(220,99,45)" fg:x="853" fg:w="2"/><text x="69.5433%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.3745%" y="565" width="0.0812%" height="15" fill="rgb(249,89,25)" fg:x="854" fg:w="1"/><text x="69.6245%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="69.3745%" y="549" width="0.0812%" height="15" fill="rgb(239,193,0)" fg:x="854" fg:w="1"/><text x="69.6245%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.3745%" y="533" width="0.0812%" height="15" fill="rgb(231,126,1)" fg:x="854" fg:w="1"/><text x="69.6245%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.3745%" y="517" width="0.0812%" height="15" fill="rgb(243,166,3)" fg:x="854" fg:w="1"/><text x="69.6245%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.3745%" y="501" width="0.0812%" height="15" fill="rgb(223,22,34)" fg:x="854" fg:w="1"/><text x="69.6245%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="69.5370%" y="581" width="0.0812%" height="15" fill="rgb(251,52,51)" fg:x="856" fg:w="1"/><text x="69.7870%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="69.5370%" y="565" width="0.0812%" height="15" fill="rgb(221,165,28)" fg:x="856" fg:w="1"/><text x="69.7870%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6182%" y="581" width="0.0812%" height="15" fill="rgb(218,121,47)" fg:x="857" fg:w="1"/><text x="69.8682%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="69.6182%" y="565" width="0.0812%" height="15" fill="rgb(209,120,9)" fg:x="857" fg:w="1"/><text x="69.8682%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6994%" y="581" width="0.0812%" height="15" fill="rgb(236,68,12)" fg:x="858" fg:w="1"/><text x="69.9494%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.6994%" y="565" width="0.0812%" height="15" fill="rgb(225,194,26)" fg:x="858" fg:w="1"/><text x="69.9494%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.7807%" y="501" width="0.0812%" height="15" fill="rgb(231,84,39)" fg:x="859" fg:w="1"/><text x="70.0307%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7807%" y="485" width="0.0812%" height="15" fill="rgb(210,11,45)" fg:x="859" fg:w="1"/><text x="70.0307%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="69.8619%" y="501" width="0.0812%" height="15" fill="rgb(224,54,52)" fg:x="860" fg:w="1"/><text x="70.1119%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="69.8619%" y="485" width="0.0812%" height="15" fill="rgb(238,102,14)" fg:x="860" fg:w="1"/><text x="70.1119%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="69.7807%" y="565" width="0.2437%" height="15" fill="rgb(243,160,52)" fg:x="859" fg:w="3"/><text x="70.0307%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="69.7807%" y="549" width="0.2437%" height="15" fill="rgb(216,114,19)" fg:x="859" fg:w="3"/><text x="70.0307%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="69.7807%" y="533" width="0.2437%" height="15" fill="rgb(244,166,37)" fg:x="859" fg:w="3"/><text x="70.0307%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="69.7807%" y="517" width="0.2437%" height="15" fill="rgb(246,29,44)" fg:x="859" fg:w="3"/><text x="70.0307%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.9431%" y="501" width="0.0812%" height="15" fill="rgb(215,56,53)" fg:x="861" fg:w="1"/><text x="70.1931%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9431%" y="485" width="0.0812%" height="15" fill="rgb(217,60,2)" fg:x="861" fg:w="1"/><text x="70.1931%" y="495.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.38%)</title><rect x="68.7246%" y="725" width="1.3810%" height="15" fill="rgb(207,26,24)" fg:x="846" fg:w="17"/><text x="68.9746%" y="735.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.38%)</title><rect x="68.7246%" y="709" width="1.3810%" height="15" fill="rgb(252,210,15)" fg:x="846" fg:w="17"/><text x="68.9746%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.38%)</title><rect x="68.7246%" y="693" width="1.3810%" height="15" fill="rgb(253,209,26)" fg:x="846" fg:w="17"/><text x="68.9746%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.30%)</title><rect x="68.8058%" y="677" width="1.2998%" height="15" fill="rgb(238,170,14)" fg:x="847" fg:w="16"/><text x="69.0558%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.30%)</title><rect x="68.8058%" y="661" width="1.2998%" height="15" fill="rgb(216,178,15)" fg:x="847" fg:w="16"/><text x="69.0558%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.22%)</title><rect x="68.8871%" y="645" width="1.2185%" height="15" fill="rgb(250,197,2)" fg:x="848" fg:w="15"/><text x="69.1371%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.65%)</title><rect x="69.4557%" y="629" width="0.6499%" height="15" fill="rgb(212,70,42)" fg:x="855" fg:w="8"/><text x="69.7057%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="69.4557%" y="613" width="0.6499%" height="15" fill="rgb(227,213,9)" fg:x="855" fg:w="8"/><text x="69.7057%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="69.5370%" y="597" width="0.5686%" height="15" fill="rgb(245,99,25)" fg:x="856" fg:w="7"/><text x="69.7870%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="69.7807%" y="581" width="0.3249%" height="15" fill="rgb(250,82,29)" fg:x="859" fg:w="4"/><text x="70.0307%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0244%" y="565" width="0.0812%" height="15" fill="rgb(241,226,54)" fg:x="862" fg:w="1"/><text x="70.2744%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.1056%" y="693" width="0.0812%" height="15" fill="rgb(221,99,41)" fg:x="863" fg:w="1"/><text x="70.3556%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.1056%" y="677" width="0.0812%" height="15" fill="rgb(213,90,21)" fg:x="863" fg:w="1"/><text x="70.3556%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1056%" y="661" width="0.0812%" height="15" fill="rgb(205,208,24)" fg:x="863" fg:w="1"/><text x="70.3556%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.1056%" y="645" width="0.0812%" height="15" fill="rgb(246,31,12)" fg:x="863" fg:w="1"/><text x="70.3556%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1056%" y="629" width="0.0812%" height="15" fill="rgb(213,154,6)" fg:x="863" fg:w="1"/><text x="70.3556%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.1056%" y="613" width="0.0812%" height="15" fill="rgb(222,163,29)" fg:x="863" fg:w="1"/><text x="70.3556%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.1056%" y="597" width="0.0812%" height="15" fill="rgb(227,201,8)" fg:x="863" fg:w="1"/><text x="70.3556%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.1868%" y="693" width="0.0812%" height="15" fill="rgb(233,9,32)" fg:x="864" fg:w="1"/><text x="70.4368%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.1868%" y="677" width="0.0812%" height="15" fill="rgb(217,54,24)" fg:x="864" fg:w="1"/><text x="70.4368%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="70.1868%" y="661" width="0.0812%" height="15" fill="rgb(235,192,0)" fg:x="864" fg:w="1"/><text x="70.4368%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="70.1868%" y="645" width="0.0812%" height="15" fill="rgb(235,45,9)" fg:x="864" fg:w="1"/><text x="70.4368%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1868%" y="629" width="0.0812%" height="15" fill="rgb(246,42,40)" fg:x="864" fg:w="1"/><text x="70.4368%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="70.1056%" y="725" width="0.2437%" height="15" fill="rgb(248,111,24)" fg:x="863" fg:w="3"/><text x="70.3556%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="70.1056%" y="709" width="0.2437%" height="15" fill="rgb(249,65,22)" fg:x="863" fg:w="3"/><text x="70.3556%" y="719.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="70.2681%" y="693" width="0.0812%" height="15" fill="rgb(238,111,51)" fg:x="865" fg:w="1"/><text x="70.5181%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="70.2681%" y="677" width="0.0812%" height="15" fill="rgb(250,118,22)" fg:x="865" fg:w="1"/><text x="70.5181%" y="687.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="70.2681%" y="661" width="0.0812%" height="15" fill="rgb(234,84,26)" fg:x="865" fg:w="1"/><text x="70.5181%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="70.3493%" y="725" width="0.0812%" height="15" fill="rgb(243,172,12)" fg:x="866" fg:w="1"/><text x="70.5993%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="70.3493%" y="709" width="0.0812%" height="15" fill="rgb(236,150,49)" fg:x="866" fg:w="1"/><text x="70.5993%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="70.3493%" y="693" width="0.0812%" height="15" fill="rgb(225,197,26)" fg:x="866" fg:w="1"/><text x="70.5993%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="70.3493%" y="677" width="0.0812%" height="15" fill="rgb(214,17,42)" fg:x="866" fg:w="1"/><text x="70.5993%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.3493%" y="661" width="0.0812%" height="15" fill="rgb(224,165,40)" fg:x="866" fg:w="1"/><text x="70.5993%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="70.3493%" y="645" width="0.0812%" height="15" fill="rgb(246,100,4)" fg:x="866" fg:w="1"/><text x="70.5993%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.3493%" y="629" width="0.0812%" height="15" fill="rgb(222,103,0)" fg:x="866" fg:w="1"/><text x="70.5993%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="70.3493%" y="613" width="0.0812%" height="15" fill="rgb(227,189,26)" fg:x="866" fg:w="1"/><text x="70.5993%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="70.4305%" y="693" width="0.0812%" height="15" fill="rgb(214,202,17)" fg:x="867" fg:w="1"/><text x="70.6805%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="70.4305%" y="677" width="0.0812%" height="15" fill="rgb(229,111,3)" fg:x="867" fg:w="1"/><text x="70.6805%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.4305%" y="661" width="0.0812%" height="15" fill="rgb(229,172,15)" fg:x="867" fg:w="1"/><text x="70.6805%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.4305%" y="645" width="0.0812%" height="15" fill="rgb(230,224,35)" fg:x="867" fg:w="1"/><text x="70.6805%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.4305%" y="629" width="0.0812%" height="15" fill="rgb(251,141,6)" fg:x="867" fg:w="1"/><text x="70.6805%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.24%)</title><rect x="70.4305%" y="725" width="0.2437%" height="15" fill="rgb(225,208,6)" fg:x="867" fg:w="3"/><text x="70.6805%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="70.4305%" y="709" width="0.2437%" height="15" fill="rgb(246,181,16)" fg:x="867" fg:w="3"/><text x="70.6805%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="70.5118%" y="693" width="0.1625%" height="15" fill="rgb(227,129,36)" fg:x="868" fg:w="2"/><text x="70.7618%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="70.5118%" y="677" width="0.1625%" height="15" fill="rgb(248,117,24)" fg:x="868" fg:w="2"/><text x="70.7618%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="70.5930%" y="661" width="0.0812%" height="15" fill="rgb(214,185,35)" fg:x="869" fg:w="1"/><text x="70.8430%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.5930%" y="645" width="0.0812%" height="15" fill="rgb(236,150,34)" fg:x="869" fg:w="1"/><text x="70.8430%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="70.5930%" y="629" width="0.0812%" height="15" fill="rgb(243,228,27)" fg:x="869" fg:w="1"/><text x="70.8430%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.5930%" y="613" width="0.0812%" height="15" fill="rgb(245,77,44)" fg:x="869" fg:w="1"/><text x="70.8430%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5930%" y="597" width="0.0812%" height="15" fill="rgb(235,214,42)" fg:x="869" fg:w="1"/><text x="70.8430%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="70.7555%" y="709" width="0.0812%" height="15" fill="rgb(221,74,3)" fg:x="871" fg:w="1"/><text x="71.0055%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="70.7555%" y="693" width="0.0812%" height="15" fill="rgb(206,121,29)" fg:x="871" fg:w="1"/><text x="71.0055%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.7555%" y="677" width="0.0812%" height="15" fill="rgb(249,131,53)" fg:x="871" fg:w="1"/><text x="71.0055%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7555%" y="661" width="0.0812%" height="15" fill="rgb(236,170,29)" fg:x="871" fg:w="1"/><text x="71.0055%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.7555%" y="645" width="0.0812%" height="15" fill="rgb(247,96,15)" fg:x="871" fg:w="1"/><text x="71.0055%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7555%" y="629" width="0.0812%" height="15" fill="rgb(211,210,7)" fg:x="871" fg:w="1"/><text x="71.0055%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="70.8367%" y="709" width="0.0812%" height="15" fill="rgb(240,88,50)" fg:x="872" fg:w="1"/><text x="71.0867%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.8367%" y="693" width="0.0812%" height="15" fill="rgb(209,229,26)" fg:x="872" fg:w="1"/><text x="71.0867%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="70.8367%" y="677" width="0.0812%" height="15" fill="rgb(210,68,23)" fg:x="872" fg:w="1"/><text x="71.0867%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="70.8367%" y="661" width="0.0812%" height="15" fill="rgb(229,180,13)" fg:x="872" fg:w="1"/><text x="71.0867%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="70.8367%" y="645" width="0.0812%" height="15" fill="rgb(236,53,44)" fg:x="872" fg:w="1"/><text x="71.0867%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.8367%" y="629" width="0.0812%" height="15" fill="rgb(244,214,29)" fg:x="872" fg:w="1"/><text x="71.0867%" y="639.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="70.8367%" y="613" width="0.0812%" height="15" fill="rgb(220,75,29)" fg:x="872" fg:w="1"/><text x="71.0867%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="70.9180%" y="709" width="0.0812%" height="15" fill="rgb(214,183,37)" fg:x="873" fg:w="1"/><text x="71.1680%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9180%" y="693" width="0.0812%" height="15" fill="rgb(239,117,29)" fg:x="873" fg:w="1"/><text x="71.1680%" y="703.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.9992%" y="645" width="0.0812%" height="15" fill="rgb(237,171,35)" fg:x="874" fg:w="1"/><text x="71.2492%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="70.9992%" y="629" width="0.0812%" height="15" fill="rgb(229,178,53)" fg:x="874" fg:w="1"/><text x="71.2492%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="70.9992%" y="613" width="0.0812%" height="15" fill="rgb(210,102,19)" fg:x="874" fg:w="1"/><text x="71.2492%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.9992%" y="597" width="0.0812%" height="15" fill="rgb(235,127,22)" fg:x="874" fg:w="1"/><text x="71.2492%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="71.1617%" y="597" width="0.0812%" height="15" fill="rgb(244,31,31)" fg:x="876" fg:w="1"/><text x="71.4117%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="71.1617%" y="581" width="0.0812%" height="15" fill="rgb(231,43,21)" fg:x="876" fg:w="1"/><text x="71.4117%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.1617%" y="565" width="0.0812%" height="15" fill="rgb(217,131,35)" fg:x="876" fg:w="1"/><text x="71.4117%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.1617%" y="549" width="0.0812%" height="15" fill="rgb(221,149,4)" fg:x="876" fg:w="1"/><text x="71.4117%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.1617%" y="533" width="0.0812%" height="15" fill="rgb(232,170,28)" fg:x="876" fg:w="1"/><text x="71.4117%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.1617%" y="517" width="0.0812%" height="15" fill="rgb(238,56,10)" fg:x="876" fg:w="1"/><text x="71.4117%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.1617%" y="501" width="0.0812%" height="15" fill="rgb(235,196,14)" fg:x="876" fg:w="1"/><text x="71.4117%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="71.3241%" y="581" width="0.1625%" height="15" fill="rgb(216,45,48)" fg:x="878" fg:w="2"/><text x="71.5741%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.5678%" y="549" width="0.0812%" height="15" fill="rgb(238,213,17)" fg:x="881" fg:w="1"/><text x="71.8178%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.5678%" y="533" width="0.0812%" height="15" fill="rgb(212,13,2)" fg:x="881" fg:w="1"/><text x="71.8178%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.5678%" y="517" width="0.0812%" height="15" fill="rgb(240,114,20)" fg:x="881" fg:w="1"/><text x="71.8178%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.5678%" y="501" width="0.0812%" height="15" fill="rgb(228,41,40)" fg:x="881" fg:w="1"/><text x="71.8178%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.6491%" y="549" width="0.0812%" height="15" fill="rgb(244,132,35)" fg:x="882" fg:w="1"/><text x="71.8991%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="71.7303%" y="533" width="0.1625%" height="15" fill="rgb(253,189,4)" fg:x="883" fg:w="2"/><text x="71.9803%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="71.7303%" y="517" width="0.1625%" height="15" fill="rgb(224,37,19)" fg:x="883" fg:w="2"/><text x="71.9803%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="71.7303%" y="501" width="0.1625%" height="15" fill="rgb(235,223,18)" fg:x="883" fg:w="2"/><text x="71.9803%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="71.7303%" y="485" width="0.1625%" height="15" fill="rgb(235,163,25)" fg:x="883" fg:w="2"/><text x="71.9803%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="71.7303%" y="469" width="0.1625%" height="15" fill="rgb(217,145,28)" fg:x="883" fg:w="2"/><text x="71.9803%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="71.7303%" y="453" width="0.1625%" height="15" fill="rgb(223,223,32)" fg:x="883" fg:w="2"/><text x="71.9803%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="71.7303%" y="437" width="0.1625%" height="15" fill="rgb(227,189,39)" fg:x="883" fg:w="2"/><text x="71.9803%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.8928%" y="517" width="0.0812%" height="15" fill="rgb(248,10,22)" fg:x="885" fg:w="1"/><text x="72.1428%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.8928%" y="501" width="0.0812%" height="15" fill="rgb(248,46,39)" fg:x="885" fg:w="1"/><text x="72.1428%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.8928%" y="485" width="0.0812%" height="15" fill="rgb(248,113,48)" fg:x="885" fg:w="1"/><text x="72.1428%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.8928%" y="469" width="0.0812%" height="15" fill="rgb(245,16,25)" fg:x="885" fg:w="1"/><text x="72.1428%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.8928%" y="453" width="0.0812%" height="15" fill="rgb(249,152,16)" fg:x="885" fg:w="1"/><text x="72.1428%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.8928%" y="437" width="0.0812%" height="15" fill="rgb(250,16,1)" fg:x="885" fg:w="1"/><text x="72.1428%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.8928%" y="421" width="0.0812%" height="15" fill="rgb(249,138,3)" fg:x="885" fg:w="1"/><text x="72.1428%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.8928%" y="533" width="0.1625%" height="15" fill="rgb(227,71,41)" fg:x="885" fg:w="2"/><text x="72.1428%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.9740%" y="517" width="0.0812%" height="15" fill="rgb(209,184,23)" fg:x="886" fg:w="1"/><text x="72.2240%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.9740%" y="501" width="0.0812%" height="15" fill="rgb(223,215,31)" fg:x="886" fg:w="1"/><text x="72.2240%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.06%)</title><rect x="71.2429%" y="597" width="1.0561%" height="15" fill="rgb(210,146,28)" fg:x="877" fg:w="13"/><text x="71.4929%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="71.4866%" y="581" width="0.8123%" height="15" fill="rgb(209,183,41)" fg:x="880" fg:w="10"/><text x="71.7366%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="71.5678%" y="565" width="0.7311%" height="15" fill="rgb(209,224,45)" fg:x="881" fg:w="9"/><text x="71.8178%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="71.7303%" y="549" width="0.5686%" height="15" fill="rgb(224,209,51)" fg:x="883" fg:w="7"/><text x="71.9803%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="72.0552%" y="533" width="0.2437%" height="15" fill="rgb(223,17,39)" fg:x="887" fg:w="3"/><text x="72.3052%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="72.0552%" y="517" width="0.2437%" height="15" fill="rgb(234,204,37)" fg:x="887" fg:w="3"/><text x="72.3052%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="72.1365%" y="501" width="0.1625%" height="15" fill="rgb(236,120,5)" fg:x="888" fg:w="2"/><text x="72.3865%" y="511.50"></text></g><g><title>burrow_bon::perms::find_acls (1 samples, 0.08%)</title><rect x="72.2989%" y="597" width="0.0812%" height="15" fill="rgb(248,97,27)" fg:x="890" fg:w="1"/><text x="72.5489%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.3802%" y="549" width="0.0812%" height="15" fill="rgb(240,66,17)" fg:x="891" fg:w="1"/><text x="72.6302%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4614%" y="533" width="0.0812%" height="15" fill="rgb(210,79,3)" fg:x="892" fg:w="1"/><text x="72.7114%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.5426%" y="533" width="0.0812%" height="15" fill="rgb(214,176,27)" fg:x="893" fg:w="1"/><text x="72.7926%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5426%" y="517" width="0.0812%" height="15" fill="rgb(235,185,3)" fg:x="893" fg:w="1"/><text x="72.7926%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="72.3802%" y="597" width="0.4062%" height="15" fill="rgb(227,24,12)" fg:x="891" fg:w="5"/><text x="72.6302%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="72.3802%" y="581" width="0.4062%" height="15" fill="rgb(252,169,48)" fg:x="891" fg:w="5"/><text x="72.6302%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="72.3802%" y="565" width="0.4062%" height="15" fill="rgb(212,65,1)" fg:x="891" fg:w="5"/><text x="72.6302%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="72.4614%" y="549" width="0.3249%" height="15" fill="rgb(242,39,24)" fg:x="892" fg:w="4"/><text x="72.7114%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.6239%" y="533" width="0.1625%" height="15" fill="rgb(249,32,23)" fg:x="894" fg:w="2"/><text x="72.8739%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="72.6239%" y="517" width="0.1625%" height="15" fill="rgb(251,195,23)" fg:x="894" fg:w="2"/><text x="72.8739%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="72.6239%" y="501" width="0.1625%" height="15" fill="rgb(236,174,8)" fg:x="894" fg:w="2"/><text x="72.8739%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.7051%" y="485" width="0.0812%" height="15" fill="rgb(220,197,8)" fg:x="895" fg:w="1"/><text x="72.9551%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="72.7864%" y="581" width="0.0812%" height="15" fill="rgb(240,108,37)" fg:x="896" fg:w="1"/><text x="73.0364%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="72.7864%" y="565" width="0.0812%" height="15" fill="rgb(232,176,24)" fg:x="896" fg:w="1"/><text x="73.0364%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.7864%" y="549" width="0.0812%" height="15" fill="rgb(243,35,29)" fg:x="896" fg:w="1"/><text x="73.0364%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.7864%" y="533" width="0.0812%" height="15" fill="rgb(210,37,18)" fg:x="896" fg:w="1"/><text x="73.0364%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="72.9488%" y="485" width="0.0812%" height="15" fill="rgb(224,184,40)" fg:x="898" fg:w="1"/><text x="73.1988%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9488%" y="469" width="0.0812%" height="15" fill="rgb(236,39,29)" fg:x="898" fg:w="1"/><text x="73.1988%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="72.9488%" y="501" width="0.1625%" height="15" fill="rgb(232,48,39)" fg:x="898" fg:w="2"/><text x="73.1988%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.0301%" y="485" width="0.0812%" height="15" fill="rgb(236,34,42)" fg:x="899" fg:w="1"/><text x="73.2801%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.0301%" y="469" width="0.0812%" height="15" fill="rgb(243,106,37)" fg:x="899" fg:w="1"/><text x="73.2801%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.0301%" y="453" width="0.0812%" height="15" fill="rgb(218,96,6)" fg:x="899" fg:w="1"/><text x="73.2801%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.1113%" y="453" width="0.1625%" height="15" fill="rgb(235,130,12)" fg:x="900" fg:w="2"/><text x="73.3613%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.1113%" y="437" width="0.1625%" height="15" fill="rgb(231,95,0)" fg:x="900" fg:w="2"/><text x="73.3613%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1925%" y="421" width="0.0812%" height="15" fill="rgb(228,12,23)" fg:x="901" fg:w="1"/><text x="73.4425%" y="431.50"></text></g><g><title>engine::session::Session::flush (29 samples, 2.36%)</title><rect x="70.9992%" y="709" width="2.3558%" height="15" fill="rgb(216,12,1)" fg:x="874" fg:w="29"/><text x="71.2492%" y="719.50">e..</text></g><g><title>engine::session::Session::save_changes (29 samples, 2.36%)</title><rect x="70.9992%" y="693" width="2.3558%" height="15" fill="rgb(219,59,3)" fg:x="874" fg:w="29"/><text x="71.2492%" y="703.50">e..</text></g><g><title>engine::session::state::State::close (29 samples, 2.36%)</title><rect x="70.9992%" y="677" width="2.3558%" height="15" fill="rgb(215,208,46)" fg:x="874" fg:w="29"/><text x="71.2492%" y="687.50">e..</text></g><g><title>engine::session::state::State::flush_entities (29 samples, 2.36%)</title><rect x="70.9992%" y="661" width="2.3558%" height="15" fill="rgb(254,224,29)" fg:x="874" fg:w="29"/><text x="71.2492%" y="671.50">e..</text></g><g><title>core::iter::adapters::try_process (28 samples, 2.27%)</title><rect x="71.0804%" y="645" width="2.2746%" height="15" fill="rgb(232,14,29)" fg:x="875" fg:w="28"/><text x="71.3304%" y="655.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 2.27%)</title><rect x="71.0804%" y="629" width="2.2746%" height="15" fill="rgb(208,45,52)" fg:x="875" fg:w="28"/><text x="71.3304%" y="639.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (28 samples, 2.27%)</title><rect x="71.0804%" y="613" width="2.2746%" height="15" fill="rgb(234,191,28)" fg:x="875" fg:w="28"/><text x="71.3304%" y="623.50">e..</text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.57%)</title><rect x="72.7864%" y="597" width="0.5686%" height="15" fill="rgb(244,67,43)" fg:x="896" fg:w="7"/><text x="73.0364%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="72.8676%" y="581" width="0.4874%" height="15" fill="rgb(236,189,24)" fg:x="897" fg:w="6"/><text x="73.1176%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="72.8676%" y="565" width="0.4874%" height="15" fill="rgb(239,214,33)" fg:x="897" fg:w="6"/><text x="73.1176%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="72.8676%" y="549" width="0.4874%" height="15" fill="rgb(226,176,41)" fg:x="897" fg:w="6"/><text x="73.1176%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.49%)</title><rect x="72.8676%" y="533" width="0.4874%" height="15" fill="rgb(248,47,8)" fg:x="897" fg:w="6"/><text x="73.1176%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="72.8676%" y="517" width="0.4874%" height="15" fill="rgb(218,81,44)" fg:x="897" fg:w="6"/><text x="73.1176%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="73.1113%" y="501" width="0.2437%" height="15" fill="rgb(213,98,6)" fg:x="900" fg:w="3"/><text x="73.3613%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="73.1113%" y="485" width="0.2437%" height="15" fill="rgb(222,85,22)" fg:x="900" fg:w="3"/><text x="73.3613%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="73.1113%" y="469" width="0.2437%" height="15" fill="rgb(239,46,39)" fg:x="900" fg:w="3"/><text x="73.3613%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2738%" y="453" width="0.0812%" height="15" fill="rgb(237,12,29)" fg:x="902" fg:w="1"/><text x="73.5238%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4362%" y="661" width="0.0812%" height="15" fill="rgb(214,77,8)" fg:x="904" fg:w="1"/><text x="73.6862%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="73.3550%" y="677" width="0.2437%" height="15" fill="rgb(217,168,37)" fg:x="903" fg:w="3"/><text x="73.6050%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.5175%" y="661" width="0.0812%" height="15" fill="rgb(221,217,23)" fg:x="905" fg:w="1"/><text x="73.7675%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5175%" y="645" width="0.0812%" height="15" fill="rgb(243,229,36)" fg:x="905" fg:w="1"/><text x="73.7675%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.5175%" y="629" width="0.0812%" height="15" fill="rgb(251,163,40)" fg:x="905" fg:w="1"/><text x="73.7675%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5175%" y="613" width="0.0812%" height="15" fill="rgb(237,222,12)" fg:x="905" fg:w="1"/><text x="73.7675%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.5175%" y="597" width="0.0812%" height="15" fill="rgb(248,132,6)" fg:x="905" fg:w="1"/><text x="73.7675%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5175%" y="581" width="0.0812%" height="15" fill="rgb(227,167,50)" fg:x="905" fg:w="1"/><text x="73.7675%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="73.5987%" y="629" width="0.0812%" height="15" fill="rgb(242,84,37)" fg:x="906" fg:w="1"/><text x="73.8487%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="73.5987%" y="661" width="0.1625%" height="15" fill="rgb(212,4,50)" fg:x="906" fg:w="2"/><text x="73.8487%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="73.5987%" y="645" width="0.1625%" height="15" fill="rgb(230,228,32)" fg:x="906" fg:w="2"/><text x="73.8487%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="73.6799%" y="629" width="0.0812%" height="15" fill="rgb(248,217,23)" fg:x="907" fg:w="1"/><text x="73.9299%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.6799%" y="613" width="0.0812%" height="15" fill="rgb(238,197,32)" fg:x="907" fg:w="1"/><text x="73.9299%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.6799%" y="597" width="0.0812%" height="15" fill="rgb(236,106,1)" fg:x="907" fg:w="1"/><text x="73.9299%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.49%)</title><rect x="73.3550%" y="709" width="0.4874%" height="15" fill="rgb(219,228,13)" fg:x="903" fg:w="6"/><text x="73.6050%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.49%)</title><rect x="73.3550%" y="693" width="0.4874%" height="15" fill="rgb(238,30,35)" fg:x="903" fg:w="6"/><text x="73.6050%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="73.5987%" y="677" width="0.2437%" height="15" fill="rgb(236,70,23)" fg:x="906" fg:w="3"/><text x="73.8487%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7612%" y="661" width="0.0812%" height="15" fill="rgb(249,104,48)" fg:x="908" fg:w="1"/><text x="74.0112%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.7612%" y="645" width="0.0812%" height="15" fill="rgb(254,117,50)" fg:x="908" fg:w="1"/><text x="74.0112%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="73.7612%" y="629" width="0.0812%" height="15" fill="rgb(223,152,4)" fg:x="908" fg:w="1"/><text x="74.0112%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="73.7612%" y="613" width="0.0812%" height="15" fill="rgb(245,6,2)" fg:x="908" fg:w="1"/><text x="74.0112%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.7612%" y="597" width="0.0812%" height="15" fill="rgb(249,150,24)" fg:x="908" fg:w="1"/><text x="74.0112%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7612%" y="581" width="0.0812%" height="15" fill="rgb(228,185,42)" fg:x="908" fg:w="1"/><text x="74.0112%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="73.8424%" y="709" width="0.0812%" height="15" fill="rgb(226,39,33)" fg:x="909" fg:w="1"/><text x="74.0924%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="73.8424%" y="693" width="0.0812%" height="15" fill="rgb(221,166,19)" fg:x="909" fg:w="1"/><text x="74.0924%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="73.8424%" y="677" width="0.0812%" height="15" fill="rgb(209,109,2)" fg:x="909" fg:w="1"/><text x="74.0924%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8424%" y="661" width="0.0812%" height="15" fill="rgb(252,216,26)" fg:x="909" fg:w="1"/><text x="74.0924%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.8424%" y="645" width="0.0812%" height="15" fill="rgb(227,173,36)" fg:x="909" fg:w="1"/><text x="74.0924%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.8424%" y="629" width="0.0812%" height="15" fill="rgb(209,90,7)" fg:x="909" fg:w="1"/><text x="74.0924%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8424%" y="613" width="0.0812%" height="15" fill="rgb(250,194,11)" fg:x="909" fg:w="1"/><text x="74.0924%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.8424%" y="597" width="0.0812%" height="15" fill="rgb(220,72,50)" fg:x="909" fg:w="1"/><text x="74.0924%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8424%" y="581" width="0.0812%" height="15" fill="rgb(222,106,48)" fg:x="909" fg:w="1"/><text x="74.0924%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8424%" y="565" width="0.0812%" height="15" fill="rgb(216,220,45)" fg:x="909" fg:w="1"/><text x="74.0924%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="73.9236%" y="709" width="0.1625%" height="15" fill="rgb(234,112,18)" fg:x="910" fg:w="2"/><text x="74.1736%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.0049%" y="693" width="0.0812%" height="15" fill="rgb(206,179,9)" fg:x="911" fg:w="1"/><text x="74.2549%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.0049%" y="677" width="0.0812%" height="15" fill="rgb(215,115,40)" fg:x="911" fg:w="1"/><text x="74.2549%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.0049%" y="661" width="0.0812%" height="15" fill="rgb(222,69,34)" fg:x="911" fg:w="1"/><text x="74.2549%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="74.0049%" y="645" width="0.0812%" height="15" fill="rgb(209,161,10)" fg:x="911" fg:w="1"/><text x="74.2549%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="74.0049%" y="629" width="0.0812%" height="15" fill="rgb(217,6,38)" fg:x="911" fg:w="1"/><text x="74.2549%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="74.0049%" y="613" width="0.0812%" height="15" fill="rgb(229,229,48)" fg:x="911" fg:w="1"/><text x="74.2549%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.0049%" y="597" width="0.0812%" height="15" fill="rgb(225,21,28)" fg:x="911" fg:w="1"/><text x="74.2549%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.0049%" y="581" width="0.0812%" height="15" fill="rgb(206,33,13)" fg:x="911" fg:w="1"/><text x="74.2549%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.0861%" y="693" width="0.0812%" height="15" fill="rgb(242,178,17)" fg:x="912" fg:w="1"/><text x="74.3361%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="74.0861%" y="677" width="0.0812%" height="15" fill="rgb(220,162,5)" fg:x="912" fg:w="1"/><text x="74.3361%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.0861%" y="661" width="0.0812%" height="15" fill="rgb(210,33,43)" fg:x="912" fg:w="1"/><text x="74.3361%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="74.0861%" y="645" width="0.0812%" height="15" fill="rgb(216,116,54)" fg:x="912" fg:w="1"/><text x="74.3361%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.1673%" y="661" width="0.0812%" height="15" fill="rgb(249,92,24)" fg:x="913" fg:w="1"/><text x="74.4173%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.1673%" y="645" width="0.0812%" height="15" fill="rgb(231,189,14)" fg:x="913" fg:w="1"/><text x="74.4173%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.1673%" y="629" width="0.0812%" height="15" fill="rgb(230,8,41)" fg:x="913" fg:w="1"/><text x="74.4173%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1673%" y="613" width="0.0812%" height="15" fill="rgb(249,7,27)" fg:x="913" fg:w="1"/><text x="74.4173%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.1673%" y="597" width="0.0812%" height="15" fill="rgb(232,86,5)" fg:x="913" fg:w="1"/><text x="74.4173%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1673%" y="581" width="0.0812%" height="15" fill="rgb(224,175,18)" fg:x="913" fg:w="1"/><text x="74.4173%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.1673%" y="565" width="0.0812%" height="15" fill="rgb(220,129,12)" fg:x="913" fg:w="1"/><text x="74.4173%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.1673%" y="549" width="0.0812%" height="15" fill="rgb(210,19,36)" fg:x="913" fg:w="1"/><text x="74.4173%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.1673%" y="533" width="0.0812%" height="15" fill="rgb(219,96,14)" fg:x="913" fg:w="1"/><text x="74.4173%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="74.1673%" y="693" width="0.1625%" height="15" fill="rgb(249,106,1)" fg:x="913" fg:w="2"/><text x="74.4173%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="74.1673%" y="677" width="0.1625%" height="15" fill="rgb(249,155,20)" fg:x="913" fg:w="2"/><text x="74.4173%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="74.2486%" y="661" width="0.0812%" height="15" fill="rgb(244,168,9)" fg:x="914" fg:w="1"/><text x="74.4986%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.2486%" y="645" width="0.0812%" height="15" fill="rgb(216,23,50)" fg:x="914" fg:w="1"/><text x="74.4986%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.2486%" y="629" width="0.0812%" height="15" fill="rgb(224,219,20)" fg:x="914" fg:w="1"/><text x="74.4986%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2486%" y="613" width="0.0812%" height="15" fill="rgb(222,156,15)" fg:x="914" fg:w="1"/><text x="74.4986%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.2486%" y="597" width="0.0812%" height="15" fill="rgb(231,97,17)" fg:x="914" fg:w="1"/><text x="74.4986%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2486%" y="581" width="0.0812%" height="15" fill="rgb(218,70,48)" fg:x="914" fg:w="1"/><text x="74.4986%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.2486%" y="565" width="0.0812%" height="15" fill="rgb(212,196,52)" fg:x="914" fg:w="1"/><text x="74.4986%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2486%" y="549" width="0.0812%" height="15" fill="rgb(243,203,18)" fg:x="914" fg:w="1"/><text x="74.4986%" y="559.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="74.2486%" y="533" width="0.0812%" height="15" fill="rgb(252,125,41)" fg:x="914" fg:w="1"/><text x="74.4986%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (46 samples, 3.74%)</title><rect x="70.6742%" y="725" width="3.7368%" height="15" fill="rgb(223,180,33)" fg:x="870" fg:w="46"/><text x="70.9242%" y="735.50">plug..</text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="74.0861%" y="709" width="0.3249%" height="15" fill="rgb(254,159,46)" fg:x="912" fg:w="4"/><text x="74.3361%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="74.3298%" y="693" width="0.0812%" height="15" fill="rgb(254,38,10)" fg:x="915" fg:w="1"/><text x="74.5798%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="74.3298%" y="677" width="0.0812%" height="15" fill="rgb(208,217,32)" fg:x="915" fg:w="1"/><text x="74.5798%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="74.3298%" y="661" width="0.0812%" height="15" fill="rgb(221,120,13)" fg:x="915" fg:w="1"/><text x="74.5798%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="74.3298%" y="645" width="0.0812%" height="15" fill="rgb(246,54,52)" fg:x="915" fg:w="1"/><text x="74.5798%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="74.4110%" y="725" width="0.0812%" height="15" fill="rgb(242,34,25)" fg:x="916" fg:w="1"/><text x="74.6610%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="74.4110%" y="709" width="0.0812%" height="15" fill="rgb(247,209,9)" fg:x="916" fg:w="1"/><text x="74.6610%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="74.4110%" y="693" width="0.0812%" height="15" fill="rgb(228,71,26)" fg:x="916" fg:w="1"/><text x="74.6610%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.4110%" y="677" width="0.0812%" height="15" fill="rgb(222,145,49)" fg:x="916" fg:w="1"/><text x="74.6610%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4110%" y="661" width="0.0812%" height="15" fill="rgb(218,121,17)" fg:x="916" fg:w="1"/><text x="74.6610%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4923%" y="581" width="0.0812%" height="15" fill="rgb(244,50,7)" fg:x="917" fg:w="1"/><text x="74.7423%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.4923%" y="565" width="0.0812%" height="15" fill="rgb(246,229,37)" fg:x="917" fg:w="1"/><text x="74.7423%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="74.4923%" y="549" width="0.0812%" height="15" fill="rgb(225,18,5)" fg:x="917" fg:w="1"/><text x="74.7423%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="74.4923%" y="661" width="0.1625%" height="15" fill="rgb(213,204,8)" fg:x="917" fg:w="2"/><text x="74.7423%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.4923%" y="645" width="0.1625%" height="15" fill="rgb(238,103,6)" fg:x="917" fg:w="2"/><text x="74.7423%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.4923%" y="629" width="0.1625%" height="15" fill="rgb(222,25,35)" fg:x="917" fg:w="2"/><text x="74.7423%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="74.4923%" y="613" width="0.1625%" height="15" fill="rgb(213,203,35)" fg:x="917" fg:w="2"/><text x="74.7423%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.4923%" y="597" width="0.1625%" height="15" fill="rgb(221,79,53)" fg:x="917" fg:w="2"/><text x="74.7423%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.5735%" y="581" width="0.0812%" height="15" fill="rgb(243,200,35)" fg:x="918" fg:w="1"/><text x="74.8235%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5735%" y="565" width="0.0812%" height="15" fill="rgb(248,60,25)" fg:x="918" fg:w="1"/><text x="74.8235%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5735%" y="549" width="0.0812%" height="15" fill="rgb(227,53,46)" fg:x="918" fg:w="1"/><text x="74.8235%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="74.4923%" y="693" width="0.2437%" height="15" fill="rgb(216,120,32)" fg:x="917" fg:w="3"/><text x="74.7423%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="74.4923%" y="677" width="0.2437%" height="15" fill="rgb(220,134,1)" fg:x="917" fg:w="3"/><text x="74.7423%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.6548%" y="661" width="0.0812%" height="15" fill="rgb(237,168,5)" fg:x="919" fg:w="1"/><text x="74.9048%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="74.6548%" y="645" width="0.0812%" height="15" fill="rgb(231,100,33)" fg:x="919" fg:w="1"/><text x="74.9048%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.6548%" y="629" width="0.0812%" height="15" fill="rgb(236,177,47)" fg:x="919" fg:w="1"/><text x="74.9048%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="74.6548%" y="613" width="0.0812%" height="15" fill="rgb(235,7,49)" fg:x="919" fg:w="1"/><text x="74.9048%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="74.6548%" y="597" width="0.0812%" height="15" fill="rgb(232,119,22)" fg:x="919" fg:w="1"/><text x="74.9048%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.6548%" y="581" width="0.0812%" height="15" fill="rgb(254,73,53)" fg:x="919" fg:w="1"/><text x="74.9048%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.6548%" y="565" width="0.0812%" height="15" fill="rgb(251,35,20)" fg:x="919" fg:w="1"/><text x="74.9048%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.6548%" y="549" width="0.0812%" height="15" fill="rgb(241,119,20)" fg:x="919" fg:w="1"/><text x="74.9048%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.6548%" y="533" width="0.0812%" height="15" fill="rgb(207,102,14)" fg:x="919" fg:w="1"/><text x="74.9048%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7360%" y="645" width="0.0812%" height="15" fill="rgb(248,201,50)" fg:x="920" fg:w="1"/><text x="74.9860%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.41%)</title><rect x="74.4923%" y="725" width="0.4062%" height="15" fill="rgb(222,185,44)" fg:x="917" fg:w="5"/><text x="74.7423%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.41%)</title><rect x="74.4923%" y="709" width="0.4062%" height="15" fill="rgb(218,107,18)" fg:x="917" fg:w="5"/><text x="74.7423%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (2 samples, 0.16%)</title><rect x="74.7360%" y="693" width="0.1625%" height="15" fill="rgb(237,177,39)" fg:x="920" fg:w="2"/><text x="74.9860%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="74.7360%" y="677" width="0.1625%" height="15" fill="rgb(246,69,6)" fg:x="920" fg:w="2"/><text x="74.9860%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="74.7360%" y="661" width="0.1625%" height="15" fill="rgb(234,208,37)" fg:x="920" fg:w="2"/><text x="74.9860%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8172%" y="645" width="0.0812%" height="15" fill="rgb(225,4,6)" fg:x="921" fg:w="1"/><text x="75.0672%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.8985%" y="693" width="0.0812%" height="15" fill="rgb(233,45,0)" fg:x="922" fg:w="1"/><text x="75.1485%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8985%" y="677" width="0.0812%" height="15" fill="rgb(226,136,5)" fg:x="922" fg:w="1"/><text x="75.1485%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8985%" y="661" width="0.0812%" height="15" fill="rgb(211,91,47)" fg:x="922" fg:w="1"/><text x="75.1485%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8985%" y="645" width="0.0812%" height="15" fill="rgb(242,88,51)" fg:x="922" fg:w="1"/><text x="75.1485%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.8985%" y="629" width="0.0812%" height="15" fill="rgb(230,91,28)" fg:x="922" fg:w="1"/><text x="75.1485%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.8985%" y="613" width="0.0812%" height="15" fill="rgb(254,186,29)" fg:x="922" fg:w="1"/><text x="75.1485%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.8985%" y="597" width="0.0812%" height="15" fill="rgb(238,6,4)" fg:x="922" fg:w="1"/><text x="75.1485%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8985%" y="581" width="0.0812%" height="15" fill="rgb(221,151,16)" fg:x="922" fg:w="1"/><text x="75.1485%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8985%" y="565" width="0.0812%" height="15" fill="rgb(251,143,52)" fg:x="922" fg:w="1"/><text x="75.1485%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.8985%" y="549" width="0.0812%" height="15" fill="rgb(206,90,15)" fg:x="922" fg:w="1"/><text x="75.1485%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.8985%" y="533" width="0.0812%" height="15" fill="rgb(218,35,8)" fg:x="922" fg:w="1"/><text x="75.1485%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.8985%" y="517" width="0.0812%" height="15" fill="rgb(239,215,6)" fg:x="922" fg:w="1"/><text x="75.1485%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.8985%" y="501" width="0.0812%" height="15" fill="rgb(245,116,39)" fg:x="922" fg:w="1"/><text x="75.1485%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8985%" y="485" width="0.0812%" height="15" fill="rgb(242,65,28)" fg:x="922" fg:w="1"/><text x="75.1485%" y="495.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="74.8985%" y="709" width="0.1625%" height="15" fill="rgb(252,132,53)" fg:x="922" fg:w="2"/><text x="75.1485%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9797%" y="693" width="0.0812%" height="15" fill="rgb(224,159,50)" fg:x="923" fg:w="1"/><text x="75.2297%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.9797%" y="677" width="0.0812%" height="15" fill="rgb(224,93,4)" fg:x="923" fg:w="1"/><text x="75.2297%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="74.9797%" y="661" width="0.0812%" height="15" fill="rgb(208,81,34)" fg:x="923" fg:w="1"/><text x="75.2297%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9797%" y="645" width="0.0812%" height="15" fill="rgb(233,92,54)" fg:x="923" fg:w="1"/><text x="75.2297%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.9797%" y="629" width="0.0812%" height="15" fill="rgb(237,21,14)" fg:x="923" fg:w="1"/><text x="75.2297%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.9797%" y="613" width="0.0812%" height="15" fill="rgb(249,128,51)" fg:x="923" fg:w="1"/><text x="75.2297%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.9797%" y="597" width="0.0812%" height="15" fill="rgb(223,129,24)" fg:x="923" fg:w="1"/><text x="75.2297%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0609%" y="613" width="0.0812%" height="15" fill="rgb(231,168,25)" fg:x="924" fg:w="1"/><text x="75.3109%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (82 samples, 6.66%)</title><rect x="68.6434%" y="741" width="6.6613%" height="15" fill="rgb(224,39,20)" fg:x="845" fg:w="82"/><text x="68.8934%" y="751.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.41%)</title><rect x="74.8985%" y="725" width="0.4062%" height="15" fill="rgb(225,152,53)" fg:x="922" fg:w="5"/><text x="75.1485%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="75.0609%" y="709" width="0.2437%" height="15" fill="rgb(252,17,24)" fg:x="924" fg:w="3"/><text x="75.3109%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="75.0609%" y="693" width="0.2437%" height="15" fill="rgb(250,114,30)" fg:x="924" fg:w="3"/><text x="75.3109%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="75.0609%" y="677" width="0.2437%" height="15" fill="rgb(229,5,4)" fg:x="924" fg:w="3"/><text x="75.3109%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="75.0609%" y="661" width="0.2437%" height="15" fill="rgb(225,176,49)" fg:x="924" fg:w="3"/><text x="75.3109%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="75.0609%" y="645" width="0.2437%" height="15" fill="rgb(224,221,49)" fg:x="924" fg:w="3"/><text x="75.3109%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="75.0609%" y="629" width="0.2437%" height="15" fill="rgb(253,169,27)" fg:x="924" fg:w="3"/><text x="75.3109%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.1422%" y="613" width="0.1625%" height="15" fill="rgb(211,206,16)" fg:x="925" fg:w="2"/><text x="75.3922%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.1422%" y="597" width="0.1625%" height="15" fill="rgb(244,87,35)" fg:x="925" fg:w="2"/><text x="75.3922%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="75.1422%" y="581" width="0.1625%" height="15" fill="rgb(246,28,10)" fg:x="925" fg:w="2"/><text x="75.3922%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.1422%" y="565" width="0.1625%" height="15" fill="rgb(229,12,44)" fg:x="925" fg:w="2"/><text x="75.3922%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.1422%" y="549" width="0.1625%" height="15" fill="rgb(210,145,37)" fg:x="925" fg:w="2"/><text x="75.3922%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.1422%" y="533" width="0.1625%" height="15" fill="rgb(227,112,52)" fg:x="925" fg:w="2"/><text x="75.3922%" y="543.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="75.3046%" y="709" width="0.2437%" height="15" fill="rgb(238,155,34)" fg:x="927" fg:w="3"/><text x="75.5546%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (4 samples, 0.32%)</title><rect x="75.3046%" y="725" width="0.3249%" height="15" fill="rgb(239,226,36)" fg:x="927" fg:w="4"/><text x="75.5546%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5483%" y="709" width="0.0812%" height="15" fill="rgb(230,16,23)" fg:x="930" fg:w="1"/><text x="75.7983%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="75.7108%" y="629" width="0.0812%" height="15" fill="rgb(236,171,36)" fg:x="932" fg:w="1"/><text x="75.9608%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.7108%" y="613" width="0.0812%" height="15" fill="rgb(221,22,14)" fg:x="932" fg:w="1"/><text x="75.9608%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.7108%" y="597" width="0.0812%" height="15" fill="rgb(242,43,11)" fg:x="932" fg:w="1"/><text x="75.9608%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.7108%" y="581" width="0.0812%" height="15" fill="rgb(232,69,23)" fg:x="932" fg:w="1"/><text x="75.9608%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="75.7108%" y="645" width="0.1625%" height="15" fill="rgb(216,180,54)" fg:x="932" fg:w="2"/><text x="75.9608%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7920%" y="629" width="0.0812%" height="15" fill="rgb(216,5,24)" fg:x="933" fg:w="1"/><text x="76.0420%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.7920%" y="613" width="0.0812%" height="15" fill="rgb(225,89,9)" fg:x="933" fg:w="1"/><text x="76.0420%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.7920%" y="597" width="0.0812%" height="15" fill="rgb(243,75,33)" fg:x="933" fg:w="1"/><text x="76.0420%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.0357%" y="581" width="0.0812%" height="15" fill="rgb(247,141,45)" fg:x="936" fg:w="1"/><text x="76.2857%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.1170%" y="581" width="0.0812%" height="15" fill="rgb(232,177,36)" fg:x="937" fg:w="1"/><text x="76.3670%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.1170%" y="565" width="0.0812%" height="15" fill="rgb(219,125,36)" fg:x="937" fg:w="1"/><text x="76.3670%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.1982%" y="565" width="0.0812%" height="15" fill="rgb(227,94,9)" fg:x="938" fg:w="1"/><text x="76.4482%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.1982%" y="549" width="0.0812%" height="15" fill="rgb(240,34,52)" fg:x="938" fg:w="1"/><text x="76.4482%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="75.9545%" y="613" width="0.4874%" height="15" fill="rgb(216,45,12)" fg:x="935" fg:w="6"/><text x="76.2045%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="76.0357%" y="597" width="0.4062%" height="15" fill="rgb(246,21,19)" fg:x="936" fg:w="5"/><text x="76.2857%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="76.1982%" y="581" width="0.2437%" height="15" fill="rgb(213,98,42)" fg:x="938" fg:w="3"/><text x="76.4482%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.2794%" y="565" width="0.1625%" height="15" fill="rgb(250,136,47)" fg:x="939" fg:w="2"/><text x="76.5294%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="76.3607%" y="549" width="0.0812%" height="15" fill="rgb(251,124,27)" fg:x="940" fg:w="1"/><text x="76.6107%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.3607%" y="533" width="0.0812%" height="15" fill="rgb(229,180,14)" fg:x="940" fg:w="1"/><text x="76.6107%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.3607%" y="517" width="0.0812%" height="15" fill="rgb(245,216,25)" fg:x="940" fg:w="1"/><text x="76.6107%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3607%" y="501" width="0.0812%" height="15" fill="rgb(251,43,5)" fg:x="940" fg:w="1"/><text x="76.6107%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.73%)</title><rect x="75.8733%" y="629" width="0.7311%" height="15" fill="rgb(250,128,24)" fg:x="934" fg:w="9"/><text x="76.1233%" y="639.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="76.4419%" y="613" width="0.1625%" height="15" fill="rgb(217,117,27)" fg:x="941" fg:w="2"/><text x="76.6919%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="76.4419%" y="597" width="0.1625%" height="15" fill="rgb(245,147,4)" fg:x="941" fg:w="2"/><text x="76.6919%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="76.4419%" y="581" width="0.1625%" height="15" fill="rgb(242,201,35)" fg:x="941" fg:w="2"/><text x="76.6919%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="76.4419%" y="565" width="0.1625%" height="15" fill="rgb(218,181,1)" fg:x="941" fg:w="2"/><text x="76.6919%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="76.5232%" y="549" width="0.0812%" height="15" fill="rgb(222,6,29)" fg:x="942" fg:w="1"/><text x="76.7732%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="76.5232%" y="533" width="0.0812%" height="15" fill="rgb(208,186,3)" fg:x="942" fg:w="1"/><text x="76.7732%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.5232%" y="517" width="0.0812%" height="15" fill="rgb(216,36,26)" fg:x="942" fg:w="1"/><text x="76.7732%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="76.6856%" y="581" width="0.0812%" height="15" fill="rgb(248,201,23)" fg:x="944" fg:w="1"/><text x="76.9356%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="76.6856%" y="597" width="0.1625%" height="15" fill="rgb(251,170,31)" fg:x="944" fg:w="2"/><text x="76.9356%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="76.7669%" y="581" width="0.0812%" height="15" fill="rgb(207,110,25)" fg:x="945" fg:w="1"/><text x="77.0169%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8481%" y="597" width="0.0812%" height="15" fill="rgb(250,54,15)" fg:x="946" fg:w="1"/><text x="77.0981%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.8481%" y="581" width="0.0812%" height="15" fill="rgb(227,68,33)" fg:x="946" fg:w="1"/><text x="77.0981%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.0106%" y="533" width="0.0812%" height="15" fill="rgb(238,34,41)" fg:x="948" fg:w="1"/><text x="77.2606%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="76.9293%" y="565" width="0.2437%" height="15" fill="rgb(220,11,15)" fg:x="947" fg:w="3"/><text x="77.1793%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="76.9293%" y="549" width="0.2437%" height="15" fill="rgb(246,111,35)" fg:x="947" fg:w="3"/><text x="77.1793%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.0918%" y="533" width="0.0812%" height="15" fill="rgb(209,88,53)" fg:x="949" fg:w="1"/><text x="77.3418%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.0918%" y="517" width="0.0812%" height="15" fill="rgb(231,185,47)" fg:x="949" fg:w="1"/><text x="77.3418%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="76.6044%" y="629" width="0.6499%" height="15" fill="rgb(233,154,1)" fg:x="943" fg:w="8"/><text x="76.8544%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="76.6856%" y="613" width="0.5686%" height="15" fill="rgb(225,15,46)" fg:x="944" fg:w="7"/><text x="76.9356%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="76.9293%" y="597" width="0.3249%" height="15" fill="rgb(211,135,41)" fg:x="947" fg:w="4"/><text x="77.1793%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="76.9293%" y="581" width="0.3249%" height="15" fill="rgb(208,54,0)" fg:x="947" fg:w="4"/><text x="77.1793%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.1730%" y="565" width="0.0812%" height="15" fill="rgb(244,136,14)" fg:x="950" fg:w="1"/><text x="77.4230%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1730%" y="549" width="0.0812%" height="15" fill="rgb(241,56,14)" fg:x="950" fg:w="1"/><text x="77.4230%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.2543%" y="485" width="0.0812%" height="15" fill="rgb(205,80,24)" fg:x="951" fg:w="1"/><text x="77.5043%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.2543%" y="469" width="0.0812%" height="15" fill="rgb(220,57,4)" fg:x="951" fg:w="1"/><text x="77.5043%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.2543%" y="453" width="0.0812%" height="15" fill="rgb(226,193,50)" fg:x="951" fg:w="1"/><text x="77.5043%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2543%" y="437" width="0.0812%" height="15" fill="rgb(231,168,22)" fg:x="951" fg:w="1"/><text x="77.5043%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.3355%" y="437" width="0.0812%" height="15" fill="rgb(254,215,14)" fg:x="952" fg:w="1"/><text x="77.5855%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="77.4167%" y="421" width="0.0812%" height="15" fill="rgb(211,115,16)" fg:x="953" fg:w="1"/><text x="77.6667%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.3355%" y="453" width="0.2437%" height="15" fill="rgb(236,210,16)" fg:x="952" fg:w="3"/><text x="77.5855%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="77.4167%" y="437" width="0.1625%" height="15" fill="rgb(221,94,12)" fg:x="953" fg:w="2"/><text x="77.6667%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4980%" y="421" width="0.0812%" height="15" fill="rgb(235,218,49)" fg:x="954" fg:w="1"/><text x="77.7480%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="77.2543%" y="501" width="0.4062%" height="15" fill="rgb(217,114,14)" fg:x="951" fg:w="5"/><text x="77.5043%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="77.3355%" y="485" width="0.3249%" height="15" fill="rgb(216,145,22)" fg:x="952" fg:w="4"/><text x="77.5855%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="77.3355%" y="469" width="0.3249%" height="15" fill="rgb(217,112,39)" fg:x="952" fg:w="4"/><text x="77.5855%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5792%" y="453" width="0.0812%" height="15" fill="rgb(225,85,32)" fg:x="955" fg:w="1"/><text x="77.8292%" y="463.50"></text></g><g><title>engine::session::Session::close (30 samples, 2.44%)</title><rect x="75.3046%" y="741" width="2.4370%" height="15" fill="rgb(245,209,47)" fg:x="927" fg:w="30"/><text x="75.5546%" y="751.50">en..</text></g><g><title>engine::session::state::State::close (26 samples, 2.11%)</title><rect x="75.6296%" y="725" width="2.1121%" height="15" fill="rgb(218,220,15)" fg:x="931" fg:w="26"/><text x="75.8796%" y="735.50">e..</text></g><g><title>engine::session::state::State::flush_entities (26 samples, 2.11%)</title><rect x="75.6296%" y="709" width="2.1121%" height="15" fill="rgb(222,202,31)" fg:x="931" fg:w="26"/><text x="75.8796%" y="719.50">e..</text></g><g><title>core::iter::adapters::try_process (26 samples, 2.11%)</title><rect x="75.6296%" y="693" width="2.1121%" height="15" fill="rgb(243,203,4)" fg:x="931" fg:w="26"/><text x="75.8796%" y="703.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 2.11%)</title><rect x="75.6296%" y="677" width="2.1121%" height="15" fill="rgb(237,92,17)" fg:x="931" fg:w="26"/><text x="75.8796%" y="687.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (26 samples, 2.11%)</title><rect x="75.6296%" y="661" width="2.1121%" height="15" fill="rgb(231,119,7)" fg:x="931" fg:w="26"/><text x="75.8796%" y="671.50">e..</text></g><g><title>kernel::model::any_entity_changes (23 samples, 1.87%)</title><rect x="75.8733%" y="645" width="1.8684%" height="15" fill="rgb(237,82,41)" fg:x="934" fg:w="23"/><text x="76.1233%" y="655.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.49%)</title><rect x="77.2543%" y="629" width="0.4874%" height="15" fill="rgb(226,81,48)" fg:x="951" fg:w="6"/><text x="77.5043%" y="639.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.49%)</title><rect x="77.2543%" y="613" width="0.4874%" height="15" fill="rgb(234,70,51)" fg:x="951" fg:w="6"/><text x="77.5043%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="77.2543%" y="597" width="0.4874%" height="15" fill="rgb(251,86,4)" fg:x="951" fg:w="6"/><text x="77.5043%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="77.2543%" y="581" width="0.4874%" height="15" fill="rgb(244,144,28)" fg:x="951" fg:w="6"/><text x="77.5043%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="77.2543%" y="565" width="0.4874%" height="15" fill="rgb(232,161,39)" fg:x="951" fg:w="6"/><text x="77.5043%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="77.2543%" y="549" width="0.4874%" height="15" fill="rgb(247,34,51)" fg:x="951" fg:w="6"/><text x="77.5043%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="77.2543%" y="533" width="0.4874%" height="15" fill="rgb(225,132,2)" fg:x="951" fg:w="6"/><text x="77.5043%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="77.2543%" y="517" width="0.4874%" height="15" fill="rgb(209,159,44)" fg:x="951" fg:w="6"/><text x="77.5043%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.6604%" y="501" width="0.0812%" height="15" fill="rgb(251,214,1)" fg:x="956" fg:w="1"/><text x="77.9104%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6604%" y="485" width="0.0812%" height="15" fill="rgb(247,84,47)" fg:x="956" fg:w="1"/><text x="77.9104%" y="495.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="77.7417%" y="709" width="0.1625%" height="15" fill="rgb(240,111,43)" fg:x="957" fg:w="2"/><text x="77.9917%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="77.7417%" y="693" width="0.1625%" height="15" fill="rgb(215,214,35)" fg:x="957" fg:w="2"/><text x="77.9917%" y="703.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="77.9041%" y="677" width="0.1625%" height="15" fill="rgb(248,207,23)" fg:x="959" fg:w="2"/><text x="78.1541%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="77.9041%" y="661" width="0.1625%" height="15" fill="rgb(214,186,4)" fg:x="959" fg:w="2"/><text x="78.1541%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="77.9041%" y="645" width="0.1625%" height="15" fill="rgb(220,133,22)" fg:x="959" fg:w="2"/><text x="78.1541%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="77.9041%" y="629" width="0.1625%" height="15" fill="rgb(239,134,19)" fg:x="959" fg:w="2"/><text x="78.1541%" y="639.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="77.9854%" y="613" width="0.0812%" height="15" fill="rgb(250,140,9)" fg:x="960" fg:w="1"/><text x="78.2354%" y="623.50"></text></g><g><title>&lt;engine::session::logs::SessionSubscriber as tracing_core::subscriber::Subscriber&gt;::enabled (1 samples, 0.08%)</title><rect x="77.9854%" y="597" width="0.0812%" height="15" fill="rgb(225,59,14)" fg:x="960" fg:w="1"/><text x="78.2354%" y="607.50"></text></g><g><title>tracing_core::dispatcher::Registrar::upgrade (1 samples, 0.08%)</title><rect x="77.9854%" y="581" width="0.0812%" height="15" fill="rgb(214,152,51)" fg:x="960" fg:w="1"/><text x="78.2354%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="78.0666%" y="501" width="0.1625%" height="15" fill="rgb(251,227,43)" fg:x="961" fg:w="2"/><text x="78.3166%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="78.0666%" y="485" width="0.1625%" height="15" fill="rgb(241,96,17)" fg:x="961" fg:w="2"/><text x="78.3166%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="78.0666%" y="469" width="0.1625%" height="15" fill="rgb(234,198,43)" fg:x="961" fg:w="2"/><text x="78.3166%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="78.0666%" y="453" width="0.1625%" height="15" fill="rgb(220,108,29)" fg:x="961" fg:w="2"/><text x="78.3166%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="78.0666%" y="437" width="0.1625%" height="15" fill="rgb(226,163,33)" fg:x="961" fg:w="2"/><text x="78.3166%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1478%" y="421" width="0.0812%" height="15" fill="rgb(205,194,45)" fg:x="962" fg:w="1"/><text x="78.3978%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1478%" y="405" width="0.0812%" height="15" fill="rgb(206,143,44)" fg:x="962" fg:w="1"/><text x="78.3978%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.1478%" y="389" width="0.0812%" height="15" fill="rgb(236,136,36)" fg:x="962" fg:w="1"/><text x="78.3978%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.1478%" y="373" width="0.0812%" height="15" fill="rgb(249,172,42)" fg:x="962" fg:w="1"/><text x="78.3978%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.1478%" y="357" width="0.0812%" height="15" fill="rgb(216,139,23)" fg:x="962" fg:w="1"/><text x="78.3978%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.1478%" y="341" width="0.0812%" height="15" fill="rgb(207,166,20)" fg:x="962" fg:w="1"/><text x="78.3978%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.1478%" y="325" width="0.0812%" height="15" fill="rgb(210,209,22)" fg:x="962" fg:w="1"/><text x="78.3978%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="78.1478%" y="309" width="0.0812%" height="15" fill="rgb(232,118,20)" fg:x="962" fg:w="1"/><text x="78.3978%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="78.1478%" y="293" width="0.0812%" height="15" fill="rgb(238,113,42)" fg:x="962" fg:w="1"/><text x="78.3978%" y="303.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="78.0666%" y="565" width="0.2437%" height="15" fill="rgb(231,42,5)" fg:x="961" fg:w="3"/><text x="78.3166%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="78.0666%" y="549" width="0.2437%" height="15" fill="rgb(243,166,24)" fg:x="961" fg:w="3"/><text x="78.3166%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="78.0666%" y="533" width="0.2437%" height="15" fill="rgb(237,226,12)" fg:x="961" fg:w="3"/><text x="78.3166%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="78.0666%" y="517" width="0.2437%" height="15" fill="rgb(229,133,24)" fg:x="961" fg:w="3"/><text x="78.3166%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="78.2291%" y="501" width="0.0812%" height="15" fill="rgb(238,33,43)" fg:x="963" fg:w="1"/><text x="78.4791%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.2291%" y="485" width="0.0812%" height="15" fill="rgb(227,59,38)" fg:x="963" fg:w="1"/><text x="78.4791%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2291%" y="469" width="0.0812%" height="15" fill="rgb(230,97,0)" fg:x="963" fg:w="1"/><text x="78.4791%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.2291%" y="453" width="0.0812%" height="15" fill="rgb(250,173,50)" fg:x="963" fg:w="1"/><text x="78.4791%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2291%" y="437" width="0.0812%" height="15" fill="rgb(240,15,50)" fg:x="963" fg:w="1"/><text x="78.4791%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.2291%" y="421" width="0.0812%" height="15" fill="rgb(221,93,22)" fg:x="963" fg:w="1"/><text x="78.4791%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2291%" y="405" width="0.0812%" height="15" fill="rgb(245,180,53)" fg:x="963" fg:w="1"/><text x="78.4791%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.2291%" y="389" width="0.0812%" height="15" fill="rgb(231,88,51)" fg:x="963" fg:w="1"/><text x="78.4791%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="78.2291%" y="373" width="0.0812%" height="15" fill="rgb(240,58,21)" fg:x="963" fg:w="1"/><text x="78.4791%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2291%" y="357" width="0.0812%" height="15" fill="rgb(237,21,10)" fg:x="963" fg:w="1"/><text x="78.4791%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2291%" y="341" width="0.0812%" height="15" fill="rgb(218,43,11)" fg:x="963" fg:w="1"/><text x="78.4791%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.2291%" y="325" width="0.0812%" height="15" fill="rgb(218,221,29)" fg:x="963" fg:w="1"/><text x="78.4791%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2291%" y="309" width="0.0812%" height="15" fill="rgb(214,118,42)" fg:x="963" fg:w="1"/><text x="78.4791%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.2291%" y="293" width="0.0812%" height="15" fill="rgb(251,200,26)" fg:x="963" fg:w="1"/><text x="78.4791%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="78.2291%" y="277" width="0.0812%" height="15" fill="rgb(237,101,39)" fg:x="963" fg:w="1"/><text x="78.4791%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2291%" y="261" width="0.0812%" height="15" fill="rgb(251,117,11)" fg:x="963" fg:w="1"/><text x="78.4791%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.2291%" y="245" width="0.0812%" height="15" fill="rgb(216,223,23)" fg:x="963" fg:w="1"/><text x="78.4791%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2291%" y="229" width="0.0812%" height="15" fill="rgb(251,54,12)" fg:x="963" fg:w="1"/><text x="78.4791%" y="239.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (4 samples, 0.32%)</title><rect x="78.0666%" y="581" width="0.3249%" height="15" fill="rgb(254,176,54)" fg:x="961" fg:w="4"/><text x="78.3166%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.3103%" y="565" width="0.0812%" height="15" fill="rgb(210,32,8)" fg:x="964" fg:w="1"/><text x="78.5603%" y="575.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.41%)</title><rect x="78.0666%" y="597" width="0.4062%" height="15" fill="rgb(235,52,38)" fg:x="961" fg:w="5"/><text x="78.3166%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="78.3916%" y="581" width="0.0812%" height="15" fill="rgb(231,4,44)" fg:x="965" fg:w="1"/><text x="78.6416%" y="591.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="78.3916%" y="565" width="0.0812%" height="15" fill="rgb(249,2,32)" fg:x="965" fg:w="1"/><text x="78.6416%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="78.3916%" y="549" width="0.0812%" height="15" fill="rgb(224,65,26)" fg:x="965" fg:w="1"/><text x="78.6416%" y="559.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="78.3916%" y="533" width="0.0812%" height="15" fill="rgb(250,73,40)" fg:x="965" fg:w="1"/><text x="78.6416%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.3916%" y="517" width="0.0812%" height="15" fill="rgb(253,177,16)" fg:x="965" fg:w="1"/><text x="78.6416%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5540%" y="309" width="0.0812%" height="15" fill="rgb(217,32,34)" fg:x="967" fg:w="1"/><text x="78.8040%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="78.5540%" y="341" width="0.2437%" height="15" fill="rgb(212,7,10)" fg:x="967" fg:w="3"/><text x="78.8040%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="78.5540%" y="325" width="0.2437%" height="15" fill="rgb(245,89,8)" fg:x="967" fg:w="3"/><text x="78.8040%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="78.6353%" y="309" width="0.1625%" height="15" fill="rgb(237,16,53)" fg:x="968" fg:w="2"/><text x="78.8853%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (4 samples, 0.32%)</title><rect x="78.5540%" y="389" width="0.3249%" height="15" fill="rgb(250,204,30)" fg:x="967" fg:w="4"/><text x="78.8040%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="78.5540%" y="373" width="0.3249%" height="15" fill="rgb(208,77,27)" fg:x="967" fg:w="4"/><text x="78.8040%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="78.5540%" y="357" width="0.3249%" height="15" fill="rgb(250,204,28)" fg:x="967" fg:w="4"/><text x="78.8040%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7977%" y="341" width="0.0812%" height="15" fill="rgb(244,63,21)" fg:x="970" fg:w="1"/><text x="79.0477%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="78.7977%" y="325" width="0.0812%" height="15" fill="rgb(236,85,44)" fg:x="970" fg:w="1"/><text x="79.0477%" y="335.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (5 samples, 0.41%)</title><rect x="78.5540%" y="421" width="0.4062%" height="15" fill="rgb(215,98,4)" fg:x="967" fg:w="5"/><text x="78.8040%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.41%)</title><rect x="78.5540%" y="405" width="0.4062%" height="15" fill="rgb(235,38,11)" fg:x="967" fg:w="5"/><text x="78.8040%" y="415.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="78.8790%" y="389" width="0.0812%" height="15" fill="rgb(254,186,25)" fg:x="971" fg:w="1"/><text x="79.1290%" y="399.50"></text></g><g><title>core::char::CaseMappingIter::new (1 samples, 0.08%)</title><rect x="78.8790%" y="373" width="0.0812%" height="15" fill="rgb(225,55,31)" fg:x="971" fg:w="1"/><text x="79.1290%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.9602%" y="389" width="0.0812%" height="15" fill="rgb(211,15,21)" fg:x="972" fg:w="1"/><text x="79.2102%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.9602%" y="373" width="0.0812%" height="15" fill="rgb(215,187,41)" fg:x="972" fg:w="1"/><text x="79.2102%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9602%" y="357" width="0.0812%" height="15" fill="rgb(248,69,32)" fg:x="972" fg:w="1"/><text x="79.2102%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.9602%" y="341" width="0.0812%" height="15" fill="rgb(252,102,52)" fg:x="972" fg:w="1"/><text x="79.2102%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9602%" y="325" width="0.0812%" height="15" fill="rgb(253,140,32)" fg:x="972" fg:w="1"/><text x="79.2102%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.9602%" y="309" width="0.0812%" height="15" fill="rgb(216,56,42)" fg:x="972" fg:w="1"/><text x="79.2102%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9602%" y="293" width="0.0812%" height="15" fill="rgb(216,184,14)" fg:x="972" fg:w="1"/><text x="79.2102%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.0414%" y="357" width="0.0812%" height="15" fill="rgb(237,187,27)" fg:x="973" fg:w="1"/><text x="79.2914%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="79.0414%" y="389" width="0.1625%" height="15" fill="rgb(219,65,3)" fg:x="973" fg:w="2"/><text x="79.2914%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="79.0414%" y="373" width="0.1625%" height="15" fill="rgb(245,83,25)" fg:x="973" fg:w="2"/><text x="79.2914%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.1227%" y="357" width="0.0812%" height="15" fill="rgb(214,205,45)" fg:x="974" fg:w="1"/><text x="79.3727%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1227%" y="341" width="0.0812%" height="15" fill="rgb(241,20,18)" fg:x="974" fg:w="1"/><text x="79.3727%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.1227%" y="325" width="0.0812%" height="15" fill="rgb(232,163,23)" fg:x="974" fg:w="1"/><text x="79.3727%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1227%" y="309" width="0.0812%" height="15" fill="rgb(214,5,46)" fg:x="974" fg:w="1"/><text x="79.3727%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.1227%" y="293" width="0.0812%" height="15" fill="rgb(229,78,17)" fg:x="974" fg:w="1"/><text x="79.3727%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1227%" y="277" width="0.0812%" height="15" fill="rgb(248,89,10)" fg:x="974" fg:w="1"/><text x="79.3727%" y="287.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="79.2039%" y="389" width="0.0812%" height="15" fill="rgb(248,54,15)" fg:x="975" fg:w="1"/><text x="79.4539%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="79.2039%" y="373" width="0.0812%" height="15" fill="rgb(223,116,6)" fg:x="975" fg:w="1"/><text x="79.4539%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="79.2039%" y="357" width="0.0812%" height="15" fill="rgb(205,125,38)" fg:x="975" fg:w="1"/><text x="79.4539%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="79.2039%" y="341" width="0.0812%" height="15" fill="rgb(251,78,38)" fg:x="975" fg:w="1"/><text x="79.4539%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.2039%" y="325" width="0.0812%" height="15" fill="rgb(253,78,28)" fg:x="975" fg:w="1"/><text x="79.4539%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.2039%" y="309" width="0.0812%" height="15" fill="rgb(209,120,3)" fg:x="975" fg:w="1"/><text x="79.4539%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.2039%" y="293" width="0.0812%" height="15" fill="rgb(238,229,9)" fg:x="975" fg:w="1"/><text x="79.4539%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.2039%" y="277" width="0.0812%" height="15" fill="rgb(253,159,18)" fg:x="975" fg:w="1"/><text x="79.4539%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="79.2851%" y="389" width="0.0812%" height="15" fill="rgb(244,42,34)" fg:x="976" fg:w="1"/><text x="79.5351%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2851%" y="373" width="0.0812%" height="15" fill="rgb(224,8,7)" fg:x="976" fg:w="1"/><text x="79.5351%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2851%" y="357" width="0.0812%" height="15" fill="rgb(210,201,45)" fg:x="976" fg:w="1"/><text x="79.5351%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.2851%" y="341" width="0.0812%" height="15" fill="rgb(252,185,21)" fg:x="976" fg:w="1"/><text x="79.5351%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2851%" y="325" width="0.0812%" height="15" fill="rgb(223,131,1)" fg:x="976" fg:w="1"/><text x="79.5351%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.2851%" y="309" width="0.0812%" height="15" fill="rgb(245,141,16)" fg:x="976" fg:w="1"/><text x="79.5351%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.2851%" y="293" width="0.0812%" height="15" fill="rgb(229,55,45)" fg:x="976" fg:w="1"/><text x="79.5351%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.4476%" y="357" width="0.1625%" height="15" fill="rgb(208,92,15)" fg:x="978" fg:w="2"/><text x="79.6976%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.4476%" y="341" width="0.1625%" height="15" fill="rgb(234,185,47)" fg:x="978" fg:w="2"/><text x="79.6976%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.5288%" y="325" width="0.0812%" height="15" fill="rgb(253,104,50)" fg:x="979" fg:w="1"/><text x="79.7788%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.6101%" y="357" width="0.0812%" height="15" fill="rgb(205,70,7)" fg:x="980" fg:w="1"/><text x="79.8601%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.6101%" y="341" width="0.0812%" height="15" fill="rgb(240,178,43)" fg:x="980" fg:w="1"/><text x="79.8601%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.6101%" y="325" width="0.0812%" height="15" fill="rgb(214,112,2)" fg:x="980" fg:w="1"/><text x="79.8601%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.6101%" y="309" width="0.0812%" height="15" fill="rgb(206,46,17)" fg:x="980" fg:w="1"/><text x="79.8601%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.6101%" y="293" width="0.0812%" height="15" fill="rgb(225,220,16)" fg:x="980" fg:w="1"/><text x="79.8601%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.6101%" y="277" width="0.0812%" height="15" fill="rgb(238,65,40)" fg:x="980" fg:w="1"/><text x="79.8601%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.6101%" y="261" width="0.0812%" height="15" fill="rgb(230,151,21)" fg:x="980" fg:w="1"/><text x="79.8601%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.6101%" y="245" width="0.0812%" height="15" fill="rgb(218,58,49)" fg:x="980" fg:w="1"/><text x="79.8601%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.6101%" y="229" width="0.0812%" height="15" fill="rgb(219,179,14)" fg:x="980" fg:w="1"/><text x="79.8601%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.6101%" y="213" width="0.0812%" height="15" fill="rgb(223,72,1)" fg:x="980" fg:w="1"/><text x="79.8601%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.6101%" y="197" width="0.0812%" height="15" fill="rgb(238,126,10)" fg:x="980" fg:w="1"/><text x="79.8601%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.6101%" y="181" width="0.0812%" height="15" fill="rgb(224,206,38)" fg:x="980" fg:w="1"/><text x="79.8601%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6101%" y="165" width="0.0812%" height="15" fill="rgb(212,201,54)" fg:x="980" fg:w="1"/><text x="79.8601%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.6913%" y="325" width="0.0812%" height="15" fill="rgb(218,154,48)" fg:x="981" fg:w="1"/><text x="79.9413%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.49%)</title><rect x="79.3664%" y="373" width="0.4874%" height="15" fill="rgb(232,93,24)" fg:x="977" fg:w="6"/><text x="79.6164%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="79.6913%" y="357" width="0.1625%" height="15" fill="rgb(245,30,21)" fg:x="981" fg:w="2"/><text x="79.9413%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.6913%" y="341" width="0.1625%" height="15" fill="rgb(242,148,29)" fg:x="981" fg:w="2"/><text x="79.9413%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.7725%" y="325" width="0.0812%" height="15" fill="rgb(244,153,54)" fg:x="982" fg:w="1"/><text x="80.0225%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.7725%" y="309" width="0.0812%" height="15" fill="rgb(252,87,22)" fg:x="982" fg:w="1"/><text x="80.0225%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.7725%" y="293" width="0.0812%" height="15" fill="rgb(210,51,29)" fg:x="982" fg:w="1"/><text x="80.0225%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="79.8538%" y="373" width="0.0812%" height="15" fill="rgb(242,136,47)" fg:x="983" fg:w="1"/><text x="80.1038%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.8538%" y="357" width="0.0812%" height="15" fill="rgb(238,68,4)" fg:x="983" fg:w="1"/><text x="80.1038%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (8 samples, 0.65%)</title><rect x="79.3664%" y="389" width="0.6499%" height="15" fill="rgb(242,161,30)" fg:x="977" fg:w="8"/><text x="79.6164%" y="399.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="79.9350%" y="373" width="0.0812%" height="15" fill="rgb(218,58,44)" fg:x="984" fg:w="1"/><text x="80.1850%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="80.0162%" y="373" width="0.0812%" height="15" fill="rgb(252,125,32)" fg:x="985" fg:w="1"/><text x="80.2662%" y="383.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.16%)</title><rect x="80.0975%" y="325" width="0.1625%" height="15" fill="rgb(219,178,0)" fg:x="986" fg:w="2"/><text x="80.3475%" y="335.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (1 samples, 0.08%)</title><rect x="80.1787%" y="309" width="0.0812%" height="15" fill="rgb(213,152,7)" fg:x="987" fg:w="1"/><text x="80.4287%" y="319.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (1 samples, 0.08%)</title><rect x="80.1787%" y="293" width="0.0812%" height="15" fill="rgb(249,109,34)" fg:x="987" fg:w="1"/><text x="80.4287%" y="303.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (1 samples, 0.08%)</title><rect x="80.1787%" y="277" width="0.0812%" height="15" fill="rgb(232,96,21)" fg:x="987" fg:w="1"/><text x="80.4287%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.3412%" y="309" width="0.0812%" height="15" fill="rgb(228,27,39)" fg:x="989" fg:w="1"/><text x="80.5912%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.3412%" y="293" width="0.0812%" height="15" fill="rgb(211,182,52)" fg:x="989" fg:w="1"/><text x="80.5912%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="80.3412%" y="277" width="0.0812%" height="15" fill="rgb(234,178,38)" fg:x="989" fg:w="1"/><text x="80.5912%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="80.3412%" y="261" width="0.0812%" height="15" fill="rgb(221,111,3)" fg:x="989" fg:w="1"/><text x="80.5912%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="80.3412%" y="245" width="0.0812%" height="15" fill="rgb(228,175,21)" fg:x="989" fg:w="1"/><text x="80.5912%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5037%" y="261" width="0.0812%" height="15" fill="rgb(228,174,43)" fg:x="991" fg:w="1"/><text x="80.7537%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.7474%" y="229" width="0.0812%" height="15" fill="rgb(211,191,0)" fg:x="994" fg:w="1"/><text x="80.9974%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.73%)</title><rect x="80.5849%" y="245" width="0.7311%" height="15" fill="rgb(253,117,3)" fg:x="992" fg:w="9"/><text x="80.8349%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.49%)</title><rect x="80.8286%" y="229" width="0.4874%" height="15" fill="rgb(241,127,19)" fg:x="995" fg:w="6"/><text x="81.0786%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="81.1535%" y="213" width="0.1625%" height="15" fill="rgb(218,103,12)" fg:x="999" fg:w="2"/><text x="81.4035%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="81.3160%" y="245" width="0.0812%" height="15" fill="rgb(236,214,43)" fg:x="1001" fg:w="1"/><text x="81.5660%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="81.3160%" y="229" width="0.0812%" height="15" fill="rgb(244,144,19)" fg:x="1001" fg:w="1"/><text x="81.5660%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="81.4785%" y="197" width="0.0812%" height="15" fill="rgb(246,188,10)" fg:x="1003" fg:w="1"/><text x="81.7285%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="81.6409%" y="181" width="0.2437%" height="15" fill="rgb(212,193,33)" fg:x="1005" fg:w="3"/><text x="81.8909%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="81.7222%" y="165" width="0.1625%" height="15" fill="rgb(241,51,29)" fg:x="1006" fg:w="2"/><text x="81.9722%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="81.8034%" y="149" width="0.0812%" height="15" fill="rgb(211,58,19)" fg:x="1007" fg:w="1"/><text x="82.0534%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8034%" y="133" width="0.0812%" height="15" fill="rgb(229,111,26)" fg:x="1007" fg:w="1"/><text x="82.0534%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (33 samples, 2.68%)</title><rect x="81.8846%" y="181" width="2.6807%" height="15" fill="rgb(213,115,40)" fg:x="1008" fg:w="33"/><text x="82.1346%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (33 samples, 2.68%)</title><rect x="81.8846%" y="165" width="2.6807%" height="15" fill="rgb(209,56,44)" fg:x="1008" fg:w="33"/><text x="82.1346%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (33 samples, 2.68%)</title><rect x="81.8846%" y="149" width="2.6807%" height="15" fill="rgb(230,108,32)" fg:x="1008" fg:w="33"/><text x="82.1346%" y="159.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 3.25%)</title><rect x="81.3972%" y="229" width="3.2494%" height="15" fill="rgb(216,165,31)" fg:x="1002" fg:w="40"/><text x="81.6472%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (39 samples, 3.17%)</title><rect x="81.4785%" y="213" width="3.1682%" height="15" fill="rgb(218,122,21)" fg:x="1003" fg:w="39"/><text x="81.7285%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (38 samples, 3.09%)</title><rect x="81.5597%" y="197" width="3.0869%" height="15" fill="rgb(223,224,47)" fg:x="1004" fg:w="38"/><text x="81.8097%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="84.5654%" y="181" width="0.0812%" height="15" fill="rgb(238,102,44)" fg:x="1041" fg:w="1"/><text x="84.8154%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.8903%" y="213" width="0.0812%" height="15" fill="rgb(236,46,40)" fg:x="1045" fg:w="1"/><text x="85.1403%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9716%" y="213" width="0.0812%" height="15" fill="rgb(247,202,50)" fg:x="1046" fg:w="1"/><text x="85.2216%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="85.0528%" y="213" width="0.0812%" height="15" fill="rgb(209,99,20)" fg:x="1047" fg:w="1"/><text x="85.3028%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.57%)</title><rect x="84.6466%" y="229" width="0.5686%" height="15" fill="rgb(252,27,34)" fg:x="1042" fg:w="7"/><text x="84.8966%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="85.1340%" y="213" width="0.0812%" height="15" fill="rgb(215,206,23)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="85.2153%" y="229" width="0.0812%" height="15" fill="rgb(212,135,36)" fg:x="1049" fg:w="1"/><text x="85.4653%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (49 samples, 3.98%)</title><rect x="81.3972%" y="245" width="3.9805%" height="15" fill="rgb(240,189,1)" fg:x="1002" fg:w="49"/><text x="81.6472%" y="255.50">rege..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="85.2965%" y="229" width="0.0812%" height="15" fill="rgb(242,56,20)" fg:x="1050" fg:w="1"/><text x="85.5465%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (60 samples, 4.87%)</title><rect x="80.5849%" y="261" width="4.8741%" height="15" fill="rgb(247,132,33)" fg:x="992" fg:w="60"/><text x="80.8349%" y="271.50">regex_..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="85.3777%" y="245" width="0.0812%" height="15" fill="rgb(208,149,11)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="85.4590%" y="197" width="0.1625%" height="15" fill="rgb(211,33,11)" fg:x="1052" fg:w="2"/><text x="85.7090%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.4590%" y="181" width="0.1625%" height="15" fill="rgb(221,29,38)" fg:x="1052" fg:w="2"/><text x="85.7090%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="85.4590%" y="165" width="0.1625%" height="15" fill="rgb(206,182,49)" fg:x="1052" fg:w="2"/><text x="85.7090%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="85.4590%" y="229" width="0.2437%" height="15" fill="rgb(216,140,1)" fg:x="1052" fg:w="3"/><text x="85.7090%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="85.4590%" y="213" width="0.2437%" height="15" fill="rgb(232,57,40)" fg:x="1052" fg:w="3"/><text x="85.7090%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="85.6214%" y="197" width="0.0812%" height="15" fill="rgb(224,186,18)" fg:x="1054" fg:w="1"/><text x="85.8714%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="85.6214%" y="181" width="0.0812%" height="15" fill="rgb(215,121,11)" fg:x="1054" fg:w="1"/><text x="85.8714%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="85.6214%" y="165" width="0.0812%" height="15" fill="rgb(245,147,10)" fg:x="1054" fg:w="1"/><text x="85.8714%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="85.4590%" y="261" width="0.3249%" height="15" fill="rgb(238,153,13)" fg:x="1052" fg:w="4"/><text x="85.7090%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="85.4590%" y="245" width="0.3249%" height="15" fill="rgb(233,108,0)" fg:x="1052" fg:w="4"/><text x="85.7090%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="85.7027%" y="229" width="0.0812%" height="15" fill="rgb(212,157,17)" fg:x="1055" fg:w="1"/><text x="85.9527%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (67 samples, 5.44%)</title><rect x="80.4224%" y="309" width="5.4427%" height="15" fill="rgb(225,213,38)" fg:x="990" fg:w="67"/><text x="80.6724%" y="319.50">&lt;regex:..</text></g><g><title>regex::builders::string::RegexBuilder::build (67 samples, 5.44%)</title><rect x="80.4224%" y="293" width="5.4427%" height="15" fill="rgb(248,16,11)" fg:x="990" fg:w="67"/><text x="80.6724%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (67 samples, 5.44%)</title><rect x="80.4224%" y="277" width="5.4427%" height="15" fill="rgb(241,33,4)" fg:x="990" fg:w="67"/><text x="80.6724%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="85.7839%" y="261" width="0.0812%" height="15" fill="rgb(222,26,43)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="85.7839%" y="245" width="0.0812%" height="15" fill="rgb(243,29,36)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="85.7839%" y="229" width="0.0812%" height="15" fill="rgb(241,9,27)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="85.8652%" y="293" width="0.1625%" height="15" fill="rgb(205,117,26)" fg:x="1057" fg:w="2"/><text x="86.1152%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="86.0276%" y="261" width="0.0812%" height="15" fill="rgb(209,80,39)" fg:x="1059" fg:w="1"/><text x="86.2776%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="85.8652%" y="309" width="0.3249%" height="15" fill="rgb(239,155,6)" fg:x="1057" fg:w="4"/><text x="86.1152%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="86.0276%" y="293" width="0.1625%" height="15" fill="rgb(212,104,12)" fg:x="1059" fg:w="2"/><text x="86.2776%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="86.0276%" y="277" width="0.1625%" height="15" fill="rgb(234,204,3)" fg:x="1059" fg:w="2"/><text x="86.2776%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="86.1089%" y="261" width="0.0812%" height="15" fill="rgb(251,218,7)" fg:x="1060" fg:w="1"/><text x="86.3589%" y="271.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (79 samples, 6.42%)</title><rect x="80.2600%" y="325" width="6.4175%" height="15" fill="rgb(221,81,32)" fg:x="988" fg:w="79"/><text x="80.5100%" y="335.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="86.1901%" y="309" width="0.4874%" height="15" fill="rgb(214,152,26)" fg:x="1061" fg:w="6"/><text x="86.4401%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="86.3526%" y="293" width="0.3249%" height="15" fill="rgb(223,22,3)" fg:x="1063" fg:w="4"/><text x="86.6026%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="86.3526%" y="277" width="0.3249%" height="15" fill="rgb(207,174,7)" fg:x="1063" fg:w="4"/><text x="86.6026%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="86.3526%" y="261" width="0.3249%" height="15" fill="rgb(224,19,52)" fg:x="1063" fg:w="4"/><text x="86.6026%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="86.3526%" y="245" width="0.3249%" height="15" fill="rgb(228,24,14)" fg:x="1063" fg:w="4"/><text x="86.6026%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.5963%" y="229" width="0.0812%" height="15" fill="rgb(230,153,43)" fg:x="1066" fg:w="1"/><text x="86.8463%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.5963%" y="213" width="0.0812%" height="15" fill="rgb(231,106,12)" fg:x="1066" fg:w="1"/><text x="86.8463%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.5963%" y="197" width="0.0812%" height="15" fill="rgb(215,92,2)" fg:x="1066" fg:w="1"/><text x="86.8463%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.7587%" y="261" width="0.0812%" height="15" fill="rgb(249,143,25)" fg:x="1068" fg:w="1"/><text x="87.0087%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.7587%" y="245" width="0.0812%" height="15" fill="rgb(252,7,35)" fg:x="1068" fg:w="1"/><text x="87.0087%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="86.8400%" y="261" width="0.0812%" height="15" fill="rgb(216,69,40)" fg:x="1069" fg:w="1"/><text x="87.0900%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.8400%" y="245" width="0.0812%" height="15" fill="rgb(240,36,33)" fg:x="1069" fg:w="1"/><text x="87.0900%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="86.8400%" y="229" width="0.0812%" height="15" fill="rgb(231,128,14)" fg:x="1069" fg:w="1"/><text x="87.0900%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.8400%" y="213" width="0.0812%" height="15" fill="rgb(245,143,14)" fg:x="1069" fg:w="1"/><text x="87.0900%" y="223.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="86.9212%" y="261" width="0.0812%" height="15" fill="rgb(222,130,28)" fg:x="1070" fg:w="1"/><text x="87.1712%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.9212%" y="245" width="0.0812%" height="15" fill="rgb(212,10,48)" fg:x="1070" fg:w="1"/><text x="87.1712%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.14%)</title><rect x="87.1649%" y="245" width="1.1373%" height="15" fill="rgb(254,118,45)" fg:x="1073" fg:w="14"/><text x="87.4149%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.06%)</title><rect x="87.2461%" y="229" width="1.0561%" height="15" fill="rgb(228,6,45)" fg:x="1074" fg:w="13"/><text x="87.4961%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="88.1397%" y="213" width="0.1625%" height="15" fill="rgb(241,18,35)" fg:x="1085" fg:w="2"/><text x="88.3897%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="88.3022%" y="245" width="0.0812%" height="15" fill="rgb(227,214,53)" fg:x="1087" fg:w="1"/><text x="88.5522%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="88.3022%" y="229" width="0.0812%" height="15" fill="rgb(224,107,51)" fg:x="1087" fg:w="1"/><text x="88.5522%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="88.3022%" y="213" width="0.0812%" height="15" fill="rgb(248,60,28)" fg:x="1087" fg:w="1"/><text x="88.5522%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="88.3834%" y="245" width="0.0812%" height="15" fill="rgb(249,101,23)" fg:x="1088" fg:w="1"/><text x="88.6334%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="88.3834%" y="229" width="0.0812%" height="15" fill="rgb(228,51,19)" fg:x="1088" fg:w="1"/><text x="88.6334%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.4647%" y="213" width="0.0812%" height="15" fill="rgb(213,20,6)" fg:x="1089" fg:w="1"/><text x="88.7147%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="88.5459%" y="213" width="0.1625%" height="15" fill="rgb(212,124,10)" fg:x="1090" fg:w="2"/><text x="88.7959%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="88.5459%" y="197" width="0.1625%" height="15" fill="rgb(248,3,40)" fg:x="1090" fg:w="2"/><text x="88.7959%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="88.5459%" y="181" width="0.1625%" height="15" fill="rgb(223,178,23)" fg:x="1090" fg:w="2"/><text x="88.7959%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="88.5459%" y="165" width="0.1625%" height="15" fill="rgb(240,132,45)" fg:x="1090" fg:w="2"/><text x="88.7959%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="88.7084%" y="213" width="0.0812%" height="15" fill="rgb(245,164,36)" fg:x="1092" fg:w="1"/><text x="88.9584%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="88.7084%" y="197" width="0.0812%" height="15" fill="rgb(231,188,53)" fg:x="1092" fg:w="1"/><text x="88.9584%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (7 samples, 0.57%)</title><rect x="88.4647%" y="245" width="0.5686%" height="15" fill="rgb(237,198,39)" fg:x="1089" fg:w="7"/><text x="88.7147%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.57%)</title><rect x="88.4647%" y="229" width="0.5686%" height="15" fill="rgb(223,120,35)" fg:x="1089" fg:w="7"/><text x="88.7147%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="88.7896%" y="213" width="0.2437%" height="15" fill="rgb(253,107,49)" fg:x="1093" fg:w="3"/><text x="89.0396%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="88.7896%" y="197" width="0.2437%" height="15" fill="rgb(216,44,31)" fg:x="1093" fg:w="3"/><text x="89.0396%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="88.7896%" y="181" width="0.2437%" height="15" fill="rgb(253,87,21)" fg:x="1093" fg:w="3"/><text x="89.0396%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="89.1145%" y="197" width="0.0812%" height="15" fill="rgb(226,18,2)" fg:x="1097" fg:w="1"/><text x="89.3645%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="89.1958%" y="181" width="0.0812%" height="15" fill="rgb(216,8,46)" fg:x="1098" fg:w="1"/><text x="89.4458%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="89.5207%" y="133" width="0.1625%" height="15" fill="rgb(226,140,39)" fg:x="1102" fg:w="2"/><text x="89.7707%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="89.6832%" y="133" width="0.1625%" height="15" fill="rgb(221,194,54)" fg:x="1104" fg:w="2"/><text x="89.9332%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="89.8457%" y="133" width="0.1625%" height="15" fill="rgb(213,92,11)" fg:x="1106" fg:w="2"/><text x="90.0957%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="89.8457%" y="117" width="0.1625%" height="15" fill="rgb(229,162,46)" fg:x="1106" fg:w="2"/><text x="90.0957%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.8457%" y="101" width="0.1625%" height="15" fill="rgb(214,111,36)" fg:x="1106" fg:w="2"/><text x="90.0957%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.8457%" y="85" width="0.1625%" height="15" fill="rgb(207,6,21)" fg:x="1106" fg:w="2"/><text x="90.0957%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.0081%" y="101" width="0.0812%" height="15" fill="rgb(213,127,38)" fg:x="1108" fg:w="1"/><text x="90.2581%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.0081%" y="85" width="0.0812%" height="15" fill="rgb(238,118,32)" fg:x="1108" fg:w="1"/><text x="90.2581%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="90.0081%" y="133" width="0.2437%" height="15" fill="rgb(240,139,39)" fg:x="1108" fg:w="3"/><text x="90.2581%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="90.0081%" y="117" width="0.2437%" height="15" fill="rgb(235,10,37)" fg:x="1108" fg:w="3"/><text x="90.2581%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="90.0894%" y="101" width="0.1625%" height="15" fill="rgb(249,171,38)" fg:x="1109" fg:w="2"/><text x="90.3394%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (30 samples, 2.44%)</title><rect x="90.2518%" y="133" width="2.4370%" height="15" fill="rgb(242,144,32)" fg:x="1111" fg:w="30"/><text x="90.5018%" y="143.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (30 samples, 2.44%)</title><rect x="90.2518%" y="117" width="2.4370%" height="15" fill="rgb(217,117,21)" fg:x="1111" fg:w="30"/><text x="90.5018%" y="127.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (30 samples, 2.44%)</title><rect x="90.2518%" y="101" width="2.4370%" height="15" fill="rgb(249,87,1)" fg:x="1111" fg:w="30"/><text x="90.5018%" y="111.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="92.6889%" y="133" width="0.0812%" height="15" fill="rgb(248,196,48)" fg:x="1141" fg:w="1"/><text x="92.9389%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 3.90%)</title><rect x="89.1145%" y="229" width="3.8993%" height="15" fill="rgb(251,206,33)" fg:x="1097" fg:w="48"/><text x="89.3645%" y="239.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (48 samples, 3.90%)</title><rect x="89.1145%" y="213" width="3.8993%" height="15" fill="rgb(232,141,28)" fg:x="1097" fg:w="48"/><text x="89.3645%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (47 samples, 3.82%)</title><rect x="89.1958%" y="197" width="3.8180%" height="15" fill="rgb(209,167,14)" fg:x="1098" fg:w="47"/><text x="89.4458%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (46 samples, 3.74%)</title><rect x="89.2770%" y="181" width="3.7368%" height="15" fill="rgb(225,11,50)" fg:x="1099" fg:w="46"/><text x="89.5270%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (46 samples, 3.74%)</title><rect x="89.2770%" y="165" width="3.7368%" height="15" fill="rgb(209,50,20)" fg:x="1099" fg:w="46"/><text x="89.5270%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (46 samples, 3.74%)</title><rect x="89.2770%" y="149" width="3.7368%" height="15" fill="rgb(212,17,46)" fg:x="1099" fg:w="46"/><text x="89.5270%" y="159.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="92.7701%" y="133" width="0.2437%" height="15" fill="rgb(216,101,39)" fg:x="1142" fg:w="3"/><text x="93.0201%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.9326%" y="117" width="0.0812%" height="15" fill="rgb(212,228,48)" fg:x="1144" fg:w="1"/><text x="93.1826%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.9326%" y="101" width="0.0812%" height="15" fill="rgb(250,6,50)" fg:x="1144" fg:w="1"/><text x="93.1826%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.9326%" y="85" width="0.0812%" height="15" fill="rgb(250,160,48)" fg:x="1144" fg:w="1"/><text x="93.1826%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="93.0138%" y="213" width="0.2437%" height="15" fill="rgb(244,216,33)" fg:x="1145" fg:w="3"/><text x="93.2638%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="93.0950%" y="197" width="0.1625%" height="15" fill="rgb(207,157,5)" fg:x="1146" fg:w="2"/><text x="93.3450%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.1763%" y="181" width="0.0812%" height="15" fill="rgb(228,199,8)" fg:x="1147" fg:w="1"/><text x="93.4263%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.1763%" y="165" width="0.0812%" height="15" fill="rgb(227,80,20)" fg:x="1147" fg:w="1"/><text x="93.4263%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="93.2575%" y="213" width="0.0812%" height="15" fill="rgb(222,9,33)" fg:x="1148" fg:w="1"/><text x="93.5075%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.2575%" y="197" width="0.0812%" height="15" fill="rgb(239,44,28)" fg:x="1148" fg:w="1"/><text x="93.5075%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (79 samples, 6.42%)</title><rect x="87.0024%" y="261" width="6.4175%" height="15" fill="rgb(249,187,43)" fg:x="1071" fg:w="79"/><text x="87.2524%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (54 samples, 4.39%)</title><rect x="89.0333%" y="245" width="4.3867%" height="15" fill="rgb(216,141,28)" fg:x="1096" fg:w="54"/><text x="89.2833%" y="255.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="93.0138%" y="229" width="0.4062%" height="15" fill="rgb(230,154,53)" fg:x="1145" fg:w="5"/><text x="93.2638%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="93.3387%" y="213" width="0.0812%" height="15" fill="rgb(227,82,4)" fg:x="1149" fg:w="1"/><text x="93.5887%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (2 samples, 0.16%)</title><rect x="93.5012%" y="229" width="0.1625%" height="15" fill="rgb(220,107,16)" fg:x="1151" fg:w="2"/><text x="93.7512%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="93.5825%" y="213" width="0.0812%" height="15" fill="rgb(207,187,2)" fg:x="1152" fg:w="1"/><text x="93.8325%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (2 samples, 0.16%)</title><rect x="93.6637%" y="229" width="0.1625%" height="15" fill="rgb(210,162,52)" fg:x="1153" fg:w="2"/><text x="93.9137%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="93.7449%" y="213" width="0.0812%" height="15" fill="rgb(217,216,49)" fg:x="1154" fg:w="1"/><text x="93.9949%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.57%)</title><rect x="93.4200%" y="261" width="0.5686%" height="15" fill="rgb(218,146,49)" fg:x="1150" fg:w="7"/><text x="93.6700%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.57%)</title><rect x="93.4200%" y="245" width="0.5686%" height="15" fill="rgb(216,55,40)" fg:x="1150" fg:w="7"/><text x="93.6700%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="93.8262%" y="229" width="0.1625%" height="15" fill="rgb(208,196,21)" fg:x="1155" fg:w="2"/><text x="94.0762%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.16%)</title><rect x="93.8262%" y="213" width="0.1625%" height="15" fill="rgb(242,117,42)" fg:x="1155" fg:w="2"/><text x="94.0762%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="94.0699%" y="229" width="0.0812%" height="15" fill="rgb(210,11,23)" fg:x="1158" fg:w="1"/><text x="94.3199%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="94.0699%" y="213" width="0.0812%" height="15" fill="rgb(217,110,2)" fg:x="1158" fg:w="1"/><text x="94.3199%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="94.0699%" y="197" width="0.0812%" height="15" fill="rgb(229,77,54)" fg:x="1158" fg:w="1"/><text x="94.3199%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="94.0699%" y="181" width="0.0812%" height="15" fill="rgb(218,53,16)" fg:x="1158" fg:w="1"/><text x="94.3199%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (93 samples, 7.55%)</title><rect x="86.6775%" y="309" width="7.5548%" height="15" fill="rgb(215,38,13)" fg:x="1067" fg:w="93"/><text x="86.9275%" y="319.50">&lt;regex::re..</text></g><g><title>regex::builders::string::RegexBuilder::build (93 samples, 7.55%)</title><rect x="86.6775%" y="293" width="7.5548%" height="15" fill="rgb(235,42,18)" fg:x="1067" fg:w="93"/><text x="86.9275%" y="303.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (93 samples, 7.55%)</title><rect x="86.6775%" y="277" width="7.5548%" height="15" fill="rgb(219,66,54)" fg:x="1067" fg:w="93"/><text x="86.9275%" y="287.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="93.9886%" y="261" width="0.2437%" height="15" fill="rgb(222,205,4)" fg:x="1157" fg:w="3"/><text x="94.2386%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="93.9886%" y="245" width="0.2437%" height="15" fill="rgb(227,213,46)" fg:x="1157" fg:w="3"/><text x="94.2386%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="94.1511%" y="229" width="0.0812%" height="15" fill="rgb(250,145,42)" fg:x="1159" fg:w="1"/><text x="94.4011%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="94.1511%" y="213" width="0.0812%" height="15" fill="rgb(219,15,2)" fg:x="1159" fg:w="1"/><text x="94.4011%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="94.2323%" y="293" width="0.0812%" height="15" fill="rgb(231,181,52)" fg:x="1160" fg:w="1"/><text x="94.4823%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="94.2323%" y="277" width="0.0812%" height="15" fill="rgb(235,1,42)" fg:x="1160" fg:w="1"/><text x="94.4823%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="94.2323%" y="261" width="0.0812%" height="15" fill="rgb(249,88,27)" fg:x="1160" fg:w="1"/><text x="94.4823%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="94.2323%" y="245" width="0.0812%" height="15" fill="rgb(235,145,16)" fg:x="1160" fg:w="1"/><text x="94.4823%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="94.8010%" y="213" width="0.1625%" height="15" fill="rgb(237,114,19)" fg:x="1167" fg:w="2"/><text x="95.0510%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.8010%" y="197" width="0.1625%" height="15" fill="rgb(238,51,50)" fg:x="1167" fg:w="2"/><text x="95.0510%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="94.8010%" y="181" width="0.1625%" height="15" fill="rgb(205,194,25)" fg:x="1167" fg:w="2"/><text x="95.0510%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (106 samples, 8.61%)</title><rect x="86.6775%" y="325" width="8.6109%" height="15" fill="rgb(215,203,17)" fg:x="1067" fg:w="106"/><text x="86.9275%" y="335.50">indefinite::..</text></g><g><title>regex::regex::string::Regex::is_match_at (13 samples, 1.06%)</title><rect x="94.2323%" y="309" width="1.0561%" height="15" fill="rgb(233,112,49)" fg:x="1160" fg:w="13"/><text x="94.4823%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.97%)</title><rect x="94.3136%" y="293" width="0.9748%" height="15" fill="rgb(241,130,26)" fg:x="1161" fg:w="12"/><text x="94.5636%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.81%)</title><rect x="94.4760%" y="277" width="0.8123%" height="15" fill="rgb(252,223,19)" fg:x="1163" fg:w="10"/><text x="94.7260%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.81%)</title><rect x="94.4760%" y="261" width="0.8123%" height="15" fill="rgb(211,95,25)" fg:x="1163" fg:w="10"/><text x="94.7260%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="94.5573%" y="245" width="0.7311%" height="15" fill="rgb(251,182,27)" fg:x="1164" fg:w="9"/><text x="94.8073%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.73%)</title><rect x="94.5573%" y="229" width="0.7311%" height="15" fill="rgb(238,24,4)" fg:x="1164" fg:w="9"/><text x="94.8073%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="94.9634%" y="213" width="0.3249%" height="15" fill="rgb(224,220,25)" fg:x="1169" fg:w="4"/><text x="95.2134%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.2884%" y="245" width="0.0812%" height="15" fill="rgb(239,133,26)" fg:x="1173" fg:w="1"/><text x="95.5384%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.2884%" y="229" width="0.0812%" height="15" fill="rgb(211,94,48)" fg:x="1173" fg:w="1"/><text x="95.5384%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.2884%" y="213" width="0.0812%" height="15" fill="rgb(239,87,6)" fg:x="1173" fg:w="1"/><text x="95.5384%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.2884%" y="197" width="0.0812%" height="15" fill="rgb(227,62,0)" fg:x="1173" fg:w="1"/><text x="95.5384%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.2884%" y="181" width="0.0812%" height="15" fill="rgb(211,226,4)" fg:x="1173" fg:w="1"/><text x="95.5384%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.2884%" y="165" width="0.0812%" height="15" fill="rgb(253,38,52)" fg:x="1173" fg:w="1"/><text x="95.5384%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="95.3696%" y="245" width="0.2437%" height="15" fill="rgb(229,126,40)" fg:x="1174" fg:w="3"/><text x="95.6196%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="95.3696%" y="229" width="0.2437%" height="15" fill="rgb(229,165,44)" fg:x="1174" fg:w="3"/><text x="95.6196%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="95.4509%" y="213" width="0.1625%" height="15" fill="rgb(247,95,47)" fg:x="1175" fg:w="2"/><text x="95.7009%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.4509%" y="197" width="0.1625%" height="15" fill="rgb(216,140,30)" fg:x="1175" fg:w="2"/><text x="95.7009%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.5321%" y="181" width="0.0812%" height="15" fill="rgb(246,214,8)" fg:x="1176" fg:w="1"/><text x="95.7821%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.5321%" y="165" width="0.0812%" height="15" fill="rgb(227,224,15)" fg:x="1176" fg:w="1"/><text x="95.7821%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5321%" y="149" width="0.0812%" height="15" fill="rgb(233,175,4)" fg:x="1176" fg:w="1"/><text x="95.7821%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.5321%" y="133" width="0.0812%" height="15" fill="rgb(221,66,45)" fg:x="1176" fg:w="1"/><text x="95.7821%" y="143.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="95.6133%" y="245" width="0.0812%" height="15" fill="rgb(221,178,18)" fg:x="1177" fg:w="1"/><text x="95.8633%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="95.6946%" y="229" width="0.1625%" height="15" fill="rgb(213,81,29)" fg:x="1178" fg:w="2"/><text x="95.9446%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="95.7758%" y="213" width="0.0812%" height="15" fill="rgb(220,89,49)" fg:x="1179" fg:w="1"/><text x="96.0258%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="95.7758%" y="197" width="0.0812%" height="15" fill="rgb(227,60,33)" fg:x="1179" fg:w="1"/><text x="96.0258%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.7758%" y="181" width="0.0812%" height="15" fill="rgb(205,113,12)" fg:x="1179" fg:w="1"/><text x="96.0258%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7758%" y="165" width="0.0812%" height="15" fill="rgb(211,32,1)" fg:x="1179" fg:w="1"/><text x="96.0258%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.7758%" y="149" width="0.0812%" height="15" fill="rgb(246,2,12)" fg:x="1179" fg:w="1"/><text x="96.0258%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.32%)</title><rect x="95.6946%" y="245" width="0.3249%" height="15" fill="rgb(243,37,27)" fg:x="1178" fg:w="4"/><text x="95.9446%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="95.8570%" y="229" width="0.1625%" height="15" fill="rgb(248,211,31)" fg:x="1180" fg:w="2"/><text x="96.1070%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="95.9383%" y="213" width="0.0812%" height="15" fill="rgb(242,146,47)" fg:x="1181" fg:w="1"/><text x="96.1883%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.9383%" y="197" width="0.0812%" height="15" fill="rgb(206,70,20)" fg:x="1181" fg:w="1"/><text x="96.1883%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (10 samples, 0.81%)</title><rect x="95.2884%" y="293" width="0.8123%" height="15" fill="rgb(215,10,51)" fg:x="1173" fg:w="10"/><text x="95.5384%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (10 samples, 0.81%)</title><rect x="95.2884%" y="277" width="0.8123%" height="15" fill="rgb(243,178,53)" fg:x="1173" fg:w="10"/><text x="95.5384%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (10 samples, 0.81%)</title><rect x="95.2884%" y="261" width="0.8123%" height="15" fill="rgb(233,221,20)" fg:x="1173" fg:w="10"/><text x="95.5384%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="96.0195%" y="245" width="0.0812%" height="15" fill="rgb(218,95,35)" fg:x="1182" fg:w="1"/><text x="96.2695%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="96.0195%" y="229" width="0.0812%" height="15" fill="rgb(229,13,5)" fg:x="1182" fg:w="1"/><text x="96.2695%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="96.1007%" y="261" width="0.0812%" height="15" fill="rgb(252,164,30)" fg:x="1183" fg:w="1"/><text x="96.3507%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="96.1007%" y="245" width="0.0812%" height="15" fill="rgb(232,68,36)" fg:x="1183" fg:w="1"/><text x="96.3507%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="96.1007%" y="229" width="0.0812%" height="15" fill="rgb(219,59,54)" fg:x="1183" fg:w="1"/><text x="96.3507%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (12 samples, 0.97%)</title><rect x="95.2884%" y="309" width="0.9748%" height="15" fill="rgb(250,92,33)" fg:x="1173" fg:w="12"/><text x="95.5384%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="96.1007%" y="293" width="0.1625%" height="15" fill="rgb(229,162,54)" fg:x="1183" fg:w="2"/><text x="96.3507%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="96.1007%" y="277" width="0.1625%" height="15" fill="rgb(244,114,52)" fg:x="1183" fg:w="2"/><text x="96.3507%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="96.1820%" y="261" width="0.0812%" height="15" fill="rgb(212,211,43)" fg:x="1184" fg:w="1"/><text x="96.4320%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="96.1820%" y="245" width="0.0812%" height="15" fill="rgb(226,147,8)" fg:x="1184" fg:w="1"/><text x="96.4320%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.1820%" y="229" width="0.0812%" height="15" fill="rgb(226,23,13)" fg:x="1184" fg:w="1"/><text x="96.4320%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.1820%" y="213" width="0.0812%" height="15" fill="rgb(240,63,4)" fg:x="1184" fg:w="1"/><text x="96.4320%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.1820%" y="197" width="0.0812%" height="15" fill="rgb(221,1,32)" fg:x="1184" fg:w="1"/><text x="96.4320%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (214 samples, 17.38%)</title><rect x="78.9602%" y="405" width="17.3842%" height="15" fill="rgb(242,117,10)" fg:x="972" fg:w="214"/><text x="79.2102%" y="415.50">&lt;&amp;kernel::model::EntityPtr ..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (201 samples, 16.33%)</title><rect x="80.0162%" y="389" width="16.3282%" height="15" fill="rgb(249,172,44)" fg:x="985" fg:w="201"/><text x="80.2662%" y="399.50">plugins_core::looking::mo..</text></g><g><title>indefinite::indefinite (200 samples, 16.25%)</title><rect x="80.0975%" y="373" width="16.2470%" height="15" fill="rgb(244,46,45)" fg:x="986" fg:w="200"/><text x="80.3475%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (200 samples, 16.25%)</title><rect x="80.0975%" y="357" width="16.2470%" height="15" fill="rgb(206,43,17)" fg:x="986" fg:w="200"/><text x="80.3475%" y="367.50">indefinite::methods::inde..</text></g><g><title>indefinite::methods::apply_rules (200 samples, 16.25%)</title><rect x="80.0975%" y="341" width="16.2470%" height="15" fill="rgb(239,218,39)" fg:x="986" fg:w="200"/><text x="80.3475%" y="351.50">indefinite::methods::appl..</text></g><g><title>indefinite::rules::other::Other::run (13 samples, 1.06%)</title><rect x="95.2884%" y="325" width="1.0561%" height="15" fill="rgb(208,169,54)" fg:x="1173" fg:w="13"/><text x="95.5384%" y="335.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="96.2632%" y="309" width="0.0812%" height="15" fill="rgb(247,25,42)" fg:x="1185" fg:w="1"/><text x="96.5132%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.3444%" y="389" width="0.0812%" height="15" fill="rgb(226,23,31)" fg:x="1186" fg:w="1"/><text x="96.5944%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.3444%" y="373" width="0.0812%" height="15" fill="rgb(247,16,28)" fg:x="1186" fg:w="1"/><text x="96.5944%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.3444%" y="357" width="0.0812%" height="15" fill="rgb(231,147,38)" fg:x="1186" fg:w="1"/><text x="96.5944%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.3444%" y="341" width="0.0812%" height="15" fill="rgb(253,81,48)" fg:x="1186" fg:w="1"/><text x="96.5944%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.3444%" y="325" width="0.0812%" height="15" fill="rgb(249,222,43)" fg:x="1186" fg:w="1"/><text x="96.5944%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.3444%" y="309" width="0.0812%" height="15" fill="rgb(221,3,27)" fg:x="1186" fg:w="1"/><text x="96.5944%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="96.3444%" y="293" width="0.0812%" height="15" fill="rgb(228,180,5)" fg:x="1186" fg:w="1"/><text x="96.5944%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="96.3444%" y="277" width="0.0812%" height="15" fill="rgb(227,131,42)" fg:x="1186" fg:w="1"/><text x="96.5944%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.4257%" y="357" width="0.0812%" height="15" fill="rgb(212,3,39)" fg:x="1187" fg:w="1"/><text x="96.6757%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="96.3444%" y="405" width="0.2437%" height="15" fill="rgb(226,45,5)" fg:x="1186" fg:w="3"/><text x="96.5944%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="96.4257%" y="389" width="0.1625%" height="15" fill="rgb(215,167,45)" fg:x="1187" fg:w="2"/><text x="96.6757%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.4257%" y="373" width="0.1625%" height="15" fill="rgb(250,218,53)" fg:x="1187" fg:w="2"/><text x="96.6757%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.5069%" y="357" width="0.0812%" height="15" fill="rgb(207,140,0)" fg:x="1188" fg:w="1"/><text x="96.7569%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5069%" y="341" width="0.0812%" height="15" fill="rgb(238,133,51)" fg:x="1188" fg:w="1"/><text x="96.7569%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="96.5881%" y="373" width="0.0812%" height="15" fill="rgb(218,203,53)" fg:x="1189" fg:w="1"/><text x="96.8381%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.5881%" y="357" width="0.0812%" height="15" fill="rgb(226,184,25)" fg:x="1189" fg:w="1"/><text x="96.8381%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="96.5881%" y="341" width="0.0812%" height="15" fill="rgb(231,121,21)" fg:x="1189" fg:w="1"/><text x="96.8381%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="96.6694%" y="357" width="0.0812%" height="15" fill="rgb(251,14,34)" fg:x="1190" fg:w="1"/><text x="96.9194%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="96.6694%" y="373" width="0.2437%" height="15" fill="rgb(249,193,11)" fg:x="1190" fg:w="3"/><text x="96.9194%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="96.7506%" y="357" width="0.1625%" height="15" fill="rgb(220,172,37)" fg:x="1191" fg:w="2"/><text x="97.0006%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.7506%" y="341" width="0.1625%" height="15" fill="rgb(231,229,43)" fg:x="1191" fg:w="2"/><text x="97.0006%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="96.7506%" y="325" width="0.1625%" height="15" fill="rgb(250,161,5)" fg:x="1191" fg:w="2"/><text x="97.0006%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.7506%" y="309" width="0.1625%" height="15" fill="rgb(218,225,18)" fg:x="1191" fg:w="2"/><text x="97.0006%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="96.7506%" y="293" width="0.1625%" height="15" fill="rgb(245,45,42)" fg:x="1191" fg:w="2"/><text x="97.0006%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.7506%" y="277" width="0.1625%" height="15" fill="rgb(211,115,1)" fg:x="1191" fg:w="2"/><text x="97.0006%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8318%" y="261" width="0.0812%" height="15" fill="rgb(248,133,52)" fg:x="1192" fg:w="1"/><text x="97.0818%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="96.9131%" y="373" width="0.0812%" height="15" fill="rgb(238,100,21)" fg:x="1193" fg:w="1"/><text x="97.1631%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.9131%" y="357" width="0.0812%" height="15" fill="rgb(247,144,11)" fg:x="1193" fg:w="1"/><text x="97.1631%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9131%" y="341" width="0.0812%" height="15" fill="rgb(206,164,16)" fg:x="1193" fg:w="1"/><text x="97.1631%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9131%" y="325" width="0.0812%" height="15" fill="rgb(222,34,3)" fg:x="1193" fg:w="1"/><text x="97.1631%" y="335.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (6 samples, 0.49%)</title><rect x="96.5881%" y="389" width="0.4874%" height="15" fill="rgb(248,82,4)" fg:x="1189" fg:w="6"/><text x="96.8381%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="96.9943%" y="373" width="0.0812%" height="15" fill="rgb(228,81,46)" fg:x="1194" fg:w="1"/><text x="97.2443%" y="383.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="97.0755%" y="341" width="0.0812%" height="15" fill="rgb(227,67,47)" fg:x="1195" fg:w="1"/><text x="97.3255%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.65%)</title><rect x="96.5881%" y="405" width="0.6499%" height="15" fill="rgb(215,93,53)" fg:x="1189" fg:w="8"/><text x="96.8381%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="97.0755%" y="389" width="0.1625%" height="15" fill="rgb(248,194,39)" fg:x="1195" fg:w="2"/><text x="97.3255%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="97.0755%" y="373" width="0.1625%" height="15" fill="rgb(215,5,19)" fg:x="1195" fg:w="2"/><text x="97.3255%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="97.0755%" y="357" width="0.1625%" height="15" fill="rgb(226,215,51)" fg:x="1195" fg:w="2"/><text x="97.3255%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="97.1568%" y="341" width="0.0812%" height="15" fill="rgb(225,56,26)" fg:x="1196" fg:w="1"/><text x="97.4068%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.1568%" y="325" width="0.0812%" height="15" fill="rgb(222,75,29)" fg:x="1196" fg:w="1"/><text x="97.4068%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.1568%" y="309" width="0.0812%" height="15" fill="rgb(236,139,6)" fg:x="1196" fg:w="1"/><text x="97.4068%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1568%" y="293" width="0.0812%" height="15" fill="rgb(223,137,36)" fg:x="1196" fg:w="1"/><text x="97.4068%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.1568%" y="277" width="0.0812%" height="15" fill="rgb(226,99,2)" fg:x="1196" fg:w="1"/><text x="97.4068%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1568%" y="261" width="0.0812%" height="15" fill="rgb(206,133,23)" fg:x="1196" fg:w="1"/><text x="97.4068%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.1568%" y="245" width="0.0812%" height="15" fill="rgb(243,173,15)" fg:x="1196" fg:w="1"/><text x="97.4068%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.1568%" y="229" width="0.0812%" height="15" fill="rgb(228,69,28)" fg:x="1196" fg:w="1"/><text x="97.4068%" y="239.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (232 samples, 18.85%)</title><rect x="78.4728%" y="565" width="18.8465%" height="15" fill="rgb(212,51,22)" fg:x="966" fg:w="232"/><text x="78.7228%" y="575.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (232 samples, 18.85%)</title><rect x="78.4728%" y="549" width="18.8465%" height="15" fill="rgb(227,113,0)" fg:x="966" fg:w="232"/><text x="78.7228%" y="559.50">&lt;plugins_dynlib::DynamicMiddl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (232 samples, 18.85%)</title><rect x="78.4728%" y="533" width="18.8465%" height="15" fill="rgb(252,84,27)" fg:x="966" fg:w="232"/><text x="78.7228%" y="543.50">kernel::plugins::mw::Middlewa..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (232 samples, 18.85%)</title><rect x="78.4728%" y="517" width="18.8465%" height="15" fill="rgb(223,145,39)" fg:x="966" fg:w="232"/><text x="78.7228%" y="527.50">core::ops::function::FnOnce::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (232 samples, 18.85%)</title><rect x="78.4728%" y="501" width="18.8465%" height="15" fill="rgb(239,219,30)" fg:x="966" fg:w="232"/><text x="78.7228%" y="511.50">kernel::plugins::mw::Middlewa..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (232 samples, 18.85%)</title><rect x="78.4728%" y="485" width="18.8465%" height="15" fill="rgb(224,196,39)" fg:x="966" fg:w="232"/><text x="78.7228%" y="495.50">core::ops::function::FnOnce::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (232 samples, 18.85%)</title><rect x="78.4728%" y="469" width="18.8465%" height="15" fill="rgb(205,35,43)" fg:x="966" fg:w="232"/><text x="78.7228%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as co..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (232 samples, 18.85%)</title><rect x="78.4728%" y="453" width="18.8465%" height="15" fill="rgb(228,201,21)" fg:x="966" fg:w="232"/><text x="78.7228%" y="463.50">&lt;engine::session::state::Stat..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (231 samples, 18.77%)</title><rect x="78.5540%" y="437" width="18.7652%" height="15" fill="rgb(237,118,16)" fg:x="967" fg:w="231"/><text x="78.8040%" y="447.50">&lt;plugins_core::looking::actio..</text></g><g><title>plugins_core::looking::model::new_area_observation (226 samples, 18.36%)</title><rect x="78.9602%" y="421" width="18.3591%" height="15" fill="rgb(241,17,19)" fg:x="972" fg:w="226"/><text x="79.2102%" y="431.50">plugins_core::looking::model:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.2380%" y="405" width="0.0812%" height="15" fill="rgb(214,10,25)" fg:x="1197" fg:w="1"/><text x="97.4880%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.2380%" y="389" width="0.0812%" height="15" fill="rgb(238,37,29)" fg:x="1197" fg:w="1"/><text x="97.4880%" y="399.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.4005%" y="549" width="0.0812%" height="15" fill="rgb(253,83,25)" fg:x="1199" fg:w="1"/><text x="97.6505%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.4817%" y="517" width="0.0812%" height="15" fill="rgb(234,192,12)" fg:x="1200" fg:w="1"/><text x="97.7317%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.4817%" y="501" width="0.0812%" height="15" fill="rgb(241,216,45)" fg:x="1200" fg:w="1"/><text x="97.7317%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4817%" y="485" width="0.0812%" height="15" fill="rgb(242,22,33)" fg:x="1200" fg:w="1"/><text x="97.7317%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.5630%" y="453" width="0.1625%" height="15" fill="rgb(231,105,49)" fg:x="1201" fg:w="2"/><text x="97.8130%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6442%" y="437" width="0.0812%" height="15" fill="rgb(218,204,15)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6442%" y="421" width="0.0812%" height="15" fill="rgb(235,138,41)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6442%" y="405" width="0.0812%" height="15" fill="rgb(246,0,9)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6442%" y="389" width="0.0812%" height="15" fill="rgb(210,74,4)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6442%" y="373" width="0.0812%" height="15" fill="rgb(250,60,41)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.6442%" y="357" width="0.0812%" height="15" fill="rgb(220,115,12)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.6442%" y="341" width="0.0812%" height="15" fill="rgb(237,100,13)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.6442%" y="325" width="0.0812%" height="15" fill="rgb(213,55,26)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.6442%" y="309" width="0.0812%" height="15" fill="rgb(216,17,4)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.6442%" y="293" width="0.0812%" height="15" fill="rgb(220,153,47)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.6442%" y="277" width="0.0812%" height="15" fill="rgb(215,131,9)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.6442%" y="261" width="0.0812%" height="15" fill="rgb(233,46,42)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.6442%" y="245" width="0.0812%" height="15" fill="rgb(226,86,7)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.6442%" y="229" width="0.0812%" height="15" fill="rgb(239,226,21)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6442%" y="213" width="0.0812%" height="15" fill="rgb(244,137,22)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.7254%" y="373" width="0.0812%" height="15" fill="rgb(211,139,35)" fg:x="1203" fg:w="1"/><text x="97.9754%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.8067%" y="325" width="0.0812%" height="15" fill="rgb(214,62,50)" fg:x="1204" fg:w="1"/><text x="98.0567%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.8067%" y="309" width="0.0812%" height="15" fill="rgb(212,113,44)" fg:x="1204" fg:w="1"/><text x="98.0567%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="97.7254%" y="453" width="0.2437%" height="15" fill="rgb(226,150,43)" fg:x="1203" fg:w="3"/><text x="97.9754%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="97.7254%" y="437" width="0.2437%" height="15" fill="rgb(250,71,37)" fg:x="1203" fg:w="3"/><text x="97.9754%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.7254%" y="421" width="0.2437%" height="15" fill="rgb(219,76,19)" fg:x="1203" fg:w="3"/><text x="97.9754%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="97.7254%" y="405" width="0.2437%" height="15" fill="rgb(250,39,11)" fg:x="1203" fg:w="3"/><text x="97.9754%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.7254%" y="389" width="0.2437%" height="15" fill="rgb(230,64,31)" fg:x="1203" fg:w="3"/><text x="97.9754%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.8067%" y="373" width="0.1625%" height="15" fill="rgb(208,222,23)" fg:x="1204" fg:w="2"/><text x="98.0567%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8067%" y="357" width="0.1625%" height="15" fill="rgb(227,125,18)" fg:x="1204" fg:w="2"/><text x="98.0567%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.8067%" y="341" width="0.1625%" height="15" fill="rgb(234,210,9)" fg:x="1204" fg:w="2"/><text x="98.0567%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.8879%" y="325" width="0.0812%" height="15" fill="rgb(217,127,24)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8879%" y="309" width="0.0812%" height="15" fill="rgb(239,141,48)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8879%" y="293" width="0.0812%" height="15" fill="rgb(227,109,8)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.8879%" y="277" width="0.0812%" height="15" fill="rgb(235,184,23)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8879%" y="261" width="0.0812%" height="15" fill="rgb(227,226,48)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8879%" y="245" width="0.0812%" height="15" fill="rgb(206,150,11)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.8879%" y="229" width="0.0812%" height="15" fill="rgb(254,2,33)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="239.50"></text></g><g><title>plugins_core::tools::contained_by (7 samples, 0.57%)</title><rect x="97.4817%" y="533" width="0.5686%" height="15" fill="rgb(243,160,20)" fg:x="1200" fg:w="7"/><text x="97.7317%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.49%)</title><rect x="97.5630%" y="517" width="0.4874%" height="15" fill="rgb(218,208,30)" fg:x="1201" fg:w="6"/><text x="97.8130%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.49%)</title><rect x="97.5630%" y="501" width="0.4874%" height="15" fill="rgb(224,120,49)" fg:x="1201" fg:w="6"/><text x="97.8130%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.49%)</title><rect x="97.5630%" y="485" width="0.4874%" height="15" fill="rgb(246,12,2)" fg:x="1201" fg:w="6"/><text x="97.8130%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="97.5630%" y="469" width="0.4874%" height="15" fill="rgb(236,117,3)" fg:x="1201" fg:w="6"/><text x="97.8130%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="97.9691%" y="453" width="0.0812%" height="15" fill="rgb(216,128,52)" fg:x="1206" fg:w="1"/><text x="98.2191%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.9691%" y="437" width="0.0812%" height="15" fill="rgb(246,145,19)" fg:x="1206" fg:w="1"/><text x="98.2191%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9691%" y="421" width="0.0812%" height="15" fill="rgb(222,11,46)" fg:x="1206" fg:w="1"/><text x="98.2191%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9691%" y="405" width="0.0812%" height="15" fill="rgb(245,82,36)" fg:x="1206" fg:w="1"/><text x="98.2191%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9691%" y="389" width="0.0812%" height="15" fill="rgb(250,73,51)" fg:x="1206" fg:w="1"/><text x="98.2191%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9691%" y="373" width="0.0812%" height="15" fill="rgb(221,189,23)" fg:x="1206" fg:w="1"/><text x="98.2191%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.9691%" y="357" width="0.0812%" height="15" fill="rgb(210,33,7)" fg:x="1206" fg:w="1"/><text x="98.2191%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="97.9691%" y="341" width="0.0812%" height="15" fill="rgb(210,107,22)" fg:x="1206" fg:w="1"/><text x="98.2191%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.0504%" y="469" width="0.0812%" height="15" fill="rgb(222,116,37)" fg:x="1207" fg:w="1"/><text x="98.3004%" y="479.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (9 samples, 0.73%)</title><rect x="97.4817%" y="549" width="0.7311%" height="15" fill="rgb(254,17,48)" fg:x="1200" fg:w="9"/><text x="97.7317%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="98.0504%" y="533" width="0.1625%" height="15" fill="rgb(224,36,32)" fg:x="1207" fg:w="2"/><text x="98.3004%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.0504%" y="517" width="0.1625%" height="15" fill="rgb(232,90,46)" fg:x="1207" fg:w="2"/><text x="98.3004%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.0504%" y="501" width="0.1625%" height="15" fill="rgb(241,66,40)" fg:x="1207" fg:w="2"/><text x="98.3004%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.0504%" y="485" width="0.1625%" height="15" fill="rgb(249,184,29)" fg:x="1207" fg:w="2"/><text x="98.3004%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1316%" y="469" width="0.0812%" height="15" fill="rgb(231,181,1)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1316%" y="453" width="0.0812%" height="15" fill="rgb(224,94,2)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.1316%" y="437" width="0.0812%" height="15" fill="rgb(229,170,15)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.1316%" y="421" width="0.0812%" height="15" fill="rgb(240,127,35)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="431.50"></text></g><g><title>engine::session::Session::captured (251 samples, 20.39%)</title><rect x="77.9041%" y="709" width="20.3899%" height="15" fill="rgb(248,196,34)" fg:x="959" fg:w="251"/><text x="78.1541%" y="719.50">engine::session::Session::captur..</text></g><g><title>engine::session::logs::capture (251 samples, 20.39%)</title><rect x="77.9041%" y="693" width="20.3899%" height="15" fill="rgb(236,137,7)" fg:x="959" fg:w="251"/><text x="78.1541%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (249 samples, 20.23%)</title><rect x="78.0666%" y="677" width="20.2275%" height="15" fill="rgb(235,127,16)" fg:x="961" fg:w="249"/><text x="78.3166%" y="687.50">tracing_core::dispatcher::with_d..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (249 samples, 20.23%)</title><rect x="78.0666%" y="661" width="20.2275%" height="15" fill="rgb(250,192,54)" fg:x="961" fg:w="249"/><text x="78.3166%" y="671.50">&lt;engine::session::Session as ker..</text></g><g><title>kernel::plugins::mw::apply_middleware (249 samples, 20.23%)</title><rect x="78.0666%" y="645" width="20.2275%" height="15" fill="rgb(218,98,20)" fg:x="961" fg:w="249"/><text x="78.3166%" y="655.50">kernel::plugins::mw::apply_middl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (249 samples, 20.23%)</title><rect x="78.0666%" y="629" width="20.2275%" height="15" fill="rgb(230,176,47)" fg:x="961" fg:w="249"/><text x="78.3166%" y="639.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (249 samples, 20.23%)</title><rect x="78.0666%" y="613" width="20.2275%" height="15" fill="rgb(244,2,33)" fg:x="961" fg:w="249"/><text x="78.3166%" y="623.50">&lt;engine::session::ExpandSurround..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (244 samples, 19.82%)</title><rect x="78.4728%" y="597" width="19.8213%" height="15" fill="rgb(231,100,17)" fg:x="966" fg:w="244"/><text x="78.7228%" y="607.50">kernel::plugins::mw::Middleware..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (244 samples, 19.82%)</title><rect x="78.4728%" y="581" width="19.8213%" height="15" fill="rgb(245,23,12)" fg:x="966" fg:w="244"/><text x="78.7228%" y="591.50">&lt;plugins_rune::RuneMiddleware a..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (12 samples, 0.97%)</title><rect x="97.3193%" y="565" width="0.9748%" height="15" fill="rgb(249,55,22)" fg:x="1198" fg:w="12"/><text x="97.5693%" y="575.50"></text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="98.2128%" y="549" width="0.0812%" height="15" fill="rgb(207,134,9)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="559.50"></text></g><g><title>plugins_rune::sources::get_script (1 samples, 0.08%)</title><rect x="98.2128%" y="533" width="0.0812%" height="15" fill="rgb(218,134,0)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.2128%" y="517" width="0.0812%" height="15" fill="rgb(213,212,33)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="98.2128%" y="501" width="0.0812%" height="15" fill="rgb(252,106,18)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.2128%" y="485" width="0.0812%" height="15" fill="rgb(208,126,42)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.2128%" y="469" width="0.0812%" height="15" fill="rgb(246,175,29)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2941%" y="565" width="0.0812%" height="15" fill="rgb(215,13,50)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2941%" y="549" width="0.0812%" height="15" fill="rgb(216,172,15)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.3753%" y="565" width="0.0812%" height="15" fill="rgb(212,103,13)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.3753%" y="549" width="0.0812%" height="15" fill="rgb(231,171,36)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.3753%" y="533" width="0.0812%" height="15" fill="rgb(250,123,20)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.3753%" y="517" width="0.0812%" height="15" fill="rgb(212,53,50)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.3753%" y="501" width="0.0812%" height="15" fill="rgb(243,54,12)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.3753%" y="485" width="0.0812%" height="15" fill="rgb(234,101,34)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3753%" y="469" width="0.0812%" height="15" fill="rgb(254,67,22)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.2941%" y="661" width="0.2437%" height="15" fill="rgb(250,35,47)" fg:x="1210" fg:w="3"/><text x="98.5441%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.2941%" y="645" width="0.2437%" height="15" fill="rgb(226,126,38)" fg:x="1210" fg:w="3"/><text x="98.5441%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.2941%" y="629" width="0.2437%" height="15" fill="rgb(216,138,53)" fg:x="1210" fg:w="3"/><text x="98.5441%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.2941%" y="613" width="0.2437%" height="15" fill="rgb(246,199,43)" fg:x="1210" fg:w="3"/><text x="98.5441%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.2941%" y="597" width="0.2437%" height="15" fill="rgb(232,125,11)" fg:x="1210" fg:w="3"/><text x="98.5441%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.2941%" y="581" width="0.2437%" height="15" fill="rgb(218,219,45)" fg:x="1210" fg:w="3"/><text x="98.5441%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4565%" y="565" width="0.0812%" height="15" fill="rgb(216,102,54)" fg:x="1212" fg:w="1"/><text x="98.7065%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4565%" y="549" width="0.0812%" height="15" fill="rgb(250,228,7)" fg:x="1212" fg:w="1"/><text x="98.7065%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.4565%" y="533" width="0.0812%" height="15" fill="rgb(226,125,25)" fg:x="1212" fg:w="1"/><text x="98.7065%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.4565%" y="517" width="0.0812%" height="15" fill="rgb(224,165,27)" fg:x="1212" fg:w="1"/><text x="98.7065%" y="527.50"></text></g><g><title>engine::session::internal::Added::find_refs (4 samples, 0.32%)</title><rect x="98.2941%" y="693" width="0.3249%" height="15" fill="rgb(233,86,3)" fg:x="1210" fg:w="4"/><text x="98.5441%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="98.2941%" y="677" width="0.3249%" height="15" fill="rgb(228,116,20)" fg:x="1210" fg:w="4"/><text x="98.5441%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5378%" y="661" width="0.0812%" height="15" fill="rgb(209,192,17)" fg:x="1213" fg:w="1"/><text x="98.7878%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5378%" y="645" width="0.0812%" height="15" fill="rgb(224,88,34)" fg:x="1213" fg:w="1"/><text x="98.7878%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.5378%" y="629" width="0.0812%" height="15" fill="rgb(233,38,6)" fg:x="1213" fg:w="1"/><text x="98.7878%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.5378%" y="613" width="0.0812%" height="15" fill="rgb(212,59,30)" fg:x="1213" fg:w="1"/><text x="98.7878%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.6190%" y="677" width="0.0812%" height="15" fill="rgb(213,80,3)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6190%" y="661" width="0.0812%" height="15" fill="rgb(251,178,7)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6190%" y="645" width="0.0812%" height="15" fill="rgb(213,154,26)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.6190%" y="629" width="0.0812%" height="15" fill="rgb(238,165,49)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6190%" y="613" width="0.0812%" height="15" fill="rgb(248,91,46)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.7002%" y="629" width="0.0812%" height="15" fill="rgb(244,21,52)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7002%" y="613" width="0.0812%" height="15" fill="rgb(247,122,20)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.7002%" y="597" width="0.0812%" height="15" fill="rgb(218,27,9)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7002%" y="581" width="0.0812%" height="15" fill="rgb(246,7,6)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7002%" y="565" width="0.0812%" height="15" fill="rgb(227,135,54)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.7002%" y="549" width="0.0812%" height="15" fill="rgb(247,14,11)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7002%" y="533" width="0.0812%" height="15" fill="rgb(206,149,34)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7002%" y="517" width="0.0812%" height="15" fill="rgb(227,228,4)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.7002%" y="501" width="0.0812%" height="15" fill="rgb(238,218,28)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7002%" y="485" width="0.0812%" height="15" fill="rgb(252,86,40)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7002%" y="469" width="0.0812%" height="15" fill="rgb(251,225,11)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.7002%" y="453" width="0.0812%" height="15" fill="rgb(206,46,49)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.7002%" y="677" width="0.1625%" height="15" fill="rgb(245,128,24)" fg:x="1215" fg:w="2"/><text x="98.9502%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.7002%" y="661" width="0.1625%" height="15" fill="rgb(219,177,34)" fg:x="1215" fg:w="2"/><text x="98.9502%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.7002%" y="645" width="0.1625%" height="15" fill="rgb(218,60,48)" fg:x="1215" fg:w="2"/><text x="98.9502%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7815%" y="629" width="0.0812%" height="15" fill="rgb(221,11,5)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.73%)</title><rect x="98.2941%" y="709" width="0.7311%" height="15" fill="rgb(220,148,13)" fg:x="1210" fg:w="9"/><text x="98.5441%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="98.6190%" y="693" width="0.4062%" height="15" fill="rgb(210,16,3)" fg:x="1214" fg:w="5"/><text x="98.8690%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="98.8627%" y="677" width="0.1625%" height="15" fill="rgb(236,80,2)" fg:x="1217" fg:w="2"/><text x="99.1127%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="98.8627%" y="661" width="0.1625%" height="15" fill="rgb(239,129,19)" fg:x="1217" fg:w="2"/><text x="99.1127%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.8627%" y="645" width="0.1625%" height="15" fill="rgb(220,106,35)" fg:x="1217" fg:w="2"/><text x="99.1127%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.8627%" y="629" width="0.1625%" height="15" fill="rgb(252,139,45)" fg:x="1217" fg:w="2"/><text x="99.1127%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.8627%" y="613" width="0.1625%" height="15" fill="rgb(229,8,36)" fg:x="1217" fg:w="2"/><text x="99.1127%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.8627%" y="597" width="0.1625%" height="15" fill="rgb(230,126,33)" fg:x="1217" fg:w="2"/><text x="99.1127%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.8627%" y="581" width="0.1625%" height="15" fill="rgb(239,140,21)" fg:x="1217" fg:w="2"/><text x="99.1127%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.8627%" y="565" width="0.1625%" height="15" fill="rgb(254,104,9)" fg:x="1217" fg:w="2"/><text x="99.1127%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.8627%" y="549" width="0.1625%" height="15" fill="rgb(239,52,14)" fg:x="1217" fg:w="2"/><text x="99.1127%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9439%" y="533" width="0.0812%" height="15" fill="rgb(208,227,44)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9439%" y="517" width="0.0812%" height="15" fill="rgb(246,18,19)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9439%" y="501" width="0.0812%" height="15" fill="rgb(235,228,25)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.9439%" y="485" width="0.0812%" height="15" fill="rgb(240,156,20)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="495.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.0252%" y="709" width="0.0812%" height="15" fill="rgb(224,8,20)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.0252%" y="693" width="0.0812%" height="15" fill="rgb(214,12,52)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0252%" y="677" width="0.0812%" height="15" fill="rgb(211,220,47)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0252%" y="661" width="0.0812%" height="15" fill="rgb(250,173,5)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.0252%" y="645" width="0.0812%" height="15" fill="rgb(250,125,52)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0252%" y="629" width="0.0812%" height="15" fill="rgb(209,133,18)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.0252%" y="613" width="0.0812%" height="15" fill="rgb(216,173,22)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0252%" y="597" width="0.0812%" height="15" fill="rgb(205,3,22)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1877%" y="661" width="0.0812%" height="15" fill="rgb(248,22,20)" fg:x="1221" fg:w="1"/><text x="99.4377%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1877%" y="645" width="0.0812%" height="15" fill="rgb(233,6,29)" fg:x="1221" fg:w="1"/><text x="99.4377%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.2689%" y="661" width="0.0812%" height="15" fill="rgb(240,22,54)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2689%" y="645" width="0.0812%" height="15" fill="rgb(231,133,32)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2689%" y="629" width="0.0812%" height="15" fill="rgb(248,193,4)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2689%" y="613" width="0.0812%" height="15" fill="rgb(211,178,46)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.2689%" y="597" width="0.0812%" height="15" fill="rgb(224,5,42)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.2689%" y="581" width="0.0812%" height="15" fill="rgb(239,176,25)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.2689%" y="565" width="0.0812%" height="15" fill="rgb(245,187,50)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2689%" y="549" width="0.0812%" height="15" fill="rgb(248,24,15)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2689%" y="533" width="0.0812%" height="15" fill="rgb(205,166,13)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.2689%" y="517" width="0.0812%" height="15" fill="rgb(208,114,23)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="527.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3501%" y="613" width="0.0812%" height="15" fill="rgb(239,127,18)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3501%" y="597" width="0.0812%" height="15" fill="rgb(219,154,28)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.3501%" y="581" width="0.0812%" height="15" fill="rgb(225,157,23)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.3501%" y="565" width="0.0812%" height="15" fill="rgb(219,8,6)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="99.4314%" y="613" width="0.2437%" height="15" fill="rgb(212,47,6)" fg:x="1224" fg:w="3"/><text x="99.6814%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.4314%" y="597" width="0.2437%" height="15" fill="rgb(224,190,4)" fg:x="1224" fg:w="3"/><text x="99.6814%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.4314%" y="581" width="0.2437%" height="15" fill="rgb(239,183,29)" fg:x="1224" fg:w="3"/><text x="99.6814%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5938%" y="565" width="0.0812%" height="15" fill="rgb(213,57,7)" fg:x="1226" fg:w="1"/><text x="99.8438%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5938%" y="549" width="0.0812%" height="15" fill="rgb(216,148,1)" fg:x="1226" fg:w="1"/><text x="99.8438%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5938%" y="533" width="0.0812%" height="15" fill="rgb(236,182,29)" fg:x="1226" fg:w="1"/><text x="99.8438%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.5938%" y="517" width="0.0812%" height="15" fill="rgb(244,120,48)" fg:x="1226" fg:w="1"/><text x="99.8438%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.41%)</title><rect x="99.3501%" y="661" width="0.4062%" height="15" fill="rgb(206,71,34)" fg:x="1223" fg:w="5"/><text x="99.6001%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="99.3501%" y="645" width="0.4062%" height="15" fill="rgb(242,32,6)" fg:x="1223" fg:w="5"/><text x="99.6001%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="99.3501%" y="629" width="0.4062%" height="15" fill="rgb(241,35,3)" fg:x="1223" fg:w="5"/><text x="99.6001%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6751%" y="613" width="0.0812%" height="15" fill="rgb(222,62,19)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6751%" y="597" width="0.0812%" height="15" fill="rgb(223,110,41)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.6751%" y="581" width="0.0812%" height="15" fill="rgb(208,224,4)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7563%" y="565" width="0.0812%" height="15" fill="rgb(241,137,19)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7563%" y="549" width="0.0812%" height="15" fill="rgb(244,24,17)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7563%" y="533" width="0.0812%" height="15" fill="rgb(245,178,49)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7563%" y="597" width="0.1625%" height="15" fill="rgb(219,160,38)" fg:x="1228" fg:w="2"/><text x="100.0063%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7563%" y="581" width="0.1625%" height="15" fill="rgb(228,137,14)" fg:x="1228" fg:w="2"/><text x="100.0063%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8375%" y="565" width="0.0812%" height="15" fill="rgb(237,134,11)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="575.50"></text></g><g><title>all (1,231 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(211,126,44)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-9e370512 (1,231 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(226,171,33)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1087.50">simple-9e370512</text></g><g><title>_start (1,231 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(253,99,13)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,231 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(244,48,7)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,231 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(244,217,54)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,231 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(224,15,18)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,231 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(244,99,12)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,231 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(233,226,8)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,231 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(229,211,3)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,231 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(216,140,21)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,231 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(234,122,30)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,231 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(236,25,46)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,231 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(217,52,54)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,231 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(222,29,26)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,231 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(216,177,29)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,231 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(247,136,51)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,231 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(231,47,47)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,231 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(211,192,36)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,231 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(229,156,32)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (424 samples, 34.44%)</title><rect x="65.5565%" y="789" width="34.4435%" height="15" fill="rgb(248,213,20)" fg:x="807" fg:w="424"/><text x="65.8065%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routi..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (424 samples, 34.44%)</title><rect x="65.5565%" y="773" width="34.4435%" height="15" fill="rgb(217,64,7)" fg:x="807" fg:w="424"/><text x="65.8065%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (424 samples, 34.44%)</title><rect x="65.5565%" y="757" width="34.4435%" height="15" fill="rgb(232,142,8)" fg:x="807" fg:w="424"/><text x="65.8065%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (274 samples, 22.26%)</title><rect x="77.7417%" y="741" width="22.2583%" height="15" fill="rgb(224,92,44)" fg:x="957" fg:w="274"/><text x="77.9917%" y="751.50">engine::session::Session::evaluate_..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (274 samples, 22.26%)</title><rect x="77.7417%" y="725" width="22.2583%" height="15" fill="rgb(214,169,17)" fg:x="957" fg:w="274"/><text x="77.9917%" y="735.50">engine::session::Session::evaluate_..</text></g><g><title>kernel::model::EntityPtrResolver::world (11 samples, 0.89%)</title><rect x="99.1064%" y="709" width="0.8936%" height="15" fill="rgb(210,59,37)" fg:x="1220" fg:w="11"/><text x="99.3564%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.81%)</title><rect x="99.1877%" y="693" width="0.8123%" height="15" fill="rgb(214,116,48)" fg:x="1221" fg:w="10"/><text x="99.4377%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.81%)</title><rect x="99.1877%" y="677" width="0.8123%" height="15" fill="rgb(244,191,6)" fg:x="1221" fg:w="10"/><text x="99.4377%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="99.7563%" y="661" width="0.2437%" height="15" fill="rgb(241,50,52)" fg:x="1228" fg:w="3"/><text x="100.0063%" y="671.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="99.7563%" y="645" width="0.2437%" height="15" fill="rgb(236,75,39)" fg:x="1228" fg:w="3"/><text x="100.0063%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.7563%" y="629" width="0.2437%" height="15" fill="rgb(236,99,0)" fg:x="1228" fg:w="3"/><text x="100.0063%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.7563%" y="613" width="0.2437%" height="15" fill="rgb(207,202,15)" fg:x="1228" fg:w="3"/><text x="100.0063%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9188%" y="597" width="0.0812%" height="15" fill="rgb(233,207,14)" fg:x="1230" fg:w="1"/><text x="100.1688%" y="607.50"></text></g></svg></svg>