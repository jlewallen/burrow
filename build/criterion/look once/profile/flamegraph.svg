<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="998" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="981.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="981.00"> </text><svg id="frames" x="10" width="1180" total_samples="1247"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.2406%" y="581" width="0.1604%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="2"/><text x="0.4906%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.3208%" y="565" width="0.0802%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="1"/><text x="0.5708%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3208%" y="549" width="0.0802%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.5708%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4010%" y="549" width="0.0802%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="0.6510%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.4812%" y="469" width="0.1604%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="2"/><text x="0.7312%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4812%" y="453" width="0.1604%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="2"/><text x="0.7312%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6415%" y="453" width="0.0802%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="1"/><text x="0.8915%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.4812%" y="517" width="0.3208%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="4"/><text x="0.7312%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.4812%" y="501" width="0.3208%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="4"/><text x="0.7312%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="0.4812%" y="485" width="0.3208%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="4"/><text x="0.7312%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.6415%" y="469" width="0.1604%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="2"/><text x="0.8915%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.7217%" y="453" width="0.0802%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="1"/><text x="0.9717%" y="463.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="0.0000%" y="597" width="0.8821%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="11"/><text x="0.2500%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (6 samples, 0.48%)</title><rect x="0.4010%" y="581" width="0.4812%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="6"/><text x="0.6510%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.4010%" y="565" width="0.4812%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="6"/><text x="0.6510%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (5 samples, 0.40%)</title><rect x="0.4812%" y="549" width="0.4010%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="5"/><text x="0.7312%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.4812%" y="533" width="0.4010%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="5"/><text x="0.7312%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8019%" y="517" width="0.0802%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="1"/><text x="1.0519%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="0.9623%" y="533" width="0.0802%" height="15" fill="rgb(221,200,47)" fg:x="12" fg:w="1"/><text x="1.2123%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="1.0425%" y="533" width="0.0802%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="1"/><text x="1.2925%" y="543.50"></text></g><g><title>&lt;kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="1.1227%" y="453" width="0.0802%" height="15" fill="rgb(249,33,26)" fg:x="14" fg:w="1"/><text x="1.3727%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="1.2029%" y="421" width="0.0802%" height="15" fill="rgb(235,183,28)" fg:x="15" fg:w="1"/><text x="1.4529%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="1.2029%" y="453" width="0.1604%" height="15" fill="rgb(221,5,38)" fg:x="15" fg:w="2"/><text x="1.4529%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="1.2029%" y="437" width="0.1604%" height="15" fill="rgb(247,18,42)" fg:x="15" fg:w="2"/><text x="1.4529%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.2831%" y="421" width="0.0802%" height="15" fill="rgb(241,131,45)" fg:x="16" fg:w="1"/><text x="1.5331%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="1.2831%" y="405" width="0.0802%" height="15" fill="rgb(249,31,29)" fg:x="16" fg:w="1"/><text x="1.5331%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.2831%" y="389" width="0.0802%" height="15" fill="rgb(225,111,53)" fg:x="16" fg:w="1"/><text x="1.5331%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (4 samples, 0.32%)</title><rect x="1.1227%" y="517" width="0.3208%" height="15" fill="rgb(238,160,17)" fg:x="14" fg:w="4"/><text x="1.3727%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (4 samples, 0.32%)</title><rect x="1.1227%" y="501" width="0.3208%" height="15" fill="rgb(214,148,48)" fg:x="14" fg:w="4"/><text x="1.3727%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="1.1227%" y="485" width="0.3208%" height="15" fill="rgb(232,36,49)" fg:x="14" fg:w="4"/><text x="1.3727%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="1.1227%" y="469" width="0.3208%" height="15" fill="rgb(209,103,24)" fg:x="14" fg:w="4"/><text x="1.3727%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.3633%" y="453" width="0.0802%" height="15" fill="rgb(229,88,8)" fg:x="17" fg:w="1"/><text x="1.6133%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.3633%" y="437" width="0.0802%" height="15" fill="rgb(213,181,19)" fg:x="17" fg:w="1"/><text x="1.6133%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="1.3633%" y="421" width="0.0802%" height="15" fill="rgb(254,191,54)" fg:x="17" fg:w="1"/><text x="1.6133%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.3633%" y="405" width="0.0802%" height="15" fill="rgb(241,83,37)" fg:x="17" fg:w="1"/><text x="1.6133%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.3633%" y="389" width="0.0802%" height="15" fill="rgb(233,36,39)" fg:x="17" fg:w="1"/><text x="1.6133%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.3633%" y="373" width="0.0802%" height="15" fill="rgb(226,3,54)" fg:x="17" fg:w="1"/><text x="1.6133%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3633%" y="357" width="0.0802%" height="15" fill="rgb(245,192,40)" fg:x="17" fg:w="1"/><text x="1.6133%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="1.4435%" y="469" width="0.0802%" height="15" fill="rgb(238,167,29)" fg:x="18" fg:w="1"/><text x="1.6935%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="1.4435%" y="453" width="0.0802%" height="15" fill="rgb(232,182,51)" fg:x="18" fg:w="1"/><text x="1.6935%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.5237%" y="437" width="0.0802%" height="15" fill="rgb(231,60,39)" fg:x="19" fg:w="1"/><text x="1.7737%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.5237%" y="421" width="0.0802%" height="15" fill="rgb(208,69,12)" fg:x="19" fg:w="1"/><text x="1.7737%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.5237%" y="405" width="0.0802%" height="15" fill="rgb(235,93,37)" fg:x="19" fg:w="1"/><text x="1.7737%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (9 samples, 0.72%)</title><rect x="0.9623%" y="565" width="0.7217%" height="15" fill="rgb(213,116,39)" fg:x="12" fg:w="9"/><text x="1.2123%" y="575.50"></text></g><g><title>engine::internal::Entities::prepare_entity (9 samples, 0.72%)</title><rect x="0.9623%" y="549" width="0.7217%" height="15" fill="rgb(222,207,29)" fg:x="12" fg:w="9"/><text x="1.2123%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity (7 samples, 0.56%)</title><rect x="1.1227%" y="533" width="0.5613%" height="15" fill="rgb(206,96,30)" fg:x="14" fg:w="7"/><text x="1.3727%" y="543.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="1.4435%" y="517" width="0.2406%" height="15" fill="rgb(218,138,4)" fg:x="18" fg:w="3"/><text x="1.6935%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="1.4435%" y="501" width="0.2406%" height="15" fill="rgb(250,191,14)" fg:x="18" fg:w="3"/><text x="1.6935%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="1.4435%" y="485" width="0.2406%" height="15" fill="rgb(239,60,40)" fg:x="18" fg:w="3"/><text x="1.6935%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="1.5237%" y="469" width="0.1604%" height="15" fill="rgb(206,27,48)" fg:x="19" fg:w="2"/><text x="1.7737%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="1.5237%" y="453" width="0.1604%" height="15" fill="rgb(225,35,8)" fg:x="19" fg:w="2"/><text x="1.7737%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.6038%" y="437" width="0.0802%" height="15" fill="rgb(250,213,24)" fg:x="20" fg:w="1"/><text x="1.8538%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.6038%" y="421" width="0.0802%" height="15" fill="rgb(247,123,22)" fg:x="20" fg:w="1"/><text x="1.8538%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.6038%" y="405" width="0.0802%" height="15" fill="rgb(231,138,38)" fg:x="20" fg:w="1"/><text x="1.8538%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.6038%" y="389" width="0.0802%" height="15" fill="rgb(231,145,46)" fg:x="20" fg:w="1"/><text x="1.8538%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.6038%" y="373" width="0.0802%" height="15" fill="rgb(251,118,11)" fg:x="20" fg:w="1"/><text x="1.8538%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.6038%" y="357" width="0.0802%" height="15" fill="rgb(217,147,25)" fg:x="20" fg:w="1"/><text x="1.8538%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="1.6038%" y="341" width="0.0802%" height="15" fill="rgb(247,81,37)" fg:x="20" fg:w="1"/><text x="1.8538%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="1.9246%" y="517" width="0.0802%" height="15" fill="rgb(209,12,38)" fg:x="24" fg:w="1"/><text x="2.1746%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="1.9246%" y="501" width="0.0802%" height="15" fill="rgb(227,1,9)" fg:x="24" fg:w="1"/><text x="2.1746%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="1.9246%" y="485" width="0.0802%" height="15" fill="rgb(248,47,43)" fg:x="24" fg:w="1"/><text x="2.1746%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="1.9246%" y="469" width="0.0802%" height="15" fill="rgb(221,10,30)" fg:x="24" fg:w="1"/><text x="2.1746%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.9246%" y="453" width="0.0802%" height="15" fill="rgb(210,229,1)" fg:x="24" fg:w="1"/><text x="2.1746%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.9246%" y="437" width="0.0802%" height="15" fill="rgb(222,148,37)" fg:x="24" fg:w="1"/><text x="2.1746%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="1.9246%" y="421" width="0.0802%" height="15" fill="rgb(234,67,33)" fg:x="24" fg:w="1"/><text x="2.1746%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="1.9246%" y="405" width="0.0802%" height="15" fill="rgb(247,98,35)" fg:x="24" fg:w="1"/><text x="2.1746%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="1.9246%" y="389" width="0.0802%" height="15" fill="rgb(247,138,52)" fg:x="24" fg:w="1"/><text x="2.1746%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="1.9246%" y="373" width="0.0802%" height="15" fill="rgb(213,79,30)" fg:x="24" fg:w="1"/><text x="2.1746%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="1.9246%" y="357" width="0.0802%" height="15" fill="rgb(246,177,23)" fg:x="24" fg:w="1"/><text x="2.1746%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="1.9246%" y="341" width="0.0802%" height="15" fill="rgb(230,62,27)" fg:x="24" fg:w="1"/><text x="2.1746%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.9246%" y="325" width="0.0802%" height="15" fill="rgb(216,154,8)" fg:x="24" fg:w="1"/><text x="2.1746%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="1.9246%" y="309" width="0.0802%" height="15" fill="rgb(244,35,45)" fg:x="24" fg:w="1"/><text x="2.1746%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.9246%" y="293" width="0.0802%" height="15" fill="rgb(251,115,12)" fg:x="24" fg:w="1"/><text x="2.1746%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="1.9246%" y="277" width="0.0802%" height="15" fill="rgb(240,54,50)" fg:x="24" fg:w="1"/><text x="2.1746%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="1.9246%" y="261" width="0.0802%" height="15" fill="rgb(233,84,52)" fg:x="24" fg:w="1"/><text x="2.1746%" y="271.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="1.9246%" y="245" width="0.0802%" height="15" fill="rgb(207,117,47)" fg:x="24" fg:w="1"/><text x="2.1746%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.9246%" y="229" width="0.0802%" height="15" fill="rgb(249,43,39)" fg:x="24" fg:w="1"/><text x="2.1746%" y="239.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="2.0048%" y="501" width="0.1604%" height="15" fill="rgb(209,38,44)" fg:x="25" fg:w="2"/><text x="2.2548%" y="511.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="2.0048%" y="485" width="0.1604%" height="15" fill="rgb(236,212,23)" fg:x="25" fg:w="2"/><text x="2.2548%" y="495.50"></text></g><g><title>__strerror_r (1 samples, 0.08%)</title><rect x="2.0850%" y="469" width="0.0802%" height="15" fill="rgb(242,79,21)" fg:x="26" fg:w="1"/><text x="2.3350%" y="479.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (11 samples, 0.88%)</title><rect x="1.6840%" y="533" width="0.8821%" height="15" fill="rgb(211,96,35)" fg:x="21" fg:w="11"/><text x="1.9340%" y="543.50"></text></g><g><title>libloading::os::unix::Library::open (7 samples, 0.56%)</title><rect x="2.0048%" y="517" width="0.5613%" height="15" fill="rgb(253,215,40)" fg:x="25" fg:w="7"/><text x="2.2548%" y="527.50"></text></g><g><title>dlopen (5 samples, 0.40%)</title><rect x="2.1652%" y="501" width="0.4010%" height="15" fill="rgb(211,81,21)" fg:x="27" fg:w="5"/><text x="2.4152%" y="511.50"></text></g><g><title>_dl_catch_error (5 samples, 0.40%)</title><rect x="2.1652%" y="485" width="0.4010%" height="15" fill="rgb(208,190,38)" fg:x="27" fg:w="5"/><text x="2.4152%" y="495.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="2.1652%" y="469" width="0.4010%" height="15" fill="rgb(235,213,38)" fg:x="27" fg:w="5"/><text x="2.4152%" y="479.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="2.2454%" y="453" width="0.3208%" height="15" fill="rgb(237,122,38)" fg:x="28" fg:w="4"/><text x="2.4954%" y="463.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="2.2454%" y="437" width="0.3208%" height="15" fill="rgb(244,218,35)" fg:x="28" fg:w="4"/><text x="2.4954%" y="447.50"></text></g><g><title>engine::session::Session::initialize (12 samples, 0.96%)</title><rect x="1.6840%" y="565" width="0.9623%" height="15" fill="rgb(240,68,47)" fg:x="21" fg:w="12"/><text x="1.9340%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (12 samples, 0.96%)</title><rect x="1.6840%" y="549" width="0.9623%" height="15" fill="rgb(210,16,53)" fg:x="21" fg:w="12"/><text x="1.9340%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="2.5662%" y="533" width="0.0802%" height="15" fill="rgb(235,124,12)" fg:x="32" fg:w="1"/><text x="2.8162%" y="543.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="2.5662%" y="517" width="0.0802%" height="15" fill="rgb(224,169,11)" fg:x="32" fg:w="1"/><text x="2.8162%" y="527.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (23 samples, 1.84%)</title><rect x="0.8821%" y="597" width="1.8444%" height="15" fill="rgb(250,166,2)" fg:x="11" fg:w="23"/><text x="1.1321%" y="607.50">&lt;..</text></g><g><title>engine::session::Session::new (23 samples, 1.84%)</title><rect x="0.8821%" y="581" width="1.8444%" height="15" fill="rgb(242,216,29)" fg:x="11" fg:w="23"/><text x="1.1321%" y="591.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="2.6464%" y="565" width="0.0802%" height="15" fill="rgb(230,116,27)" fg:x="33" fg:w="1"/><text x="2.8964%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="2.6464%" y="549" width="0.0802%" height="15" fill="rgb(228,99,48)" fg:x="33" fg:w="1"/><text x="2.8964%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.6464%" y="533" width="0.0802%" height="15" fill="rgb(253,11,6)" fg:x="33" fg:w="1"/><text x="2.8964%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.6464%" y="517" width="0.0802%" height="15" fill="rgb(247,143,39)" fg:x="33" fg:w="1"/><text x="2.8964%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.6464%" y="501" width="0.0802%" height="15" fill="rgb(236,97,10)" fg:x="33" fg:w="1"/><text x="2.8964%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.6464%" y="485" width="0.0802%" height="15" fill="rgb(233,208,19)" fg:x="33" fg:w="1"/><text x="2.8964%" y="495.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="2.7265%" y="549" width="0.0802%" height="15" fill="rgb(216,164,2)" fg:x="34" fg:w="1"/><text x="2.9765%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="2.7265%" y="533" width="0.0802%" height="15" fill="rgb(220,129,5)" fg:x="34" fg:w="1"/><text x="2.9765%" y="543.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="2.7265%" y="517" width="0.0802%" height="15" fill="rgb(242,17,10)" fg:x="34" fg:w="1"/><text x="2.9765%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.7265%" y="501" width="0.0802%" height="15" fill="rgb(242,107,0)" fg:x="34" fg:w="1"/><text x="2.9765%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.8067%" y="485" width="0.1604%" height="15" fill="rgb(251,28,31)" fg:x="35" fg:w="2"/><text x="3.0567%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.8067%" y="469" width="0.1604%" height="15" fill="rgb(233,223,10)" fg:x="35" fg:w="2"/><text x="3.0567%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.8869%" y="453" width="0.0802%" height="15" fill="rgb(215,21,27)" fg:x="36" fg:w="1"/><text x="3.1369%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.9671%" y="469" width="0.0802%" height="15" fill="rgb(232,23,21)" fg:x="37" fg:w="1"/><text x="3.2171%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9671%" y="453" width="0.0802%" height="15" fill="rgb(244,5,23)" fg:x="37" fg:w="1"/><text x="3.2171%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.1275%" y="453" width="0.0802%" height="15" fill="rgb(226,81,46)" fg:x="39" fg:w="1"/><text x="3.3775%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.1275%" y="437" width="0.0802%" height="15" fill="rgb(247,70,30)" fg:x="39" fg:w="1"/><text x="3.3775%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.1275%" y="421" width="0.0802%" height="15" fill="rgb(212,68,19)" fg:x="39" fg:w="1"/><text x="3.3775%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="2.9671%" y="485" width="0.3208%" height="15" fill="rgb(240,187,13)" fg:x="37" fg:w="4"/><text x="3.2171%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="3.0473%" y="469" width="0.2406%" height="15" fill="rgb(223,113,26)" fg:x="38" fg:w="3"/><text x="3.2973%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.2077%" y="453" width="0.0802%" height="15" fill="rgb(206,192,2)" fg:x="40" fg:w="1"/><text x="3.4577%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.2077%" y="437" width="0.0802%" height="15" fill="rgb(241,108,4)" fg:x="40" fg:w="1"/><text x="3.4577%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="2.8067%" y="517" width="0.5613%" height="15" fill="rgb(247,173,49)" fg:x="35" fg:w="7"/><text x="3.0567%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="2.8067%" y="501" width="0.5613%" height="15" fill="rgb(224,114,35)" fg:x="35" fg:w="7"/><text x="3.0567%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.2879%" y="485" width="0.0802%" height="15" fill="rgb(245,159,27)" fg:x="41" fg:w="1"/><text x="3.5379%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.2879%" y="469" width="0.0802%" height="15" fill="rgb(245,172,44)" fg:x="41" fg:w="1"/><text x="3.5379%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.2879%" y="453" width="0.0802%" height="15" fill="rgb(236,23,11)" fg:x="41" fg:w="1"/><text x="3.5379%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.2879%" y="437" width="0.0802%" height="15" fill="rgb(205,117,38)" fg:x="41" fg:w="1"/><text x="3.5379%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.2879%" y="421" width="0.0802%" height="15" fill="rgb(237,72,25)" fg:x="41" fg:w="1"/><text x="3.5379%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.2879%" y="405" width="0.0802%" height="15" fill="rgb(244,70,9)" fg:x="41" fg:w="1"/><text x="3.5379%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.3681%" y="453" width="0.0802%" height="15" fill="rgb(217,125,39)" fg:x="42" fg:w="1"/><text x="3.6181%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.3681%" y="437" width="0.0802%" height="15" fill="rgb(235,36,10)" fg:x="42" fg:w="1"/><text x="3.6181%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.3681%" y="517" width="0.1604%" height="15" fill="rgb(251,123,47)" fg:x="42" fg:w="2"/><text x="3.6181%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="3.3681%" y="501" width="0.1604%" height="15" fill="rgb(221,13,13)" fg:x="42" fg:w="2"/><text x="3.6181%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.3681%" y="485" width="0.1604%" height="15" fill="rgb(238,131,9)" fg:x="42" fg:w="2"/><text x="3.6181%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.3681%" y="469" width="0.1604%" height="15" fill="rgb(211,50,8)" fg:x="42" fg:w="2"/><text x="3.6181%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.4483%" y="453" width="0.0802%" height="15" fill="rgb(245,182,24)" fg:x="43" fg:w="1"/><text x="3.6983%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.4483%" y="437" width="0.0802%" height="15" fill="rgb(242,14,37)" fg:x="43" fg:w="1"/><text x="3.6983%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="3.5285%" y="469" width="0.1604%" height="15" fill="rgb(246,228,12)" fg:x="44" fg:w="2"/><text x="3.7785%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.5285%" y="453" width="0.1604%" height="15" fill="rgb(213,55,15)" fg:x="44" fg:w="2"/><text x="3.7785%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="3.5285%" y="437" width="0.1604%" height="15" fill="rgb(209,9,3)" fg:x="44" fg:w="2"/><text x="3.7785%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="3.5285%" y="421" width="0.1604%" height="15" fill="rgb(230,59,30)" fg:x="44" fg:w="2"/><text x="3.7785%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.6087%" y="405" width="0.0802%" height="15" fill="rgb(209,121,21)" fg:x="45" fg:w="1"/><text x="3.8587%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="3.6087%" y="389" width="0.0802%" height="15" fill="rgb(220,109,13)" fg:x="45" fg:w="1"/><text x="3.8587%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.6087%" y="373" width="0.0802%" height="15" fill="rgb(232,18,1)" fg:x="45" fg:w="1"/><text x="3.8587%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.6087%" y="357" width="0.0802%" height="15" fill="rgb(215,41,42)" fg:x="45" fg:w="1"/><text x="3.8587%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.6889%" y="437" width="0.0802%" height="15" fill="rgb(224,123,36)" fg:x="46" fg:w="1"/><text x="3.9389%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.6889%" y="421" width="0.0802%" height="15" fill="rgb(240,125,3)" fg:x="46" fg:w="1"/><text x="3.9389%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.6889%" y="405" width="0.0802%" height="15" fill="rgb(205,98,50)" fg:x="46" fg:w="1"/><text x="3.9389%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.6889%" y="389" width="0.0802%" height="15" fill="rgb(205,185,37)" fg:x="46" fg:w="1"/><text x="3.9389%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.6889%" y="373" width="0.0802%" height="15" fill="rgb(238,207,15)" fg:x="46" fg:w="1"/><text x="3.9389%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6889%" y="357" width="0.0802%" height="15" fill="rgb(213,199,42)" fg:x="46" fg:w="1"/><text x="3.9389%" y="367.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (13 samples, 1.04%)</title><rect x="2.8067%" y="549" width="1.0425%" height="15" fill="rgb(235,201,11)" fg:x="35" fg:w="13"/><text x="3.0567%" y="559.50"></text></g><g><title>engine::session::Session::check_for_changes (13 samples, 1.04%)</title><rect x="2.8067%" y="533" width="1.0425%" height="15" fill="rgb(207,46,11)" fg:x="35" fg:w="13"/><text x="3.0567%" y="543.50"></text></g><g><title>kernel::compare::any_entity_changes (4 samples, 0.32%)</title><rect x="3.5285%" y="517" width="0.3208%" height="15" fill="rgb(241,35,35)" fg:x="44" fg:w="4"/><text x="3.7785%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="3.5285%" y="501" width="0.3208%" height="15" fill="rgb(243,32,47)" fg:x="44" fg:w="4"/><text x="3.7785%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="3.5285%" y="485" width="0.3208%" height="15" fill="rgb(247,202,23)" fg:x="44" fg:w="4"/><text x="3.7785%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="3.6889%" y="469" width="0.1604%" height="15" fill="rgb(219,102,11)" fg:x="46" fg:w="2"/><text x="3.9389%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="3.6889%" y="453" width="0.1604%" height="15" fill="rgb(243,110,44)" fg:x="46" fg:w="2"/><text x="3.9389%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="3.7690%" y="437" width="0.0802%" height="15" fill="rgb(222,74,54)" fg:x="47" fg:w="1"/><text x="4.0190%" y="447.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.20%)</title><rect x="2.7265%" y="581" width="1.2029%" height="15" fill="rgb(216,99,12)" fg:x="34" fg:w="15"/><text x="2.9765%" y="591.50"></text></g><g><title>engine::session::Session::save_entity_changes (15 samples, 1.20%)</title><rect x="2.7265%" y="565" width="1.2029%" height="15" fill="rgb(226,22,26)" fg:x="34" fg:w="15"/><text x="2.9765%" y="575.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="3.8492%" y="549" width="0.0802%" height="15" fill="rgb(217,163,10)" fg:x="48" fg:w="1"/><text x="4.0992%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="3.8492%" y="533" width="0.0802%" height="15" fill="rgb(213,25,53)" fg:x="48" fg:w="1"/><text x="4.0992%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="3.8492%" y="517" width="0.0802%" height="15" fill="rgb(252,105,26)" fg:x="48" fg:w="1"/><text x="4.0992%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.8492%" y="501" width="0.0802%" height="15" fill="rgb(220,39,43)" fg:x="48" fg:w="1"/><text x="4.0992%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.8492%" y="485" width="0.0802%" height="15" fill="rgb(229,68,48)" fg:x="48" fg:w="1"/><text x="4.0992%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.8492%" y="469" width="0.0802%" height="15" fill="rgb(252,8,32)" fg:x="48" fg:w="1"/><text x="4.0992%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.8492%" y="453" width="0.0802%" height="15" fill="rgb(223,20,43)" fg:x="48" fg:w="1"/><text x="4.0992%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="3.8492%" y="437" width="0.0802%" height="15" fill="rgb(229,81,49)" fg:x="48" fg:w="1"/><text x="4.0992%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="3.8492%" y="421" width="0.0802%" height="15" fill="rgb(236,28,36)" fg:x="48" fg:w="1"/><text x="4.0992%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.8492%" y="405" width="0.0802%" height="15" fill="rgb(249,185,26)" fg:x="48" fg:w="1"/><text x="4.0992%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.8492%" y="389" width="0.0802%" height="15" fill="rgb(249,174,33)" fg:x="48" fg:w="1"/><text x="4.0992%" y="399.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="3.8492%" y="373" width="0.0802%" height="15" fill="rgb(233,201,37)" fg:x="48" fg:w="1"/><text x="4.0992%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="3.8492%" y="357" width="0.0802%" height="15" fill="rgb(221,78,26)" fg:x="48" fg:w="1"/><text x="4.0992%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.8492%" y="341" width="0.0802%" height="15" fill="rgb(250,127,30)" fg:x="48" fg:w="1"/><text x="4.0992%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.8492%" y="325" width="0.0802%" height="15" fill="rgb(230,49,44)" fg:x="48" fg:w="1"/><text x="4.0992%" y="335.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="3.8492%" y="309" width="0.0802%" height="15" fill="rgb(229,67,23)" fg:x="48" fg:w="1"/><text x="4.0992%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.9294%" y="565" width="0.0802%" height="15" fill="rgb(249,83,47)" fg:x="49" fg:w="1"/><text x="4.1794%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="3.9294%" y="549" width="0.0802%" height="15" fill="rgb(215,43,3)" fg:x="49" fg:w="1"/><text x="4.1794%" y="559.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="3.9294%" y="581" width="0.2406%" height="15" fill="rgb(238,154,13)" fg:x="49" fg:w="3"/><text x="4.1794%" y="591.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="4.0096%" y="565" width="0.1604%" height="15" fill="rgb(219,56,2)" fg:x="50" fg:w="2"/><text x="4.2596%" y="575.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="4.0096%" y="549" width="0.1604%" height="15" fill="rgb(233,0,4)" fg:x="50" fg:w="2"/><text x="4.2596%" y="559.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="4.0096%" y="533" width="0.1604%" height="15" fill="rgb(235,30,7)" fg:x="50" fg:w="2"/><text x="4.2596%" y="543.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="4.0096%" y="517" width="0.1604%" height="15" fill="rgb(250,79,13)" fg:x="50" fg:w="2"/><text x="4.2596%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="4.0096%" y="501" width="0.1604%" height="15" fill="rgb(211,146,34)" fg:x="50" fg:w="2"/><text x="4.2596%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="4.0096%" y="485" width="0.1604%" height="15" fill="rgb(228,22,38)" fg:x="50" fg:w="2"/><text x="4.2596%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="4.0096%" y="469" width="0.1604%" height="15" fill="rgb(235,168,5)" fg:x="50" fg:w="2"/><text x="4.2596%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="4.0096%" y="453" width="0.1604%" height="15" fill="rgb(221,155,16)" fg:x="50" fg:w="2"/><text x="4.2596%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="4.1700%" y="485" width="0.0802%" height="15" fill="rgb(215,215,53)" fg:x="52" fg:w="1"/><text x="4.4200%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="4.1700%" y="469" width="0.0802%" height="15" fill="rgb(223,4,10)" fg:x="52" fg:w="1"/><text x="4.4200%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.1700%" y="453" width="0.0802%" height="15" fill="rgb(234,103,6)" fg:x="52" fg:w="1"/><text x="4.4200%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.1700%" y="437" width="0.0802%" height="15" fill="rgb(227,97,0)" fg:x="52" fg:w="1"/><text x="4.4200%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.1700%" y="421" width="0.0802%" height="15" fill="rgb(234,150,53)" fg:x="52" fg:w="1"/><text x="4.4200%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.1700%" y="405" width="0.0802%" height="15" fill="rgb(228,201,54)" fg:x="52" fg:w="1"/><text x="4.4200%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="4.1700%" y="389" width="0.0802%" height="15" fill="rgb(222,22,37)" fg:x="52" fg:w="1"/><text x="4.4200%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.1700%" y="373" width="0.0802%" height="15" fill="rgb(237,53,32)" fg:x="52" fg:w="1"/><text x="4.4200%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.1700%" y="357" width="0.0802%" height="15" fill="rgb(233,25,53)" fg:x="52" fg:w="1"/><text x="4.4200%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.1700%" y="341" width="0.0802%" height="15" fill="rgb(210,40,34)" fg:x="52" fg:w="1"/><text x="4.4200%" y="351.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="4.1700%" y="565" width="0.1604%" height="15" fill="rgb(241,220,44)" fg:x="52" fg:w="2"/><text x="4.4200%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.1700%" y="549" width="0.1604%" height="15" fill="rgb(235,28,35)" fg:x="52" fg:w="2"/><text x="4.4200%" y="559.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="4.1700%" y="533" width="0.1604%" height="15" fill="rgb(210,56,17)" fg:x="52" fg:w="2"/><text x="4.4200%" y="543.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="4.1700%" y="517" width="0.1604%" height="15" fill="rgb(224,130,29)" fg:x="52" fg:w="2"/><text x="4.4200%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.1700%" y="501" width="0.1604%" height="15" fill="rgb(235,212,8)" fg:x="52" fg:w="2"/><text x="4.4200%" y="511.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="4.2502%" y="485" width="0.0802%" height="15" fill="rgb(223,33,50)" fg:x="53" fg:w="1"/><text x="4.5002%" y="495.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="4.2502%" y="469" width="0.0802%" height="15" fill="rgb(219,149,13)" fg:x="53" fg:w="1"/><text x="4.5002%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.2502%" y="453" width="0.0802%" height="15" fill="rgb(250,156,29)" fg:x="53" fg:w="1"/><text x="4.5002%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::entry::Entry&gt;&gt; (1 samples, 0.08%)</title><rect x="4.3304%" y="565" width="0.0802%" height="15" fill="rgb(216,193,19)" fg:x="54" fg:w="1"/><text x="4.5804%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="4.3304%" y="549" width="0.0802%" height="15" fill="rgb(216,135,14)" fg:x="54" fg:w="1"/><text x="4.5804%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.3304%" y="533" width="0.0802%" height="15" fill="rgb(241,47,5)" fg:x="54" fg:w="1"/><text x="4.5804%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="4.4106%" y="565" width="0.0802%" height="15" fill="rgb(233,42,35)" fg:x="55" fg:w="1"/><text x="4.6606%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.4106%" y="549" width="0.0802%" height="15" fill="rgb(231,13,6)" fg:x="55" fg:w="1"/><text x="4.6606%" y="559.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="4.4908%" y="533" width="0.0802%" height="15" fill="rgb(207,181,40)" fg:x="56" fg:w="1"/><text x="4.7408%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="4.4908%" y="517" width="0.0802%" height="15" fill="rgb(254,173,49)" fg:x="56" fg:w="1"/><text x="4.7408%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="4.4908%" y="501" width="0.0802%" height="15" fill="rgb(221,1,38)" fg:x="56" fg:w="1"/><text x="4.7408%" y="511.50"></text></g><g><title>engine::identifiers::model::set_gid (2 samples, 0.16%)</title><rect x="4.5710%" y="533" width="0.1604%" height="15" fill="rgb(206,124,46)" fg:x="57" fg:w="2"/><text x="4.8210%" y="543.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="4.5710%" y="517" width="0.1604%" height="15" fill="rgb(249,21,11)" fg:x="57" fg:w="2"/><text x="4.8210%" y="527.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="4.5710%" y="501" width="0.1604%" height="15" fill="rgb(222,201,40)" fg:x="57" fg:w="2"/><text x="4.8210%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="4.7314%" y="469" width="0.2406%" height="15" fill="rgb(235,61,29)" fg:x="59" fg:w="3"/><text x="4.9814%" y="479.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="4.7314%" y="453" width="0.2406%" height="15" fill="rgb(219,207,3)" fg:x="59" fg:w="3"/><text x="4.9814%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.8115%" y="437" width="0.1604%" height="15" fill="rgb(222,56,46)" fg:x="60" fg:w="2"/><text x="5.0615%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="4.8115%" y="421" width="0.1604%" height="15" fill="rgb(239,76,54)" fg:x="60" fg:w="2"/><text x="5.0615%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="4.8115%" y="405" width="0.1604%" height="15" fill="rgb(231,124,27)" fg:x="60" fg:w="2"/><text x="5.0615%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="4.8115%" y="389" width="0.1604%" height="15" fill="rgb(249,195,6)" fg:x="60" fg:w="2"/><text x="5.0615%" y="399.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="4.8115%" y="373" width="0.1604%" height="15" fill="rgb(237,174,47)" fg:x="60" fg:w="2"/><text x="5.0615%" y="383.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="4.7314%" y="485" width="0.3208%" height="15" fill="rgb(206,201,31)" fg:x="59" fg:w="4"/><text x="4.9814%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.9719%" y="469" width="0.0802%" height="15" fill="rgb(231,57,52)" fg:x="62" fg:w="1"/><text x="5.2219%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.9719%" y="453" width="0.0802%" height="15" fill="rgb(248,177,22)" fg:x="62" fg:w="1"/><text x="5.2219%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="5.0521%" y="469" width="0.2406%" height="15" fill="rgb(215,211,37)" fg:x="63" fg:w="3"/><text x="5.3021%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.1323%" y="453" width="0.1604%" height="15" fill="rgb(241,128,51)" fg:x="64" fg:w="2"/><text x="5.3823%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.2927%" y="453" width="0.1604%" height="15" fill="rgb(227,165,31)" fg:x="66" fg:w="2"/><text x="5.5427%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.2927%" y="437" width="0.1604%" height="15" fill="rgb(228,167,24)" fg:x="66" fg:w="2"/><text x="5.5427%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3729%" y="421" width="0.0802%" height="15" fill="rgb(228,143,12)" fg:x="67" fg:w="1"/><text x="5.6229%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.3729%" y="405" width="0.0802%" height="15" fill="rgb(249,149,8)" fg:x="67" fg:w="1"/><text x="5.6229%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="5.2927%" y="469" width="0.3208%" height="15" fill="rgb(243,35,44)" fg:x="66" fg:w="4"/><text x="5.5427%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.4531%" y="453" width="0.1604%" height="15" fill="rgb(246,89,9)" fg:x="68" fg:w="2"/><text x="5.7031%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.4531%" y="437" width="0.1604%" height="15" fill="rgb(233,213,13)" fg:x="68" fg:w="2"/><text x="5.7031%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.5333%" y="421" width="0.0802%" height="15" fill="rgb(233,141,41)" fg:x="69" fg:w="1"/><text x="5.7833%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.5333%" y="405" width="0.0802%" height="15" fill="rgb(239,167,4)" fg:x="69" fg:w="1"/><text x="5.7833%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.96%)</title><rect x="4.7314%" y="501" width="0.9623%" height="15" fill="rgb(209,217,16)" fg:x="59" fg:w="12"/><text x="4.9814%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="5.0521%" y="485" width="0.6415%" height="15" fill="rgb(219,88,35)" fg:x="63" fg:w="8"/><text x="5.3021%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.6135%" y="469" width="0.0802%" height="15" fill="rgb(220,193,23)" fg:x="70" fg:w="1"/><text x="5.8635%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.6135%" y="453" width="0.0802%" height="15" fill="rgb(230,90,52)" fg:x="70" fg:w="1"/><text x="5.8635%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.6135%" y="437" width="0.0802%" height="15" fill="rgb(252,106,19)" fg:x="70" fg:w="1"/><text x="5.8635%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.6135%" y="421" width="0.0802%" height="15" fill="rgb(206,74,20)" fg:x="70" fg:w="1"/><text x="5.8635%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.6135%" y="405" width="0.0802%" height="15" fill="rgb(230,138,44)" fg:x="70" fg:w="1"/><text x="5.8635%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.6135%" y="389" width="0.0802%" height="15" fill="rgb(235,182,43)" fg:x="70" fg:w="1"/><text x="5.8635%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.6937%" y="501" width="0.1604%" height="15" fill="rgb(242,16,51)" fg:x="71" fg:w="2"/><text x="5.9437%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="5.6937%" y="485" width="0.1604%" height="15" fill="rgb(248,9,4)" fg:x="71" fg:w="2"/><text x="5.9437%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.6937%" y="469" width="0.1604%" height="15" fill="rgb(210,31,22)" fg:x="71" fg:w="2"/><text x="5.9437%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.6937%" y="453" width="0.1604%" height="15" fill="rgb(239,54,39)" fg:x="71" fg:w="2"/><text x="5.9437%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.8540%" y="453" width="0.1604%" height="15" fill="rgb(230,99,41)" fg:x="73" fg:w="2"/><text x="6.1040%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="6.0144%" y="453" width="0.1604%" height="15" fill="rgb(253,106,12)" fg:x="75" fg:w="2"/><text x="6.2644%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.0144%" y="437" width="0.1604%" height="15" fill="rgb(213,46,41)" fg:x="75" fg:w="2"/><text x="6.2644%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="6.0144%" y="421" width="0.1604%" height="15" fill="rgb(215,133,35)" fg:x="75" fg:w="2"/><text x="6.2644%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="6.0144%" y="405" width="0.1604%" height="15" fill="rgb(213,28,5)" fg:x="75" fg:w="2"/><text x="6.2644%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="6.0144%" y="389" width="0.1604%" height="15" fill="rgb(215,77,49)" fg:x="75" fg:w="2"/><text x="6.2644%" y="399.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="6.0946%" y="373" width="0.0802%" height="15" fill="rgb(248,100,22)" fg:x="76" fg:w="1"/><text x="6.3446%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.1748%" y="421" width="0.0802%" height="15" fill="rgb(208,67,9)" fg:x="77" fg:w="1"/><text x="6.4248%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2550%" y="405" width="0.0802%" height="15" fill="rgb(219,133,21)" fg:x="78" fg:w="1"/><text x="6.5050%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2550%" y="389" width="0.0802%" height="15" fill="rgb(246,46,29)" fg:x="78" fg:w="1"/><text x="6.5050%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2550%" y="373" width="0.0802%" height="15" fill="rgb(246,185,52)" fg:x="78" fg:w="1"/><text x="6.5050%" y="383.50"></text></g><g><title>engine::session::Session::flush (24 samples, 1.92%)</title><rect x="4.4908%" y="565" width="1.9246%" height="15" fill="rgb(252,136,11)" fg:x="56" fg:w="24"/><text x="4.7408%" y="575.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (24 samples, 1.92%)</title><rect x="4.4908%" y="549" width="1.9246%" height="15" fill="rgb(219,138,53)" fg:x="56" fg:w="24"/><text x="4.7408%" y="559.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (21 samples, 1.68%)</title><rect x="4.7314%" y="533" width="1.6840%" height="15" fill="rgb(211,51,23)" fg:x="59" fg:w="21"/><text x="4.9814%" y="543.50"></text></g><g><title>engine::session::Session::check_for_changes (21 samples, 1.68%)</title><rect x="4.7314%" y="517" width="1.6840%" height="15" fill="rgb(247,221,28)" fg:x="59" fg:w="21"/><text x="4.9814%" y="527.50"></text></g><g><title>kernel::compare::any_entity_changes (7 samples, 0.56%)</title><rect x="5.8540%" y="501" width="0.5613%" height="15" fill="rgb(251,222,45)" fg:x="73" fg:w="7"/><text x="6.1040%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="5.8540%" y="485" width="0.5613%" height="15" fill="rgb(217,162,53)" fg:x="73" fg:w="7"/><text x="6.1040%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="5.8540%" y="469" width="0.5613%" height="15" fill="rgb(229,93,14)" fg:x="73" fg:w="7"/><text x="6.1040%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="6.1748%" y="453" width="0.2406%" height="15" fill="rgb(209,67,49)" fg:x="77" fg:w="3"/><text x="6.4248%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.24%)</title><rect x="6.1748%" y="437" width="0.2406%" height="15" fill="rgb(213,87,29)" fg:x="77" fg:w="3"/><text x="6.4248%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="6.2550%" y="421" width="0.1604%" height="15" fill="rgb(205,151,52)" fg:x="78" fg:w="2"/><text x="6.5050%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3352%" y="405" width="0.0802%" height="15" fill="rgb(253,215,39)" fg:x="79" fg:w="1"/><text x="6.5852%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.3352%" y="389" width="0.0802%" height="15" fill="rgb(221,220,41)" fg:x="79" fg:w="1"/><text x="6.5852%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="6.4154%" y="565" width="0.0802%" height="15" fill="rgb(218,133,21)" fg:x="80" fg:w="1"/><text x="6.6654%" y="575.50"></text></g><g><title>kernel::model::Entity::new_blank (1 samples, 0.08%)</title><rect x="6.4154%" y="549" width="0.0802%" height="15" fill="rgb(221,193,43)" fg:x="80" fg:w="1"/><text x="6.6654%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="6.4154%" y="533" width="0.0802%" height="15" fill="rgb(240,128,52)" fg:x="80" fg:w="1"/><text x="6.6654%" y="543.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="6.4154%" y="517" width="0.0802%" height="15" fill="rgb(253,114,12)" fg:x="80" fg:w="1"/><text x="6.6654%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="6.4154%" y="501" width="0.0802%" height="15" fill="rgb(215,223,47)" fg:x="80" fg:w="1"/><text x="6.6654%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="6.4154%" y="485" width="0.0802%" height="15" fill="rgb(248,225,23)" fg:x="80" fg:w="1"/><text x="6.6654%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.4154%" y="469" width="0.0802%" height="15" fill="rgb(250,108,0)" fg:x="80" fg:w="1"/><text x="6.6654%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.4154%" y="453" width="0.0802%" height="15" fill="rgb(228,208,7)" fg:x="80" fg:w="1"/><text x="6.6654%" y="463.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="6.4154%" y="437" width="0.0802%" height="15" fill="rgb(244,45,10)" fg:x="80" fg:w="1"/><text x="6.6654%" y="447.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="6.4154%" y="421" width="0.0802%" height="15" fill="rgb(207,125,25)" fg:x="80" fg:w="1"/><text x="6.6654%" y="431.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="6.4154%" y="405" width="0.0802%" height="15" fill="rgb(210,195,18)" fg:x="80" fg:w="1"/><text x="6.6654%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6560%" y="453" width="0.0802%" height="15" fill="rgb(249,80,12)" fg:x="83" fg:w="1"/><text x="6.9060%" y="463.50"></text></g><g><title>engine::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="6.4956%" y="533" width="0.3208%" height="15" fill="rgb(221,65,9)" fg:x="81" fg:w="4"/><text x="6.7456%" y="543.50"></text></g><g><title>engine::internal::EntityMap::add_entity (4 samples, 0.32%)</title><rect x="6.4956%" y="517" width="0.3208%" height="15" fill="rgb(235,49,36)" fg:x="81" fg:w="4"/><text x="6.7456%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.32%)</title><rect x="6.4956%" y="501" width="0.3208%" height="15" fill="rgb(225,32,20)" fg:x="81" fg:w="4"/><text x="6.7456%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.6560%" y="485" width="0.1604%" height="15" fill="rgb(215,141,46)" fg:x="83" fg:w="2"/><text x="6.9060%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="6.6560%" y="469" width="0.1604%" height="15" fill="rgb(250,160,47)" fg:x="83" fg:w="2"/><text x="6.9060%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.7362%" y="453" width="0.0802%" height="15" fill="rgb(216,222,40)" fg:x="84" fg:w="1"/><text x="6.9862%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.7362%" y="437" width="0.0802%" height="15" fill="rgb(234,217,39)" fg:x="84" fg:w="1"/><text x="6.9862%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="6.4956%" y="549" width="0.4010%" height="15" fill="rgb(207,178,40)" fg:x="81" fg:w="5"/><text x="6.7456%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="6.8164%" y="533" width="0.0802%" height="15" fill="rgb(221,136,13)" fg:x="85" fg:w="1"/><text x="7.0664%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.8164%" y="517" width="0.0802%" height="15" fill="rgb(249,199,10)" fg:x="85" fg:w="1"/><text x="7.0664%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.8164%" y="501" width="0.0802%" height="15" fill="rgb(249,222,13)" fg:x="85" fg:w="1"/><text x="7.0664%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.8164%" y="485" width="0.0802%" height="15" fill="rgb(244,185,38)" fg:x="85" fg:w="1"/><text x="7.0664%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.8164%" y="469" width="0.0802%" height="15" fill="rgb(236,202,9)" fg:x="85" fg:w="1"/><text x="7.0664%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.8164%" y="453" width="0.0802%" height="15" fill="rgb(250,229,37)" fg:x="85" fg:w="1"/><text x="7.0664%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.8164%" y="437" width="0.0802%" height="15" fill="rgb(206,174,23)" fg:x="85" fg:w="1"/><text x="7.0664%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.8164%" y="421" width="0.0802%" height="15" fill="rgb(211,33,43)" fg:x="85" fg:w="1"/><text x="7.0664%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.8164%" y="405" width="0.0802%" height="15" fill="rgb(245,58,50)" fg:x="85" fg:w="1"/><text x="7.0664%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.8164%" y="389" width="0.0802%" height="15" fill="rgb(244,68,36)" fg:x="85" fg:w="1"/><text x="7.0664%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.8164%" y="373" width="0.0802%" height="15" fill="rgb(232,229,15)" fg:x="85" fg:w="1"/><text x="7.0664%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.8164%" y="357" width="0.0802%" height="15" fill="rgb(254,30,23)" fg:x="85" fg:w="1"/><text x="7.0664%" y="367.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="6.8164%" y="341" width="0.0802%" height="15" fill="rgb(235,160,14)" fg:x="85" fg:w="1"/><text x="7.0664%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="6.8966%" y="533" width="0.0802%" height="15" fill="rgb(212,155,44)" fg:x="86" fg:w="1"/><text x="7.1466%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="6.8966%" y="517" width="0.0802%" height="15" fill="rgb(226,2,50)" fg:x="86" fg:w="1"/><text x="7.1466%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="6.9767%" y="501" width="0.0802%" height="15" fill="rgb(234,177,6)" fg:x="87" fg:w="1"/><text x="7.2267%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0569%" y="469" width="0.0802%" height="15" fill="rgb(217,24,9)" fg:x="88" fg:w="1"/><text x="7.3069%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0569%" y="453" width="0.0802%" height="15" fill="rgb(220,13,46)" fg:x="88" fg:w="1"/><text x="7.3069%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0569%" y="437" width="0.0802%" height="15" fill="rgb(239,221,27)" fg:x="88" fg:w="1"/><text x="7.3069%" y="447.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (3 samples, 0.24%)</title><rect x="7.0569%" y="501" width="0.2406%" height="15" fill="rgb(222,198,25)" fg:x="88" fg:w="3"/><text x="7.3069%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="7.0569%" y="485" width="0.2406%" height="15" fill="rgb(211,99,13)" fg:x="88" fg:w="3"/><text x="7.3069%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="7.1371%" y="469" width="0.1604%" height="15" fill="rgb(232,111,31)" fg:x="89" fg:w="2"/><text x="7.3871%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="7.1371%" y="453" width="0.1604%" height="15" fill="rgb(245,82,37)" fg:x="89" fg:w="2"/><text x="7.3871%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="7.1371%" y="437" width="0.1604%" height="15" fill="rgb(227,149,46)" fg:x="89" fg:w="2"/><text x="7.3871%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.1371%" y="421" width="0.1604%" height="15" fill="rgb(218,36,50)" fg:x="89" fg:w="2"/><text x="7.3871%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2173%" y="405" width="0.0802%" height="15" fill="rgb(226,80,48)" fg:x="90" fg:w="1"/><text x="7.4673%" y="415.50"></text></g><g><title>plugins_core::build::Build::holding (12 samples, 0.96%)</title><rect x="6.4956%" y="565" width="0.9623%" height="15" fill="rgb(238,224,15)" fg:x="81" fg:w="12"/><text x="6.7456%" y="575.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.56%)</title><rect x="6.8966%" y="549" width="0.5613%" height="15" fill="rgb(241,136,10)" fg:x="86" fg:w="7"/><text x="7.1466%" y="559.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (6 samples, 0.48%)</title><rect x="6.9767%" y="533" width="0.4812%" height="15" fill="rgb(208,32,45)" fg:x="87" fg:w="6"/><text x="7.2267%" y="543.50"></text></g><g><title>kernel::model::Entity::replace_scope (6 samples, 0.48%)</title><rect x="6.9767%" y="517" width="0.4812%" height="15" fill="rgb(207,135,9)" fg:x="87" fg:w="6"/><text x="7.2267%" y="527.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="7.2975%" y="501" width="0.1604%" height="15" fill="rgb(206,86,44)" fg:x="91" fg:w="2"/><text x="7.5475%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="7.2975%" y="485" width="0.1604%" height="15" fill="rgb(245,177,15)" fg:x="91" fg:w="2"/><text x="7.5475%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3777%" y="469" width="0.0802%" height="15" fill="rgb(206,64,50)" fg:x="92" fg:w="1"/><text x="7.6277%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3777%" y="453" width="0.0802%" height="15" fill="rgb(234,36,40)" fg:x="92" fg:w="1"/><text x="7.6277%" y="463.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="7.4579%" y="565" width="0.0802%" height="15" fill="rgb(213,64,8)" fg:x="93" fg:w="1"/><text x="7.7079%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.4579%" y="549" width="0.0802%" height="15" fill="rgb(210,75,36)" fg:x="93" fg:w="1"/><text x="7.7079%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="7.5381%" y="533" width="0.0802%" height="15" fill="rgb(229,88,21)" fg:x="94" fg:w="1"/><text x="7.7881%" y="543.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="7.5381%" y="517" width="0.0802%" height="15" fill="rgb(252,204,47)" fg:x="94" fg:w="1"/><text x="7.7881%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.5381%" y="501" width="0.0802%" height="15" fill="rgb(208,77,27)" fg:x="94" fg:w="1"/><text x="7.7881%" y="511.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6183%" y="501" width="0.0802%" height="15" fill="rgb(221,76,26)" fg:x="95" fg:w="1"/><text x="7.8683%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6183%" y="485" width="0.0802%" height="15" fill="rgb(225,139,18)" fg:x="95" fg:w="1"/><text x="7.8683%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.6183%" y="469" width="0.0802%" height="15" fill="rgb(230,137,11)" fg:x="95" fg:w="1"/><text x="7.8683%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6183%" y="453" width="0.0802%" height="15" fill="rgb(212,28,1)" fg:x="95" fg:w="1"/><text x="7.8683%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6183%" y="437" width="0.0802%" height="15" fill="rgb(248,164,17)" fg:x="95" fg:w="1"/><text x="7.8683%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6183%" y="421" width="0.0802%" height="15" fill="rgb(222,171,42)" fg:x="95" fg:w="1"/><text x="7.8683%" y="431.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (45 samples, 3.61%)</title><rect x="4.1700%" y="581" width="3.6087%" height="15" fill="rgb(243,84,45)" fg:x="52" fg:w="45"/><text x="4.4200%" y="591.50">plug..</text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="7.5381%" y="565" width="0.2406%" height="15" fill="rgb(252,49,23)" fg:x="94" fg:w="3"/><text x="7.7881%" y="575.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="7.5381%" y="549" width="0.2406%" height="15" fill="rgb(215,19,7)" fg:x="94" fg:w="3"/><text x="7.7881%" y="559.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="7.6183%" y="533" width="0.1604%" height="15" fill="rgb(238,81,41)" fg:x="95" fg:w="2"/><text x="7.8683%" y="543.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="7.6183%" y="517" width="0.1604%" height="15" fill="rgb(210,199,37)" fg:x="95" fg:w="2"/><text x="7.8683%" y="527.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6985%" y="501" width="0.0802%" height="15" fill="rgb(244,192,49)" fg:x="96" fg:w="1"/><text x="7.9485%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.6985%" y="485" width="0.0802%" height="15" fill="rgb(226,211,11)" fg:x="96" fg:w="1"/><text x="7.9485%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6985%" y="469" width="0.0802%" height="15" fill="rgb(236,162,54)" fg:x="96" fg:w="1"/><text x="7.9485%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.6985%" y="453" width="0.0802%" height="15" fill="rgb(220,229,9)" fg:x="96" fg:w="1"/><text x="7.9485%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6985%" y="437" width="0.0802%" height="15" fill="rgb(250,87,22)" fg:x="96" fg:w="1"/><text x="7.9485%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="7.7787%" y="549" width="0.1604%" height="15" fill="rgb(239,43,17)" fg:x="97" fg:w="2"/><text x="8.0287%" y="559.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="7.7787%" y="533" width="0.1604%" height="15" fill="rgb(231,177,25)" fg:x="97" fg:w="2"/><text x="8.0287%" y="543.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="7.7787%" y="517" width="0.1604%" height="15" fill="rgb(219,179,1)" fg:x="97" fg:w="2"/><text x="8.0287%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8589%" y="501" width="0.0802%" height="15" fill="rgb(238,219,53)" fg:x="98" fg:w="1"/><text x="8.1089%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="7.9391%" y="549" width="0.0802%" height="15" fill="rgb(232,167,36)" fg:x="99" fg:w="1"/><text x="8.1891%" y="559.50"></text></g><g><title>kernel::model::Entity::new_blank (1 samples, 0.08%)</title><rect x="7.9391%" y="533" width="0.0802%" height="15" fill="rgb(244,19,51)" fg:x="99" fg:w="1"/><text x="8.1891%" y="543.50"></text></g><g><title>kernel::model::Entity::new_with_key (1 samples, 0.08%)</title><rect x="7.9391%" y="517" width="0.0802%" height="15" fill="rgb(224,6,22)" fg:x="99" fg:w="1"/><text x="8.1891%" y="527.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (67 samples, 5.37%)</title><rect x="2.7265%" y="597" width="5.3729%" height="15" fill="rgb(224,145,5)" fg:x="34" fg:w="67"/><text x="2.9765%" y="607.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="7.7787%" y="581" width="0.3208%" height="15" fill="rgb(234,130,49)" fg:x="97" fg:w="4"/><text x="8.0287%" y="591.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="7.7787%" y="565" width="0.3208%" height="15" fill="rgb(254,6,2)" fg:x="97" fg:w="4"/><text x="8.0287%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="8.0192%" y="549" width="0.0802%" height="15" fill="rgb(208,96,46)" fg:x="100" fg:w="1"/><text x="8.2692%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::modified (1 samples, 0.08%)</title><rect x="8.0192%" y="533" width="0.0802%" height="15" fill="rgb(239,3,39)" fg:x="100" fg:w="1"/><text x="8.2692%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.0994%" y="597" width="0.0802%" height="15" fill="rgb(233,210,1)" fg:x="101" fg:w="1"/><text x="8.3494%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="8.1796%" y="597" width="0.0802%" height="15" fill="rgb(244,137,37)" fg:x="102" fg:w="1"/><text x="8.4296%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="8.1796%" y="581" width="0.0802%" height="15" fill="rgb(240,136,2)" fg:x="102" fg:w="1"/><text x="8.4296%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="8.3400%" y="565" width="0.1604%" height="15" fill="rgb(239,18,37)" fg:x="104" fg:w="2"/><text x="8.5900%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.3400%" y="549" width="0.1604%" height="15" fill="rgb(218,185,22)" fg:x="104" fg:w="2"/><text x="8.5900%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.4202%" y="533" width="0.0802%" height="15" fill="rgb(225,218,4)" fg:x="105" fg:w="1"/><text x="8.6702%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.4202%" y="517" width="0.0802%" height="15" fill="rgb(230,182,32)" fg:x="105" fg:w="1"/><text x="8.6702%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.5004%" y="565" width="0.0802%" height="15" fill="rgb(242,56,43)" fg:x="106" fg:w="1"/><text x="8.7504%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="8.5004%" y="549" width="0.0802%" height="15" fill="rgb(233,99,24)" fg:x="106" fg:w="1"/><text x="8.7504%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="8.5004%" y="533" width="0.0802%" height="15" fill="rgb(234,209,42)" fg:x="106" fg:w="1"/><text x="8.7504%" y="543.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="8.5806%" y="565" width="0.0802%" height="15" fill="rgb(227,7,12)" fg:x="107" fg:w="1"/><text x="8.8306%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="8.5806%" y="549" width="0.0802%" height="15" fill="rgb(245,203,43)" fg:x="107" fg:w="1"/><text x="8.8306%" y="559.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="8.5806%" y="533" width="0.0802%" height="15" fill="rgb(238,205,33)" fg:x="107" fg:w="1"/><text x="8.8306%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5806%" y="517" width="0.0802%" height="15" fill="rgb(231,56,7)" fg:x="107" fg:w="1"/><text x="8.8306%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.6608%" y="501" width="0.1604%" height="15" fill="rgb(244,186,29)" fg:x="108" fg:w="2"/><text x="8.9108%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.6608%" y="485" width="0.1604%" height="15" fill="rgb(234,111,31)" fg:x="108" fg:w="2"/><text x="8.9108%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.6608%" y="469" width="0.1604%" height="15" fill="rgb(241,149,10)" fg:x="108" fg:w="2"/><text x="8.9108%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.6608%" y="453" width="0.1604%" height="15" fill="rgb(249,206,44)" fg:x="108" fg:w="2"/><text x="8.9108%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.7410%" y="437" width="0.0802%" height="15" fill="rgb(251,153,30)" fg:x="109" fg:w="1"/><text x="8.9910%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.7410%" y="421" width="0.0802%" height="15" fill="rgb(239,152,38)" fg:x="109" fg:w="1"/><text x="8.9910%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.7410%" y="405" width="0.0802%" height="15" fill="rgb(249,139,47)" fg:x="109" fg:w="1"/><text x="8.9910%" y="415.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="8.6608%" y="517" width="0.2406%" height="15" fill="rgb(244,64,35)" fg:x="108" fg:w="3"/><text x="8.9108%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.8212%" y="501" width="0.0802%" height="15" fill="rgb(216,46,15)" fg:x="110" fg:w="1"/><text x="9.0712%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.9014%" y="501" width="0.0802%" height="15" fill="rgb(250,74,19)" fg:x="111" fg:w="1"/><text x="9.1514%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.9816%" y="485" width="0.0802%" height="15" fill="rgb(249,42,33)" fg:x="112" fg:w="1"/><text x="9.2316%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.9816%" y="469" width="0.0802%" height="15" fill="rgb(242,149,17)" fg:x="112" fg:w="1"/><text x="9.2316%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.9816%" y="453" width="0.0802%" height="15" fill="rgb(244,29,21)" fg:x="112" fg:w="1"/><text x="9.2316%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.0617%" y="453" width="0.0802%" height="15" fill="rgb(220,130,37)" fg:x="113" fg:w="1"/><text x="9.3117%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.1419%" y="453" width="0.0802%" height="15" fill="rgb(211,67,2)" fg:x="114" fg:w="1"/><text x="9.3919%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.1419%" y="437" width="0.0802%" height="15" fill="rgb(235,68,52)" fg:x="114" fg:w="1"/><text x="9.3919%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="9.0617%" y="485" width="0.2406%" height="15" fill="rgb(246,142,3)" fg:x="113" fg:w="3"/><text x="9.3117%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="9.0617%" y="469" width="0.2406%" height="15" fill="rgb(241,25,7)" fg:x="113" fg:w="3"/><text x="9.3117%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.2221%" y="453" width="0.0802%" height="15" fill="rgb(242,119,39)" fg:x="115" fg:w="1"/><text x="9.4721%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.2221%" y="437" width="0.0802%" height="15" fill="rgb(241,98,45)" fg:x="115" fg:w="1"/><text x="9.4721%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.2221%" y="421" width="0.0802%" height="15" fill="rgb(254,28,30)" fg:x="115" fg:w="1"/><text x="9.4721%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="8.9816%" y="501" width="0.4010%" height="15" fill="rgb(241,142,54)" fg:x="112" fg:w="5"/><text x="9.2316%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.3023%" y="485" width="0.0802%" height="15" fill="rgb(222,85,15)" fg:x="116" fg:w="1"/><text x="9.5523%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.80%)</title><rect x="8.6608%" y="533" width="0.8019%" height="15" fill="rgb(210,85,47)" fg:x="108" fg:w="10"/><text x="8.9108%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="8.9014%" y="517" width="0.5613%" height="15" fill="rgb(224,206,25)" fg:x="111" fg:w="7"/><text x="9.1514%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.3825%" y="501" width="0.0802%" height="15" fill="rgb(243,201,19)" fg:x="117" fg:w="1"/><text x="9.6325%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.3825%" y="485" width="0.0802%" height="15" fill="rgb(236,59,4)" fg:x="117" fg:w="1"/><text x="9.6325%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.3825%" y="469" width="0.0802%" height="15" fill="rgb(254,179,45)" fg:x="117" fg:w="1"/><text x="9.6325%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.4627%" y="469" width="0.0802%" height="15" fill="rgb(226,14,10)" fg:x="118" fg:w="1"/><text x="9.7127%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.4627%" y="533" width="0.1604%" height="15" fill="rgb(244,27,41)" fg:x="118" fg:w="2"/><text x="9.7127%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="9.4627%" y="517" width="0.1604%" height="15" fill="rgb(235,35,32)" fg:x="118" fg:w="2"/><text x="9.7127%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.4627%" y="501" width="0.1604%" height="15" fill="rgb(218,68,31)" fg:x="118" fg:w="2"/><text x="9.7127%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.4627%" y="485" width="0.1604%" height="15" fill="rgb(207,120,37)" fg:x="118" fg:w="2"/><text x="9.7127%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.5429%" y="469" width="0.0802%" height="15" fill="rgb(227,98,0)" fg:x="119" fg:w="1"/><text x="9.7929%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.5429%" y="453" width="0.0802%" height="15" fill="rgb(207,7,3)" fg:x="119" fg:w="1"/><text x="9.7929%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="9.6231%" y="485" width="0.1604%" height="15" fill="rgb(206,98,19)" fg:x="120" fg:w="2"/><text x="9.8731%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.7835%" y="469" width="0.0802%" height="15" fill="rgb(217,5,26)" fg:x="122" fg:w="1"/><text x="10.0335%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.7835%" y="453" width="0.0802%" height="15" fill="rgb(235,190,38)" fg:x="122" fg:w="1"/><text x="10.0335%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.6231%" y="517" width="0.3208%" height="15" fill="rgb(247,86,24)" fg:x="120" fg:w="4"/><text x="9.8731%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="9.6231%" y="501" width="0.3208%" height="15" fill="rgb(205,101,16)" fg:x="120" fg:w="4"/><text x="9.8731%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.7835%" y="485" width="0.1604%" height="15" fill="rgb(246,168,33)" fg:x="122" fg:w="2"/><text x="10.0335%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.8637%" y="469" width="0.0802%" height="15" fill="rgb(231,114,1)" fg:x="123" fg:w="1"/><text x="10.1137%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.8637%" y="453" width="0.0802%" height="15" fill="rgb(207,184,53)" fg:x="123" fg:w="1"/><text x="10.1137%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8637%" y="437" width="0.0802%" height="15" fill="rgb(224,95,51)" fg:x="123" fg:w="1"/><text x="10.1137%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="10.0241%" y="501" width="0.0802%" height="15" fill="rgb(212,188,45)" fg:x="125" fg:w="1"/><text x="10.2741%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1844%" y="485" width="0.0802%" height="15" fill="rgb(223,154,38)" fg:x="127" fg:w="1"/><text x="10.4344%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2646%" y="485" width="0.0802%" height="15" fill="rgb(251,22,52)" fg:x="128" fg:w="1"/><text x="10.5146%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.2646%" y="469" width="0.0802%" height="15" fill="rgb(229,209,22)" fg:x="128" fg:w="1"/><text x="10.5146%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.2646%" y="453" width="0.0802%" height="15" fill="rgb(234,138,34)" fg:x="128" fg:w="1"/><text x="10.5146%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3448%" y="485" width="0.0802%" height="15" fill="rgb(212,95,11)" fg:x="129" fg:w="1"/><text x="10.5948%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="10.3448%" y="469" width="0.0802%" height="15" fill="rgb(240,179,47)" fg:x="129" fg:w="1"/><text x="10.5948%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.4250%" y="437" width="0.1604%" height="15" fill="rgb(240,163,11)" fg:x="130" fg:w="2"/><text x="10.6750%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.4250%" y="421" width="0.1604%" height="15" fill="rgb(236,37,12)" fg:x="130" fg:w="2"/><text x="10.6750%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.4250%" y="405" width="0.1604%" height="15" fill="rgb(232,164,16)" fg:x="130" fg:w="2"/><text x="10.6750%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="10.5854%" y="437" width="0.2406%" height="15" fill="rgb(244,205,15)" fg:x="132" fg:w="3"/><text x="10.8354%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="10.5854%" y="421" width="0.2406%" height="15" fill="rgb(223,117,47)" fg:x="132" fg:w="3"/><text x="10.8354%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.6656%" y="405" width="0.1604%" height="15" fill="rgb(244,107,35)" fg:x="133" fg:w="2"/><text x="10.9156%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.6656%" y="389" width="0.1604%" height="15" fill="rgb(205,140,8)" fg:x="133" fg:w="2"/><text x="10.9156%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.6656%" y="373" width="0.1604%" height="15" fill="rgb(228,84,46)" fg:x="133" fg:w="2"/><text x="10.9156%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7458%" y="357" width="0.0802%" height="15" fill="rgb(254,188,9)" fg:x="134" fg:w="1"/><text x="10.9958%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="9.9439%" y="517" width="0.9623%" height="15" fill="rgb(206,112,54)" fg:x="124" fg:w="12"/><text x="10.1939%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="10.1043%" y="501" width="0.8019%" height="15" fill="rgb(216,84,49)" fg:x="126" fg:w="10"/><text x="10.3543%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="10.4250%" y="485" width="0.4812%" height="15" fill="rgb(214,194,35)" fg:x="130" fg:w="6"/><text x="10.6750%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (6 samples, 0.48%)</title><rect x="10.4250%" y="469" width="0.4812%" height="15" fill="rgb(249,28,3)" fg:x="130" fg:w="6"/><text x="10.6750%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="10.4250%" y="453" width="0.4812%" height="15" fill="rgb(222,56,52)" fg:x="130" fg:w="6"/><text x="10.6750%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.8260%" y="437" width="0.0802%" height="15" fill="rgb(245,217,50)" fg:x="135" fg:w="1"/><text x="11.0760%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.0666%" y="357" width="0.0802%" height="15" fill="rgb(213,201,24)" fg:x="138" fg:w="1"/><text x="11.3166%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.0666%" y="341" width="0.0802%" height="15" fill="rgb(248,116,28)" fg:x="138" fg:w="1"/><text x="11.3166%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.0666%" y="325" width="0.0802%" height="15" fill="rgb(219,72,43)" fg:x="138" fg:w="1"/><text x="11.3166%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="10.9864%" y="389" width="0.2406%" height="15" fill="rgb(209,138,14)" fg:x="137" fg:w="3"/><text x="11.2364%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.0666%" y="373" width="0.1604%" height="15" fill="rgb(222,18,33)" fg:x="138" fg:w="2"/><text x="11.3166%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.1468%" y="357" width="0.0802%" height="15" fill="rgb(213,199,7)" fg:x="139" fg:w="1"/><text x="11.3968%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="11.1468%" y="341" width="0.0802%" height="15" fill="rgb(250,110,10)" fg:x="139" fg:w="1"/><text x="11.3968%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="10.9062%" y="453" width="0.4010%" height="15" fill="rgb(248,123,6)" fg:x="136" fg:w="5"/><text x="11.1562%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="10.9062%" y="437" width="0.4010%" height="15" fill="rgb(206,91,31)" fg:x="136" fg:w="5"/><text x="11.1562%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="10.9864%" y="421" width="0.3208%" height="15" fill="rgb(211,154,13)" fg:x="137" fg:w="4"/><text x="11.2364%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="10.9864%" y="405" width="0.3208%" height="15" fill="rgb(225,148,7)" fg:x="137" fg:w="4"/><text x="11.2364%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2269%" y="389" width="0.0802%" height="15" fill="rgb(220,160,43)" fg:x="140" fg:w="1"/><text x="11.4769%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2269%" y="373" width="0.0802%" height="15" fill="rgb(213,52,39)" fg:x="140" fg:w="1"/><text x="11.4769%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2269%" y="357" width="0.0802%" height="15" fill="rgb(243,137,7)" fg:x="140" fg:w="1"/><text x="11.4769%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="10.9062%" y="517" width="0.4812%" height="15" fill="rgb(230,79,13)" fg:x="136" fg:w="6"/><text x="11.1562%" y="527.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="10.9062%" y="501" width="0.4812%" height="15" fill="rgb(247,105,23)" fg:x="136" fg:w="6"/><text x="11.1562%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="10.9062%" y="485" width="0.4812%" height="15" fill="rgb(223,179,41)" fg:x="136" fg:w="6"/><text x="11.1562%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="10.9062%" y="469" width="0.4812%" height="15" fill="rgb(218,9,34)" fg:x="136" fg:w="6"/><text x="11.1562%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.3071%" y="453" width="0.0802%" height="15" fill="rgb(222,106,8)" fg:x="141" fg:w="1"/><text x="11.5571%" y="463.50"></text></g><g><title>kernel::compare::any_entity_changes (27 samples, 2.17%)</title><rect x="9.6231%" y="533" width="2.1652%" height="15" fill="rgb(211,220,0)" fg:x="120" fg:w="27"/><text x="9.8731%" y="543.50">k..</text></g><g><title>treediff::diff::diff (5 samples, 0.40%)</title><rect x="11.3873%" y="517" width="0.4010%" height="15" fill="rgb(229,52,16)" fg:x="142" fg:w="5"/><text x="11.6373%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.40%)</title><rect x="11.3873%" y="501" width="0.4010%" height="15" fill="rgb(212,155,18)" fg:x="142" fg:w="5"/><text x="11.6373%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.40%)</title><rect x="11.3873%" y="485" width="0.4010%" height="15" fill="rgb(242,21,14)" fg:x="142" fg:w="5"/><text x="11.6373%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="11.6279%" y="469" width="0.1604%" height="15" fill="rgb(222,19,48)" fg:x="145" fg:w="2"/><text x="11.8779%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="11.6279%" y="453" width="0.1604%" height="15" fill="rgb(232,45,27)" fg:x="145" fg:w="2"/><text x="11.8779%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.7081%" y="437" width="0.0802%" height="15" fill="rgb(249,103,42)" fg:x="146" fg:w="1"/><text x="11.9581%" y="447.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (41 samples, 3.29%)</title><rect x="8.6608%" y="565" width="3.2879%" height="15" fill="rgb(246,81,33)" fg:x="108" fg:w="41"/><text x="8.9108%" y="575.50">eng..</text></g><g><title>engine::session::Session::check_for_changes (41 samples, 3.29%)</title><rect x="8.6608%" y="549" width="3.2879%" height="15" fill="rgb(252,33,42)" fg:x="108" fg:w="41"/><text x="8.9108%" y="559.50">eng..</text></g><g><title>kernel::model::Entity::set_gid (2 samples, 0.16%)</title><rect x="11.7883%" y="533" width="0.1604%" height="15" fill="rgb(209,212,41)" fg:x="147" fg:w="2"/><text x="12.0383%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.7883%" y="517" width="0.1604%" height="15" fill="rgb(207,154,6)" fg:x="147" fg:w="2"/><text x="12.0383%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.8685%" y="501" width="0.0802%" height="15" fill="rgb(223,64,47)" fg:x="148" fg:w="1"/><text x="12.1185%" y="511.50"></text></g><g><title>engine::session::Session::save_entity_changes (47 samples, 3.77%)</title><rect x="8.2598%" y="581" width="3.7690%" height="15" fill="rgb(211,161,38)" fg:x="103" fg:w="47"/><text x="8.5098%" y="591.50">engi..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="11.9487%" y="565" width="0.0802%" height="15" fill="rgb(219,138,40)" fg:x="149" fg:w="1"/><text x="12.1987%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="11.9487%" y="549" width="0.0802%" height="15" fill="rgb(241,228,46)" fg:x="149" fg:w="1"/><text x="12.1987%" y="559.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="11.9487%" y="533" width="0.0802%" height="15" fill="rgb(223,209,38)" fg:x="149" fg:w="1"/><text x="12.1987%" y="543.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="11.9487%" y="517" width="0.0802%" height="15" fill="rgb(236,164,45)" fg:x="149" fg:w="1"/><text x="12.1987%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.9487%" y="501" width="0.0802%" height="15" fill="rgb(231,15,5)" fg:x="149" fg:w="1"/><text x="12.1987%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.9487%" y="485" width="0.0802%" height="15" fill="rgb(252,35,15)" fg:x="149" fg:w="1"/><text x="12.1987%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.9487%" y="469" width="0.0802%" height="15" fill="rgb(248,181,18)" fg:x="149" fg:w="1"/><text x="12.1987%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.9487%" y="453" width="0.0802%" height="15" fill="rgb(233,39,42)" fg:x="149" fg:w="1"/><text x="12.1987%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.9487%" y="437" width="0.0802%" height="15" fill="rgb(238,110,33)" fg:x="149" fg:w="1"/><text x="12.1987%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.9487%" y="421" width="0.0802%" height="15" fill="rgb(233,195,10)" fg:x="149" fg:w="1"/><text x="12.1987%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.9487%" y="405" width="0.0802%" height="15" fill="rgb(254,105,3)" fg:x="149" fg:w="1"/><text x="12.1987%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.9487%" y="389" width="0.0802%" height="15" fill="rgb(221,225,9)" fg:x="149" fg:w="1"/><text x="12.1987%" y="399.50"></text></g><g><title>engine::session::Session::close (48 samples, 3.85%)</title><rect x="8.2598%" y="597" width="3.8492%" height="15" fill="rgb(224,227,45)" fg:x="103" fg:w="48"/><text x="8.5098%" y="607.50">engi..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="12.0289%" y="581" width="0.0802%" height="15" fill="rgb(229,198,43)" fg:x="150" fg:w="1"/><text x="12.2789%" y="591.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="12.0289%" y="565" width="0.0802%" height="15" fill="rgb(206,209,35)" fg:x="150" fg:w="1"/><text x="12.2789%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="12.0289%" y="549" width="0.0802%" height="15" fill="rgb(245,195,53)" fg:x="150" fg:w="1"/><text x="12.2789%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="12.0289%" y="533" width="0.0802%" height="15" fill="rgb(240,92,26)" fg:x="150" fg:w="1"/><text x="12.2789%" y="543.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="12.0289%" y="517" width="0.0802%" height="15" fill="rgb(207,40,23)" fg:x="150" fg:w="1"/><text x="12.2789%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="12.1893%" y="485" width="0.0802%" height="15" fill="rgb(223,111,35)" fg:x="152" fg:w="1"/><text x="12.4393%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="12.1893%" y="469" width="0.0802%" height="15" fill="rgb(229,147,28)" fg:x="152" fg:w="1"/><text x="12.4393%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.1893%" y="453" width="0.0802%" height="15" fill="rgb(211,29,28)" fg:x="152" fg:w="1"/><text x="12.4393%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="12.1893%" y="437" width="0.0802%" height="15" fill="rgb(228,72,33)" fg:x="152" fg:w="1"/><text x="12.4393%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.2694%" y="469" width="0.0802%" height="15" fill="rgb(205,214,31)" fg:x="153" fg:w="1"/><text x="12.5194%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::name (2 samples, 0.16%)</title><rect x="12.2694%" y="485" width="0.1604%" height="15" fill="rgb(224,111,15)" fg:x="153" fg:w="2"/><text x="12.5194%" y="495.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="12.3496%" y="469" width="0.0802%" height="15" fill="rgb(253,21,26)" fg:x="154" fg:w="1"/><text x="12.5996%" y="479.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="12.4298%" y="389" width="0.0802%" height="15" fill="rgb(245,139,43)" fg:x="155" fg:w="1"/><text x="12.6798%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="12.4298%" y="373" width="0.0802%" height="15" fill="rgb(252,170,7)" fg:x="155" fg:w="1"/><text x="12.6798%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.4298%" y="357" width="0.0802%" height="15" fill="rgb(231,118,14)" fg:x="155" fg:w="1"/><text x="12.6798%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.4298%" y="341" width="0.0802%" height="15" fill="rgb(238,83,0)" fg:x="155" fg:w="1"/><text x="12.6798%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.4298%" y="325" width="0.0802%" height="15" fill="rgb(221,39,39)" fg:x="155" fg:w="1"/><text x="12.6798%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.4298%" y="309" width="0.0802%" height="15" fill="rgb(222,119,46)" fg:x="155" fg:w="1"/><text x="12.6798%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.4298%" y="293" width="0.0802%" height="15" fill="rgb(222,165,49)" fg:x="155" fg:w="1"/><text x="12.6798%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.4298%" y="277" width="0.0802%" height="15" fill="rgb(219,113,52)" fg:x="155" fg:w="1"/><text x="12.6798%" y="287.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="12.4298%" y="261" width="0.0802%" height="15" fill="rgb(214,7,15)" fg:x="155" fg:w="1"/><text x="12.6798%" y="271.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="12.4298%" y="485" width="0.1604%" height="15" fill="rgb(235,32,4)" fg:x="155" fg:w="2"/><text x="12.6798%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="12.4298%" y="469" width="0.1604%" height="15" fill="rgb(238,90,54)" fg:x="155" fg:w="2"/><text x="12.6798%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (2 samples, 0.16%)</title><rect x="12.4298%" y="453" width="0.1604%" height="15" fill="rgb(213,208,19)" fg:x="155" fg:w="2"/><text x="12.6798%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="12.4298%" y="437" width="0.1604%" height="15" fill="rgb(233,156,4)" fg:x="155" fg:w="2"/><text x="12.6798%" y="447.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="12.4298%" y="421" width="0.1604%" height="15" fill="rgb(207,194,5)" fg:x="155" fg:w="2"/><text x="12.6798%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="12.4298%" y="405" width="0.1604%" height="15" fill="rgb(206,111,30)" fg:x="155" fg:w="2"/><text x="12.6798%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="12.5100%" y="389" width="0.0802%" height="15" fill="rgb(243,70,54)" fg:x="156" fg:w="1"/><text x="12.7600%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.5100%" y="373" width="0.0802%" height="15" fill="rgb(242,28,8)" fg:x="156" fg:w="1"/><text x="12.7600%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="12.5100%" y="357" width="0.0802%" height="15" fill="rgb(219,106,18)" fg:x="156" fg:w="1"/><text x="12.7600%" y="367.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="12.5100%" y="341" width="0.0802%" height="15" fill="rgb(244,222,10)" fg:x="156" fg:w="1"/><text x="12.7600%" y="351.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="12.5100%" y="325" width="0.0802%" height="15" fill="rgb(236,179,52)" fg:x="156" fg:w="1"/><text x="12.7600%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.5100%" y="309" width="0.0802%" height="15" fill="rgb(213,23,39)" fg:x="156" fg:w="1"/><text x="12.7600%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.5100%" y="293" width="0.0802%" height="15" fill="rgb(238,48,10)" fg:x="156" fg:w="1"/><text x="12.7600%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="12.5100%" y="277" width="0.0802%" height="15" fill="rgb(251,196,23)" fg:x="156" fg:w="1"/><text x="12.7600%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="12.5100%" y="261" width="0.0802%" height="15" fill="rgb(250,152,24)" fg:x="156" fg:w="1"/><text x="12.7600%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="12.5100%" y="245" width="0.0802%" height="15" fill="rgb(209,150,17)" fg:x="156" fg:w="1"/><text x="12.7600%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="12.5100%" y="229" width="0.0802%" height="15" fill="rgb(234,202,34)" fg:x="156" fg:w="1"/><text x="12.7600%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.5100%" y="213" width="0.0802%" height="15" fill="rgb(253,148,53)" fg:x="156" fg:w="1"/><text x="12.7600%" y="223.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.5902%" y="405" width="0.0802%" height="15" fill="rgb(218,129,16)" fg:x="157" fg:w="1"/><text x="12.8402%" y="415.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="12.5902%" y="389" width="0.0802%" height="15" fill="rgb(216,85,19)" fg:x="157" fg:w="1"/><text x="12.8402%" y="399.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.16%)</title><rect x="12.5902%" y="421" width="0.1604%" height="15" fill="rgb(235,228,7)" fg:x="157" fg:w="2"/><text x="12.8402%" y="431.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="12.6704%" y="405" width="0.0802%" height="15" fill="rgb(245,175,0)" fg:x="158" fg:w="1"/><text x="12.9204%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="12.9110%" y="325" width="0.1604%" height="15" fill="rgb(208,168,36)" fg:x="161" fg:w="2"/><text x="13.1610%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="12.9912%" y="309" width="0.0802%" height="15" fill="rgb(246,171,24)" fg:x="162" fg:w="1"/><text x="13.2412%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="12.8308%" y="405" width="0.4010%" height="15" fill="rgb(215,142,24)" fg:x="160" fg:w="5"/><text x="13.0808%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="12.8308%" y="389" width="0.4010%" height="15" fill="rgb(250,187,7)" fg:x="160" fg:w="5"/><text x="13.0808%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="12.9110%" y="373" width="0.3208%" height="15" fill="rgb(228,66,33)" fg:x="161" fg:w="4"/><text x="13.1610%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="12.9110%" y="357" width="0.3208%" height="15" fill="rgb(234,215,21)" fg:x="161" fg:w="4"/><text x="13.1610%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="12.9110%" y="341" width="0.3208%" height="15" fill="rgb(222,191,20)" fg:x="161" fg:w="4"/><text x="13.1610%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="13.0714%" y="325" width="0.1604%" height="15" fill="rgb(245,79,54)" fg:x="163" fg:w="2"/><text x="13.3214%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="13.0714%" y="309" width="0.1604%" height="15" fill="rgb(240,10,37)" fg:x="163" fg:w="2"/><text x="13.3214%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.3921%" y="341" width="0.0802%" height="15" fill="rgb(214,192,32)" fg:x="167" fg:w="1"/><text x="13.6421%" y="351.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="13.5525%" y="325" width="0.2406%" height="15" fill="rgb(209,36,54)" fg:x="169" fg:w="3"/><text x="13.8025%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (25 samples, 2.00%)</title><rect x="13.7931%" y="325" width="2.0048%" height="15" fill="rgb(220,10,11)" fg:x="172" fg:w="25"/><text x="14.0431%" y="335.50">c..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="15.6375%" y="309" width="0.1604%" height="15" fill="rgb(221,106,17)" fg:x="195" fg:w="2"/><text x="15.8875%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (30 samples, 2.41%)</title><rect x="13.4723%" y="341" width="2.4058%" height="15" fill="rgb(251,142,44)" fg:x="168" fg:w="30"/><text x="13.7223%" y="351.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="15.7979%" y="325" width="0.0802%" height="15" fill="rgb(238,13,15)" fg:x="197" fg:w="1"/><text x="16.0479%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="15.8781%" y="341" width="0.0802%" height="15" fill="rgb(208,107,27)" fg:x="198" fg:w="1"/><text x="16.1281%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="15.8781%" y="325" width="0.0802%" height="15" fill="rgb(205,136,37)" fg:x="198" fg:w="1"/><text x="16.1281%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="15.8781%" y="309" width="0.0802%" height="15" fill="rgb(250,205,27)" fg:x="198" fg:w="1"/><text x="16.1281%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.8781%" y="293" width="0.0802%" height="15" fill="rgb(210,80,43)" fg:x="198" fg:w="1"/><text x="16.1281%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="15.9583%" y="341" width="0.3208%" height="15" fill="rgb(247,160,36)" fg:x="199" fg:w="4"/><text x="16.2083%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="15.9583%" y="325" width="0.3208%" height="15" fill="rgb(234,13,49)" fg:x="199" fg:w="4"/><text x="16.2083%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="16.1989%" y="309" width="0.0802%" height="15" fill="rgb(234,122,0)" fg:x="202" fg:w="1"/><text x="16.4489%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="16.2791%" y="341" width="0.1604%" height="15" fill="rgb(207,146,38)" fg:x="203" fg:w="2"/><text x="16.5291%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="16.3593%" y="325" width="0.0802%" height="15" fill="rgb(207,177,25)" fg:x="204" fg:w="1"/><text x="16.6093%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="16.3593%" y="309" width="0.0802%" height="15" fill="rgb(211,178,42)" fg:x="204" fg:w="1"/><text x="16.6093%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="16.3593%" y="293" width="0.0802%" height="15" fill="rgb(230,69,54)" fg:x="204" fg:w="1"/><text x="16.6093%" y="303.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="16.8404%" y="277" width="0.1604%" height="15" fill="rgb(214,135,41)" fg:x="210" fg:w="2"/><text x="17.0904%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0008%" y="277" width="0.0802%" height="15" fill="rgb(237,67,25)" fg:x="212" fg:w="1"/><text x="17.2508%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="17.0810%" y="277" width="0.1604%" height="15" fill="rgb(222,189,50)" fg:x="213" fg:w="2"/><text x="17.3310%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="17.0810%" y="261" width="0.1604%" height="15" fill="rgb(245,148,34)" fg:x="213" fg:w="2"/><text x="17.3310%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.1612%" y="245" width="0.0802%" height="15" fill="rgb(222,29,6)" fg:x="214" fg:w="1"/><text x="17.4112%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.1612%" y="229" width="0.0802%" height="15" fill="rgb(221,189,43)" fg:x="214" fg:w="1"/><text x="17.4112%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.4018%" y="245" width="0.0802%" height="15" fill="rgb(207,36,27)" fg:x="217" fg:w="1"/><text x="17.6518%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.4018%" y="229" width="0.0802%" height="15" fill="rgb(217,90,24)" fg:x="217" fg:w="1"/><text x="17.6518%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.4018%" y="213" width="0.0802%" height="15" fill="rgb(224,66,35)" fg:x="217" fg:w="1"/><text x="17.6518%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.4820%" y="229" width="0.1604%" height="15" fill="rgb(221,13,50)" fg:x="218" fg:w="2"/><text x="17.7320%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="17.2414%" y="277" width="0.4812%" height="15" fill="rgb(236,68,49)" fg:x="215" fg:w="6"/><text x="17.4914%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="17.3216%" y="261" width="0.4010%" height="15" fill="rgb(229,146,28)" fg:x="216" fg:w="5"/><text x="17.5716%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="17.4820%" y="245" width="0.2406%" height="15" fill="rgb(225,31,38)" fg:x="218" fg:w="3"/><text x="17.7320%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="17.6423%" y="229" width="0.0802%" height="15" fill="rgb(250,208,3)" fg:x="220" fg:w="1"/><text x="17.8923%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.6423%" y="213" width="0.0802%" height="15" fill="rgb(246,54,23)" fg:x="220" fg:w="1"/><text x="17.8923%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.6423%" y="197" width="0.0802%" height="15" fill="rgb(243,76,11)" fg:x="220" fg:w="1"/><text x="17.8923%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.6423%" y="181" width="0.0802%" height="15" fill="rgb(245,21,50)" fg:x="220" fg:w="1"/><text x="17.8923%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="17.7225%" y="277" width="0.0802%" height="15" fill="rgb(228,9,43)" fg:x="221" fg:w="1"/><text x="17.9725%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="17.7225%" y="261" width="0.0802%" height="15" fill="rgb(208,100,47)" fg:x="221" fg:w="1"/><text x="17.9725%" y="271.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="17.8027%" y="213" width="0.0802%" height="15" fill="rgb(232,26,8)" fg:x="222" fg:w="1"/><text x="18.0527%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="17.8027%" y="261" width="0.1604%" height="15" fill="rgb(216,166,38)" fg:x="222" fg:w="2"/><text x="18.0527%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="17.8027%" y="245" width="0.1604%" height="15" fill="rgb(251,202,51)" fg:x="222" fg:w="2"/><text x="18.0527%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="17.8027%" y="229" width="0.1604%" height="15" fill="rgb(254,216,34)" fg:x="222" fg:w="2"/><text x="18.0527%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.8829%" y="213" width="0.0802%" height="15" fill="rgb(251,32,27)" fg:x="223" fg:w="1"/><text x="18.1329%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (95 samples, 7.62%)</title><rect x="17.8027%" y="277" width="7.6183%" height="15" fill="rgb(208,127,28)" fg:x="222" fg:w="95"/><text x="18.0527%" y="287.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (93 samples, 7.46%)</title><rect x="17.9631%" y="261" width="7.4579%" height="15" fill="rgb(224,137,22)" fg:x="224" fg:w="93"/><text x="18.2131%" y="271.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (93 samples, 7.46%)</title><rect x="17.9631%" y="245" width="7.4579%" height="15" fill="rgb(254,70,32)" fg:x="224" fg:w="93"/><text x="18.2131%" y="255.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (10 samples, 0.80%)</title><rect x="25.4210%" y="277" width="0.8019%" height="15" fill="rgb(229,75,37)" fg:x="317" fg:w="10"/><text x="25.6710%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.1427%" y="261" width="0.0802%" height="15" fill="rgb(252,64,23)" fg:x="326" fg:w="1"/><text x="26.3927%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (123 samples, 9.86%)</title><rect x="16.4395%" y="325" width="9.8637%" height="15" fill="rgb(232,162,48)" fg:x="205" fg:w="123"/><text x="16.6895%" y="335.50">&lt;core::iter::a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (123 samples, 9.86%)</title><rect x="16.4395%" y="309" width="9.8637%" height="15" fill="rgb(246,160,12)" fg:x="205" fg:w="123"/><text x="16.6895%" y="319.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (123 samples, 9.86%)</title><rect x="16.4395%" y="293" width="9.8637%" height="15" fill="rgb(247,166,0)" fg:x="205" fg:w="123"/><text x="16.6895%" y="303.50">regex_automata..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="26.2229%" y="277" width="0.0802%" height="15" fill="rgb(249,219,21)" fg:x="327" fg:w="1"/><text x="26.4729%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="26.2229%" y="261" width="0.0802%" height="15" fill="rgb(205,209,3)" fg:x="327" fg:w="1"/><text x="26.4729%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.2229%" y="245" width="0.0802%" height="15" fill="rgb(243,44,1)" fg:x="327" fg:w="1"/><text x="26.4729%" y="255.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="26.2229%" y="229" width="0.0802%" height="15" fill="rgb(206,159,16)" fg:x="327" fg:w="1"/><text x="26.4729%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.5437%" y="309" width="0.0802%" height="15" fill="rgb(244,77,30)" fg:x="331" fg:w="1"/><text x="26.7937%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="26.6239%" y="309" width="0.1604%" height="15" fill="rgb(218,69,12)" fg:x="332" fg:w="2"/><text x="26.8739%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="26.7843%" y="309" width="0.4812%" height="15" fill="rgb(212,87,7)" fg:x="334" fg:w="6"/><text x="27.0343%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="27.1051%" y="293" width="0.1604%" height="15" fill="rgb(245,114,25)" fg:x="338" fg:w="2"/><text x="27.3551%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.1852%" y="277" width="0.0802%" height="15" fill="rgb(210,61,42)" fg:x="339" fg:w="1"/><text x="27.4352%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.1852%" y="261" width="0.0802%" height="15" fill="rgb(211,52,33)" fg:x="339" fg:w="1"/><text x="27.4352%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (178 samples, 14.27%)</title><rect x="13.2318%" y="357" width="14.2743%" height="15" fill="rgb(234,58,33)" fg:x="165" fg:w="178"/><text x="13.4818%" y="367.50">regex_automata::meta::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (138 samples, 11.07%)</title><rect x="16.4395%" y="341" width="11.0666%" height="15" fill="rgb(220,115,36)" fg:x="205" fg:w="138"/><text x="16.6895%" y="351.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.20%)</title><rect x="26.3031%" y="325" width="1.2029%" height="15" fill="rgb(243,153,54)" fg:x="328" fg:w="15"/><text x="26.5531%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="27.2654%" y="309" width="0.2406%" height="15" fill="rgb(251,47,18)" fg:x="340" fg:w="3"/><text x="27.5154%" y="319.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="27.6664%" y="309" width="0.0802%" height="15" fill="rgb(242,102,42)" fg:x="345" fg:w="1"/><text x="27.9164%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="27.7466%" y="309" width="0.0802%" height="15" fill="rgb(234,31,38)" fg:x="346" fg:w="1"/><text x="27.9966%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="27.8268%" y="309" width="0.0802%" height="15" fill="rgb(221,117,51)" fg:x="347" fg:w="1"/><text x="28.0768%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.72%)</title><rect x="27.5862%" y="325" width="0.7217%" height="15" fill="rgb(212,20,18)" fg:x="344" fg:w="9"/><text x="27.8362%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="27.9070%" y="309" width="0.4010%" height="15" fill="rgb(245,133,36)" fg:x="348" fg:w="5"/><text x="28.1570%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="27.9070%" y="293" width="0.4010%" height="15" fill="rgb(212,6,19)" fg:x="348" fg:w="5"/><text x="28.1570%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="27.9070%" y="277" width="0.4010%" height="15" fill="rgb(218,1,36)" fg:x="348" fg:w="5"/><text x="28.1570%" y="287.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="27.9070%" y="261" width="0.4010%" height="15" fill="rgb(246,84,54)" fg:x="348" fg:w="5"/><text x="28.1570%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.88%)</title><rect x="27.5060%" y="357" width="0.8821%" height="15" fill="rgb(242,110,6)" fg:x="343" fg:w="11"/><text x="27.7560%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.88%)</title><rect x="27.5060%" y="341" width="0.8821%" height="15" fill="rgb(214,47,5)" fg:x="343" fg:w="11"/><text x="27.7560%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="28.3079%" y="325" width="0.0802%" height="15" fill="rgb(218,159,25)" fg:x="353" fg:w="1"/><text x="28.5579%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="28.4683%" y="309" width="0.2406%" height="15" fill="rgb(215,211,28)" fg:x="355" fg:w="3"/><text x="28.7183%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="28.5485%" y="293" width="0.1604%" height="15" fill="rgb(238,59,32)" fg:x="356" fg:w="2"/><text x="28.7985%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="28.5485%" y="277" width="0.1604%" height="15" fill="rgb(226,82,3)" fg:x="356" fg:w="2"/><text x="28.7985%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="28.5485%" y="261" width="0.1604%" height="15" fill="rgb(240,164,32)" fg:x="356" fg:w="2"/><text x="28.7985%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="28.3881%" y="325" width="0.4010%" height="15" fill="rgb(232,46,7)" fg:x="354" fg:w="5"/><text x="28.6381%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="28.7089%" y="309" width="0.0802%" height="15" fill="rgb(229,129,53)" fg:x="358" fg:w="1"/><text x="28.9589%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="28.7089%" y="293" width="0.0802%" height="15" fill="rgb(234,188,29)" fg:x="358" fg:w="1"/><text x="28.9589%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="28.8693%" y="309" width="0.0802%" height="15" fill="rgb(246,141,4)" fg:x="360" fg:w="1"/><text x="29.1193%" y="319.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="28.8693%" y="293" width="0.0802%" height="15" fill="rgb(229,23,39)" fg:x="360" fg:w="1"/><text x="29.1193%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="28.7891%" y="325" width="0.2406%" height="15" fill="rgb(206,12,3)" fg:x="359" fg:w="3"/><text x="29.0391%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_class_unicode (1 samples, 0.08%)</title><rect x="28.9495%" y="309" width="0.0802%" height="15" fill="rgb(252,226,20)" fg:x="361" fg:w="1"/><text x="29.1995%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="29.0297%" y="325" width="0.0802%" height="15" fill="rgb(216,123,35)" fg:x="362" fg:w="1"/><text x="29.2797%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="29.0297%" y="309" width="0.0802%" height="15" fill="rgb(212,68,40)" fg:x="362" fg:w="1"/><text x="29.2797%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.1099%" y="325" width="0.0802%" height="15" fill="rgb(254,125,32)" fg:x="363" fg:w="1"/><text x="29.3599%" y="335.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (201 samples, 16.12%)</title><rect x="13.2318%" y="405" width="16.1187%" height="15" fill="rgb(253,97,22)" fg:x="165" fg:w="201"/><text x="13.4818%" y="415.50">&lt;regex::regex::string::Re..</text></g><g><title>regex::builders::Builder::build_one_string (201 samples, 16.12%)</title><rect x="13.2318%" y="389" width="16.1187%" height="15" fill="rgb(241,101,14)" fg:x="165" fg:w="201"/><text x="13.4818%" y="399.50">regex::builders::Builder:..</text></g><g><title>regex_automata::meta::regex::Builder::build (201 samples, 16.12%)</title><rect x="13.2318%" y="373" width="16.1187%" height="15" fill="rgb(238,103,29)" fg:x="165" fg:w="201"/><text x="13.4818%" y="383.50">regex_automata::meta::reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (12 samples, 0.96%)</title><rect x="28.3881%" y="357" width="0.9623%" height="15" fill="rgb(233,195,47)" fg:x="354" fg:w="12"/><text x="28.6381%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (12 samples, 0.96%)</title><rect x="28.3881%" y="341" width="0.9623%" height="15" fill="rgb(246,218,30)" fg:x="354" fg:w="12"/><text x="28.6381%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="29.1901%" y="325" width="0.1604%" height="15" fill="rgb(219,145,47)" fg:x="364" fg:w="2"/><text x="29.4401%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="29.1901%" y="309" width="0.1604%" height="15" fill="rgb(243,12,26)" fg:x="364" fg:w="2"/><text x="29.4401%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.1901%" y="293" width="0.1604%" height="15" fill="rgb(214,87,16)" fg:x="364" fg:w="2"/><text x="29.4401%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.4306%" y="357" width="0.0802%" height="15" fill="rgb(208,99,42)" fg:x="367" fg:w="1"/><text x="29.6806%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.4306%" y="341" width="0.0802%" height="15" fill="rgb(253,99,2)" fg:x="367" fg:w="1"/><text x="29.6806%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="29.5108%" y="357" width="0.0802%" height="15" fill="rgb(220,168,23)" fg:x="368" fg:w="1"/><text x="29.7608%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.5108%" y="341" width="0.0802%" height="15" fill="rgb(242,38,24)" fg:x="368" fg:w="1"/><text x="29.7608%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="29.3504%" y="373" width="0.3208%" height="15" fill="rgb(225,182,9)" fg:x="366" fg:w="4"/><text x="29.6004%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="29.5910%" y="357" width="0.0802%" height="15" fill="rgb(243,178,37)" fg:x="369" fg:w="1"/><text x="29.8410%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.5910%" y="341" width="0.0802%" height="15" fill="rgb(232,139,19)" fg:x="369" fg:w="1"/><text x="29.8410%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.5910%" y="325" width="0.0802%" height="15" fill="rgb(225,201,24)" fg:x="369" fg:w="1"/><text x="29.8410%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="29.3504%" y="405" width="0.4812%" height="15" fill="rgb(221,47,46)" fg:x="366" fg:w="6"/><text x="29.6004%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="29.3504%" y="389" width="0.4812%" height="15" fill="rgb(249,23,13)" fg:x="366" fg:w="6"/><text x="29.6004%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="29.6712%" y="373" width="0.1604%" height="15" fill="rgb(219,9,5)" fg:x="370" fg:w="2"/><text x="29.9212%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="29.6712%" y="357" width="0.1604%" height="15" fill="rgb(254,171,16)" fg:x="370" fg:w="2"/><text x="29.9212%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.7514%" y="341" width="0.0802%" height="15" fill="rgb(230,171,20)" fg:x="371" fg:w="1"/><text x="30.0014%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.7514%" y="325" width="0.0802%" height="15" fill="rgb(210,71,41)" fg:x="371" fg:w="1"/><text x="30.0014%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.2326%" y="325" width="0.0802%" height="15" fill="rgb(206,173,20)" fg:x="377" fg:w="1"/><text x="30.4826%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.2326%" y="309" width="0.0802%" height="15" fill="rgb(233,88,34)" fg:x="377" fg:w="1"/><text x="30.4826%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.2326%" y="293" width="0.0802%" height="15" fill="rgb(223,209,46)" fg:x="377" fg:w="1"/><text x="30.4826%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="29.9118%" y="341" width="0.5613%" height="15" fill="rgb(250,43,18)" fg:x="373" fg:w="7"/><text x="30.1618%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="30.3128%" y="325" width="0.1604%" height="15" fill="rgb(208,13,10)" fg:x="378" fg:w="2"/><text x="30.5628%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="29.9118%" y="357" width="0.6415%" height="15" fill="rgb(212,200,36)" fg:x="373" fg:w="8"/><text x="30.1618%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="30.4731%" y="341" width="0.0802%" height="15" fill="rgb(225,90,30)" fg:x="380" fg:w="1"/><text x="30.7231%" y="351.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (224 samples, 17.96%)</title><rect x="12.7506%" y="421" width="17.9631%" height="15" fill="rgb(236,182,39)" fg:x="159" fg:w="224"/><text x="13.0006%" y="431.50">indefinite::helper::Helper::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="29.8316%" y="405" width="0.8821%" height="15" fill="rgb(212,144,35)" fg:x="372" fg:w="11"/><text x="30.0816%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.80%)</title><rect x="29.9118%" y="389" width="0.8019%" height="15" fill="rgb(228,63,44)" fg:x="373" fg:w="10"/><text x="30.1618%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.80%)</title><rect x="29.9118%" y="373" width="0.8019%" height="15" fill="rgb(228,109,6)" fg:x="373" fg:w="10"/><text x="30.1618%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="30.5533%" y="357" width="0.1604%" height="15" fill="rgb(238,117,24)" fg:x="381" fg:w="2"/><text x="30.8033%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="30.6335%" y="341" width="0.0802%" height="15" fill="rgb(242,26,26)" fg:x="382" fg:w="1"/><text x="30.8835%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="30.7137%" y="389" width="0.0802%" height="15" fill="rgb(221,92,48)" fg:x="383" fg:w="1"/><text x="30.9637%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.7137%" y="373" width="0.0802%" height="15" fill="rgb(209,209,32)" fg:x="383" fg:w="1"/><text x="30.9637%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.7137%" y="357" width="0.0802%" height="15" fill="rgb(221,70,22)" fg:x="383" fg:w="1"/><text x="30.9637%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.7137%" y="341" width="0.0802%" height="15" fill="rgb(248,145,5)" fg:x="383" fg:w="1"/><text x="30.9637%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="30.7939%" y="357" width="0.3208%" height="15" fill="rgb(226,116,26)" fg:x="384" fg:w="4"/><text x="31.0439%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="30.7939%" y="341" width="0.3208%" height="15" fill="rgb(244,5,17)" fg:x="384" fg:w="4"/><text x="31.0439%" y="351.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="30.8741%" y="325" width="0.2406%" height="15" fill="rgb(252,159,33)" fg:x="385" fg:w="3"/><text x="31.1241%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="31.3553%" y="325" width="0.0802%" height="15" fill="rgb(206,71,0)" fg:x="391" fg:w="1"/><text x="31.6053%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.3553%" y="309" width="0.0802%" height="15" fill="rgb(233,118,54)" fg:x="391" fg:w="1"/><text x="31.6053%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (6 samples, 0.48%)</title><rect x="31.1147%" y="357" width="0.4812%" height="15" fill="rgb(234,83,48)" fg:x="388" fg:w="6"/><text x="31.3647%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="31.1147%" y="341" width="0.4812%" height="15" fill="rgb(228,3,54)" fg:x="388" fg:w="6"/><text x="31.3647%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="31.4354%" y="325" width="0.1604%" height="15" fill="rgb(226,155,13)" fg:x="392" fg:w="2"/><text x="31.6854%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.4354%" y="309" width="0.1604%" height="15" fill="rgb(241,28,37)" fg:x="392" fg:w="2"/><text x="31.6854%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="31.4354%" y="293" width="0.1604%" height="15" fill="rgb(233,93,10)" fg:x="392" fg:w="2"/><text x="31.6854%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="31.4354%" y="277" width="0.1604%" height="15" fill="rgb(225,113,19)" fg:x="392" fg:w="2"/><text x="31.6854%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="31.4354%" y="261" width="0.1604%" height="15" fill="rgb(241,2,18)" fg:x="392" fg:w="2"/><text x="31.6854%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="31.4354%" y="245" width="0.1604%" height="15" fill="rgb(228,207,21)" fg:x="392" fg:w="2"/><text x="31.6854%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="31.5958%" y="357" width="0.1604%" height="15" fill="rgb(213,211,35)" fg:x="394" fg:w="2"/><text x="31.8458%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.6760%" y="341" width="0.0802%" height="15" fill="rgb(209,83,10)" fg:x="395" fg:w="1"/><text x="31.9260%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.6760%" y="325" width="0.0802%" height="15" fill="rgb(209,164,1)" fg:x="395" fg:w="1"/><text x="31.9260%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.6760%" y="309" width="0.0802%" height="15" fill="rgb(213,184,43)" fg:x="395" fg:w="1"/><text x="31.9260%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.9968%" y="341" width="0.1604%" height="15" fill="rgb(231,61,34)" fg:x="399" fg:w="2"/><text x="32.2468%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.2374%" y="325" width="0.0802%" height="15" fill="rgb(235,75,3)" fg:x="402" fg:w="1"/><text x="32.4874%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (22 samples, 1.76%)</title><rect x="32.3176%" y="325" width="1.7642%" height="15" fill="rgb(220,106,47)" fg:x="403" fg:w="22"/><text x="32.5676%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="33.9214%" y="309" width="0.1604%" height="15" fill="rgb(210,196,33)" fg:x="423" fg:w="2"/><text x="34.1714%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (25 samples, 2.00%)</title><rect x="32.1572%" y="341" width="2.0048%" height="15" fill="rgb(229,154,42)" fg:x="401" fg:w="25"/><text x="32.4072%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="34.0818%" y="325" width="0.0802%" height="15" fill="rgb(228,114,26)" fg:x="425" fg:w="1"/><text x="34.3318%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="34.1620%" y="341" width="0.0802%" height="15" fill="rgb(208,144,1)" fg:x="426" fg:w="1"/><text x="34.4120%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="34.3224%" y="325" width="0.0802%" height="15" fill="rgb(239,112,37)" fg:x="428" fg:w="1"/><text x="34.5724%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="34.4026%" y="325" width="0.4812%" height="15" fill="rgb(210,96,50)" fg:x="429" fg:w="6"/><text x="34.6526%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="34.8035%" y="309" width="0.0802%" height="15" fill="rgb(222,178,2)" fg:x="434" fg:w="1"/><text x="35.0535%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.8035%" y="293" width="0.0802%" height="15" fill="rgb(226,74,18)" fg:x="434" fg:w="1"/><text x="35.0535%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.8035%" y="277" width="0.0802%" height="15" fill="rgb(225,67,54)" fg:x="434" fg:w="1"/><text x="35.0535%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.8035%" y="261" width="0.0802%" height="15" fill="rgb(251,92,32)" fg:x="434" fg:w="1"/><text x="35.0535%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (10 samples, 0.80%)</title><rect x="34.2422%" y="341" width="0.8019%" height="15" fill="rgb(228,149,22)" fg:x="427" fg:w="10"/><text x="34.4922%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="34.8837%" y="325" width="0.1604%" height="15" fill="rgb(243,54,13)" fg:x="435" fg:w="2"/><text x="35.1337%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="34.8837%" y="309" width="0.1604%" height="15" fill="rgb(243,180,28)" fg:x="435" fg:w="2"/><text x="35.1337%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="34.9639%" y="293" width="0.0802%" height="15" fill="rgb(208,167,24)" fg:x="436" fg:w="1"/><text x="35.2139%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSet&gt; (1 samples, 0.08%)</title><rect x="35.2045%" y="309" width="0.0802%" height="15" fill="rgb(245,73,45)" fg:x="439" fg:w="1"/><text x="35.4545%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="35.2847%" y="309" width="0.0802%" height="15" fill="rgb(237,203,48)" fg:x="440" fg:w="1"/><text x="35.5347%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.2847%" y="293" width="0.0802%" height="15" fill="rgb(211,197,16)" fg:x="440" fg:w="1"/><text x="35.5347%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.2847%" y="277" width="0.0802%" height="15" fill="rgb(243,99,51)" fg:x="440" fg:w="1"/><text x="35.5347%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.2847%" y="261" width="0.0802%" height="15" fill="rgb(215,123,29)" fg:x="440" fg:w="1"/><text x="35.5347%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.3272%" y="277" width="0.0802%" height="15" fill="rgb(239,186,37)" fg:x="453" fg:w="1"/><text x="36.5772%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.3272%" y="261" width="0.0802%" height="15" fill="rgb(252,136,39)" fg:x="453" fg:w="1"/><text x="36.5772%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="36.3272%" y="245" width="0.0802%" height="15" fill="rgb(223,213,32)" fg:x="453" fg:w="1"/><text x="36.5772%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (14 samples, 1.12%)</title><rect x="35.3649%" y="309" width="1.1227%" height="15" fill="rgb(233,115,5)" fg:x="441" fg:w="14"/><text x="35.6149%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (7 samples, 0.56%)</title><rect x="35.9262%" y="293" width="0.5613%" height="15" fill="rgb(207,226,44)" fg:x="448" fg:w="7"/><text x="36.1762%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.4074%" y="277" width="0.0802%" height="15" fill="rgb(208,126,0)" fg:x="454" fg:w="1"/><text x="36.6574%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.4074%" y="261" width="0.0802%" height="15" fill="rgb(244,66,21)" fg:x="454" fg:w="1"/><text x="36.6574%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="36.4074%" y="245" width="0.0802%" height="15" fill="rgb(222,97,12)" fg:x="454" fg:w="1"/><text x="36.6574%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (9 samples, 0.72%)</title><rect x="36.5678%" y="293" width="0.7217%" height="15" fill="rgb(219,213,19)" fg:x="456" fg:w="9"/><text x="36.8178%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (9 samples, 0.72%)</title><rect x="36.5678%" y="277" width="0.7217%" height="15" fill="rgb(252,169,30)" fg:x="456" fg:w="9"/><text x="36.8178%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (12 samples, 0.96%)</title><rect x="36.4876%" y="309" width="0.9623%" height="15" fill="rgb(206,32,51)" fg:x="455" fg:w="12"/><text x="36.7376%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (2 samples, 0.16%)</title><rect x="37.2895%" y="293" width="0.1604%" height="15" fill="rgb(250,172,42)" fg:x="465" fg:w="2"/><text x="37.5395%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (31 samples, 2.49%)</title><rect x="35.0441%" y="341" width="2.4860%" height="15" fill="rgb(209,34,43)" fg:x="437" fg:w="31"/><text x="35.2941%" y="351.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (31 samples, 2.49%)</title><rect x="35.0441%" y="325" width="2.4860%" height="15" fill="rgb(223,11,35)" fg:x="437" fg:w="31"/><text x="35.2941%" y="335.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="37.4499%" y="309" width="0.0802%" height="15" fill="rgb(251,219,26)" fg:x="467" fg:w="1"/><text x="37.6999%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="37.5301%" y="341" width="0.1604%" height="15" fill="rgb(231,119,3)" fg:x="468" fg:w="2"/><text x="37.7801%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.6905%" y="309" width="0.0802%" height="15" fill="rgb(216,97,11)" fg:x="470" fg:w="1"/><text x="37.9405%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="37.7706%" y="293" width="0.0802%" height="15" fill="rgb(223,59,9)" fg:x="471" fg:w="1"/><text x="38.0206%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.7706%" y="277" width="0.0802%" height="15" fill="rgb(233,93,31)" fg:x="471" fg:w="1"/><text x="38.0206%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.7706%" y="261" width="0.0802%" height="15" fill="rgb(239,81,33)" fg:x="471" fg:w="1"/><text x="38.0206%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.7706%" y="245" width="0.0802%" height="15" fill="rgb(213,120,34)" fg:x="471" fg:w="1"/><text x="38.0206%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="37.9310%" y="277" width="0.0802%" height="15" fill="rgb(243,49,53)" fg:x="473" fg:w="1"/><text x="38.1810%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="39.2943%" y="229" width="0.0802%" height="15" fill="rgb(247,216,33)" fg:x="490" fg:w="1"/><text x="39.5443%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="39.3745%" y="229" width="0.6415%" height="15" fill="rgb(226,26,14)" fg:x="491" fg:w="8"/><text x="39.6245%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="40.0160%" y="229" width="0.2406%" height="15" fill="rgb(215,49,53)" fg:x="499" fg:w="3"/><text x="40.2660%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="40.2566%" y="229" width="0.1604%" height="15" fill="rgb(245,162,40)" fg:x="502" fg:w="2"/><text x="40.5066%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.3368%" y="213" width="0.0802%" height="15" fill="rgb(229,68,17)" fg:x="503" fg:w="1"/><text x="40.5868%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.3368%" y="197" width="0.0802%" height="15" fill="rgb(213,182,10)" fg:x="503" fg:w="1"/><text x="40.5868%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.3368%" y="181" width="0.0802%" height="15" fill="rgb(245,125,30)" fg:x="503" fg:w="1"/><text x="40.5868%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="40.4170%" y="229" width="0.1604%" height="15" fill="rgb(232,202,2)" fg:x="504" fg:w="2"/><text x="40.6670%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="41.2991%" y="197" width="0.1604%" height="15" fill="rgb(237,140,51)" fg:x="515" fg:w="2"/><text x="41.5491%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="41.4595%" y="197" width="0.1604%" height="15" fill="rgb(236,157,25)" fg:x="517" fg:w="2"/><text x="41.7095%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.4595%" y="181" width="0.1604%" height="15" fill="rgb(219,209,0)" fg:x="517" fg:w="2"/><text x="41.7095%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.5397%" y="165" width="0.0802%" height="15" fill="rgb(240,116,54)" fg:x="518" fg:w="1"/><text x="41.7897%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (22 samples, 1.76%)</title><rect x="40.5774%" y="229" width="1.7642%" height="15" fill="rgb(216,10,36)" fg:x="506" fg:w="22"/><text x="40.8274%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (20 samples, 1.60%)</title><rect x="40.7378%" y="213" width="1.6038%" height="15" fill="rgb(222,72,44)" fg:x="508" fg:w="20"/><text x="40.9878%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (9 samples, 0.72%)</title><rect x="41.6199%" y="197" width="0.7217%" height="15" fill="rgb(232,159,9)" fg:x="519" fg:w="9"/><text x="41.8699%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (3 samples, 0.24%)</title><rect x="42.3416%" y="229" width="0.2406%" height="15" fill="rgb(210,39,32)" fg:x="528" fg:w="3"/><text x="42.5916%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="42.3416%" y="213" width="0.2406%" height="15" fill="rgb(216,194,45)" fg:x="528" fg:w="3"/><text x="42.5916%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="42.3416%" y="197" width="0.2406%" height="15" fill="rgb(218,18,35)" fg:x="528" fg:w="3"/><text x="42.5916%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (87 samples, 6.98%)</title><rect x="42.5822%" y="229" width="6.9767%" height="15" fill="rgb(207,83,51)" fg:x="531" fg:w="87"/><text x="42.8322%" y="239.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (87 samples, 6.98%)</title><rect x="42.5822%" y="213" width="6.9767%" height="15" fill="rgb(225,63,43)" fg:x="531" fg:w="87"/><text x="42.8322%" y="223.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (87 samples, 6.98%)</title><rect x="42.5822%" y="197" width="6.9767%" height="15" fill="rgb(207,57,36)" fg:x="531" fg:w="87"/><text x="42.8322%" y="207.50">alloc::ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="49.5589%" y="229" width="0.2406%" height="15" fill="rgb(216,99,33)" fg:x="618" fg:w="3"/><text x="49.8089%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="49.7995%" y="229" width="0.1604%" height="15" fill="rgb(225,42,16)" fg:x="621" fg:w="2"/><text x="50.0495%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (158 samples, 12.67%)</title><rect x="37.6905%" y="325" width="12.6704%" height="15" fill="rgb(220,201,45)" fg:x="470" fg:w="158"/><text x="37.9405%" y="335.50">&lt;core::iter::adapte..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (157 samples, 12.59%)</title><rect x="37.7706%" y="309" width="12.5902%" height="15" fill="rgb(225,33,4)" fg:x="471" fg:w="157"/><text x="38.0206%" y="319.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (156 samples, 12.51%)</title><rect x="37.8508%" y="293" width="12.5100%" height="15" fill="rgb(224,33,50)" fg:x="472" fg:w="156"/><text x="38.1008%" y="303.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (154 samples, 12.35%)</title><rect x="38.0112%" y="277" width="12.3496%" height="15" fill="rgb(246,198,51)" fg:x="474" fg:w="154"/><text x="38.2612%" y="287.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (154 samples, 12.35%)</title><rect x="38.0112%" y="261" width="12.3496%" height="15" fill="rgb(205,22,4)" fg:x="474" fg:w="154"/><text x="38.2612%" y="271.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (154 samples, 12.35%)</title><rect x="38.0112%" y="245" width="12.3496%" height="15" fill="rgb(206,3,8)" fg:x="474" fg:w="154"/><text x="38.2612%" y="255.50">regex_automata::nf..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.40%)</title><rect x="49.9599%" y="229" width="0.4010%" height="15" fill="rgb(251,23,15)" fg:x="623" fg:w="5"/><text x="50.2099%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="50.6014%" y="309" width="0.0802%" height="15" fill="rgb(252,88,28)" fg:x="631" fg:w="1"/><text x="50.8514%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.6816%" y="309" width="0.0802%" height="15" fill="rgb(212,127,14)" fg:x="632" fg:w="1"/><text x="50.9316%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (14 samples, 1.12%)</title><rect x="50.7618%" y="309" width="1.1227%" height="15" fill="rgb(247,145,37)" fg:x="633" fg:w="14"/><text x="51.0118%" y="319.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="51.8043%" y="293" width="0.0802%" height="15" fill="rgb(209,117,53)" fg:x="646" fg:w="1"/><text x="52.0543%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.64%)</title><rect x="51.8845%" y="309" width="0.6415%" height="15" fill="rgb(212,90,42)" fg:x="647" fg:w="8"/><text x="52.1345%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.4459%" y="293" width="0.0802%" height="15" fill="rgb(218,164,37)" fg:x="654" fg:w="1"/><text x="52.6959%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="52.5261%" y="309" width="0.1604%" height="15" fill="rgb(246,65,34)" fg:x="655" fg:w="2"/><text x="52.7761%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="52.6864%" y="309" width="0.1604%" height="15" fill="rgb(231,100,33)" fg:x="657" fg:w="2"/><text x="52.9364%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.7666%" y="293" width="0.0802%" height="15" fill="rgb(228,126,14)" fg:x="658" fg:w="1"/><text x="53.0166%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.7666%" y="277" width="0.0802%" height="15" fill="rgb(215,173,21)" fg:x="658" fg:w="1"/><text x="53.0166%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.7666%" y="261" width="0.0802%" height="15" fill="rgb(210,6,40)" fg:x="658" fg:w="1"/><text x="53.0166%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (190 samples, 15.24%)</title><rect x="37.6905%" y="341" width="15.2366%" height="15" fill="rgb(212,48,18)" fg:x="470" fg:w="190"/><text x="37.9405%" y="351.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (32 samples, 2.57%)</title><rect x="50.3609%" y="325" width="2.5662%" height="15" fill="rgb(230,214,11)" fg:x="628" fg:w="32"/><text x="50.6109%" y="335.50">re..</text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="52.8468%" y="309" width="0.0802%" height="15" fill="rgb(254,105,39)" fg:x="659" fg:w="1"/><text x="53.0968%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="52.8468%" y="293" width="0.0802%" height="15" fill="rgb(245,158,5)" fg:x="659" fg:w="1"/><text x="53.0968%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (265 samples, 21.25%)</title><rect x="31.7562%" y="357" width="21.2510%" height="15" fill="rgb(249,208,11)" fg:x="396" fg:w="265"/><text x="32.0062%" y="367.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="52.9270%" y="341" width="0.0802%" height="15" fill="rgb(210,39,28)" fg:x="660" fg:w="1"/><text x="53.1770%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="53.1676%" y="325" width="0.1604%" height="15" fill="rgb(211,56,53)" fg:x="663" fg:w="2"/><text x="53.4176%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="53.2478%" y="309" width="0.0802%" height="15" fill="rgb(226,201,30)" fg:x="664" fg:w="1"/><text x="53.4978%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.3280%" y="309" width="0.0802%" height="15" fill="rgb(239,101,34)" fg:x="665" fg:w="1"/><text x="53.5780%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (2 samples, 0.16%)</title><rect x="53.3280%" y="325" width="0.1604%" height="15" fill="rgb(226,209,5)" fg:x="665" fg:w="2"/><text x="53.5780%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="53.4082%" y="309" width="0.0802%" height="15" fill="rgb(250,105,47)" fg:x="666" fg:w="1"/><text x="53.6582%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (3 samples, 0.24%)</title><rect x="53.4884%" y="325" width="0.2406%" height="15" fill="rgb(230,72,3)" fg:x="667" fg:w="3"/><text x="53.7384%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.16%)</title><rect x="53.5686%" y="309" width="0.1604%" height="15" fill="rgb(232,218,39)" fg:x="668" fg:w="2"/><text x="53.8186%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.80%)</title><rect x="53.0072%" y="357" width="0.8019%" height="15" fill="rgb(248,166,6)" fg:x="661" fg:w="10"/><text x="53.2572%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.80%)</title><rect x="53.0072%" y="341" width="0.8019%" height="15" fill="rgb(247,89,20)" fg:x="661" fg:w="10"/><text x="53.2572%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="53.7289%" y="325" width="0.0802%" height="15" fill="rgb(248,130,54)" fg:x="670" fg:w="1"/><text x="53.9789%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="53.9695%" y="309" width="0.4010%" height="15" fill="rgb(234,196,4)" fg:x="673" fg:w="5"/><text x="54.2195%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="54.2101%" y="293" width="0.1604%" height="15" fill="rgb(250,143,31)" fg:x="676" fg:w="2"/><text x="54.4601%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.2903%" y="277" width="0.0802%" height="15" fill="rgb(211,110,34)" fg:x="677" fg:w="1"/><text x="54.5403%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="54.3705%" y="309" width="0.0802%" height="15" fill="rgb(215,124,48)" fg:x="678" fg:w="1"/><text x="54.6205%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="54.3705%" y="293" width="0.0802%" height="15" fill="rgb(216,46,13)" fg:x="678" fg:w="1"/><text x="54.6205%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="54.4507%" y="309" width="0.1604%" height="15" fill="rgb(205,184,25)" fg:x="679" fg:w="2"/><text x="54.7007%" y="319.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="54.4507%" y="293" width="0.1604%" height="15" fill="rgb(228,1,10)" fg:x="679" fg:w="2"/><text x="54.7007%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="54.5309%" y="277" width="0.0802%" height="15" fill="rgb(213,116,27)" fg:x="680" fg:w="1"/><text x="54.7809%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (10 samples, 0.80%)</title><rect x="53.8893%" y="325" width="0.8019%" height="15" fill="rgb(241,95,50)" fg:x="672" fg:w="10"/><text x="54.1393%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="54.6111%" y="309" width="0.0802%" height="15" fill="rgb(238,48,32)" fg:x="681" fg:w="1"/><text x="54.8611%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="54.6913%" y="325" width="0.2406%" height="15" fill="rgb(235,113,49)" fg:x="682" fg:w="3"/><text x="54.9413%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="54.8516%" y="309" width="0.0802%" height="15" fill="rgb(205,127,43)" fg:x="684" fg:w="1"/><text x="55.1016%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="54.8516%" y="293" width="0.0802%" height="15" fill="rgb(250,162,2)" fg:x="684" fg:w="1"/><text x="55.1016%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (304 samples, 24.38%)</title><rect x="30.7137%" y="405" width="24.3785%" height="15" fill="rgb(220,13,41)" fg:x="383" fg:w="304"/><text x="30.9637%" y="415.50">&lt;regex::regex::string::Regex as core::c..</text></g><g><title>regex::builders::Builder::build_one_string (303 samples, 24.30%)</title><rect x="30.7939%" y="389" width="24.2983%" height="15" fill="rgb(249,221,25)" fg:x="384" fg:w="303"/><text x="31.0439%" y="399.50">regex::builders::Builder::build_one_str..</text></g><g><title>regex_automata::meta::regex::Builder::build (303 samples, 24.30%)</title><rect x="30.7939%" y="373" width="24.2983%" height="15" fill="rgb(215,208,19)" fg:x="384" fg:w="303"/><text x="31.0439%" y="383.50">regex_automata::meta::regex::Builder::b..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (16 samples, 1.28%)</title><rect x="53.8091%" y="357" width="1.2831%" height="15" fill="rgb(236,175,2)" fg:x="671" fg:w="16"/><text x="54.0591%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (16 samples, 1.28%)</title><rect x="53.8091%" y="341" width="1.2831%" height="15" fill="rgb(241,52,2)" fg:x="671" fg:w="16"/><text x="54.0591%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="54.9318%" y="325" width="0.1604%" height="15" fill="rgb(248,140,14)" fg:x="685" fg:w="2"/><text x="55.1818%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="55.0120%" y="309" width="0.0802%" height="15" fill="rgb(253,22,42)" fg:x="686" fg:w="1"/><text x="55.2620%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.0120%" y="293" width="0.0802%" height="15" fill="rgb(234,61,47)" fg:x="686" fg:w="1"/><text x="55.2620%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.0120%" y="277" width="0.0802%" height="15" fill="rgb(208,226,15)" fg:x="686" fg:w="1"/><text x="55.2620%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="55.0922%" y="357" width="0.0802%" height="15" fill="rgb(217,221,4)" fg:x="687" fg:w="1"/><text x="55.3422%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.0922%" y="341" width="0.0802%" height="15" fill="rgb(212,174,34)" fg:x="687" fg:w="1"/><text x="55.3422%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="55.1724%" y="357" width="0.0802%" height="15" fill="rgb(253,83,4)" fg:x="688" fg:w="1"/><text x="55.4224%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="55.1724%" y="341" width="0.0802%" height="15" fill="rgb(250,195,49)" fg:x="688" fg:w="1"/><text x="55.4224%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.1724%" y="325" width="0.0802%" height="15" fill="rgb(241,192,25)" fg:x="688" fg:w="1"/><text x="55.4224%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="55.0922%" y="373" width="0.3208%" height="15" fill="rgb(208,124,10)" fg:x="687" fg:w="4"/><text x="55.3422%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="55.2526%" y="357" width="0.1604%" height="15" fill="rgb(222,33,0)" fg:x="689" fg:w="2"/><text x="55.5026%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="55.2526%" y="341" width="0.1604%" height="15" fill="rgb(234,209,28)" fg:x="689" fg:w="2"/><text x="55.5026%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="55.2526%" y="325" width="0.1604%" height="15" fill="rgb(224,11,23)" fg:x="689" fg:w="2"/><text x="55.5026%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.3328%" y="309" width="0.0802%" height="15" fill="rgb(232,99,1)" fg:x="690" fg:w="1"/><text x="55.5828%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="55.0922%" y="405" width="0.4812%" height="15" fill="rgb(237,95,45)" fg:x="687" fg:w="6"/><text x="55.3422%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="55.0922%" y="389" width="0.4812%" height="15" fill="rgb(208,109,11)" fg:x="687" fg:w="6"/><text x="55.3422%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="55.4130%" y="373" width="0.1604%" height="15" fill="rgb(216,190,48)" fg:x="691" fg:w="2"/><text x="55.6630%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="55.4130%" y="357" width="0.1604%" height="15" fill="rgb(251,171,36)" fg:x="691" fg:w="2"/><text x="55.6630%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.4932%" y="341" width="0.0802%" height="15" fill="rgb(230,62,22)" fg:x="692" fg:w="1"/><text x="55.7432%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="55.6536%" y="357" width="0.2406%" height="15" fill="rgb(225,114,35)" fg:x="694" fg:w="3"/><text x="55.9036%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.16%)</title><rect x="55.7338%" y="341" width="0.1604%" height="15" fill="rgb(215,118,42)" fg:x="695" fg:w="2"/><text x="55.9838%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (5 samples, 0.40%)</title><rect x="55.5734%" y="389" width="0.4010%" height="15" fill="rgb(243,119,21)" fg:x="693" fg:w="5"/><text x="55.8234%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="55.6536%" y="373" width="0.3208%" height="15" fill="rgb(252,177,53)" fg:x="694" fg:w="4"/><text x="55.9036%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="55.8941%" y="357" width="0.0802%" height="15" fill="rgb(237,209,29)" fg:x="697" fg:w="1"/><text x="56.1441%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="55.8941%" y="341" width="0.0802%" height="15" fill="rgb(212,65,23)" fg:x="697" fg:w="1"/><text x="56.1441%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.9743%" y="325" width="0.0802%" height="15" fill="rgb(230,222,46)" fg:x="698" fg:w="1"/><text x="56.2243%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.8565%" y="277" width="0.0802%" height="15" fill="rgb(215,135,32)" fg:x="709" fg:w="1"/><text x="57.1065%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="56.7763%" y="309" width="0.2406%" height="15" fill="rgb(246,101,22)" fg:x="708" fg:w="3"/><text x="57.0263%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="56.8565%" y="293" width="0.1604%" height="15" fill="rgb(206,107,13)" fg:x="709" fg:w="2"/><text x="57.1065%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.9366%" y="277" width="0.0802%" height="15" fill="rgb(250,100,44)" fg:x="710" fg:w="1"/><text x="57.1866%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (332 samples, 26.62%)</title><rect x="30.7137%" y="421" width="26.6239%" height="15" fill="rgb(231,147,38)" fg:x="383" fg:w="332"/><text x="30.9637%" y="431.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (22 samples, 1.76%)</title><rect x="55.5734%" y="405" width="1.7642%" height="15" fill="rgb(229,8,40)" fg:x="693" fg:w="22"/><text x="55.8234%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (17 samples, 1.36%)</title><rect x="55.9743%" y="389" width="1.3633%" height="15" fill="rgb(221,135,30)" fg:x="698" fg:w="17"/><text x="56.2243%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (17 samples, 1.36%)</title><rect x="55.9743%" y="373" width="1.3633%" height="15" fill="rgb(249,193,18)" fg:x="698" fg:w="17"/><text x="56.2243%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (17 samples, 1.36%)</title><rect x="55.9743%" y="357" width="1.3633%" height="15" fill="rgb(209,133,39)" fg:x="698" fg:w="17"/><text x="56.2243%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (17 samples, 1.36%)</title><rect x="55.9743%" y="341" width="1.3633%" height="15" fill="rgb(232,100,14)" fg:x="698" fg:w="17"/><text x="56.2243%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (16 samples, 1.28%)</title><rect x="56.0545%" y="325" width="1.2831%" height="15" fill="rgb(224,185,1)" fg:x="699" fg:w="16"/><text x="56.3045%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="57.0168%" y="309" width="0.3208%" height="15" fill="rgb(223,139,8)" fg:x="711" fg:w="4"/><text x="57.2668%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.3376%" y="341" width="0.0802%" height="15" fill="rgb(232,213,38)" fg:x="715" fg:w="1"/><text x="57.5876%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.3376%" y="325" width="0.0802%" height="15" fill="rgb(207,94,22)" fg:x="715" fg:w="1"/><text x="57.5876%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="57.3376%" y="309" width="0.0802%" height="15" fill="rgb(219,183,54)" fg:x="715" fg:w="1"/><text x="57.5876%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.3376%" y="293" width="0.0802%" height="15" fill="rgb(216,185,54)" fg:x="715" fg:w="1"/><text x="57.5876%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.3376%" y="277" width="0.0802%" height="15" fill="rgb(254,217,39)" fg:x="715" fg:w="1"/><text x="57.5876%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.3376%" y="261" width="0.0802%" height="15" fill="rgb(240,178,23)" fg:x="715" fg:w="1"/><text x="57.5876%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="57.4980%" y="309" width="0.0802%" height="15" fill="rgb(218,11,47)" fg:x="717" fg:w="1"/><text x="57.7480%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.4980%" y="293" width="0.0802%" height="15" fill="rgb(218,51,51)" fg:x="717" fg:w="1"/><text x="57.7480%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.4980%" y="277" width="0.0802%" height="15" fill="rgb(238,126,27)" fg:x="717" fg:w="1"/><text x="57.7480%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.4980%" y="261" width="0.0802%" height="15" fill="rgb(249,202,22)" fg:x="717" fg:w="1"/><text x="57.7480%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.5782%" y="309" width="0.0802%" height="15" fill="rgb(254,195,49)" fg:x="718" fg:w="1"/><text x="57.8282%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="57.6584%" y="309" width="0.0802%" height="15" fill="rgb(208,123,14)" fg:x="719" fg:w="1"/><text x="57.9084%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="57.7386%" y="277" width="0.0802%" height="15" fill="rgb(224,200,8)" fg:x="720" fg:w="1"/><text x="57.9886%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (6 samples, 0.48%)</title><rect x="57.4178%" y="341" width="0.4812%" height="15" fill="rgb(217,61,36)" fg:x="716" fg:w="6"/><text x="57.6678%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="57.4178%" y="325" width="0.4812%" height="15" fill="rgb(206,35,45)" fg:x="716" fg:w="6"/><text x="57.6678%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="57.7386%" y="309" width="0.1604%" height="15" fill="rgb(217,65,33)" fg:x="720" fg:w="2"/><text x="57.9886%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="57.7386%" y="293" width="0.1604%" height="15" fill="rgb(222,158,48)" fg:x="720" fg:w="2"/><text x="57.9886%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.8188%" y="277" width="0.0802%" height="15" fill="rgb(254,2,54)" fg:x="721" fg:w="1"/><text x="58.0688%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.9791%" y="325" width="0.0802%" height="15" fill="rgb(250,143,38)" fg:x="723" fg:w="1"/><text x="58.2291%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="58.0593%" y="325" width="0.0802%" height="15" fill="rgb(248,25,0)" fg:x="724" fg:w="1"/><text x="58.3093%" y="335.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="58.2999%" y="309" width="0.0802%" height="15" fill="rgb(206,152,27)" fg:x="727" fg:w="1"/><text x="58.5499%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="58.3801%" y="309" width="0.0802%" height="15" fill="rgb(240,77,30)" fg:x="728" fg:w="1"/><text x="58.6301%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="58.3801%" y="293" width="0.0802%" height="15" fill="rgb(231,5,3)" fg:x="728" fg:w="1"/><text x="58.6301%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="58.4603%" y="309" width="0.5613%" height="15" fill="rgb(207,226,32)" fg:x="729" fg:w="7"/><text x="58.7103%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (12 samples, 0.96%)</title><rect x="58.1395%" y="325" width="0.9623%" height="15" fill="rgb(222,207,47)" fg:x="725" fg:w="12"/><text x="58.3895%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="59.0217%" y="309" width="0.0802%" height="15" fill="rgb(229,115,45)" fg:x="736" fg:w="1"/><text x="59.2717%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="59.0217%" y="293" width="0.0802%" height="15" fill="rgb(224,191,6)" fg:x="736" fg:w="1"/><text x="59.2717%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="59.1820%" y="309" width="0.1604%" height="15" fill="rgb(230,227,24)" fg:x="738" fg:w="2"/><text x="59.4320%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="59.1820%" y="293" width="0.1604%" height="15" fill="rgb(228,80,19)" fg:x="738" fg:w="2"/><text x="59.4320%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="59.1820%" y="277" width="0.1604%" height="15" fill="rgb(247,229,0)" fg:x="738" fg:w="2"/><text x="59.4320%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="59.2622%" y="261" width="0.0802%" height="15" fill="rgb(237,194,15)" fg:x="739" fg:w="1"/><text x="59.5122%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="59.2622%" y="245" width="0.0802%" height="15" fill="rgb(219,203,20)" fg:x="739" fg:w="1"/><text x="59.5122%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.2622%" y="229" width="0.0802%" height="15" fill="rgb(234,128,8)" fg:x="739" fg:w="1"/><text x="59.5122%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.2622%" y="213" width="0.0802%" height="15" fill="rgb(248,202,8)" fg:x="739" fg:w="1"/><text x="59.5122%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.2622%" y="197" width="0.0802%" height="15" fill="rgb(206,104,37)" fg:x="739" fg:w="1"/><text x="59.5122%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="59.3424%" y="293" width="0.0802%" height="15" fill="rgb(223,8,27)" fg:x="740" fg:w="1"/><text x="59.5924%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="59.3424%" y="309" width="0.4010%" height="15" fill="rgb(216,217,28)" fg:x="740" fg:w="5"/><text x="59.5924%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="59.4226%" y="293" width="0.3208%" height="15" fill="rgb(249,199,1)" fg:x="741" fg:w="4"/><text x="59.6726%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (24 samples, 1.92%)</title><rect x="57.8990%" y="341" width="1.9246%" height="15" fill="rgb(240,85,17)" fg:x="722" fg:w="24"/><text x="58.1490%" y="351.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.72%)</title><rect x="59.1018%" y="325" width="0.7217%" height="15" fill="rgb(206,108,45)" fg:x="737" fg:w="9"/><text x="59.3518%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="59.7434%" y="309" width="0.0802%" height="15" fill="rgb(245,210,41)" fg:x="745" fg:w="1"/><text x="59.9934%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="59.8236%" y="309" width="0.0802%" height="15" fill="rgb(206,13,37)" fg:x="746" fg:w="1"/><text x="60.0736%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.24%)</title><rect x="59.9038%" y="293" width="0.2406%" height="15" fill="rgb(250,61,18)" fg:x="747" fg:w="3"/><text x="60.1538%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="59.9840%" y="277" width="0.1604%" height="15" fill="rgb(235,172,48)" fg:x="748" fg:w="2"/><text x="60.2340%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="60.0642%" y="261" width="0.0802%" height="15" fill="rgb(249,201,17)" fg:x="749" fg:w="1"/><text x="60.3142%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="59.8236%" y="341" width="0.4010%" height="15" fill="rgb(219,208,6)" fg:x="746" fg:w="5"/><text x="60.0736%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="59.8236%" y="325" width="0.4010%" height="15" fill="rgb(248,31,23)" fg:x="746" fg:w="5"/><text x="60.0736%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="59.9038%" y="309" width="0.3208%" height="15" fill="rgb(245,15,42)" fg:x="747" fg:w="4"/><text x="60.1538%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="60.1443%" y="293" width="0.0802%" height="15" fill="rgb(222,217,39)" fg:x="750" fg:w="1"/><text x="60.3943%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="60.1443%" y="277" width="0.0802%" height="15" fill="rgb(210,219,27)" fg:x="750" fg:w="1"/><text x="60.3943%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="60.2245%" y="309" width="0.3208%" height="15" fill="rgb(252,166,36)" fg:x="751" fg:w="4"/><text x="60.4745%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="60.2245%" y="293" width="0.3208%" height="15" fill="rgb(245,132,34)" fg:x="751" fg:w="4"/><text x="60.4745%" y="303.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (2 samples, 0.16%)</title><rect x="60.3849%" y="277" width="0.1604%" height="15" fill="rgb(236,54,3)" fg:x="753" fg:w="2"/><text x="60.6349%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="60.5453%" y="293" width="0.0802%" height="15" fill="rgb(241,173,43)" fg:x="755" fg:w="1"/><text x="60.7953%" y="303.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="60.5453%" y="277" width="0.0802%" height="15" fill="rgb(215,190,9)" fg:x="755" fg:w="1"/><text x="60.7953%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5453%" y="261" width="0.0802%" height="15" fill="rgb(242,101,16)" fg:x="755" fg:w="1"/><text x="60.7953%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (42 samples, 3.37%)</title><rect x="57.3376%" y="389" width="3.3681%" height="15" fill="rgb(223,190,21)" fg:x="715" fg:w="42"/><text x="57.5876%" y="399.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (42 samples, 3.37%)</title><rect x="57.3376%" y="373" width="3.3681%" height="15" fill="rgb(215,228,25)" fg:x="715" fg:w="42"/><text x="57.5876%" y="383.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (42 samples, 3.37%)</title><rect x="57.3376%" y="357" width="3.3681%" height="15" fill="rgb(225,36,22)" fg:x="715" fg:w="42"/><text x="57.5876%" y="367.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="60.2245%" y="341" width="0.4812%" height="15" fill="rgb(251,106,46)" fg:x="751" fg:w="6"/><text x="60.4745%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="60.2245%" y="325" width="0.4812%" height="15" fill="rgb(208,90,1)" fg:x="751" fg:w="6"/><text x="60.4745%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="60.5453%" y="309" width="0.1604%" height="15" fill="rgb(243,10,4)" fg:x="755" fg:w="2"/><text x="60.7953%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="60.6255%" y="293" width="0.0802%" height="15" fill="rgb(212,137,27)" fg:x="756" fg:w="1"/><text x="60.8755%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.7057%" y="341" width="0.0802%" height="15" fill="rgb(231,220,49)" fg:x="757" fg:w="1"/><text x="60.9557%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.7057%" y="325" width="0.0802%" height="15" fill="rgb(237,96,20)" fg:x="757" fg:w="1"/><text x="60.9557%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.7057%" y="309" width="0.0802%" height="15" fill="rgb(239,229,30)" fg:x="757" fg:w="1"/><text x="60.9557%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="60.7057%" y="357" width="0.2406%" height="15" fill="rgb(219,65,33)" fg:x="757" fg:w="3"/><text x="60.9557%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="60.7859%" y="341" width="0.1604%" height="15" fill="rgb(243,134,7)" fg:x="758" fg:w="2"/><text x="61.0359%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.8661%" y="325" width="0.0802%" height="15" fill="rgb(216,177,54)" fg:x="759" fg:w="1"/><text x="61.1161%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="60.8661%" y="309" width="0.0802%" height="15" fill="rgb(211,160,20)" fg:x="759" fg:w="1"/><text x="61.1161%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.8661%" y="293" width="0.0802%" height="15" fill="rgb(239,85,39)" fg:x="759" fg:w="1"/><text x="61.1161%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (6 samples, 0.48%)</title><rect x="60.7057%" y="389" width="0.4812%" height="15" fill="rgb(232,125,22)" fg:x="757" fg:w="6"/><text x="60.9557%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.48%)</title><rect x="60.7057%" y="373" width="0.4812%" height="15" fill="rgb(244,57,34)" fg:x="757" fg:w="6"/><text x="60.9557%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="60.9463%" y="357" width="0.2406%" height="15" fill="rgb(214,203,32)" fg:x="760" fg:w="3"/><text x="61.1963%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="61.0265%" y="341" width="0.1604%" height="15" fill="rgb(207,58,43)" fg:x="761" fg:w="2"/><text x="61.2765%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.1067%" y="325" width="0.0802%" height="15" fill="rgb(215,193,15)" fg:x="762" fg:w="1"/><text x="61.3567%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.1067%" y="309" width="0.0802%" height="15" fill="rgb(232,15,44)" fg:x="762" fg:w="1"/><text x="61.3567%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.1067%" y="293" width="0.0802%" height="15" fill="rgb(212,3,48)" fg:x="762" fg:w="1"/><text x="61.3567%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="61.1868%" y="389" width="0.0802%" height="15" fill="rgb(218,128,7)" fg:x="763" fg:w="1"/><text x="61.4368%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="61.1868%" y="373" width="0.0802%" height="15" fill="rgb(226,216,39)" fg:x="763" fg:w="1"/><text x="61.4368%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="61.1868%" y="357" width="0.0802%" height="15" fill="rgb(243,47,51)" fg:x="763" fg:w="1"/><text x="61.4368%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.1868%" y="341" width="0.0802%" height="15" fill="rgb(241,183,40)" fg:x="763" fg:w="1"/><text x="61.4368%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.1868%" y="325" width="0.0802%" height="15" fill="rgb(231,217,32)" fg:x="763" fg:w="1"/><text x="61.4368%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.6680%" y="309" width="0.0802%" height="15" fill="rgb(229,61,38)" fg:x="769" fg:w="1"/><text x="61.9180%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="61.2670%" y="325" width="0.6415%" height="15" fill="rgb(225,210,5)" fg:x="764" fg:w="8"/><text x="61.5170%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="61.7482%" y="309" width="0.1604%" height="15" fill="rgb(231,79,45)" fg:x="770" fg:w="2"/><text x="61.9982%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="61.2670%" y="341" width="0.7217%" height="15" fill="rgb(224,100,7)" fg:x="764" fg:w="9"/><text x="61.5170%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="61.9086%" y="325" width="0.0802%" height="15" fill="rgb(241,198,18)" fg:x="772" fg:w="1"/><text x="62.1586%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (59 samples, 4.73%)</title><rect x="57.3376%" y="405" width="4.7314%" height="15" fill="rgb(252,97,53)" fg:x="715" fg:w="59"/><text x="57.5876%" y="415.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.80%)</title><rect x="61.2670%" y="389" width="0.8019%" height="15" fill="rgb(220,88,7)" fg:x="764" fg:w="10"/><text x="61.5170%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.80%)</title><rect x="61.2670%" y="373" width="0.8019%" height="15" fill="rgb(213,176,14)" fg:x="764" fg:w="10"/><text x="61.5170%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.80%)</title><rect x="61.2670%" y="357" width="0.8019%" height="15" fill="rgb(246,73,7)" fg:x="764" fg:w="10"/><text x="61.5170%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="61.9888%" y="341" width="0.0802%" height="15" fill="rgb(245,64,36)" fg:x="773" fg:w="1"/><text x="62.2388%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="61.9888%" y="325" width="0.0802%" height="15" fill="rgb(245,80,10)" fg:x="773" fg:w="1"/><text x="62.2388%" y="335.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (626 samples, 50.20%)</title><rect x="12.1091%" y="501" width="50.2005%" height="15" fill="rgb(232,107,50)" fg:x="151" fg:w="626"/><text x="12.3591%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::Obs..</text></g><g><title>plugins_core::looking::model::qualify_name (620 samples, 49.72%)</title><rect x="12.5902%" y="485" width="49.7193%" height="15" fill="rgb(253,3,0)" fg:x="157" fg:w="620"/><text x="12.8402%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (620 samples, 49.72%)</title><rect x="12.5902%" y="469" width="49.7193%" height="15" fill="rgb(212,99,53)" fg:x="157" fg:w="620"/><text x="12.8402%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (620 samples, 49.72%)</title><rect x="12.5902%" y="453" width="49.7193%" height="15" fill="rgb(249,111,54)" fg:x="157" fg:w="620"/><text x="12.8402%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (620 samples, 49.72%)</title><rect x="12.5902%" y="437" width="49.7193%" height="15" fill="rgb(249,55,30)" fg:x="157" fg:w="620"/><text x="12.8402%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (62 samples, 4.97%)</title><rect x="57.3376%" y="421" width="4.9719%" height="15" fill="rgb(237,47,42)" fg:x="715" fg:w="62"/><text x="57.5876%" y="431.50">indefi..</text></g><g><title>indefinite::irregular::Irregular::check (3 samples, 0.24%)</title><rect x="62.0690%" y="405" width="0.2406%" height="15" fill="rgb(211,20,18)" fg:x="774" fg:w="3"/><text x="62.3190%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.2294%" y="389" width="0.0802%" height="15" fill="rgb(231,203,46)" fg:x="776" fg:w="1"/><text x="62.4794%" y="399.50"></text></g><g><title>kernel::model::EntityRef::into_entry (2 samples, 0.16%)</title><rect x="62.3095%" y="501" width="0.1604%" height="15" fill="rgb(237,142,3)" fg:x="777" fg:w="2"/><text x="62.5595%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="62.3095%" y="485" width="0.1604%" height="15" fill="rgb(241,107,1)" fg:x="777" fg:w="2"/><text x="62.5595%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="62.3897%" y="469" width="0.0802%" height="15" fill="rgb(229,83,13)" fg:x="778" fg:w="1"/><text x="62.6397%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="62.3897%" y="453" width="0.0802%" height="15" fill="rgb(241,91,40)" fg:x="778" fg:w="1"/><text x="62.6397%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="62.3897%" y="437" width="0.0802%" height="15" fill="rgb(225,3,45)" fg:x="778" fg:w="1"/><text x="62.6397%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.3897%" y="421" width="0.0802%" height="15" fill="rgb(244,223,14)" fg:x="778" fg:w="1"/><text x="62.6397%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="62.3897%" y="405" width="0.0802%" height="15" fill="rgb(224,124,37)" fg:x="778" fg:w="1"/><text x="62.6397%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="62.3897%" y="389" width="0.0802%" height="15" fill="rgb(251,171,30)" fg:x="778" fg:w="1"/><text x="62.6397%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="62.3897%" y="373" width="0.0802%" height="15" fill="rgb(236,46,54)" fg:x="778" fg:w="1"/><text x="62.6397%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.3897%" y="357" width="0.0802%" height="15" fill="rgb(245,213,5)" fg:x="778" fg:w="1"/><text x="62.6397%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.3897%" y="341" width="0.0802%" height="15" fill="rgb(230,144,27)" fg:x="778" fg:w="1"/><text x="62.6397%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.3897%" y="325" width="0.0802%" height="15" fill="rgb(220,86,6)" fg:x="778" fg:w="1"/><text x="62.6397%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="62.3897%" y="309" width="0.0802%" height="15" fill="rgb(240,20,13)" fg:x="778" fg:w="1"/><text x="62.6397%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="62.3897%" y="293" width="0.0802%" height="15" fill="rgb(217,89,34)" fg:x="778" fg:w="1"/><text x="62.6397%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.3897%" y="277" width="0.0802%" height="15" fill="rgb(229,13,5)" fg:x="778" fg:w="1"/><text x="62.6397%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="62.3897%" y="261" width="0.0802%" height="15" fill="rgb(244,67,35)" fg:x="778" fg:w="1"/><text x="62.6397%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="62.3897%" y="245" width="0.0802%" height="15" fill="rgb(221,40,2)" fg:x="778" fg:w="1"/><text x="62.6397%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.4699%" y="469" width="0.0802%" height="15" fill="rgb(237,157,21)" fg:x="779" fg:w="1"/><text x="62.7199%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="62.5501%" y="469" width="0.0802%" height="15" fill="rgb(222,94,11)" fg:x="780" fg:w="1"/><text x="62.8001%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="62.5501%" y="453" width="0.0802%" height="15" fill="rgb(249,113,6)" fg:x="780" fg:w="1"/><text x="62.8001%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="62.5501%" y="437" width="0.0802%" height="15" fill="rgb(238,137,36)" fg:x="780" fg:w="1"/><text x="62.8001%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="62.5501%" y="421" width="0.0802%" height="15" fill="rgb(210,102,26)" fg:x="780" fg:w="1"/><text x="62.8001%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="62.5501%" y="405" width="0.0802%" height="15" fill="rgb(218,30,30)" fg:x="780" fg:w="1"/><text x="62.8001%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="62.5501%" y="389" width="0.0802%" height="15" fill="rgb(214,67,26)" fg:x="780" fg:w="1"/><text x="62.8001%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5501%" y="373" width="0.0802%" height="15" fill="rgb(251,9,53)" fg:x="780" fg:w="1"/><text x="62.8001%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5501%" y="357" width="0.0802%" height="15" fill="rgb(228,204,25)" fg:x="780" fg:w="1"/><text x="62.8001%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.5501%" y="341" width="0.0802%" height="15" fill="rgb(207,153,8)" fg:x="780" fg:w="1"/><text x="62.8001%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.5501%" y="325" width="0.0802%" height="15" fill="rgb(242,9,16)" fg:x="780" fg:w="1"/><text x="62.8001%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.5501%" y="309" width="0.0802%" height="15" fill="rgb(217,211,10)" fg:x="780" fg:w="1"/><text x="62.8001%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.5501%" y="293" width="0.0802%" height="15" fill="rgb(219,228,52)" fg:x="780" fg:w="1"/><text x="62.8001%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.5501%" y="277" width="0.0802%" height="15" fill="rgb(231,92,29)" fg:x="780" fg:w="1"/><text x="62.8001%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.5501%" y="261" width="0.0802%" height="15" fill="rgb(232,8,23)" fg:x="780" fg:w="1"/><text x="62.8001%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.5501%" y="245" width="0.0802%" height="15" fill="rgb(216,211,34)" fg:x="780" fg:w="1"/><text x="62.8001%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.5501%" y="229" width="0.0802%" height="15" fill="rgb(236,151,0)" fg:x="780" fg:w="1"/><text x="62.8001%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.5501%" y="213" width="0.0802%" height="15" fill="rgb(209,168,3)" fg:x="780" fg:w="1"/><text x="62.8001%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.6303%" y="437" width="0.0802%" height="15" fill="rgb(208,129,28)" fg:x="781" fg:w="1"/><text x="62.8803%" y="447.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (632 samples, 50.68%)</title><rect x="12.1091%" y="533" width="50.6816%" height="15" fill="rgb(229,78,22)" fg:x="151" fg:w="632"/><text x="12.3591%" y="543.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (632 samples, 50.68%)</title><rect x="12.1091%" y="517" width="50.6816%" height="15" fill="rgb(228,187,13)" fg:x="151" fg:w="632"/><text x="12.3591%" y="527.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="62.4699%" y="501" width="0.3208%" height="15" fill="rgb(240,119,24)" fg:x="779" fg:w="4"/><text x="62.7199%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.32%)</title><rect x="62.4699%" y="485" width="0.3208%" height="15" fill="rgb(209,194,42)" fg:x="779" fg:w="4"/><text x="62.7199%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.6303%" y="469" width="0.1604%" height="15" fill="rgb(247,200,46)" fg:x="781" fg:w="2"/><text x="62.8803%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.6303%" y="453" width="0.1604%" height="15" fill="rgb(218,76,16)" fg:x="781" fg:w="2"/><text x="62.8803%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="62.7105%" y="437" width="0.0802%" height="15" fill="rgb(225,21,48)" fg:x="782" fg:w="1"/><text x="62.9605%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="62.7105%" y="421" width="0.0802%" height="15" fill="rgb(239,223,50)" fg:x="782" fg:w="1"/><text x="62.9605%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="62.7105%" y="405" width="0.0802%" height="15" fill="rgb(244,45,21)" fg:x="782" fg:w="1"/><text x="62.9605%" y="415.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="62.8709%" y="501" width="0.0802%" height="15" fill="rgb(232,33,43)" fg:x="784" fg:w="1"/><text x="63.1209%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="62.8709%" y="485" width="0.0802%" height="15" fill="rgb(209,8,3)" fg:x="784" fg:w="1"/><text x="63.1209%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="62.8709%" y="469" width="0.0802%" height="15" fill="rgb(214,25,53)" fg:x="784" fg:w="1"/><text x="63.1209%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="62.8709%" y="453" width="0.0802%" height="15" fill="rgb(254,186,54)" fg:x="784" fg:w="1"/><text x="63.1209%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="62.8709%" y="437" width="0.0802%" height="15" fill="rgb(208,174,49)" fg:x="784" fg:w="1"/><text x="63.1209%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.8709%" y="421" width="0.0802%" height="15" fill="rgb(233,191,51)" fg:x="784" fg:w="1"/><text x="63.1209%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="62.8709%" y="405" width="0.0802%" height="15" fill="rgb(222,134,10)" fg:x="784" fg:w="1"/><text x="63.1209%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="62.8709%" y="389" width="0.0802%" height="15" fill="rgb(230,226,20)" fg:x="784" fg:w="1"/><text x="63.1209%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="62.8709%" y="373" width="0.0802%" height="15" fill="rgb(251,111,25)" fg:x="784" fg:w="1"/><text x="63.1209%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.8709%" y="357" width="0.0802%" height="15" fill="rgb(224,40,46)" fg:x="784" fg:w="1"/><text x="63.1209%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="62.8709%" y="341" width="0.0802%" height="15" fill="rgb(236,108,47)" fg:x="784" fg:w="1"/><text x="63.1209%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.8709%" y="325" width="0.0802%" height="15" fill="rgb(234,93,0)" fg:x="784" fg:w="1"/><text x="63.1209%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.8709%" y="309" width="0.0802%" height="15" fill="rgb(224,213,32)" fg:x="784" fg:w="1"/><text x="63.1209%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="62.8709%" y="293" width="0.0802%" height="15" fill="rgb(251,11,48)" fg:x="784" fg:w="1"/><text x="63.1209%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="62.8709%" y="277" width="0.0802%" height="15" fill="rgb(236,173,5)" fg:x="784" fg:w="1"/><text x="63.1209%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.8709%" y="261" width="0.0802%" height="15" fill="rgb(230,95,12)" fg:x="784" fg:w="1"/><text x="63.1209%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="62.8709%" y="245" width="0.0802%" height="15" fill="rgb(232,209,1)" fg:x="784" fg:w="1"/><text x="63.1209%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="62.8709%" y="229" width="0.0802%" height="15" fill="rgb(232,6,1)" fg:x="784" fg:w="1"/><text x="63.1209%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="62.8709%" y="213" width="0.0802%" height="15" fill="rgb(210,224,50)" fg:x="784" fg:w="1"/><text x="63.1209%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.8709%" y="197" width="0.0802%" height="15" fill="rgb(228,127,35)" fg:x="784" fg:w="1"/><text x="63.1209%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="62.8709%" y="181" width="0.0802%" height="15" fill="rgb(245,102,45)" fg:x="784" fg:w="1"/><text x="63.1209%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.8709%" y="165" width="0.0802%" height="15" fill="rgb(214,1,49)" fg:x="784" fg:w="1"/><text x="63.1209%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="62.8709%" y="149" width="0.0802%" height="15" fill="rgb(226,163,40)" fg:x="784" fg:w="1"/><text x="63.1209%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="62.8709%" y="133" width="0.0802%" height="15" fill="rgb(239,212,28)" fg:x="784" fg:w="1"/><text x="63.1209%" y="143.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="62.8709%" y="117" width="0.0802%" height="15" fill="rgb(220,20,13)" fg:x="784" fg:w="1"/><text x="63.1209%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.8709%" y="101" width="0.0802%" height="15" fill="rgb(210,164,35)" fg:x="784" fg:w="1"/><text x="63.1209%" y="111.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="62.9511%" y="421" width="0.0802%" height="15" fill="rgb(248,109,41)" fg:x="785" fg:w="1"/><text x="63.2011%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="62.9511%" y="405" width="0.0802%" height="15" fill="rgb(238,23,50)" fg:x="785" fg:w="1"/><text x="63.2011%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.9511%" y="389" width="0.0802%" height="15" fill="rgb(211,48,49)" fg:x="785" fg:w="1"/><text x="63.2011%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9511%" y="373" width="0.0802%" height="15" fill="rgb(223,36,21)" fg:x="785" fg:w="1"/><text x="63.2011%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.9511%" y="357" width="0.0802%" height="15" fill="rgb(207,123,46)" fg:x="785" fg:w="1"/><text x="63.2011%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9511%" y="341" width="0.0802%" height="15" fill="rgb(240,218,32)" fg:x="785" fg:w="1"/><text x="63.2011%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.9511%" y="325" width="0.0802%" height="15" fill="rgb(252,5,43)" fg:x="785" fg:w="1"/><text x="63.2011%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.9511%" y="309" width="0.0802%" height="15" fill="rgb(252,84,19)" fg:x="785" fg:w="1"/><text x="63.2011%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.9511%" y="293" width="0.0802%" height="15" fill="rgb(243,152,39)" fg:x="785" fg:w="1"/><text x="63.2011%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="62.9511%" y="277" width="0.0802%" height="15" fill="rgb(234,160,15)" fg:x="785" fg:w="1"/><text x="63.2011%" y="287.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (4 samples, 0.32%)</title><rect x="62.7907%" y="533" width="0.3208%" height="15" fill="rgb(237,34,20)" fg:x="783" fg:w="4"/><text x="63.0407%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="62.8709%" y="517" width="0.2406%" height="15" fill="rgb(229,97,13)" fg:x="784" fg:w="3"/><text x="63.1209%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="62.9511%" y="501" width="0.1604%" height="15" fill="rgb(234,71,50)" fg:x="785" fg:w="2"/><text x="63.2011%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="62.9511%" y="485" width="0.1604%" height="15" fill="rgb(253,155,4)" fg:x="785" fg:w="2"/><text x="63.2011%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="62.9511%" y="469" width="0.1604%" height="15" fill="rgb(222,185,37)" fg:x="785" fg:w="2"/><text x="63.2011%" y="479.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="62.9511%" y="453" width="0.1604%" height="15" fill="rgb(251,177,13)" fg:x="785" fg:w="2"/><text x="63.2011%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="62.9511%" y="437" width="0.1604%" height="15" fill="rgb(250,179,40)" fg:x="785" fg:w="2"/><text x="63.2011%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="63.0313%" y="421" width="0.0802%" height="15" fill="rgb(242,44,2)" fg:x="786" fg:w="1"/><text x="63.2813%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.0313%" y="405" width="0.0802%" height="15" fill="rgb(216,177,13)" fg:x="786" fg:w="1"/><text x="63.2813%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.0313%" y="389" width="0.0802%" height="15" fill="rgb(216,106,43)" fg:x="786" fg:w="1"/><text x="63.2813%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.0313%" y="373" width="0.0802%" height="15" fill="rgb(216,183,2)" fg:x="786" fg:w="1"/><text x="63.2813%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.0313%" y="357" width="0.0802%" height="15" fill="rgb(249,75,3)" fg:x="786" fg:w="1"/><text x="63.2813%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.0313%" y="341" width="0.0802%" height="15" fill="rgb(219,67,39)" fg:x="786" fg:w="1"/><text x="63.2813%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.0313%" y="325" width="0.0802%" height="15" fill="rgb(253,228,2)" fg:x="786" fg:w="1"/><text x="63.2813%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.1917%" y="453" width="0.1604%" height="15" fill="rgb(235,138,27)" fg:x="788" fg:w="2"/><text x="63.4417%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.2719%" y="437" width="0.0802%" height="15" fill="rgb(236,97,51)" fg:x="789" fg:w="1"/><text x="63.5219%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.2719%" y="421" width="0.0802%" height="15" fill="rgb(240,80,30)" fg:x="789" fg:w="1"/><text x="63.5219%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.3520%" y="453" width="0.0802%" height="15" fill="rgb(230,178,19)" fg:x="790" fg:w="1"/><text x="63.6020%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="63.1917%" y="469" width="0.4010%" height="15" fill="rgb(210,190,27)" fg:x="788" fg:w="5"/><text x="63.4417%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (2 samples, 0.16%)</title><rect x="63.4322%" y="453" width="0.1604%" height="15" fill="rgb(222,107,31)" fg:x="791" fg:w="2"/><text x="63.6822%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (8 samples, 0.64%)</title><rect x="63.1115%" y="501" width="0.6415%" height="15" fill="rgb(216,127,34)" fg:x="787" fg:w="8"/><text x="63.3615%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="63.1917%" y="485" width="0.5613%" height="15" fill="rgb(234,116,52)" fg:x="788" fg:w="7"/><text x="63.4417%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.5926%" y="469" width="0.1604%" height="15" fill="rgb(222,124,15)" fg:x="793" fg:w="2"/><text x="63.8426%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="63.9134%" y="469" width="0.0802%" height="15" fill="rgb(231,179,28)" fg:x="797" fg:w="1"/><text x="64.1634%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="63.9134%" y="453" width="0.0802%" height="15" fill="rgb(226,93,45)" fg:x="797" fg:w="1"/><text x="64.1634%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="63.9134%" y="437" width="0.0802%" height="15" fill="rgb(215,8,51)" fg:x="797" fg:w="1"/><text x="64.1634%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="64.0738%" y="389" width="0.1604%" height="15" fill="rgb(223,106,5)" fg:x="799" fg:w="2"/><text x="64.3238%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="64.1540%" y="373" width="0.0802%" height="15" fill="rgb(250,191,5)" fg:x="800" fg:w="1"/><text x="64.4040%" y="383.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="64.1540%" y="357" width="0.0802%" height="15" fill="rgb(242,132,44)" fg:x="800" fg:w="1"/><text x="64.4040%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="64.1540%" y="341" width="0.0802%" height="15" fill="rgb(251,152,29)" fg:x="800" fg:w="1"/><text x="64.4040%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="64.1540%" y="325" width="0.0802%" height="15" fill="rgb(218,179,5)" fg:x="800" fg:w="1"/><text x="64.4040%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="64.2342%" y="373" width="0.0802%" height="15" fill="rgb(227,67,19)" fg:x="801" fg:w="1"/><text x="64.4842%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="64.2342%" y="357" width="0.0802%" height="15" fill="rgb(233,119,31)" fg:x="801" fg:w="1"/><text x="64.4842%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.3144%" y="229" width="0.0802%" height="15" fill="rgb(241,120,22)" fg:x="802" fg:w="1"/><text x="64.5644%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.3144%" y="213" width="0.0802%" height="15" fill="rgb(224,102,30)" fg:x="802" fg:w="1"/><text x="64.5644%" y="223.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="64.0738%" y="405" width="0.4010%" height="15" fill="rgb(210,164,37)" fg:x="799" fg:w="5"/><text x="64.3238%" y="415.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="64.2342%" y="389" width="0.2406%" height="15" fill="rgb(226,191,16)" fg:x="801" fg:w="3"/><text x="64.4842%" y="399.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.16%)</title><rect x="64.3144%" y="373" width="0.1604%" height="15" fill="rgb(214,40,45)" fg:x="802" fg:w="2"/><text x="64.5644%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="64.3144%" y="357" width="0.1604%" height="15" fill="rgb(244,29,26)" fg:x="802" fg:w="2"/><text x="64.5644%" y="367.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="64.3144%" y="341" width="0.1604%" height="15" fill="rgb(216,16,5)" fg:x="802" fg:w="2"/><text x="64.5644%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="64.3144%" y="325" width="0.1604%" height="15" fill="rgb(249,76,35)" fg:x="802" fg:w="2"/><text x="64.5644%" y="335.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="64.3144%" y="309" width="0.1604%" height="15" fill="rgb(207,11,44)" fg:x="802" fg:w="2"/><text x="64.5644%" y="319.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="64.3144%" y="293" width="0.1604%" height="15" fill="rgb(228,190,49)" fg:x="802" fg:w="2"/><text x="64.5644%" y="303.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="64.3144%" y="277" width="0.1604%" height="15" fill="rgb(214,173,12)" fg:x="802" fg:w="2"/><text x="64.5644%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="64.3144%" y="261" width="0.1604%" height="15" fill="rgb(218,26,35)" fg:x="802" fg:w="2"/><text x="64.5644%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.3144%" y="245" width="0.1604%" height="15" fill="rgb(220,200,19)" fg:x="802" fg:w="2"/><text x="64.5644%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.3945%" y="229" width="0.0802%" height="15" fill="rgb(239,95,49)" fg:x="803" fg:w="1"/><text x="64.6445%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.3945%" y="213" width="0.0802%" height="15" fill="rgb(235,85,53)" fg:x="803" fg:w="1"/><text x="64.6445%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.3945%" y="197" width="0.0802%" height="15" fill="rgb(233,133,31)" fg:x="803" fg:w="1"/><text x="64.6445%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.3945%" y="181" width="0.0802%" height="15" fill="rgb(218,25,20)" fg:x="803" fg:w="1"/><text x="64.6445%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.3945%" y="165" width="0.0802%" height="15" fill="rgb(252,210,38)" fg:x="803" fg:w="1"/><text x="64.6445%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.3945%" y="149" width="0.0802%" height="15" fill="rgb(242,134,21)" fg:x="803" fg:w="1"/><text x="64.6445%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.3945%" y="133" width="0.0802%" height="15" fill="rgb(213,28,48)" fg:x="803" fg:w="1"/><text x="64.6445%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.3945%" y="117" width="0.0802%" height="15" fill="rgb(250,196,2)" fg:x="803" fg:w="1"/><text x="64.6445%" y="127.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.3945%" y="101" width="0.0802%" height="15" fill="rgb(227,5,17)" fg:x="803" fg:w="1"/><text x="64.6445%" y="111.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.3945%" y="85" width="0.0802%" height="15" fill="rgb(221,226,24)" fg:x="803" fg:w="1"/><text x="64.6445%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.3945%" y="69" width="0.0802%" height="15" fill="rgb(211,5,48)" fg:x="803" fg:w="1"/><text x="64.6445%" y="79.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (7 samples, 0.56%)</title><rect x="63.9936%" y="421" width="0.5613%" height="15" fill="rgb(219,150,6)" fg:x="798" fg:w="7"/><text x="64.2436%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="64.4747%" y="405" width="0.0802%" height="15" fill="rgb(251,46,16)" fg:x="804" fg:w="1"/><text x="64.7247%" y="415.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="64.4747%" y="389" width="0.0802%" height="15" fill="rgb(220,204,40)" fg:x="804" fg:w="1"/><text x="64.7247%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.4747%" y="373" width="0.0802%" height="15" fill="rgb(211,85,2)" fg:x="804" fg:w="1"/><text x="64.7247%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.4747%" y="357" width="0.0802%" height="15" fill="rgb(229,17,7)" fg:x="804" fg:w="1"/><text x="64.7247%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="64.4747%" y="341" width="0.0802%" height="15" fill="rgb(239,72,28)" fg:x="804" fg:w="1"/><text x="64.7247%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="64.4747%" y="325" width="0.0802%" height="15" fill="rgb(230,47,54)" fg:x="804" fg:w="1"/><text x="64.7247%" y="335.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="64.4747%" y="309" width="0.0802%" height="15" fill="rgb(214,50,8)" fg:x="804" fg:w="1"/><text x="64.7247%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.4747%" y="293" width="0.0802%" height="15" fill="rgb(216,198,43)" fg:x="804" fg:w="1"/><text x="64.7247%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.4747%" y="277" width="0.0802%" height="15" fill="rgb(234,20,35)" fg:x="804" fg:w="1"/><text x="64.7247%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.4747%" y="261" width="0.0802%" height="15" fill="rgb(254,45,19)" fg:x="804" fg:w="1"/><text x="64.7247%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.5549%" y="405" width="0.0802%" height="15" fill="rgb(219,14,44)" fg:x="805" fg:w="1"/><text x="64.8049%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (2 samples, 0.16%)</title><rect x="64.6351%" y="405" width="0.1604%" height="15" fill="rgb(217,220,26)" fg:x="806" fg:w="2"/><text x="64.8851%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (2 samples, 0.16%)</title><rect x="64.6351%" y="389" width="0.1604%" height="15" fill="rgb(213,158,28)" fg:x="806" fg:w="2"/><text x="64.8851%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="64.6351%" y="373" width="0.1604%" height="15" fill="rgb(252,51,52)" fg:x="806" fg:w="2"/><text x="64.8851%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.8757%" y="373" width="0.0802%" height="15" fill="rgb(246,89,16)" fg:x="809" fg:w="1"/><text x="65.1257%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.8757%" y="357" width="0.0802%" height="15" fill="rgb(216,158,49)" fg:x="809" fg:w="1"/><text x="65.1257%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.8757%" y="341" width="0.0802%" height="15" fill="rgb(236,107,19)" fg:x="809" fg:w="1"/><text x="65.1257%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.8757%" y="325" width="0.0802%" height="15" fill="rgb(228,185,30)" fg:x="809" fg:w="1"/><text x="65.1257%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.8757%" y="309" width="0.0802%" height="15" fill="rgb(246,134,8)" fg:x="809" fg:w="1"/><text x="65.1257%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.8757%" y="293" width="0.0802%" height="15" fill="rgb(214,143,50)" fg:x="809" fg:w="1"/><text x="65.1257%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.8757%" y="277" width="0.0802%" height="15" fill="rgb(228,75,8)" fg:x="809" fg:w="1"/><text x="65.1257%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.8757%" y="261" width="0.0802%" height="15" fill="rgb(207,175,4)" fg:x="809" fg:w="1"/><text x="65.1257%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.8757%" y="245" width="0.0802%" height="15" fill="rgb(205,108,24)" fg:x="809" fg:w="1"/><text x="65.1257%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.8757%" y="229" width="0.0802%" height="15" fill="rgb(244,120,49)" fg:x="809" fg:w="1"/><text x="65.1257%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.8757%" y="213" width="0.0802%" height="15" fill="rgb(223,47,38)" fg:x="809" fg:w="1"/><text x="65.1257%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.8757%" y="197" width="0.0802%" height="15" fill="rgb(229,179,11)" fg:x="809" fg:w="1"/><text x="65.1257%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.8757%" y="181" width="0.0802%" height="15" fill="rgb(231,122,1)" fg:x="809" fg:w="1"/><text x="65.1257%" y="191.50"></text></g><g><title>kernel::model::EntityKey::new (1 samples, 0.08%)</title><rect x="65.1163%" y="277" width="0.0802%" height="15" fill="rgb(245,119,9)" fg:x="812" fg:w="1"/><text x="65.3663%" y="287.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="65.1163%" y="261" width="0.0802%" height="15" fill="rgb(241,163,25)" fg:x="812" fg:w="1"/><text x="65.3663%" y="271.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="65.1163%" y="245" width="0.0802%" height="15" fill="rgb(217,214,3)" fg:x="812" fg:w="1"/><text x="65.3663%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.1965%" y="165" width="0.0802%" height="15" fill="rgb(240,86,28)" fg:x="813" fg:w="1"/><text x="65.4465%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.1965%" y="149" width="0.0802%" height="15" fill="rgb(215,47,9)" fg:x="813" fg:w="1"/><text x="65.4465%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="65.1965%" y="133" width="0.0802%" height="15" fill="rgb(252,25,45)" fg:x="813" fg:w="1"/><text x="65.4465%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.2767%" y="149" width="0.0802%" height="15" fill="rgb(251,164,9)" fg:x="814" fg:w="1"/><text x="65.5267%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.2767%" y="133" width="0.0802%" height="15" fill="rgb(233,194,0)" fg:x="814" fg:w="1"/><text x="65.5267%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.2767%" y="117" width="0.0802%" height="15" fill="rgb(249,111,24)" fg:x="814" fg:w="1"/><text x="65.5267%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.2767%" y="101" width="0.0802%" height="15" fill="rgb(250,223,3)" fg:x="814" fg:w="1"/><text x="65.5267%" y="111.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.2767%" y="85" width="0.0802%" height="15" fill="rgb(236,178,37)" fg:x="814" fg:w="1"/><text x="65.5267%" y="95.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.2767%" y="69" width="0.0802%" height="15" fill="rgb(241,158,50)" fg:x="814" fg:w="1"/><text x="65.5267%" y="79.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="65.2767%" y="53" width="0.0802%" height="15" fill="rgb(213,121,41)" fg:x="814" fg:w="1"/><text x="65.5267%" y="63.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3569%" y="149" width="0.0802%" height="15" fill="rgb(240,92,3)" fg:x="815" fg:w="1"/><text x="65.6069%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="65.1965%" y="197" width="0.4010%" height="15" fill="rgb(205,123,3)" fg:x="813" fg:w="5"/><text x="65.4465%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="65.1965%" y="181" width="0.4010%" height="15" fill="rgb(205,97,47)" fg:x="813" fg:w="5"/><text x="65.4465%" y="191.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="65.2767%" y="165" width="0.3208%" height="15" fill="rgb(247,152,14)" fg:x="814" fg:w="4"/><text x="65.5267%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.4370%" y="149" width="0.1604%" height="15" fill="rgb(248,195,53)" fg:x="816" fg:w="2"/><text x="65.6870%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.4370%" y="133" width="0.1604%" height="15" fill="rgb(226,201,16)" fg:x="816" fg:w="2"/><text x="65.6870%" y="143.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="65.5172%" y="117" width="0.0802%" height="15" fill="rgb(205,98,0)" fg:x="817" fg:w="1"/><text x="65.7672%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="65.5172%" y="101" width="0.0802%" height="15" fill="rgb(214,191,48)" fg:x="817" fg:w="1"/><text x="65.7672%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.5172%" y="85" width="0.0802%" height="15" fill="rgb(237,112,39)" fg:x="817" fg:w="1"/><text x="65.7672%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.5172%" y="69" width="0.0802%" height="15" fill="rgb(247,203,27)" fg:x="817" fg:w="1"/><text x="65.7672%" y="79.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (6 samples, 0.48%)</title><rect x="65.1965%" y="261" width="0.4812%" height="15" fill="rgb(235,124,28)" fg:x="813" fg:w="6"/><text x="65.4465%" y="271.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (6 samples, 0.48%)</title><rect x="65.1965%" y="245" width="0.4812%" height="15" fill="rgb(208,207,46)" fg:x="813" fg:w="6"/><text x="65.4465%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="65.1965%" y="229" width="0.4812%" height="15" fill="rgb(234,176,4)" fg:x="813" fg:w="6"/><text x="65.4465%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="65.1965%" y="213" width="0.4812%" height="15" fill="rgb(230,133,28)" fg:x="813" fg:w="6"/><text x="65.4465%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.5974%" y="197" width="0.0802%" height="15" fill="rgb(211,137,40)" fg:x="818" fg:w="1"/><text x="65.8474%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.5974%" y="181" width="0.0802%" height="15" fill="rgb(254,35,13)" fg:x="818" fg:w="1"/><text x="65.8474%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.5974%" y="165" width="0.0802%" height="15" fill="rgb(225,49,51)" fg:x="818" fg:w="1"/><text x="65.8474%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.5974%" y="149" width="0.0802%" height="15" fill="rgb(251,10,15)" fg:x="818" fg:w="1"/><text x="65.8474%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.5974%" y="133" width="0.0802%" height="15" fill="rgb(228,207,15)" fg:x="818" fg:w="1"/><text x="65.8474%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.5974%" y="117" width="0.0802%" height="15" fill="rgb(241,99,19)" fg:x="818" fg:w="1"/><text x="65.8474%" y="127.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (10 samples, 0.80%)</title><rect x="64.9559%" y="373" width="0.8019%" height="15" fill="rgb(207,104,49)" fg:x="810" fg:w="10"/><text x="65.2059%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (10 samples, 0.80%)</title><rect x="64.9559%" y="357" width="0.8019%" height="15" fill="rgb(234,99,18)" fg:x="810" fg:w="10"/><text x="65.2059%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="64.9559%" y="341" width="0.8019%" height="15" fill="rgb(213,191,49)" fg:x="810" fg:w="10"/><text x="65.2059%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.80%)</title><rect x="64.9559%" y="325" width="0.8019%" height="15" fill="rgb(210,226,19)" fg:x="810" fg:w="10"/><text x="65.2059%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (10 samples, 0.80%)</title><rect x="64.9559%" y="309" width="0.8019%" height="15" fill="rgb(229,97,18)" fg:x="810" fg:w="10"/><text x="65.2059%" y="319.50"></text></g><g><title>engine::internal::Entities::prepare_entity (9 samples, 0.72%)</title><rect x="65.0361%" y="293" width="0.7217%" height="15" fill="rgb(211,167,15)" fg:x="811" fg:w="9"/><text x="65.2861%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity (7 samples, 0.56%)</title><rect x="65.1965%" y="277" width="0.5613%" height="15" fill="rgb(210,169,34)" fg:x="813" fg:w="7"/><text x="65.4465%" y="287.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="65.6776%" y="261" width="0.0802%" height="15" fill="rgb(241,121,31)" fg:x="819" fg:w="1"/><text x="65.9276%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.6776%" y="245" width="0.0802%" height="15" fill="rgb(232,40,11)" fg:x="819" fg:w="1"/><text x="65.9276%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.6776%" y="229" width="0.0802%" height="15" fill="rgb(205,86,26)" fg:x="819" fg:w="1"/><text x="65.9276%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.6776%" y="213" width="0.0802%" height="15" fill="rgb(231,126,28)" fg:x="819" fg:w="1"/><text x="65.9276%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.6776%" y="197" width="0.0802%" height="15" fill="rgb(219,221,18)" fg:x="819" fg:w="1"/><text x="65.9276%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.6776%" y="181" width="0.0802%" height="15" fill="rgb(211,40,0)" fg:x="819" fg:w="1"/><text x="65.9276%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.6776%" y="165" width="0.0802%" height="15" fill="rgb(239,85,43)" fg:x="819" fg:w="1"/><text x="65.9276%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.6776%" y="149" width="0.0802%" height="15" fill="rgb(231,55,21)" fg:x="819" fg:w="1"/><text x="65.9276%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.6776%" y="133" width="0.0802%" height="15" fill="rgb(225,184,43)" fg:x="819" fg:w="1"/><text x="65.9276%" y="143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.6776%" y="117" width="0.0802%" height="15" fill="rgb(251,158,41)" fg:x="819" fg:w="1"/><text x="65.9276%" y="127.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.6776%" y="101" width="0.0802%" height="15" fill="rgb(234,159,37)" fg:x="819" fg:w="1"/><text x="65.9276%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.6776%" y="85" width="0.0802%" height="15" fill="rgb(216,204,22)" fg:x="819" fg:w="1"/><text x="65.9276%" y="95.50"></text></g><g><title>plugins_core::tools::get_contained_keys (16 samples, 1.28%)</title><rect x="64.5549%" y="421" width="1.2831%" height="15" fill="rgb(214,17,3)" fg:x="805" fg:w="16"/><text x="64.8049%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::scope (13 samples, 1.04%)</title><rect x="64.7955%" y="405" width="1.0425%" height="15" fill="rgb(212,111,17)" fg:x="808" fg:w="13"/><text x="65.0455%" y="415.50"></text></g><g><title>kernel::model::Entity::load_scope (13 samples, 1.04%)</title><rect x="64.7955%" y="389" width="1.0425%" height="15" fill="rgb(221,157,24)" fg:x="808" fg:w="13"/><text x="65.0455%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.7578%" y="373" width="0.0802%" height="15" fill="rgb(252,16,13)" fg:x="820" fg:w="1"/><text x="66.0078%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.7578%" y="357" width="0.0802%" height="15" fill="rgb(221,62,2)" fg:x="820" fg:w="1"/><text x="66.0078%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.8380%" y="373" width="0.0802%" height="15" fill="rgb(247,87,22)" fg:x="821" fg:w="1"/><text x="66.0880%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 2.00%)</title><rect x="63.9936%" y="453" width="2.0048%" height="15" fill="rgb(215,73,9)" fg:x="798" fg:w="25"/><text x="64.2436%" y="463.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (25 samples, 2.00%)</title><rect x="63.9936%" y="437" width="2.0048%" height="15" fill="rgb(207,175,33)" fg:x="798" fg:w="25"/><text x="64.2436%" y="447.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="65.8380%" y="421" width="0.1604%" height="15" fill="rgb(243,129,54)" fg:x="821" fg:w="2"/><text x="66.0880%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="65.8380%" y="405" width="0.1604%" height="15" fill="rgb(227,119,45)" fg:x="821" fg:w="2"/><text x="66.0880%" y="415.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="65.8380%" y="389" width="0.1604%" height="15" fill="rgb(205,109,36)" fg:x="821" fg:w="2"/><text x="66.0880%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.9182%" y="373" width="0.0802%" height="15" fill="rgb(205,6,39)" fg:x="822" fg:w="1"/><text x="66.1682%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.9182%" y="357" width="0.0802%" height="15" fill="rgb(221,32,16)" fg:x="822" fg:w="1"/><text x="66.1682%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.9182%" y="341" width="0.0802%" height="15" fill="rgb(228,144,50)" fg:x="822" fg:w="1"/><text x="66.1682%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.9182%" y="325" width="0.0802%" height="15" fill="rgb(229,201,53)" fg:x="822" fg:w="1"/><text x="66.1682%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="65.9182%" y="309" width="0.0802%" height="15" fill="rgb(249,153,27)" fg:x="822" fg:w="1"/><text x="66.1682%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="65.9182%" y="293" width="0.0802%" height="15" fill="rgb(227,106,25)" fg:x="822" fg:w="1"/><text x="66.1682%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.9182%" y="277" width="0.0802%" height="15" fill="rgb(230,65,29)" fg:x="822" fg:w="1"/><text x="66.1682%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.0786%" y="405" width="0.0802%" height="15" fill="rgb(221,57,46)" fg:x="824" fg:w="1"/><text x="66.3286%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.0786%" y="389" width="0.0802%" height="15" fill="rgb(229,161,17)" fg:x="824" fg:w="1"/><text x="66.3286%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.0786%" y="373" width="0.0802%" height="15" fill="rgb(222,213,11)" fg:x="824" fg:w="1"/><text x="66.3286%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.0786%" y="357" width="0.0802%" height="15" fill="rgb(235,35,13)" fg:x="824" fg:w="1"/><text x="66.3286%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.0786%" y="341" width="0.0802%" height="15" fill="rgb(233,158,34)" fg:x="824" fg:w="1"/><text x="66.3286%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.0786%" y="325" width="0.0802%" height="15" fill="rgb(215,151,48)" fg:x="824" fg:w="1"/><text x="66.3286%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.0786%" y="309" width="0.0802%" height="15" fill="rgb(229,84,14)" fg:x="824" fg:w="1"/><text x="66.3286%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.0786%" y="293" width="0.0802%" height="15" fill="rgb(229,68,14)" fg:x="824" fg:w="1"/><text x="66.3286%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.0786%" y="277" width="0.0802%" height="15" fill="rgb(243,106,26)" fg:x="824" fg:w="1"/><text x="66.3286%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.0786%" y="261" width="0.0802%" height="15" fill="rgb(206,45,38)" fg:x="824" fg:w="1"/><text x="66.3286%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.0786%" y="245" width="0.0802%" height="15" fill="rgb(226,6,15)" fg:x="824" fg:w="1"/><text x="66.3286%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.0786%" y="229" width="0.0802%" height="15" fill="rgb(232,22,54)" fg:x="824" fg:w="1"/><text x="66.3286%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.1588%" y="373" width="0.0802%" height="15" fill="rgb(229,222,32)" fg:x="825" fg:w="1"/><text x="66.4088%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.1588%" y="357" width="0.0802%" height="15" fill="rgb(228,62,29)" fg:x="825" fg:w="1"/><text x="66.4088%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.1588%" y="341" width="0.0802%" height="15" fill="rgb(251,103,34)" fg:x="825" fg:w="1"/><text x="66.4088%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.1588%" y="325" width="0.0802%" height="15" fill="rgb(233,12,30)" fg:x="825" fg:w="1"/><text x="66.4088%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.1588%" y="309" width="0.0802%" height="15" fill="rgb(238,52,0)" fg:x="825" fg:w="1"/><text x="66.4088%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.1588%" y="293" width="0.0802%" height="15" fill="rgb(223,98,5)" fg:x="825" fg:w="1"/><text x="66.4088%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.1588%" y="277" width="0.0802%" height="15" fill="rgb(228,75,37)" fg:x="825" fg:w="1"/><text x="66.4088%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.1588%" y="261" width="0.0802%" height="15" fill="rgb(205,115,49)" fg:x="825" fg:w="1"/><text x="66.4088%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.1588%" y="245" width="0.0802%" height="15" fill="rgb(250,154,43)" fg:x="825" fg:w="1"/><text x="66.4088%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.1588%" y="229" width="0.0802%" height="15" fill="rgb(226,43,29)" fg:x="825" fg:w="1"/><text x="66.4088%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.1588%" y="213" width="0.0802%" height="15" fill="rgb(249,228,39)" fg:x="825" fg:w="1"/><text x="66.4088%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.1588%" y="197" width="0.0802%" height="15" fill="rgb(216,79,43)" fg:x="825" fg:w="1"/><text x="66.4088%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="66.1588%" y="405" width="0.1604%" height="15" fill="rgb(228,95,12)" fg:x="825" fg:w="2"/><text x="66.4088%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="66.1588%" y="389" width="0.1604%" height="15" fill="rgb(249,221,15)" fg:x="825" fg:w="2"/><text x="66.4088%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="66.2390%" y="373" width="0.0802%" height="15" fill="rgb(233,34,13)" fg:x="826" fg:w="1"/><text x="66.4890%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="66.2390%" y="357" width="0.0802%" height="15" fill="rgb(214,103,39)" fg:x="826" fg:w="1"/><text x="66.4890%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.2390%" y="341" width="0.0802%" height="15" fill="rgb(251,126,39)" fg:x="826" fg:w="1"/><text x="66.4890%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="66.2390%" y="325" width="0.0802%" height="15" fill="rgb(214,216,36)" fg:x="826" fg:w="1"/><text x="66.4890%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="66.2390%" y="309" width="0.0802%" height="15" fill="rgb(220,221,8)" fg:x="826" fg:w="1"/><text x="66.4890%" y="319.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="66.2390%" y="293" width="0.0802%" height="15" fill="rgb(240,216,3)" fg:x="826" fg:w="1"/><text x="66.4890%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.2390%" y="277" width="0.0802%" height="15" fill="rgb(232,218,17)" fg:x="826" fg:w="1"/><text x="66.4890%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.2390%" y="261" width="0.0802%" height="15" fill="rgb(229,163,45)" fg:x="826" fg:w="1"/><text x="66.4890%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.2390%" y="245" width="0.0802%" height="15" fill="rgb(231,110,42)" fg:x="826" fg:w="1"/><text x="66.4890%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="66.2390%" y="229" width="0.0802%" height="15" fill="rgb(208,170,48)" fg:x="826" fg:w="1"/><text x="66.4890%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="66.2390%" y="213" width="0.0802%" height="15" fill="rgb(239,116,25)" fg:x="826" fg:w="1"/><text x="66.4890%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="66.2390%" y="197" width="0.0802%" height="15" fill="rgb(219,200,50)" fg:x="826" fg:w="1"/><text x="66.4890%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="66.2390%" y="181" width="0.0802%" height="15" fill="rgb(245,200,0)" fg:x="826" fg:w="1"/><text x="66.4890%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="66.2390%" y="165" width="0.0802%" height="15" fill="rgb(245,119,33)" fg:x="826" fg:w="1"/><text x="66.4890%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="66.2390%" y="149" width="0.0802%" height="15" fill="rgb(231,125,12)" fg:x="826" fg:w="1"/><text x="66.4890%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.2390%" y="133" width="0.0802%" height="15" fill="rgb(216,96,41)" fg:x="826" fg:w="1"/><text x="66.4890%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="66.2390%" y="117" width="0.0802%" height="15" fill="rgb(248,43,45)" fg:x="826" fg:w="1"/><text x="66.4890%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.2390%" y="101" width="0.0802%" height="15" fill="rgb(217,222,7)" fg:x="826" fg:w="1"/><text x="66.4890%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="66.2390%" y="85" width="0.0802%" height="15" fill="rgb(233,28,6)" fg:x="826" fg:w="1"/><text x="66.4890%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="66.2390%" y="69" width="0.0802%" height="15" fill="rgb(231,218,15)" fg:x="826" fg:w="1"/><text x="66.4890%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="66.2390%" y="53" width="0.0802%" height="15" fill="rgb(226,171,48)" fg:x="826" fg:w="1"/><text x="66.4890%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.2390%" y="37" width="0.0802%" height="15" fill="rgb(235,201,9)" fg:x="826" fg:w="1"/><text x="66.4890%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="66.6399%" y="213" width="0.3208%" height="15" fill="rgb(217,80,15)" fg:x="831" fg:w="4"/><text x="66.8899%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="66.7201%" y="197" width="0.2406%" height="15" fill="rgb(219,152,8)" fg:x="832" fg:w="3"/><text x="66.9701%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.8805%" y="181" width="0.0802%" height="15" fill="rgb(243,107,38)" fg:x="834" fg:w="1"/><text x="67.1305%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="66.8805%" y="165" width="0.0802%" height="15" fill="rgb(231,17,5)" fg:x="834" fg:w="1"/><text x="67.1305%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="66.6399%" y="229" width="0.4812%" height="15" fill="rgb(209,25,54)" fg:x="831" fg:w="6"/><text x="66.8899%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="66.9607%" y="213" width="0.1604%" height="15" fill="rgb(219,0,2)" fg:x="835" fg:w="2"/><text x="67.2107%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.0409%" y="197" width="0.0802%" height="15" fill="rgb(246,9,5)" fg:x="836" fg:w="1"/><text x="67.2909%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.56%)</title><rect x="66.6399%" y="261" width="0.5613%" height="15" fill="rgb(226,159,4)" fg:x="831" fg:w="7"/><text x="66.8899%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.56%)</title><rect x="66.6399%" y="245" width="0.5613%" height="15" fill="rgb(219,175,34)" fg:x="831" fg:w="7"/><text x="66.8899%" y="255.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.1211%" y="229" width="0.0802%" height="15" fill="rgb(236,10,46)" fg:x="837" fg:w="1"/><text x="67.3711%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="67.1211%" y="213" width="0.0802%" height="15" fill="rgb(240,211,16)" fg:x="837" fg:w="1"/><text x="67.3711%" y="223.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="67.1211%" y="197" width="0.0802%" height="15" fill="rgb(205,3,43)" fg:x="837" fg:w="1"/><text x="67.3711%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.1211%" y="181" width="0.0802%" height="15" fill="rgb(245,7,22)" fg:x="837" fg:w="1"/><text x="67.3711%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="67.1211%" y="165" width="0.0802%" height="15" fill="rgb(239,132,32)" fg:x="837" fg:w="1"/><text x="67.3711%" y="175.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="67.1211%" y="149" width="0.0802%" height="15" fill="rgb(228,202,34)" fg:x="837" fg:w="1"/><text x="67.3711%" y="159.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (9 samples, 0.72%)</title><rect x="66.5597%" y="293" width="0.7217%" height="15" fill="rgb(254,200,22)" fg:x="830" fg:w="9"/><text x="66.8097%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="66.6399%" y="277" width="0.6415%" height="15" fill="rgb(219,10,39)" fg:x="831" fg:w="8"/><text x="66.8899%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="67.2013%" y="261" width="0.0802%" height="15" fill="rgb(226,210,39)" fg:x="838" fg:w="1"/><text x="67.4513%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2013%" y="245" width="0.0802%" height="15" fill="rgb(208,219,16)" fg:x="838" fg:w="1"/><text x="67.4513%" y="255.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (13 samples, 1.04%)</title><rect x="66.3994%" y="341" width="1.0425%" height="15" fill="rgb(216,158,51)" fg:x="828" fg:w="13"/><text x="66.6494%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (12 samples, 0.96%)</title><rect x="66.4796%" y="325" width="0.9623%" height="15" fill="rgb(233,14,44)" fg:x="829" fg:w="12"/><text x="66.7296%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.96%)</title><rect x="66.4796%" y="309" width="0.9623%" height="15" fill="rgb(237,97,39)" fg:x="829" fg:w="12"/><text x="66.7296%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="67.2815%" y="293" width="0.1604%" height="15" fill="rgb(218,198,43)" fg:x="839" fg:w="2"/><text x="67.5315%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.3617%" y="277" width="0.0802%" height="15" fill="rgb(231,104,20)" fg:x="840" fg:w="1"/><text x="67.6117%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.28%)</title><rect x="66.3192%" y="357" width="1.2831%" height="15" fill="rgb(254,36,13)" fg:x="827" fg:w="16"/><text x="66.5692%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="67.4419%" y="341" width="0.1604%" height="15" fill="rgb(248,14,50)" fg:x="841" fg:w="2"/><text x="67.6919%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (17 samples, 1.36%)</title><rect x="66.3192%" y="389" width="1.3633%" height="15" fill="rgb(217,107,29)" fg:x="827" fg:w="17"/><text x="66.5692%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (17 samples, 1.36%)</title><rect x="66.3192%" y="373" width="1.3633%" height="15" fill="rgb(251,169,33)" fg:x="827" fg:w="17"/><text x="66.5692%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="67.6022%" y="357" width="0.0802%" height="15" fill="rgb(217,108,32)" fg:x="843" fg:w="1"/><text x="67.8522%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7626%" y="341" width="0.0802%" height="15" fill="rgb(219,66,42)" fg:x="845" fg:w="1"/><text x="68.0126%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.8428%" y="341" width="0.0802%" height="15" fill="rgb(206,180,7)" fg:x="846" fg:w="1"/><text x="68.0928%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.9230%" y="277" width="0.0802%" height="15" fill="rgb(208,226,31)" fg:x="847" fg:w="1"/><text x="68.1730%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9230%" y="261" width="0.0802%" height="15" fill="rgb(218,26,49)" fg:x="847" fg:w="1"/><text x="68.1730%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.0032%" y="277" width="0.0802%" height="15" fill="rgb(233,197,48)" fg:x="848" fg:w="1"/><text x="68.2532%" y="287.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="68.0032%" y="261" width="0.0802%" height="15" fill="rgb(252,181,51)" fg:x="848" fg:w="1"/><text x="68.2532%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.0032%" y="245" width="0.0802%" height="15" fill="rgb(253,90,19)" fg:x="848" fg:w="1"/><text x="68.2532%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.0032%" y="229" width="0.0802%" height="15" fill="rgb(215,171,30)" fg:x="848" fg:w="1"/><text x="68.2532%" y="239.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (3 samples, 0.24%)</title><rect x="67.9230%" y="341" width="0.2406%" height="15" fill="rgb(214,222,9)" fg:x="847" fg:w="3"/><text x="68.1730%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="67.9230%" y="325" width="0.2406%" height="15" fill="rgb(223,3,22)" fg:x="847" fg:w="3"/><text x="68.1730%" y="335.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="67.9230%" y="309" width="0.2406%" height="15" fill="rgb(225,196,46)" fg:x="847" fg:w="3"/><text x="68.1730%" y="319.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (3 samples, 0.24%)</title><rect x="67.9230%" y="293" width="0.2406%" height="15" fill="rgb(209,110,37)" fg:x="847" fg:w="3"/><text x="68.1730%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.0834%" y="277" width="0.0802%" height="15" fill="rgb(249,89,12)" fg:x="849" fg:w="1"/><text x="68.3334%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.1636%" y="325" width="0.0802%" height="15" fill="rgb(226,27,33)" fg:x="850" fg:w="1"/><text x="68.4136%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.1636%" y="309" width="0.0802%" height="15" fill="rgb(213,82,22)" fg:x="850" fg:w="1"/><text x="68.4136%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1636%" y="293" width="0.0802%" height="15" fill="rgb(248,140,0)" fg:x="850" fg:w="1"/><text x="68.4136%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.2438%" y="261" width="0.0802%" height="15" fill="rgb(228,106,3)" fg:x="851" fg:w="1"/><text x="68.4938%" y="271.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.2438%" y="245" width="0.0802%" height="15" fill="rgb(209,23,37)" fg:x="851" fg:w="1"/><text x="68.4938%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.2438%" y="229" width="0.0802%" height="15" fill="rgb(241,93,50)" fg:x="851" fg:w="1"/><text x="68.4938%" y="239.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="68.2438%" y="293" width="0.2406%" height="15" fill="rgb(253,46,43)" fg:x="851" fg:w="3"/><text x="68.4938%" y="303.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="68.2438%" y="277" width="0.2406%" height="15" fill="rgb(226,206,43)" fg:x="851" fg:w="3"/><text x="68.4938%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.3240%" y="261" width="0.1604%" height="15" fill="rgb(217,54,7)" fg:x="852" fg:w="2"/><text x="68.5740%" y="271.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (29 samples, 2.33%)</title><rect x="66.3192%" y="405" width="2.3256%" height="15" fill="rgb(223,5,52)" fg:x="827" fg:w="29"/><text x="66.5692%" y="415.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (12 samples, 0.96%)</title><rect x="67.6824%" y="389" width="0.9623%" height="15" fill="rgb(206,52,46)" fg:x="844" fg:w="12"/><text x="67.9324%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="67.6824%" y="373" width="0.9623%" height="15" fill="rgb(253,136,11)" fg:x="844" fg:w="12"/><text x="67.9324%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.96%)</title><rect x="67.6824%" y="357" width="0.9623%" height="15" fill="rgb(208,106,33)" fg:x="844" fg:w="12"/><text x="67.9324%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="68.1636%" y="341" width="0.4812%" height="15" fill="rgb(206,54,4)" fg:x="850" fg:w="6"/><text x="68.4136%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (5 samples, 0.40%)</title><rect x="68.2438%" y="325" width="0.4010%" height="15" fill="rgb(213,3,15)" fg:x="851" fg:w="5"/><text x="68.4938%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="68.2438%" y="309" width="0.4010%" height="15" fill="rgb(252,211,39)" fg:x="851" fg:w="5"/><text x="68.4938%" y="319.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.4844%" y="293" width="0.1604%" height="15" fill="rgb(223,6,36)" fg:x="854" fg:w="2"/><text x="68.7344%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.4844%" y="277" width="0.1604%" height="15" fill="rgb(252,169,45)" fg:x="854" fg:w="2"/><text x="68.7344%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5646%" y="261" width="0.0802%" height="15" fill="rgb(212,48,26)" fg:x="855" fg:w="1"/><text x="68.8146%" y="271.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (60 samples, 4.81%)</title><rect x="63.9134%" y="485" width="4.8115%" height="15" fill="rgb(251,102,48)" fg:x="797" fg:w="60"/><text x="64.1634%" y="495.50">&lt;plugi..</text></g><g><title>core::iter::adapters::try_process (59 samples, 4.73%)</title><rect x="63.9936%" y="469" width="4.7314%" height="15" fill="rgb(243,208,16)" fg:x="798" fg:w="59"/><text x="64.2436%" y="479.50">core::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (34 samples, 2.73%)</title><rect x="65.9984%" y="453" width="2.7265%" height="15" fill="rgb(219,96,24)" fg:x="823" fg:w="34"/><text x="66.2484%" y="463.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 2.73%)</title><rect x="65.9984%" y="437" width="2.7265%" height="15" fill="rgb(219,33,29)" fg:x="823" fg:w="34"/><text x="66.2484%" y="447.50">&lt;c..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (33 samples, 2.65%)</title><rect x="66.0786%" y="421" width="2.6464%" height="15" fill="rgb(223,176,5)" fg:x="824" fg:w="33"/><text x="66.3286%" y="431.50">pl..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="68.6447%" y="405" width="0.0802%" height="15" fill="rgb(228,140,14)" fg:x="856" fg:w="1"/><text x="68.8947%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6447%" y="389" width="0.0802%" height="15" fill="rgb(217,179,31)" fg:x="856" fg:w="1"/><text x="68.8947%" y="399.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (708 samples, 56.78%)</title><rect x="12.1091%" y="549" width="56.7763%" height="15" fill="rgb(230,9,30)" fg:x="151" fg:w="708"/><text x="12.3591%" y="559.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (72 samples, 5.77%)</title><rect x="63.1115%" y="533" width="5.7739%" height="15" fill="rgb(230,136,20)" fg:x="787" fg:w="72"/><text x="63.3615%" y="543.50">kernel:..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (72 samples, 5.77%)</title><rect x="63.1115%" y="517" width="5.7739%" height="15" fill="rgb(215,210,22)" fg:x="787" fg:w="72"/><text x="63.3615%" y="527.50">&lt;plugin..</text></g><g><title>plugins_rpc::querying::have_surroundings (64 samples, 5.13%)</title><rect x="63.7530%" y="501" width="5.1323%" height="15" fill="rgb(218,43,5)" fg:x="795" fg:w="64"/><text x="64.0030%" y="511.50">plugin..</text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.7249%" y="485" width="0.1604%" height="15" fill="rgb(216,11,5)" fg:x="857" fg:w="2"/><text x="68.9749%" y="495.50"></text></g><g><title>&lt;kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="68.8853%" y="421" width="0.0802%" height="15" fill="rgb(209,82,29)" fg:x="859" fg:w="1"/><text x="69.1353%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.9655%" y="341" width="0.0802%" height="15" fill="rgb(244,115,12)" fg:x="860" fg:w="1"/><text x="69.2155%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.9655%" y="325" width="0.0802%" height="15" fill="rgb(222,82,18)" fg:x="860" fg:w="1"/><text x="69.2155%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="68.9655%" y="309" width="0.0802%" height="15" fill="rgb(249,227,8)" fg:x="860" fg:w="1"/><text x="69.2155%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.9655%" y="373" width="0.1604%" height="15" fill="rgb(253,141,45)" fg:x="860" fg:w="2"/><text x="69.2155%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.9655%" y="357" width="0.1604%" height="15" fill="rgb(234,184,4)" fg:x="860" fg:w="2"/><text x="69.2155%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.0457%" y="341" width="0.0802%" height="15" fill="rgb(218,194,23)" fg:x="861" fg:w="1"/><text x="69.2957%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.0457%" y="325" width="0.0802%" height="15" fill="rgb(235,66,41)" fg:x="861" fg:w="1"/><text x="69.2957%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.1259%" y="341" width="0.0802%" height="15" fill="rgb(245,217,1)" fg:x="862" fg:w="1"/><text x="69.3759%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="69.1259%" y="325" width="0.0802%" height="15" fill="rgb(229,91,1)" fg:x="862" fg:w="1"/><text x="69.3759%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1259%" y="309" width="0.0802%" height="15" fill="rgb(207,101,30)" fg:x="862" fg:w="1"/><text x="69.3759%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.1259%" y="293" width="0.0802%" height="15" fill="rgb(223,82,49)" fg:x="862" fg:w="1"/><text x="69.3759%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="68.9655%" y="421" width="0.3208%" height="15" fill="rgb(218,167,17)" fg:x="860" fg:w="4"/><text x="69.2155%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="68.9655%" y="405" width="0.3208%" height="15" fill="rgb(208,103,14)" fg:x="860" fg:w="4"/><text x="69.2155%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="68.9655%" y="389" width="0.3208%" height="15" fill="rgb(238,20,8)" fg:x="860" fg:w="4"/><text x="69.2155%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.1259%" y="373" width="0.1604%" height="15" fill="rgb(218,80,54)" fg:x="862" fg:w="2"/><text x="69.3759%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.1259%" y="357" width="0.1604%" height="15" fill="rgb(240,144,17)" fg:x="862" fg:w="2"/><text x="69.3759%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2061%" y="341" width="0.0802%" height="15" fill="rgb(245,27,50)" fg:x="863" fg:w="1"/><text x="69.4561%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.2061%" y="325" width="0.0802%" height="15" fill="rgb(251,51,7)" fg:x="863" fg:w="1"/><text x="69.4561%" y="335.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (6 samples, 0.48%)</title><rect x="68.8853%" y="485" width="0.4812%" height="15" fill="rgb(245,217,29)" fg:x="859" fg:w="6"/><text x="69.1353%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (6 samples, 0.48%)</title><rect x="68.8853%" y="469" width="0.4812%" height="15" fill="rgb(221,176,29)" fg:x="859" fg:w="6"/><text x="69.1353%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="68.8853%" y="453" width="0.4812%" height="15" fill="rgb(212,180,24)" fg:x="859" fg:w="6"/><text x="69.1353%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="68.8853%" y="437" width="0.4812%" height="15" fill="rgb(254,24,2)" fg:x="859" fg:w="6"/><text x="69.1353%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2863%" y="421" width="0.0802%" height="15" fill="rgb(230,100,2)" fg:x="864" fg:w="1"/><text x="69.5363%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2863%" y="405" width="0.0802%" height="15" fill="rgb(219,142,25)" fg:x="864" fg:w="1"/><text x="69.5363%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4467%" y="437" width="0.0802%" height="15" fill="rgb(240,73,43)" fg:x="866" fg:w="1"/><text x="69.6967%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4467%" y="421" width="0.0802%" height="15" fill="rgb(214,114,15)" fg:x="866" fg:w="1"/><text x="69.6967%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="69.4467%" y="405" width="0.0802%" height="15" fill="rgb(207,130,4)" fg:x="866" fg:w="1"/><text x="69.6967%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.6071%" y="373" width="0.0802%" height="15" fill="rgb(221,25,40)" fg:x="868" fg:w="1"/><text x="69.8571%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6071%" y="357" width="0.0802%" height="15" fill="rgb(241,184,7)" fg:x="868" fg:w="1"/><text x="69.8571%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (11 samples, 0.88%)</title><rect x="68.8853%" y="533" width="0.8821%" height="15" fill="rgb(235,159,4)" fg:x="859" fg:w="11"/><text x="69.1353%" y="543.50"></text></g><g><title>engine::internal::Entities::prepare_entity (11 samples, 0.88%)</title><rect x="68.8853%" y="517" width="0.8821%" height="15" fill="rgb(214,87,48)" fg:x="859" fg:w="11"/><text x="69.1353%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity (11 samples, 0.88%)</title><rect x="68.8853%" y="501" width="0.8821%" height="15" fill="rgb(246,198,24)" fg:x="859" fg:w="11"/><text x="69.1353%" y="511.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="69.3665%" y="485" width="0.4010%" height="15" fill="rgb(209,66,40)" fg:x="865" fg:w="5"/><text x="69.6165%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="69.3665%" y="469" width="0.4010%" height="15" fill="rgb(233,147,39)" fg:x="865" fg:w="5"/><text x="69.6165%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="69.4467%" y="453" width="0.3208%" height="15" fill="rgb(231,145,52)" fg:x="866" fg:w="4"/><text x="69.6967%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="69.5269%" y="437" width="0.2406%" height="15" fill="rgb(206,20,26)" fg:x="867" fg:w="3"/><text x="69.7769%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.5269%" y="421" width="0.2406%" height="15" fill="rgb(238,220,4)" fg:x="867" fg:w="3"/><text x="69.7769%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.6071%" y="405" width="0.1604%" height="15" fill="rgb(252,195,42)" fg:x="868" fg:w="2"/><text x="69.8571%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.6071%" y="389" width="0.1604%" height="15" fill="rgb(209,10,6)" fg:x="868" fg:w="2"/><text x="69.8571%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6872%" y="373" width="0.0802%" height="15" fill="rgb(229,3,52)" fg:x="869" fg:w="1"/><text x="69.9372%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6872%" y="357" width="0.0802%" height="15" fill="rgb(253,49,37)" fg:x="869" fg:w="1"/><text x="69.9372%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6872%" y="341" width="0.0802%" height="15" fill="rgb(240,103,49)" fg:x="869" fg:w="1"/><text x="69.9372%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6872%" y="325" width="0.0802%" height="15" fill="rgb(250,182,30)" fg:x="869" fg:w="1"/><text x="69.9372%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6872%" y="309" width="0.0802%" height="15" fill="rgb(248,8,30)" fg:x="869" fg:w="1"/><text x="69.9372%" y="319.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (721 samples, 57.82%)</title><rect x="12.1091%" y="565" width="57.8188%" height="15" fill="rgb(237,120,30)" fg:x="151" fg:w="721"/><text x="12.3591%" y="575.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (13 samples, 1.04%)</title><rect x="68.8853%" y="549" width="1.0425%" height="15" fill="rgb(221,146,34)" fg:x="859" fg:w="13"/><text x="69.1353%" y="559.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="69.7674%" y="533" width="0.1604%" height="15" fill="rgb(242,55,13)" fg:x="870" fg:w="2"/><text x="70.0174%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="69.7674%" y="517" width="0.1604%" height="15" fill="rgb(242,112,31)" fg:x="870" fg:w="2"/><text x="70.0174%" y="527.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="69.7674%" y="501" width="0.1604%" height="15" fill="rgb(249,192,27)" fg:x="870" fg:w="2"/><text x="70.0174%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.8476%" y="485" width="0.0802%" height="15" fill="rgb(208,204,44)" fg:x="871" fg:w="1"/><text x="70.0976%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.8476%" y="469" width="0.0802%" height="15" fill="rgb(208,93,54)" fg:x="871" fg:w="1"/><text x="70.0976%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.8476%" y="453" width="0.0802%" height="15" fill="rgb(242,1,31)" fg:x="871" fg:w="1"/><text x="70.0976%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.8476%" y="437" width="0.0802%" height="15" fill="rgb(241,83,25)" fg:x="871" fg:w="1"/><text x="70.0976%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="69.8476%" y="421" width="0.0802%" height="15" fill="rgb(205,169,50)" fg:x="871" fg:w="1"/><text x="70.0976%" y="431.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="69.9278%" y="501" width="0.0802%" height="15" fill="rgb(239,186,37)" fg:x="872" fg:w="1"/><text x="70.1778%" y="511.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (723 samples, 57.98%)</title><rect x="12.1091%" y="597" width="57.9791%" height="15" fill="rgb(205,221,10)" fg:x="151" fg:w="723"/><text x="12.3591%" y="607.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (723 samples, 57.98%)</title><rect x="12.1091%" y="581" width="57.9791%" height="15" fill="rgb(218,196,15)" fg:x="151" fg:w="723"/><text x="12.3591%" y="591.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>std::time::Instant::elapsed (2 samples, 0.16%)</title><rect x="69.9278%" y="565" width="0.1604%" height="15" fill="rgb(218,196,35)" fg:x="872" fg:w="2"/><text x="70.1778%" y="575.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.16%)</title><rect x="69.9278%" y="549" width="0.1604%" height="15" fill="rgb(233,63,24)" fg:x="872" fg:w="2"/><text x="70.1778%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.16%)</title><rect x="69.9278%" y="533" width="0.1604%" height="15" fill="rgb(225,8,4)" fg:x="872" fg:w="2"/><text x="70.1778%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="69.9278%" y="517" width="0.1604%" height="15" fill="rgb(234,105,35)" fg:x="872" fg:w="2"/><text x="70.1778%" y="527.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="70.0080%" y="501" width="0.0802%" height="15" fill="rgb(236,21,32)" fg:x="873" fg:w="1"/><text x="70.2580%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (875 samples, 70.17%)</title><rect x="0.0000%" y="645" width="70.1684%" height="15" fill="rgb(228,109,6)" fg:x="0" fg:w="875"/><text x="0.2500%" y="655.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (875 samples, 70.17%)</title><rect x="0.0000%" y="629" width="70.1684%" height="15" fill="rgb(229,215,31)" fg:x="0" fg:w="875"/><text x="0.2500%" y="639.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (875 samples, 70.17%)</title><rect x="0.0000%" y="613" width="70.1684%" height="15" fill="rgb(221,52,54)" fg:x="0" fg:w="875"/><text x="0.2500%" y="623.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="70.0882%" y="597" width="0.0802%" height="15" fill="rgb(252,129,43)" fg:x="874" fg:w="1"/><text x="70.3382%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0882%" y="581" width="0.0802%" height="15" fill="rgb(248,183,27)" fg:x="874" fg:w="1"/><text x="70.3382%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.1684%" y="549" width="0.0802%" height="15" fill="rgb(250,0,22)" fg:x="875" fg:w="1"/><text x="70.4184%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.2486%" y="517" width="0.0802%" height="15" fill="rgb(213,166,10)" fg:x="876" fg:w="1"/><text x="70.4986%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="70.1684%" y="597" width="0.2406%" height="15" fill="rgb(207,163,36)" fg:x="875" fg:w="3"/><text x="70.4184%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (3 samples, 0.24%)</title><rect x="70.1684%" y="581" width="0.2406%" height="15" fill="rgb(208,122,22)" fg:x="875" fg:w="3"/><text x="70.4184%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="70.1684%" y="565" width="0.2406%" height="15" fill="rgb(207,104,49)" fg:x="875" fg:w="3"/><text x="70.4184%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="70.2486%" y="549" width="0.1604%" height="15" fill="rgb(248,211,50)" fg:x="876" fg:w="2"/><text x="70.4986%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.2486%" y="533" width="0.1604%" height="15" fill="rgb(217,13,45)" fg:x="876" fg:w="2"/><text x="70.4986%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3288%" y="517" width="0.0802%" height="15" fill="rgb(211,216,49)" fg:x="877" fg:w="1"/><text x="70.5788%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="70.4090%" y="517" width="0.1604%" height="15" fill="rgb(221,58,53)" fg:x="878" fg:w="2"/><text x="70.6590%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="70.4090%" y="501" width="0.1604%" height="15" fill="rgb(220,112,41)" fg:x="878" fg:w="2"/><text x="70.6590%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.4090%" y="485" width="0.1604%" height="15" fill="rgb(236,38,28)" fg:x="878" fg:w="2"/><text x="70.6590%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.4090%" y="469" width="0.1604%" height="15" fill="rgb(227,195,22)" fg:x="878" fg:w="2"/><text x="70.6590%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.4892%" y="453" width="0.0802%" height="15" fill="rgb(214,55,33)" fg:x="879" fg:w="1"/><text x="70.7392%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4892%" y="437" width="0.0802%" height="15" fill="rgb(248,80,13)" fg:x="879" fg:w="1"/><text x="70.7392%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4892%" y="421" width="0.0802%" height="15" fill="rgb(238,52,6)" fg:x="879" fg:w="1"/><text x="70.7392%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5694%" y="469" width="0.0802%" height="15" fill="rgb(224,198,47)" fg:x="880" fg:w="1"/><text x="70.8194%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5694%" y="453" width="0.0802%" height="15" fill="rgb(233,171,20)" fg:x="880" fg:w="1"/><text x="70.8194%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="70.5694%" y="437" width="0.0802%" height="15" fill="rgb(241,30,25)" fg:x="880" fg:w="1"/><text x="70.8194%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.6496%" y="437" width="0.0802%" height="15" fill="rgb(207,171,38)" fg:x="881" fg:w="1"/><text x="70.8996%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6496%" y="421" width="0.0802%" height="15" fill="rgb(234,70,1)" fg:x="881" fg:w="1"/><text x="70.8996%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (5 samples, 0.40%)</title><rect x="70.4090%" y="565" width="0.4010%" height="15" fill="rgb(232,178,18)" fg:x="878" fg:w="5"/><text x="70.6590%" y="575.50"></text></g><g><title>engine::internal::Entities::prepare_entity (5 samples, 0.40%)</title><rect x="70.4090%" y="549" width="0.4010%" height="15" fill="rgb(241,78,40)" fg:x="878" fg:w="5"/><text x="70.6590%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="70.4090%" y="533" width="0.4010%" height="15" fill="rgb(222,35,25)" fg:x="878" fg:w="5"/><text x="70.6590%" y="543.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="70.5694%" y="517" width="0.2406%" height="15" fill="rgb(207,92,16)" fg:x="880" fg:w="3"/><text x="70.8194%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="70.5694%" y="501" width="0.2406%" height="15" fill="rgb(216,59,51)" fg:x="880" fg:w="3"/><text x="70.8194%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.5694%" y="485" width="0.2406%" height="15" fill="rgb(213,80,28)" fg:x="880" fg:w="3"/><text x="70.8194%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.6496%" y="469" width="0.1604%" height="15" fill="rgb(220,93,7)" fg:x="881" fg:w="2"/><text x="70.8996%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.6496%" y="453" width="0.1604%" height="15" fill="rgb(225,24,44)" fg:x="881" fg:w="2"/><text x="70.8996%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.7298%" y="437" width="0.0802%" height="15" fill="rgb(243,74,40)" fg:x="882" fg:w="1"/><text x="70.9798%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.7298%" y="421" width="0.0802%" height="15" fill="rgb(228,39,7)" fg:x="882" fg:w="1"/><text x="70.9798%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.7298%" y="405" width="0.0802%" height="15" fill="rgb(227,79,8)" fg:x="882" fg:w="1"/><text x="70.9798%" y="415.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="70.8099%" y="485" width="0.0802%" height="15" fill="rgb(236,58,11)" fg:x="883" fg:w="1"/><text x="71.0599%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8099%" y="469" width="0.0802%" height="15" fill="rgb(249,63,35)" fg:x="883" fg:w="1"/><text x="71.0599%" y="479.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="70.8099%" y="501" width="0.1604%" height="15" fill="rgb(252,114,16)" fg:x="883" fg:w="2"/><text x="71.0599%" y="511.50"></text></g><g><title>pthread_rwlock_rdlock (1 samples, 0.08%)</title><rect x="70.8901%" y="485" width="0.0802%" height="15" fill="rgb(254,151,24)" fg:x="884" fg:w="1"/><text x="71.1401%" y="495.50"></text></g><g><title>__pthread_mutex_lock (1 samples, 0.08%)</title><rect x="70.9703%" y="453" width="0.0802%" height="15" fill="rgb(253,54,39)" fg:x="885" fg:w="1"/><text x="71.2203%" y="463.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="70.8099%" y="533" width="0.4812%" height="15" fill="rgb(243,25,45)" fg:x="883" fg:w="6"/><text x="71.0599%" y="543.50"></text></g><g><title>libloading::os::unix::Library::open (6 samples, 0.48%)</title><rect x="70.8099%" y="517" width="0.4812%" height="15" fill="rgb(234,134,9)" fg:x="883" fg:w="6"/><text x="71.0599%" y="527.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="70.9703%" y="501" width="0.3208%" height="15" fill="rgb(227,166,31)" fg:x="885" fg:w="4"/><text x="71.2203%" y="511.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="70.9703%" y="485" width="0.3208%" height="15" fill="rgb(245,143,41)" fg:x="885" fg:w="4"/><text x="71.2203%" y="495.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="70.9703%" y="469" width="0.3208%" height="15" fill="rgb(238,181,32)" fg:x="885" fg:w="4"/><text x="71.2203%" y="479.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="71.0505%" y="453" width="0.2406%" height="15" fill="rgb(224,113,18)" fg:x="886" fg:w="3"/><text x="71.3005%" y="463.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="71.0505%" y="437" width="0.2406%" height="15" fill="rgb(240,229,28)" fg:x="886" fg:w="3"/><text x="71.3005%" y="447.50"></text></g><g><title>engine::session::Session::initialize (7 samples, 0.56%)</title><rect x="70.8099%" y="565" width="0.5613%" height="15" fill="rgb(250,185,3)" fg:x="883" fg:w="7"/><text x="71.0599%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.56%)</title><rect x="70.8099%" y="549" width="0.5613%" height="15" fill="rgb(212,59,25)" fg:x="883" fg:w="7"/><text x="71.0599%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="71.2911%" y="533" width="0.0802%" height="15" fill="rgb(221,87,20)" fg:x="889" fg:w="1"/><text x="71.5411%" y="543.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="71.2911%" y="517" width="0.0802%" height="15" fill="rgb(213,74,28)" fg:x="889" fg:w="1"/><text x="71.5411%" y="527.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (13 samples, 1.04%)</title><rect x="70.4090%" y="597" width="1.0425%" height="15" fill="rgb(224,132,34)" fg:x="878" fg:w="13"/><text x="70.6590%" y="607.50"></text></g><g><title>engine::session::Session::new (13 samples, 1.04%)</title><rect x="70.4090%" y="581" width="1.0425%" height="15" fill="rgb(222,101,24)" fg:x="878" fg:w="13"/><text x="70.6590%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="71.3713%" y="565" width="0.0802%" height="15" fill="rgb(254,142,4)" fg:x="890" fg:w="1"/><text x="71.6213%" y="575.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="71.3713%" y="549" width="0.0802%" height="15" fill="rgb(230,229,49)" fg:x="890" fg:w="1"/><text x="71.6213%" y="559.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4515%" y="581" width="0.0802%" height="15" fill="rgb(238,70,47)" fg:x="891" fg:w="1"/><text x="71.7015%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4515%" y="565" width="0.0802%" height="15" fill="rgb(231,160,17)" fg:x="891" fg:w="1"/><text x="71.7015%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4515%" y="549" width="0.0802%" height="15" fill="rgb(218,68,53)" fg:x="891" fg:w="1"/><text x="71.7015%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.4515%" y="533" width="0.0802%" height="15" fill="rgb(236,111,10)" fg:x="891" fg:w="1"/><text x="71.7015%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.4515%" y="517" width="0.0802%" height="15" fill="rgb(224,34,41)" fg:x="891" fg:w="1"/><text x="71.7015%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.4515%" y="501" width="0.0802%" height="15" fill="rgb(241,118,19)" fg:x="891" fg:w="1"/><text x="71.7015%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.4515%" y="485" width="0.0802%" height="15" fill="rgb(238,129,25)" fg:x="891" fg:w="1"/><text x="71.7015%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.4515%" y="469" width="0.0802%" height="15" fill="rgb(238,22,31)" fg:x="891" fg:w="1"/><text x="71.7015%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.5317%" y="533" width="0.0802%" height="15" fill="rgb(222,174,48)" fg:x="892" fg:w="1"/><text x="71.7817%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.5317%" y="517" width="0.0802%" height="15" fill="rgb(206,152,40)" fg:x="892" fg:w="1"/><text x="71.7817%" y="527.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="71.5317%" y="501" width="0.0802%" height="15" fill="rgb(218,99,54)" fg:x="892" fg:w="1"/><text x="71.7817%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.6119%" y="501" width="0.0802%" height="15" fill="rgb(220,174,26)" fg:x="893" fg:w="1"/><text x="71.8619%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.6119%" y="485" width="0.0802%" height="15" fill="rgb(245,116,9)" fg:x="893" fg:w="1"/><text x="71.8619%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="71.6119%" y="517" width="0.1604%" height="15" fill="rgb(209,72,35)" fg:x="893" fg:w="2"/><text x="71.8619%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.6921%" y="501" width="0.0802%" height="15" fill="rgb(226,126,21)" fg:x="894" fg:w="1"/><text x="71.9421%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.6921%" y="485" width="0.0802%" height="15" fill="rgb(227,192,1)" fg:x="894" fg:w="1"/><text x="71.9421%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.6921%" y="469" width="0.0802%" height="15" fill="rgb(237,180,29)" fg:x="894" fg:w="1"/><text x="71.9421%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.6921%" y="453" width="0.0802%" height="15" fill="rgb(230,197,35)" fg:x="894" fg:w="1"/><text x="71.9421%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.6921%" y="437" width="0.0802%" height="15" fill="rgb(246,193,31)" fg:x="894" fg:w="1"/><text x="71.9421%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.6921%" y="421" width="0.0802%" height="15" fill="rgb(241,36,4)" fg:x="894" fg:w="1"/><text x="71.9421%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.6921%" y="405" width="0.0802%" height="15" fill="rgb(241,130,17)" fg:x="894" fg:w="1"/><text x="71.9421%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.6921%" y="389" width="0.0802%" height="15" fill="rgb(206,137,32)" fg:x="894" fg:w="1"/><text x="71.9421%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7723%" y="469" width="0.0802%" height="15" fill="rgb(237,228,51)" fg:x="895" fg:w="1"/><text x="72.0223%" y="479.50"></text></g><g><title>engine::session::Session::flush (5 samples, 0.40%)</title><rect x="71.5317%" y="581" width="0.4010%" height="15" fill="rgb(243,6,42)" fg:x="892" fg:w="5"/><text x="71.7817%" y="591.50"></text></g><g><title>engine::session::Session::save_entity_changes (5 samples, 0.40%)</title><rect x="71.5317%" y="565" width="0.4010%" height="15" fill="rgb(251,74,28)" fg:x="892" fg:w="5"/><text x="71.7817%" y="575.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (5 samples, 0.40%)</title><rect x="71.5317%" y="549" width="0.4010%" height="15" fill="rgb(218,20,49)" fg:x="892" fg:w="5"/><text x="71.7817%" y="559.50"></text></g><g><title>engine::session::Session::check_for_changes (4 samples, 0.32%)</title><rect x="71.6119%" y="533" width="0.3208%" height="15" fill="rgb(238,28,14)" fg:x="893" fg:w="4"/><text x="71.8619%" y="543.50"></text></g><g><title>kernel::compare::any_entity_changes (2 samples, 0.16%)</title><rect x="71.7723%" y="517" width="0.1604%" height="15" fill="rgb(229,40,46)" fg:x="895" fg:w="2"/><text x="72.0223%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="71.7723%" y="501" width="0.1604%" height="15" fill="rgb(244,195,20)" fg:x="895" fg:w="2"/><text x="72.0223%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="71.7723%" y="485" width="0.1604%" height="15" fill="rgb(253,56,35)" fg:x="895" fg:w="2"/><text x="72.0223%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.8524%" y="469" width="0.0802%" height="15" fill="rgb(210,149,44)" fg:x="896" fg:w="1"/><text x="72.1024%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="71.8524%" y="453" width="0.0802%" height="15" fill="rgb(240,135,12)" fg:x="896" fg:w="1"/><text x="72.1024%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.8524%" y="437" width="0.0802%" height="15" fill="rgb(251,24,50)" fg:x="896" fg:w="1"/><text x="72.1024%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.8524%" y="421" width="0.0802%" height="15" fill="rgb(243,200,47)" fg:x="896" fg:w="1"/><text x="72.1024%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.8524%" y="405" width="0.0802%" height="15" fill="rgb(224,166,26)" fg:x="896" fg:w="1"/><text x="72.1024%" y="415.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="71.9326%" y="581" width="0.0802%" height="15" fill="rgb(233,0,47)" fg:x="897" fg:w="1"/><text x="72.1826%" y="591.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="71.9326%" y="565" width="0.0802%" height="15" fill="rgb(253,80,5)" fg:x="897" fg:w="1"/><text x="72.1826%" y="575.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="71.9326%" y="549" width="0.0802%" height="15" fill="rgb(214,133,25)" fg:x="897" fg:w="1"/><text x="72.1826%" y="559.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="71.9326%" y="533" width="0.0802%" height="15" fill="rgb(209,27,14)" fg:x="897" fg:w="1"/><text x="72.1826%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.9326%" y="517" width="0.0802%" height="15" fill="rgb(219,102,51)" fg:x="897" fg:w="1"/><text x="72.1826%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.9326%" y="501" width="0.0802%" height="15" fill="rgb(237,18,16)" fg:x="897" fg:w="1"/><text x="72.1826%" y="511.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.0930%" y="565" width="0.0802%" height="15" fill="rgb(241,85,17)" fg:x="899" fg:w="1"/><text x="72.3430%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="72.1732%" y="565" width="0.0802%" height="15" fill="rgb(236,90,42)" fg:x="900" fg:w="1"/><text x="72.4232%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.1732%" y="549" width="0.0802%" height="15" fill="rgb(249,57,21)" fg:x="900" fg:w="1"/><text x="72.4232%" y="559.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="72.1732%" y="533" width="0.0802%" height="15" fill="rgb(243,12,36)" fg:x="900" fg:w="1"/><text x="72.4232%" y="543.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="72.1732%" y="517" width="0.0802%" height="15" fill="rgb(253,128,47)" fg:x="900" fg:w="1"/><text x="72.4232%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="72.1732%" y="501" width="0.0802%" height="15" fill="rgb(207,33,20)" fg:x="900" fg:w="1"/><text x="72.4232%" y="511.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="72.1732%" y="485" width="0.0802%" height="15" fill="rgb(233,215,35)" fg:x="900" fg:w="1"/><text x="72.4232%" y="495.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="72.1732%" y="469" width="0.0802%" height="15" fill="rgb(249,188,52)" fg:x="900" fg:w="1"/><text x="72.4232%" y="479.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="72.2534%" y="533" width="0.0802%" height="15" fill="rgb(225,12,32)" fg:x="901" fg:w="1"/><text x="72.5034%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="72.3336%" y="485" width="0.0802%" height="15" fill="rgb(247,98,14)" fg:x="902" fg:w="1"/><text x="72.5836%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.3336%" y="469" width="0.0802%" height="15" fill="rgb(247,219,48)" fg:x="902" fg:w="1"/><text x="72.5836%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.3336%" y="453" width="0.0802%" height="15" fill="rgb(253,60,48)" fg:x="902" fg:w="1"/><text x="72.5836%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.3336%" y="437" width="0.0802%" height="15" fill="rgb(245,15,52)" fg:x="902" fg:w="1"/><text x="72.5836%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.3336%" y="421" width="0.0802%" height="15" fill="rgb(220,133,28)" fg:x="902" fg:w="1"/><text x="72.5836%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.4940%" y="453" width="0.0802%" height="15" fill="rgb(217,180,4)" fg:x="904" fg:w="1"/><text x="72.7440%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.4940%" y="437" width="0.0802%" height="15" fill="rgb(251,24,1)" fg:x="904" fg:w="1"/><text x="72.7440%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="72.5742%" y="437" width="0.1604%" height="15" fill="rgb(212,185,49)" fg:x="905" fg:w="2"/><text x="72.8242%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.6544%" y="421" width="0.0802%" height="15" fill="rgb(215,175,22)" fg:x="906" fg:w="1"/><text x="72.9044%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.6544%" y="405" width="0.0802%" height="15" fill="rgb(250,205,14)" fg:x="906" fg:w="1"/><text x="72.9044%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="72.6544%" y="389" width="0.0802%" height="15" fill="rgb(225,211,22)" fg:x="906" fg:w="1"/><text x="72.9044%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="72.3336%" y="501" width="0.4812%" height="15" fill="rgb(251,179,42)" fg:x="902" fg:w="6"/><text x="72.5836%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="72.4138%" y="485" width="0.4010%" height="15" fill="rgb(208,216,51)" fg:x="903" fg:w="5"/><text x="72.6638%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="72.4940%" y="469" width="0.3208%" height="15" fill="rgb(235,36,11)" fg:x="904" fg:w="4"/><text x="72.7440%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="72.5742%" y="453" width="0.2406%" height="15" fill="rgb(213,189,28)" fg:x="905" fg:w="3"/><text x="72.8242%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7346%" y="437" width="0.0802%" height="15" fill="rgb(227,203,42)" fg:x="907" fg:w="1"/><text x="72.9846%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.7346%" y="421" width="0.0802%" height="15" fill="rgb(244,72,36)" fg:x="907" fg:w="1"/><text x="72.9846%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.7346%" y="405" width="0.0802%" height="15" fill="rgb(213,53,17)" fg:x="907" fg:w="1"/><text x="72.9846%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.7346%" y="389" width="0.0802%" height="15" fill="rgb(207,167,3)" fg:x="907" fg:w="1"/><text x="72.9846%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="72.8949%" y="453" width="0.0802%" height="15" fill="rgb(216,98,30)" fg:x="909" fg:w="1"/><text x="73.1449%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.9751%" y="389" width="0.0802%" height="15" fill="rgb(236,123,15)" fg:x="910" fg:w="1"/><text x="73.2251%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9751%" y="373" width="0.0802%" height="15" fill="rgb(248,81,50)" fg:x="910" fg:w="1"/><text x="73.2251%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="72.9751%" y="453" width="0.1604%" height="15" fill="rgb(214,120,4)" fg:x="910" fg:w="2"/><text x="73.2251%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="72.9751%" y="437" width="0.1604%" height="15" fill="rgb(208,179,34)" fg:x="910" fg:w="2"/><text x="73.2251%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="72.9751%" y="421" width="0.1604%" height="15" fill="rgb(227,140,7)" fg:x="910" fg:w="2"/><text x="73.2251%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="72.9751%" y="405" width="0.1604%" height="15" fill="rgb(214,22,6)" fg:x="910" fg:w="2"/><text x="73.2251%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.0553%" y="389" width="0.0802%" height="15" fill="rgb(207,137,27)" fg:x="911" fg:w="1"/><text x="73.3053%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0553%" y="373" width="0.0802%" height="15" fill="rgb(210,8,46)" fg:x="911" fg:w="1"/><text x="73.3053%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0553%" y="357" width="0.0802%" height="15" fill="rgb(240,16,54)" fg:x="911" fg:w="1"/><text x="73.3053%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0553%" y="341" width="0.0802%" height="15" fill="rgb(211,209,29)" fg:x="911" fg:w="1"/><text x="73.3053%" y="351.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (11 samples, 0.88%)</title><rect x="72.3336%" y="533" width="0.8821%" height="15" fill="rgb(226,228,24)" fg:x="902" fg:w="11"/><text x="72.5836%" y="543.50"></text></g><g><title>engine::session::Session::check_for_changes (11 samples, 0.88%)</title><rect x="72.3336%" y="517" width="0.8821%" height="15" fill="rgb(222,84,9)" fg:x="902" fg:w="11"/><text x="72.5836%" y="527.50"></text></g><g><title>kernel::compare::any_entity_changes (5 samples, 0.40%)</title><rect x="72.8148%" y="501" width="0.4010%" height="15" fill="rgb(234,203,30)" fg:x="908" fg:w="5"/><text x="73.0648%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="72.8148%" y="485" width="0.4010%" height="15" fill="rgb(238,109,14)" fg:x="908" fg:w="5"/><text x="73.0648%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="72.8148%" y="469" width="0.4010%" height="15" fill="rgb(233,206,34)" fg:x="908" fg:w="5"/><text x="73.0648%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="73.1355%" y="453" width="0.0802%" height="15" fill="rgb(220,167,47)" fg:x="912" fg:w="1"/><text x="73.3855%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="73.1355%" y="437" width="0.0802%" height="15" fill="rgb(238,105,10)" fg:x="912" fg:w="1"/><text x="73.3855%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.1355%" y="421" width="0.0802%" height="15" fill="rgb(213,227,17)" fg:x="912" fg:w="1"/><text x="73.3855%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.1355%" y="405" width="0.0802%" height="15" fill="rgb(217,132,38)" fg:x="912" fg:w="1"/><text x="73.3855%" y="415.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.04%)</title><rect x="72.2534%" y="565" width="1.0425%" height="15" fill="rgb(242,146,4)" fg:x="901" fg:w="13"/><text x="72.5034%" y="575.50"></text></g><g><title>engine::session::Session::save_entity_changes (13 samples, 1.04%)</title><rect x="72.2534%" y="549" width="1.0425%" height="15" fill="rgb(212,61,9)" fg:x="901" fg:w="13"/><text x="72.5034%" y="559.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="73.2157%" y="533" width="0.0802%" height="15" fill="rgb(247,126,22)" fg:x="913" fg:w="1"/><text x="73.4657%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="73.2157%" y="517" width="0.0802%" height="15" fill="rgb(220,196,2)" fg:x="913" fg:w="1"/><text x="73.4657%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="73.2157%" y="501" width="0.0802%" height="15" fill="rgb(208,46,4)" fg:x="913" fg:w="1"/><text x="73.4657%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="73.2157%" y="485" width="0.0802%" height="15" fill="rgb(252,104,46)" fg:x="913" fg:w="1"/><text x="73.4657%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="73.2157%" y="469" width="0.0802%" height="15" fill="rgb(237,152,48)" fg:x="913" fg:w="1"/><text x="73.4657%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.2157%" y="453" width="0.0802%" height="15" fill="rgb(221,59,37)" fg:x="913" fg:w="1"/><text x="73.4657%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.2157%" y="437" width="0.0802%" height="15" fill="rgb(209,202,51)" fg:x="913" fg:w="1"/><text x="73.4657%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="73.2157%" y="421" width="0.0802%" height="15" fill="rgb(228,81,30)" fg:x="913" fg:w="1"/><text x="73.4657%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="73.2157%" y="405" width="0.0802%" height="15" fill="rgb(227,42,39)" fg:x="913" fg:w="1"/><text x="73.4657%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.2157%" y="389" width="0.0802%" height="15" fill="rgb(221,26,2)" fg:x="913" fg:w="1"/><text x="73.4657%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.2157%" y="373" width="0.0802%" height="15" fill="rgb(254,61,31)" fg:x="913" fg:w="1"/><text x="73.4657%" y="383.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="73.2157%" y="357" width="0.0802%" height="15" fill="rgb(222,173,38)" fg:x="913" fg:w="1"/><text x="73.4657%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="73.2157%" y="341" width="0.0802%" height="15" fill="rgb(218,50,12)" fg:x="913" fg:w="1"/><text x="73.4657%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.2157%" y="325" width="0.0802%" height="15" fill="rgb(223,88,40)" fg:x="913" fg:w="1"/><text x="73.4657%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.2157%" y="309" width="0.0802%" height="15" fill="rgb(237,54,19)" fg:x="913" fg:w="1"/><text x="73.4657%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.2157%" y="293" width="0.0802%" height="15" fill="rgb(251,129,25)" fg:x="913" fg:w="1"/><text x="73.4657%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.2157%" y="277" width="0.0802%" height="15" fill="rgb(238,97,19)" fg:x="913" fg:w="1"/><text x="73.4657%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="73.2157%" y="261" width="0.0802%" height="15" fill="rgb(240,169,18)" fg:x="913" fg:w="1"/><text x="73.4657%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="73.2157%" y="245" width="0.0802%" height="15" fill="rgb(230,187,49)" fg:x="913" fg:w="1"/><text x="73.4657%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="73.2157%" y="229" width="0.0802%" height="15" fill="rgb(209,44,26)" fg:x="913" fg:w="1"/><text x="73.4657%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="73.2157%" y="213" width="0.0802%" height="15" fill="rgb(244,0,6)" fg:x="913" fg:w="1"/><text x="73.4657%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="73.2157%" y="197" width="0.0802%" height="15" fill="rgb(248,18,21)" fg:x="913" fg:w="1"/><text x="73.4657%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="73.2157%" y="181" width="0.0802%" height="15" fill="rgb(245,180,19)" fg:x="913" fg:w="1"/><text x="73.4657%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.2157%" y="165" width="0.0802%" height="15" fill="rgb(252,118,36)" fg:x="913" fg:w="1"/><text x="73.4657%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="73.2157%" y="149" width="0.0802%" height="15" fill="rgb(210,224,19)" fg:x="913" fg:w="1"/><text x="73.4657%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.2157%" y="133" width="0.0802%" height="15" fill="rgb(218,30,24)" fg:x="913" fg:w="1"/><text x="73.4657%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="73.2157%" y="117" width="0.0802%" height="15" fill="rgb(219,75,50)" fg:x="913" fg:w="1"/><text x="73.4657%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="73.2157%" y="101" width="0.0802%" height="15" fill="rgb(234,72,50)" fg:x="913" fg:w="1"/><text x="73.4657%" y="111.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="73.2157%" y="85" width="0.0802%" height="15" fill="rgb(219,100,48)" fg:x="913" fg:w="1"/><text x="73.4657%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.2157%" y="69" width="0.0802%" height="15" fill="rgb(253,5,41)" fg:x="913" fg:w="1"/><text x="73.4657%" y="79.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="73.2959%" y="565" width="0.0802%" height="15" fill="rgb(247,181,11)" fg:x="914" fg:w="1"/><text x="73.5459%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::modified (1 samples, 0.08%)</title><rect x="73.2959%" y="549" width="0.0802%" height="15" fill="rgb(222,223,25)" fg:x="914" fg:w="1"/><text x="73.5459%" y="559.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="73.2959%" y="533" width="0.0802%" height="15" fill="rgb(214,198,28)" fg:x="914" fg:w="1"/><text x="73.5459%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.3761%" y="549" width="0.0802%" height="15" fill="rgb(230,46,43)" fg:x="915" fg:w="1"/><text x="73.6261%" y="559.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="73.3761%" y="533" width="0.0802%" height="15" fill="rgb(233,65,53)" fg:x="915" fg:w="1"/><text x="73.6261%" y="543.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.3761%" y="517" width="0.0802%" height="15" fill="rgb(221,121,27)" fg:x="915" fg:w="1"/><text x="73.6261%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3761%" y="501" width="0.0802%" height="15" fill="rgb(247,70,47)" fg:x="915" fg:w="1"/><text x="73.6261%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3761%" y="485" width="0.0802%" height="15" fill="rgb(228,85,35)" fg:x="915" fg:w="1"/><text x="73.6261%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.3761%" y="469" width="0.0802%" height="15" fill="rgb(209,50,18)" fg:x="915" fg:w="1"/><text x="73.6261%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.3761%" y="453" width="0.0802%" height="15" fill="rgb(250,19,35)" fg:x="915" fg:w="1"/><text x="73.6261%" y="463.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="73.3761%" y="565" width="0.1604%" height="15" fill="rgb(253,107,29)" fg:x="915" fg:w="2"/><text x="73.6261%" y="575.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="73.4563%" y="549" width="0.0802%" height="15" fill="rgb(252,179,29)" fg:x="916" fg:w="1"/><text x="73.7063%" y="559.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="73.4563%" y="533" width="0.0802%" height="15" fill="rgb(238,194,6)" fg:x="916" fg:w="1"/><text x="73.7063%" y="543.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="73.4563%" y="517" width="0.0802%" height="15" fill="rgb(238,164,29)" fg:x="916" fg:w="1"/><text x="73.7063%" y="527.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="73.4563%" y="501" width="0.0802%" height="15" fill="rgb(224,25,9)" fg:x="916" fg:w="1"/><text x="73.7063%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.4563%" y="485" width="0.0802%" height="15" fill="rgb(244,153,23)" fg:x="916" fg:w="1"/><text x="73.7063%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="73.4563%" y="469" width="0.0802%" height="15" fill="rgb(212,203,14)" fg:x="916" fg:w="1"/><text x="73.7063%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.4563%" y="453" width="0.0802%" height="15" fill="rgb(220,164,20)" fg:x="916" fg:w="1"/><text x="73.7063%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.4563%" y="437" width="0.0802%" height="15" fill="rgb(222,203,48)" fg:x="916" fg:w="1"/><text x="73.7063%" y="447.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (27 samples, 2.17%)</title><rect x="71.4515%" y="597" width="2.1652%" height="15" fill="rgb(215,159,22)" fg:x="891" fg:w="27"/><text x="71.7015%" y="607.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::build (20 samples, 1.60%)</title><rect x="72.0128%" y="581" width="1.6038%" height="15" fill="rgb(216,183,47)" fg:x="898" fg:w="20"/><text x="72.2628%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="73.5365%" y="565" width="0.0802%" height="15" fill="rgb(229,195,25)" fg:x="917" fg:w="1"/><text x="73.7865%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.5365%" y="549" width="0.0802%" height="15" fill="rgb(224,132,51)" fg:x="917" fg:w="1"/><text x="73.7865%" y="559.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="73.5365%" y="533" width="0.0802%" height="15" fill="rgb(240,63,7)" fg:x="917" fg:w="1"/><text x="73.7865%" y="543.50"></text></g><g><title>kernel::model::Entity::gid (1 samples, 0.08%)</title><rect x="73.5365%" y="517" width="0.0802%" height="15" fill="rgb(249,182,41)" fg:x="917" fg:w="1"/><text x="73.7865%" y="527.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="73.5365%" y="501" width="0.0802%" height="15" fill="rgb(243,47,26)" fg:x="917" fg:w="1"/><text x="73.7865%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="73.6167%" y="597" width="0.0802%" height="15" fill="rgb(233,48,2)" fg:x="918" fg:w="1"/><text x="73.8667%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="73.6167%" y="581" width="0.0802%" height="15" fill="rgb(244,165,34)" fg:x="918" fg:w="1"/><text x="73.8667%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.6167%" y="565" width="0.0802%" height="15" fill="rgb(207,89,7)" fg:x="918" fg:w="1"/><text x="73.8667%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="73.6969%" y="581" width="0.0802%" height="15" fill="rgb(244,117,36)" fg:x="919" fg:w="1"/><text x="73.9469%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="73.6969%" y="565" width="0.0802%" height="15" fill="rgb(226,144,34)" fg:x="919" fg:w="1"/><text x="73.9469%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.6969%" y="549" width="0.0802%" height="15" fill="rgb(213,23,19)" fg:x="919" fg:w="1"/><text x="73.9469%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.6969%" y="533" width="0.0802%" height="15" fill="rgb(217,75,12)" fg:x="919" fg:w="1"/><text x="73.9469%" y="543.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="73.6969%" y="517" width="0.0802%" height="15" fill="rgb(224,159,17)" fg:x="919" fg:w="1"/><text x="73.9469%" y="527.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="73.6969%" y="501" width="0.0802%" height="15" fill="rgb(217,118,1)" fg:x="919" fg:w="1"/><text x="73.9469%" y="511.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="73.6969%" y="485" width="0.0802%" height="15" fill="rgb(232,180,48)" fg:x="919" fg:w="1"/><text x="73.9469%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="73.6969%" y="469" width="0.0802%" height="15" fill="rgb(230,27,33)" fg:x="919" fg:w="1"/><text x="73.9469%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.6969%" y="453" width="0.0802%" height="15" fill="rgb(205,31,21)" fg:x="919" fg:w="1"/><text x="73.9469%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.6969%" y="437" width="0.0802%" height="15" fill="rgb(253,59,4)" fg:x="919" fg:w="1"/><text x="73.9469%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.6969%" y="421" width="0.0802%" height="15" fill="rgb(224,201,9)" fg:x="919" fg:w="1"/><text x="73.9469%" y="431.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="73.6969%" y="405" width="0.0802%" height="15" fill="rgb(229,206,30)" fg:x="919" fg:w="1"/><text x="73.9469%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="73.6969%" y="389" width="0.0802%" height="15" fill="rgb(212,67,47)" fg:x="919" fg:w="1"/><text x="73.9469%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="73.6969%" y="373" width="0.0802%" height="15" fill="rgb(211,96,50)" fg:x="919" fg:w="1"/><text x="73.9469%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="73.6969%" y="357" width="0.0802%" height="15" fill="rgb(252,114,18)" fg:x="919" fg:w="1"/><text x="73.9469%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="73.6969%" y="341" width="0.0802%" height="15" fill="rgb(223,58,37)" fg:x="919" fg:w="1"/><text x="73.9469%" y="351.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.7771%" y="565" width="0.0802%" height="15" fill="rgb(237,70,4)" fg:x="920" fg:w="1"/><text x="74.0271%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="73.7771%" y="549" width="0.0802%" height="15" fill="rgb(244,85,46)" fg:x="920" fg:w="1"/><text x="74.0271%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="73.7771%" y="533" width="0.0802%" height="15" fill="rgb(223,39,52)" fg:x="920" fg:w="1"/><text x="74.0271%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="73.8573%" y="517" width="0.0802%" height="15" fill="rgb(218,200,14)" fg:x="921" fg:w="1"/><text x="74.1073%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.8573%" y="501" width="0.0802%" height="15" fill="rgb(208,171,16)" fg:x="921" fg:w="1"/><text x="74.1073%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.8573%" y="485" width="0.0802%" height="15" fill="rgb(234,200,18)" fg:x="921" fg:w="1"/><text x="74.1073%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.9374%" y="501" width="0.1604%" height="15" fill="rgb(228,45,11)" fg:x="922" fg:w="2"/><text x="74.1874%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="73.9374%" y="485" width="0.1604%" height="15" fill="rgb(237,182,11)" fg:x="922" fg:w="2"/><text x="74.1874%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.0176%" y="469" width="0.0802%" height="15" fill="rgb(241,175,49)" fg:x="923" fg:w="1"/><text x="74.2676%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.0176%" y="453" width="0.0802%" height="15" fill="rgb(247,38,35)" fg:x="923" fg:w="1"/><text x="74.2676%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.0176%" y="437" width="0.0802%" height="15" fill="rgb(228,39,49)" fg:x="923" fg:w="1"/><text x="74.2676%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.0176%" y="421" width="0.0802%" height="15" fill="rgb(226,101,26)" fg:x="923" fg:w="1"/><text x="74.2676%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.0176%" y="405" width="0.0802%" height="15" fill="rgb(206,141,19)" fg:x="923" fg:w="1"/><text x="74.2676%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="73.8573%" y="533" width="0.3208%" height="15" fill="rgb(211,200,13)" fg:x="921" fg:w="4"/><text x="74.1073%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="73.9374%" y="517" width="0.2406%" height="15" fill="rgb(241,121,6)" fg:x="922" fg:w="3"/><text x="74.1874%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0978%" y="501" width="0.0802%" height="15" fill="rgb(234,221,29)" fg:x="924" fg:w="1"/><text x="74.3478%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0978%" y="485" width="0.0802%" height="15" fill="rgb(229,136,5)" fg:x="924" fg:w="1"/><text x="74.3478%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0978%" y="469" width="0.0802%" height="15" fill="rgb(238,36,11)" fg:x="924" fg:w="1"/><text x="74.3478%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.0978%" y="453" width="0.0802%" height="15" fill="rgb(251,55,41)" fg:x="924" fg:w="1"/><text x="74.3478%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.0978%" y="437" width="0.0802%" height="15" fill="rgb(242,34,40)" fg:x="924" fg:w="1"/><text x="74.3478%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.1780%" y="517" width="0.1604%" height="15" fill="rgb(215,42,17)" fg:x="925" fg:w="2"/><text x="74.4280%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="74.1780%" y="501" width="0.1604%" height="15" fill="rgb(207,44,46)" fg:x="925" fg:w="2"/><text x="74.4280%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.1780%" y="485" width="0.1604%" height="15" fill="rgb(211,206,28)" fg:x="925" fg:w="2"/><text x="74.4280%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.1780%" y="469" width="0.1604%" height="15" fill="rgb(237,167,16)" fg:x="925" fg:w="2"/><text x="74.4280%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.3384%" y="453" width="0.0802%" height="15" fill="rgb(233,66,6)" fg:x="927" fg:w="1"/><text x="74.5884%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.3384%" y="437" width="0.0802%" height="15" fill="rgb(246,123,29)" fg:x="927" fg:w="1"/><text x="74.5884%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3384%" y="421" width="0.0802%" height="15" fill="rgb(209,62,40)" fg:x="927" fg:w="1"/><text x="74.5884%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="74.3384%" y="485" width="0.1604%" height="15" fill="rgb(218,4,25)" fg:x="927" fg:w="2"/><text x="74.5884%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="74.3384%" y="469" width="0.1604%" height="15" fill="rgb(253,91,49)" fg:x="927" fg:w="2"/><text x="74.5884%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="74.4186%" y="453" width="0.0802%" height="15" fill="rgb(228,155,29)" fg:x="928" fg:w="1"/><text x="74.6686%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="74.4186%" y="437" width="0.0802%" height="15" fill="rgb(243,57,37)" fg:x="928" fg:w="1"/><text x="74.6686%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.4186%" y="421" width="0.0802%" height="15" fill="rgb(244,167,17)" fg:x="928" fg:w="1"/><text x="74.6686%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4186%" y="405" width="0.0802%" height="15" fill="rgb(207,181,38)" fg:x="928" fg:w="1"/><text x="74.6686%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4186%" y="389" width="0.0802%" height="15" fill="rgb(211,8,23)" fg:x="928" fg:w="1"/><text x="74.6686%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4186%" y="373" width="0.0802%" height="15" fill="rgb(235,11,44)" fg:x="928" fg:w="1"/><text x="74.6686%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4988%" y="469" width="0.0802%" height="15" fill="rgb(248,18,52)" fg:x="929" fg:w="1"/><text x="74.7488%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4988%" y="453" width="0.0802%" height="15" fill="rgb(208,4,7)" fg:x="929" fg:w="1"/><text x="74.7488%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4988%" y="437" width="0.0802%" height="15" fill="rgb(240,17,39)" fg:x="929" fg:w="1"/><text x="74.7488%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="74.5790%" y="437" width="0.1604%" height="15" fill="rgb(207,170,3)" fg:x="930" fg:w="2"/><text x="74.8290%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="74.5790%" y="421" width="0.1604%" height="15" fill="rgb(236,100,52)" fg:x="930" fg:w="2"/><text x="74.8290%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.6592%" y="405" width="0.0802%" height="15" fill="rgb(246,78,51)" fg:x="931" fg:w="1"/><text x="74.9092%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="74.3384%" y="517" width="0.4812%" height="15" fill="rgb(211,17,15)" fg:x="927" fg:w="6"/><text x="74.5884%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="74.3384%" y="501" width="0.4812%" height="15" fill="rgb(209,59,46)" fg:x="927" fg:w="6"/><text x="74.5884%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="74.4988%" y="485" width="0.3208%" height="15" fill="rgb(210,92,25)" fg:x="929" fg:w="4"/><text x="74.7488%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.24%)</title><rect x="74.5790%" y="469" width="0.2406%" height="15" fill="rgb(238,174,52)" fg:x="930" fg:w="3"/><text x="74.8290%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="74.5790%" y="453" width="0.2406%" height="15" fill="rgb(230,73,7)" fg:x="930" fg:w="3"/><text x="74.8290%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7394%" y="437" width="0.0802%" height="15" fill="rgb(243,124,40)" fg:x="932" fg:w="1"/><text x="74.9894%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.7394%" y="421" width="0.0802%" height="15" fill="rgb(244,170,11)" fg:x="932" fg:w="1"/><text x="74.9894%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.8196%" y="373" width="0.0802%" height="15" fill="rgb(207,114,54)" fg:x="933" fg:w="1"/><text x="75.0696%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.8196%" y="357" width="0.0802%" height="15" fill="rgb(205,42,20)" fg:x="933" fg:w="1"/><text x="75.0696%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8196%" y="341" width="0.0802%" height="15" fill="rgb(230,30,28)" fg:x="933" fg:w="1"/><text x="75.0696%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8196%" y="325" width="0.0802%" height="15" fill="rgb(205,73,54)" fg:x="933" fg:w="1"/><text x="75.0696%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.8998%" y="357" width="0.0802%" height="15" fill="rgb(254,227,23)" fg:x="934" fg:w="1"/><text x="75.1498%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="74.8196%" y="389" width="0.2406%" height="15" fill="rgb(228,202,34)" fg:x="933" fg:w="3"/><text x="75.0696%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.8998%" y="373" width="0.1604%" height="15" fill="rgb(222,225,37)" fg:x="934" fg:w="2"/><text x="75.1498%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.9800%" y="357" width="0.0802%" height="15" fill="rgb(221,14,54)" fg:x="935" fg:w="1"/><text x="75.2300%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.9800%" y="341" width="0.0802%" height="15" fill="rgb(254,102,2)" fg:x="935" fg:w="1"/><text x="75.2300%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.9800%" y="325" width="0.0802%" height="15" fill="rgb(232,104,17)" fg:x="935" fg:w="1"/><text x="75.2300%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.8196%" y="453" width="0.3208%" height="15" fill="rgb(250,220,14)" fg:x="933" fg:w="4"/><text x="75.0696%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="74.8196%" y="437" width="0.3208%" height="15" fill="rgb(241,158,9)" fg:x="933" fg:w="4"/><text x="75.0696%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.8196%" y="421" width="0.3208%" height="15" fill="rgb(246,9,43)" fg:x="933" fg:w="4"/><text x="75.0696%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="74.8196%" y="405" width="0.3208%" height="15" fill="rgb(206,73,33)" fg:x="933" fg:w="4"/><text x="75.0696%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0601%" y="389" width="0.0802%" height="15" fill="rgb(222,79,8)" fg:x="936" fg:w="1"/><text x="75.3101%" y="399.50"></text></g><g><title>engine::session::Session::close (20 samples, 1.60%)</title><rect x="73.6969%" y="597" width="1.6038%" height="15" fill="rgb(234,8,54)" fg:x="919" fg:w="20"/><text x="73.9469%" y="607.50"></text></g><g><title>engine::session::Session::save_entity_changes (19 samples, 1.52%)</title><rect x="73.7771%" y="581" width="1.5237%" height="15" fill="rgb(209,134,38)" fg:x="920" fg:w="19"/><text x="74.0271%" y="591.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (18 samples, 1.44%)</title><rect x="73.8573%" y="565" width="1.4435%" height="15" fill="rgb(230,127,29)" fg:x="921" fg:w="18"/><text x="74.1073%" y="575.50"></text></g><g><title>engine::session::Session::check_for_changes (18 samples, 1.44%)</title><rect x="73.8573%" y="549" width="1.4435%" height="15" fill="rgb(242,44,41)" fg:x="921" fg:w="18"/><text x="74.1073%" y="559.50"></text></g><g><title>kernel::compare::any_entity_changes (14 samples, 1.12%)</title><rect x="74.1780%" y="533" width="1.1227%" height="15" fill="rgb(222,56,43)" fg:x="925" fg:w="14"/><text x="74.4280%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="74.8196%" y="517" width="0.4812%" height="15" fill="rgb(238,39,47)" fg:x="933" fg:w="6"/><text x="75.0696%" y="527.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="74.8196%" y="501" width="0.4812%" height="15" fill="rgb(226,79,43)" fg:x="933" fg:w="6"/><text x="75.0696%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="74.8196%" y="485" width="0.4812%" height="15" fill="rgb(242,105,53)" fg:x="933" fg:w="6"/><text x="75.0696%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="74.8196%" y="469" width="0.4812%" height="15" fill="rgb(251,132,46)" fg:x="933" fg:w="6"/><text x="75.0696%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.1403%" y="453" width="0.1604%" height="15" fill="rgb(231,77,14)" fg:x="937" fg:w="2"/><text x="75.3903%" y="463.50"></text></g><g><title>&lt;plugins_core::carrying::parser::PutInsideActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="75.4611%" y="485" width="0.0802%" height="15" fill="rgb(240,135,9)" fg:x="941" fg:w="1"/><text x="75.7111%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="75.5413%" y="485" width="0.0802%" height="15" fill="rgb(248,109,14)" fg:x="942" fg:w="1"/><text x="75.7913%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="75.5413%" y="469" width="0.0802%" height="15" fill="rgb(227,146,52)" fg:x="942" fg:w="1"/><text x="75.7913%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="75.5413%" y="453" width="0.0802%" height="15" fill="rgb(232,54,3)" fg:x="942" fg:w="1"/><text x="75.7913%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="75.5413%" y="437" width="0.0802%" height="15" fill="rgb(229,201,43)" fg:x="942" fg:w="1"/><text x="75.7913%" y="447.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="75.5413%" y="421" width="0.0802%" height="15" fill="rgb(252,161,33)" fg:x="942" fg:w="1"/><text x="75.7913%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="75.5413%" y="405" width="0.0802%" height="15" fill="rgb(226,146,40)" fg:x="942" fg:w="1"/><text x="75.7913%" y="415.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="75.5413%" y="389" width="0.0802%" height="15" fill="rgb(219,47,25)" fg:x="942" fg:w="1"/><text x="75.7913%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="75.5413%" y="373" width="0.0802%" height="15" fill="rgb(250,135,13)" fg:x="942" fg:w="1"/><text x="75.7913%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.5413%" y="357" width="0.0802%" height="15" fill="rgb(219,229,18)" fg:x="942" fg:w="1"/><text x="75.7913%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.5413%" y="341" width="0.0802%" height="15" fill="rgb(217,152,27)" fg:x="942" fg:w="1"/><text x="75.7913%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.5413%" y="325" width="0.0802%" height="15" fill="rgb(225,71,47)" fg:x="942" fg:w="1"/><text x="75.7913%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.5413%" y="309" width="0.0802%" height="15" fill="rgb(220,139,14)" fg:x="942" fg:w="1"/><text x="75.7913%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.5413%" y="293" width="0.0802%" height="15" fill="rgb(247,54,32)" fg:x="942" fg:w="1"/><text x="75.7913%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.5413%" y="277" width="0.0802%" height="15" fill="rgb(252,131,39)" fg:x="942" fg:w="1"/><text x="75.7913%" y="287.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="75.5413%" y="261" width="0.0802%" height="15" fill="rgb(210,108,39)" fg:x="942" fg:w="1"/><text x="75.7913%" y="271.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="75.6215%" y="437" width="0.0802%" height="15" fill="rgb(205,23,29)" fg:x="943" fg:w="1"/><text x="75.8715%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="75.6215%" y="421" width="0.0802%" height="15" fill="rgb(246,139,46)" fg:x="943" fg:w="1"/><text x="75.8715%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.6215%" y="405" width="0.0802%" height="15" fill="rgb(250,81,26)" fg:x="943" fg:w="1"/><text x="75.8715%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.6215%" y="389" width="0.0802%" height="15" fill="rgb(214,104,7)" fg:x="943" fg:w="1"/><text x="75.8715%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.6215%" y="373" width="0.0802%" height="15" fill="rgb(233,189,8)" fg:x="943" fg:w="1"/><text x="75.8715%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="75.6215%" y="357" width="0.0802%" height="15" fill="rgb(228,141,17)" fg:x="943" fg:w="1"/><text x="75.8715%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="75.6215%" y="341" width="0.0802%" height="15" fill="rgb(247,157,1)" fg:x="943" fg:w="1"/><text x="75.8715%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="75.6215%" y="325" width="0.0802%" height="15" fill="rgb(249,225,5)" fg:x="943" fg:w="1"/><text x="75.8715%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="75.6215%" y="309" width="0.0802%" height="15" fill="rgb(242,55,13)" fg:x="943" fg:w="1"/><text x="75.8715%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.6215%" y="293" width="0.0802%" height="15" fill="rgb(230,49,50)" fg:x="943" fg:w="1"/><text x="75.8715%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.6215%" y="277" width="0.0802%" height="15" fill="rgb(241,111,38)" fg:x="943" fg:w="1"/><text x="75.8715%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.08%)</title><rect x="75.6215%" y="261" width="0.0802%" height="15" fill="rgb(252,155,4)" fg:x="943" fg:w="1"/><text x="75.8715%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.08%)</title><rect x="75.6215%" y="245" width="0.0802%" height="15" fill="rgb(212,69,32)" fg:x="943" fg:w="1"/><text x="75.8715%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.7017%" y="405" width="0.0802%" height="15" fill="rgb(243,107,47)" fg:x="944" fg:w="1"/><text x="75.9517%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.7017%" y="389" width="0.0802%" height="15" fill="rgb(247,130,12)" fg:x="944" fg:w="1"/><text x="75.9517%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.7017%" y="373" width="0.0802%" height="15" fill="rgb(233,74,16)" fg:x="944" fg:w="1"/><text x="75.9517%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.7017%" y="357" width="0.0802%" height="15" fill="rgb(208,58,18)" fg:x="944" fg:w="1"/><text x="75.9517%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="75.7819%" y="325" width="0.2406%" height="15" fill="rgb(242,225,1)" fg:x="945" fg:w="3"/><text x="76.0319%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="75.9423%" y="309" width="0.0802%" height="15" fill="rgb(249,39,40)" fg:x="947" fg:w="1"/><text x="76.1923%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="75.9423%" y="293" width="0.0802%" height="15" fill="rgb(207,72,44)" fg:x="947" fg:w="1"/><text x="76.1923%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="75.7819%" y="341" width="0.4010%" height="15" fill="rgb(215,193,12)" fg:x="945" fg:w="5"/><text x="76.0319%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="76.0225%" y="325" width="0.1604%" height="15" fill="rgb(248,41,39)" fg:x="948" fg:w="2"/><text x="76.2725%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="76.1026%" y="309" width="0.0802%" height="15" fill="rgb(253,85,4)" fg:x="949" fg:w="1"/><text x="76.3526%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.1026%" y="293" width="0.0802%" height="15" fill="rgb(243,70,31)" fg:x="949" fg:w="1"/><text x="76.3526%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.1026%" y="277" width="0.0802%" height="15" fill="rgb(253,195,26)" fg:x="949" fg:w="1"/><text x="76.3526%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1026%" y="261" width="0.0802%" height="15" fill="rgb(243,42,11)" fg:x="949" fg:w="1"/><text x="76.3526%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="75.7819%" y="405" width="0.4812%" height="15" fill="rgb(239,66,17)" fg:x="945" fg:w="6"/><text x="76.0319%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="75.7819%" y="389" width="0.4812%" height="15" fill="rgb(217,132,21)" fg:x="945" fg:w="6"/><text x="76.0319%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.48%)</title><rect x="75.7819%" y="373" width="0.4812%" height="15" fill="rgb(252,202,21)" fg:x="945" fg:w="6"/><text x="76.0319%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (6 samples, 0.48%)</title><rect x="75.7819%" y="357" width="0.4812%" height="15" fill="rgb(233,98,36)" fg:x="945" fg:w="6"/><text x="76.0319%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="76.1828%" y="341" width="0.0802%" height="15" fill="rgb(216,153,54)" fg:x="950" fg:w="1"/><text x="76.4328%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="76.1828%" y="325" width="0.0802%" height="15" fill="rgb(250,99,7)" fg:x="950" fg:w="1"/><text x="76.4328%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="76.1828%" y="309" width="0.0802%" height="15" fill="rgb(207,56,50)" fg:x="950" fg:w="1"/><text x="76.4328%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="76.1828%" y="293" width="0.0802%" height="15" fill="rgb(244,61,34)" fg:x="950" fg:w="1"/><text x="76.4328%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.72%)</title><rect x="76.2630%" y="341" width="0.7217%" height="15" fill="rgb(241,50,38)" fg:x="951" fg:w="9"/><text x="76.5130%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.72%)</title><rect x="76.2630%" y="325" width="0.7217%" height="15" fill="rgb(212,166,30)" fg:x="951" fg:w="9"/><text x="76.5130%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9046%" y="309" width="0.0802%" height="15" fill="rgb(249,127,32)" fg:x="959" fg:w="1"/><text x="77.1546%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="76.9848%" y="341" width="0.0802%" height="15" fill="rgb(209,103,0)" fg:x="960" fg:w="1"/><text x="77.2348%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="76.9848%" y="325" width="0.0802%" height="15" fill="rgb(238,209,51)" fg:x="960" fg:w="1"/><text x="77.2348%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="76.9848%" y="309" width="0.0802%" height="15" fill="rgb(237,56,23)" fg:x="960" fg:w="1"/><text x="77.2348%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="76.9848%" y="293" width="0.0802%" height="15" fill="rgb(215,153,46)" fg:x="960" fg:w="1"/><text x="77.2348%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.9848%" y="277" width="0.0802%" height="15" fill="rgb(224,49,31)" fg:x="960" fg:w="1"/><text x="77.2348%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="77.0650%" y="341" width="0.0802%" height="15" fill="rgb(250,18,42)" fg:x="961" fg:w="1"/><text x="77.3150%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="77.0650%" y="325" width="0.0802%" height="15" fill="rgb(215,176,39)" fg:x="961" fg:w="1"/><text x="77.3150%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="77.1451%" y="341" width="0.0802%" height="15" fill="rgb(223,77,29)" fg:x="962" fg:w="1"/><text x="77.3951%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="77.1451%" y="325" width="0.0802%" height="15" fill="rgb(234,94,52)" fg:x="962" fg:w="1"/><text x="77.3951%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.4659%" y="277" width="0.0802%" height="15" fill="rgb(220,154,50)" fg:x="966" fg:w="1"/><text x="77.7159%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="77.5461%" y="277" width="0.1604%" height="15" fill="rgb(212,11,10)" fg:x="967" fg:w="2"/><text x="77.7961%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="77.5461%" y="261" width="0.1604%" height="15" fill="rgb(205,166,19)" fg:x="967" fg:w="2"/><text x="77.7961%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="77.5461%" y="245" width="0.1604%" height="15" fill="rgb(244,198,16)" fg:x="967" fg:w="2"/><text x="77.7961%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="77.5461%" y="229" width="0.1604%" height="15" fill="rgb(219,69,12)" fg:x="967" fg:w="2"/><text x="77.7961%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="77.7065%" y="277" width="0.0802%" height="15" fill="rgb(245,30,7)" fg:x="969" fg:w="1"/><text x="77.9565%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.7065%" y="261" width="0.0802%" height="15" fill="rgb(218,221,48)" fg:x="969" fg:w="1"/><text x="77.9565%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.7065%" y="245" width="0.0802%" height="15" fill="rgb(216,66,15)" fg:x="969" fg:w="1"/><text x="77.9565%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.7065%" y="229" width="0.0802%" height="15" fill="rgb(226,122,50)" fg:x="969" fg:w="1"/><text x="77.9565%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.7867%" y="261" width="0.0802%" height="15" fill="rgb(239,156,16)" fg:x="970" fg:w="1"/><text x="78.0367%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.7867%" y="245" width="0.0802%" height="15" fill="rgb(224,27,38)" fg:x="970" fg:w="1"/><text x="78.0367%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (40 samples, 3.21%)</title><rect x="77.7867%" y="277" width="3.2077%" height="15" fill="rgb(224,39,27)" fg:x="970" fg:w="40"/><text x="78.0367%" y="287.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (39 samples, 3.13%)</title><rect x="77.8669%" y="261" width="3.1275%" height="15" fill="rgb(215,92,29)" fg:x="971" fg:w="39"/><text x="78.1169%" y="271.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (39 samples, 3.13%)</title><rect x="77.8669%" y="245" width="3.1275%" height="15" fill="rgb(207,159,16)" fg:x="971" fg:w="39"/><text x="78.1169%" y="255.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="80.9944%" y="277" width="0.3208%" height="15" fill="rgb(238,163,47)" fg:x="1010" fg:w="4"/><text x="81.2444%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.2350%" y="261" width="0.0802%" height="15" fill="rgb(219,91,49)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="271.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="81.3152%" y="277" width="0.0802%" height="15" fill="rgb(227,167,31)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 4.25%)</title><rect x="77.2253%" y="325" width="4.2502%" height="15" fill="rgb(234,80,54)" fg:x="963" fg:w="53"/><text x="77.4753%" y="335.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.25%)</title><rect x="77.2253%" y="309" width="4.2502%" height="15" fill="rgb(212,114,2)" fg:x="963" fg:w="53"/><text x="77.4753%" y="319.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.25%)</title><rect x="77.2253%" y="293" width="4.2502%" height="15" fill="rgb(234,50,24)" fg:x="963" fg:w="53"/><text x="77.4753%" y="303.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="81.3953%" y="277" width="0.0802%" height="15" fill="rgb(221,68,8)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.3953%" y="261" width="0.0802%" height="15" fill="rgb(254,180,31)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.3953%" y="245" width="0.0802%" height="15" fill="rgb(247,130,50)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.3953%" y="229" width="0.0802%" height="15" fill="rgb(211,109,4)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="81.4755%" y="309" width="0.1604%" height="15" fill="rgb(238,50,21)" fg:x="1016" fg:w="2"/><text x="81.7255%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="81.6359%" y="309" width="0.4010%" height="15" fill="rgb(225,57,45)" fg:x="1018" fg:w="5"/><text x="81.8859%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.9567%" y="293" width="0.0802%" height="15" fill="rgb(209,196,50)" fg:x="1022" fg:w="1"/><text x="82.2067%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (61 samples, 4.89%)</title><rect x="77.2253%" y="341" width="4.8917%" height="15" fill="rgb(242,140,13)" fg:x="963" fg:w="61"/><text x="77.4753%" y="351.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="81.4755%" y="325" width="0.6415%" height="15" fill="rgb(217,111,7)" fg:x="1016" fg:w="8"/><text x="81.7255%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="82.0369%" y="309" width="0.0802%" height="15" fill="rgb(253,193,51)" fg:x="1023" fg:w="1"/><text x="82.2869%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (74 samples, 5.93%)</title><rect x="76.2630%" y="357" width="5.9342%" height="15" fill="rgb(252,70,29)" fg:x="951" fg:w="74"/><text x="76.5130%" y="367.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="82.1171%" y="341" width="0.0802%" height="15" fill="rgb(232,127,12)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="351.50"></text></g><g><title>regex_automata::meta::reverse_inner::flatten (1 samples, 0.08%)</title><rect x="82.1171%" y="325" width="0.0802%" height="15" fill="rgb(211,180,21)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="82.3577%" y="309" width="0.0802%" height="15" fill="rgb(229,72,13)" fg:x="1027" fg:w="1"/><text x="82.6077%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="82.3577%" y="293" width="0.0802%" height="15" fill="rgb(240,211,49)" fg:x="1027" fg:w="1"/><text x="82.6077%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="82.4379%" y="293" width="0.3208%" height="15" fill="rgb(219,149,40)" fg:x="1028" fg:w="4"/><text x="82.6879%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="82.4379%" y="277" width="0.3208%" height="15" fill="rgb(210,127,46)" fg:x="1028" fg:w="4"/><text x="82.6879%" y="287.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="82.4379%" y="261" width="0.3208%" height="15" fill="rgb(220,106,7)" fg:x="1028" fg:w="4"/><text x="82.6879%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="82.1973%" y="357" width="0.7217%" height="15" fill="rgb(249,31,22)" fg:x="1025" fg:w="9"/><text x="82.4473%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="82.1973%" y="341" width="0.7217%" height="15" fill="rgb(253,1,49)" fg:x="1025" fg:w="9"/><text x="82.4473%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="82.3577%" y="325" width="0.5613%" height="15" fill="rgb(227,144,33)" fg:x="1027" fg:w="7"/><text x="82.6077%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.48%)</title><rect x="82.4379%" y="309" width="0.4812%" height="15" fill="rgb(249,163,44)" fg:x="1028" fg:w="6"/><text x="82.6879%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (2 samples, 0.16%)</title><rect x="82.7586%" y="293" width="0.1604%" height="15" fill="rgb(234,15,39)" fg:x="1032" fg:w="2"/><text x="83.0086%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="82.8388%" y="277" width="0.0802%" height="15" fill="rgb(207,66,16)" fg:x="1033" fg:w="1"/><text x="83.0888%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (84 samples, 6.74%)</title><rect x="76.2630%" y="405" width="6.7362%" height="15" fill="rgb(233,112,24)" fg:x="951" fg:w="84"/><text x="76.5130%" y="415.50">&lt;regex::r..</text></g><g><title>regex::builders::Builder::build_one_string (84 samples, 6.74%)</title><rect x="76.2630%" y="389" width="6.7362%" height="15" fill="rgb(230,90,22)" fg:x="951" fg:w="84"/><text x="76.5130%" y="399.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (84 samples, 6.74%)</title><rect x="76.2630%" y="373" width="6.7362%" height="15" fill="rgb(229,61,13)" fg:x="951" fg:w="84"/><text x="76.5130%" y="383.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="82.9190%" y="357" width="0.0802%" height="15" fill="rgb(225,57,24)" fg:x="1034" fg:w="1"/><text x="83.1690%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="82.9190%" y="341" width="0.0802%" height="15" fill="rgb(208,169,48)" fg:x="1034" fg:w="1"/><text x="83.1690%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="82.9190%" y="325" width="0.0802%" height="15" fill="rgb(244,218,51)" fg:x="1034" fg:w="1"/><text x="83.1690%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="82.9190%" y="309" width="0.0802%" height="15" fill="rgb(214,148,10)" fg:x="1034" fg:w="1"/><text x="83.1690%" y="319.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="82.9190%" y="293" width="0.0802%" height="15" fill="rgb(225,174,27)" fg:x="1034" fg:w="1"/><text x="83.1690%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9190%" y="277" width="0.0802%" height="15" fill="rgb(230,96,26)" fg:x="1034" fg:w="1"/><text x="83.1690%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="82.9992%" y="405" width="0.0802%" height="15" fill="rgb(232,10,30)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="82.9992%" y="389" width="0.0802%" height="15" fill="rgb(222,8,50)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.9992%" y="373" width="0.0802%" height="15" fill="rgb(213,81,27)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="82.9992%" y="357" width="0.0802%" height="15" fill="rgb(245,50,10)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.9992%" y="341" width="0.0802%" height="15" fill="rgb(216,100,18)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.9992%" y="325" width="0.0802%" height="15" fill="rgb(236,147,54)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.1596%" y="325" width="0.0802%" height="15" fill="rgb(205,143,26)" fg:x="1037" fg:w="1"/><text x="83.4096%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.1596%" y="309" width="0.0802%" height="15" fill="rgb(236,26,9)" fg:x="1037" fg:w="1"/><text x="83.4096%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.1596%" y="293" width="0.0802%" height="15" fill="rgb(221,165,53)" fg:x="1037" fg:w="1"/><text x="83.4096%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (95 samples, 7.62%)</title><rect x="75.7017%" y="421" width="7.6183%" height="15" fill="rgb(214,110,17)" fg:x="944" fg:w="95"/><text x="75.9517%" y="431.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="83.0794%" y="405" width="0.2406%" height="15" fill="rgb(237,197,12)" fg:x="1036" fg:w="3"/><text x="83.3294%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="83.0794%" y="389" width="0.2406%" height="15" fill="rgb(205,84,17)" fg:x="1036" fg:w="3"/><text x="83.3294%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="83.0794%" y="373" width="0.2406%" height="15" fill="rgb(237,18,45)" fg:x="1036" fg:w="3"/><text x="83.3294%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="83.0794%" y="357" width="0.2406%" height="15" fill="rgb(221,87,14)" fg:x="1036" fg:w="3"/><text x="83.3294%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="83.0794%" y="341" width="0.2406%" height="15" fill="rgb(238,186,15)" fg:x="1036" fg:w="3"/><text x="83.3294%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.2398%" y="325" width="0.0802%" height="15" fill="rgb(208,115,11)" fg:x="1038" fg:w="1"/><text x="83.4898%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="83.3200%" y="389" width="0.0802%" height="15" fill="rgb(254,175,0)" fg:x="1039" fg:w="1"/><text x="83.5700%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.3200%" y="373" width="0.0802%" height="15" fill="rgb(227,24,42)" fg:x="1039" fg:w="1"/><text x="83.5700%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.3200%" y="357" width="0.0802%" height="15" fill="rgb(223,211,37)" fg:x="1039" fg:w="1"/><text x="83.5700%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.3200%" y="341" width="0.0802%" height="15" fill="rgb(235,49,27)" fg:x="1039" fg:w="1"/><text x="83.5700%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="83.4002%" y="357" width="0.0802%" height="15" fill="rgb(254,97,51)" fg:x="1040" fg:w="1"/><text x="83.6502%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.4002%" y="341" width="0.0802%" height="15" fill="rgb(249,51,40)" fg:x="1040" fg:w="1"/><text x="83.6502%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.72%)</title><rect x="83.5605%" y="341" width="0.7217%" height="15" fill="rgb(210,128,45)" fg:x="1042" fg:w="9"/><text x="83.8105%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="83.7209%" y="325" width="0.5613%" height="15" fill="rgb(224,137,50)" fg:x="1044" fg:w="7"/><text x="83.9709%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="84.2823%" y="341" width="0.0802%" height="15" fill="rgb(242,15,9)" fg:x="1051" fg:w="1"/><text x="84.5323%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="84.2823%" y="325" width="0.0802%" height="15" fill="rgb(233,187,41)" fg:x="1051" fg:w="1"/><text x="84.5323%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="84.2823%" y="309" width="0.0802%" height="15" fill="rgb(227,2,29)" fg:x="1051" fg:w="1"/><text x="84.5323%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="84.2823%" y="293" width="0.0802%" height="15" fill="rgb(222,70,3)" fg:x="1051" fg:w="1"/><text x="84.5323%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="84.4427%" y="309" width="0.2406%" height="15" fill="rgb(213,11,42)" fg:x="1053" fg:w="3"/><text x="84.6927%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="84.5229%" y="293" width="0.1604%" height="15" fill="rgb(225,150,9)" fg:x="1054" fg:w="2"/><text x="84.7729%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="84.5229%" y="277" width="0.1604%" height="15" fill="rgb(230,162,45)" fg:x="1054" fg:w="2"/><text x="84.7729%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="84.5229%" y="261" width="0.1604%" height="15" fill="rgb(222,14,52)" fg:x="1054" fg:w="2"/><text x="84.7729%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="84.6832%" y="309" width="0.3208%" height="15" fill="rgb(254,198,14)" fg:x="1056" fg:w="4"/><text x="84.9332%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="84.9238%" y="293" width="0.0802%" height="15" fill="rgb(220,217,30)" fg:x="1059" fg:w="1"/><text x="85.1738%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (11 samples, 0.88%)</title><rect x="84.3625%" y="341" width="0.8821%" height="15" fill="rgb(215,146,41)" fg:x="1052" fg:w="11"/><text x="84.6125%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.88%)</title><rect x="84.3625%" y="325" width="0.8821%" height="15" fill="rgb(217,27,36)" fg:x="1052" fg:w="11"/><text x="84.6125%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="85.0040%" y="309" width="0.2406%" height="15" fill="rgb(219,218,39)" fg:x="1060" fg:w="3"/><text x="85.2540%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="85.0040%" y="293" width="0.2406%" height="15" fill="rgb(219,4,42)" fg:x="1060" fg:w="3"/><text x="85.2540%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="85.0040%" y="277" width="0.2406%" height="15" fill="rgb(249,119,36)" fg:x="1060" fg:w="3"/><text x="85.2540%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="86.2069%" y="229" width="0.0802%" height="15" fill="rgb(209,23,33)" fg:x="1075" fg:w="1"/><text x="86.4569%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.2871%" y="229" width="0.0802%" height="15" fill="rgb(211,10,0)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="86.3673%" y="229" width="0.2406%" height="15" fill="rgb(208,99,37)" fg:x="1077" fg:w="3"/><text x="86.6173%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="86.4475%" y="213" width="0.1604%" height="15" fill="rgb(213,132,31)" fg:x="1078" fg:w="2"/><text x="86.6975%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="86.4475%" y="197" width="0.1604%" height="15" fill="rgb(243,129,40)" fg:x="1078" fg:w="2"/><text x="86.6975%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="86.4475%" y="181" width="0.1604%" height="15" fill="rgb(210,66,33)" fg:x="1078" fg:w="2"/><text x="86.6975%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="86.6079%" y="229" width="0.1604%" height="15" fill="rgb(209,189,4)" fg:x="1080" fg:w="2"/><text x="86.8579%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.9286%" y="197" width="0.0802%" height="15" fill="rgb(214,107,37)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="87.0088%" y="197" width="0.1604%" height="15" fill="rgb(245,88,54)" fg:x="1085" fg:w="2"/><text x="87.2588%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="87.0088%" y="181" width="0.1604%" height="15" fill="rgb(205,146,20)" fg:x="1085" fg:w="2"/><text x="87.2588%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="87.0088%" y="165" width="0.1604%" height="15" fill="rgb(220,161,25)" fg:x="1085" fg:w="2"/><text x="87.2588%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="87.3296%" y="181" width="0.0802%" height="15" fill="rgb(215,152,15)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="87.3296%" y="165" width="0.0802%" height="15" fill="rgb(233,192,44)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.80%)</title><rect x="86.7682%" y="229" width="0.8019%" height="15" fill="rgb(240,170,46)" fg:x="1082" fg:w="10"/><text x="87.0182%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (10 samples, 0.80%)</title><rect x="86.7682%" y="213" width="0.8019%" height="15" fill="rgb(207,104,33)" fg:x="1082" fg:w="10"/><text x="87.0182%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="87.1692%" y="197" width="0.4010%" height="15" fill="rgb(219,21,39)" fg:x="1087" fg:w="5"/><text x="87.4192%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="87.4098%" y="181" width="0.1604%" height="15" fill="rgb(214,133,29)" fg:x="1090" fg:w="2"/><text x="87.6598%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="87.4098%" y="165" width="0.1604%" height="15" fill="rgb(226,93,6)" fg:x="1090" fg:w="2"/><text x="87.6598%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="87.4098%" y="149" width="0.1604%" height="15" fill="rgb(252,222,34)" fg:x="1090" fg:w="2"/><text x="87.6598%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="87.4098%" y="133" width="0.1604%" height="15" fill="rgb(252,92,48)" fg:x="1090" fg:w="2"/><text x="87.6598%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="87.5702%" y="229" width="0.0802%" height="15" fill="rgb(245,223,24)" fg:x="1092" fg:w="1"/><text x="87.8202%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="87.5702%" y="213" width="0.0802%" height="15" fill="rgb(205,176,3)" fg:x="1092" fg:w="1"/><text x="87.8202%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="87.5702%" y="197" width="0.0802%" height="15" fill="rgb(235,151,15)" fg:x="1092" fg:w="1"/><text x="87.8202%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (36 samples, 2.89%)</title><rect x="87.6504%" y="229" width="2.8869%" height="15" fill="rgb(237,209,11)" fg:x="1093" fg:w="36"/><text x="87.9004%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (36 samples, 2.89%)</title><rect x="87.6504%" y="213" width="2.8869%" height="15" fill="rgb(243,227,24)" fg:x="1093" fg:w="36"/><text x="87.9004%" y="223.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (36 samples, 2.89%)</title><rect x="87.6504%" y="197" width="2.8869%" height="15" fill="rgb(239,193,16)" fg:x="1093" fg:w="36"/><text x="87.9004%" y="207.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="90.5373%" y="229" width="0.1604%" height="15" fill="rgb(231,27,9)" fg:x="1129" fg:w="2"/><text x="90.7873%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="90.6977%" y="229" width="0.0802%" height="15" fill="rgb(219,169,10)" fg:x="1131" fg:w="1"/><text x="90.9477%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 5.85%)</title><rect x="85.2446%" y="325" width="5.8540%" height="15" fill="rgb(244,229,43)" fg:x="1063" fg:w="73"/><text x="85.4946%" y="335.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (73 samples, 5.85%)</title><rect x="85.2446%" y="309" width="5.8540%" height="15" fill="rgb(254,38,20)" fg:x="1063" fg:w="73"/><text x="85.4946%" y="319.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (73 samples, 5.85%)</title><rect x="85.2446%" y="293" width="5.8540%" height="15" fill="rgb(250,47,30)" fg:x="1063" fg:w="73"/><text x="85.4946%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (73 samples, 5.85%)</title><rect x="85.2446%" y="277" width="5.8540%" height="15" fill="rgb(224,124,36)" fg:x="1063" fg:w="73"/><text x="85.4946%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (73 samples, 5.85%)</title><rect x="85.2446%" y="261" width="5.8540%" height="15" fill="rgb(246,68,51)" fg:x="1063" fg:w="73"/><text x="85.4946%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (72 samples, 5.77%)</title><rect x="85.3248%" y="245" width="5.7739%" height="15" fill="rgb(253,43,49)" fg:x="1064" fg:w="72"/><text x="85.5748%" y="255.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="90.7779%" y="229" width="0.3208%" height="15" fill="rgb(219,54,36)" fg:x="1132" fg:w="4"/><text x="91.0279%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="90.8581%" y="213" width="0.2406%" height="15" fill="rgb(227,133,34)" fg:x="1133" fg:w="3"/><text x="91.1081%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="90.8581%" y="197" width="0.2406%" height="15" fill="rgb(247,227,15)" fg:x="1133" fg:w="3"/><text x="91.1081%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.4996%" y="309" width="0.0802%" height="15" fill="rgb(229,96,14)" fg:x="1141" fg:w="1"/><text x="91.7496%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.4996%" y="293" width="0.0802%" height="15" fill="rgb(220,79,17)" fg:x="1141" fg:w="1"/><text x="91.7496%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.4996%" y="277" width="0.0802%" height="15" fill="rgb(205,131,53)" fg:x="1141" fg:w="1"/><text x="91.7496%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.9006%" y="293" width="0.1604%" height="15" fill="rgb(209,50,29)" fg:x="1146" fg:w="2"/><text x="92.1506%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.9006%" y="277" width="0.1604%" height="15" fill="rgb(245,86,46)" fg:x="1146" fg:w="2"/><text x="92.1506%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="91.9006%" y="261" width="0.1604%" height="15" fill="rgb(235,66,46)" fg:x="1146" fg:w="2"/><text x="92.1506%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.56%)</title><rect x="91.5798%" y="309" width="0.5613%" height="15" fill="rgb(232,148,31)" fg:x="1142" fg:w="7"/><text x="91.8298%" y="319.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="92.0609%" y="293" width="0.0802%" height="15" fill="rgb(217,149,8)" fg:x="1148" fg:w="1"/><text x="92.3109%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (88 samples, 7.06%)</title><rect x="85.2446%" y="341" width="7.0569%" height="15" fill="rgb(209,183,11)" fg:x="1063" fg:w="88"/><text x="85.4946%" y="351.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.20%)</title><rect x="91.0986%" y="325" width="1.2029%" height="15" fill="rgb(208,55,20)" fg:x="1136" fg:w="15"/><text x="91.3486%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="92.1411%" y="309" width="0.1604%" height="15" fill="rgb(218,39,14)" fg:x="1149" fg:w="2"/><text x="92.3911%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (111 samples, 8.90%)</title><rect x="83.4804%" y="357" width="8.9014%" height="15" fill="rgb(216,169,33)" fg:x="1041" fg:w="111"/><text x="83.7304%" y="367.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="92.3015%" y="341" width="0.0802%" height="15" fill="rgb(233,80,24)" fg:x="1151" fg:w="1"/><text x="92.5515%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="92.3817%" y="325" width="0.0802%" height="15" fill="rgb(213,179,31)" fg:x="1152" fg:w="1"/><text x="92.6317%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="92.3817%" y="309" width="0.0802%" height="15" fill="rgb(209,19,5)" fg:x="1152" fg:w="1"/><text x="92.6317%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="92.3817%" y="293" width="0.0802%" height="15" fill="rgb(219,18,35)" fg:x="1152" fg:w="1"/><text x="92.6317%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="92.3817%" y="277" width="0.0802%" height="15" fill="rgb(209,169,16)" fg:x="1152" fg:w="1"/><text x="92.6317%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="92.4619%" y="325" width="0.0802%" height="15" fill="rgb(245,90,51)" fg:x="1153" fg:w="1"/><text x="92.7119%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="92.4619%" y="309" width="0.0802%" height="15" fill="rgb(220,99,45)" fg:x="1153" fg:w="1"/><text x="92.7119%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="92.3817%" y="357" width="0.2406%" height="15" fill="rgb(249,89,25)" fg:x="1152" fg:w="3"/><text x="92.6317%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="92.3817%" y="341" width="0.2406%" height="15" fill="rgb(239,193,0)" fg:x="1152" fg:w="3"/><text x="92.6317%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="92.5421%" y="325" width="0.0802%" height="15" fill="rgb(231,126,1)" fg:x="1154" fg:w="1"/><text x="92.7921%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="92.6223%" y="325" width="0.2406%" height="15" fill="rgb(243,166,3)" fg:x="1155" fg:w="3"/><text x="92.8723%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="92.6223%" y="309" width="0.2406%" height="15" fill="rgb(223,22,34)" fg:x="1155" fg:w="3"/><text x="92.8723%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="92.7025%" y="293" width="0.1604%" height="15" fill="rgb(251,52,51)" fg:x="1156" fg:w="2"/><text x="92.9525%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.7827%" y="277" width="0.0802%" height="15" fill="rgb(221,165,28)" fg:x="1157" fg:w="1"/><text x="93.0327%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (121 samples, 9.70%)</title><rect x="83.3200%" y="405" width="9.7033%" height="15" fill="rgb(218,121,47)" fg:x="1039" fg:w="121"/><text x="83.5700%" y="415.50">&lt;regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (120 samples, 9.62%)</title><rect x="83.4002%" y="389" width="9.6231%" height="15" fill="rgb(209,120,9)" fg:x="1040" fg:w="120"/><text x="83.6502%" y="399.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (120 samples, 9.62%)</title><rect x="83.4002%" y="373" width="9.6231%" height="15" fill="rgb(236,68,12)" fg:x="1040" fg:w="120"/><text x="83.6502%" y="383.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="92.6223%" y="357" width="0.4010%" height="15" fill="rgb(225,194,26)" fg:x="1155" fg:w="5"/><text x="92.8723%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="92.6223%" y="341" width="0.4010%" height="15" fill="rgb(231,84,39)" fg:x="1155" fg:w="5"/><text x="92.8723%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="92.8629%" y="325" width="0.1604%" height="15" fill="rgb(210,11,45)" fg:x="1158" fg:w="2"/><text x="93.1129%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="92.8629%" y="309" width="0.1604%" height="15" fill="rgb(224,54,52)" fg:x="1158" fg:w="2"/><text x="93.1129%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="92.9431%" y="293" width="0.0802%" height="15" fill="rgb(238,102,14)" fg:x="1159" fg:w="1"/><text x="93.1931%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="93.0233%" y="405" width="0.0802%" height="15" fill="rgb(243,160,52)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="93.0233%" y="389" width="0.0802%" height="15" fill="rgb(216,114,19)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="93.0233%" y="373" width="0.0802%" height="15" fill="rgb(244,166,37)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="93.0233%" y="357" width="0.0802%" height="15" fill="rgb(246,29,44)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.0233%" y="341" width="0.0802%" height="15" fill="rgb(215,56,53)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="93.1034%" y="389" width="0.0802%" height="15" fill="rgb(217,60,2)" fg:x="1161" fg:w="1"/><text x="93.3534%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="93.1034%" y="373" width="0.0802%" height="15" fill="rgb(207,26,24)" fg:x="1161" fg:w="1"/><text x="93.3534%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="93.1034%" y="357" width="0.0802%" height="15" fill="rgb(252,210,15)" fg:x="1161" fg:w="1"/><text x="93.3534%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.1034%" y="341" width="0.0802%" height="15" fill="rgb(253,209,26)" fg:x="1161" fg:w="1"/><text x="93.3534%" y="351.50"></text></g><g><title>indefinite::rules::number::Number::check (128 samples, 10.26%)</title><rect x="83.3200%" y="421" width="10.2646%" height="15" fill="rgb(238,170,14)" fg:x="1039" fg:w="128"/><text x="83.5700%" y="431.50">indefinite::rul..</text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="93.1034%" y="405" width="0.4812%" height="15" fill="rgb(216,178,15)" fg:x="1161" fg:w="6"/><text x="93.3534%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="93.1836%" y="389" width="0.4010%" height="15" fill="rgb(250,197,2)" fg:x="1162" fg:w="5"/><text x="93.4336%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="93.1836%" y="373" width="0.4010%" height="15" fill="rgb(212,70,42)" fg:x="1162" fg:w="5"/><text x="93.4336%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="93.2638%" y="357" width="0.3208%" height="15" fill="rgb(227,213,9)" fg:x="1163" fg:w="4"/><text x="93.5138%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="93.2638%" y="341" width="0.3208%" height="15" fill="rgb(245,99,25)" fg:x="1163" fg:w="4"/><text x="93.5138%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="93.2638%" y="325" width="0.3208%" height="15" fill="rgb(250,82,29)" fg:x="1163" fg:w="4"/><text x="93.5138%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="93.4242%" y="309" width="0.1604%" height="15" fill="rgb(241,226,54)" fg:x="1165" fg:w="2"/><text x="93.6742%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="93.5846%" y="341" width="0.0802%" height="15" fill="rgb(221,99,41)" fg:x="1167" fg:w="1"/><text x="93.8346%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.5846%" y="325" width="0.0802%" height="15" fill="rgb(213,90,21)" fg:x="1167" fg:w="1"/><text x="93.8346%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="93.5846%" y="309" width="0.0802%" height="15" fill="rgb(205,208,24)" fg:x="1167" fg:w="1"/><text x="93.8346%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.5846%" y="293" width="0.0802%" height="15" fill="rgb(246,31,12)" fg:x="1167" fg:w="1"/><text x="93.8346%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="93.8252%" y="325" width="0.4812%" height="15" fill="rgb(213,154,6)" fg:x="1170" fg:w="6"/><text x="94.0752%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="93.9054%" y="309" width="0.4010%" height="15" fill="rgb(222,163,29)" fg:x="1171" fg:w="5"/><text x="94.1554%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.3063%" y="309" width="0.0802%" height="15" fill="rgb(227,201,8)" fg:x="1176" fg:w="1"/><text x="94.5563%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="94.3063%" y="293" width="0.0802%" height="15" fill="rgb(233,9,32)" fg:x="1176" fg:w="1"/><text x="94.5563%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.3063%" y="277" width="0.0802%" height="15" fill="rgb(217,54,24)" fg:x="1176" fg:w="1"/><text x="94.5563%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.3063%" y="261" width="0.0802%" height="15" fill="rgb(235,192,0)" fg:x="1176" fg:w="1"/><text x="94.5563%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="94.3063%" y="245" width="0.0802%" height="15" fill="rgb(235,45,9)" fg:x="1176" fg:w="1"/><text x="94.5563%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.3063%" y="229" width="0.0802%" height="15" fill="rgb(246,42,40)" fg:x="1176" fg:w="1"/><text x="94.5563%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.3063%" y="213" width="0.0802%" height="15" fill="rgb(248,111,24)" fg:x="1176" fg:w="1"/><text x="94.5563%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.3063%" y="197" width="0.0802%" height="15" fill="rgb(249,65,22)" fg:x="1176" fg:w="1"/><text x="94.5563%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.4667%" y="293" width="0.0802%" height="15" fill="rgb(238,111,51)" fg:x="1178" fg:w="1"/><text x="94.7167%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="94.5469%" y="293" width="0.2406%" height="15" fill="rgb(250,118,22)" fg:x="1179" fg:w="3"/><text x="94.7969%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.7073%" y="277" width="0.0802%" height="15" fill="rgb(234,84,26)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7073%" y="261" width="0.0802%" height="15" fill="rgb(243,172,12)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7073%" y="245" width="0.0802%" height="15" fill="rgb(236,150,49)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (15 samples, 1.20%)</title><rect x="93.6648%" y="341" width="1.2029%" height="15" fill="rgb(225,197,26)" fg:x="1168" fg:w="15"/><text x="93.9148%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.56%)</title><rect x="94.3063%" y="325" width="0.5613%" height="15" fill="rgb(214,17,42)" fg:x="1176" fg:w="7"/><text x="94.5563%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="94.3865%" y="309" width="0.4812%" height="15" fill="rgb(224,165,40)" fg:x="1177" fg:w="6"/><text x="94.6365%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="94.7875%" y="293" width="0.0802%" height="15" fill="rgb(246,100,4)" fg:x="1182" fg:w="1"/><text x="95.0375%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="94.9479%" y="293" width="0.1604%" height="15" fill="rgb(222,103,0)" fg:x="1184" fg:w="2"/><text x="95.1979%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.9479%" y="277" width="0.1604%" height="15" fill="rgb(227,189,26)" fg:x="1184" fg:w="2"/><text x="95.1979%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.9479%" y="261" width="0.1604%" height="15" fill="rgb(214,202,17)" fg:x="1184" fg:w="2"/><text x="95.1979%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="94.9479%" y="245" width="0.1604%" height="15" fill="rgb(229,111,3)" fg:x="1184" fg:w="2"/><text x="95.1979%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="94.8677%" y="309" width="0.4010%" height="15" fill="rgb(229,172,15)" fg:x="1183" fg:w="5"/><text x="95.1177%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="95.1083%" y="293" width="0.1604%" height="15" fill="rgb(230,224,35)" fg:x="1186" fg:w="2"/><text x="95.3583%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.1083%" y="277" width="0.1604%" height="15" fill="rgb(251,141,6)" fg:x="1186" fg:w="2"/><text x="95.3583%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.1083%" y="261" width="0.1604%" height="15" fill="rgb(225,208,6)" fg:x="1186" fg:w="2"/><text x="95.3583%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="95.1083%" y="245" width="0.1604%" height="15" fill="rgb(246,181,16)" fg:x="1186" fg:w="2"/><text x="95.3583%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="94.8677%" y="341" width="0.4812%" height="15" fill="rgb(227,129,36)" fg:x="1183" fg:w="6"/><text x="95.1177%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="94.8677%" y="325" width="0.4812%" height="15" fill="rgb(248,117,24)" fg:x="1183" fg:w="6"/><text x="95.1177%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.2686%" y="309" width="0.0802%" height="15" fill="rgb(214,185,35)" fg:x="1188" fg:w="1"/><text x="95.5186%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="95.3488%" y="309" width="0.0802%" height="15" fill="rgb(236,150,34)" fg:x="1189" fg:w="1"/><text x="95.5988%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="95.3488%" y="293" width="0.0802%" height="15" fill="rgb(243,228,27)" fg:x="1189" fg:w="1"/><text x="95.5988%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="95.5092%" y="293" width="0.0802%" height="15" fill="rgb(245,77,44)" fg:x="1191" fg:w="1"/><text x="95.7592%" y="303.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="95.5092%" y="277" width="0.0802%" height="15" fill="rgb(235,214,42)" fg:x="1191" fg:w="1"/><text x="95.7592%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.5092%" y="261" width="0.0802%" height="15" fill="rgb(221,74,3)" fg:x="1191" fg:w="1"/><text x="95.7592%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (26 samples, 2.09%)</title><rect x="93.5846%" y="389" width="2.0850%" height="15" fill="rgb(206,121,29)" fg:x="1167" fg:w="26"/><text x="93.8346%" y="399.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (26 samples, 2.09%)</title><rect x="93.5846%" y="373" width="2.0850%" height="15" fill="rgb(249,131,53)" fg:x="1167" fg:w="26"/><text x="93.8346%" y="383.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (26 samples, 2.09%)</title><rect x="93.5846%" y="357" width="2.0850%" height="15" fill="rgb(236,170,29)" fg:x="1167" fg:w="26"/><text x="93.8346%" y="367.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="95.3488%" y="341" width="0.3208%" height="15" fill="rgb(247,96,15)" fg:x="1189" fg:w="4"/><text x="95.5988%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="95.3488%" y="325" width="0.3208%" height="15" fill="rgb(211,210,7)" fg:x="1189" fg:w="4"/><text x="95.5988%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="95.4290%" y="309" width="0.2406%" height="15" fill="rgb(240,88,50)" fg:x="1190" fg:w="3"/><text x="95.6790%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.5894%" y="293" width="0.0802%" height="15" fill="rgb(209,229,26)" fg:x="1192" fg:w="1"/><text x="95.8394%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.5894%" y="277" width="0.0802%" height="15" fill="rgb(210,68,23)" fg:x="1192" fg:w="1"/><text x="95.8394%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.6696%" y="389" width="0.0802%" height="15" fill="rgb(229,180,13)" fg:x="1193" fg:w="1"/><text x="95.9196%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.6696%" y="373" width="0.0802%" height="15" fill="rgb(236,53,44)" fg:x="1193" fg:w="1"/><text x="95.9196%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="95.6696%" y="357" width="0.0802%" height="15" fill="rgb(244,214,29)" fg:x="1193" fg:w="1"/><text x="95.9196%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.6696%" y="341" width="0.0802%" height="15" fill="rgb(220,75,29)" fg:x="1193" fg:w="1"/><text x="95.9196%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.6696%" y="325" width="0.0802%" height="15" fill="rgb(214,183,37)" fg:x="1193" fg:w="1"/><text x="95.9196%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.6696%" y="309" width="0.0802%" height="15" fill="rgb(239,117,29)" fg:x="1193" fg:w="1"/><text x="95.9196%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.7498%" y="373" width="0.0802%" height="15" fill="rgb(237,171,35)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="95.7498%" y="389" width="0.1604%" height="15" fill="rgb(229,178,53)" fg:x="1194" fg:w="2"/><text x="95.9998%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.8300%" y="373" width="0.0802%" height="15" fill="rgb(210,102,19)" fg:x="1195" fg:w="1"/><text x="96.0800%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.8300%" y="357" width="0.0802%" height="15" fill="rgb(235,127,22)" fg:x="1195" fg:w="1"/><text x="96.0800%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="95.8300%" y="341" width="0.0802%" height="15" fill="rgb(244,31,31)" fg:x="1195" fg:w="1"/><text x="96.0800%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.8300%" y="325" width="0.0802%" height="15" fill="rgb(231,43,21)" fg:x="1195" fg:w="1"/><text x="96.0800%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.8300%" y="309" width="0.0802%" height="15" fill="rgb(217,131,35)" fg:x="1195" fg:w="1"/><text x="96.0800%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.9102%" y="325" width="0.0802%" height="15" fill="rgb(221,149,4)" fg:x="1196" fg:w="1"/><text x="96.1602%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="95.9102%" y="341" width="0.3208%" height="15" fill="rgb(232,170,28)" fg:x="1196" fg:w="4"/><text x="96.1602%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="95.9904%" y="325" width="0.2406%" height="15" fill="rgb(238,56,10)" fg:x="1197" fg:w="3"/><text x="96.2404%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.1508%" y="309" width="0.0802%" height="15" fill="rgb(235,196,14)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.1508%" y="293" width="0.0802%" height="15" fill="rgb(216,45,48)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.1508%" y="277" width="0.0802%" height="15" fill="rgb(238,213,17)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (260 samples, 20.85%)</title><rect x="75.4611%" y="501" width="20.8500%" height="15" fill="rgb(212,13,2)" fg:x="941" fg:w="260"/><text x="75.7111%" y="511.50">&lt;&amp;kernel::model::entry::Entry as ..</text></g><g><title>plugins_core::looking::model::qualify_name (258 samples, 20.69%)</title><rect x="75.6215%" y="485" width="20.6897%" height="15" fill="rgb(240,114,20)" fg:x="943" fg:w="258"/><text x="75.8715%" y="495.50">plugins_core::looking::model::qua..</text></g><g><title>indefinite::indefinite (258 samples, 20.69%)</title><rect x="75.6215%" y="469" width="20.6897%" height="15" fill="rgb(228,41,40)" fg:x="943" fg:w="258"/><text x="75.8715%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (258 samples, 20.69%)</title><rect x="75.6215%" y="453" width="20.6897%" height="15" fill="rgb(244,132,35)" fg:x="943" fg:w="258"/><text x="75.8715%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (257 samples, 20.61%)</title><rect x="75.7017%" y="437" width="20.6095%" height="15" fill="rgb(253,189,4)" fg:x="944" fg:w="257"/><text x="75.9517%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (34 samples, 2.73%)</title><rect x="93.5846%" y="421" width="2.7265%" height="15" fill="rgb(224,37,19)" fg:x="1167" fg:w="34"/><text x="93.8346%" y="431.50">in..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (34 samples, 2.73%)</title><rect x="93.5846%" y="405" width="2.7265%" height="15" fill="rgb(235,223,18)" fg:x="1167" fg:w="34"/><text x="93.8346%" y="415.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="95.9102%" y="389" width="0.4010%" height="15" fill="rgb(235,163,25)" fg:x="1196" fg:w="5"/><text x="96.1602%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="95.9102%" y="373" width="0.4010%" height="15" fill="rgb(217,145,28)" fg:x="1196" fg:w="5"/><text x="96.1602%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="95.9102%" y="357" width="0.4010%" height="15" fill="rgb(223,223,32)" fg:x="1196" fg:w="5"/><text x="96.1602%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="96.2310%" y="341" width="0.0802%" height="15" fill="rgb(227,189,39)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="96.2310%" y="325" width="0.0802%" height="15" fill="rgb(248,10,22)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.2310%" y="309" width="0.0802%" height="15" fill="rgb(248,46,39)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.2310%" y="293" width="0.0802%" height="15" fill="rgb(248,113,48)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2310%" y="277" width="0.0802%" height="15" fill="rgb(245,16,25)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="287.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="96.3111%" y="469" width="0.0802%" height="15" fill="rgb(249,152,16)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="479.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="96.3111%" y="453" width="0.0802%" height="15" fill="rgb(250,16,1)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="463.50"></text></g><g><title>kernel::model::EntityRef::into_entry (2 samples, 0.16%)</title><rect x="96.3111%" y="501" width="0.1604%" height="15" fill="rgb(249,138,3)" fg:x="1201" fg:w="2"/><text x="96.5611%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="96.3111%" y="485" width="0.1604%" height="15" fill="rgb(227,71,41)" fg:x="1201" fg:w="2"/><text x="96.5611%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="96.3913%" y="469" width="0.0802%" height="15" fill="rgb(209,184,23)" fg:x="1202" fg:w="1"/><text x="96.6413%" y="479.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (266 samples, 21.33%)</title><rect x="75.3007%" y="533" width="21.3312%" height="15" fill="rgb(223,215,31)" fg:x="939" fg:w="266"/><text x="75.5507%" y="543.50">&lt;plugins_core::looking::actions::L..</text></g><g><title>plugins_core::looking::model::new_area_observation (266 samples, 21.33%)</title><rect x="75.3007%" y="517" width="21.3312%" height="15" fill="rgb(210,146,28)" fg:x="939" fg:w="266"/><text x="75.5507%" y="527.50">plugins_core::looking::model::new_..</text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="96.4715%" y="501" width="0.1604%" height="15" fill="rgb(209,183,41)" fg:x="1203" fg:w="2"/><text x="96.7215%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="96.4715%" y="485" width="0.1604%" height="15" fill="rgb(209,224,45)" fg:x="1203" fg:w="2"/><text x="96.7215%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="96.4715%" y="469" width="0.1604%" height="15" fill="rgb(224,209,51)" fg:x="1203" fg:w="2"/><text x="96.7215%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="96.4715%" y="453" width="0.1604%" height="15" fill="rgb(223,17,39)" fg:x="1203" fg:w="2"/><text x="96.7215%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="96.4715%" y="437" width="0.1604%" height="15" fill="rgb(234,204,37)" fg:x="1203" fg:w="2"/><text x="96.7215%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="96.4715%" y="421" width="0.1604%" height="15" fill="rgb(236,120,5)" fg:x="1203" fg:w="2"/><text x="96.7215%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="96.4715%" y="405" width="0.1604%" height="15" fill="rgb(248,97,27)" fg:x="1203" fg:w="2"/><text x="96.7215%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="96.5517%" y="389" width="0.0802%" height="15" fill="rgb(240,66,17)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.5517%" y="373" width="0.0802%" height="15" fill="rgb(210,79,3)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.5517%" y="357" width="0.0802%" height="15" fill="rgb(214,176,27)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.5517%" y="341" width="0.0802%" height="15" fill="rgb(235,185,3)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.5517%" y="325" width="0.0802%" height="15" fill="rgb(227,24,12)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.5517%" y="309" width="0.0802%" height="15" fill="rgb(252,169,48)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.5517%" y="293" width="0.0802%" height="15" fill="rgb(212,65,1)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.5517%" y="277" width="0.0802%" height="15" fill="rgb(242,39,24)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.5517%" y="261" width="0.0802%" height="15" fill="rgb(249,32,23)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.5517%" y="245" width="0.0802%" height="15" fill="rgb(251,195,23)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.5517%" y="229" width="0.0802%" height="15" fill="rgb(236,174,8)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.5517%" y="213" width="0.0802%" height="15" fill="rgb(220,197,8)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.5517%" y="197" width="0.0802%" height="15" fill="rgb(240,108,37)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="207.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="96.6319%" y="421" width="0.1604%" height="15" fill="rgb(232,176,24)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="96.6319%" y="405" width="0.1604%" height="15" fill="rgb(243,35,29)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="96.6319%" y="389" width="0.1604%" height="15" fill="rgb(210,37,18)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.6319%" y="373" width="0.1604%" height="15" fill="rgb(224,184,40)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="96.6319%" y="357" width="0.1604%" height="15" fill="rgb(236,39,29)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.6319%" y="341" width="0.1604%" height="15" fill="rgb(232,48,39)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.7121%" y="325" width="0.0802%" height="15" fill="rgb(236,34,42)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.7121%" y="309" width="0.0802%" height="15" fill="rgb(243,106,37)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.7121%" y="293" width="0.0802%" height="15" fill="rgb(218,96,6)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="96.7121%" y="277" width="0.0802%" height="15" fill="rgb(235,130,12)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="96.7121%" y="261" width="0.0802%" height="15" fill="rgb(231,95,0)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="96.6319%" y="469" width="0.2406%" height="15" fill="rgb(228,12,23)" fg:x="1205" fg:w="3"/><text x="96.8819%" y="479.50"></text></g><g><title>engine::internal::Entities::prepare_entity (3 samples, 0.24%)</title><rect x="96.6319%" y="453" width="0.2406%" height="15" fill="rgb(216,12,1)" fg:x="1205" fg:w="3"/><text x="96.8819%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="96.6319%" y="437" width="0.2406%" height="15" fill="rgb(219,59,3)" fg:x="1205" fg:w="3"/><text x="96.8819%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="96.7923%" y="421" width="0.0802%" height="15" fill="rgb(215,208,46)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7923%" y="405" width="0.0802%" height="15" fill="rgb(254,224,29)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.7923%" y="389" width="0.0802%" height="15" fill="rgb(232,14,29)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7923%" y="373" width="0.0802%" height="15" fill="rgb(208,45,52)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.7923%" y="357" width="0.0802%" height="15" fill="rgb(234,191,28)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7923%" y="341" width="0.0802%" height="15" fill="rgb(244,67,43)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="351.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (4 samples, 0.32%)</title><rect x="96.6319%" y="533" width="0.3208%" height="15" fill="rgb(236,189,24)" fg:x="1205" fg:w="4"/><text x="96.8819%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="96.6319%" y="517" width="0.3208%" height="15" fill="rgb(239,214,33)" fg:x="1205" fg:w="4"/><text x="96.8819%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="96.6319%" y="501" width="0.3208%" height="15" fill="rgb(226,176,41)" fg:x="1205" fg:w="4"/><text x="96.8819%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.32%)</title><rect x="96.6319%" y="485" width="0.3208%" height="15" fill="rgb(248,47,8)" fg:x="1205" fg:w="4"/><text x="96.8819%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.8725%" y="469" width="0.0802%" height="15" fill="rgb(218,81,44)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.8725%" y="453" width="0.0802%" height="15" fill="rgb(213,98,6)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.8725%" y="437" width="0.0802%" height="15" fill="rgb(222,85,22)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.8725%" y="421" width="0.0802%" height="15" fill="rgb(239,46,39)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.8725%" y="405" width="0.0802%" height="15" fill="rgb(237,12,29)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.9527%" y="421" width="0.0802%" height="15" fill="rgb(214,77,8)" fg:x="1209" fg:w="1"/><text x="97.2027%" y="431.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="97.0329%" y="421" width="0.1604%" height="15" fill="rgb(217,168,37)" fg:x="1210" fg:w="2"/><text x="97.2829%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="96.9527%" y="437" width="0.3208%" height="15" fill="rgb(221,217,23)" fg:x="1209" fg:w="4"/><text x="97.2027%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="97.1933%" y="421" width="0.0802%" height="15" fill="rgb(243,229,36)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="96.9527%" y="469" width="0.4010%" height="15" fill="rgb(251,163,40)" fg:x="1209" fg:w="5"/><text x="97.2027%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="96.9527%" y="453" width="0.4010%" height="15" fill="rgb(237,222,12)" fg:x="1209" fg:w="5"/><text x="97.2027%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.2735%" y="437" width="0.0802%" height="15" fill="rgb(248,132,6)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (6 samples, 0.48%)</title><rect x="96.9527%" y="501" width="0.4812%" height="15" fill="rgb(227,167,50)" fg:x="1209" fg:w="6"/><text x="97.2027%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="96.9527%" y="485" width="0.4812%" height="15" fill="rgb(242,84,37)" fg:x="1209" fg:w="6"/><text x="97.2027%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3536%" y="469" width="0.0802%" height="15" fill="rgb(212,4,50)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="479.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="97.5140%" y="469" width="0.0802%" height="15" fill="rgb(230,228,32)" fg:x="1216" fg:w="1"/><text x="97.7640%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="97.5140%" y="453" width="0.0802%" height="15" fill="rgb(248,217,23)" fg:x="1216" fg:w="1"/><text x="97.7640%" y="463.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (2 samples, 0.16%)</title><rect x="97.5942%" y="421" width="0.1604%" height="15" fill="rgb(238,197,32)" fg:x="1217" fg:w="2"/><text x="97.8442%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="97.6744%" y="405" width="0.0802%" height="15" fill="rgb(236,106,1)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6744%" y="389" width="0.0802%" height="15" fill="rgb(219,228,13)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="399.50"></text></g><g><title>plugins_core::tools::get_contained_keys (1 samples, 0.08%)</title><rect x="97.7546%" y="421" width="0.0802%" height="15" fill="rgb(238,30,35)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.7546%" y="405" width="0.0802%" height="15" fill="rgb(236,70,23)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="415.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.7546%" y="389" width="0.0802%" height="15" fill="rgb(249,104,48)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="399.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="97.7546%" y="373" width="0.0802%" height="15" fill="rgb(254,117,50)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="97.7546%" y="357" width="0.0802%" height="15" fill="rgb(223,152,4)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.7546%" y="341" width="0.0802%" height="15" fill="rgb(245,6,2)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="97.7546%" y="325" width="0.0802%" height="15" fill="rgb(249,150,24)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="97.7546%" y="309" width="0.0802%" height="15" fill="rgb(228,185,42)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="319.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="97.7546%" y="293" width="0.0802%" height="15" fill="rgb(226,39,33)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="97.7546%" y="277" width="0.0802%" height="15" fill="rgb(221,166,19)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="287.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.7546%" y="261" width="0.0802%" height="15" fill="rgb(209,109,2)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.7546%" y="245" width="0.0802%" height="15" fill="rgb(252,216,26)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7546%" y="229" width="0.0802%" height="15" fill="rgb(227,173,36)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.7546%" y="213" width="0.0802%" height="15" fill="rgb(209,90,7)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="97.5942%" y="453" width="0.3208%" height="15" fill="rgb(250,194,11)" fg:x="1217" fg:w="4"/><text x="97.8442%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="97.5942%" y="437" width="0.3208%" height="15" fill="rgb(220,72,50)" fg:x="1217" fg:w="4"/><text x="97.8442%" y="447.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="97.8348%" y="421" width="0.0802%" height="15" fill="rgb(222,106,48)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.8348%" y="405" width="0.0802%" height="15" fill="rgb(216,220,45)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8348%" y="389" width="0.0802%" height="15" fill="rgb(234,112,18)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8348%" y="373" width="0.0802%" height="15" fill="rgb(206,179,9)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.8348%" y="357" width="0.0802%" height="15" fill="rgb(215,115,40)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.8348%" y="341" width="0.0802%" height="15" fill="rgb(222,69,34)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.8348%" y="325" width="0.0802%" height="15" fill="rgb(209,161,10)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8348%" y="309" width="0.0802%" height="15" fill="rgb(217,6,38)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8348%" y="293" width="0.0802%" height="15" fill="rgb(229,229,48)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.8348%" y="277" width="0.0802%" height="15" fill="rgb(225,21,28)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.8348%" y="261" width="0.0802%" height="15" fill="rgb(206,33,13)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.8348%" y="245" width="0.0802%" height="15" fill="rgb(242,178,17)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.8348%" y="229" width="0.0802%" height="15" fill="rgb(220,162,5)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8348%" y="213" width="0.0802%" height="15" fill="rgb(210,33,43)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9952%" y="405" width="0.0802%" height="15" fill="rgb(216,116,54)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9952%" y="389" width="0.0802%" height="15" fill="rgb(249,92,24)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.9952%" y="373" width="0.0802%" height="15" fill="rgb(231,189,14)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.9952%" y="357" width="0.0802%" height="15" fill="rgb(230,8,41)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.9952%" y="341" width="0.0802%" height="15" fill="rgb(249,7,27)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9952%" y="325" width="0.0802%" height="15" fill="rgb(232,86,5)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9952%" y="309" width="0.0802%" height="15" fill="rgb(224,175,18)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.9952%" y="293" width="0.0802%" height="15" fill="rgb(220,129,12)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.9952%" y="277" width="0.0802%" height="15" fill="rgb(210,19,36)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.9952%" y="261" width="0.0802%" height="15" fill="rgb(219,96,14)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.9952%" y="245" width="0.0802%" height="15" fill="rgb(249,106,1)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9952%" y="229" width="0.0802%" height="15" fill="rgb(249,155,20)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="98.0754%" y="405" width="0.1604%" height="15" fill="rgb(244,168,9)" fg:x="1223" fg:w="2"/><text x="98.3254%" y="415.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="98.0754%" y="389" width="0.1604%" height="15" fill="rgb(216,23,50)" fg:x="1223" fg:w="2"/><text x="98.3254%" y="399.50"></text></g><g><title>engine::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="98.0754%" y="373" width="0.1604%" height="15" fill="rgb(224,219,20)" fg:x="1223" fg:w="2"/><text x="98.3254%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.4763%" y="245" width="0.0802%" height="15" fill="rgb(222,156,15)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.4763%" y="229" width="0.0802%" height="15" fill="rgb(231,97,17)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.4763%" y="213" width="0.0802%" height="15" fill="rgb(218,70,48)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.4763%" y="197" width="0.0802%" height="15" fill="rgb(212,196,52)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.4763%" y="181" width="0.0802%" height="15" fill="rgb(243,203,18)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.4763%" y="165" width="0.0802%" height="15" fill="rgb(252,125,41)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="98.5565%" y="245" width="0.1604%" height="15" fill="rgb(223,180,33)" fg:x="1229" fg:w="2"/><text x="98.8065%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.6367%" y="229" width="0.0802%" height="15" fill="rgb(254,159,46)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.40%)</title><rect x="98.3962%" y="293" width="0.4010%" height="15" fill="rgb(254,38,10)" fg:x="1227" fg:w="5"/><text x="98.6462%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.4763%" y="277" width="0.3208%" height="15" fill="rgb(208,217,32)" fg:x="1228" fg:w="4"/><text x="98.7263%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="98.4763%" y="261" width="0.3208%" height="15" fill="rgb(221,120,13)" fg:x="1228" fg:w="4"/><text x="98.7263%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7169%" y="245" width="0.0802%" height="15" fill="rgb(246,54,52)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7169%" y="229" width="0.0802%" height="15" fill="rgb(242,34,25)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.56%)</title><rect x="98.3160%" y="309" width="0.5613%" height="15" fill="rgb(247,209,9)" fg:x="1226" fg:w="7"/><text x="98.5660%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7971%" y="293" width="0.0802%" height="15" fill="rgb(228,71,26)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.7971%" y="277" width="0.0802%" height="15" fill="rgb(222,145,49)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.72%)</title><rect x="98.2358%" y="357" width="0.7217%" height="15" fill="rgb(218,121,17)" fg:x="1225" fg:w="9"/><text x="98.4858%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (9 samples, 0.72%)</title><rect x="98.2358%" y="341" width="0.7217%" height="15" fill="rgb(244,50,7)" fg:x="1225" fg:w="9"/><text x="98.4858%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="98.3160%" y="325" width="0.6415%" height="15" fill="rgb(246,229,37)" fg:x="1226" fg:w="8"/><text x="98.5660%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.8773%" y="309" width="0.0802%" height="15" fill="rgb(225,18,5)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8773%" y="293" width="0.0802%" height="15" fill="rgb(213,204,8)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.80%)</title><rect x="98.2358%" y="389" width="0.8019%" height="15" fill="rgb(238,103,6)" fg:x="1225" fg:w="10"/><text x="98.4858%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="98.2358%" y="373" width="0.8019%" height="15" fill="rgb(222,25,35)" fg:x="1225" fg:w="10"/><text x="98.4858%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.9575%" y="357" width="0.0802%" height="15" fill="rgb(213,203,35)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9575%" y="341" width="0.0802%" height="15" fill="rgb(221,79,53)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0377%" y="341" width="0.0802%" height="15" fill="rgb(243,200,35)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1179%" y="341" width="0.0802%" height="15" fill="rgb(248,60,25)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.1981%" y="277" width="0.0802%" height="15" fill="rgb(227,53,46)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="287.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="99.1981%" y="261" width="0.0802%" height="15" fill="rgb(216,120,32)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.1981%" y="245" width="0.0802%" height="15" fill="rgb(220,134,1)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="255.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="99.1981%" y="341" width="0.1604%" height="15" fill="rgb(237,168,5)" fg:x="1237" fg:w="2"/><text x="99.4481%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="99.1981%" y="325" width="0.1604%" height="15" fill="rgb(231,100,33)" fg:x="1237" fg:w="2"/><text x="99.4481%" y="335.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="99.1981%" y="309" width="0.1604%" height="15" fill="rgb(236,177,47)" fg:x="1237" fg:w="2"/><text x="99.4481%" y="319.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="99.1981%" y="293" width="0.1604%" height="15" fill="rgb(235,7,49)" fg:x="1237" fg:w="2"/><text x="99.4481%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2783%" y="277" width="0.0802%" height="15" fill="rgb(232,119,22)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3585%" y="293" width="0.0802%" height="15" fill="rgb(254,73,53)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3585%" y="277" width="0.0802%" height="15" fill="rgb(251,35,20)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3585%" y="261" width="0.0802%" height="15" fill="rgb(241,119,20)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (24 samples, 1.92%)</title><rect x="97.5942%" y="469" width="1.9246%" height="15" fill="rgb(207,102,14)" fg:x="1217" fg:w="24"/><text x="97.8442%" y="479.50">c..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (20 samples, 1.60%)</title><rect x="97.9150%" y="453" width="1.6038%" height="15" fill="rgb(248,201,50)" fg:x="1221" fg:w="20"/><text x="98.1650%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (19 samples, 1.52%)</title><rect x="97.9952%" y="437" width="1.5237%" height="15" fill="rgb(222,185,44)" fg:x="1222" fg:w="19"/><text x="98.2452%" y="447.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (19 samples, 1.52%)</title><rect x="97.9952%" y="421" width="1.5237%" height="15" fill="rgb(218,107,18)" fg:x="1222" fg:w="19"/><text x="98.2452%" y="431.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (16 samples, 1.28%)</title><rect x="98.2358%" y="405" width="1.2831%" height="15" fill="rgb(237,177,39)" fg:x="1225" fg:w="16"/><text x="98.4858%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (6 samples, 0.48%)</title><rect x="99.0377%" y="389" width="0.4812%" height="15" fill="rgb(246,69,6)" fg:x="1235" fg:w="6"/><text x="99.2877%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="99.0377%" y="373" width="0.4812%" height="15" fill="rgb(234,208,37)" fg:x="1235" fg:w="6"/><text x="99.2877%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="99.0377%" y="357" width="0.4812%" height="15" fill="rgb(225,4,6)" fg:x="1235" fg:w="6"/><text x="99.2877%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="99.3585%" y="341" width="0.1604%" height="15" fill="rgb(233,45,0)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="99.3585%" y="325" width="0.1604%" height="15" fill="rgb(226,136,5)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="99.3585%" y="309" width="0.1604%" height="15" fill="rgb(211,91,47)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="319.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.4387%" y="293" width="0.0802%" height="15" fill="rgb(242,88,51)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.4387%" y="277" width="0.0802%" height="15" fill="rgb(230,91,28)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="287.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.4387%" y="261" width="0.0802%" height="15" fill="rgb(254,186,29)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="271.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (303 samples, 24.30%)</title><rect x="75.3007%" y="549" width="24.2983%" height="15" fill="rgb(238,6,4)" fg:x="939" fg:w="303"/><text x="75.5507%" y="559.50">&lt;engine::perform::StandardPerformer as ..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (33 samples, 2.65%)</title><rect x="96.9527%" y="533" width="2.6464%" height="15" fill="rgb(221,151,16)" fg:x="1209" fg:w="33"/><text x="97.2027%" y="543.50">ke..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (33 samples, 2.65%)</title><rect x="96.9527%" y="517" width="2.6464%" height="15" fill="rgb(251,143,52)" fg:x="1209" fg:w="33"/><text x="97.2027%" y="527.50">&lt;p..</text></g><g><title>plugins_rpc::querying::have_surroundings (27 samples, 2.17%)</title><rect x="97.4338%" y="501" width="2.1652%" height="15" fill="rgb(206,90,15)" fg:x="1215" fg:w="27"/><text x="97.6838%" y="511.50">p..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (27 samples, 2.17%)</title><rect x="97.4338%" y="485" width="2.1652%" height="15" fill="rgb(218,35,8)" fg:x="1215" fg:w="27"/><text x="97.6838%" y="495.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5188%" y="469" width="0.0802%" height="15" fill="rgb(239,215,6)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.5188%" y="453" width="0.0802%" height="15" fill="rgb(245,116,39)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.5188%" y="437" width="0.0802%" height="15" fill="rgb(242,65,28)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5990%" y="373" width="0.0802%" height="15" fill="rgb(252,132,53)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5990%" y="357" width="0.0802%" height="15" fill="rgb(224,159,50)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5990%" y="341" width="0.0802%" height="15" fill="rgb(224,93,4)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5990%" y="325" width="0.0802%" height="15" fill="rgb(208,81,34)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.5990%" y="309" width="0.0802%" height="15" fill="rgb(233,92,54)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="99.5990%" y="293" width="0.0802%" height="15" fill="rgb(237,21,14)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.5990%" y="421" width="0.1604%" height="15" fill="rgb(249,128,51)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5990%" y="405" width="0.1604%" height="15" fill="rgb(223,129,24)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.5990%" y="389" width="0.1604%" height="15" fill="rgb(231,168,25)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6792%" y="373" width="0.0802%" height="15" fill="rgb(224,39,20)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6792%" y="357" width="0.0802%" height="15" fill="rgb(225,152,53)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="367.50"></text></g><g><title>engine::internal::Entities::prepare_entity (3 samples, 0.24%)</title><rect x="99.5990%" y="517" width="0.2406%" height="15" fill="rgb(252,17,24)" fg:x="1242" fg:w="3"/><text x="99.8490%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="99.5990%" y="501" width="0.2406%" height="15" fill="rgb(250,114,30)" fg:x="1242" fg:w="3"/><text x="99.8490%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="99.5990%" y="485" width="0.2406%" height="15" fill="rgb(229,5,4)" fg:x="1242" fg:w="3"/><text x="99.8490%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="99.5990%" y="469" width="0.2406%" height="15" fill="rgb(225,176,49)" fg:x="1242" fg:w="3"/><text x="99.8490%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.5990%" y="453" width="0.2406%" height="15" fill="rgb(224,221,49)" fg:x="1242" fg:w="3"/><text x="99.8490%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5990%" y="437" width="0.2406%" height="15" fill="rgb(253,169,27)" fg:x="1242" fg:w="3"/><text x="99.8490%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7594%" y="421" width="0.0802%" height="15" fill="rgb(211,206,16)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7594%" y="405" width="0.0802%" height="15" fill="rgb(244,87,35)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.7594%" y="389" width="0.0802%" height="15" fill="rgb(246,28,10)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.7594%" y="373" width="0.0802%" height="15" fill="rgb(229,12,44)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="383.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (307 samples, 24.62%)</title><rect x="75.3007%" y="565" width="24.6191%" height="15" fill="rgb(210,145,37)" fg:x="939" fg:w="307"/><text x="75.5507%" y="575.50">&lt;engine::perform::StandardPerformer as ..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (4 samples, 0.32%)</title><rect x="99.5990%" y="549" width="0.3208%" height="15" fill="rgb(227,112,52)" fg:x="1242" fg:w="4"/><text x="99.8490%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.32%)</title><rect x="99.5990%" y="533" width="0.3208%" height="15" fill="rgb(238,155,34)" fg:x="1242" fg:w="4"/><text x="99.8490%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.8396%" y="517" width="0.0802%" height="15" fill="rgb(239,226,36)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.8396%" y="501" width="0.0802%" height="15" fill="rgb(230,16,23)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.8396%" y="485" width="0.0802%" height="15" fill="rgb(236,171,36)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8396%" y="469" width="0.0802%" height="15" fill="rgb(221,22,14)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8396%" y="453" width="0.0802%" height="15" fill="rgb(242,43,11)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8396%" y="437" width="0.0802%" height="15" fill="rgb(232,69,23)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.8396%" y="421" width="0.0802%" height="15" fill="rgb(216,180,54)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8396%" y="405" width="0.0802%" height="15" fill="rgb(216,5,24)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8396%" y="389" width="0.0802%" height="15" fill="rgb(225,89,9)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="399.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8396%" y="373" width="0.0802%" height="15" fill="rgb(243,75,33)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.8396%" y="357" width="0.0802%" height="15" fill="rgb(247,141,45)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8396%" y="341" width="0.0802%" height="15" fill="rgb(232,177,36)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8396%" y="325" width="0.0802%" height="15" fill="rgb(219,125,36)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="335.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8396%" y="309" width="0.0802%" height="15" fill="rgb(227,94,9)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="319.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="99.8396%" y="293" width="0.0802%" height="15" fill="rgb(240,34,52)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.8396%" y="277" width="0.0802%" height="15" fill="rgb(216,45,12)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.8396%" y="261" width="0.0802%" height="15" fill="rgb(246,21,19)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="99.8396%" y="245" width="0.0802%" height="15" fill="rgb(213,98,42)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="99.8396%" y="229" width="0.0802%" height="15" fill="rgb(250,136,47)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="99.8396%" y="213" width="0.0802%" height="15" fill="rgb(251,124,27)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="99.8396%" y="197" width="0.0802%" height="15" fill="rgb(229,180,14)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="207.50"></text></g><g><title>all (1,247 samples, 100%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(245,216,25)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="959.50"></text></g><g><title>simple-15eb1580 (1,247 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(251,43,5)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="943.50">simple-15eb1580</text></g><g><title>_start (1,247 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(250,128,24)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="927.50">_start</text></g><g><title>__libc_start_main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(217,117,27)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="911.50">__libc_start_main</text></g><g><title>main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(245,147,4)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="895.50">main</text></g><g><title>std::rt::lang_start_internal (1,247 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(242,201,35)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(218,181,1)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(222,6,29)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(208,186,3)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(216,36,26)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="815.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(248,201,23)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(251,170,31)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(207,110,25)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="767.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,247 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(250,54,15)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="751.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(227,68,33)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="735.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,247 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(238,34,41)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="719.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(220,11,15)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="703.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,247 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(246,111,35)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="687.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,247 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(209,88,53)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="671.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (372 samples, 29.83%)</title><rect x="70.1684%" y="645" width="29.8316%" height="15" fill="rgb(231,185,47)" fg:x="875" fg:w="372"/><text x="70.4184%" y="655.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterio..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (372 samples, 29.83%)</title><rect x="70.1684%" y="629" width="29.8316%" height="15" fill="rgb(233,154,1)" fg:x="875" fg:w="372"/><text x="70.4184%" y="639.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (372 samples, 29.83%)</title><rect x="70.1684%" y="613" width="29.8316%" height="15" fill="rgb(225,15,46)" fg:x="875" fg:w="372"/><text x="70.4184%" y="623.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (308 samples, 24.70%)</title><rect x="75.3007%" y="597" width="24.6993%" height="15" fill="rgb(211,135,41)" fg:x="939" fg:w="308"/><text x="75.5507%" y="607.50">engine::session::Session::evaluate_and_..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (308 samples, 24.70%)</title><rect x="75.3007%" y="581" width="24.6993%" height="15" fill="rgb(208,54,0)" fg:x="939" fg:w="308"/><text x="75.5507%" y="591.50">engine::perform::StandardPerformer::eva..</text></g><g><title>core::ptr::drop_in_place&lt;engine::perform::StandardPerformer&gt; (1 samples, 0.08%)</title><rect x="99.9198%" y="565" width="0.0802%" height="15" fill="rgb(244,136,14)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="575.50"></text></g></svg></svg>