<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1246"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.2408%" y="677" width="0.0803%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="1"/><text x="0.4908%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.2408%" y="661" width="0.0803%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="1"/><text x="0.4908%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2408%" y="645" width="0.0803%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.4908%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3210%" y="677" width="0.0803%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.5710%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0803%" y="709" width="0.4013%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="5"/><text x="0.3303%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.1605%" y="693" width="0.3210%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="4"/><text x="0.4105%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4013%" y="677" width="0.0803%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="0.6513%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4013%" y="661" width="0.0803%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="1"/><text x="0.6513%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.6421%" y="661" width="0.0803%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="1"/><text x="0.8921%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8026%" y="645" width="0.0803%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="1"/><text x="1.0526%" y="655.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.8828%" y="629" width="0.2408%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="3"/><text x="1.1328%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (8 samples, 0.64%)</title><rect x="0.7223%" y="661" width="0.6421%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="8"/><text x="0.9723%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (6 samples, 0.48%)</title><rect x="0.8828%" y="645" width="0.4815%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="6"/><text x="1.1328%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (3 samples, 0.24%)</title><rect x="1.1236%" y="629" width="0.2408%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="3"/><text x="1.3736%" y="639.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.1236%" y="613" width="0.2408%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="3"/><text x="1.3736%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (11 samples, 0.88%)</title><rect x="0.5618%" y="693" width="0.8828%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="11"/><text x="0.8118%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="0.5618%" y="677" width="0.8828%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="11"/><text x="0.8118%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_rune::RunePlugin&gt; (1 samples, 0.08%)</title><rect x="1.3644%" y="661" width="0.0803%" height="15" fill="rgb(210,31,41)" fg:x="17" fg:w="1"/><text x="1.6144%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4446%" y="661" width="0.0803%" height="15" fill="rgb(221,200,47)" fg:x="18" fg:w="1"/><text x="1.6946%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5249%" y="613" width="0.0803%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="1"/><text x="1.7749%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.6051%" y="597" width="0.1605%" height="15" fill="rgb(249,33,26)" fg:x="20" fg:w="2"/><text x="1.8551%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.7657%" y="597" width="0.0803%" height="15" fill="rgb(235,183,28)" fg:x="22" fg:w="1"/><text x="2.0157%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7657%" y="581" width="0.0803%" height="15" fill="rgb(221,5,38)" fg:x="22" fg:w="1"/><text x="2.0157%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="1.9262%" y="565" width="0.1605%" height="15" fill="rgb(247,18,42)" fg:x="24" fg:w="2"/><text x="2.1762%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.0064%" y="549" width="0.0803%" height="15" fill="rgb(241,131,45)" fg:x="25" fg:w="1"/><text x="2.2564%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.0064%" y="533" width="0.0803%" height="15" fill="rgb(249,31,29)" fg:x="25" fg:w="1"/><text x="2.2564%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="1.5249%" y="629" width="0.6421%" height="15" fill="rgb(225,111,53)" fg:x="19" fg:w="8"/><text x="1.7749%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="1.6051%" y="613" width="0.5618%" height="15" fill="rgb(238,160,17)" fg:x="20" fg:w="7"/><text x="1.8551%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.8459%" y="597" width="0.3210%" height="15" fill="rgb(214,148,48)" fg:x="23" fg:w="4"/><text x="2.0959%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.9262%" y="581" width="0.2408%" height="15" fill="rgb(232,36,49)" fg:x="24" fg:w="3"/><text x="2.1762%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0867%" y="565" width="0.0803%" height="15" fill="rgb(209,103,24)" fg:x="26" fg:w="1"/><text x="2.3367%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.2472%" y="597" width="0.1605%" height="15" fill="rgb(229,88,8)" fg:x="28" fg:w="2"/><text x="2.4972%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4880%" y="549" width="0.0803%" height="15" fill="rgb(213,181,19)" fg:x="31" fg:w="1"/><text x="2.7380%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="2.4880%" y="581" width="0.1605%" height="15" fill="rgb(254,191,54)" fg:x="31" fg:w="2"/><text x="2.7380%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="2.4880%" y="565" width="0.1605%" height="15" fill="rgb(241,83,37)" fg:x="31" fg:w="2"/><text x="2.7380%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.5682%" y="549" width="0.0803%" height="15" fill="rgb(233,36,39)" fg:x="32" fg:w="1"/><text x="2.8182%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.5682%" y="533" width="0.0803%" height="15" fill="rgb(226,3,54)" fg:x="32" fg:w="1"/><text x="2.8182%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5682%" y="517" width="0.0803%" height="15" fill="rgb(245,192,40)" fg:x="32" fg:w="1"/><text x="2.8182%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6485%" y="581" width="0.0803%" height="15" fill="rgb(238,167,29)" fg:x="33" fg:w="1"/><text x="2.8985%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.7287%" y="581" width="0.0803%" height="15" fill="rgb(232,182,51)" fg:x="34" fg:w="1"/><text x="2.9787%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.8892%" y="565" width="0.0803%" height="15" fill="rgb(231,60,39)" fg:x="36" fg:w="1"/><text x="3.1392%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.8892%" y="549" width="0.0803%" height="15" fill="rgb(208,69,12)" fg:x="36" fg:w="1"/><text x="3.1392%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="2.1669%" y="629" width="0.8828%" height="15" fill="rgb(235,93,37)" fg:x="27" fg:w="11"/><text x="2.4169%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="2.1669%" y="613" width="0.8828%" height="15" fill="rgb(213,116,39)" fg:x="27" fg:w="11"/><text x="2.4169%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="2.4077%" y="597" width="0.6421%" height="15" fill="rgb(222,207,29)" fg:x="30" fg:w="8"/><text x="2.6577%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.8090%" y="581" width="0.2408%" height="15" fill="rgb(206,96,30)" fg:x="35" fg:w="3"/><text x="3.0590%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.9695%" y="565" width="0.0803%" height="15" fill="rgb(218,138,4)" fg:x="37" fg:w="1"/><text x="3.2195%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (21 samples, 1.69%)</title><rect x="1.4446%" y="693" width="1.6854%" height="15" fill="rgb(250,191,14)" fg:x="18" fg:w="21"/><text x="1.6946%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.69%)</title><rect x="1.4446%" y="677" width="1.6854%" height="15" fill="rgb(239,60,40)" fg:x="18" fg:w="21"/><text x="1.6946%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (20 samples, 1.61%)</title><rect x="1.5249%" y="661" width="1.6051%" height="15" fill="rgb(206,27,48)" fg:x="19" fg:w="20"/><text x="1.7749%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 1.61%)</title><rect x="1.5249%" y="645" width="1.6051%" height="15" fill="rgb(225,35,8)" fg:x="19" fg:w="20"/><text x="1.7749%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.0498%" y="629" width="0.0803%" height="15" fill="rgb(250,213,24)" fg:x="38" fg:w="1"/><text x="3.2998%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 2.73%)</title><rect x="0.4815%" y="709" width="2.7287%" height="15" fill="rgb(247,123,22)" fg:x="6" fg:w="34"/><text x="0.7315%" y="719.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="3.1300%" y="693" width="0.0803%" height="15" fill="rgb(231,138,38)" fg:x="39" fg:w="1"/><text x="3.3800%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="3.1300%" y="677" width="0.0803%" height="15" fill="rgb(231,145,46)" fg:x="39" fg:w="1"/><text x="3.3800%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.1300%" y="661" width="0.0803%" height="15" fill="rgb(251,118,11)" fg:x="39" fg:w="1"/><text x="3.3800%" y="671.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="3.2905%" y="661" width="0.0803%" height="15" fill="rgb(217,147,25)" fg:x="41" fg:w="1"/><text x="3.5405%" y="671.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.6918%" y="581" width="0.0803%" height="15" fill="rgb(247,81,37)" fg:x="46" fg:w="1"/><text x="3.9418%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6918%" y="565" width="0.0803%" height="15" fill="rgb(209,12,38)" fg:x="46" fg:w="1"/><text x="3.9418%" y="575.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="3.6116%" y="613" width="0.2408%" height="15" fill="rgb(227,1,9)" fg:x="45" fg:w="3"/><text x="3.8616%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="3.6116%" y="597" width="0.2408%" height="15" fill="rgb(248,47,43)" fg:x="45" fg:w="3"/><text x="3.8616%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="3.7721%" y="581" width="0.0803%" height="15" fill="rgb(221,10,30)" fg:x="47" fg:w="1"/><text x="4.0221%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7721%" y="565" width="0.0803%" height="15" fill="rgb(210,229,1)" fg:x="47" fg:w="1"/><text x="4.0221%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.8523%" y="581" width="0.0803%" height="15" fill="rgb(222,148,37)" fg:x="48" fg:w="1"/><text x="4.1023%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.8523%" y="565" width="0.0803%" height="15" fill="rgb(234,67,33)" fg:x="48" fg:w="1"/><text x="4.1023%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8523%" y="549" width="0.0803%" height="15" fill="rgb(247,98,35)" fg:x="48" fg:w="1"/><text x="4.1023%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.9326%" y="581" width="0.0803%" height="15" fill="rgb(247,138,52)" fg:x="49" fg:w="1"/><text x="4.1826%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="3.8523%" y="613" width="0.3210%" height="15" fill="rgb(213,79,30)" fg:x="48" fg:w="4"/><text x="4.1023%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="3.8523%" y="597" width="0.3210%" height="15" fill="rgb(246,177,23)" fg:x="48" fg:w="4"/><text x="4.1023%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (2 samples, 0.16%)</title><rect x="4.0128%" y="581" width="0.1605%" height="15" fill="rgb(230,62,27)" fg:x="50" fg:w="2"/><text x="4.2628%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0931%" y="565" width="0.0803%" height="15" fill="rgb(216,154,8)" fg:x="51" fg:w="1"/><text x="4.3431%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.1734%" y="613" width="0.0803%" height="15" fill="rgb(244,35,45)" fg:x="52" fg:w="1"/><text x="4.4234%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.1734%" y="597" width="0.0803%" height="15" fill="rgb(251,115,12)" fg:x="52" fg:w="1"/><text x="4.4234%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.1734%" y="581" width="0.0803%" height="15" fill="rgb(240,54,50)" fg:x="52" fg:w="1"/><text x="4.4234%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1734%" y="565" width="0.0803%" height="15" fill="rgb(233,84,52)" fg:x="52" fg:w="1"/><text x="4.4234%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (11 samples, 0.88%)</title><rect x="3.4510%" y="629" width="0.8828%" height="15" fill="rgb(207,117,47)" fg:x="43" fg:w="11"/><text x="3.7010%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.2536%" y="613" width="0.0803%" height="15" fill="rgb(249,43,39)" fg:x="53" fg:w="1"/><text x="4.5036%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.4141%" y="613" width="0.0803%" height="15" fill="rgb(209,38,44)" fg:x="55" fg:w="1"/><text x="4.6641%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.4141%" y="597" width="0.0803%" height="15" fill="rgb(236,212,23)" fg:x="55" fg:w="1"/><text x="4.6641%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.4141%" y="581" width="0.0803%" height="15" fill="rgb(242,79,21)" fg:x="55" fg:w="1"/><text x="4.6641%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.4141%" y="565" width="0.0803%" height="15" fill="rgb(211,96,35)" fg:x="55" fg:w="1"/><text x="4.6641%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4141%" y="549" width="0.0803%" height="15" fill="rgb(253,215,40)" fg:x="55" fg:w="1"/><text x="4.6641%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4141%" y="533" width="0.0803%" height="15" fill="rgb(211,81,21)" fg:x="55" fg:w="1"/><text x="4.6641%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="4.4141%" y="517" width="0.0803%" height="15" fill="rgb(208,190,38)" fg:x="55" fg:w="1"/><text x="4.6641%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="4.4141%" y="501" width="0.0803%" height="15" fill="rgb(235,213,38)" fg:x="55" fg:w="1"/><text x="4.6641%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="4.4141%" y="485" width="0.0803%" height="15" fill="rgb(237,122,38)" fg:x="55" fg:w="1"/><text x="4.6641%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="4.4141%" y="469" width="0.0803%" height="15" fill="rgb(244,218,35)" fg:x="55" fg:w="1"/><text x="4.6641%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.4141%" y="453" width="0.0803%" height="15" fill="rgb(240,68,47)" fg:x="55" fg:w="1"/><text x="4.6641%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.4141%" y="437" width="0.0803%" height="15" fill="rgb(210,16,53)" fg:x="55" fg:w="1"/><text x="4.6641%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.4141%" y="421" width="0.0803%" height="15" fill="rgb(235,124,12)" fg:x="55" fg:w="1"/><text x="4.6641%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="4.4141%" y="405" width="0.0803%" height="15" fill="rgb(224,169,11)" fg:x="55" fg:w="1"/><text x="4.6641%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.4141%" y="389" width="0.0803%" height="15" fill="rgb(250,166,2)" fg:x="55" fg:w="1"/><text x="4.6641%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.4944%" y="565" width="0.0803%" height="15" fill="rgb(242,216,29)" fg:x="56" fg:w="1"/><text x="4.7444%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.40%)</title><rect x="4.3339%" y="629" width="0.4013%" height="15" fill="rgb(230,116,27)" fg:x="54" fg:w="5"/><text x="4.5839%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="4.4944%" y="613" width="0.2408%" height="15" fill="rgb(228,99,48)" fg:x="56" fg:w="3"/><text x="4.7444%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="4.4944%" y="597" width="0.2408%" height="15" fill="rgb(253,11,6)" fg:x="56" fg:w="3"/><text x="4.7444%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="4.4944%" y="581" width="0.2408%" height="15" fill="rgb(247,143,39)" fg:x="56" fg:w="3"/><text x="4.7444%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="4.5746%" y="565" width="0.1605%" height="15" fill="rgb(236,97,10)" fg:x="57" fg:w="2"/><text x="4.8246%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="4.5746%" y="549" width="0.1605%" height="15" fill="rgb(233,208,19)" fg:x="57" fg:w="2"/><text x="4.8246%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="4.5746%" y="533" width="0.1605%" height="15" fill="rgb(216,164,2)" fg:x="57" fg:w="2"/><text x="4.8246%" y="543.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="4.5746%" y="517" width="0.1605%" height="15" fill="rgb(220,129,5)" fg:x="57" fg:w="2"/><text x="4.8246%" y="527.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (1 samples, 0.08%)</title><rect x="4.9759%" y="565" width="0.0803%" height="15" fill="rgb(242,17,10)" fg:x="62" fg:w="1"/><text x="5.2259%" y="575.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (5 samples, 0.40%)</title><rect x="4.7352%" y="613" width="0.4013%" height="15" fill="rgb(242,107,0)" fg:x="59" fg:w="5"/><text x="4.9852%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.40%)</title><rect x="4.7352%" y="597" width="0.4013%" height="15" fill="rgb(251,28,31)" fg:x="59" fg:w="5"/><text x="4.9852%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.40%)</title><rect x="4.7352%" y="581" width="0.4013%" height="15" fill="rgb(233,223,10)" fg:x="59" fg:w="5"/><text x="4.9852%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.0562%" y="565" width="0.0803%" height="15" fill="rgb(215,21,27)" fg:x="63" fg:w="1"/><text x="5.3062%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.0562%" y="549" width="0.0803%" height="15" fill="rgb(232,23,21)" fg:x="63" fg:w="1"/><text x="5.3062%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.0562%" y="533" width="0.0803%" height="15" fill="rgb(244,5,23)" fg:x="63" fg:w="1"/><text x="5.3062%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.0562%" y="517" width="0.0803%" height="15" fill="rgb(226,81,46)" fg:x="63" fg:w="1"/><text x="5.3062%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.0562%" y="501" width="0.0803%" height="15" fill="rgb(247,70,30)" fg:x="63" fg:w="1"/><text x="5.3062%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.0562%" y="485" width="0.0803%" height="15" fill="rgb(212,68,19)" fg:x="63" fg:w="1"/><text x="5.3062%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.0562%" y="469" width="0.0803%" height="15" fill="rgb(240,187,13)" fg:x="63" fg:w="1"/><text x="5.3062%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.0562%" y="453" width="0.0803%" height="15" fill="rgb(223,113,26)" fg:x="63" fg:w="1"/><text x="5.3062%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.0562%" y="437" width="0.0803%" height="15" fill="rgb(206,192,2)" fg:x="63" fg:w="1"/><text x="5.3062%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.0562%" y="421" width="0.0803%" height="15" fill="rgb(241,108,4)" fg:x="63" fg:w="1"/><text x="5.3062%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.0562%" y="405" width="0.0803%" height="15" fill="rgb(247,173,49)" fg:x="63" fg:w="1"/><text x="5.3062%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.0562%" y="389" width="0.0803%" height="15" fill="rgb(224,114,35)" fg:x="63" fg:w="1"/><text x="5.3062%" y="399.50"></text></g><g><title>glob::is_dir (8 samples, 0.64%)</title><rect x="5.2970%" y="565" width="0.6421%" height="15" fill="rgb(245,159,27)" fg:x="66" fg:w="8"/><text x="5.5470%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (8 samples, 0.64%)</title><rect x="5.2970%" y="549" width="0.6421%" height="15" fill="rgb(245,172,44)" fg:x="66" fg:w="8"/><text x="5.5470%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (8 samples, 0.64%)</title><rect x="5.2970%" y="533" width="0.6421%" height="15" fill="rgb(236,23,11)" fg:x="66" fg:w="8"/><text x="5.5470%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (8 samples, 0.64%)</title><rect x="5.2970%" y="517" width="0.6421%" height="15" fill="rgb(205,117,38)" fg:x="66" fg:w="8"/><text x="5.5470%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (8 samples, 0.64%)</title><rect x="5.2970%" y="501" width="0.6421%" height="15" fill="rgb(237,72,25)" fg:x="66" fg:w="8"/><text x="5.5470%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (8 samples, 0.64%)</title><rect x="5.2970%" y="485" width="0.6421%" height="15" fill="rgb(244,70,9)" fg:x="66" fg:w="8"/><text x="5.5470%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (8 samples, 0.64%)</title><rect x="5.2970%" y="469" width="0.6421%" height="15" fill="rgb(217,125,39)" fg:x="66" fg:w="8"/><text x="5.5470%" y="479.50"></text></g><g><title>statx (7 samples, 0.56%)</title><rect x="5.3772%" y="453" width="0.5618%" height="15" fill="rgb(235,36,10)" fg:x="67" fg:w="7"/><text x="5.6272%" y="463.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.88%)</title><rect x="5.1364%" y="597" width="0.8828%" height="15" fill="rgb(251,123,47)" fg:x="64" fg:w="11"/><text x="5.3864%" y="607.50"></text></g><g><title>glob::fill_todo (11 samples, 0.88%)</title><rect x="5.1364%" y="581" width="0.8828%" height="15" fill="rgb(221,13,13)" fg:x="64" fg:w="11"/><text x="5.3864%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="5.9390%" y="565" width="0.0803%" height="15" fill="rgb(238,131,9)" fg:x="74" fg:w="1"/><text x="6.1890%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="5.9390%" y="549" width="0.0803%" height="15" fill="rgb(211,50,8)" fg:x="74" fg:w="1"/><text x="6.1890%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="5.9390%" y="533" width="0.0803%" height="15" fill="rgb(245,182,24)" fg:x="74" fg:w="1"/><text x="6.1890%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="5.9390%" y="517" width="0.0803%" height="15" fill="rgb(242,14,37)" fg:x="74" fg:w="1"/><text x="6.1890%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="5.9390%" y="501" width="0.0803%" height="15" fill="rgb(246,228,12)" fg:x="74" fg:w="1"/><text x="6.1890%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="5.9390%" y="485" width="0.0803%" height="15" fill="rgb(213,55,15)" fg:x="74" fg:w="1"/><text x="6.1890%" y="495.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="5.9390%" y="469" width="0.0803%" height="15" fill="rgb(209,9,3)" fg:x="74" fg:w="1"/><text x="6.1890%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="6.0193%" y="597" width="0.0803%" height="15" fill="rgb(230,59,30)" fg:x="75" fg:w="1"/><text x="6.2693%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.0193%" y="581" width="0.0803%" height="15" fill="rgb(209,121,21)" fg:x="75" fg:w="1"/><text x="6.2693%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0193%" y="565" width="0.0803%" height="15" fill="rgb(220,109,13)" fg:x="75" fg:w="1"/><text x="6.2693%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (22 samples, 1.77%)</title><rect x="4.7352%" y="629" width="1.7657%" height="15" fill="rgb(232,18,1)" fg:x="59" fg:w="22"/><text x="4.9852%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (17 samples, 1.36%)</title><rect x="5.1364%" y="613" width="1.3644%" height="15" fill="rgb(215,41,42)" fg:x="64" fg:w="17"/><text x="5.3864%" y="623.50"></text></g><g><title>glob::glob (5 samples, 0.40%)</title><rect x="6.0995%" y="597" width="0.4013%" height="15" fill="rgb(224,123,36)" fg:x="76" fg:w="5"/><text x="6.3495%" y="607.50"></text></g><g><title>glob::glob_with (5 samples, 0.40%)</title><rect x="6.0995%" y="581" width="0.4013%" height="15" fill="rgb(240,125,3)" fg:x="76" fg:w="5"/><text x="6.3495%" y="591.50"></text></g><g><title>glob::Pattern::new (3 samples, 0.24%)</title><rect x="6.2600%" y="565" width="0.2408%" height="15" fill="rgb(205,98,50)" fg:x="78" fg:w="3"/><text x="6.5100%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.3403%" y="549" width="0.1605%" height="15" fill="rgb(205,185,37)" fg:x="79" fg:w="2"/><text x="6.5903%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="6.3403%" y="533" width="0.1605%" height="15" fill="rgb(238,207,15)" fg:x="79" fg:w="2"/><text x="6.5903%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="6.3403%" y="517" width="0.1605%" height="15" fill="rgb(213,199,42)" fg:x="79" fg:w="2"/><text x="6.5903%" y="527.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="6.3403%" y="501" width="0.1605%" height="15" fill="rgb(235,201,11)" fg:x="79" fg:w="2"/><text x="6.5903%" y="511.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="6.5008%" y="613" width="0.3210%" height="15" fill="rgb(207,46,11)" fg:x="81" fg:w="4"/><text x="6.7508%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (44 samples, 3.53%)</title><rect x="3.3708%" y="645" width="3.5313%" height="15" fill="rgb(241,35,35)" fg:x="42" fg:w="44"/><text x="3.6208%" y="655.50">ker..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (5 samples, 0.40%)</title><rect x="6.5008%" y="629" width="0.4013%" height="15" fill="rgb(243,32,47)" fg:x="81" fg:w="5"/><text x="6.7508%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="6.8218%" y="613" width="0.0803%" height="15" fill="rgb(247,202,23)" fg:x="85" fg:w="1"/><text x="7.0718%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8218%" y="597" width="0.0803%" height="15" fill="rgb(219,102,11)" fg:x="85" fg:w="1"/><text x="7.0718%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.3034%" y="613" width="0.0803%" height="15" fill="rgb(243,110,44)" fg:x="91" fg:w="1"/><text x="7.5534%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.3034%" y="597" width="0.0803%" height="15" fill="rgb(222,74,54)" fg:x="91" fg:w="1"/><text x="7.5534%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.3034%" y="581" width="0.0803%" height="15" fill="rgb(216,99,12)" fg:x="91" fg:w="1"/><text x="7.5534%" y="591.50"></text></g><g><title>engine::session::Session::initialize (51 samples, 4.09%)</title><rect x="3.3708%" y="661" width="4.0931%" height="15" fill="rgb(226,22,26)" fg:x="42" fg:w="51"/><text x="3.6208%" y="671.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (7 samples, 0.56%)</title><rect x="6.9021%" y="645" width="0.5618%" height="15" fill="rgb(217,163,10)" fg:x="86" fg:w="7"/><text x="7.1521%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="6.9021%" y="629" width="0.5618%" height="15" fill="rgb(213,25,53)" fg:x="86" fg:w="7"/><text x="7.1521%" y="639.50"></text></g><g><title>kernel::plugins::Plugin::middleware (1 samples, 0.08%)</title><rect x="7.3836%" y="613" width="0.0803%" height="15" fill="rgb(252,105,26)" fg:x="92" fg:w="1"/><text x="7.6336%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (55 samples, 4.41%)</title><rect x="3.2103%" y="709" width="4.4141%" height="15" fill="rgb(220,39,43)" fg:x="40" fg:w="55"/><text x="3.4603%" y="719.50">&lt;engi..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (55 samples, 4.41%)</title><rect x="3.2103%" y="693" width="4.4141%" height="15" fill="rgb(229,68,48)" fg:x="40" fg:w="55"/><text x="3.4603%" y="703.50">engin..</text></g><g><title>engine::session::Session::new (54 samples, 4.33%)</title><rect x="3.2905%" y="677" width="4.3339%" height="15" fill="rgb(252,8,32)" fg:x="41" fg:w="54"/><text x="3.5405%" y="687.50">engin..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="7.4639%" y="661" width="0.1605%" height="15" fill="rgb(223,20,43)" fg:x="93" fg:w="2"/><text x="7.7139%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="7.4639%" y="645" width="0.1605%" height="15" fill="rgb(229,81,49)" fg:x="93" fg:w="2"/><text x="7.7139%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.5441%" y="629" width="0.0803%" height="15" fill="rgb(236,28,36)" fg:x="94" fg:w="1"/><text x="7.7941%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="7.6244%" y="693" width="0.0803%" height="15" fill="rgb(249,185,26)" fg:x="95" fg:w="1"/><text x="7.8744%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.7047%" y="677" width="0.0803%" height="15" fill="rgb(249,174,33)" fg:x="96" fg:w="1"/><text x="7.9547%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7047%" y="661" width="0.0803%" height="15" fill="rgb(233,201,37)" fg:x="96" fg:w="1"/><text x="7.9547%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7047%" y="645" width="0.0803%" height="15" fill="rgb(221,78,26)" fg:x="96" fg:w="1"/><text x="7.9547%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.7047%" y="629" width="0.0803%" height="15" fill="rgb(250,127,30)" fg:x="96" fg:w="1"/><text x="7.9547%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.7047%" y="613" width="0.0803%" height="15" fill="rgb(230,49,44)" fg:x="96" fg:w="1"/><text x="7.9547%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.7047%" y="597" width="0.0803%" height="15" fill="rgb(229,67,23)" fg:x="96" fg:w="1"/><text x="7.9547%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.7047%" y="581" width="0.0803%" height="15" fill="rgb(249,83,47)" fg:x="96" fg:w="1"/><text x="7.9547%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.7047%" y="565" width="0.0803%" height="15" fill="rgb(215,43,3)" fg:x="96" fg:w="1"/><text x="7.9547%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.7047%" y="549" width="0.0803%" height="15" fill="rgb(238,154,13)" fg:x="96" fg:w="1"/><text x="7.9547%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.7047%" y="533" width="0.0803%" height="15" fill="rgb(219,56,2)" fg:x="96" fg:w="1"/><text x="7.9547%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.7047%" y="517" width="0.0803%" height="15" fill="rgb(233,0,4)" fg:x="96" fg:w="1"/><text x="7.9547%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.7047%" y="501" width="0.0803%" height="15" fill="rgb(235,30,7)" fg:x="96" fg:w="1"/><text x="7.9547%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="7.9454%" y="565" width="0.3210%" height="15" fill="rgb(250,79,13)" fg:x="99" fg:w="4"/><text x="8.1954%" y="575.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="7.9454%" y="549" width="0.3210%" height="15" fill="rgb(211,146,34)" fg:x="99" fg:w="4"/><text x="8.1954%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="8.0257%" y="533" width="0.2408%" height="15" fill="rgb(228,22,38)" fg:x="100" fg:w="3"/><text x="8.2757%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="8.0257%" y="517" width="0.2408%" height="15" fill="rgb(235,168,5)" fg:x="100" fg:w="3"/><text x="8.2757%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.1059%" y="501" width="0.1605%" height="15" fill="rgb(221,155,16)" fg:x="101" fg:w="2"/><text x="8.3559%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="8.1059%" y="485" width="0.1605%" height="15" fill="rgb(215,215,53)" fg:x="101" fg:w="2"/><text x="8.3559%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="8.1059%" y="469" width="0.1605%" height="15" fill="rgb(223,4,10)" fg:x="101" fg:w="2"/><text x="8.3559%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.40%)</title><rect x="7.9454%" y="581" width="0.4013%" height="15" fill="rgb(234,103,6)" fg:x="99" fg:w="5"/><text x="8.1954%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2665%" y="565" width="0.0803%" height="15" fill="rgb(227,97,0)" fg:x="103" fg:w="1"/><text x="8.5165%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.2665%" y="549" width="0.0803%" height="15" fill="rgb(234,150,53)" fg:x="103" fg:w="1"/><text x="8.5165%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4270%" y="533" width="0.0803%" height="15" fill="rgb(228,201,54)" fg:x="105" fg:w="1"/><text x="8.6770%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4270%" y="517" width="0.0803%" height="15" fill="rgb(222,22,37)" fg:x="105" fg:w="1"/><text x="8.6770%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.4270%" y="501" width="0.0803%" height="15" fill="rgb(237,53,32)" fg:x="105" fg:w="1"/><text x="8.6770%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4270%" y="485" width="0.0803%" height="15" fill="rgb(233,25,53)" fg:x="105" fg:w="1"/><text x="8.6770%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="8.4270%" y="549" width="0.2408%" height="15" fill="rgb(210,40,34)" fg:x="105" fg:w="3"/><text x="8.6770%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.5072%" y="533" width="0.1605%" height="15" fill="rgb(241,220,44)" fg:x="106" fg:w="2"/><text x="8.7572%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.5072%" y="517" width="0.1605%" height="15" fill="rgb(235,28,35)" fg:x="106" fg:w="2"/><text x="8.7572%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.5072%" y="501" width="0.1605%" height="15" fill="rgb(210,56,17)" fg:x="106" fg:w="2"/><text x="8.7572%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="8.6677%" y="549" width="0.2408%" height="15" fill="rgb(224,130,29)" fg:x="108" fg:w="3"/><text x="8.9177%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.7480%" y="533" width="0.1605%" height="15" fill="rgb(235,212,8)" fg:x="109" fg:w="2"/><text x="8.9980%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.7480%" y="517" width="0.1605%" height="15" fill="rgb(223,33,50)" fg:x="109" fg:w="2"/><text x="8.9980%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.8283%" y="501" width="0.0803%" height="15" fill="rgb(219,149,13)" fg:x="110" fg:w="1"/><text x="9.0783%" y="511.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="8.9085%" y="533" width="0.0803%" height="15" fill="rgb(250,156,29)" fg:x="111" fg:w="1"/><text x="9.1585%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.9085%" y="549" width="0.1605%" height="15" fill="rgb(216,193,19)" fg:x="111" fg:w="2"/><text x="9.1585%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.9888%" y="533" width="0.0803%" height="15" fill="rgb(216,135,14)" fg:x="112" fg:w="1"/><text x="9.2388%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.9888%" y="517" width="0.0803%" height="15" fill="rgb(241,47,5)" fg:x="112" fg:w="1"/><text x="9.2388%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.9888%" y="501" width="0.0803%" height="15" fill="rgb(233,42,35)" fg:x="112" fg:w="1"/><text x="9.2388%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="8.3467%" y="565" width="0.8026%" height="15" fill="rgb(231,13,6)" fg:x="104" fg:w="10"/><text x="8.5967%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.0690%" y="549" width="0.0803%" height="15" fill="rgb(207,181,40)" fg:x="113" fg:w="1"/><text x="9.3190%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (18 samples, 1.44%)</title><rect x="7.9454%" y="597" width="1.4446%" height="15" fill="rgb(254,173,49)" fg:x="99" fg:w="18"/><text x="8.1954%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.04%)</title><rect x="8.3467%" y="581" width="1.0433%" height="15" fill="rgb(221,1,38)" fg:x="104" fg:w="13"/><text x="8.5967%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="9.1493%" y="565" width="0.2408%" height="15" fill="rgb(206,124,46)" fg:x="114" fg:w="3"/><text x="9.3993%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="9.1493%" y="549" width="0.2408%" height="15" fill="rgb(249,21,11)" fg:x="114" fg:w="3"/><text x="9.3993%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="9.2295%" y="533" width="0.1605%" height="15" fill="rgb(222,201,40)" fg:x="115" fg:w="2"/><text x="9.4795%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3900%" y="565" width="0.0803%" height="15" fill="rgb(235,61,29)" fg:x="117" fg:w="1"/><text x="9.6400%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="9.4703%" y="549" width="0.1605%" height="15" fill="rgb(219,207,3)" fg:x="118" fg:w="2"/><text x="9.7203%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="9.7111%" y="517" width="0.2408%" height="15" fill="rgb(222,56,46)" fg:x="121" fg:w="3"/><text x="9.9611%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="9.7913%" y="501" width="0.1605%" height="15" fill="rgb(239,76,54)" fg:x="122" fg:w="2"/><text x="10.0413%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="9.3900%" y="597" width="0.7223%" height="15" fill="rgb(231,124,27)" fg:x="117" fg:w="9"/><text x="9.6400%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="9.3900%" y="581" width="0.7223%" height="15" fill="rgb(249,195,6)" fg:x="117" fg:w="9"/><text x="9.6400%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="9.4703%" y="565" width="0.6421%" height="15" fill="rgb(237,174,47)" fg:x="118" fg:w="8"/><text x="9.7203%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="9.6308%" y="549" width="0.4815%" height="15" fill="rgb(206,201,31)" fg:x="120" fg:w="6"/><text x="9.8808%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="9.6308%" y="533" width="0.4815%" height="15" fill="rgb(231,57,52)" fg:x="120" fg:w="6"/><text x="9.8808%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.9518%" y="517" width="0.1605%" height="15" fill="rgb(248,177,22)" fg:x="124" fg:w="2"/><text x="10.2018%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.0321%" y="501" width="0.0803%" height="15" fill="rgb(215,211,37)" fg:x="125" fg:w="1"/><text x="10.2821%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="10.1124%" y="597" width="0.0803%" height="15" fill="rgb(241,128,51)" fg:x="126" fg:w="1"/><text x="10.3624%" y="607.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="10.1926%" y="581" width="0.0803%" height="15" fill="rgb(227,165,31)" fg:x="127" fg:w="1"/><text x="10.4426%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="10.1926%" y="565" width="0.0803%" height="15" fill="rgb(228,167,24)" fg:x="127" fg:w="1"/><text x="10.4426%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.1926%" y="549" width="0.0803%" height="15" fill="rgb(228,143,12)" fg:x="127" fg:w="1"/><text x="10.4426%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.1926%" y="533" width="0.0803%" height="15" fill="rgb(249,149,8)" fg:x="127" fg:w="1"/><text x="10.4426%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="10.1926%" y="517" width="0.0803%" height="15" fill="rgb(243,35,44)" fg:x="127" fg:w="1"/><text x="10.4426%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="10.1926%" y="501" width="0.0803%" height="15" fill="rgb(246,89,9)" fg:x="127" fg:w="1"/><text x="10.4426%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1926%" y="485" width="0.0803%" height="15" fill="rgb(233,213,13)" fg:x="127" fg:w="1"/><text x="10.4426%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.3531%" y="549" width="0.1605%" height="15" fill="rgb(233,141,41)" fg:x="129" fg:w="2"/><text x="10.6031%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.5136%" y="501" width="0.1605%" height="15" fill="rgb(239,167,4)" fg:x="131" fg:w="2"/><text x="10.7636%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5939%" y="485" width="0.0803%" height="15" fill="rgb(209,217,16)" fg:x="132" fg:w="1"/><text x="10.8439%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.6742%" y="469" width="0.0803%" height="15" fill="rgb(219,88,35)" fg:x="133" fg:w="1"/><text x="10.9242%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.6742%" y="453" width="0.0803%" height="15" fill="rgb(220,193,23)" fg:x="133" fg:w="1"/><text x="10.9242%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.6742%" y="437" width="0.0803%" height="15" fill="rgb(230,90,52)" fg:x="133" fg:w="1"/><text x="10.9242%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.6742%" y="421" width="0.0803%" height="15" fill="rgb(252,106,19)" fg:x="133" fg:w="1"/><text x="10.9242%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.6742%" y="405" width="0.0803%" height="15" fill="rgb(206,74,20)" fg:x="133" fg:w="1"/><text x="10.9242%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.6742%" y="389" width="0.0803%" height="15" fill="rgb(230,138,44)" fg:x="133" fg:w="1"/><text x="10.9242%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6742%" y="373" width="0.0803%" height="15" fill="rgb(235,182,43)" fg:x="133" fg:w="1"/><text x="10.9242%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="10.6742%" y="501" width="0.1605%" height="15" fill="rgb(242,16,51)" fg:x="133" fg:w="2"/><text x="10.9242%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.6742%" y="485" width="0.1605%" height="15" fill="rgb(248,9,4)" fg:x="133" fg:w="2"/><text x="10.9242%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7544%" y="469" width="0.0803%" height="15" fill="rgb(210,31,22)" fg:x="134" fg:w="1"/><text x="11.0044%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9149%" y="469" width="0.0803%" height="15" fill="rgb(239,54,39)" fg:x="136" fg:w="1"/><text x="11.1649%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.9952%" y="453" width="0.0803%" height="15" fill="rgb(230,99,41)" fg:x="137" fg:w="1"/><text x="11.2452%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9952%" y="437" width="0.0803%" height="15" fill="rgb(253,106,12)" fg:x="137" fg:w="1"/><text x="11.2452%" y="447.50"></text></g><g><title>engine::session::Session::flush (43 samples, 3.45%)</title><rect x="7.7047%" y="693" width="3.4510%" height="15" fill="rgb(213,46,41)" fg:x="96" fg:w="43"/><text x="7.9547%" y="703.50">eng..</text></g><g><title>engine::session::state::State::close (42 samples, 3.37%)</title><rect x="7.7849%" y="677" width="3.3708%" height="15" fill="rgb(215,133,35)" fg:x="97" fg:w="42"/><text x="8.0349%" y="687.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.37%)</title><rect x="7.7849%" y="661" width="3.3708%" height="15" fill="rgb(213,28,5)" fg:x="97" fg:w="42"/><text x="8.0349%" y="671.50">eng..</text></g><g><title>core::iter::adapters::try_process (42 samples, 3.37%)</title><rect x="7.7849%" y="645" width="3.3708%" height="15" fill="rgb(215,77,49)" fg:x="97" fg:w="42"/><text x="8.0349%" y="655.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 3.29%)</title><rect x="7.8652%" y="629" width="3.2905%" height="15" fill="rgb(248,100,22)" fg:x="98" fg:w="41"/><text x="8.1152%" y="639.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (41 samples, 3.29%)</title><rect x="7.8652%" y="613" width="3.2905%" height="15" fill="rgb(208,67,9)" fg:x="98" fg:w="41"/><text x="8.1152%" y="623.50">eng..</text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.96%)</title><rect x="10.1926%" y="597" width="0.9631%" height="15" fill="rgb(219,133,21)" fg:x="127" fg:w="12"/><text x="10.4426%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.88%)</title><rect x="10.2729%" y="581" width="0.8828%" height="15" fill="rgb(246,46,29)" fg:x="128" fg:w="11"/><text x="10.5229%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="10.3531%" y="565" width="0.8026%" height="15" fill="rgb(246,185,52)" fg:x="129" fg:w="10"/><text x="10.6031%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="10.5136%" y="549" width="0.6421%" height="15" fill="rgb(252,136,11)" fg:x="131" fg:w="8"/><text x="10.7636%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="10.5136%" y="533" width="0.6421%" height="15" fill="rgb(219,138,53)" fg:x="131" fg:w="8"/><text x="10.7636%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="10.5136%" y="517" width="0.6421%" height="15" fill="rgb(211,51,23)" fg:x="131" fg:w="8"/><text x="10.7636%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="10.8347%" y="501" width="0.3210%" height="15" fill="rgb(247,221,28)" fg:x="135" fg:w="4"/><text x="11.0847%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="10.9149%" y="485" width="0.2408%" height="15" fill="rgb(251,222,45)" fg:x="136" fg:w="3"/><text x="11.1649%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.9952%" y="469" width="0.1605%" height="15" fill="rgb(217,162,53)" fg:x="137" fg:w="2"/><text x="11.2452%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.0754%" y="453" width="0.0803%" height="15" fill="rgb(229,93,14)" fg:x="138" fg:w="1"/><text x="11.3254%" y="463.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="11.1557%" y="693" width="0.1605%" height="15" fill="rgb(209,67,49)" fg:x="139" fg:w="2"/><text x="11.4057%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="11.1557%" y="677" width="0.1605%" height="15" fill="rgb(213,87,29)" fg:x="139" fg:w="2"/><text x="11.4057%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="11.1557%" y="661" width="0.1605%" height="15" fill="rgb(205,151,52)" fg:x="139" fg:w="2"/><text x="11.4057%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.1557%" y="645" width="0.1605%" height="15" fill="rgb(253,215,39)" fg:x="139" fg:w="2"/><text x="11.4057%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="11.2360%" y="629" width="0.0803%" height="15" fill="rgb(221,220,41)" fg:x="140" fg:w="1"/><text x="11.4860%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2360%" y="613" width="0.0803%" height="15" fill="rgb(218,133,21)" fg:x="140" fg:w="1"/><text x="11.4860%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.2360%" y="597" width="0.0803%" height="15" fill="rgb(221,193,43)" fg:x="140" fg:w="1"/><text x="11.4860%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.3965%" y="645" width="0.0803%" height="15" fill="rgb(240,128,52)" fg:x="142" fg:w="1"/><text x="11.6465%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.3965%" y="629" width="0.0803%" height="15" fill="rgb(253,114,12)" fg:x="142" fg:w="1"/><text x="11.6465%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.3965%" y="613" width="0.0803%" height="15" fill="rgb(215,223,47)" fg:x="142" fg:w="1"/><text x="11.6465%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="11.3162%" y="661" width="0.2408%" height="15" fill="rgb(248,225,23)" fg:x="141" fg:w="3"/><text x="11.5662%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.4767%" y="645" width="0.0803%" height="15" fill="rgb(250,108,0)" fg:x="143" fg:w="1"/><text x="11.7267%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4767%" y="629" width="0.0803%" height="15" fill="rgb(228,208,7)" fg:x="143" fg:w="1"/><text x="11.7267%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.4767%" y="613" width="0.0803%" height="15" fill="rgb(244,45,10)" fg:x="143" fg:w="1"/><text x="11.7267%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4767%" y="597" width="0.0803%" height="15" fill="rgb(207,125,25)" fg:x="143" fg:w="1"/><text x="11.7267%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.4767%" y="581" width="0.0803%" height="15" fill="rgb(210,195,18)" fg:x="143" fg:w="1"/><text x="11.7267%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="11.3162%" y="677" width="0.3210%" height="15" fill="rgb(249,80,12)" fg:x="141" fg:w="4"/><text x="11.5662%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.5570%" y="661" width="0.0803%" height="15" fill="rgb(221,65,9)" fg:x="144" fg:w="1"/><text x="11.8070%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.6372%" y="661" width="0.0803%" height="15" fill="rgb(235,49,36)" fg:x="145" fg:w="1"/><text x="11.8872%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="11.6372%" y="645" width="0.0803%" height="15" fill="rgb(225,32,20)" fg:x="145" fg:w="1"/><text x="11.8872%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.6372%" y="629" width="0.0803%" height="15" fill="rgb(215,141,46)" fg:x="145" fg:w="1"/><text x="11.8872%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="11.7175%" y="661" width="0.0803%" height="15" fill="rgb(250,160,47)" fg:x="146" fg:w="1"/><text x="11.9675%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.7175%" y="645" width="0.0803%" height="15" fill="rgb(216,222,40)" fg:x="146" fg:w="1"/><text x="11.9675%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.7175%" y="629" width="0.0803%" height="15" fill="rgb(234,217,39)" fg:x="146" fg:w="1"/><text x="11.9675%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.7175%" y="613" width="0.0803%" height="15" fill="rgb(207,178,40)" fg:x="146" fg:w="1"/><text x="11.9675%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.7175%" y="597" width="0.0803%" height="15" fill="rgb(221,136,13)" fg:x="146" fg:w="1"/><text x="11.9675%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="11.7978%" y="661" width="0.0803%" height="15" fill="rgb(249,199,10)" fg:x="147" fg:w="1"/><text x="12.0478%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="11.7978%" y="645" width="0.0803%" height="15" fill="rgb(249,222,13)" fg:x="147" fg:w="1"/><text x="12.0478%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.7978%" y="629" width="0.0803%" height="15" fill="rgb(244,185,38)" fg:x="147" fg:w="1"/><text x="12.0478%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.8780%" y="565" width="0.0803%" height="15" fill="rgb(236,202,9)" fg:x="148" fg:w="1"/><text x="12.1280%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="11.8780%" y="613" width="0.1605%" height="15" fill="rgb(250,229,37)" fg:x="148" fg:w="2"/><text x="12.1280%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.8780%" y="597" width="0.1605%" height="15" fill="rgb(206,174,23)" fg:x="148" fg:w="2"/><text x="12.1280%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.8780%" y="581" width="0.1605%" height="15" fill="rgb(211,33,43)" fg:x="148" fg:w="2"/><text x="12.1280%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.9583%" y="565" width="0.0803%" height="15" fill="rgb(245,58,50)" fg:x="149" fg:w="1"/><text x="12.2083%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9583%" y="549" width="0.0803%" height="15" fill="rgb(244,68,36)" fg:x="149" fg:w="1"/><text x="12.2083%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9583%" y="533" width="0.0803%" height="15" fill="rgb(232,229,15)" fg:x="149" fg:w="1"/><text x="12.2083%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9583%" y="517" width="0.0803%" height="15" fill="rgb(254,30,23)" fg:x="149" fg:w="1"/><text x="12.2083%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="11.8780%" y="645" width="0.2408%" height="15" fill="rgb(235,160,14)" fg:x="148" fg:w="3"/><text x="12.1280%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="11.8780%" y="629" width="0.2408%" height="15" fill="rgb(212,155,44)" fg:x="148" fg:w="3"/><text x="12.1280%" y="639.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="12.0385%" y="613" width="0.0803%" height="15" fill="rgb(226,2,50)" fg:x="150" fg:w="1"/><text x="12.2885%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.0385%" y="597" width="0.0803%" height="15" fill="rgb(234,177,6)" fg:x="150" fg:w="1"/><text x="12.2885%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.0385%" y="581" width="0.0803%" height="15" fill="rgb(217,24,9)" fg:x="150" fg:w="1"/><text x="12.2885%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="11.6372%" y="677" width="0.5618%" height="15" fill="rgb(220,13,46)" fg:x="145" fg:w="7"/><text x="11.8872%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="11.8780%" y="661" width="0.3210%" height="15" fill="rgb(239,221,27)" fg:x="148" fg:w="4"/><text x="12.1280%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1188%" y="645" width="0.0803%" height="15" fill="rgb(222,198,25)" fg:x="151" fg:w="1"/><text x="12.3688%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.1188%" y="629" width="0.0803%" height="15" fill="rgb(211,99,13)" fg:x="151" fg:w="1"/><text x="12.3688%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.1188%" y="613" width="0.0803%" height="15" fill="rgb(232,111,31)" fg:x="151" fg:w="1"/><text x="12.3688%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="12.1188%" y="597" width="0.0803%" height="15" fill="rgb(245,82,37)" fg:x="151" fg:w="1"/><text x="12.3688%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.1188%" y="581" width="0.0803%" height="15" fill="rgb(227,149,46)" fg:x="151" fg:w="1"/><text x="12.3688%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1188%" y="565" width="0.0803%" height="15" fill="rgb(218,36,50)" fg:x="151" fg:w="1"/><text x="12.3688%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.1188%" y="549" width="0.0803%" height="15" fill="rgb(226,80,48)" fg:x="151" fg:w="1"/><text x="12.3688%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1188%" y="533" width="0.0803%" height="15" fill="rgb(238,224,15)" fg:x="151" fg:w="1"/><text x="12.3688%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.1188%" y="517" width="0.0803%" height="15" fill="rgb(241,136,10)" fg:x="151" fg:w="1"/><text x="12.3688%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (12 samples, 0.96%)</title><rect x="11.3162%" y="693" width="0.9631%" height="15" fill="rgb(208,32,45)" fg:x="141" fg:w="12"/><text x="11.5662%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1990%" y="677" width="0.0803%" height="15" fill="rgb(207,135,9)" fg:x="152" fg:w="1"/><text x="12.4490%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1990%" y="661" width="0.0803%" height="15" fill="rgb(206,86,44)" fg:x="152" fg:w="1"/><text x="12.4490%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="12.2793%" y="645" width="0.0803%" height="15" fill="rgb(245,177,15)" fg:x="153" fg:w="1"/><text x="12.5293%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="12.2793%" y="661" width="0.1605%" height="15" fill="rgb(206,64,50)" fg:x="153" fg:w="2"/><text x="12.5293%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="12.3596%" y="645" width="0.0803%" height="15" fill="rgb(234,36,40)" fg:x="154" fg:w="1"/><text x="12.6096%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.4398%" y="613" width="0.0803%" height="15" fill="rgb(213,64,8)" fg:x="155" fg:w="1"/><text x="12.6898%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (4 samples, 0.32%)</title><rect x="12.2793%" y="693" width="0.3210%" height="15" fill="rgb(210,75,36)" fg:x="153" fg:w="4"/><text x="12.5293%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (4 samples, 0.32%)</title><rect x="12.2793%" y="677" width="0.3210%" height="15" fill="rgb(229,88,21)" fg:x="153" fg:w="4"/><text x="12.5293%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="12.4398%" y="661" width="0.1605%" height="15" fill="rgb(252,204,47)" fg:x="155" fg:w="2"/><text x="12.6898%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="12.4398%" y="645" width="0.1605%" height="15" fill="rgb(208,77,27)" fg:x="155" fg:w="2"/><text x="12.6898%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.4398%" y="629" width="0.1605%" height="15" fill="rgb(221,76,26)" fg:x="155" fg:w="2"/><text x="12.6898%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="12.5201%" y="613" width="0.0803%" height="15" fill="rgb(225,139,18)" fg:x="156" fg:w="1"/><text x="12.7701%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="12.6003%" y="661" width="0.0803%" height="15" fill="rgb(230,137,11)" fg:x="157" fg:w="1"/><text x="12.8503%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="12.6003%" y="645" width="0.0803%" height="15" fill="rgb(212,28,1)" fg:x="157" fg:w="1"/><text x="12.8503%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.6003%" y="629" width="0.0803%" height="15" fill="rgb(248,164,17)" fg:x="157" fg:w="1"/><text x="12.8503%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.6003%" y="613" width="0.0803%" height="15" fill="rgb(222,171,42)" fg:x="157" fg:w="1"/><text x="12.8503%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.6003%" y="597" width="0.0803%" height="15" fill="rgb(243,84,45)" fg:x="157" fg:w="1"/><text x="12.8503%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6003%" y="581" width="0.0803%" height="15" fill="rgb(252,49,23)" fg:x="157" fg:w="1"/><text x="12.8503%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.6003%" y="565" width="0.0803%" height="15" fill="rgb(215,19,7)" fg:x="157" fg:w="1"/><text x="12.8503%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6003%" y="549" width="0.0803%" height="15" fill="rgb(238,81,41)" fg:x="157" fg:w="1"/><text x="12.8503%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.6003%" y="533" width="0.0803%" height="15" fill="rgb(210,199,37)" fg:x="157" fg:w="1"/><text x="12.8503%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6003%" y="517" width="0.0803%" height="15" fill="rgb(244,192,49)" fg:x="157" fg:w="1"/><text x="12.8503%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="12.6806%" y="645" width="0.1605%" height="15" fill="rgb(226,211,11)" fg:x="158" fg:w="2"/><text x="12.9306%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="12.6806%" y="629" width="0.1605%" height="15" fill="rgb(236,162,54)" fg:x="158" fg:w="2"/><text x="12.9306%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.6806%" y="613" width="0.1605%" height="15" fill="rgb(220,229,9)" fg:x="158" fg:w="2"/><text x="12.9306%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="12.6806%" y="597" width="0.1605%" height="15" fill="rgb(250,87,22)" fg:x="158" fg:w="2"/><text x="12.9306%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7608%" y="581" width="0.0803%" height="15" fill="rgb(239,43,17)" fg:x="159" fg:w="1"/><text x="13.0108%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7608%" y="565" width="0.0803%" height="15" fill="rgb(231,177,25)" fg:x="159" fg:w="1"/><text x="13.0108%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7608%" y="549" width="0.0803%" height="15" fill="rgb(219,179,1)" fg:x="159" fg:w="1"/><text x="13.0108%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.7608%" y="533" width="0.0803%" height="15" fill="rgb(238,219,53)" fg:x="159" fg:w="1"/><text x="13.0108%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8411%" y="581" width="0.0803%" height="15" fill="rgb(232,167,36)" fg:x="160" fg:w="1"/><text x="13.0911%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="12.8411%" y="613" width="0.1605%" height="15" fill="rgb(244,19,51)" fg:x="160" fg:w="2"/><text x="13.0911%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="12.8411%" y="597" width="0.1605%" height="15" fill="rgb(224,6,22)" fg:x="160" fg:w="2"/><text x="13.0911%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.9213%" y="581" width="0.0803%" height="15" fill="rgb(224,145,5)" fg:x="161" fg:w="1"/><text x="13.1713%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9213%" y="565" width="0.0803%" height="15" fill="rgb(234,130,49)" fg:x="161" fg:w="1"/><text x="13.1713%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.9213%" y="549" width="0.0803%" height="15" fill="rgb(254,6,2)" fg:x="161" fg:w="1"/><text x="13.1713%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9213%" y="533" width="0.0803%" height="15" fill="rgb(208,96,46)" fg:x="161" fg:w="1"/><text x="13.1713%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.9213%" y="517" width="0.0803%" height="15" fill="rgb(239,3,39)" fg:x="161" fg:w="1"/><text x="13.1713%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.9213%" y="501" width="0.0803%" height="15" fill="rgb(233,210,1)" fg:x="161" fg:w="1"/><text x="13.1713%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.0016%" y="597" width="0.0803%" height="15" fill="rgb(244,137,37)" fg:x="162" fg:w="1"/><text x="13.2516%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.0016%" y="581" width="0.0803%" height="15" fill="rgb(240,136,2)" fg:x="162" fg:w="1"/><text x="13.2516%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0016%" y="565" width="0.0803%" height="15" fill="rgb(239,18,37)" fg:x="162" fg:w="1"/><text x="13.2516%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.0016%" y="549" width="0.0803%" height="15" fill="rgb(218,185,22)" fg:x="162" fg:w="1"/><text x="13.2516%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0016%" y="533" width="0.0803%" height="15" fill="rgb(225,218,4)" fg:x="162" fg:w="1"/><text x="13.2516%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0016%" y="517" width="0.0803%" height="15" fill="rgb(230,182,32)" fg:x="162" fg:w="1"/><text x="13.2516%" y="527.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (6 samples, 0.48%)</title><rect x="12.6806%" y="661" width="0.4815%" height="15" fill="rgb(242,56,43)" fg:x="158" fg:w="6"/><text x="12.9306%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="12.8411%" y="645" width="0.3210%" height="15" fill="rgb(233,99,24)" fg:x="160" fg:w="4"/><text x="13.0911%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="12.8411%" y="629" width="0.3210%" height="15" fill="rgb(234,209,42)" fg:x="160" fg:w="4"/><text x="13.0911%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="13.0016%" y="613" width="0.1605%" height="15" fill="rgb(227,7,12)" fg:x="162" fg:w="2"/><text x="13.2516%" y="623.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="13.0819%" y="597" width="0.0803%" height="15" fill="rgb(245,203,43)" fg:x="163" fg:w="1"/><text x="13.3319%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.0819%" y="581" width="0.0803%" height="15" fill="rgb(238,205,33)" fg:x="163" fg:w="1"/><text x="13.3319%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (8 samples, 0.64%)</title><rect x="12.6003%" y="693" width="0.6421%" height="15" fill="rgb(231,56,7)" fg:x="157" fg:w="8"/><text x="12.8503%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.64%)</title><rect x="12.6003%" y="677" width="0.6421%" height="15" fill="rgb(244,186,29)" fg:x="157" fg:w="8"/><text x="12.8503%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="13.1621%" y="661" width="0.0803%" height="15" fill="rgb(234,111,31)" fg:x="164" fg:w="1"/><text x="13.4121%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.1621%" y="645" width="0.0803%" height="15" fill="rgb(241,149,10)" fg:x="164" fg:w="1"/><text x="13.4121%" y="655.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="13.1621%" y="629" width="0.0803%" height="15" fill="rgb(249,206,44)" fg:x="164" fg:w="1"/><text x="13.4121%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.1621%" y="613" width="0.0803%" height="15" fill="rgb(251,153,30)" fg:x="164" fg:w="1"/><text x="13.4121%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="13.1621%" y="597" width="0.0803%" height="15" fill="rgb(239,152,38)" fg:x="164" fg:w="1"/><text x="13.4121%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.1621%" y="581" width="0.0803%" height="15" fill="rgb(249,139,47)" fg:x="164" fg:w="1"/><text x="13.4121%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.1621%" y="565" width="0.0803%" height="15" fill="rgb(244,64,35)" fg:x="164" fg:w="1"/><text x="13.4121%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="13.3226%" y="677" width="0.0803%" height="15" fill="rgb(216,46,15)" fg:x="166" fg:w="1"/><text x="13.5726%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="13.3226%" y="661" width="0.0803%" height="15" fill="rgb(250,74,19)" fg:x="166" fg:w="1"/><text x="13.5726%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3226%" y="645" width="0.0803%" height="15" fill="rgb(249,42,33)" fg:x="166" fg:w="1"/><text x="13.5726%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="13.4029%" y="677" width="0.1605%" height="15" fill="rgb(242,149,17)" fg:x="167" fg:w="2"/><text x="13.6529%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="13.4029%" y="661" width="0.1605%" height="15" fill="rgb(244,29,21)" fg:x="167" fg:w="2"/><text x="13.6529%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="13.4831%" y="645" width="0.0803%" height="15" fill="rgb(220,130,37)" fg:x="168" fg:w="1"/><text x="13.7331%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="13.4831%" y="629" width="0.0803%" height="15" fill="rgb(211,67,2)" fg:x="168" fg:w="1"/><text x="13.7331%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="13.4831%" y="613" width="0.0803%" height="15" fill="rgb(235,68,52)" fg:x="168" fg:w="1"/><text x="13.7331%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="13.4831%" y="597" width="0.0803%" height="15" fill="rgb(246,142,3)" fg:x="168" fg:w="1"/><text x="13.7331%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.4831%" y="581" width="0.0803%" height="15" fill="rgb(241,25,7)" fg:x="168" fg:w="1"/><text x="13.7331%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.4831%" y="565" width="0.0803%" height="15" fill="rgb(242,119,39)" fg:x="168" fg:w="1"/><text x="13.7331%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5634%" y="645" width="0.0803%" height="15" fill="rgb(241,98,45)" fg:x="169" fg:w="1"/><text x="13.8134%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5634%" y="629" width="0.0803%" height="15" fill="rgb(254,28,30)" fg:x="169" fg:w="1"/><text x="13.8134%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.5634%" y="613" width="0.0803%" height="15" fill="rgb(241,142,54)" fg:x="169" fg:w="1"/><text x="13.8134%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.5634%" y="597" width="0.0803%" height="15" fill="rgb(222,85,15)" fg:x="169" fg:w="1"/><text x="13.8134%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.5634%" y="581" width="0.0803%" height="15" fill="rgb(210,85,47)" fg:x="169" fg:w="1"/><text x="13.8134%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.5634%" y="565" width="0.0803%" height="15" fill="rgb(224,206,25)" fg:x="169" fg:w="1"/><text x="13.8134%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.5634%" y="549" width="0.0803%" height="15" fill="rgb(243,201,19)" fg:x="169" fg:w="1"/><text x="13.8134%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.5634%" y="533" width="0.0803%" height="15" fill="rgb(236,59,4)" fg:x="169" fg:w="1"/><text x="13.8134%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.5634%" y="517" width="0.0803%" height="15" fill="rgb(254,179,45)" fg:x="169" fg:w="1"/><text x="13.8134%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.5634%" y="501" width="0.0803%" height="15" fill="rgb(226,14,10)" fg:x="169" fg:w="1"/><text x="13.8134%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.5634%" y="485" width="0.0803%" height="15" fill="rgb(244,27,41)" fg:x="169" fg:w="1"/><text x="13.8134%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5634%" y="469" width="0.0803%" height="15" fill="rgb(235,35,32)" fg:x="169" fg:w="1"/><text x="13.8134%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="13.5634%" y="661" width="0.1605%" height="15" fill="rgb(218,68,31)" fg:x="169" fg:w="2"/><text x="13.8134%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6437%" y="645" width="0.0803%" height="15" fill="rgb(207,120,37)" fg:x="170" fg:w="1"/><text x="13.8937%" y="655.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="13.7239%" y="645" width="0.0803%" height="15" fill="rgb(227,98,0)" fg:x="171" fg:w="1"/><text x="13.9739%" y="655.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="13.7239%" y="629" width="0.0803%" height="15" fill="rgb(207,7,3)" fg:x="171" fg:w="1"/><text x="13.9739%" y="639.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="13.7239%" y="613" width="0.0803%" height="15" fill="rgb(206,98,19)" fg:x="171" fg:w="1"/><text x="13.9739%" y="623.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="13.7239%" y="597" width="0.0803%" height="15" fill="rgb(217,5,26)" fg:x="171" fg:w="1"/><text x="13.9739%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="13.7239%" y="581" width="0.0803%" height="15" fill="rgb(235,190,38)" fg:x="171" fg:w="1"/><text x="13.9739%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="13.7239%" y="565" width="0.0803%" height="15" fill="rgb(247,86,24)" fg:x="171" fg:w="1"/><text x="13.9739%" y="575.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="13.7239%" y="549" width="0.0803%" height="15" fill="rgb(205,101,16)" fg:x="171" fg:w="1"/><text x="13.9739%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;()&gt;&gt; (1 samples, 0.08%)</title><rect x="13.7239%" y="533" width="0.0803%" height="15" fill="rgb(246,168,33)" fg:x="171" fg:w="1"/><text x="13.9739%" y="543.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.7239%" y="517" width="0.0803%" height="15" fill="rgb(231,114,1)" fg:x="171" fg:w="1"/><text x="13.9739%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (1 samples, 0.08%)</title><rect x="13.7239%" y="501" width="0.0803%" height="15" fill="rgb(207,184,53)" fg:x="171" fg:w="1"/><text x="13.9739%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (1 samples, 0.08%)</title><rect x="13.7239%" y="485" width="0.0803%" height="15" fill="rgb(224,95,51)" fg:x="171" fg:w="1"/><text x="13.9739%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.08%)</title><rect x="13.7239%" y="469" width="0.0803%" height="15" fill="rgb(212,188,45)" fg:x="171" fg:w="1"/><text x="13.9739%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="13.8042%" y="613" width="0.0803%" height="15" fill="rgb(223,154,38)" fg:x="172" fg:w="1"/><text x="14.0542%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8042%" y="597" width="0.0803%" height="15" fill="rgb(251,22,52)" fg:x="172" fg:w="1"/><text x="14.0542%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="13.8844%" y="613" width="0.1605%" height="15" fill="rgb(229,209,22)" fg:x="173" fg:w="2"/><text x="14.1344%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="13.8844%" y="597" width="0.1605%" height="15" fill="rgb(234,138,34)" fg:x="173" fg:w="2"/><text x="14.1344%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.8844%" y="581" width="0.1605%" height="15" fill="rgb(212,95,11)" fg:x="173" fg:w="2"/><text x="14.1344%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="14.0449%" y="565" width="0.0803%" height="15" fill="rgb(240,179,47)" fg:x="175" fg:w="1"/><text x="14.2949%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="14.0449%" y="549" width="0.0803%" height="15" fill="rgb(240,163,11)" fg:x="175" fg:w="1"/><text x="14.2949%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.0449%" y="533" width="0.0803%" height="15" fill="rgb(236,37,12)" fg:x="175" fg:w="1"/><text x="14.2949%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.0449%" y="517" width="0.0803%" height="15" fill="rgb(232,164,16)" fg:x="175" fg:w="1"/><text x="14.2949%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.0449%" y="501" width="0.0803%" height="15" fill="rgb(244,205,15)" fg:x="175" fg:w="1"/><text x="14.2949%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.0449%" y="485" width="0.0803%" height="15" fill="rgb(223,117,47)" fg:x="175" fg:w="1"/><text x="14.2949%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.0449%" y="469" width="0.0803%" height="15" fill="rgb(244,107,35)" fg:x="175" fg:w="1"/><text x="14.2949%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0449%" y="453" width="0.0803%" height="15" fill="rgb(205,140,8)" fg:x="175" fg:w="1"/><text x="14.2949%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="14.1252%" y="533" width="0.2408%" height="15" fill="rgb(228,84,46)" fg:x="176" fg:w="3"/><text x="14.3752%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.2055%" y="517" width="0.1605%" height="15" fill="rgb(254,188,9)" fg:x="177" fg:w="2"/><text x="14.4555%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.2857%" y="501" width="0.0803%" height="15" fill="rgb(206,112,54)" fg:x="178" fg:w="1"/><text x="14.5357%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="14.1252%" y="549" width="0.3210%" height="15" fill="rgb(216,84,49)" fg:x="176" fg:w="4"/><text x="14.3752%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.3660%" y="533" width="0.0803%" height="15" fill="rgb(214,194,35)" fg:x="179" fg:w="1"/><text x="14.6160%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.3660%" y="517" width="0.0803%" height="15" fill="rgb(249,28,3)" fg:x="179" fg:w="1"/><text x="14.6160%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.3660%" y="501" width="0.0803%" height="15" fill="rgb(222,56,52)" fg:x="179" fg:w="1"/><text x="14.6160%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.5265%" y="533" width="0.0803%" height="15" fill="rgb(245,217,50)" fg:x="181" fg:w="1"/><text x="14.7765%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.6067%" y="517" width="0.0803%" height="15" fill="rgb(213,201,24)" fg:x="182" fg:w="1"/><text x="14.8567%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="14.6870%" y="517" width="0.1605%" height="15" fill="rgb(248,116,28)" fg:x="183" fg:w="2"/><text x="14.9370%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="14.6870%" y="501" width="0.1605%" height="15" fill="rgb(219,72,43)" fg:x="183" fg:w="2"/><text x="14.9370%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="14.6870%" y="485" width="0.1605%" height="15" fill="rgb(209,138,14)" fg:x="183" fg:w="2"/><text x="14.9370%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="14.8475%" y="517" width="0.2408%" height="15" fill="rgb(222,18,33)" fg:x="185" fg:w="3"/><text x="15.0975%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.0080%" y="501" width="0.0803%" height="15" fill="rgb(213,199,7)" fg:x="187" fg:w="1"/><text x="15.2580%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.0080%" y="485" width="0.0803%" height="15" fill="rgb(250,110,10)" fg:x="187" fg:w="1"/><text x="15.2580%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.0080%" y="469" width="0.0803%" height="15" fill="rgb(248,123,6)" fg:x="187" fg:w="1"/><text x="15.2580%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.0080%" y="453" width="0.0803%" height="15" fill="rgb(206,91,31)" fg:x="187" fg:w="1"/><text x="15.2580%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.0080%" y="437" width="0.0803%" height="15" fill="rgb(211,154,13)" fg:x="187" fg:w="1"/><text x="15.2580%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.0080%" y="421" width="0.0803%" height="15" fill="rgb(225,148,7)" fg:x="187" fg:w="1"/><text x="15.2580%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (7 samples, 0.56%)</title><rect x="15.1685%" y="501" width="0.5618%" height="15" fill="rgb(220,160,43)" fg:x="189" fg:w="7"/><text x="15.4185%" y="511.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="15.3291%" y="485" width="0.4013%" height="15" fill="rgb(213,52,39)" fg:x="191" fg:w="5"/><text x="15.5791%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="15.4093%" y="469" width="0.3210%" height="15" fill="rgb(243,137,7)" fg:x="192" fg:w="4"/><text x="15.6593%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="15.4093%" y="453" width="0.3210%" height="15" fill="rgb(230,79,13)" fg:x="192" fg:w="4"/><text x="15.6593%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="15.4896%" y="437" width="0.2408%" height="15" fill="rgb(247,105,23)" fg:x="193" fg:w="3"/><text x="15.7396%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="15.4896%" y="421" width="0.2408%" height="15" fill="rgb(223,179,41)" fg:x="193" fg:w="3"/><text x="15.7396%" y="431.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="15.4896%" y="405" width="0.2408%" height="15" fill="rgb(218,9,34)" fg:x="193" fg:w="3"/><text x="15.7396%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="15.9711%" y="437" width="0.1605%" height="15" fill="rgb(222,106,8)" fg:x="199" fg:w="2"/><text x="16.2211%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="15.9711%" y="421" width="0.1605%" height="15" fill="rgb(211,220,0)" fg:x="199" fg:w="2"/><text x="16.2211%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="15.9711%" y="405" width="0.1605%" height="15" fill="rgb(229,52,16)" fg:x="199" fg:w="2"/><text x="16.2211%" y="415.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="15.9711%" y="389" width="0.1605%" height="15" fill="rgb(212,155,18)" fg:x="199" fg:w="2"/><text x="16.2211%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.48%)</title><rect x="15.7303%" y="485" width="0.4815%" height="15" fill="rgb(242,21,14)" fg:x="196" fg:w="6"/><text x="15.9803%" y="495.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="15.8909%" y="469" width="0.3210%" height="15" fill="rgb(222,19,48)" fg:x="198" fg:w="4"/><text x="16.1409%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="15.9711%" y="453" width="0.2408%" height="15" fill="rgb(232,45,27)" fg:x="199" fg:w="3"/><text x="16.2211%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="16.1316%" y="437" width="0.0803%" height="15" fill="rgb(249,103,42)" fg:x="201" fg:w="1"/><text x="16.3816%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.20%)</title><rect x="15.0883%" y="517" width="1.2039%" height="15" fill="rgb(246,81,33)" fg:x="188" fg:w="15"/><text x="15.3383%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="15.7303%" y="501" width="0.5618%" height="15" fill="rgb(252,33,42)" fg:x="196" fg:w="7"/><text x="15.9803%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="16.2119%" y="485" width="0.0803%" height="15" fill="rgb(209,212,41)" fg:x="202" fg:w="1"/><text x="16.4619%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.2119%" y="469" width="0.0803%" height="15" fill="rgb(207,154,6)" fg:x="202" fg:w="1"/><text x="16.4619%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.2119%" y="453" width="0.0803%" height="15" fill="rgb(223,64,47)" fg:x="202" fg:w="1"/><text x="16.4619%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (22 samples, 1.77%)</title><rect x="14.6067%" y="533" width="1.7657%" height="15" fill="rgb(211,161,38)" fg:x="182" fg:w="22"/><text x="14.8567%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.2921%" y="517" width="0.0803%" height="15" fill="rgb(219,138,40)" fg:x="203" fg:w="1"/><text x="16.5421%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (29 samples, 2.33%)</title><rect x="14.1252%" y="565" width="2.3274%" height="15" fill="rgb(241,228,46)" fg:x="176" fg:w="29"/><text x="14.3752%" y="575.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (25 samples, 2.01%)</title><rect x="14.4462%" y="549" width="2.0064%" height="15" fill="rgb(223,209,38)" fg:x="180" fg:w="25"/><text x="14.6962%" y="559.50">s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.3724%" y="533" width="0.0803%" height="15" fill="rgb(236,164,45)" fg:x="204" fg:w="1"/><text x="16.6224%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.4526%" y="533" width="0.0803%" height="15" fill="rgb(231,15,5)" fg:x="205" fg:w="1"/><text x="16.7026%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="16.6132%" y="501" width="0.1605%" height="15" fill="rgb(252,35,15)" fg:x="207" fg:w="2"/><text x="16.8632%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.6934%" y="485" width="0.0803%" height="15" fill="rgb(248,181,18)" fg:x="208" fg:w="1"/><text x="16.9434%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.9342%" y="485" width="0.0803%" height="15" fill="rgb(233,39,42)" fg:x="211" fg:w="1"/><text x="17.1842%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.9342%" y="469" width="0.0803%" height="15" fill="rgb(238,110,33)" fg:x="211" fg:w="1"/><text x="17.1842%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="16.4526%" y="565" width="0.7223%" height="15" fill="rgb(233,195,10)" fg:x="205" fg:w="9"/><text x="16.7026%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="16.4526%" y="549" width="0.7223%" height="15" fill="rgb(254,105,3)" fg:x="205" fg:w="9"/><text x="16.7026%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="16.5329%" y="533" width="0.6421%" height="15" fill="rgb(221,225,9)" fg:x="206" fg:w="8"/><text x="16.7829%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="16.6132%" y="517" width="0.5618%" height="15" fill="rgb(224,227,45)" fg:x="207" fg:w="7"/><text x="16.8632%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="16.7737%" y="501" width="0.4013%" height="15" fill="rgb(229,198,43)" fg:x="209" fg:w="5"/><text x="17.0237%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="17.0144%" y="485" width="0.1605%" height="15" fill="rgb(206,209,35)" fg:x="212" fg:w="2"/><text x="17.2644%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="17.0144%" y="469" width="0.1605%" height="15" fill="rgb(245,195,53)" fg:x="212" fg:w="2"/><text x="17.2644%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0947%" y="453" width="0.0803%" height="15" fill="rgb(240,92,26)" fg:x="213" fg:w="1"/><text x="17.3447%" y="463.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="17.1750%" y="549" width="0.0803%" height="15" fill="rgb(207,40,23)" fg:x="214" fg:w="1"/><text x="17.4250%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.1750%" y="533" width="0.0803%" height="15" fill="rgb(223,111,35)" fg:x="214" fg:w="1"/><text x="17.4250%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3355%" y="517" width="0.0803%" height="15" fill="rgb(229,147,28)" fg:x="216" fg:w="1"/><text x="17.5855%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.4157%" y="517" width="0.1605%" height="15" fill="rgb(211,29,28)" fg:x="217" fg:w="2"/><text x="17.6657%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="17.4157%" y="501" width="0.1605%" height="15" fill="rgb(228,72,33)" fg:x="217" fg:w="2"/><text x="17.6657%" y="511.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="17.5762%" y="517" width="0.0803%" height="15" fill="rgb(205,214,31)" fg:x="219" fg:w="1"/><text x="17.8262%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.5762%" y="501" width="0.0803%" height="15" fill="rgb(224,111,15)" fg:x="219" fg:w="1"/><text x="17.8262%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.5762%" y="485" width="0.0803%" height="15" fill="rgb(253,21,26)" fg:x="219" fg:w="1"/><text x="17.8262%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7368%" y="469" width="0.0803%" height="15" fill="rgb(245,139,43)" fg:x="221" fg:w="1"/><text x="17.9868%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.8170%" y="421" width="0.1605%" height="15" fill="rgb(252,170,7)" fg:x="222" fg:w="2"/><text x="18.0670%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8973%" y="405" width="0.0803%" height="15" fill="rgb(231,118,14)" fg:x="223" fg:w="1"/><text x="18.1473%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="17.8170%" y="437" width="0.2408%" height="15" fill="rgb(238,83,0)" fg:x="222" fg:w="3"/><text x="18.0670%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.9775%" y="421" width="0.0803%" height="15" fill="rgb(221,39,39)" fg:x="224" fg:w="1"/><text x="18.2275%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.9775%" y="405" width="0.0803%" height="15" fill="rgb(222,119,46)" fg:x="224" fg:w="1"/><text x="18.2275%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.9775%" y="389" width="0.0803%" height="15" fill="rgb(222,165,49)" fg:x="224" fg:w="1"/><text x="18.2275%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.9775%" y="373" width="0.0803%" height="15" fill="rgb(219,113,52)" fg:x="224" fg:w="1"/><text x="18.2275%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="17.8170%" y="469" width="0.3210%" height="15" fill="rgb(214,7,15)" fg:x="222" fg:w="4"/><text x="18.0670%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="17.8170%" y="453" width="0.3210%" height="15" fill="rgb(235,32,4)" fg:x="222" fg:w="4"/><text x="18.0670%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0578%" y="437" width="0.0803%" height="15" fill="rgb(238,90,54)" fg:x="225" fg:w="1"/><text x="18.3078%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="18.2183%" y="421" width="0.1605%" height="15" fill="rgb(213,208,19)" fg:x="227" fg:w="2"/><text x="18.4683%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="18.2183%" y="405" width="0.1605%" height="15" fill="rgb(233,156,4)" fg:x="227" fg:w="2"/><text x="18.4683%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.80%)</title><rect x="17.6565%" y="485" width="0.8026%" height="15" fill="rgb(207,194,5)" fg:x="220" fg:w="10"/><text x="17.9065%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="18.1380%" y="469" width="0.3210%" height="15" fill="rgb(206,111,30)" fg:x="226" fg:w="4"/><text x="18.3880%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="18.2183%" y="453" width="0.2408%" height="15" fill="rgb(243,70,54)" fg:x="227" fg:w="3"/><text x="18.4683%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="18.2183%" y="437" width="0.2408%" height="15" fill="rgb(242,28,8)" fg:x="227" fg:w="3"/><text x="18.4683%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.3788%" y="421" width="0.0803%" height="15" fill="rgb(219,106,18)" fg:x="229" fg:w="1"/><text x="18.6288%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.88%)</title><rect x="17.6565%" y="501" width="0.8828%" height="15" fill="rgb(244,222,10)" fg:x="220" fg:w="11"/><text x="17.9065%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="18.4591%" y="485" width="0.0803%" height="15" fill="rgb(236,179,52)" fg:x="230" fg:w="1"/><text x="18.7091%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.4591%" y="469" width="0.0803%" height="15" fill="rgb(213,23,39)" fg:x="230" fg:w="1"/><text x="18.7091%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5393%" y="501" width="0.0803%" height="15" fill="rgb(238,48,10)" fg:x="231" fg:w="1"/><text x="18.7893%" y="511.50"></text></g><g><title>engine::session::Session::flush (64 samples, 5.14%)</title><rect x="13.5634%" y="677" width="5.1364%" height="15" fill="rgb(251,196,23)" fg:x="169" fg:w="64"/><text x="13.8134%" y="687.50">engine..</text></g><g><title>engine::session::Session::save_changes (62 samples, 4.98%)</title><rect x="13.7239%" y="661" width="4.9759%" height="15" fill="rgb(250,152,24)" fg:x="171" fg:w="62"/><text x="13.9739%" y="671.50">engine..</text></g><g><title>engine::session::state::State::close (61 samples, 4.90%)</title><rect x="13.8042%" y="645" width="4.8957%" height="15" fill="rgb(209,150,17)" fg:x="172" fg:w="61"/><text x="14.0542%" y="655.50">engine..</text></g><g><title>engine::session::state::State::flush_entities (61 samples, 4.90%)</title><rect x="13.8042%" y="629" width="4.8957%" height="15" fill="rgb(234,202,34)" fg:x="172" fg:w="61"/><text x="14.0542%" y="639.50">engine..</text></g><g><title>core::iter::adapters::try_process (58 samples, 4.65%)</title><rect x="14.0449%" y="613" width="4.6549%" height="15" fill="rgb(253,148,53)" fg:x="175" fg:w="58"/><text x="14.2949%" y="623.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (58 samples, 4.65%)</title><rect x="14.0449%" y="597" width="4.6549%" height="15" fill="rgb(218,129,16)" fg:x="175" fg:w="58"/><text x="14.2949%" y="607.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (58 samples, 4.65%)</title><rect x="14.0449%" y="581" width="4.6549%" height="15" fill="rgb(216,85,19)" fg:x="175" fg:w="58"/><text x="14.2949%" y="591.50">engin..</text></g><g><title>kernel::model::any_entity_changes (19 samples, 1.52%)</title><rect x="17.1750%" y="565" width="1.5249%" height="15" fill="rgb(235,228,7)" fg:x="214" fg:w="19"/><text x="17.4250%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (18 samples, 1.44%)</title><rect x="17.2552%" y="549" width="1.4446%" height="15" fill="rgb(245,175,0)" fg:x="215" fg:w="18"/><text x="17.5052%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (18 samples, 1.44%)</title><rect x="17.2552%" y="533" width="1.4446%" height="15" fill="rgb(208,168,36)" fg:x="215" fg:w="18"/><text x="17.5052%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.04%)</title><rect x="17.6565%" y="517" width="1.0433%" height="15" fill="rgb(246,171,24)" fg:x="220" fg:w="13"/><text x="17.9065%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.6196%" y="501" width="0.0803%" height="15" fill="rgb(215,142,24)" fg:x="232" fg:w="1"/><text x="18.8696%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="18.6196%" y="485" width="0.0803%" height="15" fill="rgb(250,187,7)" fg:x="232" fg:w="1"/><text x="18.8696%" y="495.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="18.6998%" y="661" width="0.0803%" height="15" fill="rgb(228,66,33)" fg:x="233" fg:w="1"/><text x="18.9498%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="18.6998%" y="645" width="0.0803%" height="15" fill="rgb(234,215,21)" fg:x="233" fg:w="1"/><text x="18.9498%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.6998%" y="629" width="0.0803%" height="15" fill="rgb(222,191,20)" fg:x="233" fg:w="1"/><text x="18.9498%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.6998%" y="613" width="0.0803%" height="15" fill="rgb(245,79,54)" fg:x="233" fg:w="1"/><text x="18.9498%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.6998%" y="597" width="0.0803%" height="15" fill="rgb(240,10,37)" fg:x="233" fg:w="1"/><text x="18.9498%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6998%" y="581" width="0.0803%" height="15" fill="rgb(214,192,32)" fg:x="233" fg:w="1"/><text x="18.9498%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="18.7801%" y="645" width="0.2408%" height="15" fill="rgb(209,36,54)" fg:x="234" fg:w="3"/><text x="19.0301%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="18.7801%" y="629" width="0.2408%" height="15" fill="rgb(220,10,11)" fg:x="234" fg:w="3"/><text x="19.0301%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="18.7801%" y="613" width="0.2408%" height="15" fill="rgb(221,106,17)" fg:x="234" fg:w="3"/><text x="19.0301%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="18.8604%" y="597" width="0.1605%" height="15" fill="rgb(251,142,44)" fg:x="235" fg:w="2"/><text x="19.1104%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.8604%" y="581" width="0.1605%" height="15" fill="rgb(238,13,15)" fg:x="235" fg:w="2"/><text x="19.1104%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.9406%" y="565" width="0.0803%" height="15" fill="rgb(208,107,27)" fg:x="236" fg:w="1"/><text x="19.1906%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0209%" y="597" width="0.0803%" height="15" fill="rgb(205,136,37)" fg:x="237" fg:w="1"/><text x="19.2709%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.0209%" y="581" width="0.0803%" height="15" fill="rgb(250,205,27)" fg:x="237" fg:w="1"/><text x="19.2709%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="19.0209%" y="629" width="0.1605%" height="15" fill="rgb(210,80,43)" fg:x="237" fg:w="2"/><text x="19.2709%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.0209%" y="613" width="0.1605%" height="15" fill="rgb(247,160,36)" fg:x="237" fg:w="2"/><text x="19.2709%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.1011%" y="597" width="0.0803%" height="15" fill="rgb(234,13,49)" fg:x="238" fg:w="1"/><text x="19.3511%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.1011%" y="581" width="0.0803%" height="15" fill="rgb(234,122,0)" fg:x="238" fg:w="1"/><text x="19.3511%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.1011%" y="565" width="0.0803%" height="15" fill="rgb(207,146,38)" fg:x="238" fg:w="1"/><text x="19.3511%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.1011%" y="549" width="0.0803%" height="15" fill="rgb(207,177,25)" fg:x="238" fg:w="1"/><text x="19.3511%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.1011%" y="533" width="0.0803%" height="15" fill="rgb(211,178,42)" fg:x="238" fg:w="1"/><text x="19.3511%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.1011%" y="517" width="0.0803%" height="15" fill="rgb(230,69,54)" fg:x="238" fg:w="1"/><text x="19.3511%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.1011%" y="501" width="0.0803%" height="15" fill="rgb(214,135,41)" fg:x="238" fg:w="1"/><text x="19.3511%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.1011%" y="485" width="0.0803%" height="15" fill="rgb(237,67,25)" fg:x="238" fg:w="1"/><text x="19.3511%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.1011%" y="469" width="0.0803%" height="15" fill="rgb(222,189,50)" fg:x="238" fg:w="1"/><text x="19.3511%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.1011%" y="453" width="0.0803%" height="15" fill="rgb(245,148,34)" fg:x="238" fg:w="1"/><text x="19.3511%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.1011%" y="437" width="0.0803%" height="15" fill="rgb(222,29,6)" fg:x="238" fg:w="1"/><text x="19.3511%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.1011%" y="421" width="0.0803%" height="15" fill="rgb(221,189,43)" fg:x="238" fg:w="1"/><text x="19.3511%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.1814%" y="597" width="0.0803%" height="15" fill="rgb(207,36,27)" fg:x="239" fg:w="1"/><text x="19.4314%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (4 samples, 0.32%)</title><rect x="19.0209%" y="645" width="0.3210%" height="15" fill="rgb(217,90,24)" fg:x="237" fg:w="4"/><text x="19.2709%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="19.1814%" y="629" width="0.1605%" height="15" fill="rgb(224,66,35)" fg:x="239" fg:w="2"/><text x="19.4314%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="19.1814%" y="613" width="0.1605%" height="15" fill="rgb(221,13,50)" fg:x="239" fg:w="2"/><text x="19.4314%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.2616%" y="597" width="0.0803%" height="15" fill="rgb(236,68,49)" fg:x="240" fg:w="1"/><text x="19.5116%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="19.2616%" y="581" width="0.0803%" height="15" fill="rgb(229,146,28)" fg:x="240" fg:w="1"/><text x="19.5116%" y="591.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="19.3419%" y="645" width="0.0803%" height="15" fill="rgb(225,31,38)" fg:x="241" fg:w="1"/><text x="19.5919%" y="655.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="19.3419%" y="629" width="0.0803%" height="15" fill="rgb(250,208,3)" fg:x="241" fg:w="1"/><text x="19.5919%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="19.4222%" y="597" width="0.0803%" height="15" fill="rgb(246,54,23)" fg:x="242" fg:w="1"/><text x="19.6722%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.4222%" y="581" width="0.0803%" height="15" fill="rgb(243,76,11)" fg:x="242" fg:w="1"/><text x="19.6722%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.4222%" y="565" width="0.0803%" height="15" fill="rgb(245,21,50)" fg:x="242" fg:w="1"/><text x="19.6722%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="19.5827%" y="581" width="0.0803%" height="15" fill="rgb(228,9,43)" fg:x="244" fg:w="1"/><text x="19.8327%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="19.4222%" y="629" width="0.3210%" height="15" fill="rgb(208,100,47)" fg:x="242" fg:w="4"/><text x="19.6722%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="19.4222%" y="613" width="0.3210%" height="15" fill="rgb(232,26,8)" fg:x="242" fg:w="4"/><text x="19.6722%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.24%)</title><rect x="19.5024%" y="597" width="0.2408%" height="15" fill="rgb(216,166,38)" fg:x="243" fg:w="3"/><text x="19.7524%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="19.6629%" y="581" width="0.0803%" height="15" fill="rgb(251,202,51)" fg:x="245" fg:w="1"/><text x="19.9129%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="19.6629%" y="565" width="0.0803%" height="15" fill="rgb(254,216,34)" fg:x="245" fg:w="1"/><text x="19.9129%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.6629%" y="549" width="0.0803%" height="15" fill="rgb(251,32,27)" fg:x="245" fg:w="1"/><text x="19.9129%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.6629%" y="533" width="0.0803%" height="15" fill="rgb(208,127,28)" fg:x="245" fg:w="1"/><text x="19.9129%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6629%" y="517" width="0.0803%" height="15" fill="rgb(224,137,22)" fg:x="245" fg:w="1"/><text x="19.9129%" y="527.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="19.7432%" y="629" width="0.0803%" height="15" fill="rgb(254,70,32)" fg:x="246" fg:w="1"/><text x="19.9932%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (16 samples, 1.28%)</title><rect x="18.6998%" y="677" width="1.2841%" height="15" fill="rgb(229,75,37)" fg:x="233" fg:w="16"/><text x="18.9498%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (15 samples, 1.20%)</title><rect x="18.7801%" y="661" width="1.2039%" height="15" fill="rgb(252,64,23)" fg:x="234" fg:w="15"/><text x="19.0301%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.56%)</title><rect x="19.4222%" y="645" width="0.5618%" height="15" fill="rgb(232,162,48)" fg:x="242" fg:w="7"/><text x="19.6722%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="19.8234%" y="629" width="0.1605%" height="15" fill="rgb(246,160,12)" fg:x="247" fg:w="2"/><text x="20.0734%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="19.8234%" y="613" width="0.1605%" height="15" fill="rgb(247,166,0)" fg:x="247" fg:w="2"/><text x="20.0734%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.9037%" y="597" width="0.0803%" height="15" fill="rgb(249,219,21)" fg:x="248" fg:w="1"/><text x="20.1537%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.9037%" y="581" width="0.0803%" height="15" fill="rgb(205,209,3)" fg:x="248" fg:w="1"/><text x="20.1537%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.9839%" y="581" width="0.0803%" height="15" fill="rgb(243,44,1)" fg:x="249" fg:w="1"/><text x="20.2339%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.9839%" y="565" width="0.0803%" height="15" fill="rgb(206,159,16)" fg:x="249" fg:w="1"/><text x="20.2339%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.9839%" y="549" width="0.0803%" height="15" fill="rgb(244,77,30)" fg:x="249" fg:w="1"/><text x="20.2339%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.9839%" y="533" width="0.0803%" height="15" fill="rgb(218,69,12)" fg:x="249" fg:w="1"/><text x="20.2339%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.9839%" y="517" width="0.0803%" height="15" fill="rgb(212,87,7)" fg:x="249" fg:w="1"/><text x="20.2339%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.9839%" y="501" width="0.0803%" height="15" fill="rgb(245,114,25)" fg:x="249" fg:w="1"/><text x="20.2339%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.9839%" y="485" width="0.0803%" height="15" fill="rgb(210,61,42)" fg:x="249" fg:w="1"/><text x="20.2339%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.9839%" y="469" width="0.0803%" height="15" fill="rgb(211,52,33)" fg:x="249" fg:w="1"/><text x="20.2339%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.9839%" y="453" width="0.0803%" height="15" fill="rgb(234,58,33)" fg:x="249" fg:w="1"/><text x="20.2339%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.9839%" y="437" width="0.0803%" height="15" fill="rgb(220,115,36)" fg:x="249" fg:w="1"/><text x="20.2339%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.9839%" y="421" width="0.0803%" height="15" fill="rgb(243,153,54)" fg:x="249" fg:w="1"/><text x="20.2339%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.9839%" y="405" width="0.0803%" height="15" fill="rgb(251,47,18)" fg:x="249" fg:w="1"/><text x="20.2339%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="19.9839%" y="645" width="0.2408%" height="15" fill="rgb(242,102,42)" fg:x="249" fg:w="3"/><text x="20.2339%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="19.9839%" y="629" width="0.2408%" height="15" fill="rgb(234,31,38)" fg:x="249" fg:w="3"/><text x="20.2339%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="19.9839%" y="613" width="0.2408%" height="15" fill="rgb(221,117,51)" fg:x="249" fg:w="3"/><text x="20.2339%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="19.9839%" y="597" width="0.2408%" height="15" fill="rgb(212,20,18)" fg:x="249" fg:w="3"/><text x="20.2339%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="20.0642%" y="581" width="0.1605%" height="15" fill="rgb(245,133,36)" fg:x="250" fg:w="2"/><text x="20.3142%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.0642%" y="565" width="0.1605%" height="15" fill="rgb(212,6,19)" fg:x="250" fg:w="2"/><text x="20.3142%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="20.0642%" y="549" width="0.1605%" height="15" fill="rgb(218,1,36)" fg:x="250" fg:w="2"/><text x="20.3142%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.0642%" y="533" width="0.1605%" height="15" fill="rgb(246,84,54)" fg:x="250" fg:w="2"/><text x="20.3142%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.1445%" y="517" width="0.0803%" height="15" fill="rgb(242,110,6)" fg:x="251" fg:w="1"/><text x="20.3945%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.1445%" y="501" width="0.0803%" height="15" fill="rgb(214,47,5)" fg:x="251" fg:w="1"/><text x="20.3945%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.1445%" y="485" width="0.0803%" height="15" fill="rgb(218,159,25)" fg:x="251" fg:w="1"/><text x="20.3945%" y="495.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="20.2247%" y="629" width="0.0803%" height="15" fill="rgb(215,211,28)" fg:x="252" fg:w="1"/><text x="20.4747%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.2247%" y="613" width="0.0803%" height="15" fill="rgb(238,59,32)" fg:x="252" fg:w="1"/><text x="20.4747%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="20.2247%" y="597" width="0.0803%" height="15" fill="rgb(226,82,3)" fg:x="252" fg:w="1"/><text x="20.4747%" y="607.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="20.2247%" y="581" width="0.0803%" height="15" fill="rgb(240,164,32)" fg:x="252" fg:w="1"/><text x="20.4747%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.2247%" y="565" width="0.0803%" height="15" fill="rgb(232,46,7)" fg:x="252" fg:w="1"/><text x="20.4747%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (5 samples, 0.40%)</title><rect x="19.9839%" y="677" width="0.4013%" height="15" fill="rgb(229,129,53)" fg:x="249" fg:w="5"/><text x="20.2339%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.40%)</title><rect x="19.9839%" y="661" width="0.4013%" height="15" fill="rgb(234,188,29)" fg:x="249" fg:w="5"/><text x="20.2339%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="20.2247%" y="645" width="0.1605%" height="15" fill="rgb(246,141,4)" fg:x="252" fg:w="2"/><text x="20.4747%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="20.3050%" y="629" width="0.0803%" height="15" fill="rgb(229,23,39)" fg:x="253" fg:w="1"/><text x="20.5550%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.3050%" y="613" width="0.0803%" height="15" fill="rgb(206,12,3)" fg:x="253" fg:w="1"/><text x="20.5550%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3050%" y="597" width="0.0803%" height="15" fill="rgb(252,226,20)" fg:x="253" fg:w="1"/><text x="20.5550%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="20.3852%" y="645" width="0.0803%" height="15" fill="rgb(216,123,35)" fg:x="254" fg:w="1"/><text x="20.6352%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="20.3852%" y="629" width="0.0803%" height="15" fill="rgb(212,68,40)" fg:x="254" fg:w="1"/><text x="20.6352%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="20.3852%" y="661" width="0.1605%" height="15" fill="rgb(254,125,32)" fg:x="254" fg:w="2"/><text x="20.6352%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.4655%" y="645" width="0.0803%" height="15" fill="rgb(253,97,22)" fg:x="255" fg:w="1"/><text x="20.7155%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.4655%" y="629" width="0.0803%" height="15" fill="rgb(241,101,14)" fg:x="255" fg:w="1"/><text x="20.7155%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.4655%" y="613" width="0.0803%" height="15" fill="rgb(238,103,29)" fg:x="255" fg:w="1"/><text x="20.7155%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.4655%" y="597" width="0.0803%" height="15" fill="rgb(233,195,47)" fg:x="255" fg:w="1"/><text x="20.7155%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="20.4655%" y="581" width="0.0803%" height="15" fill="rgb(246,218,30)" fg:x="255" fg:w="1"/><text x="20.7155%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="20.4655%" y="565" width="0.0803%" height="15" fill="rgb(219,145,47)" fg:x="255" fg:w="1"/><text x="20.7155%" y="575.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="20.4655%" y="549" width="0.0803%" height="15" fill="rgb(243,12,26)" fg:x="255" fg:w="1"/><text x="20.7155%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="20.3852%" y="677" width="0.2408%" height="15" fill="rgb(214,87,16)" fg:x="254" fg:w="3"/><text x="20.6352%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="20.5457%" y="661" width="0.0803%" height="15" fill="rgb(208,99,42)" fg:x="256" fg:w="1"/><text x="20.7957%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="20.5457%" y="645" width="0.0803%" height="15" fill="rgb(253,99,2)" fg:x="256" fg:w="1"/><text x="20.7957%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="20.5457%" y="629" width="0.0803%" height="15" fill="rgb(220,168,23)" fg:x="256" fg:w="1"/><text x="20.7957%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.5457%" y="613" width="0.0803%" height="15" fill="rgb(242,38,24)" fg:x="256" fg:w="1"/><text x="20.7957%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="20.6260%" y="661" width="0.0803%" height="15" fill="rgb(225,182,9)" fg:x="257" fg:w="1"/><text x="20.8760%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="20.6260%" y="645" width="0.0803%" height="15" fill="rgb(243,178,37)" fg:x="257" fg:w="1"/><text x="20.8760%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.7063%" y="597" width="0.0803%" height="15" fill="rgb(232,139,19)" fg:x="258" fg:w="1"/><text x="20.9563%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.7063%" y="581" width="0.0803%" height="15" fill="rgb(225,201,24)" fg:x="258" fg:w="1"/><text x="20.9563%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.7063%" y="565" width="0.0803%" height="15" fill="rgb(221,47,46)" fg:x="258" fg:w="1"/><text x="20.9563%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.7063%" y="549" width="0.0803%" height="15" fill="rgb(249,23,13)" fg:x="258" fg:w="1"/><text x="20.9563%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.7063%" y="533" width="0.0803%" height="15" fill="rgb(219,9,5)" fg:x="258" fg:w="1"/><text x="20.9563%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.7063%" y="517" width="0.0803%" height="15" fill="rgb(254,171,16)" fg:x="258" fg:w="1"/><text x="20.9563%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.7063%" y="501" width="0.0803%" height="15" fill="rgb(230,171,20)" fg:x="258" fg:w="1"/><text x="20.9563%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.7063%" y="485" width="0.0803%" height="15" fill="rgb(210,71,41)" fg:x="258" fg:w="1"/><text x="20.9563%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.7063%" y="469" width="0.0803%" height="15" fill="rgb(206,173,20)" fg:x="258" fg:w="1"/><text x="20.9563%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.7063%" y="453" width="0.0803%" height="15" fill="rgb(233,88,34)" fg:x="258" fg:w="1"/><text x="20.9563%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.7063%" y="437" width="0.0803%" height="15" fill="rgb(223,209,46)" fg:x="258" fg:w="1"/><text x="20.9563%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.7063%" y="421" width="0.0803%" height="15" fill="rgb(250,43,18)" fg:x="258" fg:w="1"/><text x="20.9563%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.7063%" y="405" width="0.0803%" height="15" fill="rgb(208,13,10)" fg:x="258" fg:w="1"/><text x="20.9563%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.7063%" y="389" width="0.0803%" height="15" fill="rgb(212,200,36)" fg:x="258" fg:w="1"/><text x="20.9563%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.7063%" y="373" width="0.0803%" height="15" fill="rgb(225,90,30)" fg:x="258" fg:w="1"/><text x="20.9563%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="20.7063%" y="629" width="0.1605%" height="15" fill="rgb(236,182,39)" fg:x="258" fg:w="2"/><text x="20.9563%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="20.7063%" y="613" width="0.1605%" height="15" fill="rgb(212,144,35)" fg:x="258" fg:w="2"/><text x="20.9563%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.7865%" y="597" width="0.0803%" height="15" fill="rgb(228,63,44)" fg:x="259" fg:w="1"/><text x="21.0365%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.7865%" y="581" width="0.0803%" height="15" fill="rgb(228,109,6)" fg:x="259" fg:w="1"/><text x="21.0365%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.7865%" y="565" width="0.0803%" height="15" fill="rgb(238,117,24)" fg:x="259" fg:w="1"/><text x="21.0365%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.7865%" y="549" width="0.0803%" height="15" fill="rgb(242,26,26)" fg:x="259" fg:w="1"/><text x="21.0365%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="20.7865%" y="533" width="0.0803%" height="15" fill="rgb(221,92,48)" fg:x="259" fg:w="1"/><text x="21.0365%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="20.7063%" y="661" width="0.2408%" height="15" fill="rgb(209,209,32)" fg:x="258" fg:w="3"/><text x="20.9563%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="20.7063%" y="645" width="0.2408%" height="15" fill="rgb(221,70,22)" fg:x="258" fg:w="3"/><text x="20.9563%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="20.8668%" y="629" width="0.0803%" height="15" fill="rgb(248,145,5)" fg:x="260" fg:w="1"/><text x="21.1168%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="20.8668%" y="613" width="0.0803%" height="15" fill="rgb(226,116,26)" fg:x="260" fg:w="1"/><text x="21.1168%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8668%" y="597" width="0.0803%" height="15" fill="rgb(244,5,17)" fg:x="260" fg:w="1"/><text x="21.1168%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8668%" y="581" width="0.0803%" height="15" fill="rgb(252,159,33)" fg:x="260" fg:w="1"/><text x="21.1168%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8668%" y="565" width="0.0803%" height="15" fill="rgb(206,71,0)" fg:x="260" fg:w="1"/><text x="21.1168%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8668%" y="549" width="0.0803%" height="15" fill="rgb(233,118,54)" fg:x="260" fg:w="1"/><text x="21.1168%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8668%" y="533" width="0.0803%" height="15" fill="rgb(234,83,48)" fg:x="260" fg:w="1"/><text x="21.1168%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.8668%" y="517" width="0.0803%" height="15" fill="rgb(228,3,54)" fg:x="260" fg:w="1"/><text x="21.1168%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.8668%" y="501" width="0.0803%" height="15" fill="rgb(226,155,13)" fg:x="260" fg:w="1"/><text x="21.1168%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.8668%" y="485" width="0.0803%" height="15" fill="rgb(241,28,37)" fg:x="260" fg:w="1"/><text x="21.1168%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.8668%" y="469" width="0.0803%" height="15" fill="rgb(233,93,10)" fg:x="260" fg:w="1"/><text x="21.1168%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.8668%" y="453" width="0.0803%" height="15" fill="rgb(225,113,19)" fg:x="260" fg:w="1"/><text x="21.1168%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.8668%" y="437" width="0.0803%" height="15" fill="rgb(241,2,18)" fg:x="260" fg:w="1"/><text x="21.1168%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.8668%" y="421" width="0.0803%" height="15" fill="rgb(228,207,21)" fg:x="260" fg:w="1"/><text x="21.1168%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.8668%" y="405" width="0.0803%" height="15" fill="rgb(213,211,35)" fg:x="260" fg:w="1"/><text x="21.1168%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.8668%" y="389" width="0.0803%" height="15" fill="rgb(209,83,10)" fg:x="260" fg:w="1"/><text x="21.1168%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.8668%" y="373" width="0.0803%" height="15" fill="rgb(209,164,1)" fg:x="260" fg:w="1"/><text x="21.1168%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.9470%" y="645" width="0.0803%" height="15" fill="rgb(213,184,43)" fg:x="261" fg:w="1"/><text x="21.1970%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.9470%" y="629" width="0.0803%" height="15" fill="rgb(231,61,34)" fg:x="261" fg:w="1"/><text x="21.1970%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="20.9470%" y="613" width="0.0803%" height="15" fill="rgb(235,75,3)" fg:x="261" fg:w="1"/><text x="21.1970%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="20.9470%" y="597" width="0.0803%" height="15" fill="rgb(220,106,47)" fg:x="261" fg:w="1"/><text x="21.1970%" y="607.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.56%)</title><rect x="20.6260%" y="677" width="0.5618%" height="15" fill="rgb(210,196,33)" fg:x="257" fg:w="7"/><text x="20.8760%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="20.9470%" y="661" width="0.2408%" height="15" fill="rgb(229,154,42)" fg:x="261" fg:w="3"/><text x="21.1970%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="21.0273%" y="645" width="0.1605%" height="15" fill="rgb(228,114,26)" fg:x="262" fg:w="2"/><text x="21.2773%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="21.0273%" y="629" width="0.1605%" height="15" fill="rgb(208,144,1)" fg:x="262" fg:w="2"/><text x="21.2773%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="21.0273%" y="613" width="0.1605%" height="15" fill="rgb(239,112,37)" fg:x="262" fg:w="2"/><text x="21.2773%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="21.0273%" y="597" width="0.1605%" height="15" fill="rgb(210,96,50)" fg:x="262" fg:w="2"/><text x="21.2773%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.0273%" y="581" width="0.1605%" height="15" fill="rgb(222,178,2)" fg:x="262" fg:w="2"/><text x="21.2773%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.0273%" y="565" width="0.1605%" height="15" fill="rgb(226,74,18)" fg:x="262" fg:w="2"/><text x="21.2773%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="21.0273%" y="549" width="0.1605%" height="15" fill="rgb(225,67,54)" fg:x="262" fg:w="2"/><text x="21.2773%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.0273%" y="533" width="0.1605%" height="15" fill="rgb(251,92,32)" fg:x="262" fg:w="2"/><text x="21.2773%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.0273%" y="517" width="0.1605%" height="15" fill="rgb(228,149,22)" fg:x="262" fg:w="2"/><text x="21.2773%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.0273%" y="501" width="0.1605%" height="15" fill="rgb(243,54,13)" fg:x="262" fg:w="2"/><text x="21.2773%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.1075%" y="485" width="0.0803%" height="15" fill="rgb(243,180,28)" fg:x="263" fg:w="1"/><text x="21.3575%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.1075%" y="469" width="0.0803%" height="15" fill="rgb(208,167,24)" fg:x="263" fg:w="1"/><text x="21.3575%" y="479.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (100 samples, 8.03%)</title><rect x="13.2424%" y="693" width="8.0257%" height="15" fill="rgb(245,73,45)" fg:x="165" fg:w="100"/><text x="13.4924%" y="703.50">plugins_cor..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="21.1878%" y="677" width="0.0803%" height="15" fill="rgb(237,203,48)" fg:x="264" fg:w="1"/><text x="21.4378%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="21.1878%" y="661" width="0.0803%" height="15" fill="rgb(211,197,16)" fg:x="264" fg:w="1"/><text x="21.4378%" y="671.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="21.1878%" y="645" width="0.0803%" height="15" fill="rgb(243,99,51)" fg:x="264" fg:w="1"/><text x="21.4378%" y="655.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="21.2681%" y="661" width="0.0803%" height="15" fill="rgb(215,123,29)" fg:x="265" fg:w="1"/><text x="21.5181%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="21.2681%" y="693" width="0.1605%" height="15" fill="rgb(239,186,37)" fg:x="265" fg:w="2"/><text x="21.5181%" y="703.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="21.2681%" y="677" width="0.1605%" height="15" fill="rgb(252,136,39)" fg:x="265" fg:w="2"/><text x="21.5181%" y="687.50"></text></g><g><title>kernel::model::builder::EntityBuilder::with_key (1 samples, 0.08%)</title><rect x="21.3483%" y="661" width="0.0803%" height="15" fill="rgb(223,213,32)" fg:x="266" fg:w="1"/><text x="21.5983%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (1 samples, 0.08%)</title><rect x="21.4286%" y="693" width="0.0803%" height="15" fill="rgb(233,115,5)" fg:x="267" fg:w="1"/><text x="21.6786%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.4286%" y="677" width="0.0803%" height="15" fill="rgb(207,226,44)" fg:x="267" fg:w="1"/><text x="21.6786%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="21.5088%" y="661" width="0.0803%" height="15" fill="rgb(208,126,0)" fg:x="268" fg:w="1"/><text x="21.7588%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.5088%" y="645" width="0.0803%" height="15" fill="rgb(244,66,21)" fg:x="268" fg:w="1"/><text x="21.7588%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="21.5891%" y="645" width="0.0803%" height="15" fill="rgb(222,97,12)" fg:x="269" fg:w="1"/><text x="21.8391%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="21.5891%" y="629" width="0.0803%" height="15" fill="rgb(219,213,19)" fg:x="269" fg:w="1"/><text x="21.8391%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.5891%" y="613" width="0.0803%" height="15" fill="rgb(252,169,30)" fg:x="269" fg:w="1"/><text x="21.8391%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.5891%" y="597" width="0.0803%" height="15" fill="rgb(206,32,51)" fg:x="269" fg:w="1"/><text x="21.8391%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.5891%" y="581" width="0.0803%" height="15" fill="rgb(250,172,42)" fg:x="269" fg:w="1"/><text x="21.8391%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.5891%" y="565" width="0.0803%" height="15" fill="rgb(209,34,43)" fg:x="269" fg:w="1"/><text x="21.8391%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.5891%" y="549" width="0.0803%" height="15" fill="rgb(223,11,35)" fg:x="269" fg:w="1"/><text x="21.8391%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.5891%" y="533" width="0.0803%" height="15" fill="rgb(251,219,26)" fg:x="269" fg:w="1"/><text x="21.8391%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.5891%" y="517" width="0.0803%" height="15" fill="rgb(231,119,3)" fg:x="269" fg:w="1"/><text x="21.8391%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="21.6693%" y="629" width="0.0803%" height="15" fill="rgb(216,97,11)" fg:x="270" fg:w="1"/><text x="21.9193%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.6693%" y="613" width="0.0803%" height="15" fill="rgb(223,59,9)" fg:x="270" fg:w="1"/><text x="21.9193%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.6693%" y="597" width="0.0803%" height="15" fill="rgb(233,93,31)" fg:x="270" fg:w="1"/><text x="21.9193%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.6693%" y="581" width="0.0803%" height="15" fill="rgb(239,81,33)" fg:x="270" fg:w="1"/><text x="21.9193%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.6693%" y="565" width="0.0803%" height="15" fill="rgb(213,120,34)" fg:x="270" fg:w="1"/><text x="21.9193%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.6693%" y="549" width="0.0803%" height="15" fill="rgb(243,49,53)" fg:x="270" fg:w="1"/><text x="21.9193%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.6693%" y="533" width="0.0803%" height="15" fill="rgb(247,216,33)" fg:x="270" fg:w="1"/><text x="21.9193%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.6693%" y="517" width="0.0803%" height="15" fill="rgb(226,26,14)" fg:x="270" fg:w="1"/><text x="21.9193%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.6693%" y="501" width="0.0803%" height="15" fill="rgb(215,49,53)" fg:x="270" fg:w="1"/><text x="21.9193%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="21.6693%" y="485" width="0.0803%" height="15" fill="rgb(245,162,40)" fg:x="270" fg:w="1"/><text x="21.9193%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="21.6693%" y="469" width="0.0803%" height="15" fill="rgb(229,68,17)" fg:x="270" fg:w="1"/><text x="21.9193%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="21.7496%" y="613" width="0.0803%" height="15" fill="rgb(213,182,10)" fg:x="271" fg:w="1"/><text x="21.9996%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="21.7496%" y="597" width="0.0803%" height="15" fill="rgb(245,125,30)" fg:x="271" fg:w="1"/><text x="21.9996%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="21.7496%" y="581" width="0.0803%" height="15" fill="rgb(232,202,2)" fg:x="271" fg:w="1"/><text x="21.9996%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.7496%" y="565" width="0.0803%" height="15" fill="rgb(237,140,51)" fg:x="271" fg:w="1"/><text x="21.9996%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.7496%" y="549" width="0.0803%" height="15" fill="rgb(236,157,25)" fg:x="271" fg:w="1"/><text x="21.9996%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.7496%" y="533" width="0.0803%" height="15" fill="rgb(219,209,0)" fg:x="271" fg:w="1"/><text x="21.9996%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.7496%" y="517" width="0.0803%" height="15" fill="rgb(240,116,54)" fg:x="271" fg:w="1"/><text x="21.9996%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="21.8299%" y="581" width="0.0803%" height="15" fill="rgb(216,10,36)" fg:x="272" fg:w="1"/><text x="22.0799%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.8299%" y="565" width="0.0803%" height="15" fill="rgb(222,72,44)" fg:x="272" fg:w="1"/><text x="22.0799%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.8299%" y="549" width="0.0803%" height="15" fill="rgb(232,159,9)" fg:x="272" fg:w="1"/><text x="22.0799%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="21.5891%" y="661" width="0.4013%" height="15" fill="rgb(210,39,32)" fg:x="269" fg:w="5"/><text x="21.8391%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="21.6693%" y="645" width="0.3210%" height="15" fill="rgb(216,194,45)" fg:x="270" fg:w="4"/><text x="21.9193%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="21.7496%" y="629" width="0.2408%" height="15" fill="rgb(218,18,35)" fg:x="271" fg:w="3"/><text x="21.9996%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="21.8299%" y="613" width="0.1605%" height="15" fill="rgb(207,83,51)" fg:x="272" fg:w="2"/><text x="22.0799%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="21.8299%" y="597" width="0.1605%" height="15" fill="rgb(225,63,43)" fg:x="272" fg:w="2"/><text x="22.0799%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="21.9101%" y="581" width="0.0803%" height="15" fill="rgb(207,57,36)" fg:x="273" fg:w="1"/><text x="22.1601%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="21.9101%" y="565" width="0.0803%" height="15" fill="rgb(216,99,33)" fg:x="273" fg:w="1"/><text x="22.1601%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.9101%" y="549" width="0.0803%" height="15" fill="rgb(225,42,16)" fg:x="273" fg:w="1"/><text x="22.1601%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="21.9101%" y="533" width="0.0803%" height="15" fill="rgb(220,201,45)" fg:x="273" fg:w="1"/><text x="22.1601%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.9101%" y="517" width="0.0803%" height="15" fill="rgb(225,33,4)" fg:x="273" fg:w="1"/><text x="22.1601%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="21.9904%" y="629" width="0.0803%" height="15" fill="rgb(224,33,50)" fg:x="274" fg:w="1"/><text x="22.2404%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.9904%" y="613" width="0.0803%" height="15" fill="rgb(246,198,51)" fg:x="274" fg:w="1"/><text x="22.2404%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (8 samples, 0.64%)</title><rect x="21.5088%" y="693" width="0.6421%" height="15" fill="rgb(205,22,4)" fg:x="268" fg:w="8"/><text x="21.7588%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (8 samples, 0.64%)</title><rect x="21.5088%" y="677" width="0.6421%" height="15" fill="rgb(206,3,8)" fg:x="268" fg:w="8"/><text x="21.7588%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (2 samples, 0.16%)</title><rect x="21.9904%" y="661" width="0.1605%" height="15" fill="rgb(251,23,15)" fg:x="274" fg:w="2"/><text x="22.2404%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="21.9904%" y="645" width="0.1605%" height="15" fill="rgb(252,88,28)" fg:x="274" fg:w="2"/><text x="22.2404%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="22.0706%" y="629" width="0.0803%" height="15" fill="rgb(212,127,14)" fg:x="275" fg:w="1"/><text x="22.3206%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="22.0706%" y="613" width="0.0803%" height="15" fill="rgb(247,145,37)" fg:x="275" fg:w="1"/><text x="22.3206%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.1509%" y="645" width="0.0803%" height="15" fill="rgb(209,117,53)" fg:x="276" fg:w="1"/><text x="22.4009%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="22.2311%" y="613" width="0.0803%" height="15" fill="rgb(212,90,42)" fg:x="277" fg:w="1"/><text x="22.4811%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.2311%" y="597" width="0.0803%" height="15" fill="rgb(218,164,37)" fg:x="277" fg:w="1"/><text x="22.4811%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.2311%" y="581" width="0.0803%" height="15" fill="rgb(246,65,34)" fg:x="277" fg:w="1"/><text x="22.4811%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (3 samples, 0.24%)</title><rect x="22.1509%" y="677" width="0.2408%" height="15" fill="rgb(231,100,33)" fg:x="276" fg:w="3"/><text x="22.4009%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="22.1509%" y="661" width="0.2408%" height="15" fill="rgb(228,126,14)" fg:x="276" fg:w="3"/><text x="22.4009%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="22.2311%" y="645" width="0.1605%" height="15" fill="rgb(215,173,21)" fg:x="277" fg:w="2"/><text x="22.4811%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="22.2311%" y="629" width="0.1605%" height="15" fill="rgb(210,6,40)" fg:x="277" fg:w="2"/><text x="22.4811%" y="639.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="22.3114%" y="613" width="0.0803%" height="15" fill="rgb(212,48,18)" fg:x="278" fg:w="1"/><text x="22.5614%" y="623.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="22.3917%" y="677" width="0.1605%" height="15" fill="rgb(230,214,11)" fg:x="279" fg:w="2"/><text x="22.6417%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="22.3917%" y="661" width="0.1605%" height="15" fill="rgb(254,105,39)" fg:x="279" fg:w="2"/><text x="22.6417%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="22.4719%" y="645" width="0.0803%" height="15" fill="rgb(245,158,5)" fg:x="280" fg:w="1"/><text x="22.7219%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="22.4719%" y="629" width="0.0803%" height="15" fill="rgb(249,208,11)" fg:x="280" fg:w="1"/><text x="22.7219%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.5522%" y="597" width="0.0803%" height="15" fill="rgb(210,39,28)" fg:x="281" fg:w="1"/><text x="22.8022%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="22.5522%" y="661" width="0.1605%" height="15" fill="rgb(211,56,53)" fg:x="281" fg:w="2"/><text x="22.8022%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="22.5522%" y="645" width="0.1605%" height="15" fill="rgb(226,201,30)" fg:x="281" fg:w="2"/><text x="22.8022%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="22.5522%" y="629" width="0.1605%" height="15" fill="rgb(239,101,34)" fg:x="281" fg:w="2"/><text x="22.8022%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="22.5522%" y="613" width="0.1605%" height="15" fill="rgb(226,209,5)" fg:x="281" fg:w="2"/><text x="22.8022%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="22.6324%" y="597" width="0.0803%" height="15" fill="rgb(250,105,47)" fg:x="282" fg:w="1"/><text x="22.8824%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.6324%" y="581" width="0.0803%" height="15" fill="rgb(230,72,3)" fg:x="282" fg:w="1"/><text x="22.8824%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.6324%" y="565" width="0.0803%" height="15" fill="rgb(232,218,39)" fg:x="282" fg:w="1"/><text x="22.8824%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.6324%" y="549" width="0.0803%" height="15" fill="rgb(248,166,6)" fg:x="282" fg:w="1"/><text x="22.8824%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.6324%" y="533" width="0.0803%" height="15" fill="rgb(247,89,20)" fg:x="282" fg:w="1"/><text x="22.8824%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.6324%" y="517" width="0.0803%" height="15" fill="rgb(248,130,54)" fg:x="282" fg:w="1"/><text x="22.8824%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.7127%" y="661" width="0.0803%" height="15" fill="rgb(234,196,4)" fg:x="283" fg:w="1"/><text x="22.9627%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.7127%" y="645" width="0.0803%" height="15" fill="rgb(250,143,31)" fg:x="283" fg:w="1"/><text x="22.9627%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="22.7127%" y="629" width="0.0803%" height="15" fill="rgb(211,110,34)" fg:x="283" fg:w="1"/><text x="22.9627%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="22.7127%" y="613" width="0.0803%" height="15" fill="rgb(215,124,48)" fg:x="283" fg:w="1"/><text x="22.9627%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="22.7127%" y="597" width="0.0803%" height="15" fill="rgb(216,46,13)" fg:x="283" fg:w="1"/><text x="22.9627%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.7127%" y="581" width="0.0803%" height="15" fill="rgb(205,184,25)" fg:x="283" fg:w="1"/><text x="22.9627%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.7127%" y="565" width="0.0803%" height="15" fill="rgb(228,1,10)" fg:x="283" fg:w="1"/><text x="22.9627%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="22.7127%" y="549" width="0.0803%" height="15" fill="rgb(213,116,27)" fg:x="283" fg:w="1"/><text x="22.9627%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="22.7127%" y="533" width="0.0803%" height="15" fill="rgb(241,95,50)" fg:x="283" fg:w="1"/><text x="22.9627%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="22.7127%" y="517" width="0.0803%" height="15" fill="rgb(238,48,32)" fg:x="283" fg:w="1"/><text x="22.9627%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="22.7127%" y="501" width="0.0803%" height="15" fill="rgb(235,113,49)" fg:x="283" fg:w="1"/><text x="22.9627%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.7127%" y="485" width="0.0803%" height="15" fill="rgb(205,127,43)" fg:x="283" fg:w="1"/><text x="22.9627%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="22.7929%" y="645" width="0.0803%" height="15" fill="rgb(250,162,2)" fg:x="284" fg:w="1"/><text x="23.0429%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.7929%" y="629" width="0.0803%" height="15" fill="rgb(220,13,41)" fg:x="284" fg:w="1"/><text x="23.0429%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.7929%" y="613" width="0.0803%" height="15" fill="rgb(249,221,25)" fg:x="284" fg:w="1"/><text x="23.0429%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="22.7929%" y="597" width="0.0803%" height="15" fill="rgb(215,208,19)" fg:x="284" fg:w="1"/><text x="23.0429%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.7929%" y="581" width="0.0803%" height="15" fill="rgb(236,175,2)" fg:x="284" fg:w="1"/><text x="23.0429%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.7929%" y="565" width="0.0803%" height="15" fill="rgb(241,52,2)" fg:x="284" fg:w="1"/><text x="23.0429%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.7929%" y="549" width="0.0803%" height="15" fill="rgb(248,140,14)" fg:x="284" fg:w="1"/><text x="23.0429%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.7929%" y="533" width="0.0803%" height="15" fill="rgb(253,22,42)" fg:x="284" fg:w="1"/><text x="23.0429%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="22.8732%" y="629" width="0.0803%" height="15" fill="rgb(234,61,47)" fg:x="285" fg:w="1"/><text x="23.1232%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="22.8732%" y="613" width="0.0803%" height="15" fill="rgb(208,226,15)" fg:x="285" fg:w="1"/><text x="23.1232%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="22.8732%" y="597" width="0.0803%" height="15" fill="rgb(217,221,4)" fg:x="285" fg:w="1"/><text x="23.1232%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (193 samples, 15.49%)</title><rect x="7.6244%" y="709" width="15.4896%" height="15" fill="rgb(212,174,34)" fg:x="95" fg:w="193"/><text x="7.8744%" y="719.50">&lt;tests::HoldingKeyInVess..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (12 samples, 0.96%)</title><rect x="22.1509%" y="693" width="0.9631%" height="15" fill="rgb(253,83,4)" fg:x="276" fg:w="12"/><text x="22.4009%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="22.5522%" y="677" width="0.5618%" height="15" fill="rgb(250,195,49)" fg:x="281" fg:w="7"/><text x="22.8022%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="22.7929%" y="661" width="0.3210%" height="15" fill="rgb(241,192,25)" fg:x="284" fg:w="4"/><text x="23.0429%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="22.8732%" y="645" width="0.2408%" height="15" fill="rgb(208,124,10)" fg:x="285" fg:w="3"/><text x="23.1232%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="22.9535%" y="629" width="0.1605%" height="15" fill="rgb(222,33,0)" fg:x="286" fg:w="2"/><text x="23.2035%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="22.9535%" y="613" width="0.1605%" height="15" fill="rgb(234,209,28)" fg:x="286" fg:w="2"/><text x="23.2035%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="23.0337%" y="597" width="0.0803%" height="15" fill="rgb(224,11,23)" fg:x="287" fg:w="1"/><text x="23.2837%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.0337%" y="581" width="0.0803%" height="15" fill="rgb(232,99,1)" fg:x="287" fg:w="1"/><text x="23.2837%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.0337%" y="565" width="0.0803%" height="15" fill="rgb(237,95,45)" fg:x="287" fg:w="1"/><text x="23.2837%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.0337%" y="549" width="0.0803%" height="15" fill="rgb(208,109,11)" fg:x="287" fg:w="1"/><text x="23.2837%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.0337%" y="533" width="0.0803%" height="15" fill="rgb(216,190,48)" fg:x="287" fg:w="1"/><text x="23.2837%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="23.1140%" y="709" width="0.0803%" height="15" fill="rgb(251,171,36)" fg:x="288" fg:w="1"/><text x="23.3640%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="23.1140%" y="693" width="0.0803%" height="15" fill="rgb(230,62,22)" fg:x="288" fg:w="1"/><text x="23.3640%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="23.1140%" y="677" width="0.0803%" height="15" fill="rgb(225,114,35)" fg:x="288" fg:w="1"/><text x="23.3640%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="23.1140%" y="661" width="0.0803%" height="15" fill="rgb(215,118,42)" fg:x="288" fg:w="1"/><text x="23.3640%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.1140%" y="645" width="0.0803%" height="15" fill="rgb(243,119,21)" fg:x="288" fg:w="1"/><text x="23.3640%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="23.1942%" y="693" width="0.0803%" height="15" fill="rgb(252,177,53)" fg:x="289" fg:w="1"/><text x="23.4442%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.1942%" y="677" width="0.0803%" height="15" fill="rgb(237,209,29)" fg:x="289" fg:w="1"/><text x="23.4442%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="23.3547%" y="661" width="0.0803%" height="15" fill="rgb(212,65,23)" fg:x="291" fg:w="1"/><text x="23.6047%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="23.3547%" y="645" width="0.0803%" height="15" fill="rgb(230,222,46)" fg:x="291" fg:w="1"/><text x="23.6047%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.3547%" y="629" width="0.0803%" height="15" fill="rgb(215,135,32)" fg:x="291" fg:w="1"/><text x="23.6047%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.4350%" y="629" width="0.0803%" height="15" fill="rgb(246,101,22)" fg:x="292" fg:w="1"/><text x="23.6850%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="23.5955%" y="581" width="0.2408%" height="15" fill="rgb(206,107,13)" fg:x="294" fg:w="3"/><text x="23.8455%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.6758%" y="565" width="0.1605%" height="15" fill="rgb(250,100,44)" fg:x="295" fg:w="2"/><text x="23.9258%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="23.6758%" y="549" width="0.1605%" height="15" fill="rgb(231,147,38)" fg:x="295" fg:w="2"/><text x="23.9258%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="23.6758%" y="533" width="0.1605%" height="15" fill="rgb(229,8,40)" fg:x="295" fg:w="2"/><text x="23.9258%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.7560%" y="517" width="0.0803%" height="15" fill="rgb(221,135,30)" fg:x="296" fg:w="1"/><text x="24.0060%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="23.5955%" y="597" width="0.3210%" height="15" fill="rgb(249,193,18)" fg:x="294" fg:w="4"/><text x="23.8455%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.8363%" y="581" width="0.0803%" height="15" fill="rgb(209,133,39)" fg:x="297" fg:w="1"/><text x="24.0863%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.8363%" y="565" width="0.0803%" height="15" fill="rgb(232,100,14)" fg:x="297" fg:w="1"/><text x="24.0863%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="24.0770%" y="533" width="0.0803%" height="15" fill="rgb(224,185,1)" fg:x="300" fg:w="1"/><text x="24.3270%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="24.1573%" y="517" width="0.0803%" height="15" fill="rgb(223,139,8)" fg:x="301" fg:w="1"/><text x="24.4073%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="24.1573%" y="501" width="0.0803%" height="15" fill="rgb(232,213,38)" fg:x="301" fg:w="1"/><text x="24.4073%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="24.1573%" y="485" width="0.0803%" height="15" fill="rgb(207,94,22)" fg:x="301" fg:w="1"/><text x="24.4073%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.1573%" y="469" width="0.0803%" height="15" fill="rgb(219,183,54)" fg:x="301" fg:w="1"/><text x="24.4073%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="24.0770%" y="565" width="0.2408%" height="15" fill="rgb(216,185,54)" fg:x="300" fg:w="3"/><text x="24.3270%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="24.0770%" y="549" width="0.2408%" height="15" fill="rgb(254,217,39)" fg:x="300" fg:w="3"/><text x="24.3270%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="24.1573%" y="533" width="0.1605%" height="15" fill="rgb(240,178,23)" fg:x="301" fg:w="2"/><text x="24.4073%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.2376%" y="517" width="0.0803%" height="15" fill="rgb(218,11,47)" fg:x="302" fg:w="1"/><text x="24.4876%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.2376%" y="501" width="0.0803%" height="15" fill="rgb(218,51,51)" fg:x="302" fg:w="1"/><text x="24.4876%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.2376%" y="485" width="0.0803%" height="15" fill="rgb(238,126,27)" fg:x="302" fg:w="1"/><text x="24.4876%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="24.3178%" y="565" width="0.4013%" height="15" fill="rgb(249,202,22)" fg:x="303" fg:w="5"/><text x="24.5678%" y="575.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="24.3981%" y="549" width="0.3210%" height="15" fill="rgb(254,195,49)" fg:x="304" fg:w="4"/><text x="24.6481%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="24.5586%" y="533" width="0.1605%" height="15" fill="rgb(208,123,14)" fg:x="306" fg:w="2"/><text x="24.8086%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="24.5586%" y="517" width="0.1605%" height="15" fill="rgb(224,200,8)" fg:x="306" fg:w="2"/><text x="24.8086%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.7191%" y="549" width="0.0803%" height="15" fill="rgb(217,61,36)" fg:x="308" fg:w="1"/><text x="24.9691%" y="559.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="24.7994%" y="549" width="0.0803%" height="15" fill="rgb(206,35,45)" fg:x="309" fg:w="1"/><text x="25.0494%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="24.8796%" y="549" width="0.3210%" height="15" fill="rgb(217,65,33)" fg:x="310" fg:w="4"/><text x="25.1296%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="25.0401%" y="533" width="0.1605%" height="15" fill="rgb(222,158,48)" fg:x="312" fg:w="2"/><text x="25.2901%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="25.0401%" y="517" width="0.1605%" height="15" fill="rgb(254,2,54)" fg:x="312" fg:w="2"/><text x="25.2901%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.1204%" y="501" width="0.0803%" height="15" fill="rgb(250,143,38)" fg:x="313" fg:w="1"/><text x="25.3704%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.1204%" y="485" width="0.0803%" height="15" fill="rgb(248,25,0)" fg:x="313" fg:w="1"/><text x="25.3704%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.1204%" y="469" width="0.0803%" height="15" fill="rgb(206,152,27)" fg:x="313" fg:w="1"/><text x="25.3704%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="25.1204%" y="453" width="0.0803%" height="15" fill="rgb(240,77,30)" fg:x="313" fg:w="1"/><text x="25.3704%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="25.2809%" y="533" width="0.0803%" height="15" fill="rgb(231,5,3)" fg:x="315" fg:w="1"/><text x="25.5309%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.2809%" y="517" width="0.0803%" height="15" fill="rgb(207,226,32)" fg:x="315" fg:w="1"/><text x="25.5309%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="25.3612%" y="533" width="0.0803%" height="15" fill="rgb(222,207,47)" fg:x="316" fg:w="1"/><text x="25.6112%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="25.3612%" y="517" width="0.0803%" height="15" fill="rgb(229,115,45)" fg:x="316" fg:w="1"/><text x="25.6112%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.3612%" y="501" width="0.0803%" height="15" fill="rgb(224,191,6)" fg:x="316" fg:w="1"/><text x="25.6112%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.3612%" y="485" width="0.0803%" height="15" fill="rgb(230,227,24)" fg:x="316" fg:w="1"/><text x="25.6112%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.3612%" y="469" width="0.0803%" height="15" fill="rgb(228,80,19)" fg:x="316" fg:w="1"/><text x="25.6112%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="25.2006%" y="549" width="0.3210%" height="15" fill="rgb(247,229,0)" fg:x="314" fg:w="4"/><text x="25.4506%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.4414%" y="533" width="0.0803%" height="15" fill="rgb(237,194,15)" fg:x="317" fg:w="1"/><text x="25.6914%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.61%)</title><rect x="24.0770%" y="581" width="1.6051%" height="15" fill="rgb(219,203,20)" fg:x="300" fg:w="20"/><text x="24.3270%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="24.7191%" y="565" width="0.9631%" height="15" fill="rgb(234,128,8)" fg:x="308" fg:w="12"/><text x="24.9691%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="25.5217%" y="549" width="0.1605%" height="15" fill="rgb(248,202,8)" fg:x="318" fg:w="2"/><text x="25.7717%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (28 samples, 2.25%)</title><rect x="23.5152%" y="613" width="2.2472%" height="15" fill="rgb(206,104,37)" fg:x="293" fg:w="28"/><text x="23.7652%" y="623.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (23 samples, 1.85%)</title><rect x="23.9165%" y="597" width="1.8459%" height="15" fill="rgb(223,8,27)" fg:x="298" fg:w="23"/><text x="24.1665%" y="607.50">s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.6822%" y="581" width="0.0803%" height="15" fill="rgb(216,217,28)" fg:x="320" fg:w="1"/><text x="25.9322%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.6822%" y="565" width="0.0803%" height="15" fill="rgb(249,199,1)" fg:x="320" fg:w="1"/><text x="25.9322%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.6822%" y="549" width="0.0803%" height="15" fill="rgb(240,85,17)" fg:x="320" fg:w="1"/><text x="25.9322%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.6822%" y="533" width="0.0803%" height="15" fill="rgb(206,108,45)" fg:x="320" fg:w="1"/><text x="25.9322%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.6822%" y="517" width="0.0803%" height="15" fill="rgb(245,210,41)" fg:x="320" fg:w="1"/><text x="25.9322%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="25.6822%" y="501" width="0.0803%" height="15" fill="rgb(206,13,37)" fg:x="320" fg:w="1"/><text x="25.9322%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.7624%" y="581" width="0.0803%" height="15" fill="rgb(250,61,18)" fg:x="321" fg:w="1"/><text x="26.0124%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="25.8427%" y="565" width="0.1605%" height="15" fill="rgb(235,172,48)" fg:x="322" fg:w="2"/><text x="26.0927%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="26.0835%" y="549" width="0.1605%" height="15" fill="rgb(249,201,17)" fg:x="325" fg:w="2"/><text x="26.3335%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="26.3242%" y="533" width="0.1605%" height="15" fill="rgb(219,208,6)" fg:x="328" fg:w="2"/><text x="26.5742%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="26.3242%" y="517" width="0.1605%" height="15" fill="rgb(248,31,23)" fg:x="328" fg:w="2"/><text x="26.5742%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.88%)</title><rect x="25.7624%" y="613" width="0.8828%" height="15" fill="rgb(245,15,42)" fg:x="321" fg:w="11"/><text x="26.0124%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (11 samples, 0.88%)</title><rect x="25.7624%" y="597" width="0.8828%" height="15" fill="rgb(222,217,39)" fg:x="321" fg:w="11"/><text x="26.0124%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="25.8427%" y="581" width="0.8026%" height="15" fill="rgb(210,219,27)" fg:x="322" fg:w="10"/><text x="26.0927%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="26.0032%" y="565" width="0.6421%" height="15" fill="rgb(252,166,36)" fg:x="324" fg:w="8"/><text x="26.2532%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="26.2440%" y="549" width="0.4013%" height="15" fill="rgb(245,132,34)" fg:x="327" fg:w="5"/><text x="26.4940%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="26.4848%" y="533" width="0.1605%" height="15" fill="rgb(236,54,3)" fg:x="330" fg:w="2"/><text x="26.7348%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="26.4848%" y="517" width="0.1605%" height="15" fill="rgb(241,173,43)" fg:x="330" fg:w="2"/><text x="26.7348%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="26.4848%" y="501" width="0.1605%" height="15" fill="rgb(215,190,9)" fg:x="330" fg:w="2"/><text x="26.7348%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.7255%" y="565" width="0.0803%" height="15" fill="rgb(242,101,16)" fg:x="333" fg:w="1"/><text x="26.9755%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.8058%" y="549" width="0.0803%" height="15" fill="rgb(223,190,21)" fg:x="334" fg:w="1"/><text x="27.0558%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.8860%" y="549" width="0.0803%" height="15" fill="rgb(215,228,25)" fg:x="335" fg:w="1"/><text x="27.1360%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.9663%" y="533" width="0.0803%" height="15" fill="rgb(225,36,22)" fg:x="336" fg:w="1"/><text x="27.2163%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.9663%" y="517" width="0.0803%" height="15" fill="rgb(251,106,46)" fg:x="336" fg:w="1"/><text x="27.2163%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.0465%" y="517" width="0.0803%" height="15" fill="rgb(208,90,1)" fg:x="337" fg:w="1"/><text x="27.2965%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.1268%" y="485" width="0.0803%" height="15" fill="rgb(243,10,4)" fg:x="338" fg:w="1"/><text x="27.3768%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.2071%" y="485" width="0.0803%" height="15" fill="rgb(212,137,27)" fg:x="339" fg:w="1"/><text x="27.4571%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="27.1268%" y="517" width="0.2408%" height="15" fill="rgb(231,220,49)" fg:x="338" fg:w="3"/><text x="27.3768%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="27.1268%" y="501" width="0.2408%" height="15" fill="rgb(237,96,20)" fg:x="338" fg:w="3"/><text x="27.3768%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="27.2873%" y="485" width="0.0803%" height="15" fill="rgb(239,229,30)" fg:x="340" fg:w="1"/><text x="27.5373%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.2873%" y="469" width="0.0803%" height="15" fill="rgb(219,65,33)" fg:x="340" fg:w="1"/><text x="27.5373%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="26.7255%" y="581" width="0.7223%" height="15" fill="rgb(243,134,7)" fg:x="333" fg:w="9"/><text x="26.9755%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="26.8058%" y="565" width="0.6421%" height="15" fill="rgb(216,177,54)" fg:x="334" fg:w="8"/><text x="27.0558%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="26.9663%" y="549" width="0.4815%" height="15" fill="rgb(211,160,20)" fg:x="336" fg:w="6"/><text x="27.2163%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="27.0465%" y="533" width="0.4013%" height="15" fill="rgb(239,85,39)" fg:x="337" fg:w="5"/><text x="27.2965%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="27.3676%" y="517" width="0.0803%" height="15" fill="rgb(232,125,22)" fg:x="341" fg:w="1"/><text x="27.6176%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.4478%" y="581" width="0.0803%" height="15" fill="rgb(244,57,34)" fg:x="342" fg:w="1"/><text x="27.6978%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="27.5281%" y="581" width="0.0803%" height="15" fill="rgb(214,203,32)" fg:x="343" fg:w="1"/><text x="27.7781%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.6083%" y="549" width="0.0803%" height="15" fill="rgb(207,58,43)" fg:x="344" fg:w="1"/><text x="27.8583%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="27.6083%" y="581" width="0.1605%" height="15" fill="rgb(215,193,15)" fg:x="344" fg:w="2"/><text x="27.8583%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="27.6083%" y="565" width="0.1605%" height="15" fill="rgb(232,15,44)" fg:x="344" fg:w="2"/><text x="27.8583%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.6886%" y="549" width="0.0803%" height="15" fill="rgb(212,3,48)" fg:x="345" fg:w="1"/><text x="27.9386%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="27.8491%" y="533" width="0.0803%" height="15" fill="rgb(218,128,7)" fg:x="347" fg:w="1"/><text x="28.0991%" y="543.50"></text></g><g><title>&lt;serde_json::number::N as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="27.8491%" y="517" width="0.0803%" height="15" fill="rgb(226,216,39)" fg:x="347" fg:w="1"/><text x="28.0991%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="27.8491%" y="565" width="0.1605%" height="15" fill="rgb(243,47,51)" fg:x="347" fg:w="2"/><text x="28.0991%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="27.8491%" y="549" width="0.1605%" height="15" fill="rgb(241,183,40)" fg:x="347" fg:w="2"/><text x="28.0991%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="27.9294%" y="533" width="0.0803%" height="15" fill="rgb(231,217,32)" fg:x="348" fg:w="1"/><text x="28.1794%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="28.0096%" y="565" width="0.1605%" height="15" fill="rgb(229,61,38)" fg:x="349" fg:w="2"/><text x="28.2596%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="28.0096%" y="549" width="0.1605%" height="15" fill="rgb(225,210,5)" fg:x="349" fg:w="2"/><text x="28.2596%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="28.0096%" y="533" width="0.1605%" height="15" fill="rgb(231,79,45)" fg:x="349" fg:w="2"/><text x="28.2596%" y="543.50"></text></g><g><title>treediff::tools::record::mk (1 samples, 0.08%)</title><rect x="28.1701%" y="565" width="0.0803%" height="15" fill="rgb(224,100,7)" fg:x="351" fg:w="1"/><text x="28.4201%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (21 samples, 1.69%)</title><rect x="26.6453%" y="597" width="1.6854%" height="15" fill="rgb(241,198,18)" fg:x="332" fg:w="21"/><text x="26.8953%" y="607.50"></text></g><g><title>treediff::diff::diff (7 samples, 0.56%)</title><rect x="27.7689%" y="581" width="0.5618%" height="15" fill="rgb(252,97,53)" fg:x="346" fg:w="7"/><text x="28.0189%" y="591.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="28.2504%" y="565" width="0.0803%" height="15" fill="rgb(220,88,7)" fg:x="352" fg:w="1"/><text x="28.5004%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.2504%" y="549" width="0.0803%" height="15" fill="rgb(213,176,14)" fg:x="352" fg:w="1"/><text x="28.5004%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="28.3307%" y="565" width="0.1605%" height="15" fill="rgb(246,73,7)" fg:x="353" fg:w="2"/><text x="28.5807%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.4912%" y="565" width="0.1605%" height="15" fill="rgb(245,64,36)" fg:x="355" fg:w="2"/><text x="28.7412%" y="575.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="28.6517%" y="565" width="0.0803%" height="15" fill="rgb(245,80,10)" fg:x="357" fg:w="1"/><text x="28.9017%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="28.6517%" y="549" width="0.0803%" height="15" fill="rgb(232,107,50)" fg:x="357" fg:w="1"/><text x="28.9017%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="28.6517%" y="533" width="0.0803%" height="15" fill="rgb(253,3,0)" fg:x="357" fg:w="1"/><text x="28.9017%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="28.7319%" y="565" width="0.1605%" height="15" fill="rgb(212,99,53)" fg:x="358" fg:w="2"/><text x="28.9819%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="28.8122%" y="549" width="0.0803%" height="15" fill="rgb(249,111,54)" fg:x="359" fg:w="1"/><text x="29.0622%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="28.8925%" y="565" width="0.1605%" height="15" fill="rgb(249,55,30)" fg:x="360" fg:w="2"/><text x="29.1425%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="28.9727%" y="549" width="0.0803%" height="15" fill="rgb(237,47,42)" fg:x="361" fg:w="1"/><text x="29.2227%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.9727%" y="533" width="0.0803%" height="15" fill="rgb(211,20,18)" fg:x="361" fg:w="1"/><text x="29.2227%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="29.2135%" y="517" width="0.3210%" height="15" fill="rgb(231,203,46)" fg:x="364" fg:w="4"/><text x="29.4635%" y="527.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="29.2937%" y="501" width="0.2408%" height="15" fill="rgb(237,142,3)" fg:x="365" fg:w="3"/><text x="29.5437%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="29.5345%" y="517" width="0.0803%" height="15" fill="rgb(241,107,1)" fg:x="368" fg:w="1"/><text x="29.7845%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="29.5345%" y="501" width="0.0803%" height="15" fill="rgb(229,83,13)" fg:x="368" fg:w="1"/><text x="29.7845%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="29.5345%" y="485" width="0.0803%" height="15" fill="rgb(241,91,40)" fg:x="368" fg:w="1"/><text x="29.7845%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.5345%" y="469" width="0.0803%" height="15" fill="rgb(225,3,45)" fg:x="368" fg:w="1"/><text x="29.7845%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5345%" y="453" width="0.0803%" height="15" fill="rgb(244,223,14)" fg:x="368" fg:w="1"/><text x="29.7845%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="29.6950%" y="501" width="0.0803%" height="15" fill="rgb(224,124,37)" fg:x="370" fg:w="1"/><text x="29.9450%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="29.7753%" y="485" width="0.2408%" height="15" fill="rgb(251,171,30)" fg:x="371" fg:w="3"/><text x="30.0253%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.8555%" y="469" width="0.1605%" height="15" fill="rgb(236,46,54)" fg:x="372" fg:w="2"/><text x="30.1055%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="30.0161%" y="485" width="0.0803%" height="15" fill="rgb(245,213,5)" fg:x="374" fg:w="1"/><text x="30.2661%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="30.0963%" y="469" width="0.0803%" height="15" fill="rgb(230,144,27)" fg:x="375" fg:w="1"/><text x="30.3463%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="30.0963%" y="453" width="0.0803%" height="15" fill="rgb(220,86,6)" fg:x="375" fg:w="1"/><text x="30.3463%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.0963%" y="437" width="0.0803%" height="15" fill="rgb(240,20,13)" fg:x="375" fg:w="1"/><text x="30.3463%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="29.7753%" y="501" width="0.4815%" height="15" fill="rgb(217,89,34)" fg:x="371" fg:w="6"/><text x="30.0253%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="30.0963%" y="485" width="0.1605%" height="15" fill="rgb(229,13,5)" fg:x="375" fg:w="2"/><text x="30.3463%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="30.1766%" y="469" width="0.0803%" height="15" fill="rgb(244,67,35)" fg:x="376" fg:w="1"/><text x="30.4266%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.2568%" y="501" width="0.0803%" height="15" fill="rgb(221,40,2)" fg:x="377" fg:w="1"/><text x="30.5068%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (16 samples, 1.28%)</title><rect x="29.1332%" y="533" width="1.2841%" height="15" fill="rgb(237,157,21)" fg:x="363" fg:w="16"/><text x="29.3832%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.80%)</title><rect x="29.6148%" y="517" width="0.8026%" height="15" fill="rgb(222,94,11)" fg:x="369" fg:w="10"/><text x="29.8648%" y="527.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;f64&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="30.3371%" y="501" width="0.0803%" height="15" fill="rgb(249,113,6)" fg:x="378" fg:w="1"/><text x="30.5871%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (17 samples, 1.36%)</title><rect x="29.1332%" y="549" width="1.3644%" height="15" fill="rgb(238,137,36)" fg:x="363" fg:w="17"/><text x="29.3832%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="30.4173%" y="533" width="0.0803%" height="15" fill="rgb(210,102,26)" fg:x="379" fg:w="1"/><text x="30.6673%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.4173%" y="517" width="0.0803%" height="15" fill="rgb(218,30,30)" fg:x="379" fg:w="1"/><text x="30.6673%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (28 samples, 2.25%)</title><rect x="28.3307%" y="597" width="2.2472%" height="15" fill="rgb(214,67,26)" fg:x="353" fg:w="28"/><text x="28.5807%" y="607.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (28 samples, 2.25%)</title><rect x="28.3307%" y="581" width="2.2472%" height="15" fill="rgb(251,9,53)" fg:x="353" fg:w="28"/><text x="28.5807%" y="591.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (19 samples, 1.52%)</title><rect x="29.0530%" y="565" width="1.5249%" height="15" fill="rgb(228,204,25)" fg:x="362" fg:w="19"/><text x="29.3030%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.4976%" y="549" width="0.0803%" height="15" fill="rgb(207,153,8)" fg:x="380" fg:w="1"/><text x="30.7476%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="30.6581%" y="453" width="0.1605%" height="15" fill="rgb(242,9,16)" fg:x="382" fg:w="2"/><text x="30.9081%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="30.6581%" y="437" width="0.1605%" height="15" fill="rgb(217,211,10)" fg:x="382" fg:w="2"/><text x="30.9081%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.7384%" y="421" width="0.0803%" height="15" fill="rgb(219,228,52)" fg:x="383" fg:w="1"/><text x="30.9884%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="30.7384%" y="405" width="0.0803%" height="15" fill="rgb(231,92,29)" fg:x="383" fg:w="1"/><text x="30.9884%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.7384%" y="389" width="0.0803%" height="15" fill="rgb(232,8,23)" fg:x="383" fg:w="1"/><text x="30.9884%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="30.7384%" y="373" width="0.0803%" height="15" fill="rgb(216,211,34)" fg:x="383" fg:w="1"/><text x="30.9884%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.7384%" y="357" width="0.0803%" height="15" fill="rgb(236,151,0)" fg:x="383" fg:w="1"/><text x="30.9884%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.9791%" y="373" width="0.0803%" height="15" fill="rgb(209,168,3)" fg:x="386" fg:w="1"/><text x="31.2291%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="30.8989%" y="437" width="0.2408%" height="15" fill="rgb(208,129,28)" fg:x="385" fg:w="3"/><text x="31.1489%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="30.8989%" y="421" width="0.2408%" height="15" fill="rgb(229,78,22)" fg:x="385" fg:w="3"/><text x="31.1489%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.9791%" y="405" width="0.1605%" height="15" fill="rgb(228,187,13)" fg:x="386" fg:w="2"/><text x="31.2291%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.9791%" y="389" width="0.1605%" height="15" fill="rgb(240,119,24)" fg:x="386" fg:w="2"/><text x="31.2291%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="31.0594%" y="373" width="0.0803%" height="15" fill="rgb(209,194,42)" fg:x="387" fg:w="1"/><text x="31.3094%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="31.1396%" y="437" width="0.1605%" height="15" fill="rgb(247,200,46)" fg:x="388" fg:w="2"/><text x="31.3896%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="30.6581%" y="469" width="0.8026%" height="15" fill="rgb(218,76,16)" fg:x="382" fg:w="10"/><text x="30.9081%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="30.8186%" y="453" width="0.6421%" height="15" fill="rgb(225,21,48)" fg:x="384" fg:w="8"/><text x="31.0686%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="31.3002%" y="437" width="0.1605%" height="15" fill="rgb(239,223,50)" fg:x="390" fg:w="2"/><text x="31.5502%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.4607%" y="469" width="0.0803%" height="15" fill="rgb(244,45,21)" fg:x="392" fg:w="1"/><text x="31.7107%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.4607%" y="453" width="0.0803%" height="15" fill="rgb(232,33,43)" fg:x="392" fg:w="1"/><text x="31.7107%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.12%)</title><rect x="30.6581%" y="485" width="1.1236%" height="15" fill="rgb(209,8,3)" fg:x="382" fg:w="14"/><text x="30.9081%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="31.5409%" y="469" width="0.2408%" height="15" fill="rgb(214,25,53)" fg:x="393" fg:w="3"/><text x="31.7909%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.7014%" y="453" width="0.0803%" height="15" fill="rgb(254,186,54)" fg:x="395" fg:w="1"/><text x="31.9514%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.20%)</title><rect x="30.6581%" y="501" width="1.2039%" height="15" fill="rgb(208,174,49)" fg:x="382" fg:w="15"/><text x="30.9081%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.7817%" y="485" width="0.0803%" height="15" fill="rgb(233,191,51)" fg:x="396" fg:w="1"/><text x="32.0317%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="31.8620%" y="501" width="0.1605%" height="15" fill="rgb(222,134,10)" fg:x="397" fg:w="2"/><text x="32.1120%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="31.9422%" y="485" width="0.0803%" height="15" fill="rgb(230,226,20)" fg:x="398" fg:w="1"/><text x="32.1922%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 1.52%)</title><rect x="30.6581%" y="533" width="1.5249%" height="15" fill="rgb(251,111,25)" fg:x="382" fg:w="19"/><text x="30.9081%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (19 samples, 1.52%)</title><rect x="30.6581%" y="517" width="1.5249%" height="15" fill="rgb(224,40,46)" fg:x="382" fg:w="19"/><text x="30.9081%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="32.0225%" y="501" width="0.1605%" height="15" fill="rgb(236,108,47)" fg:x="399" fg:w="2"/><text x="32.2725%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="32.0225%" y="485" width="0.1605%" height="15" fill="rgb(234,93,0)" fg:x="399" fg:w="2"/><text x="32.2725%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.0225%" y="469" width="0.1605%" height="15" fill="rgb(224,213,32)" fg:x="399" fg:w="2"/><text x="32.2725%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="32.1830%" y="533" width="0.0803%" height="15" fill="rgb(251,11,48)" fg:x="401" fg:w="1"/><text x="32.4330%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="32.1830%" y="517" width="0.0803%" height="15" fill="rgb(236,173,5)" fg:x="401" fg:w="1"/><text x="32.4330%" y="527.50"></text></g><g><title>engine::session::Session::close (114 samples, 9.15%)</title><rect x="23.1942%" y="709" width="9.1493%" height="15" fill="rgb(230,95,12)" fg:x="289" fg:w="114"/><text x="23.4442%" y="719.50">engine::sessi..</text></g><g><title>engine::session::state::State::close (113 samples, 9.07%)</title><rect x="23.2745%" y="693" width="9.0690%" height="15" fill="rgb(232,209,1)" fg:x="290" fg:w="113"/><text x="23.5245%" y="703.50">engine::sessi..</text></g><g><title>engine::session::state::State::flush_entities (113 samples, 9.07%)</title><rect x="23.2745%" y="677" width="9.0690%" height="15" fill="rgb(232,6,1)" fg:x="290" fg:w="113"/><text x="23.5245%" y="687.50">engine::sessi..</text></g><g><title>core::iter::adapters::try_process (111 samples, 8.91%)</title><rect x="23.4350%" y="661" width="8.9085%" height="15" fill="rgb(210,224,50)" fg:x="292" fg:w="111"/><text x="23.6850%" y="671.50">core::iter::a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (111 samples, 8.91%)</title><rect x="23.4350%" y="645" width="8.9085%" height="15" fill="rgb(228,127,35)" fg:x="292" fg:w="111"/><text x="23.6850%" y="655.50">&lt;alloc::vec::..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (110 samples, 8.83%)</title><rect x="23.5152%" y="629" width="8.8283%" height="15" fill="rgb(245,102,45)" fg:x="293" fg:w="110"/><text x="23.7652%" y="639.50">engine::sess..</text></g><g><title>kernel::model::any_entity_changes (71 samples, 5.70%)</title><rect x="26.6453%" y="613" width="5.6982%" height="15" fill="rgb(214,1,49)" fg:x="332" fg:w="71"/><text x="26.8953%" y="623.50">kernel:..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (22 samples, 1.77%)</title><rect x="30.5778%" y="597" width="1.7657%" height="15" fill="rgb(226,163,40)" fg:x="381" fg:w="22"/><text x="30.8278%" y="607.50"></text></g><g><title>serde_json::de::from_trait (22 samples, 1.77%)</title><rect x="30.5778%" y="581" width="1.7657%" height="15" fill="rgb(239,212,28)" fg:x="381" fg:w="22"/><text x="30.8278%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (22 samples, 1.77%)</title><rect x="30.5778%" y="565" width="1.7657%" height="15" fill="rgb(220,20,13)" fg:x="381" fg:w="22"/><text x="30.8278%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (21 samples, 1.69%)</title><rect x="30.6581%" y="549" width="1.6854%" height="15" fill="rgb(210,164,35)" fg:x="382" fg:w="21"/><text x="30.9081%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.2632%" y="533" width="0.0803%" height="15" fill="rgb(248,109,41)" fg:x="402" fg:w="1"/><text x="32.5132%" y="543.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="32.5040%" y="677" width="0.0803%" height="15" fill="rgb(238,23,50)" fg:x="405" fg:w="1"/><text x="32.7540%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="32.5040%" y="661" width="0.0803%" height="15" fill="rgb(211,48,49)" fg:x="405" fg:w="1"/><text x="32.7540%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="32.5843%" y="661" width="0.0803%" height="15" fill="rgb(223,36,21)" fg:x="406" fg:w="1"/><text x="32.8343%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="32.5843%" y="645" width="0.0803%" height="15" fill="rgb(207,123,46)" fg:x="406" fg:w="1"/><text x="32.8343%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="32.5843%" y="629" width="0.0803%" height="15" fill="rgb(240,218,32)" fg:x="406" fg:w="1"/><text x="32.8343%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="32.5843%" y="613" width="0.0803%" height="15" fill="rgb(252,5,43)" fg:x="406" fg:w="1"/><text x="32.8343%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="32.5843%" y="597" width="0.0803%" height="15" fill="rgb(252,84,19)" fg:x="406" fg:w="1"/><text x="32.8343%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="32.5843%" y="581" width="0.0803%" height="15" fill="rgb(243,152,39)" fg:x="406" fg:w="1"/><text x="32.8343%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="32.5843%" y="565" width="0.0803%" height="15" fill="rgb(234,160,15)" fg:x="406" fg:w="1"/><text x="32.8343%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="32.5843%" y="549" width="0.0803%" height="15" fill="rgb(237,34,20)" fg:x="406" fg:w="1"/><text x="32.8343%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="32.5843%" y="533" width="0.0803%" height="15" fill="rgb(229,97,13)" fg:x="406" fg:w="1"/><text x="32.8343%" y="543.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="32.5843%" y="517" width="0.0803%" height="15" fill="rgb(234,71,50)" fg:x="406" fg:w="1"/><text x="32.8343%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="32.5843%" y="501" width="0.0803%" height="15" fill="rgb(253,155,4)" fg:x="406" fg:w="1"/><text x="32.8343%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::finish (1 samples, 0.08%)</title><rect x="32.5843%" y="485" width="0.0803%" height="15" fill="rgb(222,185,37)" fg:x="406" fg:w="1"/><text x="32.8343%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="32.5843%" y="469" width="0.0803%" height="15" fill="rgb(251,177,13)" fg:x="406" fg:w="1"/><text x="32.8343%" y="479.50"></text></g><g><title>core::fmt::builders::DebugTuple::finish::{{closure}} (1 samples, 0.08%)</title><rect x="32.5843%" y="453" width="0.0803%" height="15" fill="rgb(250,179,40)" fg:x="406" fg:w="1"/><text x="32.8343%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="32.5843%" y="437" width="0.0803%" height="15" fill="rgb(242,44,2)" fg:x="406" fg:w="1"/><text x="32.8343%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.5843%" y="421" width="0.0803%" height="15" fill="rgb(216,177,13)" fg:x="406" fg:w="1"/><text x="32.8343%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.5843%" y="405" width="0.0803%" height="15" fill="rgb(216,106,43)" fg:x="406" fg:w="1"/><text x="32.8343%" y="415.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="32.5843%" y="389" width="0.0803%" height="15" fill="rgb(216,183,2)" fg:x="406" fg:w="1"/><text x="32.8343%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="32.5843%" y="373" width="0.0803%" height="15" fill="rgb(249,75,3)" fg:x="406" fg:w="1"/><text x="32.8343%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="32.5843%" y="357" width="0.0803%" height="15" fill="rgb(219,67,39)" fg:x="406" fg:w="1"/><text x="32.8343%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="32.5843%" y="341" width="0.0803%" height="15" fill="rgb(253,228,2)" fg:x="406" fg:w="1"/><text x="32.8343%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="32.5843%" y="325" width="0.0803%" height="15" fill="rgb(235,138,27)" fg:x="406" fg:w="1"/><text x="32.8343%" y="335.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="32.6645%" y="645" width="0.0803%" height="15" fill="rgb(236,97,51)" fg:x="407" fg:w="1"/><text x="32.9145%" y="655.50"></text></g><g><title>tracing_core::dispatcher::get_default (1 samples, 0.08%)</title><rect x="32.7448%" y="645" width="0.0803%" height="15" fill="rgb(240,80,30)" fg:x="408" fg:w="1"/><text x="32.9948%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.9053%" y="453" width="0.0803%" height="15" fill="rgb(230,178,19)" fg:x="410" fg:w="1"/><text x="33.1553%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.9053%" y="437" width="0.0803%" height="15" fill="rgb(210,190,27)" fg:x="410" fg:w="1"/><text x="33.1553%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.9053%" y="421" width="0.0803%" height="15" fill="rgb(222,107,31)" fg:x="410" fg:w="1"/><text x="33.1553%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="32.9053%" y="469" width="0.1605%" height="15" fill="rgb(216,127,34)" fg:x="410" fg:w="2"/><text x="33.1553%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.9856%" y="453" width="0.0803%" height="15" fill="rgb(234,116,52)" fg:x="411" fg:w="1"/><text x="33.2356%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.9856%" y="437" width="0.0803%" height="15" fill="rgb(222,124,15)" fg:x="411" fg:w="1"/><text x="33.2356%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="32.9856%" y="421" width="0.0803%" height="15" fill="rgb(231,179,28)" fg:x="411" fg:w="1"/><text x="33.2356%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="32.9856%" y="405" width="0.0803%" height="15" fill="rgb(226,93,45)" fg:x="411" fg:w="1"/><text x="33.2356%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="32.9856%" y="389" width="0.0803%" height="15" fill="rgb(215,8,51)" fg:x="411" fg:w="1"/><text x="33.2356%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="32.9856%" y="373" width="0.0803%" height="15" fill="rgb(223,106,5)" fg:x="411" fg:w="1"/><text x="33.2356%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="32.9856%" y="357" width="0.0803%" height="15" fill="rgb(250,191,5)" fg:x="411" fg:w="1"/><text x="33.2356%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="32.9856%" y="341" width="0.0803%" height="15" fill="rgb(242,132,44)" fg:x="411" fg:w="1"/><text x="33.2356%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="32.9856%" y="325" width="0.0803%" height="15" fill="rgb(251,152,29)" fg:x="411" fg:w="1"/><text x="33.2356%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="32.9856%" y="309" width="0.0803%" height="15" fill="rgb(218,179,5)" fg:x="411" fg:w="1"/><text x="33.2356%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="32.9856%" y="293" width="0.0803%" height="15" fill="rgb(227,67,19)" fg:x="411" fg:w="1"/><text x="33.2356%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.9856%" y="277" width="0.0803%" height="15" fill="rgb(233,119,31)" fg:x="411" fg:w="1"/><text x="33.2356%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.1461%" y="389" width="0.0803%" height="15" fill="rgb(241,120,22)" fg:x="413" fg:w="1"/><text x="33.3961%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="33.1461%" y="373" width="0.0803%" height="15" fill="rgb(224,102,30)" fg:x="413" fg:w="1"/><text x="33.3961%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="33.1461%" y="357" width="0.0803%" height="15" fill="rgb(210,164,37)" fg:x="413" fg:w="1"/><text x="33.3961%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="33.2263%" y="373" width="0.0803%" height="15" fill="rgb(226,191,16)" fg:x="414" fg:w="1"/><text x="33.4763%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="33.2263%" y="357" width="0.0803%" height="15" fill="rgb(214,40,45)" fg:x="414" fg:w="1"/><text x="33.4763%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="33.0658%" y="469" width="0.3210%" height="15" fill="rgb(244,29,26)" fg:x="412" fg:w="4"/><text x="33.3158%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="33.0658%" y="453" width="0.3210%" height="15" fill="rgb(216,16,5)" fg:x="412" fg:w="4"/><text x="33.3158%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="33.0658%" y="437" width="0.3210%" height="15" fill="rgb(249,76,35)" fg:x="412" fg:w="4"/><text x="33.3158%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="33.1461%" y="421" width="0.2408%" height="15" fill="rgb(207,11,44)" fg:x="413" fg:w="3"/><text x="33.3961%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="33.1461%" y="405" width="0.2408%" height="15" fill="rgb(228,190,49)" fg:x="413" fg:w="3"/><text x="33.3961%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="33.2263%" y="389" width="0.1605%" height="15" fill="rgb(214,173,12)" fg:x="414" fg:w="2"/><text x="33.4763%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="33.3066%" y="373" width="0.0803%" height="15" fill="rgb(218,26,35)" fg:x="415" fg:w="1"/><text x="33.5566%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.3066%" y="357" width="0.0803%" height="15" fill="rgb(220,200,19)" fg:x="415" fg:w="1"/><text x="33.5566%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.3066%" y="341" width="0.0803%" height="15" fill="rgb(239,95,49)" fg:x="415" fg:w="1"/><text x="33.5566%" y="351.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="33.3868%" y="469" width="0.0803%" height="15" fill="rgb(235,85,53)" fg:x="416" fg:w="1"/><text x="33.6368%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="33.4671%" y="373" width="0.0803%" height="15" fill="rgb(233,133,31)" fg:x="417" fg:w="1"/><text x="33.7171%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="33.4671%" y="357" width="0.0803%" height="15" fill="rgb(218,25,20)" fg:x="417" fg:w="1"/><text x="33.7171%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="33.4671%" y="341" width="0.0803%" height="15" fill="rgb(252,210,38)" fg:x="417" fg:w="1"/><text x="33.7171%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="33.4671%" y="325" width="0.0803%" height="15" fill="rgb(242,134,21)" fg:x="417" fg:w="1"/><text x="33.7171%" y="335.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (10 samples, 0.80%)</title><rect x="32.8250%" y="533" width="0.8026%" height="15" fill="rgb(213,28,48)" fg:x="409" fg:w="10"/><text x="33.0750%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (10 samples, 0.80%)</title><rect x="32.8250%" y="517" width="0.8026%" height="15" fill="rgb(250,196,2)" fg:x="409" fg:w="10"/><text x="33.0750%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.80%)</title><rect x="32.8250%" y="501" width="0.8026%" height="15" fill="rgb(227,5,17)" fg:x="409" fg:w="10"/><text x="33.0750%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="32.8250%" y="485" width="0.8026%" height="15" fill="rgb(221,226,24)" fg:x="409" fg:w="10"/><text x="33.0750%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="33.4671%" y="469" width="0.1605%" height="15" fill="rgb(211,5,48)" fg:x="417" fg:w="2"/><text x="33.7171%" y="479.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="33.4671%" y="453" width="0.1605%" height="15" fill="rgb(219,150,6)" fg:x="417" fg:w="2"/><text x="33.7171%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="33.4671%" y="437" width="0.1605%" height="15" fill="rgb(251,46,16)" fg:x="417" fg:w="2"/><text x="33.7171%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="33.4671%" y="421" width="0.1605%" height="15" fill="rgb(220,204,40)" fg:x="417" fg:w="2"/><text x="33.7171%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="33.4671%" y="405" width="0.1605%" height="15" fill="rgb(211,85,2)" fg:x="417" fg:w="2"/><text x="33.7171%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="33.4671%" y="389" width="0.1605%" height="15" fill="rgb(229,17,7)" fg:x="417" fg:w="2"/><text x="33.7171%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="33.5474%" y="373" width="0.0803%" height="15" fill="rgb(239,72,28)" fg:x="418" fg:w="1"/><text x="33.7974%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="33.5474%" y="357" width="0.0803%" height="15" fill="rgb(230,47,54)" fg:x="418" fg:w="1"/><text x="33.7974%" y="367.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (11 samples, 0.88%)</title><rect x="32.8250%" y="565" width="0.8828%" height="15" fill="rgb(214,50,8)" fg:x="409" fg:w="11"/><text x="33.0750%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (11 samples, 0.88%)</title><rect x="32.8250%" y="549" width="0.8828%" height="15" fill="rgb(216,198,43)" fg:x="409" fg:w="11"/><text x="33.0750%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.6276%" y="533" width="0.0803%" height="15" fill="rgb(234,20,35)" fg:x="419" fg:w="1"/><text x="33.8776%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.7881%" y="501" width="0.0803%" height="15" fill="rgb(254,45,19)" fg:x="421" fg:w="1"/><text x="34.0381%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.1091%" y="469" width="0.0803%" height="15" fill="rgb(219,14,44)" fg:x="425" fg:w="1"/><text x="34.3591%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.2697%" y="325" width="0.0803%" height="15" fill="rgb(217,220,26)" fg:x="427" fg:w="1"/><text x="34.5197%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.4302%" y="293" width="0.0803%" height="15" fill="rgb(213,158,28)" fg:x="429" fg:w="1"/><text x="34.6802%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="34.3499%" y="325" width="0.3210%" height="15" fill="rgb(252,51,52)" fg:x="428" fg:w="4"/><text x="34.5999%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="34.3499%" y="309" width="0.3210%" height="15" fill="rgb(246,89,16)" fg:x="428" fg:w="4"/><text x="34.5999%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="34.5104%" y="293" width="0.1605%" height="15" fill="rgb(216,158,49)" fg:x="430" fg:w="2"/><text x="34.7604%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="34.5104%" y="277" width="0.1605%" height="15" fill="rgb(236,107,19)" fg:x="430" fg:w="2"/><text x="34.7604%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="34.5104%" y="261" width="0.1605%" height="15" fill="rgb(228,185,30)" fg:x="430" fg:w="2"/><text x="34.7604%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="34.6709%" y="293" width="0.0803%" height="15" fill="rgb(246,134,8)" fg:x="432" fg:w="1"/><text x="34.9209%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (7 samples, 0.56%)</title><rect x="34.2697%" y="357" width="0.5618%" height="15" fill="rgb(214,143,50)" fg:x="427" fg:w="7"/><text x="34.5197%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="34.2697%" y="341" width="0.5618%" height="15" fill="rgb(228,75,8)" fg:x="427" fg:w="7"/><text x="34.5197%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="34.6709%" y="325" width="0.1605%" height="15" fill="rgb(207,175,4)" fg:x="432" fg:w="2"/><text x="34.9209%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="34.6709%" y="309" width="0.1605%" height="15" fill="rgb(205,108,24)" fg:x="432" fg:w="2"/><text x="34.9209%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="34.7512%" y="293" width="0.0803%" height="15" fill="rgb(244,120,49)" fg:x="433" fg:w="1"/><text x="35.0012%" y="303.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (8 samples, 0.64%)</title><rect x="34.2697%" y="373" width="0.6421%" height="15" fill="rgb(223,47,38)" fg:x="427" fg:w="8"/><text x="34.5197%" y="383.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="34.8315%" y="357" width="0.0803%" height="15" fill="rgb(229,179,11)" fg:x="434" fg:w="1"/><text x="35.0815%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="34.8315%" y="341" width="0.0803%" height="15" fill="rgb(231,122,1)" fg:x="434" fg:w="1"/><text x="35.0815%" y="351.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (10 samples, 0.80%)</title><rect x="34.2697%" y="389" width="0.8026%" height="15" fill="rgb(245,119,9)" fg:x="427" fg:w="10"/><text x="34.5197%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (2 samples, 0.16%)</title><rect x="34.9117%" y="373" width="0.1605%" height="15" fill="rgb(241,163,25)" fg:x="435" fg:w="2"/><text x="35.1617%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.2327%" y="341" width="0.0803%" height="15" fill="rgb(217,214,3)" fg:x="439" fg:w="1"/><text x="35.4827%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.2327%" y="325" width="0.0803%" height="15" fill="rgb(240,86,28)" fg:x="439" fg:w="1"/><text x="35.4827%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.2327%" y="309" width="0.0803%" height="15" fill="rgb(215,47,9)" fg:x="439" fg:w="1"/><text x="35.4827%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.2327%" y="293" width="0.0803%" height="15" fill="rgb(252,25,45)" fg:x="439" fg:w="1"/><text x="35.4827%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="35.2327%" y="357" width="0.1605%" height="15" fill="rgb(251,164,9)" fg:x="439" fg:w="2"/><text x="35.4827%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="35.3130%" y="341" width="0.0803%" height="15" fill="rgb(233,194,0)" fg:x="440" fg:w="1"/><text x="35.5630%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.4735%" y="325" width="0.0803%" height="15" fill="rgb(249,111,24)" fg:x="442" fg:w="1"/><text x="35.7235%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="35.5538%" y="325" width="0.0803%" height="15" fill="rgb(250,223,3)" fg:x="443" fg:w="1"/><text x="35.8038%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.5538%" y="309" width="0.0803%" height="15" fill="rgb(236,178,37)" fg:x="443" fg:w="1"/><text x="35.8038%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="35.6340%" y="293" width="0.0803%" height="15" fill="rgb(241,158,50)" fg:x="444" fg:w="1"/><text x="35.8840%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.6340%" y="277" width="0.0803%" height="15" fill="rgb(213,121,41)" fg:x="444" fg:w="1"/><text x="35.8840%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="35.3933%" y="341" width="0.4815%" height="15" fill="rgb(240,92,3)" fg:x="441" fg:w="6"/><text x="35.6433%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="35.6340%" y="325" width="0.2408%" height="15" fill="rgb(205,123,3)" fg:x="444" fg:w="3"/><text x="35.8840%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.6340%" y="309" width="0.2408%" height="15" fill="rgb(205,97,47)" fg:x="444" fg:w="3"/><text x="35.8840%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="35.7143%" y="293" width="0.1605%" height="15" fill="rgb(247,152,14)" fg:x="445" fg:w="2"/><text x="35.9643%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="35.7143%" y="277" width="0.1605%" height="15" fill="rgb(248,195,53)" fg:x="445" fg:w="2"/><text x="35.9643%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="35.7143%" y="261" width="0.1605%" height="15" fill="rgb(226,201,16)" fg:x="445" fg:w="2"/><text x="35.9643%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="35.7143%" y="245" width="0.1605%" height="15" fill="rgb(205,98,0)" fg:x="445" fg:w="2"/><text x="35.9643%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="35.7945%" y="229" width="0.0803%" height="15" fill="rgb(214,191,48)" fg:x="446" fg:w="1"/><text x="36.0445%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="35.8748%" y="341" width="0.0803%" height="15" fill="rgb(237,112,39)" fg:x="447" fg:w="1"/><text x="36.1248%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.8748%" y="325" width="0.0803%" height="15" fill="rgb(247,203,27)" fg:x="447" fg:w="1"/><text x="36.1248%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (8 samples, 0.64%)</title><rect x="35.3933%" y="357" width="0.6421%" height="15" fill="rgb(235,124,28)" fg:x="441" fg:w="8"/><text x="35.6433%" y="367.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="35.9551%" y="341" width="0.0803%" height="15" fill="rgb(208,207,46)" fg:x="448" fg:w="1"/><text x="36.2051%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.1156%" y="341" width="0.0803%" height="15" fill="rgb(234,176,4)" fg:x="450" fg:w="1"/><text x="36.3656%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.1156%" y="325" width="0.0803%" height="15" fill="rgb(230,133,28)" fg:x="450" fg:w="1"/><text x="36.3656%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.1958%" y="277" width="0.0803%" height="15" fill="rgb(211,137,40)" fg:x="451" fg:w="1"/><text x="36.4458%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="36.2761%" y="277" width="0.0803%" height="15" fill="rgb(254,35,13)" fg:x="452" fg:w="1"/><text x="36.5261%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.3563%" y="245" width="0.0803%" height="15" fill="rgb(225,49,51)" fg:x="453" fg:w="1"/><text x="36.6063%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="36.1958%" y="309" width="0.3210%" height="15" fill="rgb(251,10,15)" fg:x="451" fg:w="4"/><text x="36.4458%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="36.1958%" y="293" width="0.3210%" height="15" fill="rgb(228,207,15)" fg:x="451" fg:w="4"/><text x="36.4458%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="36.3563%" y="277" width="0.1605%" height="15" fill="rgb(241,99,19)" fg:x="453" fg:w="2"/><text x="36.6063%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="36.3563%" y="261" width="0.1605%" height="15" fill="rgb(207,104,49)" fg:x="453" fg:w="2"/><text x="36.6063%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="36.4366%" y="245" width="0.0803%" height="15" fill="rgb(234,99,18)" fg:x="454" fg:w="1"/><text x="36.6866%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.56%)</title><rect x="36.0353%" y="357" width="0.5618%" height="15" fill="rgb(213,191,49)" fg:x="449" fg:w="7"/><text x="36.2853%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="36.1958%" y="341" width="0.4013%" height="15" fill="rgb(210,226,19)" fg:x="451" fg:w="5"/><text x="36.4458%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="36.1958%" y="325" width="0.4013%" height="15" fill="rgb(229,97,18)" fg:x="451" fg:w="5"/><text x="36.4458%" y="335.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="36.5169%" y="309" width="0.0803%" height="15" fill="rgb(211,167,15)" fg:x="455" fg:w="1"/><text x="36.7669%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.6774%" y="277" width="0.0803%" height="15" fill="rgb(210,169,34)" fg:x="457" fg:w="1"/><text x="36.9274%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.6774%" y="261" width="0.0803%" height="15" fill="rgb(241,121,31)" fg:x="457" fg:w="1"/><text x="36.9274%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="36.6774%" y="245" width="0.0803%" height="15" fill="rgb(232,40,11)" fg:x="457" fg:w="1"/><text x="36.9274%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="36.6774%" y="229" width="0.0803%" height="15" fill="rgb(205,86,26)" fg:x="457" fg:w="1"/><text x="36.9274%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="36.6774%" y="213" width="0.0803%" height="15" fill="rgb(231,126,28)" fg:x="457" fg:w="1"/><text x="36.9274%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.6774%" y="197" width="0.0803%" height="15" fill="rgb(219,221,18)" fg:x="457" fg:w="1"/><text x="36.9274%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.6774%" y="181" width="0.0803%" height="15" fill="rgb(211,40,0)" fg:x="457" fg:w="1"/><text x="36.9274%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="36.6774%" y="165" width="0.0803%" height="15" fill="rgb(239,85,43)" fg:x="457" fg:w="1"/><text x="36.9274%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="36.6774%" y="149" width="0.0803%" height="15" fill="rgb(231,55,21)" fg:x="457" fg:w="1"/><text x="36.9274%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="36.6774%" y="133" width="0.0803%" height="15" fill="rgb(225,184,43)" fg:x="457" fg:w="1"/><text x="36.9274%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="36.6774%" y="117" width="0.0803%" height="15" fill="rgb(251,158,41)" fg:x="457" fg:w="1"/><text x="36.9274%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.6774%" y="101" width="0.0803%" height="15" fill="rgb(234,159,37)" fg:x="457" fg:w="1"/><text x="36.9274%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="36.6774%" y="293" width="0.1605%" height="15" fill="rgb(216,204,22)" fg:x="457" fg:w="2"/><text x="36.9274%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.7576%" y="277" width="0.0803%" height="15" fill="rgb(214,17,3)" fg:x="458" fg:w="1"/><text x="37.0076%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="36.6774%" y="309" width="0.2408%" height="15" fill="rgb(212,111,17)" fg:x="457" fg:w="3"/><text x="36.9274%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.8379%" y="293" width="0.0803%" height="15" fill="rgb(221,157,24)" fg:x="459" fg:w="1"/><text x="37.0879%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.8379%" y="277" width="0.0803%" height="15" fill="rgb(252,16,13)" fg:x="459" fg:w="1"/><text x="37.0879%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="36.8379%" y="261" width="0.0803%" height="15" fill="rgb(221,62,2)" fg:x="459" fg:w="1"/><text x="37.0879%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="36.8379%" y="245" width="0.0803%" height="15" fill="rgb(247,87,22)" fg:x="459" fg:w="1"/><text x="37.0879%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="36.8379%" y="229" width="0.0803%" height="15" fill="rgb(215,73,9)" fg:x="459" fg:w="1"/><text x="37.0879%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="36.8379%" y="213" width="0.0803%" height="15" fill="rgb(207,175,33)" fg:x="459" fg:w="1"/><text x="37.0879%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="36.8379%" y="197" width="0.0803%" height="15" fill="rgb(243,129,54)" fg:x="459" fg:w="1"/><text x="37.0879%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="36.6774%" y="325" width="0.3210%" height="15" fill="rgb(227,119,45)" fg:x="457" fg:w="4"/><text x="36.9274%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.9181%" y="309" width="0.0803%" height="15" fill="rgb(205,109,36)" fg:x="460" fg:w="1"/><text x="37.1681%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="36.9984%" y="325" width="0.0803%" height="15" fill="rgb(205,6,39)" fg:x="461" fg:w="1"/><text x="37.2484%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="36.9984%" y="309" width="0.0803%" height="15" fill="rgb(221,32,16)" fg:x="461" fg:w="1"/><text x="37.2484%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.0787%" y="293" width="0.0803%" height="15" fill="rgb(228,144,50)" fg:x="462" fg:w="1"/><text x="37.3287%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.2392%" y="261" width="0.0803%" height="15" fill="rgb(229,201,53)" fg:x="464" fg:w="1"/><text x="37.4892%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="37.2392%" y="245" width="0.0803%" height="15" fill="rgb(249,153,27)" fg:x="464" fg:w="1"/><text x="37.4892%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="37.2392%" y="229" width="0.0803%" height="15" fill="rgb(227,106,25)" fg:x="464" fg:w="1"/><text x="37.4892%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="37.3997%" y="229" width="0.1605%" height="15" fill="rgb(230,65,29)" fg:x="466" fg:w="2"/><text x="37.6497%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (12 samples, 0.96%)</title><rect x="36.6774%" y="341" width="0.9631%" height="15" fill="rgb(221,57,46)" fg:x="457" fg:w="12"/><text x="36.9274%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="37.0787%" y="325" width="0.5618%" height="15" fill="rgb(229,161,17)" fg:x="462" fg:w="7"/><text x="37.3287%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="37.0787%" y="309" width="0.5618%" height="15" fill="rgb(222,213,11)" fg:x="462" fg:w="7"/><text x="37.3287%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="37.1589%" y="293" width="0.4815%" height="15" fill="rgb(235,35,13)" fg:x="463" fg:w="6"/><text x="37.4089%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="37.1589%" y="277" width="0.4815%" height="15" fill="rgb(233,158,34)" fg:x="463" fg:w="6"/><text x="37.4089%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="37.3194%" y="261" width="0.3210%" height="15" fill="rgb(215,151,48)" fg:x="465" fg:w="4"/><text x="37.5694%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="37.3194%" y="245" width="0.3210%" height="15" fill="rgb(229,84,14)" fg:x="465" fg:w="4"/><text x="37.5694%" y="255.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="37.5602%" y="229" width="0.0803%" height="15" fill="rgb(229,68,14)" fg:x="468" fg:w="1"/><text x="37.8102%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::gid (15 samples, 1.20%)</title><rect x="36.5971%" y="357" width="1.2039%" height="15" fill="rgb(243,106,26)" fg:x="456" fg:w="15"/><text x="36.8471%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="37.6404%" y="341" width="0.1605%" height="15" fill="rgb(206,45,38)" fg:x="469" fg:w="2"/><text x="37.8904%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.7207%" y="325" width="0.0803%" height="15" fill="rgb(226,6,15)" fg:x="470" fg:w="1"/><text x="37.9707%" y="335.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="37.8010%" y="357" width="0.0803%" height="15" fill="rgb(232,22,54)" fg:x="471" fg:w="1"/><text x="38.0510%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="37.9615%" y="277" width="0.2408%" height="15" fill="rgb(229,222,32)" fg:x="473" fg:w="3"/><text x="38.2115%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="37.9615%" y="261" width="0.2408%" height="15" fill="rgb(228,62,29)" fg:x="473" fg:w="3"/><text x="38.2115%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="37.9615%" y="245" width="0.2408%" height="15" fill="rgb(251,103,34)" fg:x="473" fg:w="3"/><text x="38.2115%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="38.0417%" y="229" width="0.1605%" height="15" fill="rgb(233,12,30)" fg:x="474" fg:w="2"/><text x="38.2917%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="38.1220%" y="213" width="0.0803%" height="15" fill="rgb(238,52,0)" fg:x="475" fg:w="1"/><text x="38.3720%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="38.2825%" y="229" width="0.0803%" height="15" fill="rgb(223,98,5)" fg:x="477" fg:w="1"/><text x="38.5325%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="38.3628%" y="229" width="0.1605%" height="15" fill="rgb(228,75,37)" fg:x="478" fg:w="2"/><text x="38.6128%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="38.3628%" y="213" width="0.1605%" height="15" fill="rgb(205,115,49)" fg:x="478" fg:w="2"/><text x="38.6128%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="38.4430%" y="197" width="0.0803%" height="15" fill="rgb(250,154,43)" fg:x="479" fg:w="1"/><text x="38.6930%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="38.5233%" y="229" width="0.0803%" height="15" fill="rgb(226,43,29)" fg:x="480" fg:w="1"/><text x="38.7733%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="38.6035%" y="229" width="0.1605%" height="15" fill="rgb(249,228,39)" fg:x="481" fg:w="2"/><text x="38.8535%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.8443%" y="213" width="0.0803%" height="15" fill="rgb(216,79,43)" fg:x="484" fg:w="1"/><text x="39.0943%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="38.9246%" y="213" width="0.6421%" height="15" fill="rgb(228,95,12)" fg:x="485" fg:w="8"/><text x="39.1746%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.64%)</title><rect x="38.9246%" y="197" width="0.6421%" height="15" fill="rgb(249,221,15)" fg:x="485" fg:w="8"/><text x="39.1746%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.4864%" y="181" width="0.0803%" height="15" fill="rgb(233,34,13)" fg:x="492" fg:w="1"/><text x="39.7364%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="39.5666%" y="213" width="0.1605%" height="15" fill="rgb(214,103,39)" fg:x="493" fg:w="2"/><text x="39.8166%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="39.7271%" y="197" width="0.0803%" height="15" fill="rgb(251,126,39)" fg:x="495" fg:w="1"/><text x="39.9771%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="39.7271%" y="181" width="0.0803%" height="15" fill="rgb(214,216,36)" fg:x="495" fg:w="1"/><text x="39.9771%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.7271%" y="165" width="0.0803%" height="15" fill="rgb(220,221,8)" fg:x="495" fg:w="1"/><text x="39.9771%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="39.8074%" y="197" width="0.2408%" height="15" fill="rgb(240,216,3)" fg:x="496" fg:w="3"/><text x="40.0574%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="39.7271%" y="213" width="0.4013%" height="15" fill="rgb(232,218,17)" fg:x="495" fg:w="5"/><text x="39.9771%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.0482%" y="197" width="0.0803%" height="15" fill="rgb(229,163,45)" fg:x="499" fg:w="1"/><text x="40.2982%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="40.0482%" y="181" width="0.0803%" height="15" fill="rgb(231,110,42)" fg:x="499" fg:w="1"/><text x="40.2982%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="40.0482%" y="165" width="0.0803%" height="15" fill="rgb(208,170,48)" fg:x="499" fg:w="1"/><text x="40.2982%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="40.1284%" y="213" width="0.0803%" height="15" fill="rgb(239,116,25)" fg:x="500" fg:w="1"/><text x="40.3784%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="40.2889%" y="197" width="0.0803%" height="15" fill="rgb(219,200,50)" fg:x="502" fg:w="1"/><text x="40.5389%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="40.2889%" y="181" width="0.0803%" height="15" fill="rgb(245,200,0)" fg:x="502" fg:w="1"/><text x="40.5389%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (3 samples, 0.24%)</title><rect x="40.2087%" y="213" width="0.2408%" height="15" fill="rgb(245,119,33)" fg:x="501" fg:w="3"/><text x="40.4587%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.3692%" y="197" width="0.0803%" height="15" fill="rgb(231,125,12)" fg:x="503" fg:w="1"/><text x="40.6192%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="40.3692%" y="181" width="0.0803%" height="15" fill="rgb(216,96,41)" fg:x="503" fg:w="1"/><text x="40.6192%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="40.3692%" y="165" width="0.0803%" height="15" fill="rgb(248,43,45)" fg:x="503" fg:w="1"/><text x="40.6192%" y="175.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="40.5297%" y="149" width="0.1605%" height="15" fill="rgb(217,222,7)" fg:x="505" fg:w="2"/><text x="40.7797%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.7705%" y="133" width="0.0803%" height="15" fill="rgb(233,28,6)" fg:x="508" fg:w="1"/><text x="41.0205%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (38 samples, 3.05%)</title><rect x="40.6902%" y="149" width="3.0498%" height="15" fill="rgb(231,218,15)" fg:x="507" fg:w="38"/><text x="40.9402%" y="159.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (36 samples, 2.89%)</title><rect x="40.8507%" y="133" width="2.8892%" height="15" fill="rgb(226,171,48)" fg:x="509" fg:w="36"/><text x="41.1007%" y="143.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (35 samples, 2.81%)</title><rect x="40.9310%" y="117" width="2.8090%" height="15" fill="rgb(235,201,9)" fg:x="510" fg:w="35"/><text x="41.1810%" y="127.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="43.7400%" y="149" width="0.3210%" height="15" fill="rgb(217,80,15)" fg:x="545" fg:w="4"/><text x="43.9900%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 3.85%)</title><rect x="40.4494%" y="197" width="3.8523%" height="15" fill="rgb(219,152,8)" fg:x="504" fg:w="48"/><text x="40.6994%" y="207.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (48 samples, 3.85%)</title><rect x="40.4494%" y="181" width="3.8523%" height="15" fill="rgb(243,107,38)" fg:x="504" fg:w="48"/><text x="40.6994%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (48 samples, 3.85%)</title><rect x="40.4494%" y="165" width="3.8523%" height="15" fill="rgb(231,17,5)" fg:x="504" fg:w="48"/><text x="40.6994%" y="175.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="44.0610%" y="149" width="0.2408%" height="15" fill="rgb(209,25,54)" fg:x="549" fg:w="3"/><text x="44.3110%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.2215%" y="133" width="0.0803%" height="15" fill="rgb(219,0,2)" fg:x="551" fg:w="1"/><text x="44.4715%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.2215%" y="117" width="0.0803%" height="15" fill="rgb(246,9,5)" fg:x="551" fg:w="1"/><text x="44.4715%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.2215%" y="101" width="0.0803%" height="15" fill="rgb(226,159,4)" fg:x="551" fg:w="1"/><text x="44.4715%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.5425%" y="181" width="0.0803%" height="15" fill="rgb(219,175,34)" fg:x="555" fg:w="1"/><text x="44.7925%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="44.6228%" y="181" width="0.1605%" height="15" fill="rgb(236,10,46)" fg:x="556" fg:w="2"/><text x="44.8728%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.7030%" y="165" width="0.0803%" height="15" fill="rgb(240,211,16)" fg:x="557" fg:w="1"/><text x="44.9530%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.7030%" y="149" width="0.0803%" height="15" fill="rgb(205,3,43)" fg:x="557" fg:w="1"/><text x="44.9530%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.7030%" y="133" width="0.0803%" height="15" fill="rgb(245,7,22)" fg:x="557" fg:w="1"/><text x="44.9530%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="44.7833%" y="181" width="0.4815%" height="15" fill="rgb(239,132,32)" fg:x="558" fg:w="6"/><text x="45.0333%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="45.1846%" y="165" width="0.0803%" height="15" fill="rgb(228,202,34)" fg:x="563" fg:w="1"/><text x="45.4346%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.1846%" y="149" width="0.0803%" height="15" fill="rgb(254,200,22)" fg:x="563" fg:w="1"/><text x="45.4346%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.1846%" y="133" width="0.0803%" height="15" fill="rgb(219,10,39)" fg:x="563" fg:w="1"/><text x="45.4346%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.04%)</title><rect x="44.3018%" y="197" width="1.0433%" height="15" fill="rgb(226,210,39)" fg:x="552" fg:w="13"/><text x="44.5518%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="45.2648%" y="181" width="0.0803%" height="15" fill="rgb(208,219,16)" fg:x="564" fg:w="1"/><text x="45.5148%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="45.3451%" y="181" width="0.0803%" height="15" fill="rgb(216,158,51)" fg:x="565" fg:w="1"/><text x="45.5951%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.3451%" y="165" width="0.0803%" height="15" fill="rgb(233,14,44)" fg:x="565" fg:w="1"/><text x="45.5951%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.3451%" y="149" width="0.0803%" height="15" fill="rgb(237,97,39)" fg:x="565" fg:w="1"/><text x="45.5951%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.3451%" y="133" width="0.0803%" height="15" fill="rgb(218,198,43)" fg:x="565" fg:w="1"/><text x="45.5951%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (63 samples, 5.06%)</title><rect x="40.4494%" y="213" width="5.0562%" height="15" fill="rgb(231,104,20)" fg:x="504" fg:w="63"/><text x="40.6994%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="45.3451%" y="197" width="0.1605%" height="15" fill="rgb(254,36,13)" fg:x="565" fg:w="2"/><text x="45.5951%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="45.4254%" y="181" width="0.0803%" height="15" fill="rgb(248,14,50)" fg:x="566" fg:w="1"/><text x="45.6754%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="45.4254%" y="165" width="0.0803%" height="15" fill="rgb(217,107,29)" fg:x="566" fg:w="1"/><text x="45.6754%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (85 samples, 6.82%)</title><rect x="38.7640%" y="229" width="6.8218%" height="15" fill="rgb(251,169,33)" fg:x="483" fg:w="85"/><text x="39.0140%" y="239.50">regex_aut..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="45.5056%" y="213" width="0.0803%" height="15" fill="rgb(217,108,32)" fg:x="567" fg:w="1"/><text x="45.7556%" y="223.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="45.5859%" y="229" width="0.0803%" height="15" fill="rgb(219,66,42)" fg:x="568" fg:w="1"/><text x="45.8359%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="45.5859%" y="213" width="0.0803%" height="15" fill="rgb(206,180,7)" fg:x="568" fg:w="1"/><text x="45.8359%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="45.5859%" y="197" width="0.0803%" height="15" fill="rgb(208,226,31)" fg:x="568" fg:w="1"/><text x="45.8359%" y="207.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="45.5859%" y="181" width="0.0803%" height="15" fill="rgb(218,26,49)" fg:x="568" fg:w="1"/><text x="45.8359%" y="191.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="45.5859%" y="165" width="0.0803%" height="15" fill="rgb(233,197,48)" fg:x="568" fg:w="1"/><text x="45.8359%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="45.7464%" y="181" width="0.0803%" height="15" fill="rgb(252,181,51)" fg:x="570" fg:w="1"/><text x="45.9964%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="45.7464%" y="165" width="0.0803%" height="15" fill="rgb(253,90,19)" fg:x="570" fg:w="1"/><text x="45.9964%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="45.6661%" y="197" width="0.3210%" height="15" fill="rgb(215,171,30)" fg:x="569" fg:w="4"/><text x="45.9161%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="45.8266%" y="181" width="0.1605%" height="15" fill="rgb(214,222,9)" fg:x="571" fg:w="2"/><text x="46.0766%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="45.8266%" y="165" width="0.1605%" height="15" fill="rgb(223,3,22)" fg:x="571" fg:w="2"/><text x="46.0766%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="45.8266%" y="149" width="0.1605%" height="15" fill="rgb(225,196,46)" fg:x="571" fg:w="2"/><text x="46.0766%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="45.8266%" y="133" width="0.1605%" height="15" fill="rgb(209,110,37)" fg:x="571" fg:w="2"/><text x="46.0766%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="45.6661%" y="229" width="0.4013%" height="15" fill="rgb(249,89,12)" fg:x="569" fg:w="5"/><text x="45.9161%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="45.6661%" y="213" width="0.4013%" height="15" fill="rgb(226,27,33)" fg:x="569" fg:w="5"/><text x="45.9161%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="45.9872%" y="197" width="0.0803%" height="15" fill="rgb(213,82,22)" fg:x="573" fg:w="1"/><text x="46.2372%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="46.0674%" y="197" width="0.1605%" height="15" fill="rgb(248,140,0)" fg:x="574" fg:w="2"/><text x="46.3174%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="46.1477%" y="181" width="0.0803%" height="15" fill="rgb(228,106,3)" fg:x="575" fg:w="1"/><text x="46.3977%" y="191.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="46.1477%" y="165" width="0.0803%" height="15" fill="rgb(209,23,37)" fg:x="575" fg:w="1"/><text x="46.3977%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="46.1477%" y="149" width="0.0803%" height="15" fill="rgb(241,93,50)" fg:x="575" fg:w="1"/><text x="46.3977%" y="159.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="46.0674%" y="229" width="0.2408%" height="15" fill="rgb(253,46,43)" fg:x="574" fg:w="3"/><text x="46.3174%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="46.0674%" y="213" width="0.2408%" height="15" fill="rgb(226,206,43)" fg:x="574" fg:w="3"/><text x="46.3174%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="46.2279%" y="197" width="0.0803%" height="15" fill="rgb(217,54,7)" fg:x="576" fg:w="1"/><text x="46.4779%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="46.2279%" y="181" width="0.0803%" height="15" fill="rgb(223,5,52)" fg:x="576" fg:w="1"/><text x="46.4779%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (102 samples, 8.19%)</title><rect x="38.2022%" y="277" width="8.1862%" height="15" fill="rgb(206,52,46)" fg:x="476" fg:w="102"/><text x="38.4522%" y="287.50">&lt;regex::reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (101 samples, 8.11%)</title><rect x="38.2825%" y="261" width="8.1059%" height="15" fill="rgb(253,136,11)" fg:x="477" fg:w="101"/><text x="38.5325%" y="271.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (101 samples, 8.11%)</title><rect x="38.2825%" y="245" width="8.1059%" height="15" fill="rgb(208,106,33)" fg:x="477" fg:w="101"/><text x="38.5325%" y="255.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::build (1 samples, 0.08%)</title><rect x="46.3082%" y="229" width="0.0803%" height="15" fill="rgb(206,54,4)" fg:x="577" fg:w="1"/><text x="46.5582%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.3884%" y="245" width="0.0803%" height="15" fill="rgb(213,3,15)" fg:x="578" fg:w="1"/><text x="46.6384%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="46.4687%" y="229" width="0.0803%" height="15" fill="rgb(252,211,39)" fg:x="579" fg:w="1"/><text x="46.7187%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.4687%" y="213" width="0.0803%" height="15" fill="rgb(223,6,36)" fg:x="579" fg:w="1"/><text x="46.7187%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="46.4687%" y="245" width="0.1605%" height="15" fill="rgb(252,169,45)" fg:x="579" fg:w="2"/><text x="46.7187%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="46.5490%" y="229" width="0.0803%" height="15" fill="rgb(212,48,26)" fg:x="580" fg:w="1"/><text x="46.7990%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="46.5490%" y="213" width="0.0803%" height="15" fill="rgb(251,102,48)" fg:x="580" fg:w="1"/><text x="46.7990%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.5490%" y="197" width="0.0803%" height="15" fill="rgb(243,208,16)" fg:x="580" fg:w="1"/><text x="46.7990%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.5490%" y="181" width="0.0803%" height="15" fill="rgb(219,96,24)" fg:x="580" fg:w="1"/><text x="46.7990%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.6292%" y="229" width="0.0803%" height="15" fill="rgb(219,33,29)" fg:x="581" fg:w="1"/><text x="46.8792%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="46.3884%" y="277" width="0.4815%" height="15" fill="rgb(223,176,5)" fg:x="578" fg:w="6"/><text x="46.6384%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="46.3884%" y="261" width="0.4815%" height="15" fill="rgb(228,140,14)" fg:x="578" fg:w="6"/><text x="46.6384%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="46.6292%" y="245" width="0.2408%" height="15" fill="rgb(217,179,31)" fg:x="581" fg:w="3"/><text x="46.8792%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="46.7095%" y="229" width="0.1605%" height="15" fill="rgb(230,9,30)" fg:x="582" fg:w="2"/><text x="46.9595%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.2713%" y="197" width="0.0803%" height="15" fill="rgb(230,136,20)" fg:x="589" fg:w="1"/><text x="47.5213%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.2713%" y="181" width="0.0803%" height="15" fill="rgb(215,210,22)" fg:x="589" fg:w="1"/><text x="47.5213%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.2713%" y="165" width="0.0803%" height="15" fill="rgb(218,43,5)" fg:x="589" fg:w="1"/><text x="47.5213%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="46.9502%" y="229" width="0.5618%" height="15" fill="rgb(216,11,5)" fg:x="585" fg:w="7"/><text x="47.2002%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="46.9502%" y="213" width="0.5618%" height="15" fill="rgb(209,82,29)" fg:x="585" fg:w="7"/><text x="47.2002%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="47.3515%" y="197" width="0.1605%" height="15" fill="rgb(244,115,12)" fg:x="590" fg:w="2"/><text x="47.6015%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (121 samples, 9.71%)</title><rect x="37.9615%" y="293" width="9.7111%" height="15" fill="rgb(222,82,18)" fg:x="473" fg:w="121"/><text x="38.2115%" y="303.50">indefinite::he..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.80%)</title><rect x="46.8700%" y="277" width="0.8026%" height="15" fill="rgb(249,227,8)" fg:x="584" fg:w="10"/><text x="47.1200%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.80%)</title><rect x="46.8700%" y="261" width="0.8026%" height="15" fill="rgb(253,141,45)" fg:x="584" fg:w="10"/><text x="47.1200%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.80%)</title><rect x="46.8700%" y="245" width="0.8026%" height="15" fill="rgb(234,184,4)" fg:x="584" fg:w="10"/><text x="47.1200%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.16%)</title><rect x="47.5120%" y="229" width="0.1605%" height="15" fill="rgb(218,194,23)" fg:x="592" fg:w="2"/><text x="47.7620%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="47.5120%" y="213" width="0.1605%" height="15" fill="rgb(235,66,41)" fg:x="592" fg:w="2"/><text x="47.7620%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="47.5120%" y="197" width="0.1605%" height="15" fill="rgb(245,217,1)" fg:x="592" fg:w="2"/><text x="47.7620%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="47.5120%" y="181" width="0.1605%" height="15" fill="rgb(229,91,1)" fg:x="592" fg:w="2"/><text x="47.7620%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="47.5120%" y="165" width="0.1605%" height="15" fill="rgb(207,101,30)" fg:x="592" fg:w="2"/><text x="47.7620%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="47.6726%" y="229" width="0.1605%" height="15" fill="rgb(223,82,49)" fg:x="594" fg:w="2"/><text x="47.9226%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="47.6726%" y="213" width="0.1605%" height="15" fill="rgb(218,167,17)" fg:x="594" fg:w="2"/><text x="47.9226%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.7528%" y="197" width="0.0803%" height="15" fill="rgb(208,103,14)" fg:x="595" fg:w="1"/><text x="48.0028%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.8331%" y="229" width="0.0803%" height="15" fill="rgb(238,20,8)" fg:x="596" fg:w="1"/><text x="48.0831%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="47.9936%" y="197" width="0.1605%" height="15" fill="rgb(218,80,54)" fg:x="598" fg:w="2"/><text x="48.2436%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.0738%" y="181" width="0.0803%" height="15" fill="rgb(240,144,17)" fg:x="599" fg:w="1"/><text x="48.3238%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="47.9133%" y="229" width="0.3210%" height="15" fill="rgb(245,27,50)" fg:x="597" fg:w="4"/><text x="48.1633%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="47.9133%" y="213" width="0.3210%" height="15" fill="rgb(251,51,7)" fg:x="597" fg:w="4"/><text x="48.1633%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="48.1541%" y="197" width="0.0803%" height="15" fill="rgb(245,217,29)" fg:x="600" fg:w="1"/><text x="48.4041%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="48.1541%" y="181" width="0.0803%" height="15" fill="rgb(221,176,29)" fg:x="600" fg:w="1"/><text x="48.4041%" y="191.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="48.2343%" y="229" width="0.0803%" height="15" fill="rgb(212,180,24)" fg:x="601" fg:w="1"/><text x="48.4843%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="48.2343%" y="213" width="0.0803%" height="15" fill="rgb(254,24,2)" fg:x="601" fg:w="1"/><text x="48.4843%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.5554%" y="197" width="0.0803%" height="15" fill="rgb(230,100,2)" fg:x="605" fg:w="1"/><text x="48.8054%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.04%)</title><rect x="48.4751%" y="213" width="1.0433%" height="15" fill="rgb(219,142,25)" fg:x="604" fg:w="13"/><text x="48.7251%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.88%)</title><rect x="48.6356%" y="197" width="0.8828%" height="15" fill="rgb(240,73,43)" fg:x="606" fg:w="11"/><text x="48.8856%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.4382%" y="181" width="0.0803%" height="15" fill="rgb(214,114,15)" fg:x="616" fg:w="1"/><text x="49.6882%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="49.5185%" y="197" width="0.0803%" height="15" fill="rgb(207,130,4)" fg:x="617" fg:w="1"/><text x="49.7685%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="49.5185%" y="181" width="0.0803%" height="15" fill="rgb(221,25,40)" fg:x="617" fg:w="1"/><text x="49.7685%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="49.5185%" y="213" width="0.2408%" height="15" fill="rgb(241,184,7)" fg:x="617" fg:w="3"/><text x="49.7685%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="49.5987%" y="197" width="0.1605%" height="15" fill="rgb(235,159,4)" fg:x="618" fg:w="2"/><text x="49.8487%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="50.2408%" y="181" width="0.1605%" height="15" fill="rgb(214,87,48)" fg:x="626" fg:w="2"/><text x="50.4908%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="50.2408%" y="165" width="0.1605%" height="15" fill="rgb(246,198,24)" fg:x="626" fg:w="2"/><text x="50.4908%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="50.2408%" y="149" width="0.1605%" height="15" fill="rgb(209,66,40)" fg:x="626" fg:w="2"/><text x="50.4908%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="50.2408%" y="133" width="0.1605%" height="15" fill="rgb(233,147,39)" fg:x="626" fg:w="2"/><text x="50.4908%" y="143.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.64%)</title><rect x="50.4013%" y="181" width="0.6421%" height="15" fill="rgb(231,145,52)" fg:x="628" fg:w="8"/><text x="50.6513%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="50.8026%" y="165" width="0.2408%" height="15" fill="rgb(206,20,26)" fg:x="633" fg:w="3"/><text x="51.0526%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.9631%" y="149" width="0.0803%" height="15" fill="rgb(238,220,4)" fg:x="635" fg:w="1"/><text x="51.2131%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.9631%" y="133" width="0.0803%" height="15" fill="rgb(252,195,42)" fg:x="635" fg:w="1"/><text x="51.2131%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.9631%" y="117" width="0.0803%" height="15" fill="rgb(209,10,6)" fg:x="635" fg:w="1"/><text x="51.2131%" y="127.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (21 samples, 1.69%)</title><rect x="49.7592%" y="213" width="1.6854%" height="15" fill="rgb(229,3,52)" fg:x="620" fg:w="21"/><text x="50.0092%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (20 samples, 1.61%)</title><rect x="49.8395%" y="197" width="1.6051%" height="15" fill="rgb(253,49,37)" fg:x="621" fg:w="20"/><text x="50.0895%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="51.0433%" y="181" width="0.4013%" height="15" fill="rgb(240,103,49)" fg:x="636" fg:w="5"/><text x="51.2933%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="51.0433%" y="165" width="0.4013%" height="15" fill="rgb(250,182,30)" fg:x="636" fg:w="5"/><text x="51.2933%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="51.0433%" y="149" width="0.4013%" height="15" fill="rgb(248,8,30)" fg:x="636" fg:w="5"/><text x="51.2933%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="51.4446%" y="213" width="0.0803%" height="15" fill="rgb(237,120,30)" fg:x="641" fg:w="1"/><text x="51.6946%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="52.4880%" y="101" width="0.2408%" height="15" fill="rgb(221,146,34)" fg:x="654" fg:w="3"/><text x="52.7380%" y="111.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="52.7287%" y="101" width="0.1605%" height="15" fill="rgb(242,55,13)" fg:x="657" fg:w="2"/><text x="52.9787%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="52.8892%" y="101" width="0.3210%" height="15" fill="rgb(242,112,31)" fg:x="659" fg:w="4"/><text x="53.1392%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="53.0498%" y="85" width="0.1605%" height="15" fill="rgb(249,192,27)" fg:x="661" fg:w="2"/><text x="53.2998%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="53.0498%" y="69" width="0.1605%" height="15" fill="rgb(208,204,44)" fg:x="661" fg:w="2"/><text x="53.2998%" y="79.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="53.0498%" y="53" width="0.1605%" height="15" fill="rgb(208,93,54)" fg:x="661" fg:w="2"/><text x="53.2998%" y="63.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="53.8523%" y="37" width="0.1605%" height="15" fill="rgb(242,1,31)" fg:x="671" fg:w="2"/><text x="54.1023%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="53.7721%" y="69" width="0.3210%" height="15" fill="rgb(241,83,25)" fg:x="670" fg:w="4"/><text x="54.0221%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="53.7721%" y="53" width="0.3210%" height="15" fill="rgb(205,169,50)" fg:x="670" fg:w="4"/><text x="54.0221%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.0128%" y="37" width="0.0803%" height="15" fill="rgb(239,186,37)" fg:x="673" fg:w="1"/><text x="54.2628%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (16 samples, 1.28%)</title><rect x="53.2103%" y="101" width="1.2841%" height="15" fill="rgb(205,221,10)" fg:x="663" fg:w="16"/><text x="53.4603%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (15 samples, 1.20%)</title><rect x="53.2905%" y="85" width="1.2039%" height="15" fill="rgb(218,196,15)" fg:x="664" fg:w="15"/><text x="53.5405%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="54.0931%" y="69" width="0.4013%" height="15" fill="rgb(218,196,35)" fg:x="674" fg:w="5"/><text x="54.3431%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (55 samples, 4.41%)</title><rect x="54.4944%" y="101" width="4.4141%" height="15" fill="rgb(233,63,24)" fg:x="679" fg:w="55"/><text x="54.7444%" y="111.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (55 samples, 4.41%)</title><rect x="54.4944%" y="85" width="4.4141%" height="15" fill="rgb(225,8,4)" fg:x="679" fg:w="55"/><text x="54.7444%" y="95.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (55 samples, 4.41%)</title><rect x="54.4944%" y="69" width="4.4141%" height="15" fill="rgb(234,105,35)" fg:x="679" fg:w="55"/><text x="54.7444%" y="79.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="58.9085%" y="101" width="0.4013%" height="15" fill="rgb(236,21,32)" fg:x="734" fg:w="5"/><text x="59.1585%" y="111.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="59.3098%" y="101" width="0.0803%" height="15" fill="rgb(228,109,6)" fg:x="739" fg:w="1"/><text x="59.5598%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 8.27%)</title><rect x="51.5249%" y="197" width="8.2665%" height="15" fill="rgb(229,215,31)" fg:x="642" fg:w="103"/><text x="51.7749%" y="207.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (103 samples, 8.27%)</title><rect x="51.5249%" y="181" width="8.2665%" height="15" fill="rgb(221,52,54)" fg:x="642" fg:w="103"/><text x="51.7749%" y="191.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (103 samples, 8.27%)</title><rect x="51.5249%" y="165" width="8.2665%" height="15" fill="rgb(252,129,43)" fg:x="642" fg:w="103"/><text x="51.7749%" y="175.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (103 samples, 8.27%)</title><rect x="51.5249%" y="149" width="8.2665%" height="15" fill="rgb(248,183,27)" fg:x="642" fg:w="103"/><text x="51.7749%" y="159.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (103 samples, 8.27%)</title><rect x="51.5249%" y="133" width="8.2665%" height="15" fill="rgb(250,0,22)" fg:x="642" fg:w="103"/><text x="51.7749%" y="143.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (103 samples, 8.27%)</title><rect x="51.5249%" y="117" width="8.2665%" height="15" fill="rgb(213,166,10)" fg:x="642" fg:w="103"/><text x="51.7749%" y="127.50">regex_automa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.40%)</title><rect x="59.3900%" y="101" width="0.4013%" height="15" fill="rgb(207,163,36)" fg:x="740" fg:w="5"/><text x="59.6400%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.6308%" y="85" width="0.1605%" height="15" fill="rgb(208,122,22)" fg:x="743" fg:w="2"/><text x="59.8808%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.7111%" y="69" width="0.0803%" height="15" fill="rgb(207,104,49)" fg:x="744" fg:w="1"/><text x="59.9611%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="59.7111%" y="53" width="0.0803%" height="15" fill="rgb(248,211,50)" fg:x="744" fg:w="1"/><text x="59.9611%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="59.7111%" y="37" width="0.0803%" height="15" fill="rgb(217,13,45)" fg:x="744" fg:w="1"/><text x="59.9611%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="59.9518%" y="181" width="0.4815%" height="15" fill="rgb(211,216,49)" fg:x="747" fg:w="6"/><text x="60.2018%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.3531%" y="165" width="0.0803%" height="15" fill="rgb(221,58,53)" fg:x="752" fg:w="1"/><text x="60.6031%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.3531%" y="149" width="0.0803%" height="15" fill="rgb(220,112,41)" fg:x="752" fg:w="1"/><text x="60.6031%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.3531%" y="133" width="0.0803%" height="15" fill="rgb(236,38,28)" fg:x="752" fg:w="1"/><text x="60.6031%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.6742%" y="165" width="0.0803%" height="15" fill="rgb(227,195,22)" fg:x="756" fg:w="1"/><text x="60.9242%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="60.4334%" y="181" width="0.4013%" height="15" fill="rgb(214,55,33)" fg:x="753" fg:w="5"/><text x="60.6834%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.7544%" y="165" width="0.0803%" height="15" fill="rgb(248,80,13)" fg:x="757" fg:w="1"/><text x="61.0044%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (157 samples, 12.60%)</title><rect x="48.3146%" y="229" width="12.6003%" height="15" fill="rgb(238,52,6)" fg:x="602" fg:w="157"/><text x="48.5646%" y="239.50">regex_automata::met..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (117 samples, 9.39%)</title><rect x="51.5249%" y="213" width="9.3900%" height="15" fill="rgb(224,198,47)" fg:x="642" fg:w="117"/><text x="51.7749%" y="223.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.12%)</title><rect x="59.7913%" y="197" width="1.1236%" height="15" fill="rgb(233,171,20)" fg:x="745" fg:w="14"/><text x="60.0413%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="60.8347%" y="181" width="0.0803%" height="15" fill="rgb(241,30,25)" fg:x="758" fg:w="1"/><text x="61.0847%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.8347%" y="165" width="0.0803%" height="15" fill="rgb(207,171,38)" fg:x="758" fg:w="1"/><text x="61.0847%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="60.9952%" y="197" width="0.0803%" height="15" fill="rgb(234,70,1)" fg:x="760" fg:w="1"/><text x="61.2452%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="60.9952%" y="181" width="0.0803%" height="15" fill="rgb(232,178,18)" fg:x="760" fg:w="1"/><text x="61.2452%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="60.9149%" y="229" width="0.2408%" height="15" fill="rgb(241,78,40)" fg:x="759" fg:w="3"/><text x="61.1649%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="60.9149%" y="213" width="0.2408%" height="15" fill="rgb(222,35,25)" fg:x="759" fg:w="3"/><text x="61.1649%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="61.0754%" y="197" width="0.0803%" height="15" fill="rgb(207,92,16)" fg:x="761" fg:w="1"/><text x="61.3254%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (170 samples, 13.64%)</title><rect x="47.6726%" y="277" width="13.6437%" height="15" fill="rgb(216,59,51)" fg:x="594" fg:w="170"/><text x="47.9226%" y="287.50">&lt;regex::regex::string..</text></g><g><title>regex::builders::string::RegexBuilder::build (170 samples, 13.64%)</title><rect x="47.6726%" y="261" width="13.6437%" height="15" fill="rgb(213,80,28)" fg:x="594" fg:w="170"/><text x="47.9226%" y="271.50">regex::builders::stri..</text></g><g><title>regex_automata::meta::regex::Builder::build (170 samples, 13.64%)</title><rect x="47.6726%" y="245" width="13.6437%" height="15" fill="rgb(220,93,7)" fg:x="594" fg:w="170"/><text x="47.9226%" y="255.50">regex_automata::meta:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="61.1557%" y="229" width="0.1605%" height="15" fill="rgb(225,24,44)" fg:x="762" fg:w="2"/><text x="61.4057%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="61.1557%" y="213" width="0.1605%" height="15" fill="rgb(243,74,40)" fg:x="762" fg:w="2"/><text x="61.4057%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="61.1557%" y="197" width="0.1605%" height="15" fill="rgb(228,39,7)" fg:x="762" fg:w="2"/><text x="61.4057%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="61.1557%" y="181" width="0.1605%" height="15" fill="rgb(227,79,8)" fg:x="762" fg:w="2"/><text x="61.4057%" y="191.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="61.1557%" y="165" width="0.1605%" height="15" fill="rgb(236,58,11)" fg:x="762" fg:w="2"/><text x="61.4057%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="61.3162%" y="229" width="0.0803%" height="15" fill="rgb(249,63,35)" fg:x="764" fg:w="1"/><text x="61.5662%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.3162%" y="213" width="0.0803%" height="15" fill="rgb(252,114,16)" fg:x="764" fg:w="1"/><text x="61.5662%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="61.3162%" y="245" width="0.1605%" height="15" fill="rgb(254,151,24)" fg:x="764" fg:w="2"/><text x="61.5662%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="61.3965%" y="229" width="0.0803%" height="15" fill="rgb(253,54,39)" fg:x="765" fg:w="1"/><text x="61.6465%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.3965%" y="213" width="0.0803%" height="15" fill="rgb(243,25,45)" fg:x="765" fg:w="1"/><text x="61.6465%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.3965%" y="197" width="0.0803%" height="15" fill="rgb(234,134,9)" fg:x="765" fg:w="1"/><text x="61.6465%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.3965%" y="181" width="0.0803%" height="15" fill="rgb(227,166,31)" fg:x="765" fg:w="1"/><text x="61.6465%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="61.3162%" y="277" width="0.3210%" height="15" fill="rgb(245,143,41)" fg:x="764" fg:w="4"/><text x="61.5662%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="61.3162%" y="261" width="0.3210%" height="15" fill="rgb(238,181,32)" fg:x="764" fg:w="4"/><text x="61.5662%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="61.4767%" y="245" width="0.1605%" height="15" fill="rgb(224,113,18)" fg:x="766" fg:w="2"/><text x="61.7267%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="61.4767%" y="229" width="0.1605%" height="15" fill="rgb(240,229,28)" fg:x="766" fg:w="2"/><text x="61.7267%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.5570%" y="213" width="0.0803%" height="15" fill="rgb(250,185,3)" fg:x="767" fg:w="1"/><text x="61.8070%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.5570%" y="197" width="0.0803%" height="15" fill="rgb(212,59,25)" fg:x="767" fg:w="1"/><text x="61.8070%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="61.7978%" y="261" width="0.2408%" height="15" fill="rgb(221,87,20)" fg:x="770" fg:w="3"/><text x="62.0478%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="61.7978%" y="245" width="0.2408%" height="15" fill="rgb(213,74,28)" fg:x="770" fg:w="3"/><text x="62.0478%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="61.8780%" y="229" width="0.1605%" height="15" fill="rgb(224,132,34)" fg:x="771" fg:w="2"/><text x="62.1280%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.3596%" y="181" width="0.0803%" height="15" fill="rgb(222,101,24)" fg:x="777" fg:w="1"/><text x="62.6096%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.3596%" y="165" width="0.0803%" height="15" fill="rgb(254,142,4)" fg:x="777" fg:w="1"/><text x="62.6096%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.3596%" y="149" width="0.0803%" height="15" fill="rgb(230,229,49)" fg:x="777" fg:w="1"/><text x="62.6096%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="62.4398%" y="181" width="0.1605%" height="15" fill="rgb(238,70,47)" fg:x="778" fg:w="2"/><text x="62.6898%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="62.5201%" y="165" width="0.0803%" height="15" fill="rgb(231,160,17)" fg:x="779" fg:w="1"/><text x="62.7701%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.80%)</title><rect x="62.1188%" y="213" width="0.8026%" height="15" fill="rgb(218,68,53)" fg:x="774" fg:w="10"/><text x="62.3688%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.80%)</title><rect x="62.1188%" y="197" width="0.8026%" height="15" fill="rgb(236,111,10)" fg:x="774" fg:w="10"/><text x="62.3688%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="62.6003%" y="181" width="0.3210%" height="15" fill="rgb(224,34,41)" fg:x="780" fg:w="4"/><text x="62.8503%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (191 samples, 15.33%)</title><rect x="47.6726%" y="293" width="15.3291%" height="15" fill="rgb(241,118,19)" fg:x="594" fg:w="191"/><text x="47.9226%" y="303.50">indefinite::rules::numb..</text></g><g><title>regex::regex::string::Regex::is_match_at (17 samples, 1.36%)</title><rect x="61.6372%" y="277" width="1.3644%" height="15" fill="rgb(238,129,25)" fg:x="768" fg:w="17"/><text x="61.8872%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.96%)</title><rect x="62.0385%" y="261" width="0.9631%" height="15" fill="rgb(238,22,31)" fg:x="773" fg:w="12"/><text x="62.2885%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.96%)</title><rect x="62.0385%" y="245" width="0.9631%" height="15" fill="rgb(222,174,48)" fg:x="773" fg:w="12"/><text x="62.2885%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.96%)</title><rect x="62.0385%" y="229" width="0.9631%" height="15" fill="rgb(206,152,40)" fg:x="773" fg:w="12"/><text x="62.2885%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="62.9213%" y="213" width="0.0803%" height="15" fill="rgb(218,99,54)" fg:x="784" fg:w="1"/><text x="63.1713%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="62.9213%" y="197" width="0.0803%" height="15" fill="rgb(220,174,26)" fg:x="784" fg:w="1"/><text x="63.1713%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="63.0016%" y="213" width="0.1605%" height="15" fill="rgb(245,116,9)" fg:x="785" fg:w="2"/><text x="63.2516%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.0016%" y="197" width="0.1605%" height="15" fill="rgb(209,72,35)" fg:x="785" fg:w="2"/><text x="63.2516%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="63.0016%" y="181" width="0.1605%" height="15" fill="rgb(226,126,21)" fg:x="785" fg:w="2"/><text x="63.2516%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.0016%" y="165" width="0.1605%" height="15" fill="rgb(227,192,1)" fg:x="785" fg:w="2"/><text x="63.2516%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="63.0016%" y="149" width="0.1605%" height="15" fill="rgb(237,180,29)" fg:x="785" fg:w="2"/><text x="63.2516%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.0819%" y="133" width="0.0803%" height="15" fill="rgb(230,197,35)" fg:x="786" fg:w="1"/><text x="63.3319%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.0819%" y="117" width="0.0803%" height="15" fill="rgb(246,193,31)" fg:x="786" fg:w="1"/><text x="63.3319%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.0819%" y="101" width="0.0803%" height="15" fill="rgb(241,36,4)" fg:x="786" fg:w="1"/><text x="63.3319%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="63.3226%" y="197" width="0.0803%" height="15" fill="rgb(241,130,17)" fg:x="789" fg:w="1"/><text x="63.5726%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.3226%" y="181" width="0.0803%" height="15" fill="rgb(206,137,32)" fg:x="789" fg:w="1"/><text x="63.5726%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="63.4029%" y="197" width="0.4815%" height="15" fill="rgb(237,228,51)" fg:x="790" fg:w="6"/><text x="63.6529%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="63.5634%" y="181" width="0.3210%" height="15" fill="rgb(243,6,42)" fg:x="792" fg:w="4"/><text x="63.8134%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="63.8844%" y="197" width="0.0803%" height="15" fill="rgb(251,74,28)" fg:x="796" fg:w="1"/><text x="64.1344%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="63.8844%" y="181" width="0.0803%" height="15" fill="rgb(218,20,49)" fg:x="796" fg:w="1"/><text x="64.1344%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="63.8844%" y="165" width="0.0803%" height="15" fill="rgb(238,28,14)" fg:x="796" fg:w="1"/><text x="64.1344%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.8844%" y="149" width="0.0803%" height="15" fill="rgb(229,40,46)" fg:x="796" fg:w="1"/><text x="64.1344%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="63.9647%" y="181" width="0.1605%" height="15" fill="rgb(244,195,20)" fg:x="797" fg:w="2"/><text x="64.2147%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="64.0449%" y="165" width="0.0803%" height="15" fill="rgb(253,56,35)" fg:x="798" fg:w="1"/><text x="64.2949%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="64.0449%" y="149" width="0.0803%" height="15" fill="rgb(210,149,44)" fg:x="798" fg:w="1"/><text x="64.2949%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="64.0449%" y="133" width="0.0803%" height="15" fill="rgb(240,135,12)" fg:x="798" fg:w="1"/><text x="64.2949%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.1252%" y="165" width="0.0803%" height="15" fill="rgb(251,24,50)" fg:x="799" fg:w="1"/><text x="64.3752%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="64.2055%" y="165" width="0.3210%" height="15" fill="rgb(243,200,47)" fg:x="800" fg:w="4"/><text x="64.4555%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.4462%" y="149" width="0.0803%" height="15" fill="rgb(224,166,26)" fg:x="803" fg:w="1"/><text x="64.6962%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (18 samples, 1.44%)</title><rect x="63.1621%" y="213" width="1.4446%" height="15" fill="rgb(233,0,47)" fg:x="787" fg:w="18"/><text x="63.4121%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (8 samples, 0.64%)</title><rect x="63.9647%" y="197" width="0.6421%" height="15" fill="rgb(253,80,5)" fg:x="797" fg:w="8"/><text x="64.2147%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="64.1252%" y="181" width="0.4815%" height="15" fill="rgb(214,133,25)" fg:x="799" fg:w="6"/><text x="64.3752%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="64.5265%" y="165" width="0.0803%" height="15" fill="rgb(209,27,14)" fg:x="804" fg:w="1"/><text x="64.7765%" y="175.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="64.5265%" y="149" width="0.0803%" height="15" fill="rgb(219,102,51)" fg:x="804" fg:w="1"/><text x="64.7765%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.5265%" y="133" width="0.0803%" height="15" fill="rgb(237,18,16)" fg:x="804" fg:w="1"/><text x="64.7765%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.5265%" y="117" width="0.0803%" height="15" fill="rgb(241,85,17)" fg:x="804" fg:w="1"/><text x="64.7765%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.5265%" y="101" width="0.0803%" height="15" fill="rgb(236,90,42)" fg:x="804" fg:w="1"/><text x="64.7765%" y="111.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="64.6870%" y="181" width="0.1605%" height="15" fill="rgb(249,57,21)" fg:x="806" fg:w="2"/><text x="64.9370%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="64.6870%" y="165" width="0.1605%" height="15" fill="rgb(243,12,36)" fg:x="806" fg:w="2"/><text x="64.9370%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="64.6870%" y="149" width="0.1605%" height="15" fill="rgb(253,128,47)" fg:x="806" fg:w="2"/><text x="64.9370%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.6870%" y="133" width="0.1605%" height="15" fill="rgb(207,33,20)" fg:x="806" fg:w="2"/><text x="64.9370%" y="143.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="64.6870%" y="117" width="0.1605%" height="15" fill="rgb(233,215,35)" fg:x="806" fg:w="2"/><text x="64.9370%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="64.6067%" y="213" width="0.3210%" height="15" fill="rgb(249,188,52)" fg:x="805" fg:w="4"/><text x="64.8567%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="64.6067%" y="197" width="0.3210%" height="15" fill="rgb(225,12,32)" fg:x="805" fg:w="4"/><text x="64.8567%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="64.8475%" y="181" width="0.0803%" height="15" fill="rgb(247,98,14)" fg:x="808" fg:w="1"/><text x="65.0975%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="64.9278%" y="165" width="0.2408%" height="15" fill="rgb(247,219,48)" fg:x="809" fg:w="3"/><text x="65.1778%" y="175.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="65.0883%" y="149" width="0.0803%" height="15" fill="rgb(253,60,48)" fg:x="811" fg:w="1"/><text x="65.3383%" y="159.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (29 samples, 2.33%)</title><rect x="63.0016%" y="261" width="2.3274%" height="15" fill="rgb(245,15,52)" fg:x="785" fg:w="29"/><text x="63.2516%" y="271.50">&lt;..</text></g><g><title>regex::builders::string::RegexBuilder::build (29 samples, 2.33%)</title><rect x="63.0016%" y="245" width="2.3274%" height="15" fill="rgb(220,133,28)" fg:x="785" fg:w="29"/><text x="63.2516%" y="255.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (29 samples, 2.33%)</title><rect x="63.0016%" y="229" width="2.3274%" height="15" fill="rgb(217,180,4)" fg:x="785" fg:w="29"/><text x="63.2516%" y="239.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="64.9278%" y="213" width="0.4013%" height="15" fill="rgb(251,24,1)" fg:x="809" fg:w="5"/><text x="65.1778%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="64.9278%" y="197" width="0.4013%" height="15" fill="rgb(212,185,49)" fg:x="809" fg:w="5"/><text x="65.1778%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="64.9278%" y="181" width="0.4013%" height="15" fill="rgb(215,175,22)" fg:x="809" fg:w="5"/><text x="65.1778%" y="191.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (2 samples, 0.16%)</title><rect x="65.1685%" y="165" width="0.1605%" height="15" fill="rgb(250,205,14)" fg:x="812" fg:w="2"/><text x="65.4185%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="65.3291%" y="261" width="0.0803%" height="15" fill="rgb(225,211,22)" fg:x="814" fg:w="1"/><text x="65.5791%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="65.3291%" y="245" width="0.0803%" height="15" fill="rgb(251,179,42)" fg:x="814" fg:w="1"/><text x="65.5791%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="65.3291%" y="229" width="0.0803%" height="15" fill="rgb(208,216,51)" fg:x="814" fg:w="1"/><text x="65.5791%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.3291%" y="213" width="0.0803%" height="15" fill="rgb(235,36,11)" fg:x="814" fg:w="1"/><text x="65.5791%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.3291%" y="197" width="0.0803%" height="15" fill="rgb(213,189,28)" fg:x="814" fg:w="1"/><text x="65.5791%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4093%" y="245" width="0.0803%" height="15" fill="rgb(227,203,42)" fg:x="815" fg:w="1"/><text x="65.6593%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.4896%" y="245" width="0.0803%" height="15" fill="rgb(244,72,36)" fg:x="816" fg:w="1"/><text x="65.7396%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.5698%" y="229" width="0.0803%" height="15" fill="rgb(213,53,17)" fg:x="817" fg:w="1"/><text x="65.8198%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="65.5698%" y="213" width="0.0803%" height="15" fill="rgb(207,167,3)" fg:x="817" fg:w="1"/><text x="65.8198%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.5698%" y="197" width="0.0803%" height="15" fill="rgb(216,98,30)" fg:x="817" fg:w="1"/><text x="65.8198%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.5698%" y="181" width="0.0803%" height="15" fill="rgb(236,123,15)" fg:x="817" fg:w="1"/><text x="65.8198%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="65.4093%" y="261" width="0.3210%" height="15" fill="rgb(248,81,50)" fg:x="815" fg:w="4"/><text x="65.6593%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="65.5698%" y="245" width="0.1605%" height="15" fill="rgb(214,120,4)" fg:x="817" fg:w="2"/><text x="65.8198%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="65.6501%" y="229" width="0.0803%" height="15" fill="rgb(208,179,34)" fg:x="818" fg:w="1"/><text x="65.9001%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="65.6501%" y="213" width="0.0803%" height="15" fill="rgb(227,140,7)" fg:x="818" fg:w="1"/><text x="65.9001%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.6501%" y="197" width="0.0803%" height="15" fill="rgb(214,22,6)" fg:x="818" fg:w="1"/><text x="65.9001%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="65.8106%" y="181" width="0.1605%" height="15" fill="rgb(207,137,27)" fg:x="820" fg:w="2"/><text x="66.0606%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.8106%" y="165" width="0.1605%" height="15" fill="rgb(210,8,46)" fg:x="820" fg:w="2"/><text x="66.0606%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="65.8106%" y="149" width="0.1605%" height="15" fill="rgb(240,16,54)" fg:x="820" fg:w="2"/><text x="66.0606%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="65.7303%" y="213" width="0.4013%" height="15" fill="rgb(211,209,29)" fg:x="819" fg:w="5"/><text x="65.9803%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="65.7303%" y="197" width="0.4013%" height="15" fill="rgb(226,228,24)" fg:x="819" fg:w="5"/><text x="65.9803%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="65.9711%" y="181" width="0.1605%" height="15" fill="rgb(222,84,9)" fg:x="822" fg:w="2"/><text x="66.2211%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="66.0514%" y="165" width="0.0803%" height="15" fill="rgb(234,203,30)" fg:x="823" fg:w="1"/><text x="66.3014%" y="175.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (40 samples, 3.21%)</title><rect x="63.0016%" y="277" width="3.2103%" height="15" fill="rgb(238,109,14)" fg:x="785" fg:w="40"/><text x="63.2516%" y="287.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="65.7303%" y="261" width="0.4815%" height="15" fill="rgb(233,206,34)" fg:x="819" fg:w="6"/><text x="65.9803%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="65.7303%" y="245" width="0.4815%" height="15" fill="rgb(220,167,47)" fg:x="819" fg:w="6"/><text x="65.9803%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="65.7303%" y="229" width="0.4815%" height="15" fill="rgb(238,105,10)" fg:x="819" fg:w="6"/><text x="65.9803%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="66.1316%" y="213" width="0.0803%" height="15" fill="rgb(213,227,17)" fg:x="824" fg:w="1"/><text x="66.3816%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="66.1316%" y="197" width="0.0803%" height="15" fill="rgb(217,132,38)" fg:x="824" fg:w="1"/><text x="66.3816%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (389 samples, 31.22%)</title><rect x="35.1525%" y="373" width="31.2199%" height="15" fill="rgb(242,146,4)" fg:x="438" fg:w="389"/><text x="35.4025%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::lookin..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (355 samples, 28.49%)</title><rect x="37.8812%" y="357" width="28.4912%" height="15" fill="rgb(212,61,9)" fg:x="472" fg:w="355"/><text x="38.1312%" y="367.50">plugins_core::looking::model::Unqualified::qua..</text></g><g><title>indefinite::indefinite (355 samples, 28.49%)</title><rect x="37.8812%" y="341" width="28.4912%" height="15" fill="rgb(247,126,22)" fg:x="472" fg:w="355"/><text x="38.1312%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (355 samples, 28.49%)</title><rect x="37.8812%" y="325" width="28.4912%" height="15" fill="rgb(220,196,2)" fg:x="472" fg:w="355"/><text x="38.1312%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (354 samples, 28.41%)</title><rect x="37.9615%" y="309" width="28.4109%" height="15" fill="rgb(208,46,4)" fg:x="473" fg:w="354"/><text x="38.2115%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (42 samples, 3.37%)</title><rect x="63.0016%" y="293" width="3.3708%" height="15" fill="rgb(252,104,46)" fg:x="785" fg:w="42"/><text x="63.2516%" y="303.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="66.2119%" y="277" width="0.1605%" height="15" fill="rgb(237,152,48)" fg:x="825" fg:w="2"/><text x="66.4619%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.3724%" y="357" width="0.0803%" height="15" fill="rgb(221,59,37)" fg:x="827" fg:w="1"/><text x="66.6224%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.3724%" y="341" width="0.0803%" height="15" fill="rgb(209,202,51)" fg:x="827" fg:w="1"/><text x="66.6224%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="66.4526%" y="357" width="0.0803%" height="15" fill="rgb(228,81,30)" fg:x="828" fg:w="1"/><text x="66.7026%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.4526%" y="341" width="0.0803%" height="15" fill="rgb(227,42,39)" fg:x="828" fg:w="1"/><text x="66.7026%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="66.4526%" y="325" width="0.0803%" height="15" fill="rgb(221,26,2)" fg:x="828" fg:w="1"/><text x="66.7026%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="66.3724%" y="373" width="0.4815%" height="15" fill="rgb(254,61,31)" fg:x="827" fg:w="6"/><text x="66.6224%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="66.5329%" y="357" width="0.3210%" height="15" fill="rgb(222,173,38)" fg:x="829" fg:w="4"/><text x="66.7829%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="66.5329%" y="341" width="0.3210%" height="15" fill="rgb(218,50,12)" fg:x="829" fg:w="4"/><text x="66.7829%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="66.6132%" y="325" width="0.2408%" height="15" fill="rgb(223,88,40)" fg:x="830" fg:w="3"/><text x="66.8632%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="66.6132%" y="309" width="0.2408%" height="15" fill="rgb(237,54,19)" fg:x="830" fg:w="3"/><text x="66.8632%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="66.7737%" y="293" width="0.0803%" height="15" fill="rgb(251,129,25)" fg:x="832" fg:w="1"/><text x="67.0237%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.7737%" y="277" width="0.0803%" height="15" fill="rgb(238,97,19)" fg:x="832" fg:w="1"/><text x="67.0237%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.7737%" y="261" width="0.0803%" height="15" fill="rgb(240,169,18)" fg:x="832" fg:w="1"/><text x="67.0237%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.8539%" y="373" width="0.0803%" height="15" fill="rgb(230,187,49)" fg:x="833" fg:w="1"/><text x="67.1039%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="67.0144%" y="325" width="0.0803%" height="15" fill="rgb(209,44,26)" fg:x="835" fg:w="1"/><text x="67.2644%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="67.0144%" y="309" width="0.0803%" height="15" fill="rgb(244,0,6)" fg:x="835" fg:w="1"/><text x="67.2644%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.0144%" y="293" width="0.0803%" height="15" fill="rgb(248,18,21)" fg:x="835" fg:w="1"/><text x="67.2644%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="67.0144%" y="341" width="0.1605%" height="15" fill="rgb(245,180,19)" fg:x="835" fg:w="2"/><text x="67.2644%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.0947%" y="325" width="0.0803%" height="15" fill="rgb(252,118,36)" fg:x="836" fg:w="1"/><text x="67.3447%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.1750%" y="341" width="0.0803%" height="15" fill="rgb(210,224,19)" fg:x="837" fg:w="1"/><text x="67.4250%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="67.2552%" y="341" width="0.0803%" height="15" fill="rgb(218,30,24)" fg:x="838" fg:w="1"/><text x="67.5052%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.2552%" y="325" width="0.0803%" height="15" fill="rgb(219,75,50)" fg:x="838" fg:w="1"/><text x="67.5052%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.2552%" y="309" width="0.0803%" height="15" fill="rgb(234,72,50)" fg:x="838" fg:w="1"/><text x="67.5052%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.2552%" y="293" width="0.0803%" height="15" fill="rgb(219,100,48)" fg:x="838" fg:w="1"/><text x="67.5052%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.2552%" y="277" width="0.0803%" height="15" fill="rgb(253,5,41)" fg:x="838" fg:w="1"/><text x="67.5052%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.2552%" y="261" width="0.0803%" height="15" fill="rgb(247,181,11)" fg:x="838" fg:w="1"/><text x="67.5052%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.2552%" y="245" width="0.0803%" height="15" fill="rgb(222,223,25)" fg:x="838" fg:w="1"/><text x="67.5052%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.3355%" y="341" width="0.0803%" height="15" fill="rgb(214,198,28)" fg:x="839" fg:w="1"/><text x="67.5855%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4157%" y="309" width="0.0803%" height="15" fill="rgb(230,46,43)" fg:x="840" fg:w="1"/><text x="67.6657%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4157%" y="293" width="0.0803%" height="15" fill="rgb(233,65,53)" fg:x="840" fg:w="1"/><text x="67.6657%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4157%" y="277" width="0.0803%" height="15" fill="rgb(221,121,27)" fg:x="840" fg:w="1"/><text x="67.6657%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4157%" y="261" width="0.0803%" height="15" fill="rgb(247,70,47)" fg:x="840" fg:w="1"/><text x="67.6657%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.4157%" y="245" width="0.0803%" height="15" fill="rgb(228,85,35)" fg:x="840" fg:w="1"/><text x="67.6657%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.4157%" y="229" width="0.0803%" height="15" fill="rgb(209,50,18)" fg:x="840" fg:w="1"/><text x="67.6657%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.4157%" y="213" width="0.0803%" height="15" fill="rgb(250,19,35)" fg:x="840" fg:w="1"/><text x="67.6657%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.4157%" y="197" width="0.0803%" height="15" fill="rgb(253,107,29)" fg:x="840" fg:w="1"/><text x="67.6657%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.4157%" y="181" width="0.0803%" height="15" fill="rgb(252,179,29)" fg:x="840" fg:w="1"/><text x="67.6657%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.4157%" y="165" width="0.0803%" height="15" fill="rgb(238,194,6)" fg:x="840" fg:w="1"/><text x="67.6657%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.4157%" y="149" width="0.0803%" height="15" fill="rgb(238,164,29)" fg:x="840" fg:w="1"/><text x="67.6657%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.4157%" y="133" width="0.0803%" height="15" fill="rgb(224,25,9)" fg:x="840" fg:w="1"/><text x="67.6657%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.4157%" y="117" width="0.0803%" height="15" fill="rgb(244,153,23)" fg:x="840" fg:w="1"/><text x="67.6657%" y="127.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (8 samples, 0.64%)</title><rect x="66.9342%" y="357" width="0.6421%" height="15" fill="rgb(212,203,14)" fg:x="834" fg:w="8"/><text x="67.1842%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="67.4157%" y="341" width="0.1605%" height="15" fill="rgb(220,164,20)" fg:x="840" fg:w="2"/><text x="67.6657%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="67.4157%" y="325" width="0.1605%" height="15" fill="rgb(222,203,48)" fg:x="840" fg:w="2"/><text x="67.6657%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.4960%" y="309" width="0.0803%" height="15" fill="rgb(215,159,22)" fg:x="841" fg:w="1"/><text x="67.7460%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4960%" y="293" width="0.0803%" height="15" fill="rgb(216,183,47)" fg:x="841" fg:w="1"/><text x="67.7460%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.4960%" y="277" width="0.0803%" height="15" fill="rgb(229,195,25)" fg:x="841" fg:w="1"/><text x="67.7460%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4960%" y="261" width="0.0803%" height="15" fill="rgb(224,132,51)" fg:x="841" fg:w="1"/><text x="67.7460%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.4960%" y="245" width="0.0803%" height="15" fill="rgb(240,63,7)" fg:x="841" fg:w="1"/><text x="67.7460%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4960%" y="229" width="0.0803%" height="15" fill="rgb(249,182,41)" fg:x="841" fg:w="1"/><text x="67.7460%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.4960%" y="213" width="0.0803%" height="15" fill="rgb(243,47,26)" fg:x="841" fg:w="1"/><text x="67.7460%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.5762%" y="133" width="0.0803%" height="15" fill="rgb(233,48,2)" fg:x="842" fg:w="1"/><text x="67.8262%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.5762%" y="117" width="0.0803%" height="15" fill="rgb(244,165,34)" fg:x="842" fg:w="1"/><text x="67.8262%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.5762%" y="101" width="0.0803%" height="15" fill="rgb(207,89,7)" fg:x="842" fg:w="1"/><text x="67.8262%" y="111.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="67.5762%" y="165" width="0.1605%" height="15" fill="rgb(244,117,36)" fg:x="842" fg:w="2"/><text x="67.8262%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.5762%" y="149" width="0.1605%" height="15" fill="rgb(226,144,34)" fg:x="842" fg:w="2"/><text x="67.8262%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.6565%" y="133" width="0.0803%" height="15" fill="rgb(213,23,19)" fg:x="843" fg:w="1"/><text x="67.9065%" y="143.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="67.6565%" y="117" width="0.0803%" height="15" fill="rgb(217,75,12)" fg:x="843" fg:w="1"/><text x="67.9065%" y="127.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.7368%" y="165" width="0.0803%" height="15" fill="rgb(224,159,17)" fg:x="844" fg:w="1"/><text x="67.9868%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="67.5762%" y="229" width="0.3210%" height="15" fill="rgb(217,118,1)" fg:x="842" fg:w="4"/><text x="67.8262%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="67.5762%" y="213" width="0.3210%" height="15" fill="rgb(232,180,48)" fg:x="842" fg:w="4"/><text x="67.8262%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="67.5762%" y="197" width="0.3210%" height="15" fill="rgb(230,27,33)" fg:x="842" fg:w="4"/><text x="67.8262%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="67.5762%" y="181" width="0.3210%" height="15" fill="rgb(205,31,21)" fg:x="842" fg:w="4"/><text x="67.8262%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.8170%" y="165" width="0.0803%" height="15" fill="rgb(253,59,4)" fg:x="845" fg:w="1"/><text x="68.0670%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.04%)</title><rect x="66.9342%" y="373" width="1.0433%" height="15" fill="rgb(224,201,9)" fg:x="834" fg:w="13"/><text x="67.1842%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="67.5762%" y="357" width="0.4013%" height="15" fill="rgb(229,206,30)" fg:x="842" fg:w="5"/><text x="67.8262%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="67.5762%" y="341" width="0.4013%" height="15" fill="rgb(212,67,47)" fg:x="842" fg:w="5"/><text x="67.8262%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="67.5762%" y="325" width="0.4013%" height="15" fill="rgb(211,96,50)" fg:x="842" fg:w="5"/><text x="67.8262%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="67.5762%" y="309" width="0.4013%" height="15" fill="rgb(252,114,18)" fg:x="842" fg:w="5"/><text x="67.8262%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="67.5762%" y="293" width="0.4013%" height="15" fill="rgb(223,58,37)" fg:x="842" fg:w="5"/><text x="67.8262%" y="303.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="67.5762%" y="277" width="0.4013%" height="15" fill="rgb(237,70,4)" fg:x="842" fg:w="5"/><text x="67.8262%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="67.5762%" y="261" width="0.4013%" height="15" fill="rgb(244,85,46)" fg:x="842" fg:w="5"/><text x="67.8262%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="67.5762%" y="245" width="0.4013%" height="15" fill="rgb(223,39,52)" fg:x="842" fg:w="5"/><text x="67.8262%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.8973%" y="229" width="0.0803%" height="15" fill="rgb(218,200,14)" fg:x="846" fg:w="1"/><text x="68.1473%" y="239.50"></text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (422 samples, 33.87%)</title><rect x="34.1894%" y="421" width="33.8684%" height="15" fill="rgb(208,171,16)" fg:x="426" fg:w="422"/><text x="34.4394%" y="431.50">&lt;engine::session::state::State as kernel::actions::Perf..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (422 samples, 33.87%)</title><rect x="34.1894%" y="405" width="33.8684%" height="15" fill="rgb(234,200,18)" fg:x="426" fg:w="422"/><text x="34.4394%" y="415.50">&lt;plugins_core::looking::actions::LookAction as kernel::..</text></g><g><title>plugins_core::looking::model::new_area_observation (411 samples, 32.99%)</title><rect x="35.0722%" y="389" width="32.9856%" height="15" fill="rgb(228,45,11)" fg:x="437" fg:w="411"/><text x="35.3222%" y="399.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="67.9775%" y="373" width="0.0803%" height="15" fill="rgb(237,182,11)" fg:x="847" fg:w="1"/><text x="68.2275%" y="383.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (429 samples, 34.43%)</title><rect x="33.7079%" y="533" width="34.4302%" height="15" fill="rgb(241,175,49)" fg:x="420" fg:w="429"/><text x="33.9579%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (428 samples, 34.35%)</title><rect x="33.7881%" y="517" width="34.3499%" height="15" fill="rgb(247,38,35)" fg:x="421" fg:w="428"/><text x="34.0381%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::m..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (427 samples, 34.27%)</title><rect x="33.8684%" y="501" width="34.2697%" height="15" fill="rgb(228,39,49)" fg:x="422" fg:w="427"/><text x="34.1184%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (425 samples, 34.11%)</title><rect x="34.0289%" y="485" width="34.1091%" height="15" fill="rgb(226,101,26)" fg:x="424" fg:w="425"/><text x="34.2789%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (423 samples, 33.95%)</title><rect x="34.1894%" y="469" width="33.9486%" height="15" fill="rgb(206,141,19)" fg:x="426" fg:w="423"/><text x="34.4394%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (423 samples, 33.95%)</title><rect x="34.1894%" y="453" width="33.9486%" height="15" fill="rgb(211,200,13)" fg:x="426" fg:w="423"/><text x="34.4394%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (423 samples, 33.95%)</title><rect x="34.1894%" y="437" width="33.9486%" height="15" fill="rgb(241,121,6)" fg:x="426" fg:w="423"/><text x="34.4394%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0578%" y="421" width="0.0803%" height="15" fill="rgb(234,221,29)" fg:x="848" fg:w="1"/><text x="68.3078%" y="431.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="68.1380%" y="517" width="0.0803%" height="15" fill="rgb(229,136,5)" fg:x="849" fg:w="1"/><text x="68.3880%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1380%" y="501" width="0.0803%" height="15" fill="rgb(238,36,11)" fg:x="849" fg:w="1"/><text x="68.3880%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1380%" y="485" width="0.0803%" height="15" fill="rgb(251,55,41)" fg:x="849" fg:w="1"/><text x="68.3880%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.1380%" y="469" width="0.0803%" height="15" fill="rgb(242,34,40)" fg:x="849" fg:w="1"/><text x="68.3880%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.1380%" y="453" width="0.0803%" height="15" fill="rgb(215,42,17)" fg:x="849" fg:w="1"/><text x="68.3880%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.1380%" y="437" width="0.0803%" height="15" fill="rgb(207,44,46)" fg:x="849" fg:w="1"/><text x="68.3880%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1380%" y="421" width="0.0803%" height="15" fill="rgb(211,206,28)" fg:x="849" fg:w="1"/><text x="68.3880%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1380%" y="405" width="0.0803%" height="15" fill="rgb(237,167,16)" fg:x="849" fg:w="1"/><text x="68.3880%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.1380%" y="389" width="0.0803%" height="15" fill="rgb(233,66,6)" fg:x="849" fg:w="1"/><text x="68.3880%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.1380%" y="373" width="0.0803%" height="15" fill="rgb(246,123,29)" fg:x="849" fg:w="1"/><text x="68.3880%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.1380%" y="357" width="0.0803%" height="15" fill="rgb(209,62,40)" fg:x="849" fg:w="1"/><text x="68.3880%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.1380%" y="341" width="0.0803%" height="15" fill="rgb(218,4,25)" fg:x="849" fg:w="1"/><text x="68.3880%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1380%" y="325" width="0.0803%" height="15" fill="rgb(253,91,49)" fg:x="849" fg:w="1"/><text x="68.3880%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.2183%" y="501" width="0.0803%" height="15" fill="rgb(228,155,29)" fg:x="850" fg:w="1"/><text x="68.4683%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.2986%" y="501" width="0.0803%" height="15" fill="rgb(243,57,37)" fg:x="851" fg:w="1"/><text x="68.5486%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.2986%" y="485" width="0.0803%" height="15" fill="rgb(244,167,17)" fg:x="851" fg:w="1"/><text x="68.5486%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.2986%" y="469" width="0.0803%" height="15" fill="rgb(207,181,38)" fg:x="851" fg:w="1"/><text x="68.5486%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="68.3788%" y="501" width="0.1605%" height="15" fill="rgb(211,8,23)" fg:x="852" fg:w="2"/><text x="68.6288%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="68.5393%" y="485" width="0.0803%" height="15" fill="rgb(235,11,44)" fg:x="854" fg:w="1"/><text x="68.7893%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.5393%" y="469" width="0.0803%" height="15" fill="rgb(248,18,52)" fg:x="854" fg:w="1"/><text x="68.7893%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.6196%" y="421" width="0.0803%" height="15" fill="rgb(208,4,7)" fg:x="855" fg:w="1"/><text x="68.8696%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.6196%" y="405" width="0.0803%" height="15" fill="rgb(240,17,39)" fg:x="855" fg:w="1"/><text x="68.8696%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.6196%" y="389" width="0.0803%" height="15" fill="rgb(207,170,3)" fg:x="855" fg:w="1"/><text x="68.8696%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.6196%" y="373" width="0.0803%" height="15" fill="rgb(236,100,52)" fg:x="855" fg:w="1"/><text x="68.8696%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.6196%" y="357" width="0.0803%" height="15" fill="rgb(246,78,51)" fg:x="855" fg:w="1"/><text x="68.8696%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.6196%" y="341" width="0.0803%" height="15" fill="rgb(211,17,15)" fg:x="855" fg:w="1"/><text x="68.8696%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.6998%" y="421" width="0.0803%" height="15" fill="rgb(209,59,46)" fg:x="856" fg:w="1"/><text x="68.9498%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.6998%" y="405" width="0.0803%" height="15" fill="rgb(210,92,25)" fg:x="856" fg:w="1"/><text x="68.9498%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.6998%" y="389" width="0.0803%" height="15" fill="rgb(238,174,52)" fg:x="856" fg:w="1"/><text x="68.9498%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.6998%" y="373" width="0.0803%" height="15" fill="rgb(230,73,7)" fg:x="856" fg:w="1"/><text x="68.9498%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.6998%" y="357" width="0.0803%" height="15" fill="rgb(243,124,40)" fg:x="856" fg:w="1"/><text x="68.9498%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.6998%" y="341" width="0.0803%" height="15" fill="rgb(244,170,11)" fg:x="856" fg:w="1"/><text x="68.9498%" y="351.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7801%" y="373" width="0.0803%" height="15" fill="rgb(207,114,54)" fg:x="857" fg:w="1"/><text x="69.0301%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7801%" y="357" width="0.0803%" height="15" fill="rgb(205,42,20)" fg:x="857" fg:w="1"/><text x="69.0301%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="68.7801%" y="341" width="0.0803%" height="15" fill="rgb(230,30,28)" fg:x="857" fg:w="1"/><text x="69.0301%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="68.7801%" y="325" width="0.0803%" height="15" fill="rgb(205,73,54)" fg:x="857" fg:w="1"/><text x="69.0301%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.8604%" y="293" width="0.0803%" height="15" fill="rgb(254,227,23)" fg:x="858" fg:w="1"/><text x="69.1104%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8604%" y="277" width="0.0803%" height="15" fill="rgb(228,202,34)" fg:x="858" fg:w="1"/><text x="69.1104%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.8604%" y="261" width="0.0803%" height="15" fill="rgb(222,225,37)" fg:x="858" fg:w="1"/><text x="69.1104%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8604%" y="245" width="0.0803%" height="15" fill="rgb(221,14,54)" fg:x="858" fg:w="1"/><text x="69.1104%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.8604%" y="325" width="0.1605%" height="15" fill="rgb(254,102,2)" fg:x="858" fg:w="2"/><text x="69.1104%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.8604%" y="309" width="0.1605%" height="15" fill="rgb(232,104,17)" fg:x="858" fg:w="2"/><text x="69.1104%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="68.9406%" y="293" width="0.0803%" height="15" fill="rgb(250,220,14)" fg:x="859" fg:w="1"/><text x="69.1906%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.9406%" y="277" width="0.0803%" height="15" fill="rgb(241,158,9)" fg:x="859" fg:w="1"/><text x="69.1906%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="69.0209%" y="325" width="0.1605%" height="15" fill="rgb(246,9,43)" fg:x="860" fg:w="2"/><text x="69.2709%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.0209%" y="309" width="0.1605%" height="15" fill="rgb(206,73,33)" fg:x="860" fg:w="2"/><text x="69.2709%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="69.0209%" y="293" width="0.1605%" height="15" fill="rgb(222,79,8)" fg:x="860" fg:w="2"/><text x="69.2709%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.1011%" y="277" width="0.0803%" height="15" fill="rgb(234,8,54)" fg:x="861" fg:w="1"/><text x="69.3511%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.1011%" y="261" width="0.0803%" height="15" fill="rgb(209,134,38)" fg:x="861" fg:w="1"/><text x="69.3511%" y="271.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.1814%" y="277" width="0.0803%" height="15" fill="rgb(230,127,29)" fg:x="862" fg:w="1"/><text x="69.4314%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="69.1814%" y="261" width="0.0803%" height="15" fill="rgb(242,44,41)" fg:x="862" fg:w="1"/><text x="69.4314%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1814%" y="245" width="0.0803%" height="15" fill="rgb(222,56,43)" fg:x="862" fg:w="1"/><text x="69.4314%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.1814%" y="229" width="0.0803%" height="15" fill="rgb(238,39,47)" fg:x="862" fg:w="1"/><text x="69.4314%" y="239.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.64%)</title><rect x="68.7801%" y="421" width="0.6421%" height="15" fill="rgb(226,79,43)" fg:x="857" fg:w="8"/><text x="69.0301%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="68.7801%" y="405" width="0.6421%" height="15" fill="rgb(242,105,53)" fg:x="857" fg:w="8"/><text x="69.0301%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="68.7801%" y="389" width="0.6421%" height="15" fill="rgb(251,132,46)" fg:x="857" fg:w="8"/><text x="69.0301%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (7 samples, 0.56%)</title><rect x="68.8604%" y="373" width="0.5618%" height="15" fill="rgb(231,77,14)" fg:x="858" fg:w="7"/><text x="69.1104%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="68.8604%" y="357" width="0.5618%" height="15" fill="rgb(240,135,9)" fg:x="858" fg:w="7"/><text x="69.1104%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (7 samples, 0.56%)</title><rect x="68.8604%" y="341" width="0.5618%" height="15" fill="rgb(248,109,14)" fg:x="858" fg:w="7"/><text x="69.1104%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.1814%" y="325" width="0.2408%" height="15" fill="rgb(227,146,52)" fg:x="862" fg:w="3"/><text x="69.4314%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.1814%" y="309" width="0.2408%" height="15" fill="rgb(232,54,3)" fg:x="862" fg:w="3"/><text x="69.4314%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.24%)</title><rect x="69.1814%" y="293" width="0.2408%" height="15" fill="rgb(229,201,43)" fg:x="862" fg:w="3"/><text x="69.4314%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.2616%" y="277" width="0.1605%" height="15" fill="rgb(252,161,33)" fg:x="863" fg:w="2"/><text x="69.5116%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3419%" y="261" width="0.0803%" height="15" fill="rgb(226,146,40)" fg:x="864" fg:w="1"/><text x="69.5919%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.3419%" y="245" width="0.0803%" height="15" fill="rgb(219,47,25)" fg:x="864" fg:w="1"/><text x="69.5919%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3419%" y="229" width="0.0803%" height="15" fill="rgb(250,135,13)" fg:x="864" fg:w="1"/><text x="69.5919%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.5024%" y="261" width="0.0803%" height="15" fill="rgb(219,229,18)" fg:x="866" fg:w="1"/><text x="69.7524%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.5024%" y="245" width="0.0803%" height="15" fill="rgb(217,152,27)" fg:x="866" fg:w="1"/><text x="69.7524%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.5024%" y="229" width="0.0803%" height="15" fill="rgb(225,71,47)" fg:x="866" fg:w="1"/><text x="69.7524%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.5024%" y="213" width="0.0803%" height="15" fill="rgb(220,139,14)" fg:x="866" fg:w="1"/><text x="69.7524%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="69.5024%" y="197" width="0.0803%" height="15" fill="rgb(247,54,32)" fg:x="866" fg:w="1"/><text x="69.7524%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.5827%" y="261" width="0.0803%" height="15" fill="rgb(252,131,39)" fg:x="867" fg:w="1"/><text x="69.8327%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="69.5827%" y="245" width="0.0803%" height="15" fill="rgb(210,108,39)" fg:x="867" fg:w="1"/><text x="69.8327%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="69.4222%" y="309" width="0.3210%" height="15" fill="rgb(205,23,29)" fg:x="865" fg:w="4"/><text x="69.6722%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="69.4222%" y="293" width="0.3210%" height="15" fill="rgb(246,139,46)" fg:x="865" fg:w="4"/><text x="69.6722%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.5024%" y="277" width="0.2408%" height="15" fill="rgb(250,81,26)" fg:x="866" fg:w="3"/><text x="69.7524%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6629%" y="261" width="0.0803%" height="15" fill="rgb(214,104,7)" fg:x="868" fg:w="1"/><text x="69.9129%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6629%" y="245" width="0.0803%" height="15" fill="rgb(233,189,8)" fg:x="868" fg:w="1"/><text x="69.9129%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="69.6629%" y="229" width="0.0803%" height="15" fill="rgb(228,141,17)" fg:x="868" fg:w="1"/><text x="69.9129%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="69.4222%" y="357" width="0.4013%" height="15" fill="rgb(247,157,1)" fg:x="865" fg:w="5"/><text x="69.6722%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="69.4222%" y="341" width="0.4013%" height="15" fill="rgb(249,225,5)" fg:x="865" fg:w="5"/><text x="69.6722%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="69.4222%" y="325" width="0.4013%" height="15" fill="rgb(242,55,13)" fg:x="865" fg:w="5"/><text x="69.6722%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7432%" y="309" width="0.0803%" height="15" fill="rgb(230,49,50)" fg:x="869" fg:w="1"/><text x="69.9932%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (17 samples, 1.36%)</title><rect x="68.5393%" y="501" width="1.3644%" height="15" fill="rgb(241,111,38)" fg:x="854" fg:w="17"/><text x="68.7893%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (16 samples, 1.28%)</title><rect x="68.6196%" y="485" width="1.2841%" height="15" fill="rgb(252,155,4)" fg:x="855" fg:w="16"/><text x="68.8696%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (16 samples, 1.28%)</title><rect x="68.6196%" y="469" width="1.2841%" height="15" fill="rgb(212,69,32)" fg:x="855" fg:w="16"/><text x="68.8696%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.28%)</title><rect x="68.6196%" y="453" width="1.2841%" height="15" fill="rgb(243,107,47)" fg:x="855" fg:w="16"/><text x="68.8696%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.28%)</title><rect x="68.6196%" y="437" width="1.2841%" height="15" fill="rgb(247,130,12)" fg:x="855" fg:w="16"/><text x="68.8696%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="69.4222%" y="421" width="0.4815%" height="15" fill="rgb(233,74,16)" fg:x="865" fg:w="6"/><text x="69.6722%" y="431.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="69.4222%" y="405" width="0.4815%" height="15" fill="rgb(208,58,18)" fg:x="865" fg:w="6"/><text x="69.6722%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="69.4222%" y="389" width="0.4815%" height="15" fill="rgb(242,225,1)" fg:x="865" fg:w="6"/><text x="69.6722%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="69.4222%" y="373" width="0.4815%" height="15" fill="rgb(249,39,40)" fg:x="865" fg:w="6"/><text x="69.6722%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.8234%" y="357" width="0.0803%" height="15" fill="rgb(207,72,44)" fg:x="870" fg:w="1"/><text x="70.0734%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="69.8234%" y="341" width="0.0803%" height="15" fill="rgb(215,193,12)" fg:x="870" fg:w="1"/><text x="70.0734%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.9037%" y="453" width="0.0803%" height="15" fill="rgb(248,41,39)" fg:x="871" fg:w="1"/><text x="70.1537%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.9037%" y="437" width="0.0803%" height="15" fill="rgb(253,85,4)" fg:x="871" fg:w="1"/><text x="70.1537%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.9037%" y="469" width="0.1605%" height="15" fill="rgb(243,70,31)" fg:x="871" fg:w="2"/><text x="70.1537%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.9839%" y="453" width="0.0803%" height="15" fill="rgb(253,195,26)" fg:x="872" fg:w="1"/><text x="70.2339%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.9839%" y="437" width="0.0803%" height="15" fill="rgb(243,42,11)" fg:x="872" fg:w="1"/><text x="70.2339%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.9839%" y="421" width="0.0803%" height="15" fill="rgb(239,66,17)" fg:x="872" fg:w="1"/><text x="70.2339%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.9839%" y="405" width="0.0803%" height="15" fill="rgb(217,132,21)" fg:x="872" fg:w="1"/><text x="70.2339%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.9839%" y="389" width="0.0803%" height="15" fill="rgb(252,202,21)" fg:x="872" fg:w="1"/><text x="70.2339%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.9839%" y="373" width="0.0803%" height="15" fill="rgb(233,98,36)" fg:x="872" fg:w="1"/><text x="70.2339%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.9839%" y="357" width="0.0803%" height="15" fill="rgb(216,153,54)" fg:x="872" fg:w="1"/><text x="70.2339%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.9839%" y="341" width="0.0803%" height="15" fill="rgb(250,99,7)" fg:x="872" fg:w="1"/><text x="70.2339%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.9839%" y="325" width="0.0803%" height="15" fill="rgb(207,56,50)" fg:x="872" fg:w="1"/><text x="70.2339%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.9839%" y="309" width="0.0803%" height="15" fill="rgb(244,61,34)" fg:x="872" fg:w="1"/><text x="70.2339%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.9839%" y="293" width="0.0803%" height="15" fill="rgb(241,50,38)" fg:x="872" fg:w="1"/><text x="70.2339%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.9839%" y="277" width="0.0803%" height="15" fill="rgb(212,166,30)" fg:x="872" fg:w="1"/><text x="70.2339%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.9839%" y="261" width="0.0803%" height="15" fill="rgb(249,127,32)" fg:x="872" fg:w="1"/><text x="70.2339%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.9839%" y="245" width="0.0803%" height="15" fill="rgb(209,103,0)" fg:x="872" fg:w="1"/><text x="70.2339%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9839%" y="229" width="0.0803%" height="15" fill="rgb(238,209,51)" fg:x="872" fg:w="1"/><text x="70.2339%" y="239.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (25 samples, 2.01%)</title><rect x="68.2183%" y="517" width="2.0064%" height="15" fill="rgb(237,56,23)" fg:x="850" fg:w="25"/><text x="68.4683%" y="527.50">p..</text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="69.9037%" y="501" width="0.3210%" height="15" fill="rgb(215,153,46)" fg:x="871" fg:w="4"/><text x="70.1537%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="69.9037%" y="485" width="0.3210%" height="15" fill="rgb(224,49,31)" fg:x="871" fg:w="4"/><text x="70.1537%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.0642%" y="469" width="0.1605%" height="15" fill="rgb(250,18,42)" fg:x="873" fg:w="2"/><text x="70.3142%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.0642%" y="453" width="0.1605%" height="15" fill="rgb(215,176,39)" fg:x="873" fg:w="2"/><text x="70.3142%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.1445%" y="437" width="0.0803%" height="15" fill="rgb(223,77,29)" fg:x="874" fg:w="1"/><text x="70.3945%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="70.1445%" y="421" width="0.0803%" height="15" fill="rgb(234,94,52)" fg:x="874" fg:w="1"/><text x="70.3945%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="70.1445%" y="405" width="0.0803%" height="15" fill="rgb(220,154,50)" fg:x="874" fg:w="1"/><text x="70.3945%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.1445%" y="389" width="0.0803%" height="15" fill="rgb(212,11,10)" fg:x="874" fg:w="1"/><text x="70.3945%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.1445%" y="373" width="0.0803%" height="15" fill="rgb(205,166,19)" fg:x="874" fg:w="1"/><text x="70.3945%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1445%" y="357" width="0.0803%" height="15" fill="rgb(244,198,16)" fg:x="874" fg:w="1"/><text x="70.3945%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (468 samples, 37.56%)</title><rect x="32.8250%" y="629" width="37.5602%" height="15" fill="rgb(219,69,12)" fg:x="409" fg:w="468"/><text x="33.0750%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::per..</text></g><g><title>kernel::plugins::mw::apply_middleware (468 samples, 37.56%)</title><rect x="32.8250%" y="613" width="37.5602%" height="15" fill="rgb(245,30,7)" fg:x="409" fg:w="468"/><text x="33.0750%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (468 samples, 37.56%)</title><rect x="32.8250%" y="597" width="37.5602%" height="15" fill="rgb(218,221,48)" fg:x="409" fg:w="468"/><text x="33.0750%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (468 samples, 37.56%)</title><rect x="32.8250%" y="581" width="37.5602%" height="15" fill="rgb(216,66,15)" fg:x="409" fg:w="468"/><text x="33.0750%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plu..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (457 samples, 36.68%)</title><rect x="33.7079%" y="565" width="36.6774%" height="15" fill="rgb(226,122,50)" fg:x="420" fg:w="457"/><text x="33.9579%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (457 samples, 36.68%)</title><rect x="33.7079%" y="549" width="36.6774%" height="15" fill="rgb(239,156,16)" fg:x="420" fg:w="457"/><text x="33.9579%" y="559.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middle..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (28 samples, 2.25%)</title><rect x="68.1380%" y="533" width="2.2472%" height="15" fill="rgb(224,27,38)" fg:x="849" fg:w="28"/><text x="68.3880%" y="543.50">p..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::iter (2 samples, 0.16%)</title><rect x="70.2247%" y="517" width="0.1605%" height="15" fill="rgb(224,39,27)" fg:x="875" fg:w="2"/><text x="70.4747%" y="527.50"></text></g><g><title>engine::session::Session::captured (472 samples, 37.88%)</title><rect x="32.5843%" y="677" width="37.8812%" height="15" fill="rgb(215,92,29)" fg:x="406" fg:w="472"/><text x="32.8343%" y="687.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (471 samples, 37.80%)</title><rect x="32.6645%" y="661" width="37.8010%" height="15" fill="rgb(207,159,16)" fg:x="407" fg:w="471"/><text x="32.9145%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (469 samples, 37.64%)</title><rect x="32.8250%" y="645" width="37.6404%" height="15" fill="rgb(238,163,47)" fg:x="409" fg:w="469"/><text x="33.0750%" y="655.50">tracing_core::dispatcher::with_default</text></g><g><title>tracing_core::dispatcher::set_default (1 samples, 0.08%)</title><rect x="70.3852%" y="629" width="0.0803%" height="15" fill="rgb(219,91,49)" fg:x="877" fg:w="1"/><text x="70.6352%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4655%" y="597" width="0.0803%" height="15" fill="rgb(227,167,31)" fg:x="878" fg:w="1"/><text x="70.7155%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.4655%" y="581" width="0.0803%" height="15" fill="rgb(234,80,54)" fg:x="878" fg:w="1"/><text x="70.7155%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4655%" y="565" width="0.0803%" height="15" fill="rgb(212,114,2)" fg:x="878" fg:w="1"/><text x="70.7155%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.4655%" y="549" width="0.0803%" height="15" fill="rgb(234,50,24)" fg:x="878" fg:w="1"/><text x="70.7155%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.4655%" y="533" width="0.0803%" height="15" fill="rgb(221,68,8)" fg:x="878" fg:w="1"/><text x="70.7155%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.4655%" y="517" width="0.0803%" height="15" fill="rgb(254,180,31)" fg:x="878" fg:w="1"/><text x="70.7155%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.4655%" y="501" width="0.0803%" height="15" fill="rgb(247,130,50)" fg:x="878" fg:w="1"/><text x="70.7155%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.4655%" y="485" width="0.0803%" height="15" fill="rgb(211,109,4)" fg:x="878" fg:w="1"/><text x="70.7155%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.4655%" y="469" width="0.0803%" height="15" fill="rgb(238,50,21)" fg:x="878" fg:w="1"/><text x="70.7155%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.4655%" y="453" width="0.0803%" height="15" fill="rgb(225,57,45)" fg:x="878" fg:w="1"/><text x="70.7155%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.4655%" y="437" width="0.0803%" height="15" fill="rgb(209,196,50)" fg:x="878" fg:w="1"/><text x="70.7155%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.4655%" y="421" width="0.0803%" height="15" fill="rgb(242,140,13)" fg:x="878" fg:w="1"/><text x="70.7155%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.4655%" y="405" width="0.0803%" height="15" fill="rgb(217,111,7)" fg:x="878" fg:w="1"/><text x="70.7155%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.4655%" y="389" width="0.0803%" height="15" fill="rgb(253,193,51)" fg:x="878" fg:w="1"/><text x="70.7155%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4655%" y="373" width="0.0803%" height="15" fill="rgb(252,70,29)" fg:x="878" fg:w="1"/><text x="70.7155%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.4655%" y="629" width="0.1605%" height="15" fill="rgb(232,127,12)" fg:x="878" fg:w="2"/><text x="70.7155%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.4655%" y="613" width="0.1605%" height="15" fill="rgb(211,180,21)" fg:x="878" fg:w="2"/><text x="70.7155%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.5457%" y="597" width="0.0803%" height="15" fill="rgb(229,72,13)" fg:x="879" fg:w="1"/><text x="70.7957%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.7865%" y="437" width="0.0803%" height="15" fill="rgb(240,211,49)" fg:x="882" fg:w="1"/><text x="71.0365%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="70.7865%" y="485" width="0.1605%" height="15" fill="rgb(219,149,40)" fg:x="882" fg:w="2"/><text x="71.0365%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="70.7865%" y="469" width="0.1605%" height="15" fill="rgb(210,127,46)" fg:x="882" fg:w="2"/><text x="71.0365%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="70.7865%" y="453" width="0.1605%" height="15" fill="rgb(220,106,7)" fg:x="882" fg:w="2"/><text x="71.0365%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.8668%" y="437" width="0.0803%" height="15" fill="rgb(249,31,22)" fg:x="883" fg:w="1"/><text x="71.1168%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8668%" y="421" width="0.0803%" height="15" fill="rgb(253,1,49)" fg:x="883" fg:w="1"/><text x="71.1168%" y="431.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="70.8668%" y="405" width="0.0803%" height="15" fill="rgb(227,144,33)" fg:x="883" fg:w="1"/><text x="71.1168%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="70.7063%" y="517" width="0.3210%" height="15" fill="rgb(249,163,44)" fg:x="881" fg:w="4"/><text x="70.9563%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="70.7865%" y="501" width="0.2408%" height="15" fill="rgb(234,15,39)" fg:x="882" fg:w="3"/><text x="71.0365%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9470%" y="485" width="0.0803%" height="15" fill="rgb(207,66,16)" fg:x="884" fg:w="1"/><text x="71.1970%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9470%" y="469" width="0.0803%" height="15" fill="rgb(233,112,24)" fg:x="884" fg:w="1"/><text x="71.1970%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.9470%" y="453" width="0.0803%" height="15" fill="rgb(230,90,22)" fg:x="884" fg:w="1"/><text x="71.1970%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.9470%" y="437" width="0.0803%" height="15" fill="rgb(229,61,13)" fg:x="884" fg:w="1"/><text x="71.1970%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.9470%" y="421" width="0.0803%" height="15" fill="rgb(225,57,24)" fg:x="884" fg:w="1"/><text x="71.1970%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="70.7063%" y="533" width="0.4013%" height="15" fill="rgb(208,169,48)" fg:x="881" fg:w="5"/><text x="70.9563%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;core::iter::adapters::flatten::FlatMap&lt;core::slice::iter::Iter&lt;serde_json::value::Value&gt;,core::option::Option&lt;alloc::vec::Vec&lt;kernel::model::entity_ref::EntityRef&gt;&gt;,kernel::model::entity_ref::find_entity_refs&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="71.0273%" y="517" width="0.0803%" height="15" fill="rgb(244,218,51)" fg:x="885" fg:w="1"/><text x="71.2773%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="70.7063%" y="581" width="0.5618%" height="15" fill="rgb(214,148,10)" fg:x="881" fg:w="7"/><text x="70.9563%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="70.7063%" y="565" width="0.5618%" height="15" fill="rgb(225,174,27)" fg:x="881" fg:w="7"/><text x="70.9563%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="70.7063%" y="549" width="0.5618%" height="15" fill="rgb(230,96,26)" fg:x="881" fg:w="7"/><text x="70.9563%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.1075%" y="533" width="0.1605%" height="15" fill="rgb(232,10,30)" fg:x="886" fg:w="2"/><text x="71.3575%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1075%" y="517" width="0.1605%" height="15" fill="rgb(222,8,50)" fg:x="886" fg:w="2"/><text x="71.3575%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="71.1075%" y="501" width="0.1605%" height="15" fill="rgb(213,81,27)" fg:x="886" fg:w="2"/><text x="71.3575%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.1075%" y="485" width="0.1605%" height="15" fill="rgb(245,50,10)" fg:x="886" fg:w="2"/><text x="71.3575%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="71.1075%" y="469" width="0.1605%" height="15" fill="rgb(216,100,18)" fg:x="886" fg:w="2"/><text x="71.3575%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="70.6260%" y="629" width="0.7223%" height="15" fill="rgb(236,147,54)" fg:x="880" fg:w="9"/><text x="70.8760%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="70.6260%" y="613" width="0.7223%" height="15" fill="rgb(205,143,26)" fg:x="880" fg:w="9"/><text x="70.8760%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.72%)</title><rect x="70.6260%" y="597" width="0.7223%" height="15" fill="rgb(236,26,9)" fg:x="880" fg:w="9"/><text x="70.8760%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.2681%" y="581" width="0.0803%" height="15" fill="rgb(221,165,53)" fg:x="888" fg:w="1"/><text x="71.5181%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2681%" y="565" width="0.0803%" height="15" fill="rgb(214,110,17)" fg:x="888" fg:w="1"/><text x="71.5181%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.2681%" y="549" width="0.0803%" height="15" fill="rgb(237,197,12)" fg:x="888" fg:w="1"/><text x="71.5181%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2681%" y="533" width="0.0803%" height="15" fill="rgb(205,84,17)" fg:x="888" fg:w="1"/><text x="71.5181%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.3483%" y="581" width="0.0803%" height="15" fill="rgb(237,18,45)" fg:x="889" fg:w="1"/><text x="71.5983%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3483%" y="565" width="0.0803%" height="15" fill="rgb(221,87,14)" fg:x="889" fg:w="1"/><text x="71.5983%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.4286%" y="565" width="0.0803%" height="15" fill="rgb(238,186,15)" fg:x="890" fg:w="1"/><text x="71.6786%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.4286%" y="549" width="0.0803%" height="15" fill="rgb(208,115,11)" fg:x="890" fg:w="1"/><text x="71.6786%" y="559.50"></text></g><g><title>engine::session::internal::Added::find_refs (14 samples, 1.12%)</title><rect x="70.4655%" y="661" width="1.1236%" height="15" fill="rgb(254,175,0)" fg:x="878" fg:w="14"/><text x="70.7155%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (14 samples, 1.12%)</title><rect x="70.4655%" y="645" width="1.1236%" height="15" fill="rgb(227,24,42)" fg:x="878" fg:w="14"/><text x="70.7155%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="71.3483%" y="629" width="0.2408%" height="15" fill="rgb(223,211,37)" fg:x="889" fg:w="3"/><text x="71.5983%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="71.3483%" y="613" width="0.2408%" height="15" fill="rgb(235,49,27)" fg:x="889" fg:w="3"/><text x="71.5983%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="71.3483%" y="597" width="0.2408%" height="15" fill="rgb(254,97,51)" fg:x="889" fg:w="3"/><text x="71.5983%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.4286%" y="581" width="0.1605%" height="15" fill="rgb(249,51,40)" fg:x="890" fg:w="2"/><text x="71.6786%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.5088%" y="565" width="0.0803%" height="15" fill="rgb(210,128,45)" fg:x="891" fg:w="1"/><text x="71.7588%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="71.5088%" y="549" width="0.0803%" height="15" fill="rgb(224,137,50)" fg:x="891" fg:w="1"/><text x="71.7588%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.5088%" y="533" width="0.0803%" height="15" fill="rgb(242,15,9)" fg:x="891" fg:w="1"/><text x="71.7588%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5891%" y="613" width="0.0803%" height="15" fill="rgb(233,187,41)" fg:x="892" fg:w="1"/><text x="71.8391%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5891%" y="597" width="0.0803%" height="15" fill="rgb(227,2,29)" fg:x="892" fg:w="1"/><text x="71.8391%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.5891%" y="645" width="0.2408%" height="15" fill="rgb(222,70,3)" fg:x="892" fg:w="3"/><text x="71.8391%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.5891%" y="629" width="0.2408%" height="15" fill="rgb(213,11,42)" fg:x="892" fg:w="3"/><text x="71.8391%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.6693%" y="613" width="0.1605%" height="15" fill="rgb(225,150,9)" fg:x="893" fg:w="2"/><text x="71.9193%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7496%" y="597" width="0.0803%" height="15" fill="rgb(230,162,45)" fg:x="894" fg:w="1"/><text x="71.9996%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.7496%" y="581" width="0.0803%" height="15" fill="rgb(222,14,52)" fg:x="894" fg:w="1"/><text x="71.9996%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.7496%" y="565" width="0.0803%" height="15" fill="rgb(254,198,14)" fg:x="894" fg:w="1"/><text x="71.9996%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.7496%" y="549" width="0.0803%" height="15" fill="rgb(220,217,30)" fg:x="894" fg:w="1"/><text x="71.9996%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7496%" y="533" width="0.0803%" height="15" fill="rgb(215,146,41)" fg:x="894" fg:w="1"/><text x="71.9996%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7496%" y="517" width="0.0803%" height="15" fill="rgb(217,27,36)" fg:x="894" fg:w="1"/><text x="71.9996%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.7496%" y="501" width="0.0803%" height="15" fill="rgb(219,218,39)" fg:x="894" fg:w="1"/><text x="71.9996%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.7496%" y="485" width="0.0803%" height="15" fill="rgb(219,4,42)" fg:x="894" fg:w="1"/><text x="71.9996%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.7496%" y="469" width="0.0803%" height="15" fill="rgb(249,119,36)" fg:x="894" fg:w="1"/><text x="71.9996%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.7496%" y="453" width="0.0803%" height="15" fill="rgb(209,23,33)" fg:x="894" fg:w="1"/><text x="71.9996%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7496%" y="437" width="0.0803%" height="15" fill="rgb(211,10,0)" fg:x="894" fg:w="1"/><text x="71.9996%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.8299%" y="597" width="0.0803%" height="15" fill="rgb(208,99,37)" fg:x="895" fg:w="1"/><text x="72.0799%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="71.8299%" y="645" width="0.1605%" height="15" fill="rgb(213,132,31)" fg:x="895" fg:w="2"/><text x="72.0799%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.8299%" y="629" width="0.1605%" height="15" fill="rgb(243,129,40)" fg:x="895" fg:w="2"/><text x="72.0799%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.8299%" y="613" width="0.1605%" height="15" fill="rgb(210,66,33)" fg:x="895" fg:w="2"/><text x="72.0799%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.9101%" y="597" width="0.0803%" height="15" fill="rgb(209,189,4)" fg:x="896" fg:w="1"/><text x="72.1601%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9101%" y="581" width="0.0803%" height="15" fill="rgb(214,107,37)" fg:x="896" fg:w="1"/><text x="72.1601%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9101%" y="565" width="0.0803%" height="15" fill="rgb(245,88,54)" fg:x="896" fg:w="1"/><text x="72.1601%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9101%" y="549" width="0.0803%" height="15" fill="rgb(205,146,20)" fg:x="896" fg:w="1"/><text x="72.1601%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.9904%" y="565" width="0.0803%" height="15" fill="rgb(220,161,25)" fg:x="897" fg:w="1"/><text x="72.2404%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.0706%" y="485" width="0.0803%" height="15" fill="rgb(215,152,15)" fg:x="898" fg:w="1"/><text x="72.3206%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.0706%" y="469" width="0.0803%" height="15" fill="rgb(233,192,44)" fg:x="898" fg:w="1"/><text x="72.3206%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="72.0706%" y="453" width="0.0803%" height="15" fill="rgb(240,170,46)" fg:x="898" fg:w="1"/><text x="72.3206%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0706%" y="437" width="0.0803%" height="15" fill="rgb(207,104,33)" fg:x="898" fg:w="1"/><text x="72.3206%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.0706%" y="517" width="0.1605%" height="15" fill="rgb(219,21,39)" fg:x="898" fg:w="2"/><text x="72.3206%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.0706%" y="501" width="0.1605%" height="15" fill="rgb(214,133,29)" fg:x="898" fg:w="2"/><text x="72.3206%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.1509%" y="485" width="0.0803%" height="15" fill="rgb(226,93,6)" fg:x="899" fg:w="1"/><text x="72.4009%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.2311%" y="453" width="0.0803%" height="15" fill="rgb(252,222,34)" fg:x="900" fg:w="1"/><text x="72.4811%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2311%" y="437" width="0.0803%" height="15" fill="rgb(252,92,48)" fg:x="900" fg:w="1"/><text x="72.4811%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.2311%" y="485" width="0.1605%" height="15" fill="rgb(245,223,24)" fg:x="900" fg:w="2"/><text x="72.4811%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.2311%" y="469" width="0.1605%" height="15" fill="rgb(205,176,3)" fg:x="900" fg:w="2"/><text x="72.4811%" y="479.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="72.3114%" y="453" width="0.0803%" height="15" fill="rgb(235,151,15)" fg:x="901" fg:w="1"/><text x="72.5614%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.3114%" y="437" width="0.0803%" height="15" fill="rgb(237,209,11)" fg:x="901" fg:w="1"/><text x="72.5614%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (3 samples, 0.24%)</title><rect x="72.2311%" y="517" width="0.2408%" height="15" fill="rgb(243,227,24)" fg:x="900" fg:w="3"/><text x="72.4811%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.2311%" y="501" width="0.2408%" height="15" fill="rgb(239,193,16)" fg:x="900" fg:w="3"/><text x="72.4811%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.3917%" y="485" width="0.0803%" height="15" fill="rgb(231,27,9)" fg:x="902" fg:w="1"/><text x="72.6417%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.3917%" y="469" width="0.0803%" height="15" fill="rgb(219,169,10)" fg:x="902" fg:w="1"/><text x="72.6417%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3917%" y="453" width="0.0803%" height="15" fill="rgb(244,229,43)" fg:x="902" fg:w="1"/><text x="72.6417%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="71.9904%" y="645" width="0.5618%" height="15" fill="rgb(254,38,20)" fg:x="897" fg:w="7"/><text x="72.2404%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="71.9904%" y="629" width="0.5618%" height="15" fill="rgb(250,47,30)" fg:x="897" fg:w="7"/><text x="72.2404%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="71.9904%" y="613" width="0.5618%" height="15" fill="rgb(224,124,36)" fg:x="897" fg:w="7"/><text x="72.2404%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (7 samples, 0.56%)</title><rect x="71.9904%" y="597" width="0.5618%" height="15" fill="rgb(246,68,51)" fg:x="897" fg:w="7"/><text x="72.2404%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="71.9904%" y="581" width="0.5618%" height="15" fill="rgb(253,43,49)" fg:x="897" fg:w="7"/><text x="72.2404%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="72.0706%" y="565" width="0.4815%" height="15" fill="rgb(219,54,36)" fg:x="898" fg:w="6"/><text x="72.3206%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="72.0706%" y="549" width="0.4815%" height="15" fill="rgb(227,133,34)" fg:x="898" fg:w="6"/><text x="72.3206%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="72.0706%" y="533" width="0.4815%" height="15" fill="rgb(247,227,15)" fg:x="898" fg:w="6"/><text x="72.3206%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4719%" y="517" width="0.0803%" height="15" fill="rgb(229,96,14)" fg:x="903" fg:w="1"/><text x="72.7219%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4719%" y="501" width="0.0803%" height="15" fill="rgb(220,79,17)" fg:x="903" fg:w="1"/><text x="72.7219%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.7127%" y="517" width="0.0803%" height="15" fill="rgb(205,131,53)" fg:x="906" fg:w="1"/><text x="72.9627%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.7127%" y="501" width="0.0803%" height="15" fill="rgb(209,50,29)" fg:x="906" fg:w="1"/><text x="72.9627%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.7127%" y="485" width="0.0803%" height="15" fill="rgb(245,86,46)" fg:x="906" fg:w="1"/><text x="72.9627%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.7127%" y="469" width="0.0803%" height="15" fill="rgb(235,66,46)" fg:x="906" fg:w="1"/><text x="72.9627%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="72.5522%" y="581" width="0.3210%" height="15" fill="rgb(232,148,31)" fg:x="904" fg:w="4"/><text x="72.8022%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="72.5522%" y="565" width="0.3210%" height="15" fill="rgb(217,149,8)" fg:x="904" fg:w="4"/><text x="72.8022%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="72.5522%" y="549" width="0.3210%" height="15" fill="rgb(209,183,11)" fg:x="904" fg:w="4"/><text x="72.8022%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.6324%" y="533" width="0.2408%" height="15" fill="rgb(208,55,20)" fg:x="905" fg:w="3"/><text x="72.8824%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7929%" y="517" width="0.0803%" height="15" fill="rgb(218,39,14)" fg:x="907" fg:w="1"/><text x="73.0429%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="72.8732%" y="581" width="0.1605%" height="15" fill="rgb(216,169,33)" fg:x="908" fg:w="2"/><text x="73.1232%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9535%" y="565" width="0.0803%" height="15" fill="rgb(233,80,24)" fg:x="909" fg:w="1"/><text x="73.2035%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (33 samples, 2.65%)</title><rect x="70.4655%" y="677" width="2.6485%" height="15" fill="rgb(213,179,31)" fg:x="878" fg:w="33"/><text x="70.7155%" y="687.50">en..</text></g><g><title>engine::session::internal::Entities::add_persisted (19 samples, 1.52%)</title><rect x="71.5891%" y="661" width="1.5249%" height="15" fill="rgb(209,19,5)" fg:x="892" fg:w="19"/><text x="71.8391%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.56%)</title><rect x="72.5522%" y="645" width="0.5618%" height="15" fill="rgb(219,18,35)" fg:x="904" fg:w="7"/><text x="72.8022%" y="655.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.56%)</title><rect x="72.5522%" y="629" width="0.5618%" height="15" fill="rgb(209,169,16)" fg:x="904" fg:w="7"/><text x="72.8022%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="72.5522%" y="613" width="0.5618%" height="15" fill="rgb(245,90,51)" fg:x="904" fg:w="7"/><text x="72.8022%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="72.5522%" y="597" width="0.5618%" height="15" fill="rgb(220,99,45)" fg:x="904" fg:w="7"/><text x="72.8022%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0337%" y="581" width="0.0803%" height="15" fill="rgb(249,89,25)" fg:x="910" fg:w="1"/><text x="73.2837%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0337%" y="565" width="0.0803%" height="15" fill="rgb(239,193,0)" fg:x="910" fg:w="1"/><text x="73.2837%" y="575.50"></text></g><g><title>engine::users::model::username_to_key (3 samples, 0.24%)</title><rect x="73.1140%" y="677" width="0.2408%" height="15" fill="rgb(231,126,1)" fg:x="911" fg:w="3"/><text x="73.3640%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="73.1140%" y="661" width="0.2408%" height="15" fill="rgb(243,166,3)" fg:x="911" fg:w="3"/><text x="73.3640%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2745%" y="645" width="0.0803%" height="15" fill="rgb(223,22,34)" fg:x="913" fg:w="1"/><text x="73.5245%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2745%" y="629" width="0.0803%" height="15" fill="rgb(251,52,51)" fg:x="913" fg:w="1"/><text x="73.5245%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.2745%" y="613" width="0.0803%" height="15" fill="rgb(221,165,28)" fg:x="913" fg:w="1"/><text x="73.5245%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2745%" y="597" width="0.0803%" height="15" fill="rgb(218,121,47)" fg:x="913" fg:w="1"/><text x="73.5245%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.2745%" y="581" width="0.0803%" height="15" fill="rgb(209,120,9)" fg:x="913" fg:w="1"/><text x="73.5245%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (2 samples, 0.16%)</title><rect x="73.3547%" y="645" width="0.1605%" height="15" fill="rgb(236,68,12)" fg:x="914" fg:w="2"/><text x="73.6047%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="73.3547%" y="629" width="0.1605%" height="15" fill="rgb(225,194,26)" fg:x="914" fg:w="2"/><text x="73.6047%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="73.3547%" y="613" width="0.1605%" height="15" fill="rgb(231,84,39)" fg:x="914" fg:w="2"/><text x="73.6047%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="73.3547%" y="597" width="0.1605%" height="15" fill="rgb(210,11,45)" fg:x="914" fg:w="2"/><text x="73.6047%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="73.3547%" y="581" width="0.1605%" height="15" fill="rgb(224,54,52)" fg:x="914" fg:w="2"/><text x="73.6047%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="73.3547%" y="565" width="0.1605%" height="15" fill="rgb(238,102,14)" fg:x="914" fg:w="2"/><text x="73.6047%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.16%)</title><rect x="73.3547%" y="549" width="0.1605%" height="15" fill="rgb(243,160,52)" fg:x="914" fg:w="2"/><text x="73.6047%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="73.3547%" y="533" width="0.1605%" height="15" fill="rgb(216,114,19)" fg:x="914" fg:w="2"/><text x="73.6047%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::FutureStorage&gt;::query_futures_before (1 samples, 0.08%)</title><rect x="73.5152%" y="645" width="0.0803%" height="15" fill="rgb(244,166,37)" fg:x="916" fg:w="1"/><text x="73.7652%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.5955%" y="613" width="0.0803%" height="15" fill="rgb(246,29,44)" fg:x="917" fg:w="1"/><text x="73.8455%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.5955%" y="597" width="0.0803%" height="15" fill="rgb(215,56,53)" fg:x="917" fg:w="1"/><text x="73.8455%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.5955%" y="581" width="0.0803%" height="15" fill="rgb(217,60,2)" fg:x="917" fg:w="1"/><text x="73.8455%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.5955%" y="565" width="0.0803%" height="15" fill="rgb(207,26,24)" fg:x="917" fg:w="1"/><text x="73.8455%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.5955%" y="549" width="0.0803%" height="15" fill="rgb(252,210,15)" fg:x="917" fg:w="1"/><text x="73.8455%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.5955%" y="533" width="0.0803%" height="15" fill="rgb(253,209,26)" fg:x="917" fg:w="1"/><text x="73.8455%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.5955%" y="517" width="0.0803%" height="15" fill="rgb(238,170,14)" fg:x="917" fg:w="1"/><text x="73.8455%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.5955%" y="501" width="0.0803%" height="15" fill="rgb(216,178,15)" fg:x="917" fg:w="1"/><text x="73.8455%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.5955%" y="485" width="0.0803%" height="15" fill="rgb(250,197,2)" fg:x="917" fg:w="1"/><text x="73.8455%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.5955%" y="469" width="0.0803%" height="15" fill="rgb(212,70,42)" fg:x="917" fg:w="1"/><text x="73.8455%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.5955%" y="453" width="0.0803%" height="15" fill="rgb(227,213,9)" fg:x="917" fg:w="1"/><text x="73.8455%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.5955%" y="437" width="0.0803%" height="15" fill="rgb(245,99,25)" fg:x="917" fg:w="1"/><text x="73.8455%" y="447.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="73.5955%" y="421" width="0.0803%" height="15" fill="rgb(250,82,29)" fg:x="917" fg:w="1"/><text x="73.8455%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="73.5955%" y="629" width="0.1605%" height="15" fill="rgb(241,226,54)" fg:x="917" fg:w="2"/><text x="73.8455%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.6758%" y="613" width="0.0803%" height="15" fill="rgb(221,99,41)" fg:x="918" fg:w="1"/><text x="73.9258%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.6758%" y="597" width="0.0803%" height="15" fill="rgb(213,90,21)" fg:x="918" fg:w="1"/><text x="73.9258%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.7560%" y="629" width="0.0803%" height="15" fill="rgb(205,208,24)" fg:x="919" fg:w="1"/><text x="74.0060%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7560%" y="613" width="0.0803%" height="15" fill="rgb(246,31,12)" fg:x="919" fg:w="1"/><text x="74.0060%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.7560%" y="597" width="0.0803%" height="15" fill="rgb(213,154,6)" fg:x="919" fg:w="1"/><text x="74.0060%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.7560%" y="581" width="0.0803%" height="15" fill="rgb(222,163,29)" fg:x="919" fg:w="1"/><text x="74.0060%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.8363%" y="469" width="0.0803%" height="15" fill="rgb(227,201,8)" fg:x="920" fg:w="1"/><text x="74.0863%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.8363%" y="453" width="0.0803%" height="15" fill="rgb(233,9,32)" fg:x="920" fg:w="1"/><text x="74.0863%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8363%" y="437" width="0.0803%" height="15" fill="rgb(217,54,24)" fg:x="920" fg:w="1"/><text x="74.0863%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8363%" y="421" width="0.0803%" height="15" fill="rgb(235,192,0)" fg:x="920" fg:w="1"/><text x="74.0863%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.8363%" y="501" width="0.1605%" height="15" fill="rgb(235,45,9)" fg:x="920" fg:w="2"/><text x="74.0863%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.8363%" y="485" width="0.1605%" height="15" fill="rgb(246,42,40)" fg:x="920" fg:w="2"/><text x="74.0863%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.9165%" y="469" width="0.0803%" height="15" fill="rgb(248,111,24)" fg:x="921" fg:w="1"/><text x="74.1665%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="73.8363%" y="533" width="0.2408%" height="15" fill="rgb(249,65,22)" fg:x="920" fg:w="3"/><text x="74.0863%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="73.8363%" y="517" width="0.2408%" height="15" fill="rgb(238,111,51)" fg:x="920" fg:w="3"/><text x="74.0863%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="73.9968%" y="501" width="0.0803%" height="15" fill="rgb(250,118,22)" fg:x="922" fg:w="1"/><text x="74.2468%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0770%" y="533" width="0.0803%" height="15" fill="rgb(234,84,26)" fg:x="923" fg:w="1"/><text x="74.3270%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="73.8363%" y="581" width="0.4013%" height="15" fill="rgb(243,172,12)" fg:x="920" fg:w="5"/><text x="74.0863%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="73.8363%" y="565" width="0.4013%" height="15" fill="rgb(236,150,49)" fg:x="920" fg:w="5"/><text x="74.0863%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="73.8363%" y="549" width="0.4013%" height="15" fill="rgb(225,197,26)" fg:x="920" fg:w="5"/><text x="74.0863%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1573%" y="533" width="0.0803%" height="15" fill="rgb(214,17,42)" fg:x="924" fg:w="1"/><text x="74.4073%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.1573%" y="517" width="0.0803%" height="15" fill="rgb(224,165,40)" fg:x="924" fg:w="1"/><text x="74.4073%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="74.1573%" y="501" width="0.0803%" height="15" fill="rgb(246,100,4)" fg:x="924" fg:w="1"/><text x="74.4073%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="73.8363%" y="629" width="0.4815%" height="15" fill="rgb(222,103,0)" fg:x="920" fg:w="6"/><text x="74.0863%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="73.8363%" y="613" width="0.4815%" height="15" fill="rgb(227,189,26)" fg:x="920" fg:w="6"/><text x="74.0863%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="73.8363%" y="597" width="0.4815%" height="15" fill="rgb(214,202,17)" fg:x="920" fg:w="6"/><text x="74.0863%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.2376%" y="581" width="0.0803%" height="15" fill="rgb(229,111,3)" fg:x="925" fg:w="1"/><text x="74.4876%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2376%" y="565" width="0.0803%" height="15" fill="rgb(229,172,15)" fg:x="925" fg:w="1"/><text x="74.4876%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.2376%" y="549" width="0.0803%" height="15" fill="rgb(230,224,35)" fg:x="925" fg:w="1"/><text x="74.4876%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.3981%" y="565" width="0.1605%" height="15" fill="rgb(251,141,6)" fg:x="927" fg:w="2"/><text x="74.6481%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.4783%" y="549" width="0.0803%" height="15" fill="rgb(225,208,6)" fg:x="928" fg:w="1"/><text x="74.7283%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4783%" y="533" width="0.0803%" height="15" fill="rgb(246,181,16)" fg:x="928" fg:w="1"/><text x="74.7283%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4783%" y="517" width="0.0803%" height="15" fill="rgb(227,129,36)" fg:x="928" fg:w="1"/><text x="74.7283%" y="527.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (527 samples, 42.30%)</title><rect x="32.3435%" y="709" width="42.2953%" height="15" fill="rgb(248,117,24)" fg:x="403" fg:w="527"/><text x="32.5935%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (527 samples, 42.30%)</title><rect x="32.3435%" y="693" width="42.2953%" height="15" fill="rgb(214,185,35)" fg:x="403" fg:w="527"/><text x="32.5935%" y="703.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (16 samples, 1.28%)</title><rect x="73.3547%" y="677" width="1.2841%" height="15" fill="rgb(236,150,34)" fg:x="914" fg:w="16"/><text x="73.6047%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.28%)</title><rect x="73.3547%" y="661" width="1.2841%" height="15" fill="rgb(243,228,27)" fg:x="914" fg:w="16"/><text x="73.6047%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.04%)</title><rect x="73.5955%" y="645" width="1.0433%" height="15" fill="rgb(245,77,44)" fg:x="917" fg:w="13"/><text x="73.8455%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="74.3178%" y="629" width="0.3210%" height="15" fill="rgb(235,214,42)" fg:x="926" fg:w="4"/><text x="74.5678%" y="639.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="74.3178%" y="613" width="0.3210%" height="15" fill="rgb(221,74,3)" fg:x="926" fg:w="4"/><text x="74.5678%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.3178%" y="597" width="0.3210%" height="15" fill="rgb(206,121,29)" fg:x="926" fg:w="4"/><text x="74.5678%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.3981%" y="581" width="0.2408%" height="15" fill="rgb(249,131,53)" fg:x="927" fg:w="3"/><text x="74.6481%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.5586%" y="565" width="0.0803%" height="15" fill="rgb(236,170,29)" fg:x="929" fg:w="1"/><text x="74.8086%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5586%" y="549" width="0.0803%" height="15" fill="rgb(247,96,15)" fg:x="929" fg:w="1"/><text x="74.8086%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (931 samples, 74.72%)</title><rect x="0.0000%" y="757" width="74.7191%" height="15" fill="rgb(211,210,7)" fg:x="0" fg:w="931"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (931 samples, 74.72%)</title><rect x="0.0000%" y="741" width="74.7191%" height="15" fill="rgb(240,88,50)" fg:x="0" fg:w="931"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (931 samples, 74.72%)</title><rect x="0.0000%" y="725" width="74.7191%" height="15" fill="rgb(209,229,26)" fg:x="0" fg:w="931"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="74.6388%" y="709" width="0.0803%" height="15" fill="rgb(210,68,23)" fg:x="930" fg:w="1"/><text x="74.8888%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.7191%" y="693" width="0.0803%" height="15" fill="rgb(229,180,13)" fg:x="931" fg:w="1"/><text x="74.9691%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="74.7994%" y="693" width="0.0803%" height="15" fill="rgb(236,53,44)" fg:x="932" fg:w="1"/><text x="75.0494%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.7994%" y="677" width="0.0803%" height="15" fill="rgb(244,214,29)" fg:x="932" fg:w="1"/><text x="75.0494%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="74.7994%" y="661" width="0.0803%" height="15" fill="rgb(220,75,29)" fg:x="932" fg:w="1"/><text x="75.0494%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="74.7994%" y="645" width="0.0803%" height="15" fill="rgb(214,183,37)" fg:x="932" fg:w="1"/><text x="75.0494%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="74.7994%" y="629" width="0.0803%" height="15" fill="rgb(239,117,29)" fg:x="932" fg:w="1"/><text x="75.0494%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.7994%" y="613" width="0.0803%" height="15" fill="rgb(237,171,35)" fg:x="932" fg:w="1"/><text x="75.0494%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.8796%" y="597" width="0.0803%" height="15" fill="rgb(229,178,53)" fg:x="933" fg:w="1"/><text x="75.1296%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8796%" y="581" width="0.0803%" height="15" fill="rgb(210,102,19)" fg:x="933" fg:w="1"/><text x="75.1296%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.9599%" y="581" width="0.0803%" height="15" fill="rgb(235,127,22)" fg:x="934" fg:w="1"/><text x="75.2099%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="74.8796%" y="629" width="0.2408%" height="15" fill="rgb(244,31,31)" fg:x="933" fg:w="3"/><text x="75.1296%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.8796%" y="613" width="0.2408%" height="15" fill="rgb(231,43,21)" fg:x="933" fg:w="3"/><text x="75.1296%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.9599%" y="597" width="0.1605%" height="15" fill="rgb(217,131,35)" fg:x="934" fg:w="2"/><text x="75.2099%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.0401%" y="581" width="0.0803%" height="15" fill="rgb(221,149,4)" fg:x="935" fg:w="1"/><text x="75.2901%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0401%" y="565" width="0.0803%" height="15" fill="rgb(232,170,28)" fg:x="935" fg:w="1"/><text x="75.2901%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.1204%" y="581" width="0.0803%" height="15" fill="rgb(238,56,10)" fg:x="936" fg:w="1"/><text x="75.3704%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.1204%" y="565" width="0.0803%" height="15" fill="rgb(235,196,14)" fg:x="936" fg:w="1"/><text x="75.3704%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.1204%" y="549" width="0.0803%" height="15" fill="rgb(216,45,48)" fg:x="936" fg:w="1"/><text x="75.3704%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.2006%" y="581" width="0.0803%" height="15" fill="rgb(238,213,17)" fg:x="937" fg:w="1"/><text x="75.4506%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.2006%" y="565" width="0.0803%" height="15" fill="rgb(212,13,2)" fg:x="937" fg:w="1"/><text x="75.4506%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="74.7191%" y="709" width="0.6421%" height="15" fill="rgb(240,114,20)" fg:x="931" fg:w="8"/><text x="74.9691%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (6 samples, 0.48%)</title><rect x="74.8796%" y="693" width="0.4815%" height="15" fill="rgb(228,41,40)" fg:x="933" fg:w="6"/><text x="75.1296%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="74.8796%" y="677" width="0.4815%" height="15" fill="rgb(244,132,35)" fg:x="933" fg:w="6"/><text x="75.1296%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (6 samples, 0.48%)</title><rect x="74.8796%" y="661" width="0.4815%" height="15" fill="rgb(253,189,4)" fg:x="933" fg:w="6"/><text x="75.1296%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="74.8796%" y="645" width="0.4815%" height="15" fill="rgb(224,37,19)" fg:x="933" fg:w="6"/><text x="75.1296%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="75.1204%" y="629" width="0.2408%" height="15" fill="rgb(235,223,18)" fg:x="936" fg:w="3"/><text x="75.3704%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="75.1204%" y="613" width="0.2408%" height="15" fill="rgb(235,163,25)" fg:x="936" fg:w="3"/><text x="75.3704%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.1204%" y="597" width="0.2408%" height="15" fill="rgb(217,145,28)" fg:x="936" fg:w="3"/><text x="75.3704%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.2809%" y="581" width="0.0803%" height="15" fill="rgb(223,223,32)" fg:x="938" fg:w="1"/><text x="75.5309%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.2809%" y="565" width="0.0803%" height="15" fill="rgb(227,189,39)" fg:x="938" fg:w="1"/><text x="75.5309%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.4414%" y="661" width="0.0803%" height="15" fill="rgb(248,10,22)" fg:x="940" fg:w="1"/><text x="75.6914%" y="671.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="75.6019%" y="581" width="0.1605%" height="15" fill="rgb(248,46,39)" fg:x="942" fg:w="2"/><text x="75.8519%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="75.6019%" y="565" width="0.1605%" height="15" fill="rgb(248,113,48)" fg:x="942" fg:w="2"/><text x="75.8519%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="75.6019%" y="549" width="0.1605%" height="15" fill="rgb(245,16,25)" fg:x="942" fg:w="2"/><text x="75.8519%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.6019%" y="533" width="0.1605%" height="15" fill="rgb(249,152,16)" fg:x="942" fg:w="2"/><text x="75.8519%" y="543.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="75.7624%" y="581" width="0.0803%" height="15" fill="rgb(250,16,1)" fg:x="944" fg:w="1"/><text x="76.0124%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.7624%" y="565" width="0.0803%" height="15" fill="rgb(249,138,3)" fg:x="944" fg:w="1"/><text x="76.0124%" y="575.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.40%)</title><rect x="75.5217%" y="613" width="0.4013%" height="15" fill="rgb(227,71,41)" fg:x="941" fg:w="5"/><text x="75.7717%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.40%)</title><rect x="75.5217%" y="597" width="0.4013%" height="15" fill="rgb(209,184,23)" fg:x="941" fg:w="5"/><text x="75.7717%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="75.8427%" y="581" width="0.0803%" height="15" fill="rgb(223,215,31)" fg:x="945" fg:w="1"/><text x="76.0927%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="75.9230%" y="613" width="0.0803%" height="15" fill="rgb(210,146,28)" fg:x="946" fg:w="1"/><text x="76.1730%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="75.9230%" y="597" width="0.0803%" height="15" fill="rgb(209,183,41)" fg:x="946" fg:w="1"/><text x="76.1730%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="75.9230%" y="581" width="0.0803%" height="15" fill="rgb(209,224,45)" fg:x="946" fg:w="1"/><text x="76.1730%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.9230%" y="565" width="0.0803%" height="15" fill="rgb(224,209,51)" fg:x="946" fg:w="1"/><text x="76.1730%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.9230%" y="549" width="0.0803%" height="15" fill="rgb(223,17,39)" fg:x="946" fg:w="1"/><text x="76.1730%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (9 samples, 0.72%)</title><rect x="75.5217%" y="629" width="0.7223%" height="15" fill="rgb(234,204,37)" fg:x="941" fg:w="9"/><text x="75.7717%" y="639.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="76.0032%" y="613" width="0.2408%" height="15" fill="rgb(236,120,5)" fg:x="947" fg:w="3"/><text x="76.2532%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="76.0032%" y="597" width="0.2408%" height="15" fill="rgb(248,97,27)" fg:x="947" fg:w="3"/><text x="76.2532%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="76.0835%" y="581" width="0.1605%" height="15" fill="rgb(240,66,17)" fg:x="948" fg:w="2"/><text x="76.3335%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="76.0835%" y="565" width="0.1605%" height="15" fill="rgb(210,79,3)" fg:x="948" fg:w="2"/><text x="76.3335%" y="575.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="76.0835%" y="549" width="0.1605%" height="15" fill="rgb(214,176,27)" fg:x="948" fg:w="2"/><text x="76.3335%" y="559.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="76.2440%" y="629" width="0.0803%" height="15" fill="rgb(235,185,3)" fg:x="950" fg:w="1"/><text x="76.4940%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="76.2440%" y="613" width="0.0803%" height="15" fill="rgb(227,24,12)" fg:x="950" fg:w="1"/><text x="76.4940%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="76.2440%" y="597" width="0.0803%" height="15" fill="rgb(252,169,48)" fg:x="950" fg:w="1"/><text x="76.4940%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="76.2440%" y="581" width="0.0803%" height="15" fill="rgb(212,65,1)" fg:x="950" fg:w="1"/><text x="76.4940%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="76.2440%" y="565" width="0.0803%" height="15" fill="rgb(242,39,24)" fg:x="950" fg:w="1"/><text x="76.4940%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="76.2440%" y="549" width="0.0803%" height="15" fill="rgb(249,32,23)" fg:x="950" fg:w="1"/><text x="76.4940%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="76.2440%" y="533" width="0.0803%" height="15" fill="rgb(251,195,23)" fg:x="950" fg:w="1"/><text x="76.4940%" y="543.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="76.2440%" y="517" width="0.0803%" height="15" fill="rgb(236,174,8)" fg:x="950" fg:w="1"/><text x="76.4940%" y="527.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="76.3242%" y="613" width="0.1605%" height="15" fill="rgb(220,197,8)" fg:x="951" fg:w="2"/><text x="76.5742%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.3242%" y="597" width="0.1605%" height="15" fill="rgb(240,108,37)" fg:x="951" fg:w="2"/><text x="76.5742%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.3242%" y="581" width="0.1605%" height="15" fill="rgb(232,176,24)" fg:x="951" fg:w="2"/><text x="76.5742%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.3242%" y="565" width="0.1605%" height="15" fill="rgb(243,35,29)" fg:x="951" fg:w="2"/><text x="76.5742%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.4045%" y="549" width="0.0803%" height="15" fill="rgb(210,37,18)" fg:x="952" fg:w="1"/><text x="76.6545%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.4045%" y="533" width="0.0803%" height="15" fill="rgb(224,184,40)" fg:x="952" fg:w="1"/><text x="76.6545%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.4045%" y="517" width="0.0803%" height="15" fill="rgb(236,39,29)" fg:x="952" fg:w="1"/><text x="76.6545%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.4045%" y="501" width="0.0803%" height="15" fill="rgb(232,48,39)" fg:x="952" fg:w="1"/><text x="76.6545%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.4045%" y="485" width="0.0803%" height="15" fill="rgb(236,34,42)" fg:x="952" fg:w="1"/><text x="76.6545%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.4045%" y="469" width="0.0803%" height="15" fill="rgb(243,106,37)" fg:x="952" fg:w="1"/><text x="76.6545%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.4045%" y="453" width="0.0803%" height="15" fill="rgb(218,96,6)" fg:x="952" fg:w="1"/><text x="76.6545%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.4045%" y="437" width="0.0803%" height="15" fill="rgb(235,130,12)" fg:x="952" fg:w="1"/><text x="76.6545%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.4045%" y="421" width="0.0803%" height="15" fill="rgb(231,95,0)" fg:x="952" fg:w="1"/><text x="76.6545%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.4045%" y="405" width="0.0803%" height="15" fill="rgb(228,12,23)" fg:x="952" fg:w="1"/><text x="76.6545%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.4045%" y="389" width="0.0803%" height="15" fill="rgb(216,12,1)" fg:x="952" fg:w="1"/><text x="76.6545%" y="399.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.4848%" y="565" width="0.0803%" height="15" fill="rgb(219,59,3)" fg:x="953" fg:w="1"/><text x="76.7348%" y="575.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.5650%" y="565" width="0.0803%" height="15" fill="rgb(215,208,46)" fg:x="954" fg:w="1"/><text x="76.8150%" y="575.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.5650%" y="549" width="0.0803%" height="15" fill="rgb(254,224,29)" fg:x="954" fg:w="1"/><text x="76.8150%" y="559.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.40%)</title><rect x="76.3242%" y="629" width="0.4013%" height="15" fill="rgb(232,14,29)" fg:x="951" fg:w="5"/><text x="76.5742%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (3 samples, 0.24%)</title><rect x="76.4848%" y="613" width="0.2408%" height="15" fill="rgb(208,45,52)" fg:x="953" fg:w="3"/><text x="76.7348%" y="623.50"></text></g><g><title>glob::glob (3 samples, 0.24%)</title><rect x="76.4848%" y="597" width="0.2408%" height="15" fill="rgb(234,191,28)" fg:x="953" fg:w="3"/><text x="76.7348%" y="607.50"></text></g><g><title>glob::glob_with (3 samples, 0.24%)</title><rect x="76.4848%" y="581" width="0.2408%" height="15" fill="rgb(244,67,43)" fg:x="953" fg:w="3"/><text x="76.7348%" y="591.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="76.6453%" y="565" width="0.0803%" height="15" fill="rgb(236,189,24)" fg:x="955" fg:w="1"/><text x="76.8953%" y="575.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="76.7255%" y="613" width="0.0803%" height="15" fill="rgb(239,214,33)" fg:x="956" fg:w="1"/><text x="76.9755%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (17 samples, 1.36%)</title><rect x="75.5217%" y="645" width="1.3644%" height="15" fill="rgb(226,176,41)" fg:x="941" fg:w="17"/><text x="75.7717%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="76.7255%" y="629" width="0.1605%" height="15" fill="rgb(248,47,8)" fg:x="956" fg:w="2"/><text x="76.9755%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="76.8058%" y="613" width="0.0803%" height="15" fill="rgb(218,81,44)" fg:x="957" fg:w="1"/><text x="77.0558%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.8860%" y="613" width="0.0803%" height="15" fill="rgb(213,98,6)" fg:x="958" fg:w="1"/><text x="77.1360%" y="623.50"></text></g><g><title>engine::session::Session::initialize (19 samples, 1.52%)</title><rect x="75.5217%" y="661" width="1.5249%" height="15" fill="rgb(222,85,22)" fg:x="941" fg:w="19"/><text x="75.7717%" y="671.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="76.8860%" y="645" width="0.1605%" height="15" fill="rgb(239,46,39)" fg:x="958" fg:w="2"/><text x="77.1360%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="76.8860%" y="629" width="0.1605%" height="15" fill="rgb(237,12,29)" fg:x="958" fg:w="2"/><text x="77.1360%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.9663%" y="613" width="0.0803%" height="15" fill="rgb(214,77,8)" fg:x="959" fg:w="1"/><text x="77.2163%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.9663%" y="597" width="0.0803%" height="15" fill="rgb(217,168,37)" fg:x="959" fg:w="1"/><text x="77.2163%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.9663%" y="581" width="0.0803%" height="15" fill="rgb(221,217,23)" fg:x="959" fg:w="1"/><text x="77.2163%" y="591.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (22 samples, 1.77%)</title><rect x="75.3612%" y="709" width="1.7657%" height="15" fill="rgb(243,229,36)" fg:x="939" fg:w="22"/><text x="75.6112%" y="719.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (22 samples, 1.77%)</title><rect x="75.3612%" y="693" width="1.7657%" height="15" fill="rgb(251,163,40)" fg:x="939" fg:w="22"/><text x="75.6112%" y="703.50"></text></g><g><title>engine::session::Session::new (22 samples, 1.77%)</title><rect x="75.3612%" y="677" width="1.7657%" height="15" fill="rgb(237,222,12)" fg:x="939" fg:w="22"/><text x="75.6112%" y="687.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="77.0465%" y="661" width="0.0803%" height="15" fill="rgb(248,132,6)" fg:x="960" fg:w="1"/><text x="77.2965%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.0465%" y="645" width="0.0803%" height="15" fill="rgb(227,167,50)" fg:x="960" fg:w="1"/><text x="77.2965%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="77.2071%" y="677" width="0.0803%" height="15" fill="rgb(242,84,37)" fg:x="962" fg:w="1"/><text x="77.4571%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2071%" y="661" width="0.0803%" height="15" fill="rgb(212,4,50)" fg:x="962" fg:w="1"/><text x="77.4571%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.2873%" y="645" width="0.0803%" height="15" fill="rgb(230,228,32)" fg:x="963" fg:w="1"/><text x="77.5373%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.3676%" y="645" width="0.0803%" height="15" fill="rgb(248,217,23)" fg:x="964" fg:w="1"/><text x="77.6176%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="77.3676%" y="629" width="0.0803%" height="15" fill="rgb(238,197,32)" fg:x="964" fg:w="1"/><text x="77.6176%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="77.3676%" y="613" width="0.0803%" height="15" fill="rgb(236,106,1)" fg:x="964" fg:w="1"/><text x="77.6176%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="77.4478%" y="565" width="0.1605%" height="15" fill="rgb(219,228,13)" fg:x="965" fg:w="2"/><text x="77.6978%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5281%" y="549" width="0.0803%" height="15" fill="rgb(238,30,35)" fg:x="966" fg:w="1"/><text x="77.7781%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.6083%" y="501" width="0.0803%" height="15" fill="rgb(236,70,23)" fg:x="967" fg:w="1"/><text x="77.8583%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="77.6083%" y="549" width="0.1605%" height="15" fill="rgb(249,104,48)" fg:x="967" fg:w="2"/><text x="77.8583%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="77.6083%" y="533" width="0.1605%" height="15" fill="rgb(254,117,50)" fg:x="967" fg:w="2"/><text x="77.8583%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="77.6083%" y="517" width="0.1605%" height="15" fill="rgb(223,152,4)" fg:x="967" fg:w="2"/><text x="77.8583%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="77.6886%" y="501" width="0.0803%" height="15" fill="rgb(245,6,2)" fg:x="968" fg:w="1"/><text x="77.9386%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.7689%" y="533" width="0.0803%" height="15" fill="rgb(249,150,24)" fg:x="969" fg:w="1"/><text x="78.0189%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.7689%" y="517" width="0.0803%" height="15" fill="rgb(228,185,42)" fg:x="969" fg:w="1"/><text x="78.0189%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.7689%" y="501" width="0.0803%" height="15" fill="rgb(226,39,33)" fg:x="969" fg:w="1"/><text x="78.0189%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.7689%" y="485" width="0.0803%" height="15" fill="rgb(221,166,19)" fg:x="969" fg:w="1"/><text x="78.0189%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.7689%" y="469" width="0.0803%" height="15" fill="rgb(209,109,2)" fg:x="969" fg:w="1"/><text x="78.0189%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.7689%" y="453" width="0.0803%" height="15" fill="rgb(252,216,26)" fg:x="969" fg:w="1"/><text x="78.0189%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.7689%" y="437" width="0.0803%" height="15" fill="rgb(227,173,36)" fg:x="969" fg:w="1"/><text x="78.0189%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8491%" y="533" width="0.0803%" height="15" fill="rgb(209,90,7)" fg:x="970" fg:w="1"/><text x="78.0991%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.8491%" y="517" width="0.0803%" height="15" fill="rgb(250,194,11)" fg:x="970" fg:w="1"/><text x="78.0991%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.8491%" y="501" width="0.0803%" height="15" fill="rgb(220,72,50)" fg:x="970" fg:w="1"/><text x="78.0991%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.8491%" y="485" width="0.0803%" height="15" fill="rgb(222,106,48)" fg:x="970" fg:w="1"/><text x="78.0991%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.8491%" y="469" width="0.0803%" height="15" fill="rgb(216,220,45)" fg:x="970" fg:w="1"/><text x="78.0991%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="77.4478%" y="597" width="0.5618%" height="15" fill="rgb(234,112,18)" fg:x="965" fg:w="7"/><text x="77.6978%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="77.4478%" y="581" width="0.5618%" height="15" fill="rgb(206,179,9)" fg:x="965" fg:w="7"/><text x="77.6978%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="77.6083%" y="565" width="0.4013%" height="15" fill="rgb(215,115,40)" fg:x="967" fg:w="5"/><text x="77.8583%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="77.7689%" y="549" width="0.2408%" height="15" fill="rgb(222,69,34)" fg:x="969" fg:w="3"/><text x="78.0189%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.9294%" y="533" width="0.0803%" height="15" fill="rgb(209,161,10)" fg:x="971" fg:w="1"/><text x="78.1794%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.9294%" y="517" width="0.0803%" height="15" fill="rgb(217,6,38)" fg:x="971" fg:w="1"/><text x="78.1794%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.9294%" y="501" width="0.0803%" height="15" fill="rgb(229,229,48)" fg:x="971" fg:w="1"/><text x="78.1794%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.0096%" y="517" width="0.0803%" height="15" fill="rgb(225,21,28)" fg:x="972" fg:w="1"/><text x="78.2596%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.0096%" y="597" width="0.1605%" height="15" fill="rgb(206,33,13)" fg:x="972" fg:w="2"/><text x="78.2596%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="78.0096%" y="581" width="0.1605%" height="15" fill="rgb(242,178,17)" fg:x="972" fg:w="2"/><text x="78.2596%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.0096%" y="565" width="0.1605%" height="15" fill="rgb(220,162,5)" fg:x="972" fg:w="2"/><text x="78.2596%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.0096%" y="549" width="0.1605%" height="15" fill="rgb(210,33,43)" fg:x="972" fg:w="2"/><text x="78.2596%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.0096%" y="533" width="0.1605%" height="15" fill="rgb(216,116,54)" fg:x="972" fg:w="2"/><text x="78.2596%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.0899%" y="517" width="0.0803%" height="15" fill="rgb(249,92,24)" fg:x="973" fg:w="1"/><text x="78.3399%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.0899%" y="501" width="0.0803%" height="15" fill="rgb(231,189,14)" fg:x="973" fg:w="1"/><text x="78.3399%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1701%" y="549" width="0.0803%" height="15" fill="rgb(230,8,41)" fg:x="974" fg:w="1"/><text x="78.4201%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2504%" y="549" width="0.0803%" height="15" fill="rgb(249,7,27)" fg:x="975" fg:w="1"/><text x="78.5004%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.2504%" y="533" width="0.0803%" height="15" fill="rgb(232,86,5)" fg:x="975" fg:w="1"/><text x="78.5004%" y="543.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.20%)</title><rect x="77.2071%" y="693" width="1.2039%" height="15" fill="rgb(224,175,18)" fg:x="962" fg:w="15"/><text x="77.4571%" y="703.50"></text></g><g><title>engine::session::state::State::close (14 samples, 1.12%)</title><rect x="77.2873%" y="677" width="1.1236%" height="15" fill="rgb(220,129,12)" fg:x="963" fg:w="14"/><text x="77.5373%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (14 samples, 1.12%)</title><rect x="77.2873%" y="661" width="1.1236%" height="15" fill="rgb(210,19,36)" fg:x="963" fg:w="14"/><text x="77.5373%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (12 samples, 0.96%)</title><rect x="77.4478%" y="645" width="0.9631%" height="15" fill="rgb(219,96,14)" fg:x="965" fg:w="12"/><text x="77.6978%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.96%)</title><rect x="77.4478%" y="629" width="0.9631%" height="15" fill="rgb(249,106,1)" fg:x="965" fg:w="12"/><text x="77.6978%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (12 samples, 0.96%)</title><rect x="77.4478%" y="613" width="0.9631%" height="15" fill="rgb(249,155,20)" fg:x="965" fg:w="12"/><text x="77.6978%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="78.1701%" y="597" width="0.2408%" height="15" fill="rgb(244,168,9)" fg:x="974" fg:w="3"/><text x="78.4201%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="78.1701%" y="581" width="0.2408%" height="15" fill="rgb(216,23,50)" fg:x="974" fg:w="3"/><text x="78.4201%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="78.1701%" y="565" width="0.2408%" height="15" fill="rgb(224,219,20)" fg:x="974" fg:w="3"/><text x="78.4201%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.3307%" y="549" width="0.0803%" height="15" fill="rgb(222,156,15)" fg:x="976" fg:w="1"/><text x="78.5807%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="78.3307%" y="533" width="0.0803%" height="15" fill="rgb(231,97,17)" fg:x="976" fg:w="1"/><text x="78.5807%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.3307%" y="517" width="0.0803%" height="15" fill="rgb(218,70,48)" fg:x="976" fg:w="1"/><text x="78.5807%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.3307%" y="501" width="0.0803%" height="15" fill="rgb(212,196,52)" fg:x="976" fg:w="1"/><text x="78.5807%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.3307%" y="485" width="0.0803%" height="15" fill="rgb(243,203,18)" fg:x="976" fg:w="1"/><text x="78.5807%" y="495.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="78.4109%" y="677" width="0.1605%" height="15" fill="rgb(252,125,41)" fg:x="977" fg:w="2"/><text x="78.6609%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="78.4109%" y="661" width="0.1605%" height="15" fill="rgb(223,180,33)" fg:x="977" fg:w="2"/><text x="78.6609%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.4912%" y="645" width="0.0803%" height="15" fill="rgb(254,159,46)" fg:x="978" fg:w="1"/><text x="78.7412%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.4912%" y="629" width="0.0803%" height="15" fill="rgb(254,38,10)" fg:x="978" fg:w="1"/><text x="78.7412%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.4912%" y="613" width="0.0803%" height="15" fill="rgb(208,217,32)" fg:x="978" fg:w="1"/><text x="78.7412%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.4912%" y="597" width="0.0803%" height="15" fill="rgb(221,120,13)" fg:x="978" fg:w="1"/><text x="78.7412%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.4912%" y="581" width="0.0803%" height="15" fill="rgb(246,54,52)" fg:x="978" fg:w="1"/><text x="78.7412%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.5714%" y="677" width="0.0803%" height="15" fill="rgb(242,34,25)" fg:x="979" fg:w="1"/><text x="78.8214%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.5714%" y="661" width="0.0803%" height="15" fill="rgb(247,209,9)" fg:x="979" fg:w="1"/><text x="78.8214%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.5714%" y="645" width="0.0803%" height="15" fill="rgb(228,71,26)" fg:x="979" fg:w="1"/><text x="78.8214%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.5714%" y="629" width="0.0803%" height="15" fill="rgb(222,145,49)" fg:x="979" fg:w="1"/><text x="78.8214%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.5714%" y="613" width="0.0803%" height="15" fill="rgb(218,121,17)" fg:x="979" fg:w="1"/><text x="78.8214%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.5714%" y="597" width="0.0803%" height="15" fill="rgb(244,50,7)" fg:x="979" fg:w="1"/><text x="78.8214%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.5714%" y="581" width="0.0803%" height="15" fill="rgb(246,229,37)" fg:x="979" fg:w="1"/><text x="78.8214%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.5714%" y="565" width="0.0803%" height="15" fill="rgb(225,18,5)" fg:x="979" fg:w="1"/><text x="78.8214%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.5714%" y="549" width="0.0803%" height="15" fill="rgb(213,204,8)" fg:x="979" fg:w="1"/><text x="78.8214%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.5714%" y="533" width="0.0803%" height="15" fill="rgb(238,103,6)" fg:x="979" fg:w="1"/><text x="78.8214%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.5714%" y="517" width="0.0803%" height="15" fill="rgb(222,25,35)" fg:x="979" fg:w="1"/><text x="78.8214%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5714%" y="501" width="0.0803%" height="15" fill="rgb(213,203,35)" fg:x="979" fg:w="1"/><text x="78.8214%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="78.6517%" y="661" width="0.0803%" height="15" fill="rgb(221,79,53)" fg:x="980" fg:w="1"/><text x="78.9017%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="78.6517%" y="645" width="0.0803%" height="15" fill="rgb(243,200,35)" fg:x="980" fg:w="1"/><text x="78.9017%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="78.6517%" y="629" width="0.0803%" height="15" fill="rgb(248,60,25)" fg:x="980" fg:w="1"/><text x="78.9017%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.6517%" y="613" width="0.0803%" height="15" fill="rgb(227,53,46)" fg:x="980" fg:w="1"/><text x="78.9017%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.7319%" y="581" width="0.0803%" height="15" fill="rgb(216,120,32)" fg:x="981" fg:w="1"/><text x="78.9819%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.7319%" y="565" width="0.0803%" height="15" fill="rgb(220,134,1)" fg:x="981" fg:w="1"/><text x="78.9819%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.7319%" y="549" width="0.0803%" height="15" fill="rgb(237,168,5)" fg:x="981" fg:w="1"/><text x="78.9819%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.7319%" y="533" width="0.0803%" height="15" fill="rgb(231,100,33)" fg:x="981" fg:w="1"/><text x="78.9819%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.7319%" y="517" width="0.0803%" height="15" fill="rgb(236,177,47)" fg:x="981" fg:w="1"/><text x="78.9819%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.7319%" y="501" width="0.0803%" height="15" fill="rgb(235,7,49)" fg:x="981" fg:w="1"/><text x="78.9819%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.7319%" y="485" width="0.0803%" height="15" fill="rgb(232,119,22)" fg:x="981" fg:w="1"/><text x="78.9819%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.7319%" y="469" width="0.0803%" height="15" fill="rgb(254,73,53)" fg:x="981" fg:w="1"/><text x="78.9819%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.7319%" y="453" width="0.0803%" height="15" fill="rgb(251,35,20)" fg:x="981" fg:w="1"/><text x="78.9819%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.7319%" y="437" width="0.0803%" height="15" fill="rgb(241,119,20)" fg:x="981" fg:w="1"/><text x="78.9819%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.7319%" y="421" width="0.0803%" height="15" fill="rgb(207,102,14)" fg:x="981" fg:w="1"/><text x="78.9819%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.7319%" y="405" width="0.0803%" height="15" fill="rgb(248,201,50)" fg:x="981" fg:w="1"/><text x="78.9819%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7319%" y="389" width="0.0803%" height="15" fill="rgb(222,185,44)" fg:x="981" fg:w="1"/><text x="78.9819%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="78.7319%" y="597" width="0.1605%" height="15" fill="rgb(218,107,18)" fg:x="981" fg:w="2"/><text x="78.9819%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.8122%" y="581" width="0.0803%" height="15" fill="rgb(237,177,39)" fg:x="982" fg:w="1"/><text x="79.0622%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.8122%" y="565" width="0.0803%" height="15" fill="rgb(246,69,6)" fg:x="982" fg:w="1"/><text x="79.0622%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.8122%" y="549" width="0.0803%" height="15" fill="rgb(234,208,37)" fg:x="982" fg:w="1"/><text x="79.0622%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.8122%" y="533" width="0.0803%" height="15" fill="rgb(225,4,6)" fg:x="982" fg:w="1"/><text x="79.0622%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.8122%" y="517" width="0.0803%" height="15" fill="rgb(233,45,0)" fg:x="982" fg:w="1"/><text x="79.0622%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.8122%" y="501" width="0.0803%" height="15" fill="rgb(226,136,5)" fg:x="982" fg:w="1"/><text x="79.0622%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.8122%" y="485" width="0.0803%" height="15" fill="rgb(211,91,47)" fg:x="982" fg:w="1"/><text x="79.0622%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.8122%" y="469" width="0.0803%" height="15" fill="rgb(242,88,51)" fg:x="982" fg:w="1"/><text x="79.0622%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.8122%" y="453" width="0.0803%" height="15" fill="rgb(230,91,28)" fg:x="982" fg:w="1"/><text x="79.0622%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.8122%" y="437" width="0.0803%" height="15" fill="rgb(254,186,29)" fg:x="982" fg:w="1"/><text x="79.0622%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.8122%" y="421" width="0.0803%" height="15" fill="rgb(238,6,4)" fg:x="982" fg:w="1"/><text x="79.0622%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8925%" y="533" width="0.0803%" height="15" fill="rgb(221,151,16)" fg:x="983" fg:w="1"/><text x="79.1425%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.8925%" y="517" width="0.0803%" height="15" fill="rgb(251,143,52)" fg:x="983" fg:w="1"/><text x="79.1425%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="78.8925%" y="501" width="0.0803%" height="15" fill="rgb(206,90,15)" fg:x="983" fg:w="1"/><text x="79.1425%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="78.7319%" y="645" width="0.3210%" height="15" fill="rgb(218,35,8)" fg:x="981" fg:w="4"/><text x="78.9819%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="78.7319%" y="629" width="0.3210%" height="15" fill="rgb(239,215,6)" fg:x="981" fg:w="4"/><text x="78.9819%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="78.7319%" y="613" width="0.3210%" height="15" fill="rgb(245,116,39)" fg:x="981" fg:w="4"/><text x="78.9819%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.8925%" y="597" width="0.1605%" height="15" fill="rgb(242,65,28)" fg:x="983" fg:w="2"/><text x="79.1425%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.8925%" y="581" width="0.1605%" height="15" fill="rgb(252,132,53)" fg:x="983" fg:w="2"/><text x="79.1425%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="78.8925%" y="565" width="0.1605%" height="15" fill="rgb(224,159,50)" fg:x="983" fg:w="2"/><text x="79.1425%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.8925%" y="549" width="0.1605%" height="15" fill="rgb(224,93,4)" fg:x="983" fg:w="2"/><text x="79.1425%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.9727%" y="533" width="0.0803%" height="15" fill="rgb(208,81,34)" fg:x="984" fg:w="1"/><text x="79.2227%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9727%" y="517" width="0.0803%" height="15" fill="rgb(233,92,54)" fg:x="984" fg:w="1"/><text x="79.2227%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="78.6517%" y="677" width="0.5618%" height="15" fill="rgb(237,21,14)" fg:x="980" fg:w="7"/><text x="78.9017%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="78.7319%" y="661" width="0.4815%" height="15" fill="rgb(249,128,51)" fg:x="981" fg:w="6"/><text x="78.9819%" y="671.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="79.0530%" y="645" width="0.1605%" height="15" fill="rgb(223,129,24)" fg:x="985" fg:w="2"/><text x="79.3030%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="79.0530%" y="629" width="0.1605%" height="15" fill="rgb(231,168,25)" fg:x="985" fg:w="2"/><text x="79.3030%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.1332%" y="613" width="0.0803%" height="15" fill="rgb(224,39,20)" fg:x="986" fg:w="1"/><text x="79.3832%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="79.1332%" y="597" width="0.0803%" height="15" fill="rgb(225,152,53)" fg:x="986" fg:w="1"/><text x="79.3832%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.88%)</title><rect x="78.4109%" y="693" width="0.8828%" height="15" fill="rgb(252,17,24)" fg:x="977" fg:w="11"/><text x="78.6609%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.2135%" y="677" width="0.0803%" height="15" fill="rgb(250,114,30)" fg:x="987" fg:w="1"/><text x="79.4635%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2135%" y="661" width="0.0803%" height="15" fill="rgb(229,5,4)" fg:x="987" fg:w="1"/><text x="79.4635%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.2937%" y="613" width="0.0803%" height="15" fill="rgb(225,176,49)" fg:x="988" fg:w="1"/><text x="79.5437%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="79.2937%" y="597" width="0.0803%" height="15" fill="rgb(224,221,49)" fg:x="988" fg:w="1"/><text x="79.5437%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2937%" y="581" width="0.0803%" height="15" fill="rgb(253,169,27)" fg:x="988" fg:w="1"/><text x="79.5437%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2937%" y="565" width="0.0803%" height="15" fill="rgb(211,206,16)" fg:x="988" fg:w="1"/><text x="79.5437%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.2937%" y="549" width="0.0803%" height="15" fill="rgb(244,87,35)" fg:x="988" fg:w="1"/><text x="79.5437%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2937%" y="533" width="0.0803%" height="15" fill="rgb(246,28,10)" fg:x="988" fg:w="1"/><text x="79.5437%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.2937%" y="517" width="0.0803%" height="15" fill="rgb(229,12,44)" fg:x="988" fg:w="1"/><text x="79.5437%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.2937%" y="501" width="0.0803%" height="15" fill="rgb(210,145,37)" fg:x="988" fg:w="1"/><text x="79.5437%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.3740%" y="581" width="0.0803%" height="15" fill="rgb(227,112,52)" fg:x="989" fg:w="1"/><text x="79.6240%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.3740%" y="565" width="0.0803%" height="15" fill="rgb(238,155,34)" fg:x="989" fg:w="1"/><text x="79.6240%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3740%" y="549" width="0.0803%" height="15" fill="rgb(239,226,36)" fg:x="989" fg:w="1"/><text x="79.6240%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3740%" y="533" width="0.0803%" height="15" fill="rgb(230,16,23)" fg:x="989" fg:w="1"/><text x="79.6240%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.3740%" y="517" width="0.0803%" height="15" fill="rgb(236,171,36)" fg:x="989" fg:w="1"/><text x="79.6240%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.3740%" y="501" width="0.0803%" height="15" fill="rgb(221,22,14)" fg:x="989" fg:w="1"/><text x="79.6240%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.3740%" y="485" width="0.0803%" height="15" fill="rgb(242,43,11)" fg:x="989" fg:w="1"/><text x="79.6240%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="79.3740%" y="469" width="0.0803%" height="15" fill="rgb(232,69,23)" fg:x="989" fg:w="1"/><text x="79.6240%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.3740%" y="453" width="0.0803%" height="15" fill="rgb(216,180,54)" fg:x="989" fg:w="1"/><text x="79.6240%" y="463.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="79.2937%" y="661" width="0.2408%" height="15" fill="rgb(216,5,24)" fg:x="988" fg:w="3"/><text x="79.5437%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="79.2937%" y="645" width="0.2408%" height="15" fill="rgb(225,89,9)" fg:x="988" fg:w="3"/><text x="79.5437%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="79.2937%" y="629" width="0.2408%" height="15" fill="rgb(243,75,33)" fg:x="988" fg:w="3"/><text x="79.5437%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="79.3740%" y="613" width="0.1605%" height="15" fill="rgb(247,141,45)" fg:x="989" fg:w="2"/><text x="79.6240%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="79.3740%" y="597" width="0.1605%" height="15" fill="rgb(232,177,36)" fg:x="989" fg:w="2"/><text x="79.6240%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.4543%" y="581" width="0.0803%" height="15" fill="rgb(219,125,36)" fg:x="990" fg:w="1"/><text x="79.7043%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.4543%" y="565" width="0.0803%" height="15" fill="rgb(227,94,9)" fg:x="990" fg:w="1"/><text x="79.7043%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.4543%" y="549" width="0.0803%" height="15" fill="rgb(240,34,52)" fg:x="990" fg:w="1"/><text x="79.7043%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.4543%" y="533" width="0.0803%" height="15" fill="rgb(216,45,12)" fg:x="990" fg:w="1"/><text x="79.7043%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.4543%" y="517" width="0.0803%" height="15" fill="rgb(246,21,19)" fg:x="990" fg:w="1"/><text x="79.7043%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.4543%" y="501" width="0.0803%" height="15" fill="rgb(213,98,42)" fg:x="990" fg:w="1"/><text x="79.7043%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.4543%" y="485" width="0.0803%" height="15" fill="rgb(250,136,47)" fg:x="990" fg:w="1"/><text x="79.7043%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.4543%" y="469" width="0.0803%" height="15" fill="rgb(251,124,27)" fg:x="990" fg:w="1"/><text x="79.7043%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.4543%" y="453" width="0.0803%" height="15" fill="rgb(229,180,14)" fg:x="990" fg:w="1"/><text x="79.7043%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.4543%" y="437" width="0.0803%" height="15" fill="rgb(245,216,25)" fg:x="990" fg:w="1"/><text x="79.7043%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.4543%" y="421" width="0.0803%" height="15" fill="rgb(251,43,5)" fg:x="990" fg:w="1"/><text x="79.7043%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.4543%" y="405" width="0.0803%" height="15" fill="rgb(250,128,24)" fg:x="990" fg:w="1"/><text x="79.7043%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.4543%" y="389" width="0.0803%" height="15" fill="rgb(217,117,27)" fg:x="990" fg:w="1"/><text x="79.7043%" y="399.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.32%)</title><rect x="79.2937%" y="693" width="0.3210%" height="15" fill="rgb(245,147,4)" fg:x="988" fg:w="4"/><text x="79.5437%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="79.2937%" y="677" width="0.3210%" height="15" fill="rgb(242,201,35)" fg:x="988" fg:w="4"/><text x="79.5437%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="79.5345%" y="661" width="0.0803%" height="15" fill="rgb(218,181,1)" fg:x="991" fg:w="1"/><text x="79.7845%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="79.5345%" y="645" width="0.0803%" height="15" fill="rgb(222,6,29)" fg:x="991" fg:w="1"/><text x="79.7845%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="79.5345%" y="629" width="0.0803%" height="15" fill="rgb(208,186,3)" fg:x="991" fg:w="1"/><text x="79.7845%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.5345%" y="613" width="0.0803%" height="15" fill="rgb(216,36,26)" fg:x="991" fg:w="1"/><text x="79.7845%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="79.5345%" y="597" width="0.0803%" height="15" fill="rgb(248,201,23)" fg:x="991" fg:w="1"/><text x="79.7845%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="79.6148%" y="677" width="0.0803%" height="15" fill="rgb(251,170,31)" fg:x="992" fg:w="1"/><text x="79.8648%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="79.6148%" y="661" width="0.0803%" height="15" fill="rgb(207,110,25)" fg:x="992" fg:w="1"/><text x="79.8648%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="79.6148%" y="645" width="0.0803%" height="15" fill="rgb(250,54,15)" fg:x="992" fg:w="1"/><text x="79.8648%" y="655.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="79.6148%" y="629" width="0.0803%" height="15" fill="rgb(227,68,33)" fg:x="992" fg:w="1"/><text x="79.8648%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.6148%" y="613" width="0.0803%" height="15" fill="rgb(238,34,41)" fg:x="992" fg:w="1"/><text x="79.8648%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="79.6148%" y="597" width="0.0803%" height="15" fill="rgb(220,11,15)" fg:x="992" fg:w="1"/><text x="79.8648%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6950%" y="581" width="0.0803%" height="15" fill="rgb(246,111,35)" fg:x="993" fg:w="1"/><text x="79.9450%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.7753%" y="549" width="0.0803%" height="15" fill="rgb(209,88,53)" fg:x="994" fg:w="1"/><text x="80.0253%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="79.8555%" y="533" width="0.1605%" height="15" fill="rgb(231,185,47)" fg:x="995" fg:w="2"/><text x="80.1055%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.9358%" y="517" width="0.0803%" height="15" fill="rgb(233,154,1)" fg:x="996" fg:w="1"/><text x="80.1858%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.9358%" y="501" width="0.0803%" height="15" fill="rgb(225,15,46)" fg:x="996" fg:w="1"/><text x="80.1858%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="79.8555%" y="549" width="0.2408%" height="15" fill="rgb(211,135,41)" fg:x="995" fg:w="3"/><text x="80.1055%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.0161%" y="533" width="0.0803%" height="15" fill="rgb(208,54,0)" fg:x="997" fg:w="1"/><text x="80.2661%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.0161%" y="517" width="0.0803%" height="15" fill="rgb(244,136,14)" fg:x="997" fg:w="1"/><text x="80.2661%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.0161%" y="501" width="0.0803%" height="15" fill="rgb(241,56,14)" fg:x="997" fg:w="1"/><text x="80.2661%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.0963%" y="533" width="0.0803%" height="15" fill="rgb(205,80,24)" fg:x="998" fg:w="1"/><text x="80.3463%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="80.1766%" y="517" width="0.1605%" height="15" fill="rgb(220,57,4)" fg:x="999" fg:w="2"/><text x="80.4266%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="80.1766%" y="501" width="0.1605%" height="15" fill="rgb(226,193,50)" fg:x="999" fg:w="2"/><text x="80.4266%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="80.1766%" y="485" width="0.1605%" height="15" fill="rgb(231,168,22)" fg:x="999" fg:w="2"/><text x="80.4266%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="80.1766%" y="469" width="0.1605%" height="15" fill="rgb(254,215,14)" fg:x="999" fg:w="2"/><text x="80.4266%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="79.7753%" y="565" width="0.6421%" height="15" fill="rgb(211,115,16)" fg:x="994" fg:w="8"/><text x="80.0253%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="80.0963%" y="549" width="0.3210%" height="15" fill="rgb(236,210,16)" fg:x="998" fg:w="4"/><text x="80.3463%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="80.1766%" y="533" width="0.2408%" height="15" fill="rgb(221,94,12)" fg:x="999" fg:w="3"/><text x="80.4266%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3371%" y="517" width="0.0803%" height="15" fill="rgb(235,218,49)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3371%" y="501" width="0.0803%" height="15" fill="rgb(217,114,14)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.3371%" y="485" width="0.0803%" height="15" fill="rgb(216,145,22)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.3371%" y="469" width="0.0803%" height="15" fill="rgb(217,112,39)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.3371%" y="453" width="0.0803%" height="15" fill="rgb(225,85,32)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.3371%" y="437" width="0.0803%" height="15" fill="rgb(245,209,47)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.4173%" y="485" width="0.0803%" height="15" fill="rgb(218,220,15)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.4173%" y="565" width="0.1605%" height="15" fill="rgb(222,202,31)" fg:x="1002" fg:w="2"/><text x="80.6673%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="80.4173%" y="549" width="0.1605%" height="15" fill="rgb(243,203,4)" fg:x="1002" fg:w="2"/><text x="80.6673%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.4173%" y="533" width="0.1605%" height="15" fill="rgb(237,92,17)" fg:x="1002" fg:w="2"/><text x="80.6673%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.4173%" y="517" width="0.1605%" height="15" fill="rgb(231,119,7)" fg:x="1002" fg:w="2"/><text x="80.6673%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.4173%" y="501" width="0.1605%" height="15" fill="rgb(237,82,41)" fg:x="1002" fg:w="2"/><text x="80.6673%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.4976%" y="485" width="0.0803%" height="15" fill="rgb(226,81,48)" fg:x="1003" fg:w="1"/><text x="80.7476%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="80.6581%" y="517" width="0.1605%" height="15" fill="rgb(234,70,51)" fg:x="1005" fg:w="2"/><text x="80.9081%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.7384%" y="501" width="0.0803%" height="15" fill="rgb(251,86,4)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.7384%" y="485" width="0.0803%" height="15" fill="rgb(244,144,28)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="80.8186%" y="501" width="0.0803%" height="15" fill="rgb(232,161,39)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.8186%" y="485" width="0.0803%" height="15" fill="rgb(247,34,51)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8186%" y="469" width="0.0803%" height="15" fill="rgb(225,132,2)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.8186%" y="453" width="0.0803%" height="15" fill="rgb(209,159,44)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8186%" y="437" width="0.0803%" height="15" fill="rgb(251,214,1)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.8186%" y="421" width="0.0803%" height="15" fill="rgb(247,84,47)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8186%" y="405" width="0.0803%" height="15" fill="rgb(240,111,43)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="415.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.28%)</title><rect x="79.6950%" y="677" width="1.2841%" height="15" fill="rgb(215,214,35)" fg:x="993" fg:w="16"/><text x="79.9450%" y="687.50"></text></g><g><title>engine::session::Session::save_changes (16 samples, 1.28%)</title><rect x="79.6950%" y="661" width="1.2841%" height="15" fill="rgb(248,207,23)" fg:x="993" fg:w="16"/><text x="79.9450%" y="671.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.28%)</title><rect x="79.6950%" y="645" width="1.2841%" height="15" fill="rgb(214,186,4)" fg:x="993" fg:w="16"/><text x="79.9450%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.28%)</title><rect x="79.6950%" y="629" width="1.2841%" height="15" fill="rgb(220,133,22)" fg:x="993" fg:w="16"/><text x="79.9450%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.28%)</title><rect x="79.6950%" y="613" width="1.2841%" height="15" fill="rgb(239,134,19)" fg:x="993" fg:w="16"/><text x="79.9450%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.28%)</title><rect x="79.6950%" y="597" width="1.2841%" height="15" fill="rgb(250,140,9)" fg:x="993" fg:w="16"/><text x="79.9450%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.20%)</title><rect x="79.7753%" y="581" width="1.2039%" height="15" fill="rgb(225,59,14)" fg:x="994" fg:w="15"/><text x="80.0253%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="80.5778%" y="565" width="0.4013%" height="15" fill="rgb(214,152,51)" fg:x="1004" fg:w="5"/><text x="80.8278%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="80.5778%" y="549" width="0.4013%" height="15" fill="rgb(251,227,43)" fg:x="1004" fg:w="5"/><text x="80.8278%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="80.5778%" y="533" width="0.4013%" height="15" fill="rgb(241,96,17)" fg:x="1004" fg:w="5"/><text x="80.8278%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="80.8186%" y="517" width="0.1605%" height="15" fill="rgb(234,198,43)" fg:x="1007" fg:w="2"/><text x="81.0686%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.8989%" y="501" width="0.0803%" height="15" fill="rgb(220,108,29)" fg:x="1008" fg:w="1"/><text x="81.1489%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="80.9791%" y="677" width="0.0803%" height="15" fill="rgb(226,163,33)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="80.9791%" y="661" width="0.0803%" height="15" fill="rgb(205,194,45)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="80.9791%" y="645" width="0.0803%" height="15" fill="rgb(206,143,44)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.9791%" y="629" width="0.0803%" height="15" fill="rgb(236,136,36)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="81.0594%" y="677" width="0.0803%" height="15" fill="rgb(249,172,42)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="81.0594%" y="661" width="0.0803%" height="15" fill="rgb(216,139,23)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="81.0594%" y="645" width="0.0803%" height="15" fill="rgb(207,166,20)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="81.1396%" y="645" width="0.1605%" height="15" fill="rgb(210,209,22)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="81.1396%" y="629" width="0.1605%" height="15" fill="rgb(232,118,20)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="81.1396%" y="613" width="0.1605%" height="15" fill="rgb(238,113,42)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="81.1396%" y="597" width="0.1605%" height="15" fill="rgb(231,42,5)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="81.1396%" y="581" width="0.1605%" height="15" fill="rgb(243,166,24)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="81.1396%" y="565" width="0.1605%" height="15" fill="rgb(237,226,12)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="81.1396%" y="549" width="0.1605%" height="15" fill="rgb(229,133,24)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="81.1396%" y="533" width="0.1605%" height="15" fill="rgb(238,33,43)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="81.1396%" y="517" width="0.1605%" height="15" fill="rgb(227,59,38)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="81.1396%" y="501" width="0.1605%" height="15" fill="rgb(230,97,0)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="81.1396%" y="485" width="0.1605%" height="15" fill="rgb(250,173,50)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="81.1396%" y="469" width="0.1605%" height="15" fill="rgb(240,15,50)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="81.1396%" y="453" width="0.1605%" height="15" fill="rgb(221,93,22)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="81.1396%" y="437" width="0.1605%" height="15" fill="rgb(245,180,53)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.2199%" y="421" width="0.0803%" height="15" fill="rgb(231,88,51)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="81.1396%" y="661" width="0.2408%" height="15" fill="rgb(240,58,21)" fg:x="1011" fg:w="3"/><text x="81.3896%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="81.3002%" y="645" width="0.0803%" height="15" fill="rgb(237,21,10)" fg:x="1013" fg:w="1"/><text x="81.5502%" y="655.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="81.3002%" y="629" width="0.0803%" height="15" fill="rgb(218,43,11)" fg:x="1013" fg:w="1"/><text x="81.5502%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.3002%" y="613" width="0.0803%" height="15" fill="rgb(218,221,29)" fg:x="1013" fg:w="1"/><text x="81.5502%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="81.1396%" y="677" width="0.3210%" height="15" fill="rgb(214,118,42)" fg:x="1011" fg:w="4"/><text x="81.3896%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.3804%" y="661" width="0.0803%" height="15" fill="rgb(251,200,26)" fg:x="1014" fg:w="1"/><text x="81.6304%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.3804%" y="645" width="0.0803%" height="15" fill="rgb(237,101,39)" fg:x="1014" fg:w="1"/><text x="81.6304%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.3804%" y="629" width="0.0803%" height="15" fill="rgb(251,117,11)" fg:x="1014" fg:w="1"/><text x="81.6304%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.3804%" y="613" width="0.0803%" height="15" fill="rgb(216,223,23)" fg:x="1014" fg:w="1"/><text x="81.6304%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.4607%" y="613" width="0.0803%" height="15" fill="rgb(251,54,12)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.4607%" y="597" width="0.0803%" height="15" fill="rgb(254,176,54)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.4607%" y="581" width="0.0803%" height="15" fill="rgb(210,32,8)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.4607%" y="565" width="0.0803%" height="15" fill="rgb(235,52,38)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="81.4607%" y="677" width="0.1605%" height="15" fill="rgb(231,4,44)" fg:x="1015" fg:w="2"/><text x="81.7107%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="81.4607%" y="661" width="0.1605%" height="15" fill="rgb(249,2,32)" fg:x="1015" fg:w="2"/><text x="81.7107%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="81.4607%" y="645" width="0.1605%" height="15" fill="rgb(224,65,26)" fg:x="1015" fg:w="2"/><text x="81.7107%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="81.4607%" y="629" width="0.1605%" height="15" fill="rgb(250,73,40)" fg:x="1015" fg:w="2"/><text x="81.7107%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="81.5409%" y="613" width="0.0803%" height="15" fill="rgb(253,177,16)" fg:x="1016" fg:w="1"/><text x="81.7909%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.5409%" y="597" width="0.0803%" height="15" fill="rgb(217,32,34)" fg:x="1016" fg:w="1"/><text x="81.7909%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.5409%" y="581" width="0.0803%" height="15" fill="rgb(212,7,10)" fg:x="1016" fg:w="1"/><text x="81.7909%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.5409%" y="565" width="0.0803%" height="15" fill="rgb(245,89,8)" fg:x="1016" fg:w="1"/><text x="81.7909%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.5409%" y="549" width="0.0803%" height="15" fill="rgb(237,16,53)" fg:x="1016" fg:w="1"/><text x="81.7909%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5409%" y="533" width="0.0803%" height="15" fill="rgb(250,204,30)" fg:x="1016" fg:w="1"/><text x="81.7909%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (26 samples, 2.09%)</title><rect x="79.6148%" y="693" width="2.0867%" height="15" fill="rgb(208,77,27)" fg:x="992" fg:w="26"/><text x="79.8648%" y="703.50">p..</text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="81.6212%" y="677" width="0.0803%" height="15" fill="rgb(250,204,28)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.6212%" y="661" width="0.0803%" height="15" fill="rgb(244,63,21)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="81.6212%" y="645" width="0.0803%" height="15" fill="rgb(236,85,44)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.6212%" y="629" width="0.0803%" height="15" fill="rgb(215,98,4)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="81.6212%" y="613" width="0.0803%" height="15" fill="rgb(235,38,11)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="81.6212%" y="597" width="0.0803%" height="15" fill="rgb(254,186,25)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.6212%" y="581" width="0.0803%" height="15" fill="rgb(225,55,31)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="591.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="81.6212%" y="565" width="0.0803%" height="15" fill="rgb(211,15,21)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.6212%" y="549" width="0.0803%" height="15" fill="rgb(215,187,41)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.6212%" y="533" width="0.0803%" height="15" fill="rgb(248,69,32)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="81.7014%" y="693" width="0.1605%" height="15" fill="rgb(252,102,52)" fg:x="1018" fg:w="2"/><text x="81.9514%" y="703.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="81.7014%" y="677" width="0.1605%" height="15" fill="rgb(253,140,32)" fg:x="1018" fg:w="2"/><text x="81.9514%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="81.7014%" y="661" width="0.1605%" height="15" fill="rgb(216,56,42)" fg:x="1018" fg:w="2"/><text x="81.9514%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="81.7817%" y="645" width="0.0803%" height="15" fill="rgb(216,184,14)" fg:x="1019" fg:w="1"/><text x="82.0317%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.7817%" y="629" width="0.0803%" height="15" fill="rgb(237,187,27)" fg:x="1019" fg:w="1"/><text x="82.0317%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.7817%" y="613" width="0.0803%" height="15" fill="rgb(219,65,3)" fg:x="1019" fg:w="1"/><text x="82.0317%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="81.8620%" y="661" width="0.0803%" height="15" fill="rgb(245,83,25)" fg:x="1020" fg:w="1"/><text x="82.1120%" y="671.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="81.8620%" y="645" width="0.0803%" height="15" fill="rgb(214,205,45)" fg:x="1020" fg:w="1"/><text x="82.1120%" y="655.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="81.8620%" y="629" width="0.0803%" height="15" fill="rgb(241,20,18)" fg:x="1020" fg:w="1"/><text x="82.1120%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8620%" y="613" width="0.0803%" height="15" fill="rgb(232,163,23)" fg:x="1020" fg:w="1"/><text x="82.1120%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.9422%" y="661" width="0.0803%" height="15" fill="rgb(214,5,46)" fg:x="1021" fg:w="1"/><text x="82.1922%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.9422%" y="645" width="0.0803%" height="15" fill="rgb(229,78,17)" fg:x="1021" fg:w="1"/><text x="82.1922%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="81.9422%" y="629" width="0.0803%" height="15" fill="rgb(248,89,10)" fg:x="1021" fg:w="1"/><text x="82.1922%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.9422%" y="613" width="0.0803%" height="15" fill="rgb(248,54,15)" fg:x="1021" fg:w="1"/><text x="82.1922%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="82.0225%" y="645" width="0.0803%" height="15" fill="rgb(223,116,6)" fg:x="1022" fg:w="1"/><text x="82.2725%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="82.0225%" y="629" width="0.0803%" height="15" fill="rgb(205,125,38)" fg:x="1022" fg:w="1"/><text x="82.2725%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.0225%" y="613" width="0.0803%" height="15" fill="rgb(251,78,38)" fg:x="1022" fg:w="1"/><text x="82.2725%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="82.0225%" y="661" width="0.1605%" height="15" fill="rgb(253,78,28)" fg:x="1022" fg:w="2"/><text x="82.2725%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="82.1027%" y="645" width="0.0803%" height="15" fill="rgb(209,120,3)" fg:x="1023" fg:w="1"/><text x="82.3527%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="82.1027%" y="629" width="0.0803%" height="15" fill="rgb(238,229,9)" fg:x="1023" fg:w="1"/><text x="82.3527%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.1027%" y="613" width="0.0803%" height="15" fill="rgb(253,159,18)" fg:x="1023" fg:w="1"/><text x="82.3527%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.1027%" y="597" width="0.0803%" height="15" fill="rgb(244,42,34)" fg:x="1023" fg:w="1"/><text x="82.3527%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.40%)</title><rect x="81.8620%" y="693" width="0.4013%" height="15" fill="rgb(224,8,7)" fg:x="1020" fg:w="5"/><text x="82.1120%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.40%)</title><rect x="81.8620%" y="677" width="0.4013%" height="15" fill="rgb(210,201,45)" fg:x="1020" fg:w="5"/><text x="82.1120%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="82.1830%" y="661" width="0.0803%" height="15" fill="rgb(252,185,21)" fg:x="1024" fg:w="1"/><text x="82.4330%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="82.1830%" y="645" width="0.0803%" height="15" fill="rgb(223,131,1)" fg:x="1024" fg:w="1"/><text x="82.4330%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="82.2632%" y="661" width="0.0803%" height="15" fill="rgb(245,141,16)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.2632%" y="645" width="0.0803%" height="15" fill="rgb(229,55,45)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.2632%" y="629" width="0.0803%" height="15" fill="rgb(208,92,15)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.2632%" y="613" width="0.0803%" height="15" fill="rgb(234,185,47)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.2632%" y="597" width="0.0803%" height="15" fill="rgb(253,104,50)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.2632%" y="581" width="0.0803%" height="15" fill="rgb(205,70,7)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.2632%" y="565" width="0.0803%" height="15" fill="rgb(240,178,43)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.2632%" y="549" width="0.0803%" height="15" fill="rgb(214,112,2)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="82.3435%" y="629" width="0.0803%" height="15" fill="rgb(206,46,17)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="82.3435%" y="613" width="0.0803%" height="15" fill="rgb(225,220,16)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="82.3435%" y="597" width="0.0803%" height="15" fill="rgb(238,65,40)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="82.3435%" y="581" width="0.0803%" height="15" fill="rgb(230,151,21)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="82.3435%" y="565" width="0.0803%" height="15" fill="rgb(218,58,49)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.3435%" y="549" width="0.0803%" height="15" fill="rgb(219,179,14)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.3435%" y="533" width="0.0803%" height="15" fill="rgb(223,72,1)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.3435%" y="517" width="0.0803%" height="15" fill="rgb(238,126,10)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="82.3435%" y="661" width="0.1605%" height="15" fill="rgb(224,206,38)" fg:x="1026" fg:w="2"/><text x="82.5935%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="82.3435%" y="645" width="0.1605%" height="15" fill="rgb(212,201,54)" fg:x="1026" fg:w="2"/><text x="82.5935%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.4238%" y="629" width="0.0803%" height="15" fill="rgb(218,154,48)" fg:x="1027" fg:w="1"/><text x="82.6738%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.4238%" y="613" width="0.0803%" height="15" fill="rgb(232,93,24)" fg:x="1027" fg:w="1"/><text x="82.6738%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.4238%" y="597" width="0.0803%" height="15" fill="rgb(245,30,21)" fg:x="1027" fg:w="1"/><text x="82.6738%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.4238%" y="581" width="0.0803%" height="15" fill="rgb(242,148,29)" fg:x="1027" fg:w="1"/><text x="82.6738%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.4238%" y="565" width="0.0803%" height="15" fill="rgb(244,153,54)" fg:x="1027" fg:w="1"/><text x="82.6738%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (68 samples, 5.46%)</title><rect x="77.1268%" y="709" width="5.4575%" height="15" fill="rgb(252,87,22)" fg:x="961" fg:w="68"/><text x="77.3768%" y="719.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (4 samples, 0.32%)</title><rect x="82.2632%" y="693" width="0.3210%" height="15" fill="rgb(210,51,29)" fg:x="1025" fg:w="4"/><text x="82.5132%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="82.2632%" y="677" width="0.3210%" height="15" fill="rgb(242,136,47)" fg:x="1025" fg:w="4"/><text x="82.5132%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.5040%" y="661" width="0.0803%" height="15" fill="rgb(238,68,4)" fg:x="1028" fg:w="1"/><text x="82.7540%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.5040%" y="645" width="0.0803%" height="15" fill="rgb(242,161,30)" fg:x="1028" fg:w="1"/><text x="82.7540%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.5843%" y="709" width="0.0803%" height="15" fill="rgb(218,58,44)" fg:x="1029" fg:w="1"/><text x="82.8343%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.5843%" y="693" width="0.0803%" height="15" fill="rgb(252,125,32)" fg:x="1029" fg:w="1"/><text x="82.8343%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="82.6645%" y="693" width="0.0803%" height="15" fill="rgb(219,178,0)" fg:x="1030" fg:w="1"/><text x="82.9145%" y="703.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="82.6645%" y="677" width="0.0803%" height="15" fill="rgb(213,152,7)" fg:x="1030" fg:w="1"/><text x="82.9145%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.6645%" y="661" width="0.0803%" height="15" fill="rgb(249,109,34)" fg:x="1030" fg:w="1"/><text x="82.9145%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="82.7448%" y="661" width="0.0803%" height="15" fill="rgb(232,96,21)" fg:x="1031" fg:w="1"/><text x="82.9948%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="82.7448%" y="645" width="0.0803%" height="15" fill="rgb(228,27,39)" fg:x="1031" fg:w="1"/><text x="82.9948%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="82.9053%" y="613" width="0.0803%" height="15" fill="rgb(211,182,52)" fg:x="1033" fg:w="1"/><text x="83.1553%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="82.9053%" y="597" width="0.0803%" height="15" fill="rgb(234,178,38)" fg:x="1033" fg:w="1"/><text x="83.1553%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="82.9053%" y="581" width="0.0803%" height="15" fill="rgb(221,111,3)" fg:x="1033" fg:w="1"/><text x="83.1553%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="82.9053%" y="565" width="0.0803%" height="15" fill="rgb(228,175,21)" fg:x="1033" fg:w="1"/><text x="83.1553%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.9053%" y="549" width="0.0803%" height="15" fill="rgb(228,174,43)" fg:x="1033" fg:w="1"/><text x="83.1553%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.9053%" y="533" width="0.0803%" height="15" fill="rgb(211,191,0)" fg:x="1033" fg:w="1"/><text x="83.1553%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.9053%" y="517" width="0.0803%" height="15" fill="rgb(253,117,3)" fg:x="1033" fg:w="1"/><text x="83.1553%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9053%" y="501" width="0.0803%" height="15" fill="rgb(241,127,19)" fg:x="1033" fg:w="1"/><text x="83.1553%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.9856%" y="597" width="0.0803%" height="15" fill="rgb(218,103,12)" fg:x="1034" fg:w="1"/><text x="83.2356%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="83.0658%" y="581" width="0.0803%" height="15" fill="rgb(236,214,43)" fg:x="1035" fg:w="1"/><text x="83.3158%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.0658%" y="565" width="0.0803%" height="15" fill="rgb(244,144,19)" fg:x="1035" fg:w="1"/><text x="83.3158%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="83.1461%" y="565" width="0.0803%" height="15" fill="rgb(246,188,10)" fg:x="1036" fg:w="1"/><text x="83.3961%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.2263%" y="533" width="0.0803%" height="15" fill="rgb(212,193,33)" fg:x="1037" fg:w="1"/><text x="83.4763%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="83.2263%" y="565" width="0.1605%" height="15" fill="rgb(241,51,29)" fg:x="1037" fg:w="2"/><text x="83.4763%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="83.2263%" y="549" width="0.1605%" height="15" fill="rgb(211,58,19)" fg:x="1037" fg:w="2"/><text x="83.4763%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.3066%" y="533" width="0.0803%" height="15" fill="rgb(229,111,26)" fg:x="1038" fg:w="1"/><text x="83.5566%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.4671%" y="533" width="0.0803%" height="15" fill="rgb(213,115,40)" fg:x="1040" fg:w="1"/><text x="83.7171%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.4671%" y="517" width="0.0803%" height="15" fill="rgb(209,56,44)" fg:x="1040" fg:w="1"/><text x="83.7171%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.4671%" y="501" width="0.0803%" height="15" fill="rgb(230,108,32)" fg:x="1040" fg:w="1"/><text x="83.7171%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.4671%" y="485" width="0.0803%" height="15" fill="rgb(216,165,31)" fg:x="1040" fg:w="1"/><text x="83.7171%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.5474%" y="533" width="0.0803%" height="15" fill="rgb(218,122,21)" fg:x="1041" fg:w="1"/><text x="83.7974%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="82.9856%" y="613" width="0.7223%" height="15" fill="rgb(223,224,47)" fg:x="1034" fg:w="9"/><text x="83.2356%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="83.0658%" y="597" width="0.6421%" height="15" fill="rgb(238,102,44)" fg:x="1035" fg:w="8"/><text x="83.3158%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="83.1461%" y="581" width="0.5618%" height="15" fill="rgb(236,46,40)" fg:x="1036" fg:w="7"/><text x="83.3961%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="83.3868%" y="565" width="0.3210%" height="15" fill="rgb(247,202,50)" fg:x="1039" fg:w="4"/><text x="83.6368%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="83.4671%" y="549" width="0.2408%" height="15" fill="rgb(209,99,20)" fg:x="1040" fg:w="3"/><text x="83.7171%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.6276%" y="533" width="0.0803%" height="15" fill="rgb(252,27,34)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.7079%" y="565" width="0.0803%" height="15" fill="rgb(215,206,23)" fg:x="1043" fg:w="1"/><text x="83.9579%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.7079%" y="613" width="0.1605%" height="15" fill="rgb(212,135,36)" fg:x="1043" fg:w="2"/><text x="83.9579%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="83.7079%" y="597" width="0.1605%" height="15" fill="rgb(240,189,1)" fg:x="1043" fg:w="2"/><text x="83.9579%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.7079%" y="581" width="0.1605%" height="15" fill="rgb(242,56,20)" fg:x="1043" fg:w="2"/><text x="83.9579%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.7881%" y="565" width="0.0803%" height="15" fill="rgb(247,132,33)" fg:x="1044" fg:w="1"/><text x="84.0381%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.8684%" y="565" width="0.0803%" height="15" fill="rgb(208,149,11)" fg:x="1045" fg:w="1"/><text x="84.1184%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.9486%" y="549" width="0.0803%" height="15" fill="rgb(211,33,11)" fg:x="1046" fg:w="1"/><text x="84.1986%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="83.8684%" y="581" width="0.2408%" height="15" fill="rgb(221,29,38)" fg:x="1045" fg:w="3"/><text x="84.1184%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.9486%" y="565" width="0.1605%" height="15" fill="rgb(206,182,49)" fg:x="1046" fg:w="2"/><text x="84.1986%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="84.0289%" y="549" width="0.0803%" height="15" fill="rgb(216,140,1)" fg:x="1047" fg:w="1"/><text x="84.2789%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="83.8684%" y="597" width="0.3210%" height="15" fill="rgb(232,57,40)" fg:x="1045" fg:w="4"/><text x="84.1184%" y="607.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="84.1091%" y="581" width="0.0803%" height="15" fill="rgb(224,186,18)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="84.1091%" y="565" width="0.0803%" height="15" fill="rgb(215,121,11)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="575.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="84.1091%" y="549" width="0.0803%" height="15" fill="rgb(245,147,10)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="84.1894%" y="565" width="0.1605%" height="15" fill="rgb(238,153,13)" fg:x="1049" fg:w="2"/><text x="84.4394%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="84.2697%" y="549" width="0.0803%" height="15" fill="rgb(233,108,0)" fg:x="1050" fg:w="1"/><text x="84.5197%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="84.3499%" y="565" width="0.0803%" height="15" fill="rgb(212,157,17)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.3499%" y="549" width="0.0803%" height="15" fill="rgb(225,213,38)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="84.3499%" y="533" width="0.0803%" height="15" fill="rgb(248,16,11)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="84.4302%" y="565" width="0.0803%" height="15" fill="rgb(241,33,4)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.4302%" y="549" width="0.0803%" height="15" fill="rgb(222,26,43)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="84.5907%" y="517" width="0.1605%" height="15" fill="rgb(243,29,36)" fg:x="1054" fg:w="2"/><text x="84.8407%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.6709%" y="501" width="0.0803%" height="15" fill="rgb(241,9,27)" fg:x="1055" fg:w="1"/><text x="84.9209%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.9117%" y="469" width="0.0803%" height="15" fill="rgb(205,117,26)" fg:x="1058" fg:w="1"/><text x="85.1617%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="84.9117%" y="453" width="0.0803%" height="15" fill="rgb(209,80,39)" fg:x="1058" fg:w="1"/><text x="85.1617%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="84.7512%" y="517" width="0.3210%" height="15" fill="rgb(239,155,6)" fg:x="1056" fg:w="4"/><text x="85.0012%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="84.7512%" y="501" width="0.3210%" height="15" fill="rgb(212,104,12)" fg:x="1056" fg:w="4"/><text x="85.0012%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="84.7512%" y="485" width="0.3210%" height="15" fill="rgb(234,204,3)" fg:x="1056" fg:w="4"/><text x="85.0012%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="84.9920%" y="469" width="0.0803%" height="15" fill="rgb(251,218,7)" fg:x="1059" fg:w="1"/><text x="85.2420%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.2327%" y="485" width="0.0803%" height="15" fill="rgb(221,81,32)" fg:x="1062" fg:w="1"/><text x="85.4827%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.80%)</title><rect x="84.5907%" y="533" width="0.8026%" height="15" fill="rgb(214,152,26)" fg:x="1054" fg:w="10"/><text x="84.8407%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="85.0722%" y="517" width="0.3210%" height="15" fill="rgb(223,22,3)" fg:x="1060" fg:w="4"/><text x="85.3222%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="85.1525%" y="501" width="0.2408%" height="15" fill="rgb(207,174,7)" fg:x="1061" fg:w="3"/><text x="85.4025%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="85.3130%" y="485" width="0.0803%" height="15" fill="rgb(224,19,52)" fg:x="1063" fg:w="1"/><text x="85.5630%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="85.3130%" y="469" width="0.0803%" height="15" fill="rgb(228,24,14)" fg:x="1063" fg:w="1"/><text x="85.5630%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.3130%" y="453" width="0.0803%" height="15" fill="rgb(230,153,43)" fg:x="1063" fg:w="1"/><text x="85.5630%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3130%" y="437" width="0.0803%" height="15" fill="rgb(231,106,12)" fg:x="1063" fg:w="1"/><text x="85.5630%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.28%)</title><rect x="84.1894%" y="597" width="1.2841%" height="15" fill="rgb(215,92,2)" fg:x="1049" fg:w="16"/><text x="84.4394%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.28%)</title><rect x="84.1894%" y="581" width="1.2841%" height="15" fill="rgb(249,143,25)" fg:x="1049" fg:w="16"/><text x="84.4394%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.96%)</title><rect x="84.5104%" y="565" width="0.9631%" height="15" fill="rgb(252,7,35)" fg:x="1053" fg:w="12"/><text x="84.7604%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (12 samples, 0.96%)</title><rect x="84.5104%" y="549" width="0.9631%" height="15" fill="rgb(216,69,40)" fg:x="1053" fg:w="12"/><text x="84.7604%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="85.3933%" y="533" width="0.0803%" height="15" fill="rgb(240,36,33)" fg:x="1064" fg:w="1"/><text x="85.6433%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3933%" y="517" width="0.0803%" height="15" fill="rgb(231,128,14)" fg:x="1064" fg:w="1"/><text x="85.6433%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.6340%" y="421" width="0.0803%" height="15" fill="rgb(245,143,14)" fg:x="1067" fg:w="1"/><text x="85.8840%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.6340%" y="405" width="0.0803%" height="15" fill="rgb(222,130,28)" fg:x="1067" fg:w="1"/><text x="85.8840%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.6340%" y="389" width="0.0803%" height="15" fill="rgb(212,10,48)" fg:x="1067" fg:w="1"/><text x="85.8840%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.6340%" y="373" width="0.0803%" height="15" fill="rgb(254,118,45)" fg:x="1067" fg:w="1"/><text x="85.8840%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.6340%" y="357" width="0.0803%" height="15" fill="rgb(228,6,45)" fg:x="1067" fg:w="1"/><text x="85.8840%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="85.6340%" y="453" width="0.1605%" height="15" fill="rgb(241,18,35)" fg:x="1067" fg:w="2"/><text x="85.8840%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="85.6340%" y="437" width="0.1605%" height="15" fill="rgb(227,214,53)" fg:x="1067" fg:w="2"/><text x="85.8840%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.7143%" y="421" width="0.0803%" height="15" fill="rgb(224,107,51)" fg:x="1068" fg:w="1"/><text x="85.9643%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.7143%" y="405" width="0.0803%" height="15" fill="rgb(248,60,28)" fg:x="1068" fg:w="1"/><text x="85.9643%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="85.4735%" y="533" width="0.4815%" height="15" fill="rgb(249,101,23)" fg:x="1065" fg:w="6"/><text x="85.7235%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="85.4735%" y="517" width="0.4815%" height="15" fill="rgb(228,51,19)" fg:x="1065" fg:w="6"/><text x="85.7235%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="85.4735%" y="501" width="0.4815%" height="15" fill="rgb(213,20,6)" fg:x="1065" fg:w="6"/><text x="85.7235%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="85.5538%" y="485" width="0.4013%" height="15" fill="rgb(212,124,10)" fg:x="1066" fg:w="5"/><text x="85.8038%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="85.5538%" y="469" width="0.4013%" height="15" fill="rgb(248,3,40)" fg:x="1066" fg:w="5"/><text x="85.8038%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="85.7945%" y="453" width="0.1605%" height="15" fill="rgb(223,178,23)" fg:x="1069" fg:w="2"/><text x="86.0445%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="85.7945%" y="437" width="0.1605%" height="15" fill="rgb(240,132,45)" fg:x="1069" fg:w="2"/><text x="86.0445%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="85.7945%" y="421" width="0.1605%" height="15" fill="rgb(245,164,36)" fg:x="1069" fg:w="2"/><text x="86.0445%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="85.7945%" y="405" width="0.1605%" height="15" fill="rgb(231,188,53)" fg:x="1069" fg:w="2"/><text x="86.0445%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.8748%" y="389" width="0.0803%" height="15" fill="rgb(237,198,39)" fg:x="1070" fg:w="1"/><text x="86.1248%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.8748%" y="373" width="0.0803%" height="15" fill="rgb(223,120,35)" fg:x="1070" fg:w="1"/><text x="86.1248%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.9551%" y="533" width="0.0803%" height="15" fill="rgb(253,107,49)" fg:x="1071" fg:w="1"/><text x="86.2051%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="85.9551%" y="517" width="0.0803%" height="15" fill="rgb(216,44,31)" fg:x="1071" fg:w="1"/><text x="86.2051%" y="527.50"></text></g><g><title>engine::session::Session::close (43 samples, 3.45%)</title><rect x="82.6645%" y="709" width="3.4510%" height="15" fill="rgb(253,87,21)" fg:x="1030" fg:w="43"/><text x="82.9145%" y="719.50">eng..</text></g><g><title>engine::session::state::State::close (42 samples, 3.37%)</title><rect x="82.7448%" y="693" width="3.3708%" height="15" fill="rgb(226,18,2)" fg:x="1031" fg:w="42"/><text x="82.9948%" y="703.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.37%)</title><rect x="82.7448%" y="677" width="3.3708%" height="15" fill="rgb(216,8,46)" fg:x="1031" fg:w="42"/><text x="82.9948%" y="687.50">eng..</text></g><g><title>core::iter::adapters::try_process (41 samples, 3.29%)</title><rect x="82.8250%" y="661" width="3.2905%" height="15" fill="rgb(226,140,39)" fg:x="1032" fg:w="41"/><text x="83.0750%" y="671.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 3.29%)</title><rect x="82.8250%" y="645" width="3.2905%" height="15" fill="rgb(221,194,54)" fg:x="1032" fg:w="41"/><text x="83.0750%" y="655.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (41 samples, 3.29%)</title><rect x="82.8250%" y="629" width="3.2905%" height="15" fill="rgb(213,92,11)" fg:x="1032" fg:w="41"/><text x="83.0750%" y="639.50">eng..</text></g><g><title>kernel::model::any_entity_changes (28 samples, 2.25%)</title><rect x="83.8684%" y="613" width="2.2472%" height="15" fill="rgb(229,162,46)" fg:x="1045" fg:w="28"/><text x="84.1184%" y="623.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="85.4735%" y="597" width="0.6421%" height="15" fill="rgb(214,111,36)" fg:x="1065" fg:w="8"/><text x="85.7235%" y="607.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="85.4735%" y="581" width="0.6421%" height="15" fill="rgb(207,6,21)" fg:x="1065" fg:w="8"/><text x="85.7235%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="85.4735%" y="565" width="0.6421%" height="15" fill="rgb(213,127,38)" fg:x="1065" fg:w="8"/><text x="85.7235%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="85.4735%" y="549" width="0.6421%" height="15" fill="rgb(238,118,32)" fg:x="1065" fg:w="8"/><text x="85.7235%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.0353%" y="533" width="0.0803%" height="15" fill="rgb(240,139,39)" fg:x="1072" fg:w="1"/><text x="86.2853%" y="543.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="86.1156%" y="677" width="0.0803%" height="15" fill="rgb(235,10,37)" fg:x="1073" fg:w="1"/><text x="86.3656%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="86.1156%" y="661" width="0.0803%" height="15" fill="rgb(249,171,38)" fg:x="1073" fg:w="1"/><text x="86.3656%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="86.1156%" y="645" width="0.0803%" height="15" fill="rgb(242,144,32)" fg:x="1073" fg:w="1"/><text x="86.3656%" y="655.50"></text></g><g><title>&lt;plugins_rune::parser::DiagnosticsActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="86.1156%" y="629" width="0.0803%" height="15" fill="rgb(217,117,21)" fg:x="1073" fg:w="1"/><text x="86.3656%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="86.1958%" y="661" width="0.0803%" height="15" fill="rgb(249,87,1)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="86.1958%" y="645" width="0.0803%" height="15" fill="rgb(248,196,48)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="86.1958%" y="629" width="0.0803%" height="15" fill="rgb(251,206,33)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="86.1958%" y="613" width="0.0803%" height="15" fill="rgb(232,141,28)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="86.1958%" y="597" width="0.0803%" height="15" fill="rgb(209,167,14)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="86.1958%" y="581" width="0.0803%" height="15" fill="rgb(225,11,50)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="86.1958%" y="565" width="0.0803%" height="15" fill="rgb(209,50,20)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="86.1958%" y="549" width="0.0803%" height="15" fill="rgb(212,17,46)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="86.1958%" y="533" width="0.0803%" height="15" fill="rgb(216,101,39)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="86.1958%" y="517" width="0.0803%" height="15" fill="rgb(212,228,48)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish_non_exhaustive (1 samples, 0.08%)</title><rect x="86.1958%" y="501" width="0.0803%" height="15" fill="rgb(250,6,50)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="511.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="86.2761%" y="661" width="0.0803%" height="15" fill="rgb(250,160,48)" fg:x="1075" fg:w="1"/><text x="86.5261%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.6774%" y="341" width="0.0803%" height="15" fill="rgb(244,216,33)" fg:x="1080" fg:w="1"/><text x="86.9274%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.6774%" y="325" width="0.0803%" height="15" fill="rgb(207,157,5)" fg:x="1080" fg:w="1"/><text x="86.9274%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="86.7576%" y="341" width="0.0803%" height="15" fill="rgb(228,199,8)" fg:x="1081" fg:w="1"/><text x="87.0076%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="86.6774%" y="357" width="0.2408%" height="15" fill="rgb(227,80,20)" fg:x="1080" fg:w="3"/><text x="86.9274%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.8379%" y="341" width="0.0803%" height="15" fill="rgb(222,9,33)" fg:x="1082" fg:w="1"/><text x="87.0879%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.8379%" y="325" width="0.0803%" height="15" fill="rgb(239,44,28)" fg:x="1082" fg:w="1"/><text x="87.0879%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="86.8379%" y="309" width="0.0803%" height="15" fill="rgb(249,187,43)" fg:x="1082" fg:w="1"/><text x="87.0879%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.8379%" y="293" width="0.0803%" height="15" fill="rgb(216,141,28)" fg:x="1082" fg:w="1"/><text x="87.0879%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.8379%" y="277" width="0.0803%" height="15" fill="rgb(230,154,53)" fg:x="1082" fg:w="1"/><text x="87.0879%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.8379%" y="261" width="0.0803%" height="15" fill="rgb(227,82,4)" fg:x="1082" fg:w="1"/><text x="87.0879%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.8379%" y="245" width="0.0803%" height="15" fill="rgb(220,107,16)" fg:x="1082" fg:w="1"/><text x="87.0879%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.9984%" y="325" width="0.0803%" height="15" fill="rgb(207,187,2)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.9984%" y="309" width="0.0803%" height="15" fill="rgb(210,162,52)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.9984%" y="293" width="0.0803%" height="15" fill="rgb(217,216,49)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="86.9984%" y="277" width="0.0803%" height="15" fill="rgb(218,146,49)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="86.9984%" y="261" width="0.0803%" height="15" fill="rgb(216,55,40)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="86.9984%" y="245" width="0.0803%" height="15" fill="rgb(208,196,21)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="86.9984%" y="229" width="0.0803%" height="15" fill="rgb(242,117,42)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="86.9984%" y="213" width="0.0803%" height="15" fill="rgb(210,11,23)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="87.0787%" y="293" width="0.0803%" height="15" fill="rgb(217,110,2)" fg:x="1085" fg:w="1"/><text x="87.3287%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.0787%" y="277" width="0.0803%" height="15" fill="rgb(229,77,54)" fg:x="1085" fg:w="1"/><text x="87.3287%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.1589%" y="261" width="0.0803%" height="15" fill="rgb(218,53,16)" fg:x="1086" fg:w="1"/><text x="87.4089%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="86.9181%" y="341" width="0.4013%" height="15" fill="rgb(215,38,13)" fg:x="1083" fg:w="5"/><text x="87.1681%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="87.0787%" y="325" width="0.2408%" height="15" fill="rgb(235,42,18)" fg:x="1085" fg:w="3"/><text x="87.3287%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="87.0787%" y="309" width="0.2408%" height="15" fill="rgb(219,66,54)" fg:x="1085" fg:w="3"/><text x="87.3287%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="87.1589%" y="293" width="0.1605%" height="15" fill="rgb(222,205,4)" fg:x="1086" fg:w="2"/><text x="87.4089%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.1589%" y="277" width="0.1605%" height="15" fill="rgb(227,213,46)" fg:x="1086" fg:w="2"/><text x="87.4089%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.2392%" y="261" width="0.0803%" height="15" fill="rgb(250,145,42)" fg:x="1087" fg:w="1"/><text x="87.4892%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.2392%" y="245" width="0.0803%" height="15" fill="rgb(219,15,2)" fg:x="1087" fg:w="1"/><text x="87.4892%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::gid (6 samples, 0.48%)</title><rect x="86.9181%" y="357" width="0.4815%" height="15" fill="rgb(231,181,52)" fg:x="1083" fg:w="6"/><text x="87.1681%" y="367.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="87.3194%" y="341" width="0.0803%" height="15" fill="rgb(235,1,42)" fg:x="1088" fg:w="1"/><text x="87.5694%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="87.3194%" y="325" width="0.0803%" height="15" fill="rgb(249,88,27)" fg:x="1088" fg:w="1"/><text x="87.5694%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="87.3997%" y="277" width="0.2408%" height="15" fill="rgb(235,145,16)" fg:x="1089" fg:w="3"/><text x="87.6497%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="87.3997%" y="261" width="0.2408%" height="15" fill="rgb(237,114,19)" fg:x="1089" fg:w="3"/><text x="87.6497%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="87.3997%" y="245" width="0.2408%" height="15" fill="rgb(238,51,50)" fg:x="1089" fg:w="3"/><text x="87.6497%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="87.3997%" y="229" width="0.2408%" height="15" fill="rgb(205,194,25)" fg:x="1089" fg:w="3"/><text x="87.6497%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="87.3997%" y="213" width="0.2408%" height="15" fill="rgb(215,203,17)" fg:x="1089" fg:w="3"/><text x="87.6497%" y="223.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="87.5602%" y="197" width="0.0803%" height="15" fill="rgb(233,112,49)" fg:x="1091" fg:w="1"/><text x="87.8102%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="87.6404%" y="213" width="0.5618%" height="15" fill="rgb(241,130,26)" fg:x="1092" fg:w="7"/><text x="87.8904%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="87.6404%" y="197" width="0.5618%" height="15" fill="rgb(252,223,19)" fg:x="1092" fg:w="7"/><text x="87.8904%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="88.2022%" y="213" width="0.0803%" height="15" fill="rgb(211,95,25)" fg:x="1099" fg:w="1"/><text x="88.4522%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="88.2022%" y="197" width="0.0803%" height="15" fill="rgb(251,182,27)" fg:x="1099" fg:w="1"/><text x="88.4522%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="88.3628%" y="149" width="0.0803%" height="15" fill="rgb(238,24,4)" fg:x="1101" fg:w="1"/><text x="88.6128%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="88.4430%" y="149" width="0.0803%" height="15" fill="rgb(224,220,25)" fg:x="1102" fg:w="1"/><text x="88.6930%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="88.5233%" y="149" width="0.0803%" height="15" fill="rgb(239,133,26)" fg:x="1103" fg:w="1"/><text x="88.7733%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 1.44%)</title><rect x="88.2825%" y="197" width="1.4446%" height="15" fill="rgb(211,94,48)" fg:x="1100" fg:w="18"/><text x="88.5325%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (18 samples, 1.44%)</title><rect x="88.2825%" y="181" width="1.4446%" height="15" fill="rgb(239,87,6)" fg:x="1100" fg:w="18"/><text x="88.5325%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (18 samples, 1.44%)</title><rect x="88.2825%" y="165" width="1.4446%" height="15" fill="rgb(227,62,0)" fg:x="1100" fg:w="18"/><text x="88.5325%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (14 samples, 1.12%)</title><rect x="88.6035%" y="149" width="1.1236%" height="15" fill="rgb(211,226,4)" fg:x="1104" fg:w="14"/><text x="88.8535%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (14 samples, 1.12%)</title><rect x="88.6035%" y="133" width="1.1236%" height="15" fill="rgb(253,38,52)" fg:x="1104" fg:w="14"/><text x="88.8535%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (14 samples, 1.12%)</title><rect x="88.6035%" y="117" width="1.1236%" height="15" fill="rgb(229,126,40)" fg:x="1104" fg:w="14"/><text x="88.8535%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.7271%" y="181" width="0.0803%" height="15" fill="rgb(229,165,44)" fg:x="1118" fg:w="1"/><text x="89.9771%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="89.8074%" y="181" width="0.1605%" height="15" fill="rgb(247,95,47)" fg:x="1119" fg:w="2"/><text x="90.0574%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="89.8074%" y="165" width="0.1605%" height="15" fill="rgb(216,140,30)" fg:x="1119" fg:w="2"/><text x="90.0574%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.8074%" y="149" width="0.1605%" height="15" fill="rgb(246,214,8)" fg:x="1119" fg:w="2"/><text x="90.0574%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.8074%" y="133" width="0.1605%" height="15" fill="rgb(227,224,15)" fg:x="1119" fg:w="2"/><text x="90.0574%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (23 samples, 1.85%)</title><rect x="88.2825%" y="213" width="1.8459%" height="15" fill="rgb(233,175,4)" fg:x="1100" fg:w="23"/><text x="88.5325%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="89.7271%" y="197" width="0.4013%" height="15" fill="rgb(221,66,45)" fg:x="1118" fg:w="5"/><text x="89.9771%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="89.9679%" y="181" width="0.1605%" height="15" fill="rgb(221,178,18)" fg:x="1121" fg:w="2"/><text x="90.2179%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="90.1284%" y="213" width="0.0803%" height="15" fill="rgb(213,81,29)" fg:x="1123" fg:w="1"/><text x="90.3784%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (33 samples, 2.65%)</title><rect x="87.6404%" y="229" width="2.6485%" height="15" fill="rgb(220,89,49)" fg:x="1092" fg:w="33"/><text x="87.8904%" y="239.50">re..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="90.2087%" y="213" width="0.0803%" height="15" fill="rgb(227,60,33)" fg:x="1124" fg:w="1"/><text x="90.4587%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (34 samples, 2.73%)</title><rect x="87.6404%" y="277" width="2.7287%" height="15" fill="rgb(205,113,12)" fg:x="1092" fg:w="34"/><text x="87.8904%" y="287.50">&lt;r..</text></g><g><title>regex::builders::string::RegexBuilder::build (34 samples, 2.73%)</title><rect x="87.6404%" y="261" width="2.7287%" height="15" fill="rgb(211,32,1)" fg:x="1092" fg:w="34"/><text x="87.8904%" y="271.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (34 samples, 2.73%)</title><rect x="87.6404%" y="245" width="2.7287%" height="15" fill="rgb(246,2,12)" fg:x="1092" fg:w="34"/><text x="87.8904%" y="255.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="90.2889%" y="229" width="0.0803%" height="15" fill="rgb(243,37,27)" fg:x="1125" fg:w="1"/><text x="90.5389%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="90.2889%" y="213" width="0.0803%" height="15" fill="rgb(248,211,31)" fg:x="1125" fg:w="1"/><text x="90.5389%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="90.2889%" y="197" width="0.0803%" height="15" fill="rgb(242,146,47)" fg:x="1125" fg:w="1"/><text x="90.5389%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::unicode_fold_and_negate (1 samples, 0.08%)</title><rect x="90.2889%" y="181" width="0.0803%" height="15" fill="rgb(206,70,20)" fg:x="1125" fg:w="1"/><text x="90.5389%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="90.3692%" y="277" width="0.0803%" height="15" fill="rgb(215,10,51)" fg:x="1126" fg:w="1"/><text x="90.6192%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.3692%" y="261" width="0.0803%" height="15" fill="rgb(243,178,53)" fg:x="1126" fg:w="1"/><text x="90.6192%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="90.5297%" y="213" width="0.1605%" height="15" fill="rgb(233,221,20)" fg:x="1128" fg:w="2"/><text x="90.7797%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.6100%" y="197" width="0.0803%" height="15" fill="rgb(218,95,35)" fg:x="1129" fg:w="1"/><text x="90.8600%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.6100%" y="181" width="0.0803%" height="15" fill="rgb(229,13,5)" fg:x="1129" fg:w="1"/><text x="90.8600%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (43 samples, 3.45%)</title><rect x="87.3997%" y="293" width="3.4510%" height="15" fill="rgb(252,164,30)" fg:x="1089" fg:w="43"/><text x="87.6497%" y="303.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="90.4494%" y="277" width="0.4013%" height="15" fill="rgb(232,68,36)" fg:x="1127" fg:w="5"/><text x="90.6994%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="90.4494%" y="261" width="0.4013%" height="15" fill="rgb(219,59,54)" fg:x="1127" fg:w="5"/><text x="90.6994%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="90.4494%" y="245" width="0.4013%" height="15" fill="rgb(250,92,33)" fg:x="1127" fg:w="5"/><text x="90.6994%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="90.5297%" y="229" width="0.3210%" height="15" fill="rgb(229,162,54)" fg:x="1128" fg:w="4"/><text x="90.7797%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="90.6902%" y="213" width="0.1605%" height="15" fill="rgb(244,114,52)" fg:x="1130" fg:w="2"/><text x="90.9402%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.7705%" y="197" width="0.0803%" height="15" fill="rgb(212,211,43)" fg:x="1131" fg:w="1"/><text x="91.0205%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.7705%" y="181" width="0.0803%" height="15" fill="rgb(226,147,8)" fg:x="1131" fg:w="1"/><text x="91.0205%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.7705%" y="165" width="0.0803%" height="15" fill="rgb(226,23,13)" fg:x="1131" fg:w="1"/><text x="91.0205%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.8507%" y="229" width="0.0803%" height="15" fill="rgb(240,63,4)" fg:x="1132" fg:w="1"/><text x="91.1007%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.8507%" y="213" width="0.0803%" height="15" fill="rgb(221,1,32)" fg:x="1132" fg:w="1"/><text x="91.1007%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="90.9310%" y="229" width="0.0803%" height="15" fill="rgb(242,117,10)" fg:x="1133" fg:w="1"/><text x="91.1810%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.9310%" y="213" width="0.0803%" height="15" fill="rgb(249,172,44)" fg:x="1133" fg:w="1"/><text x="91.1810%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.9310%" y="197" width="0.0803%" height="15" fill="rgb(244,46,45)" fg:x="1133" fg:w="1"/><text x="91.1810%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="91.0112%" y="229" width="0.0803%" height="15" fill="rgb(206,43,17)" fg:x="1134" fg:w="1"/><text x="91.2612%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.1717%" y="197" width="0.0803%" height="15" fill="rgb(239,218,39)" fg:x="1136" fg:w="1"/><text x="91.4217%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="91.1717%" y="213" width="0.5618%" height="15" fill="rgb(208,169,54)" fg:x="1136" fg:w="7"/><text x="91.4217%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="91.2520%" y="197" width="0.4815%" height="15" fill="rgb(247,25,42)" fg:x="1137" fg:w="6"/><text x="91.5020%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.6533%" y="181" width="0.0803%" height="15" fill="rgb(226,23,31)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (3 samples, 0.24%)</title><rect x="91.7335%" y="213" width="0.2408%" height="15" fill="rgb(247,16,28)" fg:x="1143" fg:w="3"/><text x="91.9835%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="91.7335%" y="197" width="0.2408%" height="15" fill="rgb(231,147,38)" fg:x="1143" fg:w="3"/><text x="91.9835%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="91.7335%" y="181" width="0.2408%" height="15" fill="rgb(253,81,48)" fg:x="1143" fg:w="3"/><text x="91.9835%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="91.7335%" y="165" width="0.2408%" height="15" fill="rgb(249,222,43)" fg:x="1143" fg:w="3"/><text x="91.9835%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="91.8138%" y="149" width="0.1605%" height="15" fill="rgb(221,3,27)" fg:x="1144" fg:w="2"/><text x="92.0638%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="91.9743%" y="117" width="0.0803%" height="15" fill="rgb(228,180,5)" fg:x="1146" fg:w="1"/><text x="92.2243%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.9743%" y="101" width="0.0803%" height="15" fill="rgb(227,131,42)" fg:x="1146" fg:w="1"/><text x="92.2243%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.9743%" y="85" width="0.0803%" height="15" fill="rgb(212,3,39)" fg:x="1146" fg:w="1"/><text x="92.2243%" y="95.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="92.2953%" y="101" width="0.1605%" height="15" fill="rgb(226,45,5)" fg:x="1150" fg:w="2"/><text x="92.5453%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="92.4559%" y="101" width="0.0803%" height="15" fill="rgb(215,167,45)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="92.5361%" y="101" width="0.0803%" height="15" fill="rgb(250,218,53)" fg:x="1153" fg:w="1"/><text x="92.7861%" y="111.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="92.6966%" y="69" width="0.1605%" height="15" fill="rgb(207,140,0)" fg:x="1155" fg:w="2"/><text x="92.9466%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.8571%" y="69" width="0.0803%" height="15" fill="rgb(238,133,51)" fg:x="1157" fg:w="1"/><text x="93.1071%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="92.6164%" y="101" width="0.4013%" height="15" fill="rgb(218,203,53)" fg:x="1154" fg:w="5"/><text x="92.8664%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="92.6164%" y="85" width="0.4013%" height="15" fill="rgb(226,184,25)" fg:x="1154" fg:w="5"/><text x="92.8664%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="92.9374%" y="69" width="0.0803%" height="15" fill="rgb(231,121,21)" fg:x="1158" fg:w="1"/><text x="93.1874%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="92.9374%" y="53" width="0.0803%" height="15" fill="rgb(251,14,34)" fg:x="1158" fg:w="1"/><text x="93.1874%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.0177%" y="69" width="0.0803%" height="15" fill="rgb(249,193,11)" fg:x="1159" fg:w="1"/><text x="93.2677%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (18 samples, 1.44%)</title><rect x="93.0177%" y="101" width="1.4446%" height="15" fill="rgb(220,172,37)" fg:x="1159" fg:w="18"/><text x="93.2677%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (18 samples, 1.44%)</title><rect x="93.0177%" y="85" width="1.4446%" height="15" fill="rgb(231,229,43)" fg:x="1159" fg:w="18"/><text x="93.2677%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 1.36%)</title><rect x="93.0979%" y="69" width="1.3644%" height="15" fill="rgb(250,161,5)" fg:x="1160" fg:w="17"/><text x="93.3479%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="94.4623%" y="101" width="0.1605%" height="15" fill="rgb(218,225,18)" fg:x="1177" fg:w="2"/><text x="94.7123%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="94.4623%" y="85" width="0.1605%" height="15" fill="rgb(245,45,42)" fg:x="1177" fg:w="2"/><text x="94.7123%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 2.89%)</title><rect x="91.9743%" y="197" width="2.8892%" height="15" fill="rgb(211,115,1)" fg:x="1146" fg:w="36"/><text x="92.2243%" y="207.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (36 samples, 2.89%)</title><rect x="91.9743%" y="181" width="2.8892%" height="15" fill="rgb(248,133,52)" fg:x="1146" fg:w="36"/><text x="92.2243%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (36 samples, 2.89%)</title><rect x="91.9743%" y="165" width="2.8892%" height="15" fill="rgb(238,100,21)" fg:x="1146" fg:w="36"/><text x="92.2243%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (36 samples, 2.89%)</title><rect x="91.9743%" y="149" width="2.8892%" height="15" fill="rgb(247,144,11)" fg:x="1146" fg:w="36"/><text x="92.2243%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (36 samples, 2.89%)</title><rect x="91.9743%" y="133" width="2.8892%" height="15" fill="rgb(206,164,16)" fg:x="1146" fg:w="36"/><text x="92.2243%" y="143.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (35 samples, 2.81%)</title><rect x="92.0546%" y="117" width="2.8090%" height="15" fill="rgb(222,34,3)" fg:x="1147" fg:w="35"/><text x="92.3046%" y="127.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="94.6228%" y="101" width="0.2408%" height="15" fill="rgb(248,82,4)" fg:x="1179" fg:w="3"/><text x="94.8728%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="94.8636%" y="181" width="0.0803%" height="15" fill="rgb(228,81,46)" fg:x="1182" fg:w="1"/><text x="95.1136%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (50 samples, 4.01%)</title><rect x="91.0915%" y="229" width="4.0128%" height="15" fill="rgb(227,67,47)" fg:x="1135" fg:w="50"/><text x="91.3415%" y="239.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (39 samples, 3.13%)</title><rect x="91.9743%" y="213" width="3.1300%" height="15" fill="rgb(215,93,53)" fg:x="1146" fg:w="39"/><text x="92.2243%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="94.8636%" y="197" width="0.2408%" height="15" fill="rgb(248,194,39)" fg:x="1182" fg:w="3"/><text x="95.1136%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="94.9438%" y="181" width="0.1605%" height="15" fill="rgb(215,5,19)" fg:x="1183" fg:w="2"/><text x="95.1938%" y="191.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="95.1043%" y="229" width="0.0803%" height="15" fill="rgb(226,215,51)" fg:x="1185" fg:w="1"/><text x="95.3543%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="95.1043%" y="213" width="0.0803%" height="15" fill="rgb(225,56,26)" fg:x="1185" fg:w="1"/><text x="95.3543%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="95.1043%" y="197" width="0.0803%" height="15" fill="rgb(222,75,29)" fg:x="1185" fg:w="1"/><text x="95.3543%" y="207.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="95.1043%" y="181" width="0.0803%" height="15" fill="rgb(236,139,6)" fg:x="1185" fg:w="1"/><text x="95.3543%" y="191.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="95.1043%" y="165" width="0.0803%" height="15" fill="rgb(223,137,36)" fg:x="1185" fg:w="1"/><text x="95.3543%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="95.1846%" y="229" width="0.2408%" height="15" fill="rgb(226,99,2)" fg:x="1186" fg:w="3"/><text x="95.4346%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="95.1846%" y="213" width="0.2408%" height="15" fill="rgb(206,133,23)" fg:x="1186" fg:w="3"/><text x="95.4346%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.3451%" y="197" width="0.0803%" height="15" fill="rgb(243,173,15)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.3451%" y="181" width="0.0803%" height="15" fill="rgb(228,69,28)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="95.3451%" y="165" width="0.0803%" height="15" fill="rgb(212,51,22)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="95.4254%" y="197" width="0.1605%" height="15" fill="rgb(227,113,0)" fg:x="1189" fg:w="2"/><text x="95.6754%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="95.4254%" y="181" width="0.1605%" height="15" fill="rgb(252,84,27)" fg:x="1189" fg:w="2"/><text x="95.6754%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.5056%" y="165" width="0.0803%" height="15" fill="rgb(223,145,39)" fg:x="1190" fg:w="1"/><text x="95.7556%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5056%" y="149" width="0.0803%" height="15" fill="rgb(239,219,30)" fg:x="1190" fg:w="1"/><text x="95.7556%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.5859%" y="197" width="0.0803%" height="15" fill="rgb(224,196,39)" fg:x="1191" fg:w="1"/><text x="95.8359%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.5859%" y="181" width="0.0803%" height="15" fill="rgb(205,35,43)" fg:x="1191" fg:w="1"/><text x="95.8359%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (61 samples, 4.90%)</title><rect x="90.8507%" y="277" width="4.8957%" height="15" fill="rgb(228,201,21)" fg:x="1132" fg:w="61"/><text x="91.1007%" y="287.50">&lt;regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (61 samples, 4.90%)</title><rect x="90.8507%" y="261" width="4.8957%" height="15" fill="rgb(237,118,16)" fg:x="1132" fg:w="61"/><text x="91.1007%" y="271.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (61 samples, 4.90%)</title><rect x="90.8507%" y="245" width="4.8957%" height="15" fill="rgb(241,17,19)" fg:x="1132" fg:w="61"/><text x="91.1007%" y="255.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="95.4254%" y="229" width="0.3210%" height="15" fill="rgb(214,10,25)" fg:x="1189" fg:w="4"/><text x="95.6754%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="95.4254%" y="213" width="0.3210%" height="15" fill="rgb(238,37,29)" fg:x="1189" fg:w="4"/><text x="95.6754%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="95.6661%" y="197" width="0.0803%" height="15" fill="rgb(253,83,25)" fg:x="1192" fg:w="1"/><text x="95.9161%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.7464%" y="245" width="0.0803%" height="15" fill="rgb(234,192,12)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.7464%" y="229" width="0.0803%" height="15" fill="rgb(241,216,45)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.7464%" y="213" width="0.0803%" height="15" fill="rgb(242,22,33)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.8266%" y="229" width="0.0803%" height="15" fill="rgb(231,105,49)" fg:x="1194" fg:w="1"/><text x="96.0766%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="95.7464%" y="277" width="0.3210%" height="15" fill="rgb(218,204,15)" fg:x="1193" fg:w="4"/><text x="95.9964%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="95.7464%" y="261" width="0.3210%" height="15" fill="rgb(235,138,41)" fg:x="1193" fg:w="4"/><text x="95.9964%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="95.8266%" y="245" width="0.2408%" height="15" fill="rgb(246,0,9)" fg:x="1194" fg:w="3"/><text x="96.0766%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="95.9069%" y="229" width="0.1605%" height="15" fill="rgb(210,74,4)" fg:x="1195" fg:w="2"/><text x="96.1569%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.9872%" y="213" width="0.0803%" height="15" fill="rgb(250,60,41)" fg:x="1196" fg:w="1"/><text x="96.2372%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (66 samples, 5.30%)</title><rect x="90.8507%" y="293" width="5.2970%" height="15" fill="rgb(220,115,12)" fg:x="1132" fg:w="66"/><text x="91.1007%" y="303.50">indefi..</text></g><g><title>regex::regex::string::Regex::is_match_at (1 samples, 0.08%)</title><rect x="96.0674%" y="277" width="0.0803%" height="15" fill="rgb(237,100,13)" fg:x="1197" fg:w="1"/><text x="96.3174%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="96.0674%" y="261" width="0.0803%" height="15" fill="rgb(213,55,26)" fg:x="1197" fg:w="1"/><text x="96.3174%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="96.0674%" y="245" width="0.0803%" height="15" fill="rgb(216,17,4)" fg:x="1197" fg:w="1"/><text x="96.3174%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="96.0674%" y="229" width="0.0803%" height="15" fill="rgb(220,153,47)" fg:x="1197" fg:w="1"/><text x="96.3174%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="96.0674%" y="213" width="0.0803%" height="15" fill="rgb(215,131,9)" fg:x="1197" fg:w="1"/><text x="96.3174%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="96.0674%" y="197" width="0.0803%" height="15" fill="rgb(233,46,42)" fg:x="1197" fg:w="1"/><text x="96.3174%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="96.1477%" y="197" width="0.1605%" height="15" fill="rgb(226,86,7)" fg:x="1198" fg:w="2"/><text x="96.3977%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="96.1477%" y="181" width="0.1605%" height="15" fill="rgb(239,226,21)" fg:x="1198" fg:w="2"/><text x="96.3977%" y="191.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.2279%" y="165" width="0.0803%" height="15" fill="rgb(244,137,22)" fg:x="1199" fg:w="1"/><text x="96.4779%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.2279%" y="149" width="0.0803%" height="15" fill="rgb(211,139,35)" fg:x="1199" fg:w="1"/><text x="96.4779%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="96.3082%" y="165" width="0.2408%" height="15" fill="rgb(214,62,50)" fg:x="1200" fg:w="3"/><text x="96.5582%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.48%)</title><rect x="96.1477%" y="213" width="0.4815%" height="15" fill="rgb(212,113,44)" fg:x="1198" fg:w="6"/><text x="96.3977%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="96.3082%" y="197" width="0.3210%" height="15" fill="rgb(226,150,43)" fg:x="1200" fg:w="4"/><text x="96.5582%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="96.3082%" y="181" width="0.3210%" height="15" fill="rgb(250,71,37)" fg:x="1200" fg:w="4"/><text x="96.5582%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="96.5490%" y="165" width="0.0803%" height="15" fill="rgb(219,76,19)" fg:x="1203" fg:w="1"/><text x="96.7990%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6292%" y="181" width="0.0803%" height="15" fill="rgb(250,39,11)" fg:x="1204" fg:w="1"/><text x="96.8792%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6292%" y="165" width="0.0803%" height="15" fill="rgb(230,64,31)" fg:x="1204" fg:w="1"/><text x="96.8792%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="96.7095%" y="165" width="0.0803%" height="15" fill="rgb(208,222,23)" fg:x="1205" fg:w="1"/><text x="96.9595%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (9 samples, 0.72%)</title><rect x="96.1477%" y="261" width="0.7223%" height="15" fill="rgb(227,125,18)" fg:x="1198" fg:w="9"/><text x="96.3977%" y="271.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (9 samples, 0.72%)</title><rect x="96.1477%" y="245" width="0.7223%" height="15" fill="rgb(234,210,9)" fg:x="1198" fg:w="9"/><text x="96.3977%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9 samples, 0.72%)</title><rect x="96.1477%" y="229" width="0.7223%" height="15" fill="rgb(217,127,24)" fg:x="1198" fg:w="9"/><text x="96.3977%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="96.6292%" y="213" width="0.2408%" height="15" fill="rgb(239,141,48)" fg:x="1204" fg:w="3"/><text x="96.8792%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="96.6292%" y="197" width="0.2408%" height="15" fill="rgb(227,109,8)" fg:x="1204" fg:w="3"/><text x="96.8792%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.7095%" y="181" width="0.1605%" height="15" fill="rgb(235,184,23)" fg:x="1205" fg:w="2"/><text x="96.9595%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.7897%" y="165" width="0.0803%" height="15" fill="rgb(227,226,48)" fg:x="1206" fg:w="1"/><text x="97.0397%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.7897%" y="149" width="0.0803%" height="15" fill="rgb(206,150,11)" fg:x="1206" fg:w="1"/><text x="97.0397%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.7897%" y="133" width="0.0803%" height="15" fill="rgb(254,2,33)" fg:x="1206" fg:w="1"/><text x="97.0397%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7897%" y="117" width="0.0803%" height="15" fill="rgb(243,160,20)" fg:x="1206" fg:w="1"/><text x="97.0397%" y="127.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (129 samples, 10.35%)</title><rect x="86.5971%" y="373" width="10.3531%" height="15" fill="rgb(218,208,30)" fg:x="1079" fg:w="129"/><text x="86.8471%" y="383.50">&lt;&amp;kernel::model..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (119 samples, 9.55%)</title><rect x="87.3997%" y="357" width="9.5506%" height="15" fill="rgb(224,120,49)" fg:x="1089" fg:w="119"/><text x="87.6497%" y="367.50">plugins_core::..</text></g><g><title>indefinite::indefinite (119 samples, 9.55%)</title><rect x="87.3997%" y="341" width="9.5506%" height="15" fill="rgb(246,12,2)" fg:x="1089" fg:w="119"/><text x="87.6497%" y="351.50">indefinite::in..</text></g><g><title>indefinite::methods::indefinite (119 samples, 9.55%)</title><rect x="87.3997%" y="325" width="9.5506%" height="15" fill="rgb(236,117,3)" fg:x="1089" fg:w="119"/><text x="87.6497%" y="335.50">indefinite::me..</text></g><g><title>indefinite::methods::apply_rules (119 samples, 9.55%)</title><rect x="87.3997%" y="309" width="9.5506%" height="15" fill="rgb(216,128,52)" fg:x="1089" fg:w="119"/><text x="87.6497%" y="319.50">indefinite::me..</text></g><g><title>indefinite::rules::other::Other::run (10 samples, 0.80%)</title><rect x="96.1477%" y="293" width="0.8026%" height="15" fill="rgb(246,145,19)" fg:x="1198" fg:w="10"/><text x="96.3977%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (10 samples, 0.80%)</title><rect x="96.1477%" y="277" width="0.8026%" height="15" fill="rgb(222,11,46)" fg:x="1198" fg:w="10"/><text x="96.3977%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="96.8700%" y="261" width="0.0803%" height="15" fill="rgb(245,82,36)" fg:x="1207" fg:w="1"/><text x="97.1200%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="96.8700%" y="245" width="0.0803%" height="15" fill="rgb(250,73,51)" fg:x="1207" fg:w="1"/><text x="97.1200%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="96.8700%" y="229" width="0.0803%" height="15" fill="rgb(221,189,23)" fg:x="1207" fg:w="1"/><text x="97.1200%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="96.8700%" y="213" width="0.0803%" height="15" fill="rgb(210,33,7)" fg:x="1207" fg:w="1"/><text x="97.1200%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="96.8700%" y="197" width="0.0803%" height="15" fill="rgb(210,107,22)" fg:x="1207" fg:w="1"/><text x="97.1200%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="96.8700%" y="181" width="0.0803%" height="15" fill="rgb(222,116,37)" fg:x="1207" fg:w="1"/><text x="97.1200%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9502%" y="357" width="0.0803%" height="15" fill="rgb(254,17,48)" fg:x="1208" fg:w="1"/><text x="97.2002%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9502%" y="341" width="0.0803%" height="15" fill="rgb(224,36,32)" fg:x="1208" fg:w="1"/><text x="97.2002%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9502%" y="325" width="0.0803%" height="15" fill="rgb(232,90,46)" fg:x="1208" fg:w="1"/><text x="97.2002%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="96.9502%" y="373" width="0.3210%" height="15" fill="rgb(241,66,40)" fg:x="1208" fg:w="4"/><text x="97.2002%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="97.0305%" y="357" width="0.2408%" height="15" fill="rgb(249,184,29)" fg:x="1209" fg:w="3"/><text x="97.2805%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.0305%" y="341" width="0.2408%" height="15" fill="rgb(231,181,1)" fg:x="1209" fg:w="3"/><text x="97.2805%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="97.1108%" y="325" width="0.1605%" height="15" fill="rgb(224,94,2)" fg:x="1210" fg:w="2"/><text x="97.3608%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="97.1108%" y="309" width="0.1605%" height="15" fill="rgb(229,170,15)" fg:x="1210" fg:w="2"/><text x="97.3608%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="97.1108%" y="293" width="0.1605%" height="15" fill="rgb(240,127,35)" fg:x="1210" fg:w="2"/><text x="97.3608%" y="303.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.1108%" y="277" width="0.1605%" height="15" fill="rgb(248,196,34)" fg:x="1210" fg:w="2"/><text x="97.3608%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.1108%" y="261" width="0.1605%" height="15" fill="rgb(236,137,7)" fg:x="1210" fg:w="2"/><text x="97.3608%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.1108%" y="245" width="0.1605%" height="15" fill="rgb(235,127,16)" fg:x="1210" fg:w="2"/><text x="97.3608%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.1910%" y="229" width="0.0803%" height="15" fill="rgb(250,192,54)" fg:x="1211" fg:w="1"/><text x="97.4410%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.1910%" y="213" width="0.0803%" height="15" fill="rgb(218,98,20)" fg:x="1211" fg:w="1"/><text x="97.4410%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.2713%" y="373" width="0.0803%" height="15" fill="rgb(230,176,47)" fg:x="1212" fg:w="1"/><text x="97.5213%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="97.3515%" y="373" width="0.1605%" height="15" fill="rgb(244,2,33)" fg:x="1213" fg:w="2"/><text x="97.6015%" y="383.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (2 samples, 0.16%)</title><rect x="97.3515%" y="357" width="0.1605%" height="15" fill="rgb(231,100,17)" fg:x="1213" fg:w="2"/><text x="97.6015%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="97.3515%" y="341" width="0.1605%" height="15" fill="rgb(245,23,12)" fg:x="1213" fg:w="2"/><text x="97.6015%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="97.3515%" y="325" width="0.1605%" height="15" fill="rgb(249,55,22)" fg:x="1213" fg:w="2"/><text x="97.6015%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="97.3515%" y="309" width="0.1605%" height="15" fill="rgb(207,134,9)" fg:x="1213" fg:w="2"/><text x="97.6015%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.4318%" y="293" width="0.0803%" height="15" fill="rgb(218,134,0)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.4318%" y="277" width="0.0803%" height="15" fill="rgb(213,212,33)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.4318%" y="261" width="0.0803%" height="15" fill="rgb(252,106,18)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.4318%" y="245" width="0.0803%" height="15" fill="rgb(208,126,42)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.4318%" y="229" width="0.0803%" height="15" fill="rgb(246,175,29)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.4318%" y="213" width="0.0803%" height="15" fill="rgb(215,13,50)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.4318%" y="197" width="0.0803%" height="15" fill="rgb(216,172,15)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.4318%" y="181" width="0.0803%" height="15" fill="rgb(212,103,13)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.4318%" y="165" width="0.0803%" height="15" fill="rgb(231,171,36)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.4318%" y="149" width="0.0803%" height="15" fill="rgb(250,123,20)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.4318%" y="133" width="0.0803%" height="15" fill="rgb(212,53,50)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.4318%" y="117" width="0.0803%" height="15" fill="rgb(243,54,12)" fg:x="1214" fg:w="1"/><text x="97.6818%" y="127.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (139 samples, 11.16%)</title><rect x="86.4366%" y="533" width="11.1557%" height="15" fill="rgb(234,101,34)" fg:x="1077" fg:w="139"/><text x="86.6866%" y="543.50">kernel::plugins:..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (139 samples, 11.16%)</title><rect x="86.4366%" y="517" width="11.1557%" height="15" fill="rgb(254,67,22)" fg:x="1077" fg:w="139"/><text x="86.6866%" y="527.50">&lt;plugins_dynlib:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (139 samples, 11.16%)</title><rect x="86.4366%" y="501" width="11.1557%" height="15" fill="rgb(250,35,47)" fg:x="1077" fg:w="139"/><text x="86.6866%" y="511.50">kernel::plugins:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (139 samples, 11.16%)</title><rect x="86.4366%" y="485" width="11.1557%" height="15" fill="rgb(226,126,38)" fg:x="1077" fg:w="139"/><text x="86.6866%" y="495.50">core::ops::funct..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (139 samples, 11.16%)</title><rect x="86.4366%" y="469" width="11.1557%" height="15" fill="rgb(216,138,53)" fg:x="1077" fg:w="139"/><text x="86.6866%" y="479.50">kernel::plugins:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (139 samples, 11.16%)</title><rect x="86.4366%" y="453" width="11.1557%" height="15" fill="rgb(246,199,43)" fg:x="1077" fg:w="139"/><text x="86.6866%" y="463.50">core::ops::funct..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (139 samples, 11.16%)</title><rect x="86.4366%" y="437" width="11.1557%" height="15" fill="rgb(232,125,11)" fg:x="1077" fg:w="139"/><text x="86.6866%" y="447.50">&lt;alloc::boxed::B..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (139 samples, 11.16%)</title><rect x="86.4366%" y="421" width="11.1557%" height="15" fill="rgb(218,219,45)" fg:x="1077" fg:w="139"/><text x="86.6866%" y="431.50">&lt;engine::session..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (137 samples, 11.00%)</title><rect x="86.5971%" y="405" width="10.9952%" height="15" fill="rgb(216,102,54)" fg:x="1079" fg:w="137"/><text x="86.8471%" y="415.50">&lt;plugins_core::l..</text></g><g><title>plugins_core::looking::model::new_area_observation (137 samples, 11.00%)</title><rect x="86.5971%" y="389" width="10.9952%" height="15" fill="rgb(250,228,7)" fg:x="1079" fg:w="137"/><text x="86.8471%" y="399.50">plugins_core::lo..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="97.5120%" y="373" width="0.0803%" height="15" fill="rgb(226,125,25)" fg:x="1215" fg:w="1"/><text x="97.7620%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6726%" y="469" width="0.0803%" height="15" fill="rgb(224,165,27)" fg:x="1217" fg:w="1"/><text x="97.9226%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.6726%" y="485" width="0.1605%" height="15" fill="rgb(233,86,3)" fg:x="1217" fg:w="2"/><text x="97.9226%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7528%" y="469" width="0.0803%" height="15" fill="rgb(228,116,20)" fg:x="1218" fg:w="1"/><text x="98.0028%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7528%" y="453" width="0.0803%" height="15" fill="rgb(209,192,17)" fg:x="1218" fg:w="1"/><text x="98.0028%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8331%" y="421" width="0.0803%" height="15" fill="rgb(224,88,34)" fg:x="1219" fg:w="1"/><text x="98.0831%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8331%" y="405" width="0.0803%" height="15" fill="rgb(233,38,6)" fg:x="1219" fg:w="1"/><text x="98.0831%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8331%" y="389" width="0.0803%" height="15" fill="rgb(212,59,30)" fg:x="1219" fg:w="1"/><text x="98.0831%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8331%" y="373" width="0.0803%" height="15" fill="rgb(213,80,3)" fg:x="1219" fg:w="1"/><text x="98.0831%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="97.9133%" y="421" width="0.0803%" height="15" fill="rgb(251,178,7)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9133%" y="405" width="0.0803%" height="15" fill="rgb(213,154,26)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9133%" y="389" width="0.0803%" height="15" fill="rgb(238,165,49)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.9133%" y="373" width="0.0803%" height="15" fill="rgb(248,91,46)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9133%" y="357" width="0.0803%" height="15" fill="rgb(244,21,52)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.9133%" y="341" width="0.0803%" height="15" fill="rgb(247,122,20)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9133%" y="325" width="0.0803%" height="15" fill="rgb(218,27,9)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9133%" y="309" width="0.0803%" height="15" fill="rgb(246,7,6)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.9133%" y="293" width="0.0803%" height="15" fill="rgb(227,135,54)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9133%" y="277" width="0.0803%" height="15" fill="rgb(247,14,11)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9133%" y="261" width="0.0803%" height="15" fill="rgb(206,149,34)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.9133%" y="245" width="0.0803%" height="15" fill="rgb(227,228,4)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="255.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="97.8331%" y="485" width="0.3210%" height="15" fill="rgb(238,218,28)" fg:x="1219" fg:w="4"/><text x="98.0831%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="97.8331%" y="469" width="0.3210%" height="15" fill="rgb(252,86,40)" fg:x="1219" fg:w="4"/><text x="98.0831%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="97.8331%" y="453" width="0.3210%" height="15" fill="rgb(251,225,11)" fg:x="1219" fg:w="4"/><text x="98.0831%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="97.8331%" y="437" width="0.3210%" height="15" fill="rgb(206,46,49)" fg:x="1219" fg:w="4"/><text x="98.0831%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="97.9936%" y="421" width="0.1605%" height="15" fill="rgb(245,128,24)" fg:x="1221" fg:w="2"/><text x="98.2436%" y="431.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="97.9936%" y="405" width="0.1605%" height="15" fill="rgb(219,177,34)" fg:x="1221" fg:w="2"/><text x="98.2436%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.9936%" y="389" width="0.1605%" height="15" fill="rgb(218,60,48)" fg:x="1221" fg:w="2"/><text x="98.2436%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.9936%" y="373" width="0.1605%" height="15" fill="rgb(221,11,5)" fg:x="1221" fg:w="2"/><text x="98.2436%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0738%" y="357" width="0.0803%" height="15" fill="rgb(220,148,13)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0738%" y="341" width="0.0803%" height="15" fill="rgb(210,16,3)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0738%" y="325" width="0.0803%" height="15" fill="rgb(236,80,2)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0738%" y="309" width="0.0803%" height="15" fill="rgb(239,129,19)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.0738%" y="293" width="0.0803%" height="15" fill="rgb(220,106,35)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.0738%" y="277" width="0.0803%" height="15" fill="rgb(252,139,45)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="287.50"></text></g><g><title>plugins_core::tools::contained_by (7 samples, 0.56%)</title><rect x="97.6726%" y="501" width="0.5618%" height="15" fill="rgb(229,8,36)" fg:x="1217" fg:w="7"/><text x="97.9226%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="98.1541%" y="485" width="0.0803%" height="15" fill="rgb(230,126,33)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.1541%" y="469" width="0.0803%" height="15" fill="rgb(239,140,21)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2343%" y="469" width="0.0803%" height="15" fill="rgb(254,104,9)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2343%" y="453" width="0.0803%" height="15" fill="rgb(239,52,14)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2343%" y="437" width="0.0803%" height="15" fill="rgb(208,227,44)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2343%" y="421" width="0.0803%" height="15" fill="rgb(246,18,19)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2343%" y="405" width="0.0803%" height="15" fill="rgb(235,228,25)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2343%" y="389" width="0.0803%" height="15" fill="rgb(240,156,20)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2343%" y="373" width="0.0803%" height="15" fill="rgb(224,8,20)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2343%" y="357" width="0.0803%" height="15" fill="rgb(214,12,52)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2343%" y="341" width="0.0803%" height="15" fill="rgb(211,220,47)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2343%" y="325" width="0.0803%" height="15" fill="rgb(250,173,5)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2343%" y="309" width="0.0803%" height="15" fill="rgb(250,125,52)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2343%" y="293" width="0.0803%" height="15" fill="rgb(209,133,18)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.2343%" y="277" width="0.0803%" height="15" fill="rgb(216,173,22)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.2343%" y="261" width="0.0803%" height="15" fill="rgb(205,3,22)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.2343%" y="245" width="0.0803%" height="15" fill="rgb(248,22,20)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.2343%" y="229" width="0.0803%" height="15" fill="rgb(233,6,29)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.2343%" y="213" width="0.0803%" height="15" fill="rgb(240,22,54)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.3146%" y="437" width="0.0803%" height="15" fill="rgb(231,133,32)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.3146%" y="421" width="0.0803%" height="15" fill="rgb(248,193,4)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.3146%" y="405" width="0.0803%" height="15" fill="rgb(211,178,46)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3146%" y="389" width="0.0803%" height="15" fill="rgb(224,5,42)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3146%" y="373" width="0.0803%" height="15" fill="rgb(239,176,25)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3146%" y="357" width="0.0803%" height="15" fill="rgb(245,187,50)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3146%" y="341" width="0.0803%" height="15" fill="rgb(248,24,15)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3146%" y="325" width="0.0803%" height="15" fill="rgb(205,166,13)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="335.50"></text></g><g><title>engine::session::Session::captured (153 samples, 12.28%)</title><rect x="86.1958%" y="677" width="12.2793%" height="15" fill="rgb(208,114,23)" fg:x="1074" fg:w="153"/><text x="86.4458%" y="687.50">engine::session::S..</text></g><g><title>engine::session::logs::capture (151 samples, 12.12%)</title><rect x="86.3563%" y="661" width="12.1188%" height="15" fill="rgb(239,127,18)" fg:x="1076" fg:w="151"/><text x="86.6063%" y="671.50">engine::session::l..</text></g><g><title>tracing_core::dispatcher::with_default (151 samples, 12.12%)</title><rect x="86.3563%" y="645" width="12.1188%" height="15" fill="rgb(219,154,28)" fg:x="1076" fg:w="151"/><text x="86.6063%" y="655.50">tracing_core::disp..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (151 samples, 12.12%)</title><rect x="86.3563%" y="629" width="12.1188%" height="15" fill="rgb(225,157,23)" fg:x="1076" fg:w="151"/><text x="86.6063%" y="639.50">&lt;engine::session::..</text></g><g><title>kernel::plugins::mw::apply_middleware (151 samples, 12.12%)</title><rect x="86.3563%" y="613" width="12.1188%" height="15" fill="rgb(219,8,6)" fg:x="1076" fg:w="151"/><text x="86.6063%" y="623.50">kernel::plugins::m..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (151 samples, 12.12%)</title><rect x="86.3563%" y="597" width="12.1188%" height="15" fill="rgb(212,47,6)" fg:x="1076" fg:w="151"/><text x="86.6063%" y="607.50">kernel::plugins::m..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (151 samples, 12.12%)</title><rect x="86.3563%" y="581" width="12.1188%" height="15" fill="rgb(224,190,4)" fg:x="1076" fg:w="151"/><text x="86.6063%" y="591.50">&lt;engine::session::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (150 samples, 12.04%)</title><rect x="86.4366%" y="565" width="12.0385%" height="15" fill="rgb(239,183,29)" fg:x="1077" fg:w="150"/><text x="86.6866%" y="575.50">kernel::plugins::m..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (150 samples, 12.04%)</title><rect x="86.4366%" y="549" width="12.0385%" height="15" fill="rgb(213,57,7)" fg:x="1077" fg:w="150"/><text x="86.6866%" y="559.50">&lt;plugins_rune::Run..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (11 samples, 0.88%)</title><rect x="97.5923%" y="533" width="0.8828%" height="15" fill="rgb(216,148,1)" fg:x="1216" fg:w="11"/><text x="97.8423%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (10 samples, 0.80%)</title><rect x="97.6726%" y="517" width="0.8026%" height="15" fill="rgb(236,182,29)" fg:x="1217" fg:w="10"/><text x="97.9226%" y="527.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="98.2343%" y="501" width="0.2408%" height="15" fill="rgb(244,120,48)" fg:x="1224" fg:w="3"/><text x="98.4843%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="98.2343%" y="485" width="0.2408%" height="15" fill="rgb(206,71,34)" fg:x="1224" fg:w="3"/><text x="98.4843%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.3146%" y="469" width="0.1605%" height="15" fill="rgb(242,32,6)" fg:x="1225" fg:w="2"/><text x="98.5646%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.3146%" y="453" width="0.1605%" height="15" fill="rgb(241,35,3)" fg:x="1225" fg:w="2"/><text x="98.5646%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3949%" y="437" width="0.0803%" height="15" fill="rgb(222,62,19)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3949%" y="421" width="0.0803%" height="15" fill="rgb(223,110,41)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.3949%" y="405" width="0.0803%" height="15" fill="rgb(208,224,4)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4751%" y="629" width="0.0803%" height="15" fill="rgb(241,137,19)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4751%" y="613" width="0.0803%" height="15" fill="rgb(244,24,17)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4751%" y="597" width="0.0803%" height="15" fill="rgb(245,178,49)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4751%" y="581" width="0.0803%" height="15" fill="rgb(219,160,38)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4751%" y="565" width="0.0803%" height="15" fill="rgb(228,137,14)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4751%" y="549" width="0.0803%" height="15" fill="rgb(237,134,11)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.4751%" y="533" width="0.0803%" height="15" fill="rgb(211,126,44)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.4751%" y="517" width="0.0803%" height="15" fill="rgb(226,171,33)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.4751%" y="501" width="0.0803%" height="15" fill="rgb(253,99,13)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4751%" y="485" width="0.0803%" height="15" fill="rgb(244,48,7)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4751%" y="469" width="0.0803%" height="15" fill="rgb(244,217,54)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.4751%" y="453" width="0.0803%" height="15" fill="rgb(224,15,18)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.4751%" y="437" width="0.0803%" height="15" fill="rgb(244,99,12)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.4751%" y="421" width="0.0803%" height="15" fill="rgb(233,226,8)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.4751%" y="405" width="0.0803%" height="15" fill="rgb(229,211,3)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.4751%" y="389" width="0.0803%" height="15" fill="rgb(216,140,21)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.5554%" y="581" width="0.1605%" height="15" fill="rgb(234,122,30)" fg:x="1228" fg:w="2"/><text x="98.8054%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.6356%" y="565" width="0.0803%" height="15" fill="rgb(236,25,46)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7159%" y="581" width="0.0803%" height="15" fill="rgb(217,52,54)" fg:x="1230" fg:w="1"/><text x="98.9659%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.7159%" y="565" width="0.0803%" height="15" fill="rgb(222,29,26)" fg:x="1230" fg:w="1"/><text x="98.9659%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.7159%" y="549" width="0.0803%" height="15" fill="rgb(216,177,29)" fg:x="1230" fg:w="1"/><text x="98.9659%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7159%" y="533" width="0.0803%" height="15" fill="rgb(247,136,51)" fg:x="1230" fg:w="1"/><text x="98.9659%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7159%" y="517" width="0.0803%" height="15" fill="rgb(231,47,47)" fg:x="1230" fg:w="1"/><text x="98.9659%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7159%" y="501" width="0.0803%" height="15" fill="rgb(211,192,36)" fg:x="1230" fg:w="1"/><text x="98.9659%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="98.7159%" y="485" width="0.0803%" height="15" fill="rgb(229,156,32)" fg:x="1230" fg:w="1"/><text x="98.9659%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.7159%" y="469" width="0.0803%" height="15" fill="rgb(248,213,20)" fg:x="1230" fg:w="1"/><text x="98.9659%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.7159%" y="453" width="0.0803%" height="15" fill="rgb(217,64,7)" fg:x="1230" fg:w="1"/><text x="98.9659%" y="463.50"></text></g><g><title>engine::session::internal::Added::find_refs (5 samples, 0.40%)</title><rect x="98.4751%" y="661" width="0.4013%" height="15" fill="rgb(232,142,8)" fg:x="1227" fg:w="5"/><text x="98.7251%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="98.4751%" y="645" width="0.4013%" height="15" fill="rgb(224,92,44)" fg:x="1227" fg:w="5"/><text x="98.7251%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.5554%" y="629" width="0.3210%" height="15" fill="rgb(214,169,17)" fg:x="1228" fg:w="4"/><text x="98.8054%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="98.5554%" y="613" width="0.3210%" height="15" fill="rgb(210,59,37)" fg:x="1228" fg:w="4"/><text x="98.8054%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="98.5554%" y="597" width="0.3210%" height="15" fill="rgb(214,116,48)" fg:x="1228" fg:w="4"/><text x="98.8054%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7961%" y="581" width="0.0803%" height="15" fill="rgb(244,191,6)" fg:x="1231" fg:w="1"/><text x="99.0461%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7961%" y="565" width="0.0803%" height="15" fill="rgb(241,50,52)" fg:x="1231" fg:w="1"/><text x="99.0461%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.7961%" y="549" width="0.0803%" height="15" fill="rgb(236,75,39)" fg:x="1231" fg:w="1"/><text x="99.0461%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7961%" y="533" width="0.0803%" height="15" fill="rgb(236,99,0)" fg:x="1231" fg:w="1"/><text x="99.0461%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7961%" y="517" width="0.0803%" height="15" fill="rgb(207,202,15)" fg:x="1231" fg:w="1"/><text x="99.0461%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7961%" y="501" width="0.0803%" height="15" fill="rgb(233,207,14)" fg:x="1231" fg:w="1"/><text x="99.0461%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9567%" y="645" width="0.0803%" height="15" fill="rgb(226,27,51)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9567%" y="629" width="0.0803%" height="15" fill="rgb(206,104,42)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9567%" y="613" width="0.0803%" height="15" fill="rgb(212,225,4)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9567%" y="597" width="0.0803%" height="15" fill="rgb(233,96,42)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.0369%" y="517" width="0.0803%" height="15" fill="rgb(229,21,32)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.0369%" y="501" width="0.0803%" height="15" fill="rgb(226,216,24)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.0369%" y="485" width="0.0803%" height="15" fill="rgb(221,163,17)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.0369%" y="469" width="0.0803%" height="15" fill="rgb(216,216,42)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.0369%" y="453" width="0.0803%" height="15" fill="rgb(240,118,7)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="98.4751%" y="677" width="0.7223%" height="15" fill="rgb(221,67,37)" fg:x="1227" fg:w="9"/><text x="98.7251%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="98.8764%" y="661" width="0.3210%" height="15" fill="rgb(241,32,44)" fg:x="1232" fg:w="4"/><text x="99.1264%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.0369%" y="645" width="0.1605%" height="15" fill="rgb(235,204,43)" fg:x="1234" fg:w="2"/><text x="99.2869%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.0369%" y="629" width="0.1605%" height="15" fill="rgb(213,116,10)" fg:x="1234" fg:w="2"/><text x="99.2869%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.0369%" y="613" width="0.1605%" height="15" fill="rgb(239,15,48)" fg:x="1234" fg:w="2"/><text x="99.2869%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.0369%" y="597" width="0.1605%" height="15" fill="rgb(207,123,36)" fg:x="1234" fg:w="2"/><text x="99.2869%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.0369%" y="581" width="0.1605%" height="15" fill="rgb(209,103,30)" fg:x="1234" fg:w="2"/><text x="99.2869%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.0369%" y="565" width="0.1605%" height="15" fill="rgb(238,100,19)" fg:x="1234" fg:w="2"/><text x="99.2869%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.0369%" y="549" width="0.1605%" height="15" fill="rgb(244,30,14)" fg:x="1234" fg:w="2"/><text x="99.2869%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.0369%" y="533" width="0.1605%" height="15" fill="rgb(249,174,6)" fg:x="1234" fg:w="2"/><text x="99.2869%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.1172%" y="517" width="0.0803%" height="15" fill="rgb(235,213,41)" fg:x="1235" fg:w="1"/><text x="99.3672%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1172%" y="501" width="0.0803%" height="15" fill="rgb(213,118,6)" fg:x="1235" fg:w="1"/><text x="99.3672%" y="511.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.1974%" y="677" width="0.0803%" height="15" fill="rgb(235,44,51)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.1974%" y="661" width="0.0803%" height="15" fill="rgb(217,9,53)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1974%" y="645" width="0.0803%" height="15" fill="rgb(237,172,34)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1974%" y="629" width="0.0803%" height="15" fill="rgb(206,206,11)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.1974%" y="613" width="0.0803%" height="15" fill="rgb(214,149,29)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1974%" y="597" width="0.0803%" height="15" fill="rgb(208,123,3)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1974%" y="581" width="0.0803%" height="15" fill="rgb(229,126,4)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.3579%" y="629" width="0.0803%" height="15" fill="rgb(222,92,36)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3579%" y="613" width="0.0803%" height="15" fill="rgb(216,39,41)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3579%" y="597" width="0.0803%" height="15" fill="rgb(253,127,28)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3579%" y="581" width="0.0803%" height="15" fill="rgb(249,152,51)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3579%" y="565" width="0.0803%" height="15" fill="rgb(209,123,42)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3579%" y="549" width="0.0803%" height="15" fill="rgb(241,118,22)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.3579%" y="533" width="0.0803%" height="15" fill="rgb(208,25,7)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.3579%" y="517" width="0.0803%" height="15" fill="rgb(243,144,39)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.3579%" y="501" width="0.0803%" height="15" fill="rgb(250,50,5)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.3579%" y="485" width="0.0803%" height="15" fill="rgb(207,67,11)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.3579%" y="469" width="0.0803%" height="15" fill="rgb(245,204,40)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.3579%" y="453" width="0.0803%" height="15" fill="rgb(238,228,24)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.3579%" y="437" width="0.0803%" height="15" fill="rgb(217,116,22)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.3579%" y="421" width="0.0803%" height="15" fill="rgb(234,98,12)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.3579%" y="405" width="0.0803%" height="15" fill="rgb(242,170,50)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3579%" y="389" width="0.0803%" height="15" fill="rgb(235,7,5)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.4382%" y="581" width="0.0803%" height="15" fill="rgb(241,114,28)" fg:x="1239" fg:w="1"/><text x="99.6882%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5185%" y="533" width="0.0803%" height="15" fill="rgb(246,112,42)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5185%" y="517" width="0.0803%" height="15" fill="rgb(248,228,14)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.5185%" y="501" width="0.0803%" height="15" fill="rgb(208,133,18)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.4382%" y="629" width="0.2408%" height="15" fill="rgb(207,35,49)" fg:x="1239" fg:w="3"/><text x="99.6882%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.4382%" y="613" width="0.2408%" height="15" fill="rgb(205,68,36)" fg:x="1239" fg:w="3"/><text x="99.6882%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.4382%" y="597" width="0.2408%" height="15" fill="rgb(245,62,40)" fg:x="1239" fg:w="3"/><text x="99.6882%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.5185%" y="581" width="0.1605%" height="15" fill="rgb(228,27,24)" fg:x="1240" fg:w="2"/><text x="99.7685%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5185%" y="565" width="0.1605%" height="15" fill="rgb(253,19,12)" fg:x="1240" fg:w="2"/><text x="99.7685%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.5185%" y="549" width="0.1605%" height="15" fill="rgb(232,28,20)" fg:x="1240" fg:w="2"/><text x="99.7685%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5987%" y="533" width="0.0803%" height="15" fill="rgb(218,35,51)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5987%" y="517" width="0.0803%" height="15" fill="rgb(212,90,40)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.5987%" y="501" width="0.0803%" height="15" fill="rgb(220,172,12)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5987%" y="485" width="0.0803%" height="15" fill="rgb(226,159,20)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5987%" y="469" width="0.0803%" height="15" fill="rgb(234,205,16)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.5987%" y="453" width="0.0803%" height="15" fill="rgb(207,9,39)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5987%" y="437" width="0.0803%" height="15" fill="rgb(249,143,15)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5987%" y="421" width="0.0803%" height="15" fill="rgb(253,133,29)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6790%" y="501" width="0.0803%" height="15" fill="rgb(221,187,0)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6790%" y="485" width="0.0803%" height="15" fill="rgb(205,204,26)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6790%" y="469" width="0.0803%" height="15" fill="rgb(224,68,54)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6790%" y="453" width="0.0803%" height="15" fill="rgb(209,67,4)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6790%" y="437" width="0.0803%" height="15" fill="rgb(228,229,18)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6790%" y="421" width="0.0803%" height="15" fill="rgb(231,89,13)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6790%" y="405" width="0.0803%" height="15" fill="rgb(210,182,18)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6790%" y="565" width="0.1605%" height="15" fill="rgb(240,105,2)" fg:x="1242" fg:w="2"/><text x="99.9290%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6790%" y="549" width="0.1605%" height="15" fill="rgb(207,170,50)" fg:x="1242" fg:w="2"/><text x="99.9290%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6790%" y="533" width="0.1605%" height="15" fill="rgb(232,133,24)" fg:x="1242" fg:w="2"/><text x="99.9290%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6790%" y="517" width="0.1605%" height="15" fill="rgb(235,166,27)" fg:x="1242" fg:w="2"/><text x="99.9290%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7592%" y="501" width="0.0803%" height="15" fill="rgb(209,19,13)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="511.50"></text></g><g><title>all (1,246 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(226,79,39)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-e505a893 (1,246 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(222,163,10)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1055.50">simple-e505a893</text></g><g><title>_start (1,246 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(214,44,19)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(210,217,13)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(237,61,54)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,246 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(226,184,24)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,246 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(223,226,4)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,246 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(210,26,41)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,246 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(220,221,6)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,246 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(225,89,49)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,246 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(218,70,45)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,246 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(238,166,21)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,246 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(224,141,44)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,246 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(230,12,49)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,246 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(212,174,12)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,246 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(246,67,9)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(239,35,23)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,246 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(211,167,0)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,246 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(225,119,45)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (315 samples, 25.28%)</title><rect x="74.7191%" y="757" width="25.2809%" height="15" fill="rgb(210,162,6)" fg:x="931" fg:w="315"/><text x="74.9691%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (315 samples, 25.28%)</title><rect x="74.7191%" y="741" width="25.2809%" height="15" fill="rgb(208,118,35)" fg:x="931" fg:w="315"/><text x="74.9691%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (315 samples, 25.28%)</title><rect x="74.7191%" y="725" width="25.2809%" height="15" fill="rgb(239,4,53)" fg:x="931" fg:w="315"/><text x="74.9691%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (173 samples, 13.88%)</title><rect x="86.1156%" y="709" width="13.8844%" height="15" fill="rgb(213,130,21)" fg:x="1073" fg:w="173"/><text x="86.3656%" y="719.50">engine::session::Sess..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (173 samples, 13.88%)</title><rect x="86.1156%" y="693" width="13.8844%" height="15" fill="rgb(235,148,0)" fg:x="1073" fg:w="173"/><text x="86.3656%" y="703.50">engine::session::Sess..</text></g><g><title>kernel::model::EntityPtrResolver::world (9 samples, 0.72%)</title><rect x="99.2777%" y="677" width="0.7223%" height="15" fill="rgb(244,224,18)" fg:x="1237" fg:w="9"/><text x="99.5277%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="99.2777%" y="661" width="0.7223%" height="15" fill="rgb(211,214,4)" fg:x="1237" fg:w="9"/><text x="99.5277%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="99.3579%" y="645" width="0.6421%" height="15" fill="rgb(206,119,25)" fg:x="1238" fg:w="8"/><text x="99.6079%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="99.6790%" y="629" width="0.3210%" height="15" fill="rgb(243,93,47)" fg:x="1242" fg:w="4"/><text x="99.9290%" y="639.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="99.6790%" y="613" width="0.3210%" height="15" fill="rgb(224,194,6)" fg:x="1242" fg:w="4"/><text x="99.9290%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="99.6790%" y="597" width="0.3210%" height="15" fill="rgb(243,229,6)" fg:x="1242" fg:w="4"/><text x="99.9290%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="99.6790%" y="581" width="0.3210%" height="15" fill="rgb(207,23,50)" fg:x="1242" fg:w="4"/><text x="99.9290%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="99.8395%" y="565" width="0.1605%" height="15" fill="rgb(253,192,32)" fg:x="1244" fg:w="2"/><text x="100.0895%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="99.8395%" y="549" width="0.1605%" height="15" fill="rgb(213,21,6)" fg:x="1244" fg:w="2"/><text x="100.0895%" y="559.50"></text></g></svg></svg>